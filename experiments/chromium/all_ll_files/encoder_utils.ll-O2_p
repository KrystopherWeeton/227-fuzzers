; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/encoder_utils.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/encoder_utils.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }

@default_tx_type_probs = hidden local_unnamed_addr constant <{ <{ [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }> }>, <{ [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }> }>, [19 x [16 x i32]], <{ [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }> }>, <{ [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }> }>, [19 x [16 x i32]], <{ [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }> }> }> <{ <{ [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }> }> <{ [16 x i32] [i32 221, i32 189, i32 214, i32 292, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 38, i32 68, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 262, i32 203, i32 216, i32 239, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 37, i32 66, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 315, i32 231, i32 239, i32 226, i32 0, i32 0, i32 0, i32 0, i32 0, i32 13, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, [16 x i32] [i32 222, i32 188, i32 214, i32 287, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 50, i32 61, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 256, i32 182, i32 205, i32 282, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 21, i32 76, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 281, i32 214, i32 217, i32 222, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 48, i32 41, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 263, i32 194, i32 225, i32 225, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 15, i32 100, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, [16 x i32] [i32 170, i32 192, i32 242, i32 293, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 68, i32 58, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 199, i32 210, i32 213, i32 291, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 14, i32 96, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }> }>, <{ [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }> }> <{ [16 x i32] [i32 106, i32 69, i32 107, i32 278, i32 9, i32 15, i32 20, i32 45, i32 49, i32 23, i32 23, i32 88, i32 36, i32 74, i32 25, i32 57], [16 x i32] [i32 105, i32 72, i32 81, i32 98, i32 45, i32 49, i32 47, i32 50, i32 56, i32 72, i32 30, i32 81, i32 33, i32 95, i32 27, i32 83], [16 x i32] [i32 211, i32 105, i32 109, i32 120, i32 57, i32 62, i32 43, i32 49, i32 52, i32 58, i32 42, i32 116, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1008, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, [16 x i32] [i32 131, i32 57, i32 98, i32 172, i32 19, i32 40, i32 37, i32 64, i32 69, i32 22, i32 41, i32 52, i32 51, i32 77, i32 35, i32 59], [16 x i32] [i32 176, i32 83, i32 93, i32 202, i32 22, i32 24, i32 28, i32 47, i32 50, i32 16, i32 12, i32 93, i32 26, i32 76, i32 17, i32 59], [16 x i32] [i32 136, i32 72, i32 89, i32 95, i32 46, i32 59, i32 47, i32 56, i32 61, i32 68, i32 35, i32 51, i32 32, i32 82, i32 26, i32 69], [16 x i32] [i32 122, i32 80, i32 87, i32 105, i32 49, i32 47, i32 46, i32 46, i32 57, i32 52, i32 13, i32 90, i32 19, i32 103, i32 15, i32 93], [16 x i32] [i32 1009, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1011, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 13, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, [16 x i32] [i32 202, i32 20, i32 84, i32 114, i32 14, i32 60, i32 41, i32 79, i32 99, i32 21, i32 41, i32 15, i32 50, i32 84, i32 34, i32 66], [16 x i32] [i32 196, i32 44, i32 23, i32 72, i32 30, i32 22, i32 28, i32 57, i32 67, i32 13, i32 4, i32 165, i32 15, i32 148, i32 9, i32 131], [16 x i32] [i32 882, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 142, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 840, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 184, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }> }>, [19 x [16 x i32]] [[16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64]], <{ [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }> }> <{ [16 x i32] [i32 213, i32 110, i32 141, i32 269, i32 12, i32 16, i32 15, i32 19, i32 21, i32 11, i32 38, i32 68, i32 22, i32 29, i32 16, i32 24], [16 x i32] [i32 216, i32 119, i32 128, i32 143, i32 38, i32 41, i32 26, i32 30, i32 31, i32 30, i32 42, i32 70, i32 23, i32 36, i32 19, i32 32], [16 x i32] [i32 367, i32 149, i32 154, i32 154, i32 38, i32 35, i32 17, i32 21, i32 21, i32 10, i32 22, i32 36, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1022, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, [16 x i32] [i32 219, i32 96, i32 127, i32 191, i32 21, i32 40, i32 25, i32 32, i32 34, i32 18, i32 45, i32 45, i32 33, i32 39, i32 26, i32 33], [16 x i32] [i32 296, i32 99, i32 122, i32 198, i32 23, i32 21, i32 19, i32 24, i32 25, i32 13, i32 20, i32 64, i32 23, i32 32, i32 18, i32 27], [16 x i32] [i32 275, i32 128, i32 142, i32 143, i32 35, i32 48, i32 23, i32 30, i32 29, i32 18, i32 42, i32 36, i32 18, i32 23, i32 14, i32 20], [16 x i32] [i32 239, i32 132, i32 166, i32 175, i32 36, i32 27, i32 19, i32 21, i32 24, i32 14, i32 13, i32 85, i32 9, i32 31, i32 8, i32 25], [16 x i32] [i32 1022, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1022, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, [16 x i32] [i32 309, i32 25, i32 79, i32 59, i32 25, i32 80, i32 34, i32 53, i32 61, i32 25, i32 49, i32 23, i32 43, i32 64, i32 36, i32 59], [16 x i32] [i32 270, i32 57, i32 40, i32 54, i32 50, i32 42, i32 41, i32 53, i32 56, i32 28, i32 17, i32 81, i32 45, i32 86, i32 34, i32 70], [16 x i32] [i32 1005, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 19, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 992, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 32, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }> }>, <{ [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }> }> <{ [16 x i32] [i32 133, i32 63, i32 55, i32 83, i32 57, i32 87, i32 58, i32 72, i32 68, i32 16, i32 24, i32 35, i32 29, i32 105, i32 25, i32 114], [16 x i32] [i32 131, i32 75, i32 74, i32 60, i32 71, i32 77, i32 65, i32 66, i32 73, i32 33, i32 21, i32 79, i32 20, i32 83, i32 18, i32 78], [16 x i32] [i32 276, i32 95, i32 82, i32 58, i32 86, i32 93, i32 63, i32 60, i32 64, i32 17, i32 38, i32 92, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1006, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 18, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, [16 x i32] [i32 147, i32 49, i32 75, i32 78, i32 50, i32 97, i32 60, i32 67, i32 76, i32 17, i32 42, i32 35, i32 31, i32 93, i32 27, i32 80], [16 x i32] [i32 157, i32 49, i32 58, i32 75, i32 61, i32 52, i32 56, i32 67, i32 69, i32 12, i32 15, i32 79, i32 24, i32 119, i32 11, i32 120], [16 x i32] [i32 178, i32 69, i32 83, i32 77, i32 69, i32 85, i32 72, i32 77, i32 77, i32 20, i32 35, i32 40, i32 25, i32 48, i32 23, i32 46], [16 x i32] [i32 174, i32 55, i32 64, i32 57, i32 73, i32 68, i32 62, i32 61, i32 75, i32 15, i32 12, i32 90, i32 17, i32 99, i32 16, i32 86], [16 x i32] [i32 1008, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1018, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, [16 x i32] [i32 266, i32 31, i32 63, i32 64, i32 21, i32 52, i32 39, i32 54, i32 63, i32 30, i32 52, i32 31, i32 48, i32 89, i32 46, i32 75], [16 x i32] [i32 272, i32 26, i32 32, i32 44, i32 29, i32 31, i32 32, i32 53, i32 51, i32 13, i32 13, i32 88, i32 22, i32 153, i32 16, i32 149], [16 x i32] [i32 923, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 101, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 969, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 55, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }> }>, [19 x [16 x i32]] [[16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], [16 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64]], <{ [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }>, [16 x i32], [16 x i32], [16 x i32], [16 x i32], <{ i32, [15 x i32] }>, <{ i32, [15 x i32] }> }> <{ [16 x i32] [i32 158, i32 92, i32 125, i32 298, i32 12, i32 15, i32 20, i32 29, i32 31, i32 12, i32 29, i32 67, i32 34, i32 44, i32 23, i32 35], [16 x i32] [i32 147, i32 94, i32 103, i32 123, i32 45, i32 48, i32 38, i32 41, i32 46, i32 48, i32 37, i32 78, i32 33, i32 63, i32 27, i32 53], [16 x i32] [i32 268, i32 126, i32 125, i32 136, i32 54, i32 53, i32 31, i32 38, i32 38, i32 33, i32 35, i32 87, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1018, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, [16 x i32] [i32 159, i32 72, i32 103, i32 194, i32 20, i32 35, i32 37, i32 50, i32 56, i32 21, i32 39, i32 40, i32 51, i32 61, i32 38, i32 48], [16 x i32] [i32 259, i32 86, i32 95, i32 188, i32 32, i32 20, i32 25, i32 34, i32 37, i32 13, i32 12, i32 85, i32 25, i32 53, i32 17, i32 43], [16 x i32] [i32 189, i32 99, i32 113, i32 123, i32 45, i32 59, i32 37, i32 46, i32 48, i32 44, i32 39, i32 41, i32 31, i32 47, i32 26, i32 37], [16 x i32] [i32 175, i32 110, i32 113, i32 128, i32 58, i32 38, i32 33, i32 33, i32 43, i32 29, i32 13, i32 100, i32 14, i32 68, i32 12, i32 57], [16 x i32] [i32 1017, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 1019, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, [16 x i32] [i32 208, i32 22, i32 84, i32 101, i32 21, i32 59, i32 44, i32 70, i32 90, i32 25, i32 59, i32 13, i32 64, i32 67, i32 49, i32 48], [16 x i32] [i32 277, i32 52, i32 32, i32 63, i32 43, i32 26, i32 33, i32 48, i32 54, i32 11, i32 6, i32 130, i32 18, i32 119, i32 11, i32 101], [16 x i32] [i32 963, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 61, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], [16 x i32] [i32 979, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 45, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0], <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }>, <{ i32, [15 x i32] }> <{ i32 1024, [15 x i32] zeroinitializer }> }> }>, align 16
@default_obmc_probs = hidden local_unnamed_addr constant [7 x [22 x i32]] [[22 x i32] zeroinitializer, [22 x i32] [i32 0, i32 0, i32 0, i32 106, i32 90, i32 90, i32 97, i32 67, i32 59, i32 70, i32 28, i32 30, i32 38, i32 16, i32 16, i32 16, i32 0, i32 0, i32 44, i32 50, i32 26, i32 25], [22 x i32] zeroinitializer, [22 x i32] [i32 0, i32 0, i32 0, i32 98, i32 93, i32 97, i32 68, i32 82, i32 85, i32 33, i32 30, i32 33, i32 16, i32 16, i32 16, i32 16, i32 0, i32 0, i32 43, i32 37, i32 26, i32 16], [22 x i32] [i32 0, i32 0, i32 0, i32 91, i32 80, i32 76, i32 78, i32 55, i32 49, i32 24, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 0, i32 0, i32 29, i32 45, i32 16, i32 38], [22 x i32] zeroinitializer, [22 x i32] [i32 0, i32 0, i32 0, i32 103, i32 89, i32 89, i32 89, i32 62, i32 63, i32 76, i32 34, i32 35, i32 32, i32 19, i32 16, i32 16, i32 0, i32 0, i32 49, i32 55, i32 29, i32 19]], align 16
@default_warped_probs = hidden local_unnamed_addr constant [7 x i32] [i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64], align 16
@default_switchable_interp_probs = hidden local_unnamed_addr constant [7 x [16 x [3 x i32]]] [[16 x [3 x i32]] [[3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512]], [16 x [3 x i32]] [[3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512]], [16 x [3 x i32]] [[3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512]], [16 x [3 x i32]] [[3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512]], [16 x [3 x i32]] [[3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512]], [16 x [3 x i32]] [[3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512]], [16 x [3 x i32]] [[3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512], [3 x i32] [i32 512, i32 512, i32 512]]], align 16
@av1_ref_frame_flag_list = internal unnamed_addr constant [8 x i8] c"\00\01\02\04\08\10 @", align 1
@.str = private unnamed_addr constant [32 x i8] c"Failed to allocate frame buffer\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"Unable to find free frame buffer\00", align 1
@av1_resize_and_extend_frame = external local_unnamed_addr global void (%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8, i32, i32)*, align 8
@.str.2 = private unnamed_addr constant [46 x i8] c"Buffer does not contain a reconstructed frame\00", align 1
@mi_size_wide = internal unnamed_addr constant [22 x i8] c"\01\01\02\02\02\04\04\04\08\08\08\10\10\10  \01\04\02\08\04\10", align 16
@film_grain_test_vectors = internal unnamed_addr constant <{ { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, %struct.aom_film_grain_t, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, %struct.aom_film_grain_t, { i32, i32, [14 x [2 x i32]], i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [12 x i32], [13 x i32] }>, <{ [12 x i32], [13 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, [14 x [2 x i32]], i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, [14 x [2 x i32]], i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, %struct.aom_film_grain_t }> <{ { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 } { i32 1, i32 1, [14 x [2 x i32]] [[2 x i32] [i32 16, i32 0], [2 x i32] [i32 25, i32 136], [2 x i32] [i32 33, i32 144], [2 x i32] [i32 41, i32 160], [2 x i32] [i32 48, i32 168], [2 x i32] [i32 56, i32 136], [2 x i32] [i32 67, i32 128], [2 x i32] [i32 82, i32 144], [2 x i32] [i32 97, i32 152], [2 x i32] [i32 113, i32 144], [2 x i32] [i32 128, i32 176], [2 x i32] [i32 143, i32 168], [2 x i32] [i32 158, i32 176], [2 x i32] [i32 178, i32 184]], i32 14, [10 x [2 x i32]] [[2 x i32] [i32 16, i32 0], [2 x i32] [i32 20, i32 64], [2 x i32] [i32 28, i32 88], [2 x i32] [i32 60, i32 104], [2 x i32] [i32 90, i32 136], [2 x i32] [i32 105, i32 160], [2 x i32] [i32 134, i32 168], [2 x i32] [i32 168, i32 208], [2 x i32] zeroinitializer, [2 x i32] zeroinitializer], i32 8, [10 x [2 x i32]] [[2 x i32] [i32 16, i32 0], [2 x i32] [i32 28, i32 96], [2 x i32] [i32 56, i32 80], [2 x i32] [i32 66, i32 96], [2 x i32] [i32 80, i32 104], [2 x i32] [i32 108, i32 96], [2 x i32] [i32 122, i32 112], [2 x i32] [i32 137, i32 112], [2 x i32] [i32 169, i32 176], [2 x i32] zeroinitializer], i32 9, i32 11, i32 2, <{ [12 x i32], [12 x i32] }> <{ [12 x i32] [i32 0, i32 0, i32 -58, i32 0, i32 0, i32 0, i32 -76, i32 100, i32 -43, i32 0, i32 -51, i32 82], [12 x i32] zeroinitializer }>, <{ [13 x i32], [12 x i32] }> <{ [13 x i32] [i32 0, i32 0, i32 -49, i32 0, i32 0, i32 0, i32 -36, i32 22, i32 -30, i32 0, i32 -38, i32 7, i32 39], [12 x i32] zeroinitializer }>, <{ [13 x i32], [12 x i32] }> <{ [13 x i32] [i32 0, i32 0, i32 -47, i32 0, i32 0, i32 0, i32 -31, i32 31, i32 -25, i32 0, i32 -32, i32 13, i32 -100], [12 x i32] zeroinitializer }>, i32 8, i32 247, i32 192, i32 18, i32 229, i32 192, i32 54, i32 0, i32 1, i32 8, i32 0, i32 0, i16 -20305 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 } { i32 1, i32 1, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 96], [2 x i32] [i32 255, i32 96], [12 x [2 x i32]] zeroinitializer }>, i32 2, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 64], [2 x i32] [i32 255, i32 64], [8 x [2 x i32]] zeroinitializer }>, i32 2, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 64], [2 x i32] [i32 255, i32 64], [8 x [2 x i32]] zeroinitializer }>, i32 2, i32 11, i32 3, [24 x i32] [i32 4, i32 1, i32 3, i32 0, i32 1, i32 -3, i32 8, i32 -3, i32 7, i32 -23, i32 1, i32 -25, i32 0, i32 -10, i32 6, i32 -17, i32 -4, i32 53, i32 36, i32 5, i32 -5, i32 -17, i32 8, i32 66], [25 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 127], [25 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 127], i32 7, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 1, i32 0, i32 8, i32 0, i32 0, i16 -20305 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 } { i32 1, i32 1, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 192], [2 x i32] [i32 255, i32 192], [12 x [2 x i32]] zeroinitializer }>, i32 2, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 128], [2 x i32] [i32 255, i32 128], [8 x [2 x i32]] zeroinitializer }>, i32 2, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 128], [2 x i32] [i32 255, i32 128], [8 x [2 x i32]] zeroinitializer }>, i32 2, i32 11, i32 3, [24 x i32] [i32 4, i32 1, i32 3, i32 0, i32 1, i32 -3, i32 8, i32 -3, i32 7, i32 -23, i32 1, i32 -25, i32 0, i32 -10, i32 6, i32 -17, i32 -4, i32 53, i32 36, i32 5, i32 -5, i32 -17, i32 8, i32 66], [25 x i32] [i32 4, i32 -7, i32 2, i32 4, i32 12, i32 -12, i32 5, i32 -8, i32 6, i32 8, i32 -19, i32 -16, i32 19, i32 -10, i32 -2, i32 17, i32 -42, i32 58, i32 -2, i32 -13, i32 9, i32 14, i32 -36, i32 67, i32 0], [25 x i32] [i32 4, i32 -7, i32 2, i32 4, i32 12, i32 -12, i32 5, i32 -8, i32 6, i32 8, i32 -19, i32 -16, i32 19, i32 -10, i32 -2, i32 17, i32 -42, i32 58, i32 -2, i32 -13, i32 9, i32 14, i32 -36, i32 67, i32 0], i32 7, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 1, i32 1, i32 8, i32 0, i32 1, i16 -20305 }, %struct.aom_film_grain_t { i32 1, i32 1, [14 x [2 x i32]] [[2 x i32] [i32 16, i32 0], [2 x i32] [i32 24, i32 137], [2 x i32] [i32 53, i32 146], [2 x i32] [i32 63, i32 155], [2 x i32] [i32 78, i32 155], [2 x i32] [i32 107, i32 150], [2 x i32] [i32 122, i32 147], [2 x i32] [i32 136, i32 147], [2 x i32] [i32 166, i32 153], [2 x i32] zeroinitializer, [2 x i32] zeroinitializer, [2 x i32] zeroinitializer, [2 x i32] zeroinitializer, [2 x i32] zeroinitializer], i32 9, [10 x [2 x i32]] [[2 x i32] [i32 16, i32 0], [2 x i32] [i32 20, i32 72], [2 x i32] [i32 27, i32 82], [2 x i32] [i32 33, i32 91], [2 x i32] [i32 69, i32 121], [2 x i32] [i32 95, i32 143], [2 x i32] [i32 108, i32 154], [2 x i32] [i32 134, i32 169], [2 x i32] [i32 147, i32 177], [2 x i32] zeroinitializer], i32 9, [10 x [2 x i32]] [[2 x i32] [i32 16, i32 0], [2 x i32] [i32 24, i32 95], [2 x i32] [i32 54, i32 93], [2 x i32] [i32 65, i32 94], [2 x i32] [i32 79, i32 98], [2 x i32] [i32 109, i32 107], [2 x i32] [i32 124, i32 119], [2 x i32] [i32 139, i32 136], [2 x i32] [i32 169, i32 170], [2 x i32] zeroinitializer], i32 9, i32 11, i32 3, [24 x i32] [i32 7, i32 -9, i32 2, i32 4, i32 7, i32 -12, i32 7, i32 -18, i32 18, i32 -30, i32 -27, i32 -42, i32 13, i32 -20, i32 7, i32 -18, i32 6, i32 107, i32 55, i32 -2, i32 -4, i32 -9, i32 -22, i32 113], [25 x i32] [i32 -3, i32 -1, i32 -4, i32 3, i32 -6, i32 -2, i32 3, i32 1, i32 -4, i32 -10, i32 -10, i32 -5, i32 -5, i32 -3, i32 -1, i32 -13, i32 -28, i32 -25, i32 -31, i32 -6, i32 -4, i32 14, i32 -64, i32 66, i32 0], [25 x i32] [i32 0, i32 4, i32 -3, i32 13, i32 0, i32 1, i32 -3, i32 0, i32 -3, i32 -10, i32 -68, i32 -4, i32 -2, i32 -5, i32 2, i32 -3, i32 -20, i32 62, i32 -31, i32 0, i32 -4, i32 -1, i32 -8, i32 -29, i32 0], i32 8, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 1, i32 0, i32 8, i32 0, i32 0, i16 -20305 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 } { i32 1, i32 0, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 64], [2 x i32] [i32 255, i32 64], [12 x [2 x i32]] zeroinitializer }>, i32 2, [10 x [2 x i32]] [[2 x i32] [i32 0, i32 96], [2 x i32] [i32 32, i32 90], [2 x i32] [i32 64, i32 83], [2 x i32] [i32 96, i32 76], [2 x i32] [i32 128, i32 68], [2 x i32] [i32 159, i32 59], [2 x i32] [i32 191, i32 48], [2 x i32] [i32 223, i32 34], [2 x i32] [i32 255, i32 0], [2 x i32] zeroinitializer], i32 9, [10 x [2 x i32]] [[2 x i32] zeroinitializer, [2 x i32] [i32 32, i32 34], [2 x i32] [i32 64, i32 48], [2 x i32] [i32 96, i32 59], [2 x i32] [i32 128, i32 68], [2 x i32] [i32 159, i32 76], [2 x i32] [i32 191, i32 83], [2 x i32] [i32 223, i32 90], [2 x i32] [i32 255, i32 96], [2 x i32] zeroinitializer], i32 9, i32 11, i32 3, [24 x i32] [i32 4, i32 1, i32 3, i32 0, i32 1, i32 -3, i32 8, i32 -3, i32 7, i32 -23, i32 1, i32 -25, i32 0, i32 -10, i32 6, i32 -17, i32 -4, i32 53, i32 36, i32 5, i32 -5, i32 -17, i32 8, i32 66], [25 x i32] [i32 -2, i32 2, i32 -5, i32 7, i32 -6, i32 4, i32 -2, i32 -1, i32 1, i32 -2, i32 0, i32 -2, i32 2, i32 -3, i32 -5, i32 13, i32 -13, i32 6, i32 -14, i32 8, i32 -1, i32 18, i32 -36, i32 58, i32 0], [25 x i32] [i32 -2, i32 -1, i32 -3, i32 14, i32 -4, i32 -1, i32 -3, i32 0, i32 -1, i32 7, i32 -31, i32 7, i32 2, i32 0, i32 1, i32 0, i32 -7, i32 50, i32 -8, i32 -2, i32 2, i32 2, i32 2, i32 -4, i32 0], i32 7, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 1, i32 1, i32 8, i32 0, i32 0, i16 1063 }, %struct.aom_film_grain_t { i32 1, i32 1, [14 x [2 x i32]] [[2 x i32] [i32 0, i32 96], [2 x i32] [i32 20, i32 92], [2 x i32] [i32 39, i32 88], [2 x i32] [i32 59, i32 84], [2 x i32] [i32 78, i32 80], [2 x i32] [i32 98, i32 75], [2 x i32] [i32 118, i32 70], [2 x i32] [i32 137, i32 65], [2 x i32] [i32 157, i32 60], [2 x i32] [i32 177, i32 53], [2 x i32] [i32 196, i32 46], [2 x i32] [i32 216, i32 38], [2 x i32] [i32 235, i32 27], [2 x i32] [i32 255, i32 0]], i32 14, [10 x [2 x i32]] zeroinitializer, i32 0, [10 x [2 x i32]] zeroinitializer, i32 0, i32 11, i32 3, [24 x i32] [i32 4, i32 1, i32 3, i32 0, i32 1, i32 -3, i32 8, i32 -3, i32 7, i32 -23, i32 1, i32 -25, i32 0, i32 -10, i32 6, i32 -17, i32 -4, i32 53, i32 36, i32 5, i32 -5, i32 -17, i32 8, i32 66], [25 x i32] zeroinitializer, [25 x i32] zeroinitializer, i32 7, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 1, i32 1, i32 8, i32 0, i32 0, i16 2754 }, { i32, i32, [14 x [2 x i32]], i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 } { i32 1, i32 1, [14 x [2 x i32]] [[2 x i32] zeroinitializer, [2 x i32] [i32 20, i32 27], [2 x i32] [i32 39, i32 38], [2 x i32] [i32 59, i32 46], [2 x i32] [i32 78, i32 53], [2 x i32] [i32 98, i32 60], [2 x i32] [i32 118, i32 65], [2 x i32] [i32 137, i32 70], [2 x i32] [i32 157, i32 75], [2 x i32] [i32 177, i32 80], [2 x i32] [i32 196, i32 84], [2 x i32] [i32 216, i32 88], [2 x i32] [i32 235, i32 92], [2 x i32] [i32 255, i32 96]], i32 14, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] zeroinitializer, [2 x i32] [i32 255, i32 0], [8 x [2 x i32]] zeroinitializer }>, i32 2, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] zeroinitializer, [2 x i32] [i32 255, i32 0], [8 x [2 x i32]] zeroinitializer }>, i32 2, i32 11, i32 3, [24 x i32] [i32 4, i32 1, i32 3, i32 0, i32 1, i32 -3, i32 8, i32 -3, i32 7, i32 -23, i32 1, i32 -25, i32 0, i32 -10, i32 6, i32 -17, i32 -4, i32 53, i32 36, i32 5, i32 -5, i32 -17, i32 8, i32 66], [25 x i32] zeroinitializer, [25 x i32] zeroinitializer, i32 7, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 1, i32 1, i32 8, i32 0, i32 0, i16 -20305 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 } { i32 1, i32 1, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 96], [2 x i32] [i32 255, i32 96], [12 x [2 x i32]] zeroinitializer }>, i32 2, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 62], [2 x i32] [i32 255, i32 62], [8 x [2 x i32]] zeroinitializer }>, i32 2, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 62], [2 x i32] [i32 255, i32 62], [8 x [2 x i32]] zeroinitializer }>, i32 2, i32 11, i32 3, [24 x i32] [i32 4, i32 1, i32 3, i32 0, i32 1, i32 -3, i32 8, i32 -3, i32 7, i32 -23, i32 1, i32 -25, i32 0, i32 -10, i32 6, i32 -17, i32 -4, i32 53, i32 36, i32 5, i32 -5, i32 -17, i32 8, i32 66], [25 x i32] [i32 0, i32 -2, i32 -2, i32 8, i32 5, i32 -1, i32 1, i32 -1, i32 5, i32 16, i32 -33, i32 -9, i32 6, i32 -1, i32 -3, i32 10, i32 -47, i32 63, i32 0, i32 -15, i32 3, i32 11, i32 -42, i32 75, i32 -69], [25 x i32] [i32 1, i32 -1, i32 -1, i32 9, i32 5, i32 0, i32 1, i32 -1, i32 5, i32 15, i32 -32, i32 -10, i32 8, i32 -2, i32 -4, i32 11, i32 -46, i32 62, i32 1, i32 -16, i32 3, i32 13, i32 -43, i32 75, i32 -55], i32 7, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 1, i32 0, i32 8, i32 0, i32 0, i16 -20305 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 } { i32 1, i32 0, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 48], [2 x i32] [i32 255, i32 48], [12 x [2 x i32]] zeroinitializer }>, i32 2, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 32], [2 x i32] [i32 255, i32 32], [8 x [2 x i32]] zeroinitializer }>, i32 2, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 32], [2 x i32] [i32 255, i32 32], [8 x [2 x i32]] zeroinitializer }>, i32 2, i32 10, i32 2, <{ [12 x i32], [12 x i32] }> <{ [12 x i32] [i32 10, i32 -30, i32 -20, i32 -39, i32 1, i32 -24, i32 12, i32 103, i32 60, i32 -9, i32 -24, i32 113], [12 x i32] zeroinitializer }>, <{ [13 x i32], [12 x i32] }> <{ [13 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 127], [12 x i32] zeroinitializer }>, <{ [13 x i32], [12 x i32] }> <{ [13 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 127], [12 x i32] zeroinitializer }>, i32 8, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 1, i32 0, i32 8, i32 0, i32 0, i16 -20305 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [12 x i32], [13 x i32] }>, <{ [12 x i32], [13 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 } { i32 1, i32 1, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 48], [2 x i32] [i32 255, i32 48], [12 x [2 x i32]] zeroinitializer }>, i32 2, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 32], [2 x i32] [i32 255, i32 32], [8 x [2 x i32]] zeroinitializer }>, i32 2, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 32], [2 x i32] [i32 255, i32 32], [8 x [2 x i32]] zeroinitializer }>, i32 2, i32 10, i32 2, <{ [12 x i32], [12 x i32] }> <{ [12 x i32] [i32 10, i32 -30, i32 -20, i32 -39, i32 1, i32 -24, i32 12, i32 103, i32 60, i32 -9, i32 -24, i32 113], [12 x i32] zeroinitializer }>, <{ [12 x i32], [13 x i32] }> <{ [12 x i32] [i32 -7, i32 -6, i32 -48, i32 -22, i32 2, i32 -3, i32 -45, i32 73, i32 -11, i32 -26, i32 -52, i32 76], [13 x i32] zeroinitializer }>, <{ [12 x i32], [13 x i32] }> <{ [12 x i32] [i32 -7, i32 -6, i32 -48, i32 -22, i32 2, i32 -3, i32 -45, i32 73, i32 -11, i32 -26, i32 -52, i32 76], [13 x i32] zeroinitializer }>, i32 8, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 1, i32 0, i32 8, i32 0, i32 0, i16 -20305 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 } { i32 1, i32 0, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 32], [2 x i32] [i32 255, i32 32], [12 x [2 x i32]] zeroinitializer }>, i32 2, [10 x [2 x i32]] [[2 x i32] [i32 0, i32 48], [2 x i32] [i32 32, i32 45], [2 x i32] [i32 64, i32 42], [2 x i32] [i32 96, i32 38], [2 x i32] [i32 128, i32 34], [2 x i32] [i32 159, i32 29], [2 x i32] [i32 191, i32 24], [2 x i32] [i32 223, i32 17], [2 x i32] [i32 255, i32 0], [2 x i32] zeroinitializer], i32 9, [10 x [2 x i32]] [[2 x i32] zeroinitializer, [2 x i32] [i32 32, i32 17], [2 x i32] [i32 64, i32 24], [2 x i32] [i32 96, i32 29], [2 x i32] [i32 128, i32 34], [2 x i32] [i32 159, i32 38], [2 x i32] [i32 191, i32 42], [2 x i32] [i32 223, i32 45], [2 x i32] [i32 255, i32 48], [2 x i32] zeroinitializer], i32 9, i32 10, i32 3, [24 x i32] [i32 7, i32 -9, i32 2, i32 4, i32 7, i32 -12, i32 7, i32 -18, i32 18, i32 -30, i32 -27, i32 -42, i32 13, i32 -20, i32 7, i32 -18, i32 6, i32 107, i32 55, i32 -2, i32 -4, i32 -9, i32 -22, i32 113], [25 x i32] [i32 -3, i32 -1, i32 -4, i32 3, i32 -6, i32 -2, i32 3, i32 1, i32 -4, i32 -10, i32 -10, i32 -5, i32 -5, i32 -3, i32 -1, i32 -13, i32 -28, i32 -25, i32 -31, i32 -6, i32 -4, i32 14, i32 -64, i32 66, i32 0], [25 x i32] [i32 0, i32 4, i32 -3, i32 13, i32 0, i32 1, i32 -3, i32 0, i32 -3, i32 -10, i32 -68, i32 -4, i32 -2, i32 -5, i32 2, i32 -3, i32 -20, i32 62, i32 -31, i32 0, i32 -4, i32 -1, i32 -8, i32 -29, i32 0], i32 8, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 1, i32 1, i32 8, i32 0, i32 0, i16 1357 }, { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 } { i32 1, i32 1, [14 x [2 x i32]] [[2 x i32] [i32 16, i32 0], [2 x i32] [i32 24, i32 49], [2 x i32] [i32 39, i32 69], [2 x i32] [i32 46, i32 84], [2 x i32] [i32 53, i32 91], [2 x i32] [i32 63, i32 100], [2 x i32] [i32 78, i32 114], [2 x i32] [i32 92, i32 134], [2 x i32] [i32 164, i32 139], [2 x i32] zeroinitializer, [2 x i32] zeroinitializer, [2 x i32] zeroinitializer, [2 x i32] zeroinitializer, [2 x i32] zeroinitializer], i32 9, [10 x [2 x i32]] [[2 x i32] [i32 16, i32 0], [2 x i32] [i32 20, i32 31], [2 x i32] [i32 26, i32 42], [2 x i32] [i32 33, i32 54], [2 x i32] [i32 40, i32 65], [2 x i32] [i32 47, i32 72], [2 x i32] [i32 56, i32 85], [2 x i32] [i32 84, i32 123], [2 x i32] [i32 152, i32 157], [2 x i32] zeroinitializer], i32 9, [10 x [2 x i32]] [[2 x i32] [i32 16, i32 0], [2 x i32] [i32 25, i32 14], [2 x i32] [i32 39, i32 33], [2 x i32] [i32 47, i32 40], [2 x i32] [i32 54, i32 47], [2 x i32] [i32 64, i32 62], [2 x i32] [i32 79, i32 76], [2 x i32] [i32 94, i32 83], [2 x i32] [i32 167, i32 101], [2 x i32] zeroinitializer], i32 9, i32 10, i32 2, <{ [12 x i32], [12 x i32] }> <{ [12 x i32] [i32 0, i32 0, i32 -58, i32 0, i32 0, i32 0, i32 -76, i32 100, i32 -43, i32 0, i32 -51, i32 82], [12 x i32] zeroinitializer }>, <{ [13 x i32], [12 x i32] }> <{ [13 x i32] [i32 0, i32 0, i32 -49, i32 0, i32 0, i32 0, i32 -36, i32 22, i32 -30, i32 0, i32 -38, i32 7, i32 39], [12 x i32] zeroinitializer }>, <{ [13 x i32], [12 x i32] }> <{ [13 x i32] [i32 0, i32 0, i32 -47, i32 0, i32 0, i32 0, i32 -31, i32 31, i32 -25, i32 0, i32 -32, i32 13, i32 -100], [12 x i32] zeroinitializer }>, i32 8, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 0, i32 0, i32 8, i32 0, i32 0, i16 -20305 }, { i32, i32, [14 x [2 x i32]], i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 } { i32 1, i32 1, [14 x [2 x i32]] [[2 x i32] [i32 0, i32 48], [2 x i32] [i32 20, i32 46], [2 x i32] [i32 39, i32 44], [2 x i32] [i32 59, i32 42], [2 x i32] [i32 78, i32 40], [2 x i32] [i32 98, i32 38], [2 x i32] [i32 118, i32 35], [2 x i32] [i32 137, i32 33], [2 x i32] [i32 157, i32 30], [2 x i32] [i32 177, i32 27], [2 x i32] [i32 196, i32 23], [2 x i32] [i32 216, i32 19], [2 x i32] [i32 235, i32 13], [2 x i32] [i32 255, i32 0]], i32 14, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] zeroinitializer, [2 x i32] [i32 255, i32 0], [8 x [2 x i32]] zeroinitializer }>, i32 0, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] zeroinitializer, [2 x i32] [i32 255, i32 0], [8 x [2 x i32]] zeroinitializer }>, i32 0, i32 10, i32 2, <{ [12 x i32], [12 x i32] }> <{ [12 x i32] [i32 10, i32 -30, i32 -20, i32 -39, i32 1, i32 -24, i32 12, i32 103, i32 60, i32 -9, i32 -24, i32 113], [12 x i32] zeroinitializer }>, [25 x i32] zeroinitializer, [25 x i32] zeroinitializer, i32 8, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 1, i32 0, i32 8, i32 0, i32 0, i16 -20305 }, { i32, i32, [14 x [2 x i32]], i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 } { i32 1, i32 1, [14 x [2 x i32]] [[2 x i32] zeroinitializer, [2 x i32] [i32 20, i32 13], [2 x i32] [i32 39, i32 19], [2 x i32] [i32 59, i32 23], [2 x i32] [i32 78, i32 27], [2 x i32] [i32 98, i32 30], [2 x i32] [i32 118, i32 33], [2 x i32] [i32 137, i32 35], [2 x i32] [i32 157, i32 38], [2 x i32] [i32 177, i32 40], [2 x i32] [i32 196, i32 42], [2 x i32] [i32 216, i32 44], [2 x i32] [i32 235, i32 46], [2 x i32] [i32 255, i32 48]], i32 14, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] zeroinitializer, [2 x i32] [i32 255, i32 0], [8 x [2 x i32]] zeroinitializer }>, i32 0, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] zeroinitializer, [2 x i32] [i32 255, i32 0], [8 x [2 x i32]] zeroinitializer }>, i32 0, i32 10, i32 2, <{ [12 x i32], [12 x i32] }> <{ [12 x i32] [i32 10, i32 -30, i32 -20, i32 -39, i32 1, i32 -24, i32 12, i32 103, i32 60, i32 -9, i32 -24, i32 113], [12 x i32] zeroinitializer }>, [25 x i32] zeroinitializer, [25 x i32] zeroinitializer, i32 8, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 1, i32 1, i32 8, i32 0, i32 0, i16 -20305 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 } { i32 1, i32 1, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 96], [2 x i32] [i32 255, i32 96], [12 x [2 x i32]] zeroinitializer }>, i32 1, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 96], [2 x i32] [i32 255, i32 96], [8 x [2 x i32]] zeroinitializer }>, i32 0, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }> <{ [2 x i32] [i32 0, i32 96], [2 x i32] [i32 255, i32 96], [8 x [2 x i32]] zeroinitializer }>, i32 0, i32 11, i32 2, <{ [12 x i32], [12 x i32] }> <{ [12 x i32] [i32 5, i32 -15, i32 -10, i32 -19, i32 0, i32 -12, i32 6, i32 51, i32 30, i32 -5, i32 -12, i32 56], [12 x i32] zeroinitializer }>, <{ [13 x i32], [12 x i32] }> <{ [13 x i32] [i32 2, i32 2, i32 -24, i32 -5, i32 1, i32 1, i32 -18, i32 37, i32 -2, i32 0, i32 -15, i32 39, i32 -70], [12 x i32] zeroinitializer }>, <{ [13 x i32], [12 x i32] }> <{ [13 x i32] [i32 2, i32 3, i32 -24, i32 -5, i32 -1, i32 0, i32 -18, i32 38, i32 -2, i32 0, i32 -15, i32 39, i32 -55], [12 x i32] zeroinitializer }>, i32 7, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 1, i32 0, i32 8, i32 1, i32 0, i16 -20305 }, %struct.aom_film_grain_t { i32 1, i32 1, [14 x [2 x i32]] [[2 x i32] [i32 16, i32 0], [2 x i32] [i32 58, i32 126], [2 x i32] [i32 87, i32 120], [2 x i32] [i32 97, i32 122], [2 x i32] [i32 112, i32 125], [2 x i32] [i32 126, i32 131], [2 x i32] [i32 141, i32 139], [2 x i32] [i32 199, i32 153], [2 x i32] zeroinitializer, [2 x i32] zeroinitializer, [2 x i32] zeroinitializer, [2 x i32] zeroinitializer, [2 x i32] zeroinitializer, [2 x i32] zeroinitializer], i32 8, [10 x [2 x i32]] [[2 x i32] [i32 16, i32 0], [2 x i32] [i32 59, i32 68], [2 x i32] [i32 66, i32 76], [2 x i32] [i32 73, i32 82], [2 x i32] [i32 79, i32 85], [2 x i32] [i32 86, i32 86], [2 x i32] [i32 151, i32 95], [2 x i32] [i32 192, i32 101], [2 x i32] zeroinitializer, [2 x i32] zeroinitializer], i32 8, [10 x [2 x i32]] [[2 x i32] [i32 16, i32 0], [2 x i32] [i32 59, i32 64], [2 x i32] [i32 89, i32 80], [2 x i32] [i32 99, i32 86], [2 x i32] [i32 114, i32 90], [2 x i32] [i32 129, i32 93], [2 x i32] [i32 144, i32 97], [2 x i32] [i32 203, i32 85], [2 x i32] zeroinitializer, [2 x i32] zeroinitializer], i32 8, i32 10, i32 3, [24 x i32] [i32 4, i32 1, i32 3, i32 0, i32 1, i32 -3, i32 8, i32 -3, i32 7, i32 -23, i32 1, i32 -25, i32 0, i32 -10, i32 6, i32 -17, i32 -4, i32 53, i32 36, i32 5, i32 -5, i32 -17, i32 8, i32 66], [25 x i32] [i32 0, i32 -2, i32 -2, i32 8, i32 5, i32 -1, i32 1, i32 -1, i32 5, i32 16, i32 -33, i32 -9, i32 6, i32 -1, i32 -3, i32 10, i32 -47, i32 63, i32 0, i32 -15, i32 3, i32 11, i32 -42, i32 75, i32 -69], [25 x i32] [i32 1, i32 -1, i32 -1, i32 9, i32 5, i32 0, i32 1, i32 -1, i32 5, i32 15, i32 -32, i32 -10, i32 8, i32 -2, i32 -4, i32 11, i32 -46, i32 62, i32 1, i32 -16, i32 3, i32 13, i32 -43, i32 75, i32 -55], i32 7, i32 128, i32 192, i32 256, i32 128, i32 192, i32 256, i32 1, i32 0, i32 8, i32 0, i32 2, i16 -20305 } }>, align 16
@.str.4 = private unnamed_addr constant [28 x i8] c"Failed to allocate buf->mvs\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"Failed to allocate buf->seg_map\00", align 1
@.str.6 = private unnamed_addr constant [31 x i8] c"Failed to allocate cm->tpl_mvs\00", align 1
@mi_size_wide_log2 = internal unnamed_addr constant [22 x i8] c"\00\00\01\01\01\02\02\02\03\03\03\04\04\04\05\05\00\02\01\03\02\04", align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_apply_active_map(%struct.AV1_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 43, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 45
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 45, i32 2
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %9 = load i8, i8* %8, align 16
  %10 = and i8 %9, -3
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.ActiveMap, %struct.ActiveMap* %5, i64 0, i32 0
  store i32 0, i32* %13, align 16
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 45, i32 1
  store i32 1, i32* %14, align 4
  br label %19

15:                                               ; preds = %1
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 45, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %59, label %19

19:                                               ; preds = %12, %15
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 45, i32 1
  %21 = getelementptr inbounds %struct.ActiveMap, %struct.ActiveMap* %5, i64 0, i32 0
  %22 = load i32, i32* %21, align 16
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %51, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %28 = load i32, i32* %27, align 16
  %29 = mul nsw i32 %28, %26
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %50

31:                                               ; preds = %24, %43
  %32 = phi i32 [ %44, %43 ], [ %28, %24 ]
  %33 = phi i32 [ %45, %43 ], [ %26, %24 ]
  %34 = phi i64 [ %46, %43 ], [ 0, %24 ]
  %35 = getelementptr inbounds i8, i8* %4, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %43

38:                                               ; preds = %31
  %39 = getelementptr inbounds i8, i8* %7, i64 %34
  %40 = load i8, i8* %39, align 1
  store i8 %40, i8* %35, align 1
  %41 = load i32, i32* %25, align 4
  %42 = load i32, i32* %27, align 16
  br label %43

43:                                               ; preds = %31, %38
  %44 = phi i32 [ %32, %31 ], [ %42, %38 ]
  %45 = phi i32 [ %33, %31 ], [ %41, %38 ]
  %46 = add nuw nsw i64 %34, 1
  %47 = mul nsw i32 %44, %45
  %48 = sext i32 %47 to i64
  %49 = icmp slt i64 %46, %48
  br i1 %49, label %31, label %50

50:                                               ; preds = %43, %24
  tail call void @av1_enable_segmentation(%struct.segmentation* %2) #7
  tail call void @av1_enable_segfeature(%struct.segmentation* %2, i32 7, i8 zeroext 6) #7
  tail call void @av1_enable_segfeature(%struct.segmentation* %2, i32 7, i8 zeroext 2) #7
  tail call void @av1_enable_segfeature(%struct.segmentation* %2, i32 7, i8 zeroext 1) #7
  tail call void @av1_enable_segfeature(%struct.segmentation* %2, i32 7, i8 zeroext 3) #7
  tail call void @av1_enable_segfeature(%struct.segmentation* %2, i32 7, i8 zeroext 4) #7
  tail call void @av1_set_segdata(%struct.segmentation* %2, i32 7, i8 zeroext 2, i32 -63) #7
  tail call void @av1_set_segdata(%struct.segmentation* %2, i32 7, i8 zeroext 1, i32 -63) #7
  tail call void @av1_set_segdata(%struct.segmentation* %2, i32 7, i8 zeroext 3, i32 -63) #7
  tail call void @av1_set_segdata(%struct.segmentation* %2, i32 7, i8 zeroext 4, i32 -63) #7
  br label %58

51:                                               ; preds = %19
  tail call void @av1_disable_segfeature(%struct.segmentation* %2, i32 7, i8 zeroext 6) #7
  tail call void @av1_disable_segfeature(%struct.segmentation* %2, i32 7, i8 zeroext 2) #7
  tail call void @av1_disable_segfeature(%struct.segmentation* %2, i32 7, i8 zeroext 1) #7
  tail call void @av1_disable_segfeature(%struct.segmentation* %2, i32 7, i8 zeroext 3) #7
  tail call void @av1_disable_segfeature(%struct.segmentation* %2, i32 7, i8 zeroext 4) #7
  %52 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %2, i64 0, i32 0
  %53 = load i8, i8* %52, align 4
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 2
  store i8 1, i8* %56, align 2
  %57 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 1
  store i8 1, i8* %57, align 1
  br label %58

58:                                               ; preds = %51, %55, %50
  store i32 0, i32* %20, align 4
  br label %59

59:                                               ; preds = %15, %58
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @av1_enable_segmentation(%struct.segmentation*) local_unnamed_addr #2

declare void @av1_enable_segfeature(%struct.segmentation*, i32, i8 zeroext) local_unnamed_addr #2

declare void @av1_set_segdata(%struct.segmentation*, i32, i8 zeroext, i32) local_unnamed_addr #2

declare void @av1_disable_segfeature(%struct.segmentation*, i32, i8 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_set_size_dependent_vars(%struct.AV1_COMP*, i32* nocapture, i32*, i32*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 39
  %6 = load i32, i32* %5, align 4
  tail call void @av1_set_speed_features_framesize_dependent(%struct.AV1_COMP* %0, i32 %6) #7
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %8 = load i32, i32* %7, align 16
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 46
  %12 = load i8, i8* %11, align 16
  %13 = zext i8 %12 to i32
  %14 = tail call i32 @av1_rc_pick_q_and_bounds(%struct.AV1_COMP* %0, i32 %8, i32 %10, i32 %13, i32* %2, i32* %3) #7
  store i32 %14, i32* %1, align 4
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 2
  br i1 %17, label %18, label %99

18:                                               ; preds = %4
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 0, i32 4
  %20 = load i32, i32* %19, align 16
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %99, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 30
  %26 = load double, double* %25, align 8
  %27 = fcmp ogt double %26, 4.800000e+01
  %28 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %29 = load i8, i8* %28, align 16
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %42

31:                                               ; preds = %22
  %32 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 43, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %37 = load i32, i32* %36, align 16
  %38 = mul nsw i32 %37, %35
  %39 = sext i32 %38 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %33, i8 0, i64 %39, i1 false) #7
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 1
  store i8 0, i8* %40, align 1
  %41 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 2
  store i8 0, i8* %41, align 2
  tail call void @av1_disable_segmentation(%struct.segmentation* %24) #7
  tail call void @av1_clearall_segfeatures(%struct.segmentation* %24) #7
  br label %99

42:                                               ; preds = %22
  %43 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 25, i32 2
  %44 = load i8, i8* %43, align 2, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %69, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 43, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %52 = load i32, i32* %51, align 16
  %53 = mul nsw i32 %52, %50
  %54 = sext i32 %53 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 0, i64 %54, i1 false) #7
  %55 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 1
  store i8 0, i8* %55, align 1
  %56 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 2
  store i8 0, i8* %56, align 2
  tail call void @av1_disable_segmentation(%struct.segmentation* %24) #7
  tail call void @av1_clearall_segfeatures(%struct.segmentation* %24) #7
  %57 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %24, i64 0, i32 0
  %58 = load i8, i8* %57, align 4
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %99, label %60

60:                                               ; preds = %46
  store i8 1, i8* %55, align 1
  store i8 1, i8* %56, align 2
  %61 = load double, double* %25, align 8
  %62 = fmul double %61, 8.750000e-01
  %63 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %64 = load %struct.SequenceHeader*, %struct.SequenceHeader** %63, align 16
  %65 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %64, i64 0, i32 25
  %66 = load i32, i32* %65, align 8
  %67 = tail call i32 @av1_compute_qdelta(%struct.RATE_CONTROL* %23, double %61, double %62, i32 %66) #7
  %68 = add nsw i32 %67, -2
  tail call void @av1_set_segdata(%struct.segmentation* %24, i32 1, i8 zeroext 0, i32 %68) #7
  tail call void @av1_set_segdata(%struct.segmentation* %24, i32 1, i8 zeroext 2, i32 -2) #7
  tail call void @av1_set_segdata(%struct.segmentation* %24, i32 1, i8 zeroext 1, i32 -2) #7
  tail call void @av1_set_segdata(%struct.segmentation* %24, i32 1, i8 zeroext 3, i32 -2) #7
  tail call void @av1_set_segdata(%struct.segmentation* %24, i32 1, i8 zeroext 4, i32 -2) #7
  tail call void @av1_enable_segfeature(%struct.segmentation* %24, i32 1, i8 zeroext 2) #7
  tail call void @av1_enable_segfeature(%struct.segmentation* %24, i32 1, i8 zeroext 1) #7
  tail call void @av1_enable_segfeature(%struct.segmentation* %24, i32 1, i8 zeroext 3) #7
  tail call void @av1_enable_segfeature(%struct.segmentation* %24, i32 1, i8 zeroext 4) #7
  tail call void @av1_enable_segfeature(%struct.segmentation* %24, i32 1, i8 zeroext 0) #7
  br label %99

69:                                               ; preds = %42
  %70 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %24, i64 0, i32 0
  %71 = load i8, i8* %70, align 4
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %99, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 8
  %75 = load i32, i32* %74, align 8
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %88

77:                                               ; preds = %73
  tail call void @av1_disable_segmentation(%struct.segmentation* %24) #7
  %78 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 43, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %83 = load i32, i32* %82, align 16
  %84 = mul nsw i32 %83, %81
  %85 = sext i32 %84 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %79, i8 0, i64 %85, i1 false) #7
  %86 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 1
  store i8 0, i8* %86, align 1
  %87 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 2
  store i8 0, i8* %87, align 2
  tail call void @av1_clearall_segfeatures(%struct.segmentation* %24) #7
  br label %99

88:                                               ; preds = %73
  %89 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 16
  %90 = load i32, i32* %89, align 8
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %88
  tail call void @av1_enable_segfeature(%struct.segmentation* %24, i32 0, i8 zeroext 5) #7
  tail call void @av1_enable_segfeature(%struct.segmentation* %24, i32 1, i8 zeroext 5) #7
  tail call void @av1_clear_segdata(%struct.segmentation* %24, i32 0, i8 zeroext 5) #7
  tail call void @av1_set_segdata(%struct.segmentation* %24, i32 0, i8 zeroext 5, i32 7) #7
  tail call void @av1_clear_segdata(%struct.segmentation* %24, i32 1, i8 zeroext 5) #7
  tail call void @av1_set_segdata(%struct.segmentation* %24, i32 1, i8 zeroext 5, i32 7) #7
  br i1 %27, label %93, label %94

93:                                               ; preds = %92
  tail call void @av1_enable_segfeature(%struct.segmentation* %24, i32 0, i8 zeroext 6) #7
  tail call void @av1_enable_segfeature(%struct.segmentation* %24, i32 1, i8 zeroext 6) #7
  br label %94

94:                                               ; preds = %93, %92
  %95 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 2
  store i8 1, i8* %95, align 2
  br label %99

96:                                               ; preds = %88
  %97 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 1
  store i8 0, i8* %97, align 1
  %98 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 2
  store i8 0, i8* %98, align 2
  br label %99

99:                                               ; preds = %4, %96, %94, %77, %69, %60, %46, %31, %18
  ret void
}

declare void @av1_set_speed_features_framesize_dependent(%struct.AV1_COMP*, i32) local_unnamed_addr #2

declare i32 @av1_rc_pick_q_and_bounds(%struct.AV1_COMP*, i32, i32, i32, i32*, i32*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_update_film_grain_parameters_seq(%struct.AV1_PRIMARY* nocapture, %struct.AV1EncoderConfig* nocapture readonly) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 12, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %19

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 12, i32 1
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %19

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 12, i32 3
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 2
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 23
  %16 = load float, float* %15, align 8
  %17 = fcmp ogt float %16, 0.000000e+00
  %18 = zext i1 %17 to i8
  br label %19

19:                                               ; preds = %10, %2, %6, %14
  %20 = phi i8 [ %18, %14 ], [ 1, %6 ], [ 1, %2 ], [ 1, %10 ]
  %21 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %0, i64 0, i32 15, i32 36
  store i8 %20, i8* %21, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_update_film_grain_parameters(%struct.AV1_COMP* nocapture, %struct.AV1EncoderConfig* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9
  %4 = bitcast %struct.AV1EncoderConfig* %3 to i8*
  %5 = bitcast %struct.AV1EncoderConfig* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %4, i8* align 8 %5, i64 1112, i1 false)
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 66
  %7 = load %struct.aom_film_grain_table_t*, %struct.aom_film_grain_table_t** %6, align 16
  %8 = icmp eq %struct.aom_film_grain_table_t* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  tail call void @aom_film_grain_table_free(%struct.aom_film_grain_table_t* nonnull %7) #7
  %10 = bitcast %struct.aom_film_grain_table_t** %6 to i8**
  %11 = load i8*, i8** %10, align 16
  tail call void @aom_free(i8* %11) #7
  store %struct.aom_film_grain_table_t* null, %struct.aom_film_grain_table_t** %6, align 16
  br label %12

12:                                               ; preds = %2, %9
  %13 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 12, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %51, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %18 = load i8, i8* %17, align 16
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %95

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32
  %22 = bitcast %struct.aom_film_grain_t* %21 to i8*
  %23 = sext i32 %14 to i64
  %24 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* bitcast (<{ { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, %struct.aom_film_grain_t, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, %struct.aom_film_grain_t, { i32, i32, [14 x [2 x i32]], i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [12 x i32], [13 x i32] }>, <{ [12 x i32], [13 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, [14 x [2 x i32]], i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, [14 x [2 x i32]], i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, { i32, i32, <{ [2 x i32], [2 x i32], [12 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, <{ [2 x i32], [2 x i32], [8 x [2 x i32]] }>, i32, i32, i32, <{ [12 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, <{ [13 x i32], [12 x i32] }>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }, %struct.aom_film_grain_t }>* @film_grain_test_vectors to %struct.aom_film_grain_t*), i64 %23
  %25 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %24, i64 -1
  %26 = bitcast %struct.aom_film_grain_t* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %22, i8* align 8 %26, i64 648, i1 false)
  %27 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 9, i32 8
  %28 = load i8, i8* %27, align 2, !range !2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %40, label %30

30:                                               ; preds = %20
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 17
  store i32 0, i32* %31, align 4
  %32 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 18
  store i32 0, i32* %32, align 4
  %33 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 14
  store i32 0, i32* %33, align 4
  %34 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 15
  store i32 0, i32* %34, align 4
  %35 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 23
  store i32 0, i32* %35, align 4
  %36 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 4, i64 0
  %37 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 11, i64 0
  %38 = bitcast [2 x i32]* %36 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %38, i8 0, i64 168, i1 false) #7
  %39 = bitcast i32* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %39, i8 0, i64 200, i1 false) #7
  br label %40

40:                                               ; preds = %20, %30
  %41 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %42 = load %struct.SequenceHeader*, %struct.SequenceHeader** %41, align 16
  %43 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %42, i64 0, i32 25
  %44 = load i32, i32* %43, align 8
  %45 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 22
  store i32 %44, i32* %45, align 8
  %46 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %42, i64 0, i32 31
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 1
  br i1 %48, label %49, label %95

49:                                               ; preds = %40
  %50 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 21
  store i32 0, i32* %50, align 4
  br label %95

51:                                               ; preds = %12
  %52 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 12, i32 1
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq i8* %53, null
  br i1 %54, label %63, label %55

55:                                               ; preds = %51
  %56 = tail call i8* @aom_malloc(i64 16) #7
  %57 = bitcast %struct.aom_film_grain_table_t** %6 to i8**
  store i8* %56, i8** %57, align 16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 16, i1 false)
  %58 = load %struct.aom_film_grain_table_t*, %struct.aom_film_grain_table_t** %6, align 16
  %59 = load i8*, i8** %52, align 8
  %60 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %61 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %60, align 8
  %62 = tail call i32 @aom_film_grain_table_read(%struct.aom_film_grain_table_t* %58, i8* %59, %struct.aom_internal_error_info* %61) #7
  br label %95

63:                                               ; preds = %51
  %64 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 12, i32 3
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, 2
  br i1 %66, label %67, label %92

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %69 = load %struct.SequenceHeader*, %struct.SequenceHeader** %68, align 16
  %70 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %69, i64 0, i32 25
  %71 = load i32, i32* %70, align 8
  %72 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 22
  store i32 %71, i32* %72, align 8
  %73 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %1, i64 0, i32 9, i32 8
  %74 = load i8, i8* %73, align 2, !range !2
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %86, label %76

76:                                               ; preds = %67
  %77 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 17
  store i32 0, i32* %77, align 4
  %78 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 18
  store i32 0, i32* %78, align 4
  %79 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 14
  store i32 0, i32* %79, align 4
  %80 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 15
  store i32 0, i32* %80, align 4
  %81 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 23
  store i32 0, i32* %81, align 4
  %82 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 4, i64 0
  %83 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 11, i64 0
  %84 = bitcast [2 x i32]* %82 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %84, i8 0, i64 168, i1 false) #7
  %85 = bitcast i32* %83 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %85, i8 0, i64 200, i1 false) #7
  br label %86

86:                                               ; preds = %67, %76
  %87 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %69, i64 0, i32 31
  %88 = load i32, i32* %87, align 4
  %89 = icmp eq i32 %88, 1
  br i1 %89, label %90, label %95

90:                                               ; preds = %86
  %91 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 21
  store i32 0, i32* %91, align 4
  br label %95

92:                                               ; preds = %63
  %93 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32
  %94 = bitcast %struct.aom_film_grain_t* %93 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %94, i8 0, i64 648, i1 false)
  br label %95

95:                                               ; preds = %55, %86, %90, %92, %16, %49, %40
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @aom_film_grain_table_free(%struct.aom_film_grain_table_t*) local_unnamed_addr #2

declare void @aom_free(i8*) local_unnamed_addr #2

declare i8* @aom_malloc(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @aom_film_grain_table_read(%struct.aom_film_grain_table_t*, i8*, %struct.aom_internal_error_info*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_scale_references(%struct.AV1_COMP*, i8 zeroext, i32, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %6 = load %struct.SequenceHeader*, %struct.SequenceHeader** %5, align 16
  %7 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %6, i64 0, i32 27
  %8 = load i8, i8* %7, align 1
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, i32 3, i32 1
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 38
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 39
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 15
  %16 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %17 = icmp eq i32 %3, 0
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 11
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 43
  %22 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 44
  %23 = bitcast %struct.TPL_MV_REF** %21 to i8**
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  br label %26

26:                                               ; preds = %329, %4
  %27 = phi i64 [ 1, %4 ], [ %330, %329 ]
  %28 = load i32, i32* %11, align 8
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* @av1_ref_frame_flag_list, i64 0, i64 %27
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = and i32 %28, %31
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %318, label %34

34:                                               ; preds = %26
  %35 = load %struct.BufferPool*, %struct.BufferPool** %12, align 8
  %36 = add nsw i64 %27, -1
  %37 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, -1
  br i1 %39, label %48, label %40

40:                                               ; preds = %34
  %41 = sext i32 %38 to i64
  %42 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %41
  %43 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %42, align 8
  %44 = icmp eq %struct.RefCntBuffer* %43, null
  %45 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %43, i64 0, i32 17
  %46 = icmp eq %struct.yv12_buffer_config* %45, null
  %47 = or i1 %44, %46
  br i1 %47, label %48, label %51

48:                                               ; preds = %34, %40
  %49 = add nsw i64 %27, -1
  %50 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 %49
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %50, align 8
  br label %329

51:                                               ; preds = %40
  %52 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %43, i64 0, i32 17, i32 2, i32 0, i32 0
  %53 = load i32, i32* %52, align 8
  %54 = load i32, i32* %13, align 16
  %55 = icmp eq i32 %53, %54
  br i1 %55, label %56, label %61

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %43, i64 0, i32 17, i32 3, i32 0, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = load i32, i32* %14, align 4
  %60 = icmp eq i32 %58, %59
  br i1 %60, label %300, label %61

61:                                               ; preds = %56, %51
  %62 = icmp sgt i32 %53, %54
  br i1 %62, label %68, label %63

63:                                               ; preds = %61
  %64 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %43, i64 0, i32 17, i32 3, i32 0, i32 0
  %65 = load i32, i32* %64, align 8
  %66 = load i32, i32* %14, align 4
  %67 = icmp sgt i32 %65, %66
  br i1 %67, label %68, label %89

68:                                               ; preds = %63, %61
  %69 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %43, i64 0, i32 17, i32 12
  %70 = load i32, i32* %69, align 8
  %71 = icmp slt i32 %70, 288
  br i1 %71, label %72, label %89

72:                                               ; preds = %68
  %73 = add nsw i64 %27, -1
  %74 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = icmp eq i32 %75, -1
  br i1 %76, label %81, label %77

77:                                               ; preds = %72
  %78 = sext i32 %75 to i64
  %79 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %78
  %80 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %79, align 8
  br label %81

81:                                               ; preds = %72, %77
  %82 = phi %struct.RefCntBuffer* [ %80, %77 ], [ null, %72 ]
  %83 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %82, i64 0, i32 17
  %84 = load i32, i32* %15, align 4
  %85 = tail call i32 @aom_yv12_realloc_with_new_border_c(%struct.yv12_buffer_config* %83, i32 288, i32 %84, i32 %10) #7
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %89, label %87

87:                                               ; preds = %81
  %88 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %16, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %88, i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0)) #7
  br label %89

89:                                               ; preds = %87, %81, %68, %63
  %90 = add nsw i64 %27, -1
  %91 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 %90
  %92 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %91, align 8
  %93 = icmp eq %struct.RefCntBuffer* %92, null
  br i1 %93, label %94, label %192

94:                                               ; preds = %89
  %95 = load %struct.BufferPool*, %struct.BufferPool** %12, align 8
  %96 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 0
  %97 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %96) #7
  %98 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 0, i32 0
  %99 = load i32, i32* %98, align 8
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %105, label %101

101:                                              ; preds = %94
  %102 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 1, i32 0
  %103 = load i32, i32* %102, align 8
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %124

105:                                              ; preds = %176, %172, %168, %164, %160, %156, %152, %148, %144, %140, %136, %132, %128, %124, %101, %94
  %106 = phi i32 [ 0, %94 ], [ 1, %101 ], [ 2, %124 ], [ 3, %128 ], [ 4, %132 ], [ 5, %136 ], [ 6, %140 ], [ 7, %144 ], [ 8, %148 ], [ 9, %152 ], [ 10, %156 ], [ 11, %160 ], [ 12, %164 ], [ 13, %168 ], [ 14, %172 ], [ 15, %176 ]
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 %107, i32 17, i32 6
  %109 = load i32, i32* %108, align 8
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %122, label %111

111:                                              ; preds = %105
  %112 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 %107, i32 17, i32 7
  %113 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 %107, i32 17, i32 5
  %114 = bitcast [3 x i8*]* %112 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 8
  %116 = bitcast %union.anon.8* %113 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %116, align 8
  %117 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 %107, i32 17, i32 7, i64 2
  %118 = bitcast i8** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 %107, i32 17, i32 5, i32 0, i32 2
  %121 = bitcast i8** %120 to i64*
  store i64 %119, i64* %121, align 8
  store i32 0, i32* %108, align 8
  br label %122

122:                                              ; preds = %111, %105
  %123 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 %107, i32 0
  store i32 1, i32* %123, align 8
  br label %180

124:                                              ; preds = %101
  %125 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 2, i32 0
  %126 = load i32, i32* %125, align 8
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %105, label %128

128:                                              ; preds = %124
  %129 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 3, i32 0
  %130 = load i32, i32* %129, align 8
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %105, label %132

132:                                              ; preds = %128
  %133 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 4, i32 0
  %134 = load i32, i32* %133, align 8
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %105, label %136

136:                                              ; preds = %132
  %137 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 5, i32 0
  %138 = load i32, i32* %137, align 8
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %105, label %140

140:                                              ; preds = %136
  %141 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 6, i32 0
  %142 = load i32, i32* %141, align 8
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %105, label %144

144:                                              ; preds = %140
  %145 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 7, i32 0
  %146 = load i32, i32* %145, align 8
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %105, label %148

148:                                              ; preds = %144
  %149 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 8, i32 0
  %150 = load i32, i32* %149, align 8
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %105, label %152

152:                                              ; preds = %148
  %153 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 9, i32 0
  %154 = load i32, i32* %153, align 8
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %105, label %156

156:                                              ; preds = %152
  %157 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 10, i32 0
  %158 = load i32, i32* %157, align 8
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %105, label %160

160:                                              ; preds = %156
  %161 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 11, i32 0
  %162 = load i32, i32* %161, align 8
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %105, label %164

164:                                              ; preds = %160
  %165 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 12, i32 0
  %166 = load i32, i32* %165, align 8
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %105, label %168

168:                                              ; preds = %164
  %169 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 13, i32 0
  %170 = load i32, i32* %169, align 8
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %105, label %172

172:                                              ; preds = %168
  %173 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 14, i32 0
  %174 = load i32, i32* %173, align 8
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %105, label %176

176:                                              ; preds = %172
  %177 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %95, i64 0, i32 4, i64 15, i32 0
  %178 = load i32, i32* %177, align 8
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %105, label %180

180:                                              ; preds = %122, %176
  %181 = phi i32 [ %106, %122 ], [ -1, %176 ]
  %182 = load %struct.BufferPool*, %struct.BufferPool** %12, align 8
  %183 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %182, i64 0, i32 0
  %184 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %183) #7
  %185 = icmp eq i32 %181, -1
  br i1 %185, label %186, label %188

186:                                              ; preds = %180
  %187 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %16, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %187, i32 2, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0)) #7
  br label %188

188:                                              ; preds = %180, %186
  %189 = sext i32 %181 to i64
  %190 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %35, i64 0, i32 4, i64 %189
  %191 = load i32, i32* %13, align 16
  br label %202

192:                                              ; preds = %89
  %193 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %92, i64 0, i32 17, i32 2, i32 0, i32 0
  %194 = load i32, i32* %193, align 8
  %195 = load i32, i32* %13, align 16
  %196 = icmp eq i32 %194, %195
  br i1 %196, label %197, label %202

197:                                              ; preds = %192
  %198 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %92, i64 0, i32 17, i32 3, i32 0, i32 0
  %199 = load i32, i32* %198, align 8
  %200 = load i32, i32* %14, align 4
  %201 = icmp eq i32 %199, %200
  br i1 %201, label %329, label %202

202:                                              ; preds = %188, %197, %192
  %203 = phi i32 [ %191, %188 ], [ %194, %197 ], [ %195, %192 ]
  %204 = phi %struct.RefCntBuffer* [ %190, %188 ], [ %92, %197 ], [ %92, %192 ]
  %205 = phi i1 [ true, %188 ], [ false, %197 ], [ false, %192 ]
  %206 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %204, i64 0, i32 17
  %207 = load i32, i32* %14, align 4
  %208 = load %struct.SequenceHeader*, %struct.SequenceHeader** %5, align 16
  %209 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %208, i64 0, i32 32
  %210 = load i32, i32* %209, align 8
  %211 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %208, i64 0, i32 33
  %212 = load i32, i32* %211, align 4
  %213 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %208, i64 0, i32 26
  %214 = load i8, i8* %213, align 4
  %215 = zext i8 %214 to i32
  %216 = load i32, i32* %15, align 4
  %217 = tail call i32 @aom_realloc_frame_buffer(%struct.yv12_buffer_config* %206, i32 %203, i32 %207, i32 %210, i32 %212, i32 %215, i32 288, i32 %216, %struct.aom_codec_frame_buffer* null, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* null, i8* null, i32 0) #7
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %226, label %219

219:                                              ; preds = %202
  br i1 %205, label %220, label %224

220:                                              ; preds = %219
  %221 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %204, i64 0, i32 0
  %222 = load i32, i32* %221, align 8
  %223 = add nsw i32 %222, -1
  store i32 %223, i32* %221, align 8
  br label %224

224:                                              ; preds = %220, %219
  %225 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %16, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %225, i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0)) #7
  br label %226

226:                                              ; preds = %202, %224
  br i1 %17, label %229, label %227

227:                                              ; preds = %226
  %228 = load void (%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8, i32, i32)*, void (%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8, i32, i32)** @av1_resize_and_extend_frame, align 8
  tail call void %228(%struct.yv12_buffer_config* nonnull %45, %struct.yv12_buffer_config* %206, i8 zeroext %1, i32 %2, i32 %10) #7
  br label %233

229:                                              ; preds = %226
  %230 = load %struct.SequenceHeader*, %struct.SequenceHeader** %5, align 16
  %231 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %230, i64 0, i32 25
  %232 = load i32, i32* %231, align 8
  tail call void @av1_resize_and_extend_frame_nonnormative(%struct.yv12_buffer_config* nonnull %45, %struct.yv12_buffer_config* %206, i32 %232, i32 %10) #7
  br label %233

233:                                              ; preds = %229, %227
  store %struct.RefCntBuffer* %204, %struct.RefCntBuffer** %91, align 8
  %234 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %204, i64 0, i32 8
  %235 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %204, i64 0, i32 9
  %236 = load i32, i32* %235, align 8
  %237 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %204, i64 0, i32 5
  %238 = load %struct.MV_REF*, %struct.MV_REF** %237, align 8
  %239 = icmp eq %struct.MV_REF* %238, null
  %240 = bitcast %struct.MV_REF* %238 to i8*
  br i1 %239, label %248, label %241

241:                                              ; preds = %233
  %242 = load i32, i32* %234, align 4
  %243 = load i32, i32* %18, align 4
  %244 = icmp eq i32 %242, %243
  br i1 %244, label %245, label %248

245:                                              ; preds = %241
  %246 = load i32, i32* %19, align 8
  %247 = icmp eq i32 %236, %246
  br i1 %247, label %275, label %248

248:                                              ; preds = %245, %241, %233
  %249 = bitcast %struct.MV_REF** %237 to i8**
  tail call void @aom_free(i8* %240) #7
  %250 = load i32, i32* %18, align 4
  store i32 %250, i32* %234, align 4
  %251 = load i32, i32* %19, align 8
  store i32 %251, i32* %235, align 8
  %252 = load i32, i32* %18, align 4
  %253 = add nsw i32 %252, 1
  %254 = ashr i32 %253, 1
  %255 = load i32, i32* %19, align 8
  %256 = add nsw i32 %255, 1
  %257 = ashr i32 %256, 1
  %258 = mul nsw i32 %257, %254
  %259 = sext i32 %258 to i64
  %260 = tail call i8* @aom_calloc(i64 %259, i64 8) #7
  store i8* %260, i8** %249, align 8
  %261 = icmp eq i8* %260, null
  br i1 %261, label %262, label %264

262:                                              ; preds = %248
  %263 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %16, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %263, i32 2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0)) #7
  br label %264

264:                                              ; preds = %262, %248
  %265 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %204, i64 0, i32 6
  %266 = load i8*, i8** %265, align 8
  tail call void @aom_free(i8* %266) #7
  %267 = load i32, i32* %18, align 4
  %268 = load i32, i32* %19, align 8
  %269 = mul nsw i32 %268, %267
  %270 = sext i32 %269 to i64
  %271 = tail call i8* @aom_calloc(i64 %270, i64 1) #7
  store i8* %271, i8** %265, align 8
  %272 = icmp eq i8* %271, null
  br i1 %272, label %273, label %275

273:                                              ; preds = %264
  %274 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %16, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %274, i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0)) #7
  br label %275

275:                                              ; preds = %273, %264, %245
  %276 = load i32, i32* %18, align 4
  %277 = add nsw i32 %276, 32
  %278 = ashr i32 %277, 1
  %279 = load i32, i32* %20, align 4
  %280 = ashr i32 %279, 1
  %281 = mul nsw i32 %278, %280
  %282 = load %struct.TPL_MV_REF*, %struct.TPL_MV_REF** %21, align 16
  %283 = icmp eq %struct.TPL_MV_REF* %282, null
  %284 = bitcast %struct.TPL_MV_REF* %282 to i8*
  br i1 %283, label %288, label %285

285:                                              ; preds = %275
  %286 = load i32, i32* %22, align 8
  %287 = icmp slt i32 %286, %281
  br i1 %287, label %288, label %295

288:                                              ; preds = %285, %275
  tail call void @aom_free(i8* %284) #7
  %289 = sext i32 %281 to i64
  %290 = tail call i8* @aom_calloc(i64 %289, i64 8) #7
  store i8* %290, i8** %23, align 16
  %291 = icmp eq i8* %290, null
  br i1 %291, label %292, label %294

292:                                              ; preds = %288
  %293 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %16, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %293, i32 2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0)) #7
  br label %294

294:                                              ; preds = %292, %288
  store i32 %281, i32* %22, align 8
  br label %295

295:                                              ; preds = %285, %294
  %296 = load i32, i32* %13, align 16
  %297 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %204, i64 0, i32 10
  store i32 %296, i32* %297, align 4
  %298 = load i32, i32* %14, align 4
  %299 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %204, i64 0, i32 11
  store i32 %298, i32* %299, align 8
  br label %329

300:                                              ; preds = %56
  %301 = add nsw i64 %27, -1
  %302 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %301
  %303 = load i32, i32* %302, align 4
  %304 = icmp eq i32 %303, -1
  br i1 %304, label %309, label %305

305:                                              ; preds = %300
  %306 = sext i32 %303 to i64
  %307 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %306
  %308 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %307, align 8
  br label %309

309:                                              ; preds = %300, %305
  %310 = phi %struct.RefCntBuffer* [ null, %300 ], [ %308, %305 ]
  %311 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %310, i64 0, i32 17, i32 2, i32 0, i32 0
  store i32 %53, i32* %311, align 8
  %312 = load i32, i32* %57, align 8
  %313 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %310, i64 0, i32 17, i32 3, i32 0, i32 0
  store i32 %312, i32* %313, align 8
  %314 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 %301
  store %struct.RefCntBuffer* %310, %struct.RefCntBuffer** %314, align 8
  %315 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %310, i64 0, i32 0
  %316 = load i32, i32* %315, align 8
  %317 = add nsw i32 %316, 1
  store i32 %317, i32* %315, align 8
  br label %329

318:                                              ; preds = %26
  %319 = load i32, i32* %24, align 4
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %326

321:                                              ; preds = %318
  %322 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %25, align 16
  %323 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %322, i64 0, i32 8
  %324 = load i32, i32* %323, align 8
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %329, label %326

326:                                              ; preds = %321, %318
  %327 = add nsw i64 %27, -1
  %328 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 %327
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %328, align 8
  br label %329

329:                                              ; preds = %321, %48, %295, %197, %309, %326
  %330 = add nuw nsw i64 %27, 1
  %331 = icmp eq i64 %330, 8
  br i1 %331, label %332, label %26

332:                                              ; preds = %329
  ret void
}

declare i32 @aom_yv12_realloc_with_new_border_c(%struct.yv12_buffer_config*, i32, i32, i32) local_unnamed_addr #2

declare void @aom_internal_error(%struct.aom_internal_error_info*, i32, i8*, ...) local_unnamed_addr #2

declare i32 @aom_realloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.aom_codec_frame_buffer*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i8*, i32) local_unnamed_addr #2

declare void @av1_resize_and_extend_frame_nonnormative(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i32, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @av1_select_sb_size(%struct.AV1EncoderConfig* nocapture readonly, i32, i32, i32) local_unnamed_addr #4 {
  %5 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %0, i64 0, i32 9, i32 1
  %6 = load i32, i32* %5, align 4
  switch i32 %6, label %8 [
    i32 0, label %36
    i32 1, label %7
  ]

7:                                                ; preds = %4
  br label %36

8:                                                ; preds = %4
  %9 = icmp sgt i32 %3, 1
  br i1 %9, label %14, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %0, i64 0, i32 6, i32 0
  %12 = load i8, i8* %11, align 8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %23, label %14

14:                                               ; preds = %10, %8
  %15 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %0, i64 0, i32 1, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %0, i64 0, i32 1, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %16, %18
  %20 = select i1 %19, i32 %16, i32 %18
  %21 = icmp sgt i32 %20, 480
  %22 = select i1 %21, i8 15, i8 12
  br label %36

23:                                               ; preds = %10
  %24 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %0, i64 0, i32 7, i32 4
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %36

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.AV1EncoderConfig, %struct.AV1EncoderConfig* %0, i64 0, i32 30
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %36

31:                                               ; preds = %27
  %32 = icmp slt i32 %1, %2
  %33 = select i1 %32, i32 %1, i32 %2
  %34 = icmp sgt i32 %33, 480
  %35 = select i1 %34, i8 15, i8 12
  br label %36

36:                                               ; preds = %23, %27, %4, %31, %14, %7
  %37 = phi i8 [ 15, %7 ], [ %22, %14 ], [ %35, %31 ], [ 12, %4 ], [ 15, %27 ], [ 15, %23 ]
  ret i8 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_setup_frame(%struct.AV1_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %3 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %2, i64 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 16
  %5 = and i8 %4, -3
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %15, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 10
  %9 = load i8, i8* %8, align 2, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %15

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 7
  %13 = load i8, i8* %12, align 1, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %1, %11, %7
  tail call void @av1_setup_past_independence(%struct.AV1Common* %2) #7
  %16 = load i8, i8* %3, align 16
  br label %17

17:                                               ; preds = %11, %15
  %18 = phi i8 [ %4, %11 ], [ %16, %15 ]
  switch i8 %18, label %81 [
    i8 0, label %19
    i8 3, label %23
  ]

19:                                               ; preds = %17
  %20 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 17
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %81, label %23

23:                                               ; preds = %17, %19
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %25 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %24, align 16
  %26 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %25, i64 0, i32 3
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %107

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %31 = load %struct.SequenceHeader*, %struct.SequenceHeader** %30, align 16
  %32 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %33 = load i32, i32* %32, align 16
  %34 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 9, i32 1
  %37 = load i32, i32* %36, align 4
  switch i32 %37, label %39 [
    i32 0, label %69
    i32 1, label %38
  ]

38:                                               ; preds = %29
  br label %69

39:                                               ; preds = %29
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %41 = load i32, i32* %40, align 8
  %42 = icmp sgt i32 %41, 1
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 6, i32 0
  %45 = load i8, i8* %44, align 8
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %56, label %47

47:                                               ; preds = %43, %39
  %48 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 1, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = icmp slt i32 %49, %51
  %53 = select i1 %52, i32 %49, i32 %51
  %54 = icmp sgt i32 %53, 480
  %55 = select i1 %54, i8 15, i8 12
  br label %69

56:                                               ; preds = %43
  %57 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 7, i32 4
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %69

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 30
  %62 = load i32, i32* %61, align 4
  %63 = icmp sgt i32 %62, 0
  br i1 %63, label %64, label %69

64:                                               ; preds = %60
  %65 = icmp slt i32 %33, %35
  %66 = select i1 %65, i32 %33, i32 %35
  %67 = icmp sgt i32 %66, 480
  %68 = select i1 %67, i8 15, i8 12
  br label %69

69:                                               ; preds = %29, %38, %47, %56, %60, %64
  %70 = phi i8 [ 15, %38 ], [ %55, %47 ], [ %68, %64 ], [ 12, %29 ], [ 15, %60 ], [ 15, %56 ]
  %71 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %31, i64 0, i32 7
  store i8 %70, i8* %71, align 4
  %72 = zext i8 %70 to i64
  %73 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %31, i64 0, i32 8
  store i32 %75, i32* %76, align 8
  %77 = getelementptr inbounds [22 x i8], [22 x i8]* @mi_size_wide_log2, i64 0, i64 %72
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %31, i64 0, i32 9
  store i32 %79, i32* %80, align 4
  br label %107

81:                                               ; preds = %17, %19
  %82 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 14
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, 7
  br i1 %84, label %98, label %85

85:                                               ; preds = %81
  %86 = trunc i32 %83 to i8
  %87 = icmp ult i8 %86, 8
  br i1 %87, label %88, label %98

88:                                               ; preds = %85
  %89 = sext i8 %86 to i64
  %90 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = icmp eq i32 %91, -1
  br i1 %92, label %98, label %93

93:                                               ; preds = %88
  %94 = sext i32 %91 to i64
  %95 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %94
  %96 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %95, align 8
  %97 = icmp eq %struct.RefCntBuffer* %96, null
  br i1 %97, label %98, label %101

98:                                               ; preds = %85, %88, %81, %93
  tail call void @av1_setup_past_independence(%struct.AV1Common* %2) #7
  %99 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 1
  store i8 1, i8* %99, align 1
  %100 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 2
  store i8 1, i8* %100, align 2
  br label %107

101:                                              ; preds = %93
  %102 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 36
  %103 = bitcast %struct.frame_contexts** %102 to i8**
  %104 = load i8*, i8** %103, align 8
  %105 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %96, i64 0, i32 22
  %106 = bitcast %struct.frame_contexts* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 8 %106, i64 21264, i1 false)
  br label %107

107:                                              ; preds = %98, %101, %23, %69
  %108 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  %109 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %108, align 16
  %110 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %109, i64 0, i32 19
  %111 = bitcast [4 x i32]* %110 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %111, i8 0, i64 16, i1 false)
  %112 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 14
  %113 = load i32, i32* %112, align 4
  %114 = icmp eq i32 %113, 7
  br i1 %114, label %127, label %115

115:                                              ; preds = %107
  %116 = trunc i32 %113 to i8
  %117 = icmp ult i8 %116, 8
  br i1 %117, label %118, label %127

118:                                              ; preds = %115
  %119 = sext i8 %116 to i64
  %120 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = icmp eq i32 %121, -1
  br i1 %122, label %127, label %123

123:                                              ; preds = %118
  %124 = sext i32 %121 to i64
  %125 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %124
  %126 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %125, align 8
  br label %127

127:                                              ; preds = %107, %115, %118, %123
  %128 = phi %struct.RefCntBuffer* [ null, %107 ], [ %126, %123 ], [ null, %118 ], [ null, %115 ]
  %129 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 11
  store %struct.RefCntBuffer* %128, %struct.RefCntBuffer** %129, align 8
  %130 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 58
  store i32 0, i32* %130, align 8
  ret void
}

declare void @av1_setup_past_independence(%struct.AV1Common*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_finalize_encoded_frame(%struct.AV1_COMP* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %4 = load %struct.SequenceHeader*, %struct.SequenceHeader** %3, align 16
  %5 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %4, i64 0, i32 13
  %6 = load i8, i8* %5, align 2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %42

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 19
  %10 = load i32, i32* %9, align 16
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %42, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 10
  %14 = load i8, i8* %13, align 2, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %2, i64 0, i32 0, i32 0
  %18 = load i8, i8* %17, align 16
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %42

20:                                               ; preds = %16, %12
  %21 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 62
  %22 = load i32, i32* %21, align 16
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %23
  %25 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %24, align 8
  %26 = icmp eq %struct.RefCntBuffer* %25, null
  br i1 %26, label %27, label %30

27:                                               ; preds = %20
  %28 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 1
  %29 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %28, align 8
  tail call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %29, i32 5, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2, i64 0, i64 0)) #7
  br label %30

30:                                               ; preds = %27, %20
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  %32 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %31, align 8
  %33 = icmp eq %struct.RefCntBuffer* %32, null
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %32, i64 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = add nsw i32 %36, -1
  store i32 %37, i32* %35, align 8
  br label %38

38:                                               ; preds = %30, %34
  store %struct.RefCntBuffer* %25, %struct.RefCntBuffer** %31, align 8
  %39 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %25, i64 0, i32 0
  %40 = load i32, i32* %39, align 8
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %39, align 8
  br label %42

42:                                               ; preds = %16, %8, %1, %38
  %43 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 19
  %44 = load i32, i32* %43, align 16
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %54, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 10
  %48 = load i8, i8* %47, align 2, !range !2
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %86, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %2, i64 0, i32 0, i32 0
  %52 = load i8, i8* %51, align 16
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %86, label %54

54:                                               ; preds = %50, %42
  %55 = load %struct.SequenceHeader*, %struct.SequenceHeader** %3, align 16
  %56 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %55, i64 0, i32 36
  %57 = load i8, i8* %56, align 1
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %86, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 17
  %61 = load i32, i32* %60, align 8
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %67

63:                                               ; preds = %59
  %64 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 18
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %86, label %67

67:                                               ; preds = %63, %59
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  %69 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %68, align 16
  %70 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %69, i64 0, i32 15
  %71 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32
  %72 = bitcast %struct.aom_film_grain_t* %70 to i8*
  %73 = bitcast %struct.aom_film_grain_t* %71 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %72, i8* align 16 %73, i64 648, i1 false)
  %74 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %2, i64 0, i32 0, i32 0
  %75 = load i8, i8* %74, align 4
  %76 = icmp eq i8 %75, 1
  br i1 %76, label %80, label %77

77:                                               ; preds = %67
  %78 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %68, align 16
  %79 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %78, i64 0, i32 15, i32 1
  store i32 1, i32* %79, align 4
  br label %80

80:                                               ; preds = %67, %77
  %81 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32, i32 25
  %82 = load i16, i16* %81, align 4
  %83 = add i16 %82, 3381
  %84 = icmp eq i16 %83, 0
  %85 = select i1 %84, i16 7391, i16 %83
  store i16 %85, i16* %81, align 4
  br label %86

86:                                               ; preds = %50, %46, %80, %63, %54
  %87 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = icmp sgt i32 %88, 0
  br i1 %89, label %90, label %109

90:                                               ; preds = %86
  %91 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 1
  %92 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 55
  %93 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 36
  %94 = bitcast %struct.frame_contexts** %93 to i8**
  %95 = load i32, i32* %91, align 4
  br label %96

96:                                               ; preds = %90, %242
  %97 = phi i32 [ %88, %90 ], [ %243, %242 ]
  %98 = phi i32 [ %95, %90 ], [ %244, %242 ]
  %99 = phi i32 [ 0, %90 ], [ %245, %242 ]
  %100 = icmp sgt i32 %98, 0
  br i1 %100, label %101, label %242

101:                                              ; preds = %96
  %102 = load %struct.TileDataEnc*, %struct.TileDataEnc** %92, align 8
  %103 = zext i32 %99 to i64
  %104 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %102, i64 %103, i32 2
  %105 = load i8*, i8** %94, align 8
  %106 = bitcast %struct.frame_contexts* %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %106, i8* align 4 %105, i64 21264, i1 false)
  %107 = load i32, i32* %91, align 4
  %108 = icmp sgt i32 %107, 1
  br i1 %108, label %247, label %239

109:                                              ; preds = %242, %86
  %110 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 13
  %111 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 2
  %112 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %111, align 8
  %113 = load i8, i8* %110, align 1
  %114 = icmp eq i8 %113, 4
  br i1 %114, label %115, label %238

115:                                              ; preds = %109
  %116 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 1, i64 0
  %117 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 2, i64 0
  %118 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 3, i64 0
  %119 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 4, i64 0
  %120 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 5, i64 0
  %121 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 6, i64 0
  %122 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 7, i64 0
  %123 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 8, i64 0
  %124 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 9, i64 0
  %125 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 10, i64 0
  %126 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 11, i64 0
  %127 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 12, i64 0
  %128 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 13, i64 0
  %129 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 14, i64 0
  %130 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 15, i64 0
  %131 = bitcast %struct.FRAME_COUNTS* %112 to <2 x i32>*
  %132 = load <2 x i32>, <2 x i32>* %131, align 4
  %133 = bitcast i32* %116 to <2 x i32>*
  %134 = load <2 x i32>, <2 x i32>* %133, align 4
  %135 = add <2 x i32> %134, %132
  %136 = bitcast i32* %117 to <2 x i32>*
  %137 = load <2 x i32>, <2 x i32>* %136, align 4
  %138 = add <2 x i32> %135, %137
  %139 = bitcast i32* %118 to <2 x i32>*
  %140 = load <2 x i32>, <2 x i32>* %139, align 4
  %141 = add <2 x i32> %138, %140
  %142 = bitcast i32* %119 to <2 x i32>*
  %143 = load <2 x i32>, <2 x i32>* %142, align 4
  %144 = add <2 x i32> %141, %143
  %145 = bitcast i32* %120 to <2 x i32>*
  %146 = load <2 x i32>, <2 x i32>* %145, align 4
  %147 = add <2 x i32> %144, %146
  %148 = bitcast i32* %121 to <2 x i32>*
  %149 = load <2 x i32>, <2 x i32>* %148, align 4
  %150 = add <2 x i32> %147, %149
  %151 = bitcast i32* %122 to <2 x i32>*
  %152 = load <2 x i32>, <2 x i32>* %151, align 4
  %153 = add <2 x i32> %150, %152
  %154 = bitcast i32* %123 to <2 x i32>*
  %155 = load <2 x i32>, <2 x i32>* %154, align 4
  %156 = add <2 x i32> %153, %155
  %157 = bitcast i32* %124 to <2 x i32>*
  %158 = load <2 x i32>, <2 x i32>* %157, align 4
  %159 = add <2 x i32> %156, %158
  %160 = bitcast i32* %125 to <2 x i32>*
  %161 = load <2 x i32>, <2 x i32>* %160, align 4
  %162 = add <2 x i32> %159, %161
  %163 = bitcast i32* %126 to <2 x i32>*
  %164 = load <2 x i32>, <2 x i32>* %163, align 4
  %165 = add <2 x i32> %162, %164
  %166 = bitcast i32* %127 to <2 x i32>*
  %167 = load <2 x i32>, <2 x i32>* %166, align 4
  %168 = add <2 x i32> %165, %167
  %169 = bitcast i32* %128 to <2 x i32>*
  %170 = load <2 x i32>, <2 x i32>* %169, align 4
  %171 = add <2 x i32> %168, %170
  %172 = bitcast i32* %129 to <2 x i32>*
  %173 = load <2 x i32>, <2 x i32>* %172, align 4
  %174 = add <2 x i32> %171, %173
  %175 = bitcast i32* %130 to <2 x i32>*
  %176 = load <2 x i32>, <2 x i32>* %175, align 4
  %177 = add <2 x i32> %174, %176
  %178 = icmp sgt <2 x i32> %177, zeroinitializer
  %179 = zext <2 x i1> %178 to <2 x i32>
  %180 = extractelement <2 x i32> %179, i32 0
  %181 = extractelement <2 x i32> %179, i32 1
  %182 = add nuw nsw i32 %181, %180
  %183 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 0, i64 2
  %184 = load i32, i32* %183, align 4
  %185 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 1, i64 2
  %186 = load i32, i32* %185, align 4
  %187 = add i32 %186, %184
  %188 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 2, i64 2
  %189 = load i32, i32* %188, align 4
  %190 = add i32 %187, %189
  %191 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 3, i64 2
  %192 = load i32, i32* %191, align 4
  %193 = add i32 %190, %192
  %194 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 4, i64 2
  %195 = load i32, i32* %194, align 4
  %196 = add i32 %193, %195
  %197 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 5, i64 2
  %198 = load i32, i32* %197, align 4
  %199 = add i32 %196, %198
  %200 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 6, i64 2
  %201 = load i32, i32* %200, align 4
  %202 = add i32 %199, %201
  %203 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 7, i64 2
  %204 = load i32, i32* %203, align 4
  %205 = add i32 %202, %204
  %206 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 8, i64 2
  %207 = load i32, i32* %206, align 4
  %208 = add i32 %205, %207
  %209 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 9, i64 2
  %210 = load i32, i32* %209, align 4
  %211 = add i32 %208, %210
  %212 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 10, i64 2
  %213 = load i32, i32* %212, align 4
  %214 = add i32 %211, %213
  %215 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 11, i64 2
  %216 = load i32, i32* %215, align 4
  %217 = add i32 %214, %216
  %218 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 12, i64 2
  %219 = load i32, i32* %218, align 4
  %220 = add i32 %217, %219
  %221 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 13, i64 2
  %222 = load i32, i32* %221, align 4
  %223 = add i32 %220, %222
  %224 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 14, i64 2
  %225 = load i32, i32* %224, align 4
  %226 = add i32 %223, %225
  %227 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %112, i64 0, i32 0, i64 15, i64 2
  %228 = load i32, i32* %227, align 4
  %229 = add i32 %226, %228
  %230 = icmp sgt i32 %229, 0
  %231 = zext i1 %230 to i32
  %232 = add nuw nsw i32 %182, %231
  %233 = icmp ne i32 %232, 1
  %234 = extractelement <2 x i32> %177, i32 0
  %235 = icmp eq i32 %234, 0
  %236 = or i1 %235, %233
  br i1 %236, label %238, label %237

237:                                              ; preds = %115
  store i8 0, i8* %110, align 1
  br label %238

238:                                              ; preds = %115, %237, %109
  ret void

239:                                              ; preds = %247, %101
  %240 = phi i32 [ %107, %101 ], [ %258, %247 ]
  %241 = load i32, i32* %87, align 8
  br label %242

242:                                              ; preds = %239, %96
  %243 = phi i32 [ %241, %239 ], [ %97, %96 ]
  %244 = phi i32 [ %240, %239 ], [ %98, %96 ]
  %245 = add nuw nsw i32 %99, 1
  %246 = icmp slt i32 %245, %243
  br i1 %246, label %96, label %109

247:                                              ; preds = %101, %247
  %248 = phi i32 [ %257, %247 ], [ 1, %101 ]
  %249 = load i32, i32* %87, align 8
  %250 = mul nsw i32 %249, %248
  %251 = add nsw i32 %250, %99
  %252 = load %struct.TileDataEnc*, %struct.TileDataEnc** %92, align 8
  %253 = sext i32 %251 to i64
  %254 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %252, i64 %253, i32 2
  %255 = load i8*, i8** %94, align 8
  %256 = bitcast %struct.frame_contexts* %254 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %256, i8* align 4 %255, i64 21264, i1 false)
  %257 = add nuw nsw i32 %248, 1
  %258 = load i32, i32* %91, align 4
  %259 = icmp slt i32 %257, %258
  br i1 %259, label %247, label %239
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_is_integer_mv(%struct.yv12_buffer_config*, %struct.yv12_buffer_config* nocapture readonly, %struct.ForceIntegerMVInfo* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 1, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp slt i32 %7, 8
  br i1 %8, label %28, label %9

9:                                                ; preds = %3
  %10 = icmp slt i32 %5, 8
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5, i32 0, i32 0
  %12 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5, i32 0, i32 0
  %13 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4, i32 0, i32 0
  %14 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4, i32 0, i32 0
  %15 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 26
  br label %22

16:                                               ; preds = %132, %22
  %17 = phi i32 [ %27, %22 ], [ %55, %132 ]
  %18 = phi i32 [ %26, %22 ], [ %133, %132 ]
  %19 = phi i32 [ %25, %22 ], [ %134, %132 ]
  %20 = add nuw nsw i32 %23, 8
  %21 = icmp sgt i32 %20, %7
  br i1 %21, label %28, label %22

22:                                               ; preds = %9, %16
  %23 = phi i32 [ 8, %9 ], [ %20, %16 ]
  %24 = phi i32 [ 0, %9 ], [ %23, %16 ]
  %25 = phi i32 [ 0, %9 ], [ %19, %16 ]
  %26 = phi i32 [ 0, %9 ], [ %18, %16 ]
  %27 = phi i32 [ 0, %9 ], [ %17, %16 ]
  br i1 %10, label %16, label %49

28:                                               ; preds = %16, %3
  %29 = phi i32 [ 0, %3 ], [ %17, %16 ]
  %30 = phi i32 [ 0, %3 ], [ %18, %16 ]
  %31 = phi i32 [ 0, %3 ], [ %19, %16 ]
  %32 = add nsw i32 %31, %30
  %33 = sitofp i32 %32 to double
  %34 = sitofp i32 %29 to double
  %35 = fdiv double %33, %34
  %36 = getelementptr inbounds %struct.ForceIntegerMVInfo, %struct.ForceIntegerMVInfo* %2, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %struct.ForceIntegerMVInfo, %struct.ForceIntegerMVInfo* %2, i64 0, i32 0, i64 %38
  store double %35, double* %39, align 8
  %40 = load i32, i32* %36, align 8
  %41 = add nsw i32 %40, 1
  %42 = srem i32 %41, 32
  store i32 %42, i32* %36, align 8
  %43 = getelementptr inbounds %struct.ForceIntegerMVInfo, %struct.ForceIntegerMVInfo* %2, i64 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = icmp slt i32 %44, 31
  %46 = select i1 %45, i32 %44, i32 31
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %43, align 4
  %48 = fcmp olt double %35, 8.000000e-01
  br i1 %48, label %212, label %137

49:                                               ; preds = %22, %132
  %50 = phi i32 [ %135, %132 ], [ 8, %22 ]
  %51 = phi i32 [ %50, %132 ], [ 0, %22 ]
  %52 = phi i32 [ %134, %132 ], [ %25, %22 ]
  %53 = phi i32 [ %133, %132 ], [ %26, %22 ]
  %54 = phi i32 [ %55, %132 ], [ %27, %22 ]
  %55 = add nsw i32 %54, 1
  %56 = load i8*, i8** %11, align 8
  %57 = load i8*, i8** %12, align 8
  %58 = load i32, i32* %13, align 8
  %59 = load i32, i32* %14, align 8
  %60 = mul nsw i32 %58, %24
  %61 = add nsw i32 %60, %51
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %56, i64 %62
  %64 = mul nsw i32 %59, %24
  %65 = add nsw i32 %64, %51
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %57, i64 %66
  %68 = load i32, i32* %15, align 8
  %69 = and i32 %68, 8
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %49
  %72 = sext i32 %58 to i64
  %73 = sext i32 %59 to i64
  br label %101

74:                                               ; preds = %49
  %75 = ptrtoint i8* %63 to i64
  %76 = shl i64 %75, 1
  %77 = inttoptr i64 %76 to i16*
  %78 = ptrtoint i8* %67 to i64
  %79 = shl i64 %78, 1
  %80 = inttoptr i64 %79 to i16*
  %81 = sext i32 %58 to i64
  %82 = sext i32 %59 to i64
  br label %83

83:                                               ; preds = %93, %74
  %84 = phi i32 [ 0, %74 ], [ %97, %93 ]
  %85 = phi i16* [ %80, %74 ], [ %96, %93 ]
  %86 = phi i16* [ %77, %74 ], [ %95, %93 ]
  %87 = phi i32 [ 1, %74 ], [ %94, %93 ]
  %88 = load i16, i16* %86, align 2
  %89 = load i16, i16* %85, align 2
  %90 = icmp eq i16 %88, %89
  %91 = select i1 %90, i32 %87, i32 0
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %214

93:                                               ; preds = %254, %246, %238, %230, %222, %214, %83, %262
  %94 = phi i32 [ %91, %83 ], [ %220, %214 ], [ %228, %222 ], [ %236, %230 ], [ %244, %238 ], [ %252, %246 ], [ %260, %254 ], [ %268, %262 ]
  %95 = getelementptr inbounds i16, i16* %86, i64 %81
  %96 = getelementptr inbounds i16, i16* %85, i64 %82
  %97 = add nuw nsw i32 %84, 1
  %98 = icmp ult i32 %97, 8
  %99 = icmp ne i32 %94, 0
  %100 = and i1 %99, %98
  br i1 %100, label %83, label %119

101:                                              ; preds = %111, %71
  %102 = phi i32 [ 0, %71 ], [ %115, %111 ]
  %103 = phi i8* [ %67, %71 ], [ %114, %111 ]
  %104 = phi i8* [ %63, %71 ], [ %113, %111 ]
  %105 = phi i32 [ 1, %71 ], [ %112, %111 ]
  %106 = load i8, i8* %104, align 1
  %107 = load i8, i8* %103, align 1
  %108 = icmp eq i8 %106, %107
  %109 = select i1 %108, i32 %105, i32 0
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %269

111:                                              ; preds = %309, %301, %293, %285, %277, %269, %101, %317
  %112 = phi i32 [ %109, %101 ], [ %275, %269 ], [ %283, %277 ], [ %291, %285 ], [ %299, %293 ], [ %307, %301 ], [ %315, %309 ], [ %323, %317 ]
  %113 = getelementptr inbounds i8, i8* %104, i64 %72
  %114 = getelementptr inbounds i8, i8* %103, i64 %73
  %115 = add nuw nsw i32 %102, 1
  %116 = icmp ult i32 %115, 8
  %117 = icmp ne i32 %112, 0
  %118 = and i1 %117, %116
  br i1 %118, label %101, label %119

119:                                              ; preds = %93, %111
  %120 = phi i32 [ %112, %111 ], [ %94, %93 ]
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %124, label %122

122:                                              ; preds = %119
  %123 = add nsw i32 %53, 1
  br label %132

124:                                              ; preds = %119
  %125 = tail call i32 @av1_hash_is_horizontal_perfect(%struct.yv12_buffer_config* %0, i32 8, i32 %51, i32 %24) #7
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %130

127:                                              ; preds = %124
  %128 = tail call i32 @av1_hash_is_vertical_perfect(%struct.yv12_buffer_config* %0, i32 8, i32 %51, i32 %24) #7
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %132, label %130

130:                                              ; preds = %127, %124
  %131 = add nsw i32 %52, 1
  br label %132

132:                                              ; preds = %127, %130, %122
  %133 = phi i32 [ %123, %122 ], [ %53, %130 ], [ %53, %127 ]
  %134 = phi i32 [ %52, %122 ], [ %131, %130 ], [ %52, %127 ]
  %135 = add nuw nsw i32 %50, 8
  %136 = icmp sgt i32 %135, %5
  br i1 %136, label %16, label %49

137:                                              ; preds = %28
  %138 = icmp eq i32 %29, %30
  br i1 %138, label %212, label %139

139:                                              ; preds = %137
  %140 = icmp slt i32 %46, 0
  br i1 %140, label %201, label %141

141:                                              ; preds = %139
  %142 = add nsw i32 %46, 1
  %143 = sext i32 %142 to i64
  %144 = and i64 %143, 7
  %145 = icmp ult i32 %46, 7
  br i1 %145, label %186, label %146

146:                                              ; preds = %141
  %147 = sub nsw i64 %143, %144
  br label %148

148:                                              ; preds = %148, %146
  %149 = phi i64 [ 0, %146 ], [ %183, %148 ]
  %150 = phi double [ 0.000000e+00, %146 ], [ %182, %148 ]
  %151 = phi i64 [ %147, %146 ], [ %184, %148 ]
  %152 = getelementptr inbounds %struct.ForceIntegerMVInfo, %struct.ForceIntegerMVInfo* %2, i64 0, i32 0, i64 %149
  %153 = load double, double* %152, align 8
  %154 = fadd double %150, %153
  %155 = or i64 %149, 1
  %156 = getelementptr inbounds %struct.ForceIntegerMVInfo, %struct.ForceIntegerMVInfo* %2, i64 0, i32 0, i64 %155
  %157 = load double, double* %156, align 8
  %158 = fadd double %154, %157
  %159 = or i64 %149, 2
  %160 = getelementptr inbounds %struct.ForceIntegerMVInfo, %struct.ForceIntegerMVInfo* %2, i64 0, i32 0, i64 %159
  %161 = load double, double* %160, align 8
  %162 = fadd double %158, %161
  %163 = or i64 %149, 3
  %164 = getelementptr inbounds %struct.ForceIntegerMVInfo, %struct.ForceIntegerMVInfo* %2, i64 0, i32 0, i64 %163
  %165 = load double, double* %164, align 8
  %166 = fadd double %162, %165
  %167 = or i64 %149, 4
  %168 = getelementptr inbounds %struct.ForceIntegerMVInfo, %struct.ForceIntegerMVInfo* %2, i64 0, i32 0, i64 %167
  %169 = load double, double* %168, align 8
  %170 = fadd double %166, %169
  %171 = or i64 %149, 5
  %172 = getelementptr inbounds %struct.ForceIntegerMVInfo, %struct.ForceIntegerMVInfo* %2, i64 0, i32 0, i64 %171
  %173 = load double, double* %172, align 8
  %174 = fadd double %170, %173
  %175 = or i64 %149, 6
  %176 = getelementptr inbounds %struct.ForceIntegerMVInfo, %struct.ForceIntegerMVInfo* %2, i64 0, i32 0, i64 %175
  %177 = load double, double* %176, align 8
  %178 = fadd double %174, %177
  %179 = or i64 %149, 7
  %180 = getelementptr inbounds %struct.ForceIntegerMVInfo, %struct.ForceIntegerMVInfo* %2, i64 0, i32 0, i64 %179
  %181 = load double, double* %180, align 8
  %182 = fadd double %178, %181
  %183 = add nuw nsw i64 %149, 8
  %184 = add i64 %151, -8
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %186, label %148

186:                                              ; preds = %148, %141
  %187 = phi double [ undef, %141 ], [ %182, %148 ]
  %188 = phi i64 [ 0, %141 ], [ %183, %148 ]
  %189 = phi double [ 0.000000e+00, %141 ], [ %182, %148 ]
  %190 = icmp eq i64 %144, 0
  br i1 %190, label %201, label %191

191:                                              ; preds = %186, %191
  %192 = phi i64 [ %198, %191 ], [ %188, %186 ]
  %193 = phi double [ %197, %191 ], [ %189, %186 ]
  %194 = phi i64 [ %199, %191 ], [ %144, %186 ]
  %195 = getelementptr inbounds %struct.ForceIntegerMVInfo, %struct.ForceIntegerMVInfo* %2, i64 0, i32 0, i64 %192
  %196 = load double, double* %195, align 8
  %197 = fadd double %193, %196
  %198 = add nuw nsw i64 %192, 1
  %199 = add i64 %194, -1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %191, !llvm.loop !3

201:                                              ; preds = %186, %191, %139
  %202 = phi double [ 0.000000e+00, %139 ], [ %187, %186 ], [ %197, %191 ]
  %203 = sitofp i32 %47 to double
  %204 = fdiv double %202, %203
  %205 = fcmp olt double %204, 0x3FEE666666666666
  br i1 %205, label %212, label %206

206:                                              ; preds = %201
  %207 = sub nsw i32 %29, %30
  %208 = icmp slt i32 %207, %31
  br i1 %208, label %212, label %209

209:                                              ; preds = %206
  %210 = fcmp ogt double %204, 1.010000e+00
  %211 = zext i1 %210 to i32
  br label %212

212:                                              ; preds = %201, %206, %209, %137, %28
  %213 = phi i32 [ 0, %28 ], [ 1, %137 ], [ 0, %201 ], [ 1, %206 ], [ %211, %209 ]
  ret i32 %213

214:                                              ; preds = %83
  %215 = getelementptr inbounds i16, i16* %86, i64 1
  %216 = load i16, i16* %215, align 2
  %217 = getelementptr inbounds i16, i16* %85, i64 1
  %218 = load i16, i16* %217, align 2
  %219 = icmp eq i16 %216, %218
  %220 = select i1 %219, i32 %87, i32 0
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %93, label %222

222:                                              ; preds = %214
  %223 = getelementptr inbounds i16, i16* %86, i64 2
  %224 = load i16, i16* %223, align 2
  %225 = getelementptr inbounds i16, i16* %85, i64 2
  %226 = load i16, i16* %225, align 2
  %227 = icmp eq i16 %224, %226
  %228 = select i1 %227, i32 %87, i32 0
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %93, label %230

230:                                              ; preds = %222
  %231 = getelementptr inbounds i16, i16* %86, i64 3
  %232 = load i16, i16* %231, align 2
  %233 = getelementptr inbounds i16, i16* %85, i64 3
  %234 = load i16, i16* %233, align 2
  %235 = icmp eq i16 %232, %234
  %236 = select i1 %235, i32 %87, i32 0
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %93, label %238

238:                                              ; preds = %230
  %239 = getelementptr inbounds i16, i16* %86, i64 4
  %240 = load i16, i16* %239, align 2
  %241 = getelementptr inbounds i16, i16* %85, i64 4
  %242 = load i16, i16* %241, align 2
  %243 = icmp eq i16 %240, %242
  %244 = select i1 %243, i32 %87, i32 0
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %93, label %246

246:                                              ; preds = %238
  %247 = getelementptr inbounds i16, i16* %86, i64 5
  %248 = load i16, i16* %247, align 2
  %249 = getelementptr inbounds i16, i16* %85, i64 5
  %250 = load i16, i16* %249, align 2
  %251 = icmp eq i16 %248, %250
  %252 = select i1 %251, i32 %87, i32 0
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %93, label %254

254:                                              ; preds = %246
  %255 = getelementptr inbounds i16, i16* %86, i64 6
  %256 = load i16, i16* %255, align 2
  %257 = getelementptr inbounds i16, i16* %85, i64 6
  %258 = load i16, i16* %257, align 2
  %259 = icmp eq i16 %256, %258
  %260 = select i1 %259, i32 %87, i32 0
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %93, label %262

262:                                              ; preds = %254
  %263 = getelementptr inbounds i16, i16* %86, i64 7
  %264 = load i16, i16* %263, align 2
  %265 = getelementptr inbounds i16, i16* %85, i64 7
  %266 = load i16, i16* %265, align 2
  %267 = icmp eq i16 %264, %266
  %268 = select i1 %267, i32 %87, i32 0
  br label %93

269:                                              ; preds = %101
  %270 = getelementptr inbounds i8, i8* %104, i64 1
  %271 = load i8, i8* %270, align 1
  %272 = getelementptr inbounds i8, i8* %103, i64 1
  %273 = load i8, i8* %272, align 1
  %274 = icmp eq i8 %271, %273
  %275 = select i1 %274, i32 %105, i32 0
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %111, label %277

277:                                              ; preds = %269
  %278 = getelementptr inbounds i8, i8* %104, i64 2
  %279 = load i8, i8* %278, align 1
  %280 = getelementptr inbounds i8, i8* %103, i64 2
  %281 = load i8, i8* %280, align 1
  %282 = icmp eq i8 %279, %281
  %283 = select i1 %282, i32 %105, i32 0
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %111, label %285

285:                                              ; preds = %277
  %286 = getelementptr inbounds i8, i8* %104, i64 3
  %287 = load i8, i8* %286, align 1
  %288 = getelementptr inbounds i8, i8* %103, i64 3
  %289 = load i8, i8* %288, align 1
  %290 = icmp eq i8 %287, %289
  %291 = select i1 %290, i32 %105, i32 0
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %111, label %293

293:                                              ; preds = %285
  %294 = getelementptr inbounds i8, i8* %104, i64 4
  %295 = load i8, i8* %294, align 1
  %296 = getelementptr inbounds i8, i8* %103, i64 4
  %297 = load i8, i8* %296, align 1
  %298 = icmp eq i8 %295, %297
  %299 = select i1 %298, i32 %105, i32 0
  %300 = icmp eq i32 %299, 0
  br i1 %300, label %111, label %301

301:                                              ; preds = %293
  %302 = getelementptr inbounds i8, i8* %104, i64 5
  %303 = load i8, i8* %302, align 1
  %304 = getelementptr inbounds i8, i8* %103, i64 5
  %305 = load i8, i8* %304, align 1
  %306 = icmp eq i8 %303, %305
  %307 = select i1 %306, i32 %105, i32 0
  %308 = icmp eq i32 %307, 0
  br i1 %308, label %111, label %309

309:                                              ; preds = %301
  %310 = getelementptr inbounds i8, i8* %104, i64 6
  %311 = load i8, i8* %310, align 1
  %312 = getelementptr inbounds i8, i8* %103, i64 6
  %313 = load i8, i8* %312, align 1
  %314 = icmp eq i8 %311, %313
  %315 = select i1 %314, i32 %105, i32 0
  %316 = icmp eq i32 %315, 0
  br i1 %316, label %111, label %317

317:                                              ; preds = %309
  %318 = getelementptr inbounds i8, i8* %104, i64 7
  %319 = load i8, i8* %318, align 1
  %320 = getelementptr inbounds i8, i8* %103, i64 7
  %321 = load i8, i8* %320, align 1
  %322 = icmp eq i8 %319, %321
  %323 = select i1 %322, i32 %105, i32 0
  br label %111
}

declare i32 @av1_hash_is_horizontal_perfect(%struct.yv12_buffer_config*, i32, i32, i32) local_unnamed_addr #2

declare i32 @av1_hash_is_vertical_perfect(%struct.yv12_buffer_config*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_set_mb_ssim_rdmult_scaling(%struct.AV1_COMP*) local_unnamed_addr #0 {
  %2 = alloca %struct.buf_2d, align 8
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 12
  %4 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %3, align 8
  %5 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 5, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 4, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = add nsw i32 %10, 3
  %12 = sdiv i32 %11, 4
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = add nsw i32 %14, 3
  %16 = sdiv i32 %15, 4
  %17 = icmp sgt i32 %14, 0
  br i1 %17, label %18, label %42

18:                                               ; preds = %1
  %19 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %4, i64 0, i32 26
  %20 = load i32, i32* %19, align 8
  %21 = and i32 %20, 8
  %22 = icmp sgt i32 %10, 0
  %23 = bitcast %struct.buf_2d* %2 to i8*
  %24 = shl i32 %8, 2
  %25 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %2, i64 0, i32 0
  %26 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %2, i64 0, i32 4
  %27 = icmp eq i32 %21, 0
  %28 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 40
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 74
  %30 = sext i32 %12 to i64
  %31 = sext i32 %16 to i64
  %32 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %2, i64 0, i32 1
  %33 = bitcast i8** %32 to i8*
  br label %34

34:                                               ; preds = %18, %53
  %35 = phi i64 [ 0, %18 ], [ %55, %53 ]
  %36 = phi i64 [ 0, %18 ], [ %57, %53 ]
  %37 = phi double [ 0.000000e+00, %18 ], [ %54, %53 ]
  br i1 %22, label %38, label %53

38:                                               ; preds = %34
  %39 = mul nsw i64 %35, %30
  %40 = shl i64 %35, 2
  %41 = add nuw nsw i64 %40, 4
  br label %58

42:                                               ; preds = %53, %1
  %43 = phi double [ 0.000000e+00, %1 ], [ %54, %53 ]
  %44 = mul nsw i32 %16, %12
  %45 = sitofp i32 %44 to double
  %46 = fdiv double %43, %45
  %47 = call double @exp(double %46) #7
  br i1 %17, label %48, label %141

48:                                               ; preds = %42
  %49 = icmp sgt i32 %10, 0
  %50 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 74
  %51 = sext i32 %12 to i64
  %52 = sext i32 %16 to i64
  br label %137

53:                                               ; preds = %71, %34
  %54 = phi double [ %37, %34 ], [ %83, %71 ]
  %55 = add nuw nsw i64 %35, 1
  %56 = icmp slt i64 %55, %31
  %57 = add nuw nsw i64 %36, 4
  br i1 %56, label %34, label %42

58:                                               ; preds = %38, %71
  %59 = phi i64 [ 0, %38 ], [ %84, %71 ]
  %60 = phi i64 [ 0, %38 ], [ %86, %71 ]
  %61 = phi double [ %37, %38 ], [ %83, %71 ]
  %62 = add nsw i64 %59, %39
  %63 = load i32, i32* %13, align 4
  %64 = sext i32 %63 to i64
  %65 = icmp slt i64 %40, %64
  br i1 %65, label %66, label %71

66:                                               ; preds = %58
  %67 = shl i64 %59, 2
  %68 = add nuw nsw i64 %67, 4
  %69 = trunc i64 %67 to i32
  %70 = load i32, i32* %9, align 8
  br label %87

71:                                               ; preds = %102, %58
  %72 = phi double [ 0.000000e+00, %58 ], [ %105, %102 ]
  %73 = phi double [ 0.000000e+00, %58 ], [ %106, %102 ]
  %74 = fdiv double %72, %73
  %75 = fmul double %74, -2.148900e-03
  %76 = call double @exp(double %75) #7
  %77 = fsub double 1.000000e+00, %76
  %78 = fmul double %77, 0x4050C2448CF7CAA7
  %79 = fadd double %78, 0x40317E0242D05F29
  %80 = load double*, double** %29, align 8
  %81 = getelementptr inbounds double, double* %80, i64 %62
  store double %79, double* %81, align 8
  %82 = call double @log(double %79) #7
  %83 = fadd double %61, %82
  %84 = add nuw nsw i64 %59, 1
  %85 = icmp slt i64 %84, %30
  %86 = add nuw nsw i64 %60, 4
  br i1 %85, label %58, label %53

87:                                               ; preds = %66, %102
  %88 = phi i32 [ %63, %66 ], [ %103, %102 ]
  %89 = phi i32 [ %70, %66 ], [ %104, %102 ]
  %90 = phi i64 [ %36, %66 ], [ %107, %102 ]
  %91 = phi double [ 0.000000e+00, %66 ], [ %106, %102 ]
  %92 = phi double [ 0.000000e+00, %66 ], [ %105, %102 ]
  %93 = sext i32 %89 to i64
  %94 = icmp slt i64 %67, %93
  br i1 %94, label %95, label %102

95:                                               ; preds = %87
  %96 = trunc i64 %90 to i32
  %97 = mul i32 %24, %96
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %6, i64 %98
  br label %112

100:                                              ; preds = %125
  %101 = load i32, i32* %13, align 4
  br label %102

102:                                              ; preds = %100, %87
  %103 = phi i32 [ %88, %87 ], [ %101, %100 ]
  %104 = phi i32 [ %89, %87 ], [ %132, %100 ]
  %105 = phi double [ %92, %87 ], [ %128, %100 ]
  %106 = phi double [ %91, %87 ], [ %129, %100 ]
  %107 = add nuw nsw i64 %90, 2
  %108 = sext i32 %103 to i64
  %109 = icmp slt i64 %107, %108
  %110 = icmp ult i64 %107, %41
  %111 = and i1 %110, %109
  br i1 %111, label %87, label %71

112:                                              ; preds = %95, %125
  %113 = phi i64 [ %60, %95 ], [ %130, %125 ]
  %114 = phi i32 [ %69, %95 ], [ %131, %125 ]
  %115 = phi double [ %91, %95 ], [ %129, %125 ]
  %116 = phi double [ %92, %95 ], [ %128, %125 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 -86, i64 24, i1 false)
  %117 = shl i32 %114, 2
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %99, i64 %118
  store i8* %119, i8** %25, align 8
  store i32 %8, i32* %26, align 8
  br i1 %27, label %123, label %120

120:                                              ; preds = %112
  %121 = load i32, i32* %28, align 16
  %122 = call i32 @av1_high_get_sby_perpixel_variance(%struct.AV1_COMP* %0, %struct.buf_2d* nonnull %2, i8 zeroext 3, i32 %121) #7
  br label %125

123:                                              ; preds = %112
  %124 = call i32 @av1_get_sby_perpixel_variance(%struct.AV1_COMP* %0, %struct.buf_2d* nonnull %2, i8 zeroext 3) #7
  br label %125

125:                                              ; preds = %123, %120
  %126 = phi i32 [ %122, %120 ], [ %124, %123 ]
  %127 = uitofp i32 %126 to double
  %128 = fadd double %116, %127
  %129 = fadd double %115, 1.000000e+00
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #7
  %130 = add nuw nsw i64 %113, 2
  %131 = add nuw nsw i32 %114, 2
  %132 = load i32, i32* %9, align 8
  %133 = sext i32 %132 to i64
  %134 = icmp slt i64 %130, %133
  %135 = icmp ult i64 %130, %68
  %136 = and i1 %135, %134
  br i1 %136, label %112, label %100

137:                                              ; preds = %48, %142
  %138 = phi i64 [ 0, %48 ], [ %143, %142 ]
  br i1 %49, label %139, label %142

139:                                              ; preds = %137
  %140 = mul nsw i64 %138, %51
  br label %145

141:                                              ; preds = %142, %42
  ret void

142:                                              ; preds = %145, %137
  %143 = add nuw nsw i64 %138, 1
  %144 = icmp slt i64 %143, %52
  br i1 %144, label %137, label %141

145:                                              ; preds = %139, %145
  %146 = phi i64 [ 0, %139 ], [ %152, %145 ]
  %147 = add nsw i64 %146, %140
  %148 = load double*, double** %50, align 8
  %149 = getelementptr inbounds double, double* %148, i64 %147
  %150 = load double, double* %149, align 8
  %151 = fdiv double %150, %47
  store double %151, double* %149, align 8
  %152 = add nuw nsw i64 %146, 1
  %153 = icmp slt i64 %152, %51
  br i1 %153, label %145, label %142
}

declare i32 @av1_high_get_sby_perpixel_variance(%struct.AV1_COMP*, %struct.buf_2d*, i8 zeroext, i32) local_unnamed_addr #2

declare i32 @av1_get_sby_perpixel_variance(%struct.AV1_COMP*, %struct.buf_2d*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_save_all_coding_context(%struct.AV1_COMP* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 26
  %4 = bitcast %struct.CODING_CONTEXT* %2 to i8*
  %5 = bitcast %struct.loopfilter* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 16 %5, i64 36, i1 false) #7
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 1
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 31
  %8 = bitcast %struct.CdefInfo* %6 to i8*
  %9 = bitcast %struct.CdefInfo* %7 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 264, i1 false) #7
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 3
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36
  %12 = bitcast %struct.RATE_CONTROL* %10 to i8*
  %13 = bitcast %struct.RATE_CONTROL* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 16 %13, i64 352, i1 false) #7
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 32, i32 4
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 77
  %16 = bitcast %struct.MV_STATS* %14 to i8*
  %17 = bitcast %struct.MV_STATS* %15 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 4 %17, i64 76, i1 false) #7
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %19 = load i8, i8* %18, align 16
  %20 = and i8 %19, -3
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %78, label %22

22:                                               ; preds = %1
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 0
  %24 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %23, align 8
  %25 = icmp eq %struct.RefCntBuffer* %24, null
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %24, i64 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = add nsw i32 %28, -1
  store i32 %29, i32* %27, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %23, align 8
  br label %30

30:                                               ; preds = %26, %22
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 1
  %32 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %31, align 8
  %33 = icmp eq %struct.RefCntBuffer* %32, null
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %32, i64 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = add nsw i32 %36, -1
  store i32 %37, i32* %35, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %31, align 8
  br label %38

38:                                               ; preds = %34, %30
  %39 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 2
  %40 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %39, align 8
  %41 = icmp eq %struct.RefCntBuffer* %40, null
  br i1 %41, label %46, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %40, i64 0, i32 0
  %44 = load i32, i32* %43, align 8
  %45 = add nsw i32 %44, -1
  store i32 %45, i32* %43, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %39, align 8
  br label %46

46:                                               ; preds = %42, %38
  %47 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 3
  %48 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %47, align 8
  %49 = icmp eq %struct.RefCntBuffer* %48, null
  br i1 %49, label %54, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %48, i64 0, i32 0
  %52 = load i32, i32* %51, align 8
  %53 = add nsw i32 %52, -1
  store i32 %53, i32* %51, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %47, align 8
  br label %54

54:                                               ; preds = %50, %46
  %55 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 4
  %56 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %55, align 8
  %57 = icmp eq %struct.RefCntBuffer* %56, null
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %56, i64 0, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = add nsw i32 %60, -1
  store i32 %61, i32* %59, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %55, align 8
  br label %62

62:                                               ; preds = %58, %54
  %63 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 5
  %64 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %63, align 8
  %65 = icmp eq %struct.RefCntBuffer* %64, null
  br i1 %65, label %70, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %64, i64 0, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = add nsw i32 %68, -1
  store i32 %69, i32* %67, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %63, align 8
  br label %70

70:                                               ; preds = %66, %62
  %71 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 23, i64 6
  %72 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %71, align 8
  %73 = icmp eq %struct.RefCntBuffer* %72, null
  br i1 %73, label %78, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %72, i64 0, i32 0
  %76 = load i32, i32* %75, align 8
  %77 = add nsw i32 %76, -1
  store i32 %77, i32* %75, align 8
  store %struct.RefCntBuffer* null, %struct.RefCntBuffer** %71, align 8
  br label %78

78:                                               ; preds = %1, %74, %70
  ret void
}

declare void @av1_disable_segmentation(%struct.segmentation*) local_unnamed_addr #2

declare void @av1_clearall_segfeatures(%struct.segmentation*) local_unnamed_addr #2

declare i32 @av1_compute_qdelta(%struct.RATE_CONTROL*, double, double, i32) local_unnamed_addr #2

declare void @av1_clear_segdata(%struct.segmentation*, i32, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #6

declare i8* @aom_calloc(i64, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
