; ModuleID = '../../cc/resources/shared_bitmap_id_registrar.cc'
source_filename = "../../cc/resources/shared_bitmap_id_registrar.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::SharedBitmapIdRegistration" = type { %"class.base::WeakPtr", %"struct.gpu::Mailbox" }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"struct.gpu::Mailbox" = type { [16 x i8] }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.cc::TextureLayer" = type { %"class.cc::Layer", %"class.cc::SharedBitmapIdRegistrar", %"class.cc::TextureLayerClient"*, i8, i8, %"class.gfx::PointF", %"class.gfx::PointF", i8, i8, i8, %"class.std::__1::unique_ptr.74", i8, %"class.base::flat_map.94", %"class.base::flat_map.94", %"class.std::__1::vector.104", %"class.base::WeakPtrFactory" }
%"class.cc::Layer" = type <{ i32 (...)**, %"class.base::RefCounted", [4 x i8], %"class.cc::Layer"*, %"class.cc::LayerTreeHost"*, %"struct.cc::Layer::Inputs", %"class.std::__1::unique_ptr", i32, i32, i32, i32, i32, i32, %"class.gfx::Vector2dF", i8, i16, [5 x i8], %"class.std::__1::unique_ptr.48" }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.cc::LayerTreeHost" = type opaque
%"struct.cc::Layer::Inputs" = type { %"class.std::__1::vector", %"class.gfx::Rect", %"class.gfx::Size", i32, i8, i32, %"class.cc::Region", %"class.cc::TouchActionRegion", %"class.cc::Region", %"struct.cc::ElementId" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.scoped_refptr.6*, %class.scoped_refptr.6*, %"class.std::__1::__compressed_pair" }
%class.scoped_refptr.6 = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.scoped_refptr.6* }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.cc::TouchActionRegion" = type { %"class.base::flat_map" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.8" }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.10" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.std::__1::pair"* }
%"class.cc::Region" = type { %class.SkRegion }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.cc::Layer::LayerTreeInputs"* }
%"struct.cc::Layer::LayerTreeInputs" = type { %"class.gfx::Rect", %"class.cc::PictureLayer"*, float, i32, i8, %"class.gfx::PointF", %"class.gfx::Transform", %"class.gfx::Point3F", %"class.viz::SubtreeCaptureId", i32, %"class.cc::FilterOperations", %"class.cc::FilterOperations", %"class.absl::optional.32", float, i32, %"class.gfx::ScrollOffset", %"class.gfx::Size", %"class.gfx::RoundedCornersF", %"class.base::RepeatingCallback", %"class.std::__1::vector.39" }
%"class.cc::PictureLayer" = type opaque
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.gfx::Point3F" = type { float, float, float }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.17" }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.27" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp, [20 x float], i32, [4 x i8], %"class.std::__1::vector.20", i32, [4 x i8] }>
%class.sk_sp = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.19, i32, %"class.absl::optional", i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.sk_sp.19 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.cc::FilterOperation"* }
%"class.absl::optional.32" = type { %"class.absl::optional_internal::optional_data.33" }
%"class.absl::optional_internal::optional_data.33" = type { %"class.absl::optional_internal::optional_data_base.34" }
%"class.absl::optional_internal::optional_data_base.34" = type { %"class.absl::optional_internal::optional_data_dtor_base.35" }
%"class.absl::optional_internal::optional_data_dtor_base.35" = type { i8, %union.anon.36 }
%union.anon.36 = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.gfx::RoundedCornersF" = type { float, float, float, float }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.37 }
%class.scoped_refptr.37 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.38", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.38" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"class.std::__1::unique_ptr.41"*, %"class.std::__1::unique_ptr.41"*, %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::unique_ptr.41" = type opaque
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.std::__1::unique_ptr.41"* }
%"class.gfx::Vector2dF" = type { float, float }
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"struct.cc::LayerDebugInfo"* }
%"struct.cc::LayerDebugInfo" = type { %"class.std::__1::basic_string", i32, i32, %"class.std::__1::vector.57", %"class.std::__1::vector.57", %"class.std::__1::vector.64" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.53 }
%union.anon.53 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { i8**, i8**, %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { i8** }
%"class.std::__1::vector.64" = type { %"class.std::__1::__vector_base.65" }
%"class.std::__1::__vector_base.65" = type { %"struct.cc::LayerDebugInfo::Invalidation"*, %"struct.cc::LayerDebugInfo::Invalidation"*, %"class.std::__1::__compressed_pair.66" }
%"struct.cc::LayerDebugInfo::Invalidation" = type { %"class.gfx::Rect", i8*, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"struct.cc::LayerDebugInfo::Invalidation"* }
%"class.cc::SharedBitmapIdRegistrar" = type { i32 (...)** }
%"class.cc::TextureLayerClient" = type opaque
%"class.gfx::PointF" = type { float, float }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.cc::TextureLayer::TransferableResourceHolder::MainThreadReference"* }
%"class.cc::TextureLayer::TransferableResourceHolder::MainThreadReference" = type { %class.scoped_refptr.77 }
%class.scoped_refptr.77 = type { %"class.cc::TextureLayer::TransferableResourceHolder"* }
%"class.cc::TextureLayer::TransferableResourceHolder" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.78", i32, %"struct.viz::TransferableResource", %"class.base::OnceCallback", %"class.base::Lock", %"struct.gpu::SyncToken", i8, %"class.base::ThreadChecker", [6 x i8] }>
%"class.base::RefCountedThreadSafe.78" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.viz::TransferableResource" = type { %"class.util::IdType", i8, %"class.gfx::Size", i32, [4 x i8], %"struct.gpu::MailboxHolder", %"class.gfx::ColorSpace", %"class.absl::optional.81", i8, i32, i8, [7 x i8], %"class.absl::optional.86" }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i32 }
%"struct.gpu::MailboxHolder" = type <{ %"struct.gpu::Mailbox", %"struct.gpu::SyncToken", i32, [4 x i8] }>
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.absl::optional.81" = type { %"class.absl::optional_internal::optional_data.82" }
%"class.absl::optional_internal::optional_data.82" = type { %"class.absl::optional_internal::optional_data_base.83" }
%"class.absl::optional_internal::optional_data_base.83" = type { %"class.absl::optional_internal::optional_data_dtor_base.84" }
%"class.absl::optional_internal::optional_data_dtor_base.84" = type { i8, %union.anon.85 }
%union.anon.85 = type { %"struct.gfx::HDRMetadata" }
%"struct.gfx::HDRMetadata" = type { %"struct.gfx::MasteringMetadata", i32, i32 }
%"struct.gfx::MasteringMetadata" = type { %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", %"class.gfx::PointF", float, float }
%"class.absl::optional.86" = type { %"class.absl::optional_internal::optional_data.87" }
%"class.absl::optional_internal::optional_data.87" = type { %"class.absl::optional_internal::optional_data_base.88" }
%"class.absl::optional_internal::optional_data_base.88" = type { %"class.absl::optional_internal::optional_data_dtor_base.89" }
%"class.absl::optional_internal::optional_data_dtor_base.89" = type { i8, [7 x i8], %union.anon.90 }
%union.anon.90 = type { %"struct.gpu::VulkanYCbCrInfo" }
%"struct.gpu::VulkanYCbCrInfo" = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.gpu::SyncToken" = type { i8, i8, %"class.util::IdType.79", i64 }
%"class.util::IdType.79" = type { %"class.base::StrongAlias.80" }
%"class.base::StrongAlias.80" = type { i64 }
%"class.base::ThreadChecker" = type { i8 }
%"class.base::flat_map.94" = type { %"class.base::internal::flat_tree.95" }
%"class.base::internal::flat_tree.95" = type { %"class.std::__1::vector.96" }
%"class.std::__1::vector.96" = type { %"class.std::__1::__vector_base.97" }
%"class.std::__1::__vector_base.97" = type { %"struct.std::__1::pair.98"*, %"struct.std::__1::pair.98"*, %"class.std::__1::__compressed_pair.99" }
%"struct.std::__1::pair.98" = type opaque
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"struct.std::__1::pair.98"* }
%"class.std::__1::vector.104" = type { %"class.std::__1::__vector_base.105" }
%"class.std::__1::__vector_base.105" = type { %"struct.gpu::Mailbox"*, %"struct.gpu::Mailbox"*, %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.gpu::Mailbox"* }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.111 }
%class.scoped_refptr.111 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

@.str = private unnamed_addr constant [29 x i8] c"../../base/memory/weak_ptr.h\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"ref_.IsValid()\00", align 1

@_ZN2cc26SharedBitmapIdRegistrationC1Ev = hidden unnamed_addr alias void (%"class.cc::SharedBitmapIdRegistration"*), void (%"class.cc::SharedBitmapIdRegistration"*)* @_ZN2cc26SharedBitmapIdRegistrationC2Ev
@_ZN2cc26SharedBitmapIdRegistrationC1EN4base7WeakPtrINS_12TextureLayerEEERKN3gpu7MailboxE = hidden unnamed_addr alias void (%"class.cc::SharedBitmapIdRegistration"*, %"class.base::WeakPtr"*, %"struct.gpu::Mailbox"*), void (%"class.cc::SharedBitmapIdRegistration"*, %"class.base::WeakPtr"*, %"struct.gpu::Mailbox"*)* @_ZN2cc26SharedBitmapIdRegistrationC2EN4base7WeakPtrINS_12TextureLayerEEERKN3gpu7MailboxE
@_ZN2cc26SharedBitmapIdRegistrationD1Ev = hidden unnamed_addr alias void (%"class.cc::SharedBitmapIdRegistration"*), void (%"class.cc::SharedBitmapIdRegistration"*)* @_ZN2cc26SharedBitmapIdRegistrationD2Ev
@_ZN2cc26SharedBitmapIdRegistrationC1EOS0_ = hidden unnamed_addr alias void (%"class.cc::SharedBitmapIdRegistration"*, %"class.cc::SharedBitmapIdRegistration"*), void (%"class.cc::SharedBitmapIdRegistration"*, %"class.cc::SharedBitmapIdRegistration"*)* @_ZN2cc26SharedBitmapIdRegistrationC2EOS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc26SharedBitmapIdRegistrationC2Ev(%"class.cc::SharedBitmapIdRegistration"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal11WeakPtrBaseC2Ev(%"class.base::internal::WeakPtrBase"* %2) #5
  %3 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 1
  tail call void @_ZN3gpu7MailboxC1Ev(%"struct.gpu::Mailbox"* %3) #5
  ret void
}

declare void @_ZN3gpu7MailboxC1Ev(%"struct.gpu::Mailbox"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc26SharedBitmapIdRegistrationC2EN4base7WeakPtrINS_12TextureLayerEEERKN3gpu7MailboxE(%"class.cc::SharedBitmapIdRegistration"*, %"class.base::WeakPtr"*, %"struct.gpu::Mailbox"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %1, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"* %4, %"class.base::internal::WeakReference"* dereferenceable(8) %5) #5
  %6 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %1, i64 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  store i64 %8, i64* %6, align 8
  %9 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 1, i32 0, i64 0
  %10 = getelementptr inbounds %"struct.gpu::Mailbox", %"struct.gpu::Mailbox"* %2, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 1 %10, i64 16, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc26SharedBitmapIdRegistrationD2Ev(%"class.cc::SharedBitmapIdRegistration"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %3) #5
  br i1 %4, label %5, label %27

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = bitcast i64* %6 to %"class.cc::TextureLayer"**
  %8 = load %"class.cc::TextureLayer"*, %"class.cc::TextureLayer"** %7, align 8
  %9 = icmp eq %"class.cc::TextureLayer"* %8, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %5
  %11 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %3) #5
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #5
  %14 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #5
  br label %15

15:                                               ; preds = %12, %10
  %16 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %3) #5
  br i1 %16, label %17, label %19

17:                                               ; preds = %15
  %18 = load %"class.cc::TextureLayer"*, %"class.cc::TextureLayer"** %7, align 8
  br label %19

19:                                               ; preds = %15, %17
  %20 = phi %"class.cc::TextureLayer"* [ %18, %17 ], [ null, %15 ]
  %21 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 1
  %22 = bitcast %"struct.gpu::Mailbox"* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 1, i32 0, i64 8
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 8
  call void @_ZN2cc12TextureLayer24UnregisterSharedBitmapIdEN3gpu7MailboxE(%"class.cc::TextureLayer"* %20, i64 %23, i64 %26) #5
  br label %27

27:                                               ; preds = %5, %1, %19
  %28 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 0, i32 0
  call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* %28) #5
  ret void
}

declare void @_ZN2cc12TextureLayer24UnregisterSharedBitmapIdEN3gpu7MailboxE(%"class.cc::TextureLayer"*, i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc26SharedBitmapIdRegistrationC2EOS0_(%"class.cc::SharedBitmapIdRegistration"*, %"class.cc::SharedBitmapIdRegistration"* dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %1, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"* %3, %"class.base::internal::WeakReference"* dereferenceable(8) %4) #5
  %5 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %1, i64 0, i32 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  store i64 %7, i64* %5, align 8
  %8 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 1, i32 0, i64 0
  %9 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %1, i64 0, i32 1, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(32) %"class.cc::SharedBitmapIdRegistration"* @_ZN2cc26SharedBitmapIdRegistrationaSEOS0_(%"class.cc::SharedBitmapIdRegistration"* returned, %"class.cc::SharedBitmapIdRegistration"* nocapture dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %4) #5
  br i1 %5, label %6, label %28

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast i64* %7 to %"class.cc::TextureLayer"**
  %9 = load %"class.cc::TextureLayer"*, %"class.cc::TextureLayer"** %8, align 8
  %10 = icmp eq %"class.cc::TextureLayer"* %9, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %6
  %12 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %4) #5
  br i1 %12, label %16, label %13

13:                                               ; preds = %11
  %14 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #5
  %15 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #5
  br label %16

16:                                               ; preds = %13, %11
  %17 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %4) #5
  br i1 %17, label %18, label %20

18:                                               ; preds = %16
  %19 = load %"class.cc::TextureLayer"*, %"class.cc::TextureLayer"** %8, align 8
  br label %20

20:                                               ; preds = %16, %18
  %21 = phi %"class.cc::TextureLayer"* [ %19, %18 ], [ null, %16 ]
  %22 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 1
  %23 = bitcast %"struct.gpu::Mailbox"* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 1, i32 0, i64 8
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 8
  call void @_ZN2cc12TextureLayer24UnregisterSharedBitmapIdEN3gpu7MailboxE(%"class.cc::TextureLayer"* %21, i64 %24, i64 %27) #5
  br label %28

28:                                               ; preds = %6, %2, %20
  %29 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = bitcast %"class.cc::SharedBitmapIdRegistration"* %1 to i64*
  %31 = load i64, i64* %30, align 8
  store %"class.base::internal::WeakReference::Flag"* null, %"class.base::internal::WeakReference::Flag"** %29, align 8
  %32 = bitcast %"class.cc::SharedBitmapIdRegistration"* %0 to i64*
  %33 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load %"class.base::internal::WeakReference::Flag"*, %"class.base::internal::WeakReference::Flag"** %33, align 8
  store i64 %31, i64* %32, align 8
  %35 = icmp eq %"class.base::internal::WeakReference::Flag"* %34, null
  br i1 %35, label %42, label %36

36:                                               ; preds = %28
  %37 = getelementptr inbounds %"class.base::internal::WeakReference::Flag", %"class.base::internal::WeakReference::Flag"* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = atomicrmw sub i32* %37, i32 1 acq_rel
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %42

40:                                               ; preds = %36
  call void @_ZN4base8internal13WeakReference4FlagD1Ev(%"class.base::internal::WeakReference::Flag"* nonnull %34) #5
  %41 = bitcast %"class.base::internal::WeakReference::Flag"* %34 to i8*
  call void @_ZdlPv(i8* %41) #6
  br label %42

42:                                               ; preds = %28, %36, %40
  %43 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %1, i64 0, i32 0, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 0, i32 0, i32 1
  store i64 %44, i64* %45, align 8
  %46 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %0, i64 0, i32 1, i32 0, i64 0
  %47 = getelementptr inbounds %"class.cc::SharedBitmapIdRegistration", %"class.cc::SharedBitmapIdRegistration"* %1, i64 0, i32 1, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 1 %47, i64 16, i1 false)
  ret %"class.cc::SharedBitmapIdRegistration"* %0
}

declare void @_ZN4base8internal11WeakPtrBaseC2Ev(%"class.base::internal::WeakPtrBase"*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base8internal13WeakReferenceC1EOS1_(%"class.base::internal::WeakReference"*, %"class.base::internal::WeakReference"* dereferenceable(8)) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind
declare void @_ZN4base8internal13WeakReference4FlagD1Ev(%"class.base::internal::WeakReference::Flag"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"*) local_unnamed_addr #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
