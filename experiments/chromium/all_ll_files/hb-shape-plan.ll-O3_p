; ModuleID = '../../third_party/harfbuzz-ng/src/src/hb-shape-plan.cc'
source_filename = "../../third_party/harfbuzz-ng/src/src/hb-shape-plan.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.hb_shape_plan_key_t = type { %struct.hb_segment_properties_t, %struct.hb_feature_t*, i32, %struct.hb_ot_shape_plan_key_t, i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)*, i8* }
%struct.hb_segment_properties_t = type { i32, i32, %struct.hb_language_impl_t*, i8*, i8* }
%struct.hb_language_impl_t = type opaque
%struct.hb_ot_shape_plan_key_t = type { [2 x i32] }
%struct.hb_shape_plan_t = type { %struct.hb_object_header_t, %struct.hb_face_t*, %struct.hb_shape_plan_key_t, %struct.hb_ot_shape_plan_t }
%struct.hb_object_header_t = type { %struct.hb_reference_count_t, %struct.hb_atomic_int_t, %struct.hb_atomic_ptr_t }
%struct.hb_reference_count_t = type { %struct.hb_atomic_int_t }
%struct.hb_atomic_int_t = type { i32 }
%struct.hb_atomic_ptr_t = type { %struct.hb_user_data_array_t* }
%struct.hb_user_data_array_t = type { %struct.hb_mutex_t, %struct.hb_lockable_set_t }
%struct.hb_mutex_t = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.hb_lockable_set_t = type { %struct.hb_vector_t }
%struct.hb_vector_t = type { i32, i32, %"struct.hb_user_data_array_t::hb_user_data_item_t"* }
%"struct.hb_user_data_array_t::hb_user_data_item_t" = type { %struct.hb_user_data_key_t*, i8*, void (i8*)* }
%struct.hb_user_data_key_t = type { i8 }
%struct.hb_ot_shape_plan_t = type <{ %struct.hb_segment_properties_t, %struct.hb_ot_complex_shaper_t*, %struct.hb_ot_map_t, %struct.hb_aat_map_t, i8*, i32, i32, i32, i32, i32, i32, i16, [6 x i8] }>
%struct.hb_ot_complex_shaper_t = type opaque
%struct.hb_ot_map_t = type { [2 x i32], [2 x i8], i32, %struct.hb_sorted_vector_t, [2 x %struct.hb_vector_t.137], [2 x %struct.hb_vector_t.138] }
%struct.hb_sorted_vector_t = type { %struct.hb_vector_t.136 }
%struct.hb_vector_t.136 = type { i32, i32, %"struct.hb_ot_map_t::feature_map_t"* }
%"struct.hb_ot_map_t::feature_map_t" = type { i32, [2 x i32], [2 x i32], i32, i32, i32, i8 }
%struct.hb_vector_t.137 = type { i32, i32, %"struct.hb_ot_map_t::lookup_map_t"* }
%"struct.hb_ot_map_t::lookup_map_t" = type { i16, i8, i32 }
%struct.hb_vector_t.138 = type { i32, i32, %"struct.hb_ot_map_t::stage_map_t"* }
%"struct.hb_ot_map_t::stage_map_t" = type { i32, void (%struct.hb_ot_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*)* }
%struct.hb_aat_map_t = type { %struct.hb_vector_t.139 }
%struct.hb_vector_t.139 = type { i32, i32, i32* }
%struct.hb_font_t = type { %struct.hb_object_header_t, %struct.hb_font_t*, %struct.hb_face_t*, i32, i32, i64, i64, i32, i32, float, i32, i32*, float*, %struct.hb_font_funcs_t*, i8*, void (i8*)*, %struct.hb_shaper_object_dataset_t.128 }
%struct.hb_font_funcs_t = type { %struct.hb_object_header_t, %struct.anon, %struct.anon.127, %"union.hb_font_funcs_t::get_t" }
%struct.anon = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct.anon.127 = type { void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)* }
%"union.hb_font_funcs_t::get_t" = type { %"struct.hb_font_funcs_t::get_t::get_funcs_t" }
%"struct.hb_font_funcs_t::get_t::get_funcs_t" = type { i32 (%struct.hb_font_t*, i8*, %struct.hb_font_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, %struct.hb_font_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*)*, void (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, void (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, %struct.hb_glyph_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i8*, i32, i32*, i8*)* }
%struct.hb_font_extents_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.hb_glyph_extents_t = type { i32, i32, i32, i32 }
%struct.hb_shaper_object_dataset_t.128 = type { %struct.hb_font_t*, %struct.hb_shaper_lazy_loader_t.129 }
%struct.hb_shaper_lazy_loader_t.129 = type { %struct.hb_lazy_loader_t.130 }
%struct.hb_lazy_loader_t.130 = type { %struct.hb_atomic_ptr_t.132 }
%struct.hb_atomic_ptr_t.132 = type { %struct.hb_ot_font_data_t* }
%struct.hb_ot_font_data_t = type opaque
%struct.hb_buffer_t = type { %struct.hb_object_header_t, %struct.hb_unicode_funcs_t*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.hb_segment_properties_t, i8, i8, i8, i32, i32, i32, i32, %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t*, %struct.hb_glyph_position_t*, i32, [2 x [5 x i32]], [2 x i32], i32 (%struct.hb_buffer_t*, %struct.hb_font_t*, i8*, i8*)*, i8*, void (i8*)* }
%struct.hb_unicode_funcs_t = type { %struct.hb_object_header_t, %struct.hb_unicode_funcs_t*, %struct.anon.133, %struct.anon.134, %struct.anon.135 }
%struct.anon.133 = type { i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32, i32*, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32*, i8*)* }
%struct.anon.134 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct.anon.135 = type { void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)* }
%struct.hb_glyph_info_t = type { i32, i32, i32, %union._hb_var_int_t, %union._hb_var_int_t }
%union._hb_var_int_t = type { i32 }
%struct.hb_glyph_position_t = type { i32, i32, i32, i32, %union._hb_var_int_t }
%struct.hb_face_t = type { %struct.hb_object_header_t, %struct.hb_blob_t* (%struct.hb_face_t*, i32, i8*)*, i8*, void (i8*)*, i32, %struct.hb_atomic_int_t, %struct.hb_atomic_int_t, %struct.hb_shaper_object_dataset_t, %struct.hb_ot_face_t, %struct.hb_atomic_ptr_t.126 }
%struct.hb_blob_t = type { %struct.hb_object_header_t, i8*, i32, i32, i8*, void (i8*)* }
%struct.hb_shaper_object_dataset_t = type { %struct.hb_face_t*, %struct.hb_shaper_lazy_loader_t }
%struct.hb_shaper_lazy_loader_t = type { %struct.hb_lazy_loader_t }
%struct.hb_lazy_loader_t = type { %struct.hb_atomic_ptr_t.0 }
%struct.hb_atomic_ptr_t.0 = type { %struct.hb_ot_face_data_t* }
%struct.hb_ot_face_data_t = type opaque
%struct.hb_ot_face_t = type { %struct.hb_face_t*, %struct.hb_table_lazy_loader_t, %struct.hb_face_lazy_loader_t, %struct.hb_table_lazy_loader_t.6, %struct.hb_face_lazy_loader_t.9, %struct.hb_table_lazy_loader_t.13, %struct.hb_face_lazy_loader_t.16, %struct.hb_face_lazy_loader_t.20, %struct.hb_table_lazy_loader_t.24, %struct.hb_face_lazy_loader_t.27, %struct.hb_table_lazy_loader_t.31, %struct.hb_face_lazy_loader_t.34, %struct.hb_face_lazy_loader_t.38, %struct.hb_face_lazy_loader_t.42, %struct.hb_face_lazy_loader_t.46, %struct.hb_table_lazy_loader_t.50, %struct.hb_table_lazy_loader_t.53, %struct.hb_table_lazy_loader_t.56, %struct.hb_face_lazy_loader_t.59, %struct.hb_table_lazy_loader_t.63, %struct.hb_table_lazy_loader_t.66, %struct.hb_face_lazy_loader_t.69, %struct.hb_face_lazy_loader_t.73, %struct.hb_face_lazy_loader_t.77, %struct.hb_table_lazy_loader_t.81, %struct.hb_table_lazy_loader_t.84, %struct.hb_table_lazy_loader_t.87, %struct.hb_table_lazy_loader_t.90, %struct.hb_table_lazy_loader_t.93, %struct.hb_table_lazy_loader_t.96, %struct.hb_table_lazy_loader_t.99, %struct.hb_table_lazy_loader_t.102, %struct.hb_table_lazy_loader_t.105, %struct.hb_table_lazy_loader_t.108, %struct.hb_face_lazy_loader_t.111, %struct.hb_face_lazy_loader_t.115, %struct.hb_face_lazy_loader_t.119, %struct.hb_table_lazy_loader_t.123 }
%struct.hb_table_lazy_loader_t = type { %struct.hb_lazy_loader_t.1 }
%struct.hb_lazy_loader_t.1 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_atomic_ptr_t.2 = type { %struct.hb_blob_t* }
%struct.hb_face_lazy_loader_t = type { %struct.hb_lazy_loader_t.3 }
%struct.hb_lazy_loader_t.3 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_atomic_ptr_t.5 = type { %"struct.OT::cmap_accelerator_t"* }
%"struct.OT::cmap_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.6 = type { %struct.hb_lazy_loader_t.7 }
%struct.hb_lazy_loader_t.7 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.9 = type { %struct.hb_lazy_loader_t.10 }
%struct.hb_lazy_loader_t.10 = type { %struct.hb_atomic_ptr_t.12 }
%struct.hb_atomic_ptr_t.12 = type { %"struct.OT::hmtx_accelerator_t"* }
%"struct.OT::hmtx_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.13 = type { %struct.hb_lazy_loader_t.14 }
%struct.hb_lazy_loader_t.14 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.16 = type { %struct.hb_lazy_loader_t.17 }
%struct.hb_lazy_loader_t.17 = type { %struct.hb_atomic_ptr_t.19 }
%struct.hb_atomic_ptr_t.19 = type { %"struct.OT::post_accelerator_t"* }
%"struct.OT::post_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.20 = type { %struct.hb_lazy_loader_t.21 }
%struct.hb_lazy_loader_t.21 = type { %struct.hb_atomic_ptr_t.23 }
%struct.hb_atomic_ptr_t.23 = type { %"struct.OT::name_accelerator_t"* }
%"struct.OT::name_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.24 = type { %struct.hb_lazy_loader_t.25 }
%struct.hb_lazy_loader_t.25 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.27 = type { %struct.hb_lazy_loader_t.28 }
%struct.hb_lazy_loader_t.28 = type { %struct.hb_atomic_ptr_t.30 }
%struct.hb_atomic_ptr_t.30 = type { %"struct.OT::meta_accelerator_t"* }
%"struct.OT::meta_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.31 = type { %struct.hb_lazy_loader_t.32 }
%struct.hb_lazy_loader_t.32 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.34 = type { %struct.hb_lazy_loader_t.35 }
%struct.hb_lazy_loader_t.35 = type { %struct.hb_atomic_ptr_t.37 }
%struct.hb_atomic_ptr_t.37 = type { %"struct.OT::vmtx_accelerator_t"* }
%"struct.OT::vmtx_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.38 = type { %struct.hb_lazy_loader_t.39 }
%struct.hb_lazy_loader_t.39 = type { %struct.hb_atomic_ptr_t.41 }
%struct.hb_atomic_ptr_t.41 = type { %"struct.OT::glyf_accelerator_t"* }
%"struct.OT::glyf_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.42 = type { %struct.hb_lazy_loader_t.43 }
%struct.hb_lazy_loader_t.43 = type { %struct.hb_atomic_ptr_t.45 }
%struct.hb_atomic_ptr_t.45 = type { %"struct.OT::cff1_accelerator_t"* }
%"struct.OT::cff1_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.46 = type { %struct.hb_lazy_loader_t.47 }
%struct.hb_lazy_loader_t.47 = type { %struct.hb_atomic_ptr_t.49 }
%struct.hb_atomic_ptr_t.49 = type { %"struct.OT::cff2_accelerator_t"* }
%"struct.OT::cff2_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.50 = type { %struct.hb_lazy_loader_t.51 }
%struct.hb_lazy_loader_t.51 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.53 = type { %struct.hb_lazy_loader_t.54 }
%struct.hb_lazy_loader_t.54 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.56 = type { %struct.hb_lazy_loader_t.57 }
%struct.hb_lazy_loader_t.57 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.59 = type { %struct.hb_lazy_loader_t.60 }
%struct.hb_lazy_loader_t.60 = type { %struct.hb_atomic_ptr_t.62 }
%struct.hb_atomic_ptr_t.62 = type { %"struct.OT::gvar_accelerator_t"* }
%"struct.OT::gvar_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.63 = type { %struct.hb_lazy_loader_t.64 }
%struct.hb_lazy_loader_t.64 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.66 = type { %struct.hb_lazy_loader_t.67 }
%struct.hb_lazy_loader_t.67 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.69 = type { %struct.hb_lazy_loader_t.70 }
%struct.hb_lazy_loader_t.70 = type { %struct.hb_atomic_ptr_t.72 }
%struct.hb_atomic_ptr_t.72 = type { %"struct.OT::GDEF_accelerator_t"* }
%"struct.OT::GDEF_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.73 = type { %struct.hb_lazy_loader_t.74 }
%struct.hb_lazy_loader_t.74 = type { %struct.hb_atomic_ptr_t.76 }
%struct.hb_atomic_ptr_t.76 = type { %"struct.OT::GSUB_accelerator_t"* }
%"struct.OT::GSUB_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.77 = type { %struct.hb_lazy_loader_t.78 }
%struct.hb_lazy_loader_t.78 = type { %struct.hb_atomic_ptr_t.80 }
%struct.hb_atomic_ptr_t.80 = type { %"struct.OT::GPOS_accelerator_t"* }
%"struct.OT::GPOS_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.81 = type { %struct.hb_lazy_loader_t.82 }
%struct.hb_lazy_loader_t.82 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.84 = type { %struct.hb_lazy_loader_t.85 }
%struct.hb_lazy_loader_t.85 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.87 = type { %struct.hb_lazy_loader_t.88 }
%struct.hb_lazy_loader_t.88 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.90 = type { %struct.hb_lazy_loader_t.91 }
%struct.hb_lazy_loader_t.91 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.93 = type { %struct.hb_lazy_loader_t.94 }
%struct.hb_lazy_loader_t.94 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.96 = type { %struct.hb_lazy_loader_t.97 }
%struct.hb_lazy_loader_t.97 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.99 = type { %struct.hb_lazy_loader_t.100 }
%struct.hb_lazy_loader_t.100 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.102 = type { %struct.hb_lazy_loader_t.103 }
%struct.hb_lazy_loader_t.103 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.105 = type { %struct.hb_lazy_loader_t.106 }
%struct.hb_lazy_loader_t.106 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.108 = type { %struct.hb_lazy_loader_t.109 }
%struct.hb_lazy_loader_t.109 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.111 = type { %struct.hb_lazy_loader_t.112 }
%struct.hb_lazy_loader_t.112 = type { %struct.hb_atomic_ptr_t.114 }
%struct.hb_atomic_ptr_t.114 = type { %"struct.OT::CBDT_accelerator_t"* }
%"struct.OT::CBDT_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.115 = type { %struct.hb_lazy_loader_t.116 }
%struct.hb_lazy_loader_t.116 = type { %struct.hb_atomic_ptr_t.118 }
%struct.hb_atomic_ptr_t.118 = type { %"struct.OT::sbix_accelerator_t"* }
%"struct.OT::sbix_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.119 = type { %struct.hb_lazy_loader_t.120 }
%struct.hb_lazy_loader_t.120 = type { %struct.hb_atomic_ptr_t.122 }
%struct.hb_atomic_ptr_t.122 = type { %"struct.OT::SVG_accelerator_t"* }
%"struct.OT::SVG_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.123 = type { %struct.hb_lazy_loader_t.124 }
%struct.hb_lazy_loader_t.124 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_atomic_ptr_t.126 = type { %"struct.hb_face_t::plan_node_t"* }
%"struct.hb_face_t::plan_node_t" = type { %struct.hb_shape_plan_t*, %"struct.hb_face_t::plan_node_t"* }
%struct.hb_feature_t = type { i32, i32, i32, i32 }
%struct.hb_shaper_entry_t = type { [16 x i8], i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)* }
%union.pthread_mutexattr_t = type { i32 }

$_ZN17hb_lockable_set_tIN20hb_user_data_array_t19hb_user_data_item_tE10hb_mutex_tE4finiERS2_ = comdat any

@.str = private unnamed_addr constant [3 x i8] c"ot\00", align 1
@_hb_NullPool = external hidden constant [48 x i64], align 16

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN19hb_shape_plan_key_t4initEbP9hb_face_tPK23hb_segment_properties_tPK12hb_feature_tjPKijPKPKc(%struct.hb_shape_plan_key_t*, i1 zeroext, %struct.hb_face_t*, %struct.hb_segment_properties_t* nocapture readonly, %struct.hb_feature_t*, i32, i32*, i32, i8** readonly) local_unnamed_addr #0 align 2 {
  %10 = icmp ne i32 %5, 0
  %11 = and i1 %10, %1
  br i1 %11, label %12, label %17

12:                                               ; preds = %9
  %13 = zext i32 %5 to i64
  %14 = tail call noalias i8* @calloc(i64 %13, i64 16) #10
  %15 = bitcast i8* %14 to %struct.hb_feature_t*
  %16 = icmp eq i8* %14, null
  br i1 %16, label %141, label %17

17:                                               ; preds = %12, %9
  %18 = phi i8* [ %14, %12 ], [ null, %9 ]
  %19 = phi %struct.hb_feature_t* [ %15, %12 ], [ null, %9 ]
  %20 = bitcast %struct.hb_shape_plan_key_t* %0 to i8*
  %21 = bitcast %struct.hb_segment_properties_t* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 32, i1 false)
  %22 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %0, i64 0, i32 2
  store i32 %5, i32* %22, align 8
  %23 = select i1 %1, %struct.hb_feature_t* %19, %struct.hb_feature_t* %4
  %24 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %0, i64 0, i32 1
  store %struct.hb_feature_t* %23, %struct.hb_feature_t** %24, align 8
  br i1 %11, label %25, label %58

25:                                               ; preds = %17
  %26 = bitcast %struct.hb_feature_t* %4 to i8*
  %27 = zext i32 %5 to i64
  %28 = shl nuw nsw i64 %27, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %18, i8* align 4 %26, i64 %28, i1 false)
  %29 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %19, i64 0, i32 2
  %30 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %19, i64 0, i32 3
  %31 = load i32, i32* %29, align 4
  %32 = and i32 %5, 1
  %33 = icmp eq i32 %5, 1
  br i1 %33, label %48, label %34

34:                                               ; preds = %25
  %35 = sub i32 %5, %32
  br label %36

36:                                               ; preds = %151, %34
  %37 = phi i32 [ %31, %34 ], [ %147, %151 ]
  %38 = phi i32 [ %35, %34 ], [ %152, %151 ]
  %39 = icmp eq i32 %37, 0
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  store i32 1, i32* %29, align 4
  br label %41

41:                                               ; preds = %36, %40
  %42 = phi i32 [ 0, %36 ], [ 1, %40 ]
  %43 = load i32, i32* %30, align 4
  %44 = icmp eq i32 %43, -1
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  store i32 2, i32* %30, align 4
  br label %46

46:                                               ; preds = %41, %45
  %47 = icmp eq i32 %42, 0
  br i1 %47, label %146, label %145

48:                                               ; preds = %151, %25
  %49 = phi i32 [ %31, %25 ], [ %147, %151 ]
  %50 = icmp eq i32 %32, 0
  br i1 %50, label %58, label %51

51:                                               ; preds = %48
  %52 = icmp eq i32 %49, 0
  br i1 %52, label %54, label %53

53:                                               ; preds = %51
  store i32 1, i32* %29, align 4
  br label %54

54:                                               ; preds = %53, %51
  %55 = load i32, i32* %30, align 4
  %56 = icmp eq i32 %55, -1
  br i1 %56, label %58, label %57

57:                                               ; preds = %54
  store i32 2, i32* %30, align 4
  br label %58

58:                                               ; preds = %48, %54, %57, %17
  %59 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %0, i64 0, i32 4
  %60 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %0, i64 0, i32 5
  %61 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %0, i64 0, i32 3, i32 0, i64 0
  %62 = bitcast i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)** %59 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 16, i1 false)
  %63 = tail call i32 @hb_ot_layout_table_find_feature_variations(%struct.hb_face_t* %2, i32 1196643650, i32* %6, i32 %7, i32* %61) #10
  %64 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %0, i64 0, i32 3, i32 0, i64 1
  %65 = tail call i32 @hb_ot_layout_table_find_feature_variations(%struct.hb_face_t* %2, i32 1196445523, i32* %6, i32 %7, i32* %64) #10
  %66 = icmp eq i8** %8, null
  br i1 %66, label %108, label %67, !prof !2

67:                                               ; preds = %58
  %68 = load i8*, i8** %8, align 8
  %69 = icmp eq i8* %68, null
  br i1 %69, label %141, label %70

70:                                               ; preds = %67
  %71 = getelementptr inbounds %struct.hb_face_t, %struct.hb_face_t* %2, i64 0, i32 7, i32 1, i32 0
  %72 = getelementptr inbounds %struct.hb_lazy_loader_t, %struct.hb_lazy_loader_t* %71, i64 -1
  %73 = bitcast %struct.hb_lazy_loader_t* %72 to %struct.hb_face_t**
  %74 = bitcast %struct.hb_lazy_loader_t* %71 to i64*
  br label %75

75:                                               ; preds = %70, %104
  %76 = phi i8* [ %68, %70 ], [ %106, %104 ]
  %77 = phi i8** [ %8, %70 ], [ %105, %104 ]
  %78 = tail call i32 @strcmp(i8* nonnull %76, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0)) #11
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %104

80:                                               ; preds = %75
  %81 = load atomic i64, i64* %74 acquire, align 8
  %82 = inttoptr i64 %81 to %struct.hb_ot_face_data_t*
  %83 = icmp eq i64 %81, 0
  br i1 %83, label %84, label %100, !prof !3

84:                                               ; preds = %80, %95
  %85 = load %struct.hb_face_t*, %struct.hb_face_t** %73, align 8
  %86 = icmp eq %struct.hb_face_t* %85, null
  br i1 %86, label %104, label %87, !prof !3

87:                                               ; preds = %84
  %88 = tail call %struct.hb_ot_face_data_t* @_hb_ot_shaper_face_data_create(%struct.hb_face_t* nonnull %85) #10
  %89 = ptrtoint %struct.hb_ot_face_data_t* %88 to i64
  %90 = cmpxchg weak i64* %74, i64 0, i64 %89 acq_rel monotonic
  %91 = extractvalue { i64, i1 } %90, 1
  br i1 %91, label %100, label %92, !prof !2

92:                                               ; preds = %87
  %93 = icmp eq %struct.hb_ot_face_data_t* %88, null
  br i1 %93, label %95, label %94

94:                                               ; preds = %92
  tail call void @_hb_ot_shaper_face_data_destroy(%struct.hb_ot_face_data_t* nonnull %88) #10
  br label %95

95:                                               ; preds = %94, %92
  %96 = load atomic i64, i64* %74 acquire, align 8
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %84, label %98, !prof !3

98:                                               ; preds = %95
  %99 = inttoptr i64 %96 to %struct.hb_ot_face_data_t*
  br label %100

100:                                              ; preds = %87, %80, %98
  %101 = phi %struct.hb_ot_face_data_t* [ %99, %98 ], [ %82, %80 ], [ %88, %87 ]
  %102 = icmp eq %struct.hb_ot_face_data_t* %101, null
  br i1 %102, label %104, label %103

103:                                              ; preds = %100
  store i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)* @_hb_ot_shape, i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)** %59, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8** %60, align 8
  br label %143

104:                                              ; preds = %84, %100, %75
  %105 = getelementptr inbounds i8*, i8** %77, i64 1
  %106 = load i8*, i8** %105, align 8
  %107 = icmp eq i8* %106, null
  br i1 %107, label %141, label %75

108:                                              ; preds = %58
  %109 = tail call %struct.hb_shaper_entry_t* @_Z15_hb_shapers_getv() #10
  %110 = getelementptr inbounds %struct.hb_face_t, %struct.hb_face_t* %2, i64 0, i32 7, i32 1, i32 0
  %111 = getelementptr inbounds %struct.hb_lazy_loader_t, %struct.hb_lazy_loader_t* %110, i64 -1
  %112 = bitcast %struct.hb_lazy_loader_t* %111 to %struct.hb_face_t**
  %113 = bitcast %struct.hb_lazy_loader_t* %110 to i64*
  %114 = getelementptr inbounds %struct.hb_shaper_entry_t, %struct.hb_shaper_entry_t* %109, i64 0, i32 1
  %115 = load i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)*, i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)** %114, align 8
  %116 = icmp eq i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)* %115, @_hb_ot_shape
  br i1 %116, label %117, label %141

117:                                              ; preds = %108
  %118 = load atomic i64, i64* %113 acquire, align 8
  %119 = inttoptr i64 %118 to %struct.hb_ot_face_data_t*
  %120 = icmp eq i64 %118, 0
  br i1 %120, label %121, label %137, !prof !3

121:                                              ; preds = %117, %132
  %122 = load %struct.hb_face_t*, %struct.hb_face_t** %112, align 8
  %123 = icmp eq %struct.hb_face_t* %122, null
  br i1 %123, label %141, label %124, !prof !3

124:                                              ; preds = %121
  %125 = tail call %struct.hb_ot_face_data_t* @_hb_ot_shaper_face_data_create(%struct.hb_face_t* nonnull %122) #10
  %126 = ptrtoint %struct.hb_ot_face_data_t* %125 to i64
  %127 = cmpxchg weak i64* %113, i64 0, i64 %126 acq_rel monotonic
  %128 = extractvalue { i64, i1 } %127, 1
  br i1 %128, label %137, label %129, !prof !2

129:                                              ; preds = %124
  %130 = icmp eq %struct.hb_ot_face_data_t* %125, null
  br i1 %130, label %132, label %131

131:                                              ; preds = %129
  tail call void @_hb_ot_shaper_face_data_destroy(%struct.hb_ot_face_data_t* nonnull %125) #10
  br label %132

132:                                              ; preds = %131, %129
  %133 = load atomic i64, i64* %113 acquire, align 8
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %121, label %135, !prof !3

135:                                              ; preds = %132
  %136 = inttoptr i64 %133 to %struct.hb_ot_face_data_t*
  br label %137

137:                                              ; preds = %124, %117, %135
  %138 = phi %struct.hb_ot_face_data_t* [ %136, %135 ], [ %119, %117 ], [ %125, %124 ]
  %139 = icmp eq %struct.hb_ot_face_data_t* %138, null
  br i1 %139, label %141, label %140

140:                                              ; preds = %137
  store i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)* @_hb_ot_shape, i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)** %59, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8** %60, align 8
  br label %143

141:                                              ; preds = %104, %121, %108, %137, %67, %12
  %142 = phi i8* [ null, %12 ], [ %18, %67 ], [ %18, %137 ], [ %18, %108 ], [ %18, %121 ], [ %18, %104 ]
  tail call void @free(i8* %142) #10
  br label %143

143:                                              ; preds = %140, %141, %103
  %144 = phi i1 [ true, %103 ], [ false, %141 ], [ true, %140 ]
  ret i1 %144

145:                                              ; preds = %46
  store i32 1, i32* %29, align 4
  br label %146

146:                                              ; preds = %145, %46
  %147 = phi i32 [ 0, %46 ], [ 1, %145 ]
  %148 = load i32, i32* %30, align 4
  %149 = icmp eq i32 %148, -1
  br i1 %149, label %151, label %150

150:                                              ; preds = %146
  store i32 2, i32* %30, align 4
  br label %151

151:                                              ; preds = %150, %146
  %152 = add i32 %38, -2
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %48, label %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #3

declare hidden i32 @_hb_ot_shape(%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32) #4

declare hidden %struct.hb_shaper_entry_t* @_Z15_hb_shapers_getv() local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN19hb_shape_plan_key_t19user_features_matchEPKS_(%struct.hb_shape_plan_key_t* nocapture readonly, %struct.hb_shape_plan_key_t* nocapture readonly) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %1, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %51

8:                                                ; preds = %2
  %9 = icmp eq i32 %4, 0
  br i1 %9, label %51, label %10

10:                                               ; preds = %8
  %11 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %0, i64 0, i32 1
  %12 = load %struct.hb_feature_t*, %struct.hb_feature_t** %11, align 8
  %13 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %1, i64 0, i32 1
  %14 = load %struct.hb_feature_t*, %struct.hb_feature_t** %13, align 8
  %15 = zext i32 %4 to i64
  br label %16

16:                                               ; preds = %48, %10
  %17 = phi i64 [ 0, %10 ], [ %49, %48 ]
  %18 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %12, i64 %17, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %14, i64 %17, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %23, label %51

23:                                               ; preds = %16
  %24 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %12, i64 %17, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %14, i64 %17, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %25, %27
  br i1 %28, label %29, label %51

29:                                               ; preds = %23
  %30 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %12, i64 %17, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %12, i64 %17, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, -1
  br label %37

37:                                               ; preds = %33, %29
  %38 = phi i1 [ false, %29 ], [ %36, %33 ]
  %39 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %14, i64 %17, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %43, label %42

42:                                               ; preds = %37
  br i1 %38, label %51, label %48

43:                                               ; preds = %37
  %44 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %14, i64 %17, i32 3
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, -1
  %47 = xor i1 %38, %46
  br i1 %47, label %51, label %48

48:                                               ; preds = %42, %43
  %49 = add nuw nsw i64 %17, 1
  %50 = icmp eq i64 %49, %15
  br i1 %50, label %51, label %16

51:                                               ; preds = %23, %16, %43, %42, %48, %8, %2
  %52 = phi i1 [ false, %2 ], [ true, %8 ], [ true, %48 ], [ false, %23 ], [ false, %16 ], [ false, %43 ], [ false, %42 ]
  ret i1 %52
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN19hb_shape_plan_key_t5equalEPKS_(%struct.hb_shape_plan_key_t*, %struct.hb_shape_plan_key_t*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %0, i64 0, i32 0
  %4 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %1, i64 0, i32 0
  %5 = tail call i32 @hb_segment_properties_equal(%struct.hb_segment_properties_t* %3, %struct.hb_segment_properties_t* %4) #10
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %69, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %1, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %13, label %69

13:                                               ; preds = %7
  %14 = icmp eq i32 %9, 0
  br i1 %14, label %56, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %0, i64 0, i32 1
  %17 = load %struct.hb_feature_t*, %struct.hb_feature_t** %16, align 8
  %18 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %1, i64 0, i32 1
  %19 = load %struct.hb_feature_t*, %struct.hb_feature_t** %18, align 8
  %20 = zext i32 %9 to i64
  br label %21

21:                                               ; preds = %53, %15
  %22 = phi i64 [ 0, %15 ], [ %54, %53 ]
  %23 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %17, i64 %22, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %19, i64 %22, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %24, %26
  br i1 %27, label %28, label %69

28:                                               ; preds = %21
  %29 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %17, i64 %22, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %19, i64 %22, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %34, label %69

34:                                               ; preds = %28
  %35 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %17, i64 %22, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %17, i64 %22, i32 3
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, -1
  br label %42

42:                                               ; preds = %38, %34
  %43 = phi i1 [ false, %34 ], [ %41, %38 ]
  %44 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %19, i64 %22, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %48, label %47

47:                                               ; preds = %42
  br i1 %43, label %69, label %53

48:                                               ; preds = %42
  %49 = getelementptr inbounds %struct.hb_feature_t, %struct.hb_feature_t* %19, i64 %22, i32 3
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, -1
  %52 = xor i1 %43, %51
  br i1 %52, label %69, label %53

53:                                               ; preds = %48, %47
  %54 = add nuw nsw i64 %22, 1
  %55 = icmp eq i64 %54, %20
  br i1 %55, label %56, label %21

56:                                               ; preds = %53, %13
  %57 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %0, i64 0, i32 3
  %58 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %1, i64 0, i32 3
  %59 = bitcast %struct.hb_ot_shape_plan_key_t* %57 to i8*
  %60 = bitcast %struct.hb_ot_shape_plan_key_t* %58 to i8*
  %61 = tail call i32 @bcmp(i8* %59, i8* %60, i64 8) #10
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %69

63:                                               ; preds = %56
  %64 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %0, i64 0, i32 4
  %65 = load i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)*, i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)** %64, align 8
  %66 = getelementptr inbounds %struct.hb_shape_plan_key_t, %struct.hb_shape_plan_key_t* %1, i64 0, i32 4
  %67 = load i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)*, i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)** %66, align 8
  %68 = icmp eq i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)* %65, %67
  br label %69

69:                                               ; preds = %47, %48, %21, %28, %7, %2, %63, %56
  %70 = phi i1 [ false, %56 ], [ false, %2 ], [ %68, %63 ], [ false, %7 ], [ false, %28 ], [ false, %21 ], [ false, %48 ], [ false, %47 ]
  ret i1 %70
}

declare i32 @hb_segment_properties_equal(%struct.hb_segment_properties_t*, %struct.hb_segment_properties_t*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %struct.hb_shape_plan_t* @hb_shape_plan_create(%struct.hb_face_t*, %struct.hb_segment_properties_t* readonly, %struct.hb_feature_t*, i32, i8**) local_unnamed_addr #0 {
  %6 = tail call %struct.hb_shape_plan_t* @hb_shape_plan_create2(%struct.hb_face_t* %0, %struct.hb_segment_properties_t* %1, %struct.hb_feature_t* %2, i32 %3, i32* null, i32 0, i8** %4)
  ret %struct.hb_shape_plan_t* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.hb_shape_plan_t* @hb_shape_plan_create2(%struct.hb_face_t*, %struct.hb_segment_properties_t* readonly, %struct.hb_feature_t*, i32, i32*, i32, i8**) local_unnamed_addr #0 {
  %8 = icmp eq %struct.hb_segment_properties_t* %1, null
  br i1 %8, label %39, label %9, !prof !3

9:                                                ; preds = %7
  %10 = tail call noalias i8* @calloc(i64 1, i64 288) #10
  %11 = bitcast i8* %10 to %struct.hb_shape_plan_t*
  %12 = icmp eq i8* %10, null
  br i1 %12, label %39, label %13, !prof !3

13:                                               ; preds = %9
  %14 = bitcast i8* %10 to i32*
  store atomic i32 1, i32* %14 monotonic, align 4
  %15 = getelementptr inbounds i8, i8* %10, i64 4
  %16 = bitcast i8* %15 to i32*
  store atomic i32 1, i32* %16 monotonic, align 4
  %17 = getelementptr inbounds i8, i8* %10, i64 8
  %18 = bitcast i8* %17 to i64*
  store atomic i64 0, i64* %18 monotonic, align 8
  %19 = load atomic i32, i32* %14 monotonic, align 4
  %20 = icmp eq %struct.hb_face_t* %0, null
  br i1 %20, label %21, label %23, !prof !3

21:                                               ; preds = %13
  %22 = tail call %struct.hb_face_t* @hb_face_get_empty() #10
  br label %23

23:                                               ; preds = %21, %13
  %24 = phi %struct.hb_face_t* [ %22, %21 ], [ %0, %13 ]
  tail call void @hb_face_make_immutable(%struct.hb_face_t* %24) #10
  %25 = getelementptr inbounds i8, i8* %10, i64 16
  %26 = bitcast i8* %25 to %struct.hb_face_t**
  store %struct.hb_face_t* %24, %struct.hb_face_t** %26, align 8
  %27 = getelementptr inbounds i8, i8* %10, i64 24
  %28 = bitcast i8* %27 to %struct.hb_shape_plan_key_t*
  %29 = tail call zeroext i1 @_ZN19hb_shape_plan_key_t4initEbP9hb_face_tPK23hb_segment_properties_tPK12hb_feature_tjPKijPKPKc(%struct.hb_shape_plan_key_t* %28, i1 zeroext true, %struct.hb_face_t* %24, %struct.hb_segment_properties_t* nonnull %1, %struct.hb_feature_t* %2, i32 %3, i32* %4, i32 %5, i8** %6)
  br i1 %29, label %30, label %38, !prof !2

30:                                               ; preds = %23
  %31 = getelementptr inbounds i8, i8* %10, i64 96
  %32 = bitcast i8* %31 to %struct.hb_ot_shape_plan_t*
  %33 = tail call zeroext i1 @_ZN18hb_ot_shape_plan_t5init0EP9hb_face_tPK19hb_shape_plan_key_t(%struct.hb_ot_shape_plan_t* %32, %struct.hb_face_t* %24, %struct.hb_shape_plan_key_t* %28) #10
  br i1 %33, label %39, label %34, !prof !2

34:                                               ; preds = %30
  %35 = getelementptr inbounds i8, i8* %10, i64 56
  %36 = bitcast i8* %35 to i8**
  %37 = load i8*, i8** %36, align 8
  tail call void @free(i8* %37) #10
  br label %38

38:                                               ; preds = %23, %34
  tail call void @free(i8* nonnull %10) #10
  br label %39

39:                                               ; preds = %9, %38, %7, %30
  %40 = phi %struct.hb_shape_plan_t* [ %11, %30 ], [ bitcast ([48 x i64]* @_hb_NullPool to %struct.hb_shape_plan_t*), %7 ], [ bitcast ([48 x i64]* @_hb_NullPool to %struct.hb_shape_plan_t*), %38 ], [ bitcast ([48 x i64]* @_hb_NullPool to %struct.hb_shape_plan_t*), %9 ]
  ret %struct.hb_shape_plan_t* %40
}

declare %struct.hb_face_t* @hb_face_get_empty() local_unnamed_addr #4

declare void @hb_face_make_immutable(%struct.hb_face_t*) local_unnamed_addr #4

declare hidden zeroext i1 @_ZN18hb_ot_shape_plan_t5init0EP9hb_face_tPK19hb_shape_plan_key_t(%struct.hb_ot_shape_plan_t*, %struct.hb_face_t*, %struct.hb_shape_plan_key_t*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.hb_shape_plan_t* @hb_shape_plan_get_empty() local_unnamed_addr #7 {
  ret %struct.hb_shape_plan_t* bitcast ([48 x i64]* @_hb_NullPool to %struct.hb_shape_plan_t*)
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %struct.hb_shape_plan_t* @hb_shape_plan_reference(%struct.hb_shape_plan_t* returned) local_unnamed_addr #8 {
  %2 = icmp eq %struct.hb_shape_plan_t* %0, null
  br i1 %2, label %10, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = load atomic i32, i32* %4 monotonic, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8, !prof !3

8:                                                ; preds = %3
  %9 = atomicrmw add i32* %4, i32 1 acq_rel
  br label %10

10:                                               ; preds = %1, %3, %8
  ret %struct.hb_shape_plan_t* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @hb_shape_plan_destroy(%struct.hb_shape_plan_t*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.hb_shape_plan_t* %0, null
  br i1 %2, label %29, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = load atomic i32, i32* %4 monotonic, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %29, label %8, !prof !3

8:                                                ; preds = %3
  %9 = atomicrmw add i32* %4, i32 -1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %29

11:                                               ; preds = %8
  store atomic i32 -57005, i32* %4 monotonic, align 4
  %12 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %0, i64 0, i32 0, i32 2
  %13 = bitcast %struct.hb_atomic_ptr_t* %12 to i64*
  %14 = load atomic i64, i64* %13 acquire, align 8
  %15 = inttoptr i64 %14 to %struct.hb_user_data_array_t*
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %23, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.hb_user_data_array_t, %struct.hb_user_data_array_t* %15, i64 0, i32 1
  %19 = getelementptr inbounds %struct.hb_user_data_array_t, %struct.hb_user_data_array_t* %15, i64 0, i32 0
  tail call void @_ZN17hb_lockable_set_tIN20hb_user_data_array_t19hb_user_data_item_tE10hb_mutex_tE4finiERS2_(%struct.hb_lockable_set_t* %18, %struct.hb_mutex_t* dereferenceable(40) %19) #10
  %20 = getelementptr inbounds %struct.hb_user_data_array_t, %struct.hb_user_data_array_t* %15, i64 0, i32 0, i32 0
  %21 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %20) #10
  %22 = inttoptr i64 %14 to i8*
  tail call void @free(i8* %22) #10
  br label %23

23:                                               ; preds = %17, %11
  %24 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %0, i64 0, i32 3
  tail call void @_ZN18hb_ot_shape_plan_t4finiEv(%struct.hb_ot_shape_plan_t* %24) #10
  %25 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %0, i64 0, i32 2, i32 1
  %26 = bitcast %struct.hb_feature_t** %25 to i8**
  %27 = load i8*, i8** %26, align 8
  tail call void @free(i8* %27) #10
  %28 = bitcast %struct.hb_shape_plan_t* %0 to i8*
  tail call void @free(i8* %28) #10
  br label %29

29:                                               ; preds = %1, %8, %3, %23
  ret void
}

declare hidden void @_ZN18hb_ot_shape_plan_t4finiEv(%struct.hb_ot_shape_plan_t*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @hb_shape_plan_set_user_data(%struct.hb_shape_plan_t*, %struct.hb_user_data_key_t*, i8*, void (i8*)*, i32) local_unnamed_addr #0 {
  %6 = icmp eq %struct.hb_shape_plan_t* %0, null
  br i1 %6, label %41, label %7, !prof !3

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %41, label %11, !prof !3

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %0, i64 0, i32 0, i32 2
  %13 = bitcast %struct.hb_atomic_ptr_t* %12 to i64*
  %14 = load atomic i64, i64* %13 acquire, align 8
  %15 = inttoptr i64 %14 to %struct.hb_user_data_array_t*
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %17, label %31, !prof !3

17:                                               ; preds = %11, %35
  %18 = tail call noalias i8* @calloc(i64 56, i64 1) #10
  %19 = icmp eq i8* %18, null
  br i1 %19, label %41, label %20, !prof !3

20:                                               ; preds = %17
  %21 = bitcast i8* %18 to %union.pthread_mutex_t*
  %22 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %21, %union.pthread_mutexattr_t* null) #10
  %23 = getelementptr inbounds i8, i8* %18, i64 40
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 16, i1 false) #10
  %24 = ptrtoint i8* %18 to i64
  %25 = cmpxchg weak i64* %13, i64 0, i64 %24 acq_rel monotonic
  %26 = extractvalue { i64, i1 } %25, 1
  br i1 %26, label %27, label %35, !prof !2

27:                                               ; preds = %20
  %28 = bitcast i8* %18 to %struct.hb_user_data_array_t*
  br label %31

29:                                               ; preds = %35
  %30 = inttoptr i64 %39 to %struct.hb_user_data_array_t*
  br label %31

31:                                               ; preds = %29, %27, %11
  %32 = phi %struct.hb_user_data_array_t* [ %28, %27 ], [ %30, %29 ], [ %15, %11 ]
  %33 = tail call zeroext i1 @_ZN20hb_user_data_array_t3setEP18hb_user_data_key_tPvPFvS2_Ei(%struct.hb_user_data_array_t* %32, %struct.hb_user_data_key_t* %1, i8* %2, void (i8*)* %3, i32 %4) #10
  %34 = zext i1 %33 to i32
  br label %41

35:                                               ; preds = %20
  %36 = bitcast i8* %23 to %struct.hb_lockable_set_t*
  %37 = bitcast i8* %18 to %struct.hb_mutex_t*
  tail call void @_ZN17hb_lockable_set_tIN20hb_user_data_array_t19hb_user_data_item_tE10hb_mutex_tE4finiERS2_(%struct.hb_lockable_set_t* %36, %struct.hb_mutex_t* nonnull dereferenceable(40) %37) #10
  %38 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* nonnull %21) #10
  tail call void @free(i8* nonnull %18) #10
  %39 = load atomic i64, i64* %13 acquire, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %17, label %29, !prof !3

41:                                               ; preds = %17, %5, %7, %31
  %42 = phi i32 [ 0, %7 ], [ 0, %5 ], [ %34, %31 ], [ 0, %17 ]
  ret i32 %42
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @hb_shape_plan_get_user_data(%struct.hb_shape_plan_t* readonly, %struct.hb_user_data_key_t*) local_unnamed_addr #0 {
  %3 = icmp eq %struct.hb_shape_plan_t* %0, null
  br i1 %3, label %16, label %4, !prof !3

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load atomic i32, i32* %5 monotonic, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %16, label %8, !prof !3

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %0, i64 0, i32 0, i32 2
  %10 = bitcast %struct.hb_atomic_ptr_t* %9 to i64*
  %11 = load atomic i64, i64* %10 acquire, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %16, label %13

13:                                               ; preds = %8
  %14 = inttoptr i64 %11 to %struct.hb_user_data_array_t*
  %15 = tail call i8* @_ZN20hb_user_data_array_t3getEP18hb_user_data_key_t(%struct.hb_user_data_array_t* nonnull %14, %struct.hb_user_data_key_t* %1) #10
  br label %16

16:                                               ; preds = %2, %4, %8, %13
  %17 = phi i8* [ null, %4 ], [ %15, %13 ], [ null, %8 ], [ null, %2 ]
  ret i8* %17
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @hb_shape_plan_get_shaper(%struct.hb_shape_plan_t* nocapture readonly) local_unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %0, i64 0, i32 2, i32 5
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @hb_shape_plan_execute(%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %0, i64 0, i32 2, i32 4
  %7 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %2, i64 0, i32 15
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %47, label %10, !prof !3

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %52, label %14, !prof !3

14:                                               ; preds = %10
  %15 = load i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)*, i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)** %6, align 8
  %16 = icmp eq i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)* %15, @_hb_ot_shape
  br i1 %16, label %17, label %52

17:                                               ; preds = %14
  %18 = getelementptr inbounds %struct.hb_font_t, %struct.hb_font_t* %1, i64 0, i32 16, i32 1, i32 0
  %19 = getelementptr inbounds %struct.hb_lazy_loader_t.130, %struct.hb_lazy_loader_t.130* %18, i64 -1
  %20 = bitcast %struct.hb_lazy_loader_t.130* %19 to %struct.hb_font_t**
  %21 = bitcast %struct.hb_lazy_loader_t.130* %18 to i64*
  %22 = load atomic i64, i64* %21 acquire, align 8
  %23 = inttoptr i64 %22 to %struct.hb_ot_font_data_t*
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %25, label %41, !prof !3

25:                                               ; preds = %17, %36
  %26 = load %struct.hb_font_t*, %struct.hb_font_t** %20, align 8
  %27 = icmp eq %struct.hb_font_t* %26, null
  br i1 %27, label %52, label %28, !prof !3

28:                                               ; preds = %25
  %29 = tail call %struct.hb_ot_font_data_t* @_hb_ot_shaper_font_data_create(%struct.hb_font_t* nonnull %26) #10
  %30 = ptrtoint %struct.hb_ot_font_data_t* %29 to i64
  %31 = cmpxchg weak i64* %21, i64 0, i64 %30 acq_rel monotonic
  %32 = extractvalue { i64, i1 } %31, 1
  br i1 %32, label %41, label %33, !prof !2

33:                                               ; preds = %28
  %34 = icmp eq %struct.hb_ot_font_data_t* %29, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %33
  tail call void @_hb_ot_shaper_font_data_destroy(%struct.hb_ot_font_data_t* nonnull %29) #10
  br label %36

36:                                               ; preds = %35, %33
  %37 = load atomic i64, i64* %21 acquire, align 8
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %25, label %39, !prof !3

39:                                               ; preds = %36
  %40 = inttoptr i64 %37 to %struct.hb_ot_font_data_t*
  br label %41

41:                                               ; preds = %28, %39, %17
  %42 = phi %struct.hb_ot_font_data_t* [ %40, %39 ], [ %23, %17 ], [ %29, %28 ]
  %43 = icmp eq %struct.hb_ot_font_data_t* %42, null
  br i1 %43, label %52, label %44

44:                                               ; preds = %41
  %45 = tail call i32 @_hb_ot_shape(%struct.hb_shape_plan_t* %0, %struct.hb_font_t* %1, %struct.hb_buffer_t* %2, %struct.hb_feature_t* %3, i32 %4) #10
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %44, %5
  %48 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %2, i64 0, i32 9
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %52

51:                                               ; preds = %47
  store i32 2, i32* %48, align 4
  br label %52

52:                                               ; preds = %25, %44, %14, %41, %10, %51, %47
  %53 = phi i32 [ 1, %51 ], [ 1, %47 ], [ 0, %44 ], [ 0, %10 ], [ 0, %41 ], [ 0, %14 ], [ 0, %25 ]
  ret i32 %53
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.hb_shape_plan_t* @hb_shape_plan_create_cached(%struct.hb_face_t*, %struct.hb_segment_properties_t*, %struct.hb_feature_t*, i32, i8**) local_unnamed_addr #0 {
  %6 = tail call %struct.hb_shape_plan_t* @hb_shape_plan_create_cached2(%struct.hb_face_t* %0, %struct.hb_segment_properties_t* %1, %struct.hb_feature_t* %2, i32 %3, i32* null, i32 0, i8** %4)
  ret %struct.hb_shape_plan_t* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.hb_shape_plan_t* @hb_shape_plan_create_cached2(%struct.hb_face_t*, %struct.hb_segment_properties_t*, %struct.hb_feature_t*, i32, i32*, i32, i8**) local_unnamed_addr #0 {
  %8 = alloca %struct.hb_shape_plan_key_t, align 8
  %9 = getelementptr inbounds %struct.hb_face_t, %struct.hb_face_t* %0, i64 0, i32 9
  %10 = bitcast %struct.hb_atomic_ptr_t.126* %9 to i64*
  %11 = load atomic i64, i64* %10 acquire, align 8
  %12 = getelementptr inbounds %struct.hb_face_t, %struct.hb_face_t* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %17, label %15, !prof !3

15:                                               ; preds = %7
  %16 = bitcast %struct.hb_shape_plan_key_t* %8 to i8*
  br label %19

17:                                               ; preds = %68, %7
  %18 = call %struct.hb_shape_plan_t* @hb_shape_plan_create2(%struct.hb_face_t* %0, %struct.hb_segment_properties_t* %1, %struct.hb_feature_t* %2, i32 %3, i32* %4, i32 %5, i8** %6)
  br label %72

19:                                               ; preds = %15, %68
  %20 = phi i64 [ %11, %15 ], [ %69, %68 ]
  %21 = inttoptr i64 %20 to %"struct.hb_face_t::plan_node_t"*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %16) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 72, i1 false)
  %22 = call zeroext i1 @_ZN19hb_shape_plan_key_t4initEbP9hb_face_tPK23hb_segment_properties_tPK12hb_feature_tjPKijPKPKc(%struct.hb_shape_plan_key_t* nonnull %8, i1 zeroext false, %struct.hb_face_t* %0, %struct.hb_segment_properties_t* %1, %struct.hb_feature_t* %2, i32 %3, i32* %4, i32 %5, i8** %6)
  br i1 %22, label %23, label %46

23:                                               ; preds = %19
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %48, label %25

25:                                               ; preds = %23, %42
  %26 = phi %"struct.hb_face_t::plan_node_t"* [ %44, %42 ], [ %21, %23 ]
  %27 = getelementptr inbounds %"struct.hb_face_t::plan_node_t", %"struct.hb_face_t::plan_node_t"* %26, i64 0, i32 0
  %28 = load %struct.hb_shape_plan_t*, %struct.hb_shape_plan_t** %27, align 8
  %29 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %28, i64 0, i32 2
  %30 = call zeroext i1 @_ZN19hb_shape_plan_key_t5equalEPKS_(%struct.hb_shape_plan_key_t* %29, %struct.hb_shape_plan_key_t* nonnull %8)
  br i1 %30, label %31, label %42

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"struct.hb_face_t::plan_node_t", %"struct.hb_face_t::plan_node_t"* %26, i64 0, i32 0
  %33 = load %struct.hb_shape_plan_t*, %struct.hb_shape_plan_t** %32, align 8
  %34 = icmp eq %struct.hb_shape_plan_t* %33, null
  br i1 %34, label %46, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %33, i64 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = load atomic i32, i32* %36 monotonic, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %46, label %40, !prof !3

40:                                               ; preds = %35
  %41 = atomicrmw add i32* %36, i32 1 acq_rel
  br label %46

42:                                               ; preds = %25
  %43 = getelementptr inbounds %"struct.hb_face_t::plan_node_t", %"struct.hb_face_t::plan_node_t"* %26, i64 0, i32 1
  %44 = load %"struct.hb_face_t::plan_node_t"*, %"struct.hb_face_t::plan_node_t"** %43, align 8
  %45 = icmp eq %"struct.hb_face_t::plan_node_t"* %44, null
  br i1 %45, label %48, label %25

46:                                               ; preds = %19, %31, %35, %40
  %47 = phi %struct.hb_shape_plan_t* [ null, %31 ], [ %33, %35 ], [ %33, %40 ], [ bitcast ([48 x i64]* @_hb_NullPool to %struct.hb_shape_plan_t*), %19 ]
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %16) #10
  br label %72

48:                                               ; preds = %42, %23
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %16) #10
  %49 = call %struct.hb_shape_plan_t* @hb_shape_plan_create2(%struct.hb_face_t* %0, %struct.hb_segment_properties_t* %1, %struct.hb_feature_t* %2, i32 %3, i32* %4, i32 %5, i8** %6)
  %50 = call noalias i8* @calloc(i64 1, i64 16) #10
  %51 = icmp eq i8* %50, null
  br i1 %51, label %72, label %52, !prof !3

52:                                               ; preds = %48
  %53 = bitcast i8* %50 to %struct.hb_shape_plan_t**
  store %struct.hb_shape_plan_t* %49, %struct.hb_shape_plan_t** %53, align 8
  %54 = getelementptr inbounds i8, i8* %50, i64 8
  %55 = bitcast i8* %54 to %"struct.hb_face_t::plan_node_t"**
  store %"struct.hb_face_t::plan_node_t"* %21, %"struct.hb_face_t::plan_node_t"** %55, align 8
  %56 = ptrtoint i8* %50 to i64
  %57 = cmpxchg weak i64* %10, i64 %20, i64 %56 acq_rel monotonic
  %58 = extractvalue { i64, i1 } %57, 1
  br i1 %58, label %59, label %68, !prof !2

59:                                               ; preds = %52
  %60 = icmp eq %struct.hb_shape_plan_t* %49, null
  br i1 %60, label %72, label %61

61:                                               ; preds = %59
  %62 = getelementptr inbounds %struct.hb_shape_plan_t, %struct.hb_shape_plan_t* %49, i64 0, i32 0, i32 0, i32 0, i32 0
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = load atomic i32, i32* %62 monotonic, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %72, label %66, !prof !3

66:                                               ; preds = %61
  %67 = atomicrmw add i32* %62, i32 1 acq_rel
  br label %72

68:                                               ; preds = %52
  call void @hb_shape_plan_destroy(%struct.hb_shape_plan_t* %49)
  call void @free(i8* nonnull %50) #10
  %69 = load atomic i64, i64* %10 acquire, align 8
  %70 = load atomic i32, i32* %12 monotonic, align 4
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %17, label %19, !prof !3

72:                                               ; preds = %48, %46, %17, %59, %61, %66
  %73 = phi %struct.hb_shape_plan_t* [ %49, %66 ], [ %49, %61 ], [ null, %59 ], [ %18, %17 ], [ %47, %46 ], [ %49, %48 ]
  ret %struct.hb_shape_plan_t* %73
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @hb_ot_layout_table_find_feature_variations(%struct.hb_face_t*, i32, i32*, i32, i32*) local_unnamed_addr #4

declare hidden %struct.hb_ot_font_data_t* @_hb_ot_shaper_font_data_create(%struct.hb_font_t*) local_unnamed_addr #4

declare hidden void @_hb_ot_shaper_font_data_destroy(%struct.hb_ot_font_data_t*) local_unnamed_addr #4

declare hidden %struct.hb_ot_face_data_t* @_hb_ot_shaper_face_data_create(%struct.hb_face_t*) local_unnamed_addr #4

declare hidden void @_hb_ot_shaper_face_data_destroy(%struct.hb_ot_face_data_t*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN17hb_lockable_set_tIN20hb_user_data_array_t19hb_user_data_item_tE10hb_mutex_tE4finiERS2_(%struct.hb_lockable_set_t*, %struct.hb_mutex_t* dereferenceable(40)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.hb_lockable_set_t, %struct.hb_lockable_set_t* %0, i64 0, i32 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.hb_lockable_set_t, %struct.hb_lockable_set_t* %0, i64 0, i32 0, i32 2
  %8 = bitcast %"struct.hb_user_data_array_t::hb_user_data_item_t"** %7 to i8**
  %9 = load i8*, i8** %8, align 8
  tail call void @free(i8* %9) #10
  %10 = bitcast %struct.hb_lockable_set_t* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #10
  br label %41

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.hb_mutex_t, %struct.hb_mutex_t* %1, i64 0, i32 0
  %13 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %12) #10
  %14 = load i32, i32* %3, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %35, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.hb_lockable_set_t, %struct.hb_lockable_set_t* %0, i64 0, i32 0, i32 2
  br label %18

18:                                               ; preds = %16, %31
  %19 = phi i32 [ %14, %16 ], [ %33, %31 ]
  %20 = add i32 %19, -1
  %21 = load %"struct.hb_user_data_array_t::hb_user_data_item_t"*, %"struct.hb_user_data_array_t::hb_user_data_item_t"** %17, align 8
  %22 = zext i32 %20 to i64
  %23 = getelementptr inbounds %"struct.hb_user_data_array_t::hb_user_data_item_t", %"struct.hb_user_data_array_t::hb_user_data_item_t"* %21, i64 %22, i32 1
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"struct.hb_user_data_array_t::hb_user_data_item_t", %"struct.hb_user_data_array_t::hb_user_data_item_t"* %21, i64 %22, i32 2
  %26 = load void (i8*)*, void (i8*)** %25, align 8
  %27 = add i32 %19, -1
  store i32 %27, i32* %3, align 4, !noalias !4
  %28 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %12) #10
  %29 = icmp eq void (i8*)* %26, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %18
  tail call void %26(i8* %24) #10
  br label %31

31:                                               ; preds = %18, %30
  %32 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %12) #10
  %33 = load i32, i32* %3, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %18

35:                                               ; preds = %31, %11
  %36 = getelementptr inbounds %struct.hb_lockable_set_t, %struct.hb_lockable_set_t* %0, i64 0, i32 0, i32 2
  %37 = bitcast %"struct.hb_user_data_array_t::hb_user_data_item_t"** %36 to i8**
  %38 = load i8*, i8** %37, align 8
  tail call void @free(i8* %38) #10
  %39 = bitcast %struct.hb_lockable_set_t* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 16, i1 false) #10
  %40 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %12) #10
  br label %41

41:                                               ; preds = %35, %6
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #5

declare hidden zeroext i1 @_ZN20hb_user_data_array_t3setEP18hb_user_data_key_tPvPFvS2_Ei(%struct.hb_user_data_array_t*, %struct.hb_user_data_key_t*, i8*, void (i8*)*, i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #5

declare hidden i8* @_ZN20hb_user_data_array_t3getEP18hb_user_data_key_t(%struct.hb_user_data_array_t*, %struct.hb_user_data_key_t*) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly }
attributes #10 = { nounwind }
attributes #11 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZN11hb_vector_tIN20hb_user_data_array_t19hb_user_data_item_tEE3popEv: argument 0"}
!6 = distinct !{!6, !"_ZN11hb_vector_tIN20hb_user_data_array_t19hb_user_data_item_tEE3popEv"}
