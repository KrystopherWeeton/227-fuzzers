; ModuleID = '../../third_party/blink/renderer/core/dom/qualified_name.cc'
source_filename = "../../third_party/blink/renderer/core/dom/qualified_name.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.0 }
%class.scoped_refptr.0 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::QualifiedName" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.blink::QualifiedName::QualifiedNameImpl"**, i32, i32, i32, [4 x i8] }>
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"struct.blink::QualifiedNameData" = type { %"struct.blink::QualifiedNameComponents", i8 }
%"struct.blink::QualifiedNameComponents" = type { %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"* }
%"class.WTF::StringAppend" = type { %"class.WTF::StringAppend.2", %"class.WTF::String" }
%"class.WTF::StringAppend.2" = type { %"class.WTF::String", i8* }
%"class.WTF::StringTypeAdapter.15" = type <{ i8*, i32, [4 x i8] }>
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::StringTypeAdapter.13" = type { %"class.WTF::StringTypeAdapter.14" }
%"class.WTF::StringTypeAdapter.14" = type { %"class.WTF::StringView" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

$_ZN3WTFplINS_6StringEPKcS1_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_ = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_EcvS1_Ev = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE21InsertPassingHashCodeINS_24HashSetTranslatorAdapterINS1_25QNameComponentsTranslatorEEERNS1_17QualifiedNameDataESG_EENS_18HashTableAddResultISA_S4_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE6ExpandEPS4_ = comdat any

$_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE8RehashToEPS4_jSB_ = comdat any

$_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE16LookupForWritingINS_22IdentityHashTranslatorIS6_S8_S9_EES4_EENSt3__14pairIPS4_bEERKT0_ = comdat any

$_ZN5blink25QNameComponentsTranslator9TranslateERPNS_13QualifiedName17QualifiedNameImplERKNS_17QualifiedNameDataEj = comdat any

$_ZN5blink13QualifiedName17QualifiedNameImplC2ERKN3WTF12AtomicStringES5_S5_b = comdat any

$_ZNK3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE4findERKS4_ = comdat any

$_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_ = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv = comdat any

$_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj = comdat any

@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str = private unnamed_addr constant [2 x i8] c":\00", align 1
@_ZN5blink17g_any_nameStorageE = hidden global [1 x i8*] zeroinitializer, align 8
@_ZN5blink10g_any_nameE = hidden local_unnamed_addr constant %"class.blink::QualifiedName"* bitcast ([1 x i8*]* @_ZN5blink17g_any_nameStorageE to %"class.blink::QualifiedName"*), align 8
@_ZN5blink18g_null_nameStorageE = hidden global [1 x i8*] zeroinitializer, align 8
@_ZN5blink11g_null_nameE = hidden local_unnamed_addr constant %"class.blink::QualifiedName"* bitcast ([1 x i8*]* @_ZN5blink18g_null_nameStorageE to %"class.blink::QualifiedName"*), align 8
@_ZN3WTF11g_star_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str.2 = private unnamed_addr constant [21 x i8] c"QualifiedName(local=\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c" ns=\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c" prefix=\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c")\00", align 1
@_ZZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache = internal unnamed_addr global %"class.WTF::HashSet"* null, align 8
@_ZGVZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache = internal global i64 0, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_7HashSetIPN5blink13QualifiedName17QualifiedNameImplENS2_17QualifiedNameHashENS_10HashTraitsIS5_EENS_18PartitionAllocatorEEEEEPKcv = private unnamed_addr constant [214 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::HashSet<blink::QualifiedName::QualifiedNameImpl *, blink::QualifiedNameHash, WTF::HashTraits<blink::QualifiedName::QualifiedNameImpl *>, WTF::PartitionAllocator>]\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8
@.str.7 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.8 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink13QualifiedName17QualifiedNameImplEEEPKcv = private unnamed_addr constant [89 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::QualifiedName::QualifiedNameImpl *]\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.9 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.10 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.11 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1
@.str.12 = private unnamed_addr constant [39 x i8] c"!static_cast<int>( new_capacity >> 31)\00", align 1

@_ZN5blink13QualifiedNameC1ERKN3WTF12AtomicStringES4_S4_ = hidden unnamed_addr alias void (%"class.blink::QualifiedName"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*), void (%"class.blink::QualifiedName"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*)* @_ZN5blink13QualifiedNameC2ERKN3WTF12AtomicStringES4_S4_
@_ZN5blink13QualifiedNameC1ERKN3WTF12AtomicStringES4_S4_b = hidden unnamed_addr alias void (%"class.blink::QualifiedName"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, i1), void (%"class.blink::QualifiedName"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, i1)* @_ZN5blink13QualifiedNameC2ERKN3WTF12AtomicStringES4_S4_b
@_ZN5blink13QualifiedNameD1Ev = hidden unnamed_addr alias void (%"class.blink::QualifiedName"*), void (%"class.blink::QualifiedName"*)* @_ZN5blink13QualifiedNameD2Ev
@_ZN5blink13QualifiedName17QualifiedNameImplD1Ev = hidden unnamed_addr alias void (%"class.blink::QualifiedName::QualifiedNameImpl"*), void (%"class.blink::QualifiedName::QualifiedNameImpl"*)* @_ZN5blink13QualifiedName17QualifiedNameImplD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13QualifiedNameC2ERKN3WTF12AtomicStringES4_S4_(%"class.blink::QualifiedName"* nocapture, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %5 = alloca %"struct.blink::QualifiedNameData", align 8
  %6 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %0, i64 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* null, %"class.blink::QualifiedName::QualifiedNameImpl"** %6, align 8
  %7 = bitcast %"struct.blink::QualifiedNameData"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"struct.blink::QualifiedNameData", %"struct.blink::QualifiedNameData"* %5, i64 0, i32 0, i32 2
  %9 = bitcast %"class.WTF::StringImpl"** %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = bitcast %"class.WTF::AtomicString"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"struct.blink::QualifiedNameData"* %5 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"struct.blink::QualifiedNameData", %"struct.blink::QualifiedNameData"* %5, i64 0, i32 0, i32 1
  %14 = bitcast %"class.WTF::AtomicString"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.WTF::StringImpl"** %13 to i64*
  store i64 %15, i64* %16, align 8
  %17 = getelementptr inbounds %"struct.blink::QualifiedNameData", %"struct.blink::QualifiedNameData"* %5, i64 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %4
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %4, %21
  %26 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %27 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %26, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  br label %29

29:                                               ; preds = %21, %25
  %30 = phi %"class.WTF::StringImpl"* [ %28, %25 ], [ %19, %21 ]
  store %"class.WTF::StringImpl"* %30, %"class.WTF::StringImpl"** %17, align 8
  %31 = getelementptr inbounds %"struct.blink::QualifiedNameData", %"struct.blink::QualifiedNameData"* %5, i64 0, i32 1
  store i8 0, i8* %31, align 8
  %32 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache to i8*) acquire, align 8
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %39, !prof !2

34:                                               ; preds = %29
  %35 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache) #12
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %34
  %38 = tail call i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64 24, i8* getelementptr inbounds ([214 x i8], [214 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_7HashSetIPN5blink13QualifiedName17QualifiedNameImplENS2_17QualifiedNameHashENS_10HashTraitsIS5_EENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 20, i1 false) #12
  store i8* %38, i8** bitcast (%"class.WTF::HashSet"** @_ZZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache) #12
  br label %39

39:                                               ; preds = %29, %34, %37
  %40 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** @_ZZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache, align 8
  %41 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %40, i64 0, i32 0
  %42 = call { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } @_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE21InsertPassingHashCodeINS_24HashSetTranslatorAdapterINS1_25QNameComponentsTranslatorEEERNS1_17QualifiedNameDataESG_EENS_18HashTableAddResultISA_S4_EEOT0_OT1_(%"class.WTF::HashTable"* %41, %"struct.blink::QualifiedNameData"* nonnull dereferenceable(32) %5, %"struct.blink::QualifiedNameData"* nonnull dereferenceable(32) %5) #12
  %43 = extractvalue { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } %42, 0
  %44 = extractvalue { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } %42, 1
  %45 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %43, align 8
  %46 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %45, null
  br i1 %46, label %54, label %47

47:                                               ; preds = %39
  %48 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %45, i64 0, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = and i32 %49, 16777216
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %45, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %53) #12
  br label %54

54:                                               ; preds = %52, %47, %39
  %55 = ptrtoint %"class.blink::QualifiedName::QualifiedNameImpl"* %45 to i64
  %56 = bitcast %"class.blink::QualifiedName"* %0 to i64*
  %57 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %6, align 8
  store i64 %55, i64* %56, align 8
  %58 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %57, null
  br i1 %58, label %71, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %57, i64 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = and i32 %61, 16777216
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %71

64:                                               ; preds = %59
  %65 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %57, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %65) #12
  %66 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %57, i64 0, i32 0, i32 0, i32 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %71

69:                                               ; preds = %64
  call void @_ZN5blink13QualifiedName17QualifiedNameImplD2Ev(%"class.blink::QualifiedName::QualifiedNameImpl"* nonnull %57) #12
  %70 = bitcast %"class.blink::QualifiedName::QualifiedNameImpl"* %57 to i8*
  call void @free(i8* %70) #12
  br label %71

71:                                               ; preds = %54, %59, %64, %69
  %72 = and i8 %44, 1
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %89, label %74

74:                                               ; preds = %71
  %75 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %6, align 8
  %76 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %75, i64 0, i32 1
  %77 = load i32, i32* %76, align 4
  %78 = and i32 %77, 16777216
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %89

80:                                               ; preds = %74
  %81 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %75, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %81) #12
  %82 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %75, i64 0, i32 0, i32 0, i32 0, i32 0
  %83 = load i32, i32* %82, align 4
  %84 = icmp ne i32 %83, 0
  %85 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %75, null
  %86 = or i1 %85, %84
  br i1 %86, label %89, label %87

87:                                               ; preds = %80
  call void @_ZN5blink13QualifiedName17QualifiedNameImplD2Ev(%"class.blink::QualifiedName::QualifiedNameImpl"* nonnull %75) #12
  %88 = bitcast %"class.blink::QualifiedName::QualifiedNameImpl"* %75 to i8*
  call void @free(i8* %88) #12
  br label %89

89:                                               ; preds = %87, %80, %74, %71
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13QualifiedNameC2ERKN3WTF12AtomicStringES4_S4_b(%"class.blink::QualifiedName"* nocapture, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), i1 zeroext) unnamed_addr #0 align 2 {
  %6 = alloca %"struct.blink::QualifiedNameData", align 8
  %7 = zext i1 %4 to i8
  %8 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %0, i64 0, i32 0, i32 0
  store %"class.blink::QualifiedName::QualifiedNameImpl"* null, %"class.blink::QualifiedName::QualifiedNameImpl"** %8, align 8
  %9 = bitcast %"struct.blink::QualifiedNameData"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 32, i1 false)
  %10 = bitcast %"class.WTF::AtomicString"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"struct.blink::QualifiedNameData"* %6 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"struct.blink::QualifiedNameData", %"struct.blink::QualifiedNameData"* %6, i64 0, i32 0, i32 1
  %14 = bitcast %"class.WTF::AtomicString"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.WTF::StringImpl"** %13 to i64*
  store i64 %15, i64* %16, align 8
  %17 = getelementptr inbounds %"struct.blink::QualifiedNameData", %"struct.blink::QualifiedNameData"* %6, i64 0, i32 0, i32 2
  %18 = bitcast %"class.WTF::AtomicString"* %3 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::StringImpl"** %17 to i64*
  store i64 %19, i64* %20, align 8
  %21 = getelementptr inbounds %"struct.blink::QualifiedNameData", %"struct.blink::QualifiedNameData"* %6, i64 0, i32 1
  store i8 %7, i8* %21, align 8
  %22 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache to i8*) acquire, align 8
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %29, !prof !2

24:                                               ; preds = %5
  %25 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache) #12
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %24
  %28 = tail call i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64 24, i8* getelementptr inbounds ([214 x i8], [214 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_7HashSetIPN5blink13QualifiedName17QualifiedNameImplENS2_17QualifiedNameHashENS_10HashTraitsIS5_EENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 20, i1 false) #12
  store i8* %28, i8** bitcast (%"class.WTF::HashSet"** @_ZZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache) #12
  br label %29

29:                                               ; preds = %5, %24, %27
  %30 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** @_ZZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache, align 8
  %31 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %30, i64 0, i32 0
  %32 = call { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } @_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE21InsertPassingHashCodeINS_24HashSetTranslatorAdapterINS1_25QNameComponentsTranslatorEEERNS1_17QualifiedNameDataESG_EENS_18HashTableAddResultISA_S4_EEOT0_OT1_(%"class.WTF::HashTable"* %31, %"struct.blink::QualifiedNameData"* nonnull dereferenceable(32) %6, %"struct.blink::QualifiedNameData"* nonnull dereferenceable(32) %6) #12
  %33 = extractvalue { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } %32, 0
  %34 = extractvalue { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } %32, 1
  %35 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %33, align 8
  %36 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %35, null
  br i1 %36, label %44, label %37

37:                                               ; preds = %29
  %38 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %35, i64 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = and i32 %39, 16777216
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %35, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %43) #12
  br label %44

44:                                               ; preds = %42, %37, %29
  %45 = ptrtoint %"class.blink::QualifiedName::QualifiedNameImpl"* %35 to i64
  %46 = bitcast %"class.blink::QualifiedName"* %0 to i64*
  %47 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %8, align 8
  store i64 %45, i64* %46, align 8
  %48 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %47, null
  br i1 %48, label %61, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %47, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = and i32 %51, 16777216
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %61

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %47, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %55) #12
  %56 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %47, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %54
  call void @_ZN5blink13QualifiedName17QualifiedNameImplD2Ev(%"class.blink::QualifiedName::QualifiedNameImpl"* nonnull %47) #12
  %60 = bitcast %"class.blink::QualifiedName::QualifiedNameImpl"* %47 to i8*
  call void @free(i8* %60) #12
  br label %61

61:                                               ; preds = %44, %49, %54, %59
  %62 = and i8 %34, 1
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %79, label %64

64:                                               ; preds = %61
  %65 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %8, align 8
  %66 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %65, i64 0, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = and i32 %67, 16777216
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %79

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %65, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %71) #12
  %72 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %65, i64 0, i32 0, i32 0, i32 0, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = icmp ne i32 %73, 0
  %75 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %65, null
  %76 = or i1 %75, %74
  br i1 %76, label %79, label %77

77:                                               ; preds = %70
  call void @_ZN5blink13QualifiedName17QualifiedNameImplD2Ev(%"class.blink::QualifiedName::QualifiedNameImpl"* nonnull %65) #12
  %78 = bitcast %"class.blink::QualifiedName::QualifiedNameImpl"* %65 to i8*
  call void @free(i8* %78) #12
  br label %79

79:                                               ; preds = %77, %70, %64, %61
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13QualifiedNameD2Ev(%"class.blink::QualifiedName"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %2, align 8
  %4 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %3, null
  br i1 %4, label %17, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %3, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = and i32 %7, 16777216
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %3, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %11) #12
  %12 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  tail call void @_ZN5blink13QualifiedName17QualifiedNameImplD2Ev(%"class.blink::QualifiedName::QualifiedNameImpl"* nonnull %3) #12
  %16 = bitcast %"class.blink::QualifiedName::QualifiedNameImpl"* %3 to i8*
  tail call void @free(i8* %16) #12
  br label %17

17:                                               ; preds = %1, %5, %10, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13QualifiedName17QualifiedNameImplD2Ev(%"class.blink::QualifiedName::QualifiedNameImpl"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::QualifiedName::QualifiedNameImpl"*, align 8
  %3 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache to i8*) acquire, align 8
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %10, !prof !2

5:                                                ; preds = %1
  %6 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache) #12
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %5
  %9 = tail call i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64 24, i8* getelementptr inbounds ([214 x i8], [214 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_7HashSetIPN5blink13QualifiedName17QualifiedNameImplENS2_17QualifiedNameHashENS_10HashTraitsIS5_EENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 20, i1 false) #12
  store i8* %9, i8** bitcast (%"class.WTF::HashSet"** @_ZZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache) #12
  br label %10

10:                                               ; preds = %1, %5, %8
  %11 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** @_ZZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache, align 8
  %12 = bitcast %"class.blink::QualifiedName::QualifiedNameImpl"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #12
  store %"class.blink::QualifiedName::QualifiedNameImpl"* %0, %"class.blink::QualifiedName::QualifiedNameImpl"** %2, align 8
  %13 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %11, i64 0, i32 0
  %14 = call { %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"** } @_ZNK3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE4findERKS4_(%"class.WTF::HashTable"* %13, %"class.blink::QualifiedName::QualifiedNameImpl"** nonnull dereferenceable(8) %2) #12
  %15 = extractvalue { %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"** } %14, 0
  %16 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %11, i64 0, i32 0, i32 0
  %17 = load %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"*** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %11, i64 0, i32 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %17, i64 %20
  %22 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"** %21, %15
  br i1 %22, label %45, label %23

23:                                               ; preds = %10
  store %"class.blink::QualifiedName::QualifiedNameImpl"* inttoptr (i64 -1 to %"class.blink::QualifiedName::QualifiedNameImpl"*), %"class.blink::QualifiedName::QualifiedNameImpl"** %15, align 8
  %24 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %11, i64 0, i32 0, i32 3
  %25 = load i32, i32* %24, align 8
  %26 = add i32 %25, 1
  %27 = and i32 %26, 2147483647
  %28 = and i32 %25, -2147483648
  %29 = or i32 %27, %28
  store i32 %29, i32* %24, align 8
  %30 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %11, i64 0, i32 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = add i32 %31, -1
  store i32 %32, i32* %30, align 4
  %33 = mul i32 %32, 6
  %34 = load i32, i32* %18, align 8
  %35 = icmp ult i32 %33, %34
  %36 = icmp ugt i32 %34, 8
  %37 = and i1 %35, %36
  br i1 %37, label %38, label %45

38:                                               ; preds = %23
  %39 = lshr i32 %34, 1
  %40 = zext i32 %39 to i64
  %41 = shl nuw nsw i64 %40, 3
  %42 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %41, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink13QualifiedName17QualifiedNameImplEEEPKcv, i64 0, i64 0)) #12
  call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 0, i64 %41, i1 false) #12
  %43 = bitcast i8* %42 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %44 = call %"class.blink::QualifiedName::QualifiedNameImpl"** @_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE8RehashToEPS4_jSB_(%"class.WTF::HashTable"* %13, %"class.blink::QualifiedName::QualifiedNameImpl"** %43, i32 %39, %"class.blink::QualifiedName::QualifiedNameImpl"** null) #12
  br label %45

45:                                               ; preds = %10, %23, %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #12
  %46 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %47 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %46, align 8
  %48 = icmp eq %"class.WTF::StringImpl"* %47, null
  br i1 %48, label %62, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  br i1 %53, label %56, label %58

56:                                               ; preds = %49
  %57 = add i32 %55, -1
  store i32 %57, i32* %54, align 4
  br label %58

58:                                               ; preds = %56, %49
  %59 = phi i32 [ %57, %56 ], [ %55, %49 ]
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %47) #12
  br label %62

62:                                               ; preds = %45, %58, %61
  %63 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %79, label %66

66:                                               ; preds = %62
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  br i1 %70, label %73, label %75

73:                                               ; preds = %66
  %74 = add i32 %72, -1
  store i32 %74, i32* %71, align 4
  br label %75

75:                                               ; preds = %73, %66
  %76 = phi i32 [ %74, %73 ], [ %72, %66 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %64) #12
  br label %79

79:                                               ; preds = %62, %75, %78
  %80 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %96, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load atomic i32, i32* %84 monotonic, align 4
  %86 = and i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 0
  %89 = load i32, i32* %88, align 4
  br i1 %87, label %90, label %92

90:                                               ; preds = %83
  %91 = add i32 %89, -1
  store i32 %91, i32* %88, align 4
  br label %92

92:                                               ; preds = %90, %83
  %93 = phi i32 [ %91, %90 ], [ %89, %83 ]
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %96

95:                                               ; preds = %92
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %81) #12
  br label %96

96:                                               ; preds = %79, %92, %95
  %97 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #12
  br label %113

113:                                              ; preds = %96, %109, %112
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink13QualifiedName8ToStringEv(%"class.blink::QualifiedName"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::StringAppend", align 8
  %3 = alloca %"class.WTF::StringAppend.2", align 8
  %4 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %5, i64 0, i32 3, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = ptrtoint %"class.WTF::StringImpl"* %7 to i64
  %9 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %9, label %28, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %28

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #12
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !3

24:                                               ; preds = %15
  tail call void @llvm.trap() #12
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  %27 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %4, align 8
  br label %28

28:                                               ; preds = %1, %10, %25
  %29 = phi %"class.blink::QualifiedName::QualifiedNameImpl"* [ %5, %1 ], [ %5, %10 ], [ %27, %25 ]
  %30 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %31 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %30, i64 0, i32 0, i32 0, i32 0
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %32, %34
  br i1 %35, label %170, label %36

36:                                               ; preds = %28
  %37 = bitcast %"class.WTF::StringAppend"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #12
  %38 = bitcast %"class.WTF::StringAppend.2"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #12
  %39 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %39, label %84, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  br i1 %44, label %47, label %57

47:                                               ; preds = %40
  %48 = zext i32 %46 to i33
  %49 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %48, i33 1) #12
  %50 = extractvalue { i33, i1 } %49, 1
  %51 = extractvalue { i33, i1 } %49, 0
  %52 = icmp slt i33 %51, 0
  %53 = or i1 %50, %52
  br i1 %53, label %54, label %55, !prof !3

54:                                               ; preds = %47
  tail call void @llvm.trap() #12
  unreachable

55:                                               ; preds = %47
  %56 = trunc i33 %51 to i32
  store i32 %56, i32* %45, align 4
  br label %57

57:                                               ; preds = %40, %55
  %58 = phi i32 [ %56, %55 ], [ %46, %40 ]
  %59 = load atomic i32, i32* %41 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  br i1 %61, label %63, label %73

63:                                               ; preds = %57
  %64 = zext i32 %58 to i33
  %65 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %64, i33 1) #12
  %66 = extractvalue { i33, i1 } %65, 1
  %67 = extractvalue { i33, i1 } %65, 0
  %68 = icmp slt i33 %67, 0
  %69 = or i1 %66, %68
  br i1 %69, label %70, label %71, !prof !3

70:                                               ; preds = %63
  tail call void @llvm.trap() #12
  unreachable

71:                                               ; preds = %63
  %72 = trunc i33 %67 to i32
  store i32 %72, i32* %62, align 4
  br label %73

73:                                               ; preds = %71, %57
  %74 = phi i32 [ %72, %71 ], [ %58, %57 ]
  %75 = load atomic i32, i32* %41 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %73
  %79 = add i32 %74, -1
  store i32 %79, i32* %62, align 4
  br label %80

80:                                               ; preds = %78, %73
  %81 = phi i32 [ %79, %78 ], [ %74, %73 ]
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %80
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #12
  br label %84

84:                                               ; preds = %36, %80, %83
  %85 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %85, align 8
  %86 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %3, i64 0, i32 1
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i8** %86, align 8
  br i1 %9, label %104, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load atomic i32, i32* %88 monotonic, align 4
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %104

92:                                               ; preds = %87
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i33
  %96 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %95, i33 1) #12
  %97 = extractvalue { i33, i1 } %96, 1
  %98 = extractvalue { i33, i1 } %96, 0
  %99 = icmp slt i33 %98, 0
  %100 = or i1 %97, %99
  br i1 %100, label %101, label %102, !prof !3

101:                                              ; preds = %92
  tail call void @llvm.trap() #12
  unreachable

102:                                              ; preds = %92
  %103 = trunc i33 %98 to i32
  store i32 %103, i32* %93, align 4
  br label %104

104:                                              ; preds = %84, %87, %102
  call void @_ZN3WTFplINS_6StringEPKcS1_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_(%"class.WTF::StringAppend"* nonnull sret %2, %"class.WTF::StringAppend.2"* nonnull dereferenceable(16) %3, %"class.WTF::StringImpl"* %7)
  %105 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_EcvS1_Ev(%"class.WTF::StringAppend"* nonnull %2)
  %106 = ptrtoint %"class.WTF::StringImpl"* %105 to i64
  %107 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %2, i64 0, i32 1, i32 0, i32 0
  %108 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %107, align 8
  %109 = icmp eq %"class.WTF::StringImpl"* %108, null
  br i1 %109, label %123, label %110

110:                                              ; preds = %104
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load atomic i32, i32* %111 monotonic, align 4
  %113 = and i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 0
  %116 = load i32, i32* %115, align 4
  br i1 %114, label %117, label %119

117:                                              ; preds = %110
  %118 = add i32 %116, -1
  store i32 %118, i32* %115, align 4
  br label %119

119:                                              ; preds = %117, %110
  %120 = phi i32 [ %118, %117 ], [ %116, %110 ]
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %119
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %108) #12
  br label %123

123:                                              ; preds = %122, %119, %104
  %124 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %125 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %124, align 8
  %126 = icmp eq %"class.WTF::StringImpl"* %125, null
  br i1 %126, label %140, label %127

127:                                              ; preds = %123
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = load atomic i32, i32* %128 monotonic, align 4
  %130 = and i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %125, i64 0, i32 0
  %133 = load i32, i32* %132, align 4
  br i1 %131, label %134, label %136

134:                                              ; preds = %127
  %135 = add i32 %133, -1
  store i32 %135, i32* %132, align 4
  br label %136

136:                                              ; preds = %134, %127
  %137 = phi i32 [ %135, %134 ], [ %133, %127 ]
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %136
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %125) #12
  br label %140

140:                                              ; preds = %123, %136, %139
  %141 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %85, align 8
  %142 = icmp eq %"class.WTF::StringImpl"* %141, null
  br i1 %142, label %156, label %143

143:                                              ; preds = %140
  %144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %145 = load atomic i32, i32* %144 monotonic, align 4
  %146 = and i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 0
  %149 = load i32, i32* %148, align 4
  br i1 %147, label %150, label %152

150:                                              ; preds = %143
  %151 = add i32 %149, -1
  store i32 %151, i32* %148, align 4
  br label %152

152:                                              ; preds = %150, %143
  %153 = phi i32 [ %151, %150 ], [ %149, %143 ]
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %152
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %141) #12
  br label %156

156:                                              ; preds = %155, %152, %140
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #12
  br i1 %9, label %170, label %157

157:                                              ; preds = %156
  %158 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %159 = load atomic i32, i32* %158 monotonic, align 4
  %160 = and i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %163 = load i32, i32* %162, align 4
  br i1 %161, label %164, label %166

164:                                              ; preds = %157
  %165 = add i32 %163, -1
  store i32 %165, i32* %162, align 4
  br label %166

166:                                              ; preds = %164, %157
  %167 = phi i32 [ %165, %164 ], [ %163, %157 ]
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %170

169:                                              ; preds = %166
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %7) #12
  br label %170

170:                                              ; preds = %28, %156, %166, %169
  %171 = phi i64 [ %106, %156 ], [ %106, %166 ], [ %106, %169 ], [ %8, %28 ]
  %172 = inttoptr i64 %171 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %172
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTFplINS_6StringEPKcS1_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_(%"class.WTF::StringAppend"* noalias sret, %"class.WTF::StringAppend.2"* dereferenceable(16), %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat {
  %4 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #12
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !3

21:                                               ; preds = %12
  tail call void @llvm.trap() #12
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %3, %7, %22
  %25 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %1, i64 0, i32 1
  %26 = bitcast i8** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %28, label %46, label %29

29:                                               ; preds = %24
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %48

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i33
  %38 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %37, i33 1) #12
  %39 = extractvalue { i33, i1 } %38, 1
  %40 = extractvalue { i33, i1 } %38, 0
  %41 = icmp slt i33 %40, 0
  %42 = or i1 %39, %41
  br i1 %42, label %43, label %44, !prof !3

43:                                               ; preds = %34
  tail call void @llvm.trap() #12
  unreachable

44:                                               ; preds = %34
  %45 = trunc i33 %40 to i32
  store i32 %45, i32* %35, align 4
  br label %48

46:                                               ; preds = %24
  %47 = inttoptr i64 %27 to i8*
  tail call void @_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_(%"class.WTF::StringAppend"* %0, %"class.WTF::StringImpl"* %5, i8* %47, %"class.WTF::StringImpl"* null)
  br label %61

48:                                               ; preds = %29, %44
  %49 = inttoptr i64 %27 to i8*
  tail call void @_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_(%"class.WTF::StringAppend"* %0, %"class.WTF::StringImpl"* %5, i8* %49, %"class.WTF::StringImpl"* nonnull %2)
  %50 = load atomic i32, i32* %30 monotonic, align 4
  %51 = and i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %54 = load i32, i32* %53, align 4
  br i1 %52, label %55, label %57

55:                                               ; preds = %48
  %56 = add i32 %54, -1
  store i32 %56, i32* %53, align 4
  br label %57

57:                                               ; preds = %55, %48
  %58 = phi i32 [ %56, %55 ], [ %54, %48 ]
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %57
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #12
  br label %61

61:                                               ; preds = %46, %57, %60
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_EcvS1_Ev(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.15", align 8
  %3 = alloca i8*, align 8
  %4 = alloca i16*, align 8
  %5 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  %11 = select i1 %10, %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"* %9
  %12 = bitcast %"class.WTF::StringTypeAdapter.15"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #12
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false) #12
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.15"* nonnull %2, i8* %14) #12
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #12
  br i1 %18, label %62, label %19

19:                                               ; preds = %1
  %20 = icmp eq %"class.WTF::StringImpl"* %6, null
  %21 = select i1 %20, %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"* %6
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %62, label %26

26:                                               ; preds = %19
  %27 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #12
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %28 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %29 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %28, i8** nonnull dereferenceable(8) %3) #12
  %30 = load i8*, i8** %3, align 8
  call void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPh(%"class.WTF::StringAppend"* %0, i8* %30)
  %31 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %31, label %98, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  br i1 %36, label %39, label %49

39:                                               ; preds = %32
  %40 = zext i32 %38 to i33
  %41 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #12
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !3

46:                                               ; preds = %39
  call void @llvm.trap() #12
  unreachable

47:                                               ; preds = %39
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %37, align 4
  br label %49

49:                                               ; preds = %32, %47
  %50 = phi i32 [ %48, %47 ], [ %38, %32 ]
  %51 = ptrtoint %"class.WTF::StringImpl"* %29 to i64
  %52 = load atomic i32, i32* %33 monotonic, align 4
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %49
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 0
  %57 = add i32 %50, -1
  store i32 %57, i32* %56, align 4
  br label %58

58:                                               ; preds = %55, %49
  %59 = phi i32 [ %57, %55 ], [ %50, %49 ]
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %98

61:                                               ; preds = %58
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %29) #12
  br label %98

62:                                               ; preds = %19, %1
  %63 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %63) #12
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %4, align 8
  %64 = call i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %65 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %64, i16** nonnull dereferenceable(8) %4) #12
  %66 = load i16*, i16** %4, align 8
  call void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPDs(%"class.WTF::StringAppend"* %0, i16* %66)
  %67 = icmp eq %"class.WTF::StringImpl"* %65, null
  br i1 %67, label %98, label %68

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  br i1 %72, label %75, label %85

75:                                               ; preds = %68
  %76 = zext i32 %74 to i33
  %77 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %76, i33 1) #12
  %78 = extractvalue { i33, i1 } %77, 1
  %79 = extractvalue { i33, i1 } %77, 0
  %80 = icmp slt i33 %79, 0
  %81 = or i1 %78, %80
  br i1 %81, label %82, label %83, !prof !3

82:                                               ; preds = %75
  call void @llvm.trap() #12
  unreachable

83:                                               ; preds = %75
  %84 = trunc i33 %79 to i32
  store i32 %84, i32* %73, align 4
  br label %85

85:                                               ; preds = %68, %83
  %86 = phi i32 [ %84, %83 ], [ %74, %68 ]
  %87 = ptrtoint %"class.WTF::StringImpl"* %65 to i64
  %88 = load atomic i32, i32* %69 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %94

91:                                               ; preds = %85
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %65, i64 0, i32 0
  %93 = add i32 %86, -1
  store i32 %93, i32* %92, align 4
  br label %94

94:                                               ; preds = %91, %85
  %95 = phi i32 [ %93, %91 ], [ %86, %85 ]
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %94
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %65) #12
  br label %98

98:                                               ; preds = %97, %94, %62, %61, %58, %26
  %99 = phi i8* [ %27, %26 ], [ %27, %58 ], [ %27, %61 ], [ %63, %62 ], [ %63, %94 ], [ %63, %97 ]
  %100 = phi i64 [ 0, %26 ], [ %51, %58 ], [ %51, %61 ], [ 0, %62 ], [ %87, %94 ], [ %87, %97 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %99) #12
  %101 = inttoptr i64 %100 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %101
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13QualifiedName29InitAndReserveCapacityForSizeEj(i32) local_unnamed_addr #0 align 2 {
  %2 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache to i8*) acquire, align 8
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %4, label %9, !prof !2

4:                                                ; preds = %1
  %5 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache) #12
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %4
  %8 = tail call i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64 24, i8* getelementptr inbounds ([214 x i8], [214 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_7HashSetIPN5blink13QualifiedName17QualifiedNameImplENS2_17QualifiedNameHashENS_10HashTraitsIS5_EENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 20, i1 false) #12
  store i8* %8, i8** bitcast (%"class.WTF::HashSet"** @_ZZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache) #12
  br label %9

9:                                                ; preds = %1, %4, %7
  %10 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** @_ZZN5blinkL21GetQualifiedNameCacheEvE12g_name_cache, align 8
  %11 = add i32 %0, 2
  %12 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %10, i64 0, i32 0
  tail call void @_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"* %12, i32 %11) #12
  %13 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %14 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_star_atomE, align 8
  tail call void @_ZN5blink13QualifiedNameC2ERKN3WTF12AtomicStringES4_S4_b(%"class.blink::QualifiedName"* bitcast ([1 x i8*]* @_ZN5blink17g_any_nameStorageE to %"class.blink::QualifiedName"*), %"class.WTF::AtomicString"* dereferenceable(8) %13, %"class.WTF::AtomicString"* dereferenceable(8) %13, %"class.WTF::AtomicString"* dereferenceable(8) %14, i1 zeroext true)
  tail call void @_ZN5blink13QualifiedNameC2ERKN3WTF12AtomicStringES4_S4_b(%"class.blink::QualifiedName"* bitcast ([1 x i8*]* @_ZN5blink18g_null_nameStorageE to %"class.blink::QualifiedName"*), %"class.WTF::AtomicString"* dereferenceable(8) %13, %"class.WTF::AtomicString"* dereferenceable(8) %13, %"class.WTF::AtomicString"* dereferenceable(8) %13, i1 zeroext true)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.WTF::AtomicString"* @_ZNK5blink13QualifiedName18LocalNameUpperSlowEv(%"class.blink::QualifiedName"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %3, i64 0, i32 3
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF12AtomicString10UpperASCIIEv(%"class.WTF::AtomicString"* %4) #12
  %6 = ptrtoint %"class.WTF::StringImpl"* %5 to i64
  %7 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %2, align 8
  %8 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %7, i64 0, i32 5
  %9 = bitcast %"class.WTF::AtomicString"* %8 to i64*
  %10 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %8, i64 0, i32 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  store i64 %6, i64* %9, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %26, label %13

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  br i1 %17, label %20, label %22

20:                                               ; preds = %13
  %21 = add i32 %19, -1
  store i32 %21, i32* %18, align 4
  br label %22

22:                                               ; preds = %20, %13
  %23 = phi i32 [ %21, %20 ], [ %19, %13 ]
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %22
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %11) #12
  br label %26

26:                                               ; preds = %25, %22, %1
  %27 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %2, align 8
  %28 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %27, i64 0, i32 5
  ret %"class.WTF::AtomicString"* %28
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF12AtomicString10UpperASCIIEv(%"class.WTF::AtomicString"*) local_unnamed_addr #2

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink13QualifiedName17QualifiedNameImpl11ComputeHashEv(%"class.blink::QualifiedName::QualifiedNameImpl"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = bitcast %"class.WTF::StringImpl"** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %6 = bitcast %"class.WTF::StringImpl"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %9 = bitcast %"class.WTF::StringImpl"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = trunc i64 %4 to i32
  %12 = and i32 %11, 65535
  %13 = add nuw nsw i32 %12, -1640531527
  %14 = shl i32 %13, 16
  %15 = lshr i64 %4, 5
  %16 = trunc i64 %15 to i32
  %17 = and i32 %16, 134215680
  %18 = xor i32 %17, %13
  %19 = xor i32 %18, %14
  %20 = lshr i32 %19, 11
  %21 = lshr i64 %4, 32
  %22 = trunc i64 %21 to i32
  %23 = and i32 %22, 65535
  %24 = add i32 %19, %23
  %25 = add i32 %24, %20
  %26 = shl i32 %25, 16
  %27 = lshr i64 %4, 37
  %28 = trunc i64 %27 to i32
  %29 = and i32 %28, 134215680
  %30 = xor i32 %25, %29
  %31 = xor i32 %30, %26
  %32 = lshr i32 %31, 11
  %33 = trunc i64 %7 to i32
  %34 = and i32 %33, 65535
  %35 = add i32 %31, %34
  %36 = add i32 %35, %32
  %37 = shl i32 %36, 16
  %38 = lshr i64 %7, 5
  %39 = trunc i64 %38 to i32
  %40 = and i32 %39, 134215680
  %41 = xor i32 %36, %40
  %42 = xor i32 %41, %37
  %43 = lshr i32 %42, 11
  %44 = lshr i64 %7, 32
  %45 = trunc i64 %44 to i32
  %46 = and i32 %45, 65535
  %47 = add i32 %42, %46
  %48 = add i32 %47, %43
  %49 = shl i32 %48, 16
  %50 = lshr i64 %7, 37
  %51 = trunc i64 %50 to i32
  %52 = and i32 %51, 134215680
  %53 = xor i32 %48, %52
  %54 = xor i32 %53, %49
  %55 = lshr i32 %54, 11
  %56 = trunc i64 %10 to i32
  %57 = and i32 %56, 65535
  %58 = add i32 %54, %57
  %59 = add i32 %58, %55
  %60 = shl i32 %59, 16
  %61 = lshr i64 %10, 5
  %62 = trunc i64 %61 to i32
  %63 = and i32 %62, 134215680
  %64 = xor i32 %59, %63
  %65 = xor i32 %64, %60
  %66 = lshr i32 %65, 11
  %67 = lshr i64 %10, 32
  %68 = trunc i64 %67 to i32
  %69 = and i32 %68, 65535
  %70 = add i32 %65, %69
  %71 = add i32 %70, %66
  %72 = shl i32 %71, 16
  %73 = lshr i64 %10, 37
  %74 = trunc i64 %73 to i32
  %75 = and i32 %74, 134215680
  %76 = xor i32 %71, %75
  %77 = xor i32 %76, %72
  %78 = lshr i32 %77, 11
  %79 = add i32 %78, %77
  %80 = shl i32 %79, 3
  %81 = xor i32 %80, %79
  %82 = lshr i32 %81, 5
  %83 = add i32 %82, %81
  %84 = shl i32 %83, 2
  %85 = xor i32 %84, %83
  %86 = lshr i32 %85, 15
  %87 = add i32 %86, %85
  %88 = shl i32 %87, 10
  %89 = xor i32 %88, %87
  %90 = and i32 %89, 16777215
  %91 = icmp eq i32 %90, 0
  %92 = select i1 %91, i32 8388608, i32 %90
  ret i32 %92
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13QualifiedName12CreateStaticEPvPN3WTF10StringImplERKNS2_12AtomicStringE(i8* nocapture, %"class.WTF::StringImpl"*, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = bitcast i8* %0 to %"class.blink::QualifiedName"*
  %6 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %7 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %8, label %32, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 acquire, align 4
  %12 = and i32 %11, 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %30, label %14

14:                                               ; preds = %9
  %15 = load atomic i32, i32* %10 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %32

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i33
  %22 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %21, i33 1) #12
  %23 = extractvalue { i33, i1 } %22, 1
  %24 = extractvalue { i33, i1 } %22, 0
  %25 = icmp slt i33 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %28, !prof !3

27:                                               ; preds = %18
  tail call void @llvm.trap() #12
  unreachable

28:                                               ; preds = %18
  %29 = trunc i33 %24 to i32
  store i32 %29, i32* %19, align 4
  br label %32

30:                                               ; preds = %9
  %31 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %1) #12
  br label %32

32:                                               ; preds = %3, %14, %28, %30
  %33 = phi %"class.WTF::StringImpl"* [ %31, %30 ], [ %1, %14 ], [ %1, %28 ], [ null, %3 ]
  %34 = ptrtoint %"class.WTF::StringImpl"* %33 to i64
  %35 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  store i64 %34, i64* %35, align 8
  call void @_ZN5blink13QualifiedNameC2ERKN3WTF12AtomicStringES4_S4_b(%"class.blink::QualifiedName"* %5, %"class.WTF::AtomicString"* dereferenceable(8) %6, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4, %"class.WTF::AtomicString"* dereferenceable(8) %2, i1 zeroext true)
  %36 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %36, label %50, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  br i1 %41, label %44, label %46

44:                                               ; preds = %37
  %45 = add i32 %43, -1
  store i32 %45, i32* %42, align 4
  br label %46

46:                                               ; preds = %44, %37
  %47 = phi i32 [ %45, %44 ], [ %43, %37 ]
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %46
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %33) #12
  br label %50

50:                                               ; preds = %32, %46, %49
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13QualifiedName12CreateStaticEPvPN3WTF10StringImplE(i8* nocapture, %"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::AtomicString", align 8
  %4 = bitcast i8* %0 to %"class.blink::QualifiedName"*
  %5 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %6 = bitcast %"class.WTF::AtomicString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %7, label %31, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 acquire, align 4
  %11 = and i32 %10, 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %29, label %13

13:                                               ; preds = %8
  %14 = load atomic i32, i32* %9 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %31

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #12
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !3

26:                                               ; preds = %17
  tail call void @llvm.trap() #12
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %31

29:                                               ; preds = %8
  %30 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %1) #12
  br label %31

31:                                               ; preds = %2, %13, %27, %29
  %32 = phi %"class.WTF::StringImpl"* [ %30, %29 ], [ %1, %13 ], [ %1, %27 ], [ null, %2 ]
  %33 = ptrtoint %"class.WTF::StringImpl"* %32 to i64
  %34 = bitcast %"class.WTF::AtomicString"* %3 to i64*
  store i64 %33, i64* %34, align 8
  call void @_ZN5blink13QualifiedNameC2ERKN3WTF12AtomicStringES4_S4_b(%"class.blink::QualifiedName"* %4, %"class.WTF::AtomicString"* dereferenceable(8) %5, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %3, %"class.WTF::AtomicString"* dereferenceable(8) %5, i1 zeroext true)
  %35 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %35, label %49, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  br i1 %40, label %43, label %45

43:                                               ; preds = %36
  %44 = add i32 %42, -1
  store i32 %44, i32* %41, align 4
  br label %45

45:                                               ; preds = %43, %36
  %46 = phi i32 [ %44, %43 ], [ %42, %36 ]
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %45
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #12
  br label %49

49:                                               ; preds = %31, %45, %48
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_13QualifiedNameE(%"class.std::__1::basic_ostream"* returned dereferenceable(160), %"class.blink::QualifiedName"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %3 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i64 20) #12
  %4 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %1, i64 0, i32 0, i32 0
  %5 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %5, i64 0, i32 3
  %7 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_12AtomicStringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %3, %"class.WTF::AtomicString"* dereferenceable(8) %6) #12
  %8 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i64 4) #12
  %9 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %4, align 8
  %10 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %9, i64 0, i32 4
  %11 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_12AtomicStringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %8, %"class.WTF::AtomicString"* dereferenceable(8) %10) #12
  %12 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %11, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i64 8) #12
  %13 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %4, align 8
  %14 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %13, i64 0, i32 2
  %15 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_12AtomicStringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %12, %"class.WTF::AtomicString"* dereferenceable(8) %14) #12
  %16 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i64 1) #12
  ret %"class.std::__1::basic_ostream"* %0
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_12AtomicStringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #4

declare i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #12
  %7 = load i8, i8* %6, align 8, !range !4
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #12
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #12
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #12
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #12
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #12
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #12
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #12
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #12
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #12
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #13
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #12
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #12
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #13
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #12
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #12
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #5

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } @_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE21InsertPassingHashCodeINS_24HashSetTranslatorAdapterINS1_25QNameComponentsTranslatorEEERNS1_17QualifiedNameDataESG_EENS_18HashTableAddResultISA_S4_EEOT0_OT1_(%"class.WTF::HashTable"*, %"struct.blink::QualifiedNameData"* dereferenceable(32), %"struct.blink::QualifiedNameData"* dereferenceable(32)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"*** %4, align 8
  %6 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"** %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.blink::QualifiedName::QualifiedNameImpl"** @_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"* %0, %"class.blink::QualifiedName::QualifiedNameImpl"** null)
  %9 = load %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"*** %4, align 8, !noalias !5
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8, !noalias !5
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = bitcast %"struct.blink::QualifiedNameData"* %1 to i8*
  %17 = bitcast %"struct.blink::QualifiedNameData"* %1 to i16*
  %18 = load i16, i16* %17, align 2
  %19 = getelementptr inbounds i8, i8* %16, i64 2
  %20 = bitcast i8* %19 to i16*
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %18 to i32
  %23 = add nuw nsw i32 %22, -1640531527
  %24 = shl i32 %23, 16
  %25 = zext i16 %21 to i32
  %26 = shl nuw nsw i32 %25, 11
  %27 = xor i32 %26, %23
  %28 = xor i32 %27, %24
  %29 = lshr i32 %28, 11
  %30 = getelementptr inbounds i8, i8* %16, i64 4
  %31 = bitcast i8* %30 to i16*
  %32 = load i16, i16* %31, align 2
  %33 = getelementptr inbounds i8, i8* %16, i64 6
  %34 = bitcast i8* %33 to i16*
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %32 to i32
  %37 = add i32 %28, %36
  %38 = add i32 %37, %29
  %39 = shl i32 %38, 16
  %40 = zext i16 %35 to i32
  %41 = shl nuw nsw i32 %40, 11
  %42 = xor i32 %38, %41
  %43 = xor i32 %42, %39
  %44 = lshr i32 %43, 11
  %45 = getelementptr inbounds %"struct.blink::QualifiedNameData", %"struct.blink::QualifiedNameData"* %1, i64 0, i32 0, i32 1
  %46 = bitcast %"class.WTF::StringImpl"** %45 to i16*
  %47 = load i16, i16* %46, align 2
  %48 = getelementptr inbounds i8, i8* %16, i64 10
  %49 = bitcast i8* %48 to i16*
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %47 to i32
  %52 = add i32 %43, %51
  %53 = add i32 %52, %44
  %54 = shl i32 %53, 16
  %55 = zext i16 %50 to i32
  %56 = shl nuw nsw i32 %55, 11
  %57 = xor i32 %53, %56
  %58 = xor i32 %57, %54
  %59 = lshr i32 %58, 11
  %60 = getelementptr inbounds i8, i8* %16, i64 12
  %61 = bitcast i8* %60 to i16*
  %62 = load i16, i16* %61, align 2
  %63 = getelementptr inbounds i8, i8* %16, i64 14
  %64 = bitcast i8* %63 to i16*
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %62 to i32
  %67 = add i32 %58, %66
  %68 = add i32 %67, %59
  %69 = shl i32 %68, 16
  %70 = zext i16 %65 to i32
  %71 = shl nuw nsw i32 %70, 11
  %72 = xor i32 %68, %71
  %73 = xor i32 %72, %69
  %74 = lshr i32 %73, 11
  %75 = getelementptr inbounds %"struct.blink::QualifiedNameData", %"struct.blink::QualifiedNameData"* %1, i64 0, i32 0, i32 2
  %76 = bitcast %"class.WTF::StringImpl"** %75 to i16*
  %77 = load i16, i16* %76, align 2
  %78 = getelementptr inbounds i8, i8* %16, i64 18
  %79 = bitcast i8* %78 to i16*
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %77 to i32
  %82 = add i32 %73, %81
  %83 = add i32 %82, %74
  %84 = shl i32 %83, 16
  %85 = zext i16 %80 to i32
  %86 = shl nuw nsw i32 %85, 11
  %87 = xor i32 %83, %86
  %88 = xor i32 %87, %84
  %89 = lshr i32 %88, 11
  %90 = getelementptr inbounds i8, i8* %16, i64 20
  %91 = bitcast i8* %90 to i16*
  %92 = load i16, i16* %91, align 2
  %93 = getelementptr inbounds i8, i8* %16, i64 22
  %94 = bitcast i8* %93 to i16*
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %92 to i32
  %97 = add i32 %88, %96
  %98 = add i32 %97, %89
  %99 = shl i32 %98, 16
  %100 = zext i16 %95 to i32
  %101 = shl nuw nsw i32 %100, 11
  %102 = xor i32 %98, %101
  %103 = xor i32 %102, %99
  %104 = lshr i32 %103, 11
  %105 = add i32 %104, %103
  %106 = shl i32 %105, 3
  %107 = xor i32 %106, %105
  %108 = lshr i32 %107, 5
  %109 = add i32 %108, %107
  %110 = shl i32 %109, 2
  %111 = xor i32 %110, %109
  %112 = lshr i32 %111, 15
  %113 = add i32 %112, %111
  %114 = shl i32 %113, 10
  %115 = xor i32 %114, %113
  %116 = and i32 %115, 16777215
  %117 = icmp eq i32 %116, 0
  %118 = select i1 %117, i32 8388608, i32 %116
  %119 = and i32 %118, %14
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds %"struct.blink::QualifiedNameData", %"struct.blink::QualifiedNameData"* %1, i64 0, i32 0, i32 0
  %122 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %121, align 8, !noalias !5
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8, !noalias !5
  %124 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %75, align 8, !noalias !5
  %125 = xor i32 %118, -1
  %126 = lshr i32 %118, 23
  %127 = add nsw i32 %126, %125
  %128 = shl i32 %127, 12
  %129 = xor i32 %128, %127
  %130 = lshr i32 %129, 7
  %131 = xor i32 %130, %129
  %132 = shl i32 %131, 2
  %133 = xor i32 %132, %131
  %134 = lshr i32 %133, 20
  %135 = xor i32 %134, %133
  %136 = or i32 %135, 1
  %137 = zext i32 %136 to i64
  br label %138

138:                                              ; preds = %157, %10
  %139 = phi i64 [ 0, %10 ], [ %160, %157 ]
  %140 = phi i64 [ %120, %10 ], [ %162, %157 ]
  %141 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ null, %10 ], [ %158, %157 ]
  %142 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %11, i64 %140
  %143 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %142, align 8, !noalias !5
  %144 = ptrtoint %"class.blink::QualifiedName::QualifiedNameImpl"* %143 to i64
  switch i64 %144, label %145 [
    i64 0, label %163
    i64 -1, label %157
  ]

145:                                              ; preds = %138
  %146 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %143, i64 0, i32 2, i32 0, i32 0, i32 0
  %147 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %146, align 8, !noalias !5
  %148 = icmp eq %"class.WTF::StringImpl"* %122, %147
  br i1 %148, label %149, label %157

149:                                              ; preds = %145
  %150 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %143, i64 0, i32 3, i32 0, i32 0, i32 0
  %151 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %150, align 8, !noalias !5
  %152 = icmp eq %"class.WTF::StringImpl"* %123, %151
  br i1 %152, label %153, label %157

153:                                              ; preds = %149
  %154 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %143, i64 0, i32 4, i32 0, i32 0, i32 0
  %155 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %154, align 8, !noalias !5
  %156 = icmp eq %"class.WTF::StringImpl"* %124, %155
  br i1 %156, label %188, label %157

157:                                              ; preds = %153, %149, %145, %138
  %158 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ %141, %153 ], [ %141, %149 ], [ %141, %145 ], [ %142, %138 ]
  %159 = icmp eq i64 %139, 0
  %160 = select i1 %159, i64 %137, i64 %139
  %161 = add i64 %160, %140
  %162 = and i64 %161, %15
  br label %138

163:                                              ; preds = %138
  %164 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"** %141, null
  %165 = select i1 %164, %"class.blink::QualifiedName::QualifiedNameImpl"** %142, %"class.blink::QualifiedName::QualifiedNameImpl"** %141
  %166 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %165, align 8
  %167 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %166, inttoptr (i64 -1 to %"class.blink::QualifiedName::QualifiedNameImpl"*)
  br i1 %167, label %168, label %176

168:                                              ; preds = %163
  %169 = bitcast %"class.blink::QualifiedName::QualifiedNameImpl"** %165 to i64*
  store i64 0, i64* %169, align 8
  %170 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %171 = load i32, i32* %170, align 8
  %172 = add i32 %171, 2147483647
  %173 = and i32 %172, 2147483647
  %174 = and i32 %171, -2147483648
  %175 = or i32 %173, %174
  store i32 %175, i32* %170, align 8
  br label %176

176:                                              ; preds = %168, %163
  tail call void @_ZN5blink25QNameComponentsTranslator9TranslateERPNS_13QualifiedName17QualifiedNameImplERKNS_17QualifiedNameDataEj(%"class.blink::QualifiedName::QualifiedNameImpl"** dereferenceable(8) %165, %"struct.blink::QualifiedNameData"* dereferenceable(32) %1, i32 %118) #12
  %177 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %178 = load i32, i32* %177, align 4
  %179 = add i32 %178, 1
  store i32 %179, i32* %177, align 4
  %180 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %181 = load i32, i32* %180, align 8
  %182 = add i32 %181, %179
  %183 = shl i32 %182, 1
  %184 = load i32, i32* %12, align 8
  %185 = icmp ult i32 %183, %184
  br i1 %185, label %188, label %186

186:                                              ; preds = %176
  %187 = tail call %"class.blink::QualifiedName::QualifiedNameImpl"** @_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"* %0, %"class.blink::QualifiedName::QualifiedNameImpl"** %165)
  br label %188

188:                                              ; preds = %153, %176, %186
  %189 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ %187, %186 ], [ %165, %176 ], [ %142, %153 ]
  %190 = phi i8 [ 1, %186 ], [ 1, %176 ], [ 0, %153 ]
  %191 = insertvalue { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } undef, %"class.blink::QualifiedName::QualifiedNameImpl"** %189, 0
  %192 = insertvalue { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } %191, i8 %190, 1
  ret { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } %192
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::QualifiedName::QualifiedNameImpl"** @_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"*, %"class.blink::QualifiedName::QualifiedNameImpl"**) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #12
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #12
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* %22, i8* %23) #12
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.8, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #12
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #12
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #12
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink13QualifiedName17QualifiedNameImplEEEPKcv, i64 0, i64 0)) #12
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #12
  %36 = bitcast i8* %35 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %37 = call %"class.blink::QualifiedName::QualifiedNameImpl"** @_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE8RehashToEPS4_jSB_(%"class.WTF::HashTable"* %0, %"class.blink::QualifiedName::QualifiedNameImpl"** %36, i32 %32, %"class.blink::QualifiedName::QualifiedNameImpl"** %1) #12
  ret %"class.blink::QualifiedName::QualifiedNameImpl"** %37
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::QualifiedName::QualifiedNameImpl"** @_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE8RehashToEPS4_jSB_(%"class.WTF::HashTable"*, %"class.blink::QualifiedName::QualifiedNameImpl"**, i32, %"class.blink::QualifiedName::QualifiedNameImpl"**) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable", align 8
  %6 = bitcast %"class.WTF::HashTable"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"class.blink::QualifiedName::QualifiedNameImpl"** %1, %"class.blink::QualifiedName::QualifiedNameImpl"*** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"class.blink::QualifiedName::QualifiedNameImpl"** %1 to i64
  %18 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"*** %15, align 8
  %23 = ptrtoint %"class.blink::QualifiedName::QualifiedNameImpl"** %22 to i64
  br label %42

24:                                               ; preds = %63
  %25 = bitcast %"class.WTF::HashTable"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %64, %24 ]
  %33 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ null, %16 ], [ %67, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %65, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = icmp eq i64 %32, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %28
  %37 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %37) #12
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %38

38:                                               ; preds = %28, %36
  %39 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %40 = load i32, i32* %39, align 8
  %41 = and i32 %40, -2147483648
  store i32 %41, i32* %39, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #12
  ret %"class.blink::QualifiedName::QualifiedNameImpl"** %33

42:                                               ; preds = %21, %63
  %43 = phi i64 [ %64, %63 ], [ %23, %21 ]
  %44 = phi i32 [ %65, %63 ], [ %13, %21 ]
  %45 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ %66, %63 ], [ %22, %21 ]
  %46 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ %67, %63 ], [ null, %21 ]
  %47 = phi i32 [ %68, %63 ], [ 0, %21 ]
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %45, i64 %48
  %50 = bitcast %"class.blink::QualifiedName::QualifiedNameImpl"** %49 to i64*
  %51 = load i64, i64* %50, align 8
  switch i64 %51, label %52 [
    i64 -1, label %63
    i64 0, label %63
  ]

52:                                               ; preds = %42
  %53 = call { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } @_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE16LookupForWritingINS_22IdentityHashTranslatorIS6_S8_S9_EES4_EENSt3__14pairIPS4_bEERKT0_(%"class.WTF::HashTable"* nonnull %5, %"class.blink::QualifiedName::QualifiedNameImpl"** dereferenceable(8) %49) #12
  %54 = extractvalue { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } %53, 0
  %55 = load i64, i64* %50, align 8
  %56 = bitcast %"class.blink::QualifiedName::QualifiedNameImpl"** %54 to i64*
  store i64 %55, i64* %56, align 8
  %57 = load %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"*** %15, align 8
  %58 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %57, i64 %48
  %59 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"** %58, %3
  %60 = select i1 %59, %"class.blink::QualifiedName::QualifiedNameImpl"** %54, %"class.blink::QualifiedName::QualifiedNameImpl"** %46
  %61 = load i32, i32* %12, align 8
  %62 = ptrtoint %"class.blink::QualifiedName::QualifiedNameImpl"** %57 to i64
  br label %63

63:                                               ; preds = %42, %42, %52
  %64 = phi i64 [ %43, %42 ], [ %62, %52 ], [ %43, %42 ]
  %65 = phi i32 [ %44, %42 ], [ %61, %52 ], [ %44, %42 ]
  %66 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ %45, %42 ], [ %57, %52 ], [ %45, %42 ]
  %67 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ %46, %42 ], [ %60, %52 ], [ %46, %42 ]
  %68 = add i32 %47, 1
  %69 = icmp eq i32 %68, %65
  br i1 %69, label %24, label %42
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } @_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE16LookupForWritingINS_22IdentityHashTranslatorIS6_S8_S9_EES4_EENSt3__14pairIPS4_bEERKT0_(%"class.WTF::HashTable"*, %"class.blink::QualifiedName::QualifiedNameImpl"** dereferenceable(8)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %4 = load %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"*** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %1, align 8
  %10 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %9, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, 16777215
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %109

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0
  %16 = bitcast %"class.WTF::StringImpl"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %9, i64 0, i32 3, i32 0, i32 0, i32 0
  %19 = bitcast %"class.WTF::StringImpl"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %9, i64 0, i32 4, i32 0, i32 0, i32 0
  %22 = bitcast %"class.WTF::StringImpl"** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = trunc i64 %17 to i32
  %25 = and i32 %24, 65535
  %26 = add nuw nsw i32 %25, -1640531527
  %27 = shl i32 %26, 16
  %28 = lshr i64 %17, 5
  %29 = trunc i64 %28 to i32
  %30 = and i32 %29, 134215680
  %31 = xor i32 %30, %26
  %32 = xor i32 %31, %27
  %33 = lshr i32 %32, 11
  %34 = lshr i64 %17, 32
  %35 = trunc i64 %34 to i32
  %36 = and i32 %35, 65535
  %37 = add i32 %32, %36
  %38 = add i32 %37, %33
  %39 = shl i32 %38, 16
  %40 = lshr i64 %17, 37
  %41 = trunc i64 %40 to i32
  %42 = and i32 %41, 134215680
  %43 = xor i32 %38, %42
  %44 = xor i32 %43, %39
  %45 = lshr i32 %44, 11
  %46 = trunc i64 %20 to i32
  %47 = and i32 %46, 65535
  %48 = add i32 %44, %47
  %49 = add i32 %48, %45
  %50 = shl i32 %49, 16
  %51 = lshr i64 %20, 5
  %52 = trunc i64 %51 to i32
  %53 = and i32 %52, 134215680
  %54 = xor i32 %49, %53
  %55 = xor i32 %54, %50
  %56 = lshr i32 %55, 11
  %57 = lshr i64 %20, 32
  %58 = trunc i64 %57 to i32
  %59 = and i32 %58, 65535
  %60 = add i32 %55, %59
  %61 = add i32 %60, %56
  %62 = shl i32 %61, 16
  %63 = lshr i64 %20, 37
  %64 = trunc i64 %63 to i32
  %65 = and i32 %64, 134215680
  %66 = xor i32 %61, %65
  %67 = xor i32 %66, %62
  %68 = lshr i32 %67, 11
  %69 = trunc i64 %23 to i32
  %70 = and i32 %69, 65535
  %71 = add i32 %67, %70
  %72 = add i32 %71, %68
  %73 = shl i32 %72, 16
  %74 = lshr i64 %23, 5
  %75 = trunc i64 %74 to i32
  %76 = and i32 %75, 134215680
  %77 = xor i32 %72, %76
  %78 = xor i32 %77, %73
  %79 = lshr i32 %78, 11
  %80 = lshr i64 %23, 32
  %81 = trunc i64 %80 to i32
  %82 = and i32 %81, 65535
  %83 = add i32 %78, %82
  %84 = add i32 %83, %79
  %85 = shl i32 %84, 16
  %86 = lshr i64 %23, 37
  %87 = trunc i64 %86 to i32
  %88 = and i32 %87, 134215680
  %89 = xor i32 %84, %88
  %90 = xor i32 %89, %85
  %91 = lshr i32 %90, 11
  %92 = add i32 %91, %90
  %93 = shl i32 %92, 3
  %94 = xor i32 %93, %92
  %95 = lshr i32 %94, 5
  %96 = add i32 %95, %94
  %97 = shl i32 %96, 2
  %98 = xor i32 %97, %96
  %99 = lshr i32 %98, 15
  %100 = add i32 %99, %98
  %101 = shl i32 %100, 10
  %102 = xor i32 %101, %100
  %103 = and i32 %102, 16777215
  %104 = icmp eq i32 %103, 0
  %105 = select i1 %104, i32 8388608, i32 %103
  %106 = and i32 %11, -16777216
  %107 = or i32 %105, %106
  store i32 %107, i32* %10, align 4
  %108 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %1, align 8
  br label %109

109:                                              ; preds = %2, %14
  %110 = phi %"class.blink::QualifiedName::QualifiedNameImpl"* [ %9, %2 ], [ %108, %14 ]
  %111 = phi i32 [ %12, %2 ], [ %105, %14 ]
  %112 = and i32 %111, %7
  %113 = zext i32 %112 to i64
  %114 = xor i32 %111, -1
  %115 = lshr i32 %111, 23
  %116 = add nsw i32 %115, %114
  %117 = shl i32 %116, 12
  %118 = xor i32 %117, %116
  %119 = lshr i32 %118, 7
  %120 = xor i32 %119, %118
  %121 = shl i32 %120, 2
  %122 = xor i32 %121, %120
  %123 = lshr i32 %122, 20
  %124 = xor i32 %123, %122
  %125 = or i32 %124, 1
  %126 = zext i32 %125 to i64
  br label %127

127:                                              ; preds = %139, %109
  %128 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ null, %109 ], [ %140, %139 ]
  %129 = phi i64 [ 0, %109 ], [ %142, %139 ]
  %130 = phi i64 [ %113, %109 ], [ %144, %139 ]
  %131 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %4, i64 %130
  %132 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %131, align 8
  %133 = ptrtoint %"class.blink::QualifiedName::QualifiedNameImpl"* %132 to i64
  switch i64 %133, label %137 [
    i64 0, label %134
    i64 -1, label %139
  ]

134:                                              ; preds = %127
  %135 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"** %128, null
  %136 = select i1 %135, %"class.blink::QualifiedName::QualifiedNameImpl"** %131, %"class.blink::QualifiedName::QualifiedNameImpl"** %128
  br label %145

137:                                              ; preds = %127
  %138 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %132, %110
  br i1 %138, label %145, label %139

139:                                              ; preds = %127, %137
  %140 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ %128, %137 ], [ %131, %127 ]
  %141 = icmp eq i64 %129, 0
  %142 = select i1 %141, i64 %126, i64 %129
  %143 = add i64 %142, %130
  %144 = and i64 %143, %8
  br label %127

145:                                              ; preds = %137, %134
  %146 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ %136, %134 ], [ %131, %137 ]
  %147 = phi i8 [ 0, %134 ], [ 1, %137 ]
  %148 = insertvalue { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } undef, %"class.blink::QualifiedName::QualifiedNameImpl"** %146, 0
  %149 = insertvalue { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } %148, i8 %147, 1
  ret { %"class.blink::QualifiedName::QualifiedNameImpl"**, i8 } %149
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink25QNameComponentsTranslator9TranslateERPNS_13QualifiedName17QualifiedNameImplERKNS_17QualifiedNameDataEj(%"class.blink::QualifiedName::QualifiedNameImpl"** dereferenceable(8), %"struct.blink::QualifiedNameData"* dereferenceable(32), i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = alloca %"class.WTF::AtomicString", align 8
  %6 = alloca %"class.WTF::AtomicString", align 8
  %7 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"struct.blink::QualifiedNameData", %"struct.blink::QualifiedNameData"* %1, i64 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %34, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 acquire, align 4
  %14 = and i32 %13, 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %32, label %16

16:                                               ; preds = %11
  %17 = load atomic i32, i32* %12 monotonic, align 4
  %18 = and i32 %17, 2
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %34

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = zext i32 %22 to i33
  %24 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %23, i33 1) #12
  %25 = extractvalue { i33, i1 } %24, 1
  %26 = extractvalue { i33, i1 } %24, 0
  %27 = icmp slt i33 %26, 0
  %28 = or i1 %25, %27
  br i1 %28, label %29, label %30, !prof !3

29:                                               ; preds = %20
  tail call void @llvm.trap() #12
  unreachable

30:                                               ; preds = %20
  %31 = trunc i33 %26 to i32
  store i32 %31, i32* %21, align 4
  br label %34

32:                                               ; preds = %11
  %33 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %9) #12
  br label %34

34:                                               ; preds = %3, %16, %30, %32
  %35 = phi %"class.WTF::StringImpl"* [ %33, %32 ], [ %9, %16 ], [ %9, %30 ], [ null, %3 ]
  %36 = ptrtoint %"class.WTF::StringImpl"* %35 to i64
  %37 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  store i64 %36, i64* %37, align 8
  %38 = bitcast %"class.WTF::AtomicString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #12
  %39 = getelementptr inbounds %"struct.blink::QualifiedNameData", %"struct.blink::QualifiedNameData"* %1, i64 0, i32 0, i32 1
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %40, null
  br i1 %41, label %65, label %42

42:                                               ; preds = %34
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 acquire, align 4
  %45 = and i32 %44, 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %63, label %47

47:                                               ; preds = %42
  %48 = load atomic i32, i32* %43 monotonic, align 4
  %49 = and i32 %48, 2
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %65

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = zext i32 %53 to i33
  %55 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %54, i33 1) #12
  %56 = extractvalue { i33, i1 } %55, 1
  %57 = extractvalue { i33, i1 } %55, 0
  %58 = icmp slt i33 %57, 0
  %59 = or i1 %56, %58
  br i1 %59, label %60, label %61, !prof !3

60:                                               ; preds = %51
  tail call void @llvm.trap() #12
  unreachable

61:                                               ; preds = %51
  %62 = trunc i33 %57 to i32
  store i32 %62, i32* %52, align 4
  br label %65

63:                                               ; preds = %42
  %64 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %40) #12
  br label %65

65:                                               ; preds = %34, %47, %61, %63
  %66 = phi %"class.WTF::StringImpl"* [ %64, %63 ], [ %40, %47 ], [ %40, %61 ], [ null, %34 ]
  %67 = ptrtoint %"class.WTF::StringImpl"* %66 to i64
  %68 = bitcast %"class.WTF::AtomicString"* %5 to i64*
  store i64 %67, i64* %68, align 8
  %69 = bitcast %"class.WTF::AtomicString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #12
  %70 = getelementptr inbounds %"struct.blink::QualifiedNameData", %"struct.blink::QualifiedNameData"* %1, i64 0, i32 0, i32 2
  %71 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %70, align 8
  %72 = icmp eq %"class.WTF::StringImpl"* %71, null
  br i1 %72, label %96, label %73

73:                                               ; preds = %65
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 acquire, align 4
  %76 = and i32 %75, 4
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %94, label %78

78:                                               ; preds = %73
  %79 = load atomic i32, i32* %74 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %96

82:                                               ; preds = %78
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i33
  %86 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %85, i33 1) #12
  %87 = extractvalue { i33, i1 } %86, 1
  %88 = extractvalue { i33, i1 } %86, 0
  %89 = icmp slt i33 %88, 0
  %90 = or i1 %87, %89
  br i1 %90, label %91, label %92, !prof !3

91:                                               ; preds = %82
  tail call void @llvm.trap() #12
  unreachable

92:                                               ; preds = %82
  %93 = trunc i33 %88 to i32
  store i32 %93, i32* %83, align 4
  br label %96

94:                                               ; preds = %73
  %95 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %71) #12
  br label %96

96:                                               ; preds = %65, %78, %92, %94
  %97 = phi %"class.WTF::StringImpl"* [ %95, %94 ], [ %71, %78 ], [ %71, %92 ], [ null, %65 ]
  %98 = ptrtoint %"class.WTF::StringImpl"* %97 to i64
  %99 = bitcast %"class.WTF::AtomicString"* %6 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"struct.blink::QualifiedNameData", %"struct.blink::QualifiedNameData"* %1, i64 0, i32 1
  %101 = load i8, i8* %100, align 8, !range !4
  %102 = icmp ne i8 %101, 0
  %103 = tail call noalias i8* @malloc(i64 40) #12
  %104 = bitcast i8* %103 to %"class.blink::QualifiedName::QualifiedNameImpl"*
  call void @_ZN5blink13QualifiedName17QualifiedNameImplC2ERKN3WTF12AtomicStringES5_S5_b(%"class.blink::QualifiedName::QualifiedNameImpl"* %104, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %5, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %6, i1 zeroext %102) #12
  %105 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %6, i64 0, i32 0, i32 0, i32 0
  %106 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %105, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %106, null
  br i1 %107, label %121, label %108

108:                                              ; preds = %96
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %114 = load i32, i32* %113, align 4
  br i1 %112, label %115, label %117

115:                                              ; preds = %108
  %116 = add i32 %114, -1
  store i32 %116, i32* %113, align 4
  br label %117

117:                                              ; preds = %115, %108
  %118 = phi i32 [ %116, %115 ], [ %114, %108 ]
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %121

120:                                              ; preds = %117
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %106) #12
  br label %121

121:                                              ; preds = %96, %117, %120
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #12
  %122 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 0, i32 0, i32 0, i32 0
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %122, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %123, null
  br i1 %124, label %138, label %125

125:                                              ; preds = %121
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = and i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 0
  %131 = load i32, i32* %130, align 4
  br i1 %129, label %132, label %134

132:                                              ; preds = %125
  %133 = add i32 %131, -1
  store i32 %133, i32* %130, align 4
  br label %134

134:                                              ; preds = %132, %125
  %135 = phi i32 [ %133, %132 ], [ %131, %125 ]
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %138

137:                                              ; preds = %134
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %123) #12
  br label %138

138:                                              ; preds = %121, %134, %137
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #12
  %139 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  %140 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %139, align 8
  %141 = icmp eq %"class.WTF::StringImpl"* %140, null
  br i1 %141, label %155, label %142

142:                                              ; preds = %138
  %143 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %140, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %144 = load atomic i32, i32* %143 monotonic, align 4
  %145 = and i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %140, i64 0, i32 0
  %148 = load i32, i32* %147, align 4
  br i1 %146, label %149, label %151

149:                                              ; preds = %142
  %150 = add i32 %148, -1
  store i32 %150, i32* %147, align 4
  br label %151

151:                                              ; preds = %149, %142
  %152 = phi i32 [ %150, %149 ], [ %148, %142 ]
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %155

154:                                              ; preds = %151
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %140) #12
  br label %155

155:                                              ; preds = %138, %151, %154
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  %156 = getelementptr inbounds i8, i8* %103, i64 4
  %157 = bitcast i8* %156 to i32*
  %158 = load i32, i32* %157, align 4
  %159 = and i32 %158, 16777216
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %163

161:                                              ; preds = %155
  %162 = bitcast i8* %103 to %"class.base::subtle::RefCountedBase"*
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %162) #12
  br label %163

163:                                              ; preds = %155, %161
  %164 = bitcast %"class.blink::QualifiedName::QualifiedNameImpl"** %0 to i8**
  store i8* %103, i8** %164, align 8
  %165 = icmp eq i8* %103, null
  br i1 %165, label %176, label %166

166:                                              ; preds = %163
  %167 = load i32, i32* %157, align 4
  %168 = and i32 %167, 16777216
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %176

170:                                              ; preds = %166
  %171 = bitcast i8* %103 to %"class.base::subtle::RefCountedBase"*
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* nonnull %171) #12
  %172 = bitcast i8* %103 to i32*
  %173 = load i32, i32* %172, align 4
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %176

175:                                              ; preds = %170
  call void @_ZN5blink13QualifiedName17QualifiedNameImplD2Ev(%"class.blink::QualifiedName::QualifiedNameImpl"* nonnull %104) #12
  call void @free(i8* nonnull %103) #12
  br label %176

176:                                              ; preds = %163, %166, %170, %175
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13QualifiedName17QualifiedNameImplC2ERKN3WTF12AtomicStringES5_S5_b(%"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8), i1 zeroext) unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %6, align 4
  %7 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = zext i1 %4 to i32
  %10 = shl nuw nsw i32 %9, 24
  %11 = and i32 %8, -33554432
  %12 = or i32 %11, %10
  store i32 %12, i32* %7, align 4
  %13 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %14, %"class.WTF::StringImpl"** %15, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %16, label %34, label %17

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %34

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i33
  %26 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %25, i33 1) #12
  %27 = extractvalue { i33, i1 } %26, 1
  %28 = extractvalue { i33, i1 } %26, 0
  %29 = icmp slt i33 %28, 0
  %30 = or i1 %27, %29
  br i1 %30, label %31, label %32, !prof !3

31:                                               ; preds = %22
  tail call void @llvm.trap() #12
  unreachable

32:                                               ; preds = %22
  %33 = trunc i33 %28 to i32
  store i32 %33, i32* %23, align 4
  br label %34

34:                                               ; preds = %5, %17, %32
  %35 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %37 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %36, %"class.WTF::StringImpl"** %37, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %38, label %56, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %56

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i33
  %48 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %47, i33 1) #12
  %49 = extractvalue { i33, i1 } %48, 1
  %50 = extractvalue { i33, i1 } %48, 0
  %51 = icmp slt i33 %50, 0
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %54, !prof !3

53:                                               ; preds = %44
  tail call void @llvm.trap() #12
  unreachable

54:                                               ; preds = %44
  %55 = trunc i33 %50 to i32
  store i32 %55, i32* %45, align 4
  br label %56

56:                                               ; preds = %34, %39, %54
  %57 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  %59 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %58, %"class.WTF::StringImpl"** %59, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %58, null
  br i1 %60, label %78, label %61

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = and i32 %63, 2
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %78

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = zext i32 %68 to i33
  %70 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %69, i33 1) #12
  %71 = extractvalue { i33, i1 } %70, 1
  %72 = extractvalue { i33, i1 } %70, 0
  %73 = icmp slt i33 %72, 0
  %74 = or i1 %71, %73
  br i1 %74, label %75, label %76, !prof !3

75:                                               ; preds = %66
  tail call void @llvm.trap() #12
  unreachable

76:                                               ; preds = %66
  %77 = trunc i33 %72 to i32
  store i32 %77, i32* %67, align 4
  br label %78

78:                                               ; preds = %56, %61, %76
  %79 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %79, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #11

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"** } @_ZNK3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE4findERKS4_(%"class.WTF::HashTable"*, %"class.blink::QualifiedName::QualifiedNameImpl"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %4 = load %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"*** %3, align 8
  %5 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"** %4, null
  br i1 %5, label %145, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, -1
  %10 = zext i32 %9 to i64
  %11 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %1, align 8
  %12 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %11, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 16777215
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %111

16:                                               ; preds = %6
  %17 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0
  %18 = bitcast %"class.WTF::StringImpl"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %11, i64 0, i32 3, i32 0, i32 0, i32 0
  %21 = bitcast %"class.WTF::StringImpl"** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %11, i64 0, i32 4, i32 0, i32 0, i32 0
  %24 = bitcast %"class.WTF::StringImpl"** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = trunc i64 %19 to i32
  %27 = and i32 %26, 65535
  %28 = add nuw nsw i32 %27, -1640531527
  %29 = shl i32 %28, 16
  %30 = lshr i64 %19, 5
  %31 = trunc i64 %30 to i32
  %32 = and i32 %31, 134215680
  %33 = xor i32 %32, %28
  %34 = xor i32 %33, %29
  %35 = lshr i32 %34, 11
  %36 = lshr i64 %19, 32
  %37 = trunc i64 %36 to i32
  %38 = and i32 %37, 65535
  %39 = add i32 %34, %38
  %40 = add i32 %39, %35
  %41 = shl i32 %40, 16
  %42 = lshr i64 %19, 37
  %43 = trunc i64 %42 to i32
  %44 = and i32 %43, 134215680
  %45 = xor i32 %40, %44
  %46 = xor i32 %45, %41
  %47 = lshr i32 %46, 11
  %48 = trunc i64 %22 to i32
  %49 = and i32 %48, 65535
  %50 = add i32 %46, %49
  %51 = add i32 %50, %47
  %52 = shl i32 %51, 16
  %53 = lshr i64 %22, 5
  %54 = trunc i64 %53 to i32
  %55 = and i32 %54, 134215680
  %56 = xor i32 %51, %55
  %57 = xor i32 %56, %52
  %58 = lshr i32 %57, 11
  %59 = lshr i64 %22, 32
  %60 = trunc i64 %59 to i32
  %61 = and i32 %60, 65535
  %62 = add i32 %57, %61
  %63 = add i32 %62, %58
  %64 = shl i32 %63, 16
  %65 = lshr i64 %22, 37
  %66 = trunc i64 %65 to i32
  %67 = and i32 %66, 134215680
  %68 = xor i32 %63, %67
  %69 = xor i32 %68, %64
  %70 = lshr i32 %69, 11
  %71 = trunc i64 %25 to i32
  %72 = and i32 %71, 65535
  %73 = add i32 %69, %72
  %74 = add i32 %73, %70
  %75 = shl i32 %74, 16
  %76 = lshr i64 %25, 5
  %77 = trunc i64 %76 to i32
  %78 = and i32 %77, 134215680
  %79 = xor i32 %74, %78
  %80 = xor i32 %79, %75
  %81 = lshr i32 %80, 11
  %82 = lshr i64 %25, 32
  %83 = trunc i64 %82 to i32
  %84 = and i32 %83, 65535
  %85 = add i32 %80, %84
  %86 = add i32 %85, %81
  %87 = shl i32 %86, 16
  %88 = lshr i64 %25, 37
  %89 = trunc i64 %88 to i32
  %90 = and i32 %89, 134215680
  %91 = xor i32 %86, %90
  %92 = xor i32 %91, %87
  %93 = lshr i32 %92, 11
  %94 = add i32 %93, %92
  %95 = shl i32 %94, 3
  %96 = xor i32 %95, %94
  %97 = lshr i32 %96, 5
  %98 = add i32 %97, %96
  %99 = shl i32 %98, 2
  %100 = xor i32 %99, %98
  %101 = lshr i32 %100, 15
  %102 = add i32 %101, %100
  %103 = shl i32 %102, 10
  %104 = xor i32 %103, %102
  %105 = and i32 %104, 16777215
  %106 = icmp eq i32 %105, 0
  %107 = select i1 %106, i32 8388608, i32 %105
  %108 = and i32 %13, -16777216
  %109 = or i32 %107, %108
  store i32 %109, i32* %12, align 4
  %110 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %1, align 8
  br label %111

111:                                              ; preds = %16, %6
  %112 = phi %"class.blink::QualifiedName::QualifiedNameImpl"* [ %11, %6 ], [ %110, %16 ]
  %113 = phi i32 [ %14, %6 ], [ %107, %16 ]
  %114 = and i32 %113, %9
  %115 = zext i32 %114 to i64
  %116 = xor i32 %113, -1
  %117 = lshr i32 %113, 23
  %118 = add nsw i32 %117, %116
  %119 = shl i32 %118, 12
  %120 = xor i32 %119, %118
  %121 = lshr i32 %120, 7
  %122 = xor i32 %121, %120
  %123 = shl i32 %122, 2
  %124 = xor i32 %123, %122
  %125 = lshr i32 %124, 20
  %126 = xor i32 %125, %124
  %127 = or i32 %126, 1
  %128 = zext i32 %127 to i64
  br label %129

129:                                              ; preds = %137, %111
  %130 = phi i64 [ 0, %111 ], [ %139, %137 ]
  %131 = phi i64 [ %115, %111 ], [ %141, %137 ]
  %132 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %4, i64 %131
  %133 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %132, align 8
  %134 = ptrtoint %"class.blink::QualifiedName::QualifiedNameImpl"* %133 to i64
  switch i64 %134, label %135 [
    i64 0, label %145
    i64 -1, label %137
  ]

135:                                              ; preds = %129
  %136 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"* %133, %112
  br i1 %136, label %142, label %137

137:                                              ; preds = %135, %129
  %138 = icmp eq i64 %130, 0
  %139 = select i1 %138, i64 %128, i64 %130
  %140 = add i64 %139, %131
  %141 = and i64 %140, %10
  br label %129

142:                                              ; preds = %135
  %143 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %4, i64 %131
  %144 = icmp eq %"class.blink::QualifiedName::QualifiedNameImpl"** %143, null
  br i1 %144, label %145, label %151

145:                                              ; preds = %129, %142, %2
  %146 = load %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"*** %3, align 8
  %147 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %148 = load i32, i32* %147, align 8
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %146, i64 %149
  br label %156

151:                                              ; preds = %142
  %152 = load %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"*** %3, align 8
  %153 = load i32, i32* %7, align 8
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %152, i64 %154
  br label %156

156:                                              ; preds = %145, %151
  %157 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ %143, %151 ], [ %150, %145 ]
  %158 = phi %"class.blink::QualifiedName::QualifiedNameImpl"** [ %155, %151 ], [ %150, %145 ]
  %159 = insertvalue { %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"** } undef, %"class.blink::QualifiedName::QualifiedNameImpl"** %157, 0
  %160 = insertvalue { %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"** } %159, %"class.blink::QualifiedName::QualifiedNameImpl"** %158, 1
  ret { %"class.blink::QualifiedName::QualifiedNameImpl"**, %"class.blink::QualifiedName::QualifiedNameImpl"** } %160
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12StringAppendINS0_INS_6StringEPKcEES1_EC2ES4_S1_(%"class.WTF::StringAppend"*, %"class.WTF::StringImpl"*, i8*, %"class.WTF::StringImpl"*) unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint i8* %2 to i64
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1, %"class.WTF::StringImpl"** %6, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %7, label %25, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %25

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #12
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !3

22:                                               ; preds = %13
  tail call void @llvm.trap() #12
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  br label %25

25:                                               ; preds = %4, %8, %23
  %26 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1
  %27 = bitcast i8** %26 to i64*
  store i64 %5, i64* %27, align 8
  %28 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %3, %"class.WTF::StringImpl"** %28, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %29, label %59, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %47

37:                                               ; preds = %30
  %38 = zext i32 %36 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #12
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !3

44:                                               ; preds = %37
  tail call void @llvm.trap() #12
  unreachable

45:                                               ; preds = %37
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %35, align 4
  br label %47

47:                                               ; preds = %30, %45
  %48 = phi i32 [ %46, %45 ], [ %36, %30 ]
  %49 = load atomic i32, i32* %31 monotonic, align 4
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %54 = add i32 %48, -1
  store i32 %54, i32* %53, align 4
  br label %55

55:                                               ; preds = %52, %47
  %56 = phi i32 [ %54, %52 ], [ %48, %47 ]
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #12
  br label %59

59:                                               ; preds = %25, %55, %58
  br i1 %7, label %73, label %60

60:                                               ; preds = %59
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  br i1 %64, label %67, label %69

67:                                               ; preds = %60
  %68 = add i32 %66, -1
  store i32 %68, i32* %65, align 4
  br label %69

69:                                               ; preds = %67, %60
  %70 = phi i32 [ %68, %67 ], [ %66, %60 ]
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %69
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #12
  br label %73

73:                                               ; preds = %59, %69, %72
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = tail call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.2"* %8) #12
  %18 = add i32 %17, %16
  %19 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #12
  %20 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %20, align 8
  %21 = tail call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.2"* %8) #12
  %22 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp ult i32 %18, %21
  br i1 %23, label %25, label %24

24:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %20, align 8
  br label %34

25:                                               ; preds = %15
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #12
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %26, i8* %27) #12
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %20, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.10, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %4) #12
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #12
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #12
  %35 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #12
  %36 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %36, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %18, %16
  br i1 %38, label %40, label %39

39:                                               ; preds = %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %36, align 8
  br label %49

40:                                               ; preds = %34
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %18) #12
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i64 0, i64 0), i8* %41, i8* %42) #12
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %36, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.10, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %6) #12
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #12
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #12
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPh(%"class.WTF::StringAppend"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.15", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.13"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %5, i64 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.13"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %22

16:                                               ; preds = %2
  %17 = ptrtoint %"class.WTF::StringImpl"* %12 to i64
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  %21 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  br label %22

22:                                               ; preds = %14, %16
  %23 = phi i8* [ null, %14 ], [ %21, %16 ]
  %24 = phi i64 [ %15, %14 ], [ %17, %16 ]
  %25 = phi i32 [ 0, %14 ], [ %19, %16 ]
  %26 = bitcast %"class.WTF::StringTypeAdapter.13"* %5 to i64*
  store i64 %24, i64* %26, align 8
  store i8* %23, i8** %8, align 8
  store i32 %25, i32* %9, align 8
  %27 = bitcast %"class.WTF::StringTypeAdapter.13"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #12
  %28 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %3, i64 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %3, i64 0, i32 0, i32 0, i32 2
  %30 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 24, i1 false) #12
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %33, label %35

33:                                               ; preds = %22
  %34 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %41

35:                                               ; preds = %22
  %36 = ptrtoint %"class.WTF::StringImpl"* %31 to i64
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 1
  %40 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  br label %41

41:                                               ; preds = %33, %35
  %42 = phi i8* [ null, %33 ], [ %40, %35 ]
  %43 = phi i64 [ %34, %33 ], [ %36, %35 ]
  %44 = phi i32 [ 0, %33 ], [ %38, %35 ]
  %45 = bitcast %"class.WTF::StringTypeAdapter.13"* %3 to i64*
  store i64 %43, i64* %45, align 8
  store i8* %42, i8** %28, align 8
  store i32 %44, i32* %29, align 8
  %46 = bitcast %"class.WTF::StringTypeAdapter.15"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #12
  %47 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 16, i1 false) #12
  %48 = load i8*, i8** %47, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.15"* nonnull %4, i8* %48) #12
  %49 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %3, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.14"* nonnull %49, i8* %1) #12
  %50 = load i32, i32* %29, align 8
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.15"* nonnull %4, i8* %52) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #12
  %53 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %5, i64 0, i32 0
  %54 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.2"* %6) #12
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.14"* nonnull %53, i8* %56) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #12
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_INS_6StringEPKcEES1_E7WriteToEPDs(%"class.WTF::StringAppend"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.15", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.13", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.13"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %5, i64 0, i32 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1, i32 0, i32 0
  %11 = bitcast %"class.WTF::StringTypeAdapter.13"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %22

16:                                               ; preds = %2
  %17 = ptrtoint %"class.WTF::StringImpl"* %12 to i64
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  %21 = bitcast %"class.WTF::StringImpl"* %20 to i8*
  br label %22

22:                                               ; preds = %14, %16
  %23 = phi i8* [ null, %14 ], [ %21, %16 ]
  %24 = phi i64 [ %15, %14 ], [ %17, %16 ]
  %25 = phi i32 [ 0, %14 ], [ %19, %16 ]
  %26 = bitcast %"class.WTF::StringTypeAdapter.13"* %5 to i64*
  store i64 %24, i64* %26, align 8
  store i8* %23, i8** %8, align 8
  store i32 %25, i32* %9, align 8
  %27 = bitcast %"class.WTF::StringTypeAdapter.13"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #12
  %28 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %3, i64 0, i32 0, i32 0, i32 1
  %29 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %3, i64 0, i32 0, i32 0, i32 2
  %30 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 24, i1 false) #12
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %33, label %35

33:                                               ; preds = %22
  %34 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %41

35:                                               ; preds = %22
  %36 = ptrtoint %"class.WTF::StringImpl"* %31 to i64
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 1
  %40 = bitcast %"class.WTF::StringImpl"* %39 to i8*
  br label %41

41:                                               ; preds = %33, %35
  %42 = phi i8* [ null, %33 ], [ %40, %35 ]
  %43 = phi i64 [ %34, %33 ], [ %36, %35 ]
  %44 = phi i32 [ 0, %33 ], [ %38, %35 ]
  %45 = bitcast %"class.WTF::StringTypeAdapter.13"* %3 to i64*
  store i64 %43, i64* %45, align 8
  store i8* %42, i8** %28, align 8
  store i32 %44, i32* %29, align 8
  %46 = bitcast %"class.WTF::StringTypeAdapter.15"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #12
  %47 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 16, i1 false) #12
  %48 = load i8*, i8** %47, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.15"* nonnull %4, i8* %48) #12
  %49 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %3, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.14"* nonnull %49, i16* %1) #12
  %50 = load i32, i32* %29, align 8
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds i16, i16* %1, i64 %51
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.15"* nonnull %4, i16* %52) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #12
  %53 = getelementptr inbounds %"class.WTF::StringTypeAdapter.13", %"class.WTF::StringTypeAdapter.13"* %5, i64 0, i32 0
  %54 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.2"* %6) #12
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i16, i16* %1, i64 %55
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.14"* nonnull %53, i16* %56) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #12
  ret void
}

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.15"*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.2"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.15", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = bitcast %"class.WTF::StringTypeAdapter.15"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #12
  %18 = getelementptr inbounds %"class.WTF::StringTypeAdapter.15", %"class.WTF::StringTypeAdapter.15"* %4, i64 0, i32 1
  %19 = getelementptr inbounds %"class.WTF::StringAppend.2", %"class.WTF::StringAppend.2"* %0, i64 0, i32 1
  %20 = bitcast %"class.WTF::StringTypeAdapter.15"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 16, i1 false)
  %21 = load i8*, i8** %19, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.15"* nonnull %4, i8* %21) #12
  %22 = load i32, i32* %18, align 8
  %23 = add i32 %22, %16
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #12
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %16
  br i1 %27, label %29, label %28

28:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %15
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #12
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %30, i8* %31) #12
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.10, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #12
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #12
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #12
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #12
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = load i32, i32* %18, align 8
  %42 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42)
  %43 = icmp ult i32 %23, %41
  br i1 %43, label %45, label %44

44:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* null, i8** %40, align 8
  br label %54

45:                                               ; preds = %38
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #12
  %47 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %41) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i64 0, i64 0), i8* %46, i8* %47) #12
  %48 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* %49, i8** %40, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %45
  %52 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.10, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #12
  %53 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #12
  br label %54

54:                                               ; preds = %44, %45, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #12
  ret i32 %23
}

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.14"*, i8*) local_unnamed_addr #2

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.15"*, i8*) local_unnamed_addr #2

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.14"*, i16*) local_unnamed_addr #2

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.15"*, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %2, %5
  %6 = phi i32 [ %9, %5 ], [ %1, %2 ]
  %7 = phi i32 [ %8, %5 ], [ %1, %2 ]
  %8 = or i32 %7, %6
  %9 = lshr i32 %6, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %5

11:                                               ; preds = %5
  %12 = shl i32 %8, 1
  %13 = add i32 %12, 2
  %14 = icmp ugt i32 %13, 8
  %15 = select i1 %14, i32 %13, i32 8
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi i32 [ 8, %2 ], [ %15, %11 ]
  %18 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %21, label %32

21:                                               ; preds = %16
  %22 = icmp slt i32 %17, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.8, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12, i64 0, i64 0)) #12
  %25 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #12
  br label %26

26:                                               ; preds = %21, %23
  %27 = zext i32 %17 to i64
  %28 = shl nuw nsw i64 %27, 3
  %29 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink13QualifiedName17QualifiedNameImplEEEPKcv, i64 0, i64 0)) #12
  call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 0, i64 %28, i1 false) #12
  %30 = bitcast i8* %29 to %"class.blink::QualifiedName::QualifiedNameImpl"**
  %31 = call %"class.blink::QualifiedName::QualifiedNameImpl"** @_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE8RehashToEPS4_jSB_(%"class.WTF::HashTable"* %0, %"class.blink::QualifiedName::QualifiedNameImpl"** %30, i32 %17, %"class.blink::QualifiedName::QualifiedNameImpl"** null) #12
  br label %32

32:                                               ; preds = %26, %16
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i8 0, i8 2}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE20FullLookupForWritingINS_24HashSetTranslatorAdapterINS1_25QNameComponentsTranslatorEEENS1_17QualifiedNameDataEEENSt3__14pairINSH_IPS4_bEEjEERKT0_: argument 0"}
!7 = distinct !{!7, !"_ZN3WTF9HashTableIPN5blink13QualifiedName17QualifiedNameImplES4_NS_17IdentityExtractorENS1_17QualifiedNameHashENS_10HashTraitsIS4_EES8_NS_18PartitionAllocatorEE20FullLookupForWritingINS_24HashSetTranslatorAdapterINS1_25QNameComponentsTranslatorEEENS1_17QualifiedNameDataEEENSt3__14pairINSH_IPS4_bEEjEERKT0_"}
