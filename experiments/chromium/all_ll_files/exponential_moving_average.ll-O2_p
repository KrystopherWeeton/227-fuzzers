; ModuleID = '../../components/performance_manager/persistence/site_data/exponential_moving_average.cc'
source_filename = "../../components/performance_manager/persistence/site_data/exponential_moving_average.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.performance_manager::ExponentialMovingAverage" = type { float, float, float, i64 }

@_ZN19performance_manager24ExponentialMovingAverageC1Ef = hidden unnamed_addr alias void (%"class.performance_manager::ExponentialMovingAverage"*, float), void (%"class.performance_manager::ExponentialMovingAverage"*, float)* @_ZN19performance_manager24ExponentialMovingAverageC2Ef

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN19performance_manager24ExponentialMovingAverageC2Ef(%"class.performance_manager::ExponentialMovingAverage"* nocapture, float) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 0
  store float %1, float* %3, align 8
  %4 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 1
  store float 0.000000e+00, float* %4, align 4
  %5 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 2
  store float 0.000000e+00, float* %5, align 8
  %6 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 3
  store i64 0, i64* %6, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN19performance_manager24ExponentialMovingAverage11AppendDatumEf(%"class.performance_manager::ExponentialMovingAverage"* nocapture, float) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 1
  store float %1, float* %7, align 4
  %8 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 2
  store float %1, float* %8, align 8
  br label %22

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 2
  %11 = load float, float* %10, align 8
  %12 = fpext float %11 to double
  %13 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 0
  %14 = load float, float* %13, align 8
  %15 = fpext float %14 to double
  %16 = fsub double 1.000000e+00, %15
  %17 = fmul double %16, %12
  %18 = fmul float %14, %1
  %19 = fpext float %18 to double
  %20 = fadd double %17, %19
  %21 = fptrunc double %20 to float
  store float %21, float* %10, align 8
  br label %22

22:                                               ; preds = %9, %6
  %23 = add i64 %4, 1
  store i64 %23, i64* %3, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN19performance_manager24ExponentialMovingAverage12PrependDatumEf(%"class.performance_manager::ExponentialMovingAverage"* nocapture, float) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 1
  store float %1, float* %7, align 4
  %8 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 2
  store float %1, float* %8, align 8
  br label %33

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 0
  %11 = load float, float* %10, align 8
  %12 = fpext float %11 to double
  %13 = fsub double 1.000000e+00, %12
  %14 = fptrunc double %13 to float
  %15 = add i64 %4, -1
  %16 = uitofp i64 %15 to double
  %17 = tail call double @pow(double %13, double %16) #4
  %18 = fptrunc double %17 to float
  %19 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 1
  %20 = load float, float* %19, align 4
  %21 = fmul float %20, %18
  %22 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 2
  %23 = load float, float* %22, align 8
  %24 = fsub float %23, %21
  store float %1, float* %19, align 4
  %25 = fmul float %18, %1
  %26 = fmul float %25, %14
  %27 = load float, float* %10, align 8
  %28 = fmul float %21, %27
  %29 = fadd float %26, %28
  %30 = fadd float %24, %29
  store float %30, float* %22, align 8
  %31 = load i64, i64* %3, align 8
  %32 = add i64 %31, 1
  br label %33

33:                                               ; preds = %9, %6
  %34 = phi i64 [ %32, %9 ], [ 1, %6 ]
  store i64 %34, i64* %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN19performance_manager24ExponentialMovingAverage5ClearEv(%"class.performance_manager::ExponentialMovingAverage"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 1
  store float 0.000000e+00, float* %2, align 4
  %3 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 2
  store float 0.000000e+00, float* %3, align 8
  %4 = getelementptr inbounds %"class.performance_manager::ExponentialMovingAverage", %"class.performance_manager::ExponentialMovingAverage"* %0, i64 0, i32 3
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
