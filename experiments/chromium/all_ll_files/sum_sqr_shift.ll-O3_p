; ModuleID = '../../third_party/opus/src/silk/sum_sqr_shift.c'
source_filename = "../../third_party/opus/src/silk/sum_sqr_shift.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @silk_sum_sqr_shift(i32* nocapture, i32* nocapture, i16* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = tail call i32 @llvm.ctlz.i32(i32 %3, i1 false) #2, !range !2
  %6 = sub nsw i32 31, %5
  %7 = add nsw i32 %3, -1
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %86

9:                                                ; preds = %4
  %10 = sext i32 %7 to i64
  %11 = add nsw i64 %10, -1
  %12 = lshr i64 %11, 1
  %13 = add nuw i64 %12, 1
  %14 = icmp ult i64 %13, 8
  br i1 %14, label %63, label %15

15:                                               ; preds = %9
  %16 = and i64 %13, -8
  %17 = shl i64 %16, 1
  %18 = insertelement <4 x i32> undef, i32 %6, i32 0
  %19 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> zeroinitializer
  %20 = insertelement <4 x i32> undef, i32 %6, i32 0
  %21 = shufflevector <4 x i32> %20, <4 x i32> undef, <4 x i32> zeroinitializer
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %3, i32 0
  br label %23

23:                                               ; preds = %23, %15
  %24 = phi i64 [ 0, %15 ], [ %53, %23 ]
  %25 = phi <4 x i32> [ %22, %15 ], [ %51, %23 ]
  %26 = phi <4 x i32> [ zeroinitializer, %15 ], [ %52, %23 ]
  %27 = shl i64 %24, 1
  %28 = or i64 %27, 8
  %29 = getelementptr inbounds i16, i16* %2, i64 %27
  %30 = getelementptr inbounds i16, i16* %2, i64 %28
  %31 = bitcast i16* %29 to <8 x i16>*
  %32 = bitcast i16* %30 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %31, align 2
  %34 = load <8 x i16>, <8 x i16>* %32, align 2
  %35 = shufflevector <8 x i16> %33, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %36 = shufflevector <8 x i16> %34, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %37 = shufflevector <8 x i16> %33, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %38 = shufflevector <8 x i16> %34, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %39 = sext <4 x i16> %35 to <4 x i32>
  %40 = sext <4 x i16> %36 to <4 x i32>
  %41 = mul nsw <4 x i32> %39, %39
  %42 = mul nsw <4 x i32> %40, %40
  %43 = sext <4 x i16> %37 to <4 x i32>
  %44 = sext <4 x i16> %38 to <4 x i32>
  %45 = mul nsw <4 x i32> %43, %43
  %46 = mul nsw <4 x i32> %44, %44
  %47 = add nuw <4 x i32> %45, %41
  %48 = add nuw <4 x i32> %46, %42
  %49 = lshr <4 x i32> %47, %19
  %50 = lshr <4 x i32> %48, %21
  %51 = add <4 x i32> %49, %25
  %52 = add <4 x i32> %50, %26
  %53 = add i64 %24, 8
  %54 = icmp eq i64 %53, %16
  br i1 %54, label %55, label %23, !llvm.loop !3

55:                                               ; preds = %23
  %56 = add <4 x i32> %52, %51
  %57 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %58 = add <4 x i32> %56, %57
  %59 = shufflevector <4 x i32> %58, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %60 = add <4 x i32> %58, %59
  %61 = extractelement <4 x i32> %60, i32 0
  %62 = icmp eq i64 %13, %16
  br i1 %62, label %83, label %63

63:                                               ; preds = %55, %9
  %64 = phi i64 [ 0, %9 ], [ %17, %55 ]
  %65 = phi i32 [ %3, %9 ], [ %61, %55 ]
  br label %66

66:                                               ; preds = %63, %66
  %67 = phi i64 [ %81, %66 ], [ %64, %63 ]
  %68 = phi i32 [ %80, %66 ], [ %65, %63 ]
  %69 = getelementptr inbounds i16, i16* %2, i64 %67
  %70 = load i16, i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = mul nsw i32 %71, %71
  %73 = or i64 %67, 1
  %74 = getelementptr inbounds i16, i16* %2, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = sext i16 %75 to i32
  %77 = mul nsw i32 %76, %76
  %78 = add nuw i32 %77, %72
  %79 = lshr i32 %78, %6
  %80 = add i32 %79, %68
  %81 = add nuw nsw i64 %67, 2
  %82 = icmp slt i64 %81, %10
  br i1 %82, label %66, label %83, !llvm.loop !5

83:                                               ; preds = %66, %55
  %84 = phi i32 [ %61, %55 ], [ %80, %66 ]
  %85 = and i32 %3, -2
  br label %86

86:                                               ; preds = %83, %4
  %87 = phi i32 [ 0, %4 ], [ %85, %83 ]
  %88 = phi i32 [ %3, %4 ], [ %84, %83 ]
  %89 = icmp slt i32 %87, %3
  br i1 %89, label %90, label %98

90:                                               ; preds = %86
  %91 = zext i32 %87 to i64
  %92 = getelementptr inbounds i16, i16* %2, i64 %91
  %93 = load i16, i16* %92, align 2
  %94 = sext i16 %93 to i32
  %95 = mul nsw i32 %94, %94
  %96 = lshr i32 %95, %6
  %97 = add i32 %96, %88
  br label %98

98:                                               ; preds = %90, %86
  %99 = phi i32 [ %97, %90 ], [ %88, %86 ]
  %100 = sub nuw nsw i32 34, %5
  %101 = tail call i32 @llvm.ctlz.i32(i32 %99, i1 false) #2, !range !2
  %102 = sub nsw i32 %100, %101
  %103 = icmp sgt i32 %102, 0
  %104 = select i1 %103, i32 %102, i32 0
  br i1 %8, label %105, label %181

105:                                              ; preds = %98
  %106 = sext i32 %7 to i64
  %107 = add nsw i64 %106, -1
  %108 = lshr i64 %107, 1
  %109 = add nuw i64 %108, 1
  %110 = icmp ult i64 %109, 8
  br i1 %110, label %158, label %111

111:                                              ; preds = %105
  %112 = and i64 %109, -8
  %113 = shl i64 %112, 1
  %114 = insertelement <4 x i32> undef, i32 %104, i32 0
  %115 = shufflevector <4 x i32> %114, <4 x i32> undef, <4 x i32> zeroinitializer
  %116 = insertelement <4 x i32> undef, i32 %104, i32 0
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %118

118:                                              ; preds = %118, %111
  %119 = phi i64 [ 0, %111 ], [ %148, %118 ]
  %120 = phi <4 x i32> [ zeroinitializer, %111 ], [ %146, %118 ]
  %121 = phi <4 x i32> [ zeroinitializer, %111 ], [ %147, %118 ]
  %122 = shl i64 %119, 1
  %123 = or i64 %122, 8
  %124 = getelementptr inbounds i16, i16* %2, i64 %122
  %125 = getelementptr inbounds i16, i16* %2, i64 %123
  %126 = bitcast i16* %124 to <8 x i16>*
  %127 = bitcast i16* %125 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %126, align 2
  %129 = load <8 x i16>, <8 x i16>* %127, align 2
  %130 = shufflevector <8 x i16> %128, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %131 = shufflevector <8 x i16> %129, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %132 = shufflevector <8 x i16> %128, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %133 = shufflevector <8 x i16> %129, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %134 = sext <4 x i16> %130 to <4 x i32>
  %135 = sext <4 x i16> %131 to <4 x i32>
  %136 = mul nsw <4 x i32> %134, %134
  %137 = mul nsw <4 x i32> %135, %135
  %138 = sext <4 x i16> %132 to <4 x i32>
  %139 = sext <4 x i16> %133 to <4 x i32>
  %140 = mul nsw <4 x i32> %138, %138
  %141 = mul nsw <4 x i32> %139, %139
  %142 = add nuw <4 x i32> %140, %136
  %143 = add nuw <4 x i32> %141, %137
  %144 = lshr <4 x i32> %142, %115
  %145 = lshr <4 x i32> %143, %117
  %146 = add <4 x i32> %144, %120
  %147 = add <4 x i32> %145, %121
  %148 = add i64 %119, 8
  %149 = icmp eq i64 %148, %112
  br i1 %149, label %150, label %118, !llvm.loop !7

150:                                              ; preds = %118
  %151 = add <4 x i32> %147, %146
  %152 = shufflevector <4 x i32> %151, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %153 = add <4 x i32> %151, %152
  %154 = shufflevector <4 x i32> %153, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %155 = add <4 x i32> %153, %154
  %156 = extractelement <4 x i32> %155, i32 0
  %157 = icmp eq i64 %109, %112
  br i1 %157, label %178, label %158

158:                                              ; preds = %150, %105
  %159 = phi i64 [ 0, %105 ], [ %113, %150 ]
  %160 = phi i32 [ 0, %105 ], [ %156, %150 ]
  br label %161

161:                                              ; preds = %158, %161
  %162 = phi i64 [ %176, %161 ], [ %159, %158 ]
  %163 = phi i32 [ %175, %161 ], [ %160, %158 ]
  %164 = getelementptr inbounds i16, i16* %2, i64 %162
  %165 = load i16, i16* %164, align 2
  %166 = sext i16 %165 to i32
  %167 = mul nsw i32 %166, %166
  %168 = or i64 %162, 1
  %169 = getelementptr inbounds i16, i16* %2, i64 %168
  %170 = load i16, i16* %169, align 2
  %171 = sext i16 %170 to i32
  %172 = mul nsw i32 %171, %171
  %173 = add nuw i32 %172, %167
  %174 = lshr i32 %173, %104
  %175 = add i32 %174, %163
  %176 = add nuw nsw i64 %162, 2
  %177 = icmp slt i64 %176, %106
  br i1 %177, label %161, label %178, !llvm.loop !8

178:                                              ; preds = %161, %150
  %179 = phi i32 [ %156, %150 ], [ %175, %161 ]
  %180 = and i32 %3, -2
  br label %181

181:                                              ; preds = %178, %98
  %182 = phi i32 [ 0, %98 ], [ %180, %178 ]
  %183 = phi i32 [ 0, %98 ], [ %179, %178 ]
  %184 = icmp slt i32 %182, %3
  br i1 %184, label %185, label %193

185:                                              ; preds = %181
  %186 = zext i32 %182 to i64
  %187 = getelementptr inbounds i16, i16* %2, i64 %186
  %188 = load i16, i16* %187, align 2
  %189 = sext i16 %188 to i32
  %190 = mul nsw i32 %189, %189
  %191 = lshr i32 %190, %104
  %192 = add i32 %191, %183
  br label %193

193:                                              ; preds = %185, %181
  %194 = phi i32 [ %192, %185 ], [ %183, %181 ]
  store i32 %104, i32* %1, align 4
  store i32 %194, i32* %0, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #1

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6, !4}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !6, !4}
