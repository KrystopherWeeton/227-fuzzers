; ModuleID = '../../third_party/blink/renderer/core/layout/geometry/logical_rect.cc'
source_filename = "../../third_party/blink/renderer/core/layout/geometry/logical_rect.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::LogicalRect" = type { %"struct.blink::LogicalOffset", %"struct.blink::LogicalSize" }
%"struct.blink::LogicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"struct.blink::LogicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

@.str = private unnamed_addr constant [12 x i8] c"%s,%s %sx%s\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11LogicalRect5UniteERKS0_(%"struct.blink::LogicalRect"* nocapture, %"struct.blink::LogicalRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %1, i64 0, i32 1, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %108, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %108, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %10, %14
  %19 = bitcast %"struct.blink::LogicalRect"* %0 to i8*
  %20 = bitcast %"struct.blink::LogicalRect"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* align 4 %20, i64 16, i1 false)
  br label %108

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %12, 0
  %25 = select i1 %24, i32 -2147483648, i32 2147483647
  %26 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %23, i32 %12) #5
  %27 = extractvalue { i32, i1 } %26, 1
  %28 = extractvalue { i32, i1 } %26, 0
  %29 = select i1 %27, i32 %25, i32 %28, !prof !2
  %30 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %0, i64 0, i32 0, i32 1, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %16, 0
  %33 = select i1 %32, i32 -2147483648, i32 2147483647
  %34 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %31, i32 %16) #5
  %35 = extractvalue { i32, i1 } %34, 1
  %36 = extractvalue { i32, i1 } %34, 0
  %37 = select i1 %35, i32 %33, i32 %36, !prof !2
  %38 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %1, i64 0, i32 0, i32 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %4, 0
  %41 = select i1 %40, i32 -2147483648, i32 2147483647
  %42 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %39, i32 %4) #5
  %43 = extractvalue { i32, i1 } %42, 1
  %44 = extractvalue { i32, i1 } %42, 0
  %45 = select i1 %43, i32 %41, i32 %44, !prof !2
  %46 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %1, i64 0, i32 0, i32 1, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = icmp slt i32 %8, 0
  %49 = select i1 %48, i32 -2147483648, i32 2147483647
  %50 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %47, i32 %8) #5
  %51 = extractvalue { i32, i1 } %50, 1
  %52 = extractvalue { i32, i1 } %50, 0
  %53 = select i1 %51, i32 %49, i32 %52, !prof !2
  %54 = icmp sgt i32 %29, %45
  %55 = select i1 %54, i32 %29, i32 %45
  %56 = icmp sgt i32 %37, %53
  %57 = select i1 %56, i32 %37, i32 %53
  %58 = bitcast %"struct.blink::LogicalRect"* %0 to i64*
  %59 = load i64, i64* %58, align 4
  %60 = bitcast %"struct.blink::LogicalRect"* %1 to i64*
  %61 = load i64, i64* %60, align 4
  %62 = trunc i64 %59 to i32
  %63 = lshr i64 %59, 32
  %64 = trunc i64 %63 to i32
  %65 = trunc i64 %61 to i32
  %66 = lshr i64 %61, 32
  %67 = trunc i64 %66 to i32
  %68 = icmp slt i32 %65, %62
  %69 = select i1 %68, i64 %61, i64 %59
  %70 = icmp slt i32 %67, %64
  %71 = select i1 %70, i64 %66, i64 %63
  %72 = trunc i64 %69 to i32
  %73 = trunc i64 %71 to i32
  %74 = icmp sgt i32 %72, -1
  %75 = select i1 %74, i32 -2147483648, i32 2147483647
  %76 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %55, i32 %72) #5
  %77 = extractvalue { i32, i1 } %76, 1
  %78 = extractvalue { i32, i1 } %76, 0
  %79 = select i1 %77, i32 %75, i32 %78, !prof !2
  %80 = icmp sgt i32 %73, -1
  %81 = select i1 %80, i32 -2147483648, i32 2147483647
  %82 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %57, i32 %73) #5
  %83 = extractvalue { i32, i1 } %82, 1
  %84 = extractvalue { i32, i1 } %82, 0
  %85 = select i1 %83, i32 %81, i32 %84, !prof !2
  %86 = zext i32 %85 to i64
  %87 = shl nuw i64 %86, 32
  %88 = zext i32 %79 to i64
  %89 = or i64 %87, %88
  %90 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %0, i64 0, i32 1
  %91 = bitcast %"struct.blink::LogicalSize"* %90 to i64*
  store i64 %89, i64* %91, align 4
  %92 = icmp sgt i32 %79, -1
  %93 = select i1 %92, i32 -2147483648, i32 2147483647
  %94 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %55, i32 %79) #5
  %95 = extractvalue { i32, i1 } %94, 1
  %96 = extractvalue { i32, i1 } %94, 0
  %97 = select i1 %95, i32 %93, i32 %96, !prof !2
  %98 = icmp sgt i32 %85, -1
  %99 = select i1 %98, i32 -2147483648, i32 2147483647
  %100 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %57, i32 %85) #5
  %101 = extractvalue { i32, i1 } %100, 1
  %102 = extractvalue { i32, i1 } %100, 0
  %103 = select i1 %101, i32 %99, i32 %102, !prof !2
  %104 = zext i32 %103 to i64
  %105 = shl nuw i64 %104, 32
  %106 = zext i32 %97 to i64
  %107 = or i64 %105, %106
  store i64 %107, i64* %58, align 4
  br label %108

108:                                              ; preds = %2, %6, %21, %18
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11LogicalRect16UniteEvenIfEmptyERKS0_(%"struct.blink::LogicalRect"* nocapture, %"struct.blink::LogicalRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %0, i64 0, i32 1, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 0
  %8 = select i1 %7, i32 -2147483648, i32 2147483647
  %9 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %4, i32 %6) #5
  %10 = extractvalue { i32, i1 } %9, 1
  %11 = extractvalue { i32, i1 } %9, 0
  %12 = select i1 %10, i32 %8, i32 %11, !prof !2
  %13 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %0, i64 0, i32 0, i32 1, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %0, i64 0, i32 1, i32 1, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 0
  %18 = select i1 %17, i32 -2147483648, i32 2147483647
  %19 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %14, i32 %16) #5
  %20 = extractvalue { i32, i1 } %19, 1
  %21 = extractvalue { i32, i1 } %19, 0
  %22 = select i1 %20, i32 %18, i32 %21, !prof !2
  %23 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %1, i64 0, i32 0, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %1, i64 0, i32 1, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, 0
  %28 = select i1 %27, i32 -2147483648, i32 2147483647
  %29 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %24, i32 %26) #5
  %30 = extractvalue { i32, i1 } %29, 1
  %31 = extractvalue { i32, i1 } %29, 0
  %32 = select i1 %30, i32 %28, i32 %31, !prof !2
  %33 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %1, i64 0, i32 0, i32 1, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %1, i64 0, i32 1, i32 1, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %36, 0
  %38 = select i1 %37, i32 -2147483648, i32 2147483647
  %39 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %34, i32 %36) #5
  %40 = extractvalue { i32, i1 } %39, 1
  %41 = extractvalue { i32, i1 } %39, 0
  %42 = select i1 %40, i32 %38, i32 %41, !prof !2
  %43 = icmp sgt i32 %12, %32
  %44 = select i1 %43, i32 %12, i32 %32
  %45 = icmp sgt i32 %22, %42
  %46 = select i1 %45, i32 %22, i32 %42
  %47 = bitcast %"struct.blink::LogicalRect"* %0 to i64*
  %48 = load i64, i64* %47, align 4
  %49 = bitcast %"struct.blink::LogicalRect"* %1 to i64*
  %50 = load i64, i64* %49, align 4
  %51 = trunc i64 %48 to i32
  %52 = lshr i64 %48, 32
  %53 = trunc i64 %52 to i32
  %54 = trunc i64 %50 to i32
  %55 = lshr i64 %50, 32
  %56 = trunc i64 %55 to i32
  %57 = icmp slt i32 %54, %51
  %58 = select i1 %57, i64 %50, i64 %48
  %59 = icmp slt i32 %56, %53
  %60 = select i1 %59, i64 %55, i64 %52
  %61 = trunc i64 %58 to i32
  %62 = trunc i64 %60 to i32
  %63 = icmp sgt i32 %61, -1
  %64 = select i1 %63, i32 -2147483648, i32 2147483647
  %65 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %44, i32 %61) #5
  %66 = extractvalue { i32, i1 } %65, 1
  %67 = extractvalue { i32, i1 } %65, 0
  %68 = select i1 %66, i32 %64, i32 %67, !prof !2
  %69 = icmp sgt i32 %62, -1
  %70 = select i1 %69, i32 -2147483648, i32 2147483647
  %71 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %46, i32 %62) #5
  %72 = extractvalue { i32, i1 } %71, 1
  %73 = extractvalue { i32, i1 } %71, 0
  %74 = select i1 %72, i32 %70, i32 %73, !prof !2
  %75 = zext i32 %74 to i64
  %76 = shl nuw i64 %75, 32
  %77 = zext i32 %68 to i64
  %78 = or i64 %76, %77
  %79 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %0, i64 0, i32 1
  %80 = bitcast %"struct.blink::LogicalSize"* %79 to i64*
  store i64 %78, i64* %80, align 4
  %81 = icmp sgt i32 %68, -1
  %82 = select i1 %81, i32 -2147483648, i32 2147483647
  %83 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %44, i32 %68) #5
  %84 = extractvalue { i32, i1 } %83, 1
  %85 = extractvalue { i32, i1 } %83, 0
  %86 = select i1 %84, i32 %82, i32 %85, !prof !2
  %87 = icmp sgt i32 %74, -1
  %88 = select i1 %87, i32 -2147483648, i32 2147483647
  %89 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %46, i32 %74) #5
  %90 = extractvalue { i32, i1 } %89, 1
  %91 = extractvalue { i32, i1 } %89, 0
  %92 = select i1 %90, i32 %88, i32 %91, !prof !2
  %93 = zext i32 %92 to i64
  %94 = shl nuw i64 %93, 32
  %95 = zext i32 %86 to i64
  %96 = or i64 %94, %95
  store i64 %96, i64* %47, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink11LogicalRect8ToStringEv(%"struct.blink::LogicalRect"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.WTF::String", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.WTF::String", align 8
  %10 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #5
  %11 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #5
  %12 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %0, i64 0, i32 0, i32 0
  %13 = tail call %"class.WTF::StringImpl"* @_ZNK5blink10LayoutUnit8ToStringEv(%"class.blink::LayoutUnit"* %12) #5
  %14 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %13, %"class.WTF::StringImpl"** %14, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %2, %"class.WTF::String"* nonnull %3) #5
  %15 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = select i1 %18, i8* %20, i8* %10
  %22 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #5
  %23 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #5
  %24 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %0, i64 0, i32 0, i32 1
  %25 = call %"class.WTF::StringImpl"* @_ZNK5blink10LayoutUnit8ToStringEv(%"class.blink::LayoutUnit"* %24) #5
  %26 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %25, %"class.WTF::StringImpl"** %26, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %4, %"class.WTF::String"* nonnull %5) #5
  %27 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %27, i64 0, i32 1, i32 0
  %29 = load i8, i8* %28, align 1
  %30 = icmp slt i8 %29, 0
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = select i1 %30, i8* %32, i8* %22
  %34 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %34) #5
  %35 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #5
  %36 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %0, i64 0, i32 1, i32 0
  %37 = call %"class.WTF::StringImpl"* @_ZNK5blink10LayoutUnit8ToStringEv(%"class.blink::LayoutUnit"* %36) #5
  %38 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %37, %"class.WTF::StringImpl"** %38, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %6, %"class.WTF::String"* nonnull %7) #5
  %39 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  %41 = load i8, i8* %40, align 1
  %42 = icmp slt i8 %41, 0
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = select i1 %42, i8* %44, i8* %34
  %46 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #5
  %47 = bitcast %"class.WTF::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #5
  %48 = getelementptr inbounds %"struct.blink::LogicalRect", %"struct.blink::LogicalRect"* %0, i64 0, i32 1, i32 1
  %49 = call %"class.WTF::StringImpl"* @_ZNK5blink10LayoutUnit8ToStringEv(%"class.blink::LayoutUnit"* %48) #5
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %49, %"class.WTF::StringImpl"** %50, align 8
  call void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* nonnull sret %8, %"class.WTF::String"* nonnull %9) #5
  %51 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %51, i64 0, i32 1, i32 0
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  %55 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = select i1 %54, i8* %56, i8* %46
  %58 = call %"class.WTF::StringImpl"* (i8*, ...) @_ZN3WTF6String6FormatEPKcz(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i8* %21, i8* %33, i8* %45, i8* %57) #5
  %59 = load i8, i8* %52, align 1
  %60 = icmp slt i8 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %1
  %62 = load i8*, i8** %55, align 8
  call void @_ZdlPv(i8* %62) #6
  br label %63

63:                                               ; preds = %1, %61
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %79, label %66

66:                                               ; preds = %63
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 0
  %72 = load i32, i32* %71, align 4
  br i1 %70, label %73, label %75

73:                                               ; preds = %66
  %74 = add i32 %72, -1
  store i32 %74, i32* %71, align 4
  br label %75

75:                                               ; preds = %73, %66
  %76 = phi i32 [ %74, %73 ], [ %72, %66 ]
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %64) #5
  br label %79

79:                                               ; preds = %63, %75, %78
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #5
  %80 = load i8, i8* %40, align 1
  %81 = icmp slt i8 %80, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %79
  %83 = load i8*, i8** %43, align 8
  call void @_ZdlPv(i8* %83) #6
  br label %84

84:                                               ; preds = %79, %82
  %85 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  %86 = icmp eq %"class.WTF::StringImpl"* %85, null
  br i1 %86, label %100, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %85, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load atomic i32, i32* %88 monotonic, align 4
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %85, i64 0, i32 0
  %93 = load i32, i32* %92, align 4
  br i1 %91, label %94, label %96

94:                                               ; preds = %87
  %95 = add i32 %93, -1
  store i32 %95, i32* %92, align 4
  br label %96

96:                                               ; preds = %94, %87
  %97 = phi i32 [ %95, %94 ], [ %93, %87 ]
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %100

99:                                               ; preds = %96
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %85) #5
  br label %100

100:                                              ; preds = %84, %96, %99
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %34) #5
  %101 = load i8, i8* %28, align 1
  %102 = icmp slt i8 %101, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %100
  %104 = load i8*, i8** %31, align 8
  call void @_ZdlPv(i8* %104) #6
  br label %105

105:                                              ; preds = %100, %103
  %106 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %106, null
  br i1 %107, label %121, label %108

108:                                              ; preds = %105
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %106, i64 0, i32 0
  %114 = load i32, i32* %113, align 4
  br i1 %112, label %115, label %117

115:                                              ; preds = %108
  %116 = add i32 %114, -1
  store i32 %116, i32* %113, align 4
  br label %117

117:                                              ; preds = %115, %108
  %118 = phi i32 [ %116, %115 ], [ %114, %108 ]
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %121

120:                                              ; preds = %117
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %106) #5
  br label %121

121:                                              ; preds = %105, %117, %120
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #5
  %122 = load i8, i8* %16, align 1
  %123 = icmp slt i8 %122, 0
  br i1 %123, label %124, label %126

124:                                              ; preds = %121
  %125 = load i8*, i8** %19, align 8
  call void @_ZdlPv(i8* %125) #6
  br label %126

126:                                              ; preds = %121, %124
  %127 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %128 = icmp eq %"class.WTF::StringImpl"* %127, null
  br i1 %128, label %142, label %129

129:                                              ; preds = %126
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 0
  %135 = load i32, i32* %134, align 4
  br i1 %133, label %136, label %138

136:                                              ; preds = %129
  %137 = add i32 %135, -1
  store i32 %137, i32* %134, align 4
  br label %138

138:                                              ; preds = %136, %129
  %139 = phi i32 [ %137, %136 ], [ %135, %129 ]
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %142

141:                                              ; preds = %138
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %127) #5
  br label %142

142:                                              ; preds = %126, %138, %141
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #5
  ret %"class.WTF::StringImpl"* %58
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6FormatEPKcz(i8*, ...) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZNK5blink10LayoutUnit8ToStringEv(%"class.blink::LayoutUnit"*) local_unnamed_addr #2

declare void @_ZNK3WTF6String5AsciiEv(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_11LogicalRectE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"struct.blink::LogicalRect"* dereferenceable(16)) local_unnamed_addr #0 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #5
  %5 = tail call %"class.WTF::StringImpl"* @_ZNK5blink11LogicalRect8ToStringEv(%"struct.blink::LogicalRect"* %1)
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, %"class.WTF::String"* nonnull dereferenceable(8) %3) #5
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %23, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  br i1 %14, label %17, label %19

17:                                               ; preds = %10
  %18 = add i32 %16, -1
  store i32 %18, i32* %15, align 4
  br label %19

19:                                               ; preds = %17, %10
  %20 = phi i32 [ %18, %17 ], [ %16, %10 ]
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #5
  br label %23

23:                                               ; preds = %2, %19, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #5
  ret %"class.std::__1::basic_ostream"* %7
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN3WTFlsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_6StringE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #3

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #3

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
