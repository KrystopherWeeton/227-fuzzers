; ModuleID = '../../third_party/pdfium/core/fxcrt/css/cfx_cssvaluelistparser.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/css/cfx_cssvaluelistparser.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_CSSValueListParser = type { i32, i32*, i32* }

@.str = private unnamed_addr constant [4 x i32] [i32 114, i32 103, i32 98, i32 0], align 4

@_ZN22CFX_CSSValueListParserC1EPKwiw = hidden unnamed_addr alias void (%class.CFX_CSSValueListParser*, i32*, i32, i32), void (%class.CFX_CSSValueListParser*, i32*, i32, i32)* @_ZN22CFX_CSSValueListParserC2EPKwiw

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN22CFX_CSSValueListParserC2EPKwiw(%class.CFX_CSSValueListParser* nocapture, i32*, i32, i32 signext) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.CFX_CSSValueListParser, %class.CFX_CSSValueListParser* %0, i64 0, i32 0
  store i32 %3, i32* %5, align 8
  %6 = getelementptr inbounds %class.CFX_CSSValueListParser, %class.CFX_CSSValueListParser* %0, i64 0, i32 1
  store i32* %1, i32** %6, align 8
  %7 = getelementptr inbounds %class.CFX_CSSValueListParser, %class.CFX_CSSValueListParser* %0, i64 0, i32 2
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds i32, i32* %1, i64 %8
  store i32* %9, i32** %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN22CFX_CSSValueListParser9NextValueEPN12CFX_CSSValue13PrimitiveTypeEPPKwPi(%class.CFX_CSSValueListParser* nocapture, i8* nocapture, i32** nocapture, i32* nocapture) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %class.CFX_CSSValueListParser, %class.CFX_CSSValueListParser* %0, i64 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %class.CFX_CSSValueListParser, %class.CFX_CSSValueListParser* %0, i64 0, i32 2
  %8 = load i32*, i32** %7, align 8
  %9 = icmp ult i32* %6, %8
  br i1 %9, label %10, label %183

10:                                               ; preds = %4
  %11 = getelementptr inbounds %class.CFX_CSSValueListParser, %class.CFX_CSSValueListParser* %0, i64 0, i32 0
  br label %12

12:                                               ; preds = %10, %19
  %13 = phi i32* [ %6, %10 ], [ %20, %19 ]
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, 33
  br i1 %15, label %19, label %16

16:                                               ; preds = %12
  %17 = load i32, i32* %11, align 8
  %18 = icmp eq i32 %14, %17
  br i1 %18, label %19, label %22

19:                                               ; preds = %12, %16
  %20 = getelementptr inbounds i32, i32* %13, i64 1
  store i32* %20, i32** %5, align 8
  %21 = icmp ult i32* %20, %8
  br i1 %21, label %12, label %183

22:                                               ; preds = %16
  store i8 0, i8* %1, align 1
  %23 = bitcast i32** %5 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast i32** %2 to i64*
  store i64 %24, i64* %25, align 8
  store i32 0, i32* %3, align 4
  %26 = load i32*, i32** %5, align 8
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 35
  %29 = ptrtoint i32* %26 to i64
  br i1 %28, label %30, label %48

30:                                               ; preds = %22
  %31 = load i32*, i32** %7, align 8
  %32 = icmp ugt i32* %31, %26
  br i1 %32, label %33, label %42

33:                                               ; preds = %30, %37
  %34 = phi i32* [ %35, %37 ], [ %26, %30 ]
  %35 = getelementptr inbounds i32, i32* %34, i64 1
  store i32* %35, i32** %5, align 8
  %36 = icmp ult i32* %35, %31
  br i1 %36, label %37, label %40

37:                                               ; preds = %33
  %38 = load i32, i32* %35, align 4
  %39 = icmp eq i32 %38, 32
  br i1 %39, label %40, label %33

40:                                               ; preds = %33, %37
  %41 = ptrtoint i32* %35 to i64
  br label %42

42:                                               ; preds = %40, %30
  %43 = phi i64 [ %41, %40 ], [ %29, %30 ]
  %44 = sub i64 %43, %29
  %45 = lshr exact i64 %44, 2
  %46 = trunc i64 %45 to i32
  store i32 %46, i32* %3, align 4
  switch i32 %46, label %176 [
    i32 4, label %47
    i32 7, label %47
  ]

47:                                               ; preds = %42, %42
  store i8 3, i8* %1, align 1
  br label %176

48:                                               ; preds = %22
  %49 = icmp ugt i32 %27, 127
  br i1 %49, label %53, label %50

50:                                               ; preds = %48
  %51 = tail call i32 @iswdigit(i32 %27) #5
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %50, %48
  switch i32 %27, label %100 [
    i32 46, label %54
    i32 45, label %54
    i32 43, label %54
    i32 39, label %75
    i32 34, label %75
  ]

54:                                               ; preds = %53, %53, %53, %50
  %55 = load i32*, i32** %5, align 8
  %56 = load i32*, i32** %7, align 8
  %57 = icmp ult i32* %55, %56
  br i1 %57, label %58, label %68

58:                                               ; preds = %54, %65
  %59 = phi i32* [ %66, %65 ], [ %55, %54 ]
  %60 = load i32, i32* %59, align 4
  %61 = icmp sgt i32 %60, 32
  br i1 %61, label %62, label %68

62:                                               ; preds = %58
  %63 = load i32, i32* %11, align 8
  %64 = icmp eq i32 %60, %63
  br i1 %64, label %68, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds i32, i32* %59, i64 1
  store i32* %66, i32** %5, align 8
  %67 = icmp ult i32* %66, %56
  br i1 %67, label %58, label %68

68:                                               ; preds = %65, %58, %62, %54
  %69 = phi i32* [ %55, %54 ], [ %59, %62 ], [ %59, %58 ], [ %66, %65 ]
  %70 = load i64, i64* %25, align 8
  %71 = ptrtoint i32* %69 to i64
  %72 = sub i64 %71, %70
  %73 = lshr exact i64 %72, 2
  %74 = trunc i64 %73 to i32
  store i32 %74, i32* %3, align 4
  store i8 1, i8* %1, align 1
  br label %176

75:                                               ; preds = %53, %53
  %76 = load i32*, i32** %2, align 8
  %77 = getelementptr inbounds i32, i32* %76, i64 1
  store i32* %77, i32** %2, align 8
  %78 = load i32*, i32** %5, align 8
  %79 = getelementptr inbounds i32, i32* %78, i64 1
  store i32* %79, i32** %5, align 8
  %80 = ptrtoint i32* %79 to i64
  %81 = load i32*, i32** %7, align 8
  %82 = icmp ugt i32* %81, %79
  br i1 %82, label %83, label %93

83:                                               ; preds = %75, %87
  %84 = phi i32* [ %88, %87 ], [ %79, %75 ]
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %85, %27
  br i1 %86, label %90, label %87

87:                                               ; preds = %83
  %88 = getelementptr inbounds i32, i32* %84, i64 1
  store i32* %88, i32** %5, align 8
  %89 = icmp ult i32* %88, %81
  br i1 %89, label %83, label %90

90:                                               ; preds = %87, %83
  %91 = phi i32* [ %84, %83 ], [ %88, %87 ]
  %92 = ptrtoint i32* %91 to i64
  br label %93

93:                                               ; preds = %90, %75
  %94 = phi i64 [ %92, %90 ], [ %80, %75 ]
  %95 = sub i64 %94, %80
  %96 = lshr exact i64 %95, 2
  %97 = trunc i64 %96 to i32
  store i32 %97, i32* %3, align 4
  %98 = load i32*, i32** %5, align 8
  %99 = getelementptr inbounds i32, i32* %98, i64 1
  store i32* %99, i32** %5, align 8
  store i8 2, i8* %1, align 1
  br label %176

100:                                              ; preds = %53
  %101 = bitcast i32** %7 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = load i32*, i32** %5, align 8
  %104 = ptrtoint i32* %103 to i64
  %105 = sub i64 %102, %104
  %106 = icmp sgt i64 %105, 20
  %107 = inttoptr i64 %102 to i32*
  br i1 %106, label %108, label %136

108:                                              ; preds = %100
  %109 = getelementptr inbounds i32, i32* %103, i64 3
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i32 %110, 40
  br i1 %111, label %112, label %136

112:                                              ; preds = %108
  %113 = tail call i32 @_Z14FXSYS_wcsnicmpPKwS0_m(i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str, i64 0, i64 0), i32* %103, i64 3) #5
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %176

115:                                              ; preds = %112
  %116 = load i64, i64* %23, align 8
  %117 = inttoptr i64 %116 to i32*
  %118 = load i32*, i32** %7, align 8
  %119 = icmp ugt i32* %118, %117
  br i1 %119, label %120, label %127

120:                                              ; preds = %115, %124
  %121 = phi i32* [ %125, %124 ], [ %117, %115 ]
  %122 = load i32, i32* %121, align 4
  %123 = icmp eq i32 %122, 41
  br i1 %123, label %127, label %124

124:                                              ; preds = %120
  %125 = getelementptr inbounds i32, i32* %121, i64 1
  store i32* %125, i32** %5, align 8
  %126 = icmp ult i32* %125, %118
  br i1 %126, label %120, label %127

127:                                              ; preds = %120, %124, %115
  %128 = phi i32* [ %117, %115 ], [ %125, %124 ], [ %121, %120 ]
  %129 = ptrtoint i32* %128 to i64
  %130 = sub i64 %129, %116
  %131 = lshr exact i64 %130, 2
  %132 = trunc i64 %131 to i32
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %3, align 4
  %134 = load i32*, i32** %5, align 8
  %135 = getelementptr inbounds i32, i32* %134, i64 1
  store i32* %135, i32** %5, align 8
  store i8 3, i8* %1, align 1
  br label %176

136:                                              ; preds = %108, %100
  %137 = load i32, i32* %11, align 8
  %138 = icmp ult i32* %103, %107
  br i1 %138, label %139, label %170

139:                                              ; preds = %136, %151
  %140 = phi i32* [ %153, %151 ], [ %103, %136 ]
  %141 = phi i32 [ %152, %151 ], [ 0, %136 ]
  %142 = load i32, i32* %140, align 4
  %143 = icmp eq i32 %142, %137
  %144 = icmp slt i32 %142, 33
  %145 = or i1 %143, %144
  br i1 %145, label %155, label %146

146:                                              ; preds = %139
  switch i32 %142, label %151 [
    i32 40, label %147
    i32 41, label %149
  ]

147:                                              ; preds = %146
  %148 = add nsw i32 %141, 1
  br label %151

149:                                              ; preds = %146
  %150 = add nsw i32 %141, -1
  br label %151

151:                                              ; preds = %149, %147, %146
  %152 = phi i32 [ %148, %147 ], [ %150, %149 ], [ %141, %146 ]
  %153 = getelementptr inbounds i32, i32* %140, i64 1
  store i32* %153, i32** %5, align 8
  %154 = icmp ult i32* %153, %107
  br i1 %154, label %139, label %155

155:                                              ; preds = %151, %139
  %156 = phi i32* [ %140, %139 ], [ %153, %151 ]
  %157 = phi i32 [ %141, %139 ], [ %152, %151 ]
  %158 = icmp sgt i32 %157, 0
  br i1 %158, label %159, label %170

159:                                              ; preds = %155, %163
  %160 = phi i32* [ %166, %163 ], [ %156, %155 ]
  %161 = phi i32 [ %168, %163 ], [ %157, %155 ]
  %162 = icmp ult i32* %160, %107
  br i1 %162, label %163, label %170

163:                                              ; preds = %159
  %164 = load i32, i32* %160, align 4
  %165 = icmp eq i32 %164, 41
  %166 = getelementptr inbounds i32, i32* %160, i64 1
  store i32* %166, i32** %5, align 8
  %167 = zext i1 %165 to i32
  %168 = sub nuw nsw i32 %161, %167
  %169 = icmp sgt i32 %168, 0
  br i1 %169, label %159, label %170

170:                                              ; preds = %159, %163, %136, %155
  %171 = phi i32* [ %156, %155 ], [ %103, %136 ], [ %160, %159 ], [ %166, %163 ]
  %172 = ptrtoint i32* %171 to i64
  %173 = sub i64 %172, %104
  %174 = lshr exact i64 %173, 2
  %175 = trunc i64 %174 to i32
  store i32 %175, i32* %3, align 4
  store i8 2, i8* %1, align 1
  br label %176

176:                                              ; preds = %42, %68, %170, %127, %112, %93, %47
  %177 = load i32*, i32** %5, align 8
  %178 = load i32*, i32** %7, align 8
  %179 = icmp ugt i32* %177, %178
  br i1 %179, label %183, label %180

180:                                              ; preds = %176
  %181 = load i32, i32* %3, align 4
  %182 = icmp sgt i32 %181, 0
  br label %183

183:                                              ; preds = %19, %4, %180, %176
  %184 = phi i1 [ false, %176 ], [ %182, %180 ], [ false, %4 ], [ false, %19 ]
  ret i1 %184
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN22CFX_CSSValueListParser6SkipToEwbb(%class.CFX_CSSValueListParser* nocapture, i32 signext, i1 zeroext, i1 zeroext) local_unnamed_addr #2 align 2 {
  %5 = getelementptr inbounds %class.CFX_CSSValueListParser, %class.CFX_CSSValueListParser* %0, i64 0, i32 1
  %6 = bitcast i32** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = inttoptr i64 %7 to i32*
  %9 = getelementptr inbounds %class.CFX_CSSValueListParser, %class.CFX_CSSValueListParser* %0, i64 0, i32 2
  %10 = load i32*, i32** %9, align 8
  %11 = icmp ugt i32* %10, %8
  br i1 %11, label %12, label %50

12:                                               ; preds = %4, %31
  %13 = phi i32* [ %33, %31 ], [ %8, %4 ]
  %14 = phi i32 [ %32, %31 ], [ 0, %4 ]
  br label %15

15:                                               ; preds = %12, %23
  %16 = phi i32* [ %13, %12 ], [ %24, %23 ]
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, %1
  %19 = icmp slt i32 %17, 33
  %20 = and i1 %19, %2
  %21 = or i1 %18, %20
  br i1 %21, label %35, label %22

22:                                               ; preds = %15
  br i1 %3, label %26, label %23

23:                                               ; preds = %22
  %24 = getelementptr inbounds i32, i32* %16, i64 1
  store i32* %24, i32** %5, align 8
  %25 = icmp ult i32* %24, %10
  br i1 %25, label %15, label %35

26:                                               ; preds = %22
  switch i32 %17, label %31 [
    i32 40, label %27
    i32 41, label %29
  ]

27:                                               ; preds = %26
  %28 = add nsw i32 %14, 1
  br label %31

29:                                               ; preds = %26
  %30 = add nsw i32 %14, -1
  br label %31

31:                                               ; preds = %26, %29, %27
  %32 = phi i32 [ %28, %27 ], [ %30, %29 ], [ %14, %26 ]
  %33 = getelementptr inbounds i32, i32* %13, i64 1
  store i32* %33, i32** %5, align 8
  %34 = icmp ult i32* %33, %10
  br i1 %34, label %12, label %35

35:                                               ; preds = %31, %23, %15
  %36 = phi i32* [ %16, %15 ], [ %24, %23 ], [ %33, %31 ]
  %37 = phi i32 [ %14, %15 ], [ %14, %23 ], [ %32, %31 ]
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %50

39:                                               ; preds = %35, %43
  %40 = phi i32* [ %46, %43 ], [ %36, %35 ]
  %41 = phi i32 [ %48, %43 ], [ %37, %35 ]
  %42 = icmp ult i32* %40, %10
  br i1 %42, label %43, label %50

43:                                               ; preds = %39
  %44 = load i32, i32* %40, align 4
  %45 = icmp eq i32 %44, 41
  %46 = getelementptr inbounds i32, i32* %40, i64 1
  store i32* %46, i32** %5, align 8
  %47 = zext i1 %45 to i32
  %48 = sub nuw nsw i32 %41, %47
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %39, label %50

50:                                               ; preds = %39, %43, %4, %35
  %51 = phi i32* [ %36, %35 ], [ %8, %4 ], [ %46, %43 ], [ %40, %39 ]
  %52 = ptrtoint i32* %51 to i64
  %53 = sub i64 %52, %7
  %54 = lshr exact i64 %53, 2
  %55 = trunc i64 %54 to i32
  ret i32 %55
}

declare i32 @_Z14FXSYS_wcsnicmpPKwS0_m(i32*, i32*, i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @iswdigit(i32) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
