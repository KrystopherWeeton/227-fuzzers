; ModuleID = '../../third_party/skia/src/gpu/vk/GrVkRenderPass.cpp'
source_filename = "../../third_party/skia/src/gpu/vk/GrVkRenderPass.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.GrVkRenderPass::LoadStoreOps" = type { i32, i32 }
%class.GrVkRenderPass = type <{ %class.GrVkManagedResource, %struct.VkRenderPass_T*, i32, %"struct.GrVkRenderPass::AttachmentsDescriptor", i32, i32, %struct.VkExtent2D, i32, i32, i32, [4 x i8] }>
%class.GrVkManagedResource = type { %class.GrManagedResource.base, %class.GrVkGpu* }
%class.GrManagedResource.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.GrVkRenderPass::AttachmentsDescriptor" = type { %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", i32 }
%"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc" = type { i32, i32, %"struct.GrVkRenderPass::LoadStoreOps" }
%struct.VkExtent2D = type { i32, i32 }
%class.GrVkGpu = type { %class.GrGpu, %class.sk_sp.193, %class.sk_sp.337, %class.sk_sp.338, i8, %struct.VkPhysicalDevice_T*, %struct.VkDevice_T*, %struct.VkQueue_T*, i32, %class.GrVkResourceProvider, %class.GrStagingBufferManager, %class.GrVkMSAALoadManager, %class.GrVkCommandPool*, %class.GrVkPrimaryCommandBuffer*, %class.SkSTArray.412, %class.SkSTArray.412, %class.SkTArray.415, %struct.VkPhysicalDeviceProperties, %struct.VkPhysicalDeviceMemoryProperties, i8, i8, %"class.std::__1::unique_ptr.422" }
%class.GrGpu = type { %class.SkRefCnt.base, %"class.GrGpu::Stats", %class.sk_sp, %"class.std::__1::unique_ptr", i32, %class.GrDirectContext*, %class.SkSTArray, i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"class.GrGpu::Stats" = type { i8 }
%class.sk_sp = type { %class.GrCaps* }
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.1, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp.1 = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkSL::Compiler"* }
%"class.SkSL::Compiler" = type { %"class.SkSL::ErrorReporter", %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr.41", %"class.std::__1::shared_ptr.41", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"struct.SkSL::ParsedModule", %"class.SkSL::ModifiersPool", %"class.SkSL::Inliner", %"class.std::__1::unique_ptr.43", %"class.SkSL::String"*, i32, %"class.SkSL::String", %"class.std::__1::vector.49" }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%"class.std::__1::shared_ptr" = type { %"class.SkSL::Context"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.2" }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.SkSL::Type"* }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.13", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.15" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.SkSL::Type::Field"* }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.40"* }
%"class.std::__1::vector.40" = type opaque
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::shared_ptr.41" = type { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::SymbolTable" = type { %"class.std::__1::shared_ptr.41", %"class.std::__1::vector.428", i8, %"class.std::__1::vector.436", %"class.std::__1::forward_list", %class.SkTHashMap.449, %"class.SkSL::ErrorReporter"* }
%"class.std::__1::vector.428" = type { %"class.std::__1::__vector_base.429" }
%"class.std::__1::__vector_base.429" = type { %"class.std::__1::unique_ptr.430"*, %"class.std::__1::unique_ptr.430"*, %"class.std::__1::__compressed_pair.431" }
%"class.std::__1::unique_ptr.430" = type { %"class.std::__1::__compressed_pair.496" }
%"class.std::__1::__compressed_pair.496" = type { %"struct.std::__1::__compressed_pair_elem.497" }
%"struct.std::__1::__compressed_pair_elem.497" = type { %"class.SkSL::Symbol"* }
%"class.std::__1::__compressed_pair.431" = type { %"struct.std::__1::__compressed_pair_elem.432" }
%"struct.std::__1::__compressed_pair_elem.432" = type { %"class.std::__1::unique_ptr.430"* }
%"class.std::__1::vector.436" = type { %"class.std::__1::__vector_base.437" }
%"class.std::__1::__vector_base.437" = type { %"class.std::__1::unique_ptr.438"*, %"class.std::__1::unique_ptr.438"*, %"class.std::__1::__compressed_pair.439" }
%"class.std::__1::unique_ptr.438" = type { %"class.std::__1::__compressed_pair.501" }
%"class.std::__1::__compressed_pair.501" = type { %"struct.std::__1::__compressed_pair_elem.502" }
%"struct.std::__1::__compressed_pair_elem.502" = type { %"class.SkSL::IRNode"* }
%"class.std::__1::__compressed_pair.439" = type { %"struct.std::__1::__compressed_pair_elem.440" }
%"struct.std::__1::__compressed_pair_elem.440" = type { %"class.std::__1::unique_ptr.438"* }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.444" }
%"class.std::__1::__compressed_pair.444" = type { %"struct.std::__1::__compressed_pair_elem.445" }
%"struct.std::__1::__compressed_pair_elem.445" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.SkSL::String" }
%class.SkTHashMap.449 = type { %class.SkTHashTable.450 }
%class.SkTHashTable.450 = type { i32, i32, %class.SkAutoTArray.451 }
%class.SkAutoTArray.451 = type { %"class.std::__1::unique_ptr.452" }
%"class.std::__1::unique_ptr.452" = type { %"class.std::__1::__compressed_pair.453" }
%"class.std::__1::__compressed_pair.453" = type { %"struct.std::__1::__compressed_pair_elem.454" }
%"struct.std::__1::__compressed_pair_elem.454" = type { %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair" = type { %"struct.std::__1::pair.506" }
%"struct.std::__1::pair.506" = type { %"struct.SkSL::SymbolTable::SymbolKey", %"class.SkSL::Symbol"* }
%"struct.SkSL::SymbolTable::SymbolKey" = type <{ %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"struct.SkSL::ParsedModule" = type { %"class.std::__1::shared_ptr.41", %"class.std::__1::shared_ptr.42" }
%"class.std::__1::shared_ptr.42" = type { %"class.SkSL::IRIntrinsicMap"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::IRIntrinsicMap" = type opaque
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.21", %"class.std::__1::__compressed_pair.30", %"class.std::__1::__compressed_pair.35", %"class.std::__1::__compressed_pair.37", [4 x i8] }>
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23", %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i64 }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { float }
%"class.SkSL::Inliner" = type { %"class.SkSL::Context"*, %"class.SkSL::Mangler", i32 }
%"class.SkSL::Mangler" = type { i32 }
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.SkSL::IRGenerator"* }
%"class.SkSL::IRGenerator" = type opaque
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.49" = type { %"class.std::__1::__vector_base.50" }
%"class.std::__1::__vector_base.50" = type { i64*, i64*, %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { i64* }
%class.GrDirectContext = type { %class.GrRecordingContext, %"class.GrDirectContext::DirectContextID", %"class.std::__1::unique_ptr.111", %"class.std::__1::unique_ptr.117", %class.sk_sp.123, %"class.std::__1::unique_ptr.124", %"class.std::__1::unique_ptr.167", i8, i8, %"class.GrContextOptions::PersistentCache"*, %"class.GrContextOptions::ShaderErrorHandler"*, %"class.std::__1::unique_ptr.174", %"class.std::__1::unique_ptr.180", %"class.std::__1::unique_ptr.186" }
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr.60", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.99", %"class.std::__1::unique_ptr.105" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp.59 }
%class.sk_sp.59 = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%class.GrSingleOwner = type { i8 }
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type <{ %class.SkTArray, %class.SkTHashMap, %class.SkTHashMap.70, %class.SkTArray.79, %class.SkTArray.81, i32, i8, [3 x i8] }>
%class.SkTArray = type { %"class.std::__1::unique_ptr.63"*, i64 }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.484" }
%"class.std::__1::__compressed_pair.484" = type { %"struct.std::__1::__compressed_pair_elem.485" }
%"struct.std::__1::__compressed_pair_elem.485" = type { %"struct.GrAuditTrail::Op"* }
%"struct.GrAuditTrail::Op" = type <{ %class.SkString, %class.SkTArray.81, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkString = type { %class.sk_sp.82 }
%class.sk_sp.82 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%struct.SkRect = type { float, float, float, float }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.64" }
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, i32 }
%class.SkTHashMap.70 = type { %class.SkTHashTable.71 }
%class.SkTHashTable.71 = type { i32, i32, %class.SkAutoTArray.72 }
%class.SkAutoTArray.72 = type { %"class.std::__1::unique_ptr.73" }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.489" }
%"struct.std::__1::pair.489" = type { i32, %class.SkTArray.490* }
%class.SkTArray.490 = type { %"struct.GrAuditTrail::Op"**, i64 }
%class.SkTArray.79 = type { %"class.std::__1::unique_ptr.80"*, i64 }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.491" }
%"class.std::__1::__compressed_pair.491" = type { %"struct.std::__1::__compressed_pair_elem.492" }
%"struct.std::__1::__compressed_pair_elem.492" = type { %"struct.GrAuditTrail::OpNode"* }
%"struct.GrAuditTrail::OpNode" = type <{ %struct.SkRect, %class.SkTArray.490, %"class.GrSurfaceProxy::UniqueID", [4 x i8] }>
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%class.SkTArray.81 = type { %class.SkString*, i64 }
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.92" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %class.SkArenaAlloc* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.95 }
%class.SkFibBlockSizes.95 = type { i32 }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type opaque
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %class.GrProxyProvider* }
%class.GrProxyProvider = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %class.SkTaskGroup* }
%class.SkTaskGroup = type opaque
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %class.GrStrikeCache* }
%class.GrStrikeCache = type opaque
%class.sk_sp.123 = type { %class.GrGpu* }
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %class.GrResourceCache* }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray, %class.SkTMultiMap, %class.SkTDynamicHash.137, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap.155, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray }
%class.SkTDArray = type { %class.GrGpuResource**, i32, i32 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon.127, [4 x i8] }>
%union.anon.127 = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.128, i8* }
%class.sk_sp.128 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"class.GrGpuResource::UniqueID" = type { i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable.129 }
%class.SkTHashTable.129 = type { i32, i32, %class.SkAutoTArray.130 }
%class.SkAutoTArray.130 = type { %"class.std::__1::unique_ptr.131" }
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.137 = type { %class.SkTHashTable.138 }
%class.SkTHashTable.138 = type { i32, i32, %class.SkAutoTArray.139 }
%class.SkAutoTArray.139 = type { %"class.std::__1::unique_ptr.140" }
%"class.std::__1::unique_ptr.140" = type { %"class.std::__1::__compressed_pair.141" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.146, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.146 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.147" }
%"struct.std::__1::atomic.147" = type { %"struct.std::__1::__atomic_base.148" }
%"struct.std::__1::__atomic_base.148" = type { %"struct.std::__1::__atomic_base.149" }
%"struct.std::__1::__atomic_base.149" = type { %"struct.std::__1::__cxx_atomic_impl.150" }
%"struct.std::__1::__cxx_atomic_impl.150" = type { %"struct.std::__1::__cxx_atomic_base_impl.151" }
%"struct.std::__1::__cxx_atomic_base_impl.151" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.152, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.152 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.153 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.153 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.154, void (i8*)*, i8* }
%class.SkNVRefCnt.154 = type { %"struct.std::__1::atomic" }
%class.SkTHashMap.155 = type { %class.SkTHashTable.156 }
%class.SkTHashTable.156 = type { i32, i32, %class.SkAutoTArray.157 }
%class.SkAutoTArray.157 = type { %"class.std::__1::unique_ptr.158" }
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.std::__1::unique_ptr.167" = type { %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %class.GrResourceProvider* }
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp, %class.sk_sp.170, %class.sk_sp.170 }
%class.sk_sp.170 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%class.GrBuffer = type { i32 (...)** }
%"class.GrContextOptions::PersistentCache" = type { i32 (...)** }
%"class.GrContextOptions::ShaderErrorHandler" = type { i32 (...)** }
%"class.std::__1::unique_ptr.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %class.GrClientMappedBufferManager* }
%class.GrClientMappedBufferManager = type opaque
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %class.GrAtlasManager* }
%class.GrAtlasManager = type opaque
%"class.std::__1::unique_ptr.186" = type { %"class.std::__1::__compressed_pair.187" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.188" }
%"struct.std::__1::__compressed_pair_elem.188" = type { %class.GrSmallPathAtlasMgr* }
%class.GrSmallPathAtlasMgr = type opaque
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray.192 }
%class.SkAlignedSTStorage = type { [64 x i8] }
%class.SkTArray.192 = type { %"struct.GrGpu::SubmittedProc"*, i64 }
%"struct.GrGpu::SubmittedProc" = type { void (i8*, i1)*, i8* }
%class.sk_sp.193 = type { %struct.GrVkInterface* }
%struct.GrVkInterface = type { %class.SkRefCnt.base, %"struct.GrVkInterface::Functions" }
%"struct.GrVkInterface::Functions" = type { %"class.GrVkInterface::VkPtr", %"class.GrVkInterface::VkPtr.194", %"class.GrVkInterface::VkPtr.195", %"class.GrVkInterface::VkPtr.196", %"class.GrVkInterface::VkPtr.197", %"class.GrVkInterface::VkPtr.198", %"class.GrVkInterface::VkPtr.199", %"class.GrVkInterface::VkPtr.200", %"class.GrVkInterface::VkPtr.201", %"class.GrVkInterface::VkPtr.202", %"class.GrVkInterface::VkPtr.203", %"class.GrVkInterface::VkPtr.204", %"class.GrVkInterface::VkPtr.205", %"class.GrVkInterface::VkPtr.206", %"class.GrVkInterface::VkPtr.207", %"class.GrVkInterface::VkPtr.208", %"class.GrVkInterface::VkPtr.209", %"class.GrVkInterface::VkPtr.210", %"class.GrVkInterface::VkPtr.211", %"class.GrVkInterface::VkPtr.212", %"class.GrVkInterface::VkPtr.213", %"class.GrVkInterface::VkPtr.214", %"class.GrVkInterface::VkPtr.215", %"class.GrVkInterface::VkPtr.216", %"class.GrVkInterface::VkPtr.216", %"class.GrVkInterface::VkPtr.217", %"class.GrVkInterface::VkPtr.218", %"class.GrVkInterface::VkPtr.219", %"class.GrVkInterface::VkPtr.220", %"class.GrVkInterface::VkPtr.221", %"class.GrVkInterface::VkPtr.222", %"class.GrVkInterface::VkPtr.223", %"class.GrVkInterface::VkPtr.224", %"class.GrVkInterface::VkPtr.225", %"class.GrVkInterface::VkPtr.226", %"class.GrVkInterface::VkPtr.227", %"class.GrVkInterface::VkPtr.228", %"class.GrVkInterface::VkPtr.229", %"class.GrVkInterface::VkPtr.230", %"class.GrVkInterface::VkPtr.231", %"class.GrVkInterface::VkPtr.232", %"class.GrVkInterface::VkPtr.233", %"class.GrVkInterface::VkPtr.234", %"class.GrVkInterface::VkPtr.234", %"class.GrVkInterface::VkPtr.234", %"class.GrVkInterface::VkPtr.235", %"class.GrVkInterface::VkPtr.236", %"class.GrVkInterface::VkPtr.237", %"class.GrVkInterface::VkPtr.238", %"class.GrVkInterface::VkPtr.239", %"class.GrVkInterface::VkPtr.240", %"class.GrVkInterface::VkPtr.241", %"class.GrVkInterface::VkPtr.242", %"class.GrVkInterface::VkPtr.243", %"class.GrVkInterface::VkPtr.244", %"class.GrVkInterface::VkPtr.245", %"class.GrVkInterface::VkPtr.246", %"class.GrVkInterface::VkPtr.247", %"class.GrVkInterface::VkPtr.248", %"class.GrVkInterface::VkPtr.249", %"class.GrVkInterface::VkPtr.250", %"class.GrVkInterface::VkPtr.251", %"class.GrVkInterface::VkPtr.252", %"class.GrVkInterface::VkPtr.253", %"class.GrVkInterface::VkPtr.254", %"class.GrVkInterface::VkPtr.255", %"class.GrVkInterface::VkPtr.256", %"class.GrVkInterface::VkPtr.257", %"class.GrVkInterface::VkPtr.258", %"class.GrVkInterface::VkPtr.259", %"class.GrVkInterface::VkPtr.260", %"class.GrVkInterface::VkPtr.261", %"class.GrVkInterface::VkPtr.262", %"class.GrVkInterface::VkPtr.263", %"class.GrVkInterface::VkPtr.264", %"class.GrVkInterface::VkPtr.265", %"class.GrVkInterface::VkPtr.266", %"class.GrVkInterface::VkPtr.267", %"class.GrVkInterface::VkPtr.268", %"class.GrVkInterface::VkPtr.269", %"class.GrVkInterface::VkPtr.270", %"class.GrVkInterface::VkPtr.271", %"class.GrVkInterface::VkPtr.272", %"class.GrVkInterface::VkPtr.273", %"class.GrVkInterface::VkPtr.274", %"class.GrVkInterface::VkPtr.275", %"class.GrVkInterface::VkPtr.276", %"class.GrVkInterface::VkPtr.277", %"class.GrVkInterface::VkPtr.278", %"class.GrVkInterface::VkPtr.279", %"class.GrVkInterface::VkPtr.280", %"class.GrVkInterface::VkPtr.281", %"class.GrVkInterface::VkPtr.282", %"class.GrVkInterface::VkPtr.283", %"class.GrVkInterface::VkPtr.284", %"class.GrVkInterface::VkPtr.285", %"class.GrVkInterface::VkPtr.286", %"class.GrVkInterface::VkPtr.287", %"class.GrVkInterface::VkPtr.288", %"class.GrVkInterface::VkPtr.288", %"class.GrVkInterface::VkPtr.288", %"class.GrVkInterface::VkPtr.289", %"class.GrVkInterface::VkPtr.290", %"class.GrVkInterface::VkPtr.291", %"class.GrVkInterface::VkPtr.292", %"class.GrVkInterface::VkPtr.293", %"class.GrVkInterface::VkPtr.294", %"class.GrVkInterface::VkPtr.294", %"class.GrVkInterface::VkPtr.295", %"class.GrVkInterface::VkPtr.296", %"class.GrVkInterface::VkPtr.297", %"class.GrVkInterface::VkPtr.298", %"class.GrVkInterface::VkPtr.299", %"class.GrVkInterface::VkPtr.300", %"class.GrVkInterface::VkPtr.301", %"class.GrVkInterface::VkPtr.302", %"class.GrVkInterface::VkPtr.303", %"class.GrVkInterface::VkPtr.304", %"class.GrVkInterface::VkPtr.305", %"class.GrVkInterface::VkPtr.306", %"class.GrVkInterface::VkPtr.307", %"class.GrVkInterface::VkPtr.308", %"class.GrVkInterface::VkPtr.308", %"class.GrVkInterface::VkPtr.309", %"class.GrVkInterface::VkPtr.310", %"class.GrVkInterface::VkPtr.311", %"class.GrVkInterface::VkPtr.312", %"class.GrVkInterface::VkPtr.311", %"class.GrVkInterface::VkPtr.313", %"class.GrVkInterface::VkPtr.314", %"class.GrVkInterface::VkPtr.315", %"class.GrVkInterface::VkPtr.316", %"class.GrVkInterface::VkPtr.317", %"class.GrVkInterface::VkPtr.318", %"class.GrVkInterface::VkPtr.319", %"class.GrVkInterface::VkPtr.320", %"class.GrVkInterface::VkPtr.321", %"class.GrVkInterface::VkPtr.322", %"class.GrVkInterface::VkPtr.323", %"class.GrVkInterface::VkPtr.324", %"class.GrVkInterface::VkPtr.325", %"class.GrVkInterface::VkPtr.326", %"class.GrVkInterface::VkPtr.327", %"class.GrVkInterface::VkPtr.328", %"class.GrVkInterface::VkPtr.329", %"class.GrVkInterface::VkPtr.330", %"class.GrVkInterface::VkPtr.331", %"class.GrVkInterface::VkPtr.332", %"class.GrVkInterface::VkPtr.333", %"class.GrVkInterface::VkPtr.334", %"class.GrVkInterface::VkPtr.335", %"class.GrVkInterface::VkPtr.336" }
%"class.GrVkInterface::VkPtr" = type { i32 (%struct.VkInstanceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkInstance_T**)* }
%struct.VkInstanceCreateInfo = type { i32, i8*, i32, %struct.VkApplicationInfo*, i32, i8**, i32, i8** }
%struct.VkApplicationInfo = type { i32, i8*, i8*, i32, i8*, i32, i32 }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%struct.VkInstance_T = type opaque
%"class.GrVkInterface::VkPtr.194" = type { void (%struct.VkInstance_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.195" = type { i32 (%struct.VkInstance_T*, i32*, %struct.VkPhysicalDevice_T**)* }
%"class.GrVkInterface::VkPtr.196" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures*)* }
%struct.VkPhysicalDeviceFeatures = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.197" = type { void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties*)* }
%struct.VkFormatProperties = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.198" = type { i32 (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, %struct.VkImageFormatProperties*)* }
%struct.VkImageFormatProperties = type { %struct.VkExtent3D, i32, i32, i32, i64 }
%struct.VkExtent3D = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.199" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties*)* }
%"class.GrVkInterface::VkPtr.200" = type { void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties*)* }
%struct.VkQueueFamilyProperties = type { i32, i32, i32, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.201" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties*)* }
%"class.GrVkInterface::VkPtr.202" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkDeviceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDevice_T**)* }
%struct.VkDeviceCreateInfo = type { i32, i8*, i32, i32, %struct.VkDeviceQueueCreateInfo*, i32, i8**, i32, i8**, %struct.VkPhysicalDeviceFeatures* }
%struct.VkDeviceQueueCreateInfo = type { i32, i8*, i32, i32, i32, float* }
%"class.GrVkInterface::VkPtr.203" = type { void (%struct.VkDevice_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.204" = type { i32 (i8*, i32*, %struct.VkExtensionProperties*)* }
%struct.VkExtensionProperties = type { [256 x i8], i32 }
%"class.GrVkInterface::VkPtr.205" = type { i32 (%struct.VkPhysicalDevice_T*, i8*, i32*, %struct.VkExtensionProperties*)* }
%"class.GrVkInterface::VkPtr.206" = type { i32 (i32*, %struct.VkLayerProperties*)* }
%struct.VkLayerProperties = type { [256 x i8], i32, i32, [256 x i8] }
%"class.GrVkInterface::VkPtr.207" = type { i32 (%struct.VkPhysicalDevice_T*, i32*, %struct.VkLayerProperties*)* }
%"class.GrVkInterface::VkPtr.208" = type { void (%struct.VkDevice_T*, i32, i32, %struct.VkQueue_T**)* }
%"class.GrVkInterface::VkPtr.209" = type { i32 (%struct.VkQueue_T*, i32, %struct.VkSubmitInfo*, %struct.VkFence_T*)* }
%struct.VkSubmitInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32*, i32, %struct.VkCommandBuffer_T**, i32, %struct.VkSemaphore_T** }
%struct.VkCommandBuffer_T = type opaque
%struct.VkSemaphore_T = type opaque
%struct.VkFence_T = type opaque
%"class.GrVkInterface::VkPtr.210" = type { i32 (%struct.VkQueue_T*)* }
%"class.GrVkInterface::VkPtr.211" = type { i32 (%struct.VkDevice_T*)* }
%"class.GrVkInterface::VkPtr.212" = type { i32 (%struct.VkDevice_T*, %struct.VkMemoryAllocateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDeviceMemory_T**)* }
%struct.VkMemoryAllocateInfo = type { i32, i8*, i64, i32 }
%struct.VkDeviceMemory_T = type opaque
%"class.GrVkInterface::VkPtr.213" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.214" = type { i32 (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64, i64, i32, i8**)* }
%"class.GrVkInterface::VkPtr.215" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*)* }
%"class.GrVkInterface::VkPtr.216" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkMappedMemoryRange*)* }
%struct.VkMappedMemoryRange = type { i32, i8*, %struct.VkDeviceMemory_T*, i64, i64 }
%"class.GrVkInterface::VkPtr.217" = type { void (%struct.VkDevice_T*, %struct.VkDeviceMemory_T*, i64*)* }
%"class.GrVkInterface::VkPtr.218" = type { i32 (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64)* }
%struct.VkBuffer_T = type opaque
%"class.GrVkInterface::VkPtr.219" = type { i32 (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64)* }
%struct.VkImage_T = type opaque
%"class.GrVkInterface::VkPtr.220" = type { void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkMemoryRequirements*)* }
%struct.VkMemoryRequirements = type { i64, i64, i32 }
%"class.GrVkInterface::VkPtr.221" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkMemoryRequirements*)* }
%"class.GrVkInterface::VkPtr.222" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, i32*, %struct.VkSparseImageMemoryRequirements*)* }
%struct.VkSparseImageMemoryRequirements = type { %struct.VkSparseImageFormatProperties, i32, i64, i64, i64 }
%struct.VkSparseImageFormatProperties = type { i32, %struct.VkExtent3D, i32 }
%"class.GrVkInterface::VkPtr.223" = type { void (%struct.VkPhysicalDevice_T*, i32, i32, i32, i32, i32, i32*, %struct.VkSparseImageFormatProperties*)* }
%"class.GrVkInterface::VkPtr.224" = type { i32 (%struct.VkQueue_T*, i32, %struct.VkBindSparseInfo*, %struct.VkFence_T*)* }
%struct.VkBindSparseInfo = type { i32, i8*, i32, %struct.VkSemaphore_T**, i32, %struct.VkSparseBufferMemoryBindInfo*, i32, %struct.VkSparseImageOpaqueMemoryBindInfo*, i32, %struct.VkSparseImageMemoryBindInfo*, i32, %struct.VkSemaphore_T** }
%struct.VkSparseBufferMemoryBindInfo = type { %struct.VkBuffer_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseMemoryBind = type { i64, i64, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkSparseImageOpaqueMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseMemoryBind* }
%struct.VkSparseImageMemoryBindInfo = type { %struct.VkImage_T*, i32, %struct.VkSparseImageMemoryBind* }
%struct.VkSparseImageMemoryBind = type { %struct.VkImageSubresource, %struct.VkOffset3D, %struct.VkExtent3D, %struct.VkDeviceMemory_T*, i64, i32 }
%struct.VkImageSubresource = type { i32, i32, i32 }
%struct.VkOffset3D = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.225" = type { i32 (%struct.VkDevice_T*, %struct.VkFenceCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFence_T**)* }
%struct.VkFenceCreateInfo = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.226" = type { void (%struct.VkDevice_T*, %struct.VkFence_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.227" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**)* }
%"class.GrVkInterface::VkPtr.228" = type { i32 (%struct.VkDevice_T*, %struct.VkFence_T*)* }
%"class.GrVkInterface::VkPtr.229" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkFence_T**, i32, i64)* }
%"class.GrVkInterface::VkPtr.230" = type { i32 (%struct.VkDevice_T*, %struct.VkSemaphoreCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSemaphore_T**)* }
%struct.VkSemaphoreCreateInfo = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.231" = type { void (%struct.VkDevice_T*, %struct.VkSemaphore_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.232" = type { i32 (%struct.VkDevice_T*, %struct.VkEventCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkEvent_T**)* }
%struct.VkEventCreateInfo = type { i32, i8*, i32 }
%struct.VkEvent_T = type opaque
%"class.GrVkInterface::VkPtr.233" = type { void (%struct.VkDevice_T*, %struct.VkEvent_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.234" = type { i32 (%struct.VkDevice_T*, %struct.VkEvent_T*)* }
%"class.GrVkInterface::VkPtr.235" = type { i32 (%struct.VkDevice_T*, %struct.VkQueryPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkQueryPool_T**)* }
%struct.VkQueryPoolCreateInfo = type { i32, i8*, i32, i32, i32, i32 }
%struct.VkQueryPool_T = type opaque
%"class.GrVkInterface::VkPtr.236" = type { void (%struct.VkDevice_T*, %struct.VkQueryPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.237" = type { i32 (%struct.VkDevice_T*, %struct.VkQueryPool_T*, i32, i32, i64, i8*, i64, i32)* }
%"class.GrVkInterface::VkPtr.238" = type { i32 (%struct.VkDevice_T*, %struct.VkBufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBuffer_T**)* }
%struct.VkBufferCreateInfo = type { i32, i8*, i32, i64, i32, i32, i32, i32* }
%"class.GrVkInterface::VkPtr.239" = type { void (%struct.VkDevice_T*, %struct.VkBuffer_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.240" = type { i32 (%struct.VkDevice_T*, %struct.VkBufferViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkBufferView_T**)* }
%struct.VkBufferViewCreateInfo = type { i32, i8*, i32, %struct.VkBuffer_T*, i32, i64, i64 }
%struct.VkBufferView_T = type opaque
%"class.GrVkInterface::VkPtr.241" = type { void (%struct.VkDevice_T*, %struct.VkBufferView_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.242" = type { i32 (%struct.VkDevice_T*, %struct.VkImageCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImage_T**)* }
%struct.VkImageCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkExtent3D, i32, i32, i32, i32, i32, i32, i32, i32*, i32 }
%"class.GrVkInterface::VkPtr.243" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.244" = type { void (%struct.VkDevice_T*, %struct.VkImage_T*, %struct.VkImageSubresource*, %struct.VkSubresourceLayout*)* }
%struct.VkSubresourceLayout = type { i64, i64, i64, i64, i64 }
%"class.GrVkInterface::VkPtr.245" = type { i32 (%struct.VkDevice_T*, %struct.VkImageViewCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkImageView_T**)* }
%struct.VkImageViewCreateInfo = type { i32, i8*, i32, %struct.VkImage_T*, i32, i32, %struct.VkComponentMapping, %struct.VkImageSubresourceRange }
%struct.VkComponentMapping = type { i32, i32, i32, i32 }
%struct.VkImageSubresourceRange = type { i32, i32, i32, i32, i32 }
%struct.VkImageView_T = type opaque
%"class.GrVkInterface::VkPtr.246" = type { void (%struct.VkDevice_T*, %struct.VkImageView_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.247" = type { i32 (%struct.VkDevice_T*, %struct.VkShaderModuleCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkShaderModule_T**)* }
%struct.VkShaderModuleCreateInfo = type { i32, i8*, i32, i64, i32* }
%struct.VkShaderModule_T = type opaque
%"class.GrVkInterface::VkPtr.248" = type { void (%struct.VkDevice_T*, %struct.VkShaderModule_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.249" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCacheCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineCache_T**)* }
%struct.VkPipelineCacheCreateInfo = type { i32, i8*, i32, i64, i8* }
%struct.VkPipelineCache_T = type opaque
%"class.GrVkInterface::VkPtr.250" = type { void (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.251" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i64*, i8*)* }
%"class.GrVkInterface::VkPtr.252" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkPipelineCache_T**)* }
%"class.GrVkInterface::VkPtr.253" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkGraphicsPipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)* }
%struct.VkGraphicsPipelineCreateInfo = type { i32, i8*, i32, i32, %struct.VkPipelineShaderStageCreateInfo*, %struct.VkPipelineVertexInputStateCreateInfo*, %struct.VkPipelineInputAssemblyStateCreateInfo*, %struct.VkPipelineTessellationStateCreateInfo*, %struct.VkPipelineViewportStateCreateInfo*, %struct.VkPipelineRasterizationStateCreateInfo*, %struct.VkPipelineMultisampleStateCreateInfo*, %struct.VkPipelineDepthStencilStateCreateInfo*, %struct.VkPipelineColorBlendStateCreateInfo*, %struct.VkPipelineDynamicStateCreateInfo*, %struct.VkPipelineLayout_T*, %struct.VkRenderPass_T*, i32, %struct.VkPipeline_T*, i32 }
%struct.VkPipelineShaderStageCreateInfo = type { i32, i8*, i32, i32, %struct.VkShaderModule_T*, i8*, %struct.VkSpecializationInfo* }
%struct.VkSpecializationInfo = type { i32, %struct.VkSpecializationMapEntry*, i64, i8* }
%struct.VkSpecializationMapEntry = type { i32, i32, i64 }
%struct.VkPipelineVertexInputStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkVertexInputBindingDescription*, i32, %struct.VkVertexInputAttributeDescription* }
%struct.VkVertexInputBindingDescription = type { i32, i32, i32 }
%struct.VkVertexInputAttributeDescription = type { i32, i32, i32, i32 }
%struct.VkPipelineInputAssemblyStateCreateInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkPipelineTessellationStateCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkPipelineViewportStateCreateInfo = type { i32, i8*, i32, i32, %struct.VkViewport*, i32, %struct.VkRect2D* }
%struct.VkViewport = type { float, float, float, float, float, float }
%struct.VkRect2D = type { %struct.VkOffset2D, %struct.VkExtent2D }
%struct.VkOffset2D = type { i32, i32 }
%struct.VkPipelineRasterizationStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, float, float, float }
%struct.VkPipelineMultisampleStateCreateInfo = type { i32, i8*, i32, i32, i32, float, i32*, i32, i32 }
%struct.VkPipelineDepthStencilStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkStencilOpState, %struct.VkStencilOpState, float, float }
%struct.VkStencilOpState = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineColorBlendStateCreateInfo = type { i32, i8*, i32, i32, i32, i32, %struct.VkPipelineColorBlendAttachmentState*, [4 x float] }
%struct.VkPipelineColorBlendAttachmentState = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkPipelineDynamicStateCreateInfo = type { i32, i8*, i32, i32, i32* }
%struct.VkPipelineLayout_T = type opaque
%struct.VkPipeline_T = type opaque
%"class.GrVkInterface::VkPtr.254" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineCache_T*, i32, %struct.VkComputePipelineCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipeline_T**)* }
%struct.VkComputePipelineCreateInfo = type { i32, i8*, i32, %struct.VkPipelineShaderStageCreateInfo, %struct.VkPipelineLayout_T*, %struct.VkPipeline_T*, i32 }
%"class.GrVkInterface::VkPtr.255" = type { void (%struct.VkDevice_T*, %struct.VkPipeline_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.256" = type { i32 (%struct.VkDevice_T*, %struct.VkPipelineLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkPipelineLayout_T**)* }
%struct.VkPipelineLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayout_T**, i32, %struct.VkPushConstantRange* }
%struct.VkDescriptorSetLayout_T = type opaque
%struct.VkPushConstantRange = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.257" = type { void (%struct.VkDevice_T*, %struct.VkPipelineLayout_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.258" = type { i32 (%struct.VkDevice_T*, %struct.VkSamplerCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSampler_T**)* }
%struct.VkSamplerCreateInfo = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, float, i32, float, i32, i32, float, float, i32, i32 }
%struct.VkSampler_T = type opaque
%"class.GrVkInterface::VkPtr.259" = type { void (%struct.VkDevice_T*, %struct.VkSampler_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.260" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorSetLayout_T**)* }
%struct.VkDescriptorSetLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayoutBinding* }
%struct.VkDescriptorSetLayoutBinding = type { i32, i32, i32, i32, %struct.VkSampler_T** }
%"class.GrVkInterface::VkPtr.261" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayout_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.262" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkDescriptorPool_T**)* }
%struct.VkDescriptorPoolCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkDescriptorPoolSize* }
%struct.VkDescriptorPoolSize = type { i32, i32 }
%struct.VkDescriptorPool_T = type opaque
%"class.GrVkInterface::VkPtr.263" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.264" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.265" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorSetAllocateInfo*, %struct.VkDescriptorSet_T**)* }
%struct.VkDescriptorSetAllocateInfo = type { i32, i8*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSetLayout_T** }
%struct.VkDescriptorSet_T = type opaque
%"class.GrVkInterface::VkPtr.266" = type { i32 (%struct.VkDevice_T*, %struct.VkDescriptorPool_T*, i32, %struct.VkDescriptorSet_T**)* }
%"class.GrVkInterface::VkPtr.267" = type { void (%struct.VkDevice_T*, i32, %struct.VkWriteDescriptorSet*, i32, %struct.VkCopyDescriptorSet*)* }
%struct.VkWriteDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, i32, i32, %struct.VkDescriptorImageInfo*, %struct.VkDescriptorBufferInfo*, %struct.VkBufferView_T** }
%struct.VkDescriptorImageInfo = type { %struct.VkSampler_T*, %struct.VkImageView_T*, i32 }
%struct.VkDescriptorBufferInfo = type { %struct.VkBuffer_T*, i64, i64 }
%struct.VkCopyDescriptorSet = type { i32, i8*, %struct.VkDescriptorSet_T*, i32, i32, %struct.VkDescriptorSet_T*, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.268" = type { i32 (%struct.VkDevice_T*, %struct.VkFramebufferCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkFramebuffer_T**)* }
%struct.VkFramebufferCreateInfo = type { i32, i8*, i32, %struct.VkRenderPass_T*, i32, %struct.VkImageView_T**, i32, i32, i32 }
%struct.VkFramebuffer_T = type opaque
%"class.GrVkInterface::VkPtr.269" = type { void (%struct.VkDevice_T*, %struct.VkFramebuffer_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.270" = type { i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)* }
%struct.VkRenderPassCreateInfo = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription*, i32, %struct.VkSubpassDescription*, i32, %struct.VkSubpassDependency* }
%struct.VkAttachmentDescription = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription = type { i32, i32, i32, %struct.VkAttachmentReference*, i32, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, i32, i32* }
%struct.VkAttachmentReference = type { i32, i32 }
%struct.VkSubpassDependency = type { i32, i32, i32, i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.271" = type { void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.272" = type { void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkExtent2D*)* }
%"class.GrVkInterface::VkPtr.273" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandPoolCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkCommandPool_T**)* }
%struct.VkCommandPoolCreateInfo = type { i32, i8*, i32, i32 }
%struct.VkCommandPool_T = type opaque
%"class.GrVkInterface::VkPtr.274" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, %struct.VkAllocationCallbacks*)* }
%"class.GrVkInterface::VkPtr.275" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.276" = type { i32 (%struct.VkDevice_T*, %struct.VkCommandBufferAllocateInfo*, %struct.VkCommandBuffer_T**)* }
%struct.VkCommandBufferAllocateInfo = type { i32, i8*, %struct.VkCommandPool_T*, i32, i32 }
%"class.GrVkInterface::VkPtr.277" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32, %struct.VkCommandBuffer_T**)* }
%"class.GrVkInterface::VkPtr.278" = type { i32 (%struct.VkCommandBuffer_T*, %struct.VkCommandBufferBeginInfo*)* }
%struct.VkCommandBufferBeginInfo = type { i32, i8*, i32, %struct.VkCommandBufferInheritanceInfo* }
%struct.VkCommandBufferInheritanceInfo = type { i32, i8*, %struct.VkRenderPass_T*, i32, %struct.VkFramebuffer_T*, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.279" = type { i32 (%struct.VkCommandBuffer_T*)* }
%"class.GrVkInterface::VkPtr.280" = type { i32 (%struct.VkCommandBuffer_T*, i32)* }
%"class.GrVkInterface::VkPtr.281" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipeline_T*)* }
%"class.GrVkInterface::VkPtr.282" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkViewport*)* }
%"class.GrVkInterface::VkPtr.283" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkRect2D*)* }
%"class.GrVkInterface::VkPtr.284" = type { void (%struct.VkCommandBuffer_T*, float)* }
%"class.GrVkInterface::VkPtr.285" = type { void (%struct.VkCommandBuffer_T*, float, float, float)* }
%"class.GrVkInterface::VkPtr.286" = type { void (%struct.VkCommandBuffer_T*, float*)* }
%"class.GrVkInterface::VkPtr.287" = type { void (%struct.VkCommandBuffer_T*, float, float)* }
%"class.GrVkInterface::VkPtr.288" = type { void (%struct.VkCommandBuffer_T*, i32, i32)* }
%"class.GrVkInterface::VkPtr.289" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkPipelineLayout_T*, i32, i32, %struct.VkDescriptorSet_T**, i32, i32*)* }
%"class.GrVkInterface::VkPtr.290" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32)* }
%"class.GrVkInterface::VkPtr.291" = type { void (%struct.VkCommandBuffer_T*, i32, i32, %struct.VkBuffer_T**, i64*)* }
%"class.GrVkInterface::VkPtr.292" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.293" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.294" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i32, i32)* }
%"class.GrVkInterface::VkPtr.295" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32)* }
%"class.GrVkInterface::VkPtr.296" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64)* }
%"class.GrVkInterface::VkPtr.297" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkBuffer_T*, i32, %struct.VkBufferCopy*)* }
%struct.VkBufferCopy = type { i64, i64, i64 }
%"class.GrVkInterface::VkPtr.298" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageCopy*)* }
%struct.VkImageCopy = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%struct.VkImageSubresourceLayers = type { i32, i32, i32, i32 }
%"class.GrVkInterface::VkPtr.299" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageBlit*, i32)* }
%struct.VkImageBlit = type { %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D], %struct.VkImageSubresourceLayers, [2 x %struct.VkOffset3D] }
%"class.GrVkInterface::VkPtr.300" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, %struct.VkImage_T*, i32, i32, %struct.VkBufferImageCopy*)* }
%struct.VkBufferImageCopy = type { i64, i32, i32, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.301" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkBuffer_T*, i32, %struct.VkBufferImageCopy*)* }
%"class.GrVkInterface::VkPtr.302" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i8*)* }
%"class.GrVkInterface::VkPtr.303" = type { void (%struct.VkCommandBuffer_T*, %struct.VkBuffer_T*, i64, i64, i32)* }
%"class.GrVkInterface::VkPtr.304" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %union.VkClearColorValue*, i32, %struct.VkImageSubresourceRange*)* }
%union.VkClearColorValue = type { [4 x float] }
%"class.GrVkInterface::VkPtr.305" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkClearDepthStencilValue*, i32, %struct.VkImageSubresourceRange*)* }
%struct.VkClearDepthStencilValue = type { float, i32 }
%"class.GrVkInterface::VkPtr.306" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkClearAttachment*, i32, %struct.VkClearRect*)* }
%struct.VkClearAttachment = type { i32, i32, %union.VkClearValue }
%union.VkClearValue = type { %union.VkClearColorValue }
%struct.VkClearRect = type { %struct.VkRect2D, i32, i32 }
%"class.GrVkInterface::VkPtr.307" = type { void (%struct.VkCommandBuffer_T*, %struct.VkImage_T*, i32, %struct.VkImage_T*, i32, i32, %struct.VkImageResolve*)* }
%struct.VkImageResolve = type { %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkImageSubresourceLayers, %struct.VkOffset3D, %struct.VkExtent3D }
%"class.GrVkInterface::VkPtr.308" = type { void (%struct.VkCommandBuffer_T*, %struct.VkEvent_T*, i32)* }
%"class.GrVkInterface::VkPtr.309" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkEvent_T**, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)* }
%struct.VkMemoryBarrier = type { i32, i8*, i32, i32 }
%struct.VkBufferMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, %struct.VkBuffer_T*, i64, i64 }
%struct.VkImageMemoryBarrier = type { i32, i8*, i32, i32, i32, i32, i32, i32, %struct.VkImage_T*, %struct.VkImageSubresourceRange }
%"class.GrVkInterface::VkPtr.310" = type { void (%struct.VkCommandBuffer_T*, i32, i32, i32, i32, %struct.VkMemoryBarrier*, i32, %struct.VkBufferMemoryBarrier*, i32, %struct.VkImageMemoryBarrier*)* }
%"class.GrVkInterface::VkPtr.312" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.311" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32)* }
%"class.GrVkInterface::VkPtr.313" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkQueryPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.314" = type { void (%struct.VkCommandBuffer_T*, %struct.VkQueryPool_T*, i32, i32, %struct.VkBuffer_T*, i64, i64, i32)* }
%"class.GrVkInterface::VkPtr.315" = type { void (%struct.VkCommandBuffer_T*, %struct.VkPipelineLayout_T*, i32, i32, i32, i8*)* }
%"class.GrVkInterface::VkPtr.316" = type { void (%struct.VkCommandBuffer_T*, %struct.VkRenderPassBeginInfo*, i32)* }
%struct.VkRenderPassBeginInfo = type { i32, i8*, %struct.VkRenderPass_T*, %struct.VkFramebuffer_T*, %struct.VkRect2D, i32, %union.VkClearValue* }
%"class.GrVkInterface::VkPtr.317" = type { void (%struct.VkCommandBuffer_T*, i32)* }
%"class.GrVkInterface::VkPtr.318" = type { void (%struct.VkCommandBuffer_T*)* }
%"class.GrVkInterface::VkPtr.319" = type { void (%struct.VkCommandBuffer_T*, i32, %struct.VkCommandBuffer_T**)* }
%"class.GrVkInterface::VkPtr.320" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceFeatures2*)* }
%struct.VkPhysicalDeviceFeatures2 = type { i32, i8*, %struct.VkPhysicalDeviceFeatures }
%"class.GrVkInterface::VkPtr.321" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceProperties2*)* }
%struct.VkPhysicalDeviceProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceProperties }
%"class.GrVkInterface::VkPtr.322" = type { void (%struct.VkPhysicalDevice_T*, i32, %struct.VkFormatProperties2*)* }
%struct.VkFormatProperties2 = type { i32, i8*, %struct.VkFormatProperties }
%"class.GrVkInterface::VkPtr.323" = type { i32 (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceImageFormatInfo2*, %struct.VkImageFormatProperties2*)* }
%struct.VkPhysicalDeviceImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkImageFormatProperties2 = type { i32, i8*, %struct.VkImageFormatProperties }
%"class.GrVkInterface::VkPtr.324" = type { void (%struct.VkPhysicalDevice_T*, i32*, %struct.VkQueueFamilyProperties2*)* }
%struct.VkQueueFamilyProperties2 = type { i32, i8*, %struct.VkQueueFamilyProperties }
%"class.GrVkInterface::VkPtr.325" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceMemoryProperties2*)* }
%struct.VkPhysicalDeviceMemoryProperties2 = type { i32, i8*, %struct.VkPhysicalDeviceMemoryProperties }
%"class.GrVkInterface::VkPtr.326" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceSparseImageFormatInfo2*, i32*, %struct.VkSparseImageFormatProperties2*)* }
%struct.VkPhysicalDeviceSparseImageFormatInfo2 = type { i32, i8*, i32, i32, i32, i32, i32 }
%struct.VkSparseImageFormatProperties2 = type { i32, i8*, %struct.VkSparseImageFormatProperties }
%"class.GrVkInterface::VkPtr.327" = type { void (%struct.VkDevice_T*, %struct.VkImageMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* }
%struct.VkImageMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkMemoryRequirements2 = type { i32, i8*, %struct.VkMemoryRequirements }
%"class.GrVkInterface::VkPtr.328" = type { void (%struct.VkDevice_T*, %struct.VkBufferMemoryRequirementsInfo2*, %struct.VkMemoryRequirements2*)* }
%struct.VkBufferMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkBuffer_T* }
%"class.GrVkInterface::VkPtr.329" = type { void (%struct.VkDevice_T*, %struct.VkImageSparseMemoryRequirementsInfo2*, i32*, %struct.VkSparseImageMemoryRequirements2*)* }
%struct.VkImageSparseMemoryRequirementsInfo2 = type { i32, i8*, %struct.VkImage_T* }
%struct.VkSparseImageMemoryRequirements2 = type { i32, i8*, %struct.VkSparseImageMemoryRequirements }
%"class.GrVkInterface::VkPtr.330" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkBindBufferMemoryInfo*)* }
%struct.VkBindBufferMemoryInfo = type { i32, i8*, %struct.VkBuffer_T*, %struct.VkDeviceMemory_T*, i64 }
%"class.GrVkInterface::VkPtr.331" = type { i32 (%struct.VkDevice_T*, i32, %struct.VkBindImageMemoryInfo*)* }
%struct.VkBindImageMemoryInfo = type { i32, i8*, %struct.VkImage_T*, %struct.VkDeviceMemory_T*, i64 }
%"class.GrVkInterface::VkPtr.332" = type { void (%struct.VkDevice_T*, %struct.VkCommandPool_T*, i32)* }
%"class.GrVkInterface::VkPtr.333" = type { void (%struct.VkDevice_T*, %struct.VkDescriptorSetLayoutCreateInfo*, %struct.VkDescriptorSetLayoutSupport*)* }
%struct.VkDescriptorSetLayoutSupport = type { i32, i8*, i32 }
%"class.GrVkInterface::VkPtr.334" = type { void (%struct.VkPhysicalDevice_T*, %struct.VkPhysicalDeviceExternalBufferInfo*, %struct.VkExternalBufferProperties*)* }
%struct.VkPhysicalDeviceExternalBufferInfo = type { i32, i8*, i32, i32, i32 }
%struct.VkExternalBufferProperties = type { i32, i8*, %struct.VkExternalMemoryProperties }
%struct.VkExternalMemoryProperties = type { i32, i32, i32 }
%"class.GrVkInterface::VkPtr.335" = type { i32 (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversionCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkSamplerYcbcrConversion_T**)* }
%struct.VkSamplerYcbcrConversionCreateInfo = type { i32, i8*, i32, i32, i32, %struct.VkComponentMapping, i32, i32, i32, i32 }
%struct.VkSamplerYcbcrConversion_T = type opaque
%"class.GrVkInterface::VkPtr.336" = type { void (%struct.VkDevice_T*, %struct.VkSamplerYcbcrConversion_T*, %struct.VkAllocationCallbacks*)* }
%class.sk_sp.337 = type { %class.GrVkMemoryAllocator* }
%class.GrVkMemoryAllocator = type { %class.SkRefCnt.base, [4 x i8] }
%class.sk_sp.338 = type { %class.GrVkCaps* }
%class.GrVkCaps = type <{ %class.GrCaps.base, i8, [22 x %"struct.GrVkCaps::FormatInfo"], [31 x i32], i32, %class.SkSTArray.346, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8, i8, [2 x i8], i32, [4 x i8] }>
%class.GrCaps.base = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.1, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8 }>
%"struct.GrVkCaps::FormatInfo" = type <{ i16, i16, [4 x i8], %class.SkTDArray.339, %"class.std::__1::unique_ptr.340", i32, [4 x i8] }>
%class.SkTDArray.339 = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.340" = type { %"class.std::__1::__compressed_pair.341" }
%"class.std::__1::__compressed_pair.341" = type { %"struct.std::__1::__compressed_pair_elem.342" }
%"struct.std::__1::__compressed_pair_elem.342" = type { %"struct.GrVkCaps::ColorTypeInfo"* }
%"struct.GrVkCaps::ColorTypeInfo" = type { i32, i32, i32, %class.GrSwizzle, %class.GrSwizzle }
%class.GrSwizzle = type { i16 }
%class.SkSTArray.346 = type { %class.SkAlignedSTStorage.347, %class.SkTArray.348 }
%class.SkAlignedSTStorage.347 = type { [48 x i8] }
%class.SkTArray.348 = type { %struct.GrVkYcbcrConversionInfo*, i64 }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%struct.VkPhysicalDevice_T = type opaque
%struct.VkDevice_T = type opaque
%struct.VkQueue_T = type opaque
%class.GrVkResourceProvider = type { %class.GrVkGpu*, %struct.VkPipelineCache_T*, %class.SkTArray.349, %class.SkSTArray.351, %class.SkTArray.357, %class.SkSTArray.358, %class.SkMutex, %class.SkSTArray.358, %class.SkTDynamicHash.361, %class.SkTDynamicHash.370, %class.sk_sp.379, %class.SkSTArray.388, %class.GrResourceHandle, %class.GrResourceHandle }
%class.SkTArray.349 = type { %"struct.GrVkResourceProvider::MSAALoadPipeline"*, i64 }
%"struct.GrVkResourceProvider::MSAALoadPipeline" = type { %class.sk_sp.350, %class.GrVkRenderPass* }
%class.sk_sp.350 = type { %class.GrVkPipeline* }
%class.GrVkPipeline = type opaque
%class.SkSTArray.351 = type { %class.SkAlignedSTStorage.352, %class.SkTArray.353 }
%class.SkAlignedSTStorage.352 = type { [224 x i8] }
%class.SkTArray.353 = type { %"class.GrVkResourceProvider::CompatibleRenderPassSet"*, i64 }
%"class.GrVkResourceProvider::CompatibleRenderPassSet" = type <{ %class.SkSTArray.354, i32, [4 x i8] }>
%class.SkSTArray.354 = type { %class.SkAlignedSTStorage.355, %class.SkTArray.356 }
%class.SkAlignedSTStorage.355 = type { [32 x i8] }
%class.SkTArray.356 = type { %class.GrVkRenderPass**, i64 }
%class.SkTArray.357 = type { %class.GrVkRenderPass**, i64 }
%class.SkSTArray.358 = type { %class.SkAlignedSTStorage.359, %class.SkTArray.360 }
%class.SkAlignedSTStorage.359 = type { [32 x i8] }
%class.SkTArray.360 = type { %class.GrVkCommandPool**, i64 }
%class.SkTDynamicHash.361 = type { %class.SkTHashTable.362 }
%class.SkTHashTable.362 = type { i32, i32, %class.SkAutoTArray.363 }
%class.SkAutoTArray.363 = type { %"class.std::__1::unique_ptr.364" }
%"class.std::__1::unique_ptr.364" = type { %"class.std::__1::__compressed_pair.365" }
%"class.std::__1::__compressed_pair.365" = type { %"struct.std::__1::__compressed_pair_elem.366" }
%"struct.std::__1::__compressed_pair_elem.366" = type { %"struct.SkTHashTable<GrVkSampler *, GrVkSampler::Key, SkTDynamicHash<GrVkSampler, GrVkSampler::Key, GrVkSampler>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrVkSampler *, GrVkSampler::Key, SkTDynamicHash<GrVkSampler, GrVkSampler::Key, GrVkSampler>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.370 = type { %class.SkTHashTable.371 }
%class.SkTHashTable.371 = type { i32, i32, %class.SkAutoTArray.372 }
%class.SkAutoTArray.372 = type { %"class.std::__1::unique_ptr.373" }
%"class.std::__1::unique_ptr.373" = type { %"class.std::__1::__compressed_pair.374" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.375" }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"struct.SkTHashTable<GrVkSamplerYcbcrConversion *, GrVkSamplerYcbcrConversion::Key, SkTDynamicHash<GrVkSamplerYcbcrConversion, GrVkSamplerYcbcrConversion::Key, GrVkSamplerYcbcrConversion>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrVkSamplerYcbcrConversion *, GrVkSamplerYcbcrConversion::Key, SkTDynamicHash<GrVkSamplerYcbcrConversion, GrVkSamplerYcbcrConversion::Key, GrVkSamplerYcbcrConversion>::AdaptedTraits>::Slot" = type opaque
%class.sk_sp.379 = type { %"class.GrVkResourceProvider::PipelineStateCache"* }
%"class.GrVkResourceProvider::PipelineStateCache" = type { %class.GrThreadSafePipelineBuilder.base, %class.SkLRUCache, %class.GrVkGpu* }
%class.GrThreadSafePipelineBuilder.base = type { %class.SkRefCnt.base, %"class.GrThreadSafePipelineBuilder::Stats" }
%"class.GrThreadSafePipelineBuilder::Stats" = type { i8 }
%class.SkLRUCache = type { i32, %class.SkTHashTable.380, %class.SkTInternalLList }
%class.SkTHashTable.380 = type { i32, i32, %class.SkAutoTArray.381 }
%class.SkAutoTArray.381 = type { %"class.std::__1::unique_ptr.382" }
%"class.std::__1::unique_ptr.382" = type { %"class.std::__1::__compressed_pair.383" }
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"struct.SkTHashTable<SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry *, const GrProgramDesc, SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Traits>::Slot"* }
%"struct.SkTHashTable<SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry *, const GrProgramDesc, SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Traits>::Slot" = type opaque
%class.SkTInternalLList = type { %"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry"*, %"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry"* }
%"struct.SkLRUCache<const GrProgramDesc, std::__1::unique_ptr<GrVkResourceProvider::PipelineStateCache::Entry, std::__1::default_delete<GrVkResourceProvider::PipelineStateCache::Entry> >, GrVkResourceProvider::PipelineStateCache::DescHash>::Entry" = type opaque
%class.SkSTArray.388 = type { %class.SkAlignedSTStorage.389, %class.SkTArray.390 }
%class.SkAlignedSTStorage.389 = type { [32 x i8] }
%class.SkTArray.390 = type { %"class.std::__1::unique_ptr.391"*, i64 }
%"class.std::__1::unique_ptr.391" = type { %"class.std::__1::__compressed_pair.392" }
%"class.std::__1::__compressed_pair.392" = type { %"struct.std::__1::__compressed_pair_elem.393" }
%"struct.std::__1::__compressed_pair_elem.393" = type { %class.GrVkDescriptorSetManager* }
%class.GrVkDescriptorSetManager = type { %"struct.GrVkDescriptorSetManager::DescriptorPoolManager", %class.SkTArray.394, %class.SkSTArray.395, %class.SkSTArray.398 }
%"struct.GrVkDescriptorSetManager::DescriptorPoolManager" = type { %struct.VkDescriptorSetLayout_T*, i32, i32, i32, i32, %class.GrVkDescriptorPool* }
%class.GrVkDescriptorPool = type { %class.GrVkManagedResource, i32, i32, %struct.VkDescriptorPool_T* }
%class.SkTArray.394 = type { %class.GrVkDescriptorSet**, i64 }
%class.GrVkDescriptorSet = type <{ %class.GrVkRecycledResource, %struct.VkDescriptorSet_T*, %class.GrVkDescriptorPool*, %class.GrResourceHandle, [4 x i8] }>
%class.GrVkRecycledResource = type { %class.GrRecycledResource.base, %class.GrVkGpu* }
%class.GrRecycledResource.base = type { %class.GrManagedResource.base }
%class.SkSTArray.395 = type { %class.SkAlignedSTStorage.396, %class.SkTArray.397 }
%class.SkAlignedSTStorage.396 = type { [16 x i8] }
%class.SkTArray.397 = type { i32*, i64 }
%class.SkSTArray.398 = type { %class.SkAlignedSTStorage.399, %class.SkTArray.400 }
%class.SkAlignedSTStorage.399 = type { [32 x i8] }
%class.SkTArray.400 = type { %class.GrVkSampler**, i64 }
%class.GrVkSampler = type <{ %class.GrVkManagedResource, %struct.VkSampler_T*, %class.GrVkSamplerYcbcrConversion*, %"struct.GrVkSampler::Key", i32, [4 x i8] }>
%class.GrVkSamplerYcbcrConversion = type { %class.GrVkManagedResource, %struct.VkSamplerYcbcrConversion_T*, %"struct.GrVkSamplerYcbcrConversion::Key" }
%"struct.GrVkSamplerYcbcrConversion::Key" = type <{ i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.GrVkSampler::Key" = type { i8, [7 x i8], %"struct.GrVkSamplerYcbcrConversion::Key" }
%class.GrResourceHandle = type { i32 }
%class.GrStagingBufferManager = type { %"class.std::__1::vector.404", %class.GrGpu* }
%"class.std::__1::vector.404" = type { %"class.std::__1::__vector_base.405" }
%"class.std::__1::__vector_base.405" = type { %"struct.GrStagingBufferManager::StagingBuffer"*, %"struct.GrStagingBufferManager::StagingBuffer"*, %"class.std::__1::__compressed_pair.407" }
%"struct.GrStagingBufferManager::StagingBuffer" = type { %class.sk_sp.406, i8*, i64 }
%class.sk_sp.406 = type { %class.GrGpuBuffer* }
%"class.std::__1::__compressed_pair.407" = type { %"struct.std::__1::__compressed_pair_elem.408" }
%"struct.std::__1::__compressed_pair_elem.408" = type { %"struct.GrStagingBufferManager::StagingBuffer"* }
%class.GrVkMSAALoadManager = type { %struct.VkShaderModule_T*, %struct.VkShaderModule_T*, [2 x %struct.VkPipelineShaderStageCreateInfo], %struct.VkPipelineLayout_T* }
%class.GrVkCommandPool = type opaque
%class.GrVkPrimaryCommandBuffer = type opaque
%class.SkSTArray.412 = type { %class.SkAlignedSTStorage.413, %class.SkTArray.414 }
%class.SkAlignedSTStorage.413 = type { [8 x i8] }
%class.SkTArray.414 = type { %"class.GrVkSemaphore::Resource"**, i64 }
%"class.GrVkSemaphore::Resource" = type <{ %class.GrVkManagedResource, %struct.VkSemaphore_T*, i8, i8, i8, [5 x i8] }>
%class.SkTArray.415 = type { %"class.std::__1::unique_ptr.416"*, i64 }
%"class.std::__1::unique_ptr.416" = type { %"class.std::__1::__compressed_pair.417" }
%"class.std::__1::__compressed_pair.417" = type { %"struct.std::__1::__compressed_pair_elem.418" }
%"struct.std::__1::__compressed_pair_elem.418" = type { %"class.SkDrawable::GpuDrawHandler"* }
%"class.SkDrawable::GpuDrawHandler" = type { i32 (...)** }
%struct.VkPhysicalDeviceProperties = type { i32, i32, i32, i32, i32, [256 x i8], [16 x i8], %struct.VkPhysicalDeviceLimits, %struct.VkPhysicalDeviceSparseProperties }
%struct.VkPhysicalDeviceLimits = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, float, float, i32, [2 x i32], [2 x float], i32, i64, i64, i64, i64, i32, i32, i32, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, [2 x float], [2 x float], float, float, i32, i32, i64, i64, i64 }
%struct.VkPhysicalDeviceSparseProperties = type { i32, i32, i32, i32, i32 }
%struct.VkPhysicalDeviceMemoryProperties = type { i32, [32 x %struct.VkMemoryType], i32, [16 x %struct.VkMemoryHeap] }
%struct.VkMemoryType = type { i32, i32 }
%struct.VkMemoryHeap = type { i64, i32 }
%"class.std::__1::unique_ptr.422" = type { %"class.std::__1::__compressed_pair.423" }
%"class.std::__1::__compressed_pair.423" = type { %"struct.std::__1::__compressed_pair_elem.424" }
%"struct.std::__1::__compressed_pair_elem.424" = type { %class.GrVkOpsRenderPass* }
%class.GrVkOpsRenderPass = type opaque
%struct.VkRenderPass_T = type opaque
%class.SkTArray.458 = type { %struct.VkAttachmentDescription*, i64 }
%class.GrVkRenderTarget = type { %class.GrRenderTarget.base, %class.sk_sp.460, %class.sk_sp.460, %class.sk_sp.460, [32 x %class.sk_sp.473], %class.GrVkDescriptorSet*, %class.sk_sp.482, %class.GrSurface }
%class.GrRenderTarget.base = type <{ i32 (...)**, %class.sk_sp.459, %class.sk_sp.459, i32 }>
%class.sk_sp.459 = type { %class.GrAttachment* }
%class.GrAttachment = type <{ %class.GrSurface, i8, [3 x i8], i32, i8, i8, [6 x i8] }>
%class.sk_sp.460 = type { %class.GrVkAttachment* }
%class.GrVkAttachment = type { %class.GrAttachment.base, %class.GrVkImage, %class.sk_sp.472, %class.sk_sp.472, %class.gr_sp, %class.gr_sp }
%class.GrAttachment.base = type <{ %class.GrSurface, i8, [3 x i8], i32, i8, i8 }>
%class.GrVkImage = type { i32 (...)**, %struct.GrVkImageInfo, i32, %class.sk_sp.461, i8, %"class.GrVkImage::Resource"* }
%struct.GrVkImageInfo = type <{ %struct.VkImage_T*, %struct.GrVkAlloc, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8], %struct.GrVkYcbcrConversionInfo, i32, [4 x i8] }>
%struct.GrVkAlloc = type <{ %struct.VkDeviceMemory_T*, i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%class.sk_sp.461 = type { %class.GrBackendSurfaceMutableStateImpl* }
%class.GrBackendSurfaceMutableStateImpl = type { %class.SkRefCnt.base, %class.GrBackendSurfaceMutableState, [4 x i8] }
%class.GrBackendSurfaceMutableState = type <{ %union.anon.462, i32, i8, [3 x i8] }>
%union.anon.462 = type { %class.GrVkSharedImageInfo }
%class.GrVkSharedImageInfo = type { %"struct.std::__1::atomic.463", %"struct.std::__1::atomic.467" }
%"struct.std::__1::atomic.463" = type { %"struct.std::__1::__atomic_base.464" }
%"struct.std::__1::__atomic_base.464" = type { %"struct.std::__1::__cxx_atomic_impl.465" }
%"struct.std::__1::__cxx_atomic_impl.465" = type { %"struct.std::__1::__cxx_atomic_base_impl.466" }
%"struct.std::__1::__cxx_atomic_base_impl.466" = type { i32 }
%"struct.std::__1::atomic.467" = type { %"struct.std::__1::__atomic_base.468" }
%"struct.std::__1::__atomic_base.468" = type { %"struct.std::__1::__atomic_base.469" }
%"struct.std::__1::__atomic_base.469" = type { %"struct.std::__1::__cxx_atomic_impl.470" }
%"struct.std::__1::__cxx_atomic_impl.470" = type { %"struct.std::__1::__cxx_atomic_base_impl.471" }
%"struct.std::__1::__cxx_atomic_base_impl.471" = type { i32 }
%"class.GrVkImage::Resource" = type <{ %class.GrTextureResource, %class.GrVkGpu*, %struct.VkImage_T*, %struct.GrVkAlloc, i32, [4 x i8] }>
%class.GrTextureResource = type { %class.GrManagedResource.base, %class.sk_sp.153 }
%class.sk_sp.472 = type { %class.GrVkImageView* }
%class.GrVkImageView = type opaque
%class.gr_sp = type { %class.GrVkDescriptorSet* }
%class.sk_sp.473 = type { %class.GrVkFramebuffer* }
%class.GrVkFramebuffer = type { %class.GrVkManagedResource, %struct.VkFramebuffer_T*, %class.sk_sp.460, %class.sk_sp.460, %class.sk_sp.460, %class.sk_sp.474, %class.GrResourceHandle.475, %class.sk_sp.474, %"class.std::__1::unique_ptr.476" }
%class.GrResourceHandle.475 = type { i32 }
%class.sk_sp.474 = type { %class.GrVkRenderPass* }
%"class.std::__1::unique_ptr.476" = type { %"class.std::__1::__compressed_pair.477" }
%"class.std::__1::__compressed_pair.477" = type { %"struct.std::__1::__compressed_pair_elem.478" }
%"struct.std::__1::__compressed_pair_elem.478" = type { %class.GrVkSecondaryCommandBuffer* }
%class.GrVkSecondaryCommandBuffer = type opaque
%class.sk_sp.482 = type { %class.GrVkFramebuffer* }
%class.GrProcessorKeyBuilder = type { i32 (...)**, %class.SkTArray.483*, i32, i32 }
%class.SkTArray.483 = type { i32*, i64 }
%class.GrManagedResource = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

$_ZN17GrManagedResourceD2Ev = comdat any

$_ZN14GrVkRenderPassD0Ev = comdat any

$_ZNK17GrManagedResource24notifyQueuedForWorkOnGpuEv = comdat any

$_ZNK17GrManagedResource27notifyFinishedWithWorkOnGpuEv = comdat any

$_ZN8SkTArrayI23VkAttachmentDescriptionLb0EE12checkReallocEiNS1_11ReallocTypeE = comdat any

@.str = private unnamed_addr constant [53 x i8] c"../../third_party/skia/src/gpu/vk/GrVkRenderPass.cpp\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"Unexpected attachment layout\00", align 1
@_ZZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE18kBasicLoadStoreOps = internal global %"struct.GrVkRenderPass::LoadStoreOps" zeroinitializer, align 4
@_ZGVZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE18kBasicLoadStoreOps = internal global i64 0, align 8
@_ZZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE20kDiscardLoadStoreOps = internal global %"struct.GrVkRenderPass::LoadStoreOps" zeroinitializer, align 4
@_ZGVZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE20kDiscardLoadStoreOps = internal global i64 0, align 8
@.str.2 = private unnamed_addr constant [98 x i8] c"Failed vulkan call. Error: %d,CreateRenderPass(gpu->device(), &createInfo, nullptr, &renderPass)\0A\00", align 1
@_ZTV14GrVkRenderPass = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrManagedResource*)* @_ZN17GrManagedResourceD2Ev to i8*), i8* bitcast (void (%class.GrVkRenderPass*)* @_ZN14GrVkRenderPassD0Ev to i8*), i8* bitcast (void (%class.GrManagedResource*)* @_ZNK17GrManagedResource24notifyQueuedForWorkOnGpuEv to i8*), i8* bitcast (void (%class.GrManagedResource*)* @_ZNK17GrManagedResource27notifyFinishedWithWorkOnGpuEv to i8*), i8* bitcast (void (%class.GrVkRenderPass*)* @_ZNK14GrVkRenderPass11freeGPUDataEv to i8*)] }, align 8
@.str.3 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1

@_ZN14GrVkRenderPassC1EPK7GrVkGpuP14VkRenderPass_TNS_15AttachmentFlagsERKNS_21AttachmentsDescriptorENS_19SelfDependencyFlagsENS_15LoadFromResolveERK10VkExtent2Dj = hidden unnamed_addr alias void (%class.GrVkRenderPass*, %class.GrVkGpu*, %struct.VkRenderPass_T*, i32, %"struct.GrVkRenderPass::AttachmentsDescriptor"*, i32, i32, %struct.VkExtent2D*, i32), void (%class.GrVkRenderPass*, %class.GrVkGpu*, %struct.VkRenderPass_T*, i32, %"struct.GrVkRenderPass::AttachmentsDescriptor"*, i32, i32, %struct.VkExtent2D*, i32)* @_ZN14GrVkRenderPassC2EPK7GrVkGpuP14VkRenderPass_TNS_15AttachmentFlagsERKNS_21AttachmentsDescriptorENS_19SelfDependencyFlagsENS_15LoadFromResolveERK10VkExtent2Dj

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z31setup_vk_attachment_descriptionP23VkAttachmentDescriptionRKN14GrVkRenderPass21AttachmentsDescriptor14AttachmentDescE13VkImageLayoutS6_(%struct.VkAttachmentDescription*, %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc"* nocapture readonly dereferenceable(16), i32, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %0, i64 0, i32 0
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc"* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %0, i64 0, i32 1
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc"* %1, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %0, i64 0, i32 2
  %12 = tail call zeroext i1 @_Z28GrSampleCountToVkSampleCountjP21VkSampleCountFlagBits(i32 %10, i32* %11) #11
  switch i32 %2, label %29 [
    i32 2, label %13
    i32 5, label %13
    i32 1, label %13
    i32 3, label %21
  ]

13:                                               ; preds = %4, %4, %4
  %14 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc"* %1, i64 0, i32 2, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %0, i64 0, i32 3
  store i32 %15, i32* %16, align 4
  %17 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc"* %1, i64 0, i32 2, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %0, i64 0, i32 4
  store i32 %18, i32* %19, align 4
  %20 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %0, i64 0, i32 5
  store i32 2, i32* %20, align 4
  br label %30

21:                                               ; preds = %4
  %22 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %0, i64 0, i32 3
  store i32 2, i32* %22, align 4
  %23 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %0, i64 0, i32 4
  store i32 1, i32* %23, align 4
  %24 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc"* %1, i64 0, i32 2, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %0, i64 0, i32 5
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc", %"struct.GrVkRenderPass::AttachmentsDescriptor::AttachmentDesc"* %1, i64 0, i32 2, i32 1
  %28 = load i32, i32* %27, align 4
  br label %30

29:                                               ; preds = %4
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 41, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0)) #12
  unreachable

30:                                               ; preds = %21, %13
  %31 = phi i32 [ %28, %21 ], [ 1, %13 ]
  %32 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %0, i64 0, i32 6
  store i32 %31, i32* %32, align 4
  %33 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %0, i64 0, i32 7
  store i32 %2, i32* %33, align 4
  %34 = icmp eq i32 %3, 0
  %35 = select i1 %34, i32 %2, i32 %3
  %36 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %0, i64 0, i32 8
  store i32 %35, i32* %36, align 4
  ret void
}

declare zeroext i1 @_Z28GrSampleCountToVkSampleCountjP21VkSampleCountFlagBits(i32, i32*) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden noalias %class.GrVkRenderPass* @_ZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveE(%class.GrVkGpu*, %"struct.GrVkRenderPass::AttachmentsDescriptor"* nocapture, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %6 = load atomic i8, i8* bitcast (i64* @_ZGVZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE18kBasicLoadStoreOps to i8*) acquire, align 8
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %13, !prof !2

8:                                                ; preds = %5
  %9 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE18kBasicLoadStoreOps) #11
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %8
  store i32 0, i32* getelementptr inbounds (%"struct.GrVkRenderPass::LoadStoreOps", %"struct.GrVkRenderPass::LoadStoreOps"* @_ZZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE18kBasicLoadStoreOps, i64 0, i32 0), align 4
  store i32 0, i32* getelementptr inbounds (%"struct.GrVkRenderPass::LoadStoreOps", %"struct.GrVkRenderPass::LoadStoreOps"* @_ZZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE18kBasicLoadStoreOps, i64 0, i32 1), align 4
  %12 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (%"struct.GrVkRenderPass::LoadStoreOps"* @_ZZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE18kBasicLoadStoreOps to i8*))
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE18kBasicLoadStoreOps) #11
  br label %13

13:                                               ; preds = %8, %11, %5
  switch i32 %4, label %26 [
    i32 0, label %14
    i32 1, label %16
  ]

14:                                               ; preds = %13
  %15 = tail call %class.GrVkRenderPass* @_ZN14GrVkRenderPass6CreateEP7GrVkGpuNS_15AttachmentFlagsEPNS_21AttachmentsDescriptorERKNS_12LoadStoreOpsES7_S7_NS_19SelfDependencyFlagsENS_15LoadFromResolveE(%class.GrVkGpu* %0, i32 %2, %"struct.GrVkRenderPass::AttachmentsDescriptor"* %1, %"struct.GrVkRenderPass::LoadStoreOps"* nonnull dereferenceable(8) @_ZZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE18kBasicLoadStoreOps, %"struct.GrVkRenderPass::LoadStoreOps"* nonnull dereferenceable(8) @_ZZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE18kBasicLoadStoreOps, %"struct.GrVkRenderPass::LoadStoreOps"* nonnull dereferenceable(8) @_ZZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE18kBasicLoadStoreOps, i32 %3, i32 0)
  br label %27

16:                                               ; preds = %13
  %17 = load atomic i8, i8* bitcast (i64* @_ZGVZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE20kDiscardLoadStoreOps to i8*) acquire, align 8
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %24, !prof !2

19:                                               ; preds = %16
  %20 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE20kDiscardLoadStoreOps) #11
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %19
  store i32 2, i32* getelementptr inbounds (%"struct.GrVkRenderPass::LoadStoreOps", %"struct.GrVkRenderPass::LoadStoreOps"* @_ZZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE20kDiscardLoadStoreOps, i64 0, i32 0), align 4
  store i32 1, i32* getelementptr inbounds (%"struct.GrVkRenderPass::LoadStoreOps", %"struct.GrVkRenderPass::LoadStoreOps"* @_ZZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE20kDiscardLoadStoreOps, i64 0, i32 1), align 4
  %23 = tail call {}* @llvm.invariant.start.p0i8(i64 8, i8* bitcast (%"struct.GrVkRenderPass::LoadStoreOps"* @_ZZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE20kDiscardLoadStoreOps to i8*))
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE20kDiscardLoadStoreOps) #11
  br label %24

24:                                               ; preds = %19, %22, %16
  %25 = tail call %class.GrVkRenderPass* @_ZN14GrVkRenderPass6CreateEP7GrVkGpuNS_15AttachmentFlagsEPNS_21AttachmentsDescriptorERKNS_12LoadStoreOpsES7_S7_NS_19SelfDependencyFlagsENS_15LoadFromResolveE(%class.GrVkGpu* %0, i32 %2, %"struct.GrVkRenderPass::AttachmentsDescriptor"* %1, %"struct.GrVkRenderPass::LoadStoreOps"* nonnull dereferenceable(8) @_ZZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE20kDiscardLoadStoreOps, %"struct.GrVkRenderPass::LoadStoreOps"* nonnull dereferenceable(8) @_ZZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE18kBasicLoadStoreOps, %"struct.GrVkRenderPass::LoadStoreOps"* nonnull dereferenceable(8) @_ZZN14GrVkRenderPass12CreateSimpleEP7GrVkGpuPNS_21AttachmentsDescriptorENS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveEE18kBasicLoadStoreOps, i32 %3, i32 1)
  br label %27

26:                                               ; preds = %13
  tail call void @llvm.trap()
  unreachable

27:                                               ; preds = %24, %14
  %28 = phi %class.GrVkRenderPass* [ %25, %24 ], [ %15, %14 ]
  ret %class.GrVkRenderPass* %28
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden noalias %class.GrVkRenderPass* @_ZN14GrVkRenderPass6CreateEP7GrVkGpuNS_15AttachmentFlagsEPNS_21AttachmentsDescriptorERKNS_12LoadStoreOpsES7_S7_NS_19SelfDependencyFlagsENS_15LoadFromResolveE(%class.GrVkGpu*, i32, %"struct.GrVkRenderPass::AttachmentsDescriptor"* nocapture, %"struct.GrVkRenderPass::LoadStoreOps"* nocapture readonly dereferenceable(8), %"struct.GrVkRenderPass::LoadStoreOps"* nocapture readonly dereferenceable(8), %"struct.GrVkRenderPass::LoadStoreOps"* nocapture readonly dereferenceable(8), i32, i32) local_unnamed_addr #0 align 2 {
  %9 = alloca %class.SkTArray.458, align 8
  %10 = alloca %struct.VkAttachmentReference, align 4
  %11 = alloca %struct.VkAttachmentReference, align 4
  %12 = alloca %struct.VkAttachmentReference, align 4
  %13 = alloca %struct.VkAttachmentReference, align 4
  %14 = alloca [2 x %struct.VkSubpassDescription], align 16
  %15 = alloca [2 x %struct.VkSubpassDependency], align 16
  %16 = alloca %struct.VkRenderPassCreateInfo, align 8
  %17 = alloca %struct.VkRenderPass_T*, align 8
  %18 = alloca i64, align 8
  %19 = bitcast i64* %18 to %struct.VkExtent2D*
  %20 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = bitcast %class.SkTArray.458* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #11
  %23 = getelementptr inbounds %class.SkTArray.458, %class.SkTArray.458* %9, i64 0, i32 0
  %24 = getelementptr inbounds %class.SkTArray.458, %class.SkTArray.458* %9, i64 0, i32 1
  store %struct.VkAttachmentDescription* null, %struct.VkAttachmentDescription** %23, align 8
  store i64 1, i64* %24, align 8
  %25 = icmp sgt i32 %21, 0
  br i1 %25, label %26, label %32

26:                                               ; preds = %8
  call void @_ZN8SkTArrayI23VkAttachmentDescriptionLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray.458* nonnull %9, i32 %21, i32 0) #11
  %27 = load i64, i64* %24, align 8
  %28 = shl i64 %27, 32
  %29 = and i64 %28, 4294967296
  %30 = and i64 %27, -8589934591
  %31 = or i64 %29, %30
  br label %32

32:                                               ; preds = %8, %26
  %33 = phi i64 [ %31, %26 ], [ 1, %8 ]
  store i64 %33, i64* %24, align 8
  call void @_ZN8SkTArrayI23VkAttachmentDescriptionLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray.458* nonnull %9, i32 %21, i32 0) #11
  %34 = load i64, i64* %24, align 8
  %35 = shl i32 %21, 1
  %36 = zext i32 %35 to i64
  %37 = and i64 %34, -8589934591
  %38 = or i64 %37, %36
  store i64 %38, i64* %24, align 8
  %39 = bitcast %class.SkTArray.458* %9 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = zext i32 %21 to i64
  %42 = mul nuw nsw i64 %41, 36
  call void @llvm.memset.p0i8.i64(i8* align 4 %40, i8 0, i64 %42, i1 false)
  %43 = bitcast %struct.VkAttachmentReference* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #11
  %44 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %10, i64 0, i32 0
  store i32 -1431655766, i32* %44, align 4
  %45 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %10, i64 0, i32 1
  store i32 -1431655766, i32* %45, align 4
  %46 = bitcast %struct.VkAttachmentReference* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #11
  %47 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %11, i64 0, i32 0
  store i32 -1431655766, i32* %47, align 4
  %48 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %11, i64 0, i32 1
  store i32 -1431655766, i32* %48, align 4
  %49 = bitcast %struct.VkAttachmentReference* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #11
  %50 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %12, i64 0, i32 0
  store i32 -1431655766, i32* %50, align 4
  %51 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %12, i64 0, i32 1
  store i32 -1431655766, i32* %51, align 4
  %52 = bitcast %struct.VkAttachmentReference* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #11
  %53 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %13, i64 0, i32 0
  store i32 -1431655766, i32* %53, align 4
  %54 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %13, i64 0, i32 1
  store i32 -1431655766, i32* %54, align 4
  %55 = bitcast [2 x %struct.VkSubpassDescription]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %55) #11
  %56 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 0, i64 144, i1 false)
  %57 = icmp eq i32 %7, 1
  %58 = zext i1 %57 to i32
  %59 = zext i1 %57 to i64
  %60 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 %59, i32 0
  store i32 0, i32* %60, align 8
  %61 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 %59, i32 1
  store i32 0, i32* %61, align 4
  %62 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 %59, i32 2
  store i32 0, i32* %62, align 8
  %63 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 %59, i32 3
  store %struct.VkAttachmentReference* null, %struct.VkAttachmentReference** %63, align 8
  %64 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 %59, i32 6
  store %struct.VkAttachmentReference* null, %struct.VkAttachmentReference** %64, align 8
  %65 = bitcast [2 x %struct.VkSubpassDependency]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %65) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %65, i8 -86, i64 56, i1 false)
  %66 = and i32 %1, 1
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %118, label %68

68:                                               ; preds = %32
  %69 = and i32 %6, 1
  %70 = icmp ne i32 %69, 0
  %71 = select i1 %70, i32 1, i32 2
  %72 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 0, i32 2
  %73 = bitcast %"struct.GrVkRenderPass::LoadStoreOps"* %3 to i64*
  %74 = bitcast %"struct.GrVkRenderPass::LoadStoreOps"* %72 to i64*
  %75 = load i64, i64* %73, align 4
  store i64 %75, i64* %74, align 4
  %76 = load %struct.VkAttachmentDescription*, %struct.VkAttachmentDescription** %23, align 8
  %77 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %76, i64 0, i32 0
  store i32 0, i32* %77, align 4
  %78 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 0, i32 0
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %76, i64 0, i32 1
  store i32 %79, i32* %80, align 4
  %81 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 0, i32 1
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %76, i64 0, i32 2
  %84 = call zeroext i1 @_Z28GrSampleCountToVkSampleCountjP21VkSampleCountFlagBits(i32 %82, i32* %83) #11
  %85 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 0, i32 2, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %76, i64 0, i32 3
  store i32 %86, i32* %87, align 4
  %88 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 0, i32 2, i32 1
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %76, i64 0, i32 4
  store i32 %89, i32* %90, align 4
  %91 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %76, i64 0, i32 5
  store i32 2, i32* %91, align 4
  %92 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %76, i64 0, i32 6
  store i32 1, i32* %92, align 4
  %93 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %76, i64 0, i32 7
  store i32 %71, i32* %93, align 4
  %94 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %76, i64 0, i32 8
  store i32 %71, i32* %94, align 4
  store i32 0, i32* %44, align 4
  store i32 %71, i32* %45, align 4
  %95 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 %59, i32 4
  store i32 1, i32* %95, align 8
  %96 = icmp eq i32 %6, 0
  br i1 %96, label %112, label %97

97:                                               ; preds = %68
  %98 = getelementptr inbounds [2 x %struct.VkSubpassDependency], [2 x %struct.VkSubpassDependency]* %15, i64 0, i64 0, i32 0
  store i32 %58, i32* %98, align 16
  %99 = getelementptr inbounds [2 x %struct.VkSubpassDependency], [2 x %struct.VkSubpassDependency]* %15, i64 0, i64 0, i32 1
  store i32 %58, i32* %99, align 4
  %100 = getelementptr inbounds [2 x %struct.VkSubpassDependency], [2 x %struct.VkSubpassDependency]* %15, i64 0, i64 0, i32 6
  store i32 1, i32* %100, align 8
  %101 = getelementptr inbounds [2 x %struct.VkSubpassDependency], [2 x %struct.VkSubpassDependency]* %15, i64 0, i64 0, i32 2
  %102 = getelementptr inbounds [2 x %struct.VkSubpassDependency], [2 x %struct.VkSubpassDependency]* %15, i64 0, i64 0, i32 3
  %103 = getelementptr inbounds [2 x %struct.VkSubpassDependency], [2 x %struct.VkSubpassDependency]* %15, i64 0, i64 0, i32 5
  %104 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 0, i32 256, i32 0>, <4 x i32>* %104, align 8
  %105 = and i32 %6, 2
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %108, label %107

107:                                              ; preds = %97
  store i32 1024, i32* %102, align 4
  store i32 524288, i32* %103, align 4
  br label %108

108:                                              ; preds = %97, %107
  %109 = phi i32 [ 16, %97 ], [ 524304, %107 ]
  %110 = phi i32 [ 128, %97 ], [ 1152, %107 ]
  br i1 %70, label %111, label %112

111:                                              ; preds = %108
  store i32 1, i32* %62, align 8
  store %struct.VkAttachmentReference* %10, %struct.VkAttachmentReference** %63, align 8
  store i32 %110, i32* %102, align 4
  store i32 %109, i32* %103, align 4
  br label %112

112:                                              ; preds = %108, %111, %68
  %113 = phi i32 [ 0, %68 ], [ 1, %111 ], [ 1, %108 ]
  %114 = getelementptr inbounds %"struct.GrVkRenderPass::LoadStoreOps", %"struct.GrVkRenderPass::LoadStoreOps"* %3, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = icmp eq i32 %115, 1
  %117 = zext i1 %116 to i32
  br label %120

118:                                              ; preds = %32
  store i32 -1, i32* %44, align 4
  store i32 0, i32* %45, align 4
  %119 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 %59, i32 4
  store i32 0, i32* %119, align 8
  br label %120

120:                                              ; preds = %112, %118
  %121 = phi i32 [ 0, %118 ], [ %117, %112 ]
  %122 = phi i32 [ 0, %118 ], [ %113, %112 ]
  %123 = phi i32 [ 0, %118 ], [ 1, %112 ]
  %124 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 %59, i32 5
  store %struct.VkAttachmentReference* %10, %struct.VkAttachmentReference** %124, align 8
  %125 = and i32 %1, 4
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %171, label %127

127:                                              ; preds = %120
  %128 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 1, i32 2
  %129 = bitcast %"struct.GrVkRenderPass::LoadStoreOps"* %4 to i64*
  %130 = bitcast %"struct.GrVkRenderPass::LoadStoreOps"* %128 to i64*
  %131 = load i64, i64* %129, align 4
  store i64 %131, i64* %130, align 4
  %132 = select i1 %57, i32 5, i32 2
  %133 = load %struct.VkAttachmentDescription*, %struct.VkAttachmentDescription** %23, align 8
  %134 = zext i32 %123 to i64
  %135 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %133, i64 %134, i32 0
  store i32 0, i32* %135, align 4
  %136 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 1, i32 0
  %137 = load i32, i32* %136, align 4
  %138 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %133, i64 %134, i32 1
  store i32 %137, i32* %138, align 4
  %139 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 1, i32 1
  %140 = load i32, i32* %139, align 4
  %141 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %133, i64 %134, i32 2
  %142 = call zeroext i1 @_Z28GrSampleCountToVkSampleCountjP21VkSampleCountFlagBits(i32 %140, i32* %141) #11
  %143 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 1, i32 2, i32 0
  %144 = load i32, i32* %143, align 4
  %145 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %133, i64 %134, i32 3
  store i32 %144, i32* %145, align 4
  %146 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 1, i32 2, i32 1
  %147 = load i32, i32* %146, align 4
  %148 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %133, i64 %134, i32 4
  store i32 %147, i32* %148, align 4
  %149 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %133, i64 %134, i32 5
  store i32 2, i32* %149, align 4
  %150 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %133, i64 %134, i32 6
  store i32 1, i32* %150, align 4
  %151 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %133, i64 %134, i32 7
  store i32 %132, i32* %151, align 4
  %152 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %133, i64 %134, i32 8
  store i32 2, i32* %152, align 4
  %153 = add nuw nsw i32 %123, 1
  store i32 %123, i32* %47, align 4
  store i32 2, i32* %48, align 4
  store %struct.VkAttachmentReference* %11, %struct.VkAttachmentReference** %64, align 8
  br i1 %57, label %154, label %171

154:                                              ; preds = %127
  store i32 %123, i32* %50, align 4
  store i32 5, i32* %51, align 4
  %155 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 0, i32 0
  store i32 0, i32* %155, align 16
  %156 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 0, i32 1
  store i32 0, i32* %156, align 4
  %157 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 0, i32 2
  store i32 1, i32* %157, align 8
  %158 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 0, i32 3
  store %struct.VkAttachmentReference* %12, %struct.VkAttachmentReference** %158, align 16
  %159 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 0, i32 4
  store i32 1, i32* %159, align 8
  %160 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 0, i32 5
  store %struct.VkAttachmentReference* %10, %struct.VkAttachmentReference** %160, align 16
  %161 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 0, i32 6
  %162 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 0, i32 9
  store i32* null, i32** %162, align 16
  %163 = add nuw nsw i32 %122, 1
  %164 = sext i32 %122 to i64
  %165 = getelementptr inbounds [2 x %struct.VkSubpassDependency], [2 x %struct.VkSubpassDependency]* %15, i64 0, i64 %164, i32 0
  %166 = bitcast %struct.VkAttachmentReference** %161 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %166, i8 0, i64 20, i1 false)
  store i32 0, i32* %165, align 4
  %167 = getelementptr inbounds [2 x %struct.VkSubpassDependency], [2 x %struct.VkSubpassDependency]* %15, i64 0, i64 %164, i32 1
  store i32 %58, i32* %167, align 4
  %168 = getelementptr inbounds [2 x %struct.VkSubpassDependency], [2 x %struct.VkSubpassDependency]* %15, i64 0, i64 %164, i32 6
  store i32 1, i32* %168, align 4
  %169 = getelementptr inbounds [2 x %struct.VkSubpassDependency], [2 x %struct.VkSubpassDependency]* %15, i64 0, i64 %164, i32 2
  %170 = bitcast i32* %169 to <4 x i32>*
  store <4 x i32> <i32 1024, i32 1024, i32 256, i32 384>, <4 x i32>* %170, align 4
  br label %171

171:                                              ; preds = %127, %154, %120
  %172 = phi i32 [ %122, %120 ], [ %163, %154 ], [ %122, %127 ]
  %173 = phi i32 [ %123, %120 ], [ %153, %154 ], [ %153, %127 ]
  %174 = and i32 %1, 2
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %208, label %176

176:                                              ; preds = %171
  %177 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 2, i32 2
  %178 = bitcast %"struct.GrVkRenderPass::LoadStoreOps"* %5 to i64*
  %179 = bitcast %"struct.GrVkRenderPass::LoadStoreOps"* %177 to i64*
  %180 = load i64, i64* %178, align 4
  store i64 %180, i64* %179, align 4
  %181 = load %struct.VkAttachmentDescription*, %struct.VkAttachmentDescription** %23, align 8
  %182 = sext i32 %173 to i64
  %183 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %181, i64 %182, i32 0
  store i32 0, i32* %183, align 4
  %184 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 2, i32 0
  %185 = load i32, i32* %184, align 4
  %186 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %181, i64 %182, i32 1
  store i32 %185, i32* %186, align 4
  %187 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 2, i32 1
  %188 = load i32, i32* %187, align 4
  %189 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %181, i64 %182, i32 2
  %190 = call zeroext i1 @_Z28GrSampleCountToVkSampleCountjP21VkSampleCountFlagBits(i32 %188, i32* %189) #11
  %191 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %181, i64 %182, i32 3
  store i32 2, i32* %191, align 4
  %192 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %181, i64 %182, i32 4
  store i32 1, i32* %192, align 4
  %193 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 2, i32 2, i32 0
  %194 = load i32, i32* %193, align 4
  %195 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %181, i64 %182, i32 5
  store i32 %194, i32* %195, align 4
  %196 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 2, i32 2, i32 1
  %197 = load i32, i32* %196, align 4
  %198 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %181, i64 %182, i32 6
  store i32 %197, i32* %198, align 4
  %199 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %181, i64 %182, i32 7
  store i32 3, i32* %199, align 4
  %200 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %181, i64 %182, i32 8
  store i32 3, i32* %200, align 4
  store i32 %173, i32* %53, align 4
  store i32 3, i32* %54, align 4
  %201 = getelementptr inbounds %"struct.GrVkRenderPass::LoadStoreOps", %"struct.GrVkRenderPass::LoadStoreOps"* %5, i64 0, i32 0
  %202 = load i32, i32* %201, align 4
  %203 = icmp eq i32 %202, 1
  br i1 %203, label %204, label %209

204:                                              ; preds = %176
  %205 = add nuw nsw i32 %173, 1
  %206 = icmp ult i32 %121, %205
  %207 = select i1 %206, i32 %205, i32 %121
  br label %209

208:                                              ; preds = %171
  store i32 -1, i32* %53, align 4
  store i32 0, i32* %54, align 4
  br label %209

209:                                              ; preds = %176, %204, %208
  %210 = phi i32 [ %121, %208 ], [ %207, %204 ], [ %121, %176 ]
  %211 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 %59, i32 7
  store %struct.VkAttachmentReference* %13, %struct.VkAttachmentReference** %211, align 8
  %212 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 %59, i32 8
  store i32 0, i32* %212, align 8
  %213 = getelementptr inbounds [2 x %struct.VkSubpassDescription], [2 x %struct.VkSubpassDescription]* %14, i64 0, i64 %59, i32 9
  store i32* null, i32** %213, align 8
  %214 = select i1 %57, i32 2, i32 1
  %215 = bitcast %struct.VkRenderPassCreateInfo* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %215) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %215, i8 0, i64 56, i1 false)
  %216 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %16, i64 0, i32 0
  store i32 38, i32* %216, align 8
  %217 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %16, i64 0, i32 1
  store i8* null, i8** %217, align 8
  %218 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %16, i64 0, i32 2
  store i32 0, i32* %218, align 8
  %219 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %16, i64 0, i32 3
  store i32 %21, i32* %219, align 4
  %220 = bitcast %class.SkTArray.458* %9 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %16, i64 0, i32 4
  %223 = bitcast %struct.VkAttachmentDescription** %222 to i64*
  store i64 %221, i64* %223, align 8
  %224 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %16, i64 0, i32 5
  store i32 %214, i32* %224, align 8
  %225 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %16, i64 0, i32 6
  store %struct.VkSubpassDescription* %56, %struct.VkSubpassDescription** %225, align 8
  %226 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %16, i64 0, i32 7
  store i32 %172, i32* %226, align 8
  %227 = getelementptr inbounds [2 x %struct.VkSubpassDependency], [2 x %struct.VkSubpassDependency]* %15, i64 0, i64 0
  %228 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %16, i64 0, i32 8
  store %struct.VkSubpassDependency* %227, %struct.VkSubpassDependency** %228, align 8
  %229 = bitcast %struct.VkRenderPass_T** %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %229) #11
  store %struct.VkRenderPass_T* inttoptr (i64 -6148914691236517206 to %struct.VkRenderPass_T*), %struct.VkRenderPass_T** %17, align 8
  %230 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 1, i32 0
  %231 = load %struct.GrVkInterface*, %struct.GrVkInterface** %230, align 8
  %232 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %231, i64 0, i32 1, i32 80, i32 0
  %233 = load i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)*, i32 (%struct.VkDevice_T*, %struct.VkRenderPassCreateInfo*, %struct.VkAllocationCallbacks*, %struct.VkRenderPass_T**)** %232, align 8
  %234 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %0, i64 0, i32 6
  %235 = load %struct.VkDevice_T*, %struct.VkDevice_T** %234, align 8
  %236 = call i32 %233(%struct.VkDevice_T* %235, %struct.VkRenderPassCreateInfo* nonnull %16, %struct.VkAllocationCallbacks* null, %struct.VkRenderPass_T** nonnull %17) #11
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %247, label %238

238:                                              ; preds = %209
  %239 = bitcast %class.GrVkGpu* %0 to i1 (%class.GrVkGpu*)***
  %240 = load i1 (%class.GrVkGpu*)**, i1 (%class.GrVkGpu*)*** %239, align 8
  %241 = getelementptr inbounds i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %240, i64 8
  %242 = load i1 (%class.GrVkGpu*)*, i1 (%class.GrVkGpu*)** %241, align 8
  %243 = call zeroext i1 %242(%class.GrVkGpu* %0) #11
  br i1 %243, label %245, label %244

244:                                              ; preds = %238
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 304, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.2, i64 0, i64 0), i32 %236) #11
  br label %245

245:                                              ; preds = %244, %238
  %246 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %0, i32 %236) #11
  br label %285

247:                                              ; preds = %209
  %248 = call zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu* %0, i32 0) #11
  %249 = bitcast i64* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %249) #11
  %250 = bitcast i64* %18 to i32*
  store i32 -1431655766, i32* %250, align 8
  %251 = getelementptr inbounds %struct.VkExtent2D, %struct.VkExtent2D* %19, i64 0, i32 1
  store i32 -1431655766, i32* %251, align 4
  %252 = load %struct.GrVkInterface*, %struct.GrVkInterface** %230, align 8
  %253 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %252, i64 0, i32 1, i32 82, i32 0
  %254 = load void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkExtent2D*)*, void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkExtent2D*)** %253, align 8
  %255 = load %struct.VkDevice_T*, %struct.VkDevice_T** %234, align 8
  %256 = load %struct.VkRenderPass_T*, %struct.VkRenderPass_T** %17, align 8
  call void %254(%struct.VkDevice_T* %255, %struct.VkRenderPass_T* %256, %struct.VkExtent2D* nonnull %19) #11
  %257 = call i8* @_Znwm(i64 120) #13
  %258 = bitcast i8* %257 to %class.GrVkRenderPass*
  %259 = bitcast %struct.VkRenderPass_T** %17 to i64*
  %260 = load i64, i64* %259, align 8
  %261 = bitcast i8* %257 to i32 (...)***
  %262 = getelementptr inbounds i8, i8* %257, i64 8
  %263 = bitcast i8* %262 to i32*
  store i32 1, i32* %263, align 4
  %264 = getelementptr inbounds i8, i8* %257, i64 16
  %265 = bitcast i8* %264 to %class.GrVkGpu**
  store %class.GrVkGpu* %0, %class.GrVkGpu** %265, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV14GrVkRenderPass, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %261, align 8
  %266 = getelementptr inbounds i8, i8* %257, i64 24
  %267 = bitcast i8* %266 to i64*
  store i64 %260, i64* %267, align 8
  %268 = getelementptr inbounds i8, i8* %257, i64 32
  %269 = bitcast i8* %268 to i32*
  store i32 %1, i32* %269, align 8
  %270 = getelementptr inbounds i8, i8* %257, i64 36
  %271 = bitcast %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %270, i8* align 4 %271, i64 52, i1 false) #11
  %272 = getelementptr inbounds i8, i8* %257, i64 88
  %273 = bitcast i8* %272 to i32*
  store i32 %6, i32* %273, align 8
  %274 = getelementptr inbounds i8, i8* %257, i64 92
  %275 = bitcast i8* %274 to i32*
  store i32 %7, i32* %275, align 4
  %276 = getelementptr inbounds i8, i8* %257, i64 96
  %277 = bitcast i8* %276 to i64*
  %278 = load i64, i64* %18, align 8
  store i64 %278, i64* %277, align 8
  %279 = getelementptr inbounds i8, i8* %257, i64 104
  %280 = bitcast i8* %279 to i32*
  store i32 %210, i32* %280, align 8
  %281 = getelementptr inbounds i8, i8* %257, i64 108
  %282 = bitcast i8* %281 to i32*
  store i32 0, i32* %282, align 4
  %283 = getelementptr inbounds i8, i8* %257, i64 112
  %284 = bitcast i8* %283 to i32*
  store i32 0, i32* %284, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %249) #11
  br label %285

285:                                              ; preds = %245, %247
  %286 = phi %class.GrVkRenderPass* [ %258, %247 ], [ null, %245 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %229) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %215) #11
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %65) #11
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %55) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #11
  %287 = load i64, i64* %24, align 8
  %288 = and i64 %287, 1
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %292, label %290

290:                                              ; preds = %285
  %291 = load i8*, i8** %39, align 8
  call void @_Z7sk_freePv(i8* %291) #11
  br label %292

292:                                              ; preds = %285, %290
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #11
  ret %class.GrVkRenderPass* %286
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nounwind ssp uwtable
define hidden noalias %class.GrVkRenderPass* @_ZN14GrVkRenderPass6CreateEP7GrVkGpuRKS_RKNS_12LoadStoreOpsES6_S6_(%class.GrVkGpu*, %class.GrVkRenderPass* nocapture readonly dereferenceable(120), %"struct.GrVkRenderPass::LoadStoreOps"* nocapture readonly dereferenceable(8), %"struct.GrVkRenderPass::LoadStoreOps"* nocapture readonly dereferenceable(8), %"struct.GrVkRenderPass::LoadStoreOps"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %6 = alloca %"struct.GrVkRenderPass::AttachmentsDescriptor", align 4
  %7 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = bitcast %"struct.GrVkRenderPass::AttachmentsDescriptor"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %9) #11
  %10 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %1, i64 0, i32 3
  %11 = bitcast %"struct.GrVkRenderPass::AttachmentsDescriptor"* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %9, i8* align 4 %11, i64 52, i1 false)
  %12 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %1, i64 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %1, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = call %class.GrVkRenderPass* @_ZN14GrVkRenderPass6CreateEP7GrVkGpuNS_15AttachmentFlagsEPNS_21AttachmentsDescriptorERKNS_12LoadStoreOpsES7_S7_NS_19SelfDependencyFlagsENS_15LoadFromResolveE(%class.GrVkGpu* %0, i32 %8, %"struct.GrVkRenderPass::AttachmentsDescriptor"* nonnull %6, %"struct.GrVkRenderPass::LoadStoreOps"* dereferenceable(8) %2, %"struct.GrVkRenderPass::LoadStoreOps"* dereferenceable(8) %3, %"struct.GrVkRenderPass::LoadStoreOps"* dereferenceable(8) %4, i32 %13, i32 %15)
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %9) #11
  ret %class.GrVkRenderPass* %16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #1

declare zeroext i1 @_ZN7GrVkGpu13checkVkResultE8VkResult(%class.GrVkGpu*, i32) local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14GrVkRenderPassC2EPK7GrVkGpuP14VkRenderPass_TNS_15AttachmentFlagsERKNS_21AttachmentsDescriptorENS_19SelfDependencyFlagsENS_15LoadFromResolveERK10VkExtent2Dj(%class.GrVkRenderPass* nocapture, %class.GrVkGpu*, %struct.VkRenderPass_T*, i32, %"struct.GrVkRenderPass::AttachmentsDescriptor"* nocapture readonly dereferenceable(52), i32, i32, %struct.VkExtent2D* nocapture readonly dereferenceable(8), i32) unnamed_addr #0 align 2 {
  %10 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %11, align 4
  %12 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 0, i32 1
  store %class.GrVkGpu* %1, %class.GrVkGpu** %12, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV14GrVkRenderPass, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %13 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 1
  store %struct.VkRenderPass_T* %2, %struct.VkRenderPass_T** %13, align 8
  %14 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 2
  store i32 %3, i32* %14, align 8
  %15 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3
  %16 = bitcast %"struct.GrVkRenderPass::AttachmentsDescriptor"* %15 to i8*
  %17 = bitcast %"struct.GrVkRenderPass::AttachmentsDescriptor"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %16, i8* align 4 %17, i64 52, i1 false)
  %18 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 4
  store i32 %5, i32* %18, align 8
  %19 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 5
  store i32 %6, i32* %19, align 4
  %20 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 6
  %21 = bitcast %struct.VkExtent2D* %7 to i64*
  %22 = bitcast %struct.VkExtent2D* %20 to i64*
  %23 = load i64, i64* %21, align 4
  store i64 %23, i64* %22, align 8
  %24 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 7
  store i32 %8, i32* %24, align 8
  %25 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 8
  store i32 0, i32* %25, align 4
  %26 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 9
  store i32 0, i32* %26, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK14GrVkRenderPass11freeGPUDataEv(%class.GrVkRenderPass* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %17

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 0, i32 1
  %8 = load %class.GrVkGpu*, %class.GrVkGpu** %7, align 8
  %9 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %8, i64 0, i32 1, i32 0
  %10 = load %struct.GrVkInterface*, %struct.GrVkInterface** %9, align 8
  %11 = getelementptr inbounds %struct.GrVkInterface, %struct.GrVkInterface* %10, i64 0, i32 1, i32 81, i32 0
  %12 = load void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)*, void (%struct.VkDevice_T*, %struct.VkRenderPass_T*, %struct.VkAllocationCallbacks*)** %11, align 8
  %13 = getelementptr inbounds %class.GrVkGpu, %class.GrVkGpu* %8, i64 0, i32 6
  %14 = load %struct.VkDevice_T*, %struct.VkDevice_T** %13, align 8
  %15 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 1
  %16 = load %struct.VkRenderPass_T*, %struct.VkRenderPass_T** %15, align 8
  tail call void %12(%struct.VkDevice_T* %14, %struct.VkRenderPass_T* %16, %struct.VkAllocationCallbacks* null) #11
  br label %17

17:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK14GrVkRenderPass20colorAttachmentIndexEPj(%class.GrVkRenderPass* nocapture readonly, i32* nocapture) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 8
  %4 = load i32, i32* %3, align 4
  store i32 %4, i32* %1, align 4
  %5 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %2
  %10 = and i32 %6, 8
  %11 = icmp ne i32 %10, 0
  ret i1 %11

12:                                               ; preds = %2
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZNK14GrVkRenderPass22stencilAttachmentIndexEPj(%class.GrVkRenderPass* nocapture readonly, i32* nocapture) local_unnamed_addr #7 align 2 {
  store i32 0, i32* %1, align 4
  %3 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = and i32 %4, 1
  store i32 %5, i32* %1, align 4
  %6 = load i32, i32* %3, align 8
  %7 = and i32 %6, 2
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK14GrVkRenderPass12isCompatibleERKNS_21AttachmentsDescriptorERKNS_15AttachmentFlagsENS_19SelfDependencyFlagsENS_15LoadFromResolveE(%class.GrVkRenderPass* nocapture readonly, %"struct.GrVkRenderPass::AttachmentsDescriptor"* nocapture readonly dereferenceable(52), i32* nocapture readonly dereferenceable(4), i32, i32) local_unnamed_addr #8 align 2 {
  %6 = load i32, i32* %2, align 4
  %7 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %6, %8
  br i1 %9, label %10, label %63

10:                                               ; preds = %5
  %11 = and i32 %6, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %1, i64 0, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %15, %17
  br i1 %18, label %19, label %63

19:                                               ; preds = %13
  %20 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %1, i64 0, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %21, %23
  br i1 %24, label %25, label %63

25:                                               ; preds = %10, %19
  %26 = and i32 %6, 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %40, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 1, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %1, i64 0, i32 1, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %34, label %63

34:                                               ; preds = %28
  %35 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 1, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %1, i64 0, i32 1, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %36, %38
  br i1 %39, label %40, label %63

40:                                               ; preds = %25, %34
  %41 = and i32 %6, 2
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %55, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 2, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %1, i64 0, i32 2, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %45, %47
  br i1 %48, label %49, label %63

49:                                               ; preds = %43
  %50 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 2, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %1, i64 0, i32 2, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %51, %53
  br i1 %54, label %55, label %63

55:                                               ; preds = %40, %49
  %56 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 4
  %57 = load i32, i32* %56, align 8
  %58 = icmp eq i32 %57, %3
  br i1 %58, label %59, label %63

59:                                               ; preds = %55
  %60 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 5
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %61, %4
  br label %63

63:                                               ; preds = %43, %28, %13, %59, %55, %49, %34, %19, %5
  %64 = phi i1 [ false, %5 ], [ false, %19 ], [ false, %34 ], [ false, %49 ], [ false, %55 ], [ %62, %59 ], [ false, %13 ], [ false, %28 ], [ false, %43 ]
  ret i1 %64
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK14GrVkRenderPass12isCompatibleEP16GrVkRenderTargetNS_19SelfDependencyFlagsENS_15LoadFromResolveE(%class.GrVkRenderPass* nocapture readonly, %class.GrVkRenderTarget*, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca %"struct.GrVkRenderPass::AttachmentsDescriptor", align 4
  %6 = alloca i32, align 4
  %7 = bitcast %"struct.GrVkRenderPass::AttachmentsDescriptor"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %7) #11
  %8 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %5, i64 0, i32 3
  store i32 -1431655766, i32* %8, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %7, i8 0, i64 48, i1 false) #11
  %9 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #11
  store i32 -1431655766, i32* %6, align 4
  %10 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, 4
  %13 = icmp ne i32 %12, 0
  %14 = and i32 %11, 2
  %15 = icmp ne i32 %14, 0
  call void @_ZN16GrVkRenderTarget24getAttachmentsDescriptorEPN14GrVkRenderPass21AttachmentsDescriptorEPNS0_15AttachmentFlagsEbb(%class.GrVkRenderTarget* %1, %"struct.GrVkRenderPass::AttachmentsDescriptor"* nonnull %5, i32* nonnull %6, i1 zeroext %13, i1 zeroext %15) #11
  %16 = load i32, i32* %6, align 4
  %17 = load i32, i32* %10, align 8
  %18 = icmp eq i32 %16, %17
  br i1 %18, label %19, label %72

19:                                               ; preds = %4
  %20 = and i32 %16, 1
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %34, label %22

22:                                               ; preds = %19
  %23 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 0, i32 0
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %5, i64 0, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %24, %26
  br i1 %27, label %28, label %72

28:                                               ; preds = %22
  %29 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %5, i64 0, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %30, %32
  br i1 %33, label %34, label %72

34:                                               ; preds = %28, %19
  %35 = and i32 %16, 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %49, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %5, i64 0, i32 1, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %39, %41
  br i1 %42, label %43, label %72

43:                                               ; preds = %37
  %44 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 1, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %5, i64 0, i32 1, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %45, %47
  br i1 %48, label %49, label %72

49:                                               ; preds = %43, %34
  %50 = and i32 %16, 2
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %64, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 2, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %5, i64 0, i32 2, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = icmp eq i32 %54, %56
  br i1 %57, label %58, label %72

58:                                               ; preds = %52
  %59 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 2, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %5, i64 0, i32 2, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %60, %62
  br i1 %63, label %64, label %72

64:                                               ; preds = %58, %49
  %65 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 4
  %66 = load i32, i32* %65, align 8
  %67 = icmp eq i32 %66, %2
  br i1 %67, label %68, label %72

68:                                               ; preds = %64
  %69 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 5
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, %3
  br label %72

72:                                               ; preds = %4, %22, %28, %37, %43, %52, %58, %64, %68
  %73 = phi i1 [ false, %4 ], [ false, %28 ], [ false, %43 ], [ false, %58 ], [ false, %64 ], [ %71, %68 ], [ false, %22 ], [ false, %37 ], [ false, %52 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #11
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %7) #11
  ret i1 %73
}

declare void @_ZN16GrVkRenderTarget24getAttachmentsDescriptorEPN14GrVkRenderPass21AttachmentsDescriptorEPNS0_15AttachmentFlagsEbb(%class.GrVkRenderTarget*, %"struct.GrVkRenderPass::AttachmentsDescriptor"*, i32*, i1 zeroext, i1 zeroext) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK14GrVkRenderPass12isCompatibleERKS_(%class.GrVkRenderPass* nocapture readonly, %class.GrVkRenderPass* nocapture readonly dereferenceable(120)) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %1, i64 0, i32 2
  %4 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %1, i64 0, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %1, i64 0, i32 5
  %7 = load i32, i32* %6, align 4
  %8 = load i32, i32* %3, align 4
  %9 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %12, label %65

12:                                               ; preds = %2
  %13 = and i32 %8, 1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %1, i64 0, i32 3, i32 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %21, label %65

21:                                               ; preds = %15
  %22 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %1, i64 0, i32 3, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %23, %25
  br i1 %26, label %27, label %65

27:                                               ; preds = %21, %12
  %28 = and i32 %8, 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %42, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 1, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %1, i64 0, i32 3, i32 1, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %32, %34
  br i1 %35, label %36, label %65

36:                                               ; preds = %30
  %37 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 1, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %1, i64 0, i32 3, i32 1, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %38, %40
  br i1 %41, label %42, label %65

42:                                               ; preds = %36, %27
  %43 = and i32 %8, 2
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %57, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 2, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %1, i64 0, i32 3, i32 2, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %47, %49
  br i1 %50, label %51, label %65

51:                                               ; preds = %45
  %52 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 2, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %1, i64 0, i32 3, i32 2, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %53, %55
  br i1 %56, label %57, label %65

57:                                               ; preds = %51, %42
  %58 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 4
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %59, %5
  br i1 %60, label %61, label %65

61:                                               ; preds = %57
  %62 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 5
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, %7
  br label %65

65:                                               ; preds = %2, %15, %21, %30, %36, %45, %51, %57, %61
  %66 = phi i1 [ false, %2 ], [ false, %21 ], [ false, %36 ], [ false, %51 ], [ false, %57 ], [ %64, %61 ], [ false, %15 ], [ false, %30 ], [ false, %45 ]
  ret i1 %66
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK14GrVkRenderPass22isCompatibleExternalRPEP14VkRenderPass_T(%class.GrVkRenderPass* nocapture readonly, %struct.VkRenderPass_T* readnone) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 1
  %4 = load %struct.VkRenderPass_T*, %struct.VkRenderPass_T** %3, align 8
  %5 = icmp eq %struct.VkRenderPass_T* %4, %1
  ret i1 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK14GrVkRenderPass17equalLoadStoreOpsERKNS_12LoadStoreOpsES2_S2_(%class.GrVkRenderPass* nocapture readonly, %"struct.GrVkRenderPass::LoadStoreOps"* nocapture readonly dereferenceable(8), %"struct.GrVkRenderPass::LoadStoreOps"* nocapture readonly dereferenceable(8), %"struct.GrVkRenderPass::LoadStoreOps"* nocapture readonly dereferenceable(8)) local_unnamed_addr #8 align 2 {
  %5 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 1
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %21, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 0, i32 2, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"struct.GrVkRenderPass::LoadStoreOps", %"struct.GrVkRenderPass::LoadStoreOps"* %1, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %52

15:                                               ; preds = %9
  %16 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 0, i32 2, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"struct.GrVkRenderPass::LoadStoreOps", %"struct.GrVkRenderPass::LoadStoreOps"* %1, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %21, label %52

21:                                               ; preds = %15, %4
  %22 = and i32 %6, 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %36, label %24

24:                                               ; preds = %21
  %25 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 1, i32 2, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"struct.GrVkRenderPass::LoadStoreOps", %"struct.GrVkRenderPass::LoadStoreOps"* %2, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %26, %28
  br i1 %29, label %30, label %52

30:                                               ; preds = %24
  %31 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 1, i32 2, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"struct.GrVkRenderPass::LoadStoreOps", %"struct.GrVkRenderPass::LoadStoreOps"* %2, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %32, %34
  br i1 %35, label %36, label %52

36:                                               ; preds = %30, %21
  %37 = and i32 %6, 2
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %51, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 2, i32 2, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %"struct.GrVkRenderPass::LoadStoreOps", %"struct.GrVkRenderPass::LoadStoreOps"* %3, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %41, %43
  br i1 %44, label %45, label %52

45:                                               ; preds = %39
  %46 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3, i32 2, i32 2, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %"struct.GrVkRenderPass::LoadStoreOps", %"struct.GrVkRenderPass::LoadStoreOps"* %3, i64 0, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %47, %49
  br i1 %50, label %51, label %52

51:                                               ; preds = %45, %36
  br label %52

52:                                               ; preds = %45, %30, %15, %39, %24, %9, %51
  %53 = phi i1 [ true, %51 ], [ false, %15 ], [ false, %30 ], [ false, %45 ], [ false, %9 ], [ false, %24 ], [ false, %39 ]
  ret i1 %53
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK14GrVkRenderPass6genKeyEP21GrProcessorKeyBuilder(%class.GrVkRenderPass* nocapture readonly, %class.GrProcessorKeyBuilder*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 3
  %6 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 5
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %class.GrVkRenderPass, %class.GrVkRenderPass* %0, i64 0, i32 1
  %11 = bitcast %struct.VkRenderPass_T** %10 to i64*
  %12 = load i64, i64* %11, align 8
  tail call void @_ZN14GrVkRenderPass6GenKeyEP21GrProcessorKeyBuilderNS_15AttachmentFlagsERKNS_21AttachmentsDescriptorENS_19SelfDependencyFlagsENS_15LoadFromResolveEm(%class.GrProcessorKeyBuilder* %1, i32 %4, %"struct.GrVkRenderPass::AttachmentsDescriptor"* dereferenceable(52) %5, i32 %7, i32 %9, i64 %12)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14GrVkRenderPass6GenKeyEP21GrProcessorKeyBuilderNS_15AttachmentFlagsERKNS_21AttachmentsDescriptorENS_19SelfDependencyFlagsENS_15LoadFromResolveEm(%class.GrProcessorKeyBuilder*, i32, %"struct.GrVkRenderPass::AttachmentsDescriptor"* nocapture readonly dereferenceable(52), i32, i32, i64) local_unnamed_addr #0 align 2 {
  %7 = bitcast %class.GrProcessorKeyBuilder* %0 to void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)***
  %8 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %7, align 8
  %9 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %8, i64 2
  %10 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %9, align 8
  tail call void %10(%class.GrProcessorKeyBuilder* %0, i32 32, i32 %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #11
  %11 = and i32 %1, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %24, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %7, align 8
  %17 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %16, i64 2
  %18 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %17, align 8
  tail call void %18(%class.GrProcessorKeyBuilder* %0, i32 32, i32 %15, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #11
  %19 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %7, align 8
  %22 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %21, i64 2
  %23 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %22, align 8
  tail call void %23(%class.GrProcessorKeyBuilder* %0, i32 32, i32 %20, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #11
  br label %24

24:                                               ; preds = %6, %13
  %25 = and i32 %1, 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %38, label %27

27:                                               ; preds = %24
  %28 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 1, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %7, align 8
  %31 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %30, i64 2
  %32 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %31, align 8
  tail call void %32(%class.GrProcessorKeyBuilder* %0, i32 32, i32 %29, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #11
  %33 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 1, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %7, align 8
  %36 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %35, i64 2
  %37 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %36, align 8
  tail call void %37(%class.GrProcessorKeyBuilder* %0, i32 32, i32 %34, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #11
  br label %38

38:                                               ; preds = %24, %27
  %39 = and i32 %1, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %52, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 2, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %7, align 8
  %45 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %44, i64 2
  %46 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %45, align 8
  tail call void %46(%class.GrProcessorKeyBuilder* %0, i32 32, i32 %43, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #11
  %47 = getelementptr inbounds %"struct.GrVkRenderPass::AttachmentsDescriptor", %"struct.GrVkRenderPass::AttachmentsDescriptor"* %2, i64 0, i32 2, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %7, align 8
  %50 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %49, i64 2
  %51 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %50, align 8
  tail call void %51(%class.GrProcessorKeyBuilder* %0, i32 32, i32 %48, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #11
  br label %52

52:                                               ; preds = %38, %41
  %53 = shl i32 %4, 30
  %54 = or i32 %53, %3
  %55 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %7, align 8
  %56 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %55, i64 2
  %57 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %56, align 8
  tail call void %57(%class.GrProcessorKeyBuilder* %0, i32 32, i32 %54, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #11
  %58 = and i32 %1, 8
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %70, label %60

60:                                               ; preds = %52
  %61 = trunc i64 %5 to i32
  %62 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %7, align 8
  %63 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %62, i64 2
  %64 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %63, align 8
  tail call void %64(%class.GrProcessorKeyBuilder* %0, i32 32, i32 %61, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #11
  %65 = lshr i64 %5, 32
  %66 = trunc i64 %65 to i32
  %67 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)**, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*** %7, align 8
  %68 = getelementptr inbounds void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %67, i64 2
  %69 = load void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)*, void (%class.GrProcessorKeyBuilder*, i32, i32, i8*)** %68, align 8
  tail call void %69(%class.GrProcessorKeyBuilder* %0, i32 32, i32 %66, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #11
  br label %70

70:                                               ; preds = %52, %60
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN17GrManagedResourceD2Ev(%class.GrManagedResource*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN14GrVkRenderPassD0Ev(%class.GrVkRenderPass*) unnamed_addr #9 comdat align 2 {
  %2 = bitcast %class.GrVkRenderPass* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK17GrManagedResource24notifyQueuedForWorkOnGpuEv(%class.GrManagedResource*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK17GrManagedResource27notifyFinishedWithWorkOnGpuEv(%class.GrManagedResource*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI23VkAttachmentDescriptionLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray.458*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.458, %class.SkTArray.458* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %74

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %74, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 36) #11
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %62, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray.458, %class.SkTArray.458* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %57, %50 ]
  %52 = mul nuw nsw i64 %51, 36
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %struct.VkAttachmentDescription*, %struct.VkAttachmentDescription** %49, align 8
  %55 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %54, i64 %51
  %56 = bitcast %struct.VkAttachmentDescription* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %53, i8* align 4 %56, i64 36, i1 false) #11
  %57 = add nuw nsw i64 %51, 1
  %58 = load i64, i64* %4, align 8
  %59 = lshr i64 %58, 1
  %60 = and i64 %59, 2147483647
  %61 = icmp ult i64 %57, %60
  br i1 %61, label %50, label %62

62:                                               ; preds = %50, %35
  %63 = phi i64 [ %45, %35 ], [ %58, %50 ]
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %64, 0
  %66 = bitcast %class.SkTArray.458* %0 to i8**
  br i1 %65, label %70, label %67

67:                                               ; preds = %62
  %68 = load i8*, i8** %66, align 8
  tail call void @_Z7sk_freePv(i8* %68) #11
  %69 = load i64, i64* %4, align 8
  br label %70

70:                                               ; preds = %62, %67
  %71 = phi i64 [ %69, %67 ], [ %63, %62 ]
  store i8* %44, i8** %66, align 8
  %72 = and i64 %71, -4294967298
  %73 = or i64 %72, 1
  store i64 %73, i64* %4, align 8
  br label %74

74:                                               ; preds = %70, %32, %21
  ret void
}

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { argmemonly nounwind }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
