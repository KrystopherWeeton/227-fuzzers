; ModuleID = '../../third_party/blink/renderer/platform/animation/compositor_filter_keyframe.cc'
source_filename = "../../third_party/blink/renderer/platform/animation/compositor_filter_keyframe.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::CompositorFilterKeyframe" = type { %"class.blink::CompositorKeyframe", %"class.std::__1::unique_ptr" }
%"class.blink::CompositorKeyframe" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.cc::FilterKeyframe"* }
%"class.cc::FilterKeyframe" = type { %"class.gfx::Keyframe", %"class.cc::FilterOperations" }
%"class.gfx::Keyframe" = type { i32 (...)**, %"class.base::TimeDelta", %"class.std::__1::unique_ptr.0" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.gfx::TimingFunction"* }
%"class.gfx::TimingFunction" = type { i32 (...)** }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.11" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp, [20 x float], i32, [4 x i8], %"class.std::__1::vector.6", i32, [4 x i8] }>
%"class.gfx::Point" = type { i32, i32 }
%class.sk_sp = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.5, i32, %"class.absl::optional", i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.5 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.8" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.cc::FilterOperation"* }
%"class.blink::CompositorFilterOperations" = type { %"class.cc::FilterOperations", %"class.blink::FloatRect" }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::TimingFunction" = type { i32 (...)**, %"class.WTF::ThreadSafeRefCounted", i32 }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }

@_ZTVN5blink24CompositorFilterKeyframeE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::CompositorFilterKeyframe"*)* @_ZN5blink24CompositorFilterKeyframeD2Ev to i8*), i8* bitcast (void (%"class.blink::CompositorFilterKeyframe"*)* @_ZN5blink24CompositorFilterKeyframeD0Ev to i8*), i8* bitcast (double (%"class.blink::CompositorFilterKeyframe"*)* @_ZNK5blink24CompositorFilterKeyframe4TimeEv to i8*), i8* bitcast (%"class.gfx::TimingFunction"* (%"class.blink::CompositorFilterKeyframe"*)* @_ZNK5blink24CompositorFilterKeyframe16CcTimingFunctionEv to i8*)] }, align 8

@_ZN5blink24CompositorFilterKeyframeC1EdNS_26CompositorFilterOperationsERKNS_14TimingFunctionE = hidden unnamed_addr alias void (%"class.blink::CompositorFilterKeyframe"*, double, %"class.blink::CompositorFilterOperations"*, %"class.blink::TimingFunction"*), void (%"class.blink::CompositorFilterKeyframe"*, double, %"class.blink::CompositorFilterOperations"*, %"class.blink::TimingFunction"*)* @_ZN5blink24CompositorFilterKeyframeC2EdNS_26CompositorFilterOperationsERKNS_14TimingFunctionE
@_ZN5blink24CompositorFilterKeyframeD1Ev = hidden unnamed_addr alias void (%"class.blink::CompositorFilterKeyframe"*), void (%"class.blink::CompositorFilterKeyframe"*)* @_ZN5blink24CompositorFilterKeyframeD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink24CompositorFilterKeyframeC2EdNS_26CompositorFilterOperationsERKNS_14TimingFunctionE(%"class.blink::CompositorFilterKeyframe"* nocapture, double, %"class.blink::CompositorFilterOperations"*, %"class.blink::TimingFunction"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %5 = alloca %"class.cc::FilterOperations", align 8
  %6 = getelementptr inbounds %"class.blink::CompositorFilterKeyframe", %"class.blink::CompositorFilterKeyframe"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink24CompositorFilterKeyframeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %7 = fmul double %1, 1.000000e+06
  %8 = fcmp ult double %7, 0xC3E0000000000000
  %9 = fcmp ugt double %7, 0x43DFFFFFFFFFFFFF
  %10 = fcmp ogt double %7, 0xC3E0000000000000
  %11 = select i1 %10, double %7, double 0xC3E0000000000000
  %12 = fptosi double %11 to i64
  %13 = select i1 %8, i64 0, i64 9223372036854775807
  %14 = select i1 %9, i64 %13, i64 %12
  %15 = bitcast %"class.cc::FilterOperations"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #6
  call void @_ZN5blink26CompositorFilterOperations25ReleaseCcFilterOperationsEv(%"class.cc::FilterOperations"* nonnull sret %5, %"class.blink::CompositorFilterOperations"* %2) #6
  %16 = bitcast %"class.blink::TimingFunction"* %3 to %"class.gfx::TimingFunction"* (%"class.blink::TimingFunction"*)***
  %17 = load %"class.gfx::TimingFunction"* (%"class.blink::TimingFunction"*)**, %"class.gfx::TimingFunction"* (%"class.blink::TimingFunction"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.gfx::TimingFunction"* (%"class.blink::TimingFunction"*)*, %"class.gfx::TimingFunction"* (%"class.blink::TimingFunction"*)** %17, i64 6
  %19 = load %"class.gfx::TimingFunction"* (%"class.blink::TimingFunction"*)*, %"class.gfx::TimingFunction"* (%"class.blink::TimingFunction"*)** %18, align 8
  %20 = call %"class.gfx::TimingFunction"* %19(%"class.blink::TimingFunction"* %3) #6
  %21 = call %"class.cc::FilterKeyframe"* @_ZN2cc14FilterKeyframe6CreateEN4base9TimeDeltaERKNS_16FilterOperationsENSt3__110unique_ptrIN3gfx14TimingFunctionENS6_14default_deleteIS9_EEEE(i64 %14, %"class.cc::FilterOperations"* nonnull dereferenceable(24) %5, %"class.gfx::TimingFunction"* %20) #6
  %22 = getelementptr inbounds %"class.blink::CompositorFilterKeyframe", %"class.blink::CompositorFilterKeyframe"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.cc::FilterKeyframe"* %21, %"class.cc::FilterKeyframe"** %22, align 8
  call void @_ZN2cc16FilterOperationsD1Ev(%"class.cc::FilterOperations"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #6
  ret void
}

declare %"class.cc::FilterKeyframe"* @_ZN2cc14FilterKeyframe6CreateEN4base9TimeDeltaERKNS_16FilterOperationsENSt3__110unique_ptrIN3gfx14TimingFunctionENS6_14default_deleteIS9_EEEE(i64, %"class.cc::FilterOperations"* dereferenceable(24), %"class.gfx::TimingFunction"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN5blink26CompositorFilterOperations25ReleaseCcFilterOperationsEv(%"class.cc::FilterOperations"* sret, %"class.blink::CompositorFilterOperations"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN2cc16FilterOperationsD1Ev(%"class.cc::FilterOperations"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink24CompositorFilterKeyframeD2Ev(%"class.blink::CompositorFilterKeyframe"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CompositorFilterKeyframe", %"class.blink::CompositorFilterKeyframe"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink24CompositorFilterKeyframeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CompositorFilterKeyframe", %"class.blink::CompositorFilterKeyframe"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.cc::FilterKeyframe"*, %"class.cc::FilterKeyframe"** %3, align 8
  store %"class.cc::FilterKeyframe"* null, %"class.cc::FilterKeyframe"** %3, align 8
  %5 = icmp eq %"class.cc::FilterKeyframe"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.cc::FilterKeyframe"* %4 to void (%"class.cc::FilterKeyframe"*)***
  %8 = load void (%"class.cc::FilterKeyframe"*)**, void (%"class.cc::FilterKeyframe"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.cc::FilterKeyframe"*)*, void (%"class.cc::FilterKeyframe"*)** %8, i64 1
  %10 = load void (%"class.cc::FilterKeyframe"*)*, void (%"class.cc::FilterKeyframe"*)** %9, align 8
  tail call void %10(%"class.cc::FilterKeyframe"* nonnull %4) #6
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink24CompositorFilterKeyframeD0Ev(%"class.blink::CompositorFilterKeyframe"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CompositorFilterKeyframe", %"class.blink::CompositorFilterKeyframe"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink24CompositorFilterKeyframeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::CompositorFilterKeyframe", %"class.blink::CompositorFilterKeyframe"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.cc::FilterKeyframe"*, %"class.cc::FilterKeyframe"** %3, align 8
  store %"class.cc::FilterKeyframe"* null, %"class.cc::FilterKeyframe"** %3, align 8
  %5 = icmp eq %"class.cc::FilterKeyframe"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.cc::FilterKeyframe"* %4 to void (%"class.cc::FilterKeyframe"*)***
  %8 = load void (%"class.cc::FilterKeyframe"*)**, void (%"class.cc::FilterKeyframe"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.cc::FilterKeyframe"*)*, void (%"class.cc::FilterKeyframe"*)** %8, i64 1
  %10 = load void (%"class.cc::FilterKeyframe"*)*, void (%"class.cc::FilterKeyframe"*)** %9, align 8
  tail call void %10(%"class.cc::FilterKeyframe"* nonnull %4) #6
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.blink::CompositorFilterKeyframe"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK5blink24CompositorFilterKeyframe4TimeEv(%"class.blink::CompositorFilterKeyframe"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CompositorFilterKeyframe", %"class.blink::CompositorFilterKeyframe"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.cc::FilterKeyframe"*, %"class.cc::FilterKeyframe"** %2, align 8
  %4 = getelementptr inbounds %"class.cc::FilterKeyframe", %"class.cc::FilterKeyframe"* %3, i64 0, i32 0
  %5 = tail call i64 @_ZNK3gfx8Keyframe4TimeEv(%"class.gfx::Keyframe"* %4) #6
  %6 = add i64 %5, -9223372036854775807
  %7 = icmp ult i64 %6, 2
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = sitofp i64 %5 to double
  %10 = fdiv double %9, 1.000000e+06
  br label %14

11:                                               ; preds = %1
  %12 = icmp slt i64 %5, 0
  %13 = select i1 %12, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %14

14:                                               ; preds = %8, %11
  %15 = phi double [ %13, %11 ], [ %10, %8 ]
  ret double %15
}

declare i64 @_ZNK3gfx8Keyframe4TimeEv(%"class.gfx::Keyframe"*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.gfx::TimingFunction"* @_ZNK5blink24CompositorFilterKeyframe16CcTimingFunctionEv(%"class.blink::CompositorFilterKeyframe"* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.blink::CompositorFilterKeyframe", %"class.blink::CompositorFilterKeyframe"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.cc::FilterKeyframe"*, %"class.cc::FilterKeyframe"** %2, align 8
  %4 = getelementptr inbounds %"class.cc::FilterKeyframe", %"class.cc::FilterKeyframe"* %3, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %5 = load %"class.gfx::TimingFunction"*, %"class.gfx::TimingFunction"** %4, align 8
  ret %"class.gfx::TimingFunction"* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.cc::FilterKeyframe"* @_ZNK5blink24CompositorFilterKeyframe9CloneToCCEv(%"class.blink::CompositorFilterKeyframe"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CompositorFilterKeyframe", %"class.blink::CompositorFilterKeyframe"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.cc::FilterKeyframe"*, %"class.cc::FilterKeyframe"** %2, align 8
  %4 = tail call %"class.cc::FilterKeyframe"* @_ZNK2cc14FilterKeyframe5CloneEv(%"class.cc::FilterKeyframe"* %3) #6
  ret %"class.cc::FilterKeyframe"* %4
}

declare %"class.cc::FilterKeyframe"* @_ZNK2cc14FilterKeyframe5CloneEv(%"class.cc::FilterKeyframe"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
