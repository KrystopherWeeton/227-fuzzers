; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/x86/ml_sse3.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/x86/ml_sse3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.NN_CONFIG = type { i32, i32, i32, [10 x i32], [11 x float*], [11 x float*] }

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_nn_predict_sse3(float* nocapture readonly, %struct.NN_CONFIG* nocapture readonly, i32, float*) local_unnamed_addr #0 {
  %5 = alloca [2 x [128 x float]], align 16
  %6 = bitcast [2 x [128 x float]]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %6) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -1, i64 1024, i1 false)
  %7 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 1
  br label %16

14:                                               ; preds = %520, %4
  %15 = icmp eq i32 %2, 0
  br i1 %15, label %529, label %526

16:                                               ; preds = %520, %10
  %17 = phi i64 [ %522, %520 ], [ 0, %10 ]
  %18 = phi i32 [ %523, %520 ], [ %8, %10 ]
  %19 = phi float* [ %30, %520 ], [ %0, %10 ]
  %20 = phi i32 [ %521, %520 ], [ 0, %10 ]
  %21 = phi i32 [ %33, %520 ], [ %12, %10 ]
  %22 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 4, i64 %17
  %23 = load float*, float** %22, align 8
  %24 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 5, i64 %17
  %25 = load float*, float** %24, align 8
  %26 = zext i32 %18 to i64
  %27 = icmp eq i64 %17, %26
  %28 = sext i32 %20 to i64
  %29 = getelementptr inbounds [2 x [128 x float]], [2 x [128 x float]]* %5, i64 0, i64 %28, i64 0
  %30 = select i1 %27, float* %3, float* %29
  %31 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 3, i64 %17
  %32 = select i1 %27, i32* %13, i32* %31
  %33 = load i32, i32* %32, align 4
  %34 = and i32 %21, 3
  %35 = icmp eq i32 %34, 0
  %36 = and i32 %33, 7
  %37 = or i32 %36, %34
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %127

39:                                               ; preds = %16
  %40 = icmp sgt i32 %33, 0
  br i1 %40, label %41, label %520

41:                                               ; preds = %39
  %42 = icmp sgt i32 %21, 0
  %43 = sext i32 %21 to i64
  %44 = shl nsw i64 %43, 1
  %45 = mul nsw i64 %43, 3
  %46 = shl nsw i64 %43, 2
  %47 = mul nsw i64 %43, 5
  %48 = mul nsw i64 %43, 6
  %49 = mul nsw i64 %43, 7
  %50 = sext i32 %33 to i64
  br label %51

51:                                               ; preds = %41, %118
  %52 = phi i64 [ 0, %41 ], [ %125, %118 ]
  %53 = or i64 %52, 4
  %54 = getelementptr inbounds float, float* %25, i64 %53
  %55 = bitcast float* %54 to <4 x float>*
  %56 = load <4 x float>, <4 x float>* %55, align 1
  %57 = getelementptr inbounds float, float* %25, i64 %52
  %58 = bitcast float* %57 to <4 x float>*
  %59 = load <4 x float>, <4 x float>* %58, align 1
  br i1 %42, label %60, label %62

60:                                               ; preds = %51
  %61 = mul nsw i64 %52, %43
  br label %65

62:                                               ; preds = %65, %51
  %63 = phi <4 x float> [ %56, %51 ], [ %111, %65 ]
  %64 = phi <4 x float> [ %59, %51 ], [ %112, %65 ]
  br i1 %27, label %118, label %115

65:                                               ; preds = %60, %65
  %66 = phi i64 [ 0, %60 ], [ %113, %65 ]
  %67 = phi <4 x float> [ %59, %60 ], [ %112, %65 ]
  %68 = phi <4 x float> [ %56, %60 ], [ %111, %65 ]
  %69 = getelementptr inbounds float, float* %19, i64 %66
  %70 = add nsw i64 %66, %61
  %71 = getelementptr inbounds float, float* %23, i64 %70
  %72 = bitcast float* %69 to <4 x float>*
  %73 = load <4 x float>, <4 x float>* %72, align 1
  %74 = bitcast float* %71 to <4 x float>*
  %75 = load <4 x float>, <4 x float>* %74, align 1
  %76 = getelementptr inbounds float, float* %71, i64 %43
  %77 = bitcast float* %76 to <4 x float>*
  %78 = load <4 x float>, <4 x float>* %77, align 1
  %79 = fmul <4 x float> %73, %75
  %80 = fmul <4 x float> %73, %78
  %81 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %79, <4 x float> %80) #4
  %82 = getelementptr inbounds float, float* %71, i64 %44
  %83 = bitcast float* %82 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 1
  %85 = getelementptr inbounds float, float* %71, i64 %45
  %86 = bitcast float* %85 to <4 x float>*
  %87 = load <4 x float>, <4 x float>* %86, align 1
  %88 = fmul <4 x float> %73, %84
  %89 = fmul <4 x float> %73, %87
  %90 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %88, <4 x float> %89) #4
  %91 = getelementptr inbounds float, float* %71, i64 %46
  %92 = bitcast float* %91 to <4 x float>*
  %93 = load <4 x float>, <4 x float>* %92, align 1
  %94 = getelementptr inbounds float, float* %71, i64 %47
  %95 = bitcast float* %94 to <4 x float>*
  %96 = load <4 x float>, <4 x float>* %95, align 1
  %97 = fmul <4 x float> %73, %93
  %98 = fmul <4 x float> %73, %96
  %99 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %97, <4 x float> %98) #4
  %100 = getelementptr inbounds float, float* %71, i64 %48
  %101 = bitcast float* %100 to <4 x float>*
  %102 = load <4 x float>, <4 x float>* %101, align 1
  %103 = getelementptr inbounds float, float* %71, i64 %49
  %104 = bitcast float* %103 to <4 x float>*
  %105 = load <4 x float>, <4 x float>* %104, align 1
  %106 = fmul <4 x float> %73, %102
  %107 = fmul <4 x float> %73, %105
  %108 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %106, <4 x float> %107) #4
  %109 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %81, <4 x float> %90) #4
  %110 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %99, <4 x float> %108) #4
  %111 = fadd <4 x float> %68, %110
  %112 = fadd <4 x float> %67, %109
  %113 = add nuw nsw i64 %66, 4
  %114 = icmp slt i64 %113, %43
  br i1 %114, label %65, label %62

115:                                              ; preds = %62
  %116 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %63, <4 x float> zeroinitializer) #4
  %117 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %64, <4 x float> zeroinitializer) #4
  br label %118

118:                                              ; preds = %115, %62
  %119 = phi <4 x float> [ %63, %62 ], [ %116, %115 ]
  %120 = phi <4 x float> [ %64, %62 ], [ %117, %115 ]
  %121 = getelementptr inbounds float, float* %30, i64 %53
  %122 = bitcast float* %121 to <4 x float>*
  store <4 x float> %119, <4 x float>* %122, align 1
  %123 = getelementptr inbounds float, float* %30, i64 %52
  %124 = bitcast float* %123 to <4 x float>*
  store <4 x float> %120, <4 x float>* %124, align 1
  %125 = add nuw nsw i64 %52, 8
  %126 = icmp slt i64 %125, %50
  br i1 %126, label %51, label %520

127:                                              ; preds = %16
  %128 = and i32 %21, 7
  %129 = icmp eq i32 %128, 0
  %130 = and i32 %33, 3
  %131 = or i32 %130, %128
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %213

133:                                              ; preds = %127
  %134 = icmp sgt i32 %33, 0
  br i1 %134, label %135, label %520

135:                                              ; preds = %133
  %136 = icmp sgt i32 %21, 0
  %137 = sext i32 %21 to i64
  %138 = add nsw i64 %137, 4
  %139 = shl nsw i64 %137, 1
  %140 = add nsw i64 %139, 4
  %141 = mul nsw i64 %137, 3
  %142 = add nsw i64 %141, 4
  %143 = sext i32 %33 to i64
  br label %144

144:                                              ; preds = %135, %207
  %145 = phi i64 [ 0, %135 ], [ %211, %207 ]
  %146 = getelementptr inbounds float, float* %25, i64 %145
  %147 = bitcast float* %146 to <4 x float>*
  %148 = load <4 x float>, <4 x float>* %147, align 1
  br i1 %136, label %149, label %151

149:                                              ; preds = %144
  %150 = mul nsw i64 %145, %137
  br label %153

151:                                              ; preds = %153, %144
  %152 = phi <4 x float> [ %148, %144 ], [ %202, %153 ]
  br i1 %27, label %207, label %205

153:                                              ; preds = %149, %153
  %154 = phi i64 [ 0, %149 ], [ %203, %153 ]
  %155 = phi <4 x float> [ %148, %149 ], [ %202, %153 ]
  %156 = getelementptr inbounds float, float* %19, i64 %154
  %157 = add nsw i64 %154, %150
  %158 = getelementptr inbounds float, float* %23, i64 %157
  %159 = getelementptr inbounds float, float* %156, i64 4
  %160 = bitcast float* %159 to <4 x float>*
  %161 = load <4 x float>, <4 x float>* %160, align 1
  %162 = bitcast float* %156 to <4 x float>*
  %163 = load <4 x float>, <4 x float>* %162, align 1
  %164 = getelementptr inbounds float, float* %158, i64 4
  %165 = bitcast float* %164 to <4 x float>*
  %166 = load <4 x float>, <4 x float>* %165, align 1
  %167 = bitcast float* %158 to <4 x float>*
  %168 = load <4 x float>, <4 x float>* %167, align 1
  %169 = fmul <4 x float> %161, %166
  %170 = fmul <4 x float> %163, %168
  %171 = fadd <4 x float> %169, %170
  %172 = getelementptr inbounds float, float* %158, i64 %138
  %173 = bitcast float* %172 to <4 x float>*
  %174 = load <4 x float>, <4 x float>* %173, align 1
  %175 = getelementptr inbounds float, float* %158, i64 %137
  %176 = bitcast float* %175 to <4 x float>*
  %177 = load <4 x float>, <4 x float>* %176, align 1
  %178 = fmul <4 x float> %161, %174
  %179 = fmul <4 x float> %163, %177
  %180 = fadd <4 x float> %178, %179
  %181 = getelementptr inbounds float, float* %158, i64 %140
  %182 = bitcast float* %181 to <4 x float>*
  %183 = load <4 x float>, <4 x float>* %182, align 1
  %184 = getelementptr inbounds float, float* %158, i64 %139
  %185 = bitcast float* %184 to <4 x float>*
  %186 = load <4 x float>, <4 x float>* %185, align 1
  %187 = fmul <4 x float> %161, %183
  %188 = fmul <4 x float> %163, %186
  %189 = fadd <4 x float> %187, %188
  %190 = getelementptr inbounds float, float* %158, i64 %142
  %191 = bitcast float* %190 to <4 x float>*
  %192 = load <4 x float>, <4 x float>* %191, align 1
  %193 = getelementptr inbounds float, float* %158, i64 %141
  %194 = bitcast float* %193 to <4 x float>*
  %195 = load <4 x float>, <4 x float>* %194, align 1
  %196 = fmul <4 x float> %161, %192
  %197 = fmul <4 x float> %163, %195
  %198 = fadd <4 x float> %196, %197
  %199 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %189, <4 x float> %198) #4
  %200 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %171, <4 x float> %180) #4
  %201 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %200, <4 x float> %199) #4
  %202 = fadd <4 x float> %155, %201
  %203 = add nuw nsw i64 %154, 8
  %204 = icmp slt i64 %203, %137
  br i1 %204, label %153, label %151

205:                                              ; preds = %151
  %206 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %152, <4 x float> zeroinitializer) #4
  br label %207

207:                                              ; preds = %205, %151
  %208 = phi <4 x float> [ %152, %151 ], [ %206, %205 ]
  %209 = getelementptr inbounds float, float* %30, i64 %145
  %210 = bitcast float* %209 to <4 x float>*
  store <4 x float> %208, <4 x float>* %210, align 1
  %211 = add nuw nsw i64 %145, 4
  %212 = icmp slt i64 %211, %143
  br i1 %212, label %144, label %520

213:                                              ; preds = %127
  %214 = or i32 %33, %21
  %215 = and i32 %214, 3
  %216 = icmp eq i32 %215, 0
  %217 = icmp sgt i32 %33, 0
  br i1 %216, label %218, label %271

218:                                              ; preds = %213
  br i1 %217, label %219, label %520

219:                                              ; preds = %218
  %220 = icmp sgt i32 %21, 0
  %221 = sext i32 %21 to i64
  %222 = shl nsw i64 %221, 1
  %223 = mul nsw i64 %221, 3
  %224 = sext i32 %33 to i64
  br label %225

225:                                              ; preds = %219, %265
  %226 = phi i64 [ 0, %219 ], [ %269, %265 ]
  %227 = getelementptr inbounds float, float* %25, i64 %226
  %228 = bitcast float* %227 to <4 x float>*
  %229 = load <4 x float>, <4 x float>* %228, align 1
  br i1 %220, label %230, label %232

230:                                              ; preds = %225
  %231 = mul nsw i64 %226, %221
  br label %234

232:                                              ; preds = %234, %225
  %233 = phi <4 x float> [ %229, %225 ], [ %260, %234 ]
  br i1 %27, label %265, label %263

234:                                              ; preds = %230, %234
  %235 = phi i64 [ 0, %230 ], [ %261, %234 ]
  %236 = phi <4 x float> [ %229, %230 ], [ %260, %234 ]
  %237 = getelementptr inbounds float, float* %19, i64 %235
  %238 = add nsw i64 %235, %231
  %239 = getelementptr inbounds float, float* %23, i64 %238
  %240 = bitcast float* %237 to <4 x float>*
  %241 = load <4 x float>, <4 x float>* %240, align 1
  %242 = bitcast float* %239 to <4 x float>*
  %243 = load <4 x float>, <4 x float>* %242, align 1
  %244 = fmul <4 x float> %241, %243
  %245 = getelementptr inbounds float, float* %239, i64 %221
  %246 = bitcast float* %245 to <4 x float>*
  %247 = load <4 x float>, <4 x float>* %246, align 1
  %248 = fmul <4 x float> %241, %247
  %249 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %244, <4 x float> %248) #4
  %250 = getelementptr inbounds float, float* %239, i64 %222
  %251 = bitcast float* %250 to <4 x float>*
  %252 = load <4 x float>, <4 x float>* %251, align 1
  %253 = fmul <4 x float> %241, %252
  %254 = getelementptr inbounds float, float* %239, i64 %223
  %255 = bitcast float* %254 to <4 x float>*
  %256 = load <4 x float>, <4 x float>* %255, align 1
  %257 = fmul <4 x float> %241, %256
  %258 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %253, <4 x float> %257) #4
  %259 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %249, <4 x float> %258) #4
  %260 = fadd <4 x float> %236, %259
  %261 = add nuw nsw i64 %235, 4
  %262 = icmp slt i64 %261, %221
  br i1 %262, label %234, label %232

263:                                              ; preds = %232
  %264 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %233, <4 x float> zeroinitializer) #4
  br label %265

265:                                              ; preds = %263, %232
  %266 = phi <4 x float> [ %233, %232 ], [ %264, %263 ]
  %267 = getelementptr inbounds float, float* %30, i64 %226
  %268 = bitcast float* %267 to <4 x float>*
  store <4 x float> %266, <4 x float>* %268, align 1
  %269 = add nuw nsw i64 %226, 4
  %270 = icmp slt i64 %269, %224
  br i1 %270, label %225, label %520

271:                                              ; preds = %213
  br i1 %129, label %272, label %372

272:                                              ; preds = %271
  br i1 %217, label %273, label %520

273:                                              ; preds = %272
  %274 = icmp sgt i32 %21, 0
  %275 = sext i32 %21 to i64
  %276 = zext i32 %33 to i64
  %277 = add nsw i64 %275, -1
  %278 = lshr i64 %277, 3
  %279 = add nuw nsw i64 %278, 1
  %280 = and i64 %279, 1
  %281 = icmp eq i64 %278, 0
  %282 = sub nuw nsw i64 %279, %280
  %283 = icmp eq i64 %280, 0
  br label %284

284:                                              ; preds = %366, %273
  %285 = phi i64 [ 0, %273 ], [ %370, %366 ]
  %286 = getelementptr inbounds float, float* %25, i64 %285
  %287 = load float, float* %286, align 1
  %288 = insertelement <4 x float> undef, float %287, i32 0
  %289 = shufflevector <4 x float> %288, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %274, label %290, label %316

290:                                              ; preds = %284
  %291 = mul nsw i64 %285, %275
  br i1 %281, label %292, label %318

292:                                              ; preds = %318, %290
  %293 = phi <4 x float> [ undef, %290 ], [ %360, %318 ]
  %294 = phi i64 [ 0, %290 ], [ %361, %318 ]
  %295 = phi <4 x float> [ %289, %290 ], [ %360, %318 ]
  br i1 %283, label %316, label %296

296:                                              ; preds = %292
  %297 = getelementptr inbounds float, float* %19, i64 %294
  %298 = add nsw i64 %294, %291
  %299 = getelementptr inbounds float, float* %23, i64 %298
  %300 = getelementptr inbounds float, float* %297, i64 4
  %301 = bitcast float* %300 to <4 x float>*
  %302 = load <4 x float>, <4 x float>* %301, align 1
  %303 = bitcast float* %297 to <4 x float>*
  %304 = load <4 x float>, <4 x float>* %303, align 1
  %305 = getelementptr inbounds float, float* %299, i64 4
  %306 = bitcast float* %305 to <4 x float>*
  %307 = load <4 x float>, <4 x float>* %306, align 1
  %308 = bitcast float* %299 to <4 x float>*
  %309 = load <4 x float>, <4 x float>* %308, align 1
  %310 = fmul <4 x float> %302, %307
  %311 = fmul <4 x float> %304, %309
  %312 = fadd <4 x float> %310, %311
  %313 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %312, <4 x float> %312) #4
  %314 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %313, <4 x float> %313) #4
  %315 = fadd <4 x float> %295, %314
  br label %316

316:                                              ; preds = %296, %292, %284
  %317 = phi <4 x float> [ %289, %284 ], [ %293, %292 ], [ %315, %296 ]
  br i1 %27, label %366, label %364

318:                                              ; preds = %290, %318
  %319 = phi i64 [ %361, %318 ], [ 0, %290 ]
  %320 = phi <4 x float> [ %360, %318 ], [ %289, %290 ]
  %321 = phi i64 [ %362, %318 ], [ %282, %290 ]
  %322 = getelementptr inbounds float, float* %19, i64 %319
  %323 = add nsw i64 %319, %291
  %324 = getelementptr inbounds float, float* %23, i64 %323
  %325 = getelementptr inbounds float, float* %322, i64 4
  %326 = bitcast float* %325 to <4 x float>*
  %327 = load <4 x float>, <4 x float>* %326, align 1
  %328 = bitcast float* %322 to <4 x float>*
  %329 = load <4 x float>, <4 x float>* %328, align 1
  %330 = getelementptr inbounds float, float* %324, i64 4
  %331 = bitcast float* %330 to <4 x float>*
  %332 = load <4 x float>, <4 x float>* %331, align 1
  %333 = bitcast float* %324 to <4 x float>*
  %334 = load <4 x float>, <4 x float>* %333, align 1
  %335 = fmul <4 x float> %327, %332
  %336 = fmul <4 x float> %329, %334
  %337 = fadd <4 x float> %335, %336
  %338 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %337, <4 x float> %337) #4
  %339 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %338, <4 x float> %338) #4
  %340 = fadd <4 x float> %320, %339
  %341 = or i64 %319, 8
  %342 = getelementptr inbounds float, float* %19, i64 %341
  %343 = add nsw i64 %341, %291
  %344 = getelementptr inbounds float, float* %23, i64 %343
  %345 = getelementptr inbounds float, float* %342, i64 4
  %346 = bitcast float* %345 to <4 x float>*
  %347 = load <4 x float>, <4 x float>* %346, align 1
  %348 = bitcast float* %342 to <4 x float>*
  %349 = load <4 x float>, <4 x float>* %348, align 1
  %350 = getelementptr inbounds float, float* %344, i64 4
  %351 = bitcast float* %350 to <4 x float>*
  %352 = load <4 x float>, <4 x float>* %351, align 1
  %353 = bitcast float* %344 to <4 x float>*
  %354 = load <4 x float>, <4 x float>* %353, align 1
  %355 = fmul <4 x float> %347, %352
  %356 = fmul <4 x float> %349, %354
  %357 = fadd <4 x float> %355, %356
  %358 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %357, <4 x float> %357) #4
  %359 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %358, <4 x float> %358) #4
  %360 = fadd <4 x float> %340, %359
  %361 = add nuw nsw i64 %319, 16
  %362 = add i64 %321, -2
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %292, label %318

364:                                              ; preds = %316
  %365 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %317, <4 x float> zeroinitializer) #4
  br label %366

366:                                              ; preds = %364, %316
  %367 = phi <4 x float> [ %317, %316 ], [ %365, %364 ]
  %368 = extractelement <4 x float> %367, i32 0
  %369 = getelementptr inbounds float, float* %30, i64 %285
  store float %368, float* %369, align 4
  %370 = add nuw nsw i64 %285, 1
  %371 = icmp eq i64 %370, %276
  br i1 %371, label %520, label %284

372:                                              ; preds = %271
  br i1 %35, label %383, label %373

373:                                              ; preds = %372
  br i1 %217, label %374, label %520

374:                                              ; preds = %373
  %375 = icmp sgt i32 %21, 0
  %376 = sext i32 %21 to i64
  %377 = zext i32 %33 to i64
  %378 = zext i32 %21 to i64
  %379 = and i64 %378, 1
  %380 = icmp eq i32 %21, 1
  %381 = sub nsw i64 %378, %379
  %382 = icmp eq i64 %379, 0
  br label %459

383:                                              ; preds = %372
  br i1 %217, label %384, label %520

384:                                              ; preds = %383
  %385 = icmp sgt i32 %21, 0
  %386 = sext i32 %21 to i64
  %387 = zext i32 %33 to i64
  %388 = add nsw i64 %386, -1
  %389 = lshr i64 %388, 2
  %390 = add nuw nsw i64 %389, 1
  %391 = and i64 %390, 1
  %392 = icmp eq i64 %389, 0
  %393 = sub nuw nsw i64 %390, %391
  %394 = icmp eq i64 %391, 0
  br label %395

395:                                              ; preds = %453, %384
  %396 = phi i64 [ 0, %384 ], [ %457, %453 ]
  %397 = getelementptr inbounds float, float* %25, i64 %396
  %398 = load float, float* %397, align 1
  %399 = insertelement <4 x float> undef, float %398, i32 0
  %400 = shufflevector <4 x float> %399, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %385, label %401, label %419

401:                                              ; preds = %395
  %402 = mul nsw i64 %396, %386
  br i1 %392, label %403, label %421

403:                                              ; preds = %421, %401
  %404 = phi <4 x float> [ undef, %401 ], [ %447, %421 ]
  %405 = phi i64 [ 0, %401 ], [ %448, %421 ]
  %406 = phi <4 x float> [ %400, %401 ], [ %447, %421 ]
  br i1 %394, label %419, label %407

407:                                              ; preds = %403
  %408 = getelementptr inbounds float, float* %19, i64 %405
  %409 = add nsw i64 %405, %402
  %410 = getelementptr inbounds float, float* %23, i64 %409
  %411 = bitcast float* %408 to <4 x float>*
  %412 = load <4 x float>, <4 x float>* %411, align 1
  %413 = bitcast float* %410 to <4 x float>*
  %414 = load <4 x float>, <4 x float>* %413, align 1
  %415 = fmul <4 x float> %412, %414
  %416 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %415, <4 x float> %415) #4
  %417 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %416, <4 x float> %416) #4
  %418 = fadd <4 x float> %406, %417
  br label %419

419:                                              ; preds = %407, %403, %395
  %420 = phi <4 x float> [ %400, %395 ], [ %404, %403 ], [ %418, %407 ]
  br i1 %27, label %453, label %451

421:                                              ; preds = %401, %421
  %422 = phi i64 [ %448, %421 ], [ 0, %401 ]
  %423 = phi <4 x float> [ %447, %421 ], [ %400, %401 ]
  %424 = phi i64 [ %449, %421 ], [ %393, %401 ]
  %425 = getelementptr inbounds float, float* %19, i64 %422
  %426 = add nsw i64 %422, %402
  %427 = getelementptr inbounds float, float* %23, i64 %426
  %428 = bitcast float* %425 to <4 x float>*
  %429 = load <4 x float>, <4 x float>* %428, align 1
  %430 = bitcast float* %427 to <4 x float>*
  %431 = load <4 x float>, <4 x float>* %430, align 1
  %432 = fmul <4 x float> %429, %431
  %433 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %432, <4 x float> %432) #4
  %434 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %433, <4 x float> %433) #4
  %435 = fadd <4 x float> %423, %434
  %436 = or i64 %422, 4
  %437 = getelementptr inbounds float, float* %19, i64 %436
  %438 = add nsw i64 %436, %402
  %439 = getelementptr inbounds float, float* %23, i64 %438
  %440 = bitcast float* %437 to <4 x float>*
  %441 = load <4 x float>, <4 x float>* %440, align 1
  %442 = bitcast float* %439 to <4 x float>*
  %443 = load <4 x float>, <4 x float>* %442, align 1
  %444 = fmul <4 x float> %441, %443
  %445 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %444, <4 x float> %444) #4
  %446 = tail call <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float> %445, <4 x float> %445) #4
  %447 = fadd <4 x float> %435, %446
  %448 = add nuw nsw i64 %422, 8
  %449 = add i64 %424, -2
  %450 = icmp eq i64 %449, 0
  br i1 %450, label %403, label %421

451:                                              ; preds = %419
  %452 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %420, <4 x float> zeroinitializer) #4
  br label %453

453:                                              ; preds = %451, %419
  %454 = phi <4 x float> [ %420, %419 ], [ %452, %451 ]
  %455 = extractelement <4 x float> %454, i32 0
  %456 = getelementptr inbounds float, float* %30, i64 %396
  store float %455, float* %456, align 4
  %457 = add nuw nsw i64 %396, 1
  %458 = icmp eq i64 %457, %387
  br i1 %458, label %520, label %395

459:                                              ; preds = %514, %374
  %460 = phi i64 [ 0, %374 ], [ %518, %514 ]
  %461 = getelementptr inbounds float, float* %25, i64 %460
  %462 = load float, float* %461, align 1
  %463 = insertelement <4 x float> undef, float %462, i32 0
  %464 = shufflevector <4 x float> %463, <4 x float> undef, <4 x i32> zeroinitializer
  br i1 %375, label %465, label %482

465:                                              ; preds = %459
  %466 = mul nsw i64 %460, %376
  br i1 %380, label %467, label %484

467:                                              ; preds = %484, %465
  %468 = phi <4 x float> [ undef, %465 ], [ %508, %484 ]
  %469 = phi i64 [ 0, %465 ], [ %509, %484 ]
  %470 = phi <4 x float> [ %464, %465 ], [ %508, %484 ]
  br i1 %382, label %482, label %471

471:                                              ; preds = %467
  %472 = getelementptr inbounds float, float* %19, i64 %469
  %473 = load float, float* %472, align 1
  %474 = insertelement <4 x float> undef, float %473, i32 0
  %475 = add nsw i64 %469, %466
  %476 = getelementptr inbounds float, float* %23, i64 %475
  %477 = load float, float* %476, align 1
  %478 = insertelement <4 x float> undef, float %477, i32 0
  %479 = fmul <4 x float> %474, %478
  %480 = shufflevector <4 x float> %479, <4 x float> undef, <4 x i32> zeroinitializer
  %481 = fadd <4 x float> %470, %480
  br label %482

482:                                              ; preds = %471, %467, %459
  %483 = phi <4 x float> [ %464, %459 ], [ %468, %467 ], [ %481, %471 ]
  br i1 %27, label %514, label %512

484:                                              ; preds = %465, %484
  %485 = phi i64 [ %509, %484 ], [ 0, %465 ]
  %486 = phi <4 x float> [ %508, %484 ], [ %464, %465 ]
  %487 = phi i64 [ %510, %484 ], [ %381, %465 ]
  %488 = getelementptr inbounds float, float* %19, i64 %485
  %489 = load float, float* %488, align 1
  %490 = insertelement <4 x float> undef, float %489, i32 0
  %491 = add nsw i64 %485, %466
  %492 = getelementptr inbounds float, float* %23, i64 %491
  %493 = load float, float* %492, align 1
  %494 = insertelement <4 x float> undef, float %493, i32 0
  %495 = fmul <4 x float> %490, %494
  %496 = shufflevector <4 x float> %495, <4 x float> undef, <4 x i32> zeroinitializer
  %497 = fadd <4 x float> %486, %496
  %498 = or i64 %485, 1
  %499 = getelementptr inbounds float, float* %19, i64 %498
  %500 = load float, float* %499, align 1
  %501 = insertelement <4 x float> undef, float %500, i32 0
  %502 = add nsw i64 %498, %466
  %503 = getelementptr inbounds float, float* %23, i64 %502
  %504 = load float, float* %503, align 1
  %505 = insertelement <4 x float> undef, float %504, i32 0
  %506 = fmul <4 x float> %501, %505
  %507 = shufflevector <4 x float> %506, <4 x float> undef, <4 x i32> zeroinitializer
  %508 = fadd <4 x float> %497, %507
  %509 = add nuw nsw i64 %485, 2
  %510 = add i64 %487, -2
  %511 = icmp eq i64 %510, 0
  br i1 %511, label %467, label %484

512:                                              ; preds = %482
  %513 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %483, <4 x float> zeroinitializer) #4
  br label %514

514:                                              ; preds = %512, %482
  %515 = phi <4 x float> [ %483, %482 ], [ %513, %512 ]
  %516 = extractelement <4 x float> %515, i32 0
  %517 = getelementptr inbounds float, float* %30, i64 %460
  store float %516, float* %517, align 4
  %518 = add nuw nsw i64 %460, 1
  %519 = icmp eq i64 %518, %377
  br i1 %519, label %520, label %459

520:                                              ; preds = %514, %453, %366, %265, %207, %118, %373, %383, %272, %218, %133, %39
  %521 = sub nsw i32 1, %20
  %522 = add nuw nsw i64 %17, 1
  %523 = load i32, i32* %7, align 8
  %524 = sext i32 %523 to i64
  %525 = icmp slt i64 %17, %524
  br i1 %525, label %16, label %14

526:                                              ; preds = %14
  %527 = getelementptr inbounds %struct.NN_CONFIG, %struct.NN_CONFIG* %1, i64 0, i32 1
  %528 = load i32, i32* %527, align 4
  tail call void @av1_nn_output_prec_reduce(float* %3, i32 %528) #4
  br label %529

529:                                              ; preds = %14, %526
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %6) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @av1_nn_output_prec_reduce(float*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse3.hadd.ps(<4 x float>, <4 x float>) #3

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.max.ps(<4 x float>, <4 x float>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
