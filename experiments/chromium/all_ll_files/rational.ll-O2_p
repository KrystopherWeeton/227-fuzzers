; ModuleID = '../../third_party/ffmpeg/libavutil/rational.c'
source_filename = "../../third_party/ffmpeg/libavutil/rational.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVRational = type { i32, i32 }

; Function Attrs: nofree nounwind ssp uwtable writeonly
define hidden i32 @av_reduce(i32* nocapture, i32* nocapture, i64, i64, i64) local_unnamed_addr #0 {
  %6 = xor i64 %3, %2
  %7 = icmp slt i64 %2, 0
  %8 = sub nsw i64 0, %2
  %9 = select i1 %7, i64 %8, i64 %2
  %10 = icmp slt i64 %3, 0
  %11 = sub nsw i64 0, %3
  %12 = select i1 %10, i64 %11, i64 %3
  %13 = tail call i64 @av_gcd(i64 %9, i64 %12) #7
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %5
  %16 = sdiv i64 %9, %13
  %17 = sdiv i64 %12, %13
  br label %18

18:                                               ; preds = %5, %15
  %19 = phi i64 [ %17, %15 ], [ %3, %5 ]
  %20 = phi i64 [ %16, %15 ], [ %2, %5 ]
  %21 = icmp sgt i64 %20, %4
  %22 = icmp sgt i64 %19, %4
  %23 = or i1 %22, %21
  %24 = trunc i64 %20 to i32
  %25 = trunc i64 %19 to i32
  %26 = select i1 %23, i32 1, i32 %24
  %27 = select i1 %23, i32 0, i32 %25
  %28 = icmp eq i64 %19, 0
  %29 = or i1 %22, %21
  %30 = xor i1 %29, true
  %31 = or i1 %28, %30
  br i1 %31, label %87, label %32

32:                                               ; preds = %18, %78
  %33 = phi i64 [ %34, %78 ], [ %20, %18 ]
  %34 = phi i64 [ %80, %78 ], [ %19, %18 ]
  %35 = phi i32 [ %37, %78 ], [ 1, %18 ]
  %36 = phi i32 [ %38, %78 ], [ 0, %18 ]
  %37 = phi i32 [ %82, %78 ], [ %27, %18 ]
  %38 = phi i32 [ %81, %78 ], [ %26, %18 ]
  %39 = sdiv i64 %33, %34
  %40 = sext i32 %38 to i64
  %41 = mul i64 %39, %40
  %42 = sext i32 %36 to i64
  %43 = add i64 %41, %42
  %44 = sext i32 %37 to i64
  %45 = mul i64 %39, %44
  %46 = sext i32 %35 to i64
  %47 = add i64 %45, %46
  %48 = icmp sgt i64 %43, %4
  %49 = icmp sgt i64 %47, %4
  %50 = or i1 %48, %49
  br i1 %50, label %51, label %78

51:                                               ; preds = %32
  %52 = icmp eq i32 %38, 0
  br i1 %52, label %56, label %53

53:                                               ; preds = %51
  %54 = sub nsw i64 %4, %42
  %55 = sdiv i64 %54, %40
  br label %56

56:                                               ; preds = %51, %53
  %57 = phi i64 [ %55, %53 ], [ %39, %51 ]
  %58 = icmp eq i32 %37, 0
  br i1 %58, label %64, label %59

59:                                               ; preds = %56
  %60 = sub nsw i64 %4, %46
  %61 = sdiv i64 %60, %44
  %62 = icmp ugt i64 %57, %61
  %63 = select i1 %62, i64 %61, i64 %57
  br label %64

64:                                               ; preds = %56, %59
  %65 = phi i64 [ %63, %59 ], [ %57, %56 ]
  %66 = shl nsw i64 %44, 1
  %67 = mul i64 %66, %65
  %68 = add i64 %67, %46
  %69 = mul i64 %68, %34
  %70 = mul nsw i64 %33, %44
  %71 = icmp ugt i64 %69, %70
  br i1 %71, label %72, label %87

72:                                               ; preds = %64
  %73 = trunc i64 %65 to i32
  %74 = mul i32 %38, %73
  %75 = add i32 %74, %36
  %76 = mul i32 %37, %73
  %77 = add i32 %76, %35
  br label %87

78:                                               ; preds = %32
  %79 = mul i64 %39, %34
  %80 = sub i64 %33, %79
  %81 = trunc i64 %43 to i32
  %82 = trunc i64 %47 to i32
  %83 = icmp eq i64 %80, 0
  br i1 %83, label %84, label %32

84:                                               ; preds = %78
  %85 = trunc i64 %43 to i32
  %86 = trunc i64 %47 to i32
  br label %87

87:                                               ; preds = %84, %18, %64, %72
  %88 = phi i64 [ %34, %64 ], [ %34, %72 ], [ 0, %18 ], [ 0, %84 ]
  %89 = phi i32 [ %38, %64 ], [ %75, %72 ], [ %26, %18 ], [ %85, %84 ]
  %90 = phi i32 [ %37, %64 ], [ %77, %72 ], [ %27, %18 ], [ %86, %84 ]
  %91 = icmp slt i64 %6, 0
  %92 = sub nsw i32 0, %89
  %93 = select i1 %91, i32 %92, i32 %89
  store i32 %93, i32* %0, align 4
  store i32 %90, i32* %1, align 4
  %94 = icmp eq i64 %88, 0
  %95 = zext i1 %94 to i32
  ret i32 %95
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare i64 @av_gcd(i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @av_mul_q(i64, i64) local_unnamed_addr #3 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to %struct.AVRational*
  store i64 %0, i64* %3, align 8
  %5 = bitcast i64* %3 to i32*
  %6 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %4, i64 0, i32 1
  %7 = shl i64 %0, 32
  %8 = ashr exact i64 %7, 32
  %9 = shl i64 %1, 32
  %10 = ashr exact i64 %9, 32
  %11 = mul nsw i64 %10, %8
  %12 = ashr i64 %0, 32
  %13 = ashr i64 %1, 32
  %14 = mul nsw i64 %13, %12
  %15 = call i32 @av_reduce(i32* nonnull %5, i32* %6, i64 %11, i64 %14, i64 2147483647)
  %16 = load i64, i64* %3, align 8
  ret i64 %16
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @av_div_q(i64, i64) local_unnamed_addr #3 {
  %3 = alloca i64, align 8
  %4 = shl i64 %1, 32
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5)
  %6 = bitcast i64* %3 to %struct.AVRational*
  store i64 %0, i64* %3, align 8
  %7 = bitcast i64* %3 to i32*
  %8 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %6, i64 0, i32 1
  %9 = shl i64 %0, 32
  %10 = ashr exact i64 %9, 32
  %11 = ashr i64 %1, 32
  %12 = mul nsw i64 %11, %10
  %13 = ashr i64 %0, 32
  %14 = ashr exact i64 %4, 32
  %15 = mul nsw i64 %14, %13
  %16 = call i32 @av_reduce(i32* nonnull %7, i32* %8, i64 %12, i64 %15, i64 2147483647) #8
  %17 = load i64, i64* %3, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5)
  ret i64 %17
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @av_add_q(i64, i64) local_unnamed_addr #3 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to %struct.AVRational*
  store i64 %0, i64* %3, align 8
  %5 = bitcast i64* %3 to i32*
  %6 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %4, i64 0, i32 1
  %7 = shl i64 %0, 32
  %8 = ashr exact i64 %7, 32
  %9 = ashr i64 %1, 32
  %10 = mul nsw i64 %9, %8
  %11 = shl i64 %1, 32
  %12 = ashr exact i64 %11, 32
  %13 = ashr i64 %0, 32
  %14 = mul nsw i64 %12, %13
  %15 = add nsw i64 %14, %10
  %16 = mul nsw i64 %9, %13
  %17 = call i32 @av_reduce(i32* nonnull %5, i32* %6, i64 %15, i64 %16, i64 2147483647)
  %18 = load i64, i64* %3, align 8
  ret i64 %18
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @av_sub_q(i64, i64) local_unnamed_addr #3 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4)
  %5 = bitcast i64* %3 to %struct.AVRational*
  store i64 %0, i64* %3, align 8
  %6 = bitcast i64* %3 to i32*
  %7 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %5, i64 0, i32 1
  %8 = shl i64 %0, 32
  %9 = ashr exact i64 %8, 32
  %10 = ashr i64 %1, 32
  %11 = mul nsw i64 %10, %9
  %12 = shl i64 %1, 32
  %13 = sub i64 0, %12
  %14 = ashr exact i64 %13, 32
  %15 = ashr i64 %0, 32
  %16 = mul nsw i64 %14, %15
  %17 = add nsw i64 %16, %11
  %18 = mul nsw i64 %10, %15
  %19 = call i32 @av_reduce(i32* nonnull %6, i32* %7, i64 %17, i64 %18, i64 2147483647) #8
  %20 = load i64, i64* %3, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4)
  ret i64 %20
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @av_d2q(double, i32) local_unnamed_addr #3 {
  %3 = alloca %struct.AVRational, align 4
  %4 = alloca i32, align 4
  %5 = bitcast %struct.AVRational* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %3, i64 0, i32 0
  store i32 -1431655766, i32* %6, align 4
  %7 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %3, i64 0, i32 1
  store i32 -1431655766, i32* %7, align 4
  %8 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #8
  store i32 -1431655766, i32* %4, align 4
  %9 = fcmp nsz uno double %0, 0.000000e+00
  br i1 %9, label %52, label %10

10:                                               ; preds = %2
  %11 = tail call nsz double @llvm.fabs.f64(double %0)
  %12 = fcmp nsz ogt double %11, 0x41E0000000400000
  br i1 %12, label %13, label %16

13:                                               ; preds = %10
  %14 = fcmp nsz olt double %0, 0.000000e+00
  %15 = select i1 %14, i32 -1, i32 1
  br label %52

16:                                               ; preds = %10
  %17 = call nsz double @frexp(double %0, i32* nonnull %4) #8
  %18 = load i32, i32* %4, align 4
  %19 = icmp sgt i32 %18, 1
  %20 = select i1 %19, i32 %18, i32 1
  %21 = add nsw i32 %20, -1
  store i32 %21, i32* %4, align 4
  %22 = sub nsw i32 62, %20
  %23 = zext i32 %22 to i64
  %24 = shl i64 1, %23
  %25 = sitofp i64 %24 to double
  %26 = fmul nsz double %25, %0
  %27 = fadd nsz double %26, 5.000000e-01
  %28 = tail call nsz double @llvm.floor.f64(double %27)
  %29 = fptosi double %28 to i64
  %30 = sext i32 %1 to i64
  %31 = call i32 @av_reduce(i32* nonnull %6, i32* %7, i64 %29, i64 %24, i64 %30)
  %32 = load i32, i32* %6, align 4
  %33 = icmp eq i32 %32, 0
  %34 = load i32, i32* %7, align 4
  %35 = icmp eq i32 %34, 0
  %36 = or i1 %33, %35
  br i1 %36, label %37, label %47

37:                                               ; preds = %16
  %38 = fcmp nsz une double %0, 0.000000e+00
  %39 = icmp sgt i32 %1, 0
  %40 = and i1 %38, %39
  %41 = icmp ne i32 %1, 2147483647
  %42 = and i1 %41, %40
  br i1 %42, label %43, label %47

43:                                               ; preds = %37
  %44 = call i32 @av_reduce(i32* nonnull %6, i32* %7, i64 %29, i64 %24, i64 2147483647)
  %45 = load i32, i32* %6, align 4
  %46 = load i32, i32* %7, align 4
  br label %47

47:                                               ; preds = %16, %43, %37
  %48 = phi i32 [ %34, %16 ], [ %46, %43 ], [ %34, %37 ]
  %49 = phi i32 [ %32, %16 ], [ %45, %43 ], [ %32, %37 ]
  %50 = zext i32 %48 to i64
  %51 = shl nuw i64 %50, 32
  br label %52

52:                                               ; preds = %2, %47, %13
  %53 = phi i32 [ %15, %13 ], [ %49, %47 ], [ 0, %2 ]
  %54 = phi i64 [ 0, %13 ], [ %51, %47 ], [ 0, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %55 = zext i32 %53 to i64
  %56 = or i64 %54, %55
  ret i64 %56
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #4

; Function Attrs: nofree nounwind
declare double @frexp(double, i32* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #4

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @av_nearer_q(i64, i64, i64) local_unnamed_addr #3 {
  %4 = shl i64 %1, 32
  %5 = ashr exact i64 %4, 32
  %6 = ashr i64 %2, 32
  %7 = mul nsw i64 %5, %6
  %8 = shl i64 %2, 32
  %9 = ashr exact i64 %8, 32
  %10 = ashr i64 %1, 32
  %11 = mul nsw i64 %9, %10
  %12 = add nsw i64 %11, %7
  %13 = shl nsw i64 %10, 1
  %14 = mul nsw i64 %13, %6
  %15 = ashr i64 %0, 32
  %16 = tail call i64 @av_rescale_rnd(i64 %12, i64 %15, i64 %14, i32 3) #7
  %17 = tail call i64 @av_rescale_rnd(i64 %12, i64 %15, i64 %14, i32 2) #7
  %18 = shl i64 %0, 32
  %19 = ashr exact i64 %18, 32
  %20 = icmp sgt i64 %16, %19
  %21 = zext i1 %20 to i32
  %22 = icmp slt i64 %17, %19
  %23 = zext i1 %22 to i32
  %24 = sub nsw i32 %21, %23
  %25 = trunc i64 %2 to i32
  %26 = trunc i64 %1 to i32
  %27 = sub nsw i64 %11, %7
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %3
  %30 = xor i64 %6, %10
  %31 = xor i64 %30, %27
  %32 = ashr i64 %31, 63
  %33 = trunc i64 %32 to i32
  %34 = or i32 %33, 1
  br label %47

35:                                               ; preds = %3
  %36 = icmp ugt i64 %1, 4294967295
  %37 = icmp ugt i64 %2, 4294967295
  %38 = and i1 %36, %37
  br i1 %38, label %47, label %39

39:                                               ; preds = %35
  %40 = icmp eq i32 %25, 0
  %41 = icmp eq i32 %26, 0
  %42 = or i1 %41, %40
  br i1 %42, label %47, label %43

43:                                               ; preds = %39
  %44 = ashr i32 %25, 31
  %45 = ashr i32 %26, 31
  %46 = sub nsw i32 %44, %45
  br label %47

47:                                               ; preds = %29, %35, %39, %43
  %48 = phi i32 [ %34, %29 ], [ %46, %43 ], [ 0, %35 ], [ -2147483648, %39 ]
  %49 = mul nsw i32 %48, %24
  ret i32 %49
}

; Function Attrs: nounwind readnone
declare i64 @av_rescale_rnd(i64, i64, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @av_find_nearest_q_idx(i64, %struct.AVRational* nocapture readonly) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %24, label %6

6:                                                ; preds = %2, %6
  %7 = phi i64 [ %20, %6 ], [ 0, %2 ]
  %8 = phi i32 [ %19, %6 ], [ 0, %2 ]
  %9 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %1, i64 %7
  %10 = sext i32 %8 to i64
  %11 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %1, i64 %10
  %12 = bitcast %struct.AVRational* %9 to i64*
  %13 = load i64, i64* %12, align 4
  %14 = bitcast %struct.AVRational* %11 to i64*
  %15 = load i64, i64* %14, align 4
  %16 = tail call i32 @av_nearer_q(i64 %0, i64 %13, i64 %15)
  %17 = icmp sgt i32 %16, 0
  %18 = trunc i64 %7 to i32
  %19 = select i1 %17, i32 %18, i32 %8
  %20 = add nuw i64 %7, 1
  %21 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %1, i64 %20, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %6

24:                                               ; preds = %6, %2
  %25 = phi i32 [ 0, %2 ], [ %19, %6 ]
  ret i32 %25
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @av_q2intfloat(i64) local_unnamed_addr #3 {
  %2 = trunc i64 %0 to i32
  %3 = lshr i64 %0, 32
  %4 = trunc i64 %3 to i32
  %5 = icmp slt i32 %4, 0
  %6 = sub nsw i32 0, %4
  %7 = sub nsw i32 0, %2
  %8 = select i1 %5, i32 %6, i32 %4
  %9 = select i1 %5, i32 %7, i32 %2
  %10 = icmp slt i32 %9, 0
  %11 = sub nsw i32 0, %9
  %12 = select i1 %10, i32 %11, i32 %9
  %13 = and i32 %9, -2147483648
  %14 = icmp eq i32 %2, 0
  %15 = icmp eq i32 %8, 0
  %16 = or i32 %8, %2
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, i32 -4194304, i32 0
  %19 = or i1 %14, %15
  %20 = select i1 %14, i32 %18, i32 2139095040
  br i1 %19, label %70, label %21

21:                                               ; preds = %1
  %22 = or i32 %8, 1
  %23 = tail call i32 @llvm.ctlz.i32(i32 %22, i1 true), !range !2
  %24 = sub nuw nsw i32 54, %23
  %25 = or i32 %12, 1
  %26 = tail call i32 @llvm.ctlz.i32(i32 %25, i1 true), !range !2
  %27 = xor i32 %26, 31
  %28 = sub nsw i32 %24, %27
  %29 = icmp sgt i32 %28, -1
  %30 = zext i32 %12 to i64
  br i1 %29, label %31, label %36

31:                                               ; preds = %21
  %32 = zext i32 %28 to i64
  %33 = shl i64 1, %32
  %34 = zext i32 %8 to i64
  %35 = tail call i64 @av_rescale(i64 %30, i64 %33, i64 %34) #7
  br label %42

36:                                               ; preds = %21
  %37 = zext i32 %8 to i64
  %38 = sub nsw i32 0, %28
  %39 = zext i32 %38 to i64
  %40 = shl i64 %37, %39
  %41 = tail call i64 @av_rescale(i64 %30, i64 1, i64 %40) #7
  br label %42

42:                                               ; preds = %36, %31
  %43 = phi i64 [ %35, %31 ], [ %41, %36 ]
  %44 = icmp sgt i64 %43, 16777215
  %45 = zext i1 %44 to i32
  %46 = sub nsw i32 %28, %45
  %47 = icmp slt i64 %43, 8388608
  %48 = zext i1 %47 to i32
  %49 = add nsw i32 %46, %48
  %50 = icmp sgt i32 %49, -1
  br i1 %50, label %51, label %56

51:                                               ; preds = %42
  %52 = zext i32 %49 to i64
  %53 = shl i64 1, %52
  %54 = zext i32 %8 to i64
  %55 = tail call i64 @av_rescale(i64 %30, i64 %53, i64 %54) #7
  br label %62

56:                                               ; preds = %42
  %57 = zext i32 %8 to i64
  %58 = sub nsw i32 0, %49
  %59 = zext i32 %58 to i64
  %60 = shl i64 %57, %59
  %61 = tail call i64 @av_rescale(i64 %30, i64 1, i64 %60) #7
  br label %62

62:                                               ; preds = %56, %51
  %63 = phi i64 [ %55, %51 ], [ %61, %56 ]
  %64 = shl i32 %49, 23
  %65 = sub i32 1258291200, %64
  %66 = or i32 %65, %13
  %67 = trunc i64 %63 to i32
  %68 = add i32 %67, -8388608
  %69 = or i32 %66, %68
  br label %70

70:                                               ; preds = %1, %62
  %71 = phi i32 [ %69, %62 ], [ %20, %1 ]
  ret i32 %71
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

; Function Attrs: nounwind readnone
declare i64 @av_rescale(i64, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @av_gcd_q(i64, i64, i32, i64) local_unnamed_addr #3 {
  %5 = ashr i64 %0, 32
  %6 = ashr i64 %1, 32
  %7 = tail call i64 @av_gcd(i64 %5, i64 %6) #7
  %8 = sdiv i64 %5, %7
  %9 = mul nsw i64 %8, %6
  %10 = sext i32 %2 to i64
  %11 = icmp slt i64 %9, %10
  br i1 %11, label %12, label %21

12:                                               ; preds = %4
  %13 = shl i64 %0, 32
  %14 = ashr exact i64 %13, 32
  %15 = shl i64 %1, 32
  %16 = ashr exact i64 %15, 32
  %17 = tail call i64 @av_gcd(i64 %14, i64 %16) #7
  %18 = shl i64 %9, 32
  %19 = and i64 %17, 4294967295
  %20 = or i64 %19, %18
  br label %21

21:                                               ; preds = %4, %12
  %22 = phi i64 [ %20, %12 ], [ %3, %4 ]
  ret i64 %22
}

attributes #0 = { nofree nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 32}
