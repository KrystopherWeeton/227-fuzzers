; ModuleID = '../../net/cert/internal/trust_store_collection.cc'
source_filename = "../../net/cert/internal/trust_store_collection.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::TrustStoreCollection" = type { %"class.net::TrustStore", %"class.std::__1::vector" }
%"class.net::TrustStore" = type { %"class.net::CertIssuerSource" }
%"class.net::CertIssuerSource" = type { i32 (...)** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.net::TrustStore"**, %"class.net::TrustStore"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.net::TrustStore"** }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.net::ParsedCertificate" = type { %"class.base::RefCountedThreadSafe", %"class.std::__1::unique_ptr", %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::BitString", %"struct.net::ParsedTbsCertificate", %"class.std::__1::unique_ptr.5", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, %"struct.net::ParsedBasicConstraints", i8, [3 x i8], %"class.net::der::BitString", i8, %"class.std::__1::vector.14", %"struct.net::ParsedExtension", %"class.std::__1::unique_ptr.21", %"class.std::__1::unique_ptr.27", i8, [7 x i8], %"struct.net::ParsedExtension", %"class.std::__1::vector.33", %"class.std::__1::vector.33", i8, %"class.std::__1::vector.14", i8, %"struct.net::ParsedPolicyConstraints", i8, %"class.std::__1::vector.40", i8, i8, %"class.absl::optional", %"class.absl::optional.48", %"class.std::__1::map" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.net::der::Input" = type { i8*, i64 }
%"struct.net::ParsedTbsCertificate" = type { i32, %"class.net::der::Input", %"class.net::der::Input", %"class.net::der::Input", %"struct.net::der::GeneralizedTime", %"struct.net::der::GeneralizedTime", %"class.net::der::Input", %"class.net::der::Input", i8, [7 x i8], %"class.net::der::BitString", i8, [7 x i8], %"class.net::der::BitString", i8, %"class.net::der::Input" }
%"struct.net::der::GeneralizedTime" = type { i16, i8, i8, i8, i8, i8 }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.net::SignatureAlgorithm"* }
%"class.net::SignatureAlgorithm" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.net::ParsedBasicConstraints" = type { i8, i8, i8 }
%"class.net::der::BitString" = type <{ %"class.net::der::Input", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.net::GeneralNames"* }
%"struct.net::GeneralNames" = type opaque
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.net::NameConstraints"* }
%"class.net::NameConstraints" = type opaque
%"struct.net::ParsedExtension" = type <{ %"class.net::der::Input", %"class.net::der::Input", i8, [7 x i8] }>
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.35" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.base::BasicStringPiece"* }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"class.net::der::Input"*, %"class.net::der::Input"*, %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.net::der::Input"* }
%"struct.net::ParsedPolicyConstraints" = type { i8, i8, i8, i8 }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"struct.net::ParsedPolicyMapping"*, %"struct.net::ParsedPolicyMapping"*, %"class.std::__1::__compressed_pair.42" }
%"struct.net::ParsedPolicyMapping" = type { %"class.net::der::Input", %"class.net::der::Input" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.net::ParsedPolicyMapping"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.47 }
%union.anon.47 = type { %"struct.net::ParsedAuthorityKeyIdentifier" }
%"struct.net::ParsedAuthorityKeyIdentifier" = type { %"class.absl::optional.48", %"class.absl::optional.48", %"class.absl::optional.48" }
%"class.absl::optional.48" = type { %"class.absl::optional_internal::optional_data.49" }
%"class.absl::optional_internal::optional_data.49" = type { %"class.absl::optional_internal::optional_data_base.50" }
%"class.absl::optional_internal::optional_data_base.50" = type { %"class.absl::optional_internal::optional_data_dtor_base.51" }
%"class.absl::optional_internal::optional_data_dtor_base.51" = type { i8, %union.anon.52 }
%union.anon.52 = type { %"class.net::der::Input" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.57", %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { i64 }
%"class.std::__1::vector.65" = type opaque
%class.scoped_refptr = type opaque
%"struct.net::CertificateTrust" = type { i32 }
%"class.base::SupportsUserData" = type <{ i32 (...)**, %"class.std::__1::map.66", %"class.base::SequenceCheckerDoNothing", [7 x i8] }>
%"class.std::__1::map.66" = type { %"class.std::__1::__tree.67" }
%"class.std::__1::__tree.67" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.68", %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.std::__1::unique_ptr.78" = type opaque

@_ZTVN3net20TrustStoreCollectionE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::TrustStoreCollection"*)* @_ZN3net20TrustStoreCollectionD2Ev to i8*), i8* bitcast (void (%"class.net::TrustStoreCollection"*)* @_ZN3net20TrustStoreCollectionD0Ev to i8*), i8* bitcast (void (%"class.net::TrustStoreCollection"*, %"class.net::ParsedCertificate"*, %"class.std::__1::vector.65"*)* @_ZN3net20TrustStoreCollection16SyncGetIssuersOfEPKNS_17ParsedCertificateEPNSt3__16vectorI13scoped_refptrIS1_ENS4_9allocatorIS7_EEEE to i8*), i8* bitcast (void (%"class.net::TrustStore"*, %"class.net::ParsedCertificate"*, %"class.std::__1::unique_ptr.78"*)* @_ZN3net10TrustStore17AsyncGetIssuersOfEPKNS_17ParsedCertificateEPNSt3__110unique_ptrINS_16CertIssuerSource7RequestENS4_14default_deleteIS7_EEEE to i8*), i8* bitcast (void (%"class.net::TrustStoreCollection"*, %class.scoped_refptr*, %"struct.net::CertificateTrust"*, %"class.base::SupportsUserData"*)* @_ZNK3net20TrustStoreCollection8GetTrustERK13scoped_refptrINS_17ParsedCertificateEEPNS_16CertificateTrustEPN4base16SupportsUserDataE to i8*)] }, align 8

@_ZN3net20TrustStoreCollectionC1Ev = hidden unnamed_addr alias void (%"class.net::TrustStoreCollection"*), void (%"class.net::TrustStoreCollection"*)* @_ZN3net20TrustStoreCollectionC2Ev
@_ZN3net20TrustStoreCollectionD1Ev = hidden unnamed_addr alias void (%"class.net::TrustStoreCollection"*), void (%"class.net::TrustStoreCollection"*)* @_ZN3net20TrustStoreCollectionD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net20TrustStoreCollectionC2Ev(%"class.net::TrustStoreCollection"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 0
  tail call void @_ZN3net10TrustStoreC2Ev(%"class.net::TrustStore"* %2) #7
  %3 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net20TrustStoreCollectionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::vector"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #7
  ret void
}

declare void @_ZN3net10TrustStoreC2Ev(%"class.net::TrustStore"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net20TrustStoreCollectionD2Ev(%"class.net::TrustStoreCollection"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net20TrustStoreCollectionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.net::TrustStore"**, %"class.net::TrustStore"*** %3, align 8
  %5 = icmp eq %"class.net::TrustStore"** %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.net::TrustStore"** %4 to i64
  %8 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = bitcast %"class.net::TrustStore"*** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"class.net::TrustStore"** %4 to i8*
  tail call void @_ZdlPv(i8* %10) #8
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net20TrustStoreCollectionD0Ev(%"class.net::TrustStoreCollection"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3net20TrustStoreCollectionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.net::TrustStore"**, %"class.net::TrustStore"*** %3, align 8
  %5 = icmp eq %"class.net::TrustStore"** %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.net::TrustStore"** %4 to i64
  %8 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = bitcast %"class.net::TrustStore"*** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"class.net::TrustStore"** %4 to i8*
  tail call void @_ZdlPv(i8* %10) #8
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.net::TrustStoreCollection"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net20TrustStoreCollection13AddTrustStoreEPNS_10TrustStoreE(%"class.net::TrustStoreCollection"*, %"class.net::TrustStore"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.net::TrustStore"* %1 to i64
  %4 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 1, i32 0, i32 1
  %6 = load %"class.net::TrustStore"**, %"class.net::TrustStore"*** %5, align 8
  %7 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %8 = load %"class.net::TrustStore"**, %"class.net::TrustStore"*** %7, align 8
  %9 = icmp eq %"class.net::TrustStore"** %6, %8
  %10 = ptrtoint %"class.net::TrustStore"** %8 to i64
  br i1 %9, label %16, label %11

11:                                               ; preds = %2
  %12 = bitcast %"class.net::TrustStore"** %6 to i64*
  store i64 %3, i64* %12, align 8
  %13 = getelementptr inbounds %"class.net::TrustStore"*, %"class.net::TrustStore"** %6, i64 1
  %14 = ptrtoint %"class.net::TrustStore"** %13 to i64
  %15 = bitcast %"class.net::TrustStore"*** %5 to i64*
  store i64 %14, i64* %15, align 8
  br label %73

16:                                               ; preds = %2
  %17 = ptrtoint %"class.net::TrustStore"** %6 to i64
  %18 = bitcast %"class.net::TrustStore"*** %5 to i64*
  %19 = bitcast %"class.std::__1::vector"* %4 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 3
  %23 = add nsw i64 %22, 1
  %24 = icmp ugt i64 %23, 2305843009213693951
  br i1 %24, label %25, label %27

25:                                               ; preds = %16
  %26 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %26) #9
  unreachable

27:                                               ; preds = %16
  %28 = bitcast %"class.net::TrustStore"*** %7 to i64*
  %29 = sub i64 %10, %20
  %30 = ashr exact i64 %29, 3
  %31 = icmp ult i64 %30, 1152921504606846975
  br i1 %31, label %32, label %40

32:                                               ; preds = %27
  %33 = ashr exact i64 %29, 2
  %34 = icmp ult i64 %33, %23
  %35 = select i1 %34, i64 %23, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = icmp ugt i64 %35, 2305843009213693951
  br i1 %38, label %39, label %40

39:                                               ; preds = %37
  tail call void @abort() #9
  unreachable

40:                                               ; preds = %37, %27
  %41 = phi i64 [ %35, %37 ], [ 2305843009213693951, %27 ]
  %42 = shl i64 %41, 3
  %43 = tail call i8* @_Znwm(i64 %42) #8
  %44 = bitcast i8* %43 to %"class.net::TrustStore"**
  br label %45

45:                                               ; preds = %40, %32
  %46 = phi i64 [ %41, %40 ], [ 0, %32 ]
  %47 = phi %"class.net::TrustStore"** [ %44, %40 ], [ null, %32 ]
  %48 = getelementptr inbounds %"class.net::TrustStore"*, %"class.net::TrustStore"** %47, i64 %22
  %49 = getelementptr inbounds %"class.net::TrustStore"*, %"class.net::TrustStore"** %47, i64 %46
  %50 = ptrtoint %"class.net::TrustStore"** %49 to i64
  %51 = bitcast %"class.net::TrustStore"** %48 to i64*
  store i64 %3, i64* %51, align 8
  %52 = getelementptr inbounds %"class.net::TrustStore"*, %"class.net::TrustStore"** %48, i64 1
  %53 = ptrtoint %"class.net::TrustStore"** %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %55 = load %"class.net::TrustStore"**, %"class.net::TrustStore"*** %54, align 8
  %56 = load i64, i64* %18, align 8
  %57 = ptrtoint %"class.net::TrustStore"** %55 to i64
  %58 = sub i64 %56, %57
  %59 = ashr exact i64 %58, 3
  %60 = sub nsw i64 0, %59
  %61 = getelementptr inbounds %"class.net::TrustStore"*, %"class.net::TrustStore"** %48, i64 %60
  %62 = ptrtoint %"class.net::TrustStore"** %61 to i64
  %63 = icmp sgt i64 %58, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %45
  %65 = bitcast %"class.net::TrustStore"** %61 to i8*
  %66 = bitcast %"class.net::TrustStore"** %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 %58, i1 false) #7
  %67 = load %"class.net::TrustStore"**, %"class.net::TrustStore"*** %54, align 8
  br label %68

68:                                               ; preds = %64, %45
  %69 = phi %"class.net::TrustStore"** [ %55, %45 ], [ %67, %64 ]
  store i64 %62, i64* %19, align 8
  store i64 %53, i64* %18, align 8
  store i64 %50, i64* %28, align 8
  %70 = icmp eq %"class.net::TrustStore"** %69, null
  br i1 %70, label %73, label %71

71:                                               ; preds = %68
  %72 = bitcast %"class.net::TrustStore"** %69 to i8*
  tail call void @_ZdlPv(i8* %72) #8
  br label %73

73:                                               ; preds = %11, %68, %71
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net20TrustStoreCollection16SyncGetIssuersOfEPKNS_17ParsedCertificateEPNSt3__16vectorI13scoped_refptrIS1_ENS4_9allocatorIS7_EEEE(%"class.net::TrustStoreCollection"* nocapture readonly, %"class.net::ParsedCertificate"*, %"class.std::__1::vector.65"*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load %"class.net::TrustStore"**, %"class.net::TrustStore"*** %4, align 8
  %6 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 1, i32 0, i32 1
  %7 = load %"class.net::TrustStore"**, %"class.net::TrustStore"*** %6, align 8
  %8 = icmp eq %"class.net::TrustStore"** %5, %7
  br i1 %8, label %9, label %10

9:                                                ; preds = %10, %3
  ret void

10:                                               ; preds = %3, %10
  %11 = phi %"class.net::TrustStore"** [ %18, %10 ], [ %5, %3 ]
  %12 = bitcast %"class.net::TrustStore"** %11 to %"class.net::CertIssuerSource"**
  %13 = load %"class.net::CertIssuerSource"*, %"class.net::CertIssuerSource"** %12, align 8
  %14 = bitcast %"class.net::CertIssuerSource"* %13 to void (%"class.net::CertIssuerSource"*, %"class.net::ParsedCertificate"*, %"class.std::__1::vector.65"*)***
  %15 = load void (%"class.net::CertIssuerSource"*, %"class.net::ParsedCertificate"*, %"class.std::__1::vector.65"*)**, void (%"class.net::CertIssuerSource"*, %"class.net::ParsedCertificate"*, %"class.std::__1::vector.65"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.net::CertIssuerSource"*, %"class.net::ParsedCertificate"*, %"class.std::__1::vector.65"*)*, void (%"class.net::CertIssuerSource"*, %"class.net::ParsedCertificate"*, %"class.std::__1::vector.65"*)** %15, i64 2
  %17 = load void (%"class.net::CertIssuerSource"*, %"class.net::ParsedCertificate"*, %"class.std::__1::vector.65"*)*, void (%"class.net::CertIssuerSource"*, %"class.net::ParsedCertificate"*, %"class.std::__1::vector.65"*)** %16, align 8
  tail call void %17(%"class.net::CertIssuerSource"* %13, %"class.net::ParsedCertificate"* %1, %"class.std::__1::vector.65"* %2) #7
  %18 = getelementptr inbounds %"class.net::TrustStore"*, %"class.net::TrustStore"** %11, i64 1
  %19 = icmp eq %"class.net::TrustStore"** %18, %7
  br i1 %19, label %9, label %10
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net20TrustStoreCollection8GetTrustERK13scoped_refptrINS_17ParsedCertificateEEPNS_16CertificateTrustEPN4base16SupportsUserDataE(%"class.net::TrustStoreCollection"* nocapture readonly, %class.scoped_refptr*, %"struct.net::CertificateTrust"* nocapture, %"class.base::SupportsUserData"*) unnamed_addr #0 align 2 {
  %5 = alloca %"struct.net::CertificateTrust", align 4
  %6 = alloca %"struct.net::CertificateTrust", align 4
  %7 = bitcast %"struct.net::CertificateTrust"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #7
  %8 = getelementptr inbounds %"struct.net::CertificateTrust", %"struct.net::CertificateTrust"* %5, i64 0, i32 0
  %9 = tail call i32 @_ZN3net16CertificateTrust14ForUnspecifiedEv() #7
  store i32 %9, i32* %8, align 4
  %10 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 1, i32 0, i32 0
  %11 = load %"class.net::TrustStore"**, %"class.net::TrustStore"*** %10, align 8
  %12 = getelementptr inbounds %"class.net::TrustStoreCollection", %"class.net::TrustStoreCollection"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load %"class.net::TrustStore"**, %"class.net::TrustStore"*** %12, align 8
  %14 = icmp eq %"class.net::TrustStore"** %11, %13
  br i1 %14, label %33, label %15

15:                                               ; preds = %4
  %16 = bitcast %"struct.net::CertificateTrust"* %6 to i8*
  %17 = getelementptr inbounds %"struct.net::CertificateTrust", %"struct.net::CertificateTrust"* %6, i64 0, i32 0
  br label %18

18:                                               ; preds = %15, %30
  %19 = phi %"class.net::TrustStore"** [ %11, %15 ], [ %31, %30 ]
  %20 = load %"class.net::TrustStore"*, %"class.net::TrustStore"** %19, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #7
  store i32 1, i32* %17, align 4
  %21 = bitcast %"class.net::TrustStore"* %20 to void (%"class.net::TrustStore"*, %class.scoped_refptr*, %"struct.net::CertificateTrust"*, %"class.base::SupportsUserData"*)***
  %22 = load void (%"class.net::TrustStore"*, %class.scoped_refptr*, %"struct.net::CertificateTrust"*, %"class.base::SupportsUserData"*)**, void (%"class.net::TrustStore"*, %class.scoped_refptr*, %"struct.net::CertificateTrust"*, %"class.base::SupportsUserData"*)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.net::TrustStore"*, %class.scoped_refptr*, %"struct.net::CertificateTrust"*, %"class.base::SupportsUserData"*)*, void (%"class.net::TrustStore"*, %class.scoped_refptr*, %"struct.net::CertificateTrust"*, %"class.base::SupportsUserData"*)** %22, i64 4
  %24 = load void (%"class.net::TrustStore"*, %class.scoped_refptr*, %"struct.net::CertificateTrust"*, %"class.base::SupportsUserData"*)*, void (%"class.net::TrustStore"*, %class.scoped_refptr*, %"struct.net::CertificateTrust"*, %"class.base::SupportsUserData"*)** %23, align 8
  call void %24(%"class.net::TrustStore"* %20, %class.scoped_refptr* %1, %"struct.net::CertificateTrust"* nonnull %6, %"class.base::SupportsUserData"* %3) #7
  %25 = call zeroext i1 @_ZNK3net16CertificateTrust19HasUnspecifiedTrustEv(%"struct.net::CertificateTrust"* nonnull %6) #7
  br i1 %25, label %30, label %26

26:                                               ; preds = %18
  %27 = load i32, i32* %17, align 4
  store i32 %27, i32* %8, align 4
  %28 = call zeroext i1 @_ZNK3net16CertificateTrust12IsDistrustedEv(%"struct.net::CertificateTrust"* nonnull %5) #7
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #7
  br label %33

30:                                               ; preds = %18, %26
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #7
  %31 = getelementptr inbounds %"class.net::TrustStore"*, %"class.net::TrustStore"** %19, i64 1
  %32 = icmp eq %"class.net::TrustStore"** %31, %13
  br i1 %32, label %33, label %18

33:                                               ; preds = %30, %4, %29
  %34 = getelementptr inbounds %"struct.net::CertificateTrust", %"struct.net::CertificateTrust"* %2, i64 0, i32 0
  %35 = load i32, i32* %8, align 4
  store i32 %35, i32* %34, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #7
  ret void
}

declare i32 @_ZN3net16CertificateTrust14ForUnspecifiedEv() local_unnamed_addr #1

declare zeroext i1 @_ZNK3net16CertificateTrust19HasUnspecifiedTrustEv(%"struct.net::CertificateTrust"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

declare zeroext i1 @_ZNK3net16CertificateTrust12IsDistrustedEv(%"struct.net::CertificateTrust"*) local_unnamed_addr #1

declare void @_ZN3net10TrustStore17AsyncGetIssuersOfEPKNS_17ParsedCertificateEPNSt3__110unique_ptrINS_16CertIssuerSource7RequestENS4_14default_deleteIS7_EEEE(%"class.net::TrustStore"*, %"class.net::ParsedCertificate"*, %"class.std::__1::unique_ptr.78"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
