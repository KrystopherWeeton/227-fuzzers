; ModuleID = '../../third_party/swiftshader/third_party/subzero/src/IceIntrinsics.cpp'
source_filename = "../../third_party/swiftshader/third_party/subzero/src/IceIntrinsics.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.Ice::Intrinsics::FullIntrinsicInfo" = type { %"struct.Ice::Intrinsics::IntrinsicInfo", [6 x i32], i8 }
%"struct.Ice::Intrinsics::IntrinsicInfo" = type { i32 }
%"class.Ice::InstIntrinsic" = type { %"class.Ice::InstHighLevel.base", %"struct.Ice::Intrinsics::IntrinsicInfo" }
%"class.Ice::InstHighLevel.base" = type { %"class.Ice::Inst.base" }
%"class.Ice::Inst.base" = type <{ i32 (...)**, %"class.llvm::ilist_node", i32, i32, i8, i8, i8, i8, [4 x i8], i8*, %"class.Ice::Variable"*, i32, [4 x i8], %"class.std::__1::vector.25", i32 }>
%"class.llvm::ilist_node" = type { %"class.llvm::ilist_node_impl" }
%"class.llvm::ilist_node_impl" = type { %"class.llvm::ilist_node_base" }
%"class.llvm::ilist_node_base" = type { %"class.llvm::ilist_node_base"*, %"class.llvm::ilist_node_base"* }
%"class.Ice::Variable" = type { %"class.Ice::Operand", i32, %"class.Ice::StringID", i8, i8, i8, i8, i8, i8, %"class.Ice::RegNumT", %"class.Ice::RegNumT", i32, %"class.Ice::LiveRange", [1 x %"class.Ice::Variable"*], %"class.Ice::Variable"*, i8* }
%"class.Ice::Operand" = type { i32 (...)**, i32, i32, i32, %"class.Ice::Variable"**, i8* }
%"class.Ice::StringID" = type { i64 }
%"class.Ice::RegNumT" = type { i32 }
%"class.Ice::LiveRange" = type { %"class.std::__1::vector", %"class.std::__1::unordered_map", %"class.std::__1::__wrap_iter" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type { i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"struct.std::__1::__compressed_pair_elem.0" = type { %"struct.Ice::sz_allocator" }
%"struct.Ice::sz_allocator" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.llvm::BumpPtrAllocatorImpl" = type <{ i8*, i8*, %"class.llvm::SmallVector", %"class.llvm::SmallVector.1", i64, %"class.llvm::MallocAllocator", [7 x i8] }>
%"class.llvm::SmallVector" = type { %"class.llvm::SmallVectorImpl", %"struct.llvm::SmallVectorStorage" }
%"class.llvm::SmallVectorImpl" = type { %"class.llvm::SmallVectorTemplateBase" }
%"class.llvm::SmallVectorTemplateBase" = type { %"class.llvm::SmallVectorTemplateCommon" }
%"class.llvm::SmallVectorTemplateCommon" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion" }
%"class.llvm::SmallVectorBase" = type { i8*, i8*, i8* }
%"struct.llvm::AlignedCharArrayUnion" = type { %"struct.llvm::AlignedCharArray" }
%"struct.llvm::AlignedCharArray" = type { [8 x i8] }
%"struct.llvm::SmallVectorStorage" = type { [3 x %"struct.llvm::AlignedCharArrayUnion"] }
%"class.llvm::SmallVector.1" = type <{ %"class.llvm::SmallVectorImpl.2", %"struct.llvm::SmallVectorStorage.7", [7 x i8] }>
%"class.llvm::SmallVectorImpl.2" = type { %"class.llvm::SmallVectorTemplateBase.3" }
%"class.llvm::SmallVectorTemplateBase.3" = type { %"class.llvm::SmallVectorTemplateCommon.4" }
%"class.llvm::SmallVectorTemplateCommon.4" = type { %"class.llvm::SmallVectorBase", %"struct.llvm::AlignedCharArrayUnion.5" }
%"struct.llvm::AlignedCharArrayUnion.5" = type { %"struct.llvm::AlignedCharArray.6" }
%"struct.llvm::AlignedCharArray.6" = type { [16 x i8] }
%"struct.llvm::SmallVectorStorage.7" = type { i8 }
%"class.llvm::MallocAllocator" = type { i8 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.16", %"class.std::__1::__compressed_pair.20", %"class.std::__1::__compressed_pair.22", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10", %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13", %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i64 }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.Ice::sz_allocator.15" }
%"struct.Ice::sz_allocator.15" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17", %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.std::__1::__hash_node_base" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.Ice::sz_allocator.19" }
%"struct.Ice::sz_allocator.19" = type { %"class.llvm::BumpPtrAllocatorImpl"* }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { float }
%"class.std::__1::__wrap_iter" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"class.Ice::Operand"**, %"class.Ice::Operand"**, %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28", %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.Ice::Operand"** }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"struct.Ice::sz_allocator.30" }
%"struct.Ice::sz_allocator.30" = type { %"class.llvm::BumpPtrAllocatorImpl"* }

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden zeroext i1 @_ZN3Ice10Intrinsics18isMemoryOrderValidENS0_11IntrinsicIDEmm(i32, i64, i64) local_unnamed_addr #0 {
  switch i32 %0, label %4 [
    i32 2, label %21
    i32 3, label %21
    i32 6, label %21
    i32 1, label %5
    i32 5, label %12
    i32 7, label %15
  ]

4:                                                ; preds = %3
  unreachable

5:                                                ; preds = %3
  switch i64 %2, label %21 [
    i64 1, label %6
    i64 2, label %6
    i64 3, label %6
    i64 6, label %6
  ]

6:                                                ; preds = %5, %5, %5, %5
  %7 = icmp ugt i64 %2, %1
  br i1 %7, label %21, label %8

8:                                                ; preds = %6
  %9 = icmp ne i64 %1, 4
  %10 = icmp eq i64 %2, 1
  %11 = or i1 %9, %10
  br label %21

12:                                               ; preds = %3
  %13 = and i64 %1, -2
  %14 = icmp ne i64 %13, 4
  br label %21

15:                                               ; preds = %3
  %16 = add i64 %1, -2
  %17 = icmp ult i64 %16, 4
  br i1 %17, label %18, label %21

18:                                               ; preds = %15
  %19 = trunc i64 %16 to i4
  %20 = icmp eq i4 %19, 2
  ret i1 %20

21:                                               ; preds = %15, %12, %5, %8, %6, %3, %3, %3
  %22 = phi i1 [ true, %3 ], [ true, %3 ], [ true, %3 ], [ false, %6 ], [ %11, %8 ], [ false, %5 ], [ %14, %12 ], [ true, %15 ]
  ret i1 %22
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden i32 @_ZNK3Ice10Intrinsics17FullIntrinsicInfo17validateIntrinsicEPKNS_13InstIntrinsicERj(%"struct.Ice::Intrinsics::FullIntrinsicInfo"* nocapture readonly, %"class.Ice::InstIntrinsic"* nocapture readonly, i32* nocapture dereferenceable(4)) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.Ice::InstIntrinsic", %"class.Ice::InstIntrinsic"* %1, i64 0, i32 0, i32 0, i32 10
  %5 = load %"class.Ice::Variable"*, %"class.Ice::Variable"** %4, align 8
  %6 = icmp eq %"class.Ice::Variable"* %5, null
  %7 = getelementptr inbounds %"struct.Ice::Intrinsics::FullIntrinsicInfo", %"struct.Ice::Intrinsics::FullIntrinsicInfo"* %0, i64 0, i32 1, i64 0
  %8 = load i32, i32* %7, align 4
  br i1 %6, label %9, label %11

9:                                                ; preds = %3
  %10 = icmp eq i32 %8, 0
  br i1 %10, label %15, label %50

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.Ice::Variable", %"class.Ice::Variable"* %5, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %8, %13
  br i1 %14, label %15, label %50

15:                                               ; preds = %9, %11
  %16 = getelementptr inbounds %"class.Ice::InstIntrinsic", %"class.Ice::InstIntrinsic"* %1, i64 0, i32 0, i32 0, i32 13
  %17 = getelementptr inbounds %"class.Ice::InstIntrinsic", %"class.Ice::InstIntrinsic"* %1, i64 0, i32 0, i32 0, i32 13, i32 0, i32 1
  %18 = bitcast %"class.Ice::Operand"*** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.std::__1::vector.25"* %16 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = lshr exact i64 %22, 3
  %24 = trunc i64 %23 to i32
  %25 = getelementptr inbounds %"struct.Ice::Intrinsics::FullIntrinsicInfo", %"struct.Ice::Intrinsics::FullIntrinsicInfo"* %0, i64 0, i32 2
  %26 = load i8, i8* %25, align 4
  %27 = zext i8 %26 to i32
  %28 = add nsw i32 %27, -1
  %29 = icmp eq i32 %28, %24
  %30 = inttoptr i64 %21 to %"class.Ice::Operand"**
  br i1 %29, label %31, label %50

31:                                               ; preds = %15
  %32 = zext i8 %26 to i64
  %33 = icmp ugt i8 %26, 1
  br i1 %33, label %36, label %50

34:                                               ; preds = %36
  %35 = icmp eq i64 %48, %32
  br i1 %35, label %50, label %36

36:                                               ; preds = %31, %34
  %37 = phi i64 [ %48, %34 ], [ 1, %31 ]
  %38 = trunc i64 %37 to i32
  %39 = add i32 %38, -1
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds %"class.Ice::Operand"*, %"class.Ice::Operand"** %30, i64 %40
  %42 = load %"class.Ice::Operand"*, %"class.Ice::Operand"** %41, align 8
  %43 = getelementptr inbounds %"class.Ice::Operand", %"class.Ice::Operand"* %42, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = getelementptr inbounds %"struct.Ice::Intrinsics::FullIntrinsicInfo", %"struct.Ice::Intrinsics::FullIntrinsicInfo"* %0, i64 0, i32 1, i64 %37
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %44, %46
  %48 = add nuw nsw i64 %37, 1
  br i1 %47, label %34, label %49

49:                                               ; preds = %36
  store i32 %39, i32* %2, align 4
  br label %50

50:                                               ; preds = %34, %31, %9, %11, %15, %49
  %51 = phi i32 [ 3, %49 ], [ 1, %9 ], [ 1, %11 ], [ 2, %15 ], [ 0, %31 ], [ 0, %34 ]
  ret i32 %51
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK3Ice10Intrinsics17FullIntrinsicInfo10getArgTypeEj(%"struct.Ice::Intrinsics::FullIntrinsicInfo"* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %3 = add i32 %1, 1
  %4 = zext i32 %3 to i64
  %5 = getelementptr inbounds %"struct.Ice::Intrinsics::FullIntrinsicInfo", %"struct.Ice::Intrinsics::FullIntrinsicInfo"* %0, i64 0, i32 1, i64 %4
  %6 = load i32, i32* %5, align 4
  ret i32 %6
}

attributes #0 = { norecurse nounwind optsize readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
