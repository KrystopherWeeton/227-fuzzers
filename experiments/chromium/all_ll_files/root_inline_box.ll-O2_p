; ModuleID = '../../third_party/blink/renderer/core/layout/line/root_inline_box.cc'
source_filename = "../../third_party/blink/renderer/core/layout/line/root_inline_box.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::HashMap.1689" = type { %"class.WTF::HashTable.1690" }
%"class.WTF::HashTable.1690" = type <{ %"struct.WTF::KeyValuePair.1693"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1693" = type { %"class.blink::RootInlineBox"*, %"class.blink::EllipsisBox"* }
%"class.blink::RootInlineBox" = type { %"class.blink::InlineFlowBox.base", i32, %"class.blink::LineLayoutItem", %class.scoped_refptr.1631, %"class.std::__1::unique_ptr.1632", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::InlineFlowBox.base" = type <{ %"class.blink::InlineBox", %"class.std::__1::unique_ptr.1603", %"class.blink::InlineBox"*, %"class.blink::InlineBox"*, %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"*, i32 }>
%"class.blink::InlineBox" = type { %"class.blink::DisplayItemClient.base", %"class.blink::InlineBox"*, %"class.blink::InlineBox"*, %"class.blink::InlineFlowBox"*, %"class.blink::LineLayoutItem", %"class.blink::LayoutPoint", %"class.blink::LayoutUnit", %"class.blink::InlineBox::InlineBoxBitfields" }
%"class.blink::DisplayItemClient.base" = type <{ i32 (...)**, i8 }>
%"class.blink::LayoutPoint" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::InlineBox::InlineBoxBitfields" = type { i32 }
%"class.std::__1::unique_ptr.1603" = type { %"class.std::__1::__compressed_pair.1604" }
%"class.std::__1::__compressed_pair.1604" = type { %"struct.std::__1::__compressed_pair_elem.1605" }
%"struct.std::__1::__compressed_pair_elem.1605" = type { %"struct.blink::SimpleOverflowModel"* }
%"struct.blink::SimpleOverflowModel" = type { %"class.absl::optional.1606", %"class.absl::optional.1615" }
%"class.absl::optional.1606" = type { %"class.absl::optional_internal::optional_data.1607" }
%"class.absl::optional_internal::optional_data.1607" = type { %"class.absl::optional_internal::optional_data_base.1608" }
%"class.absl::optional_internal::optional_data_base.1608" = type { %"class.absl::optional_internal::optional_data_dtor_base.1609" }
%"class.absl::optional_internal::optional_data_dtor_base.1609" = type { i8, %union.anon.1610 }
%union.anon.1610 = type { %"class.blink::SimpleLayoutOverflowModel" }
%"class.blink::SimpleLayoutOverflowModel" = type { %"class.blink::LayoutRect" }
%"class.blink::LayoutRect" = type { %"class.blink::LayoutPoint", %"class.blink::LayoutSize" }
%"class.blink::LayoutSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.absl::optional.1615" = type { %"class.absl::optional_internal::optional_data.1616" }
%"class.absl::optional_internal::optional_data.1616" = type { %"class.absl::optional_internal::optional_data_base.1617" }
%"class.absl::optional_internal::optional_data_base.1617" = type { %"class.absl::optional_internal::optional_data_dtor_base.1618" }
%"class.absl::optional_internal::optional_data_dtor_base.1618" = type { i8, %union.anon.1619 }
%union.anon.1619 = type { %"class.blink::SimpleVisualOverflowModel" }
%"class.blink::SimpleVisualOverflowModel" = type { %"class.blink::LayoutRect" }
%"class.blink::InlineFlowBox" = type <{ %"class.blink::InlineBox", %"class.std::__1::unique_ptr.1603", %"class.blink::InlineBox"*, %"class.blink::InlineBox"*, %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"*, i32, [4 x i8] }>
%"class.blink::LineLayoutItem" = type { %"class.blink::LayoutObject"* }
%"class.blink::LayoutObject" = type { %"class.blink::ImageResourceObserver", %"class.blink::DisplayItemClient.base", i8, [2 x i8], %"class.blink::LayoutObject::LayoutObjectBitfields", %class.scoped_refptr, %"class.blink::UntracedMember", %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*, %"class.blink::FragmentData" }
%"class.blink::ImageResourceObserver" = type { i32 (...)** }
%"class.blink::LayoutObject::LayoutObjectBitfields" = type { [12 x i8] }
%class.scoped_refptr = type { %"class.blink::ComputedStyle"* }
%"class.blink::ComputedStyle" = type { %"class.blink::ComputedStyleBase.base", %"class.WTF::RefCounted.731", %"class.std::__1::unique_ptr.733" }
%"class.blink::ComputedStyleBase.base" = type <{ %"class.blink::DataRef", %"class.blink::DataRef.244", %"class.blink::DataRef.443", %"class.blink::DataRef.447", %"class.blink::DataRef.647", %"class.blink::DataRef.714", %"class.blink::DataRef.718", %"class.blink::DataRef.722", %"class.blink::DataRef.726", [20 x i8] }>
%"class.blink::DataRef" = type { %class.scoped_refptr.0 }
%class.scoped_refptr.0 = type { %"class.blink::ComputedStyleBase::StyleInheritedData"* }
%"class.blink::ComputedStyleBase::StyleInheritedData" = type { %"class.WTF::RefCounted", %"class.blink::DataRef.1", %"class.blink::Length", float, %"class.blink::StyleColor", %"class.blink::StyleColor", i16, i16 }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::DataRef.1" = type { %class.scoped_refptr.2 }
%class.scoped_refptr.2 = type { %"class.blink::ComputedStyleBase::StyleFontData"* }
%"class.blink::ComputedStyleBase::StyleFontData" = type { %"class.WTF::RefCounted.3", %"class.blink::Font" }
%"class.WTF::RefCounted.3" = type { %"class.base::RefCounted.4" }
%"class.base::RefCounted.4" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Font" = type { %"class.blink::FontDescription", %class.scoped_refptr.29 }
%"class.blink::FontDescription" = type { %"class.blink::FontFamily", %class.scoped_refptr.8, %class.scoped_refptr.11, %class.scoped_refptr.21, float, float, float, float, float, float, %"struct.blink::FontSelectionRequest", %"class.blink::FontSelectionValue", %union.anon.28 }
%"class.blink::FontFamily" = type { %"class.WTF::AtomicString", %class.scoped_refptr.7 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.5 }
%class.scoped_refptr.5 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.7 = type { %"class.blink::SharedFontFamily"* }
%"class.blink::SharedFontFamily" = type <{ %"class.blink::FontFamily", %"class.WTF::RefCounted.1601", [4 x i8] }>
%"class.WTF::RefCounted.1601" = type { %"class.base::RefCounted.1602" }
%"class.base::RefCounted.1602" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.8 = type { %"class.blink::FontFeatureSettings"* }
%"class.blink::FontFeatureSettings" = type <{ %"class.blink::FontSettings", %"class.WTF::RefCounted.9", [4 x i8] }>
%"class.blink::FontSettings" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::FontTagValuePair"*, i32, i32 }
%"class.blink::FontTagValuePair" = type { i32, i32 }
%"class.WTF::RefCounted.9" = type { %"class.base::RefCounted.10" }
%"class.base::RefCounted.10" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.11 = type { %"class.blink::FontVariationSettings"* }
%"class.blink::FontVariationSettings" = type <{ %"class.blink::FontSettings.12", %"class.WTF::RefCounted.19", [4 x i8] }>
%"class.blink::FontSettings.12" = type { %"class.WTF::Vector.13" }
%"class.WTF::Vector.13" = type { %"class.WTF::VectorBuffer.14" }
%"class.WTF::VectorBuffer.14" = type { %"class.WTF::VectorBufferBase.15" }
%"class.WTF::VectorBufferBase.15" = type { %"class.blink::FontTagValuePair.16"*, i32, i32 }
%"class.blink::FontTagValuePair.16" = type { i32, float }
%"class.WTF::RefCounted.19" = type { %"class.base::RefCounted.20" }
%"class.base::RefCounted.20" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.21 = type { %"class.blink::LayoutLocale"* }
%"class.blink::LayoutLocale" = type <{ %"class.WTF::RefCounted.22", [4 x i8], %"class.WTF::AtomicString", %"class.std::__1::basic_string", %"class.WTF::CaseMap::Locale", %class.scoped_refptr.25, %struct.hb_language_impl_t*, i32, i32, i8, [7 x i8] }>
%"class.WTF::RefCounted.22" = type { %"class.base::RefCounted.23" }
%"class.base::RefCounted.23" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.WTF::CaseMap::Locale" = type { i8* }
%class.scoped_refptr.25 = type { %"class.blink::Hyphenation"* }
%"class.blink::Hyphenation" = type <{ i32 (...)**, %"class.WTF::RefCounted.26", [4 x i8] }>
%"class.WTF::RefCounted.26" = type { %"class.base::RefCounted.27" }
%"class.base::RefCounted.27" = type { %"class.base::subtle::RefCountedBase" }
%struct.hb_language_impl_t = type opaque
%"struct.blink::FontSelectionRequest" = type { %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue" }
%"class.blink::FontSelectionValue" = type { i16 }
%union.anon.28 = type { %"struct.blink::FontDescription::BitFields" }
%"struct.blink::FontDescription::BitFields" = type { i56 }
%class.scoped_refptr.29 = type { %"class.blink::FontFallbackList"* }
%"class.blink::FontFallbackList" = type { %"class.WTF::RefCounted.30", %"class.WTF::Vector.32", %"class.blink::SimpleFontData"*, %"class.blink::WeakPersistent", i32, i16, i8, %"class.base::WeakPtr" }
%"class.WTF::RefCounted.30" = type { %"class.base::RefCounted.31" }
%"class.base::RefCounted.31" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.32" = type { %"class.WTF::VectorBuffer.33" }
%"class.WTF::VectorBuffer.33" = type { %"class.WTF::VectorBufferBase.34", [8 x i8] }
%"class.WTF::VectorBufferBase.34" = type { %class.scoped_refptr.35*, i32, i32 }
%class.scoped_refptr.35 = type { %"class.blink::FontData"* }
%"class.blink::FontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.36", [4 x i8] }>
%"class.WTF::RefCounted.36" = type { %"class.base::RefCounted.37" }
%"class.base::RefCounted.37" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::SimpleFontData" = type { %"class.blink::FontData.base", %"class.blink::FontMetrics", float, float, [4 x i8], %"class.blink::FontPlatformData", %class.SkFont, i16, float, i16, %"class.std::__1::unique_ptr", %class.scoped_refptr.56, i32, i32, %"struct.blink::FontHeight" }
%"class.blink::FontData.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.36" }>
%"class.blink::FontMetrics" = type <{ i32, float, float, float, float, float, float, %"class.absl::optional", %"class.absl::optional", i32, i32, i8, i8, [2 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.40 }
%union.anon.40 = type { float }
%"class.blink::FontPlatformData" = type <{ %class.sk_sp, %"class.std::__1::basic_string", float, i8, i8, i8, i8, i32, %"struct.blink::WebFontRenderStyle", [5 x i8], %class.scoped_refptr.51, i8, [7 x i8] }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.41" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic.41" }>
%"struct.std::__1::atomic.41" = type { %"struct.std::__1::__atomic_base.42" }
%"struct.std::__1::__atomic_base.42" = type { %"struct.std::__1::__atomic_base.43" }
%"struct.std::__1::__atomic_base.43" = type { %"struct.std::__1::__cxx_atomic_impl.44" }
%"struct.std::__1::__cxx_atomic_impl.44" = type { %"struct.std::__1::__cxx_atomic_base_impl.45" }
%"struct.std::__1::__cxx_atomic_base_impl.45" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.46" }
%"struct.std::__1::atomic.46" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__atomic_base.48" }
%"struct.std::__1::__atomic_base.48" = type { %"struct.std::__1::__cxx_atomic_impl.49" }
%"struct.std::__1::__cxx_atomic_impl.49" = type { %"struct.std::__1::__cxx_atomic_base_impl.50" }
%"struct.std::__1::__cxx_atomic_base_impl.50" = type { i8 }
%"struct.blink::WebFontRenderStyle" = type { i8, i8, i8, i8, i8, i8, i8 }
%class.scoped_refptr.51 = type { %"class.blink::HarfBuzzFace"* }
%"class.blink::HarfBuzzFace" = type opaque
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"struct.blink::SimpleFontData::DerivedFontData"* }
%"struct.blink::SimpleFontData::DerivedFontData" = type { %class.scoped_refptr.54, %class.scoped_refptr.54 }
%class.scoped_refptr.54 = type { %"class.blink::SimpleFontData"* }
%class.scoped_refptr.56 = type { %"class.blink::CustomFontData"* }
%"class.blink::CustomFontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.57", [4 x i8] }>
%"class.WTF::RefCounted.57" = type { %"class.base::RefCounted.58" }
%"class.base::RefCounted.58" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::FontHeight" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::FontFallbackMap"*, %"class.blink::PersistentNodePtr" }
%"class.blink::FontFallbackMap" = type opaque
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.59", i32, [4 x i8], %"class.std::__1::unique_ptr.197", %"class.std::__1::unique_ptr.197", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.207", %"class.std::__1::unique_ptr.213", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.225", %"class.std::__1::unique_ptr.231", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.238", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.62", %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.74", %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.103", %"class.std::__1::unique_ptr.110", %"class.std::__1::unique_ptr.110", %"class.std::__1::unique_ptr.117", %"class.std::__1::unique_ptr.124", %"class.std::__1::unique_ptr.131", %"class.std::__1::unique_ptr.131", %"class.std::__1::unique_ptr.138", %"class.std::__1::unique_ptr.145", %"class.std::__1::unique_ptr.152", %"class.std::__1::unique_ptr.177", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.95" = type { %"struct.std::__1::__atomic_base.96" }
%"struct.std::__1::__atomic_base.96" = type { %"struct.std::__1::__atomic_base.97" }
%"struct.std::__1::__atomic_base.97" = type { %"struct.std::__1::__cxx_atomic_impl.98" }
%"struct.std::__1::__cxx_atomic_impl.98" = type { %"struct.std::__1::__cxx_atomic_base_impl.99" }
%"struct.std::__1::__cxx_atomic_base_impl.99" = type { i64 }
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.blink::Worklist.106"* }
%"class.blink::Worklist.106" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.blink::Worklist.113"* }
%"class.blink::Worklist.113" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.blink::Worklist.120"* }
%"class.blink::Worklist.120" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.blink::Worklist.127"* }
%"class.blink::Worklist.127" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"class.blink::Worklist.134"* }
%"class.blink::Worklist.134" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.138" = type { %"class.std::__1::__compressed_pair.139" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { %"class.blink::Worklist.141"* }
%"class.blink::Worklist.141" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.145" = type { %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"class.blink::Worklist.148"* }
%"class.blink::Worklist.148" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.95" }
%"class.std::__1::unique_ptr.152" = type { %"class.std::__1::__compressed_pair.153" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.155", %"class.std::__1::__compressed_pair.164", %"class.std::__1::__compressed_pair.169", %"class.std::__1::__compressed_pair.171", [4 x i8] }>
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157", %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { i64 }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { float }
%"class.std::__1::unique_ptr.177" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.180", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.189" }
%"class.WTF::Vector.189" = type { %"class.WTF::VectorBuffer.190" }
%"class.WTF::VectorBuffer.190" = type { %"class.WTF::VectorBufferBase.191" }
%"class.WTF::VectorBufferBase.191" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.197" = type { %"class.std::__1::__compressed_pair.198" }
%"class.std::__1::__compressed_pair.198" = type { %"struct.std::__1::__compressed_pair_elem.199" }
%"struct.std::__1::__compressed_pair_elem.199" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.205" }
%"class.WTF::VectorBuffer.205" = type { %"class.WTF::VectorBufferBase.206" }
%"class.WTF::VectorBufferBase.206" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.207" = type { %"class.std::__1::__compressed_pair.208" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.209" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.213" = type { %"class.std::__1::__compressed_pair.214" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.219" }
%"class.std::__1::unique_ptr.219" = type { %"class.std::__1::__compressed_pair.220" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.106"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.113"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.120"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.127"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.134"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector.1594", i64 }
%"class.std::__1::vector.1594" = type { %"class.std::__1::__vector_base.1595" }
%"class.std::__1::__vector_base.1595" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.1596" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.1596" = type { %"struct.std::__1::__compressed_pair_elem.1597" }
%"struct.std::__1::__compressed_pair_elem.1597" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.225" = type { %"class.std::__1::__compressed_pair.226" }
%"class.std::__1::__compressed_pair.226" = type { %"struct.std::__1::__compressed_pair_elem.227" }
%"struct.std::__1::__compressed_pair_elem.227" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.237 }
%class.scoped_refptr.237 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.238" = type { %"struct.std::__1::__atomic_base.239" }
%"struct.std::__1::__atomic_base.239" = type { %"struct.std::__1::__cxx_atomic_impl.240" }
%"struct.std::__1::__cxx_atomic_impl.240" = type { %"struct.std::__1::__cxx_atomic_base_impl.241" }
%"struct.std::__1::__cxx_atomic_base_impl.241" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.242 }
%class.scoped_refptr.242 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.41" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.46" }
%"class.blink::Length" = type <{ %union.anon.243, i8, i8, i8, i8 }>
%union.anon.243 = type { i32 }
%"class.blink::StyleColor" = type { %"class.blink::Color", i32 }
%"class.blink::Color" = type { i32 }
%"class.blink::DataRef.244" = type { %class.scoped_refptr.245 }
%class.scoped_refptr.245 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData" = type <{ %"class.WTF::RefCounted.246", [4 x i8], %"class.blink::DataRef.248", %"class.blink::DataRef.280", %"class.WTF::Vector.284", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %class.scoped_refptr.289, %class.scoped_refptr.298, %"class.blink::Persistent.306", %"class.blink::Persistent.308", %"class.blink::TextDecorationThickness", %"class.blink::Length", %"class.blink::Length", %"class.blink::TextSizeAdjust", %"struct.blink::TabSize", float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleAutoColor", i16, i16, [5 x i8], [3 x i8] }>
%"class.WTF::RefCounted.246" = type { %"class.base::RefCounted.247" }
%"class.base::RefCounted.247" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.248" = type { %class.scoped_refptr.249 }
%class.scoped_refptr.249 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData" = type <{ %"class.WTF::RefCounted.250", [4 x i8], %"class.WTF::AtomicString", %class.scoped_refptr.252, %class.scoped_refptr.259, %"class.blink::Persistent.270", float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleAutoColor", %"class.blink::StyleAutoColor", i16, i16, i16, i8, i8, i16, [2 x i8] }>
%"class.WTF::RefCounted.250" = type { %"class.base::RefCounted.251" }
%"class.base::RefCounted.251" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.252 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type { %"class.base::RefCountedThreadSafe.253", %"class.WTF::Vector.254" }
%"class.base::RefCountedThreadSafe.253" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.254" = type { %"class.WTF::VectorBuffer.255" }
%"class.WTF::VectorBuffer.255" = type { %"class.WTF::VectorBufferBase.256" }
%"class.WTF::VectorBufferBase.256" = type { %"class.blink::AppliedTextDecoration"*, i32, i32 }
%"class.blink::AppliedTextDecoration" = type { i8, %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" }
%class.scoped_refptr.259 = type { %"class.blink::StyleInitialData"* }
%"class.blink::StyleInitialData" = type { %"class.WTF::RefCounted.260", %"class.blink::StyleVariables" }
%"class.WTF::RefCounted.260" = type { %"class.base::RefCounted.261" }
%"class.base::RefCounted.261" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::StyleVariables" = type { %"class.WTF::HashMap", %"class.blink::Persistent" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %class.scoped_refptr.1937 }
%class.scoped_refptr.1937 = type { %"class.blink::CSSVariableData"* }
%"class.blink::CSSVariableData" = type { %"class.WTF::RefCounted.1938", %"class.WTF::Vector.630", %"class.WTF::Vector.1940", %"class.WTF::String", i8, i8, i8, i8, %"class.WTF::String", %"class.WTF::TextEncoding" }
%"class.WTF::RefCounted.1938" = type { %"class.base::RefCounted.1939" }
%"class.base::RefCounted.1939" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.630" = type { %"class.WTF::VectorBuffer.631" }
%"class.WTF::VectorBuffer.631" = type { %"class.WTF::VectorBufferBase.632" }
%"class.WTF::VectorBufferBase.632" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::Vector.1940" = type { %"class.WTF::VectorBuffer.1941" }
%"class.WTF::VectorBuffer.1941" = type { %"class.WTF::VectorBufferBase.1942" }
%"class.WTF::VectorBufferBase.1942" = type { %"class.blink::CSSParserToken"*, i32, i32 }
%"class.blink::CSSParserToken" = type { i24, i32, i8*, %union.anon.1943 }
%union.anon.1943 = type { double }
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase.264" }
%"class.blink::PersistentBase.264" = type { %"class.blink::HeapHashMap"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.265" }
%"class.WTF::HashMap.265" = type { %"class.WTF::HashTable.266" }
%"class.WTF::HashTable.266" = type <{ %"struct.WTF::KeyValuePair.268"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.268" = type opaque
%"class.blink::PersistentNodePtr.269" = type { %"class.blink::PersistentNode"* }
%"class.blink::Persistent.270" = type { %"class.blink::PersistentBase.271" }
%"class.blink::PersistentBase.271" = type { %"class.blink::HeapVector"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.274" }
%"class.WTF::Vector.274" = type { %"class.WTF::VectorBuffer.275" }
%"class.WTF::VectorBuffer.275" = type { %"class.WTF::VectorBufferBase.276" }
%"class.WTF::VectorBufferBase.276" = type { %"class.blink::CursorData"*, i32, i32 }
%"class.blink::CursorData" = type <{ %"class.blink::Member", i8, [3 x i8], %"class.blink::IntPoint", [4 x i8] }>
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::StyleImage"* }
%"class.blink::StyleImage" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::DataRef.280" = type { %class.scoped_refptr.281 }
%class.scoped_refptr.281 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData" = type <{ %"class.WTF::RefCounted.282", %"class.blink::StyleColor", i16, i8, i8 }>
%"class.WTF::RefCounted.282" = type { %"class.base::RefCounted.283" }
%"class.base::RefCounted.283" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.284" = type { %"class.WTF::VectorBuffer.285" }
%"class.WTF::VectorBuffer.285" = type { %"class.WTF::VectorBufferBase.286" }
%"class.WTF::VectorBufferBase.286" = type { %"class.WTF::AtomicString"*, i32, i32 }
%class.scoped_refptr.289 = type { %"class.blink::QuotesData"* }
%"class.blink::QuotesData" = type { %"class.WTF::RefCounted.290", %"class.WTF::Vector.292" }
%"class.WTF::RefCounted.290" = type { %"class.base::RefCounted.291" }
%"class.base::RefCounted.291" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.292" = type { %"class.WTF::VectorBuffer.293" }
%"class.WTF::VectorBuffer.293" = type { %"class.WTF::VectorBufferBase.294" }
%"class.WTF::VectorBufferBase.294" = type { %"struct.std::__1::pair.295"*, i32, i32 }
%"struct.std::__1::pair.295" = type { %"class.WTF::String", %"class.WTF::String" }
%class.scoped_refptr.298 = type { %"class.blink::ShadowList"* }
%"class.blink::ShadowList" = type { %"class.WTF::RefCounted.299", [4 x i8], %"class.WTF::Vector.301" }
%"class.WTF::RefCounted.299" = type { %"class.base::RefCounted.300" }
%"class.base::RefCounted.300" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.301" = type { %"class.WTF::VectorBuffer.base", [4 x i8] }
%"class.WTF::VectorBuffer.base" = type <{ %"class.WTF::VectorBufferBase.303", [28 x i8] }>
%"class.WTF::VectorBufferBase.303" = type { %"class.blink::ShadowData"*, i32, i32 }
%"class.blink::ShadowData" = type { %"class.blink::FloatPoint", float, float, %"class.blink::StyleColor", i32 }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::Persistent.306" = type { %"class.blink::PersistentBase.307" }
%"class.blink::PersistentBase.307" = type { %"class.blink::StyleImage"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::Persistent.308" = type { %"class.blink::PersistentBase.309" }
%"class.blink::PersistentBase.309" = type { %"class.blink::ListStyleTypeData"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::ListStyleTypeData" = type { i32, %"class.WTF::AtomicString", %"class.blink::Member.312", %"class.blink::Member.441" }
%"class.blink::Member.312" = type { %"class.blink::MemberBase.313" }
%"class.blink::MemberBase.313" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.314", %"class.blink::Member.326", %"class.blink::Member.320", %"class.blink::Member.328", %"class.blink::Member.328", %"class.blink::Member.372", %"class.blink::Member.374", %"class.blink::Member.376", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.381", %"class.blink::HeapVector.383" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.314" = type { %"class.blink::MemberBase.315" }
%"class.blink::MemberBase.315" = type { %"class.blink::ContainerNode"* }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.318", %"class.blink::Member.318" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.318", %"class.blink::Member.320", %"class.blink::Member.318", %"class.blink::Member.318", %"class.blink::Member.322" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.322" = type { %"class.blink::MemberBase.323" }
%"class.blink::MemberBase.323" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.318" = type { %"class.blink::MemberBase.319" }
%"class.blink::MemberBase.319" = type { %"class.blink::Node"* }
%"class.blink::Member.326" = type { %"class.blink::MemberBase.327" }
%"class.blink::MemberBase.327" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.906", %"class.WTF::Vector.906", i8, i32, %"class.blink::Member.913", %"class.blink::Member.915", %"class.blink::Member.917", %"class.blink::Member.919", %"class.blink::Member.921", %"class.blink::Member.923", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.931", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.937", %"class.blink::Member.939", %"class.blink::Member.389", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.942", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector.365", %"class.blink::Member.343", %"class.blink::Member.967", %"class.blink::Member.343", %"class.blink::Member.343", %"class.blink::Member.343", %"class.blink::UserActionElementSet", %"class.blink::Member.976", double, double, i64, i64, %"class.blink::HeapHashSet.978", %"class.blink::HeapHashSet.985", i16, i8, %"class.blink::Member.992", %"class.blink::Member.994", %"class.blink::Member.1318", %"class.blink::Member.1320", %"class.blink::TextLinkColors", %"class.blink::Member.1322", i8, [7 x i8], %"class.blink::HeapHashMap.1324", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.343", %"class.WTF::Vector.1331", %"class.blink::Member.1336", %"class.blink::Member.1338", i8, %"class.blink::Member.343", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.1340", %"class.blink::HeapVector.1342", %"class.std::__1::unique_ptr.1350", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.1356", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.1369", %"class.WTF::Vector.1371", i8, i8, %"class.std::__1::unique_ptr.1376", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector.365", %"class.blink::HeapVector.1382", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.1390", i8, i32, %"class.blink::Member.1392", %"class.blink::Member.1394", %"class.blink::Member.1396", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.1398", %"class.WTF::HashMap.1400", %"class.blink::Member.1405", %"class.blink::Member.1407", %"class.blink::Member.1409", %"class.blink::Member.1411", %"class.blink::Member.326", %"class.blink::Member.326", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.1413", i8, i32, %"class.blink::Member.1420", %"class.blink::Member.1422", i32, %"class.blink::Member.1424", %"class.blink::Member.1426", %"class.blink::Member.1428", %"class.std::__1::unique_ptr.1430", i64, %"class.std::__1::unique_ptr.1436", i32, i32, %"class.blink::Member.1447", %"class.blink::Member.1449", %"class.blink::Member.1451", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.1453", %"class.WTF::Vector.1455", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.1460", %"class.blink::Member.1467", %"class.std::__1::unique_ptr.1469", %"class.blink::Member.1475", i8, i8, %"class.WTF::String", %"class.blink::Member.1477", i8, [7 x i8], %"class.blink::HeapHashMap.1479", %"class.blink::HeapObserverSet", %"class.blink::Member.1493", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.1495", i32, i8, i8, %"class.blink::WeakMember.1497", %"class.blink::Member.1498" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.899" }
%"class.blink::HeapHashMap.899" = type { %"class.WTF::HashMap.902" }
%"class.WTF::HashMap.902" = type { %"class.WTF::HashTable.903" }
%"class.WTF::HashTable.903" = type <{ %"struct.WTF::KeyValuePair.905"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.905" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.906" = type { %"class.WTF::VectorBuffer.907" }
%"class.WTF::VectorBuffer.907" = type { %"class.WTF::VectorBufferBase.908" }
%"class.WTF::VectorBufferBase.908" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.909 }
%class.scoped_refptr.909 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.910", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.910" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.blink::Member.913" = type { %"class.blink::MemberBase.914" }
%"class.blink::MemberBase.914" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.915" = type { %"class.blink::MemberBase.916" }
%"class.blink::MemberBase.916" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable.1522", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.1563", i32, i8, [3 x i8], %"class.blink::HeapVector.1565", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.1573", %"class.blink::Member.1575", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.1584", %"class.blink::Member.1590", %"class.blink::Member.1592", i8, [7 x i8] }>
%"class.blink::Supplementable.1522" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.1523" }
%"class.blink::HeapHashMap.1523" = type { %"class.WTF::HashMap.1526" }
%"class.WTF::HashMap.1526" = type { %"class.WTF::HashTable.1527" }
%"class.WTF::HashTable.1527" = type <{ %"struct.WTF::KeyValuePair.1529"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1529" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.1538" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet.1530" }
%"class.blink::HeapObserverSet.1530" = type { i32, [4 x i8], %"class.blink::HeapHashSet.1531" }
%"class.blink::HeapHashSet.1531" = type { %"class.WTF::HashSet.1534" }
%"class.WTF::HashSet.1534" = type { %"class.WTF::HashTable.1535" }
%"class.WTF::HashTable.1535" = type <{ %"class.blink::WeakMember.1537"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1537" = type opaque
%"class.blink::Supplementable.1538" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.1539" }
%"class.blink::HeapHashMap.1539" = type { %"class.WTF::HashMap.1542" }
%"class.WTF::HashMap.1542" = type { %"class.WTF::HashTable.1543" }
%"class.WTF::HashTable.1543" = type <{ %"struct.WTF::KeyValuePair.1545"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1545" = type { i8*, %"class.blink::Member.1923" }
%"class.blink::Member.1923" = type { %"class.blink::MemberBase.1924" }
%"class.blink::MemberBase.1924" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.1925" }
%"class.blink::Member.1925" = type { %"class.blink::MemberBase.1926" }
%"class.blink::MemberBase.1926" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.1546, %"class.std::__1::unique_ptr.1547", %"class.std::__1::unique_ptr.1547", %"class.std::__1::unique_ptr.1553", %"class.std::__1::unique_ptr.1553", %"class.blink::Member.915", i32, [4 x i8], %"class.WTF::HashSet.1559", i32, i32 }
%class.scoped_refptr.1546 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type { %"class.WTF::RefCounted.1623", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i16, %"class.absl::optional.1625", i8, i8, i8, i8, i8, i8, %"class.base::UnguessableToken", %class.scoped_refptr.1630 }
%"class.WTF::RefCounted.1623" = type { %"class.base::RefCounted.1624" }
%"class.base::RefCounted.1624" = type { %"class.base::subtle::RefCountedBase" }
%"class.absl::optional.1625" = type { %"class.absl::optional_internal::optional_data.1626" }
%"class.absl::optional_internal::optional_data.1626" = type { %"class.absl::optional_internal::optional_data_base.1627" }
%"class.absl::optional_internal::optional_data_base.1627" = type { %"class.absl::optional_internal::optional_data_dtor_base.1628" }
%"class.absl::optional_internal::optional_data_dtor_base.1628" = type { i8, %union.anon.1629 }
%union.anon.1629 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%class.scoped_refptr.1630 = type { %"class.blink::SecurityOrigin"* }
%"class.std::__1::unique_ptr.1547" = type { %"class.std::__1::__compressed_pair.1548" }
%"class.std::__1::__compressed_pair.1548" = type { %"struct.std::__1::__compressed_pair_elem.1549" }
%"struct.std::__1::__compressed_pair_elem.1549" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.1553" = type { %"class.std::__1::__compressed_pair.1554" }
%"class.std::__1::__compressed_pair.1554" = type { %"struct.std::__1::__compressed_pair_elem.1555" }
%"struct.std::__1::__compressed_pair_elem.1555" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.WTF::HashSet.1559" = type { %"class.WTF::HashTable.1560" }
%"class.WTF::HashTable.1560" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1563" = type { %"class.blink::MemberBase.1564" }
%"class.blink::MemberBase.1564" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.1565" = type { %"class.WTF::Vector.1568" }
%"class.WTF::Vector.1568" = type { %"class.WTF::VectorBuffer.1569" }
%"class.WTF::VectorBuffer.1569" = type { %"class.WTF::VectorBufferBase.1570" }
%"class.WTF::VectorBufferBase.1570" = type { %"class.blink::Member.1571"*, i32, i32 }
%"class.blink::Member.1571" = type opaque
%"class.blink::Member.1573" = type { %"class.blink::MemberBase.1574" }
%"class.blink::MemberBase.1574" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.1575" = type { %"class.blink::MemberBase.1576" }
%"class.blink::MemberBase.1576" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.1577", i32, i32 }
%"class.blink::HeapHashMap.1577" = type { %"class.WTF::HashMap.1580" }
%"class.WTF::HashMap.1580" = type { %"class.WTF::HashTable.1581" }
%"class.WTF::HashTable.1581" = type <{ %"struct.WTF::KeyValuePair.1583"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1583" = type opaque
%"class.std::__1::unique_ptr.1584" = type { %"class.std::__1::__compressed_pair.1585" }
%"class.std::__1::__compressed_pair.1585" = type { %"struct.std::__1::__compressed_pair_elem.1586" }
%"struct.std::__1::__compressed_pair_elem.1586" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.1590" = type { %"class.blink::MemberBase.1591" }
%"class.blink::MemberBase.1591" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.1592" = type { %"class.blink::MemberBase.1593" }
%"class.blink::MemberBase.1593" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.917" = type { %"class.blink::MemberBase.918" }
%"class.blink::MemberBase.918" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.919" = type { %"class.blink::MemberBase.920" }
%"class.blink::MemberBase.920" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.921" = type { %"class.blink::MemberBase.922" }
%"class.blink::MemberBase.922" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.923" = type { %"class.blink::MemberBase.924" }
%"class.blink::MemberBase.924" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.931" = type { %"class.std::__1::__compressed_pair.932" }
%"class.std::__1::__compressed_pair.932" = type { %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.925" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.925" = type { %"class.std::__1::__compressed_pair.926" }
%"class.std::__1::__compressed_pair.926" = type { %"struct.std::__1::__compressed_pair_elem.927" }
%"struct.std::__1::__compressed_pair_elem.927" = type { %"class.blink::KURL"* }
%"class.blink::Member.937" = type { %"class.blink::MemberBase.938" }
%"class.blink::MemberBase.938" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.939" = type { %"class.blink::MemberBase.940" }
%"class.blink::MemberBase.940" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.389" = type { %"class.blink::MemberBase.390" }
%"class.blink::MemberBase.390" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type { %"class.blink::StyleSheet", %"class.blink::Member.391", i8, i8, i8, i8, i8, %"class.WTF::String", %class.scoped_refptr.393, %"class.WTF::Vector.412", %"class.WTF::Vector.412", %"class.blink::Member.318", %"class.blink::Member.417", %"class.blink::HeapHashSet", %"class.blink::Member.326", %"class.WTF::HashSet.425", %"class.WTF::TextPosition", %"class.blink::Member.429", %"class.blink::HeapVector.431", %"class.blink::Member.438" }
%"class.blink::StyleSheet" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.391" = type { %"class.blink::MemberBase.392" }
%"class.blink::MemberBase.392" = type { %"class.blink::StyleSheetContents"* }
%"class.blink::StyleSheetContents" = type opaque
%class.scoped_refptr.393 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::MediaQuerySet" = type { %"class.WTF::RefCounted.394", %"class.WTF::Vector.396" }
%"class.WTF::RefCounted.394" = type { %"class.base::RefCounted.395" }
%"class.base::RefCounted.395" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.396" = type { %"class.WTF::VectorBuffer.397" }
%"class.WTF::VectorBuffer.397" = type { %"class.WTF::VectorBufferBase.398" }
%"class.WTF::VectorBufferBase.398" = type { %"class.std::__1::unique_ptr.399"*, i32, i32 }
%"class.std::__1::unique_ptr.399" = type { %"class.std::__1::__compressed_pair.400" }
%"class.std::__1::__compressed_pair.400" = type { %"struct.std::__1::__compressed_pair_elem.401" }
%"struct.std::__1::__compressed_pair_elem.401" = type { %"class.blink::MediaQuery"* }
%"class.blink::MediaQuery" = type { i32, %"class.WTF::String", %"class.WTF::Vector.402", %"class.WTF::String" }
%"class.WTF::Vector.402" = type { %"class.WTF::VectorBuffer.403" }
%"class.WTF::VectorBuffer.403" = type { %"class.WTF::VectorBufferBase.404" }
%"class.WTF::VectorBufferBase.404" = type { %"class.blink::MediaQueryExp"*, i32, i32 }
%"class.blink::MediaQueryExp" = type { %"class.WTF::String", %"struct.blink::MediaQueryExpValue" }
%"struct.blink::MediaQueryExpValue" = type <{ i32, [4 x i8], double, i32, i32, i32, i8, i8, i8, i8 }>
%"class.WTF::Vector.412" = type { %"class.WTF::VectorBuffer.413" }
%"class.WTF::VectorBuffer.413" = type { %"class.WTF::VectorBufferBase.414" }
%"class.WTF::VectorBufferBase.414" = type { %"class.blink::MediaQueryResult"*, i32, i32 }
%"class.blink::MediaQueryResult" = type <{ %"class.blink::MediaQueryExp", i8, [7 x i8] }>
%"class.blink::Member.417" = type { %"class.blink::MemberBase.418" }
%"class.blink::MemberBase.418" = type { %"class.blink::CSSRule"* }
%"class.blink::CSSRule" = type { %"class.blink::ScriptWrappable", i8, %"class.blink::Member.419" }
%"class.blink::Member.419" = type { %"class.blink::MemberBase.420" }
%"class.blink::MemberBase.420" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.423" }
%"class.WTF::HashTable.423" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.321" }
%"class.blink::MemberBase.321" = type { %"class.blink::TreeScope"* }
%"class.WTF::HashSet.425" = type { %"class.WTF::HashTable.426" }
%"class.WTF::HashTable.426" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::Member.429" = type { %"class.blink::MemberBase.430" }
%"class.blink::MemberBase.430" = type { %"class.blink::MediaList"* }
%"class.blink::MediaList" = type { %"class.blink::ScriptWrappable", %class.scoped_refptr.393, %"class.blink::Member.389", %"class.blink::Member.417" }
%"class.blink::HeapVector.431" = type { %"class.WTF::Vector.434" }
%"class.WTF::Vector.434" = type { %"class.WTF::VectorBuffer.435" }
%"class.WTF::VectorBuffer.435" = type { %"class.WTF::VectorBufferBase.436" }
%"class.WTF::VectorBufferBase.436" = type { %"class.blink::Member.417"*, i32, i32 }
%"class.blink::Member.438" = type { %"class.blink::MemberBase.439" }
%"class.blink::MemberBase.439" = type { %"class.blink::CSSRuleList"* }
%"class.blink::CSSRuleList" = type { %"class.blink::ScriptWrappable" }
%"class.blink::TaskHandle" = type { %class.scoped_refptr.941 }
%class.scoped_refptr.941 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.942" = type { %"class.WTF::VectorBuffer.943" }
%"class.WTF::VectorBuffer.943" = type { %"class.WTF::VectorBufferBase.944" }
%"class.WTF::VectorBufferBase.944" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.945 }
%class.scoped_refptr.945 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.946", i32, i32, %"class.blink::Persistent.948" }
%"class.WTF::RefCounted.946" = type { %"class.base::RefCounted.947" }
%"class.base::RefCounted.947" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.948" = type { %"class.blink::PersistentBase.949" }
%"class.blink::PersistentBase.949" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.952" }
%"class.blink::HeapHashMap.952" = type { %"class.WTF::HashMap.955" }
%"class.WTF::HashMap.955" = type { %"class.WTF::HashTable.956" }
%"class.WTF::HashTable.956" = type <{ %"struct.WTF::KeyValuePair.958"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.958" = type { %"class.blink::WeakMember.959", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.959" = type { %"class.blink::MemberBase.960" }
%"class.blink::MemberBase.960" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::Member.967" = type { %"class.blink::MemberBase.968" }
%"class.blink::MemberBase.968" = type { %"class.blink::Range"* }
%"class.blink::Range" = type { %"class.blink::AbstractRange", %"class.blink::Member.326", %"class.blink::RangeBoundaryPoint", %"class.blink::RangeBoundaryPoint" }
%"class.blink::AbstractRange" = type { %"class.blink::ScriptWrappable" }
%"class.blink::RangeBoundaryPoint" = type <{ %"class.blink::Member.318", %"class.blink::Member.318", i64, i32, [4 x i8] }>
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.969" }
%"class.blink::HeapHashMap.969" = type { %"class.WTF::HashMap.972" }
%"class.WTF::HashMap.972" = type { %"class.WTF::HashTable.973" }
%"class.WTF::HashTable.973" = type <{ %"struct.WTF::KeyValuePair.975"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.975" = type opaque
%"class.blink::Member.976" = type { %"class.blink::MemberBase.977" }
%"class.blink::MemberBase.977" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet.978" = type { %"class.WTF::HashSet.981" }
%"class.WTF::HashSet.981" = type { %"class.WTF::HashTable.982" }
%"class.WTF::HashTable.982" = type <{ %"class.blink::WeakMember.984"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.984" = type opaque
%"class.blink::HeapHashSet.985" = type { %"class.WTF::HashSet.988" }
%"class.WTF::HashSet.988" = type { %"class.WTF::HashTable.989" }
%"class.WTF::HashTable.989" = type <{ %"class.blink::WeakMember.991"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.991" = type opaque
%"class.blink::Member.992" = type { %"class.blink::MemberBase.993" }
%"class.blink::MemberBase.993" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.994" = type { %"class.blink::MemberBase.995" }
%"class.blink::MemberBase.995" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type { %"class.blink::FontSelectorClient", %"class.blink::NameClient", %"class.blink::Member.326", i32, i32, i32, %"class.blink::Member.389", %"class.blink::Member.998", %"class.blink::Member.1025", %"class.blink::HeapHashMap.1027", i8, i8, i8, [5 x i8], %"class.blink::HeapHashSet.1034", %"class.blink::HeapHashSet.1034", %"class.WTF::String", i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, %"class.blink::Member.1040", %"class.blink::Member.1052", %"class.blink::Member.1081", %"class.blink::Member.1083", %"class.blink::Member.1089", %"class.blink::PendingInvalidations", %"class.blink::StyleInvalidationRoot", %"class.blink::StyleRecalcRoot", %"class.blink::LayoutTreeRebuildRoot", %"class.blink::HeapHashSet.1251", %"class.blink::Member.1257", %"class.blink::HeapHashMap.1259", %"class.blink::HeapHashMap.1266", %"class.std::__1::unique_ptr.1273", i32, %"class.blink::HeapVector.1279", %"class.blink::HeapVector.1279", %"class.blink::HeapVector.1010", %"class.blink::HeapHashSet.1287", %"class.blink::HeapHashMap.1294", %"class.blink::Member.1301", %"class.blink::HeapHashMap.1303", %class.scoped_refptr.1310, %class.scoped_refptr.259, %"class.blink::Member.1215", i32, i32, %"class.blink::Color", i32, %"class.blink::Color", [4 x i8], %"class.blink::HeapHashSet.1311", %"class.blink::Member.343" }
%"class.blink::FontSelectorClient" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Member.998" = type { %"class.blink::MemberBase.999" }
%"class.blink::MemberBase.999" = type { %"class.blink::DocumentStyleSheetCollection"* }
%"class.blink::DocumentStyleSheetCollection" = type { %"class.blink::TreeScopeStyleSheetCollection" }
%"class.blink::TreeScopeStyleSheetCollection" = type { %"class.blink::StyleSheetCollection.base", %"class.blink::Member.320", %"class.blink::TreeOrderedList" }
%"class.blink::StyleSheetCollection.base" = type <{ %"class.blink::NameClient", %"class.blink::HeapVector.1002", %"class.blink::HeapVector.1010", i8 }>
%"class.blink::HeapVector.1002" = type { %"class.WTF::Vector.1005" }
%"class.WTF::Vector.1005" = type { %"class.WTF::VectorBuffer.1006" }
%"class.WTF::VectorBuffer.1006" = type { %"class.WTF::VectorBufferBase.1007" }
%"class.WTF::VectorBufferBase.1007" = type { %"class.blink::Member.1008"*, i32, i32 }
%"class.blink::Member.1008" = type opaque
%"class.blink::TreeOrderedList" = type { %"class.blink::HeapListHashSet" }
%"class.blink::HeapListHashSet" = type { %"class.WTF::ListHashSet.base", [7 x i8] }
%"class.WTF::ListHashSet.base" = type <{ %"class.WTF::HashTable.1021", %"class.blink::Member.1023", %"class.blink::Member.1023", %"struct.blink::HeapListHashSetAllocator::AllocatorProvider" }>
%"class.WTF::HashTable.1021" = type <{ %"class.blink::Member.1023"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1023" = type { %"class.blink::MemberBase.1024" }
%"class.blink::MemberBase.1024" = type { %"class.blink::HeapListHashSetNode"* }
%"class.blink::HeapListHashSetNode" = type { %"class.blink::Member.318", %"class.blink::Member.1023", %"class.blink::Member.1023" }
%"struct.blink::HeapListHashSetAllocator::AllocatorProvider" = type { i8 }
%"class.blink::Member.1025" = type { %"class.blink::MemberBase.1026" }
%"class.blink::MemberBase.1026" = type { %"class.blink::StyleRuleUsageTracker"* }
%"class.blink::StyleRuleUsageTracker" = type opaque
%"class.blink::HeapHashMap.1027" = type { %"class.WTF::HashMap.1030" }
%"class.WTF::HashMap.1030" = type { %"class.WTF::HashTable.1031" }
%"class.WTF::HashTable.1031" = type <{ %"struct.WTF::KeyValuePair.1033"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1033" = type opaque
%"class.blink::HeapHashSet.1034" = type { %"class.WTF::HashSet.1037" }
%"class.WTF::HashSet.1037" = type { %"class.WTF::HashTable.1038" }
%"class.WTF::HashTable.1038" = type <{ %"class.blink::Member.320"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1040" = type { %"class.blink::MemberBase.1041" }
%"class.blink::MemberBase.1041" = type { %"class.blink::ReferenceFilterOperation"* }
%"class.blink::ReferenceFilterOperation" = type { %"class.blink::FilterOperation.base", %"class.WTF::AtomicString", %"class.blink::Member.1042", %"class.blink::Member.1044" }
%"class.blink::FilterOperation.base" = type <{ i32 (...)**, i32 }>
%"class.blink::Member.1042" = type { %"class.blink::MemberBase.1043" }
%"class.blink::MemberBase.1043" = type { %"class.blink::SVGResource"* }
%"class.blink::SVGResource" = type { i32 (...)**, %"class.blink::Member.343", %"class.blink::HeapHashMap.687" }
%"class.blink::HeapHashMap.687" = type { %"class.WTF::HashMap.690" }
%"class.WTF::HashMap.690" = type { %"class.WTF::HashTable.691" }
%"class.WTF::HashTable.691" = type <{ %"struct.WTF::KeyValuePair.693"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.693" = type opaque
%"class.blink::Member.1044" = type { %"class.blink::MemberBase.1045" }
%"class.blink::MemberBase.1045" = type { %"class.blink::Filter"* }
%"class.blink::Filter" = type { %"class.blink::FloatRect", %"class.blink::FloatRect", float, i32, %"class.blink::Member.1048", %"class.blink::Member.1050" }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::Member.1048" = type { %"class.blink::MemberBase.1049" }
%"class.blink::MemberBase.1049" = type { %"class.blink::SourceGraphic"* }
%"class.blink::SourceGraphic" = type opaque
%"class.blink::Member.1050" = type { %"class.blink::MemberBase.1051" }
%"class.blink::MemberBase.1051" = type { %"class.blink::FilterEffect"* }
%"class.blink::FilterEffect" = type { i32 (...)**, %"class.blink::HeapVector.1513", %"class.blink::Member.1044", %"class.blink::FloatRect", i8, i8, i32, [4 x %class.sk_sp.817] }
%"class.blink::HeapVector.1513" = type { %"class.WTF::Vector.1516" }
%"class.WTF::Vector.1516" = type { %"class.WTF::VectorBuffer.1517" }
%"class.WTF::VectorBuffer.1517" = type { %"class.WTF::VectorBufferBase.1518" }
%"class.WTF::VectorBufferBase.1518" = type { %"class.blink::Member.1050"*, i32, i32 }
%class.sk_sp.817 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.818, i32, %"class.absl::optional.819", i8, i32 }
%class.sk_sp.818 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional.819" = type { %"class.absl::optional_internal::optional_data.820" }
%"class.absl::optional_internal::optional_data.820" = type { %"class.absl::optional_internal::optional_data_base.821" }
%"class.absl::optional_internal::optional_data_base.821" = type { %"class.absl::optional_internal::optional_data_dtor_base.822" }
%"class.absl::optional_internal::optional_data_dtor_base.822" = type { i8, %union.anon.823 }
%union.anon.823 = type { %struct.SkRect }
%"class.blink::Member.1052" = type { %"class.blink::MemberBase.1053" }
%"class.blink::MemberBase.1053" = type { %"class.blink::StyleResolver"* }
%"class.blink::StyleResolver" = type <{ %"class.blink::MatchedPropertiesCache", %"class.blink::Member.326", %class.scoped_refptr, %"class.blink::SelectorFilter", %"class.blink::Member.1025", i8, i8, [6 x i8] }>
%"class.blink::MatchedPropertiesCache" = type { %"class.blink::HeapHashMap.1056" }
%"class.blink::HeapHashMap.1056" = type { %"class.WTF::HashMap.1059" }
%"class.WTF::HashMap.1059" = type { %"class.WTF::HashTable.1060" }
%"class.WTF::HashTable.1060" = type <{ %"struct.WTF::KeyValuePair.1062"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1062" = type opaque
%"class.blink::SelectorFilter" = type { %"class.blink::HeapVector.1063", %"class.std::__1::unique_ptr.1075" }
%"class.blink::HeapVector.1063" = type { %"class.WTF::Vector.1066" }
%"class.WTF::Vector.1066" = type { %"class.WTF::VectorBuffer.1067" }
%"class.WTF::VectorBuffer.1067" = type { %"class.WTF::VectorBufferBase.1068" }
%"class.WTF::VectorBufferBase.1068" = type { %"class.blink::SelectorFilter::ParentStackFrame"*, i32, i32 }
%"class.blink::SelectorFilter::ParentStackFrame" = type { %"class.blink::Member.343", %"class.WTF::Vector.1069" }
%"class.WTF::Vector.1069" = type { %"class.WTF::VectorBuffer.1070" }
%"class.WTF::VectorBuffer.1070" = type { %"class.WTF::VectorBufferBase.1071", [16 x i8] }
%"class.WTF::VectorBufferBase.1071" = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.1075" = type { %"class.std::__1::__compressed_pair.1076" }
%"class.std::__1::__compressed_pair.1076" = type { %"struct.std::__1::__compressed_pair_elem.1077" }
%"struct.std::__1::__compressed_pair_elem.1077" = type { %"class.WTF::BloomFilter"* }
%"class.WTF::BloomFilter" = type { [4096 x i8] }
%"class.blink::Member.1081" = type { %"class.blink::MemberBase.1082" }
%"class.blink::MemberBase.1082" = type { %"class.blink::ViewportStyleResolver"* }
%"class.blink::ViewportStyleResolver" = type opaque
%"class.blink::Member.1083" = type { %"class.blink::MemberBase.1084" }
%"class.blink::MemberBase.1084" = type { %"class.blink::MediaQueryEvaluator"* }
%"class.blink::MediaQueryEvaluator" = type <{ %"class.WTF::String", %"class.blink::Member.1087", i8, [7 x i8] }>
%"class.blink::Member.1087" = type { %"class.blink::MemberBase.1088" }
%"class.blink::MemberBase.1088" = type { %"class.blink::MediaValues"* }
%"class.blink::MediaValues" = type opaque
%"class.blink::Member.1089" = type { %"class.blink::MemberBase.1090" }
%"class.blink::MemberBase.1090" = type { %"class.blink::CSSGlobalRuleSet"* }
%"class.blink::CSSGlobalRuleSet" = type <{ %"class.blink::RuleFeatureSet", %"class.blink::Member.1111", i8, i8, [6 x i8] }>
%"class.blink::RuleFeatureSet" = type <{ %"struct.blink::RuleFeatureSet::FeatureMetadata", [4 x i8], %"class.WTF::HashMap.1093", %"class.WTF::HashMap.1093", %"class.WTF::HashMap.1093", %"class.WTF::HashMap.1098", %class.scoped_refptr.1103, %class.scoped_refptr.1110, %class.scoped_refptr.1109, %"class.WTF::Vector.412", %"class.WTF::Vector.412", i8, [7 x i8] }>
%"struct.blink::RuleFeatureSet::FeatureMetadata" = type <{ i8, i8, i8, i8, i32, i8, [3 x i8] }>
%"class.WTF::HashMap.1093" = type { %"class.WTF::HashTable.1094" }
%"class.WTF::HashTable.1094" = type <{ %"struct.WTF::KeyValuePair.1097"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1097" = type { %"class.WTF::AtomicString", %class.scoped_refptr.1951 }
%class.scoped_refptr.1951 = type { %"class.blink::InvalidationSet"* }
%"class.blink::InvalidationSet" = type <{ %"class.WTF::RefCounted.1104", [4 x i8], %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing.1106", %"union.blink::InvalidationSet::Backing.1107", %"union.blink::InvalidationSet::Backing.1108", %"class.blink::InvalidationFlags", %"class.blink::InvalidationSet::BackingFlags", i8, [5 x i8] }>
%"class.WTF::RefCounted.1104" = type { %"class.base::RefCounted.1105" }
%"class.base::RefCounted.1105" = type { %"class.base::subtle::RefCountedBase" }
%"union.blink::InvalidationSet::Backing" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.1106" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.1107" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.1108" = type { %"class.WTF::StringImpl"* }
%"class.blink::InvalidationFlags" = type { i8 }
%"class.blink::InvalidationSet::BackingFlags" = type { i8 }
%"class.WTF::HashMap.1098" = type { %"class.WTF::HashTable.1099" }
%"class.WTF::HashTable.1099" = type <{ %"struct.WTF::KeyValuePair.1102"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1102" = type opaque
%class.scoped_refptr.1103 = type { %"class.blink::SiblingInvalidationSet"* }
%"class.blink::SiblingInvalidationSet" = type { %"class.blink::InvalidationSet.base", i32, %class.scoped_refptr.1109, %class.scoped_refptr.1109 }
%"class.blink::InvalidationSet.base" = type <{ %"class.WTF::RefCounted.1104", [4 x i8], %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing.1106", %"union.blink::InvalidationSet::Backing.1107", %"union.blink::InvalidationSet::Backing.1108", %"class.blink::InvalidationFlags", %"class.blink::InvalidationSet::BackingFlags", i8 }>
%class.scoped_refptr.1110 = type { %"class.blink::NthSiblingInvalidationSet"* }
%"class.blink::NthSiblingInvalidationSet" = type { %"class.blink::SiblingInvalidationSet" }
%class.scoped_refptr.1109 = type { %"class.blink::DescendantInvalidationSet"* }
%"class.blink::DescendantInvalidationSet" = type { %"class.blink::InvalidationSet.base", [5 x i8] }
%"class.blink::Member.1111" = type { %"class.blink::MemberBase.1112" }
%"class.blink::MemberBase.1112" = type { %"class.blink::RuleSet"* }
%"class.blink::RuleSet" = type { %"class.blink::HeapHashMap.1115", %"class.blink::HeapHashMap.1115", %"class.blink::HeapHashMap.1115", %"class.blink::HeapHashMap.1115", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::HeapVector.1122", %"class.blink::RuleFeatureSet", %"class.blink::HeapVector.1158", %"class.blink::HeapVector.1166", %"class.blink::HeapVector.1174", %"class.blink::HeapVector.1191", %"class.blink::HeapVector.1199", %"class.blink::HeapVector.1207", %"class.blink::HeapVector.1220", %"class.WTF::Vector.1227", i32, %"class.blink::Member.1233" }
%"class.blink::HeapHashMap.1115" = type { %"class.WTF::HashMap.1118" }
%"class.WTF::HashMap.1118" = type { %"class.WTF::HashTable.1119" }
%"class.WTF::HashTable.1119" = type <{ %"struct.WTF::KeyValuePair.1121"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1121" = type { %"class.WTF::AtomicString", %"class.blink::Member.1961" }
%"class.blink::Member.1961" = type { %"class.blink::MemberBase.1962" }
%"class.blink::MemberBase.1962" = type { %"class.blink::HeapVector.1122"* }
%"class.blink::HeapVector.1122" = type { %"class.WTF::Vector.1125" }
%"class.WTF::Vector.1125" = type { %"class.WTF::VectorBuffer.1126" }
%"class.WTF::VectorBuffer.1126" = type { %"class.WTF::VectorBufferBase.1127" }
%"class.WTF::VectorBufferBase.1127" = type { %"class.blink::Member.1128"*, i32, i32 }
%"class.blink::Member.1128" = type { %"class.blink::MemberBase.1129" }
%"class.blink::MemberBase.1129" = type { %"class.blink::RuleData"* }
%"class.blink::RuleData" = type { %"class.blink::Member.1132", i64, [4 x i32] }
%"class.blink::Member.1132" = type { %"class.blink::MemberBase.1133" }
%"class.blink::MemberBase.1133" = type { %"class.blink::StyleRule"* }
%"class.blink::StyleRule" = type { %"class.blink::StyleRuleBase", i32, %"class.blink::CSSSelectorList", %"class.blink::Member.354", %"class.blink::Member.1153" }
%"class.blink::StyleRuleBase" = type { i8 }
%"class.blink::CSSSelectorList" = type { %"class.blink::CSSSelector"* }
%"class.blink::CSSSelector" = type { i24, %"union.blink::CSSSelector::DataUnion" }
%"union.blink::CSSSelector::DataUnion" = type { %"class.WTF::AtomicString" }
%"class.blink::Member.354" = type { %"class.blink::MemberBase.355" }
%"class.blink::MemberBase.355" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type { i32 }
%"class.blink::Member.1153" = type { %"class.blink::MemberBase.1154" }
%"class.blink::MemberBase.1154" = type { %"class.blink::CSSLazyPropertyParser"* }
%"class.blink::CSSLazyPropertyParser" = type { i32 (...)** }
%"class.blink::HeapVector.1158" = type { %"class.WTF::Vector.1161" }
%"class.WTF::Vector.1161" = type { %"class.WTF::VectorBuffer.1162" }
%"class.WTF::VectorBuffer.1162" = type { %"class.WTF::VectorBufferBase.1163" }
%"class.WTF::VectorBufferBase.1163" = type { %"class.blink::Member.1164"*, i32, i32 }
%"class.blink::Member.1164" = type { %"class.blink::MemberBase.1957" }
%"class.blink::MemberBase.1957" = type { %"class.blink::StyleRulePage"* }
%"class.blink::StyleRulePage" = type { %"class.blink::StyleRuleBase", %"class.blink::Member.354", %"class.blink::CSSSelectorList" }
%"class.blink::HeapVector.1166" = type { %"class.WTF::Vector.1169" }
%"class.WTF::Vector.1169" = type { %"class.WTF::VectorBuffer.1170" }
%"class.WTF::VectorBuffer.1170" = type { %"class.WTF::VectorBufferBase.1171" }
%"class.WTF::VectorBufferBase.1171" = type { %"class.blink::Member.1172"*, i32, i32 }
%"class.blink::Member.1172" = type { %"class.blink::MemberBase.1958" }
%"class.blink::MemberBase.1958" = type { %"class.blink::StyleRuleFontFace"* }
%"class.blink::StyleRuleFontFace" = type { %"class.blink::StyleRuleBase", %"class.blink::Member.354" }
%"class.blink::HeapVector.1174" = type { %"class.WTF::Vector.1177" }
%"class.WTF::Vector.1177" = type { %"class.WTF::VectorBuffer.1178" }
%"class.WTF::VectorBuffer.1178" = type { %"class.WTF::VectorBufferBase.1179" }
%"class.WTF::VectorBufferBase.1179" = type { %"class.blink::Member.1180"*, i32, i32 }
%"class.blink::Member.1180" = type { %"class.blink::MemberBase.1181" }
%"class.blink::MemberBase.1181" = type { %"class.blink::StyleRuleKeyframes"* }
%"class.blink::StyleRuleKeyframes" = type <{ %"class.blink::StyleRuleBase", [7 x i8], %"class.blink::HeapVector.1182", %"class.WTF::AtomicString", i32, [4 x i8] }>
%"class.blink::HeapVector.1182" = type { %"class.WTF::Vector.1185" }
%"class.WTF::Vector.1185" = type { %"class.WTF::VectorBuffer.1186" }
%"class.WTF::VectorBuffer.1186" = type { %"class.WTF::VectorBufferBase.1187" }
%"class.WTF::VectorBufferBase.1187" = type { %"class.blink::Member.1188"*, i32, i32 }
%"class.blink::Member.1188" = type opaque
%"class.blink::HeapVector.1191" = type { %"class.WTF::Vector.1194" }
%"class.WTF::Vector.1194" = type { %"class.WTF::VectorBuffer.1195" }
%"class.WTF::VectorBuffer.1195" = type { %"class.WTF::VectorBufferBase.1196" }
%"class.WTF::VectorBufferBase.1196" = type { %"class.blink::Member.1197"*, i32, i32 }
%"class.blink::Member.1197" = type { %"class.blink::MemberBase.1959" }
%"class.blink::MemberBase.1959" = type { %"class.blink::StyleRuleProperty"* }
%"class.blink::StyleRuleProperty" = type { %"class.blink::StyleRuleBase", %"class.WTF::String", %"class.blink::Member.354" }
%"class.blink::HeapVector.1199" = type { %"class.WTF::Vector.1202" }
%"class.WTF::Vector.1202" = type { %"class.WTF::VectorBuffer.1203" }
%"class.WTF::VectorBuffer.1203" = type { %"class.WTF::VectorBufferBase.1204" }
%"class.WTF::VectorBufferBase.1204" = type { %"class.blink::Member.1205"*, i32, i32 }
%"class.blink::Member.1205" = type { %"class.blink::MemberBase.1960" }
%"class.blink::MemberBase.1960" = type { %"class.blink::StyleRuleCounterStyle"* }
%"class.blink::StyleRuleCounterStyle" = type <{ %"class.blink::StyleRuleBase", [7 x i8], %"class.WTF::AtomicString", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", i32, [4 x i8] }>
%"class.blink::HeapVector.1207" = type { %"class.WTF::Vector.1210" }
%"class.WTF::Vector.1210" = type { %"class.WTF::VectorBuffer.1211" }
%"class.WTF::VectorBuffer.1211" = type { %"class.WTF::VectorBufferBase.1212" }
%"class.WTF::VectorBufferBase.1212" = type { %"class.blink::Member.1213"*, i32, i32 }
%"class.blink::Member.1213" = type { %"class.blink::MemberBase.1214" }
%"class.blink::MemberBase.1214" = type { %"class.blink::StyleRuleScrollTimeline"* }
%"class.blink::StyleRuleScrollTimeline" = type { %"class.blink::StyleRuleBase", %"class.WTF::AtomicString", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215", %"class.blink::Member.1215" }
%"class.blink::HeapVector.1220" = type { %"class.WTF::Vector.1223" }
%"class.WTF::Vector.1223" = type { %"class.WTF::VectorBuffer.1224" }
%"class.WTF::VectorBuffer.1224" = type { %"class.WTF::VectorBufferBase.1225" }
%"class.WTF::VectorBufferBase.1225" = type { %"class.blink::MinimalRuleData"*, i32, i32 }
%"class.blink::MinimalRuleData" = type { %"class.blink::Member.1132", i32, i32 }
%"class.WTF::Vector.1227" = type { %"class.WTF::VectorBuffer.1228" }
%"class.WTF::VectorBuffer.1228" = type { %"class.WTF::VectorBufferBase.1229" }
%"class.WTF::VectorBufferBase.1229" = type { %"class.blink::MediaQuerySetResult"*, i32, i32 }
%"class.blink::MediaQuerySetResult" = type <{ %class.scoped_refptr.1230, i8, [7 x i8] }>
%class.scoped_refptr.1230 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::Member.1233" = type { %"class.blink::MemberBase.1234" }
%"class.blink::MemberBase.1234" = type { %"class.blink::RuleSet::PendingRuleMaps"* }
%"class.blink::RuleSet::PendingRuleMaps" = type { %"class.blink::HeapHashMap.1237", %"class.blink::HeapHashMap.1237", %"class.blink::HeapHashMap.1237", %"class.blink::HeapHashMap.1237" }
%"class.blink::HeapHashMap.1237" = type { %"class.WTF::HashMap.1240" }
%"class.WTF::HashMap.1240" = type { %"class.WTF::HashTable.1241" }
%"class.WTF::HashTable.1241" = type <{ %"struct.WTF::KeyValuePair.1243"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1243" = type opaque
%"class.blink::PendingInvalidations" = type { %"class.blink::HeapHashMap.1244" }
%"class.blink::HeapHashMap.1244" = type { %"class.WTF::HashMap.1247" }
%"class.WTF::HashMap.1247" = type { %"class.WTF::HashTable.1248" }
%"class.WTF::HashTable.1248" = type <{ %"struct.WTF::KeyValuePair.1250"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1250" = type { %"class.blink::Member.314", %"class.blink::NodeInvalidationSets" }
%"class.blink::NodeInvalidationSets" = type { %"class.WTF::Vector.1952", %"class.WTF::Vector.1952" }
%"class.WTF::Vector.1952" = type { %"class.WTF::VectorBuffer.1953" }
%"class.WTF::VectorBuffer.1953" = type { %"class.WTF::VectorBufferBase.1954" }
%"class.WTF::VectorBufferBase.1954" = type { %class.scoped_refptr.1951*, i32, i32 }
%"class.blink::StyleInvalidationRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::StyleTraversalRoot.base" = type <{ i32 (...)**, %"class.blink::Member.318", i32 }>
%"class.blink::StyleRecalcRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::LayoutTreeRebuildRoot" = type { %"class.blink::StyleTraversalRoot.base", [4 x i8] }
%"class.blink::HeapHashSet.1251" = type { %"class.WTF::HashSet.1254" }
%"class.WTF::HashSet.1254" = type { %"class.WTF::HashTable.1255" }
%"class.WTF::HashTable.1255" = type <{ %"class.blink::Member.343"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1257" = type { %"class.blink::MemberBase.1258" }
%"class.blink::MemberBase.1258" = type { %"class.blink::CSSFontSelector"* }
%"class.blink::CSSFontSelector" = type opaque
%"class.blink::HeapHashMap.1259" = type { %"class.WTF::HashMap.1262" }
%"class.WTF::HashMap.1262" = type { %"class.WTF::HashTable.1263" }
%"class.WTF::HashTable.1263" = type <{ %"struct.WTF::KeyValuePair.1265"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1265" = type opaque
%"class.blink::HeapHashMap.1266" = type { %"class.WTF::HashMap.1269" }
%"class.WTF::HashMap.1269" = type { %"class.WTF::HashTable.1270" }
%"class.WTF::HashTable.1270" = type <{ %"struct.WTF::KeyValuePair.1272"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1272" = type opaque
%"class.std::__1::unique_ptr.1273" = type { %"class.std::__1::__compressed_pair.1274" }
%"class.std::__1::__compressed_pair.1274" = type { %"struct.std::__1::__compressed_pair_elem.1275" }
%"struct.std::__1::__compressed_pair_elem.1275" = type { %"class.blink::StyleResolverStats"* }
%"class.blink::StyleResolverStats" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.blink::HeapVector.1279" = type { %"class.WTF::Vector.1282" }
%"class.WTF::Vector.1282" = type { %"class.WTF::VectorBuffer.1283" }
%"class.WTF::VectorBuffer.1283" = type { %"class.WTF::VectorBufferBase.1284" }
%"class.WTF::VectorBufferBase.1284" = type { %"struct.std::__1::pair.1285"*, i32, i32 }
%"struct.std::__1::pair.1285" = type opaque
%"class.blink::HeapVector.1010" = type { %"class.WTF::Vector.1013" }
%"class.WTF::Vector.1013" = type { %"class.WTF::VectorBuffer.1014" }
%"class.WTF::VectorBuffer.1014" = type { %"class.WTF::VectorBufferBase.1015" }
%"class.WTF::VectorBufferBase.1015" = type { %"struct.std::__1::pair.1016"*, i32, i32 }
%"struct.std::__1::pair.1016" = type opaque
%"class.blink::HeapHashSet.1287" = type { %"class.WTF::HashSet.1290" }
%"class.WTF::HashSet.1290" = type { %"class.WTF::HashTable.1291" }
%"class.WTF::HashTable.1291" = type <{ %"class.blink::WeakMember.1293"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1293" = type { %"class.blink::MemberBase.390" }
%"class.blink::HeapHashMap.1294" = type { %"class.WTF::HashMap.1297" }
%"class.WTF::HashMap.1297" = type { %"class.WTF::HashTable.1298" }
%"class.WTF::HashTable.1298" = type <{ %"struct.WTF::KeyValuePair.1300"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1300" = type { %"class.WTF::AtomicString", %"class.blink::Member.1180" }
%"class.blink::Member.1301" = type { %"class.blink::MemberBase.1302" }
%"class.blink::MemberBase.1302" = type { %"class.blink::CounterStyleMap"* }
%"class.blink::CounterStyleMap" = type opaque
%"class.blink::HeapHashMap.1303" = type { %"class.WTF::HashMap.1306" }
%"class.WTF::HashMap.1306" = type { %"class.WTF::HashTable.1307" }
%"class.WTF::HashTable.1307" = type <{ %"struct.WTF::KeyValuePair.1309"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1309" = type opaque
%class.scoped_refptr.1310 = type { %"class.blink::DocumentStyleEnvironmentVariables"* }
%"class.blink::DocumentStyleEnvironmentVariables" = type opaque
%"class.blink::Member.1215" = type { %"class.blink::MemberBase.1216" }
%"class.blink::MemberBase.1216" = type { %"class.blink::CSSValue"* }
%"class.blink::CSSValue" = type { i8, i8, i8 }
%"class.blink::HeapHashSet.1311" = type { %"class.WTF::HashSet.1314" }
%"class.WTF::HashSet.1314" = type { %"class.WTF::HashTable.1315" }
%"class.WTF::HashTable.1315" = type <{ %"class.blink::Member.1317"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1317" = type opaque
%"class.blink::Member.1318" = type { %"class.blink::MemberBase.1319" }
%"class.blink::MemberBase.1319" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type { %"class.blink::ScriptWrappable", %"class.blink::Member.320", %"class.blink::HeapVector.383" }
%"class.blink::Member.1320" = type { %"class.blink::MemberBase.1321" }
%"class.blink::MemberBase.1321" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Member.1322" = type { %"class.blink::MemberBase.1323" }
%"class.blink::MemberBase.1323" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.1324" = type { %"class.WTF::HashMap.1327" }
%"class.WTF::HashMap.1327" = type { %"class.WTF::HashTable.1328" }
%"class.WTF::HashTable.1328" = type <{ %"struct.WTF::KeyValuePair.1330"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1330" = type opaque
%"class.WTF::Vector.1331" = type { %"class.WTF::VectorBuffer.1332" }
%"class.WTF::VectorBuffer.1332" = type { %"class.WTF::VectorBufferBase.1333" }
%"class.WTF::VectorBufferBase.1333" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.1336" = type { %"class.blink::MemberBase.1337" }
%"class.blink::MemberBase.1337" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.1338" = type { %"class.blink::MemberBase.1339" }
%"class.blink::MemberBase.1339" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.blink::Member.343" = type { %"class.blink::MemberBase.344" }
%"class.blink::MemberBase.344" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.348" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.345 }
%class.scoped_refptr.345 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted.346", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.346" = type { %"class.base::RefCounted.347" }
%"class.base::RefCounted.347" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Member.348" = type { %"class.blink::MemberBase.349" }
%"class.blink::MemberBase.349" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.352", %"class.blink::Member.354", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.352" = type { %"class.WTF::SingleThreadedBitField.353" }
%"class.WTF::SingleThreadedBitField.353" = type { i32 }
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.358 }
%class.scoped_refptr.358 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.359", %"class.WTF::AtomicString", %"class.WTF::Vector.361" }
%"class.WTF::RefCounted.359" = type { %"class.base::RefCounted.360" }
%"class.base::RefCounted.360" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.361" = type { %"class.WTF::VectorBuffer.362" }
%"class.WTF::VectorBuffer.362" = type { %"class.WTF::VectorBufferBase.286", [32 x i8] }
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.1340" = type { %"class.blink::MemberBase.1341" }
%"class.blink::MemberBase.1341" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.1342" = type { %"class.WTF::Vector.1345" }
%"class.WTF::Vector.1345" = type { %"class.WTF::VectorBuffer.1346" }
%"class.WTF::VectorBuffer.1346" = type { %"class.WTF::VectorBufferBase.1347" }
%"class.WTF::VectorBufferBase.1347" = type { %"class.blink::Member.1348"*, i32, i32 }
%"class.blink::Member.1348" = type opaque
%"class.std::__1::unique_ptr.1350" = type { %"class.std::__1::__compressed_pair.1351" }
%"class.std::__1::__compressed_pair.1351" = type { %"struct.std::__1::__compressed_pair_elem.1352" }
%"struct.std::__1::__compressed_pair_elem.1352" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.blink::HeapHashSet.1356" = type { %"class.WTF::HashSet.1359" }
%"class.WTF::HashSet.1359" = type { %"class.WTF::HashTable.1360" }
%"class.WTF::HashTable.1360" = type <{ %"class.blink::WeakMember.1362"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1362" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.1363", i32, [4 x i8] }>
%"class.WTF::Vector.1363" = type { %"class.WTF::VectorBuffer.1364" }
%"class.WTF::VectorBuffer.1364" = type { %"class.WTF::VectorBufferBase.1365" }
%"class.WTF::VectorBufferBase.1365" = type { %"struct.std::__1::pair.1366"*, i32, i32 }
%"struct.std::__1::pair.1366" = type opaque
%"class.blink::Member.1369" = type { %"class.blink::MemberBase.1370" }
%"class.blink::MemberBase.1370" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.1371" = type { %"class.WTF::VectorBuffer.1372" }
%"class.WTF::VectorBuffer.1372" = type { %"class.WTF::VectorBufferBase.1373" }
%"class.WTF::VectorBufferBase.1373" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type <{ %"struct.blink::PhysicalRect", i8, [3 x i8] }>
%"struct.blink::PhysicalRect" = type { %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalSize" }
%"struct.blink::PhysicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::PhysicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.std::__1::unique_ptr.1376" = type { %"class.std::__1::__compressed_pair.1377" }
%"class.std::__1::__compressed_pair.1377" = type { %"struct.std::__1::__compressed_pair_elem.1378" }
%"struct.std::__1::__compressed_pair_elem.1378" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector.365" = type { %"class.WTF::Vector.368" }
%"class.WTF::Vector.368" = type { %"class.WTF::VectorBuffer.369" }
%"class.WTF::VectorBuffer.369" = type { %"class.WTF::VectorBufferBase.370" }
%"class.WTF::VectorBufferBase.370" = type { %"class.blink::Member.343"*, i32, i32 }
%"class.blink::HeapVector.1382" = type { %"class.WTF::Vector.1385" }
%"class.WTF::Vector.1385" = type { %"class.WTF::VectorBuffer.1386" }
%"class.WTF::VectorBuffer.1386" = type { %"class.WTF::VectorBufferBase.1387" }
%"class.WTF::VectorBufferBase.1387" = type { %"class.blink::Member.1388"*, i32, i32 }
%"class.blink::Member.1388" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.326" }
%"class.blink::Member.1390" = type { %"class.blink::MemberBase.1391" }
%"class.blink::MemberBase.1391" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.1392" = type { %"class.blink::MemberBase.1393" }
%"class.blink::MemberBase.1393" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.1394" = type { %"class.blink::MemberBase.1395" }
%"class.blink::MemberBase.1395" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.1396" = type { %"class.blink::MemberBase.1397" }
%"class.blink::MemberBase.1397" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.1398" = type { %"class.blink::MemberBase.1399" }
%"class.blink::MemberBase.1399" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.1400" = type { %"class.WTF::HashTable.1401" }
%"class.WTF::HashTable.1401" = type <{ %"struct.WTF::KeyValuePair.1404"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1404" = type opaque
%"class.blink::Member.1405" = type { %"class.blink::MemberBase.1406" }
%"class.blink::MemberBase.1406" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.1407" = type { %"class.blink::MemberBase.1408" }
%"class.blink::MemberBase.1408" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.1409" = type { %"class.blink::MemberBase.1410" }
%"class.blink::MemberBase.1410" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.1411" = type { %"class.blink::MemberBase.1412" }
%"class.blink::MemberBase.1412" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.966", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.963, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.963 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.964" }>
%"class.base::RefCountedThreadSafe.964" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.965 }
%class.scoped_refptr.965 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.blink::WeakMember.966" = type { %"class.blink::MemberBase.327" }
%"class.blink::HeapHashSet.1413" = type { %"class.WTF::HashSet.1416" }
%"class.WTF::HashSet.1416" = type { %"class.WTF::HashTable.1417" }
%"class.WTF::HashTable.1417" = type <{ %"class.blink::Member.1419"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1419" = type opaque
%"class.blink::Member.1420" = type { %"class.blink::MemberBase.1421" }
%"class.blink::MemberBase.1421" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.1422" = type { %"class.blink::MemberBase.1423" }
%"class.blink::MemberBase.1423" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.1424" = type { %"class.blink::MemberBase.1425" }
%"class.blink::MemberBase.1425" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.1426" = type { %"class.blink::MemberBase.1427" }
%"class.blink::MemberBase.1427" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.1428" = type { %"class.blink::MemberBase.1429" }
%"class.blink::MemberBase.1429" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.1430" = type { %"class.std::__1::__compressed_pair.1431" }
%"class.std::__1::__compressed_pair.1431" = type { %"struct.std::__1::__compressed_pair_elem.1432" }
%"struct.std::__1::__compressed_pair_elem.1432" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.1436" = type { %"class.std::__1::__compressed_pair.1437" }
%"class.std::__1::__compressed_pair.1437" = type { %"struct.std::__1::__compressed_pair_elem.1438" }
%"struct.std::__1::__compressed_pair_elem.1438" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type { %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", %"class.WTF::HashSet.425", i32, [4 x i8], %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", %"class.WTF::HashMap.1439", i64, i64, %"class.ukm::UkmRecorder"*, i64, %"class.blink::TaskRunnerTimer" }
%"class.WTF::HashMap.1439" = type { %"class.WTF::HashTable.1440" }
%"class.WTF::HashTable.1440" = type <{ %"struct.WTF::KeyValuePair.1443"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1443" = type opaque
%"class.blink::TaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::FontMatchingMetrics"*, { i64, i64 } }
%"class.blink::Member.1447" = type { %"class.blink::MemberBase.1448" }
%"class.blink::MemberBase.1448" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.1449" = type { %"class.blink::MemberBase.1450" }
%"class.blink::MemberBase.1450" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.1451" = type { %"class.blink::MemberBase.1452" }
%"class.blink::MemberBase.1452" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.1453" = type { %"class.blink::MemberBase.1454" }
%"class.blink::MemberBase.1454" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.1455" = type { %"class.WTF::VectorBuffer.1456" }
%"class.WTF::VectorBuffer.1456" = type { %"class.WTF::VectorBufferBase.1457" }
%"class.WTF::VectorBufferBase.1457" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.1460" = type { %"class.WTF::HashMap.1463" }
%"class.WTF::HashMap.1463" = type { %"class.WTF::HashTable.1464" }
%"class.WTF::HashTable.1464" = type <{ %"struct.WTF::KeyValuePair.1466"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1466" = type opaque
%"class.blink::Member.1467" = type { %"class.blink::MemberBase.1468" }
%"class.blink::MemberBase.1468" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.1469" = type { %"class.std::__1::__compressed_pair.1470" }
%"class.std::__1::__compressed_pair.1470" = type { %"struct.std::__1::__compressed_pair_elem.1471" }
%"struct.std::__1::__compressed_pair_elem.1471" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.1475" = type { %"class.blink::MemberBase.1476" }
%"class.blink::MemberBase.1476" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.1477" = type { %"class.blink::MemberBase.1478" }
%"class.blink::MemberBase.1478" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.1479" = type { %"class.WTF::HashMap.1482" }
%"class.WTF::HashMap.1482" = type { %"class.WTF::HashTable.1483" }
%"class.WTF::HashTable.1483" = type <{ %"struct.WTF::KeyValuePair.1485"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1485" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.1486" }
%"class.blink::HeapHashSet.1486" = type { %"class.WTF::HashSet.1489" }
%"class.WTF::HashSet.1489" = type { %"class.WTF::HashTable.1490" }
%"class.WTF::HashTable.1490" = type <{ %"class.blink::WeakMember.1492"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1492" = type opaque
%"class.blink::Member.1493" = type { %"class.blink::MemberBase.1494" }
%"class.blink::MemberBase.1494" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.1495" = type { %"class.blink::MemberBase.1496" }
%"class.blink::MemberBase.1496" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.326", %"class.blink::HeapHashSet.1502", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.1509", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.1502" = type { %"class.WTF::HashSet.1505" }
%"class.WTF::HashSet.1505" = type { %"class.WTF::HashTable.1506" }
%"class.WTF::HashTable.1506" = type <{ %"class.blink::Member.1508"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1508" = type opaque
%"class.blink::HeapTaskRunnerTimer.1509" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.1510", { i64, i64 } }
%"class.blink::WeakMember.1510" = type { %"class.blink::MemberBase.1496" }
%"class.blink::WeakMember.1497" = type { %"class.blink::MemberBase.319" }
%"class.blink::Member.1498" = type { %"class.blink::MemberBase.1499" }
%"class.blink::MemberBase.1499" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::Member.320" = type { %"class.blink::MemberBase.321" }
%"class.blink::Member.328" = type { %"class.blink::MemberBase.329" }
%"class.blink::MemberBase.329" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap.332" }
%"class.blink::HeapHashMap.332" = type { %"class.WTF::HashMap.335" }
%"class.WTF::HashMap.335" = type { %"class.WTF::HashTable.336" }
%"class.WTF::HashTable.336" = type <{ %"struct.WTF::KeyValuePair.338"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.338" = type { %"class.WTF::AtomicString", %"class.blink::Member.339" }
%"class.blink::Member.339" = type { %"class.blink::MemberBase.340" }
%"class.blink::MemberBase.340" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.343", i32, %"class.blink::HeapVector.365" }
%"class.blink::Member.372" = type { %"class.blink::MemberBase.373" }
%"class.blink::MemberBase.373" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.374" = type { %"class.blink::MemberBase.375" }
%"class.blink::MemberBase.375" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.376" = type { %"class.blink::MemberBase.377" }
%"class.blink::MemberBase.377" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.378" }
%"class.blink::Member.378" = type { %"class.blink::MemberBase.379" }
%"class.blink::MemberBase.379" = type { %"class.blink::HeapHashMap.380"* }
%"class.blink::HeapHashMap.380" = type opaque
%"class.blink::Member.381" = type { %"class.blink::MemberBase.382" }
%"class.blink::MemberBase.382" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.383" = type { %"class.WTF::Vector.386" }
%"class.WTF::Vector.386" = type { %"class.WTF::VectorBuffer.387" }
%"class.WTF::VectorBuffer.387" = type { %"class.WTF::VectorBufferBase.388" }
%"class.WTF::VectorBufferBase.388" = type { %"class.blink::Member.389"*, i32, i32 }
%"class.blink::Member.441" = type { %"class.blink::MemberBase.442" }
%"class.blink::MemberBase.442" = type { %"class.blink::CounterStyle"* }
%"class.blink::CounterStyle" = type opaque
%"class.blink::TextDecorationThickness" = type { %"class.blink::Length", i8, [3 x i8] }
%"class.blink::TextSizeAdjust" = type { float }
%"struct.blink::TabSize" = type <{ float, i8, [3 x i8] }>
%"class.blink::StyleAutoColor" = type { %"class.blink::StyleColor" }
%"class.blink::DataRef.443" = type { %class.scoped_refptr.444 }
%class.scoped_refptr.444 = type { %"class.blink::ComputedStyleBase::StyleVisualData"* }
%"class.blink::ComputedStyleBase::StyleVisualData" = type <{ %"class.WTF::RefCounted.445", %"class.blink::LengthBox", float, i8, [3 x i8] }>
%"class.WTF::RefCounted.445" = type { %"class.base::RefCounted.446" }
%"class.base::RefCounted.446" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::LengthBox" = type { %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length" }
%"class.blink::DataRef.447" = type { %class.scoped_refptr.448 }
%class.scoped_refptr.448 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData" = type <{ %"class.WTF::RefCounted.449", [4 x i8], %"class.blink::DataRef.451", %"class.blink::DataRef.517", %"class.blink::TransformOperations", %class.scoped_refptr.298, %"class.blink::Persistent.641", %"class.blink::TransformOrigin", float, float, %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleContentAlignmentData", i16, [2 x i8] }>
%"class.WTF::RefCounted.449" = type { %"class.base::RefCounted.450" }
%"class.base::RefCounted.450" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.451" = type { %class.scoped_refptr.452 }
%class.scoped_refptr.452 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData" = type <{ %"class.WTF::RefCounted.453", [4 x i8], %"class.blink::DataRef.455", %"class.blink::Persistent.493", %"class.blink::Length", float, float, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i32, i32, %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleContentAlignmentData", [3 x i8], [5 x i8] }>
%"class.WTF::RefCounted.453" = type { %"class.base::RefCounted.454" }
%"class.base::RefCounted.454" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.455" = type { %class.scoped_refptr.456 }
%class.scoped_refptr.456 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan100PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan100PercentData" = type { %"class.WTF::RefCounted.457", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.WTF::AtomicString", %class.scoped_refptr.475, %class.scoped_refptr.478, %class.scoped_refptr.481, %class.scoped_refptr.484, %class.scoped_refptr.485, %class.scoped_refptr.486, %"class.blink::Persistent.493", %"class.blink::Persistent.508", %"class.absl::optional.512", %"class.absl::optional.512", %"struct.blink::StyleOffsetRotation", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", float, float, float, %"struct.cc::ScrollSnapType", %"struct.cc::ScrollSnapAlign", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", i32, i16, [2 x i8], %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleSelfAlignmentData", i32 }
%"class.WTF::RefCounted.457" = type { %"class.base::RefCounted.458" }
%"class.base::RefCounted.458" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::GridTrackList" = type { %"class.WTF::Vector.459", %"class.std::__1::unique_ptr.464" }
%"class.WTF::Vector.459" = type { %"class.WTF::VectorBuffer.460" }
%"class.WTF::VectorBuffer.460" = type { %"class.WTF::VectorBufferBase.461" }
%"class.WTF::VectorBufferBase.461" = type { %"class.blink::GridTrackSize"*, i32, i32 }
%"class.blink::GridTrackSize" = type <{ i32, [4 x i8], %"class.blink::GridLength", %"class.blink::GridLength", %"class.blink::GridLength", i16, [6 x i8] }>
%"class.blink::GridLength" = type <{ %"class.blink::Length", double, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.464" = type { %"class.std::__1::__compressed_pair.465" }
%"class.std::__1::__compressed_pair.465" = type { %"struct.std::__1::__compressed_pair_elem.466" }
%"struct.std::__1::__compressed_pair_elem.466" = type { %"class.blink::NGGridTrackList"* }
%"class.blink::NGGridTrackList" = type { %"class.WTF::Vector.467", %"class.WTF::Vector.459", i32, i32 }
%"class.WTF::Vector.467" = type { %"class.WTF::VectorBuffer.468" }
%"class.WTF::VectorBuffer.468" = type { %"class.WTF::VectorBufferBase.469" }
%"class.WTF::VectorBufferBase.469" = type { %"struct.blink::NGGridTrackRepeater"*, i32, i32 }
%"struct.blink::NGGridTrackRepeater" = type { i32, i32, i32, i32 }
%"class.blink::GridPosition" = type { i32, i32, %"class.WTF::AtomicString" }
%class.scoped_refptr.475 = type { %"class.blink::ClipPathOperation"* }
%"class.blink::ClipPathOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted.476", [4 x i8] }>
%"class.WTF::RefCounted.476" = type { %"class.base::RefCounted.477" }
%"class.base::RefCounted.477" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.478 = type { %"class.blink::BasicShape"* }
%"class.blink::BasicShape" = type <{ i32 (...)**, %"class.WTF::RefCounted.479", [4 x i8] }>
%"class.WTF::RefCounted.479" = type { %"class.base::RefCounted.480" }
%"class.base::RefCounted.480" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.481 = type { %"class.blink::RotateTransformOperation"* }
%"class.blink::RotateTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], %"struct.blink::Rotation", i32, [4 x i8] }>
%"class.blink::TransformOperation.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.482" }>
%"class.WTF::RefCounted.482" = type { %"class.base::RefCounted.483" }
%"class.base::RefCounted.483" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::Rotation" = type { %"class.blink::FloatPoint3D", double }
%"class.blink::FloatPoint3D" = type { float, float, float }
%class.scoped_refptr.484 = type { %"class.blink::ScaleTransformOperation"* }
%"class.blink::ScaleTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], double, double, double, i32, [4 x i8] }>
%class.scoped_refptr.485 = type { %"class.blink::TranslateTransformOperation"* }
%"class.blink::TranslateTransformOperation" = type <{ %"class.blink::TransformOperation.base", %"class.blink::Length", %"class.blink::Length", [4 x i8], double, i32, [4 x i8] }>
%class.scoped_refptr.486 = type { %"class.blink::StyleReflection"* }
%"class.blink::StyleReflection" = type { %"class.WTF::RefCounted.487", i32, %"class.blink::Length", %"class.blink::NinePieceImage" }
%"class.WTF::RefCounted.487" = type { %"class.base::RefCounted.488" }
%"class.base::RefCounted.488" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::NinePieceImage" = type { %"class.blink::DataRef.489" }
%"class.blink::DataRef.489" = type { %class.scoped_refptr.490 }
%class.scoped_refptr.490 = type { %"class.blink::NinePieceImageData"* }
%"class.blink::NinePieceImageData" = type { %"class.WTF::RefCountedCopyable", i8, %"class.blink::Persistent.306", %"class.blink::LengthBox", %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox" }
%"class.WTF::RefCountedCopyable" = type { %"class.WTF::RefCounted.491" }
%"class.WTF::RefCounted.491" = type { %"class.base::RefCounted.492" }
%"class.base::RefCounted.492" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::BorderImageLengthBox" = type { %"class.blink::BorderImageLength", %"class.blink::BorderImageLength", %"class.blink::BorderImageLength", %"class.blink::BorderImageLength" }
%"class.blink::BorderImageLength" = type <{ %"class.blink::Length", double, i32, [4 x i8] }>
%"class.blink::Persistent.508" = type { %"class.blink::PersistentBase.509" }
%"class.blink::PersistentBase.509" = type { %"class.blink::ShapeValue"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::ShapeValue" = type <{ i32 (...)**, i32, [4 x i8], %class.scoped_refptr.478, %"class.blink::Member", i32, [4 x i8] }>
%"class.absl::optional.512" = type { %"class.absl::optional_internal::optional_data.513" }
%"class.absl::optional_internal::optional_data.513" = type { %"class.absl::optional_internal::optional_data_base.514" }
%"class.absl::optional_internal::optional_data_base.514" = type { %"class.absl::optional_internal::optional_data_dtor_base.515" }
%"class.absl::optional_internal::optional_data_dtor_base.515" = type { i8, [3 x i8], %union.anon.516 }
%union.anon.516 = type { %"class.blink::Length" }
%"struct.blink::StyleOffsetRotation" = type { float, i32 }
%"struct.blink::LengthPoint" = type { %"class.blink::Length", %"class.blink::Length" }
%"struct.cc::ScrollSnapType" = type { i8, i32, i32 }
%"struct.cc::ScrollSnapAlign" = type { i32, i32 }
%"class.blink::Persistent.493" = type { %"class.blink::PersistentBase.494" }
%"class.blink::PersistentBase.494" = type { %"class.blink::StyleFilterData"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::StyleFilterData" = type { %"class.blink::FilterOperations" }
%"class.blink::FilterOperations" = type { %"class.blink::HeapVector.497" }
%"class.blink::HeapVector.497" = type { %"class.WTF::Vector.500" }
%"class.WTF::Vector.500" = type { %"class.WTF::VectorBuffer.501" }
%"class.WTF::VectorBuffer.501" = type { %"class.WTF::VectorBufferBase.502" }
%"class.WTF::VectorBufferBase.502" = type { %"class.blink::Member.503"*, i32, i32 }
%"class.blink::Member.503" = type { %"class.blink::MemberBase.504" }
%"class.blink::MemberBase.504" = type { %"class.blink::FilterOperation"* }
%"class.blink::FilterOperation" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.blink::DataRef.517" = type { %class.scoped_refptr.518 }
%class.scoped_refptr.518 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData" = type { %"class.WTF::RefCounted.519", %"class.blink::DataRef.521", %"class.blink::DataRef.525", %"class.blink::DataRef.534", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.std::__1::unique_ptr.553", %"class.std::__1::unique_ptr.564", %"class.std::__1::unique_ptr.602", %"class.std::__1::unique_ptr.613", %"class.std::__1::unique_ptr.624", %"class.WTF::Vector.630", %"class.blink::FillLayer", %"class.blink::NinePieceImage", %"class.blink::FloatSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", float, float, float, float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", i32 }
%"class.WTF::RefCounted.519" = type { %"class.base::RefCounted.520" }
%"class.base::RefCounted.520" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.521" = type { %class.scoped_refptr.522 }
%class.scoped_refptr.522 = type { %"class.blink::ComputedStyleBase::StyleMultiColData"* }
%"class.blink::ComputedStyleBase::StyleMultiColData" = type <{ %"class.WTF::RefCounted.523", %"class.blink::StyleColor", i8, [3 x i8] }>
%"class.WTF::RefCounted.523" = type { %"class.base::RefCounted.524" }
%"class.base::RefCounted.524" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.525" = type { %class.scoped_refptr.526 }
%class.scoped_refptr.526 = type { %"class.blink::ComputedStyleBase::StyleWillChangeData"* }
%"class.blink::ComputedStyleBase::StyleWillChangeData" = type <{ %"class.WTF::RefCounted.527", [4 x i8], %"class.WTF::Vector.529", i8, [7 x i8] }>
%"class.WTF::RefCounted.527" = type { %"class.base::RefCounted.528" }
%"class.base::RefCounted.528" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.529" = type { %"class.WTF::VectorBuffer.530" }
%"class.WTF::VectorBuffer.530" = type { %"class.WTF::VectorBufferBase.531" }
%"class.WTF::VectorBufferBase.531" = type { i32*, i32, i32 }
%"class.blink::DataRef.534" = type { %class.scoped_refptr.535 }
%class.scoped_refptr.535 = type { %"class.blink::ComputedStyleBase::StyleGridData"* }
%"class.blink::ComputedStyleBase::StyleGridData" = type <{ %"class.WTF::RefCounted.536", [4 x i8], %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.538", %"class.WTF::HashMap.543", %"class.WTF::HashMap.543", %"class.WTF::HashMap.543", %"class.WTF::HashMap.543", %"class.WTF::HashMap.548", %"class.WTF::Vector.459", %"class.WTF::Vector.459", i64, i64, i64, i64, i8, [7 x i8] }>
%"class.WTF::RefCounted.536" = type { %"class.base::RefCounted.537" }
%"class.base::RefCounted.537" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::HashMap.538" = type { %"class.WTF::HashTable.539" }
%"class.WTF::HashTable.539" = type <{ %"struct.WTF::KeyValuePair.542"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.542" = type { %"class.WTF::String", %"class.WTF::Vector.1927" }
%"class.WTF::Vector.1927" = type { %"class.WTF::VectorBuffer.1928" }
%"class.WTF::VectorBuffer.1928" = type { %"class.WTF::VectorBufferBase.1929" }
%"class.WTF::VectorBufferBase.1929" = type { i64*, i32, i32 }
%"class.WTF::HashMap.543" = type { %"class.WTF::HashTable.544" }
%"class.WTF::HashTable.544" = type <{ %"struct.WTF::KeyValuePair.547"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.547" = type { i64, %"class.WTF::Vector.630" }
%"class.WTF::HashMap.548" = type { %"class.WTF::HashTable.549" }
%"class.WTF::HashTable.549" = type <{ %"struct.WTF::KeyValuePair.552"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.552" = type { %"class.WTF::String", %"struct.blink::GridArea" }
%"struct.blink::GridArea" = type { %"struct.blink::GridSpan", %"struct.blink::GridSpan" }
%"struct.blink::GridSpan" = type { i32, i32, i32 }
%"class.std::__1::unique_ptr.553" = type { %"class.std::__1::__compressed_pair.554" }
%"class.std::__1::__compressed_pair.554" = type { %"struct.std::__1::__compressed_pair_elem.555" }
%"struct.std::__1::__compressed_pair_elem.555" = type { %"class.blink::CounterDirectiveMap"* }
%"class.blink::CounterDirectiveMap" = type { %"class.WTF::HashMap.556" }
%"class.WTF::HashMap.556" = type { %"class.WTF::HashTable.557" }
%"class.WTF::HashTable.557" = type <{ %"struct.WTF::KeyValuePair.560"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.560" = type { %"class.WTF::AtomicString", %"class.blink::CounterDirectives" }
%"class.blink::CounterDirectives" = type { %"class.absl::optional.1932", %"class.absl::optional.1932", %"class.absl::optional.1932" }
%"class.absl::optional.1932" = type { %"class.absl::optional_internal::optional_data.1933" }
%"class.absl::optional_internal::optional_data.1933" = type { %"class.absl::optional_internal::optional_data_base.1934" }
%"class.absl::optional_internal::optional_data_base.1934" = type { %"class.absl::optional_internal::optional_data_dtor_base.1935" }
%"class.absl::optional_internal::optional_data_dtor_base.1935" = type { i8, %union.anon.1936 }
%union.anon.1936 = type { i32 }
%"class.std::__1::unique_ptr.564" = type { %"class.std::__1::__compressed_pair.565" }
%"class.std::__1::__compressed_pair.565" = type { %"struct.std::__1::__compressed_pair_elem.566" }
%"struct.std::__1::__compressed_pair_elem.566" = type { %"class.blink::CSSAnimationData"* }
%"class.blink::CSSAnimationData" = type { %"class.blink::CSSTimingData", %"class.WTF::Vector.284", %"class.WTF::Vector.579", %"class.WTF::Vector.567", %"class.WTF::Vector.584", %"class.WTF::Vector.589", %"class.WTF::Vector.594" }
%"class.blink::CSSTimingData" = type { %"class.WTF::Vector.567", %"class.WTF::Vector.567", %"class.WTF::Vector.572" }
%"class.WTF::Vector.572" = type { %"class.WTF::VectorBuffer.573" }
%"class.WTF::VectorBuffer.573" = type { %"class.WTF::VectorBufferBase.574" }
%"class.WTF::VectorBufferBase.574" = type { %class.scoped_refptr.575*, i32, i32 }
%class.scoped_refptr.575 = type { %"class.blink::TimingFunction"* }
%"class.blink::TimingFunction" = type { i32 (...)**, %"class.WTF::ThreadSafeRefCounted", i32 }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe.576" }
%"class.base::RefCountedThreadSafe.576" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.579" = type { %"class.WTF::VectorBuffer.580" }
%"class.WTF::VectorBuffer.580" = type { %"class.WTF::VectorBufferBase.581" }
%"class.WTF::VectorBufferBase.581" = type { %"class.blink::StyleNameOrKeyword"*, i32, i32 }
%"class.blink::StyleNameOrKeyword" = type { i32, %"class.blink::StyleName" }
%"class.blink::StyleName" = type { i32, %"class.WTF::AtomicString" }
%"class.WTF::Vector.567" = type { %"class.WTF::VectorBuffer.568" }
%"class.WTF::VectorBuffer.568" = type { %"class.WTF::VectorBufferBase.569" }
%"class.WTF::VectorBufferBase.569" = type { double*, i32, i32 }
%"class.WTF::Vector.584" = type { %"class.WTF::VectorBuffer.585" }
%"class.WTF::VectorBuffer.585" = type { %"class.WTF::VectorBufferBase.586" }
%"class.WTF::VectorBufferBase.586" = type { i32*, i32, i32 }
%"class.WTF::Vector.589" = type { %"class.WTF::VectorBuffer.590" }
%"class.WTF::VectorBuffer.590" = type { %"class.WTF::VectorBufferBase.591" }
%"class.WTF::VectorBufferBase.591" = type { i32*, i32, i32 }
%"class.WTF::Vector.594" = type { %"class.WTF::VectorBuffer.595" }
%"class.WTF::VectorBuffer.595" = type { %"class.WTF::VectorBufferBase.596" }
%"class.WTF::VectorBufferBase.596" = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.602" = type { %"class.std::__1::__compressed_pair.603" }
%"class.std::__1::__compressed_pair.603" = type { %"struct.std::__1::__compressed_pair_elem.604" }
%"struct.std::__1::__compressed_pair_elem.604" = type { %"class.blink::CSSTransitionData"* }
%"class.blink::CSSTransitionData" = type { %"class.blink::CSSTimingData", %"class.WTF::Vector.605" }
%"class.WTF::Vector.605" = type { %"class.WTF::VectorBuffer.606" }
%"class.WTF::VectorBuffer.606" = type { %"class.WTF::VectorBufferBase.607" }
%"class.WTF::VectorBufferBase.607" = type { %"struct.blink::CSSTransitionData::TransitionProperty"*, i32, i32 }
%"struct.blink::CSSTransitionData::TransitionProperty" = type { i32, i32, %"class.WTF::AtomicString" }
%"class.std::__1::unique_ptr.613" = type { %"class.std::__1::__compressed_pair.614" }
%"class.std::__1::__compressed_pair.614" = type { %"struct.std::__1::__compressed_pair_elem.615" }
%"struct.std::__1::__compressed_pair_elem.615" = type { %"class.blink::PaintImages"* }
%"class.blink::PaintImages" = type { %"class.WTF::Vector.616" }
%"class.WTF::Vector.616" = type { %"class.WTF::VectorBuffer.617" }
%"class.WTF::VectorBuffer.617" = type { %"class.WTF::VectorBufferBase.618" }
%"class.WTF::VectorBufferBase.618" = type { %"class.blink::Persistent.306"*, i32, i32 }
%"class.std::__1::unique_ptr.624" = type { %"class.std::__1::__compressed_pair.625" }
%"class.std::__1::__compressed_pair.625" = type { %"struct.std::__1::__compressed_pair_elem.626" }
%"struct.std::__1::__compressed_pair_elem.626" = type { %"class.blink::StyleNonInheritedVariables"* }
%"class.blink::StyleNonInheritedVariables" = type { %"class.blink::StyleVariables" }
%"class.blink::FillLayer" = type <{ %"class.blink::FillLayer"*, %"class.blink::Persistent.306", %"class.blink::Length", %"class.blink::Length", %"class.blink::LengthSize", [7 x i8], i8 }>
%"class.blink::LengthSize" = type { %"class.blink::Length", %"class.blink::Length" }
%"class.blink::TransformOperations" = type { %"class.WTF::Vector.635" }
%"class.WTF::Vector.635" = type { %"class.WTF::VectorBuffer.636" }
%"class.WTF::VectorBuffer.636" = type { %"class.WTF::VectorBufferBase.637" }
%"class.WTF::VectorBufferBase.637" = type { %class.scoped_refptr.638*, i32, i32 }
%class.scoped_refptr.638 = type { %"class.blink::TransformOperation"* }
%"class.blink::TransformOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted.482", [4 x i8] }>
%"class.blink::Persistent.641" = type { %"class.blink::PersistentBase.642" }
%"class.blink::PersistentBase.642" = type { %"class.blink::ContentData"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::ContentData" = type { i32 (...)**, %"class.blink::Member.645" }
%"class.blink::Member.645" = type { %"class.blink::MemberBase.646" }
%"class.blink::MemberBase.646" = type { %"class.blink::ContentData"* }
%"class.blink::TransformOrigin" = type { %"class.blink::Length", %"class.blink::Length", float }
%"class.blink::StyleSelfAlignmentData" = type { i8, [3 x i8] }
%"class.blink::StyleContentAlignmentData" = type { i16, [2 x i8] }
%"class.blink::DataRef.647" = type { %class.scoped_refptr.648 }
%class.scoped_refptr.648 = type { %"class.blink::ComputedStyleBase::StyleSVGData"* }
%"class.blink::ComputedStyleBase::StyleSVGData" = type <{ %"class.WTF::RefCounted.649", [4 x i8], %"class.blink::DataRef.651", %"class.blink::DataRef.655", %"class.blink::DataRef.676", %"class.blink::DataRef.694", %"class.blink::DataRef.706", %"class.blink::DataRef.710", %class.scoped_refptr.680, i32, [4 x i8] }>
%"class.WTF::RefCounted.649" = type { %"class.base::RefCounted.650" }
%"class.base::RefCounted.650" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.651" = type { %class.scoped_refptr.652 }
%class.scoped_refptr.652 = type { %"class.blink::ComputedStyleBase::StyleMiscData"* }
%"class.blink::ComputedStyleBase::StyleMiscData" = type <{ %"class.WTF::RefCounted.653", %"class.blink::Length", float, %"class.blink::StyleColor", %"class.blink::StyleColor", i8, [3 x i8] }>
%"class.WTF::RefCounted.653" = type { %"class.base::RefCounted.654" }
%"class.base::RefCounted.654" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.655" = type { %class.scoped_refptr.656 }
%class.scoped_refptr.656 = type { %"class.blink::ComputedStyleBase::StyleGeometryData"* }
%"class.blink::ComputedStyleBase::StyleGeometryData" = type { %"class.WTF::RefCounted.657", %class.scoped_refptr.659, %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length" }
%"class.WTF::RefCounted.657" = type { %"class.base::RefCounted.658" }
%"class.base::RefCounted.658" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.659 = type { %"class.blink::StylePath"* }
%"class.blink::StylePath" = type { %"class.blink::BasicShape.base", %"class.std::__1::unique_ptr.660", %"class.std::__1::unique_ptr.666", float, i32 }
%"class.blink::BasicShape.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.479" }>
%"class.std::__1::unique_ptr.660" = type { %"class.std::__1::__compressed_pair.661" }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"class.blink::SVGPathByteStream"* }
%"class.blink::SVGPathByteStream" = type opaque
%"class.std::__1::unique_ptr.666" = type { %"class.std::__1::__compressed_pair.667" }
%"class.std::__1::__compressed_pair.667" = type { %"struct.std::__1::__compressed_pair_elem.668" }
%"struct.std::__1::__compressed_pair_elem.668" = type { %"class.blink::Path"* }
%"class.blink::Path" = type { %class.SkPath }
%class.SkPath = type <{ %class.sk_sp.669, i32, %"struct.std::__1::atomic.46", %"struct.std::__1::atomic.46", i8, i8 }>
%class.sk_sp.669 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.670, %class.SkTDArray.671, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic.41" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.670 = type { i8*, i32, i32 }
%class.SkTDArray.671 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.672 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic.41", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.672 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.238", [3 x i8] }
%"class.blink::DataRef.676" = type { %class.scoped_refptr.677 }
%class.scoped_refptr.677 = type { %"class.blink::ComputedStyleBase::StyleFillData"* }
%"class.blink::ComputedStyleBase::StyleFillData" = type { %"class.WTF::RefCounted.678", [4 x i8], %"struct.blink::SVGPaint", %"struct.blink::SVGPaint", float, [4 x i8] }
%"class.WTF::RefCounted.678" = type { %"class.base::RefCounted.679" }
%"class.base::RefCounted.679" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::SVGPaint" = type <{ %class.scoped_refptr.680, %"class.blink::StyleColor", i32, [4 x i8] }>
%"class.blink::DataRef.694" = type { %class.scoped_refptr.695 }
%class.scoped_refptr.695 = type { %"class.blink::ComputedStyleBase::StyleStrokeData"* }
%"class.blink::ComputedStyleBase::StyleStrokeData" = type <{ %"class.WTF::RefCounted.696", [4 x i8], %class.scoped_refptr.698, %"struct.blink::SVGPaint", %"struct.blink::SVGPaint", %"class.blink::Length", %"class.blink::UnzoomedLength", float, float, i8, [7 x i8] }>
%"class.WTF::RefCounted.696" = type { %"class.base::RefCounted.697" }
%"class.base::RefCounted.697" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.698 = type { %"class.base::RefCountedData.699"* }
%"class.base::RefCountedData.699" = type { %"class.base::RefCountedThreadSafe.700", %"class.WTF::Vector.701" }
%"class.base::RefCountedThreadSafe.700" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.701" = type { %"class.WTF::VectorBuffer.702" }
%"class.WTF::VectorBuffer.702" = type { %"class.WTF::VectorBufferBase.703" }
%"class.WTF::VectorBufferBase.703" = type { %"class.blink::Length"*, i32, i32 }
%"class.blink::UnzoomedLength" = type { %"class.blink::Length" }
%"class.blink::DataRef.706" = type { %class.scoped_refptr.707 }
%class.scoped_refptr.707 = type { %"class.blink::ComputedStyleBase::StyleInheritedResourcesData"* }
%"class.blink::ComputedStyleBase::StyleInheritedResourcesData" = type { %"class.WTF::RefCounted.708", %class.scoped_refptr.680, %class.scoped_refptr.680, %class.scoped_refptr.680 }
%"class.WTF::RefCounted.708" = type { %"class.base::RefCounted.709" }
%"class.base::RefCounted.709" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.710" = type { %class.scoped_refptr.711 }
%class.scoped_refptr.711 = type { %"class.blink::ComputedStyleBase::StyleStopData"* }
%"class.blink::ComputedStyleBase::StyleStopData" = type { %"class.WTF::RefCounted.712", float, %"class.blink::StyleColor" }
%"class.WTF::RefCounted.712" = type { %"class.base::RefCounted.713" }
%"class.base::RefCounted.713" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.680 = type { %"class.blink::StyleSVGResource"* }
%"class.blink::StyleSVGResource" = type { %"class.WTF::RefCounted.681", %"class.blink::Persistent.683", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.681" = type { %"class.base::RefCounted.682" }
%"class.base::RefCounted.682" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.683" = type { %"class.blink::PersistentBase.684" }
%"class.blink::PersistentBase.684" = type { %"class.blink::SVGResource"*, %"class.blink::PersistentNodePtr.269" }
%"class.blink::DataRef.714" = type { %class.scoped_refptr.715 }
%class.scoped_refptr.715 = type { %"class.blink::ComputedStyleBase::StyleBoxData"* }
%"class.blink::ComputedStyleBase::StyleBoxData" = type <{ %"class.WTF::RefCounted.716", %"class.blink::StyleAspectRatio", %"class.blink::LengthSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", i32, i8, [3 x i8] }>
%"class.WTF::RefCounted.716" = type { %"class.base::RefCounted.717" }
%"class.base::RefCounted.717" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::StyleAspectRatio" = type { i8, %"class.blink::FloatSize" }
%"class.blink::DataRef.718" = type { %class.scoped_refptr.719 }
%class.scoped_refptr.719 = type { %"class.blink::ComputedStyleBase::StyleBackgroundData"* }
%"class.blink::ComputedStyleBase::StyleBackgroundData" = type { %"class.WTF::RefCounted.720", [4 x i8], %"class.blink::FillLayer", %"class.blink::StyleColor" }
%"class.WTF::RefCounted.720" = type { %"class.base::RefCounted.721" }
%"class.base::RefCounted.721" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.722" = type { %class.scoped_refptr.723 }
%class.scoped_refptr.723 = type { %"class.blink::ComputedStyleBase::StyleSurroundData"* }
%"class.blink::ComputedStyleBase::StyleSurroundData" = type <{ %"class.WTF::RefCounted.724", [4 x i8], %"class.blink::NinePieceImage", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i16, [6 x i8] }>
%"class.WTF::RefCounted.724" = type { %"class.base::RefCounted.725" }
%"class.base::RefCounted.725" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.726" = type { %class.scoped_refptr.727 }
%class.scoped_refptr.727 = type { %"class.blink::ComputedStyleBase::StyleInheritedVariablesData"* }
%"class.blink::ComputedStyleBase::StyleInheritedVariablesData" = type { %"class.WTF::RefCounted.728", %class.scoped_refptr.730 }
%"class.WTF::RefCounted.728" = type { %"class.base::RefCounted.729" }
%"class.base::RefCounted.729" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.730 = type { %"class.blink::StyleInheritedVariables"* }
%"class.blink::StyleInheritedVariables" = type { %"class.WTF::RefCounted.897", %"class.blink::StyleVariables", %class.scoped_refptr.730 }
%"class.WTF::RefCounted.897" = type { %"class.base::RefCounted.898" }
%"class.base::RefCounted.898" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::RefCounted.731" = type { %"class.base::RefCounted.732" }
%"class.base::RefCounted.732" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::unique_ptr.733" = type { %"class.std::__1::__compressed_pair.734" }
%"class.std::__1::__compressed_pair.734" = type { %"struct.std::__1::__compressed_pair_elem.735" }
%"struct.std::__1::__compressed_pair_elem.735" = type { %"class.blink::StyleCachedData"* }
%"class.blink::StyleCachedData" = type { %"class.std::__1::unique_ptr.736" }
%"class.std::__1::unique_ptr.736" = type { %"class.std::__1::__compressed_pair.737" }
%"class.std::__1::__compressed_pair.737" = type { %"struct.std::__1::__compressed_pair_elem.738" }
%"struct.std::__1::__compressed_pair_elem.738" = type { %"class.WTF::Vector.739"* }
%"class.WTF::Vector.739" = type { %"class.WTF::VectorBuffer.1947" }
%"class.WTF::VectorBuffer.1947" = type { %"class.WTF::VectorBufferBase.1948", [32 x i8] }
%"class.WTF::VectorBufferBase.1948" = type { %class.scoped_refptr*, i32, i32 }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase.746" }
%"class.blink::MemberBase.746" = type { %"class.blink::Node"* }
%"class.blink::FragmentData" = type { %"struct.blink::PhysicalOffset", %"class.std::__1::unique_ptr.747" }
%"class.std::__1::unique_ptr.747" = type { %"class.std::__1::__compressed_pair.748" }
%"class.std::__1::__compressed_pair.748" = type { %"struct.std::__1::__compressed_pair_elem.749" }
%"struct.std::__1::__compressed_pair_elem.749" = type { %"struct.blink::FragmentData::RareData"* }
%"struct.blink::FragmentData::RareData" = type { %"class.std::__1::unique_ptr.750", i64, %"struct.blink::PhysicalOffset", %"class.blink::LayoutUnit", %"class.std::__1::unique_ptr.756", %"class.std::__1::unique_ptr.877", i8, %"class.absl::optional.883", %class.scoped_refptr.859, %"class.blink::CullRect", %"class.blink::CullRect", %"class.std::__1::unique_ptr.888" }
%"class.std::__1::unique_ptr.750" = type { %"class.std::__1::__compressed_pair.751" }
%"class.std::__1::__compressed_pair.751" = type { %"struct.std::__1::__compressed_pair_elem.752" }
%"struct.std::__1::__compressed_pair_elem.752" = type { %"class.blink::PaintLayer"* }
%"class.blink::PaintLayer" = type opaque
%"class.std::__1::unique_ptr.756" = type { %"class.std::__1::__compressed_pair.757" }
%"class.std::__1::__compressed_pair.757" = type { %"struct.std::__1::__compressed_pair_elem.758" }
%"struct.std::__1::__compressed_pair_elem.758" = type { %"class.blink::ObjectPaintProperties"* }
%"class.blink::ObjectPaintProperties" = type { %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.759, %class.scoped_refptr.794, %class.scoped_refptr.808, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.809, %class.scoped_refptr.849, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.850, %class.scoped_refptr.873 }
%class.scoped_refptr.759 = type { %"class.blink::TransformPaintPropertyNode"* }
%"class.blink::TransformPaintPropertyNode" = type { %"class.blink::TransformPaintPropertyNodeOrAlias", %"struct.blink::TransformPaintPropertyNode::State", %"class.std::__1::unique_ptr.776" }
%"class.blink::TransformPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode" }
%"class.blink::PaintPropertyNode" = type { %"class.WTF::RefCounted.760", i8, i8, %class.scoped_refptr.762, i32, i32 }
%"class.WTF::RefCounted.760" = type { %"class.base::RefCounted.761" }
%"class.base::RefCounted.761" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.762 = type { %"class.blink::TransformPaintPropertyNodeOrAlias"* }
%"struct.blink::TransformPaintPropertyNode::State" = type { %"class.blink::TransformPaintPropertyNode::TransformAndOrigin", %class.scoped_refptr.769, %"struct.blink::TransformPaintPropertyNode::State::Flags", i8, i32, i64, %"struct.cc::ElementId", %"class.std::__1::unique_ptr.770", %"struct.cc::ElementId" }
%"class.blink::TransformPaintPropertyNode::TransformAndOrigin" = type { %"class.blink::FloatSize", %"class.std::__1::unique_ptr.763" }
%"class.std::__1::unique_ptr.763" = type { %"class.std::__1::__compressed_pair.764" }
%"class.std::__1::__compressed_pair.764" = type { %"struct.std::__1::__compressed_pair_elem.765" }
%"struct.std::__1::__compressed_pair_elem.765" = type { %"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin"* }
%"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin" = type <{ %"class.blink::TransformationMatrix", %"class.blink::FloatPoint3D", [4 x i8] }>
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%class.scoped_refptr.769 = type { %"class.blink::ScrollPaintPropertyNode"* }
%"class.blink::ScrollPaintPropertyNode" = type { %"class.blink::PaintPropertyNode.795", %"struct.blink::ScrollPaintPropertyNode::State" }
%"class.blink::PaintPropertyNode.795" = type { %"class.WTF::RefCounted.796", i8, i8, %class.scoped_refptr.769, i32, i32 }
%"class.WTF::RefCounted.796" = type { %"class.base::RefCounted.797" }
%"class.base::RefCounted.797" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::ScrollPaintPropertyNode::State" = type { %"class.blink::IntRect", %"class.blink::IntSize", i8, i8, i8, i8, i32, %"struct.cc::ElementId", %"struct.cc::OverscrollBehavior", %"class.absl::optional.798" }
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntSize" = type { i32, i32 }
%"struct.cc::OverscrollBehavior" = type { i32, i32 }
%"class.absl::optional.798" = type { %"class.absl::optional_internal::optional_data.799" }
%"class.absl::optional_internal::optional_data.799" = type { %"class.absl::optional_internal::optional_data_base.800" }
%"class.absl::optional_internal::optional_data_base.800" = type { %"class.absl::optional_internal::optional_data_dtor_base.801" }
%"class.absl::optional_internal::optional_data_dtor_base.801" = type { i8, %union.anon.802 }
%union.anon.802 = type { %"class.cc::SnapContainerData" }
%"class.cc::SnapContainerData" = type { %"struct.cc::ScrollSnapType", %"class.gfx::RectF", %"class.gfx::ScrollOffset", %"class.gfx::ScrollOffset", %"class.std::__1::vector", %"struct.cc::TargetSnapAreaElementIds" }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.cc::SnapAreaData"*, %"struct.cc::SnapAreaData"*, %"class.std::__1::__compressed_pair.803" }
%"struct.cc::SnapAreaData" = type { %"struct.cc::ScrollSnapAlign", %"class.gfx::RectF", i8, %"struct.cc::ElementId" }
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { %"struct.cc::SnapAreaData"* }
%"struct.cc::TargetSnapAreaElementIds" = type { %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.blink::TransformPaintPropertyNode::State::Flags" = type { i8 }
%"class.std::__1::unique_ptr.770" = type { %"class.std::__1::__compressed_pair.771" }
%"class.std::__1::__compressed_pair.771" = type { %"struct.std::__1::__compressed_pair_elem.772" }
%"struct.std::__1::__compressed_pair_elem.772" = type { %"struct.cc::StickyPositionConstraint"* }
%"struct.cc::StickyPositionConstraint" = type { i8, float, float, float, float, %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::RectF", %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::unique_ptr.776" = type { %"class.std::__1::__compressed_pair.777" }
%"class.std::__1::__compressed_pair.777" = type { %"struct.std::__1::__compressed_pair_elem.778" }
%"struct.std::__1::__compressed_pair_elem.778" = type { %"class.blink::GeometryMapperTransformCache"* }
%"class.blink::GeometryMapperTransformCache" = type <{ %"class.blink::FloatSize", %"class.blink::TransformPaintPropertyNode"*, %"class.std::__1::unique_ptr.779", %"class.std::__1::unique_ptr.785", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.779" = type { %"class.std::__1::__compressed_pair.780" }
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.781" }
%"struct.std::__1::__compressed_pair_elem.781" = type { %"struct.blink::GeometryMapperTransformCache::PlaneRootTransform"* }
%"struct.blink::GeometryMapperTransformCache::PlaneRootTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", %"class.blink::TransformPaintPropertyNode"*, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.785" = type { %"class.std::__1::__compressed_pair.786" }
%"class.std::__1::__compressed_pair.786" = type { %"struct.std::__1::__compressed_pair_elem.787" }
%"struct.std::__1::__compressed_pair_elem.787" = type { %"struct.blink::GeometryMapperTransformCache::ScreenTransform"* }
%"struct.blink::GeometryMapperTransformCache::ScreenTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", i8, i8, [6 x i8] }>
%class.scoped_refptr.794 = type { %"class.blink::ScrollPaintPropertyNode"* }
%class.scoped_refptr.808 = type { %"class.blink::TransformPaintPropertyNodeAlias"* }
%"class.blink::TransformPaintPropertyNodeAlias" = type { %"class.blink::TransformPaintPropertyNodeOrAlias" }
%class.scoped_refptr.809 = type { %"class.blink::EffectPaintPropertyNode"* }
%"class.blink::EffectPaintPropertyNode" = type { %"class.blink::EffectPaintPropertyNodeOrAlias", %"struct.blink::EffectPaintPropertyNode::State" }
%"class.blink::EffectPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.810" }
%"class.blink::PaintPropertyNode.810" = type { %"class.WTF::RefCounted.811", i8, i8, %class.scoped_refptr.813, i32, i32 }
%"class.WTF::RefCounted.811" = type { %"class.base::RefCounted.812" }
%"class.base::RefCounted.812" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.813 = type { %"class.blink::EffectPaintPropertyNodeOrAlias"* }
%"struct.blink::EffectPaintPropertyNode::State" = type <{ %class.scoped_refptr.762, %class.scoped_refptr.814, %"class.blink::CompositorFilterOperations", %"class.std::__1::unique_ptr.836", float, i32, i64, %"struct.cc::ElementId", %"class.cc::DocumentTransitionSharedElementId", i8, i8, i8, [5 x i8] }>
%class.scoped_refptr.814 = type { %"class.blink::ClipPaintPropertyNodeOrAlias"* }
%"class.blink::ClipPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.851" }
%"class.blink::PaintPropertyNode.851" = type { %"class.WTF::RefCounted.852", i8, i8, %class.scoped_refptr.814, i32, i32 }
%"class.WTF::RefCounted.852" = type { %"class.base::RefCounted.853" }
%"class.base::RefCounted.853" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::CompositorFilterOperations" = type { %"class.cc::FilterOperations", %"class.blink::FloatRect" }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.815" }
%"class.std::__1::vector.815" = type { %"class.std::__1::__vector_base.816" }
%"class.std::__1::__vector_base.816" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.831" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp.817, [20 x float], i32, [4 x i8], %"class.std::__1::vector.824", i32, [4 x i8] }>
%"class.gfx::Point" = type { i32, i32 }
%"class.std::__1::vector.824" = type { %"class.std::__1::__vector_base.825" }
%"class.std::__1::__vector_base.825" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.826" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair.826" = type { %"struct.std::__1::__compressed_pair_elem.827" }
%"struct.std::__1::__compressed_pair_elem.827" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.831" = type { %"struct.std::__1::__compressed_pair_elem.832" }
%"struct.std::__1::__compressed_pair_elem.832" = type { %"class.cc::FilterOperation"* }
%"class.std::__1::unique_ptr.836" = type { %"class.std::__1::__compressed_pair.837" }
%"class.std::__1::__compressed_pair.837" = type { %"struct.std::__1::__compressed_pair_elem.838" }
%"struct.std::__1::__compressed_pair_elem.838" = type { %"struct.blink::EffectPaintPropertyNode::BackdropFilterInfo"* }
%"struct.blink::EffectPaintPropertyNode::BackdropFilterInfo" = type { %"class.blink::CompositorFilterOperations", %"class.gfx::RRectF", %"struct.cc::ElementId" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%"class.cc::DocumentTransitionSharedElementId" = type { i32, %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.842" }
%"class.std::__1::vector.842" = type { %"class.std::__1::__vector_base.843" }
%"class.std::__1::__vector_base.843" = type { i32*, i32*, %"class.std::__1::__compressed_pair.844" }
%"class.std::__1::__compressed_pair.844" = type { %"struct.std::__1::__compressed_pair_elem.845" }
%"struct.std::__1::__compressed_pair_elem.845" = type { i32* }
%class.scoped_refptr.849 = type { %"class.blink::EffectPaintPropertyNodeAlias"* }
%"class.blink::EffectPaintPropertyNodeAlias" = type { %"class.blink::EffectPaintPropertyNodeOrAlias" }
%class.scoped_refptr.850 = type { %"class.blink::ClipPaintPropertyNode"* }
%"class.blink::ClipPaintPropertyNode" = type { %"class.blink::ClipPaintPropertyNodeOrAlias", %"struct.blink::ClipPaintPropertyNode::State", %"class.std::__1::unique_ptr.862" }
%"struct.blink::ClipPaintPropertyNode::State" = type { %class.scoped_refptr.762, %"class.absl::optional.854", %class.scoped_refptr.859, %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect" }
%"class.absl::optional.854" = type { %"class.absl::optional_internal::optional_data.855" }
%"class.absl::optional_internal::optional_data.855" = type { %"class.absl::optional_internal::optional_data_base.856" }
%"class.absl::optional_internal::optional_data_base.856" = type { %"class.absl::optional_internal::optional_data_dtor_base.857" }
%"class.absl::optional_internal::optional_data_dtor_base.857" = type { i8, [3 x i8], %union.anon.858 }
%union.anon.858 = type { %"class.blink::FloatClipRect" }
%"class.blink::FloatClipRect" = type <{ %"class.blink::FloatRect", i8, [3 x i8] }>
%"class.blink::FloatRoundedRect" = type { %"class.blink::FloatRect", %"class.blink::FloatRoundedRect::Radii" }
%"class.blink::FloatRoundedRect::Radii" = type { %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize" }
%"class.std::__1::unique_ptr.862" = type { %"class.std::__1::__compressed_pair.863" }
%"class.std::__1::__compressed_pair.863" = type { %"struct.std::__1::__compressed_pair_elem.864" }
%"struct.std::__1::__compressed_pair_elem.864" = type { %"class.blink::GeometryMapperClipCache"* }
%"class.blink::GeometryMapperClipCache" = type <{ %"class.WTF::Vector.865", i32, [4 x i8] }>
%"class.WTF::Vector.865" = type { %"class.WTF::VectorBuffer.866" }
%"class.WTF::VectorBuffer.866" = type { %"class.WTF::VectorBufferBase.867" }
%"class.WTF::VectorBufferBase.867" = type { %"struct.blink::GeometryMapperClipCache::ClipCacheEntry"*, i32, i32 }
%"struct.blink::GeometryMapperClipCache::ClipCacheEntry" = type { %"struct.blink::GeometryMapperClipCache::ClipAndTransform", %"class.blink::FloatClipRect", i8, [3 x i8] }
%"struct.blink::GeometryMapperClipCache::ClipAndTransform" = type <{ %"class.blink::ClipPaintPropertyNode"*, %"class.blink::TransformPaintPropertyNode"*, i32, [4 x i8] }>
%class.scoped_refptr.873 = type { %"class.blink::ClipPaintPropertyNodeAlias"* }
%"class.blink::ClipPaintPropertyNodeAlias" = type { %"class.blink::ClipPaintPropertyNodeOrAlias" }
%"class.std::__1::unique_ptr.877" = type { %"class.std::__1::__compressed_pair.878" }
%"class.std::__1::__compressed_pair.878" = type { %"struct.std::__1::__compressed_pair_elem.879" }
%"struct.std::__1::__compressed_pair_elem.879" = type { %"class.blink::RefCountedPropertyTreeState"* }
%"class.blink::RefCountedPropertyTreeState" = type { %class.scoped_refptr.762, %class.scoped_refptr.814, %class.scoped_refptr.813 }
%"class.absl::optional.883" = type { %"class.absl::optional_internal::optional_data.884" }
%"class.absl::optional_internal::optional_data.884" = type { %"class.absl::optional_internal::optional_data_base.885" }
%"class.absl::optional_internal::optional_data_base.885" = type { %"class.absl::optional_internal::optional_data_dtor_base.886" }
%"class.absl::optional_internal::optional_data_dtor_base.886" = type { i8, %union.anon.887 }
%union.anon.887 = type { %"class.blink::IntRect" }
%class.scoped_refptr.859 = type { %"class.blink::RefCountedPath"* }
%"class.blink::RefCountedPath" = type { %"class.blink::Path", %"class.WTF::RefCounted.860", [4 x i8] }
%"class.WTF::RefCounted.860" = type { %"class.base::RefCounted.861" }
%"class.base::RefCounted.861" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::CullRect" = type { %"class.blink::IntRect" }
%"class.std::__1::unique_ptr.888" = type { %"class.std::__1::__compressed_pair.889" }
%"class.std::__1::__compressed_pair.889" = type { %"struct.std::__1::__compressed_pair_elem.890" }
%"struct.std::__1::__compressed_pair_elem.890" = type { %"class.blink::FragmentData"* }
%class.scoped_refptr.1631 = type { %"class.blink::BidiContext"* }
%"class.blink::BidiContext" = type { %"class.WTF::ThreadSafeRefCounted.1687", i16, %class.scoped_refptr.1631 }
%"class.WTF::ThreadSafeRefCounted.1687" = type { %"class.base::RefCountedThreadSafe.1688" }
%"class.base::RefCountedThreadSafe.1688" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.1632" = type { %"class.std::__1::__compressed_pair.1633" }
%"class.std::__1::__compressed_pair.1633" = type { %"struct.std::__1::__compressed_pair_elem.1634" }
%"struct.std::__1::__compressed_pair_elem.1634" = type { %"class.WTF::Vector.1635"* }
%"class.WTF::Vector.1635" = type { %"class.WTF::VectorBuffer.1636" }
%"class.WTF::VectorBuffer.1636" = type { %"class.WTF::VectorBufferBase.1637" }
%"class.WTF::VectorBufferBase.1637" = type { %"class.blink::LayoutBox"**, i32, i32 }
%"class.blink::LayoutBox" = type { %"class.blink::LayoutBoxModelObject", %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRect", %"class.blink::LayoutSize", %"class.blink::LayoutUnit", %"struct.blink::MinMaxSizes", %"class.blink::LayoutUnit", %class.scoped_refptr.1638, %"class.WTF::Vector.1639", %"class.std::__1::unique_ptr.1644", %"struct.blink::BoxLayoutExtraInput"*, %union.anon.1665, %"class.blink::Persistent.1666" }
%"class.blink::LayoutBoxModelObject" = type { %"class.blink::LayoutObject" }
%"class.blink::LayoutRectOutsets" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::MinMaxSizes" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%class.scoped_refptr.1638 = type { %"class.blink::NGLayoutResult"* }
%"class.blink::NGLayoutResult" = type opaque
%"class.WTF::Vector.1639" = type { %"class.WTF::VectorBuffer.1640" }
%"class.WTF::VectorBuffer.1640" = type { %"class.WTF::VectorBufferBase.1641", [8 x i8] }
%"class.WTF::VectorBufferBase.1641" = type { %class.scoped_refptr.1638*, i32, i32 }
%"class.std::__1::unique_ptr.1644" = type { %"class.std::__1::__compressed_pair.1645" }
%"class.std::__1::__compressed_pair.1645" = type { %"struct.std::__1::__compressed_pair_elem.1646" }
%"struct.std::__1::__compressed_pair_elem.1646" = type { %"struct.blink::BoxOverflowModel"* }
%"struct.blink::BoxOverflowModel" = type { %"class.absl::optional.1647", %"class.absl::optional.1652", %"class.absl::optional.1657" }
%"class.absl::optional.1647" = type { %"class.absl::optional_internal::optional_data.1648" }
%"class.absl::optional_internal::optional_data.1648" = type { %"class.absl::optional_internal::optional_data_base.1649" }
%"class.absl::optional_internal::optional_data_base.1649" = type { %"class.absl::optional_internal::optional_data_dtor_base.1650" }
%"class.absl::optional_internal::optional_data_dtor_base.1650" = type { i8, %union.anon.1651 }
%union.anon.1651 = type { %"class.blink::BoxLayoutOverflowModel" }
%"class.blink::BoxLayoutOverflowModel" = type { %"class.blink::LayoutRect", %"class.blink::LayoutUnit" }
%"class.absl::optional.1652" = type { %"class.absl::optional_internal::optional_data.1653" }
%"class.absl::optional_internal::optional_data.1653" = type { %"class.absl::optional_internal::optional_data_base.1654" }
%"class.absl::optional_internal::optional_data_base.1654" = type { %"class.absl::optional_internal::optional_data_dtor_base.1655" }
%"class.absl::optional_internal::optional_data_dtor_base.1655" = type { i8, [3 x i8], %union.anon.1656 }
%union.anon.1656 = type { %"class.blink::BoxVisualOverflowModel" }
%"class.blink::BoxVisualOverflowModel" = type <{ %"class.blink::LayoutRect", %"class.blink::LayoutRect", i8, [3 x i8] }>
%"class.absl::optional.1657" = type { %"class.absl::optional_internal::optional_data.1658" }
%"class.absl::optional_internal::optional_data.1658" = type { %"class.absl::optional_internal::optional_data_base.1659" }
%"class.absl::optional_internal::optional_data_base.1659" = type { %"class.absl::optional_internal::optional_data_dtor_base.1660" }
%"class.absl::optional_internal::optional_data_dtor_base.1660" = type { i8, %union.anon.1661 }
%union.anon.1661 = type { %"struct.blink::BoxOverflowModel::PreviousOverflowData" }
%"struct.blink::BoxOverflowModel::PreviousOverflowData" = type { %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect" }
%"struct.blink::BoxLayoutExtraInput" = type opaque
%union.anon.1665 = type { %"class.blink::InlineBox"* }
%"class.blink::Persistent.1666" = type { %"class.blink::PersistentBase.1667" }
%"class.blink::PersistentBase.1667" = type { %"struct.blink::LayoutBoxRareData"*, %"class.blink::PersistentNodePtr.269" }
%"struct.blink::LayoutBoxRareData" = type { %"class.blink::LayoutMultiColumnSpannerPlaceholder"*, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i8, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutBlock"*, %"class.blink::LayoutBox"*, %"class.std::__1::unique_ptr.1670", %"struct.blink::PhysicalRect", %"class.blink::Member.1680" }
%"class.blink::LayoutMultiColumnSpannerPlaceholder" = type opaque
%"class.blink::LayoutBlock" = type <{ %"class.blink::LayoutBox", %"class.blink::LayoutObjectChildList", i16, [6 x i8] }>
%"class.blink::LayoutObjectChildList" = type { %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"* }
%"class.std::__1::unique_ptr.1670" = type { %"class.std::__1::__compressed_pair.1671" }
%"class.std::__1::__compressed_pair.1671" = type { %"struct.std::__1::__compressed_pair_elem.1672" }
%"struct.std::__1::__compressed_pair_elem.1672" = type { %"class.WTF::HashSet.1673"* }
%"class.WTF::HashSet.1673" = type { %"class.WTF::HashTable.1674" }
%"class.WTF::HashTable.1674" = type <{ %"class.blink::LayoutBox"**, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1680" = type { %"class.blink::MemberBase.1681" }
%"class.blink::MemberBase.1681" = type { %"class.blink::CustomLayoutChild"* }
%"class.blink::CustomLayoutChild" = type opaque
%"class.blink::LayoutUnit" = type { i32 }
%"class.blink::EllipsisBox" = type { %"class.blink::InlineBox", %"class.blink::LayoutUnit", %"class.WTF::AtomicString" }
%"class.blink::ComputedStyleBase" = type <{ %"class.blink::DataRef", %"class.blink::DataRef.244", %"class.blink::DataRef.443", %"class.blink::DataRef.447", %"class.blink::DataRef.647", %"class.blink::DataRef.714", %"class.blink::DataRef.718", %"class.blink::DataRef.722", %"class.blink::DataRef.726", [20 x i8], [4 x i8] }>
%"class.blink::LineBoxList" = type { %"class.blink::InlineBoxList" }
%"class.blink::InlineBoxList" = type { %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"* }
%"class.blink::LayoutBlockFlow" = type { %"class.blink::LayoutBlock.base", %"class.blink::LineBoxList", %"class.blink::Persistent.1963", %"class.std::__1::unique_ptr.1973" }
%"class.blink::LayoutBlock.base" = type <{ %"class.blink::LayoutBox", %"class.blink::LayoutObjectChildList", i16 }>
%"class.blink::Persistent.1963" = type { %"class.blink::PersistentBase.1964" }
%"class.blink::PersistentBase.1964" = type { %"struct.blink::LayoutBlockFlow::LayoutBlockFlowRareData"*, %"class.blink::PersistentNodePtr.269" }
%"struct.blink::LayoutBlockFlow::LayoutBlockFlowRareData" = type <{ %"class.blink::LayoutBlockFlow::MarginValues", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutMultiColumnFlowThread"*, %"class.std::__1::unique_ptr.1967", %"class.WTF::AtomicString", %"class.WTF::AtomicString", i8, [3 x i8], i32, i8, [7 x i8] }>
%"class.blink::LayoutBlockFlow::MarginValues" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutMultiColumnFlowThread" = type opaque
%"class.std::__1::unique_ptr.1967" = type { %"class.std::__1::__compressed_pair.1968" }
%"class.std::__1::__compressed_pair.1968" = type { %"struct.std::__1::__compressed_pair_elem.1969" }
%"struct.std::__1::__compressed_pair_elem.1969" = type { %"class.blink::NGOffsetMapping"* }
%"class.blink::NGOffsetMapping" = type opaque
%"class.std::__1::unique_ptr.1973" = type { %"class.std::__1::__compressed_pair.1974" }
%"class.std::__1::__compressed_pair.1974" = type { %"struct.std::__1::__compressed_pair_elem.1975" }
%"struct.std::__1::__compressed_pair_elem.1975" = type { %"class.blink::FloatingObjects"* }
%"class.blink::FloatingObjects" = type <{ %"class.WTF::ListHashSet.1976", %"class.WTF::PODIntervalTree", i32, i32, i8, [7 x i8], %"class.blink::LayoutBlockFlow"*, [2 x %"struct.blink::FloatingObjects::FloatBottomCachedValue"], i8, [7 x i8] }>
%"class.WTF::ListHashSet.1976" = type { %"class.WTF::HashTable.1979", %"class.WTF::MallocedListHashSetNode"*, %"class.WTF::MallocedListHashSetNode"*, %"class.WTF::MallocedListHashSetAllocator<std::__1::unique_ptr<blink::FloatingObject, std::__1::default_delete<blink::FloatingObject> >, 4>::AllocatorProvider" }
%"class.WTF::HashTable.1979" = type <{ %"class.WTF::MallocedListHashSetNode"**, i32, i32, i32, [4 x i8] }>
%"class.WTF::MallocedListHashSetNode" = type { %"class.std::__1::unique_ptr.1982", %"class.WTF::MallocedListHashSetNode"*, %"class.WTF::MallocedListHashSetNode"* }
%"class.std::__1::unique_ptr.1982" = type { %"class.std::__1::__compressed_pair.1983" }
%"class.std::__1::__compressed_pair.1983" = type { %"struct.std::__1::__compressed_pair_elem.1984" }
%"struct.std::__1::__compressed_pair_elem.1984" = type { %"class.blink::FloatingObject"* }
%"class.blink::FloatingObject" = type <{ %"class.blink::LayoutBox"*, %"class.blink::RootInlineBox"*, %"class.blink::LayoutRect", i8, [7 x i8] }>
%"class.WTF::MallocedListHashSetAllocator<std::__1::unique_ptr<blink::FloatingObject, std::__1::default_delete<blink::FloatingObject> >, 4>::AllocatorProvider" = type { %"struct.WTF::MallocedListHashSetAllocator"* }
%"struct.WTF::MallocedListHashSetAllocator" = type { %"class.WTF::MallocedListHashSetNode"*, i8, [7 x i8], [96 x i8] }
%"class.WTF::PODIntervalTree" = type { %"class.WTF::PODRedBlackTree.base", [7 x i8] }
%"class.WTF::PODRedBlackTree.base" = type <{ i32 (...)**, %class.scoped_refptr.1988, %"class.WTF::PODRedBlackTree<WTF::PODInterval<blink::LayoutUnit, blink::FloatingObject *> >::Node"*, i8 }>
%class.scoped_refptr.1988 = type { %"class.WTF::PODFreeListArena"* }
%"class.WTF::PODFreeListArena" = type opaque
%"class.WTF::PODRedBlackTree<WTF::PODInterval<blink::LayoutUnit, blink::FloatingObject *> >::Node" = type opaque
%"struct.blink::FloatingObjects::FloatBottomCachedValue" = type <{ %"class.blink::FloatingObject"*, i8, [7 x i8] }>
%"struct.blink::PaintInfo" = type <{ %"class.blink::GraphicsContext"*, i32, %"class.blink::CullRect", [4 x i8], %"class.blink::LayoutBoxModelObject"*, %"class.blink::LayoutUnit", i32, i32, i8, i8, [2 x i8] }>
%"class.blink::GraphicsContext" = type { %"class.cc::PaintCanvas"*, %"class.blink::PaintController"*, %"class.WTF::Vector.1769", i32, %"class.blink::GraphicsContextState"*, %"class.cc::PaintRecorder", %"class.printing::MetafileSkia"*, %"class.paint_preview::PaintPreviewTracker"*, float, %"class.std::__1::unique_ptr.1849", i8, i8, i8, i32 }
%"class.cc::PaintCanvas" = type { i32 (...)**, %"class.printing::MetafileSkia"*, %"class.paint_preview::PaintPreviewTracker"* }
%"class.blink::PaintController" = type { i32, %class.scoped_refptr.1694, %class.scoped_refptr.1694, %"class.blink::PaintChunker", i8, i8, %"class.WTF::Vector.1749", i32, i32, i32, [4 x i8], %"class.WTF::HashMap.1754", i32, i32, i32, i32, %"class.WTF::String", %"struct.blink::PaintController::SubsequencesData", %"struct.blink::PaintController::SubsequencesData", i32, i32, i32, i32 }
%class.scoped_refptr.1694 = type { %"class.blink::PaintArtifact"* }
%"class.blink::PaintArtifact" = type { %"class.WTF::RefCounted.1695", [4 x i8], %"class.blink::DisplayItemList", %"class.WTF::Vector.1702" }
%"class.WTF::RefCounted.1695" = type { %"class.base::RefCounted.1696" }
%"class.base::RefCounted.1696" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DisplayItemList" = type <{ %"class.WTF::Vector.1697", i32, [4 x i8] }>
%"class.WTF::Vector.1697" = type { %"class.WTF::VectorBuffer.1698" }
%"class.WTF::VectorBuffer.1698" = type { %"class.WTF::VectorBufferBase.1699" }
%"class.WTF::VectorBufferBase.1699" = type { %"struct.blink::DisplayItemList::ItemSlot"*, i32, i32 }
%"struct.blink::DisplayItemList::ItemSlot" = type { [40 x i8] }
%"class.WTF::Vector.1702" = type { %"class.WTF::VectorBuffer.1703" }
%"class.WTF::VectorBuffer.1703" = type { %"class.WTF::VectorBufferBase.1704" }
%"class.WTF::VectorBufferBase.1704" = type { %"struct.blink::PaintChunk"*, i32, i32 }
%"struct.blink::PaintChunk" = type <{ i32, i32, %"class.blink::Color", float, %"struct.blink::DisplayItem::Id", %"class.blink::RefCountedPropertyTreeState", %"class.std::__1::unique_ptr.1705", %"class.std::__1::unique_ptr.1721", %"class.blink::IntRect", %"class.blink::IntRect", i8, i8, [6 x i8] }>
%"struct.blink::DisplayItem::Id" = type { %"class.blink::DisplayItemClient"*, i32, i32 }
%"class.blink::DisplayItemClient" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.1705" = type { %"class.std::__1::__compressed_pair.1706" }
%"class.std::__1::__compressed_pair.1706" = type { %"struct.std::__1::__compressed_pair_elem.1707" }
%"struct.std::__1::__compressed_pair_elem.1707" = type { %"struct.blink::HitTestData"* }
%"struct.blink::HitTestData" = type { %"class.WTF::Vector.1708", %"class.WTF::Vector.1713", %"class.blink::IntRect", %"class.blink::TransformPaintPropertyNode"* }
%"class.WTF::Vector.1708" = type { %"class.WTF::VectorBuffer.1709" }
%"class.WTF::VectorBuffer.1709" = type { %"class.WTF::VectorBufferBase.1710" }
%"class.WTF::VectorBufferBase.1710" = type { %"struct.blink::TouchActionRect"*, i32, i32 }
%"struct.blink::TouchActionRect" = type { %"class.blink::IntRect", i32 }
%"class.WTF::Vector.1713" = type { %"class.WTF::VectorBuffer.1714" }
%"class.WTF::VectorBuffer.1714" = type { %"class.WTF::VectorBufferBase.1715" }
%"class.WTF::VectorBufferBase.1715" = type { %"class.blink::IntRect"*, i32, i32 }
%"class.std::__1::unique_ptr.1721" = type { %"class.std::__1::__compressed_pair.1722" }
%"class.std::__1::__compressed_pair.1722" = type { %"struct.std::__1::__compressed_pair_elem.1723" }
%"struct.std::__1::__compressed_pair_elem.1723" = type { %"struct.blink::LayerSelectionData"* }
%"struct.blink::LayerSelectionData" = type { %"class.absl::optional.1724", %"class.absl::optional.1724" }
%"class.absl::optional.1724" = type { %"class.absl::optional_internal::optional_data.1725" }
%"class.absl::optional_internal::optional_data.1725" = type { %"class.absl::optional_internal::optional_data_base.1726" }
%"class.absl::optional_internal::optional_data_base.1726" = type { %"class.absl::optional_internal::optional_data_dtor_base.1727" }
%"class.absl::optional_internal::optional_data_dtor_base.1727" = type { i8, [3 x i8], %union.anon.1728 }
%union.anon.1728 = type { %"struct.blink::PaintedSelectionBound" }
%"struct.blink::PaintedSelectionBound" = type <{ i32, %"class.blink::IntPoint", %"class.blink::IntPoint", i8, [3 x i8] }>
%"class.blink::PaintChunker" = type <{ %"class.WTF::Vector.1702"*, %"class.absl::optional.1734", %"class.blink::PropertyTreeStateOrAlias", %"class.blink::Region", i8, i8, i8, i8, %"class.blink::Color", float, [4 x i8] }>
%"class.absl::optional.1734" = type { %"class.absl::optional_internal::optional_data.1735" }
%"class.absl::optional_internal::optional_data.1735" = type { %"class.absl::optional_internal::optional_data_base.1736" }
%"class.absl::optional_internal::optional_data_base.1736" = type { %"class.absl::optional_internal::optional_data_dtor_base.1737" }
%"class.absl::optional_internal::optional_data_dtor_base.1737" = type { i8, %union.anon.1738 }
%union.anon.1738 = type { %"struct.blink::DisplayItem::Id" }
%"class.blink::PropertyTreeStateOrAlias" = type { %"class.blink::TransformPaintPropertyNodeOrAlias"*, %"class.blink::ClipPaintPropertyNodeOrAlias"*, %"class.blink::EffectPaintPropertyNodeOrAlias"* }
%"class.blink::Region" = type { %"class.blink::IntRect", %"class.blink::Region::Shape" }
%"class.blink::Region::Shape" = type { %"class.WTF::Vector.1739", %"class.WTF::Vector.1744" }
%"class.WTF::Vector.1739" = type { %"class.WTF::VectorBuffer.1740" }
%"class.WTF::VectorBuffer.1740" = type { %"class.WTF::VectorBufferBase.1741", [128 x i8] }
%"class.WTF::VectorBufferBase.1741" = type { i32*, i32, i32 }
%"class.WTF::Vector.1744" = type { %"class.WTF::VectorBuffer.1745" }
%"class.WTF::VectorBuffer.1745" = type { %"class.WTF::VectorBufferBase.1746", [128 x i8] }
%"class.WTF::VectorBufferBase.1746" = type { %"struct.blink::Region::Span"*, i32, i32 }
%"struct.blink::Region::Span" = type { i32, i32 }
%"class.WTF::Vector.1749" = type { %"class.WTF::VectorBuffer.1750" }
%"class.WTF::VectorBuffer.1750" = type { %"class.WTF::VectorBufferBase.1751" }
%"class.WTF::VectorBufferBase.1751" = type { %"struct.blink::FrameFirstPaint"*, i32, i32 }
%"struct.blink::FrameFirstPaint" = type <{ i8*, i8, [7 x i8] }>
%"class.WTF::HashMap.1754" = type { %"class.WTF::HashTable.1755" }
%"class.WTF::HashTable.1755" = type <{ %"struct.WTF::KeyValuePair.1758"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1758" = type opaque
%"struct.blink::PaintController::SubsequencesData" = type { %"class.WTF::HashMap.1759", %"class.WTF::Vector.1764" }
%"class.WTF::HashMap.1759" = type { %"class.WTF::HashTable.1760" }
%"class.WTF::HashTable.1760" = type <{ %"struct.WTF::KeyValuePair.1763"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1763" = type opaque
%"class.WTF::Vector.1764" = type { %"class.WTF::VectorBuffer.1765" }
%"class.WTF::VectorBuffer.1765" = type { %"class.WTF::VectorBufferBase.1766" }
%"class.WTF::VectorBufferBase.1766" = type { %"struct.blink::PaintController::SubsequenceMarkers"*, i32, i32 }
%"struct.blink::PaintController::SubsequenceMarkers" = type { %"class.blink::DisplayItemClient"*, i32, i32 }
%"class.WTF::Vector.1769" = type { %"class.WTF::VectorBuffer.1770" }
%"class.WTF::VectorBuffer.1770" = type { %"class.WTF::VectorBufferBase.1771" }
%"class.WTF::VectorBufferBase.1771" = type { %"class.std::__1::unique_ptr.1772"*, i32, i32 }
%"class.std::__1::unique_ptr.1772" = type { %"class.std::__1::__compressed_pair.1773" }
%"class.std::__1::__compressed_pair.1773" = type { %"struct.std::__1::__compressed_pair_elem.1774" }
%"struct.std::__1::__compressed_pair_elem.1774" = type { %"class.blink::GraphicsContextState"* }
%"class.blink::GraphicsContextState" = type <{ %"class.cc::PaintFlags", %"class.cc::PaintFlags", %"class.blink::StrokeData", i32, i32, i16, i8, [5 x i8] }>
%"class.cc::PaintFlags" = type <{ %class.sk_sp.1775, %class.sk_sp.1776, %class.sk_sp.1814, %class.sk_sp.1815, %class.sk_sp.1816, %class.sk_sp.817, i32, float, float, i32, %union.anon.1817, [4 x i8] }>
%class.sk_sp.1775 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.1776 = type { %"class.cc::PaintShader"* }
%"class.cc::PaintShader" = type <{ %class.SkRefCnt.base, i8, [3 x i8], i32, float, float, i32, i32, i32, i8, [3 x i8], %"class.absl::optional.1777", %struct.SkPoint, %struct.SkRect, %struct.SkPoint, %struct.SkPoint, float, float, %"class.cc::PaintImage", %class.sk_sp.1785, i32, %"class.absl::optional.1801", %"class.std::__1::vector.842", %"class.std::__1::vector.1806", %class.sk_sp.1813, %class.sk_sp.1782, i32, [4 x i8] }>
%"class.absl::optional.1777" = type { %"class.absl::optional_internal::optional_data.1778" }
%"class.absl::optional_internal::optional_data.1778" = type { %"class.absl::optional_internal::optional_data_base.1779" }
%"class.absl::optional_internal::optional_data_base.1779" = type { %"class.absl::optional_internal::optional_data_dtor_base.1780" }
%"class.absl::optional_internal::optional_data_dtor_base.1780" = type { i8, %union.anon.1781 }
%union.anon.1781 = type { %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%"class.cc::PaintImage" = type { %class.sk_sp.1782, %class.sk_sp.1785, %"class.gfx::Rect", i32, %class.sk_sp.1790, %class.sk_sp.1798, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.1782, %class.scoped_refptr.1799 }
%class.sk_sp.1790 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type { %class.SkRefCnt.base, %struct.SkImageInfo, i32, %"class.std::__1::vector.1791" }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.1783, i32, i32 }
%class.sk_sp.1783 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.1784, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.1784 = type { %"struct.std::__1::atomic.41" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%"class.std::__1::vector.1791" = type { %"class.std::__1::__vector_base.1792" }
%"class.std::__1::__vector_base.1792" = type { %"struct.cc::FrameMetadata"*, %"struct.cc::FrameMetadata"*, %"class.std::__1::__compressed_pair.1793" }
%"struct.cc::FrameMetadata" = type { i8, %"class.base::TimeDelta" }
%"class.std::__1::__compressed_pair.1793" = type { %"struct.std::__1::__compressed_pair_elem.1794" }
%"struct.std::__1::__compressed_pair_elem.1794" = type { %"struct.cc::FrameMetadata"* }
%class.sk_sp.1798 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type { %class.SkRefCnt.base, [4 x i8] }
%class.scoped_refptr.1799 = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1800", [4 x i8] }>
%"class.base::RefCountedThreadSafe.1800" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.sk_sp.1785 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.1786", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.1786" = type { %"class.std::__1::__compressed_pair.1787" }
%"class.std::__1::__compressed_pair.1787" = type { %"struct.std::__1::__compressed_pair_elem.1788" }
%"struct.std::__1::__compressed_pair_elem.1788" = type { i8* }
%"class.absl::optional.1801" = type { %"class.absl::optional_internal::optional_data.1802" }
%"class.absl::optional_internal::optional_data.1802" = type { %"class.absl::optional_internal::optional_data_base.1803" }
%"class.absl::optional_internal::optional_data_base.1803" = type { %"class.absl::optional_internal::optional_data_dtor_base.1804" }
%"class.absl::optional_internal::optional_data_dtor_base.1804" = type { i8, %union.anon.1805 }
%union.anon.1805 = type { %"class.gfx::SizeF" }
%"class.std::__1::vector.1806" = type { %"class.std::__1::__vector_base.1807" }
%"class.std::__1::__vector_base.1807" = type { float*, float*, %"class.std::__1::__compressed_pair.1808" }
%"class.std::__1::__compressed_pair.1808" = type { %"struct.std::__1::__compressed_pair_elem.1809" }
%"struct.std::__1::__compressed_pair_elem.1809" = type { float* }
%class.sk_sp.1813 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.238", [7 x i8] }>
%class.sk_sp.1782 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.sk_sp.1814 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.1815 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.1816 = type { %class.SkDrawLooper* }
%class.SkDrawLooper = type { %class.SkFlattenable.base, [4 x i8] }
%union.anon.1817 = type { i32 }
%"class.blink::StrokeData" = type { i32, float, i32, i32, float, %class.sk_sp.1775 }
%"class.cc::PaintRecorder" = type { i32 (...)**, %class.scoped_refptr.1823, %"class.std::__1::unique_ptr.1824" }
%class.scoped_refptr.1823 = type { %"class.cc::DisplayItemList"* }
%"class.cc::DisplayItemList" = type opaque
%"class.std::__1::unique_ptr.1824" = type { %"class.std::__1::__compressed_pair.1825" }
%"class.std::__1::__compressed_pair.1825" = type { %"struct.std::__1::__compressed_pair_elem.1826" }
%"struct.std::__1::__compressed_pair_elem.1826" = type { %"class.cc::RecordPaintCanvas"* }
%"class.cc::RecordPaintCanvas" = type { %"class.cc::PaintCanvas", %"class.cc::DisplayItemList"*, %"class.absl::optional.1827", %struct.SkRect }
%"class.absl::optional.1827" = type { %"class.absl::optional_internal::optional_data.1828" }
%"class.absl::optional_internal::optional_data.1828" = type { %"class.absl::optional_internal::optional_data_base.1829" }
%"class.absl::optional_internal::optional_data_base.1829" = type { %"class.absl::optional_internal::optional_data_dtor_base.1830" }
%"class.absl::optional_internal::optional_data_dtor_base.1830" = type { i8, %union.anon.1831 }
%union.anon.1831 = type { %class.SkNoDrawCanvas }
%class.SkNoDrawCanvas = type { %class.SkCanvasVirtualEnforcer }
%class.SkCanvasVirtualEnforcer = type { %class.SkCanvas }
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.1832, [384 x i64], %class.sk_sp.1833, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr.1834", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.1840" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.1832 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.1833 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr.1834" = type { %"class.std::__1::__compressed_pair.1835" }
%"class.std::__1::__compressed_pair.1835" = type { %"struct.std::__1::__compressed_pair_elem.1836" }
%"struct.std::__1::__compressed_pair_elem.1836" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.1840" = type { %"class.std::__1::__compressed_pair.1841" }
%"class.std::__1::__compressed_pair.1841" = type { %"struct.std::__1::__compressed_pair_elem.1842" }
%"struct.std::__1::__compressed_pair_elem.1842" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"class.printing::MetafileSkia" = type opaque
%"class.paint_preview::PaintPreviewTracker" = type opaque
%"class.std::__1::unique_ptr.1849" = type { %"class.std::__1::__compressed_pair.1850" }
%"class.std::__1::__compressed_pair.1850" = type { %"struct.std::__1::__compressed_pair_elem.1851" }
%"struct.std::__1::__compressed_pair_elem.1851" = type { %"class.blink::DarkModeFilter"* }
%"class.blink::DarkModeFilter" = type { %"struct.blink::DarkModeFilter::ImmutableData", %"class.absl::optional.1870", %"class.std::__1::unique_ptr.1875" }
%"struct.blink::DarkModeFilter::ImmutableData" = type { %"struct.blink::DarkModeSettings", %"class.std::__1::unique_ptr.1852", %"class.std::__1::unique_ptr.1852", %"class.std::__1::unique_ptr.1858", %"class.std::__1::unique_ptr.1864", %class.sk_sp.1815 }
%"struct.blink::DarkModeSettings" = type <{ i32, i8, [3 x i8], float, float, i32, i32, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.1852" = type { %"class.std::__1::__compressed_pair.1853" }
%"class.std::__1::__compressed_pair.1853" = type { %"struct.std::__1::__compressed_pair_elem.1854" }
%"struct.std::__1::__compressed_pair_elem.1854" = type { %"class.blink::DarkModeColorClassifier"* }
%"class.blink::DarkModeColorClassifier" = type opaque
%"class.std::__1::unique_ptr.1858" = type { %"class.std::__1::__compressed_pair.1859" }
%"class.std::__1::__compressed_pair.1859" = type { %"struct.std::__1::__compressed_pair_elem.1860" }
%"struct.std::__1::__compressed_pair_elem.1860" = type { %"class.blink::DarkModeImageClassifier"* }
%"class.blink::DarkModeImageClassifier" = type opaque
%"class.std::__1::unique_ptr.1864" = type { %"class.std::__1::__compressed_pair.1865" }
%"class.std::__1::__compressed_pair.1865" = type { %"struct.std::__1::__compressed_pair_elem.1866" }
%"struct.std::__1::__compressed_pair_elem.1866" = type { %"class.blink::DarkModeColorFilter"* }
%"class.blink::DarkModeColorFilter" = type opaque
%"class.absl::optional.1870" = type { %"class.absl::optional_internal::optional_data.1871" }
%"class.absl::optional_internal::optional_data.1871" = type { %"class.absl::optional_internal::optional_data_base.1872" }
%"class.absl::optional_internal::optional_data_base.1872" = type { %"class.absl::optional_internal::optional_data_dtor_base.1873" }
%"class.absl::optional_internal::optional_data_dtor_base.1873" = type { i8, %union.anon.1874 }
%union.anon.1874 = type { i32 }
%"class.std::__1::unique_ptr.1875" = type { %"class.std::__1::__compressed_pair.1876" }
%"class.std::__1::__compressed_pair.1876" = type { %"struct.std::__1::__compressed_pair_elem.1877" }
%"struct.std::__1::__compressed_pair_elem.1877" = type { %"class.blink::DarkModeInvertedColorCache"* }
%"class.blink::DarkModeInvertedColorCache" = type opaque
%"class.blink::RootInlineBoxPainter" = type { %"class.blink::RootInlineBox"* }
%"class.blink::HitTestResult" = type { %"class.blink::HitTestRequest", i8, %"class.blink::Member.318", %"class.blink::Member.318", %"class.blink::Member.343", %"class.blink::Member.318", %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset", %"class.blink::Member.343", %"class.blink::Member.1884", i8, %"class.blink::Member.1886", %"class.WTF::String" }
%"class.blink::HitTestRequest" = type { i32, %"class.blink::LayoutObject"* }
%"class.blink::Member.1884" = type { %"class.blink::MemberBase.1885" }
%"class.blink::MemberBase.1885" = type { %"class.blink::Scrollbar"* }
%"class.blink::Scrollbar" = type { %"class.blink::DisplayItemClient.base", %"class.blink::Member.1890", i32, %"class.blink::ScrollbarTheme"*, i32, i32, float, float, i32, i32, i32, float, i8, i32, i8, %"class.blink::HeapTaskRunnerTimer.1900", float, i8, i8, i8, i8, %"class.blink::IntRect", %"class.blink::Member.343" }
%"class.blink::Member.1890" = type { %"class.blink::MemberBase.1891" }
%"class.blink::MemberBase.1891" = type { %"class.blink::ScrollableArea"* }
%"class.blink::ScrollableArea" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::ThreadState::PrefinalizerRegistration", %"class.blink::Member.1892", %"class.blink::Member.1894", %"class.blink::Member.1896", %"class.blink::Member.1898", %"class.WTF::Vector.906", i16, %class.scoped_refptr.963 }
%"class.blink::ThreadState::PrefinalizerRegistration" = type { i8 }
%"class.blink::Member.1892" = type { %"class.blink::MemberBase.1893" }
%"class.blink::MemberBase.1893" = type { %"class.blink::MacScrollbarAnimator"* }
%"class.blink::MacScrollbarAnimator" = type opaque
%"class.blink::Member.1894" = type { %"class.blink::MemberBase.1895" }
%"class.blink::MemberBase.1895" = type { %"class.blink::ScrollAnimatorBase"* }
%"class.blink::ScrollAnimatorBase" = type opaque
%"class.blink::Member.1896" = type { %"class.blink::MemberBase.1897" }
%"class.blink::MemberBase.1897" = type { %"class.blink::ProgrammaticScrollAnimator"* }
%"class.blink::ProgrammaticScrollAnimator" = type opaque
%"class.blink::Member.1898" = type { %"class.blink::MemberBase.1899" }
%"class.blink::MemberBase.1899" = type { %"class.blink::DisallowNewWrapper"* }
%"class.blink::DisallowNewWrapper" = type opaque
%"class.blink::ScrollbarTheme" = type { i32 (...)** }
%"class.blink::HeapTaskRunnerTimer.1900" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.1901", { i64, i64 } }
%"class.blink::WeakMember.1901" = type { %"class.blink::MemberBase.1885" }
%"class.blink::Member.1886" = type { %"class.blink::MemberBase.1887" }
%"class.blink::MemberBase.1887" = type { %"class.blink::HeapLinkedHashSet"* }
%"class.blink::HeapLinkedHashSet" = type opaque
%"class.blink::HitTestLocation" = type <{ %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalRect", %"class.blink::FloatPoint", %"class.blink::FloatQuad", i32, i8, i8, [2 x i8] }>
%"class.blink::FloatQuad" = type { %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint" }
%"struct.blink::BidiStatus" = type { i32, i32, i32, %class.scoped_refptr.1631 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::HashMap.1902" = type { %"class.WTF::HashTable.1903" }
%"class.WTF::HashTable.1903" = type <{ %"struct.WTF::KeyValuePair.1906"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1906" = type { %"class.blink::InlineTextBox"*, %"struct.std::__1::pair.1907" }
%"class.blink::InlineTextBox" = type { %"class.blink::InlineBox", %"class.blink::InlineTextBox"*, %"class.blink::InlineTextBox"*, i32, i16, i16 }
%"struct.std::__1::pair.1907" = type { %"class.WTF::Vector.1908", %"struct.blink::GlyphOverflow" }
%"class.WTF::Vector.1908" = type { %"class.WTF::VectorBuffer.1909" }
%"class.WTF::VectorBuffer.1909" = type { %"class.WTF::VectorBufferBase.1910" }
%"class.WTF::VectorBufferBase.1910" = type { %"class.blink::SimpleFontData"**, i32, i32 }
%"struct.blink::GlyphOverflow" = type { float, float, float, float }
%"class.blink::VerticalPositionCache" = type { %"class.WTF::HashMap.1913", %"class.WTF::HashMap.1913" }
%"class.WTF::HashMap.1913" = type { %"class.WTF::HashTable.1914" }
%"class.WTF::HashTable.1914" = type <{ %"struct.WTF::KeyValuePair.1917"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1917" = type <{ %"class.blink::LineLayoutItem", i32, [4 x i8] }>
%"class.WTF::Vector.1918" = type { %"class.WTF::VectorBuffer.1919" }
%"class.WTF::VectorBuffer.1919" = type { %"class.WTF::VectorBufferBase.1920" }
%"class.WTF::VectorBufferBase.1920" = type { %"class.blink::InlineBox"**, i32, i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZNK5blink14LineLayoutItem5StyleEb = comdat any

$_ZNK5blink17DisplayItemClient32VisualRectOutsetForRasterEffectsEv = comdat any

$_ZNK5blink9InlineBox11IsLineBreakEv = comdat any

$_ZNK5blink9InlineBox15IsInlineTextBoxEv = comdat any

$_ZNK5blink9InlineBox18IsSVGInlineTextBoxEv = comdat any

$_ZNK5blink9InlineBox18IsSVGInlineFlowBoxEv = comdat any

$_ZNK5blink9InlineBox18IsSVGRootInlineBoxEv = comdat any

$_ZNK5blink9InlineBox20VirtualLogicalHeightEv = comdat any

$_ZN5blink9InlineBox9MarkDirtyEv = comdat any

$_ZN5blink13RootInlineBoxD2Ev = comdat any

$_ZN5blink13RootInlineBoxD0Ev = comdat any

$_ZNK5blink13InlineFlowBox15IsInlineFlowBoxEv = comdat any

$_ZNK5blink13RootInlineBox15IsRootInlineBoxEv = comdat any

$_ZN5blink13InlineFlowBox14SetConstructedEv = comdat any

$_ZNK5blink13InlineFlowBox6IsLeafEv = comdat any

$_ZN5blink11BidiContextD2Ev = comdat any

$_ZNK3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE4findERKS2_ = comdat any

$_ZN3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISB_S6_SC_EERS2_RiEENS_18HashTableAddResultISD_S4_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE6ExpandEPS4_ = comdat any

$_ZN3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSE_ = comdat any

$_ZN3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE16LookupForWritingERKS2_ = comdat any

$_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE4findERKS4_ = comdat any

$_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE8RehashToEPS8_jSJ_ = comdat any

$_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE16LookupForWritingERKS4_ = comdat any

$_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISG_SB_SH_EEPS2_RS7_EENS_18HashTableAddResultISI_S8_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE6ExpandEPS8_ = comdat any

$_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E4findERKS4_ = comdat any

$_ZN3WTF6VectorIPKN5blink14SimpleFontDataELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS4_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIPKN5blink14SimpleFontDataEEEmm = comdat any

$_ZN3WTF6VectorIPN5blink9InlineBoxELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS3_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIPN5blink9InlineBoxEEEmm = comdat any

$_ZN3WTF6VectorIPN5blink9InlineBoxELj0ENS_18PartitionAllocatorEE2atEj = comdat any

@_ZTVN5blink13RootInlineBoxE = hidden unnamed_addr constant { [39 x i8*] } { [39 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::RootInlineBox"*)* @_ZN5blink13RootInlineBoxD2Ev to i8*), i8* bitcast (void (%"class.blink::RootInlineBox"*)* @_ZN5blink13RootInlineBoxD0Ev to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox9DebugNameEv to i8*), i8* bitcast (i32 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox11OwnerNodeIdEv to i8*), i8* bitcast (i8 (%"class.blink::DisplayItemClient"*)* @_ZNK5blink17DisplayItemClient32VisualRectOutsetForRasterEffectsEv to i8*), i8* bitcast (void (%"class.blink::RootInlineBox"*)* @_ZN5blink13RootInlineBox7DestroyEv to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*)* @_ZN5blink13InlineFlowBox10DeleteLineEv to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*)* @_ZN5blink13InlineFlowBox11ExtractLineEv to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*)* @_ZN5blink13InlineFlowBox10AttachLineEv to i8*), i8* bitcast (i1 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox11IsLineBreakEv to i8*), i8* bitcast (void (%"class.blink::RootInlineBox"*, %"class.blink::LayoutSize"*)* @_ZN5blink13RootInlineBox4MoveERKNS_10LayoutSizeE to i8*), i8* bitcast (void (%"class.blink::RootInlineBox"*, %"struct.blink::PaintInfo"*, %"struct.blink::PhysicalOffset"*, i32, i32)* @_ZNK5blink13RootInlineBox5PaintERKNS_9PaintInfoERKNS_14PhysicalOffsetENS_10LayoutUnitES7_ to i8*), i8* bitcast (i1 (%"class.blink::RootInlineBox"*, %"class.blink::HitTestResult"*, %"class.blink::HitTestLocation"*, %"struct.blink::PhysicalOffset"*, i32, i32)* @_ZN5blink13RootInlineBox11NodeAtPointERNS_13HitTestResultERKNS_15HitTestLocationERKNS_14PhysicalOffsetENS_10LayoutUnitES9_ to i8*), i8* bitcast (i8* (%"class.blink::RootInlineBox"*)* @_ZNK5blink13RootInlineBox7BoxNameEv to i8*), i8* bitcast (i1 (%"class.blink::InlineFlowBox"*)* @_ZNK5blink13InlineFlowBox15IsInlineFlowBoxEv to i8*), i8* bitcast (i1 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox15IsInlineTextBoxEv to i8*), i8* bitcast (i1 (%"class.blink::RootInlineBox"*)* @_ZNK5blink13RootInlineBox15IsRootInlineBoxEv to i8*), i8* bitcast (i1 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox18IsSVGInlineTextBoxEv to i8*), i8* bitcast (i1 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox18IsSVGInlineFlowBoxEv to i8*), i8* bitcast (i1 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox18IsSVGRootInlineBoxEv to i8*), i8* bitcast (i32 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox20VirtualLogicalHeightEv to i8*), i8* bitcast (void (%"class.blink::InlineFlowBox"*)* @_ZN5blink13InlineFlowBox14SetConstructedEv to i8*), i8* bitcast (i1 (%"class.blink::InlineFlowBox"*)* @_ZNK5blink13InlineFlowBox6IsLeafEv to i8*), i8* bitcast (i32 (%"class.blink::RootInlineBox"*, i32)* @_ZNK5blink13RootInlineBox16BaselinePositionENS_12FontBaselineE to i8*), i8* bitcast (i32 (%"class.blink::RootInlineBox"*)* @_ZNK5blink13RootInlineBox10LineHeightEv to i8*), i8* bitcast (i32 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox14CaretMinOffsetEv to i8*), i8* bitcast (i32 (%"class.blink::InlineBox"*)* @_ZNK5blink9InlineBox14CaretMaxOffsetEv to i8*), i8* bitcast (void (%"class.blink::RootInlineBox"*)* @_ZN5blink13RootInlineBox15ClearTruncationEv to i8*), i8* bitcast (void (%"class.blink::InlineBox"*)* @_ZN5blink9InlineBox9MarkDirtyEv to i8*), i8* bitcast (void (%"class.blink::InlineBox"*)* @_ZN5blink9InlineBox14DirtyLineBoxesEv to i8*), i8* bitcast (i1 (%"class.blink::RootInlineBox"*)* @_ZNK5blink13RootInlineBox10IsSelectedEv to i8*), i8* bitcast (i1 (%"class.blink::InlineFlowBox"*, i1, i32, i32)* @_ZNK5blink13InlineFlowBox22CanAccommodateEllipsisEbNS_10LayoutUnitES1_ to i8*), i8* bitcast (i32 (%"class.blink::RootInlineBox"*, i1, i32, i32, i32, %"class.blink::LayoutUnit"*, %"class.blink::InlineBox"**, i32)* @_ZN5blink13RootInlineBox16PlaceEllipsisBoxEbNS_10LayoutUnitES1_S1_RS1_PPNS_9InlineBoxES1_ to i8*), i8* bitcast (void (%"class.blink::RootInlineBox"*)* @_ZN5blink13RootInlineBox30ExtractLineBoxFromLayoutObjectEv to i8*), i8* bitcast (void (%"class.blink::RootInlineBox"*)* @_ZN5blink13RootInlineBox27AttachLineBoxToLayoutObjectEv to i8*), i8* bitcast (void (%"class.blink::RootInlineBox"*)* @_ZN5blink13RootInlineBox29RemoveLineBoxFromLayoutObjectEv to i8*), i8* bitcast (%"class.blink::LineBoxList"* (%"class.blink::RootInlineBox"*)* @_ZNK5blink13RootInlineBox9LineBoxesEv to i8*)] }, align 8
@_ZN5blinkL18g_ellipsis_box_mapE = internal unnamed_addr global %"class.WTF::HashMap.1689"* null, align 8
@.str = private unnamed_addr constant [14 x i8] c"RootInlineBox\00", align 1
@_ZTVN5blink13InlineFlowBoxE = external unnamed_addr constant { [39 x i8*] }, align 8
@_ZTVN5blink11EllipsisBoxE = external unnamed_addr constant { [35 x i8*] }, align 8
@.str.1 = private unnamed_addr constant [64 x i8] c"../../third_party/blink/renderer/core/css/css_global_rule_set.h\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"features_.IsAlive()\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.4 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIN5blink14LineLayoutItemEiEEEEPKcv = private unnamed_addr constant [93 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<blink::LineLayoutItem, int>]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPKN5blink13RootInlineBoxEPNS2_11EllipsisBoxEEEEEPKcv = private unnamed_addr constant [117 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<const blink::RootInlineBox *, blink::EllipsisBox *>]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_7HashMapIPKN5blink13RootInlineBoxEPNS2_11EllipsisBoxENS_7PtrHashIS4_EENS_10HashTraitsIS5_EENSA_IS7_EENS_18PartitionAllocatorEEEEEPKcv = private unnamed_addr constant [265 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::HashMap<const blink::RootInlineBox *, blink::EllipsisBox *, WTF::PtrHash<const blink::RootInlineBox>, WTF::HashTraits<const blink::RootInlineBox *>, WTF::HashTraits<blink::EllipsisBox *>, WTF::PartitionAllocator>]\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"../../base/memory/ref_counted.h\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"ref_count_.Increment() > 0\00", align 1
@.str.7 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.9 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.10 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPKN5blink14SimpleFontDataEEEPKcv = private unnamed_addr constant [77 x i8] c"const char *WTF::GetStringWithTypeName() [T = const blink::SimpleFontData *]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink9InlineBoxEEEPKcv = private unnamed_addr constant [66 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::InlineBox *]\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1

@_ZN5blink13RootInlineBoxC1ENS_14LineLayoutItemE = hidden unnamed_addr alias void (%"class.blink::RootInlineBox"*, %"class.blink::LayoutObject"*), void (%"class.blink::RootInlineBox"*, %"class.blink::LayoutObject"*)* @_ZN5blink13RootInlineBoxC2ENS_14LineLayoutItemE

; Function Attrs: nounwind
declare void @_ZN5blink9InlineBoxdlEPv(i8*) local_unnamed_addr #0

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13RootInlineBoxC2ENS_14LineLayoutItemE(%"class.blink::RootInlineBox"* nocapture, %"class.blink::LayoutObject"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  store i8 21, i8* %4, align 8
  %5 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %7 = bitcast %"class.blink::InlineBox"** %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #12
  store %"class.blink::LayoutObject"* %1, %"class.blink::LayoutObject"** %6, align 8
  %8 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 5, i32 1, i32 0
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 6, i32 0
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, -1073741824
  %14 = or i32 %13, 18432
  store i32 %14, i32* %11, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [39 x i8*] }, { [39 x i8*] }* @_ZTVN5blink13InlineFlowBoxE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %15 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %17 = bitcast %"class.std::__1::unique_ptr.1603"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 40, i1 false) #12
  %18 = load i32, i32* %16, align 8
  %19 = and i32 %18, -67108852
  %20 = or i32 %19, 16
  store i32 %20, i32* %16, align 8
  %21 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %1, i64 0, i32 5, i32 0
  %22 = bitcast %"class.blink::ComputedStyle"** %21 to %"class.blink::ComputedStyleBase"**
  %23 = load %"class.blink::ComputedStyleBase"*, %"class.blink::ComputedStyleBase"** %22, align 8
  %24 = getelementptr inbounds %"class.blink::ComputedStyleBase", %"class.blink::ComputedStyleBase"* %23, i64 0, i32 9
  %25 = bitcast [20 x i8]* %24 to i160*
  %26 = load i160, i160* %25, align 8
  %27 = and i160 %26, 133143986176
  %28 = icmp eq i160 %27, 8589934592
  %29 = zext i1 %28 to i32
  %30 = shl nuw nsw i32 %29, 2
  %31 = and i32 %20, -67108848
  %32 = or i32 %30, %31
  %33 = shl nuw nsw i32 %29, 3
  %34 = or i32 %32, %33
  store i32 %34, i32* %16, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [39 x i8*] }, { [39 x i8*] }* @_ZTVN5blink13RootInlineBoxE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %35 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 1
  %36 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %1, i64 0, i32 4
  %37 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %36 to i96*
  %38 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %38, i8 0, i64 52, i1 false)
  %39 = load i96, i96* %37, align 4
  %40 = trunc i96 %39 to i32
  %41 = lshr i32 %40, 31
  %42 = shl nuw nsw i32 %41, 11
  %43 = or i32 %13, 16384
  %44 = or i32 %42, %43
  store i32 %44, i32* %11, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13RootInlineBox7DestroyEv(%"class.blink::RootInlineBox"*) unnamed_addr #1 align 2 {
  tail call void @_ZN5blink13RootInlineBox17DetachEllipsisBoxEv(%"class.blink::RootInlineBox"* %0)
  %2 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN5blink9InlineBox7DestroyEv(%"class.blink::InlineBox"* %2) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13RootInlineBox17DetachEllipsisBoxEv(%"class.blink::RootInlineBox"*) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.blink::RootInlineBox"*, align 8
  %3 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = trunc i32 %4 to i16
  %6 = icmp slt i16 %5, 0
  br i1 %6, label %7, label %51

7:                                                ; preds = %1
  %8 = load %"class.WTF::HashMap.1689"*, %"class.WTF::HashMap.1689"** @_ZN5blinkL18g_ellipsis_box_mapE, align 8
  %9 = bitcast %"class.blink::RootInlineBox"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  store %"class.blink::RootInlineBox"* %0, %"class.blink::RootInlineBox"** %2, align 8
  %10 = getelementptr inbounds %"class.WTF::HashMap.1689", %"class.WTF::HashMap.1689"* %8, i64 0, i32 0
  %11 = call { %"struct.WTF::KeyValuePair.1693"*, %"struct.WTF::KeyValuePair.1693"* } @_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE4findERKS4_(%"class.WTF::HashTable.1690"* %10, %"class.blink::RootInlineBox"** nonnull dereferenceable(8) %2) #12
  %12 = extractvalue { %"struct.WTF::KeyValuePair.1693"*, %"struct.WTF::KeyValuePair.1693"* } %11, 0
  %13 = getelementptr inbounds %"class.WTF::HashMap.1689", %"class.WTF::HashMap.1689"* %8, i64 0, i32 0, i32 0
  %14 = load %"struct.WTF::KeyValuePair.1693"*, %"struct.WTF::KeyValuePair.1693"** %13, align 8
  %15 = getelementptr inbounds %"class.WTF::HashMap.1689", %"class.WTF::HashMap.1689"* %8, i64 0, i32 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %14, i64 %17
  %19 = icmp eq %"struct.WTF::KeyValuePair.1693"* %12, %18
  br i1 %19, label %45, label %20

20:                                               ; preds = %7
  %21 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %12, i64 0, i32 1
  %22 = load %"class.blink::EllipsisBox"*, %"class.blink::EllipsisBox"** %21, align 8
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %12, i64 0, i32 0
  store %"class.blink::RootInlineBox"* inttoptr (i64 -1 to %"class.blink::RootInlineBox"*), %"class.blink::RootInlineBox"** %23, align 8
  %24 = getelementptr inbounds %"class.WTF::HashMap.1689", %"class.WTF::HashMap.1689"* %8, i64 0, i32 0, i32 3
  %25 = load i32, i32* %24, align 8
  %26 = add i32 %25, 1
  %27 = and i32 %26, 2147483647
  %28 = and i32 %25, -2147483648
  %29 = or i32 %27, %28
  store i32 %29, i32* %24, align 8
  %30 = getelementptr inbounds %"class.WTF::HashMap.1689", %"class.WTF::HashMap.1689"* %8, i64 0, i32 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = add i32 %31, -1
  store i32 %32, i32* %30, align 4
  %33 = mul i32 %32, 6
  %34 = load i32, i32* %15, align 8
  %35 = icmp ult i32 %33, %34
  %36 = icmp ugt i32 %34, 8
  %37 = and i1 %35, %36
  br i1 %37, label %38, label %45

38:                                               ; preds = %20
  %39 = lshr i32 %34, 1
  %40 = zext i32 %39 to i64
  %41 = shl nuw nsw i64 %40, 4
  %42 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %41, i8* getelementptr inbounds ([117 x i8], [117 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPKN5blink13RootInlineBoxEPNS2_11EllipsisBoxEEEEEPKcv, i64 0, i64 0)) #12
  call void @llvm.memset.p0i8.i64(i8* align 1 %42, i8 0, i64 %41, i1 false) #12
  %43 = bitcast i8* %42 to %"struct.WTF::KeyValuePair.1693"*
  %44 = call %"struct.WTF::KeyValuePair.1693"* @_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE8RehashToEPS8_jSJ_(%"class.WTF::HashTable.1690"* %10, %"struct.WTF::KeyValuePair.1693"* %43, i32 %39, %"struct.WTF::KeyValuePair.1693"* null) #12
  br label %45

45:                                               ; preds = %7, %20, %38
  %46 = phi %"class.blink::EllipsisBox"* [ null, %7 ], [ %22, %20 ], [ %22, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  %47 = getelementptr inbounds %"class.blink::EllipsisBox", %"class.blink::EllipsisBox"* %46, i64 0, i32 0
  %48 = getelementptr inbounds %"class.blink::EllipsisBox", %"class.blink::EllipsisBox"* %46, i64 0, i32 0, i32 3
  store %"class.blink::InlineFlowBox"* null, %"class.blink::InlineFlowBox"** %48, align 8
  call void @_ZN5blink9InlineBox7DestroyEv(%"class.blink::InlineBox"* %47) #12
  %49 = load i32, i32* %3, align 4
  %50 = and i32 %49, -32769
  store i32 %50, i32* %3, align 4
  br label %51

51:                                               ; preds = %45, %1
  ret void
}

declare void @_ZN5blink9InlineBox7DestroyEv(%"class.blink::InlineBox"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind readonly ssp uwtable
define hidden %"class.blink::LineBoxList"* @_ZNK5blink13RootInlineBox9LineBoxesEv(%"class.blink::RootInlineBox"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %3 = bitcast %"class.blink::LayoutObject"** %2 to %"class.blink::LayoutBlockFlow"**
  %4 = load %"class.blink::LayoutBlockFlow"*, %"class.blink::LayoutBlockFlow"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::LayoutBlockFlow", %"class.blink::LayoutBlockFlow"* %4, i64 0, i32 1
  ret %"class.blink::LineBoxList"* %5
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden %"class.blink::LayoutObject"* @_ZNK5blink13RootInlineBox5BlockEv(%"class.blink::RootInlineBox"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %3 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %2, align 8
  ret %"class.blink::LayoutObject"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13RootInlineBox15ClearTruncationEv(%"class.blink::RootInlineBox"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = trunc i32 %3 to i16
  %5 = icmp slt i16 %4, 0
  br i1 %5, label %6, label %8

6:                                                ; preds = %1
  tail call void @_ZN5blink13RootInlineBox17DetachEllipsisBoxEv(%"class.blink::RootInlineBox"* %0)
  %7 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  tail call void @_ZN5blink13InlineFlowBox15ClearTruncationEv(%"class.blink::InlineFlowBox"* %7) #12
  br label %8

8:                                                ; preds = %6, %1
  ret void
}

declare void @_ZN5blink13InlineFlowBox15ClearTruncationEv(%"class.blink::InlineFlowBox"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink13RootInlineBox16BaselinePositionENS_12FontBaselineE(%"class.blink::RootInlineBox"* nocapture readonly, i32) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %4 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %4, i64 0, i32 4
  %6 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %5 to i96*
  %7 = load i96, i96* %6, align 4
  %8 = and i96 %7, 33554432
  %9 = icmp eq i96 %8, 0
  %10 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, 1
  %13 = icmp ne i32 %12, 0
  %14 = lshr i32 %11, 11
  %15 = and i32 %14, 1
  %16 = xor i32 %15, 1
  %17 = bitcast %"class.blink::LayoutObject"* %4 to %"class.blink::LayoutBoxModelObject"*
  %18 = select i1 %9, %"class.blink::LayoutBoxModelObject"* %17, %"class.blink::LayoutBoxModelObject"* null
  %19 = bitcast %"class.blink::LayoutBoxModelObject"* %18 to i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)***
  %20 = load i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)**, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*** %19, align 8
  %21 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)** %20, i64 134
  %22 = load i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)** %21, align 8
  %23 = tail call i32 %22(%"class.blink::LayoutBoxModelObject"* %18, i32 %1, i1 zeroext %13, i32 %16, i32 1) #12
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink13RootInlineBox10LineHeightEv(%"class.blink::RootInlineBox"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %3 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %3, i64 0, i32 4
  %5 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %4 to i96*
  %6 = load i96, i96* %5, align 4
  %7 = and i96 %6, 33554432
  %8 = icmp eq i96 %7, 0
  %9 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = and i32 %10, 1
  %12 = icmp ne i32 %11, 0
  %13 = lshr i32 %10, 11
  %14 = and i32 %13, 1
  %15 = xor i32 %14, 1
  %16 = bitcast %"class.blink::LayoutObject"* %3 to %"class.blink::LayoutBoxModelObject"*
  %17 = select i1 %8, %"class.blink::LayoutBoxModelObject"* %16, %"class.blink::LayoutBoxModelObject"* null
  %18 = bitcast %"class.blink::LayoutBoxModelObject"* %17 to i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)***
  %19 = load i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)**, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*** %18, align 8
  %20 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)** %19, i64 133
  %21 = load i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)** %20, align 8
  %22 = tail call i32 %21(%"class.blink::LayoutBoxModelObject"* %17, i1 zeroext %12, i32 %15, i32 1) #12
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink13RootInlineBox26LineCanAccommodateEllipsisEbNS_10LayoutUnitES1_S1_(%"class.blink::RootInlineBox"*, i1 zeroext, i32, i32, i32) local_unnamed_addr #1 align 2 {
  br i1 %1, label %6, label %10

6:                                                ; preds = %5
  %7 = icmp sgt i32 %2, -1
  %8 = select i1 %7, i32 -2147483648, i32 2147483647
  %9 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %2) #12
  br label %14

10:                                               ; preds = %5
  %11 = icmp sgt i32 %3, -1
  %12 = select i1 %11, i32 -2147483648, i32 2147483647
  %13 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %2, i32 %3) #12
  br label %14

14:                                               ; preds = %10, %6
  %15 = phi { i32, i1 } [ %13, %10 ], [ %9, %6 ]
  %16 = phi i32 [ %12, %10 ], [ %8, %6 ]
  %17 = extractvalue { i32, i1 } %15, 1
  %18 = extractvalue { i32, i1 } %15, 0
  %19 = select i1 %17, i32 %16, i32 %18
  %20 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 6, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = icmp sgt i32 %19, -1
  %23 = select i1 %22, i32 -2147483648, i32 2147483647
  %24 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 %19) #12
  %25 = extractvalue { i32, i1 } %24, 1
  %26 = extractvalue { i32, i1 } %24, 0
  %27 = select i1 %25, i32 %23, i32 %26, !prof !2
  %28 = icmp slt i32 %27, %4
  br i1 %28, label %32, label %29

29:                                               ; preds = %14
  %30 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %31 = tail call zeroext i1 @_ZNK5blink13InlineFlowBox22CanAccommodateEllipsisEbNS_10LayoutUnitES1_(%"class.blink::InlineFlowBox"* %30, i1 zeroext %1, i32 %2, i32 %4) #12
  br label %32

32:                                               ; preds = %14, %29
  %33 = phi i1 [ %31, %29 ], [ false, %14 ]
  ret i1 %33
}

declare zeroext i1 @_ZNK5blink13InlineFlowBox22CanAccommodateEllipsisEbNS_10LayoutUnitES1_(%"class.blink::InlineFlowBox"*, i1 zeroext, i32, i32) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink13RootInlineBox13PlaceEllipsisERKN3WTF12AtomicStringEbNS_10LayoutUnitES5_S5_S5_PPNS_9InlineBoxENS_19ForceEllipsisOnLineE(%"class.blink::RootInlineBox"*, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), i1 zeroext, i32, i32, i32, i32, %"class.blink::InlineBox"**, i32) local_unnamed_addr #1 align 2 {
  %10 = alloca %"class.blink::EllipsisBox"*, align 8
  %11 = alloca %"class.blink::RootInlineBox"*, align 8
  %12 = alloca %"class.blink::LayoutUnit", align 4
  %13 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %7, align 8
  %14 = icmp eq %"class.blink::InlineBox"* %13, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %17 = load i32, i32* %16, align 4
  br label %96

18:                                               ; preds = %9
  %19 = bitcast %"class.blink::EllipsisBox"** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #12
  store %"class.blink::EllipsisBox"* inttoptr (i64 -6148914691236517206 to %"class.blink::EllipsisBox"*), %"class.blink::EllipsisBox"** %10, align 8
  %20 = tail call i8* @_ZN5blink9InlineBoxnwEm(i64 80) #12
  %21 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %23 = bitcast %"class.blink::LayoutObject"** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = tail call i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"* %21) #12
  %26 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 5
  %27 = bitcast %"class.blink::LayoutPoint"* %26 to i64*
  %28 = load i64, i64* %27, align 4
  %29 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 4
  %30 = bitcast %"class.blink::InlineFlowBox"** %29 to %"class.blink::RootInlineBox"**
  %31 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %30, align 8
  %32 = icmp eq %"class.blink::RootInlineBox"* %31, null
  %33 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = bitcast i8* %20 to i32 (...)***
  %36 = getelementptr inbounds i8, i8* %20, i64 8
  store i8 21, i8* %36, align 8
  %37 = getelementptr inbounds i8, i8* %20, i64 16
  %38 = getelementptr inbounds i8, i8* %20, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 16, i1 false) #12
  %39 = bitcast i8* %38 to %"class.blink::RootInlineBox"**
  store %"class.blink::RootInlineBox"* %0, %"class.blink::RootInlineBox"** %39, align 8
  %40 = getelementptr inbounds i8, i8* %20, i64 40
  %41 = bitcast i8* %40 to i64*
  store i64 %24, i64* %41, align 8
  %42 = getelementptr inbounds i8, i8* %20, i64 48
  %43 = bitcast i8* %42 to i64*
  store i64 %28, i64* %43, align 8
  %44 = getelementptr inbounds i8, i8* %20, i64 56
  %45 = bitcast i8* %44 to i32*
  store i32 %5, i32* %45, align 8
  %46 = getelementptr inbounds i8, i8* %20, i64 60
  %47 = bitcast i8* %46 to i32*
  %48 = zext i1 %32 to i32
  %49 = load i32, i32* %47, align 4
  %50 = and i32 %49, -1073741824
  %51 = and i32 %34, 2048
  %52 = or i32 %51, %48
  %53 = or i32 %52, %50
  %54 = or i32 %53, 16386
  store i32 %54, i32* %47, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [35 x i8*] }, { [35 x i8*] }* @_ZTVN5blink11EllipsisBoxE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %35, align 8
  %55 = getelementptr inbounds i8, i8* %20, i64 64
  %56 = bitcast i8* %55 to i32*
  store i32 %25, i32* %56, align 8
  %57 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %58 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  %59 = getelementptr inbounds i8, i8* %20, i64 72
  %60 = bitcast i8* %59 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %58, %"class.WTF::StringImpl"** %60, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %58, null
  br i1 %61, label %80, label %62

62:                                               ; preds = %18
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %80

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = zext i32 %69 to i33
  %71 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %70, i33 1) #12
  %72 = extractvalue { i33, i1 } %71, 1
  %73 = extractvalue { i33, i1 } %71, 0
  %74 = icmp slt i33 %73, 0
  %75 = or i1 %72, %74
  br i1 %75, label %76, label %77, !prof !2

76:                                               ; preds = %67
  tail call void @llvm.trap() #12
  unreachable

77:                                               ; preds = %67
  %78 = trunc i33 %73 to i32
  store i32 %78, i32* %68, align 4
  %79 = load i32, i32* %47, align 4
  br label %80

80:                                               ; preds = %18, %62, %77
  %81 = phi i32 [ %54, %18 ], [ %54, %62 ], [ %79, %77 ]
  %82 = or i32 %81, 1024
  store i32 %82, i32* %47, align 4
  %83 = bitcast %"class.blink::EllipsisBox"** %10 to i8**
  store i8* %20, i8** %83, align 8
  %84 = load %"class.WTF::HashMap.1689"*, %"class.WTF::HashMap.1689"** @_ZN5blinkL18g_ellipsis_box_mapE, align 8
  %85 = icmp eq %"class.WTF::HashMap.1689"* %84, null
  br i1 %85, label %86, label %89

86:                                               ; preds = %80
  %87 = tail call i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64 24, i8* getelementptr inbounds ([265 x i8], [265 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_7HashMapIPKN5blink13RootInlineBoxEPNS2_11EllipsisBoxENS_7PtrHashIS4_EENS_10HashTraitsIS5_EENSA_IS7_EENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 20, i1 false) #12
  store i8* %87, i8** bitcast (%"class.WTF::HashMap.1689"** @_ZN5blinkL18g_ellipsis_box_mapE to i8**), align 8
  %88 = bitcast i8* %87 to %"class.WTF::HashMap.1689"*
  br label %89

89:                                               ; preds = %80, %86
  %90 = phi %"class.WTF::HashMap.1689"* [ %84, %80 ], [ %88, %86 ]
  %91 = bitcast %"class.blink::RootInlineBox"** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %91) #12
  store %"class.blink::RootInlineBox"* %0, %"class.blink::RootInlineBox"** %11, align 8
  %92 = getelementptr inbounds %"class.WTF::HashMap.1689", %"class.WTF::HashMap.1689"* %90, i64 0, i32 0
  %93 = call { %"struct.WTF::KeyValuePair.1693"*, i8 } @_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISG_SB_SH_EEPS2_RS7_EENS_18HashTableAddResultISI_S8_EEOT0_OT1_(%"class.WTF::HashTable.1690"* %92, %"class.blink::RootInlineBox"** nonnull dereferenceable(8) %11, %"class.blink::EllipsisBox"** nonnull dereferenceable(8) %10) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %91) #12
  %94 = load i32, i32* %33, align 4
  %95 = or i32 %94, 32768
  store i32 %95, i32* %33, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #12
  br label %96

96:                                               ; preds = %15, %89
  %97 = phi i32 [ %17, %15 ], [ %95, %89 ]
  %98 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %99 = and i32 %97, 2048
  %100 = icmp eq i32 %99, 0
  %101 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0
  %102 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 5, i32 1, i32 0
  %103 = select i1 %100, i32* %102, i32* %101
  %104 = load i32, i32* %103, align 4
  %105 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %6, i32 %104) #12
  %106 = icmp ne i32 %8, 1
  %107 = xor i1 %2, true
  %108 = or i1 %106, %107
  br i1 %108, label %152, label %109

109:                                              ; preds = %96
  %110 = extractvalue { i32, i1 } %105, 1
  %111 = icmp slt i32 %104, 0
  %112 = select i1 %111, i32 -2147483648, i32 2147483647
  %113 = extractvalue { i32, i1 } %105, 0
  %114 = select i1 %110, i32 %112, i32 %113, !prof !2
  %115 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 6, i32 0
  %116 = load i32, i32* %115, align 8
  %117 = icmp slt i32 %116, 0
  %118 = select i1 %117, i32 -2147483648, i32 2147483647
  %119 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %114, i32 %116) #12
  %120 = extractvalue { i32, i1 } %119, 1
  %121 = extractvalue { i32, i1 } %119, 0
  %122 = select i1 %120, i32 %118, i32 %121, !prof !2
  %123 = icmp slt i32 %5, 0
  %124 = select i1 %123, i32 -2147483648, i32 2147483647
  %125 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %122, i32 %5) #12
  %126 = extractvalue { i32, i1 } %125, 1
  %127 = extractvalue { i32, i1 } %125, 0
  %128 = select i1 %126, i32 %124, i32 %127, !prof !2
  %129 = icmp sgt i32 %128, %4
  br i1 %129, label %152, label %130

130:                                              ; preds = %109
  %131 = trunc i32 %97 to i16
  %132 = icmp slt i16 %131, 0
  br i1 %132, label %133, label %146

133:                                              ; preds = %130
  %134 = call %"class.blink::EllipsisBox"* @_ZNK5blink13RootInlineBox14GetEllipsisBoxEv(%"class.blink::RootInlineBox"* %0)
  %135 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %104, i32 %116) #12
  %136 = extractvalue { i32, i1 } %135, 1
  %137 = extractvalue { i32, i1 } %135, 0
  %138 = select i1 %136, i32 %118, i32 %137, !prof !2
  %139 = getelementptr inbounds %"class.blink::EllipsisBox", %"class.blink::EllipsisBox"* %134, i64 0, i32 0, i32 7, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = and i32 %140, 2048
  %142 = icmp eq i32 %141, 0
  %143 = getelementptr inbounds %"class.blink::EllipsisBox", %"class.blink::EllipsisBox"* %134, i64 0, i32 0, i32 5, i32 1, i32 0
  %144 = getelementptr inbounds %"class.blink::EllipsisBox", %"class.blink::EllipsisBox"* %134, i64 0, i32 0, i32 5, i32 0, i32 0
  %145 = select i1 %142, i32* %143, i32* %144
  store i32 %138, i32* %145, align 4
  br label %146

146:                                              ; preds = %133, %130
  %147 = load i32, i32* %115, align 8
  %148 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %147, i32 %5) #12
  %149 = extractvalue { i32, i1 } %148, 1
  %150 = extractvalue { i32, i1 } %148, 0
  %151 = select i1 %149, i32 %124, i32 %150, !prof !2
  br label %210

152:                                              ; preds = %109, %96
  %153 = bitcast %"class.blink::LayoutUnit"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %153) #12
  %154 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %12, i64 0, i32 0
  store i32 0, i32* %154, align 4
  %155 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %156 = call i32 @_ZN5blink13InlineFlowBox16PlaceEllipsisBoxEbNS_10LayoutUnitES1_S1_RS1_PPNS_9InlineBoxES1_(%"class.blink::InlineFlowBox"* %155, i1 zeroext %2, i32 %3, i32 %4, i32 %5, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %12, %"class.blink::InlineBox"** %7, i32 %6) #12
  %157 = icmp eq i32 %156, -64
  br i1 %157, label %158, label %194

158:                                              ; preds = %152
  br i1 %2, label %159, label %174

159:                                              ; preds = %158
  %160 = icmp sgt i32 %5, -1
  %161 = select i1 %160, i32 -2147483648, i32 2147483647
  %162 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %4, i32 %5) #12
  %163 = extractvalue { i32, i1 } %162, 1
  %164 = extractvalue { i32, i1 } %162, 0
  %165 = select i1 %163, i32 %161, i32 %164, !prof !2
  %166 = icmp sgt i32 %6, -1
  %167 = select i1 %166, i32 -2147483648, i32 2147483647
  %168 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %165, i32 %6) #12
  %169 = extractvalue { i32, i1 } %168, 1
  %170 = extractvalue { i32, i1 } %168, 0
  %171 = select i1 %169, i32 %167, i32 %170, !prof !2
  %172 = icmp sgt i32 %171, 0
  %173 = select i1 %172, i32 %171, i32 0
  br label %181

174:                                              ; preds = %158
  %175 = icmp sgt i32 %6, -1
  %176 = select i1 %175, i32 -2147483648, i32 2147483647
  %177 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %6) #12
  %178 = extractvalue { i32, i1 } %177, 1
  %179 = extractvalue { i32, i1 } %177, 0
  %180 = select i1 %178, i32 %176, i32 %179, !prof !2
  br label %181

181:                                              ; preds = %174, %159
  %182 = phi i32 [ %176, %174 ], [ %167, %159 ]
  %183 = phi i32 [ %180, %174 ], [ %173, %159 ]
  %184 = icmp sgt i32 %3, -1
  %185 = select i1 %184, i32 -2147483648, i32 2147483647
  %186 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %4, i32 %3) #12
  %187 = extractvalue { i32, i1 } %186, 1
  %188 = extractvalue { i32, i1 } %186, 0
  %189 = select i1 %187, i32 %185, i32 %188, !prof !2
  %190 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %189, i32 %6) #12
  %191 = extractvalue { i32, i1 } %190, 1
  %192 = extractvalue { i32, i1 } %190, 0
  %193 = select i1 %191, i32 %182, i32 %192, !prof !2
  store i32 %193, i32* %154, align 4
  br label %194

194:                                              ; preds = %152, %181
  %195 = phi i32 [ %183, %181 ], [ %156, %152 ]
  %196 = load i32, i32* %98, align 4
  %197 = trunc i32 %196 to i16
  %198 = icmp slt i16 %197, 0
  br i1 %198, label %199, label %208

199:                                              ; preds = %194
  %200 = call %"class.blink::EllipsisBox"* @_ZNK5blink13RootInlineBox14GetEllipsisBoxEv(%"class.blink::RootInlineBox"* %0)
  %201 = getelementptr inbounds %"class.blink::EllipsisBox", %"class.blink::EllipsisBox"* %200, i64 0, i32 0, i32 7, i32 0
  %202 = load i32, i32* %201, align 4
  %203 = and i32 %202, 2048
  %204 = icmp eq i32 %203, 0
  %205 = getelementptr inbounds %"class.blink::EllipsisBox", %"class.blink::EllipsisBox"* %200, i64 0, i32 0, i32 5, i32 1, i32 0
  %206 = getelementptr inbounds %"class.blink::EllipsisBox", %"class.blink::EllipsisBox"* %200, i64 0, i32 0, i32 5, i32 0, i32 0
  %207 = select i1 %204, i32* %205, i32* %206
  store i32 %195, i32* %207, align 4
  br label %208

208:                                              ; preds = %199, %194
  %209 = load i32, i32* %154, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %153) #12
  br label %210

210:                                              ; preds = %208, %146
  %211 = phi i32 [ %151, %146 ], [ %209, %208 ]
  ret i32 %211
}

declare i8* @_ZN5blink9InlineBoxnwEm(i64) local_unnamed_addr #3

declare i32 @_ZNK5blink9InlineBox13LogicalHeightEv(%"class.blink::InlineBox"*) local_unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define hidden %"class.blink::EllipsisBox"* @_ZNK5blink13RootInlineBox14GetEllipsisBoxEv(%"class.blink::RootInlineBox"*) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = trunc i32 %3 to i16
  %5 = icmp slt i16 %4, 0
  br i1 %5, label %6, label %76

6:                                                ; preds = %1
  %7 = load %"class.WTF::HashMap.1689"*, %"class.WTF::HashMap.1689"** @_ZN5blinkL18g_ellipsis_box_mapE, align 8
  %8 = ptrtoint %"class.blink::RootInlineBox"* %0 to i64
  %9 = getelementptr inbounds %"class.WTF::HashMap.1689", %"class.WTF::HashMap.1689"* %7, i64 0, i32 0, i32 0
  %10 = load %"struct.WTF::KeyValuePair.1693"*, %"struct.WTF::KeyValuePair.1693"** %9, align 8
  %11 = icmp eq %"struct.WTF::KeyValuePair.1693"* %10, null
  br i1 %11, label %76, label %12

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.WTF::HashMap.1689", %"class.WTF::HashMap.1689"* %7, i64 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = add i32 %14, -1
  %16 = zext i32 %15 to i64
  %17 = shl i64 %8, 32
  %18 = xor i64 %17, -1
  %19 = add i64 %18, %8
  %20 = lshr i64 %19, 22
  %21 = xor i64 %20, %19
  %22 = shl i64 %21, 13
  %23 = xor i64 %22, -1
  %24 = add i64 %21, %23
  %25 = lshr i64 %24, 8
  %26 = xor i64 %25, %24
  %27 = mul i64 %26, 9
  %28 = lshr i64 %27, 15
  %29 = xor i64 %28, %27
  %30 = shl i64 %29, 27
  %31 = xor i64 %30, -1
  %32 = add i64 %29, %31
  %33 = lshr i64 %32, 31
  %34 = xor i64 %33, %32
  %35 = trunc i64 %34 to i32
  %36 = and i32 %15, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %10, i64 %37
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %38, i64 0, i32 0
  %40 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %39, align 8
  %41 = icmp eq %"class.blink::RootInlineBox"* %40, %0
  br i1 %41, label %70, label %42

42:                                               ; preds = %12
  %43 = xor i32 %35, -1
  %44 = lshr i32 %35, 23
  %45 = add i32 %44, %43
  %46 = shl i32 %45, 12
  %47 = xor i32 %46, %45
  %48 = lshr i32 %47, 7
  %49 = xor i32 %48, %47
  %50 = shl i32 %49, 2
  %51 = xor i32 %50, %49
  %52 = lshr i32 %51, 20
  %53 = xor i32 %52, %51
  %54 = or i32 %53, 1
  %55 = zext i32 %54 to i64
  br label %56

56:                                               ; preds = %61, %42
  %57 = phi %"class.blink::RootInlineBox"* [ %40, %42 ], [ %68, %61 ]
  %58 = phi i64 [ %37, %42 ], [ %65, %61 ]
  %59 = phi i64 [ 0, %42 ], [ %63, %61 ]
  %60 = icmp eq %"class.blink::RootInlineBox"* %57, null
  br i1 %60, label %76, label %61

61:                                               ; preds = %56
  %62 = icmp eq i64 %59, 0
  %63 = select i1 %62, i64 %55, i64 %59
  %64 = add i64 %63, %58
  %65 = and i64 %64, %16
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %10, i64 %65
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %66, i64 0, i32 0
  %68 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %67, align 8
  %69 = icmp eq %"class.blink::RootInlineBox"* %68, %0
  br i1 %69, label %70, label %56

70:                                               ; preds = %61, %12
  %71 = phi %"struct.WTF::KeyValuePair.1693"* [ %38, %12 ], [ %66, %61 ]
  %72 = icmp eq %"struct.WTF::KeyValuePair.1693"* %71, null
  br i1 %72, label %76, label %73

73:                                               ; preds = %70
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %71, i64 0, i32 1
  %75 = load %"class.blink::EllipsisBox"*, %"class.blink::EllipsisBox"** %74, align 8
  br label %76

76:                                               ; preds = %56, %6, %73, %70, %1
  %77 = phi %"class.blink::EllipsisBox"* [ null, %1 ], [ %75, %73 ], [ null, %70 ], [ null, %6 ], [ null, %56 ]
  ret %"class.blink::EllipsisBox"* %77
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink13RootInlineBox16PlaceEllipsisBoxEbNS_10LayoutUnitES1_S1_RS1_PPNS_9InlineBoxES1_(%"class.blink::RootInlineBox"*, i1 zeroext, i32, i32, i32, %"class.blink::LayoutUnit"* dereferenceable(4), %"class.blink::InlineBox"**, i32) unnamed_addr #1 align 2 {
  %9 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %10 = tail call i32 @_ZN5blink13InlineFlowBox16PlaceEllipsisBoxEbNS_10LayoutUnitES1_S1_RS1_PPNS_9InlineBoxES1_(%"class.blink::InlineFlowBox"* %9, i1 zeroext %1, i32 %2, i32 %3, i32 %4, %"class.blink::LayoutUnit"* dereferenceable(4) %5, %"class.blink::InlineBox"** %6, i32 %7) #12
  %11 = icmp eq i32 %10, -64
  br i1 %11, label %12, label %49

12:                                               ; preds = %8
  br i1 %1, label %13, label %28

13:                                               ; preds = %12
  %14 = icmp sgt i32 %4, -1
  %15 = select i1 %14, i32 -2147483648, i32 2147483647
  %16 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %4) #12
  %17 = extractvalue { i32, i1 } %16, 1
  %18 = extractvalue { i32, i1 } %16, 0
  %19 = select i1 %17, i32 %15, i32 %18, !prof !2
  %20 = icmp sgt i32 %7, -1
  %21 = select i1 %20, i32 -2147483648, i32 2147483647
  %22 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %19, i32 %7) #12
  %23 = extractvalue { i32, i1 } %22, 1
  %24 = extractvalue { i32, i1 } %22, 0
  %25 = select i1 %23, i32 %21, i32 %24, !prof !2
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  br label %35

28:                                               ; preds = %12
  %29 = icmp sgt i32 %7, -1
  %30 = select i1 %29, i32 -2147483648, i32 2147483647
  %31 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %2, i32 %7) #12
  %32 = extractvalue { i32, i1 } %31, 1
  %33 = extractvalue { i32, i1 } %31, 0
  %34 = select i1 %32, i32 %30, i32 %33, !prof !2
  br label %35

35:                                               ; preds = %28, %13
  %36 = phi i32 [ %30, %28 ], [ %21, %13 ]
  %37 = phi i32 [ %34, %28 ], [ %27, %13 ]
  %38 = icmp sgt i32 %2, -1
  %39 = select i1 %38, i32 -2147483648, i32 2147483647
  %40 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %2) #12
  %41 = extractvalue { i32, i1 } %40, 1
  %42 = extractvalue { i32, i1 } %40, 0
  %43 = select i1 %41, i32 %39, i32 %42, !prof !2
  %44 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %43, i32 %7) #12
  %45 = extractvalue { i32, i1 } %44, 1
  %46 = extractvalue { i32, i1 } %44, 0
  %47 = select i1 %45, i32 %36, i32 %46, !prof !2
  %48 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %5, i64 0, i32 0
  store i32 %47, i32* %48, align 4
  br label %49

49:                                               ; preds = %35, %8
  %50 = phi i32 [ %37, %35 ], [ %10, %8 ]
  ret i32 %50
}

declare i32 @_ZN5blink13InlineFlowBox16PlaceEllipsisBoxEbNS_10LayoutUnitES1_S1_RS1_PPNS_9InlineBoxES1_(%"class.blink::InlineFlowBox"*, i1 zeroext, i32, i32, i32, %"class.blink::LayoutUnit"* dereferenceable(4), %"class.blink::InlineBox"**, i32) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink13RootInlineBox5PaintERKNS_9PaintInfoERKNS_14PhysicalOffsetENS_10LayoutUnitES7_(%"class.blink::RootInlineBox"*, %"struct.blink::PaintInfo"* dereferenceable(56), %"struct.blink::PhysicalOffset"* dereferenceable(8), i32, i32) unnamed_addr #1 align 2 {
  %6 = alloca %"class.blink::RootInlineBoxPainter", align 8
  %7 = bitcast %"class.blink::RootInlineBoxPainter"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.blink::RootInlineBoxPainter", %"class.blink::RootInlineBoxPainter"* %6, i64 0, i32 0
  store %"class.blink::RootInlineBox"* %0, %"class.blink::RootInlineBox"** %8, align 8
  call void @_ZN5blink20RootInlineBoxPainter5PaintERKNS_9PaintInfoERKNS_14PhysicalOffsetENS_10LayoutUnitES7_(%"class.blink::RootInlineBoxPainter"* nonnull %6, %"struct.blink::PaintInfo"* dereferenceable(56) %1, %"struct.blink::PhysicalOffset"* dereferenceable(8) %2, i32 %3, i32 %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  ret void
}

declare void @_ZN5blink20RootInlineBoxPainter5PaintERKNS_9PaintInfoERKNS_14PhysicalOffsetENS_10LayoutUnitES7_(%"class.blink::RootInlineBoxPainter"*, %"struct.blink::PaintInfo"* dereferenceable(56), %"struct.blink::PhysicalOffset"* dereferenceable(8), i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink13RootInlineBox11NodeAtPointERNS_13HitTestResultERKNS_15HitTestLocationERKNS_14PhysicalOffsetENS_10LayoutUnitES9_(%"class.blink::RootInlineBox"*, %"class.blink::HitTestResult"* dereferenceable(112), %"class.blink::HitTestLocation"* dereferenceable(72), %"struct.blink::PhysicalOffset"* dereferenceable(8), i32, i32) unnamed_addr #1 align 2 {
  %7 = alloca i64, align 8
  %8 = bitcast i64* %7 to %"struct.blink::PhysicalOffset"*
  %9 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = trunc i32 %10 to i16
  %12 = icmp slt i16 %11, 0
  br i1 %12, label %13, label %66

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %15 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %15, i64 0, i32 5, i32 0
  %17 = bitcast %"class.blink::ComputedStyle"** %16 to %"class.blink::ComputedStyleBase"**
  %18 = load %"class.blink::ComputedStyleBase"*, %"class.blink::ComputedStyleBase"** %17, align 8
  %19 = getelementptr inbounds %"class.blink::ComputedStyleBase", %"class.blink::ComputedStyleBase"* %18, i64 0, i32 9
  %20 = bitcast [20 x i8]* %19 to i160*
  %21 = load i160, i160* %20, align 8
  %22 = and i160 %21, 3802951800684688204490109616128
  %23 = icmp eq i160 %22, 1267650600228229401496703205376
  br i1 %23, label %24, label %66

24:                                               ; preds = %13
  %25 = getelementptr inbounds %"class.blink::HitTestResult", %"class.blink::HitTestResult"* %1, i64 0, i32 0, i32 0
  %26 = load i32, i32* %25, align 8
  %27 = and i32 %26, 1024
  %28 = icmp ne i32 %27, 0
  %29 = and i160 %21, 16888498602639360
  %30 = icmp ne i160 %29, 0
  %31 = or i1 %30, %28
  br i1 %31, label %32, label %66

32:                                               ; preds = %24
  %33 = tail call %"class.blink::EllipsisBox"* @_ZNK5blink13RootInlineBox14GetEllipsisBoxEv(%"class.blink::RootInlineBox"* %0)
  %34 = tail call zeroext i1 @_ZN5blink11EllipsisBox11NodeAtPointERNS_13HitTestResultERKNS_15HitTestLocationERKNS_14PhysicalOffsetENS_10LayoutUnitES9_(%"class.blink::EllipsisBox"* %33, %"class.blink::HitTestResult"* dereferenceable(112) %1, %"class.blink::HitTestLocation"* dereferenceable(72) %2, %"struct.blink::PhysicalOffset"* dereferenceable(8) %3, i32 %4, i32 %5) #12
  br i1 %34, label %35, label %66

35:                                               ; preds = %32
  %36 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %14, align 8
  %37 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #12
  %38 = getelementptr inbounds %"class.blink::HitTestLocation", %"class.blink::HitTestLocation"* %2, i64 0, i32 0, i32 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %3, i64 0, i32 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp sgt i32 %41, -1
  %43 = select i1 %42, i32 -2147483648, i32 2147483647
  %44 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %39, i32 %41) #12
  %45 = extractvalue { i32, i1 } %44, 1
  %46 = extractvalue { i32, i1 } %44, 0
  %47 = select i1 %45, i32 %43, i32 %46, !prof !2
  %48 = getelementptr inbounds %"class.blink::HitTestLocation", %"class.blink::HitTestLocation"* %2, i64 0, i32 0, i32 1, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalOffset"* %3, i64 0, i32 1, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = icmp sgt i32 %51, -1
  %53 = select i1 %52, i32 -2147483648, i32 2147483647
  %54 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %49, i32 %51) #12
  %55 = extractvalue { i32, i1 } %54, 1
  %56 = extractvalue { i32, i1 } %54, 0
  %57 = select i1 %55, i32 %53, i32 %56, !prof !2
  %58 = zext i32 %57 to i64
  %59 = shl nuw i64 %58, 32
  %60 = zext i32 %47 to i64
  %61 = or i64 %59, %60
  store i64 %61, i64* %7, align 8
  %62 = bitcast %"class.blink::LayoutObject"* %36 to void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)***
  %63 = load void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)**, void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)*** %62, align 8
  %64 = getelementptr inbounds void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)*, void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)** %63, i64 62
  %65 = load void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)*, void (%"class.blink::LayoutObject"*, %"class.blink::HitTestResult"*, %"struct.blink::PhysicalOffset"*)** %64, align 8
  call void %65(%"class.blink::LayoutObject"* %36, %"class.blink::HitTestResult"* dereferenceable(112) %1, %"struct.blink::PhysicalOffset"* nonnull dereferenceable(8) %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #12
  br label %69

66:                                               ; preds = %24, %13, %32, %6
  %67 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %68 = tail call zeroext i1 @_ZN5blink13InlineFlowBox11NodeAtPointERNS_13HitTestResultERKNS_15HitTestLocationERKNS_14PhysicalOffsetENS_10LayoutUnitES9_(%"class.blink::InlineFlowBox"* %67, %"class.blink::HitTestResult"* dereferenceable(112) %1, %"class.blink::HitTestLocation"* dereferenceable(72) %2, %"struct.blink::PhysicalOffset"* dereferenceable(8) %3, i32 %4, i32 %5) #12
  br label %69

69:                                               ; preds = %66, %35
  %70 = phi i1 [ true, %35 ], [ %68, %66 ]
  ret i1 %70
}

declare zeroext i1 @_ZN5blink11EllipsisBox11NodeAtPointERNS_13HitTestResultERKNS_15HitTestLocationERKNS_14PhysicalOffsetENS_10LayoutUnitES9_(%"class.blink::EllipsisBox"*, %"class.blink::HitTestResult"* dereferenceable(112), %"class.blink::HitTestLocation"* dereferenceable(72), %"struct.blink::PhysicalOffset"* dereferenceable(8), i32, i32) unnamed_addr #3

declare zeroext i1 @_ZN5blink13InlineFlowBox11NodeAtPointERNS_13HitTestResultERKNS_15HitTestLocationERKNS_14PhysicalOffsetENS_10LayoutUnitES9_(%"class.blink::InlineFlowBox"*, %"class.blink::HitTestResult"* dereferenceable(112), %"class.blink::HitTestLocation"* dereferenceable(72), %"struct.blink::PhysicalOffset"* dereferenceable(8), i32, i32) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13RootInlineBox4MoveERKNS_10LayoutSizeE(%"class.blink::RootInlineBox"*, %"class.blink::LayoutSize"* dereferenceable(8)) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  tail call void @_ZN5blink13InlineFlowBox4MoveERKNS_10LayoutSizeE(%"class.blink::InlineFlowBox"* %3, %"class.blink::LayoutSize"* dereferenceable(8) %1) #12
  %4 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 2048
  %7 = icmp eq i32 %6, 0
  %8 = getelementptr inbounds %"class.blink::LayoutSize", %"class.blink::LayoutSize"* %1, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.blink::LayoutSize", %"class.blink::LayoutSize"* %1, i64 0, i32 1, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = select i1 %7, i32 %9, i32 %11
  %13 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 5, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %12, 0
  %16 = select i1 %15, i32 -2147483648, i32 2147483647
  %17 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %14, i32 %12) #12
  %18 = extractvalue { i32, i1 } %17, 1
  %19 = extractvalue { i32, i1 } %17, 0
  %20 = select i1 %18, i32 %16, i32 %19, !prof !2
  store i32 %20, i32* %13, align 4
  %21 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 6, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %22, i32 %12) #12
  %24 = extractvalue { i32, i1 } %23, 1
  %25 = extractvalue { i32, i1 } %23, 0
  %26 = select i1 %24, i32 %16, i32 %25, !prof !2
  store i32 %26, i32* %21, align 4
  %27 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 7, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %28, i32 %12) #12
  %30 = extractvalue { i32, i1 } %29, 1
  %31 = extractvalue { i32, i1 } %29, 0
  %32 = select i1 %30, i32 %16, i32 %31, !prof !2
  store i32 %32, i32* %27, align 4
  %33 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 8, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %34, i32 %12) #12
  %36 = extractvalue { i32, i1 } %35, 1
  %37 = extractvalue { i32, i1 } %35, 0
  %38 = select i1 %36, i32 %16, i32 %37, !prof !2
  store i32 %38, i32* %33, align 4
  %39 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 9, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %40, i32 %12) #12
  %42 = extractvalue { i32, i1 } %41, 1
  %43 = extractvalue { i32, i1 } %41, 0
  %44 = select i1 %42, i32 %16, i32 %43, !prof !2
  store i32 %44, i32* %39, align 4
  %45 = trunc i32 %5 to i16
  %46 = icmp slt i16 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %2
  %48 = tail call %"class.blink::EllipsisBox"* @_ZNK5blink13RootInlineBox14GetEllipsisBoxEv(%"class.blink::RootInlineBox"* %0)
  %49 = getelementptr inbounds %"class.blink::EllipsisBox", %"class.blink::EllipsisBox"* %48, i64 0, i32 0
  tail call void @_ZN5blink9InlineBox4MoveERKNS_10LayoutSizeE(%"class.blink::InlineBox"* %49, %"class.blink::LayoutSize"* dereferenceable(8) %1) #12
  br label %50

50:                                               ; preds = %47, %2
  ret void
}

declare void @_ZN5blink13InlineFlowBox4MoveERKNS_10LayoutSizeE(%"class.blink::InlineFlowBox"*, %"class.blink::LayoutSize"* dereferenceable(8)) unnamed_addr #3

declare void @_ZN5blink9InlineBox4MoveERKNS_10LayoutSizeE(%"class.blink::InlineBox"*, %"class.blink::LayoutSize"* dereferenceable(8)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13RootInlineBox12ChildRemovedEPNS_9InlineBoxE(%"class.blink::RootInlineBox"* nocapture, %"class.blink::InlineBox"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = alloca %"struct.blink::BidiStatus", align 8
  %4 = alloca %"struct.blink::BidiStatus", align 8
  %5 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 4, i32 0
  %6 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 2, i32 0
  %8 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %7, align 8
  %9 = icmp eq %"class.blink::LayoutObject"* %6, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %2
  %11 = bitcast %"struct.blink::BidiStatus"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %3, i64 0, i32 0
  store i32 10, i32* %12, align 8
  %13 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %3, i64 0, i32 1
  store i32 10, i32* %13, align 4
  %14 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %3, i64 0, i32 2
  store i32 10, i32* %14, align 8
  %15 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %3, i64 0, i32 3, i32 0
  store %"class.blink::BidiContext"* null, %"class.blink::BidiContext"** %15, align 8
  call void @_ZN5blink13RootInlineBox16SetLineBreakInfoENS_14LineLayoutItemEjRKNS_10BidiStatusE(%"class.blink::RootInlineBox"* %0, %"class.blink::LayoutObject"* null, i32 0, %"struct.blink::BidiStatus"* nonnull dereferenceable(24) %3)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #12
  br label %16

16:                                               ; preds = %10, %2
  %17 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 4
  %18 = bitcast %"class.blink::InlineFlowBox"** %17 to %"class.blink::RootInlineBox"**
  %19 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %18, align 8
  %20 = icmp eq %"class.blink::RootInlineBox"* %19, null
  br i1 %20, label %33, label %21

21:                                               ; preds = %16
  %22 = bitcast %"struct.blink::BidiStatus"* %4 to i8*
  %23 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %4, i64 0, i32 0
  %24 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %4, i64 0, i32 1
  %25 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %4, i64 0, i32 2
  %26 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %4, i64 0, i32 3, i32 0
  br label %27

27:                                               ; preds = %21, %34
  %28 = phi %"class.blink::RootInlineBox"* [ %19, %21 ], [ %42, %34 ]
  %29 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %28, i64 0, i32 2, i32 0
  %30 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %29, align 8
  %31 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %5, align 8
  %32 = icmp eq %"class.blink::LayoutObject"* %30, %31
  br i1 %32, label %34, label %33

33:                                               ; preds = %27, %34, %16
  ret void

34:                                               ; preds = %27
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #12
  store i32 10, i32* %23, align 8
  store i32 10, i32* %24, align 4
  store i32 10, i32* %25, align 8
  store %"class.blink::BidiContext"* null, %"class.blink::BidiContext"** %26, align 8
  call void @_ZN5blink13RootInlineBox16SetLineBreakInfoENS_14LineLayoutItemEjRKNS_10BidiStatusE(%"class.blink::RootInlineBox"* nonnull %28, %"class.blink::LayoutObject"* null, i32 0, %"struct.blink::BidiStatus"* nonnull dereferenceable(24) %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #12
  %35 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %28, i64 0, i32 0, i32 0
  %36 = bitcast %"class.blink::RootInlineBox"* %28 to void (%"class.blink::InlineBox"*)***
  %37 = load void (%"class.blink::InlineBox"*)**, void (%"class.blink::InlineBox"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %37, i64 28
  %39 = load void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %38, align 8
  tail call void %39(%"class.blink::InlineBox"* %35) #12
  %40 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %28, i64 0, i32 0, i32 4
  %41 = bitcast %"class.blink::InlineFlowBox"** %40 to %"class.blink::RootInlineBox"**
  %42 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %41, align 8
  %43 = icmp eq %"class.blink::RootInlineBox"* %42, null
  br i1 %43, label %33, label %27
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13RootInlineBox16SetLineBreakInfoENS_14LineLayoutItemEjRKNS_10BidiStatusE(%"class.blink::RootInlineBox"* nocapture, %"class.blink::LayoutObject"*, i32, %"struct.blink::BidiStatus"* nocapture readonly dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 2, i32 0
  store %"class.blink::LayoutObject"* %1, %"class.blink::LayoutObject"** %6, align 8
  %7 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 1
  store i32 %2, i32* %7, align 4
  %8 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %3, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %11 = load i32, i32* %10, align 8
  %12 = shl i32 %9, 10
  %13 = and i32 %12, 31744
  %14 = and i32 %11, -31745
  %15 = or i32 %14, %13
  store i32 %15, i32* %10, align 8
  %16 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %3, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = shl i32 %17, 15
  %19 = and i32 %18, 1015808
  %20 = and i32 %15, -1015809
  %21 = or i32 %19, %20
  store i32 %21, i32* %10, align 8
  %22 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %3, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = shl i32 %23, 20
  %25 = and i32 %24, 32505856
  %26 = and i32 %21, -32505857
  %27 = or i32 %26, %25
  store i32 %27, i32* %10, align 8
  %28 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %3, i64 0, i32 3, i32 0
  %29 = load %"class.blink::BidiContext"*, %"class.blink::BidiContext"** %28, align 8
  %30 = icmp eq %"class.blink::BidiContext"* %29, null
  br i1 %30, label %38, label %31

31:                                               ; preds = %4
  %32 = getelementptr inbounds %"class.blink::BidiContext", %"class.blink::BidiContext"* %29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = atomicrmw add i32* %32, i32 1 monotonic
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0)) #12
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #12
  br label %38

38:                                               ; preds = %4, %31, %35
  %39 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 3
  %40 = ptrtoint %"class.blink::BidiContext"* %29 to i64
  %41 = bitcast %class.scoped_refptr.1631* %39 to i64*
  %42 = getelementptr inbounds %class.scoped_refptr.1631, %class.scoped_refptr.1631* %39, i64 0, i32 0
  %43 = load %"class.blink::BidiContext"*, %"class.blink::BidiContext"** %42, align 8
  store i64 %40, i64* %41, align 8
  %44 = icmp eq %"class.blink::BidiContext"* %43, null
  br i1 %44, label %51, label %45

45:                                               ; preds = %38
  %46 = getelementptr inbounds %"class.blink::BidiContext", %"class.blink::BidiContext"* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = atomicrmw sub i32* %46, i32 1 acq_rel
  %48 = icmp eq i32 %47, 1
  br i1 %48, label %49, label %51

49:                                               ; preds = %45
  call void @_ZN5blink11BidiContextD2Ev(%"class.blink::BidiContext"* nonnull %43) #12
  %50 = bitcast %"class.blink::BidiContext"* %43 to i8*
  call void @free(i8* %50) #12
  br label %51

51:                                               ; preds = %38, %45, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink13RootInlineBox26AlignBoxesInBlockDirectionENS_10LayoutUnitERN3WTF7HashMapIPKNS_13InlineTextBoxENSt3__14pairINS2_6VectorIPKNS_14SimpleFontDataELj0ENS2_18PartitionAllocatorEEENS_13GlyphOverflowEEENS2_7PtrHashIS5_EENS2_10HashTraitsIS6_EENSJ_ISG_EESD_EERNS_21VerticalPositionCacheE(%"class.blink::RootInlineBox"*, i32, %"class.WTF::HashMap.1902"* dereferenceable(24), %"class.blink::VerticalPositionCache"* dereferenceable(48)) local_unnamed_addr #1 align 2 {
  %5 = alloca i64, align 8
  %6 = alloca %"class.blink::LayoutUnit", align 4
  %7 = alloca %"class.blink::LayoutUnit", align 4
  %8 = alloca %"class.blink::LayoutUnit", align 4
  %9 = alloca %"class.blink::LayoutUnit", align 4
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca %"class.blink::LayoutUnit", align 4
  %13 = alloca %"class.blink::LayoutUnit", align 4
  %14 = alloca %"class.blink::LayoutUnit", align 4
  %15 = alloca %"class.blink::LayoutUnit", align 4
  %16 = alloca %"class.blink::LayoutUnit", align 4
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0
  %21 = bitcast %"class.blink::RootInlineBox"* %0 to i1 (%"class.blink::InlineBox"*)***
  %22 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %21, align 8
  %23 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %22, i64 19
  %24 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %23, align 8
  %25 = tail call zeroext i1 %24(%"class.blink::InlineBox"* %20) #12
  br i1 %25, label %215, label %26

26:                                               ; preds = %4
  %27 = bitcast %"class.blink::LayoutUnit"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #12
  %28 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %6, i64 0, i32 0
  store i32 0, i32* %28, align 4
  %29 = bitcast %"class.blink::LayoutUnit"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #12
  %30 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %7, i64 0, i32 0
  store i32 0, i32* %30, align 4
  %31 = bitcast %"class.blink::LayoutUnit"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #12
  %32 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %8, i64 0, i32 0
  store i32 0, i32* %32, align 4
  %33 = bitcast %"class.blink::LayoutUnit"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #12
  %34 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %9, i64 0, i32 0
  store i32 0, i32* %34, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %10) #12
  store i8 0, i8* %10, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %11) #12
  store i8 0, i8* %11, align 1
  %35 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %36 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %35, align 8
  %37 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %36, i64 0, i32 6, i32 0, i32 0
  %38 = load %"class.blink::Node"*, %"class.blink::Node"** %37, align 8
  %39 = icmp eq %"class.blink::Node"* %38, null
  br i1 %39, label %40, label %47

40:                                               ; preds = %26, %40
  %41 = phi %"class.blink::LayoutObject"* [ %43, %40 ], [ %36, %26 ]
  %42 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %41, i64 0, i32 7
  %43 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %43, i64 0, i32 6, i32 0, i32 0
  %45 = load %"class.blink::Node"*, %"class.blink::Node"** %44, align 8
  %46 = icmp eq %"class.blink::Node"* %45, null
  br i1 %46, label %40, label %47

47:                                               ; preds = %40, %26
  %48 = phi %"class.blink::Node"* [ %38, %26 ], [ %45, %40 ]
  %49 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %48, i64 0, i32 3, i32 0, i32 0
  %50 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %49, align 8
  %51 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %50, i64 0, i32 2, i32 0, i32 0
  %52 = load %"class.blink::Document"*, %"class.blink::Document"** %51, align 8
  %53 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %52, i64 0, i32 33
  %54 = load i32, i32* %53, align 8
  %55 = icmp eq i32 %54, 2
  %56 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %57 = tail call i32 @_ZNK5blink13InlineFlowBox16DominantBaselineEv(%"class.blink::InlineFlowBox"* %56) #12
  %58 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %59 = load i32, i32* %58, align 8
  %60 = shl i32 %57, 5
  %61 = and i32 %60, 224
  %62 = and i32 %59, -225
  %63 = or i32 %62, %61
  store i32 %63, i32* %58, align 8
  %64 = and i32 %57, 7
  call void @_ZN5blink13InlineFlowBox24ComputeLogicalBoxHeightsEPNS_13RootInlineBoxERNS_10LayoutUnitES4_S4_S4_RbS5_bRN3WTF7HashMapIPKNS_13InlineTextBoxENSt3__14pairINS6_6VectorIPKNS_14SimpleFontDataELj0ENS6_18PartitionAllocatorEEENS_13GlyphOverflowEEENS6_7PtrHashIS9_EENS6_10HashTraitsISA_EENSN_ISK_EESH_EENS_12FontBaselineERNS_21VerticalPositionCacheE(%"class.blink::InlineFlowBox"* %56, %"class.blink::RootInlineBox"* %0, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %6, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %7, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %8, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %9, i8* nonnull dereferenceable(1) %10, i8* nonnull dereferenceable(1) %11, i1 zeroext %55, %"class.WTF::HashMap.1902"* dereferenceable(24) %2, i32 %64, %"class.blink::VerticalPositionCache"* dereferenceable(48) %3) #12
  %65 = load i32, i32* %32, align 4
  %66 = load i32, i32* %34, align 4
  %67 = icmp slt i32 %66, 0
  %68 = select i1 %67, i32 -2147483648, i32 2147483647
  %69 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %65, i32 %66) #12
  %70 = extractvalue { i32, i1 } %69, 1
  %71 = extractvalue { i32, i1 } %69, 0
  %72 = select i1 %70, i32 %68, i32 %71, !prof !2
  %73 = load i32, i32* %28, align 4
  %74 = load i32, i32* %30, align 4
  %75 = icmp slt i32 %73, %74
  %76 = select i1 %75, %"class.blink::LayoutUnit"* %7, %"class.blink::LayoutUnit"* %6
  %77 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %76, i64 0, i32 0
  %78 = load i32, i32* %77, align 4
  %79 = icmp slt i32 %72, %78
  br i1 %79, label %80, label %83

80:                                               ; preds = %47
  %81 = sdiv i32 %73, 64
  %82 = sdiv i32 %74, 64
  call void @_ZN5blink13InlineFlowBox25AdjustMaxAscentAndDescentERNS_10LayoutUnitES2_ii(%"class.blink::InlineFlowBox"* %56, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %8, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %9, i32 %81, i32 %82) #12
  br label %83

83:                                               ; preds = %80, %47
  %84 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %35, align 8
  %85 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %84, i64 0, i32 5, i32 0
  %86 = bitcast %"class.blink::ComputedStyle"** %85 to %"class.blink::ComputedStyleBase"**
  %87 = load %"class.blink::ComputedStyleBase"*, %"class.blink::ComputedStyleBase"** %86, align 8
  %88 = getelementptr inbounds %"class.blink::ComputedStyleBase", %"class.blink::ComputedStyleBase"* %87, i64 0, i32 1, i32 0, i32 0
  %89 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"** %88, align 8
  %90 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* %89, i64 0, i32 2, i32 0, i32 0
  %91 = load %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData"*, %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData"** %90, align 8
  %92 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData", %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData"* %91, i64 0, i32 17
  %93 = load i8, i8* %92, align 2
  %94 = icmp eq i8 %93, 0
  %95 = load i32, i32* %32, align 4
  %96 = load i32, i32* %34, align 4
  br i1 %94, label %139, label %97

97:                                               ; preds = %83
  %98 = icmp slt i32 %96, 0
  %99 = select i1 %98, i32 -2147483648, i32 2147483647
  %100 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %95, i32 %96) #12
  %101 = extractvalue { i32, i1 } %100, 1
  %102 = extractvalue { i32, i1 } %100, 0
  %103 = select i1 %101, i32 %99, i32 %102, !prof !2
  %104 = sdiv i32 %103, 64
  %105 = zext i8 %93 to i32
  %106 = srem i32 %104, %105
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %139, label %108

108:                                              ; preds = %97
  %109 = sub nsw i32 %105, %106
  %110 = sdiv i32 %109, 2
  %111 = icmp sgt i32 %109, 67108863
  br i1 %111, label %116, label %112

112:                                              ; preds = %108
  %113 = shl i32 %110, 6
  %114 = icmp slt i32 %113, 0
  %115 = select i1 %114, i32 -2147483648, i32 2147483647
  br label %116

116:                                              ; preds = %112, %108
  %117 = phi i32 [ 2147483647, %108 ], [ %113, %112 ]
  %118 = phi i32 [ 2147483647, %108 ], [ %115, %112 ]
  %119 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %96, i32 %117) #12
  %120 = extractvalue { i32, i1 } %119, 1
  %121 = extractvalue { i32, i1 } %119, 0
  %122 = select i1 %120, i32 %118, i32 %121, !prof !2
  store i32 %122, i32* %34, align 4
  %123 = sub nsw i32 %109, %110
  %124 = icmp sgt i32 %123, 33554431
  br i1 %124, label %132, label %125

125:                                              ; preds = %116
  %126 = icmp slt i32 %123, -33554432
  br i1 %126, label %130, label %127

127:                                              ; preds = %125
  %128 = shl i32 %123, 6
  %129 = icmp slt i32 %128, 0
  br i1 %129, label %130, label %132

130:                                              ; preds = %125, %127
  %131 = phi i32 [ %128, %127 ], [ -2147483648, %125 ]
  br label %132

132:                                              ; preds = %116, %130, %127
  %133 = phi i32 [ %131, %130 ], [ %128, %127 ], [ 2147483647, %116 ]
  %134 = phi i32 [ -2147483648, %130 ], [ 2147483647, %127 ], [ 2147483647, %116 ]
  %135 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %95, i32 %133) #12
  %136 = extractvalue { i32, i1 } %135, 1
  %137 = extractvalue { i32, i1 } %135, 0
  %138 = select i1 %136, i32 %134, i32 %137, !prof !2
  store i32 %138, i32* %32, align 4
  br label %139

139:                                              ; preds = %83, %132, %97
  %140 = phi i32 [ %122, %132 ], [ %96, %97 ], [ %96, %83 ]
  %141 = phi i32 [ %138, %132 ], [ %95, %97 ], [ %95, %83 ]
  %142 = icmp slt i32 %140, 0
  %143 = select i1 %142, i32 -2147483648, i32 2147483647
  %144 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %141, i32 %140) #12
  %145 = extractvalue { i32, i1 } %144, 1
  %146 = extractvalue { i32, i1 } %144, 0
  %147 = select i1 %145, i32 %143, i32 %146, !prof !2
  %148 = bitcast %"class.blink::LayoutUnit"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %148) #12
  %149 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %12, i64 0, i32 0
  store i32 %1, i32* %149, align 4
  %150 = bitcast %"class.blink::LayoutUnit"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %150) #12
  %151 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %13, i64 0, i32 0
  store i32 %1, i32* %151, align 4
  %152 = bitcast %"class.blink::LayoutUnit"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %152) #12
  %153 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %14, i64 0, i32 0
  store i32 %1, i32* %153, align 4
  %154 = bitcast %"class.blink::LayoutUnit"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %154) #12
  %155 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %15, i64 0, i32 0
  store i32 %1, i32* %155, align 4
  %156 = bitcast %"class.blink::LayoutUnit"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %156) #12
  %157 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %16, i64 0, i32 0
  store i32 %1, i32* %157, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %17) #12
  store i8 0, i8* %17, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %18) #12
  store i8 0, i8* %18, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %19) #12
  store i8 0, i8* %19, align 1
  %158 = load i32, i32* %58, align 8
  %159 = lshr i32 %158, 5
  %160 = and i32 %159, 7
  call void @_ZN5blink13InlineFlowBox26PlaceBoxesInBlockDirectionENS_10LayoutUnitES1_S1_bRS1_S2_S2_RbS2_S2_S3_S3_NS_12FontBaselineE(%"class.blink::InlineFlowBox"* %56, i32 %1, i32 %147, i32 %141, i1 zeroext %55, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %12, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %13, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %16, i8* nonnull dereferenceable(1) %17, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %14, %"class.blink::LayoutUnit"* nonnull dereferenceable(4) %15, i8* nonnull dereferenceable(1) %18, i8* nonnull dereferenceable(1) %19, i32 %160) #12
  %161 = load i8, i8* %18, align 1, !range !3
  %162 = zext i8 %161 to i32
  %163 = load i32, i32* %58, align 8
  %164 = shl nuw nsw i32 %162, 8
  %165 = and i32 %163, -769
  %166 = or i32 %165, %164
  %167 = load i8, i8* %19, align 1, !range !3
  %168 = zext i8 %167 to i32
  %169 = shl nuw nsw i32 %168, 9
  %170 = or i32 %169, %166
  store i32 %170, i32* %58, align 8
  %171 = icmp sgt i32 %147, 0
  %172 = select i1 %171, i32 %147, i32 0
  %173 = load i32, i32* %149, align 4
  %174 = load i32, i32* %151, align 4
  %175 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %172) #12
  %176 = extractvalue { i32, i1 } %175, 1
  %177 = extractvalue { i32, i1 } %175, 0
  %178 = select i1 %176, i32 2147483647, i32 %177
  %179 = load i32, i32* %157, align 4
  %180 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 5, i32 0
  store i32 %173, i32* %180, align 8
  %181 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 6, i32 0
  store i32 %174, i32* %181, align 4
  %182 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 7, i32 0
  store i32 %1, i32* %182, align 8
  %183 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 8, i32 0
  store i32 %178, i32* %183, align 4
  %184 = icmp eq i32 %179, -2147483648
  %185 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 9, i32 0
  %186 = select i1 %184, i32 %174, i32 %179
  store i32 %186, i32* %185, align 8
  %187 = call i32 @_ZNK5blink13RootInlineBox27BeforeAnnotationsAdjustmentEv(%"class.blink::RootInlineBox"* %0)
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %213, label %189

189:                                              ; preds = %139
  %190 = bitcast i64* %5 to %"class.blink::LayoutSize"*
  %191 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %191) #12
  %192 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %193 = load i32, i32* %192, align 4
  %194 = and i32 %193, 2048
  %195 = icmp eq i32 %194, 0
  %196 = zext i32 %187 to i64
  %197 = shl nuw i64 %196, 32
  %198 = select i1 %195, i64 %196, i64 %197
  store i64 %198, i64* %5, align 8
  %199 = bitcast %"class.blink::RootInlineBox"* %0 to void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)***
  %200 = load void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)**, void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)*** %199, align 8
  %201 = getelementptr inbounds void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)*, void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)** %200, i64 10
  %202 = load void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)*, void (%"class.blink::InlineBox"*, %"class.blink::LayoutSize"*)** %201, align 8
  call void %202(%"class.blink::InlineBox"* %20, %"class.blink::LayoutSize"* nonnull dereferenceable(8) %190) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %191) #12
  %203 = icmp slt i32 %187, 0
  %204 = select i1 %203, i32 -2147483648, i32 2147483647
  %205 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %187) #12
  %206 = extractvalue { i32, i1 } %205, 1
  %207 = extractvalue { i32, i1 } %205, 0
  %208 = select i1 %206, i32 %204, i32 %207, !prof !2
  %209 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %208, i32 %172) #12
  %210 = extractvalue { i32, i1 } %209, 1
  %211 = extractvalue { i32, i1 } %209, 0
  %212 = select i1 %210, i32 2147483647, i32 %211, !prof !2
  br label %213

213:                                              ; preds = %139, %189
  %214 = phi i32 [ %178, %139 ], [ %212, %189 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %19) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %18) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %17) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %156) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %154) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %152) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %150) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %148) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %11) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %10) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #12
  br label %215

215:                                              ; preds = %4, %213
  %216 = phi i32 [ %214, %213 ], [ 0, %4 ]
  ret i32 %216
}

declare i32 @_ZNK5blink13InlineFlowBox16DominantBaselineEv(%"class.blink::InlineFlowBox"*) local_unnamed_addr #3

declare void @_ZN5blink13InlineFlowBox24ComputeLogicalBoxHeightsEPNS_13RootInlineBoxERNS_10LayoutUnitES4_S4_S4_RbS5_bRN3WTF7HashMapIPKNS_13InlineTextBoxENSt3__14pairINS6_6VectorIPKNS_14SimpleFontDataELj0ENS6_18PartitionAllocatorEEENS_13GlyphOverflowEEENS6_7PtrHashIS9_EENS6_10HashTraitsISA_EENSN_ISK_EESH_EENS_12FontBaselineERNS_21VerticalPositionCacheE(%"class.blink::InlineFlowBox"*, %"class.blink::RootInlineBox"*, %"class.blink::LayoutUnit"* dereferenceable(4), %"class.blink::LayoutUnit"* dereferenceable(4), %"class.blink::LayoutUnit"* dereferenceable(4), %"class.blink::LayoutUnit"* dereferenceable(4), i8* dereferenceable(1), i8* dereferenceable(1), i1 zeroext, %"class.WTF::HashMap.1902"* dereferenceable(24), i32, %"class.blink::VerticalPositionCache"* dereferenceable(48)) local_unnamed_addr #3

declare void @_ZN5blink13InlineFlowBox25AdjustMaxAscentAndDescentERNS_10LayoutUnitES2_ii(%"class.blink::InlineFlowBox"*, %"class.blink::LayoutUnit"* dereferenceable(4), %"class.blink::LayoutUnit"* dereferenceable(4), i32, i32) local_unnamed_addr #3

declare void @_ZN5blink13InlineFlowBox26PlaceBoxesInBlockDirectionENS_10LayoutUnitES1_S1_bRS1_S2_S2_RbS2_S2_S3_S3_NS_12FontBaselineE(%"class.blink::InlineFlowBox"*, i32, i32, i32, i1 zeroext, %"class.blink::LayoutUnit"* dereferenceable(4), %"class.blink::LayoutUnit"* dereferenceable(4), %"class.blink::LayoutUnit"* dereferenceable(4), i8* dereferenceable(1), %"class.blink::LayoutUnit"* dereferenceable(4), %"class.blink::LayoutUnit"* dereferenceable(4), i8* dereferenceable(1), i8* dereferenceable(1), i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink13RootInlineBox27BeforeAnnotationsAdjustmentEv(%"class.blink::RootInlineBox"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %3 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %3, i64 0, i32 5, i32 0
  %5 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %5, i64 0, i32 0, i32 9
  %7 = bitcast [20 x i8]* %6 to i160*
  %8 = load i160, i160* %7, align 8
  %9 = and i160 %8, 15211807202738752817960438464512
  %10 = icmp eq i160 %9, 10141204801825835211973625643008
  %11 = bitcast %"class.blink::LayoutObject"* %3 to %"class.blink::LayoutBoxModelObject"*
  br i1 %10, label %90, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 4
  %14 = bitcast %"class.blink::InlineFlowBox"** %13 to %"class.blink::RootInlineBox"**
  %15 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %14, align 8
  %16 = icmp eq %"class.blink::RootInlineBox"* %15, null
  br i1 %16, label %27, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %15, i64 0, i32 0, i32 6
  %19 = load i32, i32* %18, align 8
  %20 = and i32 %19, 512
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %17
  %23 = bitcast %"class.blink::RootInlineBox"* %15 to %"class.blink::InlineFlowBox"*
  %24 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 5, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = tail call i32 @_ZNK5blink13InlineFlowBox32ComputeUnderAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* nonnull %23, i32 %25) #12
  br label %27

27:                                               ; preds = %17, %12, %22
  %28 = phi i32 [ 0, %12 ], [ %26, %22 ], [ 0, %17 ]
  %29 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %30 = load i32, i32* %29, align 8
  %31 = and i32 %30, 256
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %163, label %33

33:                                               ; preds = %27
  %34 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %14, align 8
  %35 = icmp eq %"class.blink::RootInlineBox"* %34, null
  br i1 %35, label %49, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %34, i64 0, i32 6, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 5, i32 0
  %40 = load i32, i32* %39, align 8
  %41 = icmp slt i32 %40, %38
  %42 = select i1 %41, i32 %40, i32 %38
  %43 = icmp slt i32 %28, 0
  %44 = select i1 %43, i32 -2147483648, i32 2147483647
  %45 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %42, i32 %28) #12
  %46 = extractvalue { i32, i1 } %45, 1
  %47 = extractvalue { i32, i1 } %45, 0
  %48 = select i1 %46, i32 %44, i32 %47, !prof !2
  br label %86

49:                                               ; preds = %33
  %50 = bitcast %"class.blink::LayoutObject"** %2 to %"class.blink::LayoutBoxModelObject"**
  %51 = load %"class.blink::LayoutBoxModelObject"*, %"class.blink::LayoutBoxModelObject"** %50, align 8
  %52 = getelementptr inbounds %"class.blink::LayoutBoxModelObject", %"class.blink::LayoutBoxModelObject"* %51, i64 0, i32 0, i32 5, i32 0
  %53 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %52, align 8, !noalias !4
  %54 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %53, i64 0, i32 0, i32 9
  %55 = bitcast [20 x i8]* %54 to i160*
  %56 = load i160, i160* %55, align 8, !noalias !4
  %57 = lshr i160 %56, 102
  %58 = trunc i160 %57 to i8
  %59 = and i8 %58, 3
  %60 = bitcast %"class.blink::LayoutBoxModelObject"* %51 to i8*
  switch i8 %59, label %61 [
    i8 0, label %70
    i8 1, label %62
  ]

61:                                               ; preds = %49
  br label %62

62:                                               ; preds = %61, %49
  %63 = phi { i64, i64 } [ { i64 993, i64 0 }, %61 ], [ { i64 1001, i64 0 }, %49 ]
  %64 = extractvalue { i64, i64 } %63, 0
  %65 = extractvalue { i64, i64 } %63, 1
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to %"class.blink::LayoutBoxModelObject"*
  %68 = and i64 %64, 1
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %80, label %70

70:                                               ; preds = %62, %49
  %71 = phi %"class.blink::LayoutBoxModelObject"* [ %67, %62 ], [ %51, %49 ]
  %72 = phi i8* [ %66, %62 ], [ %60, %49 ]
  %73 = phi i64 [ %64, %62 ], [ 977, %49 ]
  %74 = bitcast i8* %72 to i8**
  %75 = load i8*, i8** %74, align 8
  %76 = add i64 %73, -1
  %77 = getelementptr i8, i8* %75, i64 %76
  %78 = bitcast i8* %77 to i32 (%"class.blink::LayoutBoxModelObject"*)**
  %79 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %78, align 8
  br label %82

80:                                               ; preds = %62
  %81 = inttoptr i64 %64 to i32 (%"class.blink::LayoutBoxModelObject"*)*
  br label %82

82:                                               ; preds = %70, %80
  %83 = phi %"class.blink::LayoutBoxModelObject"* [ %71, %70 ], [ %67, %80 ]
  %84 = phi i32 (%"class.blink::LayoutBoxModelObject"*)* [ %79, %70 ], [ %81, %80 ]
  %85 = tail call i32 %84(%"class.blink::LayoutBoxModelObject"* %83) #12
  br label %86

86:                                               ; preds = %82, %36
  %87 = phi i32 [ %48, %36 ], [ %85, %82 ]
  %88 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %89 = tail call i32 @_ZNK5blink13InlineFlowBox31ComputeOverAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* %88, i32 %87) #12
  br label %163

90:                                               ; preds = %1
  %91 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %92 = load i32, i32* %91, align 8
  %93 = and i32 %92, 256
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %137, label %95

95:                                               ; preds = %90
  %96 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %97 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 4
  %98 = bitcast %"class.blink::InlineFlowBox"** %97 to %"class.blink::RootInlineBox"**
  %99 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %98, align 8
  %100 = icmp eq %"class.blink::RootInlineBox"* %99, null
  br i1 %100, label %104, label %101

101:                                              ; preds = %95
  %102 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %99, i64 0, i32 6, i32 0
  %103 = load i32, i32* %102, align 4
  br label %134

104:                                              ; preds = %95
  %105 = lshr i160 %8, 102
  %106 = trunc i160 %105 to i8
  %107 = and i8 %106, 3
  %108 = bitcast %"class.blink::LayoutObject"* %3 to i8*
  switch i8 %107, label %109 [
    i8 0, label %118
    i8 1, label %110
  ]

109:                                              ; preds = %104
  br label %110

110:                                              ; preds = %109, %104
  %111 = phi { i64, i64 } [ { i64 993, i64 0 }, %109 ], [ { i64 1001, i64 0 }, %104 ]
  %112 = extractvalue { i64, i64 } %111, 0
  %113 = extractvalue { i64, i64 } %111, 1
  %114 = getelementptr inbounds i8, i8* %108, i64 %113
  %115 = bitcast i8* %114 to %"class.blink::LayoutBoxModelObject"*
  %116 = and i64 %112, 1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %128, label %118

118:                                              ; preds = %110, %104
  %119 = phi %"class.blink::LayoutBoxModelObject"* [ %115, %110 ], [ %11, %104 ]
  %120 = phi i8* [ %114, %110 ], [ %108, %104 ]
  %121 = phi i64 [ %112, %110 ], [ 977, %104 ]
  %122 = bitcast i8* %120 to i8**
  %123 = load i8*, i8** %122, align 8
  %124 = add i64 %121, -1
  %125 = getelementptr i8, i8* %123, i64 %124
  %126 = bitcast i8* %125 to i32 (%"class.blink::LayoutBoxModelObject"*)**
  %127 = load i32 (%"class.blink::LayoutBoxModelObject"*)*, i32 (%"class.blink::LayoutBoxModelObject"*)** %126, align 8
  br label %130

128:                                              ; preds = %110
  %129 = inttoptr i64 %112 to i32 (%"class.blink::LayoutBoxModelObject"*)*
  br label %130

130:                                              ; preds = %118, %128
  %131 = phi %"class.blink::LayoutBoxModelObject"* [ %119, %118 ], [ %115, %128 ]
  %132 = phi i32 (%"class.blink::LayoutBoxModelObject"*)* [ %127, %118 ], [ %129, %128 ]
  %133 = tail call i32 %132(%"class.blink::LayoutBoxModelObject"* %131) #12
  br label %134

134:                                              ; preds = %130, %101
  %135 = phi i32 [ %103, %101 ], [ %133, %130 ]
  %136 = tail call i32 @_ZNK5blink13InlineFlowBox32ComputeUnderAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* %96, i32 %135) #12
  br label %137

137:                                              ; preds = %90, %134
  %138 = phi i32 [ %136, %134 ], [ 0, %90 ]
  %139 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 4
  %140 = bitcast %"class.blink::InlineFlowBox"** %139 to %"class.blink::RootInlineBox"**
  %141 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %140, align 8
  %142 = icmp eq %"class.blink::RootInlineBox"* %141, null
  br i1 %142, label %163, label %143

143:                                              ; preds = %137
  %144 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %141, i64 0, i32 0, i32 6
  %145 = load i32, i32* %144, align 8
  %146 = and i32 %145, 512
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %163, label %148

148:                                              ; preds = %143
  %149 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %141, i64 0, i32 6, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 5, i32 0
  %152 = load i32, i32* %151, align 8
  %153 = icmp slt i32 %150, %152
  %154 = select i1 %153, i32 %152, i32 %150
  %155 = icmp sgt i32 %138, -1
  %156 = select i1 %155, i32 -2147483648, i32 2147483647
  %157 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %154, i32 %138) #12
  %158 = extractvalue { i32, i1 } %157, 1
  %159 = extractvalue { i32, i1 } %157, 0
  %160 = select i1 %158, i32 %156, i32 %159, !prof !2
  %161 = bitcast %"class.blink::RootInlineBox"* %141 to %"class.blink::InlineFlowBox"*
  %162 = tail call i32 @_ZNK5blink13InlineFlowBox31ComputeOverAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* nonnull %161, i32 %160) #12
  br label %163

163:                                              ; preds = %143, %27, %137, %86, %148
  %164 = phi i32 [ %138, %137 ], [ %162, %148 ], [ %138, %143 ], [ %89, %86 ], [ %28, %27 ]
  ret i32 %164
}

declare i32 @_ZNK5blink13InlineFlowBox32ComputeUnderAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"*, i32) local_unnamed_addr #3

declare i32 @_ZNK5blink13InlineFlowBox31ComputeOverAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink13RootInlineBox10IsSelectedEv(%"class.blink::RootInlineBox"*) unnamed_addr #1 align 2 {
  %2 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %3 = tail call %"class.blink::InlineBox"* @_ZNK5blink13InlineFlowBox14FirstLeafChildEv(%"class.blink::InlineFlowBox"* %2) #12
  %4 = icmp eq %"class.blink::InlineBox"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1, %12
  %6 = phi %"class.blink::InlineBox"* [ %13, %12 ], [ %3, %1 ]
  %7 = bitcast %"class.blink::InlineBox"* %6 to i1 (%"class.blink::InlineBox"*)***
  %8 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %8, i64 30
  %10 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.blink::InlineBox"* nonnull %6) #12
  br i1 %11, label %15, label %12

12:                                               ; preds = %5
  %13 = tail call %"class.blink::InlineBox"* @_ZNK5blink9InlineBox13NextLeafChildEv(%"class.blink::InlineBox"* nonnull %6) #12
  %14 = icmp eq %"class.blink::InlineBox"* %13, null
  br i1 %14, label %15, label %5

15:                                               ; preds = %5, %12, %1
  %16 = phi i1 [ false, %1 ], [ false, %12 ], [ true, %5 ]
  ret i1 %16
}

declare %"class.blink::InlineBox"* @_ZNK5blink13InlineFlowBox14FirstLeafChildEv(%"class.blink::InlineFlowBox"*) local_unnamed_addr #3

declare %"class.blink::InlineBox"* @_ZNK5blink9InlineBox13NextLeafChildEv(%"class.blink::InlineBox"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::InlineBox"* @_ZNK5blink13RootInlineBox16FirstSelectedBoxEv(%"class.blink::RootInlineBox"*) local_unnamed_addr #1 align 2 {
  %2 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %3 = tail call %"class.blink::InlineBox"* @_ZNK5blink13InlineFlowBox14FirstLeafChildEv(%"class.blink::InlineFlowBox"* %2) #12
  %4 = icmp eq %"class.blink::InlineBox"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1, %12
  %6 = phi %"class.blink::InlineBox"* [ %13, %12 ], [ %3, %1 ]
  %7 = bitcast %"class.blink::InlineBox"* %6 to i1 (%"class.blink::InlineBox"*)***
  %8 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %8, i64 30
  %10 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.blink::InlineBox"* nonnull %6) #12
  br i1 %11, label %15, label %12

12:                                               ; preds = %5
  %13 = tail call %"class.blink::InlineBox"* @_ZNK5blink9InlineBox13NextLeafChildEv(%"class.blink::InlineBox"* nonnull %6) #12
  %14 = icmp eq %"class.blink::InlineBox"* %13, null
  br i1 %14, label %15, label %5

15:                                               ; preds = %5, %12, %1
  %16 = phi %"class.blink::InlineBox"* [ null, %1 ], [ null, %12 ], [ %6, %5 ]
  ret %"class.blink::InlineBox"* %16
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::InlineBox"* @_ZNK5blink13RootInlineBox15LastSelectedBoxEv(%"class.blink::RootInlineBox"*) local_unnamed_addr #1 align 2 {
  %2 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %3 = tail call %"class.blink::InlineBox"* @_ZNK5blink13InlineFlowBox13LastLeafChildEv(%"class.blink::InlineFlowBox"* %2) #12
  %4 = icmp eq %"class.blink::InlineBox"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1, %12
  %6 = phi %"class.blink::InlineBox"* [ %13, %12 ], [ %3, %1 ]
  %7 = bitcast %"class.blink::InlineBox"* %6 to i1 (%"class.blink::InlineBox"*)***
  %8 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %8, i64 30
  %10 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %9, align 8
  %11 = tail call zeroext i1 %10(%"class.blink::InlineBox"* nonnull %6) #12
  br i1 %11, label %15, label %12

12:                                               ; preds = %5
  %13 = tail call %"class.blink::InlineBox"* @_ZNK5blink9InlineBox13PrevLeafChildEv(%"class.blink::InlineBox"* nonnull %6) #12
  %14 = icmp eq %"class.blink::InlineBox"* %13, null
  br i1 %14, label %15, label %5

15:                                               ; preds = %5, %12, %1
  %16 = phi %"class.blink::InlineBox"* [ null, %1 ], [ null, %12 ], [ %6, %5 ]
  ret %"class.blink::InlineBox"* %16
}

declare %"class.blink::InlineBox"* @_ZNK5blink13InlineFlowBox13LastLeafChildEv(%"class.blink::InlineFlowBox"*) local_unnamed_addr #3

declare %"class.blink::InlineBox"* @_ZNK5blink9InlineBox13PrevLeafChildEv(%"class.blink::InlineBox"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink13RootInlineBox12SelectionTopEv(%"class.blink::RootInlineBox"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 5, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %5 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %6 = load i32, i32* %5, align 8
  %7 = and i32 %6, 256
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %11 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %11, i64 0, i32 5, i32 0
  %13 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %13, i64 0, i32 0, i32 9
  %15 = bitcast [20 x i8]* %14 to i160*
  %16 = load i160, i160* %15, align 8
  %17 = and i160 %16, 15211807202738752817960438464512
  %18 = icmp eq i160 %17, 10141204801825835211973625643008
  br i1 %18, label %21, label %19

19:                                               ; preds = %9
  %20 = tail call i32 @_ZNK5blink13InlineFlowBox31ComputeOverAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* %4, i32 %3) #12
  br label %23

21:                                               ; preds = %9
  %22 = tail call i32 @_ZNK5blink13InlineFlowBox32ComputeUnderAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* %4, i32 %3) #12
  br label %23

23:                                               ; preds = %21, %19
  %24 = phi i32 [ %22, %21 ], [ %20, %19 ]
  %25 = icmp sgt i32 %24, -1
  %26 = select i1 %25, i32 -2147483648, i32 2147483647
  %27 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %3, i32 %24) #12
  %28 = extractvalue { i32, i1 } %27, 1
  %29 = extractvalue { i32, i1 } %27, 0
  %30 = select i1 %28, i32 %26, i32 %29, !prof !2
  br label %31

31:                                               ; preds = %1, %23
  %32 = phi i32 [ %3, %1 ], [ %30, %23 ]
  %33 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %34 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %33, align 8
  %35 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %34, i64 0, i32 5, i32 0
  %36 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %35, align 8
  %37 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %36, i64 0, i32 0, i32 9
  %38 = bitcast [20 x i8]* %37 to i160*
  %39 = load i160, i160* %38, align 8
  %40 = and i160 %39, 15211807202738752817960438464512
  %41 = icmp eq i160 %40, 10141204801825835211973625643008
  br i1 %41, label %51, label %42

42:                                               ; preds = %31
  %43 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 4
  %44 = bitcast %"class.blink::InlineFlowBox"** %43 to %"class.blink::RootInlineBox"**
  %45 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %44, align 8
  %46 = icmp eq %"class.blink::RootInlineBox"* %45, null
  br i1 %46, label %51, label %47

47:                                               ; preds = %42
  %48 = tail call i32 @_ZNK5blink13RootInlineBox15SelectionBottomEv(%"class.blink::RootInlineBox"* nonnull %45)
  %49 = icmp slt i32 %48, %32
  %50 = select i1 %49, i32 %48, i32 %32
  br label %51

51:                                               ; preds = %42, %31, %47
  %52 = phi i32 [ %50, %47 ], [ %32, %31 ], [ %32, %42 ]
  ret i32 %52
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink13RootInlineBox15SelectionBottomEv(%"class.blink::RootInlineBox"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %3 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %3, i64 0, i32 6, i32 0, i32 0
  %5 = load %"class.blink::Node"*, %"class.blink::Node"** %4, align 8
  %6 = icmp eq %"class.blink::Node"* %5, null
  br i1 %6, label %7, label %14

7:                                                ; preds = %1, %7
  %8 = phi %"class.blink::LayoutObject"* [ %10, %7 ], [ %3, %1 ]
  %9 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %8, i64 0, i32 7
  %10 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %10, i64 0, i32 6, i32 0, i32 0
  %12 = load %"class.blink::Node"*, %"class.blink::Node"** %11, align 8
  %13 = icmp eq %"class.blink::Node"* %12, null
  br i1 %13, label %7, label %14

14:                                               ; preds = %7, %1
  %15 = phi %"class.blink::Node"* [ %5, %1 ], [ %12, %7 ]
  %16 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %15, i64 0, i32 3, i32 0, i32 0
  %17 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %16, align 8
  %18 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %17, i64 0, i32 2, i32 0, i32 0
  %19 = load %"class.blink::Document"*, %"class.blink::Document"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %19, i64 0, i32 33
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 2
  %23 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 9
  %24 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 6
  %25 = select i1 %22, %"class.blink::LayoutUnit"* %23, %"class.blink::LayoutUnit"* %24
  %26 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %25, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %29 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %30 = load i32, i32* %29, align 8
  %31 = and i32 %30, 512
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %56, label %33

33:                                               ; preds = %14
  %34 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %3, i64 0, i32 5, i32 0
  %35 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %34, align 8
  %36 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %35, i64 0, i32 0, i32 9
  %37 = bitcast [20 x i8]* %36 to i160*
  %38 = load i160, i160* %37, align 8
  %39 = and i160 %38, 15211807202738752817960438464512
  %40 = icmp eq i160 %39, 10141204801825835211973625643008
  %41 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 6, i32 0
  %42 = load i32, i32* %41, align 4
  br i1 %40, label %45, label %43

43:                                               ; preds = %33
  %44 = tail call i32 @_ZNK5blink13InlineFlowBox32ComputeUnderAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* %28, i32 %42) #12
  br label %47

45:                                               ; preds = %33
  %46 = tail call i32 @_ZNK5blink13InlineFlowBox31ComputeOverAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* %28, i32 %42) #12
  br label %47

47:                                               ; preds = %45, %43
  %48 = phi i32 [ %46, %45 ], [ %44, %43 ]
  %49 = icmp slt i32 %48, 0
  %50 = select i1 %49, i32 -2147483648, i32 2147483647
  %51 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %27, i32 %48) #12
  %52 = extractvalue { i32, i1 } %51, 1
  %53 = extractvalue { i32, i1 } %51, 0
  %54 = select i1 %52, i32 %50, i32 %53, !prof !2
  %55 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %2, align 8
  br label %56

56:                                               ; preds = %14, %47
  %57 = phi i32 [ %27, %14 ], [ %54, %47 ]
  %58 = phi %"class.blink::LayoutObject"* [ %3, %14 ], [ %55, %47 ]
  %59 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %58, i64 0, i32 5, i32 0
  %60 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %59, align 8
  %61 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %60, i64 0, i32 0, i32 9
  %62 = bitcast [20 x i8]* %61 to i160*
  %63 = load i160, i160* %62, align 8
  %64 = and i160 %63, 15211807202738752817960438464512
  %65 = icmp eq i160 %64, 10141204801825835211973625643008
  br i1 %65, label %66, label %75

66:                                               ; preds = %56
  %67 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 5
  %68 = bitcast %"class.blink::InlineFlowBox"** %67 to %"class.blink::RootInlineBox"**
  %69 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %68, align 8
  %70 = icmp eq %"class.blink::RootInlineBox"* %69, null
  br i1 %70, label %75, label %71

71:                                               ; preds = %66
  %72 = tail call i32 @_ZNK5blink13RootInlineBox12SelectionTopEv(%"class.blink::RootInlineBox"* nonnull %69)
  %73 = icmp slt i32 %57, %72
  %74 = select i1 %73, i32 %72, i32 %57
  br label %75

75:                                               ; preds = %66, %56, %71
  %76 = phi i32 [ %74, %71 ], [ %57, %56 ], [ %57, %66 ]
  ret i32 %76
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink13RootInlineBox25BlockDirectionPointInLineEv(%"class.blink::RootInlineBox"*) local_unnamed_addr #1 align 2 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %7 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %6, align 8
  %8 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %7, i64 0, i32 5, i32 0
  %9 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %8, align 8
  %10 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %9, i64 0, i32 0, i32 9
  %11 = bitcast [20 x i8]* %10 to i160*
  %12 = load i160, i160* %11, align 8
  %13 = and i160 %12, 15211807202738752817960438464512
  %14 = icmp eq i160 %13, 5070602400912917605986812821504
  %15 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15)
  %16 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16)
  %17 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17)
  %18 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18)
  br i1 %14, label %65, label %19

19:                                               ; preds = %1
  %20 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 5, i32 0
  %21 = load i32, i32* %20, align 8
  store i32 %21, i32* %2, align 4
  %22 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %23 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %24 = load i32, i32* %23, align 8
  %25 = and i32 %24, 256
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %48, label %27

27:                                               ; preds = %19
  %28 = icmp eq i160 %13, 10141204801825835211973625643008
  br i1 %28, label %31, label %29

29:                                               ; preds = %27
  %30 = tail call i32 @_ZNK5blink13InlineFlowBox31ComputeOverAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* %22, i32 %21) #12
  br label %33

31:                                               ; preds = %27
  %32 = tail call i32 @_ZNK5blink13InlineFlowBox32ComputeUnderAnnotationAdjustmentENS_10LayoutUnitE(%"class.blink::InlineFlowBox"* %22, i32 %21) #12
  br label %33

33:                                               ; preds = %31, %29
  %34 = phi i32 [ %32, %31 ], [ %30, %29 ]
  %35 = icmp sgt i32 %34, -1
  %36 = select i1 %35, i32 -2147483648, i32 2147483647
  %37 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 %34) #12
  %38 = extractvalue { i32, i1 } %37, 1
  %39 = extractvalue { i32, i1 } %37, 0
  %40 = select i1 %38, i32 %36, i32 %39, !prof !2
  %41 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %6, align 8
  %42 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %41, i64 0, i32 5, i32 0
  %43 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %42, align 8
  %44 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %43, i64 0, i32 0, i32 9
  %45 = bitcast [20 x i8]* %44 to i160*
  %46 = load i160, i160* %45, align 8
  %47 = and i160 %46, 15211807202738752817960438464512
  br label %48

48:                                               ; preds = %33, %19
  %49 = phi i160 [ %47, %33 ], [ %13, %19 ]
  %50 = phi i32 [ %40, %33 ], [ %21, %19 ]
  %51 = icmp eq i160 %49, 10141204801825835211973625643008
  br i1 %51, label %61, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 4
  %54 = bitcast %"class.blink::InlineFlowBox"** %53 to %"class.blink::RootInlineBox"**
  %55 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %54, align 8
  %56 = icmp eq %"class.blink::RootInlineBox"* %55, null
  br i1 %56, label %61, label %57

57:                                               ; preds = %52
  %58 = tail call i32 @_ZNK5blink13RootInlineBox15SelectionBottomEv(%"class.blink::RootInlineBox"* nonnull %55) #12
  %59 = icmp slt i32 %58, %50
  %60 = select i1 %59, i32 %58, i32 %50
  br label %61

61:                                               ; preds = %48, %52, %57
  %62 = phi i32 [ %60, %57 ], [ %50, %48 ], [ %50, %52 ]
  store i32 %62, i32* %3, align 4
  %63 = icmp slt i32 %21, %62
  %64 = select i1 %63, i32* %3, i32* %2
  br label %71

65:                                               ; preds = %1
  %66 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 6, i32 0
  %67 = load i32, i32* %66, align 4
  store i32 %67, i32* %4, align 4
  %68 = tail call i32 @_ZNK5blink13RootInlineBox15SelectionBottomEv(%"class.blink::RootInlineBox"* %0)
  store i32 %68, i32* %5, align 4
  %69 = icmp slt i32 %68, %67
  %70 = select i1 %69, i32* %5, i32* %4
  br label %71

71:                                               ; preds = %65, %61
  %72 = phi i32* [ %64, %61 ], [ %70, %65 ]
  %73 = load i32, i32* %72, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15)
  ret i32 %73
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::LayoutObject"* @_ZNK5blink13RootInlineBox24ClosestLeafChildForPointERKNS_11LayoutPointEb(%"class.blink::RootInlineBox"*, %"class.blink::LayoutPoint"* nocapture readonly dereferenceable(8), i1 zeroext) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %5 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %5, i64 0, i32 4
  %7 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %6 to i96*
  %8 = load i96, i96* %7, align 4
  %9 = trunc i96 %8 to i32
  %10 = icmp slt i32 %9, 0
  %11 = getelementptr inbounds %"class.blink::LayoutPoint", %"class.blink::LayoutPoint"* %1, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.blink::LayoutPoint", %"class.blink::LayoutPoint"* %1, i64 0, i32 1, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = select i1 %10, i32 %12, i32 %14
  %16 = tail call %"class.blink::InlineBox"* @_ZNK5blink13RootInlineBox38ClosestLeafChildForLogicalLeftPositionENS_10LayoutUnitEb(%"class.blink::RootInlineBox"* %0, i32 %15, i1 zeroext %2)
  %17 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %16, i64 0, i32 4, i32 0
  %18 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %17, align 8
  ret %"class.blink::LayoutObject"* %18
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::InlineBox"* @_ZNK5blink13RootInlineBox38ClosestLeafChildForLogicalLeftPositionENS_10LayoutUnitEb(%"class.blink::RootInlineBox"*, i32, i1 zeroext) local_unnamed_addr #1 align 2 {
  %4 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %5 = tail call %"class.blink::InlineBox"* @_ZNK5blink13InlineFlowBox14FirstLeafChildEv(%"class.blink::InlineFlowBox"* %4) #12
  %6 = tail call %"class.blink::InlineBox"* @_ZNK5blink13InlineFlowBox13LastLeafChildEv(%"class.blink::InlineFlowBox"* %4) #12
  %7 = icmp eq %"class.blink::InlineBox"* %5, %6
  br i1 %7, label %28, label %8

8:                                                ; preds = %3
  %9 = bitcast %"class.blink::InlineBox"* %5 to i1 (%"class.blink::InlineBox"*)***
  %10 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %9, align 8
  %11 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %10, i64 9
  %12 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %11, align 8
  %13 = tail call zeroext i1 %12(%"class.blink::InlineBox"* %5) #12
  br i1 %13, label %14, label %16

14:                                               ; preds = %8
  %15 = tail call %"class.blink::InlineBox"* @_ZNK5blink9InlineBox30NextLeafChildIgnoringLineBreakEv(%"class.blink::InlineBox"* %5) #12
  br label %24

16:                                               ; preds = %8
  %17 = bitcast %"class.blink::InlineBox"* %6 to i1 (%"class.blink::InlineBox"*)***
  %18 = load i1 (%"class.blink::InlineBox"*)**, i1 (%"class.blink::InlineBox"*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %18, i64 9
  %20 = load i1 (%"class.blink::InlineBox"*)*, i1 (%"class.blink::InlineBox"*)** %19, align 8
  %21 = tail call zeroext i1 %20(%"class.blink::InlineBox"* %6) #12
  br i1 %21, label %22, label %24

22:                                               ; preds = %16
  %23 = tail call %"class.blink::InlineBox"* @_ZNK5blink9InlineBox30PrevLeafChildIgnoringLineBreakEv(%"class.blink::InlineBox"* %6) #12
  br label %24

24:                                               ; preds = %14, %22, %16
  %25 = phi %"class.blink::InlineBox"* [ %15, %14 ], [ %5, %22 ], [ %5, %16 ]
  %26 = phi %"class.blink::InlineBox"* [ %6, %14 ], [ %23, %22 ], [ %6, %16 ]
  %27 = icmp eq %"class.blink::InlineBox"* %25, %26
  br i1 %27, label %28, label %47

28:                                               ; preds = %3, %24
  %29 = phi %"class.blink::InlineBox"* [ %26, %24 ], [ %5, %3 ]
  %30 = phi %"class.blink::InlineBox"* [ %25, %24 ], [ %5, %3 ]
  br i1 %2, label %31, label %209

31:                                               ; preds = %28
  %32 = icmp eq %"class.blink::InlineBox"* %30, null
  br i1 %32, label %47, label %33

33:                                               ; preds = %31
  %34 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %30, i64 0, i32 4, i32 0
  %35 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %34, align 8
  %36 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %35, i64 0, i32 4
  %37 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %36 to i96*
  %38 = load i96, i96* %37, align 4
  %39 = and i96 %38, 16777216
  %40 = icmp eq i96 %39, 0
  br i1 %40, label %41, label %47

41:                                               ; preds = %33
  %42 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %35, i64 0, i32 6, i32 0, i32 0
  %43 = load %"class.blink::Node"*, %"class.blink::Node"** %42, align 8
  %44 = icmp eq %"class.blink::Node"* %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %41
  %46 = tail call zeroext i1 @_ZN5blink16HasEditableStyleERKNS_4NodeE(%"class.blink::Node"* nonnull dereferenceable(64) %43) #12
  br i1 %46, label %209, label %47

47:                                               ; preds = %33, %31, %41, %45, %24
  %48 = phi %"class.blink::InlineBox"* [ %29, %33 ], [ %29, %31 ], [ %29, %41 ], [ %29, %45 ], [ %26, %24 ]
  %49 = phi %"class.blink::InlineBox"* [ %30, %33 ], [ null, %31 ], [ %30, %41 ], [ %30, %45 ], [ %25, %24 ]
  %50 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %49, i64 0, i32 7, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = and i32 %51, 2048
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %49, i64 0, i32 5, i32 0, i32 0
  %55 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %49, i64 0, i32 5, i32 1, i32 0
  %56 = select i1 %53, i32* %55, i32* %54
  %57 = load i32, i32* %56, align 4
  %58 = icmp slt i32 %57, %1
  br i1 %58, label %93, label %59

59:                                               ; preds = %47
  %60 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %49, i64 0, i32 4, i32 0
  %61 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %60, align 8
  %62 = bitcast %"class.blink::LayoutObject"* %61 to i1 (%"class.blink::LayoutObject"*, i32)***
  %63 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %62, align 8
  %64 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %63, i64 92
  %65 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %64, align 8
  %66 = tail call zeroext i1 %65(%"class.blink::LayoutObject"* %61, i32 15) #12
  br i1 %66, label %93, label %67

67:                                               ; preds = %59
  %68 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %62, align 8
  %69 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %68, i64 92
  %70 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %69, align 8
  %71 = tail call zeroext i1 %70(%"class.blink::LayoutObject"* %61, i32 13) #12
  br i1 %71, label %93, label %72

72:                                               ; preds = %67
  %73 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %62, align 8
  %74 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %73, i64 92
  %75 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %74, align 8
  %76 = tail call zeroext i1 %75(%"class.blink::LayoutObject"* %61, i32 36) #12
  br i1 %76, label %93, label %77

77:                                               ; preds = %72
  br i1 %2, label %78, label %209

78:                                               ; preds = %77
  %79 = icmp eq %"class.blink::InlineBox"* %49, null
  br i1 %79, label %93, label %80

80:                                               ; preds = %78
  %81 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %60, align 8
  %82 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %81, i64 0, i32 4
  %83 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %82 to i96*
  %84 = load i96, i96* %83, align 4
  %85 = and i96 %84, 16777216
  %86 = icmp eq i96 %85, 0
  br i1 %86, label %87, label %93

87:                                               ; preds = %80
  %88 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %81, i64 0, i32 6, i32 0, i32 0
  %89 = load %"class.blink::Node"*, %"class.blink::Node"** %88, align 8
  %90 = icmp eq %"class.blink::Node"* %89, null
  br i1 %90, label %93, label %91

91:                                               ; preds = %87
  %92 = tail call zeroext i1 @_ZN5blink16HasEditableStyleERKNS_4NodeE(%"class.blink::Node"* nonnull dereferenceable(64) %89) #12
  br i1 %92, label %209, label %93

93:                                               ; preds = %47, %80, %78, %87, %59, %67, %72, %91
  %94 = phi %"class.blink::InlineBox"* [ %49, %47 ], [ %49, %80 ], [ null, %78 ], [ %49, %87 ], [ %49, %59 ], [ %49, %67 ], [ %49, %72 ], [ %49, %91 ]
  %95 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %48, i64 0, i32 7, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = and i32 %96, 2048
  %98 = icmp eq i32 %97, 0
  %99 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %48, i64 0, i32 5, i32 0, i32 0
  %100 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %48, i64 0, i32 5, i32 1, i32 0
  %101 = select i1 %98, i32* %100, i32* %99
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %48, i64 0, i32 6, i32 0
  %104 = load i32, i32* %103, align 8
  %105 = icmp slt i32 %104, 0
  %106 = select i1 %105, i32 -2147483648, i32 2147483647
  %107 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %102, i32 %104) #12
  %108 = extractvalue { i32, i1 } %107, 1
  %109 = extractvalue { i32, i1 } %107, 0
  %110 = select i1 %108, i32 %106, i32 %109, !prof !2
  %111 = icmp sgt i32 %110, %1
  br i1 %111, label %146, label %112

112:                                              ; preds = %93
  %113 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %48, i64 0, i32 4, i32 0
  %114 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %113, align 8
  %115 = bitcast %"class.blink::LayoutObject"* %114 to i1 (%"class.blink::LayoutObject"*, i32)***
  %116 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %115, align 8
  %117 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %116, i64 92
  %118 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %117, align 8
  %119 = tail call zeroext i1 %118(%"class.blink::LayoutObject"* %114, i32 15) #12
  br i1 %119, label %146, label %120

120:                                              ; preds = %112
  %121 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %115, align 8
  %122 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %121, i64 92
  %123 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %122, align 8
  %124 = tail call zeroext i1 %123(%"class.blink::LayoutObject"* %114, i32 13) #12
  br i1 %124, label %146, label %125

125:                                              ; preds = %120
  %126 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %115, align 8
  %127 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %126, i64 92
  %128 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %127, align 8
  %129 = tail call zeroext i1 %128(%"class.blink::LayoutObject"* %114, i32 36) #12
  br i1 %129, label %146, label %130

130:                                              ; preds = %125
  br i1 %2, label %131, label %209

131:                                              ; preds = %130
  %132 = icmp eq %"class.blink::InlineBox"* %48, null
  br i1 %132, label %146, label %133

133:                                              ; preds = %131
  %134 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %113, align 8
  %135 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %134, i64 0, i32 4
  %136 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %135 to i96*
  %137 = load i96, i96* %136, align 4
  %138 = and i96 %137, 16777216
  %139 = icmp eq i96 %138, 0
  br i1 %139, label %140, label %146

140:                                              ; preds = %133
  %141 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %134, i64 0, i32 6, i32 0, i32 0
  %142 = load %"class.blink::Node"*, %"class.blink::Node"** %141, align 8
  %143 = icmp eq %"class.blink::Node"* %142, null
  br i1 %143, label %146, label %144

144:                                              ; preds = %140
  %145 = tail call zeroext i1 @_ZN5blink16HasEditableStyleERKNS_4NodeE(%"class.blink::Node"* nonnull dereferenceable(64) %142) #12
  br i1 %145, label %209, label %146

146:                                              ; preds = %93, %133, %131, %140, %112, %120, %125, %144
  %147 = phi %"class.blink::InlineBox"* [ %48, %93 ], [ %48, %133 ], [ null, %131 ], [ %48, %140 ], [ %48, %112 ], [ %48, %120 ], [ %48, %125 ], [ %48, %144 ]
  %148 = icmp eq %"class.blink::InlineBox"* %94, null
  br i1 %148, label %205, label %149

149:                                              ; preds = %146, %201
  %150 = phi %"class.blink::InlineBox"* [ %203, %201 ], [ %94, %146 ]
  %151 = phi %"class.blink::InlineBox"* [ %202, %201 ], [ null, %146 ]
  %152 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %150, i64 0, i32 4, i32 0
  %153 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %152, align 8
  %154 = bitcast %"class.blink::LayoutObject"* %153 to i1 (%"class.blink::LayoutObject"*, i32)***
  %155 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %154, align 8
  %156 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %155, i64 92
  %157 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %156, align 8
  %158 = tail call zeroext i1 %157(%"class.blink::LayoutObject"* %153, i32 15) #12
  br i1 %158, label %201, label %159

159:                                              ; preds = %149
  %160 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %154, align 8
  %161 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %160, i64 92
  %162 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %161, align 8
  %163 = tail call zeroext i1 %162(%"class.blink::LayoutObject"* %153, i32 13) #12
  br i1 %163, label %201, label %164

164:                                              ; preds = %159
  %165 = load i1 (%"class.blink::LayoutObject"*, i32)**, i1 (%"class.blink::LayoutObject"*, i32)*** %154, align 8
  %166 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %165, i64 92
  %167 = load i1 (%"class.blink::LayoutObject"*, i32)*, i1 (%"class.blink::LayoutObject"*, i32)** %166, align 8
  %168 = tail call zeroext i1 %167(%"class.blink::LayoutObject"* %153, i32 36) #12
  br i1 %168, label %201, label %169

169:                                              ; preds = %164
  br i1 %2, label %170, label %183

170:                                              ; preds = %169
  %171 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %152, align 8
  %172 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %171, i64 0, i32 4
  %173 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %172 to i96*
  %174 = load i96, i96* %173, align 4
  %175 = and i96 %174, 16777216
  %176 = icmp eq i96 %175, 0
  br i1 %176, label %177, label %201

177:                                              ; preds = %170
  %178 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %171, i64 0, i32 6, i32 0, i32 0
  %179 = load %"class.blink::Node"*, %"class.blink::Node"** %178, align 8
  %180 = icmp eq %"class.blink::Node"* %179, null
  br i1 %180, label %201, label %181

181:                                              ; preds = %177
  %182 = tail call zeroext i1 @_ZN5blink16HasEditableStyleERKNS_4NodeE(%"class.blink::Node"* nonnull dereferenceable(64) %179) #12
  br i1 %182, label %183, label %201

183:                                              ; preds = %169, %181
  %184 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %150, i64 0, i32 7, i32 0
  %185 = load i32, i32* %184, align 4
  %186 = and i32 %185, 2048
  %187 = icmp eq i32 %186, 0
  %188 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %150, i64 0, i32 5, i32 0, i32 0
  %189 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %150, i64 0, i32 5, i32 1, i32 0
  %190 = select i1 %187, i32* %189, i32* %188
  %191 = load i32, i32* %190, align 4
  %192 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %150, i64 0, i32 6, i32 0
  %193 = load i32, i32* %192, align 8
  %194 = icmp slt i32 %193, 0
  %195 = select i1 %194, i32 -2147483648, i32 2147483647
  %196 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %191, i32 %193) #12
  %197 = extractvalue { i32, i1 } %196, 1
  %198 = extractvalue { i32, i1 } %196, 0
  %199 = select i1 %197, i32 %195, i32 %198, !prof !2
  %200 = icmp sgt i32 %199, %1
  br i1 %200, label %209, label %201

201:                                              ; preds = %170, %177, %149, %159, %164, %181, %183
  %202 = phi %"class.blink::InlineBox"* [ %150, %183 ], [ %151, %181 ], [ %151, %164 ], [ %151, %159 ], [ %151, %149 ], [ %151, %177 ], [ %151, %170 ]
  %203 = tail call %"class.blink::InlineBox"* @_ZNK5blink9InlineBox30NextLeafChildIgnoringLineBreakEv(%"class.blink::InlineBox"* nonnull %150) #12
  %204 = icmp eq %"class.blink::InlineBox"* %203, null
  br i1 %204, label %205, label %149

205:                                              ; preds = %201, %146
  %206 = phi %"class.blink::InlineBox"* [ null, %146 ], [ %202, %201 ]
  %207 = icmp eq %"class.blink::InlineBox"* %206, null
  %208 = select i1 %207, %"class.blink::InlineBox"* %147, %"class.blink::InlineBox"* %206
  br label %209

209:                                              ; preds = %183, %205, %130, %77, %144, %91, %28, %45
  %210 = phi %"class.blink::InlineBox"* [ %30, %45 ], [ %30, %28 ], [ %49, %91 ], [ %48, %144 ], [ %49, %77 ], [ %48, %130 ], [ %208, %205 ], [ %150, %183 ]
  ret %"class.blink::InlineBox"* %210
}

declare %"class.blink::InlineBox"* @_ZNK5blink9InlineBox30NextLeafChildIgnoringLineBreakEv(%"class.blink::InlineBox"*) local_unnamed_addr #3

declare %"class.blink::InlineBox"* @_ZNK5blink9InlineBox30PrevLeafChildIgnoringLineBreakEv(%"class.blink::InlineBox"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink13RootInlineBox19LineBreakBidiStatusEv(%"struct.blink::BidiStatus"* noalias nocapture sret, %"class.blink::RootInlineBox"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %1, i64 0, i32 0, i32 6
  %5 = load i32, i32* %4, align 8
  %6 = lshr i32 %5, 10
  %7 = and i32 %6, 31
  %8 = lshr i32 %5, 15
  %9 = and i32 %8, 31
  %10 = lshr i32 %5, 20
  %11 = and i32 %10, 31
  %12 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %1, i64 0, i32 3, i32 0
  %13 = load %"class.blink::BidiContext"*, %"class.blink::BidiContext"** %12, align 8
  %14 = icmp eq %"class.blink::BidiContext"* %13, null
  br i1 %14, label %22, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.blink::BidiContext", %"class.blink::BidiContext"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw add i32* %16, i32 1 monotonic
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0)) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %2, %15, %19
  %23 = ptrtoint %"class.blink::BidiContext"* %13 to i64
  %24 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %0, i64 0, i32 0
  store i32 %7, i32* %24, align 8
  %25 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %0, i64 0, i32 1
  store i32 %9, i32* %25, align 4
  %26 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %0, i64 0, i32 2
  store i32 %11, i32* %26, align 8
  %27 = getelementptr inbounds %"struct.blink::BidiStatus", %"struct.blink::BidiStatus"* %0, i64 0, i32 3
  %28 = bitcast %class.scoped_refptr.1631* %27 to i64*
  store i64 %23, i64* %28, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13RootInlineBox29RemoveLineBoxFromLayoutObjectEv(%"class.blink::RootInlineBox"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %3 = bitcast %"class.blink::LayoutObject"** %2 to %"class.blink::LayoutBlockFlow"**
  %4 = load %"class.blink::LayoutBlockFlow"*, %"class.blink::LayoutBlockFlow"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::LayoutBlockFlow", %"class.blink::LayoutBlockFlow"* %4, i64 0, i32 1, i32 0
  %6 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  tail call void @_ZN5blink13InlineBoxListINS_13InlineFlowBoxEE13RemoveLineBoxEPS1_(%"class.blink::InlineBoxList"* %5, %"class.blink::InlineFlowBox"* %6) #12
  ret void
}

declare void @_ZN5blink13InlineBoxListINS_13InlineFlowBoxEE13RemoveLineBoxEPS1_(%"class.blink::InlineBoxList"*, %"class.blink::InlineFlowBox"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13RootInlineBox30ExtractLineBoxFromLayoutObjectEv(%"class.blink::RootInlineBox"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %3 = bitcast %"class.blink::LayoutObject"** %2 to %"class.blink::LayoutBlockFlow"**
  %4 = load %"class.blink::LayoutBlockFlow"*, %"class.blink::LayoutBlockFlow"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::LayoutBlockFlow", %"class.blink::LayoutBlockFlow"* %4, i64 0, i32 1, i32 0
  %6 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  tail call void @_ZN5blink13InlineBoxListINS_13InlineFlowBoxEE14ExtractLineBoxEPS1_(%"class.blink::InlineBoxList"* %5, %"class.blink::InlineFlowBox"* %6) #12
  ret void
}

declare void @_ZN5blink13InlineBoxListINS_13InlineFlowBoxEE14ExtractLineBoxEPS1_(%"class.blink::InlineBoxList"*, %"class.blink::InlineFlowBox"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13RootInlineBox27AttachLineBoxToLayoutObjectEv(%"class.blink::RootInlineBox"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %3 = bitcast %"class.blink::LayoutObject"** %2 to %"class.blink::LayoutBlockFlow"**
  %4 = load %"class.blink::LayoutBlockFlow"*, %"class.blink::LayoutBlockFlow"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::LayoutBlockFlow", %"class.blink::LayoutBlockFlow"* %4, i64 0, i32 1, i32 0
  %6 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  tail call void @_ZN5blink13InlineBoxListINS_13InlineFlowBoxEE13AttachLineBoxEPS1_(%"class.blink::InlineBoxList"* %5, %"class.blink::InlineFlowBox"* %6) #12
  ret void
}

declare void @_ZN5blink13InlineBoxListINS_13InlineFlowBoxEE13AttachLineBoxEPS1_(%"class.blink::InlineBoxList"*, %"class.blink::InlineFlowBox"*) local_unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK5blink13RootInlineBox24PaddedLayoutOverflowRectENS_10LayoutUnitE(%"class.blink::RootInlineBox"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 5, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 6, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %8 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %7, align 8
  %9 = icmp eq %"struct.blink::SimpleOverflowModel"* %8, null
  br i1 %9, label %21, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i8, i8* %11, align 4, !range !3
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %16 = bitcast %"class.blink::LayoutRect"* %15 to i64*
  %17 = load i64, i64* %16, align 4
  %18 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %19 = bitcast %"class.blink::LayoutSize"* %18 to i64*
  %20 = load i64, i64* %19, align 4
  br label %61

21:                                               ; preds = %10, %2
  %22 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = and i32 %23, 2048
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %37, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 6, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = icmp sgt i32 %4, -1
  %32 = select i1 %31, i32 -2147483648, i32 2147483647
  %33 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %6, i32 %4) #12
  %34 = extractvalue { i32, i1 } %33, 1
  %35 = extractvalue { i32, i1 } %33, 0
  %36 = select i1 %34, i32 %32, i32 %35, !prof !2
  br label %48

37:                                               ; preds = %21
  %38 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 5, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = icmp sgt i32 %4, -1
  %41 = select i1 %40, i32 -2147483648, i32 2147483647
  %42 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %6, i32 %4) #12
  %43 = extractvalue { i32, i1 } %42, 1
  %44 = extractvalue { i32, i1 } %42, 0
  %45 = select i1 %43, i32 %41, i32 %44, !prof !2
  %46 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 6, i32 0
  %47 = load i32, i32* %46, align 8
  br label %48

48:                                               ; preds = %37, %26
  %49 = phi i32 [ %4, %26 ], [ %39, %37 ]
  %50 = phi i32 [ %28, %26 ], [ %4, %37 ]
  %51 = phi i32 [ %30, %26 ], [ %45, %37 ]
  %52 = phi i32 [ %36, %26 ], [ %47, %37 ]
  %53 = zext i32 %49 to i64
  %54 = shl nuw i64 %53, 32
  %55 = zext i32 %50 to i64
  %56 = or i64 %54, %55
  %57 = zext i32 %52 to i64
  %58 = shl nuw i64 %57, 32
  %59 = zext i32 %51 to i64
  %60 = or i64 %58, %59
  br label %61

61:                                               ; preds = %14, %48
  %62 = phi i64 [ %17, %14 ], [ %56, %48 ]
  %63 = phi i64 [ %20, %14 ], [ %60, %48 ]
  %64 = trunc i64 %62 to i32
  %65 = lshr i64 %62, 32
  %66 = trunc i64 %65 to i32
  %67 = trunc i64 %63 to i32
  %68 = lshr i64 %63, 32
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %1, 0
  br i1 %70, label %208, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %73 = load i32, i32* %72, align 4
  %74 = and i32 %73, 2048
  %75 = icmp eq i32 %74, 0
  %76 = and i32 %73, 4
  %77 = icmp eq i32 %76, 0
  br i1 %75, label %143, label %78

78:                                               ; preds = %71
  br i1 %77, label %79, label %118

79:                                               ; preds = %78
  %80 = icmp slt i32 %67, 0
  %81 = select i1 %80, i32 -2147483648, i32 2147483647
  %82 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %64, i32 %67) #12
  %83 = extractvalue { i32, i1 } %82, 1
  %84 = extractvalue { i32, i1 } %82, 0
  %85 = select i1 %83, i32 %81, i32 %84
  %86 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 6, i32 0
  %89 = load i32, i32* %88, align 8
  %90 = icmp slt i32 %89, 0
  %91 = select i1 %90, i32 -2147483648, i32 2147483647
  %92 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %87, i32 %89) #12
  %93 = extractvalue { i32, i1 } %92, 1
  %94 = extractvalue { i32, i1 } %92, 0
  %95 = select i1 %93, i32 %91, i32 %94, !prof !2
  %96 = icmp slt i32 %1, 0
  %97 = select i1 %96, i32 -2147483648, i32 2147483647
  %98 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %95, i32 %1) #12
  %99 = extractvalue { i32, i1 } %98, 1
  %100 = extractvalue { i32, i1 } %98, 0
  %101 = select i1 %99, i32 %97, i32 %100, !prof !2
  %102 = icmp slt i32 %85, %101
  %103 = select i1 %102, i32 %101, i32 %85
  %104 = icmp sgt i32 %85, -1
  %105 = select i1 %104, i32 -2147483648, i32 2147483647
  %106 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %103, i32 %85) #12
  %107 = extractvalue { i32, i1 } %106, 1
  %108 = extractvalue { i32, i1 } %106, 0
  %109 = select i1 %107, i32 %105, i32 %108, !prof !2
  %110 = icmp slt i32 %109, 0
  %111 = select i1 %110, i32 -2147483648, i32 2147483647
  %112 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %67, i32 %109) #12
  %113 = extractvalue { i32, i1 } %112, 1
  %114 = extractvalue { i32, i1 } %112, 0
  %115 = select i1 %113, i32 %111, i32 %114, !prof !2
  %116 = icmp sgt i32 %115, 0
  %117 = select i1 %116, i32 %115, i32 0
  br label %208

118:                                              ; preds = %78
  %119 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0
  %120 = load i32, i32* %119, align 4
  %121 = icmp sgt i32 %1, -1
  %122 = select i1 %121, i32 -2147483648, i32 2147483647
  %123 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %120, i32 %1) #12
  %124 = extractvalue { i32, i1 } %123, 1
  %125 = extractvalue { i32, i1 } %123, 0
  %126 = select i1 %124, i32 %122, i32 %125, !prof !2
  %127 = icmp slt i32 %126, %64
  %128 = select i1 %127, i32 %126, i32 %64
  %129 = icmp sgt i32 %64, -1
  %130 = select i1 %129, i32 -2147483648, i32 2147483647
  %131 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %128, i32 %64) #12
  %132 = extractvalue { i32, i1 } %131, 1
  %133 = extractvalue { i32, i1 } %131, 0
  %134 = select i1 %132, i32 %130, i32 %133, !prof !2
  %135 = icmp sgt i32 %134, -1
  %136 = select i1 %135, i32 -2147483648, i32 2147483647
  %137 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %67, i32 %134) #12
  %138 = extractvalue { i32, i1 } %137, 1
  %139 = extractvalue { i32, i1 } %137, 0
  %140 = select i1 %138, i32 %136, i32 %139, !prof !2
  %141 = icmp sgt i32 %140, 0
  %142 = select i1 %141, i32 %140, i32 0
  br label %208

143:                                              ; preds = %71
  br i1 %77, label %144, label %183

144:                                              ; preds = %143
  %145 = icmp slt i32 %69, 0
  %146 = select i1 %145, i32 -2147483648, i32 2147483647
  %147 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %66, i32 %69) #12
  %148 = extractvalue { i32, i1 } %147, 1
  %149 = extractvalue { i32, i1 } %147, 0
  %150 = select i1 %148, i32 %146, i32 %149
  %151 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 5, i32 1, i32 0
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 6, i32 0
  %154 = load i32, i32* %153, align 8
  %155 = icmp slt i32 %154, 0
  %156 = select i1 %155, i32 -2147483648, i32 2147483647
  %157 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %152, i32 %154) #12
  %158 = extractvalue { i32, i1 } %157, 1
  %159 = extractvalue { i32, i1 } %157, 0
  %160 = select i1 %158, i32 %156, i32 %159, !prof !2
  %161 = icmp slt i32 %1, 0
  %162 = select i1 %161, i32 -2147483648, i32 2147483647
  %163 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %160, i32 %1) #12
  %164 = extractvalue { i32, i1 } %163, 1
  %165 = extractvalue { i32, i1 } %163, 0
  %166 = select i1 %164, i32 %162, i32 %165, !prof !2
  %167 = icmp slt i32 %150, %166
  %168 = select i1 %167, i32 %166, i32 %150
  %169 = icmp sgt i32 %150, -1
  %170 = select i1 %169, i32 -2147483648, i32 2147483647
  %171 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %168, i32 %150) #12
  %172 = extractvalue { i32, i1 } %171, 1
  %173 = extractvalue { i32, i1 } %171, 0
  %174 = select i1 %172, i32 %170, i32 %173, !prof !2
  %175 = icmp slt i32 %174, 0
  %176 = select i1 %175, i32 -2147483648, i32 2147483647
  %177 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %69, i32 %174) #12
  %178 = extractvalue { i32, i1 } %177, 1
  %179 = extractvalue { i32, i1 } %177, 0
  %180 = select i1 %178, i32 %176, i32 %179, !prof !2
  %181 = icmp sgt i32 %180, 0
  %182 = select i1 %181, i32 %180, i32 0
  br label %208

183:                                              ; preds = %143
  %184 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 5, i32 1, i32 0
  %185 = load i32, i32* %184, align 4
  %186 = icmp sgt i32 %1, -1
  %187 = select i1 %186, i32 -2147483648, i32 2147483647
  %188 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %185, i32 %1) #12
  %189 = extractvalue { i32, i1 } %188, 1
  %190 = extractvalue { i32, i1 } %188, 0
  %191 = select i1 %189, i32 %187, i32 %190, !prof !2
  %192 = icmp slt i32 %191, %66
  %193 = select i1 %192, i32 %191, i32 %66
  %194 = icmp sgt i32 %66, -1
  %195 = select i1 %194, i32 -2147483648, i32 2147483647
  %196 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %193, i32 %66) #12
  %197 = extractvalue { i32, i1 } %196, 1
  %198 = extractvalue { i32, i1 } %196, 0
  %199 = select i1 %197, i32 %195, i32 %198, !prof !2
  %200 = icmp sgt i32 %199, -1
  %201 = select i1 %200, i32 -2147483648, i32 2147483647
  %202 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %69, i32 %199) #12
  %203 = extractvalue { i32, i1 } %202, 1
  %204 = extractvalue { i32, i1 } %202, 0
  %205 = select i1 %203, i32 %201, i32 %204, !prof !2
  %206 = icmp sgt i32 %205, 0
  %207 = select i1 %206, i32 %205, i32 0
  br label %208

208:                                              ; preds = %61, %118, %79, %183, %144
  %209 = phi i32 [ %64, %79 ], [ %128, %118 ], [ %64, %144 ], [ %64, %183 ], [ %64, %61 ]
  %210 = phi i32 [ %66, %79 ], [ %66, %118 ], [ %66, %144 ], [ %193, %183 ], [ %66, %61 ]
  %211 = phi i32 [ %117, %79 ], [ %142, %118 ], [ %67, %144 ], [ %67, %183 ], [ %67, %61 ]
  %212 = phi i32 [ %69, %79 ], [ %69, %118 ], [ %182, %144 ], [ %207, %183 ], [ %69, %61 ]
  %213 = zext i32 %210 to i64
  %214 = shl nuw i64 %213, 32
  %215 = zext i32 %209 to i64
  %216 = or i64 %214, %215
  %217 = insertvalue { i64, i64 } undef, i64 %216, 0
  %218 = zext i32 %212 to i64
  %219 = shl nuw i64 %218, 32
  %220 = zext i32 %211 to i64
  %221 = or i64 %219, %220
  %222 = insertvalue { i64, i64 } %217, i64 %221, 1
  ret { i64, i64 } %222
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink13RootInlineBox22AscentAndDescentForBoxEPNS_9InlineBoxERN3WTF7HashMapIPKNS_13InlineTextBoxENSt3__14pairINS3_6VectorIPKNS_14SimpleFontDataELj0ENS3_18PartitionAllocatorEEENS_13GlyphOverflowEEENS3_7PtrHashIS6_EENS3_10HashTraitsIS7_EENSK_ISH_EESE_EERNS_10LayoutUnitESQ_RbSR_(%"class.blink::RootInlineBox"* nocapture readonly, %"class.blink::InlineBox"*, %"class.WTF::HashMap.1902"* dereferenceable(24), %"class.blink::LayoutUnit"* nocapture dereferenceable(4), %"class.blink::LayoutUnit"* nocapture dereferenceable(4), i8* nocapture dereferenceable(1), i8* nocapture dereferenceable(1)) local_unnamed_addr #1 align 2 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %"class.blink::InlineTextBox"*, align 8
  %13 = alloca %"class.blink::Length", align 4
  %14 = alloca %"class.blink::LineLayoutItem", align 8
  %15 = alloca %"class.blink::SimpleFontData"*, align 8
  %16 = alloca %"class.blink::LineLayoutItem", align 8
  %17 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 4, i32 0
  %18 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %17, align 8
  %19 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %18, i64 0, i32 4
  %20 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %19 to i96*
  %21 = load i96, i96* %20, align 4
  %22 = and i96 %21, 1073741824
  %23 = icmp eq i96 %22, 0
  br i1 %23, label %48, label %24

24:                                               ; preds = %7
  %25 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %26 = load i32, i32* %25, align 8
  %27 = lshr i32 %26, 5
  %28 = and i32 %27, 7
  %29 = bitcast %"class.blink::InlineBox"* %1 to i32 (%"class.blink::InlineBox"*, i32)***
  %30 = load i32 (%"class.blink::InlineBox"*, i32)**, i32 (%"class.blink::InlineBox"*, i32)*** %29, align 8
  %31 = getelementptr inbounds i32 (%"class.blink::InlineBox"*, i32)*, i32 (%"class.blink::InlineBox"*, i32)** %30, i64 23
  %32 = load i32 (%"class.blink::InlineBox"*, i32)*, i32 (%"class.blink::InlineBox"*, i32)** %31, align 8
  %33 = tail call i32 %32(%"class.blink::InlineBox"* %1, i32 %28) #12
  %34 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %3, i64 0, i32 0
  store i32 %33, i32* %34, align 4
  %35 = bitcast %"class.blink::InlineBox"* %1 to i32 (%"class.blink::InlineBox"*)***
  %36 = load i32 (%"class.blink::InlineBox"*)**, i32 (%"class.blink::InlineBox"*)*** %35, align 8
  %37 = getelementptr inbounds i32 (%"class.blink::InlineBox"*)*, i32 (%"class.blink::InlineBox"*)** %36, i64 24
  %38 = load i32 (%"class.blink::InlineBox"*)*, i32 (%"class.blink::InlineBox"*)** %37, align 8
  %39 = tail call i32 %38(%"class.blink::InlineBox"* %1) #12
  %40 = load i32, i32* %34, align 4
  %41 = icmp sgt i32 %40, -1
  %42 = select i1 %41, i32 -2147483648, i32 2147483647
  %43 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %39, i32 %40) #12
  %44 = extractvalue { i32, i1 } %43, 1
  %45 = extractvalue { i32, i1 } %43, 0
  %46 = select i1 %44, i32 %42, i32 %45, !prof !2
  %47 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %4, i64 0, i32 0
  store i32 %46, i32* %47, align 4
  store i8 1, i8* %5, align 1
  br label %385

48:                                               ; preds = %7
  %49 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 7, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = and i32 %50, 131072
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %72, label %53

53:                                               ; preds = %48
  %54 = bitcast %"class.blink::InlineTextBox"** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %54) #12
  %55 = bitcast %"class.blink::InlineTextBox"** %12 to %"class.blink::InlineBox"**
  store %"class.blink::InlineBox"* %1, %"class.blink::InlineBox"** %55, align 8
  %56 = getelementptr inbounds %"class.WTF::HashMap.1902", %"class.WTF::HashMap.1902"* %2, i64 0, i32 0
  %57 = call { %"struct.WTF::KeyValuePair.1906"*, %"struct.WTF::KeyValuePair.1906"* } @_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E4findERKS4_(%"class.WTF::HashTable.1903"* %56, %"class.blink::InlineTextBox"** nonnull dereferenceable(8) %12) #12
  %58 = extractvalue { %"struct.WTF::KeyValuePair.1906"*, %"struct.WTF::KeyValuePair.1906"* } %57, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %54) #12
  %59 = getelementptr inbounds %"class.WTF::HashMap.1902", %"class.WTF::HashMap.1902"* %2, i64 0, i32 0, i32 0
  %60 = load %"struct.WTF::KeyValuePair.1906"*, %"struct.WTF::KeyValuePair.1906"** %59, align 8
  %61 = getelementptr inbounds %"class.WTF::HashMap.1902", %"class.WTF::HashMap.1902"* %2, i64 0, i32 0, i32 1
  %62 = load i32, i32* %61, align 8
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.1906", %"struct.WTF::KeyValuePair.1906"* %60, i64 %63
  %65 = icmp eq %"struct.WTF::KeyValuePair.1906"* %58, %64
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair.1906", %"struct.WTF::KeyValuePair.1906"* %58, i64 0, i32 1, i32 0
  %67 = select i1 %65, %"class.WTF::Vector.1908"* null, %"class.WTF::Vector.1908"* %66
  %68 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %17, align 8
  %69 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %68, i64 0, i32 4
  %70 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %69 to i96*
  %71 = load i96, i96* %70, align 4
  br label %72

72:                                               ; preds = %48, %53
  %73 = phi i96 [ %21, %48 ], [ %71, %53 ]
  %74 = phi %"class.blink::LayoutObject"* [ %18, %48 ], [ %68, %53 ]
  %75 = phi %"class.WTF::Vector.1908"* [ null, %48 ], [ %67, %53 ]
  %76 = and i96 %73, 1073741824
  %77 = icmp eq i96 %76, 0
  br i1 %77, label %78, label %85

78:                                               ; preds = %72
  %79 = and i96 %73, 33554432
  %80 = icmp eq i96 %79, 0
  br i1 %80, label %85, label %81

81:                                               ; preds = %78
  %82 = load i32, i32* %49, align 4
  %83 = and i32 %82, 131072
  %84 = icmp ne i32 %83, 0
  br label %85

85:                                               ; preds = %72, %78, %81
  %86 = phi i1 [ false, %72 ], [ true, %78 ], [ %84, %81 ]
  %87 = icmp eq %"class.WTF::Vector.1908"* %75, null
  %88 = bitcast %"class.blink::LineLayoutItem"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %88) #12
  br i1 %87, label %305, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"class.WTF::Vector.1908", %"class.WTF::Vector.1908"* %75, i64 0, i32 0, i32 0, i32 2
  %91 = load i32, i32* %90, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %305, label %93

93:                                               ; preds = %89
  %94 = bitcast %"class.blink::Length"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #12
  %95 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %14, i64 0, i32 0
  store %"class.blink::LayoutObject"* %74, %"class.blink::LayoutObject"** %95, align 8
  %96 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = and i32 %97, 1
  %99 = icmp ne i32 %98, 0
  %100 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %14, i1 zeroext %99)
  call void @_ZNK5blink13ComputedStyle10LineHeightEv(%"class.blink::Length"* nonnull sret %13, %"class.blink::ComputedStyle"* %100) #12
  %101 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %13, i64 0, i32 2
  %102 = load i8, i8* %101, align 1
  switch i8 %102, label %105 [
    i8 8, label %103
    i8 12, label %104
  ]

103:                                              ; preds = %93
  call void @_ZNK5blink6Length22DecrementCalculatedRefEv(%"class.blink::Length"* nonnull %13) #12
  br label %104

104:                                              ; preds = %93, %103
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %88) #12
  br label %305

105:                                              ; preds = %93
  %106 = getelementptr inbounds %"class.blink::Length", %"class.blink::Length"* %13, i64 0, i32 3
  %107 = load i8, i8* %106, align 2, !range !3
  %108 = icmp eq i8 %107, 0
  %109 = bitcast %"class.blink::Length"* %13 to float*
  %110 = load float, float* %109, align 4
  %111 = bitcast float %110 to i32
  %112 = sitofp i32 %111 to float
  %113 = select i1 %108, float %112, float %110
  %114 = fcmp olt float %113, 0.000000e+00
  %115 = and i1 %86, %114
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %88) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #12
  br i1 %115, label %116, label %309

116:                                              ; preds = %105
  %117 = bitcast %"class.blink::SimpleFontData"** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %117) #12
  store %"class.blink::SimpleFontData"* inttoptr (i64 -6148914691236517206 to %"class.blink::SimpleFontData"*), %"class.blink::SimpleFontData"** %15, align 8
  %118 = bitcast %"class.blink::LineLayoutItem"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %118) #12
  %119 = bitcast %"class.blink::LayoutObject"** %17 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = bitcast %"class.blink::LineLayoutItem"* %16 to i64*
  store i64 %120, i64* %121, align 8
  %122 = load i32, i32* %96, align 4
  %123 = and i32 %122, 1
  %124 = icmp ne i32 %123, 0
  %125 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %16, i1 zeroext %124)
  %126 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %125, i64 0, i32 0, i32 0, i32 0, i32 0
  %127 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %126, align 8
  %128 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %127, i64 0, i32 1, i32 0, i32 0
  %129 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %128, align 8
  %130 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %129, i64 0, i32 1
  %131 = call %"class.blink::FontFallbackList"* @_ZNK5blink4Font22EnsureFontFallbackListEv(%"class.blink::Font"* %130) #12
  %132 = getelementptr inbounds %"class.blink::FontFallbackList", %"class.blink::FontFallbackList"* %131, i64 0, i32 2
  %133 = load %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %132, align 8
  %134 = icmp eq %"class.blink::SimpleFontData"* %133, null
  br i1 %134, label %136, label %135

135:                                              ; preds = %116
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %118) #12
  store %"class.blink::SimpleFontData"* %133, %"class.blink::SimpleFontData"** %15, align 8
  br label %140

136:                                              ; preds = %116
  %137 = getelementptr inbounds %"class.blink::Font", %"class.blink::Font"* %130, i64 0, i32 0
  %138 = call %"class.blink::SimpleFontData"* @_ZN5blink16FontFallbackList30DeterminePrimarySimpleFontDataERKNS_15FontDescriptionE(%"class.blink::FontFallbackList"* %131, %"class.blink::FontDescription"* dereferenceable(80) %137) #12
  store %"class.blink::SimpleFontData"* %138, %"class.blink::SimpleFontData"** %132, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %118) #12
  store %"class.blink::SimpleFontData"* %138, %"class.blink::SimpleFontData"** %15, align 8
  %139 = icmp eq %"class.blink::SimpleFontData"* %138, null
  br i1 %139, label %156, label %140

140:                                              ; preds = %135, %136
  %141 = phi %"class.blink::SimpleFontData"* [ %133, %135 ], [ %138, %136 ]
  %142 = load i32, i32* %90, align 4
  %143 = getelementptr inbounds %"class.WTF::Vector.1908", %"class.WTF::Vector.1908"* %75, i64 0, i32 0, i32 0, i32 1
  %144 = load i32, i32* %143, align 8
  %145 = icmp eq i32 %142, %144
  br i1 %145, label %155, label %146, !prof !2

146:                                              ; preds = %140
  %147 = ptrtoint %"class.blink::SimpleFontData"* %141 to i64
  %148 = getelementptr inbounds %"class.WTF::Vector.1908", %"class.WTF::Vector.1908"* %75, i64 0, i32 0, i32 0, i32 0
  %149 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %148, align 8
  %150 = zext i32 %142 to i64
  %151 = getelementptr inbounds %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %149, i64 %150
  %152 = bitcast %"class.blink::SimpleFontData"** %151 to i64*
  store i64 %147, i64* %152, align 8
  %153 = load i32, i32* %90, align 4
  %154 = add i32 %153, 1
  store i32 %154, i32* %90, align 4
  br label %158

155:                                              ; preds = %140
  call void @_ZN3WTF6VectorIPKN5blink14SimpleFontDataELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector.1908"* nonnull %75, %"class.blink::SimpleFontData"** nonnull dereferenceable(8) %15) #12
  br label %156

156:                                              ; preds = %136, %155
  %157 = load i32, i32* %90, align 4
  br label %158

158:                                              ; preds = %156, %146
  %159 = phi i32 [ %157, %156 ], [ %154, %146 ]
  %160 = getelementptr inbounds %"class.WTF::Vector.1908", %"class.WTF::Vector.1908"* %75, i64 0, i32 0, i32 0, i32 0
  %161 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %160, align 8
  %162 = zext i32 %159 to i64
  %163 = getelementptr inbounds %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %161, i64 %162
  %164 = icmp eq i32 %159, 0
  br i1 %164, label %305, label %165

165:                                              ; preds = %158
  %166 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %167 = bitcast i32* %8 to i8*
  %168 = bitcast i32* %9 to i8*
  %169 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %3, i64 0, i32 0
  %170 = bitcast i32* %8 to %"class.blink::LayoutUnit"*
  %171 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %4, i64 0, i32 0
  %172 = bitcast i32* %9 to %"class.blink::LayoutUnit"*
  %173 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 5, i32 1, i32 0
  %174 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 5, i32 0, i32 0
  br label %175

175:                                              ; preds = %165, %302
  %176 = phi %"class.blink::SimpleFontData"** [ %161, %165 ], [ %303, %302 ]
  %177 = phi i8 [ 0, %165 ], [ %268, %302 ]
  %178 = load %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %176, align 8
  %179 = load i32, i32* %166, align 8
  %180 = and i32 %179, 224
  %181 = icmp eq i32 %180, 0
  %182 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %178, i64 0, i32 1, i32 9
  %183 = load i32, i32* %182, align 4
  br i1 %181, label %190, label %184

184:                                              ; preds = %175
  %185 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %178, i64 0, i32 1, i32 10
  %186 = load i32, i32* %185, align 4
  %187 = add nsw i32 %186, %183
  %188 = sdiv i32 %187, 2
  %189 = sub nsw i32 %187, %188
  br label %190

190:                                              ; preds = %175, %184
  %191 = phi i32 [ %189, %184 ], [ %183, %175 ]
  %192 = icmp sgt i32 %191, 33554431
  br i1 %192, label %197, label %193

193:                                              ; preds = %190
  %194 = icmp slt i32 %191, -33554432
  %195 = shl i32 %191, 6
  %196 = select i1 %194, i32 -2147483648, i32 %195
  br label %197

197:                                              ; preds = %193, %190
  %198 = phi i32 [ 2147483647, %190 ], [ %196, %193 ]
  %199 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %178, i64 0, i32 1, i32 10
  %200 = load i32, i32* %199, align 4
  br i1 %181, label %204, label %201

201:                                              ; preds = %197
  %202 = add nsw i32 %200, %183
  %203 = sdiv i32 %202, 2
  br label %204

204:                                              ; preds = %197, %201
  %205 = phi i32 [ %203, %201 ], [ %200, %197 ]
  %206 = icmp sgt i32 %205, 33554431
  br i1 %206, label %211, label %207

207:                                              ; preds = %204
  %208 = icmp slt i32 %205, -33554432
  %209 = shl i32 %205, 6
  %210 = select i1 %208, i32 -2147483648, i32 %209
  br label %211

211:                                              ; preds = %207, %204
  %212 = phi i32 [ 2147483647, %204 ], [ %210, %207 ]
  %213 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %178, i64 0, i32 1, i32 4
  %214 = load float, float* %213, align 4
  %215 = call i64 @lroundf(float %214) #12
  %216 = trunc i64 %215 to i32
  %217 = load i32, i32* %182, align 4
  %218 = load i32, i32* %199, align 4
  %219 = sub i32 %216, %217
  %220 = sub i32 %219, %218
  %221 = sdiv i32 %220, 2
  %222 = icmp sgt i32 %220, 67108863
  br i1 %222, label %230, label %223

223:                                              ; preds = %211
  %224 = icmp slt i32 %220, -67108865
  br i1 %224, label %228, label %225

225:                                              ; preds = %223
  %226 = shl i32 %221, 6
  %227 = icmp slt i32 %226, 0
  br i1 %227, label %228, label %230

228:                                              ; preds = %223, %225
  %229 = phi i32 [ %226, %225 ], [ -2147483648, %223 ]
  br label %230

230:                                              ; preds = %211, %225, %228
  %231 = phi i32 [ %229, %228 ], [ %226, %225 ], [ 2147483647, %211 ]
  %232 = phi i32 [ -2147483648, %228 ], [ 2147483647, %225 ], [ 2147483647, %211 ]
  %233 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %198, i32 %231) #12
  %234 = extractvalue { i32, i1 } %233, 1
  %235 = extractvalue { i32, i1 } %233, 0
  %236 = select i1 %234, i32 %232, i32 %235, !prof !2
  %237 = load float, float* %213, align 4
  %238 = call i64 @lroundf(float %237) #12
  %239 = trunc i64 %238 to i32
  %240 = icmp sgt i32 %239, 33554431
  br i1 %240, label %245, label %241

241:                                              ; preds = %230
  %242 = icmp slt i32 %239, -33554432
  %243 = shl i32 %239, 6
  %244 = select i1 %242, i32 -2147483648, i32 %243
  br label %245

245:                                              ; preds = %241, %230
  %246 = phi i32 [ 2147483647, %230 ], [ %244, %241 ]
  %247 = icmp sgt i32 %236, -1
  %248 = select i1 %247, i32 -2147483648, i32 2147483647
  %249 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %246, i32 %236) #12
  %250 = extractvalue { i32, i1 } %249, 1
  %251 = extractvalue { i32, i1 } %249, 0
  %252 = select i1 %250, i32 %248, i32 %251, !prof !2
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %167)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %168)
  store i32 %236, i32* %8, align 4
  store i32 %252, i32* %9, align 4
  %253 = icmp eq i8 %177, 0
  br i1 %253, label %254, label %255

254:                                              ; preds = %245
  store i32 %236, i32* %169, align 4
  br label %266

255:                                              ; preds = %245
  %256 = load i32, i32* %169, align 4
  %257 = icmp slt i32 %256, %236
  %258 = select i1 %257, %"class.blink::LayoutUnit"* %170, %"class.blink::LayoutUnit"* %3
  %259 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %258, i64 0, i32 0
  %260 = load i32, i32* %259, align 4
  store i32 %260, i32* %169, align 4
  %261 = load i32, i32* %171, align 4
  %262 = icmp slt i32 %261, %252
  %263 = select i1 %262, %"class.blink::LayoutUnit"* %172, %"class.blink::LayoutUnit"* %4
  %264 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %263, i64 0, i32 0
  %265 = load i32, i32* %264, align 4
  br label %266

266:                                              ; preds = %255, %254
  %267 = phi i32 [ %265, %255 ], [ %252, %254 ]
  %268 = phi i8 [ %177, %255 ], [ 1, %254 ]
  store i32 %267, i32* %171, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %167)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %168)
  %269 = load i8, i8* %5, align 1, !range !3
  %270 = icmp eq i8 %269, 0
  br i1 %270, label %271, label %285

271:                                              ; preds = %266
  %272 = load i32, i32* %49, align 4
  %273 = and i32 %272, 2048
  %274 = icmp eq i32 %273, 0
  %275 = select i1 %274, i32* %174, i32* %173
  %276 = load i32, i32* %275, align 4
  %277 = icmp sgt i32 %276, -1
  %278 = select i1 %277, i32 -2147483648, i32 2147483647
  %279 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %198, i32 %276) #12
  %280 = extractvalue { i32, i1 } %279, 1
  %281 = extractvalue { i32, i1 } %279, 0
  %282 = select i1 %280, i32 %278, i32 %281, !prof !2
  %283 = icmp sgt i32 %282, 0
  %284 = zext i1 %283 to i8
  store i8 %284, i8* %5, align 1
  br label %285

285:                                              ; preds = %266, %271
  %286 = load i8, i8* %6, align 1, !range !3
  %287 = icmp eq i8 %286, 0
  br i1 %287, label %288, label %302

288:                                              ; preds = %285
  %289 = load i32, i32* %49, align 4
  %290 = and i32 %289, 2048
  %291 = icmp eq i32 %290, 0
  %292 = select i1 %291, i32* %174, i32* %173
  %293 = load i32, i32* %292, align 4
  %294 = icmp slt i32 %293, 0
  %295 = select i1 %294, i32 -2147483648, i32 2147483647
  %296 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %212, i32 %293) #12
  %297 = extractvalue { i32, i1 } %296, 1
  %298 = extractvalue { i32, i1 } %296, 0
  %299 = select i1 %297, i32 %295, i32 %298, !prof !2
  %300 = icmp sgt i32 %299, 0
  %301 = zext i1 %300 to i8
  store i8 %301, i8* %6, align 1
  br label %302

302:                                              ; preds = %285, %288
  %303 = getelementptr inbounds %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %176, i64 1
  %304 = icmp eq %"class.blink::SimpleFontData"** %303, %163
  br i1 %304, label %305, label %175

305:                                              ; preds = %302, %158, %89, %85, %104
  %306 = phi i8* [ %94, %104 ], [ %88, %85 ], [ %88, %89 ], [ %117, %158 ], [ %117, %302 ]
  %307 = phi i8 [ 0, %104 ], [ 0, %85 ], [ 0, %89 ], [ 0, %158 ], [ %268, %302 ]
  %308 = phi i8 [ 0, %104 ], [ 0, %85 ], [ 0, %89 ], [ 0, %158 ], [ 1, %302 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %306) #12
  br label %309

309:                                              ; preds = %305, %105
  %310 = phi i8 [ 0, %105 ], [ %307, %305 ]
  %311 = phi i8 [ 0, %105 ], [ %308, %305 ]
  %312 = and i8 %311, 1
  %313 = icmp eq i8 %312, 0
  %314 = and i1 %86, %313
  br i1 %314, label %315, label %387

315:                                              ; preds = %309
  %316 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %317 = load i32, i32* %316, align 8
  %318 = lshr i32 %317, 5
  %319 = and i32 %318, 7
  %320 = bitcast %"class.blink::InlineBox"* %1 to i32 (%"class.blink::InlineBox"*, i32)***
  %321 = load i32 (%"class.blink::InlineBox"*, i32)**, i32 (%"class.blink::InlineBox"*, i32)*** %320, align 8
  %322 = getelementptr inbounds i32 (%"class.blink::InlineBox"*, i32)*, i32 (%"class.blink::InlineBox"*, i32)** %321, i64 23
  %323 = load i32 (%"class.blink::InlineBox"*, i32)*, i32 (%"class.blink::InlineBox"*, i32)** %322, align 8
  %324 = call i32 %323(%"class.blink::InlineBox"* %1, i32 %319) #12
  %325 = bitcast %"class.blink::InlineBox"* %1 to i32 (%"class.blink::InlineBox"*)***
  %326 = load i32 (%"class.blink::InlineBox"*)**, i32 (%"class.blink::InlineBox"*)*** %325, align 8
  %327 = getelementptr inbounds i32 (%"class.blink::InlineBox"*)*, i32 (%"class.blink::InlineBox"*)** %326, i64 24
  %328 = load i32 (%"class.blink::InlineBox"*)*, i32 (%"class.blink::InlineBox"*)** %327, align 8
  %329 = call i32 %328(%"class.blink::InlineBox"* %1) #12
  %330 = icmp sgt i32 %324, -1
  %331 = select i1 %330, i32 -2147483648, i32 2147483647
  %332 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %329, i32 %324) #12
  %333 = extractvalue { i32, i1 } %332, 1
  %334 = extractvalue { i32, i1 } %332, 0
  %335 = select i1 %333, i32 %331, i32 %334, !prof !2
  %336 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %336)
  %337 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %337)
  store i32 %324, i32* %10, align 4
  store i32 %335, i32* %11, align 4
  %338 = icmp eq i8 %310, 0
  %339 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %3, i64 0, i32 0
  br i1 %338, label %340, label %342

340:                                              ; preds = %315
  store i32 %324, i32* %339, align 4
  %341 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %4, i64 0, i32 0
  store i32 %335, i32* %341, align 4
  br label %356

342:                                              ; preds = %315
  %343 = load i32, i32* %339, align 4
  %344 = icmp slt i32 %343, %324
  %345 = bitcast i32* %10 to %"class.blink::LayoutUnit"*
  %346 = select i1 %344, %"class.blink::LayoutUnit"* %345, %"class.blink::LayoutUnit"* %3
  %347 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %346, i64 0, i32 0
  %348 = load i32, i32* %347, align 4
  store i32 %348, i32* %339, align 4
  %349 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %4, i64 0, i32 0
  %350 = load i32, i32* %349, align 4
  %351 = icmp slt i32 %350, %335
  %352 = bitcast i32* %11 to %"class.blink::LayoutUnit"*
  %353 = select i1 %351, %"class.blink::LayoutUnit"* %352, %"class.blink::LayoutUnit"* %4
  %354 = getelementptr inbounds %"class.blink::LayoutUnit", %"class.blink::LayoutUnit"* %353, i64 0, i32 0
  %355 = load i32, i32* %354, align 4
  store i32 %355, i32* %349, align 4
  br label %356

356:                                              ; preds = %340, %342
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %336)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %337)
  %357 = load i32, i32* %49, align 4
  %358 = and i32 %357, 2048
  %359 = icmp eq i32 %358, 0
  %360 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 5, i32 1, i32 0
  %361 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 5, i32 0, i32 0
  %362 = select i1 %359, i32* %361, i32* %360
  %363 = load i32, i32* %362, align 4
  %364 = icmp sgt i32 %363, -1
  %365 = select i1 %364, i32 -2147483648, i32 2147483647
  %366 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %324, i32 %363) #12
  %367 = extractvalue { i32, i1 } %366, 1
  %368 = extractvalue { i32, i1 } %366, 0
  %369 = select i1 %367, i32 %365, i32 %368, !prof !2
  %370 = icmp sgt i32 %369, 0
  %371 = zext i1 %370 to i8
  store i8 %371, i8* %5, align 1
  %372 = load i32, i32* %49, align 4
  %373 = and i32 %372, 2048
  %374 = icmp eq i32 %373, 0
  %375 = select i1 %374, i32* %361, i32* %360
  %376 = load i32, i32* %375, align 4
  %377 = icmp slt i32 %376, 0
  %378 = select i1 %377, i32 -2147483648, i32 2147483647
  %379 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %335, i32 %376) #12
  %380 = extractvalue { i32, i1 } %379, 1
  %381 = extractvalue { i32, i1 } %379, 0
  %382 = select i1 %380, i32 %378, i32 %381, !prof !2
  %383 = icmp sgt i32 %382, 0
  %384 = zext i1 %383 to i8
  br label %385

385:                                              ; preds = %24, %356
  %386 = phi i8 [ %384, %356 ], [ 1, %24 ]
  store i8 %386, i8* %6, align 1
  br label %387

387:                                              ; preds = %385, %309
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink13RootInlineBox20IncludeLeadingForBoxEPNS_9InlineBoxE(%"class.blink::RootInlineBox"* nocapture readnone, %"class.blink::InlineBox"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 4, i32 0
  %4 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %4, i64 0, i32 4
  %6 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %5 to i96*
  %7 = load i96, i96* %6, align 4
  %8 = and i96 %7, 1073741824
  %9 = icmp eq i96 %8, 0
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = and i96 %7, 33554432
  %12 = icmp eq i96 %11, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %10
  %14 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 7, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, 131072
  %17 = icmp ne i32 %16, 0
  br label %18

18:                                               ; preds = %10, %2, %13
  %19 = phi i1 [ false, %2 ], [ true, %10 ], [ %17, %13 ]
  ret i1 %19
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"*, i1 zeroext) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %0, i64 0, i32 0
  %5 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %4, align 8
  br i1 %1, label %6, label %41

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %5, i64 0, i32 6, i32 0, i32 0
  %8 = load %"class.blink::Node"*, %"class.blink::Node"** %7, align 8
  %9 = icmp eq %"class.blink::Node"* %8, null
  br i1 %9, label %10, label %17

10:                                               ; preds = %6, %10
  %11 = phi %"class.blink::LayoutObject"* [ %13, %10 ], [ %5, %6 ]
  %12 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %11, i64 0, i32 7
  %13 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %13, i64 0, i32 6, i32 0, i32 0
  %15 = load %"class.blink::Node"*, %"class.blink::Node"** %14, align 8
  %16 = icmp eq %"class.blink::Node"* %15, null
  br i1 %16, label %10, label %17

17:                                               ; preds = %10, %6
  %18 = phi %"class.blink::Node"* [ %8, %6 ], [ %15, %10 ]
  %19 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %18, i64 0, i32 3, i32 0, i32 0
  %20 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %20, i64 0, i32 2, i32 0, i32 0
  %22 = load %"class.blink::Document"*, %"class.blink::Document"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %22, i64 0, i32 59, i32 0, i32 0
  %24 = load %"class.blink::StyleEngine"*, %"class.blink::StyleEngine"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::StyleEngine", %"class.blink::StyleEngine"* %24, i64 0, i32 31, i32 0, i32 0
  %26 = load %"class.blink::CSSGlobalRuleSet"*, %"class.blink::CSSGlobalRuleSet"** %25, align 8
  %27 = getelementptr inbounds %"class.blink::CSSGlobalRuleSet", %"class.blink::CSSGlobalRuleSet"* %26, i64 0, i32 0, i32 11
  %28 = load i8, i8* %27, align 8
  %29 = and i8 %28, 1
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %34

31:                                               ; preds = %17
  %32 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 37, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0)) #12
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #12
  br label %34

34:                                               ; preds = %31, %17
  %35 = getelementptr inbounds %"class.blink::CSSGlobalRuleSet", %"class.blink::CSSGlobalRuleSet"* %26, i64 0, i32 0, i32 0, i32 0
  %36 = load i8, i8* %35, align 8, !range !3
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %34
  %39 = call %"class.blink::ComputedStyle"* @_ZNK5blink12LayoutObject29FirstLineStyleWithoutFallbackEv(%"class.blink::LayoutObject"* %5) #12
  %40 = icmp eq %"class.blink::ComputedStyle"* %39, null
  br i1 %40, label %41, label %44

41:                                               ; preds = %2, %34, %38
  %42 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %5, i64 0, i32 5, i32 0
  %43 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %42, align 8
  br label %44

44:                                               ; preds = %41, %38
  %45 = phi %"class.blink::ComputedStyle"* [ %39, %38 ], [ %43, %41 ]
  ret %"class.blink::ComputedStyle"* %45
}

declare void @_ZNK5blink13ComputedStyle10LineHeightEv(%"class.blink::Length"* sret, %"class.blink::ComputedStyle"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink13RootInlineBox22VerticalPositionForBoxEPNS_9InlineBoxERNS_21VerticalPositionCacheE(%"class.blink::RootInlineBox"* nocapture readonly, %"class.blink::InlineBox"* nocapture readonly, %"class.blink::VerticalPositionCache"* dereferenceable(48)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.blink::LineLayoutItem", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.blink::LineLayoutItem", align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %"class.blink::LineLayoutItem", align 8
  %10 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 4, i32 0
  %11 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %11, i64 0, i32 4
  %13 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %12 to i96*
  %14 = load i96, i96* %13, align 4
  %15 = and i96 %14, 33554432
  %16 = icmp eq i96 %15, 0
  br i1 %16, label %28, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 3
  %19 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %18, align 8
  %20 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %19, i64 0, i32 0, i32 7, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, 2048
  %23 = icmp eq i32 %22, 0
  %24 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %19, i64 0, i32 0, i32 5, i32 1, i32 0
  %25 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %19, i64 0, i32 0, i32 5, i32 0, i32 0
  %26 = select i1 %23, i32* %25, i32* %24
  %27 = load i32, i32* %26, align 4
  br label %535

28:                                               ; preds = %3
  %29 = and i96 %14, 134217728
  %30 = icmp eq i96 %29, 0
  br i1 %30, label %535, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 7, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  %36 = trunc i32 %34 to i8
  br i1 %35, label %70, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %11, i64 0, i32 6, i32 0, i32 0
  %39 = load %"class.blink::Node"*, %"class.blink::Node"** %38, align 8
  %40 = icmp eq %"class.blink::Node"* %39, null
  br i1 %40, label %41, label %48

41:                                               ; preds = %37, %41
  %42 = phi %"class.blink::LayoutObject"* [ %44, %41 ], [ %11, %37 ]
  %43 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %42, i64 0, i32 7
  %44 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %43, align 8
  %45 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %44, i64 0, i32 6, i32 0, i32 0
  %46 = load %"class.blink::Node"*, %"class.blink::Node"** %45, align 8
  %47 = icmp eq %"class.blink::Node"* %46, null
  br i1 %47, label %41, label %48

48:                                               ; preds = %41, %37
  %49 = phi %"class.blink::Node"* [ %39, %37 ], [ %46, %41 ]
  %50 = getelementptr inbounds %"class.blink::Node", %"class.blink::Node"* %49, i64 0, i32 3, i32 0, i32 0
  %51 = load %"class.blink::TreeScope"*, %"class.blink::TreeScope"** %50, align 8
  %52 = getelementptr inbounds %"class.blink::TreeScope", %"class.blink::TreeScope"* %51, i64 0, i32 2, i32 0, i32 0
  %53 = load %"class.blink::Document"*, %"class.blink::Document"** %52, align 8
  %54 = getelementptr inbounds %"class.blink::Document", %"class.blink::Document"* %53, i64 0, i32 59, i32 0, i32 0
  %55 = load %"class.blink::StyleEngine"*, %"class.blink::StyleEngine"** %54, align 8
  %56 = getelementptr inbounds %"class.blink::StyleEngine", %"class.blink::StyleEngine"* %55, i64 0, i32 31, i32 0, i32 0
  %57 = load %"class.blink::CSSGlobalRuleSet"*, %"class.blink::CSSGlobalRuleSet"** %56, align 8
  %58 = getelementptr inbounds %"class.blink::CSSGlobalRuleSet", %"class.blink::CSSGlobalRuleSet"* %57, i64 0, i32 0, i32 11
  %59 = load i8, i8* %58, align 8
  %60 = and i8 %59, 1
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %48
  %63 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %63) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0), i32 37, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0)) #12
  %64 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %63) #12
  br label %65

65:                                               ; preds = %48, %62
  %66 = getelementptr inbounds %"class.blink::CSSGlobalRuleSet", %"class.blink::CSSGlobalRuleSet"* %57, i64 0, i32 0, i32 0, i32 0
  %67 = load i8, i8* %66, align 8, !range !3
  %68 = icmp eq i8 %67, 0
  %69 = select i1 %68, i8 0, i8 %36
  br label %70

70:                                               ; preds = %31, %65
  %71 = phi i8 [ 0, %31 ], [ %69, %65 ]
  %72 = bitcast %"class.blink::LayoutObject"* %11 to i1 (%"class.blink::LayoutObject"*)***
  %73 = load i1 (%"class.blink::LayoutObject"*)**, i1 (%"class.blink::LayoutObject"*)*** %72, align 8
  %74 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %73, i64 26
  %75 = load i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %74, align 8
  %76 = call zeroext i1 %75(%"class.blink::LayoutObject"* %11) #12
  %77 = icmp eq i8 %71, 0
  %78 = and i1 %77, %76
  br i1 %78, label %79, label %109

79:                                               ; preds = %70
  %80 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %81 = load i32, i32* %80, align 8
  %82 = and i32 %81, 224
  %83 = bitcast %"class.blink::LineLayoutItem"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83)
  %84 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %4, i64 0, i32 0
  store %"class.blink::LayoutObject"* %11, %"class.blink::LayoutObject"** %84, align 8
  %85 = icmp eq i32 %82, 0
  %86 = getelementptr inbounds %"class.blink::VerticalPositionCache", %"class.blink::VerticalPositionCache"* %2, i64 0, i32 0
  %87 = getelementptr inbounds %"class.blink::VerticalPositionCache", %"class.blink::VerticalPositionCache"* %2, i64 0, i32 1
  %88 = select i1 %85, %"class.WTF::HashMap.1913"* %86, %"class.WTF::HashMap.1913"* %87
  %89 = getelementptr inbounds %"class.WTF::HashMap.1913", %"class.WTF::HashMap.1913"* %88, i64 0, i32 0
  %90 = call { %"struct.WTF::KeyValuePair.1917"*, %"struct.WTF::KeyValuePair.1917"* } @_ZNK3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE4findERKS2_(%"class.WTF::HashTable.1914"* %89, %"class.blink::LineLayoutItem"* nonnull dereferenceable(8) %4) #12
  %91 = extractvalue { %"struct.WTF::KeyValuePair.1917"*, %"struct.WTF::KeyValuePair.1917"* } %90, 0
  %92 = getelementptr inbounds %"class.WTF::HashMap.1913", %"class.WTF::HashMap.1913"* %88, i64 0, i32 0, i32 0
  %93 = load %"struct.WTF::KeyValuePair.1917"*, %"struct.WTF::KeyValuePair.1917"** %92, align 8
  %94 = getelementptr inbounds %"class.WTF::HashMap.1913", %"class.WTF::HashMap.1913"* %88, i64 0, i32 0, i32 1
  %95 = load i32, i32* %94, align 8
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %93, i64 %96
  %98 = icmp eq %"struct.WTF::KeyValuePair.1917"* %91, %97
  br i1 %98, label %99, label %100

99:                                               ; preds = %79
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83)
  br label %109

100:                                              ; preds = %79
  %101 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %91, i64 0, i32 1
  %102 = load i32, i32* %101, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83)
  %103 = icmp sgt i32 %102, 33554431
  br i1 %103, label %535, label %104

104:                                              ; preds = %100
  %105 = icmp slt i32 %102, -33554432
  br i1 %105, label %109, label %106

106:                                              ; preds = %104
  %107 = shl i32 %102, 6
  %108 = icmp eq i32 %107, -2147483648
  br i1 %108, label %109, label %535

109:                                              ; preds = %106, %104, %99, %70
  %110 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %110)
  store i32 0, i32* %8, align 4
  %111 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %11, i64 0, i32 5, i32 0
  %112 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %111, align 8
  %113 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %112, i64 0, i32 0, i32 9
  %114 = bitcast [20 x i8]* %113 to i160*
  %115 = load i160, i160* %114, align 8
  %116 = lshr i160 %115, 64
  %117 = trunc i160 %116 to i32
  %118 = and i32 %117, 15
  %119 = or i32 %118, 1
  %120 = icmp eq i32 %119, 7
  br i1 %120, label %533, label %121

121:                                              ; preds = %109
  %122 = bitcast %"class.blink::LineLayoutItem"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %122) #12
  %123 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %9, i64 0, i32 0
  %124 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %11, i64 0, i32 7
  %125 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %124, align 8
  store %"class.blink::LayoutObject"* %125, %"class.blink::LayoutObject"** %123, align 8
  %126 = bitcast %"class.blink::LayoutObject"* %125 to i1 (%"class.blink::LayoutObject"*)***
  %127 = load i1 (%"class.blink::LayoutObject"*)**, i1 (%"class.blink::LayoutObject"*)*** %126, align 8
  %128 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %127, i64 26
  %129 = load i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %128, align 8
  %130 = call zeroext i1 %129(%"class.blink::LayoutObject"* %125) #12
  br i1 %130, label %131, label %151

131:                                              ; preds = %121
  %132 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %123, align 8
  %133 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %132, i64 0, i32 5, i32 0
  %134 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %133, align 8
  %135 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %134, i64 0, i32 0, i32 9
  %136 = bitcast [20 x i8]* %135 to i160*
  %137 = load i160, i160* %136, align 8
  %138 = and i160 %137, 258254417031933722624
  %139 = icmp eq i160 %138, 110680464442257309696
  br i1 %139, label %151, label %140

140:                                              ; preds = %131
  %141 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %1, i64 0, i32 3
  %142 = load %"class.blink::InlineFlowBox"*, %"class.blink::InlineFlowBox"** %141, align 8
  %143 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %142, i64 0, i32 0, i32 7, i32 0
  %144 = load i32, i32* %143, align 4
  %145 = and i32 %144, 2048
  %146 = icmp eq i32 %145, 0
  %147 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %142, i64 0, i32 0, i32 5, i32 1, i32 0
  %148 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %142, i64 0, i32 0, i32 5, i32 0, i32 0
  %149 = select i1 %146, i32* %148, i32* %147
  %150 = load i32, i32* %149, align 4
  store i32 %150, i32* %8, align 4
  br label %151

151:                                              ; preds = %131, %140, %121
  %152 = icmp eq i32 %118, 0
  br i1 %152, label %497, label %153

153:                                              ; preds = %151
  %154 = icmp ne i8 %71, 0
  %155 = call %"class.blink::ComputedStyle"* @_ZNK5blink14LineLayoutItem5StyleEb(%"class.blink::LineLayoutItem"* nonnull %9, i1 zeroext %154)
  %156 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %155, i64 0, i32 0, i32 0, i32 0, i32 0
  %157 = load %"class.blink::ComputedStyleBase::StyleInheritedData"*, %"class.blink::ComputedStyleBase::StyleInheritedData"** %156, align 8
  %158 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleInheritedData", %"class.blink::ComputedStyleBase::StyleInheritedData"* %157, i64 0, i32 1, i32 0, i32 0
  %159 = load %"class.blink::ComputedStyleBase::StyleFontData"*, %"class.blink::ComputedStyleBase::StyleFontData"** %158, align 8
  %160 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %159, i64 0, i32 1
  %161 = call %"class.blink::FontFallbackList"* @_ZNK5blink4Font22EnsureFontFallbackListEv(%"class.blink::Font"* %160) #12
  %162 = getelementptr inbounds %"class.blink::FontFallbackList", %"class.blink::FontFallbackList"* %161, i64 0, i32 2
  %163 = load %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %162, align 8
  %164 = icmp eq %"class.blink::SimpleFontData"* %163, null
  br i1 %164, label %165, label %169

165:                                              ; preds = %153
  %166 = getelementptr inbounds %"class.blink::Font", %"class.blink::Font"* %160, i64 0, i32 0
  %167 = call %"class.blink::SimpleFontData"* @_ZN5blink16FontFallbackList30DeterminePrimarySimpleFontDataERKNS_15FontDescriptionE(%"class.blink::FontFallbackList"* %161, %"class.blink::FontDescription"* dereferenceable(80) %166) #12
  store %"class.blink::SimpleFontData"* %167, %"class.blink::SimpleFontData"** %162, align 8
  %168 = icmp eq %"class.blink::SimpleFontData"* %167, null
  br i1 %168, label %531, label %169

169:                                              ; preds = %153, %165
  %170 = phi %"class.blink::SimpleFontData"* [ %167, %165 ], [ %163, %153 ]
  %171 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleFontData", %"class.blink::ComputedStyleBase::StyleFontData"* %159, i64 0, i32 1, i32 0, i32 5
  %172 = load float, float* %171, align 4
  %173 = fadd float %172, 5.000000e-01
  %174 = fptosi float %173 to i32
  %175 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %123, align 8
  %176 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %175, i64 0, i32 4
  %177 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %176 to i96*
  %178 = load i96, i96* %177, align 4
  %179 = trunc i96 %178 to i32
  %180 = lshr i32 %179, 31
  %181 = xor i32 %180, 1
  switch i32 %118, label %497 [
    i32 2, label %182
    i32 3, label %207
    i32 4, label %232
    i32 1, label %278
    i32 5, label %335
    i32 8, label %410
    i32 9, label %462
  ]

182:                                              ; preds = %169
  %183 = sdiv i32 %174, 5
  %184 = add nsw i32 %183, 1
  %185 = icmp sgt i32 %174, 167772154
  br i1 %185, label %186, label %188

186:                                              ; preds = %182
  %187 = load i32, i32* %8, align 4
  br label %199

188:                                              ; preds = %182
  %189 = icmp slt i32 %184, -33554432
  br i1 %189, label %190, label %192

190:                                              ; preds = %188
  %191 = load i32, i32* %8, align 4
  br label %196

192:                                              ; preds = %188
  %193 = shl i32 %184, 6
  %194 = load i32, i32* %8, align 4
  %195 = icmp slt i32 %193, 0
  br i1 %195, label %196, label %199

196:                                              ; preds = %192, %190
  %197 = phi i32 [ %191, %190 ], [ %194, %192 ]
  %198 = phi i32 [ -2147483648, %190 ], [ %193, %192 ]
  br label %199

199:                                              ; preds = %186, %192, %196
  %200 = phi i32 [ %197, %196 ], [ %194, %192 ], [ %187, %186 ]
  %201 = phi i32 [ %198, %196 ], [ %193, %192 ], [ 2147483647, %186 ]
  %202 = phi i32 [ -2147483648, %196 ], [ 2147483647, %192 ], [ 2147483647, %186 ]
  %203 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %200, i32 %201) #12
  %204 = extractvalue { i32, i1 } %203, 1
  %205 = extractvalue { i32, i1 } %203, 0
  %206 = select i1 %204, i32 %202, i32 %205, !prof !2
  store i32 %206, i32* %8, align 4
  br label %497

207:                                              ; preds = %169
  %208 = sdiv i32 %174, 3
  %209 = add nsw i32 %208, 1
  %210 = icmp sgt i32 %174, 100663292
  br i1 %210, label %211, label %213

211:                                              ; preds = %207
  %212 = load i32, i32* %8, align 4
  br label %221

213:                                              ; preds = %207
  %214 = icmp slt i32 %209, -33554432
  br i1 %214, label %215, label %217

215:                                              ; preds = %213
  %216 = load i32, i32* %8, align 4
  br label %224

217:                                              ; preds = %213
  %218 = shl i32 %209, 6
  %219 = load i32, i32* %8, align 4
  %220 = icmp sgt i32 %218, -1
  br i1 %220, label %221, label %224

221:                                              ; preds = %217, %211
  %222 = phi i32 [ %212, %211 ], [ %219, %217 ]
  %223 = phi i32 [ 2147483647, %211 ], [ %218, %217 ]
  br label %224

224:                                              ; preds = %215, %217, %221
  %225 = phi i32 [ %222, %221 ], [ %219, %217 ], [ %216, %215 ]
  %226 = phi i32 [ %223, %221 ], [ %218, %217 ], [ -2147483648, %215 ]
  %227 = phi i32 [ -2147483648, %221 ], [ 2147483647, %217 ], [ 2147483647, %215 ]
  %228 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %225, i32 %226) #12
  %229 = extractvalue { i32, i1 } %228, 1
  %230 = extractvalue { i32, i1 } %228, 0
  %231 = select i1 %229, i32 %227, i32 %230, !prof !2
  store i32 %231, i32* %8, align 4
  br label %497

232:                                              ; preds = %169
  %233 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %234 = load i32, i32* %233, align 8
  %235 = lshr i32 %234, 5
  %236 = and i32 %235, 7
  %237 = bitcast %"class.blink::LayoutObject"* %11 to %"class.blink::LayoutBoxModelObject"*
  %238 = bitcast %"class.blink::LayoutObject"* %11 to i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)***
  %239 = load i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)**, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*** %238, align 8
  %240 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)** %239, i64 134
  %241 = load i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)** %240, align 8
  %242 = call i32 %241(%"class.blink::LayoutBoxModelObject"* %237, i32 %236, i1 zeroext %154, i32 %181, i32 0) #12
  %243 = load i32, i32* %233, align 8
  %244 = and i32 %243, 224
  %245 = icmp eq i32 %244, 0
  %246 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %170, i64 0, i32 1, i32 9
  %247 = load i32, i32* %246, align 4
  br i1 %245, label %254, label %248

248:                                              ; preds = %232
  %249 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %170, i64 0, i32 1, i32 10
  %250 = load i32, i32* %249, align 4
  %251 = add nsw i32 %250, %247
  %252 = sdiv i32 %251, 2
  %253 = sub nsw i32 %251, %252
  br label %254

254:                                              ; preds = %232, %248
  %255 = phi i32 [ %253, %248 ], [ %247, %232 ]
  %256 = icmp sgt i32 %255, 33554431
  br i1 %256, label %262, label %257

257:                                              ; preds = %254
  %258 = icmp slt i32 %255, -33554432
  br i1 %258, label %264, label %259

259:                                              ; preds = %257
  %260 = shl i32 %255, 6
  %261 = icmp sgt i32 %260, -1
  br i1 %261, label %262, label %264

262:                                              ; preds = %254, %259
  %263 = phi i32 [ %260, %259 ], [ 2147483647, %254 ]
  br label %264

264:                                              ; preds = %257, %259, %262
  %265 = phi i32 [ %263, %262 ], [ %260, %259 ], [ -2147483648, %257 ]
  %266 = phi i32 [ -2147483648, %262 ], [ 2147483647, %259 ], [ 2147483647, %257 ]
  %267 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %242, i32 %265) #12
  %268 = extractvalue { i32, i1 } %267, 1
  %269 = extractvalue { i32, i1 } %267, 0
  %270 = select i1 %268, i32 %266, i32 %269, !prof !2
  %271 = load i32, i32* %8, align 4
  %272 = icmp slt i32 %270, 0
  %273 = select i1 %272, i32 -2147483648, i32 2147483647
  %274 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %271, i32 %270) #12
  %275 = extractvalue { i32, i1 } %274, 1
  %276 = extractvalue { i32, i1 } %274, 0
  %277 = select i1 %275, i32 %273, i32 %276, !prof !2
  store i32 %277, i32* %8, align 4
  br label %497

278:                                              ; preds = %169
  %279 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %170, i64 0, i32 1, i32 5
  %280 = load float, float* %279, align 4
  %281 = fmul float %280, 5.000000e-01
  %282 = fmul float %281, 6.400000e+01
  %283 = fcmp ult float %282, 0xC1E0000000000000
  %284 = fcmp ugt float %282, 0x41DFFFFFE0000000
  %285 = fcmp ogt float %282, 0xC1E0000000000000
  %286 = select i1 %285, float %282, float 0xC1E0000000000000
  %287 = fptosi float %286 to i32
  %288 = select i1 %283, i32 0, i32 2147483647
  %289 = select i1 %284, i32 %288, i32 %287
  %290 = load i32, i32* %8, align 4
  %291 = icmp sgt i32 %289, -1
  %292 = select i1 %291, i32 -2147483648, i32 2147483647
  %293 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %290, i32 %289) #12
  %294 = extractvalue { i32, i1 } %293, 1
  %295 = extractvalue { i32, i1 } %293, 0
  %296 = select i1 %294, i32 %292, i32 %295, !prof !2
  %297 = bitcast %"class.blink::LayoutObject"* %11 to %"class.blink::LayoutBoxModelObject"*
  %298 = bitcast %"class.blink::LayoutObject"* %11 to i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)***
  %299 = load i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)**, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*** %298, align 8
  %300 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)** %299, i64 133
  %301 = load i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)** %300, align 8
  %302 = call i32 %301(%"class.blink::LayoutBoxModelObject"* %297, i1 zeroext %154, i32 %181, i32 0) #12
  %303 = sdiv i32 %302, 2
  %304 = sext i32 %303 to i64
  %305 = call i1 @llvm.is.constant.i64(i64 %304) #12
  br i1 %305, label %312, label %306

306:                                              ; preds = %278
  %307 = icmp slt i32 %302, -1
  %308 = select i1 %307, i32 -2147483648, i32 2147483647
  %309 = add nsw i64 %304, 2147483648
  %310 = icmp ult i64 %309, 4294967296
  %311 = select i1 %310, i32 %303, i32 %308, !prof !7
  br label %312

312:                                              ; preds = %278, %306
  %313 = phi i32 [ %311, %306 ], [ %303, %278 ]
  %314 = icmp sgt i32 %313, -1
  %315 = select i1 %314, i32 -2147483648, i32 2147483647
  %316 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %296, i32 %313) #12
  %317 = extractvalue { i32, i1 } %316, 1
  %318 = extractvalue { i32, i1 } %316, 0
  %319 = select i1 %317, i32 %315, i32 %318, !prof !2
  %320 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %321 = load i32, i32* %320, align 8
  %322 = lshr i32 %321, 5
  %323 = and i32 %322, 7
  %324 = bitcast %"class.blink::LayoutObject"* %11 to i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)***
  %325 = load i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)**, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*** %324, align 8
  %326 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)** %325, i64 134
  %327 = load i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)** %326, align 8
  %328 = call i32 %327(%"class.blink::LayoutBoxModelObject"* %297, i32 %323, i1 zeroext %154, i32 %181, i32 0) #12
  %329 = icmp slt i32 %328, 0
  %330 = select i1 %329, i32 -2147483648, i32 2147483647
  %331 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %319, i32 %328) #12
  %332 = extractvalue { i32, i1 } %331, 1
  %333 = extractvalue { i32, i1 } %331, 0
  %334 = select i1 %332, i32 %330, i32 %333, !prof !2
  store i32 %334, i32* %8, align 4
  br label %497

335:                                              ; preds = %169
  %336 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %337 = load i32, i32* %336, align 8
  %338 = and i32 %337, 224
  %339 = icmp eq i32 %338, 0
  br i1 %339, label %340, label %343

340:                                              ; preds = %335
  %341 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %170, i64 0, i32 1, i32 10
  %342 = load i32, i32* %341, align 4
  br label %350

343:                                              ; preds = %335
  %344 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %170, i64 0, i32 1, i32 9
  %345 = load i32, i32* %344, align 4
  %346 = getelementptr inbounds %"class.blink::SimpleFontData", %"class.blink::SimpleFontData"* %170, i64 0, i32 1, i32 10
  %347 = load i32, i32* %346, align 4
  %348 = add nsw i32 %347, %345
  %349 = sdiv i32 %348, 2
  br label %350

350:                                              ; preds = %340, %343
  %351 = phi i32 [ %342, %340 ], [ %349, %343 ]
  %352 = icmp sgt i32 %351, 33554431
  br i1 %352, label %353, label %355

353:                                              ; preds = %350
  %354 = load i32, i32* %8, align 4
  br label %366

355:                                              ; preds = %350
  %356 = icmp slt i32 %351, -33554432
  br i1 %356, label %357, label %359

357:                                              ; preds = %355
  %358 = load i32, i32* %8, align 4
  br label %363

359:                                              ; preds = %355
  %360 = shl i32 %351, 6
  %361 = load i32, i32* %8, align 4
  %362 = icmp slt i32 %360, 0
  br i1 %362, label %363, label %366

363:                                              ; preds = %359, %357
  %364 = phi i32 [ %358, %357 ], [ %361, %359 ]
  %365 = phi i32 [ -2147483648, %357 ], [ %360, %359 ]
  br label %366

366:                                              ; preds = %353, %359, %363
  %367 = phi i32 [ %364, %363 ], [ %361, %359 ], [ %354, %353 ]
  %368 = phi i32 [ %365, %363 ], [ %360, %359 ], [ 2147483647, %353 ]
  %369 = phi i32 [ -2147483648, %363 ], [ 2147483647, %359 ], [ 2147483647, %353 ]
  %370 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %367, i32 %368) #12
  %371 = extractvalue { i32, i1 } %370, 1
  %372 = extractvalue { i32, i1 } %370, 0
  %373 = select i1 %371, i32 %369, i32 %372, !prof !2
  store i32 %373, i32* %8, align 4
  %374 = load i96, i96* %13, align 4
  %375 = and i96 %374, 1073741824
  %376 = icmp eq i96 %375, 0
  br i1 %376, label %382, label %377

377:                                              ; preds = %366
  %378 = load i1 (%"class.blink::LayoutObject"*)**, i1 (%"class.blink::LayoutObject"*)*** %72, align 8
  %379 = getelementptr inbounds i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %378, i64 22
  %380 = load i1 (%"class.blink::LayoutObject"*)*, i1 (%"class.blink::LayoutObject"*)** %379, align 8
  %381 = call zeroext i1 %380(%"class.blink::LayoutObject"* %11) #12
  br i1 %381, label %382, label %497

382:                                              ; preds = %366, %377
  %383 = bitcast %"class.blink::LayoutObject"* %11 to %"class.blink::LayoutBoxModelObject"*
  %384 = bitcast %"class.blink::LayoutObject"* %11 to i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)***
  %385 = load i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)**, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*** %384, align 8
  %386 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)** %385, i64 133
  %387 = load i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)** %386, align 8
  %388 = call i32 %387(%"class.blink::LayoutBoxModelObject"* %383, i1 zeroext %154, i32 %181, i32 0) #12
  %389 = load i32, i32* %336, align 8
  %390 = lshr i32 %389, 5
  %391 = and i32 %390, 7
  %392 = bitcast %"class.blink::LayoutObject"* %11 to i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)***
  %393 = load i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)**, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*** %392, align 8
  %394 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)** %393, i64 134
  %395 = load i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)** %394, align 8
  %396 = call i32 %395(%"class.blink::LayoutBoxModelObject"* %383, i32 %391, i1 zeroext %154, i32 %181, i32 0) #12
  %397 = icmp sgt i32 %396, -1
  %398 = select i1 %397, i32 -2147483648, i32 2147483647
  %399 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %388, i32 %396) #12
  %400 = extractvalue { i32, i1 } %399, 1
  %401 = extractvalue { i32, i1 } %399, 0
  %402 = select i1 %400, i32 %398, i32 %401, !prof !2
  %403 = load i32, i32* %8, align 4
  %404 = icmp sgt i32 %402, -1
  %405 = select i1 %404, i32 -2147483648, i32 2147483647
  %406 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %403, i32 %402) #12
  %407 = extractvalue { i32, i1 } %406, 1
  %408 = extractvalue { i32, i1 } %406, 0
  %409 = select i1 %407, i32 %405, i32 %408, !prof !2
  store i32 %409, i32* %8, align 4
  br label %497

410:                                              ; preds = %169
  %411 = bitcast %"class.blink::LayoutObject"* %11 to %"class.blink::LayoutBoxModelObject"*
  %412 = bitcast %"class.blink::LayoutObject"* %11 to i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)***
  %413 = load i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)**, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*** %412, align 8
  %414 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)** %413, i64 133
  %415 = load i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)** %414, align 8
  %416 = call i32 %415(%"class.blink::LayoutBoxModelObject"* %411, i1 zeroext %154, i32 %181, i32 0) #12
  %417 = call i1 @llvm.is.constant.i32(i32 %416) #12
  br i1 %417, label %418, label %422

418:                                              ; preds = %410
  %419 = sub i32 0, %416
  %420 = icmp eq i32 %419, -2147483648
  %421 = select i1 %420, i32 2147483647, i32 %419
  br label %427

422:                                              ; preds = %410
  %423 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 0, i32 %416) #12
  %424 = extractvalue { i32, i1 } %423, 1
  %425 = extractvalue { i32, i1 } %423, 0
  %426 = select i1 %424, i32 2147483647, i32 %425
  br label %427

427:                                              ; preds = %418, %422
  %428 = phi i32 [ %421, %418 ], [ %426, %422 ]
  %429 = sdiv i32 %428, 2
  %430 = sext i32 %429 to i64
  %431 = call i1 @llvm.is.constant.i64(i64 %430) #12
  br i1 %431, label %438, label %432

432:                                              ; preds = %427
  %433 = icmp slt i32 %428, -1
  %434 = select i1 %433, i32 -2147483648, i32 2147483647
  %435 = add nsw i64 %430, 2147483648
  %436 = icmp ult i64 %435, 4294967296
  %437 = select i1 %436, i32 %429, i32 %434, !prof !7
  br label %438

438:                                              ; preds = %427, %432
  %439 = phi i32 [ %437, %432 ], [ %429, %427 ]
  %440 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %441 = load i32, i32* %440, align 8
  %442 = lshr i32 %441, 5
  %443 = and i32 %442, 7
  %444 = bitcast %"class.blink::LayoutObject"* %11 to i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)***
  %445 = load i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)**, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*** %444, align 8
  %446 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)** %445, i64 134
  %447 = load i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i32, i1, i32, i32)** %446, align 8
  %448 = call i32 %447(%"class.blink::LayoutBoxModelObject"* %411, i32 %443, i1 zeroext %154, i32 %181, i32 0) #12
  %449 = icmp slt i32 %448, 0
  %450 = select i1 %449, i32 -2147483648, i32 2147483647
  %451 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %439, i32 %448) #12
  %452 = extractvalue { i32, i1 } %451, 1
  %453 = extractvalue { i32, i1 } %451, 0
  %454 = select i1 %452, i32 %450, i32 %453, !prof !2
  %455 = load i32, i32* %8, align 4
  %456 = icmp slt i32 %454, 0
  %457 = select i1 %456, i32 -2147483648, i32 2147483647
  %458 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %455, i32 %454) #12
  %459 = extractvalue { i32, i1 } %458, 1
  %460 = extractvalue { i32, i1 } %458, 0
  %461 = select i1 %459, i32 %457, i32 %460, !prof !2
  store i32 %461, i32* %8, align 4
  br label %497

462:                                              ; preds = %169
  %463 = load %"class.blink::ComputedStyle"*, %"class.blink::ComputedStyle"** %111, align 8
  %464 = getelementptr inbounds %"class.blink::ComputedStyle", %"class.blink::ComputedStyle"* %463, i64 0, i32 0, i32 5, i32 0, i32 0
  %465 = load %"class.blink::ComputedStyleBase::StyleBoxData"*, %"class.blink::ComputedStyleBase::StyleBoxData"** %464, align 8
  %466 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleBoxData", %"class.blink::ComputedStyleBase::StyleBoxData"* %465, i64 0, i32 9, i32 2
  %467 = load i8, i8* %466, align 1
  switch i8 %467, label %475 [
    i8 8, label %468
    i8 1, label %468
  ]

468:                                              ; preds = %462, %462
  %469 = call i32 @_ZNK5blink13ComputedStyle18ComputedLineHeightEv(%"class.blink::ComputedStyle"* %463) #12
  %470 = icmp sgt i32 %469, 33554431
  br i1 %470, label %482, label %471

471:                                              ; preds = %468
  %472 = icmp slt i32 %469, -33554432
  %473 = shl i32 %469, 6
  %474 = select i1 %472, i32 -2147483648, i32 %473
  br label %482

475:                                              ; preds = %462
  %476 = bitcast %"class.blink::LayoutObject"* %11 to %"class.blink::LayoutBoxModelObject"*
  %477 = bitcast %"class.blink::LayoutObject"* %11 to i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)***
  %478 = load i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)**, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*** %477, align 8
  %479 = getelementptr inbounds i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)** %478, i64 133
  %480 = load i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)*, i32 (%"class.blink::LayoutBoxModelObject"*, i1, i32, i32)** %479, align 8
  %481 = call i32 %480(%"class.blink::LayoutBoxModelObject"* %476, i1 zeroext %154, i32 %181, i32 0) #12
  br label %482

482:                                              ; preds = %471, %468, %475
  %483 = phi i32 [ %481, %475 ], [ 2147483647, %468 ], [ %474, %471 ]
  %484 = bitcast %"class.blink::ComputedStyle"** %111 to %"class.blink::ComputedStyleBase"**
  %485 = load %"class.blink::ComputedStyleBase"*, %"class.blink::ComputedStyleBase"** %484, align 8
  %486 = getelementptr inbounds %"class.blink::ComputedStyleBase", %"class.blink::ComputedStyleBase"* %485, i64 0, i32 5, i32 0, i32 0
  %487 = load %"class.blink::ComputedStyleBase::StyleBoxData"*, %"class.blink::ComputedStyleBase::StyleBoxData"** %486, align 8
  %488 = getelementptr inbounds %"class.blink::ComputedStyleBase::StyleBoxData", %"class.blink::ComputedStyleBase::StyleBoxData"* %487, i64 0, i32 9
  %489 = call i32 @_ZN5blink14ValueForLengthERKNS_6LengthENS_10LayoutUnitE(%"class.blink::Length"* dereferenceable(8) %488, i32 %483) #12
  %490 = load i32, i32* %8, align 4
  %491 = icmp sgt i32 %489, -1
  %492 = select i1 %491, i32 -2147483648, i32 2147483647
  %493 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %490, i32 %489) #12
  %494 = extractvalue { i32, i1 } %493, 1
  %495 = extractvalue { i32, i1 } %493, 0
  %496 = select i1 %494, i32 %492, i32 %495, !prof !2
  store i32 %496, i32* %8, align 4
  br label %497

497:                                              ; preds = %169, %224, %312, %438, %482, %377, %382, %264, %199, %151
  br i1 %78, label %498, label %529

498:                                              ; preds = %497
  %499 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 6
  %500 = load i32, i32* %499, align 8
  %501 = and i32 %500, 224
  %502 = load i32, i32* %8, align 4
  %503 = sdiv i32 %502, 64
  %504 = bitcast %"class.blink::LineLayoutItem"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %504)
  %505 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %505)
  %506 = getelementptr inbounds %"class.blink::LineLayoutItem", %"class.blink::LineLayoutItem"* %6, i64 0, i32 0
  store %"class.blink::LayoutObject"* %11, %"class.blink::LayoutObject"** %506, align 8
  store i32 %503, i32* %7, align 4
  %507 = icmp eq i32 %501, 0
  br i1 %507, label %508, label %518

508:                                              ; preds = %498
  %509 = getelementptr inbounds %"class.blink::VerticalPositionCache", %"class.blink::VerticalPositionCache"* %2, i64 0, i32 0, i32 0
  %510 = call { %"struct.WTF::KeyValuePair.1917"*, i8 } @_ZN3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISB_S6_SC_EERS2_RiEENS_18HashTableAddResultISD_S4_EEOT0_OT1_(%"class.WTF::HashTable.1914"* %509, %"class.blink::LineLayoutItem"* nonnull dereferenceable(8) %6, i32* nonnull dereferenceable(4) %7) #12
  %511 = extractvalue { %"struct.WTF::KeyValuePair.1917"*, i8 } %510, 1
  %512 = and i8 %511, 1
  %513 = icmp eq i8 %512, 0
  br i1 %513, label %514, label %528

514:                                              ; preds = %508
  %515 = extractvalue { %"struct.WTF::KeyValuePair.1917"*, i8 } %510, 0
  %516 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %515, i64 0, i32 1
  %517 = load i32, i32* %7, align 4
  store i32 %517, i32* %516, align 4
  br label %528

518:                                              ; preds = %498
  %519 = getelementptr inbounds %"class.blink::VerticalPositionCache", %"class.blink::VerticalPositionCache"* %2, i64 0, i32 1, i32 0
  %520 = call { %"struct.WTF::KeyValuePair.1917"*, i8 } @_ZN3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISB_S6_SC_EERS2_RiEENS_18HashTableAddResultISD_S4_EEOT0_OT1_(%"class.WTF::HashTable.1914"* %519, %"class.blink::LineLayoutItem"* nonnull dereferenceable(8) %6, i32* nonnull dereferenceable(4) %7) #12
  %521 = extractvalue { %"struct.WTF::KeyValuePair.1917"*, i8 } %520, 1
  %522 = and i8 %521, 1
  %523 = icmp eq i8 %522, 0
  br i1 %523, label %524, label %528

524:                                              ; preds = %518
  %525 = extractvalue { %"struct.WTF::KeyValuePair.1917"*, i8 } %520, 0
  %526 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %525, i64 0, i32 1
  %527 = load i32, i32* %7, align 4
  store i32 %527, i32* %526, align 4
  br label %528

528:                                              ; preds = %508, %514, %518, %524
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %504)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %505)
  br label %529

529:                                              ; preds = %528, %497
  %530 = load i32, i32* %8, align 4
  br label %531

531:                                              ; preds = %165, %529
  %532 = phi i32 [ %530, %529 ], [ 0, %165 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %122) #12
  br label %533

533:                                              ; preds = %109, %531
  %534 = phi i32 [ %532, %531 ], [ 0, %109 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %110)
  br label %535

535:                                              ; preds = %106, %28, %100, %533, %17
  %536 = phi i32 [ %27, %17 ], [ %107, %106 ], [ %534, %533 ], [ 0, %28 ], [ 2147483647, %100 ]
  ret i32 %536
}

declare i32 @_ZNK5blink13ComputedStyle18ComputedLineHeightEv(%"class.blink::ComputedStyle"*) local_unnamed_addr #3

declare i32 @_ZN5blink14ValueForLengthERKNS_6LengthENS_10LayoutUnitE(%"class.blink::Length"* dereferenceable(8), i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink13RootInlineBox30CollectLeafBoxesInLogicalOrderERN3WTF6VectorIPNS_9InlineBoxELj0ENS1_18PartitionAllocatorEEEPFvPS4_S8_E(%"class.blink::RootInlineBox"*, %"class.WTF::Vector.1918"* dereferenceable(16), void (%"class.blink::InlineBox"**, %"class.blink::InlineBox"**)*) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.blink::InlineBox"*, align 8
  %5 = bitcast %"class.blink::InlineBox"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = bitcast %"class.blink::RootInlineBox"* %0 to %"class.blink::InlineFlowBox"*
  %7 = tail call %"class.blink::InlineBox"* @_ZNK5blink13InlineFlowBox14FirstLeafChildEv(%"class.blink::InlineFlowBox"* %6) #12
  store %"class.blink::InlineBox"* %7, %"class.blink::InlineBox"** %4, align 8
  %8 = icmp eq %"class.blink::InlineBox"* %7, null
  br i1 %8, label %42, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %1, i64 0, i32 0, i32 0, i32 2
  %11 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %1, i64 0, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %1, i64 0, i32 0, i32 0, i32 0
  br label %13

13:                                               ; preds = %9, %38
  %14 = phi %"class.blink::InlineBox"* [ %7, %9 ], [ %40, %38 ]
  %15 = phi i8 [ -128, %9 ], [ %23, %38 ]
  %16 = phi i8 [ 0, %9 ], [ %25, %38 ]
  %17 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %14, i64 0, i32 7, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = lshr i32 %18, 2
  %20 = trunc i32 %19 to i8
  %21 = and i8 %20, 63
  %22 = icmp ult i8 %21, %15
  %23 = select i1 %22, i8 %21, i8 %15
  %24 = icmp ult i8 %16, %21
  %25 = select i1 %24, i8 %21, i8 %16
  %26 = load i32, i32* %10, align 4
  %27 = load i32, i32* %11, align 8
  %28 = icmp eq i32 %26, %27
  br i1 %28, label %37, label %29, !prof !2

29:                                               ; preds = %13
  %30 = ptrtoint %"class.blink::InlineBox"* %14 to i64
  %31 = load %"class.blink::InlineBox"**, %"class.blink::InlineBox"*** %12, align 8
  %32 = zext i32 %26 to i64
  %33 = getelementptr inbounds %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %31, i64 %32
  %34 = bitcast %"class.blink::InlineBox"** %33 to i64*
  store i64 %30, i64* %34, align 8
  %35 = load i32, i32* %10, align 4
  %36 = add i32 %35, 1
  store i32 %36, i32* %10, align 4
  br label %38

37:                                               ; preds = %13
  call void @_ZN3WTF6VectorIPN5blink9InlineBoxELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS3_EEvOT_(%"class.WTF::Vector.1918"* %1, %"class.blink::InlineBox"** nonnull dereferenceable(8) %4) #12
  br label %38

38:                                               ; preds = %29, %37
  %39 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %4, align 8
  %40 = call %"class.blink::InlineBox"* @_ZNK5blink9InlineBox13NextLeafChildEv(%"class.blink::InlineBox"* %39) #12
  store %"class.blink::InlineBox"* %40, %"class.blink::InlineBox"** %4, align 8
  %41 = icmp eq %"class.blink::InlineBox"* %40, null
  br i1 %41, label %42, label %13

42:                                               ; preds = %38, %3
  %43 = phi i8 [ 0, %3 ], [ %25, %38 ]
  %44 = phi i8 [ -128, %3 ], [ %23, %38 ]
  %45 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 4, i32 0
  %46 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %45, align 8
  %47 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %46, i64 0, i32 5, i32 0
  %48 = bitcast %"class.blink::ComputedStyle"** %47 to %"class.blink::ComputedStyleBase"**
  %49 = load %"class.blink::ComputedStyleBase"*, %"class.blink::ComputedStyleBase"** %48, align 8
  %50 = getelementptr inbounds %"class.blink::ComputedStyleBase", %"class.blink::ComputedStyleBase"* %49, i64 0, i32 9
  %51 = bitcast [20 x i8]* %50 to i160*
  %52 = load i160, i160* %51, align 8
  %53 = and i160 %52, 2854495385411919762116571938898990272765493248
  %54 = icmp eq i160 %53, 0
  br i1 %54, label %55, label %127

55:                                               ; preds = %42
  %56 = and i8 %44, 1
  %57 = xor i8 %56, 1
  %58 = add i8 %57, %44
  %59 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %1, i64 0, i32 0, i32 0, i32 0
  %60 = load %"class.blink::InlineBox"**, %"class.blink::InlineBox"*** %59, align 8
  %61 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %1, i64 0, i32 0, i32 0, i32 2
  %62 = load i32, i32* %61, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %60, i64 %63
  %65 = icmp ugt i8 %58, %43
  br i1 %65, label %127, label %66

66:                                               ; preds = %55
  %67 = icmp eq void (%"class.blink::InlineBox"**, %"class.blink::InlineBox"**)* %2, null
  br label %68

68:                                               ; preds = %125, %66
  %69 = phi %"class.blink::InlineBox"** [ %60, %66 ], [ %126, %125 ]
  %70 = phi i8 [ %58, %66 ], [ %123, %125 ]
  %71 = icmp eq %"class.blink::InlineBox"** %69, %64
  br i1 %71, label %122, label %72

72:                                               ; preds = %68, %120
  %73 = phi %"class.blink::InlineBox"** [ %103, %120 ], [ %69, %68 ]
  %74 = icmp eq %"class.blink::InlineBox"** %73, %64
  br i1 %74, label %101, label %75

75:                                               ; preds = %72, %84
  %76 = phi %"class.blink::InlineBox"** [ %85, %84 ], [ %73, %72 ]
  %77 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %76, align 8
  %78 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %77, i64 0, i32 7, i32 0
  %79 = load i32, i32* %78, align 4
  %80 = lshr i32 %79, 2
  %81 = trunc i32 %80 to i8
  %82 = and i8 %81, 63
  %83 = icmp ult i8 %82, %70
  br i1 %83, label %84, label %87

84:                                               ; preds = %75
  %85 = getelementptr inbounds %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %76, i64 1
  %86 = icmp eq %"class.blink::InlineBox"** %85, %64
  br i1 %86, label %101, label %75

87:                                               ; preds = %75
  %88 = icmp eq %"class.blink::InlineBox"** %76, %64
  br i1 %88, label %101, label %89

89:                                               ; preds = %87, %98
  %90 = phi %"class.blink::InlineBox"** [ %99, %98 ], [ %76, %87 ]
  %91 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %90, align 8
  %92 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %91, i64 0, i32 7, i32 0
  %93 = load i32, i32* %92, align 4
  %94 = lshr i32 %93, 2
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 63
  %97 = icmp ult i8 %96, %70
  br i1 %97, label %101, label %98

98:                                               ; preds = %89
  %99 = getelementptr inbounds %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %90, i64 1
  %100 = icmp eq %"class.blink::InlineBox"** %99, %64
  br i1 %100, label %101, label %89

101:                                              ; preds = %84, %89, %98, %72, %87
  %102 = phi %"class.blink::InlineBox"** [ %76, %87 ], [ %64, %72 ], [ %76, %98 ], [ %76, %89 ], [ %64, %84 ]
  %103 = phi %"class.blink::InlineBox"** [ %64, %87 ], [ %64, %72 ], [ %90, %89 ], [ %64, %98 ], [ %64, %84 ]
  br i1 %67, label %105, label %104

104:                                              ; preds = %101
  call void %2(%"class.blink::InlineBox"** %102, %"class.blink::InlineBox"** %103) #12
  br label %120

105:                                              ; preds = %101
  %106 = icmp eq %"class.blink::InlineBox"** %102, %103
  br i1 %106, label %120, label %107

107:                                              ; preds = %105
  %108 = getelementptr inbounds %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %103, i64 -1
  %109 = icmp ugt %"class.blink::InlineBox"** %108, %102
  br i1 %109, label %110, label %120

110:                                              ; preds = %107, %110
  %111 = phi %"class.blink::InlineBox"** [ %118, %110 ], [ %108, %107 ]
  %112 = phi %"class.blink::InlineBox"** [ %117, %110 ], [ %102, %107 ]
  %113 = bitcast %"class.blink::InlineBox"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.blink::InlineBox"** %111 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %113, align 8
  store i64 %114, i64* %115, align 8
  %117 = getelementptr inbounds %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %112, i64 1
  %118 = getelementptr inbounds %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %111, i64 -1
  %119 = icmp ult %"class.blink::InlineBox"** %117, %118
  br i1 %119, label %110, label %120

120:                                              ; preds = %110, %107, %105, %104
  %121 = icmp eq %"class.blink::InlineBox"** %103, %64
  br i1 %121, label %122, label %72

122:                                              ; preds = %120, %68
  %123 = add i8 %70, 1
  %124 = icmp ugt i8 %123, %43
  br i1 %124, label %127, label %125

125:                                              ; preds = %122
  %126 = load %"class.blink::InlineBox"**, %"class.blink::InlineBox"*** %59, align 8
  br label %68

127:                                              ; preds = %122, %55, %42
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::InlineBox"* @_ZNK5blink13RootInlineBox27GetLogicalStartNonPseudoBoxEv(%"class.blink::RootInlineBox"*) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.WTF::Vector.1918", align 8
  %3 = bitcast %"class.WTF::Vector.1918"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #12
  %4 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %2, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 16, i1 false) #12
  call void @_ZNK5blink13RootInlineBox30CollectLeafBoxesInLogicalOrderERN3WTF6VectorIPNS_9InlineBoxELj0ENS1_18PartitionAllocatorEEEPFvPS4_S8_E(%"class.blink::RootInlineBox"* %0, %"class.WTF::Vector.1918"* nonnull dereferenceable(16) %2, void (%"class.blink::InlineBox"**, %"class.blink::InlineBox"**)* null)
  %6 = load %"class.blink::InlineBox"**, %"class.blink::InlineBox"*** %4, align 8
  %7 = load i32, i32* %5, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %6, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %48, label %11

11:                                               ; preds = %1, %42
  %12 = phi %"class.blink::InlineBox"** [ %43, %42 ], [ %6, %1 ]
  %13 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %13, i64 0, i32 4, i32 0
  %15 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %15, i64 0, i32 4
  %17 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %16 to i96*
  %18 = load i96, i96* %17, align 4
  %19 = and i96 %18, 16777216
  %20 = icmp eq i96 %19, 0
  br i1 %20, label %21, label %34

21:                                               ; preds = %11
  %22 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %15, i64 0, i32 6, i32 0, i32 0
  %23 = load %"class.blink::Node"*, %"class.blink::Node"** %22, align 8
  %24 = icmp eq %"class.blink::Node"* %23, null
  br i1 %24, label %34, label %25

25:                                               ; preds = %21
  %26 = bitcast %"class.blink::Node"* %23 to i8 (%"class.blink::Node"*)***
  %27 = load i8 (%"class.blink::Node"*)**, i8 (%"class.blink::Node"*)*** %26, align 8
  %28 = getelementptr inbounds i8 (%"class.blink::Node"*)*, i8 (%"class.blink::Node"*)** %27, i64 34
  %29 = load i8 (%"class.blink::Node"*)*, i8 (%"class.blink::Node"*)** %28, align 8
  %30 = call zeroext i8 %29(%"class.blink::Node"* nonnull %23) #12
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %42

32:                                               ; preds = %25
  %33 = load i96, i96* %17, align 4
  br label %34

34:                                               ; preds = %32, %21, %11
  %35 = phi i96 [ %33, %32 ], [ %18, %11 ], [ %18, %21 ]
  %36 = and i96 %35, 16777216
  %37 = icmp eq i96 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %15, i64 0, i32 6, i32 0, i32 0
  %40 = load %"class.blink::Node"*, %"class.blink::Node"** %39, align 8
  %41 = icmp eq %"class.blink::Node"* %40, null
  br i1 %41, label %42, label %45

42:                                               ; preds = %34, %25, %38
  %43 = getelementptr inbounds %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %12, i64 1
  %44 = icmp eq %"class.blink::InlineBox"** %43, %9
  br i1 %44, label %45, label %11

45:                                               ; preds = %42, %38
  %46 = phi %"class.blink::InlineBox"* [ %13, %38 ], [ null, %42 ]
  %47 = load %"class.blink::InlineBox"**, %"class.blink::InlineBox"*** %4, align 8
  br label %48

48:                                               ; preds = %45, %1
  %49 = phi %"class.blink::InlineBox"** [ %6, %1 ], [ %47, %45 ]
  %50 = phi %"class.blink::InlineBox"* [ null, %1 ], [ %46, %45 ]
  %51 = icmp eq %"class.blink::InlineBox"** %49, null
  %52 = bitcast %"class.blink::InlineBox"** %49 to i8*
  br i1 %51, label %58, label %53, !prof !7

53:                                               ; preds = %48
  %54 = load i32, i32* %5, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %57, label %56, !prof !2

56:                                               ; preds = %53
  store i32 0, i32* %5, align 4
  br label %57

57:                                               ; preds = %56, %53
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %52) #12
  store %"class.blink::InlineBox"** null, %"class.blink::InlineBox"*** %4, align 8
  br label %58

58:                                               ; preds = %48, %57
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #12
  ret %"class.blink::InlineBox"* %50
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::InlineBox"* @_ZNK5blink13RootInlineBox25GetLogicalEndNonPseudoBoxEv(%"class.blink::RootInlineBox"*) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.WTF::Vector.1918", align 8
  %3 = bitcast %"class.WTF::Vector.1918"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #12
  %4 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %2, i64 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %2, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 16, i1 false) #12
  call void @_ZNK5blink13RootInlineBox30CollectLeafBoxesInLogicalOrderERN3WTF6VectorIPNS_9InlineBoxELj0ENS1_18PartitionAllocatorEEEPFvPS4_S8_E(%"class.blink::RootInlineBox"* %0, %"class.WTF::Vector.1918"* nonnull dereferenceable(16) %2, void (%"class.blink::InlineBox"**, %"class.blink::InlineBox"**)* null)
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %46, label %8

8:                                                ; preds = %1, %41
  %9 = phi i32 [ %10, %41 ], [ %6, %1 ]
  %10 = add i32 %9, -1
  %11 = call dereferenceable(8) %"class.blink::InlineBox"** @_ZN3WTF6VectorIPN5blink9InlineBoxELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.1918"* nonnull %2, i32 %10) #12
  %12 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %12, i64 0, i32 4, i32 0
  %14 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %14, i64 0, i32 4
  %16 = bitcast %"class.blink::LayoutObject::LayoutObjectBitfields"* %15 to i96*
  %17 = load i96, i96* %16, align 4
  %18 = and i96 %17, 16777216
  %19 = icmp eq i96 %18, 0
  br i1 %19, label %20, label %33

20:                                               ; preds = %8
  %21 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %14, i64 0, i32 6, i32 0, i32 0
  %22 = load %"class.blink::Node"*, %"class.blink::Node"** %21, align 8
  %23 = icmp eq %"class.blink::Node"* %22, null
  br i1 %23, label %33, label %24

24:                                               ; preds = %20
  %25 = bitcast %"class.blink::Node"* %22 to i8 (%"class.blink::Node"*)***
  %26 = load i8 (%"class.blink::Node"*)**, i8 (%"class.blink::Node"*)*** %25, align 8
  %27 = getelementptr inbounds i8 (%"class.blink::Node"*)*, i8 (%"class.blink::Node"*)** %26, i64 34
  %28 = load i8 (%"class.blink::Node"*)*, i8 (%"class.blink::Node"*)** %27, align 8
  %29 = call zeroext i8 %28(%"class.blink::Node"* nonnull %22) #12
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %41

31:                                               ; preds = %24
  %32 = load i96, i96* %16, align 4
  br label %33

33:                                               ; preds = %31, %20, %8
  %34 = phi i96 [ %32, %31 ], [ %17, %8 ], [ %17, %20 ]
  %35 = and i96 %34, 16777216
  %36 = icmp eq i96 %35, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.blink::LayoutObject", %"class.blink::LayoutObject"* %14, i64 0, i32 6, i32 0, i32 0
  %39 = load %"class.blink::Node"*, %"class.blink::Node"** %38, align 8
  %40 = icmp eq %"class.blink::Node"* %39, null
  br i1 %40, label %41, label %43

41:                                               ; preds = %33, %24, %37
  %42 = icmp eq i32 %10, 0
  br i1 %42, label %46, label %8

43:                                               ; preds = %37
  %44 = call dereferenceable(8) %"class.blink::InlineBox"** @_ZN3WTF6VectorIPN5blink9InlineBoxELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.1918"* nonnull %2, i32 %10) #12
  %45 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %44, align 8
  br label %46

46:                                               ; preds = %41, %1, %43
  %47 = phi %"class.blink::InlineBox"* [ %45, %43 ], [ null, %1 ], [ null, %41 ]
  %48 = load %"class.blink::InlineBox"**, %"class.blink::InlineBox"*** %4, align 8
  %49 = icmp eq %"class.blink::InlineBox"** %48, null
  %50 = bitcast %"class.blink::InlineBox"** %48 to i8*
  br i1 %49, label %56, label %51, !prof !7

51:                                               ; preds = %46
  %52 = load i32, i32* %5, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %55, label %54, !prof !2

54:                                               ; preds = %51
  store i32 0, i32* %5, align 4
  br label %55

55:                                               ; preds = %54, %51
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %50) #12
  store %"class.blink::InlineBox"** null, %"class.blink::InlineBox"*** %4, align 8
  br label %56

56:                                               ; preds = %46, %55
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #12
  ret %"class.blink::InlineBox"* %47
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZNK5blink13RootInlineBox7BoxNameEv(%"class.blink::RootInlineBox"* nocapture readnone) unnamed_addr #5 align 2 {
  ret i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0)
}

declare %"class.WTF::StringImpl"* @_ZNK5blink9InlineBox9DebugNameEv(%"class.blink::InlineBox"*) unnamed_addr #3

declare i32 @_ZNK5blink9InlineBox11OwnerNodeIdEv(%"class.blink::InlineBox"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i8 @_ZNK5blink17DisplayItemClient32VisualRectOutsetForRasterEffectsEv(%"class.blink::DisplayItemClient"*) unnamed_addr #1 comdat align 2 {
  ret i8 0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink9InlineBox11IsLineBreakEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink9InlineBox15IsInlineTextBoxEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink9InlineBox18IsSVGInlineTextBoxEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink9InlineBox18IsSVGInlineFlowBoxEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink9InlineBox18IsSVGRootInlineBoxEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink9InlineBox20VirtualLogicalHeightEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  ret i32 0
}

declare i32 @_ZNK5blink9InlineBox14CaretMinOffsetEv(%"class.blink::InlineBox"*) unnamed_addr #3

declare i32 @_ZNK5blink9InlineBox14CaretMaxOffsetEv(%"class.blink::InlineBox"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink9InlineBox9MarkDirtyEv(%"class.blink::InlineBox"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %0, i64 0, i32 7, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = or i32 %3, 256
  store i32 %4, i32* %2, align 4
  ret void
}

declare void @_ZN5blink9InlineBox14DirtyLineBoxesEv(%"class.blink::InlineBox"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13RootInlineBoxD2Ev(%"class.blink::RootInlineBox"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [39 x i8*] }, { [39 x i8*] }* @_ZTVN5blink13RootInlineBoxE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::Vector.1635"*, %"class.WTF::Vector.1635"** %3, align 8
  store %"class.WTF::Vector.1635"* null, %"class.WTF::Vector.1635"** %3, align 8
  %5 = icmp eq %"class.WTF::Vector.1635"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::Vector.1635", %"class.WTF::Vector.1635"* %4, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.blink::LayoutBox"**, %"class.blink::LayoutBox"*** %7, align 8
  %9 = icmp eq %"class.blink::LayoutBox"** %8, null
  %10 = bitcast %"class.blink::LayoutBox"** %8 to i8*
  br i1 %9, label %17, label %11, !prof !7

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::Vector.1635", %"class.WTF::Vector.1635"* %4, i64 0, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15, !prof !2

15:                                               ; preds = %11
  store i32 0, i32* %12, align 4
  br label %16

16:                                               ; preds = %15, %11
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %10) #12
  store %"class.blink::LayoutBox"** null, %"class.blink::LayoutBox"*** %7, align 8
  br label %17

17:                                               ; preds = %16, %6
  %18 = bitcast %"class.WTF::Vector.1635"* %4 to i8*
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %18) #12
  br label %19

19:                                               ; preds = %1, %17
  %20 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 3, i32 0
  %21 = load %"class.blink::BidiContext"*, %"class.blink::BidiContext"** %20, align 8
  %22 = icmp eq %"class.blink::BidiContext"* %21, null
  br i1 %22, label %29, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::BidiContext", %"class.blink::BidiContext"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw sub i32* %24, i32 1 acq_rel
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %29

27:                                               ; preds = %23
  tail call void @_ZN5blink11BidiContextD2Ev(%"class.blink::BidiContext"* nonnull %21) #12
  %28 = bitcast %"class.blink::BidiContext"* %21 to i8*
  tail call void @free(i8* %28) #12
  br label %29

29:                                               ; preds = %19, %23, %27
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [39 x i8*] }, { [39 x i8*] }* @_ZTVN5blink13InlineFlowBoxE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %30 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %31 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %30, align 8
  store %"struct.blink::SimpleOverflowModel"* null, %"struct.blink::SimpleOverflowModel"** %30, align 8
  %32 = icmp eq %"struct.blink::SimpleOverflowModel"* %31, null
  br i1 %32, label %35, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %34) #13
  br label %35

35:                                               ; preds = %29, %33
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13RootInlineBoxD0Ev(%"class.blink::RootInlineBox"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [39 x i8*] }, { [39 x i8*] }* @_ZTVN5blink13RootInlineBoxE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::Vector.1635"*, %"class.WTF::Vector.1635"** %3, align 8
  store %"class.WTF::Vector.1635"* null, %"class.WTF::Vector.1635"** %3, align 8
  %5 = icmp eq %"class.WTF::Vector.1635"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::Vector.1635", %"class.WTF::Vector.1635"* %4, i64 0, i32 0, i32 0, i32 0
  %8 = load %"class.blink::LayoutBox"**, %"class.blink::LayoutBox"*** %7, align 8
  %9 = icmp eq %"class.blink::LayoutBox"** %8, null
  %10 = bitcast %"class.blink::LayoutBox"** %8 to i8*
  br i1 %9, label %17, label %11, !prof !7

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::Vector.1635", %"class.WTF::Vector.1635"* %4, i64 0, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15, !prof !2

15:                                               ; preds = %11
  store i32 0, i32* %12, align 4
  br label %16

16:                                               ; preds = %15, %11
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %10) #12
  store %"class.blink::LayoutBox"** null, %"class.blink::LayoutBox"*** %7, align 8
  br label %17

17:                                               ; preds = %16, %6
  %18 = bitcast %"class.WTF::Vector.1635"* %4 to i8*
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %18) #12
  br label %19

19:                                               ; preds = %17, %1
  %20 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 3, i32 0
  %21 = load %"class.blink::BidiContext"*, %"class.blink::BidiContext"** %20, align 8
  %22 = icmp eq %"class.blink::BidiContext"* %21, null
  br i1 %22, label %29, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.blink::BidiContext", %"class.blink::BidiContext"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw sub i32* %24, i32 1 acq_rel
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %29

27:                                               ; preds = %23
  tail call void @_ZN5blink11BidiContextD2Ev(%"class.blink::BidiContext"* nonnull %21) #12
  %28 = bitcast %"class.blink::BidiContext"* %21 to i8*
  tail call void @free(i8* %28) #12
  br label %29

29:                                               ; preds = %27, %23, %19
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [39 x i8*] }, { [39 x i8*] }* @_ZTVN5blink13InlineFlowBoxE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %30 = getelementptr inbounds %"class.blink::RootInlineBox", %"class.blink::RootInlineBox"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %31 = load %"struct.blink::SimpleOverflowModel"*, %"struct.blink::SimpleOverflowModel"** %30, align 8
  store %"struct.blink::SimpleOverflowModel"* null, %"struct.blink::SimpleOverflowModel"** %30, align 8
  %32 = icmp eq %"struct.blink::SimpleOverflowModel"* %31, null
  br i1 %32, label %35, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"struct.blink::SimpleOverflowModel", %"struct.blink::SimpleOverflowModel"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %34) #13
  br label %35

35:                                               ; preds = %29, %33
  %36 = bitcast %"class.blink::RootInlineBox"* %0 to i8*
  tail call void @_ZN5blink9InlineBoxdlEPv(i8* %36) #12
  ret void
}

declare void @_ZN5blink13InlineFlowBox10DeleteLineEv(%"class.blink::InlineFlowBox"*) unnamed_addr #3

declare void @_ZN5blink13InlineFlowBox11ExtractLineEv(%"class.blink::InlineFlowBox"*) unnamed_addr #3

declare void @_ZN5blink13InlineFlowBox10AttachLineEv(%"class.blink::InlineFlowBox"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink13InlineFlowBox15IsInlineFlowBoxEv(%"class.blink::InlineFlowBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink13RootInlineBox15IsRootInlineBoxEv(%"class.blink::RootInlineBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13InlineFlowBox14SetConstructedEv(%"class.blink::InlineFlowBox"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 0, i32 7, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = or i32 %3, 2
  store i32 %4, i32* %2, align 4
  %5 = getelementptr inbounds %"class.blink::InlineFlowBox", %"class.blink::InlineFlowBox"* %0, i64 0, i32 2
  %6 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %5, align 8
  %7 = icmp eq %"class.blink::InlineBox"* %6, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %9, %1
  ret void

9:                                                ; preds = %1, %9
  %10 = phi %"class.blink::InlineBox"* [ %16, %9 ], [ %6, %1 ]
  %11 = bitcast %"class.blink::InlineBox"* %10 to void (%"class.blink::InlineBox"*)***
  %12 = load void (%"class.blink::InlineBox"*)**, void (%"class.blink::InlineBox"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %12, i64 21
  %14 = load void (%"class.blink::InlineBox"*)*, void (%"class.blink::InlineBox"*)** %13, align 8
  tail call void %14(%"class.blink::InlineBox"* nonnull %10) #12
  %15 = getelementptr inbounds %"class.blink::InlineBox", %"class.blink::InlineBox"* %10, i64 0, i32 1
  %16 = load %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %15, align 8
  %17 = icmp eq %"class.blink::InlineBox"* %16, null
  br i1 %17, label %8, label %9
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink13InlineFlowBox6IsLeafEv(%"class.blink::InlineFlowBox"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #8

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i32(i32) #9

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #8

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink11BidiContextD2Ev(%"class.blink::BidiContext"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::BidiContext", %"class.blink::BidiContext"* %0, i64 0, i32 2, i32 0
  %3 = load %"class.blink::BidiContext"*, %"class.blink::BidiContext"** %2, align 8
  %4 = icmp eq %"class.blink::BidiContext"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::BidiContext", %"class.blink::BidiContext"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw sub i32* %6, i32 1 acq_rel
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %11

9:                                                ; preds = %5
  tail call void @_ZN5blink11BidiContextD2Ev(%"class.blink::BidiContext"* nonnull %3) #12
  %10 = bitcast %"class.blink::BidiContext"* %3 to i8*
  tail call void @free(i8* %10) #12
  ret void

11:                                               ; preds = %5, %1
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #0

declare zeroext i1 @_ZN5blink16HasEditableStyleERKNS_4NodeE(%"class.blink::Node"* dereferenceable(64)) local_unnamed_addr #3

declare %"class.blink::ComputedStyle"* @_ZNK5blink12LayoutObject29FirstLineStyleWithoutFallbackEv(%"class.blink::LayoutObject"*) local_unnamed_addr #3

declare void @_ZNK5blink6Length22DecrementCalculatedRefEv(%"class.blink::Length"*) local_unnamed_addr #3

declare %"class.blink::FontFallbackList"* @_ZNK5blink4Font22EnsureFontFallbackListEv(%"class.blink::Font"*) local_unnamed_addr #3

declare %"class.blink::SimpleFontData"* @_ZN5blink16FontFallbackList30DeterminePrimarySimpleFontDataERKNS_15FontDescriptionE(%"class.blink::FontFallbackList"*, %"class.blink::FontDescription"* dereferenceable(80)) local_unnamed_addr #3

; Function Attrs: nounwind
declare i64 @lroundf(float) local_unnamed_addr #0

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #0

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.1917"*, %"struct.WTF::KeyValuePair.1917"* } @_ZNK3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE4findERKS2_(%"class.WTF::HashTable.1914"*, %"class.blink::LineLayoutItem"* dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.1917"*, %"struct.WTF::KeyValuePair.1917"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair.1917"* %4, null
  %6 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  br i1 %5, label %71, label %8

8:                                                ; preds = %2
  %9 = add i32 %7, -1
  %10 = zext i32 %9 to i64
  %11 = bitcast %"class.blink::LineLayoutItem"* %1 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = shl i64 %12, 32
  %14 = xor i64 %13, -1
  %15 = add i64 %12, %14
  %16 = lshr i64 %15, 22
  %17 = xor i64 %16, %15
  %18 = shl i64 %17, 13
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 8
  %22 = xor i64 %21, %20
  %23 = mul i64 %22, 9
  %24 = lshr i64 %23, 15
  %25 = xor i64 %24, %23
  %26 = shl i64 %25, 27
  %27 = xor i64 %26, -1
  %28 = add i64 %25, %27
  %29 = lshr i64 %28, 31
  %30 = xor i64 %29, %28
  %31 = trunc i64 %30 to i32
  %32 = and i32 %9, %31
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %4, i64 %33
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %34, i64 0, i32 0, i32 0
  %36 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %35, align 8
  %37 = inttoptr i64 %12 to %"class.blink::LayoutObject"*
  %38 = icmp eq %"class.blink::LayoutObject"* %36, %37
  br i1 %38, label %68, label %39

39:                                               ; preds = %8
  %40 = xor i32 %31, -1
  %41 = lshr i32 %31, 23
  %42 = add i32 %41, %40
  %43 = shl i32 %42, 12
  %44 = xor i32 %43, %42
  %45 = lshr i32 %44, 7
  %46 = xor i32 %45, %44
  %47 = shl i32 %46, 2
  %48 = xor i32 %47, %46
  %49 = lshr i32 %48, 20
  %50 = xor i32 %49, %48
  %51 = or i32 %50, 1
  %52 = zext i32 %51 to i64
  br label %53

53:                                               ; preds = %59, %39
  %54 = phi i64 [ %33, %39 ], [ %63, %59 ]
  %55 = phi i64 [ 0, %39 ], [ %61, %59 ]
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %4, i64 %54, i32 0, i32 0
  %57 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %56, align 8
  %58 = icmp eq %"class.blink::LayoutObject"* %57, null
  br i1 %58, label %71, label %59

59:                                               ; preds = %53
  %60 = icmp eq i64 %55, 0
  %61 = select i1 %60, i64 %52, i64 %55
  %62 = add i64 %61, %54
  %63 = and i64 %62, %10
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %4, i64 %63
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %64, i64 0, i32 0, i32 0
  %66 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %65, align 8
  %67 = icmp eq %"class.blink::LayoutObject"* %66, %37
  br i1 %67, label %68, label %53

68:                                               ; preds = %59, %8
  %69 = phi %"struct.WTF::KeyValuePair.1917"* [ %34, %8 ], [ %64, %59 ]
  %70 = icmp eq %"struct.WTF::KeyValuePair.1917"* %69, null
  br i1 %70, label %71, label %74

71:                                               ; preds = %53, %68, %2
  %72 = zext i32 %7 to i64
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %4, i64 %72
  br label %77

74:                                               ; preds = %68
  %75 = zext i32 %7 to i64
  %76 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %4, i64 %75
  br label %77

77:                                               ; preds = %71, %74
  %78 = phi %"struct.WTF::KeyValuePair.1917"* [ %69, %74 ], [ %73, %71 ]
  %79 = phi %"struct.WTF::KeyValuePair.1917"* [ %76, %74 ], [ %73, %71 ]
  %80 = insertvalue { %"struct.WTF::KeyValuePair.1917"*, %"struct.WTF::KeyValuePair.1917"* } undef, %"struct.WTF::KeyValuePair.1917"* %78, 0
  %81 = insertvalue { %"struct.WTF::KeyValuePair.1917"*, %"struct.WTF::KeyValuePair.1917"* } %80, %"struct.WTF::KeyValuePair.1917"* %79, 1
  ret { %"struct.WTF::KeyValuePair.1917"*, %"struct.WTF::KeyValuePair.1917"* } %81
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.1917"*, i8 } @_ZN3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISB_S6_SC_EERS2_RiEENS_18HashTableAddResultISD_S4_EEOT0_OT1_(%"class.WTF::HashTable.1914"*, %"class.blink::LineLayoutItem"* dereferenceable(8), i32* dereferenceable(4)) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.1917"*, %"struct.WTF::KeyValuePair.1917"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.1917"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.1917"* @_ZN3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable.1914"* %0, %"struct.WTF::KeyValuePair.1917"* null)
  %9 = load %"struct.WTF::KeyValuePair.1917"*, %"struct.WTF::KeyValuePair.1917"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.1917"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = bitcast %"class.blink::LineLayoutItem"* %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %17, 32
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 22
  %22 = xor i64 %21, %20
  %23 = shl i64 %22, 13
  %24 = xor i64 %23, -1
  %25 = add i64 %22, %24
  %26 = lshr i64 %25, 8
  %27 = xor i64 %26, %25
  %28 = mul i64 %27, 9
  %29 = lshr i64 %28, 15
  %30 = xor i64 %29, %28
  %31 = shl i64 %30, 27
  %32 = xor i64 %31, -1
  %33 = add i64 %30, %32
  %34 = lshr i64 %33, 31
  %35 = xor i64 %34, %33
  %36 = trunc i64 %35 to i32
  %37 = and i32 %14, %36
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %11, i64 %38
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %39, i64 0, i32 0, i32 0
  %41 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %40, align 8
  %42 = icmp eq %"class.blink::LayoutObject"* %41, null
  %43 = inttoptr i64 %17 to %"class.blink::LayoutObject"*
  br i1 %42, label %87, label %44

44:                                               ; preds = %10
  %45 = xor i32 %36, -1
  %46 = lshr i32 %36, 23
  %47 = add i32 %46, %45
  %48 = shl i32 %47, 12
  %49 = xor i32 %48, %47
  %50 = lshr i32 %49, 7
  %51 = xor i32 %50, %49
  %52 = shl i32 %51, 2
  %53 = xor i32 %52, %51
  %54 = lshr i32 %53, 20
  %55 = xor i32 %54, %53
  %56 = or i32 %55, 1
  %57 = zext i32 %56 to i64
  br label %58

58:                                               ; preds = %44, %65
  %59 = phi %"class.blink::LayoutObject"* [ %41, %44 ], [ %74, %65 ]
  %60 = phi %"struct.WTF::KeyValuePair.1917"* [ %39, %44 ], [ %72, %65 ]
  %61 = phi %"struct.WTF::KeyValuePair.1917"* [ null, %44 ], [ %67, %65 ]
  %62 = phi i64 [ %38, %44 ], [ %71, %65 ]
  %63 = phi i64 [ 0, %44 ], [ %69, %65 ]
  %64 = icmp eq %"class.blink::LayoutObject"* %59, %43
  br i1 %64, label %104, label %65

65:                                               ; preds = %58
  %66 = icmp eq %"class.blink::LayoutObject"* %59, inttoptr (i64 -1 to %"class.blink::LayoutObject"*)
  %67 = select i1 %66, %"struct.WTF::KeyValuePair.1917"* %60, %"struct.WTF::KeyValuePair.1917"* %61
  %68 = icmp eq i64 %63, 0
  %69 = select i1 %68, i64 %57, i64 %63
  %70 = add i64 %69, %62
  %71 = and i64 %70, %15
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %11, i64 %71
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %72, i64 0, i32 0, i32 0
  %74 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %73, align 8
  %75 = icmp eq %"class.blink::LayoutObject"* %74, null
  br i1 %75, label %76, label %58

76:                                               ; preds = %65
  %77 = icmp eq %"struct.WTF::KeyValuePair.1917"* %67, null
  br i1 %77, label %87, label %78

78:                                               ; preds = %76
  %79 = bitcast %"struct.WTF::KeyValuePair.1917"* %67 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %79, i8 0, i64 16, i1 false) #12
  %80 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %0, i64 0, i32 3
  %81 = load i32, i32* %80, align 8
  %82 = add i32 %81, 2147483647
  %83 = and i32 %82, 2147483647
  %84 = and i32 %81, -2147483648
  %85 = or i32 %83, %84
  store i32 %85, i32* %80, align 8
  %86 = load i64, i64* %16, align 8
  br label %87

87:                                               ; preds = %10, %76, %78
  %88 = phi i64 [ %86, %78 ], [ %17, %76 ], [ %17, %10 ]
  %89 = phi %"struct.WTF::KeyValuePair.1917"* [ %67, %78 ], [ %72, %76 ], [ %39, %10 ]
  %90 = bitcast %"struct.WTF::KeyValuePair.1917"* %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %89, i64 0, i32 1
  %92 = load i32, i32* %2, align 4
  store i32 %92, i32* %91, align 4
  %93 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %0, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = add i32 %94, 1
  store i32 %95, i32* %93, align 4
  %96 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %0, i64 0, i32 3
  %97 = load i32, i32* %96, align 8
  %98 = add i32 %97, %95
  %99 = shl i32 %98, 1
  %100 = load i32, i32* %12, align 8
  %101 = icmp ult i32 %99, %100
  br i1 %101, label %104, label %102

102:                                              ; preds = %87
  %103 = tail call %"struct.WTF::KeyValuePair.1917"* @_ZN3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable.1914"* %0, %"struct.WTF::KeyValuePair.1917"* %89)
  br label %104

104:                                              ; preds = %58, %87, %102
  %105 = phi i8 [ 1, %87 ], [ 1, %102 ], [ 0, %58 ]
  %106 = phi %"struct.WTF::KeyValuePair.1917"* [ %89, %87 ], [ %103, %102 ], [ %60, %58 ]
  %107 = insertvalue { %"struct.WTF::KeyValuePair.1917"*, i8 } undef, %"struct.WTF::KeyValuePair.1917"* %106, 0
  %108 = insertvalue { %"struct.WTF::KeyValuePair.1917"*, i8 } %107, i8 %105, 1
  ret { %"struct.WTF::KeyValuePair.1917"*, i8 } %108
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.1917"* @_ZN3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable.1914"*, %"struct.WTF::KeyValuePair.1917"*) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #12
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #12
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* %22, i8* %23) #12
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.4, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #12
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #12
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #12
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIN5blink14LineLayoutItemEiEEEEPKcv, i64 0, i64 0)) #12
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #12
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair.1917"*
  %37 = call %"struct.WTF::KeyValuePair.1917"* @_ZN3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSE_(%"class.WTF::HashTable.1914"* %0, %"struct.WTF::KeyValuePair.1917"* %36, i32 %32, %"struct.WTF::KeyValuePair.1917"* %1) #12
  ret %"struct.WTF::KeyValuePair.1917"* %37
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.1917"* @_ZN3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSE_(%"class.WTF::HashTable.1914"*, %"struct.WTF::KeyValuePair.1917"*, i32, %"struct.WTF::KeyValuePair.1917"*) local_unnamed_addr #1 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable.1914", align 8
  %6 = bitcast %"class.WTF::HashTable.1914"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable.1914"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair.1917"* %1, %"struct.WTF::KeyValuePair.1917"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.WTF::KeyValuePair.1917"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable.1914"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable.1914"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.WTF::KeyValuePair.1917"*, %"struct.WTF::KeyValuePair.1917"** %15, align 8
  %23 = ptrtoint %"struct.WTF::KeyValuePair.1917"* %22 to i64
  br label %42

24:                                               ; preds = %64
  %25 = bitcast %"class.WTF::HashTable.1914"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable.1914"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %65, %24 ]
  %33 = phi %"struct.WTF::KeyValuePair.1917"* [ null, %16 ], [ %68, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %66, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = icmp eq i64 %32, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %28
  %37 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %37) #12
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %38

38:                                               ; preds = %28, %36
  %39 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %0, i64 0, i32 3
  %40 = load i32, i32* %39, align 8
  %41 = and i32 %40, -2147483648
  store i32 %41, i32* %39, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #12
  ret %"struct.WTF::KeyValuePair.1917"* %33

42:                                               ; preds = %21, %64
  %43 = phi i64 [ %65, %64 ], [ %23, %21 ]
  %44 = phi i32 [ %66, %64 ], [ %13, %21 ]
  %45 = phi %"struct.WTF::KeyValuePair.1917"* [ %67, %64 ], [ %22, %21 ]
  %46 = phi %"struct.WTF::KeyValuePair.1917"* [ %68, %64 ], [ null, %21 ]
  %47 = phi i32 [ %69, %64 ], [ 0, %21 ]
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %45, i64 %48
  %50 = bitcast %"struct.WTF::KeyValuePair.1917"* %49 to i64*
  %51 = load i64, i64* %50, align 8
  switch i64 %51, label %52 [
    i64 -1, label %64
    i64 0, label %64
  ]

52:                                               ; preds = %42
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %49, i64 0, i32 0
  %54 = call { %"struct.WTF::KeyValuePair.1917"*, i8 } @_ZN3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE16LookupForWritingERKS2_(%"class.WTF::HashTable.1914"* nonnull %5, %"class.blink::LineLayoutItem"* dereferenceable(8) %53) #12
  %55 = extractvalue { %"struct.WTF::KeyValuePair.1917"*, i8 } %54, 0
  %56 = bitcast %"struct.WTF::KeyValuePair.1917"* %55 to i8*
  %57 = bitcast %"struct.WTF::KeyValuePair.1917"* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 16, i1 false) #12
  %58 = load %"struct.WTF::KeyValuePair.1917"*, %"struct.WTF::KeyValuePair.1917"** %15, align 8
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %58, i64 %48
  %60 = icmp eq %"struct.WTF::KeyValuePair.1917"* %59, %3
  %61 = select i1 %60, %"struct.WTF::KeyValuePair.1917"* %55, %"struct.WTF::KeyValuePair.1917"* %46
  %62 = load i32, i32* %12, align 8
  %63 = ptrtoint %"struct.WTF::KeyValuePair.1917"* %58 to i64
  br label %64

64:                                               ; preds = %42, %42, %52
  %65 = phi i64 [ %43, %42 ], [ %63, %52 ], [ %43, %42 ]
  %66 = phi i32 [ %44, %42 ], [ %62, %52 ], [ %44, %42 ]
  %67 = phi %"struct.WTF::KeyValuePair.1917"* [ %45, %42 ], [ %58, %52 ], [ %45, %42 ]
  %68 = phi %"struct.WTF::KeyValuePair.1917"* [ %46, %42 ], [ %61, %52 ], [ %46, %42 ]
  %69 = add i32 %47, 1
  %70 = icmp eq i32 %69, %66
  br i1 %70, label %24, label %42
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.1917"*, i8 } @_ZN3WTF9HashTableIN5blink14LineLayoutItemENS_12KeyValuePairIS2_iEENS_24KeyValuePairKeyExtractorENS2_18LineLayoutItemHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_IiEEEES9_NS_18PartitionAllocatorEE16LookupForWritingERKS2_(%"class.WTF::HashTable.1914"*, %"class.blink::LineLayoutItem"* dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.1917"*, %"struct.WTF::KeyValuePair.1917"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.1914", %"class.WTF::HashTable.1914"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = bitcast %"class.blink::LineLayoutItem"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = shl i64 %10, 32
  %12 = xor i64 %11, -1
  %13 = add i64 %10, %12
  %14 = lshr i64 %13, 22
  %15 = xor i64 %14, %13
  %16 = shl i64 %15, 13
  %17 = xor i64 %16, -1
  %18 = add i64 %15, %17
  %19 = lshr i64 %18, 8
  %20 = xor i64 %19, %18
  %21 = mul i64 %20, 9
  %22 = lshr i64 %21, 15
  %23 = xor i64 %22, %21
  %24 = shl i64 %23, 27
  %25 = xor i64 %24, -1
  %26 = add i64 %23, %25
  %27 = lshr i64 %26, 31
  %28 = xor i64 %27, %26
  %29 = trunc i64 %28 to i32
  %30 = and i32 %7, %29
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %4, i64 %31
  %33 = ptrtoint %"struct.WTF::KeyValuePair.1917"* %32 to i64
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %32, i64 0, i32 0, i32 0
  %35 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %34, align 8
  %36 = icmp eq %"class.blink::LayoutObject"* %35, null
  %37 = inttoptr i64 %10 to %"class.blink::LayoutObject"*
  br i1 %36, label %55, label %38

38:                                               ; preds = %2
  %39 = xor i32 %29, -1
  %40 = lshr i32 %29, 23
  %41 = add i32 %40, %39
  %42 = shl i32 %41, 12
  %43 = xor i32 %42, %41
  %44 = lshr i32 %43, 7
  %45 = xor i32 %44, %43
  %46 = shl i32 %45, 2
  %47 = xor i32 %46, %45
  %48 = lshr i32 %47, 20
  %49 = xor i32 %48, %47
  %50 = or i32 %49, 1
  %51 = zext i32 %50 to i64
  br label %61

52:                                               ; preds = %70
  %53 = ptrtoint %"struct.WTF::KeyValuePair.1917"* %77 to i64
  %54 = inttoptr i64 %72 to %"struct.WTF::KeyValuePair.1917"*
  br label %55

55:                                               ; preds = %52, %2
  %56 = phi i64 [ %53, %52 ], [ %33, %2 ]
  %57 = phi %"struct.WTF::KeyValuePair.1917"* [ %54, %52 ], [ null, %2 ]
  %58 = icmp eq %"struct.WTF::KeyValuePair.1917"* %57, null
  %59 = ptrtoint %"struct.WTF::KeyValuePair.1917"* %57 to i64
  %60 = select i1 %58, i64 %56, i64 %59
  br label %82

61:                                               ; preds = %70, %38
  %62 = phi i64 [ 0, %38 ], [ %72, %70 ]
  %63 = phi %"class.blink::LayoutObject"* [ %35, %38 ], [ %80, %70 ]
  %64 = phi i64 [ %33, %38 ], [ %78, %70 ]
  %65 = phi i64 [ %31, %38 ], [ %76, %70 ]
  %66 = phi i64 [ 0, %38 ], [ %74, %70 ]
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %4, i64 %65, i32 0, i32 0
  %68 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %67, align 8
  %69 = icmp eq %"class.blink::LayoutObject"* %68, %37
  br i1 %69, label %82, label %70

70:                                               ; preds = %61
  %71 = icmp eq %"class.blink::LayoutObject"* %63, inttoptr (i64 -1 to %"class.blink::LayoutObject"*)
  %72 = select i1 %71, i64 %64, i64 %62
  %73 = icmp eq i64 %66, 0
  %74 = select i1 %73, i64 %51, i64 %66
  %75 = add i64 %74, %65
  %76 = and i64 %75, %8
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %4, i64 %76
  %78 = ptrtoint %"struct.WTF::KeyValuePair.1917"* %77 to i64
  %79 = getelementptr inbounds %"struct.WTF::KeyValuePair.1917", %"struct.WTF::KeyValuePair.1917"* %77, i64 0, i32 0, i32 0
  %80 = load %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"** %79, align 8
  %81 = icmp eq %"class.blink::LayoutObject"* %80, null
  br i1 %81, label %52, label %61

82:                                               ; preds = %61, %55
  %83 = phi i64 [ %60, %55 ], [ %64, %61 ]
  %84 = phi i8 [ 0, %55 ], [ 1, %61 ]
  %85 = inttoptr i64 %83 to %"struct.WTF::KeyValuePair.1917"*
  %86 = insertvalue { %"struct.WTF::KeyValuePair.1917"*, i8 } undef, %"struct.WTF::KeyValuePair.1917"* %85, 0
  %87 = insertvalue { %"struct.WTF::KeyValuePair.1917"*, i8 } %86, i8 %84, 1
  ret { %"struct.WTF::KeyValuePair.1917"*, i8 } %87
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.1693"*, %"struct.WTF::KeyValuePair.1693"* } @_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE4findERKS4_(%"class.WTF::HashTable.1690"*, %"class.blink::RootInlineBox"** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.1693"*, %"struct.WTF::KeyValuePair.1693"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair.1693"* %4, null
  %6 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  br i1 %5, label %70, label %8

8:                                                ; preds = %2
  %9 = add i32 %7, -1
  %10 = zext i32 %9 to i64
  %11 = bitcast %"class.blink::RootInlineBox"** %1 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = shl i64 %12, 32
  %14 = xor i64 %13, -1
  %15 = add i64 %12, %14
  %16 = lshr i64 %15, 22
  %17 = xor i64 %16, %15
  %18 = shl i64 %17, 13
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 8
  %22 = xor i64 %21, %20
  %23 = mul i64 %22, 9
  %24 = lshr i64 %23, 15
  %25 = xor i64 %24, %23
  %26 = shl i64 %25, 27
  %27 = xor i64 %26, -1
  %28 = add i64 %25, %27
  %29 = lshr i64 %28, 31
  %30 = xor i64 %29, %28
  %31 = trunc i64 %30 to i32
  %32 = and i32 %9, %31
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %4, i64 %33
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %34, i64 0, i32 0
  %36 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %35, align 8
  %37 = inttoptr i64 %12 to %"class.blink::RootInlineBox"*
  %38 = icmp eq %"class.blink::RootInlineBox"* %36, %37
  br i1 %38, label %67, label %39

39:                                               ; preds = %8
  %40 = xor i32 %31, -1
  %41 = lshr i32 %31, 23
  %42 = add i32 %41, %40
  %43 = shl i32 %42, 12
  %44 = xor i32 %43, %42
  %45 = lshr i32 %44, 7
  %46 = xor i32 %45, %44
  %47 = shl i32 %46, 2
  %48 = xor i32 %47, %46
  %49 = lshr i32 %48, 20
  %50 = xor i32 %49, %48
  %51 = or i32 %50, 1
  %52 = zext i32 %51 to i64
  br label %53

53:                                               ; preds = %58, %39
  %54 = phi %"class.blink::RootInlineBox"* [ %36, %39 ], [ %65, %58 ]
  %55 = phi i64 [ %33, %39 ], [ %62, %58 ]
  %56 = phi i64 [ 0, %39 ], [ %60, %58 ]
  %57 = icmp eq %"class.blink::RootInlineBox"* %54, null
  br i1 %57, label %70, label %58

58:                                               ; preds = %53
  %59 = icmp eq i64 %56, 0
  %60 = select i1 %59, i64 %52, i64 %56
  %61 = add i64 %60, %55
  %62 = and i64 %61, %10
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %4, i64 %62
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %63, i64 0, i32 0
  %65 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %64, align 8
  %66 = icmp eq %"class.blink::RootInlineBox"* %65, %37
  br i1 %66, label %67, label %53

67:                                               ; preds = %58, %8
  %68 = phi %"struct.WTF::KeyValuePair.1693"* [ %34, %8 ], [ %63, %58 ]
  %69 = icmp eq %"struct.WTF::KeyValuePair.1693"* %68, null
  br i1 %69, label %70, label %73

70:                                               ; preds = %53, %67, %2
  %71 = zext i32 %7 to i64
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %4, i64 %71
  br label %76

73:                                               ; preds = %67
  %74 = zext i32 %7 to i64
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %4, i64 %74
  br label %76

76:                                               ; preds = %70, %73
  %77 = phi %"struct.WTF::KeyValuePair.1693"* [ %68, %73 ], [ %72, %70 ]
  %78 = phi %"struct.WTF::KeyValuePair.1693"* [ %75, %73 ], [ %72, %70 ]
  %79 = insertvalue { %"struct.WTF::KeyValuePair.1693"*, %"struct.WTF::KeyValuePair.1693"* } undef, %"struct.WTF::KeyValuePair.1693"* %77, 0
  %80 = insertvalue { %"struct.WTF::KeyValuePair.1693"*, %"struct.WTF::KeyValuePair.1693"* } %79, %"struct.WTF::KeyValuePair.1693"* %78, 1
  ret { %"struct.WTF::KeyValuePair.1693"*, %"struct.WTF::KeyValuePair.1693"* } %80
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.1693"* @_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE8RehashToEPS8_jSJ_(%"class.WTF::HashTable.1690"*, %"struct.WTF::KeyValuePair.1693"*, i32, %"struct.WTF::KeyValuePair.1693"*) local_unnamed_addr #1 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable.1690", align 8
  %6 = bitcast %"class.WTF::HashTable.1690"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable.1690"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair.1693"* %1, %"struct.WTF::KeyValuePair.1693"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.WTF::KeyValuePair.1693"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable.1690"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable.1690"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.WTF::KeyValuePair.1693"*, %"struct.WTF::KeyValuePair.1693"** %15, align 8
  %23 = ptrtoint %"struct.WTF::KeyValuePair.1693"* %22 to i64
  br label %42

24:                                               ; preds = %64
  %25 = bitcast %"class.WTF::HashTable.1690"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable.1690"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %65, %24 ]
  %33 = phi %"struct.WTF::KeyValuePair.1693"* [ null, %16 ], [ %68, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %66, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = icmp eq i64 %32, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %28
  %37 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %37) #12
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %38

38:                                               ; preds = %28, %36
  %39 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %0, i64 0, i32 3
  %40 = load i32, i32* %39, align 8
  %41 = and i32 %40, -2147483648
  store i32 %41, i32* %39, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #12
  ret %"struct.WTF::KeyValuePair.1693"* %33

42:                                               ; preds = %21, %64
  %43 = phi i64 [ %65, %64 ], [ %23, %21 ]
  %44 = phi i32 [ %66, %64 ], [ %13, %21 ]
  %45 = phi %"struct.WTF::KeyValuePair.1693"* [ %67, %64 ], [ %22, %21 ]
  %46 = phi %"struct.WTF::KeyValuePair.1693"* [ %68, %64 ], [ null, %21 ]
  %47 = phi i32 [ %69, %64 ], [ 0, %21 ]
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %45, i64 %48
  %50 = bitcast %"struct.WTF::KeyValuePair.1693"* %49 to i64*
  %51 = load i64, i64* %50, align 8
  switch i64 %51, label %52 [
    i64 -1, label %64
    i64 0, label %64
  ]

52:                                               ; preds = %42
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %49, i64 0, i32 0
  %54 = call { %"struct.WTF::KeyValuePair.1693"*, i8 } @_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE16LookupForWritingERKS4_(%"class.WTF::HashTable.1690"* nonnull %5, %"class.blink::RootInlineBox"** dereferenceable(8) %53) #12
  %55 = extractvalue { %"struct.WTF::KeyValuePair.1693"*, i8 } %54, 0
  %56 = bitcast %"struct.WTF::KeyValuePair.1693"* %55 to i8*
  %57 = bitcast %"struct.WTF::KeyValuePair.1693"* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 16, i1 false) #12
  %58 = load %"struct.WTF::KeyValuePair.1693"*, %"struct.WTF::KeyValuePair.1693"** %15, align 8
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %58, i64 %48
  %60 = icmp eq %"struct.WTF::KeyValuePair.1693"* %59, %3
  %61 = select i1 %60, %"struct.WTF::KeyValuePair.1693"* %55, %"struct.WTF::KeyValuePair.1693"* %46
  %62 = load i32, i32* %12, align 8
  %63 = ptrtoint %"struct.WTF::KeyValuePair.1693"* %58 to i64
  br label %64

64:                                               ; preds = %42, %42, %52
  %65 = phi i64 [ %43, %42 ], [ %63, %52 ], [ %43, %42 ]
  %66 = phi i32 [ %44, %42 ], [ %62, %52 ], [ %44, %42 ]
  %67 = phi %"struct.WTF::KeyValuePair.1693"* [ %45, %42 ], [ %58, %52 ], [ %45, %42 ]
  %68 = phi %"struct.WTF::KeyValuePair.1693"* [ %46, %42 ], [ %61, %52 ], [ %46, %42 ]
  %69 = add i32 %47, 1
  %70 = icmp eq i32 %69, %66
  br i1 %70, label %24, label %42
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.1693"*, i8 } @_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE16LookupForWritingERKS4_(%"class.WTF::HashTable.1690"*, %"class.blink::RootInlineBox"** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.1693"*, %"struct.WTF::KeyValuePair.1693"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = bitcast %"class.blink::RootInlineBox"** %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = shl i64 %10, 32
  %12 = xor i64 %11, -1
  %13 = add i64 %10, %12
  %14 = lshr i64 %13, 22
  %15 = xor i64 %14, %13
  %16 = shl i64 %15, 13
  %17 = xor i64 %16, -1
  %18 = add i64 %15, %17
  %19 = lshr i64 %18, 8
  %20 = xor i64 %19, %18
  %21 = mul i64 %20, 9
  %22 = lshr i64 %21, 15
  %23 = xor i64 %22, %21
  %24 = shl i64 %23, 27
  %25 = xor i64 %24, -1
  %26 = add i64 %23, %25
  %27 = lshr i64 %26, 31
  %28 = xor i64 %27, %26
  %29 = trunc i64 %28 to i32
  %30 = and i32 %7, %29
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %4, i64 %31
  %33 = ptrtoint %"struct.WTF::KeyValuePair.1693"* %32 to i64
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %32, i64 0, i32 0
  %35 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %34, align 8
  %36 = icmp eq %"class.blink::RootInlineBox"* %35, null
  %37 = inttoptr i64 %10 to %"class.blink::RootInlineBox"*
  br i1 %36, label %55, label %38

38:                                               ; preds = %2
  %39 = xor i32 %29, -1
  %40 = lshr i32 %29, 23
  %41 = add i32 %40, %39
  %42 = shl i32 %41, 12
  %43 = xor i32 %42, %41
  %44 = lshr i32 %43, 7
  %45 = xor i32 %44, %43
  %46 = shl i32 %45, 2
  %47 = xor i32 %46, %45
  %48 = lshr i32 %47, 20
  %49 = xor i32 %48, %47
  %50 = or i32 %49, 1
  %51 = zext i32 %50 to i64
  br label %61

52:                                               ; preds = %68
  %53 = ptrtoint %"struct.WTF::KeyValuePair.1693"* %75 to i64
  %54 = inttoptr i64 %70 to %"struct.WTF::KeyValuePair.1693"*
  br label %55

55:                                               ; preds = %52, %2
  %56 = phi i64 [ %53, %52 ], [ %33, %2 ]
  %57 = phi %"struct.WTF::KeyValuePair.1693"* [ %54, %52 ], [ null, %2 ]
  %58 = icmp eq %"struct.WTF::KeyValuePair.1693"* %57, null
  %59 = ptrtoint %"struct.WTF::KeyValuePair.1693"* %57 to i64
  %60 = select i1 %58, i64 %56, i64 %59
  br label %80

61:                                               ; preds = %68, %38
  %62 = phi i64 [ 0, %38 ], [ %70, %68 ]
  %63 = phi %"class.blink::RootInlineBox"* [ %35, %38 ], [ %78, %68 ]
  %64 = phi i64 [ %33, %38 ], [ %76, %68 ]
  %65 = phi i64 [ %31, %38 ], [ %74, %68 ]
  %66 = phi i64 [ 0, %38 ], [ %72, %68 ]
  %67 = icmp eq %"class.blink::RootInlineBox"* %63, %37
  br i1 %67, label %80, label %68

68:                                               ; preds = %61
  %69 = icmp eq %"class.blink::RootInlineBox"* %63, inttoptr (i64 -1 to %"class.blink::RootInlineBox"*)
  %70 = select i1 %69, i64 %64, i64 %62
  %71 = icmp eq i64 %66, 0
  %72 = select i1 %71, i64 %51, i64 %66
  %73 = add i64 %72, %65
  %74 = and i64 %73, %8
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %4, i64 %74
  %76 = ptrtoint %"struct.WTF::KeyValuePair.1693"* %75 to i64
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %75, i64 0, i32 0
  %78 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %77, align 8
  %79 = icmp eq %"class.blink::RootInlineBox"* %78, null
  br i1 %79, label %52, label %61

80:                                               ; preds = %61, %55
  %81 = phi i64 [ %60, %55 ], [ %64, %61 ]
  %82 = phi i8 [ 0, %55 ], [ 1, %61 ]
  %83 = inttoptr i64 %81 to %"struct.WTF::KeyValuePair.1693"*
  %84 = insertvalue { %"struct.WTF::KeyValuePair.1693"*, i8 } undef, %"struct.WTF::KeyValuePair.1693"* %83, 0
  %85 = insertvalue { %"struct.WTF::KeyValuePair.1693"*, i8 } %84, i8 %82, 1
  ret { %"struct.WTF::KeyValuePair.1693"*, i8 } %85
}

declare i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.1693"*, i8 } @_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISG_SB_SH_EEPS2_RS7_EENS_18HashTableAddResultISI_S8_EEOT0_OT1_(%"class.WTF::HashTable.1690"*, %"class.blink::RootInlineBox"** dereferenceable(8), %"class.blink::EllipsisBox"** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.1693"*, %"struct.WTF::KeyValuePair.1693"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.1693"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.1693"* @_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE6ExpandEPS8_(%"class.WTF::HashTable.1690"* %0, %"struct.WTF::KeyValuePair.1693"* null)
  %9 = load %"struct.WTF::KeyValuePair.1693"*, %"struct.WTF::KeyValuePair.1693"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.1693"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = bitcast %"class.blink::RootInlineBox"** %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %17, 32
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 22
  %22 = xor i64 %21, %20
  %23 = shl i64 %22, 13
  %24 = xor i64 %23, -1
  %25 = add i64 %22, %24
  %26 = lshr i64 %25, 8
  %27 = xor i64 %26, %25
  %28 = mul i64 %27, 9
  %29 = lshr i64 %28, 15
  %30 = xor i64 %29, %28
  %31 = shl i64 %30, 27
  %32 = xor i64 %31, -1
  %33 = add i64 %30, %32
  %34 = lshr i64 %33, 31
  %35 = xor i64 %34, %33
  %36 = trunc i64 %35 to i32
  %37 = and i32 %14, %36
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %11, i64 %38
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %39, i64 0, i32 0
  %41 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %40, align 8
  %42 = icmp eq %"class.blink::RootInlineBox"* %41, null
  %43 = inttoptr i64 %17 to %"class.blink::RootInlineBox"*
  br i1 %42, label %87, label %44

44:                                               ; preds = %10
  %45 = xor i32 %36, -1
  %46 = lshr i32 %36, 23
  %47 = add i32 %46, %45
  %48 = shl i32 %47, 12
  %49 = xor i32 %48, %47
  %50 = lshr i32 %49, 7
  %51 = xor i32 %50, %49
  %52 = shl i32 %51, 2
  %53 = xor i32 %52, %51
  %54 = lshr i32 %53, 20
  %55 = xor i32 %54, %53
  %56 = or i32 %55, 1
  %57 = zext i32 %56 to i64
  br label %58

58:                                               ; preds = %44, %65
  %59 = phi %"class.blink::RootInlineBox"* [ %41, %44 ], [ %74, %65 ]
  %60 = phi %"struct.WTF::KeyValuePair.1693"* [ %39, %44 ], [ %72, %65 ]
  %61 = phi %"struct.WTF::KeyValuePair.1693"* [ null, %44 ], [ %67, %65 ]
  %62 = phi i64 [ %38, %44 ], [ %71, %65 ]
  %63 = phi i64 [ 0, %44 ], [ %69, %65 ]
  %64 = icmp eq %"class.blink::RootInlineBox"* %59, %43
  br i1 %64, label %106, label %65

65:                                               ; preds = %58
  %66 = icmp eq %"class.blink::RootInlineBox"* %59, inttoptr (i64 -1 to %"class.blink::RootInlineBox"*)
  %67 = select i1 %66, %"struct.WTF::KeyValuePair.1693"* %60, %"struct.WTF::KeyValuePair.1693"* %61
  %68 = icmp eq i64 %63, 0
  %69 = select i1 %68, i64 %57, i64 %63
  %70 = add i64 %69, %62
  %71 = and i64 %70, %15
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %11, i64 %71
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %72, i64 0, i32 0
  %74 = load %"class.blink::RootInlineBox"*, %"class.blink::RootInlineBox"** %73, align 8
  %75 = icmp eq %"class.blink::RootInlineBox"* %74, null
  br i1 %75, label %76, label %58

76:                                               ; preds = %65
  %77 = icmp eq %"struct.WTF::KeyValuePair.1693"* %67, null
  br i1 %77, label %87, label %78

78:                                               ; preds = %76
  %79 = bitcast %"struct.WTF::KeyValuePair.1693"* %67 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %79, i8 0, i64 16, i1 false) #12
  %80 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %0, i64 0, i32 3
  %81 = load i32, i32* %80, align 8
  %82 = add i32 %81, 2147483647
  %83 = and i32 %82, 2147483647
  %84 = and i32 %81, -2147483648
  %85 = or i32 %83, %84
  store i32 %85, i32* %80, align 8
  %86 = load i64, i64* %16, align 8
  br label %87

87:                                               ; preds = %10, %76, %78
  %88 = phi i64 [ %86, %78 ], [ %17, %76 ], [ %17, %10 ]
  %89 = phi %"struct.WTF::KeyValuePair.1693"* [ %67, %78 ], [ %72, %76 ], [ %39, %10 ]
  %90 = bitcast %"struct.WTF::KeyValuePair.1693"* %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = getelementptr inbounds %"struct.WTF::KeyValuePair.1693", %"struct.WTF::KeyValuePair.1693"* %89, i64 0, i32 1
  %92 = bitcast %"class.blink::EllipsisBox"** %2 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %"class.blink::EllipsisBox"** %91 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %0, i64 0, i32 2
  %96 = load i32, i32* %95, align 4
  %97 = add i32 %96, 1
  store i32 %97, i32* %95, align 4
  %98 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %0, i64 0, i32 3
  %99 = load i32, i32* %98, align 8
  %100 = add i32 %99, %97
  %101 = shl i32 %100, 1
  %102 = load i32, i32* %12, align 8
  %103 = icmp ult i32 %101, %102
  br i1 %103, label %106, label %104

104:                                              ; preds = %87
  %105 = tail call %"struct.WTF::KeyValuePair.1693"* @_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE6ExpandEPS8_(%"class.WTF::HashTable.1690"* %0, %"struct.WTF::KeyValuePair.1693"* %89)
  br label %106

106:                                              ; preds = %58, %87, %104
  %107 = phi i8 [ 1, %87 ], [ 1, %104 ], [ 0, %58 ]
  %108 = phi %"struct.WTF::KeyValuePair.1693"* [ %89, %87 ], [ %105, %104 ], [ %60, %58 ]
  %109 = insertvalue { %"struct.WTF::KeyValuePair.1693"*, i8 } undef, %"struct.WTF::KeyValuePair.1693"* %108, 0
  %110 = insertvalue { %"struct.WTF::KeyValuePair.1693"*, i8 } %109, i8 %107, 1
  ret { %"struct.WTF::KeyValuePair.1693"*, i8 } %110
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.1693"* @_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE6ExpandEPS8_(%"class.WTF::HashTable.1690"*, %"struct.WTF::KeyValuePair.1693"*) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.1690", %"class.WTF::HashTable.1690"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #12
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #12
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* %22, i8* %23) #12
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.4, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #12
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #12
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #12
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([117 x i8], [117 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPKN5blink13RootInlineBoxEPNS2_11EllipsisBoxEEEEEPKcv, i64 0, i64 0)) #12
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #12
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair.1693"*
  %37 = call %"struct.WTF::KeyValuePair.1693"* @_ZN3WTF9HashTableIPKN5blink13RootInlineBoxENS_12KeyValuePairIS4_PNS1_11EllipsisBoxEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSD_IS7_EEEESE_NS_18PartitionAllocatorEE8RehashToEPS8_jSJ_(%"class.WTF::HashTable.1690"* %0, %"struct.WTF::KeyValuePair.1693"* %36, i32 %32, %"struct.WTF::KeyValuePair.1693"* %1) #12
  ret %"struct.WTF::KeyValuePair.1693"* %37
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.1906"*, %"struct.WTF::KeyValuePair.1906"* } @_ZN3WTF9HashTableIPKN5blink13InlineTextBoxENS_12KeyValuePairIS4_NSt3__14pairINS_6VectorIPKNS1_14SimpleFontDataELj0ENS_18PartitionAllocatorEEENS1_13GlyphOverflowEEEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSL_ISF_EEEESM_SC_E4findERKS4_(%"class.WTF::HashTable.1903"*, %"class.blink::InlineTextBox"** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.1903", %"class.WTF::HashTable.1903"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.1906"*, %"struct.WTF::KeyValuePair.1906"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair.1906"* %4, null
  %6 = getelementptr inbounds %"class.WTF::HashTable.1903", %"class.WTF::HashTable.1903"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  br i1 %5, label %70, label %8

8:                                                ; preds = %2
  %9 = add i32 %7, -1
  %10 = zext i32 %9 to i64
  %11 = bitcast %"class.blink::InlineTextBox"** %1 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = shl i64 %12, 32
  %14 = xor i64 %13, -1
  %15 = add i64 %12, %14
  %16 = lshr i64 %15, 22
  %17 = xor i64 %16, %15
  %18 = shl i64 %17, 13
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 8
  %22 = xor i64 %21, %20
  %23 = mul i64 %22, 9
  %24 = lshr i64 %23, 15
  %25 = xor i64 %24, %23
  %26 = shl i64 %25, 27
  %27 = xor i64 %26, -1
  %28 = add i64 %25, %27
  %29 = lshr i64 %28, 31
  %30 = xor i64 %29, %28
  %31 = trunc i64 %30 to i32
  %32 = and i32 %9, %31
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.1906", %"struct.WTF::KeyValuePair.1906"* %4, i64 %33
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair.1906", %"struct.WTF::KeyValuePair.1906"* %34, i64 0, i32 0
  %36 = load %"class.blink::InlineTextBox"*, %"class.blink::InlineTextBox"** %35, align 8
  %37 = inttoptr i64 %12 to %"class.blink::InlineTextBox"*
  %38 = icmp eq %"class.blink::InlineTextBox"* %36, %37
  br i1 %38, label %67, label %39

39:                                               ; preds = %8
  %40 = xor i32 %31, -1
  %41 = lshr i32 %31, 23
  %42 = add i32 %41, %40
  %43 = shl i32 %42, 12
  %44 = xor i32 %43, %42
  %45 = lshr i32 %44, 7
  %46 = xor i32 %45, %44
  %47 = shl i32 %46, 2
  %48 = xor i32 %47, %46
  %49 = lshr i32 %48, 20
  %50 = xor i32 %49, %48
  %51 = or i32 %50, 1
  %52 = zext i32 %51 to i64
  br label %53

53:                                               ; preds = %58, %39
  %54 = phi %"class.blink::InlineTextBox"* [ %36, %39 ], [ %65, %58 ]
  %55 = phi i64 [ %33, %39 ], [ %62, %58 ]
  %56 = phi i64 [ 0, %39 ], [ %60, %58 ]
  %57 = icmp eq %"class.blink::InlineTextBox"* %54, null
  br i1 %57, label %70, label %58

58:                                               ; preds = %53
  %59 = icmp eq i64 %56, 0
  %60 = select i1 %59, i64 %52, i64 %56
  %61 = add i64 %60, %55
  %62 = and i64 %61, %10
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair.1906", %"struct.WTF::KeyValuePair.1906"* %4, i64 %62
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.1906", %"struct.WTF::KeyValuePair.1906"* %63, i64 0, i32 0
  %65 = load %"class.blink::InlineTextBox"*, %"class.blink::InlineTextBox"** %64, align 8
  %66 = icmp eq %"class.blink::InlineTextBox"* %65, %37
  br i1 %66, label %67, label %53

67:                                               ; preds = %58, %8
  %68 = phi %"struct.WTF::KeyValuePair.1906"* [ %34, %8 ], [ %63, %58 ]
  %69 = icmp eq %"struct.WTF::KeyValuePair.1906"* %68, null
  br i1 %69, label %70, label %73

70:                                               ; preds = %53, %67, %2
  %71 = zext i32 %7 to i64
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair.1906", %"struct.WTF::KeyValuePair.1906"* %4, i64 %71
  br label %76

73:                                               ; preds = %67
  %74 = zext i32 %7 to i64
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair.1906", %"struct.WTF::KeyValuePair.1906"* %4, i64 %74
  br label %76

76:                                               ; preds = %70, %73
  %77 = phi %"struct.WTF::KeyValuePair.1906"* [ %68, %73 ], [ %72, %70 ]
  %78 = phi %"struct.WTF::KeyValuePair.1906"* [ %75, %73 ], [ %72, %70 ]
  %79 = insertvalue { %"struct.WTF::KeyValuePair.1906"*, %"struct.WTF::KeyValuePair.1906"* } undef, %"struct.WTF::KeyValuePair.1906"* %77, 0
  %80 = insertvalue { %"struct.WTF::KeyValuePair.1906"*, %"struct.WTF::KeyValuePair.1906"* } %79, %"struct.WTF::KeyValuePair.1906"* %78, 1
  ret { %"struct.WTF::KeyValuePair.1906"*, %"struct.WTF::KeyValuePair.1906"* } %80
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIPKN5blink14SimpleFontDataELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS4_EEvOT_(%"class.WTF::Vector.1908"*, %"class.blink::SimpleFontData"** dereferenceable(8)) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.1908", %"class.WTF::Vector.1908"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.1908", %"class.WTF::Vector.1908"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %6, align 8
  %8 = icmp ugt %"class.blink::SimpleFontData"** %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %7, i64 %10
  %12 = icmp ugt %"class.blink::SimpleFontData"** %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.1908", %"class.WTF::Vector.1908"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !7

24:                                               ; preds = %13
  %25 = icmp eq %"class.blink::SimpleFontData"** %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPKN5blink14SimpleFontDataEEEmm(i64 %26) #12
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPKN5blink14SimpleFontDataEEEPKcv, i64 0, i64 0)) #12
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.1908"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.blink::SimpleFontData"**
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.blink::SimpleFontData"** %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.blink::SimpleFontData"** %38 to i8*
  br i1 %41, label %43, label %49, !prof !7

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #12
  %47 = bitcast %"class.WTF::Vector.1908"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #12
  %51 = bitcast %"class.WTF::Vector.1908"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.blink::SimpleFontData"**
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.blink::SimpleFontData"** %1 to i64
  %56 = ptrtoint %"class.blink::SimpleFontData"** %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector.1908", %"class.WTF::Vector.1908"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !7

69:                                               ; preds = %54
  %70 = icmp eq %"class.blink::SimpleFontData"** %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPKN5blink14SimpleFontDataEEEmm(i64 %71) #12
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPKN5blink14SimpleFontDataEEEPKcv, i64 0, i64 0)) #12
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.1908"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.blink::SimpleFontData"**, %"class.blink::SimpleFontData"*** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.blink::SimpleFontData"** %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.blink::SimpleFontData"** %78 to i8*
  br i1 %81, label %83, label %89, !prof !7

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #12
  %87 = bitcast %"class.WTF::Vector.1908"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #12
  %91 = bitcast %"class.WTF::Vector.1908"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.blink::SimpleFontData"**
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.blink::SimpleFontData"** [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.blink::SimpleFontData"** [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.blink::SimpleFontData"** [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.blink::SimpleFontData"*, %"class.blink::SimpleFontData"** %100, i64 %103
  %105 = bitcast %"class.blink::SimpleFontData"** %101 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = bitcast %"class.blink::SimpleFontData"** %104 to i64*
  store i64 %106, i64* %107, align 8
  %108 = load i32, i32* %3, align 4
  %109 = add i32 %108, 1
  store i32 %109, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPKN5blink14SimpleFontDataEEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #12
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0), i8* %11, i8* %12) #12
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.10, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #12
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIPN5blink9InlineBoxELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRS3_EEvOT_(%"class.WTF::Vector.1918"*, %"class.blink::InlineBox"** dereferenceable(8)) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::InlineBox"**, %"class.blink::InlineBox"*** %6, align 8
  %8 = icmp ugt %"class.blink::InlineBox"** %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %7, i64 %10
  %12 = icmp ugt %"class.blink::InlineBox"** %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !7

24:                                               ; preds = %13
  %25 = icmp eq %"class.blink::InlineBox"** %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPN5blink9InlineBoxEEEmm(i64 %26) #12
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink9InlineBoxEEEPKcv, i64 0, i64 0)) #12
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.1918"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.blink::InlineBox"**
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.blink::InlineBox"**, %"class.blink::InlineBox"*** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.blink::InlineBox"** %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.blink::InlineBox"** %38 to i8*
  br i1 %41, label %43, label %49, !prof !7

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #12
  %47 = bitcast %"class.WTF::Vector.1918"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #12
  %51 = bitcast %"class.WTF::Vector.1918"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.blink::InlineBox"**
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.blink::InlineBox"** %1 to i64
  %56 = ptrtoint %"class.blink::InlineBox"** %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !7

69:                                               ; preds = %54
  %70 = icmp eq %"class.blink::InlineBox"** %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPN5blink9InlineBoxEEEmm(i64 %71) #12
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink9InlineBoxEEEPKcv, i64 0, i64 0)) #12
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.1918"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.blink::InlineBox"**, %"class.blink::InlineBox"*** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.blink::InlineBox"** %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.blink::InlineBox"** %78 to i8*
  br i1 %81, label %83, label %89, !prof !7

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #12
  %87 = bitcast %"class.WTF::Vector.1918"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #12
  %91 = bitcast %"class.WTF::Vector.1918"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.blink::InlineBox"**
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.blink::InlineBox"** [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.blink::InlineBox"** [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.blink::InlineBox"** [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %100, i64 %103
  %105 = bitcast %"class.blink::InlineBox"** %101 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = bitcast %"class.blink::InlineBox"** %104 to i64*
  store i64 %106, i64* %107, align 8
  %108 = load i32, i32* %3, align 4
  %109 = add i32 %108, 1
  store i32 %109, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPN5blink9InlineBoxEEEmm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #12
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0), i8* %11, i8* %12) #12
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.10, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #12
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::InlineBox"** @_ZN3WTF6VectorIPN5blink9InlineBoxELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.1918"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #12
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i8* %14, i8* %15) #12
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.7, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  %23 = getelementptr inbounds %"class.WTF::Vector.1918", %"class.WTF::Vector.1918"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::InlineBox"**, %"class.blink::InlineBox"*** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::InlineBox"*, %"class.blink::InlineBox"** %24, i64 %25
  ret %"class.blink::InlineBox"** %26
}

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind readnone }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZNK5blink20LayoutBoxModelObject23PhysicalBorderToLogicalEv: argument 0"}
!6 = distinct !{!6, !"_ZNK5blink20LayoutBoxModelObject23PhysicalBorderToLogicalEv"}
!7 = !{!"branch_weights", i32 2000, i32 1}
