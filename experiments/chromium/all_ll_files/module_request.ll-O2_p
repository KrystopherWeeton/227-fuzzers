; ModuleID = '../../third_party/blink/renderer/bindings/core/v8/module_request.cc'
source_filename = "../../third_party/blink/renderer/bindings/core/v8/module_request.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.blink::ModuleRequest" = type { %"class.WTF::String", %"class.WTF::TextPosition", %"class.WTF::Vector" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"struct.blink::ImportAssertion"*, i32, i32 }
%"struct.blink::ImportAssertion" = type { %"class.WTF::String", %"class.WTF::String", %"class.WTF::TextPosition" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

@.str = private unnamed_addr constant [5 x i8] c"type\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink13ModuleRequest19GetModuleTypeStringEv(%"struct.blink::ModuleRequest"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::StringView", align 8
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = getelementptr inbounds %"struct.blink::ModuleRequest", %"struct.blink::ModuleRequest"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %5 = load %"struct.blink::ImportAssertion"*, %"struct.blink::ImportAssertion"** %4, align 8
  %6 = getelementptr inbounds %"struct.blink::ModuleRequest", %"struct.blink::ModuleRequest"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"struct.blink::ImportAssertion", %"struct.blink::ImportAssertion"* %5, i64 %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %63, label %11

11:                                               ; preds = %1
  %12 = bitcast %"class.WTF::StringView"* %2 to i8*
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 0
  %14 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 1
  %15 = bitcast i8** %14 to %"class.WTF::StringImpl"**
  %16 = bitcast %"class.WTF::StringView"* %2 to i64*
  %17 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 2
  %18 = bitcast %"class.WTF::StringView"* %3 to i8*
  %19 = bitcast %"class.WTF::StringView"* %3 to i64*
  %20 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %21 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  br label %22

22:                                               ; preds = %11, %60
  %23 = phi %"struct.blink::ImportAssertion"* [ %5, %11 ], [ %61, %60 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #5
  %24 = getelementptr inbounds %"struct.blink::ImportAssertion", %"struct.blink::ImportAssertion"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %27, label %29

27:                                               ; preds = %22
  store i8* null, i8** %14, align 8
  %28 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %28, i64* %16, align 8
  br label %34

29:                                               ; preds = %22
  store %"class.WTF::StringImpl"* %25, %"class.WTF::StringImpl"** %13, align 8
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 1
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %15, align 8
  %33 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %34

34:                                               ; preds = %29, %27
  %35 = phi i64 [ %33, %29 ], [ %28, %27 ]
  %36 = phi i32 [ %31, %29 ], [ 0, %27 ]
  store i32 %36, i32* %17, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #5
  store i64 %35, i64* %19, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %20, align 8
  store i32 4, i32* %21, align 8
  %37 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %2, %"class.WTF::StringView"* nonnull dereferenceable(24) %3) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #5
  br i1 %37, label %38, label %60

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"struct.blink::ImportAssertion", %"struct.blink::ImportAssertion"* %23, i64 0, i32 1, i32 0, i32 0
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %41 = ptrtoint %"class.WTF::StringImpl"* %40 to i64
  %42 = icmp eq %"class.WTF::StringImpl"* %40, null
  br i1 %42, label %63, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %63

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = zext i32 %50 to i33
  %52 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %51, i33 1) #5
  %53 = extractvalue { i33, i1 } %52, 1
  %54 = extractvalue { i33, i1 } %52, 0
  %55 = icmp slt i33 %54, 0
  %56 = or i1 %53, %55
  br i1 %56, label %57, label %58, !prof !2

57:                                               ; preds = %48
  call void @llvm.trap() #5
  unreachable

58:                                               ; preds = %48
  %59 = trunc i33 %54 to i32
  store i32 %59, i32* %49, align 4
  br label %63

60:                                               ; preds = %34
  %61 = getelementptr inbounds %"struct.blink::ImportAssertion", %"struct.blink::ImportAssertion"* %23, i64 1
  %62 = icmp eq %"struct.blink::ImportAssertion"* %61, %9
  br i1 %62, label %63, label %22

63:                                               ; preds = %60, %1, %58, %43, %38
  %64 = phi i64 [ %41, %38 ], [ %41, %43 ], [ %41, %58 ], [ 0, %1 ], [ 0, %60 ]
  %65 = inttoptr i64 %64 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %65
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
