; ModuleID = '../../third_party/libaom/source/libaom/av1/common/resize.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/resize.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%union.int_mv = type { i32 }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }

@av1_resize_filter_normative = hidden constant [64 x [8 x i16]] [[8 x i16] [i16 0, i16 0, i16 0, i16 128, i16 0, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 -1, i16 128, i16 2, i16 -1, i16 0, i16 0], [8 x i16] [i16 0, i16 1, i16 -3, i16 127, i16 4, i16 -2, i16 1, i16 0], [8 x i16] [i16 0, i16 1, i16 -4, i16 127, i16 6, i16 -3, i16 1, i16 0], [8 x i16] [i16 0, i16 2, i16 -6, i16 126, i16 8, i16 -3, i16 1, i16 0], [8 x i16] [i16 0, i16 2, i16 -7, i16 125, i16 11, i16 -4, i16 1, i16 0], [8 x i16] [i16 -1, i16 2, i16 -8, i16 125, i16 13, i16 -5, i16 2, i16 0], [8 x i16] [i16 -1, i16 3, i16 -9, i16 124, i16 15, i16 -6, i16 2, i16 0], [8 x i16] [i16 -1, i16 3, i16 -10, i16 123, i16 18, i16 -6, i16 2, i16 -1], [8 x i16] [i16 -1, i16 3, i16 -11, i16 122, i16 20, i16 -7, i16 3, i16 -1], [8 x i16] [i16 -1, i16 4, i16 -12, i16 121, i16 22, i16 -8, i16 3, i16 -1], [8 x i16] [i16 -1, i16 4, i16 -13, i16 120, i16 25, i16 -9, i16 3, i16 -1], [8 x i16] [i16 -1, i16 4, i16 -14, i16 118, i16 28, i16 -9, i16 3, i16 -1], [8 x i16] [i16 -1, i16 4, i16 -15, i16 117, i16 30, i16 -10, i16 4, i16 -1], [8 x i16] [i16 -1, i16 5, i16 -16, i16 116, i16 32, i16 -11, i16 4, i16 -1], [8 x i16] [i16 -1, i16 5, i16 -16, i16 114, i16 35, i16 -12, i16 4, i16 -1], [8 x i16] [i16 -1, i16 5, i16 -17, i16 112, i16 38, i16 -12, i16 4, i16 -1], [8 x i16] [i16 -1, i16 5, i16 -18, i16 111, i16 40, i16 -13, i16 5, i16 -1], [8 x i16] [i16 -1, i16 5, i16 -18, i16 109, i16 43, i16 -14, i16 5, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -19, i16 107, i16 45, i16 -14, i16 5, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -19, i16 105, i16 48, i16 -15, i16 5, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -19, i16 103, i16 51, i16 -16, i16 5, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -20, i16 101, i16 53, i16 -16, i16 6, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -20, i16 99, i16 56, i16 -17, i16 6, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -20, i16 97, i16 58, i16 -17, i16 6, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -20, i16 95, i16 61, i16 -18, i16 6, i16 -1], [8 x i16] [i16 -2, i16 7, i16 -20, i16 93, i16 64, i16 -18, i16 6, i16 -2], [8 x i16] [i16 -2, i16 7, i16 -20, i16 91, i16 66, i16 -19, i16 6, i16 -1], [8 x i16] [i16 -2, i16 7, i16 -20, i16 88, i16 69, i16 -19, i16 6, i16 -1], [8 x i16] [i16 -2, i16 7, i16 -20, i16 86, i16 71, i16 -19, i16 6, i16 -1], [8 x i16] [i16 -2, i16 7, i16 -20, i16 84, i16 74, i16 -20, i16 7, i16 -2], [8 x i16] [i16 -2, i16 7, i16 -20, i16 81, i16 76, i16 -20, i16 7, i16 -1], [8 x i16] [i16 -2, i16 7, i16 -20, i16 79, i16 79, i16 -20, i16 7, i16 -2], [8 x i16] [i16 -1, i16 7, i16 -20, i16 76, i16 81, i16 -20, i16 7, i16 -2], [8 x i16] [i16 -2, i16 7, i16 -20, i16 74, i16 84, i16 -20, i16 7, i16 -2], [8 x i16] [i16 -1, i16 6, i16 -19, i16 71, i16 86, i16 -20, i16 7, i16 -2], [8 x i16] [i16 -1, i16 6, i16 -19, i16 69, i16 88, i16 -20, i16 7, i16 -2], [8 x i16] [i16 -1, i16 6, i16 -19, i16 66, i16 91, i16 -20, i16 7, i16 -2], [8 x i16] [i16 -2, i16 6, i16 -18, i16 64, i16 93, i16 -20, i16 7, i16 -2], [8 x i16] [i16 -1, i16 6, i16 -18, i16 61, i16 95, i16 -20, i16 6, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -17, i16 58, i16 97, i16 -20, i16 6, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -17, i16 56, i16 99, i16 -20, i16 6, i16 -1], [8 x i16] [i16 -1, i16 6, i16 -16, i16 53, i16 101, i16 -20, i16 6, i16 -1], [8 x i16] [i16 -1, i16 5, i16 -16, i16 51, i16 103, i16 -19, i16 6, i16 -1], [8 x i16] [i16 -1, i16 5, i16 -15, i16 48, i16 105, i16 -19, i16 6, i16 -1], [8 x i16] [i16 -1, i16 5, i16 -14, i16 45, i16 107, i16 -19, i16 6, i16 -1], [8 x i16] [i16 -1, i16 5, i16 -14, i16 43, i16 109, i16 -18, i16 5, i16 -1], [8 x i16] [i16 -1, i16 5, i16 -13, i16 40, i16 111, i16 -18, i16 5, i16 -1], [8 x i16] [i16 -1, i16 4, i16 -12, i16 38, i16 112, i16 -17, i16 5, i16 -1], [8 x i16] [i16 -1, i16 4, i16 -12, i16 35, i16 114, i16 -16, i16 5, i16 -1], [8 x i16] [i16 -1, i16 4, i16 -11, i16 32, i16 116, i16 -16, i16 5, i16 -1], [8 x i16] [i16 -1, i16 4, i16 -10, i16 30, i16 117, i16 -15, i16 4, i16 -1], [8 x i16] [i16 -1, i16 3, i16 -9, i16 28, i16 118, i16 -14, i16 4, i16 -1], [8 x i16] [i16 -1, i16 3, i16 -9, i16 25, i16 120, i16 -13, i16 4, i16 -1], [8 x i16] [i16 -1, i16 3, i16 -8, i16 22, i16 121, i16 -12, i16 4, i16 -1], [8 x i16] [i16 -1, i16 3, i16 -7, i16 20, i16 122, i16 -11, i16 3, i16 -1], [8 x i16] [i16 -1, i16 2, i16 -6, i16 18, i16 123, i16 -10, i16 3, i16 -1], [8 x i16] [i16 0, i16 2, i16 -6, i16 15, i16 124, i16 -9, i16 3, i16 -1], [8 x i16] [i16 0, i16 2, i16 -5, i16 13, i16 125, i16 -8, i16 2, i16 -1], [8 x i16] [i16 0, i16 1, i16 -4, i16 11, i16 125, i16 -7, i16 2, i16 0], [8 x i16] [i16 0, i16 1, i16 -3, i16 8, i16 126, i16 -6, i16 2, i16 0], [8 x i16] [i16 0, i16 1, i16 -3, i16 6, i16 127, i16 -4, i16 1, i16 0], [8 x i16] [i16 0, i16 1, i16 -2, i16 4, i16 127, i16 -3, i16 1, i16 0], [8 x i16] [i16 0, i16 0, i16 -1, i16 2, i16 128, i16 -1, i16 0, i16 0]], align 16
@av1_bilinear_filters = internal constant [16 x [8 x i16]] [[8 x i16] [i16 0, i16 0, i16 0, i16 128, i16 0, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 120, i16 8, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 112, i16 16, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 104, i16 24, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 96, i16 32, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 88, i16 40, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 80, i16 48, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 72, i16 56, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 64, i16 64, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 56, i16 72, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 48, i16 80, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 40, i16 88, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 32, i16 96, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 24, i16 104, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 16, i16 112, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 0, i16 8, i16 120, i16 0, i16 0, i16 0]], align 256
@av1_sub_pel_filters_8smooth = internal constant [16 x [8 x i16]] [[8 x i16] [i16 0, i16 0, i16 0, i16 128, i16 0, i16 0, i16 0, i16 0], [8 x i16] [i16 0, i16 2, i16 28, i16 62, i16 34, i16 2, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 26, i16 62, i16 36, i16 4, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 22, i16 62, i16 40, i16 4, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 20, i16 60, i16 42, i16 6, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 18, i16 58, i16 44, i16 8, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 16, i16 56, i16 46, i16 10, i16 0, i16 0], [8 x i16] [i16 0, i16 -2, i16 16, i16 54, i16 48, i16 12, i16 0, i16 0], [8 x i16] [i16 0, i16 -2, i16 14, i16 52, i16 52, i16 14, i16 -2, i16 0], [8 x i16] [i16 0, i16 0, i16 12, i16 48, i16 54, i16 16, i16 -2, i16 0], [8 x i16] [i16 0, i16 0, i16 10, i16 46, i16 56, i16 16, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 8, i16 44, i16 58, i16 18, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 6, i16 42, i16 60, i16 20, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 4, i16 40, i16 62, i16 22, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 4, i16 36, i16 62, i16 26, i16 0, i16 0], [8 x i16] [i16 0, i16 0, i16 2, i16 34, i16 62, i16 28, i16 2, i16 0]], align 256
@aom_scaled_2d = external local_unnamed_addr global void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*, align 8
@av1_resize_and_extend_frame = external local_unnamed_addr global void (%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8, i32, i32)*, align 8
@.str = private unnamed_addr constant [54 x i8] c"Failed to allocate copy buffer for superres upscaling\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c"Failed to free current frame buffer before superres upscaling\00", align 1
@.str.2 = private unnamed_addr constant [63 x i8] c"Failed to allocate current frame buffer for superres upscaling\00", align 1
@.str.3 = private unnamed_addr constant [65 x i8] c"Failed to reallocate current frame buffer for superres upscaling\00", align 1
@filteredinterp_filters875 = internal unnamed_addr constant [64 x [8 x i16]] [[8 x i16] [i16 3, i16 -8, i16 13, i16 112, i16 13, i16 -8, i16 3, i16 0], [8 x i16] [i16 2, i16 -7, i16 12, i16 112, i16 15, i16 -8, i16 3, i16 -1], [8 x i16] [i16 3, i16 -7, i16 10, i16 112, i16 17, i16 -9, i16 3, i16 -1], [8 x i16] [i16 2, i16 -6, i16 8, i16 112, i16 19, i16 -9, i16 3, i16 -1], [8 x i16] [i16 2, i16 -6, i16 7, i16 112, i16 21, i16 -10, i16 3, i16 -1], [8 x i16] [i16 2, i16 -5, i16 6, i16 111, i16 22, i16 -10, i16 3, i16 -1], [8 x i16] [i16 2, i16 -5, i16 4, i16 111, i16 24, i16 -10, i16 3, i16 -1], [8 x i16] [i16 2, i16 -4, i16 3, i16 110, i16 26, i16 -11, i16 3, i16 -1], [8 x i16] [i16 2, i16 -4, i16 1, i16 110, i16 28, i16 -11, i16 3, i16 -1], [8 x i16] [i16 2, i16 -4, i16 0, i16 109, i16 30, i16 -12, i16 4, i16 -1], [8 x i16] [i16 1, i16 -3, i16 -1, i16 108, i16 32, i16 -12, i16 4, i16 -1], [8 x i16] [i16 1, i16 -3, i16 -2, i16 108, i16 34, i16 -13, i16 4, i16 -1], [8 x i16] [i16 1, i16 -2, i16 -4, i16 107, i16 36, i16 -13, i16 4, i16 -1], [8 x i16] [i16 1, i16 -2, i16 -5, i16 106, i16 38, i16 -13, i16 4, i16 -1], [8 x i16] [i16 1, i16 -1, i16 -6, i16 105, i16 40, i16 -14, i16 4, i16 -1], [8 x i16] [i16 1, i16 -1, i16 -7, i16 104, i16 42, i16 -14, i16 4, i16 -1], [8 x i16] [i16 1, i16 -1, i16 -7, i16 103, i16 44, i16 -15, i16 4, i16 -1], [8 x i16] [i16 1, i16 0, i16 -8, i16 101, i16 46, i16 -15, i16 4, i16 -1], [8 x i16] [i16 1, i16 0, i16 -9, i16 100, i16 48, i16 -15, i16 4, i16 -1], [8 x i16] [i16 1, i16 0, i16 -10, i16 99, i16 50, i16 -15, i16 4, i16 -1], [8 x i16] [i16 1, i16 1, i16 -11, i16 97, i16 53, i16 -16, i16 4, i16 -1], [8 x i16] [i16 0, i16 1, i16 -11, i16 96, i16 55, i16 -16, i16 4, i16 -1], [8 x i16] [i16 0, i16 1, i16 -12, i16 95, i16 57, i16 -16, i16 4, i16 -1], [8 x i16] [i16 0, i16 2, i16 -13, i16 93, i16 59, i16 -16, i16 4, i16 -1], [8 x i16] [i16 0, i16 2, i16 -13, i16 91, i16 61, i16 -16, i16 4, i16 -1], [8 x i16] [i16 0, i16 2, i16 -14, i16 90, i16 63, i16 -16, i16 4, i16 -1], [8 x i16] [i16 0, i16 2, i16 -14, i16 88, i16 65, i16 -16, i16 4, i16 -1], [8 x i16] [i16 0, i16 2, i16 -15, i16 86, i16 67, i16 -16, i16 4, i16 0], [8 x i16] [i16 0, i16 3, i16 -15, i16 84, i16 69, i16 -17, i16 4, i16 0], [8 x i16] [i16 0, i16 3, i16 -16, i16 83, i16 71, i16 -17, i16 4, i16 0], [8 x i16] [i16 0, i16 3, i16 -16, i16 81, i16 73, i16 -16, i16 3, i16 0], [8 x i16] [i16 0, i16 3, i16 -16, i16 79, i16 75, i16 -16, i16 3, i16 0], [8 x i16] [i16 0, i16 3, i16 -16, i16 77, i16 77, i16 -16, i16 3, i16 0], [8 x i16] [i16 0, i16 3, i16 -16, i16 75, i16 79, i16 -16, i16 3, i16 0], [8 x i16] [i16 0, i16 3, i16 -16, i16 73, i16 81, i16 -16, i16 3, i16 0], [8 x i16] [i16 0, i16 4, i16 -17, i16 71, i16 83, i16 -16, i16 3, i16 0], [8 x i16] [i16 0, i16 4, i16 -17, i16 69, i16 84, i16 -15, i16 3, i16 0], [8 x i16] [i16 0, i16 4, i16 -16, i16 67, i16 86, i16 -15, i16 2, i16 0], [8 x i16] [i16 -1, i16 4, i16 -16, i16 65, i16 88, i16 -14, i16 2, i16 0], [8 x i16] [i16 -1, i16 4, i16 -16, i16 63, i16 90, i16 -14, i16 2, i16 0], [8 x i16] [i16 -1, i16 4, i16 -16, i16 61, i16 91, i16 -13, i16 2, i16 0], [8 x i16] [i16 -1, i16 4, i16 -16, i16 59, i16 93, i16 -13, i16 2, i16 0], [8 x i16] [i16 -1, i16 4, i16 -16, i16 57, i16 95, i16 -12, i16 1, i16 0], [8 x i16] [i16 -1, i16 4, i16 -16, i16 55, i16 96, i16 -11, i16 1, i16 0], [8 x i16] [i16 -1, i16 4, i16 -16, i16 53, i16 97, i16 -11, i16 1, i16 1], [8 x i16] [i16 -1, i16 4, i16 -15, i16 50, i16 99, i16 -10, i16 0, i16 1], [8 x i16] [i16 -1, i16 4, i16 -15, i16 48, i16 100, i16 -9, i16 0, i16 1], [8 x i16] [i16 -1, i16 4, i16 -15, i16 46, i16 101, i16 -8, i16 0, i16 1], [8 x i16] [i16 -1, i16 4, i16 -15, i16 44, i16 103, i16 -7, i16 -1, i16 1], [8 x i16] [i16 -1, i16 4, i16 -14, i16 42, i16 104, i16 -7, i16 -1, i16 1], [8 x i16] [i16 -1, i16 4, i16 -14, i16 40, i16 105, i16 -6, i16 -1, i16 1], [8 x i16] [i16 -1, i16 4, i16 -13, i16 38, i16 106, i16 -5, i16 -2, i16 1], [8 x i16] [i16 -1, i16 4, i16 -13, i16 36, i16 107, i16 -4, i16 -2, i16 1], [8 x i16] [i16 -1, i16 4, i16 -13, i16 34, i16 108, i16 -2, i16 -3, i16 1], [8 x i16] [i16 -1, i16 4, i16 -12, i16 32, i16 108, i16 -1, i16 -3, i16 1], [8 x i16] [i16 -1, i16 4, i16 -12, i16 30, i16 109, i16 0, i16 -4, i16 2], [8 x i16] [i16 -1, i16 3, i16 -11, i16 28, i16 110, i16 1, i16 -4, i16 2], [8 x i16] [i16 -1, i16 3, i16 -11, i16 26, i16 110, i16 3, i16 -4, i16 2], [8 x i16] [i16 -1, i16 3, i16 -10, i16 24, i16 111, i16 4, i16 -5, i16 2], [8 x i16] [i16 -1, i16 3, i16 -10, i16 22, i16 111, i16 6, i16 -5, i16 2], [8 x i16] [i16 -1, i16 3, i16 -10, i16 21, i16 112, i16 7, i16 -6, i16 2], [8 x i16] [i16 -1, i16 3, i16 -9, i16 19, i16 112, i16 8, i16 -6, i16 2], [8 x i16] [i16 -1, i16 3, i16 -9, i16 17, i16 112, i16 10, i16 -7, i16 3], [8 x i16] [i16 -1, i16 3, i16 -8, i16 15, i16 112, i16 12, i16 -7, i16 2]], align 16
@filteredinterp_filters750 = internal unnamed_addr constant [64 x [8 x i16]] [[8 x i16] [i16 2, i16 -11, i16 25, i16 96, i16 25, i16 -11, i16 2, i16 0], [8 x i16] [i16 2, i16 -11, i16 24, i16 96, i16 26, i16 -11, i16 2, i16 0], [8 x i16] [i16 2, i16 -11, i16 22, i16 96, i16 28, i16 -11, i16 2, i16 0], [8 x i16] [i16 2, i16 -10, i16 21, i16 96, i16 29, i16 -12, i16 2, i16 0], [8 x i16] [i16 2, i16 -10, i16 19, i16 96, i16 31, i16 -12, i16 2, i16 0], [8 x i16] [i16 2, i16 -10, i16 18, i16 95, i16 32, i16 -11, i16 2, i16 0], [8 x i16] [i16 2, i16 -10, i16 17, i16 95, i16 34, i16 -12, i16 2, i16 0], [8 x i16] [i16 2, i16 -9, i16 15, i16 95, i16 35, i16 -12, i16 2, i16 0], [8 x i16] [i16 2, i16 -9, i16 14, i16 94, i16 37, i16 -12, i16 2, i16 0], [8 x i16] [i16 2, i16 -9, i16 13, i16 94, i16 38, i16 -12, i16 2, i16 0], [8 x i16] [i16 2, i16 -8, i16 12, i16 93, i16 40, i16 -12, i16 1, i16 0], [8 x i16] [i16 2, i16 -8, i16 11, i16 93, i16 41, i16 -12, i16 1, i16 0], [8 x i16] [i16 2, i16 -8, i16 9, i16 92, i16 43, i16 -12, i16 1, i16 1], [8 x i16] [i16 2, i16 -8, i16 8, i16 92, i16 44, i16 -12, i16 1, i16 1], [8 x i16] [i16 2, i16 -7, i16 7, i16 91, i16 46, i16 -12, i16 1, i16 0], [8 x i16] [i16 2, i16 -7, i16 6, i16 90, i16 47, i16 -12, i16 1, i16 1], [8 x i16] [i16 2, i16 -7, i16 5, i16 90, i16 49, i16 -12, i16 1, i16 0], [8 x i16] [i16 2, i16 -6, i16 4, i16 89, i16 50, i16 -12, i16 1, i16 0], [8 x i16] [i16 2, i16 -6, i16 3, i16 88, i16 52, i16 -12, i16 0, i16 1], [8 x i16] [i16 2, i16 -6, i16 2, i16 87, i16 54, i16 -12, i16 0, i16 1], [8 x i16] [i16 2, i16 -5, i16 1, i16 86, i16 55, i16 -12, i16 0, i16 1], [8 x i16] [i16 2, i16 -5, i16 0, i16 85, i16 57, i16 -12, i16 0, i16 1], [8 x i16] [i16 2, i16 -5, i16 -1, i16 84, i16 58, i16 -11, i16 0, i16 1], [8 x i16] [i16 2, i16 -5, i16 -2, i16 83, i16 60, i16 -11, i16 0, i16 1], [8 x i16] [i16 2, i16 -4, i16 -2, i16 82, i16 61, i16 -11, i16 -1, i16 1], [8 x i16] [i16 1, i16 -4, i16 -3, i16 81, i16 63, i16 -10, i16 -1, i16 1], [8 x i16] [i16 2, i16 -4, i16 -4, i16 80, i16 64, i16 -10, i16 -1, i16 1], [8 x i16] [i16 1, i16 -4, i16 -4, i16 79, i16 66, i16 -10, i16 -1, i16 1], [8 x i16] [i16 1, i16 -3, i16 -5, i16 77, i16 67, i16 -9, i16 -1, i16 1], [8 x i16] [i16 1, i16 -3, i16 -6, i16 76, i16 69, i16 -9, i16 -1, i16 1], [8 x i16] [i16 1, i16 -3, i16 -6, i16 75, i16 70, i16 -8, i16 -2, i16 1], [8 x i16] [i16 1, i16 -2, i16 -7, i16 74, i16 71, i16 -8, i16 -2, i16 1], [8 x i16] [i16 1, i16 -2, i16 -7, i16 72, i16 72, i16 -7, i16 -2, i16 1], [8 x i16] [i16 1, i16 -2, i16 -8, i16 71, i16 74, i16 -7, i16 -2, i16 1], [8 x i16] [i16 1, i16 -2, i16 -8, i16 70, i16 75, i16 -6, i16 -3, i16 1], [8 x i16] [i16 1, i16 -1, i16 -9, i16 69, i16 76, i16 -6, i16 -3, i16 1], [8 x i16] [i16 1, i16 -1, i16 -9, i16 67, i16 77, i16 -5, i16 -3, i16 1], [8 x i16] [i16 1, i16 -1, i16 -10, i16 66, i16 79, i16 -4, i16 -4, i16 1], [8 x i16] [i16 1, i16 -1, i16 -10, i16 64, i16 80, i16 -4, i16 -4, i16 2], [8 x i16] [i16 1, i16 -1, i16 -10, i16 63, i16 81, i16 -3, i16 -4, i16 1], [8 x i16] [i16 1, i16 -1, i16 -11, i16 61, i16 82, i16 -2, i16 -4, i16 2], [8 x i16] [i16 1, i16 0, i16 -11, i16 60, i16 83, i16 -2, i16 -5, i16 2], [8 x i16] [i16 1, i16 0, i16 -11, i16 58, i16 84, i16 -1, i16 -5, i16 2], [8 x i16] [i16 1, i16 0, i16 -12, i16 57, i16 85, i16 0, i16 -5, i16 2], [8 x i16] [i16 1, i16 0, i16 -12, i16 55, i16 86, i16 1, i16 -5, i16 2], [8 x i16] [i16 1, i16 0, i16 -12, i16 54, i16 87, i16 2, i16 -6, i16 2], [8 x i16] [i16 1, i16 0, i16 -12, i16 52, i16 88, i16 3, i16 -6, i16 2], [8 x i16] [i16 0, i16 1, i16 -12, i16 50, i16 89, i16 4, i16 -6, i16 2], [8 x i16] [i16 0, i16 1, i16 -12, i16 49, i16 90, i16 5, i16 -7, i16 2], [8 x i16] [i16 1, i16 1, i16 -12, i16 47, i16 90, i16 6, i16 -7, i16 2], [8 x i16] [i16 0, i16 1, i16 -12, i16 46, i16 91, i16 7, i16 -7, i16 2], [8 x i16] [i16 1, i16 1, i16 -12, i16 44, i16 92, i16 8, i16 -8, i16 2], [8 x i16] [i16 1, i16 1, i16 -12, i16 43, i16 92, i16 9, i16 -8, i16 2], [8 x i16] [i16 0, i16 1, i16 -12, i16 41, i16 93, i16 11, i16 -8, i16 2], [8 x i16] [i16 0, i16 1, i16 -12, i16 40, i16 93, i16 12, i16 -8, i16 2], [8 x i16] [i16 0, i16 2, i16 -12, i16 38, i16 94, i16 13, i16 -9, i16 2], [8 x i16] [i16 0, i16 2, i16 -12, i16 37, i16 94, i16 14, i16 -9, i16 2], [8 x i16] [i16 0, i16 2, i16 -12, i16 35, i16 95, i16 15, i16 -9, i16 2], [8 x i16] [i16 0, i16 2, i16 -12, i16 34, i16 95, i16 17, i16 -10, i16 2], [8 x i16] [i16 0, i16 2, i16 -11, i16 32, i16 95, i16 18, i16 -10, i16 2], [8 x i16] [i16 0, i16 2, i16 -12, i16 31, i16 96, i16 19, i16 -10, i16 2], [8 x i16] [i16 0, i16 2, i16 -12, i16 29, i16 96, i16 21, i16 -10, i16 2], [8 x i16] [i16 0, i16 2, i16 -11, i16 28, i16 96, i16 22, i16 -11, i16 2], [8 x i16] [i16 0, i16 2, i16 -11, i16 26, i16 96, i16 24, i16 -11, i16 2]], align 16
@filteredinterp_filters625 = internal unnamed_addr constant [64 x [8 x i16]] [[8 x i16] [i16 -1, i16 -8, i16 33, i16 80, i16 33, i16 -8, i16 -1, i16 0], [8 x i16] [i16 -1, i16 -8, i16 31, i16 80, i16 34, i16 -8, i16 -1, i16 1], [8 x i16] [i16 -1, i16 -8, i16 30, i16 80, i16 35, i16 -8, i16 -1, i16 1], [8 x i16] [i16 -1, i16 -8, i16 29, i16 80, i16 36, i16 -7, i16 -2, i16 1], [8 x i16] [i16 -1, i16 -8, i16 28, i16 80, i16 37, i16 -7, i16 -2, i16 1], [8 x i16] [i16 -1, i16 -8, i16 27, i16 80, i16 38, i16 -7, i16 -2, i16 1], [8 x i16] [i16 0, i16 -8, i16 26, i16 79, i16 39, i16 -7, i16 -2, i16 1], [8 x i16] [i16 0, i16 -8, i16 25, i16 79, i16 40, i16 -7, i16 -2, i16 1], [8 x i16] [i16 0, i16 -8, i16 24, i16 79, i16 41, i16 -7, i16 -2, i16 1], [8 x i16] [i16 0, i16 -8, i16 23, i16 78, i16 42, i16 -6, i16 -2, i16 1], [8 x i16] [i16 0, i16 -8, i16 22, i16 78, i16 43, i16 -6, i16 -2, i16 1], [8 x i16] [i16 0, i16 -8, i16 21, i16 78, i16 44, i16 -6, i16 -2, i16 1], [8 x i16] [i16 0, i16 -8, i16 20, i16 78, i16 45, i16 -5, i16 -3, i16 1], [8 x i16] [i16 0, i16 -8, i16 19, i16 77, i16 47, i16 -5, i16 -3, i16 1], [8 x i16] [i16 0, i16 -8, i16 18, i16 77, i16 48, i16 -5, i16 -3, i16 1], [8 x i16] [i16 0, i16 -8, i16 17, i16 77, i16 49, i16 -5, i16 -3, i16 1], [8 x i16] [i16 0, i16 -8, i16 16, i16 76, i16 50, i16 -4, i16 -3, i16 1], [8 x i16] [i16 0, i16 -8, i16 15, i16 76, i16 51, i16 -4, i16 -3, i16 1], [8 x i16] [i16 0, i16 -8, i16 15, i16 75, i16 52, i16 -3, i16 -4, i16 1], [8 x i16] [i16 0, i16 -7, i16 14, i16 74, i16 53, i16 -3, i16 -4, i16 1], [8 x i16] [i16 0, i16 -7, i16 13, i16 74, i16 54, i16 -3, i16 -4, i16 1], [8 x i16] [i16 0, i16 -7, i16 12, i16 73, i16 55, i16 -2, i16 -4, i16 1], [8 x i16] [i16 0, i16 -7, i16 11, i16 73, i16 56, i16 -2, i16 -4, i16 1], [8 x i16] [i16 0, i16 -7, i16 10, i16 72, i16 57, i16 -1, i16 -4, i16 1], [8 x i16] [i16 1, i16 -7, i16 10, i16 71, i16 58, i16 -1, i16 -5, i16 1], [8 x i16] [i16 0, i16 -7, i16 9, i16 71, i16 59, i16 0, i16 -5, i16 1], [8 x i16] [i16 1, i16 -7, i16 8, i16 70, i16 60, i16 0, i16 -5, i16 1], [8 x i16] [i16 1, i16 -7, i16 7, i16 69, i16 61, i16 1, i16 -5, i16 1], [8 x i16] [i16 1, i16 -6, i16 6, i16 68, i16 62, i16 1, i16 -5, i16 1], [8 x i16] [i16 0, i16 -6, i16 6, i16 68, i16 62, i16 2, i16 -5, i16 1], [8 x i16] [i16 1, i16 -6, i16 5, i16 67, i16 63, i16 2, i16 -5, i16 1], [8 x i16] [i16 1, i16 -6, i16 5, i16 66, i16 64, i16 3, i16 -6, i16 1], [8 x i16] [i16 1, i16 -6, i16 4, i16 65, i16 65, i16 4, i16 -6, i16 1], [8 x i16] [i16 1, i16 -6, i16 3, i16 64, i16 66, i16 5, i16 -6, i16 1], [8 x i16] [i16 1, i16 -5, i16 2, i16 63, i16 67, i16 5, i16 -6, i16 1], [8 x i16] [i16 1, i16 -5, i16 2, i16 62, i16 68, i16 6, i16 -6, i16 0], [8 x i16] [i16 1, i16 -5, i16 1, i16 62, i16 68, i16 6, i16 -6, i16 1], [8 x i16] [i16 1, i16 -5, i16 1, i16 61, i16 69, i16 7, i16 -7, i16 1], [8 x i16] [i16 1, i16 -5, i16 0, i16 60, i16 70, i16 8, i16 -7, i16 1], [8 x i16] [i16 1, i16 -5, i16 0, i16 59, i16 71, i16 9, i16 -7, i16 0], [8 x i16] [i16 1, i16 -5, i16 -1, i16 58, i16 71, i16 10, i16 -7, i16 1], [8 x i16] [i16 1, i16 -4, i16 -1, i16 57, i16 72, i16 10, i16 -7, i16 0], [8 x i16] [i16 1, i16 -4, i16 -2, i16 56, i16 73, i16 11, i16 -7, i16 0], [8 x i16] [i16 1, i16 -4, i16 -2, i16 55, i16 73, i16 12, i16 -7, i16 0], [8 x i16] [i16 1, i16 -4, i16 -3, i16 54, i16 74, i16 13, i16 -7, i16 0], [8 x i16] [i16 1, i16 -4, i16 -3, i16 53, i16 74, i16 14, i16 -7, i16 0], [8 x i16] [i16 1, i16 -4, i16 -3, i16 52, i16 75, i16 15, i16 -8, i16 0], [8 x i16] [i16 1, i16 -3, i16 -4, i16 51, i16 76, i16 15, i16 -8, i16 0], [8 x i16] [i16 1, i16 -3, i16 -4, i16 50, i16 76, i16 16, i16 -8, i16 0], [8 x i16] [i16 1, i16 -3, i16 -5, i16 49, i16 77, i16 17, i16 -8, i16 0], [8 x i16] [i16 1, i16 -3, i16 -5, i16 48, i16 77, i16 18, i16 -8, i16 0], [8 x i16] [i16 1, i16 -3, i16 -5, i16 47, i16 77, i16 19, i16 -8, i16 0], [8 x i16] [i16 1, i16 -3, i16 -5, i16 45, i16 78, i16 20, i16 -8, i16 0], [8 x i16] [i16 1, i16 -2, i16 -6, i16 44, i16 78, i16 21, i16 -8, i16 0], [8 x i16] [i16 1, i16 -2, i16 -6, i16 43, i16 78, i16 22, i16 -8, i16 0], [8 x i16] [i16 1, i16 -2, i16 -6, i16 42, i16 78, i16 23, i16 -8, i16 0], [8 x i16] [i16 1, i16 -2, i16 -7, i16 41, i16 79, i16 24, i16 -8, i16 0], [8 x i16] [i16 1, i16 -2, i16 -7, i16 40, i16 79, i16 25, i16 -8, i16 0], [8 x i16] [i16 1, i16 -2, i16 -7, i16 39, i16 79, i16 26, i16 -8, i16 0], [8 x i16] [i16 1, i16 -2, i16 -7, i16 38, i16 80, i16 27, i16 -8, i16 -1], [8 x i16] [i16 1, i16 -2, i16 -7, i16 37, i16 80, i16 28, i16 -8, i16 -1], [8 x i16] [i16 1, i16 -2, i16 -7, i16 36, i16 80, i16 29, i16 -8, i16 -1], [8 x i16] [i16 1, i16 -1, i16 -8, i16 35, i16 80, i16 30, i16 -8, i16 -1], [8 x i16] [i16 1, i16 -1, i16 -8, i16 34, i16 80, i16 31, i16 -8, i16 -1]], align 16
@filteredinterp_filters500 = internal unnamed_addr constant [64 x [8 x i16]] [[8 x i16] [i16 -3, i16 0, i16 35, i16 64, i16 35, i16 0, i16 -3, i16 0], [8 x i16] [i16 -3, i16 0, i16 34, i16 64, i16 36, i16 0, i16 -3, i16 0], [8 x i16] [i16 -3, i16 -1, i16 34, i16 64, i16 36, i16 1, i16 -3, i16 0], [8 x i16] [i16 -3, i16 -1, i16 33, i16 64, i16 37, i16 1, i16 -3, i16 0], [8 x i16] [i16 -3, i16 -1, i16 32, i16 64, i16 38, i16 1, i16 -3, i16 0], [8 x i16] [i16 -3, i16 -1, i16 31, i16 64, i16 39, i16 1, i16 -3, i16 0], [8 x i16] [i16 -3, i16 -1, i16 31, i16 63, i16 39, i16 2, i16 -3, i16 0], [8 x i16] [i16 -2, i16 -2, i16 30, i16 63, i16 40, i16 2, i16 -3, i16 0], [8 x i16] [i16 -2, i16 -2, i16 29, i16 63, i16 41, i16 2, i16 -3, i16 0], [8 x i16] [i16 -2, i16 -2, i16 29, i16 63, i16 41, i16 3, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -2, i16 28, i16 63, i16 42, i16 3, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -2, i16 27, i16 63, i16 43, i16 3, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -3, i16 27, i16 63, i16 43, i16 4, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -3, i16 26, i16 62, i16 44, i16 5, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -3, i16 25, i16 62, i16 45, i16 5, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -3, i16 25, i16 62, i16 45, i16 5, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -3, i16 24, i16 62, i16 46, i16 5, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -3, i16 23, i16 61, i16 47, i16 6, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -3, i16 23, i16 61, i16 47, i16 6, i16 -4, i16 0], [8 x i16] [i16 -2, i16 -3, i16 22, i16 61, i16 48, i16 7, i16 -4, i16 -1], [8 x i16] [i16 -2, i16 -3, i16 21, i16 60, i16 49, i16 7, i16 -4, i16 0], [8 x i16] [i16 -1, i16 -4, i16 20, i16 60, i16 49, i16 8, i16 -4, i16 0], [8 x i16] [i16 -1, i16 -4, i16 20, i16 60, i16 50, i16 8, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 19, i16 59, i16 51, i16 9, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 19, i16 59, i16 51, i16 9, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 18, i16 58, i16 52, i16 10, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 17, i16 58, i16 52, i16 11, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 16, i16 58, i16 53, i16 11, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 16, i16 57, i16 53, i16 12, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 15, i16 57, i16 54, i16 12, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 15, i16 56, i16 54, i16 13, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 14, i16 56, i16 55, i16 13, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 14, i16 55, i16 55, i16 14, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 13, i16 55, i16 56, i16 14, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 13, i16 54, i16 56, i16 15, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 12, i16 54, i16 57, i16 15, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 12, i16 53, i16 57, i16 16, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 11, i16 53, i16 58, i16 16, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 11, i16 52, i16 58, i16 17, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 10, i16 52, i16 58, i16 18, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 9, i16 51, i16 59, i16 19, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 9, i16 51, i16 59, i16 19, i16 -4, i16 -1], [8 x i16] [i16 -1, i16 -4, i16 8, i16 50, i16 60, i16 20, i16 -4, i16 -1], [8 x i16] [i16 0, i16 -4, i16 8, i16 49, i16 60, i16 20, i16 -4, i16 -1], [8 x i16] [i16 0, i16 -4, i16 7, i16 49, i16 60, i16 21, i16 -3, i16 -2], [8 x i16] [i16 -1, i16 -4, i16 7, i16 48, i16 61, i16 22, i16 -3, i16 -2], [8 x i16] [i16 0, i16 -4, i16 6, i16 47, i16 61, i16 23, i16 -3, i16 -2], [8 x i16] [i16 0, i16 -4, i16 6, i16 47, i16 61, i16 23, i16 -3, i16 -2], [8 x i16] [i16 0, i16 -4, i16 5, i16 46, i16 62, i16 24, i16 -3, i16 -2], [8 x i16] [i16 0, i16 -4, i16 5, i16 45, i16 62, i16 25, i16 -3, i16 -2], [8 x i16] [i16 0, i16 -4, i16 5, i16 45, i16 62, i16 25, i16 -3, i16 -2], [8 x i16] [i16 0, i16 -4, i16 5, i16 44, i16 62, i16 26, i16 -3, i16 -2], [8 x i16] [i16 0, i16 -4, i16 4, i16 43, i16 63, i16 27, i16 -3, i16 -2], [8 x i16] [i16 0, i16 -4, i16 3, i16 43, i16 63, i16 27, i16 -2, i16 -2], [8 x i16] [i16 0, i16 -4, i16 3, i16 42, i16 63, i16 28, i16 -2, i16 -2], [8 x i16] [i16 0, i16 -4, i16 3, i16 41, i16 63, i16 29, i16 -2, i16 -2], [8 x i16] [i16 0, i16 -3, i16 2, i16 41, i16 63, i16 29, i16 -2, i16 -2], [8 x i16] [i16 0, i16 -3, i16 2, i16 40, i16 63, i16 30, i16 -2, i16 -2], [8 x i16] [i16 0, i16 -3, i16 2, i16 39, i16 63, i16 31, i16 -1, i16 -3], [8 x i16] [i16 0, i16 -3, i16 1, i16 39, i16 64, i16 31, i16 -1, i16 -3], [8 x i16] [i16 0, i16 -3, i16 1, i16 38, i16 64, i16 32, i16 -1, i16 -3], [8 x i16] [i16 0, i16 -3, i16 1, i16 37, i16 64, i16 33, i16 -1, i16 -3], [8 x i16] [i16 0, i16 -3, i16 1, i16 36, i16 64, i16 34, i16 -1, i16 -3], [8 x i16] [i16 0, i16 -3, i16 0, i16 36, i16 64, i16 34, i16 0, i16 -3]], align 16
@av1_convolve_horiz_rs = external local_unnamed_addr global void (i8*, i32, i8*, i32, i32, i32, i16*, i32, i32)*, align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @av1_get_upscale_convolve_step(i32, i32) local_unnamed_addr #0 {
  %3 = shl i32 %0, 14
  %4 = sdiv i32 %1, 2
  %5 = add nsw i32 %4, %3
  %6 = sdiv i32 %5, %1
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_resize_plane(i8* readonly, i32, i32, i32, i8* nocapture, i32, i32, i32) local_unnamed_addr #1 {
  %9 = sext i32 %6 to i64
  %10 = sext i32 %1 to i64
  %11 = mul nsw i64 %9, %10
  %12 = tail call i8* @aom_malloc(i64 %11) #6
  %13 = icmp sgt i32 %2, %1
  %14 = select i1 %13, i32 %2, i32 %1
  %15 = sext i32 %14 to i64
  %16 = tail call i8* @aom_malloc(i64 %15) #6
  %17 = tail call i8* @aom_malloc(i64 %10) #6
  %18 = sext i32 %5 to i64
  %19 = tail call i8* @aom_malloc(i64 %18) #6
  %20 = icmp eq i8* %12, null
  %21 = icmp eq i8* %16, null
  %22 = or i1 %20, %21
  %23 = icmp eq i8* %17, null
  %24 = or i1 %22, %23
  %25 = icmp eq i8* %19, null
  %26 = or i1 %24, %25
  br i1 %26, label %150, label %27

27:                                               ; preds = %8
  %28 = icmp sgt i32 %1, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = sext i32 %3 to i64
  %31 = zext i32 %1 to i64
  br label %48

32:                                               ; preds = %48, %27
  %33 = icmp sgt i32 %6, 0
  br i1 %33, label %34, label %150

34:                                               ; preds = %32
  %35 = icmp sgt i32 %5, 0
  %36 = sext i32 %7 to i64
  %37 = zext i32 %6 to i64
  %38 = add i32 %1, -1
  %39 = add i32 %5, -1
  %40 = and i32 %1, 7
  %41 = icmp ult i32 %38, 7
  %42 = sub i32 %1, %40
  %43 = icmp eq i32 %40, 0
  %44 = and i32 %5, 7
  %45 = icmp ult i32 %39, 7
  %46 = sub i32 %5, %44
  %47 = icmp eq i32 %44, 0
  br label %56

48:                                               ; preds = %48, %29
  %49 = phi i64 [ 0, %29 ], [ %54, %48 ]
  %50 = mul nsw i64 %49, %30
  %51 = getelementptr inbounds i8, i8* %0, i64 %50
  %52 = mul nsw i64 %49, %9
  %53 = getelementptr inbounds i8, i8* %12, i64 %52
  tail call fastcc void @resize_multistep(i8* %51, i32 %2, i8* %53, i32 %6, i8* %16)
  %54 = add nuw nsw i64 %49, 1
  %55 = icmp eq i64 %54, %31
  br i1 %55, label %32, label %48

56:                                               ; preds = %147, %34
  %57 = phi i64 [ 0, %34 ], [ %148, %147 ]
  br i1 %28, label %58, label %102

58:                                               ; preds = %56
  %59 = getelementptr inbounds i8, i8* %12, i64 %57
  br i1 %41, label %90, label %60

60:                                               ; preds = %58, %60
  %61 = phi i8* [ %86, %60 ], [ %17, %58 ]
  %62 = phi i8* [ %87, %60 ], [ %59, %58 ]
  %63 = phi i32 [ %88, %60 ], [ %42, %58 ]
  %64 = load i8, i8* %62, align 1
  %65 = getelementptr inbounds i8, i8* %61, i64 1
  store i8 %64, i8* %61, align 1
  %66 = getelementptr inbounds i8, i8* %62, i64 %9
  %67 = load i8, i8* %66, align 1
  %68 = getelementptr inbounds i8, i8* %61, i64 2
  store i8 %67, i8* %65, align 1
  %69 = getelementptr inbounds i8, i8* %66, i64 %9
  %70 = load i8, i8* %69, align 1
  %71 = getelementptr inbounds i8, i8* %61, i64 3
  store i8 %70, i8* %68, align 1
  %72 = getelementptr inbounds i8, i8* %69, i64 %9
  %73 = load i8, i8* %72, align 1
  %74 = getelementptr inbounds i8, i8* %61, i64 4
  store i8 %73, i8* %71, align 1
  %75 = getelementptr inbounds i8, i8* %72, i64 %9
  %76 = load i8, i8* %75, align 1
  %77 = getelementptr inbounds i8, i8* %61, i64 5
  store i8 %76, i8* %74, align 1
  %78 = getelementptr inbounds i8, i8* %75, i64 %9
  %79 = load i8, i8* %78, align 1
  %80 = getelementptr inbounds i8, i8* %61, i64 6
  store i8 %79, i8* %77, align 1
  %81 = getelementptr inbounds i8, i8* %78, i64 %9
  %82 = load i8, i8* %81, align 1
  %83 = getelementptr inbounds i8, i8* %61, i64 7
  store i8 %82, i8* %80, align 1
  %84 = getelementptr inbounds i8, i8* %81, i64 %9
  %85 = load i8, i8* %84, align 1
  %86 = getelementptr inbounds i8, i8* %61, i64 8
  store i8 %85, i8* %83, align 1
  %87 = getelementptr inbounds i8, i8* %84, i64 %9
  %88 = add i32 %63, -8
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %60

90:                                               ; preds = %60, %58
  %91 = phi i8* [ %17, %58 ], [ %86, %60 ]
  %92 = phi i8* [ %59, %58 ], [ %87, %60 ]
  br i1 %43, label %102, label %93

93:                                               ; preds = %90, %93
  %94 = phi i8* [ %98, %93 ], [ %91, %90 ]
  %95 = phi i8* [ %99, %93 ], [ %92, %90 ]
  %96 = phi i32 [ %100, %93 ], [ %40, %90 ]
  %97 = load i8, i8* %95, align 1
  %98 = getelementptr inbounds i8, i8* %94, i64 1
  store i8 %97, i8* %94, align 1
  %99 = getelementptr inbounds i8, i8* %95, i64 %9
  %100 = add i32 %96, -1
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %93, !llvm.loop !2

102:                                              ; preds = %90, %93, %56
  tail call fastcc void @resize_multistep(i8* %17, i32 %1, i8* %19, i32 %5, i8* %16)
  br i1 %35, label %103, label %147

103:                                              ; preds = %102
  %104 = getelementptr inbounds i8, i8* %4, i64 %57
  br i1 %45, label %135, label %105

105:                                              ; preds = %103, %105
  %106 = phi i8* [ %130, %105 ], [ %19, %103 ]
  %107 = phi i8* [ %132, %105 ], [ %104, %103 ]
  %108 = phi i32 [ %133, %105 ], [ %46, %103 ]
  %109 = getelementptr inbounds i8, i8* %106, i64 1
  %110 = load i8, i8* %106, align 1
  store i8 %110, i8* %107, align 1
  %111 = getelementptr inbounds i8, i8* %107, i64 %36
  %112 = getelementptr inbounds i8, i8* %106, i64 2
  %113 = load i8, i8* %109, align 1
  store i8 %113, i8* %111, align 1
  %114 = getelementptr inbounds i8, i8* %111, i64 %36
  %115 = getelementptr inbounds i8, i8* %106, i64 3
  %116 = load i8, i8* %112, align 1
  store i8 %116, i8* %114, align 1
  %117 = getelementptr inbounds i8, i8* %114, i64 %36
  %118 = getelementptr inbounds i8, i8* %106, i64 4
  %119 = load i8, i8* %115, align 1
  store i8 %119, i8* %117, align 1
  %120 = getelementptr inbounds i8, i8* %117, i64 %36
  %121 = getelementptr inbounds i8, i8* %106, i64 5
  %122 = load i8, i8* %118, align 1
  store i8 %122, i8* %120, align 1
  %123 = getelementptr inbounds i8, i8* %120, i64 %36
  %124 = getelementptr inbounds i8, i8* %106, i64 6
  %125 = load i8, i8* %121, align 1
  store i8 %125, i8* %123, align 1
  %126 = getelementptr inbounds i8, i8* %123, i64 %36
  %127 = getelementptr inbounds i8, i8* %106, i64 7
  %128 = load i8, i8* %124, align 1
  store i8 %128, i8* %126, align 1
  %129 = getelementptr inbounds i8, i8* %126, i64 %36
  %130 = getelementptr inbounds i8, i8* %106, i64 8
  %131 = load i8, i8* %127, align 1
  store i8 %131, i8* %129, align 1
  %132 = getelementptr inbounds i8, i8* %129, i64 %36
  %133 = add i32 %108, -8
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %105

135:                                              ; preds = %105, %103
  %136 = phi i8* [ %19, %103 ], [ %130, %105 ]
  %137 = phi i8* [ %104, %103 ], [ %132, %105 ]
  br i1 %47, label %147, label %138

138:                                              ; preds = %135, %138
  %139 = phi i8* [ %142, %138 ], [ %136, %135 ]
  %140 = phi i8* [ %144, %138 ], [ %137, %135 ]
  %141 = phi i32 [ %145, %138 ], [ %44, %135 ]
  %142 = getelementptr inbounds i8, i8* %139, i64 1
  %143 = load i8, i8* %139, align 1
  store i8 %143, i8* %140, align 1
  %144 = getelementptr inbounds i8, i8* %140, i64 %36
  %145 = add i32 %141, -1
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %138, !llvm.loop !4

147:                                              ; preds = %135, %138, %102
  %148 = add nuw nsw i64 %57, 1
  %149 = icmp eq i64 %148, %37
  br i1 %149, label %150, label %56

150:                                              ; preds = %147, %32, %8
  tail call void @aom_free(i8* %12) #6
  tail call void @aom_free(i8* %16) #6
  tail call void @aom_free(i8* %17) #6
  tail call void @aom_free(i8* %19) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i8* @aom_malloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @resize_multistep(i8* readonly, i32, i8*, i32, i8*) unnamed_addr #1 {
  %6 = icmp eq i32 %1, %3
  br i1 %6, label %7, label %9

7:                                                ; preds = %5
  %8 = sext i32 %1 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %0, i64 %8, i1 false)
  br label %557

9:                                                ; preds = %5, %15
  %10 = phi i32 [ %13, %15 ], [ %1, %5 ]
  %11 = phi i32 [ %16, %15 ], [ 0, %5 ]
  %12 = add nsw i32 %10, 1
  %13 = ashr i32 %12, 1
  %14 = icmp slt i32 %13, %3
  br i1 %14, label %18, label %15

15:                                               ; preds = %9
  %16 = add nuw nsw i32 %11, 1
  %17 = icmp eq i32 %13, 1
  br i1 %17, label %20, label %9

18:                                               ; preds = %9
  %19 = icmp eq i32 %11, 0
  br i1 %19, label %556, label %20

20:                                               ; preds = %15, %18
  %21 = phi i32 [ %11, %18 ], [ %16, %15 ]
  %22 = add nsw i32 %1, 1
  %23 = ashr i32 %22, 1
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %4, i64 %24
  %26 = add nsw i32 %21, -1
  br label %29

27:                                               ; preds = %552
  %28 = icmp eq i32 %34, %3
  br i1 %28, label %557, label %555

29:                                               ; preds = %552, %20
  %30 = phi i32 [ 0, %20 ], [ %553, %552 ]
  %31 = phi i32 [ %1, %20 ], [ %34, %552 ]
  %32 = phi i8* [ null, %20 ], [ %45, %552 ]
  %33 = add nsw i32 %31, 1
  %34 = ashr i32 %33, 1
  %35 = icmp eq i32 %30, 0
  %36 = select i1 %35, i8* %0, i8* %32
  %37 = icmp eq i32 %30, %26
  %38 = icmp eq i32 %34, %3
  %39 = and i1 %37, %38
  br i1 %39, label %44, label %40

40:                                               ; preds = %29
  %41 = and i32 %30, 1
  %42 = icmp eq i32 %41, 0
  %43 = select i1 %42, i8* %4, i8* %25
  br label %44

44:                                               ; preds = %29, %40
  %45 = phi i8* [ %43, %40 ], [ %2, %29 ]
  %46 = and i32 %31, 1
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %262, label %48

48:                                               ; preds = %44
  %49 = add nsw i32 %31, -3
  %50 = and i32 %49, 1
  %51 = add nsw i32 %50, %49
  %52 = icmp slt i32 %51, 4
  br i1 %52, label %105, label %53

53:                                               ; preds = %48
  %54 = load i8, i8* %36, align 1
  %55 = zext i8 %54 to i32
  %56 = shl nuw nsw i32 %55, 6
  %57 = add nuw nsw i32 %56, 64
  %58 = getelementptr inbounds i8, i8* %36, i64 1
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = add nuw nsw i32 %60, %55
  %62 = mul nuw nsw i32 %61, 35
  %63 = add nuw nsw i32 %57, %62
  %64 = getelementptr inbounds i8, i8* %36, i64 2
  %65 = getelementptr inbounds i8, i8* %36, i64 3
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = add nuw nsw i32 %67, %55
  %69 = mul nsw i32 %68, -3
  %70 = add nsw i32 %63, %69
  %71 = ashr i32 %70, 7
  %72 = icmp sgt i32 %71, 0
  %73 = select i1 %72, i32 %71, i32 0
  %74 = icmp slt i32 %73, 255
  %75 = select i1 %74, i32 %73, i32 255
  %76 = trunc i32 %75 to i8
  %77 = getelementptr inbounds i8, i8* %45, i64 1
  store i8 %76, i8* %45, align 1
  %78 = load i8, i8* %64, align 1
  %79 = zext i8 %78 to i32
  %80 = shl nuw nsw i32 %79, 6
  %81 = add nuw nsw i32 %80, 64
  %82 = load i8, i8* %58, align 1
  %83 = zext i8 %82 to i32
  %84 = load i8, i8* %65, align 1
  %85 = zext i8 %84 to i32
  %86 = add nuw nsw i32 %85, %83
  %87 = mul nuw nsw i32 %86, 35
  %88 = add nuw nsw i32 %81, %87
  %89 = load i8, i8* %36, align 1
  %90 = zext i8 %89 to i32
  %91 = getelementptr inbounds i8, i8* %36, i64 5
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = add nuw nsw i32 %93, %90
  %95 = mul nsw i32 %94, -3
  %96 = add nsw i32 %88, %95
  %97 = ashr i32 %96, 7
  %98 = icmp sgt i32 %97, 0
  %99 = select i1 %98, i32 %97, i32 0
  %100 = icmp slt i32 %99, 255
  %101 = select i1 %100, i32 %99, i32 255
  %102 = trunc i32 %101 to i8
  %103 = getelementptr inbounds i8, i8* %45, i64 2
  store i8 %102, i8* %77, align 1
  %104 = icmp eq i32 %51, 4
  br i1 %104, label %167, label %163

105:                                              ; preds = %48
  %106 = icmp sgt i32 %31, 0
  br i1 %106, label %107, label %552

107:                                              ; preds = %105
  %108 = add nsw i32 %31, -1
  %109 = sext i32 %31 to i64
  br label %110

110:                                              ; preds = %110, %107
  %111 = phi i64 [ 0, %107 ], [ %136, %110 ]
  %112 = phi i8* [ %45, %107 ], [ %162, %110 ]
  %113 = getelementptr inbounds i8, i8* %36, i64 %111
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = shl nuw nsw i32 %115, 6
  %117 = add nuw nsw i32 %116, 64
  %118 = icmp eq i64 %111, 0
  %119 = add nuw nsw i64 %111, 4294967295
  %120 = and i64 %119, 4294967295
  %121 = select i1 %118, i64 0, i64 %120
  %122 = getelementptr inbounds i8, i8* %36, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = or i64 %111, 1
  %126 = icmp slt i64 %125, %109
  %127 = trunc i64 %125 to i32
  %128 = select i1 %126, i32 %127, i32 %108
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %36, i64 %129
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = add nuw nsw i32 %132, %124
  %134 = mul nuw nsw i32 %133, 35
  %135 = add nuw nsw i32 %117, %134
  %136 = add nuw nsw i64 %111, 2
  %137 = icmp slt i64 %136, %109
  %138 = icmp ugt i64 %111, 3
  %139 = select i1 %138, i64 %111, i64 3
  %140 = add nuw i64 %139, 4294967293
  %141 = and i64 %140, 4294967295
  %142 = getelementptr inbounds i8, i8* %36, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = add nuw nsw i64 %111, 3
  %146 = icmp slt i64 %145, %109
  %147 = trunc i64 %145 to i32
  %148 = select i1 %146, i32 %147, i32 %108
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i8, i8* %36, i64 %149
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = add nuw nsw i32 %152, %144
  %154 = mul nsw i32 %153, -3
  %155 = add nsw i32 %135, %154
  %156 = ashr i32 %155, 7
  %157 = icmp sgt i32 %156, 0
  %158 = select i1 %157, i32 %156, i32 0
  %159 = icmp slt i32 %158, 255
  %160 = select i1 %159, i32 %158, i32 255
  %161 = trunc i32 %160 to i8
  %162 = getelementptr inbounds i8, i8* %112, i64 1
  store i8 %161, i8* %112, align 1
  br i1 %137, label %110, label %552

163:                                              ; preds = %53
  %164 = sext i32 %51 to i64
  br label %175

165:                                              ; preds = %175
  %166 = trunc i64 %194 to i32
  br label %167

167:                                              ; preds = %165, %53
  %168 = phi i32 [ 4, %53 ], [ %166, %165 ]
  %169 = phi i8* [ %103, %53 ], [ %212, %165 ]
  %170 = icmp slt i32 %168, %31
  br i1 %170, label %171, label %552

171:                                              ; preds = %167
  %172 = add nsw i32 %31, -1
  %173 = zext i32 %168 to i64
  %174 = sext i32 %31 to i64
  br label %214

175:                                              ; preds = %175, %163
  %176 = phi i64 [ 4, %163 ], [ %194, %175 ]
  %177 = phi i8* [ %103, %163 ], [ %212, %175 ]
  %178 = getelementptr inbounds i8, i8* %36, i64 %176
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = shl nuw nsw i32 %180, 6
  %182 = add nuw nsw i32 %181, 64
  %183 = add nsw i64 %176, -1
  %184 = getelementptr inbounds i8, i8* %36, i64 %183
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = or i64 %176, 1
  %188 = getelementptr inbounds i8, i8* %36, i64 %187
  %189 = load i8, i8* %188, align 1
  %190 = zext i8 %189 to i32
  %191 = add nuw nsw i32 %190, %186
  %192 = mul nuw nsw i32 %191, 35
  %193 = add nuw nsw i32 %182, %192
  %194 = add nuw nsw i64 %176, 2
  %195 = add nsw i64 %176, -3
  %196 = getelementptr inbounds i8, i8* %36, i64 %195
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i32
  %199 = add nuw nsw i64 %176, 3
  %200 = getelementptr inbounds i8, i8* %36, i64 %199
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i32
  %203 = add nuw nsw i32 %202, %198
  %204 = mul nsw i32 %203, -3
  %205 = add nsw i32 %193, %204
  %206 = ashr i32 %205, 7
  %207 = icmp sgt i32 %206, 0
  %208 = select i1 %207, i32 %206, i32 0
  %209 = icmp slt i32 %208, 255
  %210 = select i1 %209, i32 %208, i32 255
  %211 = trunc i32 %210 to i8
  %212 = getelementptr inbounds i8, i8* %177, i64 1
  store i8 %211, i8* %177, align 1
  %213 = icmp slt i64 %194, %164
  br i1 %213, label %175, label %165

214:                                              ; preds = %214, %171
  %215 = phi i64 [ %173, %171 ], [ %237, %214 ]
  %216 = phi i8* [ %169, %171 ], [ %261, %214 ]
  %217 = getelementptr inbounds i8, i8* %36, i64 %215
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i32
  %220 = shl nuw nsw i32 %219, 6
  %221 = add nuw nsw i32 %220, 64
  %222 = add nsw i64 %215, -1
  %223 = getelementptr inbounds i8, i8* %36, i64 %222
  %224 = load i8, i8* %223, align 1
  %225 = zext i8 %224 to i32
  %226 = trunc i64 %215 to i32
  %227 = add i32 %226, 1
  %228 = icmp slt i32 %227, %31
  %229 = select i1 %228, i32 %227, i32 %172
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds i8, i8* %36, i64 %230
  %232 = load i8, i8* %231, align 1
  %233 = zext i8 %232 to i32
  %234 = add nuw nsw i32 %233, %225
  %235 = mul nuw nsw i32 %234, 35
  %236 = add nuw nsw i32 %221, %235
  %237 = add nuw nsw i64 %215, 2
  %238 = icmp slt i64 %237, %174
  %239 = shl i64 %215, 32
  %240 = add i64 %239, -12884901888
  %241 = ashr exact i64 %240, 32
  %242 = getelementptr inbounds i8, i8* %36, i64 %241
  %243 = load i8, i8* %242, align 1
  %244 = zext i8 %243 to i32
  %245 = add i32 %226, 3
  %246 = icmp slt i32 %245, %31
  %247 = select i1 %246, i32 %245, i32 %172
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds i8, i8* %36, i64 %248
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = add nuw nsw i32 %251, %244
  %253 = mul nsw i32 %252, -3
  %254 = add nsw i32 %236, %253
  %255 = ashr i32 %254, 7
  %256 = icmp sgt i32 %255, 0
  %257 = select i1 %256, i32 %255, i32 0
  %258 = icmp slt i32 %257, 255
  %259 = select i1 %258, i32 %257, i32 255
  %260 = trunc i32 %259 to i8
  %261 = getelementptr inbounds i8, i8* %216, i64 1
  store i8 %260, i8* %216, align 1
  br i1 %238, label %214, label %552

262:                                              ; preds = %44
  %263 = add nsw i32 %31, -4
  %264 = and i32 %263, 1
  %265 = add nsw i32 %264, %263
  %266 = icmp slt i32 %265, 4
  br i1 %266, label %335, label %267

267:                                              ; preds = %262
  %268 = load i8, i8* %36, align 1
  %269 = zext i8 %268 to i32
  %270 = getelementptr inbounds i8, i8* %36, i64 1
  %271 = load i8, i8* %270, align 1
  %272 = zext i8 %271 to i32
  %273 = add nuw nsw i32 %272, %269
  %274 = mul nuw nsw i32 %273, 56
  %275 = getelementptr inbounds i8, i8* %36, i64 2
  %276 = load i8, i8* %275, align 1
  %277 = zext i8 %276 to i32
  %278 = add nuw nsw i32 %277, %269
  %279 = mul nuw nsw i32 %278, 12
  %280 = getelementptr inbounds i8, i8* %36, i64 3
  %281 = load i8, i8* %280, align 1
  %282 = zext i8 %281 to i32
  %283 = add nuw nsw i32 %282, %269
  %284 = mul nsw i32 %283, -3
  %285 = getelementptr inbounds i8, i8* %36, i64 4
  %286 = load i8, i8* %285, align 1
  %287 = zext i8 %286 to i32
  %288 = sub nsw i32 64, %269
  %289 = add nsw i32 %288, %274
  %290 = add nsw i32 %289, %279
  %291 = sub nsw i32 %290, %287
  %292 = add nsw i32 %291, %284
  %293 = ashr i32 %292, 7
  %294 = icmp sgt i32 %293, 0
  %295 = select i1 %294, i32 %293, i32 0
  %296 = icmp slt i32 %295, 255
  %297 = select i1 %296, i32 %295, i32 255
  %298 = trunc i32 %297 to i8
  %299 = getelementptr inbounds i8, i8* %45, i64 1
  store i8 %298, i8* %45, align 1
  %300 = load i8, i8* %275, align 1
  %301 = zext i8 %300 to i32
  %302 = load i8, i8* %280, align 1
  %303 = zext i8 %302 to i32
  %304 = add nuw nsw i32 %303, %301
  %305 = mul nuw nsw i32 %304, 56
  %306 = load i8, i8* %270, align 1
  %307 = zext i8 %306 to i32
  %308 = load i8, i8* %285, align 1
  %309 = zext i8 %308 to i32
  %310 = add nuw nsw i32 %309, %307
  %311 = mul nuw nsw i32 %310, 12
  %312 = load i8, i8* %36, align 1
  %313 = zext i8 %312 to i32
  %314 = getelementptr inbounds i8, i8* %36, i64 5
  %315 = load i8, i8* %314, align 1
  %316 = zext i8 %315 to i32
  %317 = add nuw nsw i32 %316, %313
  %318 = mul nsw i32 %317, -3
  %319 = getelementptr inbounds i8, i8* %36, i64 6
  %320 = load i8, i8* %319, align 1
  %321 = zext i8 %320 to i32
  %322 = add nuw nsw i32 %305, 64
  %323 = sub nsw i32 %322, %313
  %324 = add nsw i32 %323, %311
  %325 = sub nsw i32 %324, %321
  %326 = add nsw i32 %325, %318
  %327 = ashr i32 %326, 7
  %328 = icmp sgt i32 %327, 0
  %329 = select i1 %328, i32 %327, i32 0
  %330 = icmp slt i32 %329, 255
  %331 = select i1 %330, i32 %329, i32 255
  %332 = trunc i32 %331 to i8
  %333 = getelementptr inbounds i8, i8* %45, i64 2
  store i8 %332, i8* %299, align 1
  %334 = icmp eq i32 %265, 4
  br i1 %334, label %477, label %419

335:                                              ; preds = %262
  %336 = icmp sgt i32 %31, 0
  br i1 %336, label %337, label %552

337:                                              ; preds = %335
  %338 = add nsw i32 %31, -1
  %339 = sext i32 %338 to i64
  %340 = sext i32 %31 to i64
  br label %341

341:                                              ; preds = %341, %337
  %342 = phi i64 [ 0, %337 ], [ %417, %341 ]
  %343 = phi i8* [ %45, %337 ], [ %416, %341 ]
  %344 = or i64 %342, 1
  %345 = getelementptr inbounds i8, i8* %36, i64 %342
  %346 = load i8, i8* %345, align 1
  %347 = zext i8 %346 to i32
  %348 = icmp slt i64 %344, %339
  %349 = trunc i64 %344 to i32
  %350 = select i1 %348, i32 %349, i32 %338
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds i8, i8* %36, i64 %351
  %353 = load i8, i8* %352, align 1
  %354 = zext i8 %353 to i32
  %355 = add nuw nsw i32 %354, %347
  %356 = mul nuw nsw i32 %355, 56
  %357 = icmp eq i64 %342, 0
  %358 = add nuw nsw i64 %342, 4294967295
  %359 = and i64 %358, 4294967295
  %360 = select i1 %357, i64 0, i64 %359
  %361 = getelementptr inbounds i8, i8* %36, i64 %360
  %362 = load i8, i8* %361, align 1
  %363 = zext i8 %362 to i32
  %364 = add nuw nsw i64 %344, 1
  %365 = icmp slt i64 %364, %339
  %366 = trunc i64 %364 to i32
  %367 = select i1 %365, i32 %366, i32 %338
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds i8, i8* %36, i64 %368
  %370 = load i8, i8* %369, align 1
  %371 = zext i8 %370 to i32
  %372 = add nuw nsw i32 %371, %363
  %373 = mul nuw nsw i32 %372, 12
  %374 = icmp ugt i64 %342, 2
  %375 = select i1 %374, i64 %342, i64 2
  %376 = add nuw i64 %375, 4294967294
  %377 = and i64 %376, 4294967295
  %378 = getelementptr inbounds i8, i8* %36, i64 %377
  %379 = load i8, i8* %378, align 1
  %380 = zext i8 %379 to i32
  %381 = add nuw nsw i64 %344, 2
  %382 = icmp slt i64 %381, %339
  %383 = trunc i64 %381 to i32
  %384 = select i1 %382, i32 %383, i32 %338
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds i8, i8* %36, i64 %385
  %387 = load i8, i8* %386, align 1
  %388 = zext i8 %387 to i32
  %389 = add nuw nsw i32 %388, %380
  %390 = mul nsw i32 %389, -3
  %391 = icmp ugt i64 %342, 3
  %392 = select i1 %391, i64 %342, i64 3
  %393 = add nuw i64 %392, 4294967293
  %394 = and i64 %393, 4294967295
  %395 = getelementptr inbounds i8, i8* %36, i64 %394
  %396 = load i8, i8* %395, align 1
  %397 = zext i8 %396 to i32
  %398 = add i32 %349, 3
  %399 = icmp slt i32 %398, %338
  %400 = select i1 %399, i32 %398, i32 %338
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds i8, i8* %36, i64 %401
  %403 = load i8, i8* %402, align 1
  %404 = zext i8 %403 to i32
  %405 = add nuw nsw i32 %356, 64
  %406 = add nuw nsw i32 %405, %373
  %407 = sub nsw i32 %406, %397
  %408 = add nsw i32 %407, %390
  %409 = sub nsw i32 %408, %404
  %410 = ashr i32 %409, 7
  %411 = icmp sgt i32 %410, 0
  %412 = select i1 %411, i32 %410, i32 0
  %413 = icmp slt i32 %412, 255
  %414 = select i1 %413, i32 %412, i32 255
  %415 = trunc i32 %414 to i8
  %416 = getelementptr inbounds i8, i8* %343, i64 1
  store i8 %415, i8* %343, align 1
  %417 = add nuw nsw i64 %342, 2
  %418 = icmp slt i64 %417, %340
  br i1 %418, label %341, label %552

419:                                              ; preds = %267
  %420 = sext i32 %265 to i64
  br label %421

421:                                              ; preds = %421, %419
  %422 = phi i64 [ 4, %419 ], [ %473, %421 ]
  %423 = phi i8* [ %333, %419 ], [ %472, %421 ]
  %424 = or i64 %422, 1
  %425 = getelementptr inbounds i8, i8* %36, i64 %422
  %426 = load i8, i8* %425, align 1
  %427 = zext i8 %426 to i32
  %428 = getelementptr inbounds i8, i8* %36, i64 %424
  %429 = load i8, i8* %428, align 1
  %430 = zext i8 %429 to i32
  %431 = add nuw nsw i32 %430, %427
  %432 = mul nuw nsw i32 %431, 56
  %433 = add nsw i64 %422, -1
  %434 = getelementptr inbounds i8, i8* %36, i64 %433
  %435 = load i8, i8* %434, align 1
  %436 = zext i8 %435 to i32
  %437 = add nuw nsw i64 %424, 1
  %438 = getelementptr inbounds i8, i8* %36, i64 %437
  %439 = load i8, i8* %438, align 1
  %440 = zext i8 %439 to i32
  %441 = add nuw nsw i32 %440, %436
  %442 = mul nuw nsw i32 %441, 12
  %443 = add nsw i64 %422, -2
  %444 = getelementptr inbounds i8, i8* %36, i64 %443
  %445 = load i8, i8* %444, align 1
  %446 = zext i8 %445 to i32
  %447 = add nuw nsw i64 %424, 2
  %448 = getelementptr inbounds i8, i8* %36, i64 %447
  %449 = load i8, i8* %448, align 1
  %450 = zext i8 %449 to i32
  %451 = add nuw nsw i32 %450, %446
  %452 = mul nsw i32 %451, -3
  %453 = add nsw i64 %422, -3
  %454 = getelementptr inbounds i8, i8* %36, i64 %453
  %455 = load i8, i8* %454, align 1
  %456 = zext i8 %455 to i32
  %457 = add nuw nsw i64 %424, 3
  %458 = getelementptr inbounds i8, i8* %36, i64 %457
  %459 = load i8, i8* %458, align 1
  %460 = zext i8 %459 to i32
  %461 = add nuw nsw i32 %432, 64
  %462 = add nuw nsw i32 %461, %442
  %463 = sub nsw i32 %462, %456
  %464 = add nsw i32 %463, %452
  %465 = sub nsw i32 %464, %460
  %466 = ashr i32 %465, 7
  %467 = icmp sgt i32 %466, 0
  %468 = select i1 %467, i32 %466, i32 0
  %469 = icmp slt i32 %468, 255
  %470 = select i1 %469, i32 %468, i32 255
  %471 = trunc i32 %470 to i8
  %472 = getelementptr inbounds i8, i8* %423, i64 1
  store i8 %471, i8* %423, align 1
  %473 = add nuw nsw i64 %422, 2
  %474 = icmp slt i64 %473, %420
  br i1 %474, label %421, label %475

475:                                              ; preds = %421
  %476 = trunc i64 %473 to i32
  br label %477

477:                                              ; preds = %475, %267
  %478 = phi i32 [ 4, %267 ], [ %476, %475 ]
  %479 = phi i8* [ %333, %267 ], [ %472, %475 ]
  %480 = icmp slt i32 %478, %31
  br i1 %480, label %481, label %552

481:                                              ; preds = %477
  %482 = add nsw i32 %31, -1
  %483 = zext i32 %478 to i64
  %484 = sext i32 %31 to i64
  br label %485

485:                                              ; preds = %485, %481
  %486 = phi i64 [ %483, %481 ], [ %550, %485 ]
  %487 = phi i8* [ %479, %481 ], [ %549, %485 ]
  %488 = trunc i64 %486 to i32
  %489 = or i32 %488, 1
  %490 = getelementptr inbounds i8, i8* %36, i64 %486
  %491 = load i8, i8* %490, align 1
  %492 = zext i8 %491 to i32
  %493 = icmp slt i32 %489, %482
  %494 = select i1 %493, i32 %489, i32 %482
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds i8, i8* %36, i64 %495
  %497 = load i8, i8* %496, align 1
  %498 = zext i8 %497 to i32
  %499 = add nuw nsw i32 %498, %492
  %500 = mul nuw nsw i32 %499, 56
  %501 = add nsw i64 %486, -1
  %502 = getelementptr inbounds i8, i8* %36, i64 %501
  %503 = load i8, i8* %502, align 1
  %504 = zext i8 %503 to i32
  %505 = add i32 %489, 1
  %506 = icmp slt i32 %505, %482
  %507 = select i1 %506, i32 %505, i32 %482
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds i8, i8* %36, i64 %508
  %510 = load i8, i8* %509, align 1
  %511 = zext i8 %510 to i32
  %512 = add nuw nsw i32 %511, %504
  %513 = mul nuw nsw i32 %512, 12
  %514 = add nsw i64 %486, -2
  %515 = getelementptr inbounds i8, i8* %36, i64 %514
  %516 = load i8, i8* %515, align 1
  %517 = zext i8 %516 to i32
  %518 = add i32 %489, 2
  %519 = icmp slt i32 %518, %482
  %520 = select i1 %519, i32 %518, i32 %482
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds i8, i8* %36, i64 %521
  %523 = load i8, i8* %522, align 1
  %524 = zext i8 %523 to i32
  %525 = add nuw nsw i32 %524, %517
  %526 = mul nsw i32 %525, -3
  %527 = add nsw i64 %486, -3
  %528 = getelementptr inbounds i8, i8* %36, i64 %527
  %529 = load i8, i8* %528, align 1
  %530 = zext i8 %529 to i32
  %531 = add i32 %489, 3
  %532 = icmp slt i32 %531, %482
  %533 = select i1 %532, i32 %531, i32 %482
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds i8, i8* %36, i64 %534
  %536 = load i8, i8* %535, align 1
  %537 = zext i8 %536 to i32
  %538 = add nuw nsw i32 %500, 64
  %539 = add nuw nsw i32 %538, %513
  %540 = sub nsw i32 %539, %530
  %541 = add nsw i32 %540, %526
  %542 = sub nsw i32 %541, %537
  %543 = ashr i32 %542, 7
  %544 = icmp sgt i32 %543, 0
  %545 = select i1 %544, i32 %543, i32 0
  %546 = icmp slt i32 %545, 255
  %547 = select i1 %546, i32 %545, i32 255
  %548 = trunc i32 %547 to i8
  %549 = getelementptr inbounds i8, i8* %487, i64 1
  store i8 %548, i8* %487, align 1
  %550 = add nuw nsw i64 %486, 2
  %551 = icmp slt i64 %550, %484
  br i1 %551, label %485, label %552

552:                                              ; preds = %214, %110, %485, %341, %477, %335, %167, %105
  %553 = add nuw nsw i32 %30, 1
  %554 = icmp eq i32 %553, %21
  br i1 %554, label %27, label %29

555:                                              ; preds = %27
  tail call fastcc void @interpolate(i8* %45, i32 %34, i8* %2, i32 %3)
  br label %557

556:                                              ; preds = %18
  tail call fastcc void @interpolate(i8* %0, i32 %1, i8* %2, i32 %3)
  br label %557

557:                                              ; preds = %556, %27, %555, %7
  ret void
}

declare void @aom_free(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_upscale_plane_double_prec(double* readonly, i32, i32, i32, double* nocapture, i32, i32, i32) local_unnamed_addr #1 {
  %9 = sext i32 %6 to i64
  %10 = sext i32 %1 to i64
  %11 = shl nsw i64 %10, 3
  %12 = mul i64 %11, %9
  %13 = tail call i8* @aom_malloc(i64 %12) #6
  %14 = bitcast i8* %13 to double*
  %15 = tail call i8* @aom_malloc(i64 %11) #6
  %16 = bitcast i8* %15 to double*
  %17 = sext i32 %5 to i64
  %18 = shl nsw i64 %17, 3
  %19 = tail call i8* @aom_malloc(i64 %18) #6
  %20 = bitcast i8* %19 to double*
  %21 = icmp eq i8* %13, null
  %22 = icmp eq i8* %15, null
  %23 = or i1 %21, %22
  %24 = icmp eq i8* %19, null
  %25 = or i1 %23, %24
  br i1 %25, label %185, label %26

26:                                               ; preds = %8
  %27 = icmp sgt i32 %1, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %26
  %29 = sext i32 %3 to i64
  %30 = zext i32 %1 to i64
  br label %47

31:                                               ; preds = %47, %26
  %32 = icmp sgt i32 %6, 0
  br i1 %32, label %33, label %185

33:                                               ; preds = %31
  %34 = icmp sgt i32 %5, 0
  %35 = sext i32 %7 to i64
  %36 = zext i32 %6 to i64
  %37 = add i32 %1, -1
  %38 = add i32 %5, -1
  %39 = and i32 %1, 7
  %40 = icmp ult i32 %37, 7
  %41 = sub i32 %1, %39
  %42 = icmp eq i32 %39, 0
  %43 = and i32 %5, 7
  %44 = icmp ult i32 %38, 7
  %45 = sub i32 %5, %43
  %46 = icmp eq i32 %43, 0
  br label %55

47:                                               ; preds = %47, %28
  %48 = phi i64 [ 0, %28 ], [ %53, %47 ]
  %49 = mul nsw i64 %48, %29
  %50 = getelementptr inbounds double, double* %0, i64 %49
  %51 = mul nsw i64 %48, %9
  %52 = getelementptr inbounds double, double* %14, i64 %51
  tail call fastcc void @upscale_multistep_double_prec(double* %50, i32 %2, double* %52, i32 %6)
  %53 = add nuw nsw i64 %48, 1
  %54 = icmp eq i64 %53, %30
  br i1 %54, label %31, label %47

55:                                               ; preds = %182, %33
  %56 = phi i64 [ 0, %33 ], [ %183, %182 ]
  br i1 %27, label %57, label %119

57:                                               ; preds = %55
  %58 = getelementptr inbounds double, double* %14, i64 %56
  br i1 %40, label %105, label %59

59:                                               ; preds = %57, %59
  %60 = phi double* [ %100, %59 ], [ %16, %57 ]
  %61 = phi double* [ %102, %59 ], [ %58, %57 ]
  %62 = phi i32 [ %103, %59 ], [ %41, %57 ]
  %63 = bitcast double* %61 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds double, double* %60, i64 1
  %66 = bitcast double* %60 to i64*
  store i64 %64, i64* %66, align 8
  %67 = getelementptr inbounds double, double* %61, i64 %9
  %68 = bitcast double* %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds double, double* %60, i64 2
  %71 = bitcast double* %65 to i64*
  store i64 %69, i64* %71, align 8
  %72 = getelementptr inbounds double, double* %67, i64 %9
  %73 = bitcast double* %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds double, double* %60, i64 3
  %76 = bitcast double* %70 to i64*
  store i64 %74, i64* %76, align 8
  %77 = getelementptr inbounds double, double* %72, i64 %9
  %78 = bitcast double* %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds double, double* %60, i64 4
  %81 = bitcast double* %75 to i64*
  store i64 %79, i64* %81, align 8
  %82 = getelementptr inbounds double, double* %77, i64 %9
  %83 = bitcast double* %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds double, double* %60, i64 5
  %86 = bitcast double* %80 to i64*
  store i64 %84, i64* %86, align 8
  %87 = getelementptr inbounds double, double* %82, i64 %9
  %88 = bitcast double* %87 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds double, double* %60, i64 6
  %91 = bitcast double* %85 to i64*
  store i64 %89, i64* %91, align 8
  %92 = getelementptr inbounds double, double* %87, i64 %9
  %93 = bitcast double* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds double, double* %60, i64 7
  %96 = bitcast double* %90 to i64*
  store i64 %94, i64* %96, align 8
  %97 = getelementptr inbounds double, double* %92, i64 %9
  %98 = bitcast double* %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds double, double* %60, i64 8
  %101 = bitcast double* %95 to i64*
  store i64 %99, i64* %101, align 8
  %102 = getelementptr inbounds double, double* %97, i64 %9
  %103 = add i32 %62, -8
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %59

105:                                              ; preds = %59, %57
  %106 = phi double* [ %16, %57 ], [ %100, %59 ]
  %107 = phi double* [ %58, %57 ], [ %102, %59 ]
  br i1 %42, label %119, label %108

108:                                              ; preds = %105, %108
  %109 = phi double* [ %114, %108 ], [ %106, %105 ]
  %110 = phi double* [ %116, %108 ], [ %107, %105 ]
  %111 = phi i32 [ %117, %108 ], [ %39, %105 ]
  %112 = bitcast double* %110 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds double, double* %109, i64 1
  %115 = bitcast double* %109 to i64*
  store i64 %113, i64* %115, align 8
  %116 = getelementptr inbounds double, double* %110, i64 %9
  %117 = add i32 %111, -1
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %108, !llvm.loop !5

119:                                              ; preds = %105, %108, %55
  tail call fastcc void @upscale_multistep_double_prec(double* %16, i32 %1, double* %20, i32 %5)
  br i1 %34, label %120, label %182

120:                                              ; preds = %119
  %121 = getelementptr inbounds double, double* %4, i64 %56
  br i1 %44, label %168, label %122

122:                                              ; preds = %120, %122
  %123 = phi double* [ %161, %122 ], [ %20, %120 ]
  %124 = phi double* [ %165, %122 ], [ %121, %120 ]
  %125 = phi i32 [ %166, %122 ], [ %45, %120 ]
  %126 = getelementptr inbounds double, double* %123, i64 1
  %127 = bitcast double* %123 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast double* %124 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds double, double* %124, i64 %35
  %131 = getelementptr inbounds double, double* %123, i64 2
  %132 = bitcast double* %126 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast double* %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds double, double* %130, i64 %35
  %136 = getelementptr inbounds double, double* %123, i64 3
  %137 = bitcast double* %131 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast double* %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds double, double* %135, i64 %35
  %141 = getelementptr inbounds double, double* %123, i64 4
  %142 = bitcast double* %136 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = bitcast double* %140 to i64*
  store i64 %143, i64* %144, align 8
  %145 = getelementptr inbounds double, double* %140, i64 %35
  %146 = getelementptr inbounds double, double* %123, i64 5
  %147 = bitcast double* %141 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = bitcast double* %145 to i64*
  store i64 %148, i64* %149, align 8
  %150 = getelementptr inbounds double, double* %145, i64 %35
  %151 = getelementptr inbounds double, double* %123, i64 6
  %152 = bitcast double* %146 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = bitcast double* %150 to i64*
  store i64 %153, i64* %154, align 8
  %155 = getelementptr inbounds double, double* %150, i64 %35
  %156 = getelementptr inbounds double, double* %123, i64 7
  %157 = bitcast double* %151 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = bitcast double* %155 to i64*
  store i64 %158, i64* %159, align 8
  %160 = getelementptr inbounds double, double* %155, i64 %35
  %161 = getelementptr inbounds double, double* %123, i64 8
  %162 = bitcast double* %156 to i64*
  %163 = load i64, i64* %162, align 8
  %164 = bitcast double* %160 to i64*
  store i64 %163, i64* %164, align 8
  %165 = getelementptr inbounds double, double* %160, i64 %35
  %166 = add i32 %125, -8
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %122

168:                                              ; preds = %122, %120
  %169 = phi double* [ %20, %120 ], [ %161, %122 ]
  %170 = phi double* [ %121, %120 ], [ %165, %122 ]
  br i1 %46, label %182, label %171

171:                                              ; preds = %168, %171
  %172 = phi double* [ %175, %171 ], [ %169, %168 ]
  %173 = phi double* [ %179, %171 ], [ %170, %168 ]
  %174 = phi i32 [ %180, %171 ], [ %43, %168 ]
  %175 = getelementptr inbounds double, double* %172, i64 1
  %176 = bitcast double* %172 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = bitcast double* %173 to i64*
  store i64 %177, i64* %178, align 8
  %179 = getelementptr inbounds double, double* %173, i64 %35
  %180 = add i32 %174, -1
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %171, !llvm.loop !6

182:                                              ; preds = %168, %171, %119
  %183 = add nuw nsw i64 %56, 1
  %184 = icmp eq i64 %183, %36
  br i1 %184, label %185, label %55

185:                                              ; preds = %182, %31, %8
  tail call void @aom_free(i8* %13) #6
  tail call void @aom_free(i8* %15) #6
  tail call void @aom_free(i8* %19) #6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @upscale_multistep_double_prec(double* readonly, i32, double* nocapture, i32) unnamed_addr #4 {
  %5 = shl nsw i32 %3, 4
  %6 = shl nsw i32 %1, 4
  %7 = icmp slt i32 %5, %6
  br i1 %7, label %8, label %18

8:                                                ; preds = %4
  %9 = mul nsw i32 %1, 13
  %10 = icmp slt i32 %5, %9
  br i1 %10, label %11, label %18

11:                                               ; preds = %8
  %12 = mul nsw i32 %1, 11
  %13 = icmp slt i32 %5, %12
  br i1 %13, label %14, label %18

14:                                               ; preds = %11
  %15 = mul nsw i32 %1, 9
  %16 = icmp slt i32 %5, %15
  %17 = select i1 %16, [8 x i16]* getelementptr inbounds ([64 x [8 x i16]], [64 x [8 x i16]]* @filteredinterp_filters500, i64 0, i64 0), [8 x i16]* getelementptr inbounds ([64 x [8 x i16]], [64 x [8 x i16]]* @filteredinterp_filters625, i64 0, i64 0)
  br label %18

18:                                               ; preds = %14, %11, %8, %4
  %19 = phi [8 x i16]* [ getelementptr inbounds ([64 x [8 x i16]], [64 x [8 x i16]]* @av1_resize_filter_normative, i64 0, i64 0), %4 ], [ getelementptr inbounds ([64 x [8 x i16]], [64 x [8 x i16]]* @filteredinterp_filters875, i64 0, i64 0), %8 ], [ getelementptr inbounds ([64 x [8 x i16]], [64 x [8 x i16]]* @filteredinterp_filters750, i64 0, i64 0), %11 ], [ %17, %14 ]
  %20 = shl i32 %1, 14
  %21 = sdiv i32 %3, 2
  %22 = add i32 %21, %20
  %23 = udiv i32 %22, %3
  %24 = icmp sgt i32 %1, %3
  br i1 %24, label %25, label %30

25:                                               ; preds = %18
  %26 = sub nsw i32 %1, %3
  %27 = shl i32 %26, 13
  %28 = add nsw i32 %27, %21
  %29 = sdiv i32 %28, %3
  br label %36

30:                                               ; preds = %18
  %31 = sub nsw i32 %3, %1
  %32 = shl i32 %31, 13
  %33 = add nsw i32 %32, %21
  %34 = sdiv i32 %33, %3
  %35 = sub nsw i32 0, %34
  br label %36

36:                                               ; preds = %30, %25
  %37 = phi i32 [ %29, %25 ], [ %35, %30 ]
  %38 = add i32 %37, 128
  %39 = icmp slt i32 %38, 49152
  br i1 %39, label %40, label %97

40:                                               ; preds = %36
  %41 = sub i32 49023, %37
  %42 = udiv i32 %41, %23
  %43 = add i32 %42, 1
  %44 = icmp ult i32 %43, 8
  br i1 %44, label %88, label %45

45:                                               ; preds = %40
  %46 = and i32 %43, -8
  %47 = mul i32 %46, %23
  %48 = add i32 %38, %47
  %49 = add i32 %46, -8
  %50 = lshr exact i32 %49, 3
  %51 = add nuw nsw i32 %50, 1
  %52 = and i32 %51, 7
  %53 = icmp ult i32 %49, 56
  br i1 %53, label %64, label %54

54:                                               ; preds = %45
  %55 = sub nsw i32 %51, %52
  br label %56

56:                                               ; preds = %56, %54
  %57 = phi <4 x i32> [ zeroinitializer, %54 ], [ %60, %56 ]
  %58 = phi <4 x i32> [ zeroinitializer, %54 ], [ %61, %56 ]
  %59 = phi i32 [ %55, %54 ], [ %62, %56 ]
  %60 = add nuw nsw <4 x i32> %57, <i32 8, i32 8, i32 8, i32 8>
  %61 = add nuw nsw <4 x i32> %58, <i32 8, i32 8, i32 8, i32 8>
  %62 = add i32 %59, -8
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %56, !llvm.loop !7

64:                                               ; preds = %56, %45
  %65 = phi <4 x i32> [ undef, %45 ], [ %60, %56 ]
  %66 = phi <4 x i32> [ undef, %45 ], [ %61, %56 ]
  %67 = phi <4 x i32> [ zeroinitializer, %45 ], [ %60, %56 ]
  %68 = phi <4 x i32> [ zeroinitializer, %45 ], [ %61, %56 ]
  %69 = icmp eq i32 %52, 0
  br i1 %69, label %78, label %70

70:                                               ; preds = %64, %70
  %71 = phi <4 x i32> [ %74, %70 ], [ %67, %64 ]
  %72 = phi <4 x i32> [ %75, %70 ], [ %68, %64 ]
  %73 = phi i32 [ %76, %70 ], [ %52, %64 ]
  %74 = add nuw nsw <4 x i32> %71, <i32 1, i32 1, i32 1, i32 1>
  %75 = add nuw nsw <4 x i32> %72, <i32 1, i32 1, i32 1, i32 1>
  %76 = add i32 %73, -1
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %70, !llvm.loop !9

78:                                               ; preds = %70, %64
  %79 = phi <4 x i32> [ %65, %64 ], [ %74, %70 ]
  %80 = phi <4 x i32> [ %66, %64 ], [ %75, %70 ]
  %81 = add nuw <4 x i32> %80, %79
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %83 = add <4 x i32> %81, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = extractelement <4 x i32> %85, i32 0
  %87 = icmp eq i32 %43, %46
  br i1 %87, label %97, label %88

88:                                               ; preds = %78, %40
  %89 = phi i32 [ %38, %40 ], [ %48, %78 ]
  %90 = phi i32 [ 0, %40 ], [ %86, %78 ]
  br label %91

91:                                               ; preds = %88, %91
  %92 = phi i32 [ %95, %91 ], [ %89, %88 ]
  %93 = phi i32 [ %94, %91 ], [ %90, %88 ]
  %94 = add nuw nsw i32 %93, 1
  %95 = add nsw i32 %92, %23
  %96 = icmp slt i32 %95, 49152
  br i1 %96, label %91, label %97, !llvm.loop !10

97:                                               ; preds = %91, %78, %36
  %98 = phi i32 [ 0, %36 ], [ %86, %78 ], [ %94, %91 ]
  %99 = add nsw i32 %3, -1
  %100 = mul nsw i32 %23, %99
  %101 = add i32 %38, %100
  %102 = ashr i32 %101, 14
  %103 = add nsw i32 %102, 4
  %104 = icmp slt i32 %103, %1
  br i1 %104, label %113, label %105

105:                                              ; preds = %97, %105
  %106 = phi i32 [ %109, %105 ], [ %101, %97 ]
  %107 = phi i32 [ %108, %105 ], [ %99, %97 ]
  %108 = add nsw i32 %107, -1
  %109 = sub nsw i32 %106, %23
  %110 = ashr i32 %109, 14
  %111 = add nsw i32 %110, 4
  %112 = icmp slt i32 %111, %1
  br i1 %112, label %113, label %105

113:                                              ; preds = %105, %97
  %114 = phi i32 [ %99, %97 ], [ %108, %105 ]
  %115 = icmp sgt i32 %98, %114
  br i1 %115, label %118, label %116

116:                                              ; preds = %113
  %117 = icmp eq i32 %98, 0
  br i1 %117, label %248, label %252

118:                                              ; preds = %113
  %119 = icmp sgt i32 %3, 0
  br i1 %119, label %120, label %544

120:                                              ; preds = %118
  %121 = add nsw i32 %1, -1
  %122 = sext i32 %121 to i64
  br label %123

123:                                              ; preds = %123, %120
  %124 = phi i32 [ %38, %120 ], [ %246, %123 ]
  %125 = phi i32 [ 0, %120 ], [ %245, %123 ]
  %126 = phi double* [ %2, %120 ], [ %244, %123 ]
  %127 = ashr i32 %124, 14
  %128 = lshr i32 %124, 5
  %129 = and i32 %128, 504
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 %130
  %132 = add nsw i32 %127, -3
  %133 = sext i32 %132 to i64
  %134 = load i16, i16* %131, align 2
  %135 = sitofp i16 %134 to double
  %136 = icmp slt i32 %132, %121
  %137 = select i1 %136, i32 %132, i32 %121
  %138 = icmp sgt i32 %137, 0
  %139 = select i1 %138, i32 %137, i32 0
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds double, double* %0, i64 %140
  %142 = load double, double* %141, align 8
  %143 = fmul double %142, %135
  %144 = fadd double %143, 0.000000e+00
  %145 = add nsw i64 %133, 1
  %146 = getelementptr inbounds i16, i16* %131, i64 1
  %147 = load i16, i16* %146, align 2
  %148 = sitofp i16 %147 to double
  %149 = icmp slt i64 %145, %122
  %150 = trunc i64 %145 to i32
  %151 = select i1 %149, i32 %150, i32 %121
  %152 = icmp sgt i32 %151, 0
  %153 = select i1 %152, i32 %151, i32 0
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds double, double* %0, i64 %154
  %156 = load double, double* %155, align 8
  %157 = fmul double %156, %148
  %158 = fadd double %144, %157
  %159 = add nsw i64 %133, 2
  %160 = getelementptr inbounds i16, i16* %131, i64 2
  %161 = load i16, i16* %160, align 2
  %162 = sitofp i16 %161 to double
  %163 = icmp slt i64 %159, %122
  %164 = trunc i64 %159 to i32
  %165 = select i1 %163, i32 %164, i32 %121
  %166 = icmp sgt i32 %165, 0
  %167 = select i1 %166, i32 %165, i32 0
  %168 = zext i32 %167 to i64
  %169 = getelementptr inbounds double, double* %0, i64 %168
  %170 = load double, double* %169, align 8
  %171 = fmul double %170, %162
  %172 = fadd double %158, %171
  %173 = add nsw i64 %133, 3
  %174 = getelementptr inbounds i16, i16* %131, i64 3
  %175 = load i16, i16* %174, align 2
  %176 = sitofp i16 %175 to double
  %177 = icmp slt i64 %173, %122
  %178 = trunc i64 %173 to i32
  %179 = select i1 %177, i32 %178, i32 %121
  %180 = icmp sgt i32 %179, 0
  %181 = select i1 %180, i32 %179, i32 0
  %182 = zext i32 %181 to i64
  %183 = getelementptr inbounds double, double* %0, i64 %182
  %184 = load double, double* %183, align 8
  %185 = fmul double %184, %176
  %186 = fadd double %172, %185
  %187 = add nsw i64 %133, 4
  %188 = getelementptr inbounds i16, i16* %131, i64 4
  %189 = load i16, i16* %188, align 2
  %190 = sitofp i16 %189 to double
  %191 = icmp slt i64 %187, %122
  %192 = trunc i64 %187 to i32
  %193 = select i1 %191, i32 %192, i32 %121
  %194 = icmp sgt i32 %193, 0
  %195 = select i1 %194, i32 %193, i32 0
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds double, double* %0, i64 %196
  %198 = load double, double* %197, align 8
  %199 = fmul double %198, %190
  %200 = fadd double %186, %199
  %201 = add nsw i64 %133, 5
  %202 = getelementptr inbounds i16, i16* %131, i64 5
  %203 = load i16, i16* %202, align 2
  %204 = sitofp i16 %203 to double
  %205 = icmp slt i64 %201, %122
  %206 = trunc i64 %201 to i32
  %207 = select i1 %205, i32 %206, i32 %121
  %208 = icmp sgt i32 %207, 0
  %209 = select i1 %208, i32 %207, i32 0
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds double, double* %0, i64 %210
  %212 = load double, double* %211, align 8
  %213 = fmul double %212, %204
  %214 = fadd double %200, %213
  %215 = add nsw i64 %133, 6
  %216 = getelementptr inbounds i16, i16* %131, i64 6
  %217 = load i16, i16* %216, align 2
  %218 = sitofp i16 %217 to double
  %219 = icmp slt i64 %215, %122
  %220 = trunc i64 %215 to i32
  %221 = select i1 %219, i32 %220, i32 %121
  %222 = icmp sgt i32 %221, 0
  %223 = select i1 %222, i32 %221, i32 0
  %224 = zext i32 %223 to i64
  %225 = getelementptr inbounds double, double* %0, i64 %224
  %226 = load double, double* %225, align 8
  %227 = fmul double %226, %218
  %228 = fadd double %214, %227
  %229 = add nsw i64 %133, 7
  %230 = getelementptr inbounds i16, i16* %131, i64 7
  %231 = load i16, i16* %230, align 2
  %232 = sitofp i16 %231 to double
  %233 = icmp slt i64 %229, %122
  %234 = trunc i64 %229 to i32
  %235 = select i1 %233, i32 %234, i32 %121
  %236 = icmp sgt i32 %235, 0
  %237 = select i1 %236, i32 %235, i32 0
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds double, double* %0, i64 %238
  %240 = load double, double* %239, align 8
  %241 = fmul double %240, %232
  %242 = fadd double %228, %241
  %243 = fmul double %242, 7.812500e-03
  %244 = getelementptr inbounds double, double* %126, i64 1
  store double %243, double* %126, align 8
  %245 = add nuw nsw i32 %125, 1
  %246 = add nsw i32 %124, %23
  %247 = icmp eq i32 %245, %3
  br i1 %247, label %544, label %123

248:                                              ; preds = %252, %116
  %249 = phi double* [ %2, %116 ], [ %348, %252 ]
  %250 = phi i32 [ %38, %116 ], [ %350, %252 ]
  %251 = add i32 %114, 1
  br label %357

252:                                              ; preds = %116, %252
  %253 = phi i32 [ %350, %252 ], [ %38, %116 ]
  %254 = phi i32 [ %349, %252 ], [ 0, %116 ]
  %255 = phi double* [ %348, %252 ], [ %2, %116 ]
  %256 = ashr i32 %253, 14
  %257 = lshr i32 %253, 5
  %258 = and i32 %257, 504
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 %259
  %261 = add nsw i32 %256, -3
  %262 = load i16, i16* %260, align 2
  %263 = sitofp i16 %262 to double
  %264 = icmp sgt i32 %261, 0
  %265 = select i1 %264, i32 %261, i32 0
  %266 = zext i32 %265 to i64
  %267 = getelementptr inbounds double, double* %0, i64 %266
  %268 = load double, double* %267, align 8
  %269 = fmul double %268, %263
  %270 = fadd double %269, 0.000000e+00
  %271 = getelementptr inbounds i16, i16* %260, i64 1
  %272 = load i16, i16* %271, align 2
  %273 = sitofp i16 %272 to double
  %274 = add nsw i32 %256, -2
  %275 = icmp sgt i32 %261, -1
  %276 = select i1 %275, i32 %274, i32 0
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds double, double* %0, i64 %277
  %279 = load double, double* %278, align 8
  %280 = fmul double %279, %273
  %281 = fadd double %270, %280
  %282 = getelementptr inbounds i16, i16* %260, i64 2
  %283 = load i16, i16* %282, align 2
  %284 = sitofp i16 %283 to double
  %285 = icmp sgt i32 %261, -2
  %286 = add nsw i32 %256, -1
  %287 = select i1 %285, i32 %286, i32 0
  %288 = zext i32 %287 to i64
  %289 = getelementptr inbounds double, double* %0, i64 %288
  %290 = load double, double* %289, align 8
  %291 = fmul double %290, %284
  %292 = fadd double %281, %291
  %293 = getelementptr inbounds i16, i16* %260, i64 3
  %294 = load i16, i16* %293, align 2
  %295 = sitofp i16 %294 to double
  %296 = icmp sgt i32 %256, 0
  %297 = select i1 %296, i32 %256, i32 0
  %298 = zext i32 %297 to i64
  %299 = getelementptr inbounds double, double* %0, i64 %298
  %300 = load double, double* %299, align 8
  %301 = fmul double %300, %295
  %302 = fadd double %292, %301
  %303 = getelementptr inbounds i16, i16* %260, i64 4
  %304 = load i16, i16* %303, align 2
  %305 = sitofp i16 %304 to double
  %306 = icmp sgt i32 %261, -4
  %307 = add nsw i32 %256, 1
  %308 = select i1 %306, i32 %307, i32 0
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds double, double* %0, i64 %309
  %311 = load double, double* %310, align 8
  %312 = fmul double %311, %305
  %313 = fadd double %302, %312
  %314 = getelementptr inbounds i16, i16* %260, i64 5
  %315 = load i16, i16* %314, align 2
  %316 = sitofp i16 %315 to double
  %317 = icmp sgt i32 %261, -5
  %318 = add nsw i32 %256, 2
  %319 = select i1 %317, i32 %318, i32 0
  %320 = zext i32 %319 to i64
  %321 = getelementptr inbounds double, double* %0, i64 %320
  %322 = load double, double* %321, align 8
  %323 = fmul double %322, %316
  %324 = fadd double %313, %323
  %325 = getelementptr inbounds i16, i16* %260, i64 6
  %326 = load i16, i16* %325, align 2
  %327 = sitofp i16 %326 to double
  %328 = icmp sgt i32 %261, -6
  %329 = add nsw i32 %256, 3
  %330 = select i1 %328, i32 %329, i32 0
  %331 = zext i32 %330 to i64
  %332 = getelementptr inbounds double, double* %0, i64 %331
  %333 = load double, double* %332, align 8
  %334 = fmul double %333, %327
  %335 = fadd double %324, %334
  %336 = getelementptr inbounds i16, i16* %260, i64 7
  %337 = load i16, i16* %336, align 2
  %338 = sitofp i16 %337 to double
  %339 = icmp sgt i32 %256, -4
  %340 = select i1 %339, i32 %256, i32 -4
  %341 = add nsw i32 %340, 4
  %342 = zext i32 %341 to i64
  %343 = getelementptr inbounds double, double* %0, i64 %342
  %344 = load double, double* %343, align 8
  %345 = fmul double %344, %338
  %346 = fadd double %335, %345
  %347 = fmul double %346, 7.812500e-03
  %348 = getelementptr inbounds double, double* %255, i64 1
  store double %347, double* %255, align 8
  %349 = add nuw nsw i32 %254, 1
  %350 = add nsw i32 %253, %23
  %351 = icmp eq i32 %349, %98
  br i1 %351, label %248, label %252

352:                                              ; preds = %357
  %353 = icmp slt i32 %251, %3
  br i1 %353, label %354, label %544

354:                                              ; preds = %352
  %355 = add nsw i32 %1, -1
  %356 = sext i32 %355 to i64
  br label %435

357:                                              ; preds = %357, %248
  %358 = phi i32 [ %433, %357 ], [ %250, %248 ]
  %359 = phi i32 [ %432, %357 ], [ %98, %248 ]
  %360 = phi double* [ %431, %357 ], [ %249, %248 ]
  %361 = ashr i32 %358, 14
  %362 = lshr i32 %358, 5
  %363 = and i32 %362, 504
  %364 = zext i32 %363 to i64
  %365 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 %364
  %366 = add nsw i32 %361, -3
  %367 = sext i32 %366 to i64
  %368 = load i16, i16* %365, align 2
  %369 = sitofp i16 %368 to double
  %370 = getelementptr inbounds double, double* %0, i64 %367
  %371 = load double, double* %370, align 8
  %372 = fmul double %371, %369
  %373 = fadd double %372, 0.000000e+00
  %374 = getelementptr inbounds i16, i16* %365, i64 1
  %375 = load i16, i16* %374, align 2
  %376 = sitofp i16 %375 to double
  %377 = add nsw i64 %367, 1
  %378 = getelementptr inbounds double, double* %0, i64 %377
  %379 = load double, double* %378, align 8
  %380 = fmul double %379, %376
  %381 = fadd double %373, %380
  %382 = getelementptr inbounds i16, i16* %365, i64 2
  %383 = load i16, i16* %382, align 2
  %384 = sitofp i16 %383 to double
  %385 = add nsw i64 %367, 2
  %386 = getelementptr inbounds double, double* %0, i64 %385
  %387 = load double, double* %386, align 8
  %388 = fmul double %387, %384
  %389 = fadd double %381, %388
  %390 = getelementptr inbounds i16, i16* %365, i64 3
  %391 = load i16, i16* %390, align 2
  %392 = sitofp i16 %391 to double
  %393 = add nsw i64 %367, 3
  %394 = getelementptr inbounds double, double* %0, i64 %393
  %395 = load double, double* %394, align 8
  %396 = fmul double %395, %392
  %397 = fadd double %389, %396
  %398 = getelementptr inbounds i16, i16* %365, i64 4
  %399 = load i16, i16* %398, align 2
  %400 = sitofp i16 %399 to double
  %401 = add nsw i64 %367, 4
  %402 = getelementptr inbounds double, double* %0, i64 %401
  %403 = load double, double* %402, align 8
  %404 = fmul double %403, %400
  %405 = fadd double %397, %404
  %406 = getelementptr inbounds i16, i16* %365, i64 5
  %407 = load i16, i16* %406, align 2
  %408 = sitofp i16 %407 to double
  %409 = add nsw i64 %367, 5
  %410 = getelementptr inbounds double, double* %0, i64 %409
  %411 = load double, double* %410, align 8
  %412 = fmul double %411, %408
  %413 = fadd double %405, %412
  %414 = getelementptr inbounds i16, i16* %365, i64 6
  %415 = load i16, i16* %414, align 2
  %416 = sitofp i16 %415 to double
  %417 = add nsw i64 %367, 6
  %418 = getelementptr inbounds double, double* %0, i64 %417
  %419 = load double, double* %418, align 8
  %420 = fmul double %419, %416
  %421 = fadd double %413, %420
  %422 = getelementptr inbounds i16, i16* %365, i64 7
  %423 = load i16, i16* %422, align 2
  %424 = sitofp i16 %423 to double
  %425 = add nsw i64 %367, 7
  %426 = getelementptr inbounds double, double* %0, i64 %425
  %427 = load double, double* %426, align 8
  %428 = fmul double %427, %424
  %429 = fadd double %421, %428
  %430 = fmul double %429, 7.812500e-03
  %431 = getelementptr inbounds double, double* %360, i64 1
  store double %430, double* %360, align 8
  %432 = add nuw i32 %359, 1
  %433 = add nsw i32 %358, %23
  %434 = icmp eq i32 %432, %251
  br i1 %434, label %352, label %357

435:                                              ; preds = %435, %354
  %436 = phi i32 [ %433, %354 ], [ %542, %435 ]
  %437 = phi i32 [ %251, %354 ], [ %541, %435 ]
  %438 = phi double* [ %431, %354 ], [ %540, %435 ]
  %439 = ashr i32 %436, 14
  %440 = lshr i32 %436, 5
  %441 = and i32 %440, 504
  %442 = zext i32 %441 to i64
  %443 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 %442
  %444 = add nsw i32 %439, -3
  %445 = sext i32 %444 to i64
  %446 = load i16, i16* %443, align 2
  %447 = sitofp i16 %446 to double
  %448 = icmp slt i32 %444, %355
  %449 = select i1 %448, i32 %444, i32 %355
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds double, double* %0, i64 %450
  %452 = load double, double* %451, align 8
  %453 = fmul double %452, %447
  %454 = fadd double %453, 0.000000e+00
  %455 = getelementptr inbounds i16, i16* %443, i64 1
  %456 = load i16, i16* %455, align 2
  %457 = sitofp i16 %456 to double
  %458 = add nsw i64 %445, 1
  %459 = icmp slt i64 %458, %356
  %460 = trunc i64 %458 to i32
  %461 = select i1 %459, i32 %460, i32 %355
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds double, double* %0, i64 %462
  %464 = load double, double* %463, align 8
  %465 = fmul double %464, %457
  %466 = fadd double %454, %465
  %467 = getelementptr inbounds i16, i16* %443, i64 2
  %468 = load i16, i16* %467, align 2
  %469 = sitofp i16 %468 to double
  %470 = add nsw i64 %445, 2
  %471 = icmp slt i64 %470, %356
  %472 = trunc i64 %470 to i32
  %473 = select i1 %471, i32 %472, i32 %355
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds double, double* %0, i64 %474
  %476 = load double, double* %475, align 8
  %477 = fmul double %476, %469
  %478 = fadd double %466, %477
  %479 = getelementptr inbounds i16, i16* %443, i64 3
  %480 = load i16, i16* %479, align 2
  %481 = sitofp i16 %480 to double
  %482 = add nsw i64 %445, 3
  %483 = icmp slt i64 %482, %356
  %484 = trunc i64 %482 to i32
  %485 = select i1 %483, i32 %484, i32 %355
  %486 = sext i32 %485 to i64
  %487 = getelementptr inbounds double, double* %0, i64 %486
  %488 = load double, double* %487, align 8
  %489 = fmul double %488, %481
  %490 = fadd double %478, %489
  %491 = getelementptr inbounds i16, i16* %443, i64 4
  %492 = load i16, i16* %491, align 2
  %493 = sitofp i16 %492 to double
  %494 = add nsw i64 %445, 4
  %495 = icmp slt i64 %494, %356
  %496 = trunc i64 %494 to i32
  %497 = select i1 %495, i32 %496, i32 %355
  %498 = sext i32 %497 to i64
  %499 = getelementptr inbounds double, double* %0, i64 %498
  %500 = load double, double* %499, align 8
  %501 = fmul double %500, %493
  %502 = fadd double %490, %501
  %503 = getelementptr inbounds i16, i16* %443, i64 5
  %504 = load i16, i16* %503, align 2
  %505 = sitofp i16 %504 to double
  %506 = add nsw i64 %445, 5
  %507 = icmp slt i64 %506, %356
  %508 = trunc i64 %506 to i32
  %509 = select i1 %507, i32 %508, i32 %355
  %510 = sext i32 %509 to i64
  %511 = getelementptr inbounds double, double* %0, i64 %510
  %512 = load double, double* %511, align 8
  %513 = fmul double %512, %505
  %514 = fadd double %502, %513
  %515 = getelementptr inbounds i16, i16* %443, i64 6
  %516 = load i16, i16* %515, align 2
  %517 = sitofp i16 %516 to double
  %518 = add nsw i64 %445, 6
  %519 = icmp slt i64 %518, %356
  %520 = trunc i64 %518 to i32
  %521 = select i1 %519, i32 %520, i32 %355
  %522 = sext i32 %521 to i64
  %523 = getelementptr inbounds double, double* %0, i64 %522
  %524 = load double, double* %523, align 8
  %525 = fmul double %524, %517
  %526 = fadd double %514, %525
  %527 = getelementptr inbounds i16, i16* %443, i64 7
  %528 = load i16, i16* %527, align 2
  %529 = sitofp i16 %528 to double
  %530 = add nsw i64 %445, 7
  %531 = icmp slt i64 %530, %356
  %532 = trunc i64 %530 to i32
  %533 = select i1 %531, i32 %532, i32 %355
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds double, double* %0, i64 %534
  %536 = load double, double* %535, align 8
  %537 = fmul double %536, %529
  %538 = fadd double %526, %537
  %539 = fmul double %538, 7.812500e-03
  %540 = getelementptr inbounds double, double* %438, i64 1
  store double %539, double* %438, align 8
  %541 = add nuw nsw i32 %437, 1
  %542 = add nsw i32 %436, %23
  %543 = icmp eq i32 %541, %3
  br i1 %543, label %544, label %435

544:                                              ; preds = %435, %123, %118, %352
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_resize_frame420(i8* readonly, i32, i8* readonly, i8* readonly, i32, i32, i32, i8* nocapture, i32, i8* nocapture, i8* nocapture, i32, i32, i32) local_unnamed_addr #1 {
  tail call void @av1_resize_plane(i8* %0, i32 %5, i32 %6, i32 %1, i8* %7, i32 %12, i32 %13, i32 %8)
  %15 = sdiv i32 %5, 2
  %16 = sdiv i32 %6, 2
  %17 = sdiv i32 %12, 2
  %18 = sdiv i32 %13, 2
  tail call void @av1_resize_plane(i8* %2, i32 %15, i32 %16, i32 %4, i8* %9, i32 %17, i32 %18, i32 %11)
  tail call void @av1_resize_plane(i8* %3, i32 %15, i32 %16, i32 %4, i8* %10, i32 %17, i32 %18, i32 %11)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_resize_frame422(i8* readonly, i32, i8* readonly, i8* readonly, i32, i32, i32, i8* nocapture, i32, i8* nocapture, i8* nocapture, i32, i32, i32) local_unnamed_addr #1 {
  tail call void @av1_resize_plane(i8* %0, i32 %5, i32 %6, i32 %1, i8* %7, i32 %12, i32 %13, i32 %8)
  %15 = sdiv i32 %6, 2
  %16 = sdiv i32 %13, 2
  tail call void @av1_resize_plane(i8* %2, i32 %5, i32 %15, i32 %4, i8* %9, i32 %12, i32 %16, i32 %11)
  tail call void @av1_resize_plane(i8* %3, i32 %5, i32 %15, i32 %4, i8* %10, i32 %12, i32 %16, i32 %11)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_resize_frame444(i8* readonly, i32, i8* readonly, i8* readonly, i32, i32, i32, i8* nocapture, i32, i8* nocapture, i8* nocapture, i32, i32, i32) local_unnamed_addr #1 {
  tail call void @av1_resize_plane(i8* %0, i32 %5, i32 %6, i32 %1, i8* %7, i32 %12, i32 %13, i32 %8)
  tail call void @av1_resize_plane(i8* %2, i32 %5, i32 %6, i32 %4, i8* %9, i32 %12, i32 %13, i32 %11)
  tail call void @av1_resize_plane(i8* %3, i32 %5, i32 %6, i32 %4, i8* %10, i32 %12, i32 %13, i32 %11)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_resize_and_extend_frame_c(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly, i8 zeroext, i32, i32) local_unnamed_addr #1 {
  %6 = alloca [3 x i8*], align 16
  %7 = alloca [3 x i32], align 4
  %8 = alloca [3 x i8*], align 16
  %9 = alloca [3 x i32], align 4
  %10 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 2, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i32, i32* %12, align 8
  %14 = bitcast [3 x i8*]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #6
  %15 = getelementptr inbounds [3 x i8*], [3 x i8*]* %6, i64 0, i64 2
  %16 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5, i32 0
  %17 = bitcast %struct.anon.9* %16 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 8
  %19 = bitcast [3 x i8*]* %6 to <2 x i64>*
  store <2 x i64> %18, <2 x i64>* %19, align 16
  %20 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5, i32 0, i32 2
  %21 = bitcast i8** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast i8** %15 to i64*
  store i64 %22, i64* %23, align 16
  %24 = bitcast [3 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %24) #6
  %25 = getelementptr inbounds [3 x i32], [3 x i32]* %7, i64 0, i64 0
  %26 = getelementptr inbounds [3 x i32], [3 x i32]* %7, i64 0, i64 1
  %27 = getelementptr inbounds [3 x i32], [3 x i32]* %7, i64 0, i64 2
  %28 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4, i32 0, i32 0
  %29 = load i32, i32* %28, align 8
  store i32 %29, i32* %25, align 4
  %30 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %26, align 4
  store i32 %31, i32* %27, align 4
  %32 = bitcast [3 x i8*]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #6
  %33 = getelementptr inbounds [3 x i8*], [3 x i8*]* %8, i64 0, i64 2
  %34 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5, i32 0
  %35 = bitcast %struct.anon.9* %34 to <2 x i64>*
  %36 = load <2 x i64>, <2 x i64>* %35, align 8
  %37 = bitcast [3 x i8*]* %8 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %37, align 16
  %38 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5, i32 0, i32 2
  %39 = bitcast i8** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast i8** %33 to i64*
  store i64 %40, i64* %41, align 16
  %42 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %42) #6
  %43 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  %44 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  %45 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  %46 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4, i32 0, i32 0
  %47 = load i32, i32* %46, align 8
  store i32 %47, i32* %43, align 4
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4, i32 0, i32 1
  %49 = load i32, i32* %48, align 4
  store i32 %49, i32* %44, align 4
  store i32 %49, i32* %45, align 4
  %50 = icmp eq i8 %2, 3
  %51 = select i1 %50, [8 x i16]* getelementptr inbounds ([16 x [8 x i16]], [16 x [8 x i16]]* @av1_bilinear_filters, i64 0, i64 0), [8 x i16]* getelementptr inbounds ([16 x [8 x i16]], [16 x [8 x i16]]* @av1_sub_pel_filters_8smooth, i64 0, i64 0)
  %52 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 2, i32 0, i32 0
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 3, i32 0, i32 0
  %55 = load i32, i32* %54, align 8
  %56 = icmp sgt i32 %4, 0
  br i1 %56, label %57, label %65

57:                                               ; preds = %5
  %58 = icmp slt i32 %4, 3
  %59 = select i1 %58, i32 %4, i32 3
  %60 = icmp sgt i32 %55, 0
  %61 = icmp sgt i32 %53, 0
  %62 = shl nsw i32 %11, 4
  %63 = shl nsw i32 %13, 4
  %64 = sext i32 %59 to i64
  br label %66

65:                                               ; preds = %81, %5
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %42) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #6
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %24) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #6
  ret void

66:                                               ; preds = %84, %57
  %67 = phi i32 [ %47, %57 ], [ %88, %84 ]
  %68 = phi i32 [ %29, %57 ], [ %86, %84 ]
  %69 = phi i64 [ 0, %57 ], [ %82, %84 ]
  %70 = icmp eq i64 %69, 0
  br i1 %60, label %71, label %81

71:                                               ; preds = %66
  %72 = select i1 %70, i32 16, i32 8
  %73 = mul i32 %72, %13
  %74 = mul i32 %72, %11
  %75 = getelementptr inbounds [3 x i8*], [3 x i8*]* %6, i64 0, i64 %69
  %76 = xor i1 %70, true
  %77 = zext i1 %76 to i32
  %78 = getelementptr inbounds [3 x i8*], [3 x i8*]* %8, i64 0, i64 %69
  %79 = sext i32 %68 to i64
  %80 = sext i32 %67 to i64
  br label %89

81:                                               ; preds = %109, %66
  %82 = add nuw nsw i64 %69, 1
  %83 = icmp slt i64 %82, %64
  br i1 %83, label %84, label %65

84:                                               ; preds = %81
  %85 = getelementptr inbounds [3 x i32], [3 x i32]* %7, i64 0, i64 %82
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 %82
  %88 = load i32, i32* %87, align 4
  br label %66

89:                                               ; preds = %71, %109
  %90 = phi i32 [ 0, %71 ], [ %110, %109 ]
  br i1 %61, label %91, label %109

91:                                               ; preds = %89
  %92 = mul i32 %73, %90
  %93 = sdiv i32 %92, %55
  %94 = add nsw i32 %93, %3
  %95 = load i8*, i8** %75, align 8
  %96 = lshr i32 %90, %77
  %97 = mul nsw i32 %96, %13
  %98 = sdiv i32 %97, %55
  %99 = mul nsw i32 %98, %68
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %95, i64 %100
  %102 = load i8*, i8** %78, align 8
  %103 = mul nsw i32 %96, %67
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %102, i64 %104
  %106 = sdiv i32 %62, %53
  %107 = and i32 %94, 15
  %108 = sdiv i32 %63, %55
  br label %112

109:                                              ; preds = %112, %89
  %110 = add nuw nsw i32 %90, 16
  %111 = icmp slt i32 %110, %55
  br i1 %111, label %89, label %81

112:                                              ; preds = %91, %112
  %113 = phi i32 [ 0, %91 ], [ %126, %112 ]
  %114 = mul i32 %74, %113
  %115 = sdiv i32 %114, %53
  %116 = add nsw i32 %115, %3
  %117 = lshr i32 %113, %77
  %118 = mul nsw i32 %117, %11
  %119 = sdiv i32 %118, %53
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %101, i64 %120
  %122 = zext i32 %117 to i64
  %123 = getelementptr inbounds i8, i8* %105, i64 %122
  %124 = load void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*, void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)** @aom_scaled_2d, align 8
  %125 = and i32 %116, 15
  tail call void %124(i8* %121, i64 %79, i8* %123, i64 %80, [8 x i16]* %51, i32 %125, i32 %106, i32 %107, i32 %108, i32 %72, i32 %72) #6
  %126 = add nuw nsw i32 %113, 16
  %127 = icmp slt i32 %126, %53
  br i1 %127, label %112, label %109
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_resize_and_extend_frame_nonnormative(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config*, i32, i32) local_unnamed_addr #1 {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %26

6:                                                ; preds = %4
  %7 = icmp slt i32 %3, 3
  %8 = select i1 %7, i32 %3, i32 3
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 5
  %10 = bitcast %union.anon.8* %9 to [3 x i8*]*
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 3
  %12 = bitcast %union.anon.4* %11 to [2 x i32]*
  %13 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 2
  %14 = bitcast %union.anon.2* %13 to [2 x i32]*
  %15 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %16 = bitcast %union.anon.6* %15 to [2 x i32]*
  %17 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5
  %18 = bitcast %union.anon.8* %17 to [3 x i8*]*
  %19 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 3
  %20 = bitcast %union.anon.4* %19 to [2 x i32]*
  %21 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 2
  %22 = bitcast %union.anon.2* %21 to [2 x i32]*
  %23 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %24 = bitcast %union.anon.6* %23 to [2 x i32]*
  %25 = sext i32 %8 to i64
  br label %27

26:                                               ; preds = %27, %4
  tail call void @aom_extend_frame_borders_c(%struct.yv12_buffer_config* %1, i32 %3) #6
  ret void

27:                                               ; preds = %6, %27
  %28 = phi i64 [ 0, %6 ], [ %47, %27 ]
  %29 = icmp ne i64 %28, 0
  %30 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 %28
  %31 = load i8*, i8** %30, align 8
  %32 = zext i1 %29 to i64
  %33 = getelementptr inbounds [2 x i32], [2 x i32]* %12, i64 0, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds [2 x i32], [2 x i32]* %14, i64 0, i64 %32
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds [2 x i32], [2 x i32]* %16, i64 0, i64 %32
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds [3 x i8*], [3 x i8*]* %18, i64 0, i64 %28
  %40 = load i8*, i8** %39, align 8
  %41 = getelementptr inbounds [2 x i32], [2 x i32]* %20, i64 0, i64 %32
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds [2 x i32], [2 x i32]* %22, i64 0, i64 %32
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds [2 x i32], [2 x i32]* %24, i64 0, i64 %32
  %46 = load i32, i32* %45, align 4
  tail call void @av1_resize_plane(i8* %31, i32 %34, i32 %36, i32 %38, i8* %40, i32 %42, i32 %44, i32 %46)
  %47 = add nuw nsw i64 %28, 1
  %48 = icmp slt i64 %47, %25
  br i1 %48, label %27, label %26
}

declare void @aom_extend_frame_borders_c(%struct.yv12_buffer_config*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_upscale_normative_rows(%struct.AV1Common*, i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #1 {
  %8 = alloca %struct.TileInfo, align 4
  %9 = icmp sgt i32 %5, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %12 = load %struct.SequenceHeader*, %struct.SequenceHeader** %11, align 16
  %13 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %12, i64 0, i32 32
  %14 = load i32, i32* %13, align 8
  %15 = icmp ne i32 %14, 0
  %16 = zext i1 %15 to i32
  br label %17

17:                                               ; preds = %10, %7
  %18 = phi i32 [ 0, %7 ], [ %16, %10 ]
  %19 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 2
  %20 = load i32, i32* %19, align 16
  %21 = shl i32 1, %18
  %22 = lshr i32 %21, 1
  %23 = add nsw i32 %22, %20
  %24 = ashr i32 %23, %18
  %25 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 6
  %26 = load i32, i32* %25, align 16
  %27 = add nsw i32 %26, %22
  %28 = ashr i32 %27, %18
  %29 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 8
  %30 = load i8, i8* %29, align 8
  %31 = zext i8 %30 to i32
  %32 = bitcast %struct.TileInfo* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #6
  %33 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %8, i64 0, i32 2
  %34 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %8, i64 0, i32 3
  %35 = shl i32 %24, 14
  %36 = sdiv i32 %28, 2
  %37 = add nsw i32 %36, %35
  %38 = sdiv i32 %37, %28
  %39 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 0
  %40 = bitcast %struct.TileInfo* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %40, i8 -86, i64 24, i1 false)
  %41 = load i32, i32* %39, align 8
  %42 = icmp sgt i32 %41, 0
  br i1 %42, label %43, label %77

43:                                               ; preds = %17
  %44 = sub nsw i32 %28, %24
  %45 = shl i32 %44, 13
  %46 = sub i32 %36, %45
  %47 = sdiv i32 %46, %28
  %48 = add i32 %47, 128
  %49 = mul nsw i32 %38, %28
  %50 = sub nsw i32 %49, %35
  %51 = sdiv i32 %50, -2
  %52 = add i32 %48, %51
  %53 = and i32 %52, 16383
  %54 = sub nuw nsw i32 2, %18
  %55 = sext i32 %6 to i64
  %56 = mul nsw i64 %55, 5
  %57 = icmp sgt i32 %6, 0
  %58 = sext i32 %2 to i64
  %59 = zext i32 %6 to i64
  %60 = add nsw i64 %59, -1
  %61 = and i64 %59, 1
  %62 = icmp eq i64 %60, 0
  %63 = sub nsw i64 %59, %61
  %64 = icmp eq i64 %61, 0
  %65 = and i64 %59, 1
  %66 = icmp eq i64 %60, 0
  %67 = sub nsw i64 %59, %65
  %68 = icmp eq i64 %65, 0
  %69 = and i64 %59, 1
  %70 = icmp eq i64 %60, 0
  %71 = sub nsw i64 %59, %69
  %72 = icmp eq i64 %69, 0
  %73 = and i64 %59, 1
  %74 = icmp eq i64 %60, 0
  %75 = sub nsw i64 %59, %73
  %76 = icmp eq i64 %73, 0
  br label %78

77:                                               ; preds = %246, %17
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #6
  ret void

78:                                               ; preds = %43, %246
  %79 = phi i32 [ %53, %43 ], [ %250, %246 ]
  %80 = phi i32 [ 0, %43 ], [ %251, %246 ]
  call void @av1_tile_set_col(%struct.TileInfo* nonnull %8, %struct.AV1Common* %0, i32 %80) #6
  %81 = load i32, i32* %33, align 4
  %82 = shl i32 %81, %54
  %83 = load i32, i32* %34, align 4
  %84 = shl i32 %83, %54
  %85 = sub nsw i32 %84, %82
  %86 = mul nsw i32 %82, %31
  %87 = sdiv i32 %86, 8
  %88 = load i32, i32* %39, align 8
  %89 = add nsw i32 %88, -1
  %90 = icmp eq i32 %80, %89
  br i1 %90, label %94, label %91

91:                                               ; preds = %78
  %92 = mul nsw i32 %84, %31
  %93 = sdiv i32 %92, 8
  br label %94

94:                                               ; preds = %78, %91
  %95 = phi i32 [ %93, %91 ], [ %28, %78 ]
  %96 = sext i32 %82 to i64
  %97 = getelementptr inbounds i8, i8* %1, i64 %96
  %98 = sext i32 %87 to i64
  %99 = getelementptr inbounds i8, i8* %3, i64 %98
  %100 = sub nsw i32 %95, %87
  %101 = icmp eq i32 %80, 0
  %102 = getelementptr inbounds i8, i8* %97, i64 -5
  %103 = sext i32 %85 to i64
  %104 = getelementptr inbounds i8, i8* %97, i64 %103
  br i1 %101, label %105, label %139

105:                                              ; preds = %94
  %106 = call i8* @aom_malloc(i64 %56) #6
  br i1 %57, label %107, label %139

107:                                              ; preds = %105
  br i1 %62, label %129, label %108

108:                                              ; preds = %107, %108
  %109 = phi i64 [ %126, %108 ], [ 0, %107 ]
  %110 = phi i64 [ %127, %108 ], [ %63, %107 ]
  %111 = mul i64 %109, 5
  %112 = and i64 %111, 4294967294
  %113 = getelementptr inbounds i8, i8* %106, i64 %112
  %114 = mul nsw i64 %109, %58
  %115 = getelementptr inbounds i8, i8* %102, i64 %114
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %113, i8* align 1 %115, i64 5, i1 false) #6
  %116 = getelementptr inbounds i8, i8* %97, i64 %114
  %117 = load i8, i8* %116, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %115, i8 %117, i64 5, i1 false) #6
  %118 = or i64 %109, 1
  %119 = mul i64 %118, 5
  %120 = and i64 %119, 4294967295
  %121 = getelementptr inbounds i8, i8* %106, i64 %120
  %122 = mul nsw i64 %118, %58
  %123 = getelementptr inbounds i8, i8* %102, i64 %122
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %121, i8* align 1 %123, i64 5, i1 false) #6
  %124 = getelementptr inbounds i8, i8* %97, i64 %122
  %125 = load i8, i8* %124, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %123, i8 %125, i64 5, i1 false) #6
  %126 = add nuw nsw i64 %109, 2
  %127 = add i64 %110, -2
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %108

129:                                              ; preds = %108, %107
  %130 = phi i64 [ 0, %107 ], [ %126, %108 ]
  br i1 %64, label %139, label %131

131:                                              ; preds = %129
  %132 = mul i64 %130, 5
  %133 = and i64 %132, 4294967295
  %134 = getelementptr inbounds i8, i8* %106, i64 %133
  %135 = mul nsw i64 %130, %58
  %136 = getelementptr inbounds i8, i8* %102, i64 %135
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %134, i8* align 1 %136, i64 5, i1 false) #6
  %137 = getelementptr inbounds i8, i8* %97, i64 %135
  %138 = load i8, i8* %137, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %136, i8 %138, i64 5, i1 false) #6
  br label %139

139:                                              ; preds = %131, %129, %105, %94
  %140 = phi i8* [ null, %94 ], [ %106, %105 ], [ %106, %129 ], [ %106, %131 ]
  br i1 %90, label %141, label %185

141:                                              ; preds = %139
  %142 = call i8* @aom_malloc(i64 %56) #6
  br i1 %57, label %143, label %185

143:                                              ; preds = %141
  %144 = add i32 %85, -1
  br i1 %66, label %172, label %145

145:                                              ; preds = %143, %145
  %146 = phi i64 [ %169, %145 ], [ 0, %143 ]
  %147 = phi i64 [ %170, %145 ], [ %67, %143 ]
  %148 = mul i64 %146, 5
  %149 = and i64 %148, 4294967294
  %150 = getelementptr inbounds i8, i8* %142, i64 %149
  %151 = mul nsw i64 %146, %58
  %152 = getelementptr inbounds i8, i8* %104, i64 %151
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %150, i8* align 1 %152, i64 5, i1 false) #6
  %153 = trunc i64 %151 to i32
  %154 = add i32 %144, %153
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds i8, i8* %97, i64 %155
  %157 = load i8, i8* %156, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %152, i8 %157, i64 5, i1 false) #6
  %158 = or i64 %146, 1
  %159 = mul i64 %158, 5
  %160 = and i64 %159, 4294967295
  %161 = getelementptr inbounds i8, i8* %142, i64 %160
  %162 = mul nsw i64 %158, %58
  %163 = getelementptr inbounds i8, i8* %104, i64 %162
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %161, i8* align 1 %163, i64 5, i1 false) #6
  %164 = trunc i64 %162 to i32
  %165 = add i32 %144, %164
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %97, i64 %166
  %168 = load i8, i8* %167, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %163, i8 %168, i64 5, i1 false) #6
  %169 = add nuw nsw i64 %146, 2
  %170 = add i64 %147, -2
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %172, label %145

172:                                              ; preds = %145, %143
  %173 = phi i64 [ 0, %143 ], [ %169, %145 ]
  br i1 %68, label %185, label %174

174:                                              ; preds = %172
  %175 = mul i64 %173, 5
  %176 = and i64 %175, 4294967295
  %177 = getelementptr inbounds i8, i8* %142, i64 %176
  %178 = mul nsw i64 %173, %58
  %179 = getelementptr inbounds i8, i8* %104, i64 %178
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %177, i8* align 1 %179, i64 5, i1 false) #6
  %180 = trunc i64 %178 to i32
  %181 = add i32 %144, %180
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i8, i8* %97, i64 %182
  %184 = load i8, i8* %183, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %179, i8 %184, i64 5, i1 false) #6
  br label %185

185:                                              ; preds = %174, %172, %141, %139
  %186 = phi i8* [ null, %139 ], [ %142, %141 ], [ %142, %172 ], [ %142, %174 ]
  %187 = load void (i8*, i32, i8*, i32, i32, i32, i16*, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i16*, i32, i32)** @av1_convolve_horiz_rs, align 8
  %188 = getelementptr inbounds i8, i8* %97, i64 -1
  call void %187(i8* %188, i32 %2, i8* %99, i32 %4, i32 %100, i32 %6, i16* getelementptr inbounds ([64 x [8 x i16]], [64 x [8 x i16]]* @av1_resize_filter_normative, i64 0, i64 0, i64 0), i32 %79, i32 %38) #6
  br i1 %101, label %189, label %217

189:                                              ; preds = %185
  br i1 %57, label %190, label %199

190:                                              ; preds = %189
  br i1 %70, label %191, label %200

191:                                              ; preds = %200, %190
  %192 = phi i64 [ 0, %190 ], [ %214, %200 ]
  br i1 %72, label %199, label %193

193:                                              ; preds = %191
  %194 = mul nsw i64 %192, %58
  %195 = getelementptr inbounds i8, i8* %102, i64 %194
  %196 = mul i64 %192, 5
  %197 = and i64 %196, 4294967295
  %198 = getelementptr inbounds i8, i8* %140, i64 %197
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %195, i8* align 1 %198, i64 5, i1 false) #6
  br label %199

199:                                              ; preds = %193, %191, %189
  call void @aom_free(i8* %140) #6
  br label %217

200:                                              ; preds = %190, %200
  %201 = phi i64 [ %214, %200 ], [ 0, %190 ]
  %202 = phi i64 [ %215, %200 ], [ %71, %190 ]
  %203 = mul nsw i64 %201, %58
  %204 = getelementptr inbounds i8, i8* %102, i64 %203
  %205 = mul i64 %201, 5
  %206 = and i64 %205, 4294967294
  %207 = getelementptr inbounds i8, i8* %140, i64 %206
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %204, i8* align 1 %207, i64 5, i1 false) #6
  %208 = or i64 %201, 1
  %209 = mul nsw i64 %208, %58
  %210 = getelementptr inbounds i8, i8* %102, i64 %209
  %211 = mul i64 %208, 5
  %212 = and i64 %211, 4294967295
  %213 = getelementptr inbounds i8, i8* %140, i64 %212
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %210, i8* align 1 %213, i64 5, i1 false) #6
  %214 = add nuw nsw i64 %201, 2
  %215 = add i64 %202, -2
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %191, label %200

217:                                              ; preds = %199, %185
  br i1 %90, label %218, label %246

218:                                              ; preds = %217
  br i1 %57, label %219, label %228

219:                                              ; preds = %218
  br i1 %74, label %220, label %229

220:                                              ; preds = %229, %219
  %221 = phi i64 [ 0, %219 ], [ %243, %229 ]
  br i1 %76, label %228, label %222

222:                                              ; preds = %220
  %223 = mul nsw i64 %221, %58
  %224 = getelementptr inbounds i8, i8* %104, i64 %223
  %225 = mul i64 %221, 5
  %226 = and i64 %225, 4294967295
  %227 = getelementptr inbounds i8, i8* %186, i64 %226
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %224, i8* align 1 %227, i64 5, i1 false) #6
  br label %228

228:                                              ; preds = %222, %220, %218
  call void @aom_free(i8* %186) #6
  br label %246

229:                                              ; preds = %219, %229
  %230 = phi i64 [ %243, %229 ], [ 0, %219 ]
  %231 = phi i64 [ %244, %229 ], [ %75, %219 ]
  %232 = mul nsw i64 %230, %58
  %233 = getelementptr inbounds i8, i8* %104, i64 %232
  %234 = mul i64 %230, 5
  %235 = and i64 %234, 4294967294
  %236 = getelementptr inbounds i8, i8* %186, i64 %235
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %233, i8* align 1 %236, i64 5, i1 false) #6
  %237 = or i64 %230, 1
  %238 = mul nsw i64 %237, %58
  %239 = getelementptr inbounds i8, i8* %104, i64 %238
  %240 = mul i64 %237, 5
  %241 = and i64 %240, 4294967295
  %242 = getelementptr inbounds i8, i8* %186, i64 %241
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %239, i8* align 1 %242, i64 5, i1 false) #6
  %243 = add nuw nsw i64 %230, 2
  %244 = add i64 %231, -2
  %245 = icmp eq i64 %244, 0
  br i1 %245, label %220, label %229

246:                                              ; preds = %217, %228
  %247 = mul nsw i32 %100, %38
  %248 = shl i32 %85, 14
  %249 = sub i32 %79, %248
  %250 = add i32 %249, %247
  %251 = add nuw nsw i32 %80, 1
  %252 = load i32, i32* %39, align 8
  %253 = icmp slt i32 %251, %252
  br i1 %253, label %78, label %77
}

declare void @av1_tile_set_col(%struct.TileInfo*, %struct.AV1Common*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_upscale_normative_and_extend_frame(%struct.AV1Common*, %struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config*) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %5 = load %struct.SequenceHeader*, %struct.SequenceHeader** %4, align 16
  %6 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %5, i64 0, i32 27
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = select i1 %8, i32 3, i32 1
  %10 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5
  %11 = bitcast %union.anon.8* %10 to [3 x i8*]*
  %12 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %13 = bitcast %union.anon.6* %12 to [2 x i32]*
  %14 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 5
  %15 = bitcast %union.anon.8* %14 to [3 x i8*]*
  %16 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 4
  %17 = bitcast %union.anon.6* %16 to [2 x i32]*
  %18 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 3
  %19 = bitcast %union.anon.4* %18 to [2 x i32]*
  %20 = zext i32 %9 to i64
  br label %22

21:                                               ; preds = %22
  tail call void @aom_extend_frame_borders_c(%struct.yv12_buffer_config* %2, i32 %9) #6
  ret void

22:                                               ; preds = %22, %3
  %23 = phi i64 [ 0, %3 ], [ %37, %22 ]
  %24 = icmp ne i64 %23, 0
  %25 = getelementptr inbounds [3 x i8*], [3 x i8*]* %11, i64 0, i64 %23
  %26 = load i8*, i8** %25, align 8
  %27 = zext i1 %24 to i64
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds [3 x i8*], [3 x i8*]* %15, i64 0, i64 %23
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds [2 x i32], [2 x i32]* %17, i64 0, i64 %27
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 %27
  %35 = load i32, i32* %34, align 4
  %36 = trunc i64 %23 to i32
  tail call void @av1_upscale_normative_rows(%struct.AV1Common* %0, i8* %26, i32 %29, i8* %31, i32 %33, i32 %36, i32 %35)
  %37 = add nuw nsw i64 %23, 1
  %38 = icmp eq i64 %37, %20
  br i1 %38, label %21, label %22
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.yv12_buffer_config* @av1_scale_if_required(%struct.AV1Common* nocapture readonly, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8 zeroext, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #1 {
  br i1 %6, label %8, label %20

8:                                                ; preds = %7
  %9 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 6
  %10 = load i32, i32* %9, align 16
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 2, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %10, %12
  br i1 %13, label %14, label %32

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 7
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 3, i32 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %82, label %32

20:                                               ; preds = %7
  %21 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 2
  %22 = load i32, i32* %21, align 16
  %23 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 2, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %22, %24
  br i1 %25, label %26, label %32

26:                                               ; preds = %20
  %27 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 3, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %28, %30
  br i1 %31, label %82, label %32

32:                                               ; preds = %14, %26, %20, %8
  %33 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %34 = load %struct.SequenceHeader*, %struct.SequenceHeader** %33, align 16
  %35 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %34, i64 0, i32 27
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %36, 0
  %38 = select i1 %37, i32 3, i32 1
  br i1 %5, label %39, label %41

39:                                               ; preds = %32
  %40 = load void (%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8, i32, i32)*, void (%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8, i32, i32)** @av1_resize_and_extend_frame, align 8
  tail call void %40(%struct.yv12_buffer_config* %1, %struct.yv12_buffer_config* %2, i8 zeroext %3, i32 %4, i32 %38) #6
  br label %82

41:                                               ; preds = %32
  %42 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 5
  %43 = bitcast %union.anon.8* %42 to [3 x i8*]*
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 3
  %45 = bitcast %union.anon.4* %44 to [2 x i32]*
  %46 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 2
  %47 = bitcast %union.anon.2* %46 to [2 x i32]*
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %49 = bitcast %union.anon.6* %48 to [2 x i32]*
  %50 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 5
  %51 = bitcast %union.anon.8* %50 to [3 x i8*]*
  %52 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 3
  %53 = bitcast %union.anon.4* %52 to [2 x i32]*
  %54 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 2
  %55 = bitcast %union.anon.2* %54 to [2 x i32]*
  %56 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 4
  %57 = bitcast %union.anon.6* %56 to [2 x i32]*
  %58 = select i1 %37, i64 3, i64 1
  br label %59

59:                                               ; preds = %59, %41
  %60 = phi i64 [ 0, %41 ], [ %79, %59 ]
  %61 = icmp ne i64 %60, 0
  %62 = getelementptr inbounds [3 x i8*], [3 x i8*]* %43, i64 0, i64 %60
  %63 = load i8*, i8** %62, align 8
  %64 = zext i1 %61 to i64
  %65 = getelementptr inbounds [2 x i32], [2 x i32]* %45, i64 0, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds [2 x i32], [2 x i32]* %47, i64 0, i64 %64
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds [2 x i32], [2 x i32]* %49, i64 0, i64 %64
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds [3 x i8*], [3 x i8*]* %51, i64 0, i64 %60
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds [2 x i32], [2 x i32]* %53, i64 0, i64 %64
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds [2 x i32], [2 x i32]* %55, i64 0, i64 %64
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds [2 x i32], [2 x i32]* %57, i64 0, i64 %64
  %78 = load i32, i32* %77, align 4
  tail call void @av1_resize_plane(i8* %63, i32 %66, i32 %68, i32 %70, i8* %72, i32 %74, i32 %76, i32 %78) #6
  %79 = add nuw nsw i64 %60, 1
  %80 = icmp eq i64 %79, %58
  br i1 %80, label %81, label %59

81:                                               ; preds = %59
  tail call void @aom_extend_frame_borders_c(%struct.yv12_buffer_config* %2, i32 %38) #6
  br label %82

82:                                               ; preds = %14, %26, %39, %81
  %83 = phi %struct.yv12_buffer_config* [ %2, %81 ], [ %2, %39 ], [ %1, %26 ], [ %1, %14 ]
  ret %struct.yv12_buffer_config* %83
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_calculate_scaled_size(i32* nocapture, i32* nocapture, i32) local_unnamed_addr #4 {
  %4 = icmp eq i32 %2, 8
  br i1 %4, label %23, label %5

5:                                                ; preds = %3
  %6 = load i32, i32* %0, align 4
  %7 = icmp slt i32 %6, 16
  %8 = select i1 %7, i32 %6, i32 16
  %9 = shl i32 %6, 3
  %10 = sdiv i32 %2, 2
  %11 = add nsw i32 %9, %10
  %12 = sdiv i32 %11, %2
  %13 = icmp sgt i32 %12, %8
  %14 = select i1 %13, i32 %12, i32 %8
  store i32 %14, i32* %0, align 4
  %15 = load i32, i32* %1, align 4
  %16 = icmp slt i32 %15, 16
  %17 = select i1 %16, i32 %15, i32 16
  %18 = shl i32 %15, 3
  %19 = add nsw i32 %18, %10
  %20 = sdiv i32 %19, %2
  %21 = icmp sgt i32 %20, %17
  %22 = select i1 %21, i32 %20, i32 %17
  store i32 %22, i32* %1, align 4
  br label %23

23:                                               ; preds = %3, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_calculate_scaled_superres_size(i32* nocapture, i32* nocapture readnone, i32) local_unnamed_addr #4 {
  %4 = icmp eq i32 %2, 8
  br i1 %4, label %15, label %5

5:                                                ; preds = %3
  %6 = load i32, i32* %0, align 4
  %7 = icmp slt i32 %6, 16
  %8 = select i1 %7, i32 %6, i32 16
  %9 = shl i32 %6, 3
  %10 = sdiv i32 %2, 2
  %11 = add nsw i32 %9, %10
  %12 = sdiv i32 %11, %2
  %13 = icmp sgt i32 %12, %8
  %14 = select i1 %13, i32 %12, i32 %8
  store i32 %14, i32* %0, align 4
  br label %15

15:                                               ; preds = %3, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_calculate_unscaled_superres_size(i32* nocapture, i32* nocapture readnone, i32) local_unnamed_addr #4 {
  %4 = icmp eq i32 %2, 8
  br i1 %4, label %9, label %5

5:                                                ; preds = %3
  %6 = load i32, i32* %0, align 4
  %7 = mul nsw i32 %6, %2
  %8 = sdiv i32 %7, 8
  store i32 %8, i32* %0, align 4
  br label %9

9:                                                ; preds = %3, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_superres_upscale(%struct.AV1Common*, %struct.BufferPool*) local_unnamed_addr #1 {
  %3 = alloca %struct.yv12_buffer_config, align 8
  %4 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %5 = load %struct.SequenceHeader*, %struct.SequenceHeader** %4, align 16
  %6 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %5, i64 0, i32 27
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  %9 = select i1 %8, i32 3, i32 1
  %10 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 16
  %12 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 6
  %13 = load i32, i32* %12, align 16
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %143, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 20, i32 15
  %17 = load i32, i32* %16, align 4
  %18 = bitcast %struct.yv12_buffer_config* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 208, i8* nonnull %18) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 208, i1 false)
  %19 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 12
  %20 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %19, align 16
  %21 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %20, i64 0, i32 17
  %22 = add nsw i32 %11, 7
  %23 = and i32 %22, -8
  %24 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %5, i64 0, i32 32
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %5, i64 0, i32 33
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %5, i64 0, i32 26
  %31 = load i8, i8* %30, align 4
  %32 = zext i8 %31 to i32
  %33 = call i32 @aom_alloc_frame_buffer(%struct.yv12_buffer_config* nonnull %3, i32 %23, i32 %25, i32 %27, i32 %29, i32 %32, i32 288, i32 %17) #6
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %15
  %36 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 1
  %37 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %36, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %37, i32 2, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0)) #6
  br label %38

38:                                               ; preds = %15, %35
  call void @aom_yv12_copy_frame_c(%struct.yv12_buffer_config* %21, %struct.yv12_buffer_config* nonnull %3, i32 %9) #6
  %39 = icmp eq %struct.BufferPool* %1, null
  br i1 %39, label %73, label %40

40:                                               ; preds = %38
  %41 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %19, align 16
  %42 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %41, i64 0, i32 16
  %43 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %1, i64 0, i32 3
  %44 = load i32 (i8*, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)** %43, align 8
  %45 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %1, i64 0, i32 2
  %46 = load i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)** %45, align 8
  %47 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %1, i64 0, i32 1
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %struct.BufferPool, %struct.BufferPool* %1, i64 0, i32 0
  %50 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %49) #6
  %51 = call i32 %44(i8* %48, %struct.aom_codec_frame_buffer* %42) #6
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %57, label %53

53:                                               ; preds = %40
  %54 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %49) #6
  %55 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 1
  %56 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %55, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %56, i32 2, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0)) #6
  br label %57

57:                                               ; preds = %40, %53
  %58 = load i32, i32* %12, align 16
  %59 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 7
  %60 = load i32, i32* %59, align 4
  %61 = load i32, i32* %26, align 8
  %62 = load i32, i32* %28, align 4
  %63 = load i8, i8* %30, align 4
  %64 = zext i8 %63 to i32
  %65 = call i32 @aom_realloc_frame_buffer(%struct.yv12_buffer_config* %21, i32 %58, i32 %60, i32 %61, i32 %62, i32 %64, i32 288, i32 %17, %struct.aom_codec_frame_buffer* %42, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)* %46, i8* %48, i32 0) #6
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %71, label %67

67:                                               ; preds = %57
  %68 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %49) #6
  %69 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 1
  %70 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %69, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %70, i32 2, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.2, i64 0, i64 0)) #6
  br label %71

71:                                               ; preds = %57, %67
  %72 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %49) #6
  br label %107

73:                                               ; preds = %38
  %74 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %20, i64 0, i32 17, i32 16
  %75 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 16
  %76 = bitcast i32* %74 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 8
  %78 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %78, align 8
  %79 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %20, i64 0, i32 17, i32 20
  %80 = load i8, i8* %79, align 8
  %81 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 20
  store i8 %80, i8* %81, align 8
  %82 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %20, i64 0, i32 17, i32 21
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 21
  store i32 %83, i32* %84, align 4
  %85 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %20, i64 0, i32 17, i32 22
  %86 = load i32, i32* %85, align 8
  %87 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 22
  store i32 %86, i32* %87, align 8
  %88 = load i32, i32* %12, align 16
  %89 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 7
  %90 = load i32, i32* %89, align 4
  %91 = load i32, i32* %26, align 8
  %92 = load i32, i32* %28, align 4
  %93 = load i8, i8* %30, align 4
  %94 = zext i8 %93 to i32
  %95 = call i32 @aom_alloc_frame_buffer(%struct.yv12_buffer_config* %21, i32 %88, i32 %90, i32 %91, i32 %92, i32 %94, i32 288, i32 %17) #6
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %100, label %97

97:                                               ; preds = %73
  %98 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 1
  %99 = load %struct.aom_internal_error_info*, %struct.aom_internal_error_info** %98, align 8
  call void (%struct.aom_internal_error_info*, i32, i8*, ...) @aom_internal_error(%struct.aom_internal_error_info* %99, i32 2, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0)) #6
  br label %100

100:                                              ; preds = %73, %97
  %101 = bitcast i32* %75 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 8
  %103 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %102, <4 x i32>* %103, align 8
  %104 = load i8, i8* %81, align 8
  store i8 %104, i8* %79, align 8
  %105 = load i32, i32* %84, align 4
  store i32 %105, i32* %82, align 4
  %106 = load i32, i32* %87, align 8
  store i32 %106, i32* %85, align 8
  br label %107

107:                                              ; preds = %100, %71
  %108 = load %struct.SequenceHeader*, %struct.SequenceHeader** %4, align 16
  %109 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %108, i64 0, i32 27
  %110 = load i8, i8* %109, align 1
  %111 = icmp eq i8 %110, 0
  %112 = select i1 %111, i32 3, i32 1
  %113 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 5
  %114 = bitcast %union.anon.8* %113 to [3 x i8*]*
  %115 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 4
  %116 = bitcast %union.anon.6* %115 to [2 x i32]*
  %117 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %20, i64 0, i32 17, i32 5
  %118 = bitcast %union.anon.8* %117 to [3 x i8*]*
  %119 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %20, i64 0, i32 17, i32 4
  %120 = bitcast %union.anon.6* %119 to [2 x i32]*
  %121 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %3, i64 0, i32 3
  %122 = bitcast %union.anon.4* %121 to [2 x i32]*
  %123 = zext i32 %112 to i64
  br label %124

124:                                              ; preds = %124, %107
  %125 = phi i64 [ 0, %107 ], [ %139, %124 ]
  %126 = icmp ne i64 %125, 0
  %127 = getelementptr inbounds [3 x i8*], [3 x i8*]* %114, i64 0, i64 %125
  %128 = load i8*, i8** %127, align 8
  %129 = zext i1 %126 to i64
  %130 = getelementptr inbounds [2 x i32], [2 x i32]* %116, i64 0, i64 %129
  %131 = load i32, i32* %130, align 4
  %132 = getelementptr inbounds [3 x i8*], [3 x i8*]* %118, i64 0, i64 %125
  %133 = load i8*, i8** %132, align 8
  %134 = getelementptr inbounds [2 x i32], [2 x i32]* %120, i64 0, i64 %129
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr inbounds [2 x i32], [2 x i32]* %122, i64 0, i64 %129
  %137 = load i32, i32* %136, align 4
  %138 = trunc i64 %125 to i32
  call void @av1_upscale_normative_rows(%struct.AV1Common* %0, i8* %128, i32 %131, i8* %133, i32 %135, i32 %138, i32 %137) #6
  %139 = add nuw nsw i64 %125, 1
  %140 = icmp eq i64 %139, %123
  br i1 %140, label %141, label %124

141:                                              ; preds = %124
  call void @aom_extend_frame_borders_c(%struct.yv12_buffer_config* %21, i32 %112) #6
  %142 = call i32 @aom_free_frame_buffer(%struct.yv12_buffer_config* nonnull %3) #6
  call void @llvm.lifetime.end.p0i8(i64 208, i8* nonnull %18) #6
  br label %143

143:                                              ; preds = %2, %141
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @aom_alloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3

declare void @aom_internal_error(%struct.aom_internal_error_info*, i32, i8*, ...) local_unnamed_addr #3

declare void @aom_yv12_copy_frame_c(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i32) local_unnamed_addr #3

declare i32 @aom_realloc_frame_buffer(%struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.aom_codec_frame_buffer*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i8*, i32) local_unnamed_addr #3

declare i32 @aom_free_frame_buffer(%struct.yv12_buffer_config*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @interpolate(i8* readonly, i32, i8* nocapture, i32) unnamed_addr #4 {
  %5 = shl nsw i32 %3, 4
  %6 = shl nsw i32 %1, 4
  %7 = icmp slt i32 %5, %6
  br i1 %7, label %8, label %18

8:                                                ; preds = %4
  %9 = mul nsw i32 %1, 13
  %10 = icmp slt i32 %5, %9
  br i1 %10, label %11, label %18

11:                                               ; preds = %8
  %12 = mul nsw i32 %1, 11
  %13 = icmp slt i32 %5, %12
  br i1 %13, label %14, label %18

14:                                               ; preds = %11
  %15 = mul nsw i32 %1, 9
  %16 = icmp slt i32 %5, %15
  %17 = select i1 %16, [8 x i16]* getelementptr inbounds ([64 x [8 x i16]], [64 x [8 x i16]]* @filteredinterp_filters500, i64 0, i64 0), [8 x i16]* getelementptr inbounds ([64 x [8 x i16]], [64 x [8 x i16]]* @filteredinterp_filters625, i64 0, i64 0)
  br label %18

18:                                               ; preds = %4, %8, %11, %14
  %19 = phi [8 x i16]* [ getelementptr inbounds ([64 x [8 x i16]], [64 x [8 x i16]]* @av1_resize_filter_normative, i64 0, i64 0), %4 ], [ getelementptr inbounds ([64 x [8 x i16]], [64 x [8 x i16]]* @filteredinterp_filters875, i64 0, i64 0), %8 ], [ getelementptr inbounds ([64 x [8 x i16]], [64 x [8 x i16]]* @filteredinterp_filters750, i64 0, i64 0), %11 ], [ %17, %14 ]
  %20 = shl i32 %1, 14
  %21 = sdiv i32 %3, 2
  %22 = add i32 %21, %20
  %23 = udiv i32 %22, %3
  %24 = icmp sgt i32 %1, %3
  br i1 %24, label %25, label %30

25:                                               ; preds = %18
  %26 = sub nsw i32 %1, %3
  %27 = shl i32 %26, 13
  %28 = add nsw i32 %27, %21
  %29 = sdiv i32 %28, %3
  br label %36

30:                                               ; preds = %18
  %31 = sub nsw i32 %3, %1
  %32 = shl i32 %31, 13
  %33 = add nsw i32 %32, %21
  %34 = sdiv i32 %33, %3
  %35 = sub nsw i32 0, %34
  br label %36

36:                                               ; preds = %30, %25
  %37 = phi i32 [ %29, %25 ], [ %35, %30 ]
  %38 = add i32 %37, 128
  %39 = icmp slt i32 %38, 49152
  br i1 %39, label %40, label %97

40:                                               ; preds = %36
  %41 = sub i32 49023, %37
  %42 = udiv i32 %41, %23
  %43 = add i32 %42, 1
  %44 = icmp ult i32 %43, 8
  br i1 %44, label %88, label %45

45:                                               ; preds = %40
  %46 = and i32 %43, -8
  %47 = mul i32 %46, %23
  %48 = add i32 %38, %47
  %49 = add i32 %46, -8
  %50 = lshr exact i32 %49, 3
  %51 = add nuw nsw i32 %50, 1
  %52 = and i32 %51, 7
  %53 = icmp ult i32 %49, 56
  br i1 %53, label %64, label %54

54:                                               ; preds = %45
  %55 = sub nsw i32 %51, %52
  br label %56

56:                                               ; preds = %56, %54
  %57 = phi <4 x i32> [ zeroinitializer, %54 ], [ %60, %56 ]
  %58 = phi <4 x i32> [ zeroinitializer, %54 ], [ %61, %56 ]
  %59 = phi i32 [ %55, %54 ], [ %62, %56 ]
  %60 = add nuw nsw <4 x i32> %57, <i32 8, i32 8, i32 8, i32 8>
  %61 = add nuw nsw <4 x i32> %58, <i32 8, i32 8, i32 8, i32 8>
  %62 = add i32 %59, -8
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %56, !llvm.loop !12

64:                                               ; preds = %56, %45
  %65 = phi <4 x i32> [ undef, %45 ], [ %60, %56 ]
  %66 = phi <4 x i32> [ undef, %45 ], [ %61, %56 ]
  %67 = phi <4 x i32> [ zeroinitializer, %45 ], [ %60, %56 ]
  %68 = phi <4 x i32> [ zeroinitializer, %45 ], [ %61, %56 ]
  %69 = icmp eq i32 %52, 0
  br i1 %69, label %78, label %70

70:                                               ; preds = %64, %70
  %71 = phi <4 x i32> [ %74, %70 ], [ %67, %64 ]
  %72 = phi <4 x i32> [ %75, %70 ], [ %68, %64 ]
  %73 = phi i32 [ %76, %70 ], [ %52, %64 ]
  %74 = add nuw nsw <4 x i32> %71, <i32 1, i32 1, i32 1, i32 1>
  %75 = add nuw nsw <4 x i32> %72, <i32 1, i32 1, i32 1, i32 1>
  %76 = add i32 %73, -1
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %70, !llvm.loop !13

78:                                               ; preds = %70, %64
  %79 = phi <4 x i32> [ %65, %64 ], [ %74, %70 ]
  %80 = phi <4 x i32> [ %66, %64 ], [ %75, %70 ]
  %81 = add nuw <4 x i32> %80, %79
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %83 = add <4 x i32> %81, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = extractelement <4 x i32> %85, i32 0
  %87 = icmp eq i32 %43, %46
  br i1 %87, label %97, label %88

88:                                               ; preds = %78, %40
  %89 = phi i32 [ %38, %40 ], [ %48, %78 ]
  %90 = phi i32 [ 0, %40 ], [ %86, %78 ]
  br label %91

91:                                               ; preds = %88, %91
  %92 = phi i32 [ %95, %91 ], [ %89, %88 ]
  %93 = phi i32 [ %94, %91 ], [ %90, %88 ]
  %94 = add nuw nsw i32 %93, 1
  %95 = add nsw i32 %92, %23
  %96 = icmp slt i32 %95, 49152
  br i1 %96, label %91, label %97, !llvm.loop !14

97:                                               ; preds = %91, %78, %36
  %98 = phi i32 [ 0, %36 ], [ %86, %78 ], [ %94, %91 ]
  %99 = add nsw i32 %3, -1
  %100 = mul nsw i32 %23, %99
  %101 = add i32 %38, %100
  %102 = ashr i32 %101, 14
  %103 = add nsw i32 %102, 4
  %104 = icmp slt i32 %103, %1
  br i1 %104, label %113, label %105

105:                                              ; preds = %97, %105
  %106 = phi i32 [ %109, %105 ], [ %101, %97 ]
  %107 = phi i32 [ %108, %105 ], [ %99, %97 ]
  %108 = add nsw i32 %107, -1
  %109 = sub nsw i32 %106, %23
  %110 = ashr i32 %109, 14
  %111 = add nsw i32 %110, 4
  %112 = icmp slt i32 %111, %1
  br i1 %112, label %113, label %105

113:                                              ; preds = %105, %97
  %114 = phi i32 [ %99, %97 ], [ %108, %105 ]
  %115 = icmp sgt i32 %98, %114
  br i1 %115, label %118, label %116

116:                                              ; preds = %113
  %117 = icmp eq i32 %98, 0
  br i1 %117, label %261, label %265

118:                                              ; preds = %113
  %119 = icmp sgt i32 %3, 0
  br i1 %119, label %120, label %542

120:                                              ; preds = %118
  %121 = add nsw i32 %1, -1
  %122 = sext i32 %121 to i64
  br label %123

123:                                              ; preds = %123, %120
  %124 = phi i32 [ %38, %120 ], [ %259, %123 ]
  %125 = phi i32 [ 0, %120 ], [ %258, %123 ]
  %126 = phi i8* [ %2, %120 ], [ %257, %123 ]
  %127 = ashr i32 %124, 14
  %128 = lshr i32 %124, 5
  %129 = and i32 %128, 504
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 %130
  %132 = add nsw i32 %127, -3
  %133 = sext i32 %132 to i64
  %134 = load i16, i16* %131, align 2
  %135 = sext i16 %134 to i32
  %136 = icmp slt i32 %132, %121
  %137 = select i1 %136, i32 %132, i32 %121
  %138 = icmp sgt i32 %137, 0
  %139 = select i1 %138, i32 %137, i32 0
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds i8, i8* %0, i64 %140
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = mul nsw i32 %143, %135
  %145 = add nsw i64 %133, 1
  %146 = getelementptr inbounds i16, i16* %131, i64 1
  %147 = load i16, i16* %146, align 2
  %148 = sext i16 %147 to i32
  %149 = icmp slt i64 %145, %122
  %150 = trunc i64 %145 to i32
  %151 = select i1 %149, i32 %150, i32 %121
  %152 = icmp sgt i32 %151, 0
  %153 = select i1 %152, i32 %151, i32 0
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds i8, i8* %0, i64 %154
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = mul nsw i32 %157, %148
  %159 = add nsw i64 %133, 2
  %160 = getelementptr inbounds i16, i16* %131, i64 2
  %161 = load i16, i16* %160, align 2
  %162 = sext i16 %161 to i32
  %163 = icmp slt i64 %159, %122
  %164 = trunc i64 %159 to i32
  %165 = select i1 %163, i32 %164, i32 %121
  %166 = icmp sgt i32 %165, 0
  %167 = select i1 %166, i32 %165, i32 0
  %168 = zext i32 %167 to i64
  %169 = getelementptr inbounds i8, i8* %0, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = mul nsw i32 %171, %162
  %173 = add nsw i64 %133, 3
  %174 = getelementptr inbounds i16, i16* %131, i64 3
  %175 = load i16, i16* %174, align 2
  %176 = sext i16 %175 to i32
  %177 = icmp slt i64 %173, %122
  %178 = trunc i64 %173 to i32
  %179 = select i1 %177, i32 %178, i32 %121
  %180 = icmp sgt i32 %179, 0
  %181 = select i1 %180, i32 %179, i32 0
  %182 = zext i32 %181 to i64
  %183 = getelementptr inbounds i8, i8* %0, i64 %182
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = mul nsw i32 %185, %176
  %187 = add nsw i64 %133, 4
  %188 = getelementptr inbounds i16, i16* %131, i64 4
  %189 = load i16, i16* %188, align 2
  %190 = sext i16 %189 to i32
  %191 = icmp slt i64 %187, %122
  %192 = trunc i64 %187 to i32
  %193 = select i1 %191, i32 %192, i32 %121
  %194 = icmp sgt i32 %193, 0
  %195 = select i1 %194, i32 %193, i32 0
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds i8, i8* %0, i64 %196
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = mul nsw i32 %199, %190
  %201 = add nsw i64 %133, 5
  %202 = getelementptr inbounds i16, i16* %131, i64 5
  %203 = load i16, i16* %202, align 2
  %204 = sext i16 %203 to i32
  %205 = icmp slt i64 %201, %122
  %206 = trunc i64 %201 to i32
  %207 = select i1 %205, i32 %206, i32 %121
  %208 = icmp sgt i32 %207, 0
  %209 = select i1 %208, i32 %207, i32 0
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %0, i64 %210
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = mul nsw i32 %213, %204
  %215 = add nsw i64 %133, 6
  %216 = getelementptr inbounds i16, i16* %131, i64 6
  %217 = load i16, i16* %216, align 2
  %218 = sext i16 %217 to i32
  %219 = icmp slt i64 %215, %122
  %220 = trunc i64 %215 to i32
  %221 = select i1 %219, i32 %220, i32 %121
  %222 = icmp sgt i32 %221, 0
  %223 = select i1 %222, i32 %221, i32 0
  %224 = zext i32 %223 to i64
  %225 = getelementptr inbounds i8, i8* %0, i64 %224
  %226 = load i8, i8* %225, align 1
  %227 = zext i8 %226 to i32
  %228 = mul nsw i32 %227, %218
  %229 = add nsw i64 %133, 7
  %230 = getelementptr inbounds i16, i16* %131, i64 7
  %231 = load i16, i16* %230, align 2
  %232 = sext i16 %231 to i32
  %233 = icmp slt i64 %229, %122
  %234 = trunc i64 %229 to i32
  %235 = select i1 %233, i32 %234, i32 %121
  %236 = icmp sgt i32 %235, 0
  %237 = select i1 %236, i32 %235, i32 0
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds i8, i8* %0, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i32
  %242 = mul nsw i32 %241, %232
  %243 = add nsw i32 %144, 64
  %244 = add nsw i32 %243, %158
  %245 = add nsw i32 %244, %172
  %246 = add nsw i32 %245, %186
  %247 = add nsw i32 %246, %200
  %248 = add nsw i32 %247, %214
  %249 = add nsw i32 %248, %228
  %250 = add nsw i32 %249, %242
  %251 = ashr i32 %250, 7
  %252 = icmp sgt i32 %251, 0
  %253 = select i1 %252, i32 %251, i32 0
  %254 = icmp slt i32 %253, 255
  %255 = select i1 %254, i32 %253, i32 255
  %256 = trunc i32 %255 to i8
  %257 = getelementptr inbounds i8, i8* %126, i64 1
  store i8 %256, i8* %126, align 1
  %258 = add nuw nsw i32 %125, 1
  %259 = add nsw i32 %124, %23
  %260 = icmp eq i32 %258, %3
  br i1 %260, label %542, label %123

261:                                              ; preds = %265, %116
  %262 = phi i8* [ %2, %116 ], [ %374, %265 ]
  %263 = phi i32 [ %38, %116 ], [ %376, %265 ]
  %264 = add i32 %114, 1
  br label %383

265:                                              ; preds = %116, %265
  %266 = phi i32 [ %376, %265 ], [ %38, %116 ]
  %267 = phi i32 [ %375, %265 ], [ 0, %116 ]
  %268 = phi i8* [ %374, %265 ], [ %2, %116 ]
  %269 = ashr i32 %266, 14
  %270 = lshr i32 %266, 5
  %271 = and i32 %270, 504
  %272 = zext i32 %271 to i64
  %273 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 %272
  %274 = add nsw i32 %269, -3
  %275 = load i16, i16* %273, align 2
  %276 = sext i16 %275 to i32
  %277 = icmp sgt i32 %274, 0
  %278 = select i1 %277, i32 %274, i32 0
  %279 = zext i32 %278 to i64
  %280 = getelementptr inbounds i8, i8* %0, i64 %279
  %281 = load i8, i8* %280, align 1
  %282 = zext i8 %281 to i32
  %283 = mul nsw i32 %282, %276
  %284 = getelementptr inbounds i16, i16* %273, i64 1
  %285 = load i16, i16* %284, align 2
  %286 = sext i16 %285 to i32
  %287 = add nsw i32 %269, -2
  %288 = icmp sgt i32 %274, -1
  %289 = select i1 %288, i32 %287, i32 0
  %290 = zext i32 %289 to i64
  %291 = getelementptr inbounds i8, i8* %0, i64 %290
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i32
  %294 = mul nsw i32 %293, %286
  %295 = getelementptr inbounds i16, i16* %273, i64 2
  %296 = load i16, i16* %295, align 2
  %297 = sext i16 %296 to i32
  %298 = icmp sgt i32 %274, -2
  %299 = add nsw i32 %269, -1
  %300 = select i1 %298, i32 %299, i32 0
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds i8, i8* %0, i64 %301
  %303 = load i8, i8* %302, align 1
  %304 = zext i8 %303 to i32
  %305 = mul nsw i32 %304, %297
  %306 = getelementptr inbounds i16, i16* %273, i64 3
  %307 = load i16, i16* %306, align 2
  %308 = sext i16 %307 to i32
  %309 = icmp sgt i32 %269, 0
  %310 = select i1 %309, i32 %269, i32 0
  %311 = zext i32 %310 to i64
  %312 = getelementptr inbounds i8, i8* %0, i64 %311
  %313 = load i8, i8* %312, align 1
  %314 = zext i8 %313 to i32
  %315 = mul nsw i32 %314, %308
  %316 = getelementptr inbounds i16, i16* %273, i64 4
  %317 = load i16, i16* %316, align 2
  %318 = sext i16 %317 to i32
  %319 = icmp sgt i32 %274, -4
  %320 = add nsw i32 %269, 1
  %321 = select i1 %319, i32 %320, i32 0
  %322 = zext i32 %321 to i64
  %323 = getelementptr inbounds i8, i8* %0, i64 %322
  %324 = load i8, i8* %323, align 1
  %325 = zext i8 %324 to i32
  %326 = mul nsw i32 %325, %318
  %327 = getelementptr inbounds i16, i16* %273, i64 5
  %328 = load i16, i16* %327, align 2
  %329 = sext i16 %328 to i32
  %330 = icmp sgt i32 %274, -5
  %331 = add nsw i32 %269, 2
  %332 = select i1 %330, i32 %331, i32 0
  %333 = zext i32 %332 to i64
  %334 = getelementptr inbounds i8, i8* %0, i64 %333
  %335 = load i8, i8* %334, align 1
  %336 = zext i8 %335 to i32
  %337 = mul nsw i32 %336, %329
  %338 = getelementptr inbounds i16, i16* %273, i64 6
  %339 = load i16, i16* %338, align 2
  %340 = sext i16 %339 to i32
  %341 = icmp sgt i32 %274, -6
  %342 = add nsw i32 %269, 3
  %343 = select i1 %341, i32 %342, i32 0
  %344 = zext i32 %343 to i64
  %345 = getelementptr inbounds i8, i8* %0, i64 %344
  %346 = load i8, i8* %345, align 1
  %347 = zext i8 %346 to i32
  %348 = mul nsw i32 %347, %340
  %349 = getelementptr inbounds i16, i16* %273, i64 7
  %350 = load i16, i16* %349, align 2
  %351 = sext i16 %350 to i32
  %352 = icmp sgt i32 %269, -4
  %353 = select i1 %352, i32 %269, i32 -4
  %354 = add nsw i32 %353, 4
  %355 = zext i32 %354 to i64
  %356 = getelementptr inbounds i8, i8* %0, i64 %355
  %357 = load i8, i8* %356, align 1
  %358 = zext i8 %357 to i32
  %359 = mul nsw i32 %358, %351
  %360 = add nsw i32 %283, 64
  %361 = add nsw i32 %360, %294
  %362 = add nsw i32 %361, %305
  %363 = add nsw i32 %362, %315
  %364 = add nsw i32 %363, %326
  %365 = add nsw i32 %364, %337
  %366 = add nsw i32 %365, %348
  %367 = add nsw i32 %366, %359
  %368 = ashr i32 %367, 7
  %369 = icmp sgt i32 %368, 0
  %370 = select i1 %369, i32 %368, i32 0
  %371 = icmp slt i32 %370, 255
  %372 = select i1 %371, i32 %370, i32 255
  %373 = trunc i32 %372 to i8
  %374 = getelementptr inbounds i8, i8* %268, i64 1
  store i8 %373, i8* %268, align 1
  %375 = add nuw nsw i32 %267, 1
  %376 = add nsw i32 %266, %23
  %377 = icmp eq i32 %375, %98
  br i1 %377, label %261, label %265

378:                                              ; preds = %383
  %379 = icmp slt i32 %264, %3
  br i1 %379, label %380, label %542

380:                                              ; preds = %378
  %381 = add nsw i32 %1, -1
  %382 = sext i32 %381 to i64
  br label %420

383:                                              ; preds = %383, %261
  %384 = phi i32 [ %418, %383 ], [ %263, %261 ]
  %385 = phi i32 [ %417, %383 ], [ %98, %261 ]
  %386 = phi i8* [ %416, %383 ], [ %262, %261 ]
  %387 = ashr i32 %384, 14
  %388 = lshr i32 %384, 5
  %389 = and i32 %388, 504
  %390 = zext i32 %389 to i64
  %391 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 %390
  %392 = add nsw i32 %387, -3
  %393 = sext i32 %392 to i64
  %394 = getelementptr inbounds i8, i8* %0, i64 %393
  %395 = bitcast i16* %391 to <8 x i16>*
  %396 = load <8 x i16>, <8 x i16>* %395, align 2
  %397 = sext <8 x i16> %396 to <8 x i32>
  %398 = bitcast i8* %394 to <8 x i8>*
  %399 = load <8 x i8>, <8 x i8>* %398, align 1
  %400 = zext <8 x i8> %399 to <8 x i32>
  %401 = mul nsw <8 x i32> %400, %397
  %402 = shufflevector <8 x i32> %401, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %403 = add nsw <8 x i32> %401, %402
  %404 = shufflevector <8 x i32> %403, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %405 = add nsw <8 x i32> %403, %404
  %406 = shufflevector <8 x i32> %405, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %407 = add nsw <8 x i32> %405, %406
  %408 = extractelement <8 x i32> %407, i32 0
  %409 = add nsw i32 %408, 64
  %410 = ashr i32 %409, 7
  %411 = icmp sgt i32 %410, 0
  %412 = select i1 %411, i32 %410, i32 0
  %413 = icmp slt i32 %412, 255
  %414 = select i1 %413, i32 %412, i32 255
  %415 = trunc i32 %414 to i8
  %416 = getelementptr inbounds i8, i8* %386, i64 1
  store i8 %415, i8* %386, align 1
  %417 = add nuw i32 %385, 1
  %418 = add nsw i32 %384, %23
  %419 = icmp eq i32 %417, %264
  br i1 %419, label %378, label %383

420:                                              ; preds = %420, %380
  %421 = phi i32 [ %418, %380 ], [ %540, %420 ]
  %422 = phi i32 [ %264, %380 ], [ %539, %420 ]
  %423 = phi i8* [ %416, %380 ], [ %538, %420 ]
  %424 = ashr i32 %421, 14
  %425 = lshr i32 %421, 5
  %426 = and i32 %425, 504
  %427 = zext i32 %426 to i64
  %428 = getelementptr inbounds [8 x i16], [8 x i16]* %19, i64 0, i64 %427
  %429 = add nsw i32 %424, -3
  %430 = sext i32 %429 to i64
  %431 = load i16, i16* %428, align 2
  %432 = sext i16 %431 to i32
  %433 = icmp slt i32 %429, %381
  %434 = select i1 %433, i32 %429, i32 %381
  %435 = sext i32 %434 to i64
  %436 = getelementptr inbounds i8, i8* %0, i64 %435
  %437 = load i8, i8* %436, align 1
  %438 = zext i8 %437 to i32
  %439 = mul nsw i32 %438, %432
  %440 = getelementptr inbounds i16, i16* %428, i64 1
  %441 = load i16, i16* %440, align 2
  %442 = sext i16 %441 to i32
  %443 = add nsw i64 %430, 1
  %444 = icmp slt i64 %443, %382
  %445 = trunc i64 %443 to i32
  %446 = select i1 %444, i32 %445, i32 %381
  %447 = sext i32 %446 to i64
  %448 = getelementptr inbounds i8, i8* %0, i64 %447
  %449 = load i8, i8* %448, align 1
  %450 = zext i8 %449 to i32
  %451 = mul nsw i32 %450, %442
  %452 = getelementptr inbounds i16, i16* %428, i64 2
  %453 = load i16, i16* %452, align 2
  %454 = sext i16 %453 to i32
  %455 = add nsw i64 %430, 2
  %456 = icmp slt i64 %455, %382
  %457 = trunc i64 %455 to i32
  %458 = select i1 %456, i32 %457, i32 %381
  %459 = sext i32 %458 to i64
  %460 = getelementptr inbounds i8, i8* %0, i64 %459
  %461 = load i8, i8* %460, align 1
  %462 = zext i8 %461 to i32
  %463 = mul nsw i32 %462, %454
  %464 = getelementptr inbounds i16, i16* %428, i64 3
  %465 = load i16, i16* %464, align 2
  %466 = sext i16 %465 to i32
  %467 = add nsw i64 %430, 3
  %468 = icmp slt i64 %467, %382
  %469 = trunc i64 %467 to i32
  %470 = select i1 %468, i32 %469, i32 %381
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i8, i8* %0, i64 %471
  %473 = load i8, i8* %472, align 1
  %474 = zext i8 %473 to i32
  %475 = mul nsw i32 %474, %466
  %476 = getelementptr inbounds i16, i16* %428, i64 4
  %477 = load i16, i16* %476, align 2
  %478 = sext i16 %477 to i32
  %479 = add nsw i64 %430, 4
  %480 = icmp slt i64 %479, %382
  %481 = trunc i64 %479 to i32
  %482 = select i1 %480, i32 %481, i32 %381
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds i8, i8* %0, i64 %483
  %485 = load i8, i8* %484, align 1
  %486 = zext i8 %485 to i32
  %487 = mul nsw i32 %486, %478
  %488 = getelementptr inbounds i16, i16* %428, i64 5
  %489 = load i16, i16* %488, align 2
  %490 = sext i16 %489 to i32
  %491 = add nsw i64 %430, 5
  %492 = icmp slt i64 %491, %382
  %493 = trunc i64 %491 to i32
  %494 = select i1 %492, i32 %493, i32 %381
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds i8, i8* %0, i64 %495
  %497 = load i8, i8* %496, align 1
  %498 = zext i8 %497 to i32
  %499 = mul nsw i32 %498, %490
  %500 = getelementptr inbounds i16, i16* %428, i64 6
  %501 = load i16, i16* %500, align 2
  %502 = sext i16 %501 to i32
  %503 = add nsw i64 %430, 6
  %504 = icmp slt i64 %503, %382
  %505 = trunc i64 %503 to i32
  %506 = select i1 %504, i32 %505, i32 %381
  %507 = sext i32 %506 to i64
  %508 = getelementptr inbounds i8, i8* %0, i64 %507
  %509 = load i8, i8* %508, align 1
  %510 = zext i8 %509 to i32
  %511 = mul nsw i32 %510, %502
  %512 = getelementptr inbounds i16, i16* %428, i64 7
  %513 = load i16, i16* %512, align 2
  %514 = sext i16 %513 to i32
  %515 = add nsw i64 %430, 7
  %516 = icmp slt i64 %515, %382
  %517 = trunc i64 %515 to i32
  %518 = select i1 %516, i32 %517, i32 %381
  %519 = sext i32 %518 to i64
  %520 = getelementptr inbounds i8, i8* %0, i64 %519
  %521 = load i8, i8* %520, align 1
  %522 = zext i8 %521 to i32
  %523 = mul nsw i32 %522, %514
  %524 = add nsw i32 %439, 64
  %525 = add nsw i32 %524, %451
  %526 = add nsw i32 %525, %463
  %527 = add nsw i32 %526, %475
  %528 = add nsw i32 %527, %487
  %529 = add nsw i32 %528, %499
  %530 = add nsw i32 %529, %511
  %531 = add nsw i32 %530, %523
  %532 = ashr i32 %531, 7
  %533 = icmp sgt i32 %532, 0
  %534 = select i1 %533, i32 %532, i32 0
  %535 = icmp slt i32 %534, 255
  %536 = select i1 %535, i32 %534, i32 255
  %537 = trunc i32 %536 to i8
  %538 = getelementptr inbounds i8, i8* %423, i64 1
  store i8 %537, i8* %423, align 1
  %539 = add nuw nsw i32 %422, 1
  %540 = add nsw i32 %421, %23
  %541 = icmp eq i32 %539, %3
  br i1 %541, label %542, label %420

542:                                              ; preds = %420, %123, %118, %378
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #5

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !11, !8}
!11 = !{!"llvm.loop.unroll.runtime.disable"}
!12 = distinct !{!12, !8}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !11, !8}
