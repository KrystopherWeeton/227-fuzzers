; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_file.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_file.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::array.92" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.93" = type { [8 x i32] }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::function.94" = type { %"class.std::__1::__function::__policy_func.98" }
%"class.std::__1::__function::__policy_func.98" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.99", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.99" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.107", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.100" }
%"class.std::__1::vector.100" = type { %"class.std::__1::__vector_base.101" }
%"class.std::__1::__vector_base.101" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.102" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.78", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.80" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.4", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.85", i64 }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.7", %"class.std::__1::vector.20", %"class.std::__1::vector.7", %"class.std::__1::vector.27", %"class.std::__1::vector.34", %"class.std::__1::vector.43", %"class.std::__1::vector.57", %"class.std::__1::vector.9", %"class.std::__1::vector.7", %"class.std::__1::vector.9", i32, i8, %"class.std::__1::vector.9" }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { i32*, i32*, %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { i32* }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.29" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.34" = type { %"class.std::__1::__vector_base.35" }
%"class.std::__1::__vector_base.35" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.38" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.36", %"struct.std::__1::array.37", i32, i8, [3 x i8] }>
%"struct.std::__1::array.36" = type { [17 x i32] }
%"struct.std::__1::array.37" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.52" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.45" }
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { i16*, i16*, %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { i16* }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.67" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.59", i32, %"class.std::__1::vector", %"class.std::__1::vector.60" }
%"struct.std::__1::array.59" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i32* }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.62" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.7" = type { %"class.std::__1::__vector_base.8" }
%"class.std::__1::__vector_base.8" = type { %"class.std::__1::vector.9"*, %"class.std::__1::vector.9"*, %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.std::__1::vector.9"* }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { i8*, i8*, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::vector.85" = type { %"class.std::__1::__vector_base.86" }
%"class.std::__1::__vector_base.86" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.107" = type { %"class.std::__1::__vector_base.108" }
%"class.std::__1::__vector_base.108" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.jxl::ImageBundle"* }
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameSize" = type { i32, i32 }
%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.std::__1::vector.114" = type { %"class.std::__1::__vector_base.115" }
%"class.std::__1::__vector_base.115" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.jxl::AcStrategyImage" = type { %"class.jxl::Plane.121", i8*, i64 }
%"class.jxl::DequantMatrices" = type { %"class.std::__1::unique_ptr.122", float*, float*, [3 x float], [3 x float], [81 x i64], %"class.std::__1::vector.126" }
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124", %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.124" = type { float* }
%"struct.std::__1::__compressed_pair_elem.125" = type { %"class.hwy::AlignedFreer" }
%"class.hwy::AlignedFreer" = type { void (i8*, i8*)*, i8* }
%"class.std::__1::vector.126" = type { %"class.std::__1::__vector_base.127" }
%"class.std::__1::__vector_base.127" = type { %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"*, %"class.std::__1::__compressed_pair.148" }
%"class.jxl::QuantEncoding" = type { %"struct.jxl::QuantEncodingInternal.base", [7 x i8] }
%"struct.jxl::QuantEncodingInternal.base" = type <{ i32, [4 x i8], %"struct.jxl::DctQuantWeightParams", %union.anon.130, %"struct.jxl::DctQuantWeightParams", %union.anon.147 }>
%union.anon.130 = type { %"struct.std::__1::array.137", [4 x i8] }
%"struct.std::__1::array.137" = type { [3 x %"struct.std::__1::array.138"] }
%"struct.std::__1::array.138" = type { [9 x float] }
%"struct.jxl::DctQuantWeightParams" = type <{ i64, %"struct.std::__1::array.128", [4 x i8] }>
%"struct.std::__1::array.128" = type { [3 x %"struct.std::__1::array.129"] }
%"struct.std::__1::array.129" = type { [17 x float] }
%union.anon.147 = type { i8 }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"class.jxl::QuantEncoding"* }
%"class.jxl::Quantizer" = type { [4 x float], [4 x float], i32, i32, float, float, float, [3 x float], %"class.jxl::DequantMatrices"* }
%"class.jxl::Plane.153" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::ColorCorrelationMap" = type { %"class.jxl::Plane.154", %"class.jxl::Plane.154", [4 x float], i32, float, float, float, i32, i32 }
%"class.jxl::Plane.154" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::NoiseParams" = type { [8 x float] }
%"class.jxl::PatchDictionary" = type { %"struct.jxl::PassesSharedState"*, %"class.std::__1::vector.155", %"class.std::__1::vector.169", %"class.std::__1::vector.169" }
%"struct.jxl::PassesSharedState" = type { %"struct.jxl::CodecMetadata"*, %"struct.jxl::FrameHeader", %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.153", %"class.jxl::Plane.121", %"struct.jxl::ColorCorrelationMap", %"struct.jxl::ImageFeatures", i64, %"class.std::__1::vector", %"class.jxl::Plane.121", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x %struct.anon.198], i64 }
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.114", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"struct.jxl::ImageFeatures" = type { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", %"class.jxl::Splines" }
%"class.jxl::Splines" = type { i32, %"class.std::__1::vector.176", %"class.std::__1::vector.191" }
%"class.std::__1::vector.176" = type { %"class.std::__1::__vector_base.177" }
%"class.std::__1::__vector_base.177" = type { %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"*, %"class.std::__1::__compressed_pair.186" }
%"class.jxl::QuantizedSpline" = type { %"class.std::__1::vector.178", [3 x [32 x i32]], [32 x i32] }
%"class.std::__1::vector.178" = type { %"class.std::__1::__vector_base.179" }
%"class.std::__1::__vector_base.179" = type { %"struct.std::__1::pair.180"*, %"struct.std::__1::pair.180"*, %"class.std::__1::__compressed_pair.181" }
%"struct.std::__1::pair.180" = type { i64, i64 }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"struct.std::__1::pair.180"* }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"class.jxl::QuantizedSpline"* }
%"class.std::__1::vector.191" = type { %"class.std::__1::__vector_base.192" }
%"class.std::__1::__vector_base.192" = type { %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"*, %"class.std::__1::__compressed_pair.193" }
%"struct.jxl::Spline::Point" = type { float, float }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"struct.jxl::Spline::Point"* }
%struct.anon.198 = type <{ %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"*, i8, [7 x i8] }>
%"class.std::__1::vector.155" = type { %"class.std::__1::__vector_base.156" }
%"class.std::__1::__vector_base.156" = type { %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"*, %"class.std::__1::__compressed_pair.164" }
%"struct.jxl::PatchPosition" = type { i64, i64, %"class.std::__1::vector.157", %"struct.jxl::PatchReferencePosition" }
%"class.std::__1::vector.157" = type { %"class.std::__1::__vector_base.158" }
%"class.std::__1::__vector_base.158" = type { %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"*, %"class.std::__1::__compressed_pair.159" }
%"struct.jxl::PatchBlending" = type { i8, i32, i8 }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"struct.jxl::PatchBlending"* }
%"struct.jxl::PatchReferencePosition" = type { i64, i64, i64, i64, i64 }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"struct.jxl::PatchPosition"* }
%"class.std::__1::vector.169" = type { %"class.std::__1::__vector_base.170" }
%"class.std::__1::__vector_base.170" = type { i64*, i64*, %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { i64* }
%"class.jxl::Plane.121" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::BlockCtxMap" = type { [3 x %"class.std::__1::vector.140"], %"class.std::__1::vector", %"class.std::__1::vector.9", i64, i64 }
%"class.std::__1::vector.140" = type { %"class.std::__1::__vector_base.141" }
%"class.std::__1::__vector_base.141" = type { i32*, i32*, %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { i32* }
%"class.std::__1::vector.200" = type { %"class.std::__1::__vector_base.201" }
%"class.std::__1::__vector_base.201" = type { %"class.std::__1::unique_ptr.202"*, %"class.std::__1::unique_ptr.202"*, %"class.std::__1::__compressed_pair.203" }
%"class.std::__1::unique_ptr.202" = type { %"class.std::__1::__compressed_pair.258" }
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.259" }
%"struct.std::__1::__compressed_pair_elem.259" = type { %"class.jxl::ACImage"* }
%"class.jxl::ACImage" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.203" = type { %"struct.std::__1::__compressed_pair_elem.204" }
%"struct.std::__1::__compressed_pair_elem.204" = type { %"class.std::__1::unique_ptr.202"* }
%"class.std::__1::vector.208" = type { %"class.std::__1::__vector_base.209" }
%"class.std::__1::__vector_base.209" = type { %"class.std::__1::unique_ptr.210"*, %"class.std::__1::unique_ptr.210"*, %"class.std::__1::__compressed_pair.211" }
%"class.std::__1::unique_ptr.210" = type { %"class.std::__1::__compressed_pair.263" }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"struct.jxl::BitWriter"* }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"class.std::__1::__compressed_pair.211" = type { %"struct.std::__1::__compressed_pair_elem.212" }
%"struct.std::__1::__compressed_pair_elem.212" = type { %"class.std::__1::unique_ptr.210"* }
%"struct.jxl::ButteraugliParams" = type <{ float, float, float, i8, [3 x i8] }>
%"struct.jxl::ModularOptions" = type <{ i64, float, i32, %"class.std::__1::vector", float, [4 x i8], i64, i32, i32, float, i32, i8, [3 x i8], i32, i8, [7 x i8] }>
%"struct.std::__1::pair" = type { float, float }
%"class.std::__1::vector.216" = type { %"class.std::__1::__vector_base.217" }
%"class.std::__1::__vector_base.217" = type { %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"*, %"class.std::__1::__compressed_pair.241" }
%"struct.jxl::PassesEncoderState::PassData" = type { %"class.std::__1::vector.218", %"class.std::__1::vector.9", %"struct.jxl::EntropyEncodingData" }
%"class.std::__1::vector.218" = type { %"class.std::__1::__vector_base.219" }
%"class.std::__1::__vector_base.219" = type { %"class.std::__1::vector.220"*, %"class.std::__1::vector.220"*, %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::vector.220" = type { %"class.std::__1::__vector_base.268" }
%"class.std::__1::__vector_base.268" = type { %"struct.jxl::Token"*, %"struct.jxl::Token"*, %"class.std::__1::__compressed_pair.269" }
%"struct.jxl::Token" = type { i32, i32 }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.270" }
%"struct.std::__1::__compressed_pair_elem.270" = type { %"struct.jxl::Token"* }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"class.std::__1::vector.220"* }
%"struct.jxl::EntropyEncodingData" = type { %"class.std::__1::vector.226", i8, %"class.std::__1::vector.234", %"struct.jxl::LZ77Params" }
%"class.std::__1::vector.226" = type { %"class.std::__1::__vector_base.227" }
%"class.std::__1::__vector_base.227" = type { %"class.std::__1::vector.228"*, %"class.std::__1::vector.228"*, %"class.std::__1::__compressed_pair.229" }
%"class.std::__1::vector.228" = type { %"class.std::__1::__vector_base.274" }
%"class.std::__1::__vector_base.274" = type { %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"*, %"class.std::__1::__compressed_pair.282" }
%"struct.jxl::ANSEncSymbolInfo" = type <{ i16, [6 x i8], %"class.std::__1::vector.275", i64, i8, i8, i16, [4 x i8] }>
%"class.std::__1::vector.275" = type { %"class.std::__1::__vector_base.276" }
%"class.std::__1::__vector_base.276" = type { i16*, i16*, %"class.std::__1::__compressed_pair.277" }
%"class.std::__1::__compressed_pair.277" = type { %"struct.std::__1::__compressed_pair_elem.278" }
%"struct.std::__1::__compressed_pair_elem.278" = type { i16* }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"struct.jxl::ANSEncSymbolInfo"* }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"class.std::__1::vector.228"* }
%"class.std::__1::vector.234" = type { %"class.std::__1::__vector_base.235" }
%"class.std::__1::__vector_base.235" = type { %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"*, %"class.std::__1::__compressed_pair.236" }
%"struct.jxl::HybridUintConfig" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"struct.jxl::HybridUintConfig"* }
%"struct.jxl::LZ77Params" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::HybridUintConfig", i64 }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"struct.jxl::PassesEncoderState::PassData"* }
%"class.std::__1::unique_ptr.246" = type { %"class.std::__1::__compressed_pair.247" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.248" }
%"struct.std::__1::__compressed_pair_elem.248" = type { %"class.jxl::EncoderHeuristics"* }
%"class.jxl::EncoderHeuristics" = type { i32 (...)** }
%"struct.jxl::PassDefinition" = type { i64, i64, i8, i64 }
%"struct.jxl::CompressParams" = type { float, i64, float, float, float, i8, [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i64, float, %"class.jxl::Plane"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair", i32, float, float, i32, i32, i8, i8, i64, i64 }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array.92", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.93", %"struct.std::__1::array.93", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.94" }
%"struct.jxl::PassesEncoderState" = type { %"struct.jxl::PassesSharedState", %"class.jxl::Plane", %"class.jxl::Plane", %"class.std::__1::vector.200", %"class.std::__1::vector.208", %"class.jxl::ProgressiveSplitter", %"struct.jxl::CompressParams", %"class.std::__1::vector.216", %"class.std::__1::vector.9", %"class.std::__1::vector", float, float, %"class.std::__1::unique_ptr.246" }
%"class.jxl::ProgressiveSplitter" = type <{ %"struct.jxl::ProgressiveMode", %"class.jxl::Plane"*, float, [4 x i8] }>
%"struct.jxl::ProgressiveMode" = type { i64, [11 x %"struct.jxl::PassDefinition"] }
%"struct.jxl::FrameInfo" = type { i8, i8, i32, i64, i8, i8, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3jxl18PassesEncoderStateD2Ev = comdat any

$_ZNK3jxl10CodecInOut13CheckMetadataEv = comdat any

$_ZN3jxl15ProgressiveModeC2ILm3EEERAT__KNS_14PassDefinitionE = comdat any

$_ZN3jxl15ProgressiveModeC2ILm2EEERAT__KNS_14PassDefinitionE = comdat any

$_ZN3jxl15ProgressiveModeC2ILm4EEERAT__KNS_14PassDefinitionE = comdat any

$_ZN3jxl11ImageBundleaSEOS0_ = comdat any

$_ZN3jxl11ImageBundleD2Ev = comdat any

$_ZNSt3__110__function16__policy_invokerIFbPKcRKN3jxl6Image3IfEEEE12__call_emptyEPKNS0_16__policy_storageES3_S8_ = comdat any

$_ZNSt3__125__throw_bad_function_callEv = comdat any

$_ZNSt3__110__function16__policy_invokerIFN3jxl6StatusERKNS2_10CodecInOutERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE12__call_emptyEPKNS0_16__policy_storageES6_SE_ = comdat any

$_ZN3jxl17PassesSharedStateC2Ev = comdat any

$_ZN3jxl15DequantMatricesC2Ev = comdat any

$_ZN3jxl13QuantEncodingaSERKS0_ = comdat any

$_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

$_ZN3jxl17PassesSharedStateD2Ev = comdat any

$_ZN3jxl18PassesEncoderState8PassDataD2Ev = comdat any

$_ZNSt3__16vectorIN3jxl16ExtraChannelInfoENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_ = comdat any

$_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = comdat any

@__const._ZN3jxl13EncodePreviewERKNS_14CompressParamsERKNS_11ImageBundleEPKNS_13CodecMetadataEPNS_10ThreadPoolEPNS_9BitWriterE.aux_out = private unnamed_addr constant { %"struct.std::__1::array.92", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.93", %"struct.std::__1::array.93", i32, [4 x i8], %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.94" } { %"struct.std::__1::array.92" { [21 x %"struct.jxl::AuxOut::LayerTotals"] [%"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }, %"struct.jxl::AuxOut::LayerTotals" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, double 0xFFFFFFFFFFFFFFFF }] }, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, %"struct.std::__1::array.93" { [8 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766] }, %"struct.std::__1::array.93" { [8 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766] }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.73" { %"struct.std::__1::__compressed_pair_elem.74" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, i64 -6148914691236517206, %"class.std::__1::function" { %"class.std::__1::__function::__policy_func" { %"union.std::__1::__function::__policy_storage" { i8* inttoptr (i64 -6148914691236517206 to i8*), [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, %"struct.std::__1::__function::__policy_invoker" { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* inttoptr (i64 -6148914691236517206 to i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)*) }, %"struct.std::__1::__function::__policy"* inttoptr (i64 -6148914691236517206 to %"struct.std::__1::__function::__policy"*) } }, %"class.std::__1::function.94" { %"class.std::__1::__function::__policy_func.98" { %"union.std::__1::__function::__policy_storage" { i8* inttoptr (i64 -6148914691236517206 to i8*), [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA" }, %"struct.std::__1::__function::__policy_invoker.99" { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* inttoptr (i64 -6148914691236517206 to i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)*) }, %"struct.std::__1::__function::__policy"* inttoptr (i64 -6148914691236517206 to %"struct.std::__1::__function::__policy"*) } } }, align 8
@__const._ZN3jxl13EncodePreviewERKNS_14CompressParamsERKNS_11ImageBundleEPKNS_13CodecMetadataEPNS_10ThreadPoolEPNS_9BitWriterE.passes_enc_state = private unnamed_addr constant { { %"struct.jxl::CodecMetadata"*, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, [4 x i8], %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, [3 x i8], %"struct.jxl::FrameSize", i32, %"class.std::__1::vector", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.114", %"struct.jxl::AnimationFrame", i8, [3 x i8], i32, i8, [3 x i8], i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, [7 x i8], i64 }, %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.153", %"class.jxl::Plane.121", %"struct.jxl::ColorCorrelationMap", { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", { i32, [4 x i8], %"class.std::__1::vector.176", %"class.std::__1::vector.191" } }, i64, %"class.std::__1::vector", %"class.jxl::Plane.121", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x <{ { %"class.std::__1::unique_ptr.4", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }>], i64 }, %"class.jxl::Plane", %"class.jxl::Plane", %"class.std::__1::vector.200", %"class.std::__1::vector.208", <{ { i64, [11 x { i64, i64, i8, [7 x i8], i64 }] }, %"class.jxl::Plane"*, float, [4 x i8] }>, { float, [4 x i8], i64, float, float, float, i8, [3 x i8], [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, [7 x i8], i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, [1 x i8], i32, i8, [3 x i8], i64, float, [4 x i8], %"class.jxl::Plane"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair", i32, float, float, i32, i32, i8, i8, [6 x i8], i64, i64 }, %"class.std::__1::vector.216", %"class.std::__1::vector.9", %"class.std::__1::vector", float, float, %"class.std::__1::unique_ptr.246" } { { %"struct.jxl::CodecMetadata"*, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, [4 x i8], %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, [3 x i8], %"struct.jxl::FrameSize", i32, %"class.std::__1::vector", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.114", %"struct.jxl::AnimationFrame", i8, [3 x i8], i32, i8, [3 x i8], i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, [7 x i8], i64 }, %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.153", %"class.jxl::Plane.121", %"struct.jxl::ColorCorrelationMap", { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", { i32, [4 x i8], %"class.std::__1::vector.176", %"class.std::__1::vector.191" } }, i64, %"class.std::__1::vector", %"class.jxl::Plane.121", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x <{ { %"class.std::__1::unique_ptr.4", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }>], i64 } { %"struct.jxl::CodecMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::CodecMetadata"*), { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, [4 x i8], %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, [3 x i8], %"struct.jxl::FrameSize", i32, %"class.std::__1::vector", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.114", %"struct.jxl::AnimationFrame", i8, [3 x i8], i32, i8, [3 x i8], i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, [7 x i8], i64 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.73" { %"struct.std::__1::__compressed_pair_elem.74" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::Passes" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, [11 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [11 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [11 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766], [4 x i8] c"\AA\AA\AA\AA" }>, i8 -86, [3 x i8] c"\AA\AA\AA", %"struct.jxl::FrameSize" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, %"class.std::__1::vector" { %"class.std::__1::__vector_base" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, %"struct.jxl::BlendingInfo" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, %"class.std::__1::vector.114" { %"class.std::__1::__vector_base.115" { %"struct.jxl::BlendingInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::BlendingInfo"*), %"struct.jxl::BlendingInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::BlendingInfo"*), %"class.std::__1::__compressed_pair.116" { %"struct.std::__1::__compressed_pair_elem.117" { %"struct.jxl::BlendingInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::BlendingInfo"*) } } } }, %"struct.jxl::AnimationFrame" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, %"struct.jxl::CodecMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::CodecMetadata"*) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, %"struct.jxl::CodecMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::CodecMetadata"*), %"struct.jxl::LoopFilter" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, i8 -86, i8 -86, i8 -86, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i8 -86, [3 x i8] c"\AA\AA\AA", [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, %"struct.jxl::FrameDimensions" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206 }, %"class.jxl::AcStrategyImage" { %"class.jxl::Plane.121" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206 }, %"class.jxl::DequantMatrices" { %"class.std::__1::unique_ptr.122" { %"class.std::__1::__compressed_pair.123" { %"struct.std::__1::__compressed_pair_elem.124" { float* inttoptr (i64 -6148914691236517206 to float*) }, %"struct.std::__1::__compressed_pair_elem.125" { %"class.hwy::AlignedFreer" { void (i8*, i8*)* inttoptr (i64 -6148914691236517206 to void (i8*, i8*)*), i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [81 x i64] [i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206], %"class.std::__1::vector.126" { %"class.std::__1::__vector_base.127" { %"class.jxl::QuantEncoding"* inttoptr (i64 -6148914691236517206 to %"class.jxl::QuantEncoding"*), %"class.jxl::QuantEncoding"* inttoptr (i64 -6148914691236517206 to %"class.jxl::QuantEncoding"*), %"class.std::__1::__compressed_pair.148" { %"struct.std::__1::__compressed_pair_elem.149" { %"class.jxl::QuantEncoding"* inttoptr (i64 -6148914691236517206 to %"class.jxl::QuantEncoding"*) } } } } }, %"class.jxl::Quantizer" { [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], %"class.jxl::DequantMatrices"* inttoptr (i64 -6148914691236517206 to %"class.jxl::DequantMatrices"*) }, %"class.jxl::Plane.153" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane.121" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"struct.jxl::ColorCorrelationMap" { %"class.jxl::Plane.154" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane.154" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766 }, { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", { i32, [4 x i8], %"class.std::__1::vector.176", %"class.std::__1::vector.191" } } { %"struct.jxl::NoiseParams" { [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, %"class.jxl::PatchDictionary" { %"struct.jxl::PassesSharedState"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PassesSharedState"*), %"class.std::__1::vector.155" { %"class.std::__1::__vector_base.156" { %"struct.jxl::PatchPosition"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PatchPosition"*), %"struct.jxl::PatchPosition"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PatchPosition"*), %"class.std::__1::__compressed_pair.164" { %"struct.std::__1::__compressed_pair_elem.165" { %"struct.jxl::PatchPosition"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PatchPosition"*) } } } }, %"class.std::__1::vector.169" { %"class.std::__1::__vector_base.170" { i64* inttoptr (i64 -6148914691236517206 to i64*), i64* inttoptr (i64 -6148914691236517206 to i64*), %"class.std::__1::__compressed_pair.171" { %"struct.std::__1::__compressed_pair_elem.172" { i64* inttoptr (i64 -6148914691236517206 to i64*) } } } }, %"class.std::__1::vector.169" { %"class.std::__1::__vector_base.170" { i64* inttoptr (i64 -6148914691236517206 to i64*), i64* inttoptr (i64 -6148914691236517206 to i64*), %"class.std::__1::__compressed_pair.171" { %"struct.std::__1::__compressed_pair_elem.172" { i64* inttoptr (i64 -6148914691236517206 to i64*) } } } } }, { i32, [4 x i8], %"class.std::__1::vector.176", %"class.std::__1::vector.191" } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::vector.176" { %"class.std::__1::__vector_base.177" { %"class.jxl::QuantizedSpline"* inttoptr (i64 -6148914691236517206 to %"class.jxl::QuantizedSpline"*), %"class.jxl::QuantizedSpline"* inttoptr (i64 -6148914691236517206 to %"class.jxl::QuantizedSpline"*), %"class.std::__1::__compressed_pair.186" { %"struct.std::__1::__compressed_pair_elem.187" { %"class.jxl::QuantizedSpline"* inttoptr (i64 -6148914691236517206 to %"class.jxl::QuantizedSpline"*) } } } }, %"class.std::__1::vector.191" { %"class.std::__1::__vector_base.192" { %"struct.jxl::Spline::Point"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::Spline::Point"*), %"struct.jxl::Spline::Point"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::Spline::Point"*), %"class.std::__1::__compressed_pair.193" { %"struct.std::__1::__compressed_pair_elem.194" { %"struct.jxl::Spline::Point"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::Spline::Point"*) } } } } } }, i64 -6148914691236517206, %"class.std::__1::vector" { %"class.std::__1::__vector_base" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"class.jxl::Plane.121" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, %"class.jxl::Image3"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Image3"*), %"struct.jxl::BlockCtxMap" { [3 x %"class.std::__1::vector.140"] [%"class.std::__1::vector.140" { %"class.std::__1::__vector_base.141" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.142" { %"struct.std::__1::__compressed_pair_elem.143" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"class.std::__1::vector.140" { %"class.std::__1::__vector_base.141" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.142" { %"struct.std::__1::__compressed_pair_elem.143" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"class.std::__1::vector.140" { %"class.std::__1::__vector_base.141" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.142" { %"struct.std::__1::__compressed_pair_elem.143" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }], %"class.std::__1::vector" { %"class.std::__1::__vector_base" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, %"class.std::__1::vector.9" { %"class.std::__1::__vector_base.10" { i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), %"class.std::__1::__compressed_pair.11" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i64 -6148914691236517206, i64 -6148914691236517206 }, [4 x %"class.jxl::Image3"] [%"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }], [4 x <{ { %"class.std::__1::unique_ptr.4", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }>] [<{ { %"class.std::__1::unique_ptr.4", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }> <{ { %"class.std::__1::unique_ptr.4", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 } { %"class.std::__1::unique_ptr.4" { %"class.std::__1::__compressed_pair.5" { %"struct.std::__1::__compressed_pair_elem.6" { %"struct.jxl::jpeg::JPEGData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::jpeg::JPEGData"*) } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.73" { %"struct.std::__1::__compressed_pair_elem.74" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::ImageMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ImageMetadata"*), %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, %"class.std::__1::vector.85" { %"class.std::__1::__vector_base.86" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.std::__1::__compressed_pair.87" { %"struct.std::__1::__compressed_pair_elem.88" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*) } } } }, i64 -6148914691236517206 }, %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, <{ { %"class.std::__1::unique_ptr.4", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }> <{ { %"class.std::__1::unique_ptr.4", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 } { %"class.std::__1::unique_ptr.4" { %"class.std::__1::__compressed_pair.5" { %"struct.std::__1::__compressed_pair_elem.6" { %"struct.jxl::jpeg::JPEGData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::jpeg::JPEGData"*) } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.73" { %"struct.std::__1::__compressed_pair_elem.74" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::ImageMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ImageMetadata"*), %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, %"class.std::__1::vector.85" { %"class.std::__1::__vector_base.86" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.std::__1::__compressed_pair.87" { %"struct.std::__1::__compressed_pair_elem.88" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*) } } } }, i64 -6148914691236517206 }, %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, <{ { %"class.std::__1::unique_ptr.4", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }> <{ { %"class.std::__1::unique_ptr.4", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 } { %"class.std::__1::unique_ptr.4" { %"class.std::__1::__compressed_pair.5" { %"struct.std::__1::__compressed_pair_elem.6" { %"struct.jxl::jpeg::JPEGData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::jpeg::JPEGData"*) } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.73" { %"struct.std::__1::__compressed_pair_elem.74" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::ImageMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ImageMetadata"*), %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, %"class.std::__1::vector.85" { %"class.std::__1::__vector_base.86" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.std::__1::__compressed_pair.87" { %"struct.std::__1::__compressed_pair_elem.88" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*) } } } }, i64 -6148914691236517206 }, %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, <{ { %"class.std::__1::unique_ptr.4", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }> <{ { %"class.std::__1::unique_ptr.4", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 } { %"class.std::__1::unique_ptr.4" { %"class.std::__1::__compressed_pair.5" { %"struct.std::__1::__compressed_pair_elem.6" { %"struct.jxl::jpeg::JPEGData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::jpeg::JPEGData"*) } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, %"struct.jxl::FrameOrigin" { i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.std::__1::basic_string" { %"class.std::__1::__compressed_pair.73" { %"struct.std::__1::__compressed_pair_elem.74" { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" { %union.anon { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" { i8* inttoptr (i64 -6148914691236517206 to i8*), i64 -6148914691236517206, i64 -6148914691236517206 } } } } } }, %"struct.jxl::ImageMetadata"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ImageMetadata"*), %"class.jxl::Image3" { [3 x %"class.jxl::Plane"] [%"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }] }, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, %"class.std::__1::vector.85" { %"class.std::__1::__vector_base.86" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.std::__1::__compressed_pair.87" { %"struct.std::__1::__compressed_pair_elem.88" { %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*) } } } }, i64 -6148914691236517206 }, %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>], i64 -6148914691236517206 }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.jxl::Plane" { %"struct.jxl::PlaneBase" { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i64 -6148914691236517206, %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } } }, %"class.std::__1::vector.200" { %"class.std::__1::__vector_base.201" { %"class.std::__1::unique_ptr.202"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::unique_ptr.202"*), %"class.std::__1::unique_ptr.202"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::unique_ptr.202"*), %"class.std::__1::__compressed_pair.203" { %"struct.std::__1::__compressed_pair_elem.204" { %"class.std::__1::unique_ptr.202"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::unique_ptr.202"*) } } } }, %"class.std::__1::vector.208" { %"class.std::__1::__vector_base.209" { %"class.std::__1::unique_ptr.210"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::unique_ptr.210"*), %"class.std::__1::unique_ptr.210"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::unique_ptr.210"*), %"class.std::__1::__compressed_pair.211" { %"struct.std::__1::__compressed_pair_elem.212" { %"class.std::__1::unique_ptr.210"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::unique_ptr.210"*) } } } }, <{ { i64, [11 x { i64, i64, i8, [7 x i8], i64 }] }, %"class.jxl::Plane"*, float, [4 x i8] }> <{ { i64, [11 x { i64, i64, i8, [7 x i8], i64 }] } { i64 -6148914691236517206, [11 x { i64, i64, i8, [7 x i8], i64 }] [{ i64, i64, i8, [7 x i8], i64 } { i64 -6148914691236517206, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, { i64, i64, i8, [7 x i8], i64 } { i64 -6148914691236517206, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, { i64, i64, i8, [7 x i8], i64 } { i64 -6148914691236517206, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, { i64, i64, i8, [7 x i8], i64 } { i64 -6148914691236517206, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, { i64, i64, i8, [7 x i8], i64 } { i64 -6148914691236517206, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, { i64, i64, i8, [7 x i8], i64 } { i64 -6148914691236517206, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, { i64, i64, i8, [7 x i8], i64 } { i64 -6148914691236517206, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, { i64, i64, i8, [7 x i8], i64 } { i64 -6148914691236517206, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, { i64, i64, i8, [7 x i8], i64 } { i64 -6148914691236517206, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, { i64, i64, i8, [7 x i8], i64 } { i64 -6148914691236517206, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }, { i64, i64, i8, [7 x i8], i64 } { i64 -6148914691236517206, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206 }] }, %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, { float, [4 x i8], i64, float, float, float, i8, [3 x i8], [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, [7 x i8], i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, [1 x i8], i32, i8, [3 x i8], i64, float, [4 x i8], %"class.jxl::Plane"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair", i32, float, float, i32, i32, i8, i8, [6 x i8], i64, i64 } { float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA", [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], i32 -1431655766, i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::YCbCrChromaSubsampling" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, [3 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766], i8 -86, i8 -86, [2 x i8] c"\AA\AA" }>, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, i8 -86, i8 -86, [1 x i8] c"\AA", i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i64 -6148914691236517206, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"struct.jxl::ButteraugliParams" <{ float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA" }>, i8 -86, [3 x i8] c"\AA\AA\AA", %"struct.jxl::ModularOptions" <{ i64 -6148914691236517206, float 0xFFFFFFFFE0000000, i32 -1431655766, %"class.std::__1::vector" { %"class.std::__1::__vector_base" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, i32 -1431655766, %"struct.std::__1::pair" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i32 -1431655766, i32 -1431655766, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", i64 -6148914691236517206, i64 -6148914691236517206 }, %"class.std::__1::vector.216" { %"class.std::__1::__vector_base.217" { %"struct.jxl::PassesEncoderState::PassData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PassesEncoderState::PassData"*), %"struct.jxl::PassesEncoderState::PassData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PassesEncoderState::PassData"*), %"class.std::__1::__compressed_pair.241" { %"struct.std::__1::__compressed_pair_elem.242" { %"struct.jxl::PassesEncoderState::PassData"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::PassesEncoderState::PassData"*) } } } }, %"class.std::__1::vector.9" { %"class.std::__1::__vector_base.10" { i8* inttoptr (i64 -6148914691236517206 to i8*), i8* inttoptr (i64 -6148914691236517206 to i8*), %"class.std::__1::__compressed_pair.11" { %"struct.std::__1::__compressed_pair_elem" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, %"class.std::__1::vector" { %"class.std::__1::__vector_base" { i32* inttoptr (i64 -6148914691236517206 to i32*), i32* inttoptr (i64 -6148914691236517206 to i32*), %"class.std::__1::__compressed_pair.1" { %"struct.std::__1::__compressed_pair_elem.2" { i32* inttoptr (i64 -6148914691236517206 to i32*) } } } }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %"class.std::__1::unique_ptr.246" { %"class.std::__1::__compressed_pair.247" { %"struct.std::__1::__compressed_pair_elem.248" { %"class.jxl::EncoderHeuristics"* inttoptr (i64 -6148914691236517206 to %"class.jxl::EncoderHeuristics"*) } } } }, align 8
@_ZN3jxl12_GLOBAL__N_138progressive_passes_dc_quant_ac_full_acE = internal global [3 x %"struct.jxl::PassDefinition"] [%"struct.jxl::PassDefinition" { i64 8, i64 2, i8 0, i64 4 }, %"struct.jxl::PassDefinition" { i64 8, i64 1, i8 0, i64 2 }, %"struct.jxl::PassDefinition" { i64 8, i64 0, i8 0, i64 0 }], align 16
@_ZN3jxl12_GLOBAL__N_125progressive_passes_dc_vlfE = internal unnamed_addr constant [1 x %"struct.jxl::PassDefinition"] [%"struct.jxl::PassDefinition" { i64 2, i64 0, i8 0, i64 4 }], align 16
@_ZN3jxl12_GLOBAL__N_124progressive_passes_dc_lfE = internal global [2 x %"struct.jxl::PassDefinition"] [%"struct.jxl::PassDefinition" { i64 2, i64 0, i8 0, i64 4 }, %"struct.jxl::PassDefinition" { i64 3, i64 0, i8 0, i64 2 }], align 16
@_ZN3jxl12_GLOBAL__N_135progressive_passes_dc_lf_salient_acE = internal global [3 x %"struct.jxl::PassDefinition"] [%"struct.jxl::PassDefinition" { i64 2, i64 0, i8 0, i64 4 }, %"struct.jxl::PassDefinition" { i64 3, i64 0, i8 0, i64 2 }, %"struct.jxl::PassDefinition" { i64 8, i64 0, i8 1, i64 0 }], align 16
@_ZN3jxl12_GLOBAL__N_144progressive_passes_dc_lf_salient_ac_other_acE = internal global [4 x %"struct.jxl::PassDefinition"] [%"struct.jxl::PassDefinition" { i64 2, i64 0, i8 0, i64 4 }, %"struct.jxl::PassDefinition" { i64 3, i64 0, i8 0, i64 2 }, %"struct.jxl::PassDefinition" { i64 8, i64 0, i8 1, i64 0 }, %"struct.jxl::PassDefinition" { i64 8, i64 0, i8 0, i64 0 }], align 16
@_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_ = linkonce_odr hidden constant %"struct.std::__1::__function::__policy" { i8* (i8*)* null, void (i8*)* null, i8 1, %"class.std::type_info"* null }, comdat, align 8
@_ZN3jxl15DequantMatrices14required_size_E.const = private unnamed_addr constant [17 x i64] [i64 1, i64 1, i64 1, i64 1, i64 4, i64 16, i64 2, i64 4, i64 8, i64 1, i64 1, i64 64, i64 32, i64 256, i64 128, i64 1024, i64 512], align 16
@_ZN3jxl15DequantMatrices11kQuantTableE.const = private unnamed_addr constant [27 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 6, i64 7, i64 7, i64 8, i64 8, i64 9, i64 9, i64 10, i64 10, i64 10, i64 10, i64 11, i64 12, i64 12, i64 13, i64 14, i64 14, i64 15, i64 16, i64 16], align 16
@.str.12 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.13 = private unnamed_addr constant [53 x i8] c"../../third_party/libjxl/src/lib/jxl/quant_weights.h\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"Compute()\00", align 1
@_ZN3jxl11BlockCtxMap14kDefaultCtxMapE = external local_unnamed_addr constant [39 x i8], align 16
@.ref.tmp = private unnamed_addr constant [8 x i32] [i32 0, i32 1, i32 15, i32 9, i32 10, i32 11, i32 12, i32 13], align 4
@_ZTVN3jxl24DefaultEncoderHeuristicsE = external unnamed_addr constant { [7 x i8*] }, align 8
@.str.17 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.18 = private unnamed_addr constant [54 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_bit_writer.h\00", align 1
@.str.19 = private unnamed_addr constant [34 x i8] c"bits_written_ % kBitsPerByte == 0\00", align 1
@_ZTVN3jxl11FrameHeaderE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.20 = private unnamed_addr constant [52 x i8] c"../../third_party/libjxl/src/lib/jxl/codec_in_out.h\00", align 1
@.str.21 = private unnamed_addr constant [42 x i8] c"metadata.m.bit_depth.bits_per_sample != 0\00", align 1
@.str.22 = private unnamed_addr constant [41 x i8] c"!metadata.m.color_encoding.ICC().empty()\00", align 1
@.str.23 = private unnamed_addr constant [40 x i8] c"preview_frame.metadata() == &metadata.m\00", align 1
@.str.24 = private unnamed_addr constant [29 x i8] c"ib.metadata() == &metadata.m\00", align 1
@_ZTVN3jxl16ExtraChannelInfoE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl8BitDepthE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl13ImageMetadataE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.27 = private unnamed_addr constant [57 x i8] c"../../third_party/libjxl/src/lib/jxl/progressive_split.h\00", align 1
@.str.28 = private unnamed_addr constant [265 x i8] c"p[i].num_coefficients > previous_pass.num_coefficients || (p[i].num_coefficients == previous_pass.num_coefficients && !p[i].salient_only && previous_pass.salient_only) || (p[i].num_coefficients == previous_pass.num_coefficients && p[i].shift < previous_pass.shift)\00", align 1
@.str.29 = private unnamed_addr constant [142 x i8] c"p[i].suitable_for_downsampling_of_at_least == kNoDownsamplingFactor || p[i].suitable_for_downsampling_of_at_least <= last_downsampling_factor\00", align 1
@constinit.34 = private unnamed_addr constant <{ %"struct.jxl::PassDefinition", [10 x %"struct.jxl::PassDefinition"] }> <{ %"struct.jxl::PassDefinition" { i64 8, i64 0, i8 0, i64 1 }, [10 x %"struct.jxl::PassDefinition"] zeroinitializer }>, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl13EncodePreviewERKNS_14CompressParamsERKNS_11ImageBundleEPKNS_13CodecMetadataEPNS_10ThreadPoolEPNS_9BitWriterE(%"struct.jxl::CompressParams"* dereferenceable(360), %"class.jxl::ImageBundle"* dereferenceable(368), %"struct.jxl::CodecMetadata"*, %"class.jxl::ThreadPool"*, %"struct.jxl::BitWriter"* noalias) local_unnamed_addr #0 {
  %6 = alloca %"struct.jxl::BitWriter", align 8
  %7 = alloca %"struct.jxl::AuxOut", align 8
  %8 = alloca %"struct.jxl::PassesEncoderState", align 8
  %9 = alloca %"struct.jxl::FrameInfo", align 8
  %10 = bitcast %"struct.jxl::BitWriter"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #11
  %11 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %6, i64 0, i32 0
  %12 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %6, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 40, i1 false) #11
  %13 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %192, label %16

16:                                               ; preds = %5
  %17 = bitcast %"struct.jxl::AuxOut"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1096, i8* nonnull %17) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %17, i8* align 8 bitcast ({ %"struct.std::__1::array.92", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.93", %"struct.std::__1::array.93", i32, [4 x i8], %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.94" }* @__const._ZN3jxl13EncodePreviewERKNS_14CompressParamsERKNS_11ImageBundleEPKNS_13CodecMetadataEPNS_10ThreadPoolEPNS_9BitWriterE.aux_out to i8*), i64 1080, i1 false)
  %18 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %7, i64 0, i32 15
  %19 = bitcast %"class.std::__1::basic_string"* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 24, i1 false) #11
  %20 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %7, i64 0, i32 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 996, i1 false) #11
  store i64 1, i64* %20, align 8
  %21 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %7, i64 0, i32 17, i32 0, i32 1, i32 0
  store i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* @_ZNSt3__110__function16__policy_invokerIFbPKcRKN3jxl6Image3IfEEEE12__call_emptyEPKNS0_16__policy_storageES3_S8_, i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)** %21, align 8
  %22 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %7, i64 0, i32 17, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %22, align 8
  %23 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %7, i64 0, i32 18, i32 0, i32 1, i32 0
  store i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* @_ZNSt3__110__function16__policy_invokerIFN3jxl6StatusERKNS2_10CodecInOutERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE12__call_emptyEPKNS0_16__policy_storageES6_SE_, i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)** %23, align 8
  %24 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %7, i64 0, i32 18, i32 0, i32 2
  store %"struct.std::__1::__function::__policy"* @_ZZNSt3__110__function8__policy14__create_emptyEvE9__policy_, %"struct.std::__1::__function::__policy"** %24, align 8
  %25 = bitcast %"struct.jxl::PassesEncoderState"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 5088, i8* nonnull %25) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %25, i8* align 8 bitcast ({ { %"struct.jxl::CodecMetadata"*, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, [4 x i8], %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, [3 x i8], %"struct.jxl::FrameSize", i32, %"class.std::__1::vector", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.114", %"struct.jxl::AnimationFrame", i8, [3 x i8], i32, i8, [3 x i8], i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, [7 x i8], i64 }, %"struct.jxl::FrameDimensions", %"class.jxl::AcStrategyImage", %"class.jxl::DequantMatrices", %"class.jxl::Quantizer", %"class.jxl::Plane.153", %"class.jxl::Plane.121", %"struct.jxl::ColorCorrelationMap", { %"struct.jxl::NoiseParams", %"class.jxl::PatchDictionary", { i32, [4 x i8], %"class.std::__1::vector.176", %"class.std::__1::vector.191" } }, i64, %"class.std::__1::vector", %"class.jxl::Plane.121", %"class.jxl::Image3", %"class.jxl::Image3"*, %"struct.jxl::BlockCtxMap", [4 x %"class.jxl::Image3"], [4 x <{ { %"class.std::__1::unique_ptr.4", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, [2 x i8], %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, %"class.std::__1::vector.85", i64 }, %"class.jxl::ImageBundle"*, i8, [7 x i8] }>], i64 }, %"class.jxl::Plane", %"class.jxl::Plane", %"class.std::__1::vector.200", %"class.std::__1::vector.208", <{ { i64, [11 x { i64, i64, i8, [7 x i8], i64 }] }, %"class.jxl::Plane"*, float, [4 x i8] }>, { float, [4 x i8], i64, float, float, float, i8, [3 x i8], [3 x float], i32, i64, i32, i32, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i8, [7 x i8], i64, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, [1 x i8], i32, i8, [3 x i8], i64, float, [4 x i8], %"class.jxl::Plane"*, i8*, i8*, i8, i8, [2 x i8], %"struct.jxl::ButteraugliParams", i8, [3 x i8], %"struct.jxl::ModularOptions", i32, %"struct.std::__1::pair", i32, float, float, i32, i32, i8, i8, [6 x i8], i64, i64 }, %"class.std::__1::vector.216", %"class.std::__1::vector.9", %"class.std::__1::vector", float, float, %"class.std::__1::unique_ptr.246" }* @__const._ZN3jxl13EncodePreviewERKNS_14CompressParamsERKNS_11ImageBundleEPKNS_13CodecMetadataEPNS_10ThreadPoolEPNS_9BitWriterE.passes_enc_state to i8*), i64 5088, i1 false)
  %26 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 0
  call void @_ZN3jxl17PassesSharedStateC2Ev(%"struct.jxl::PassesSharedState"* nonnull %26) #11
  %27 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 1
  %28 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 5, i32 0, i32 0
  %29 = bitcast %"class.jxl::Plane"* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 112, i1 false) #11
  store i64 1, i64* %28, align 8
  %30 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 5, i32 0, i32 1
  %31 = bitcast [11 x %"struct.jxl::PassDefinition"]* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 bitcast (<{ %"struct.jxl::PassDefinition", [10 x %"struct.jxl::PassDefinition"] }>* @constinit.34 to i8*), i64 352, i1 false) #11
  %32 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 5, i32 1
  store %"class.jxl::Plane"* null, %"class.jxl::Plane"** %32, align 8
  %33 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 5, i32 2
  store float 0.000000e+00, float* %33, align 8
  %34 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 0
  store float 1.000000e+00, float* %34, align 8
  %35 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 1
  %36 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 6, i64 0
  store float 0.000000e+00, float* %36, align 8
  %37 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 6, i64 1
  store float 0.000000e+00, float* %37, align 4
  %38 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 6, i64 2
  store float 0.000000e+00, float* %38, align 8
  %39 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 7
  %40 = bitcast i64* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 21, i1 false) #11
  store i32 3, i32* %39, align 4
  %41 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 8
  store i64 0, i64* %41, align 8
  %42 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 9
  store i32 4, i32* %42, align 8
  %43 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 10
  store i32 100, i32* %43, align 4
  %44 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 11
  store i32 0, i32* %44, align 8
  %45 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 13
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %45) #11
  %46 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 14
  store i8 0, i8* %46, align 8
  %47 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 15
  store i64 1, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 16
  %49 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 22
  %50 = bitcast i32* %48 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 -1, i64 24, i1 false) #11
  %51 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 26
  %52 = bitcast i32* %49 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %52, i8 0, i64 7, i1 false) #11
  store i32 -1, i32* %51, align 8
  %53 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 27
  store i8 0, i8* %53, align 4
  %54 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 28
  store i64 3, i64* %54, align 8
  %55 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 29
  store float 0.000000e+00, float* %55, align 8
  %56 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 30
  %57 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 36, i32 0
  %58 = bitcast %"class.jxl::Plane"** %56 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 26, i1 false) #11
  store float 1.000000e+00, float* %57, align 4
  %59 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 36, i32 1
  store float 1.000000e+00, float* %59, align 4
  %60 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 36, i32 2
  store float 8.000000e+01, float* %60, align 4
  %61 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 36, i32 3
  store i8 0, i8* %61, align 4
  %62 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 37
  store i8 1, i8* %62, align 4
  %63 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 0
  store i64 16777215, i64* %63, align 8
  %64 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 1
  store float 5.000000e-01, float* %64, align 8
  %65 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 2
  %66 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 3
  store i32 0, i32* %65, align 4
  %67 = call i8* @_Znwm(i64 32) #12
  %68 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 3, i32 0, i32 1
  %69 = bitcast %"class.std::__1::vector"* %66 to i8**
  store i8* %67, i8** %69, align 8
  %70 = getelementptr inbounds i8, i8* %67, i64 32
  %71 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 3, i32 0, i32 2, i32 0, i32 0
  %72 = bitcast i32** %71 to i8**
  store i8* %70, i8** %72, align 8
  %73 = bitcast i32** %68 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %67, i8* align 4 bitcast ([8 x i32]* @.ref.tmp to i8*), i64 32, i1 false) #11
  %74 = ptrtoint i8* %70 to i64
  store i64 %74, i64* %73, align 8
  %75 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 4
  store float 9.600000e+01, float* %75, align 8
  %76 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 6
  store i64 32, i64* %76, align 8
  %77 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 7
  store i32 -1, i32* %77, align 8
  %78 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 8
  store i32 0, i32* %78, align 4
  %79 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 9
  store float 0x3FF028F5C0000000, float* %79, align 8
  %80 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 10
  store i32 2, i32* %80, align 4
  %81 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 11
  store i8 0, i8* %81, align 8
  %82 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 13
  store i32 0, i32* %82, align 4
  %83 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 39, i32 14
  store i8 0, i8* %83, align 8
  %84 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 40
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 1120403456, i32 1120403456, i32 -1>, <4 x i32>* %85, align 8
  %86 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 43
  store float 9.500000e+01, float* %86, align 8
  %87 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 44
  store float 8.000000e+01, float* %87, align 4
  %88 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 45
  store i32 0, i32* %88, align 8
  %89 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 46
  store i32 1024, i32* %89, align 4
  %90 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 47
  store i8 0, i8* %90, align 8
  %91 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 48
  store i8 0, i8* %91, align 1
  %92 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 6, i32 49
  %93 = bitcast i64* %92 to <2 x i64>*
  store <2 x i64> <i64 1, i64 1>, <2 x i64>* %93, align 8
  %94 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 7
  %95 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 10
  %96 = bitcast %"class.std::__1::vector.216"* %94 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 72, i1 false) #11
  store float 1.000000e+00, float* %95, align 8
  %97 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 11
  store float 1.000000e+00, float* %97, align 4
  %98 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %8, i64 0, i32 12
  %99 = call i8* @_Znwm(i64 8) #12
  %100 = bitcast i8* %99 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3jxl24DefaultEncoderHeuristicsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %100, align 8
  %101 = ptrtoint i8* %99 to i64
  %102 = bitcast %"class.std::__1::unique_ptr.246"* %98 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %103) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %103, i8 -86, i64 24, i1 false)
  store i8 0, i8* %103, align 8
  %104 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %9, i64 0, i32 1
  store i8 1, i8* %104, align 1
  %105 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %9, i64 0, i32 2
  store i32 0, i32* %105, align 4
  %106 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %9, i64 0, i32 3
  store i64 0, i64* %106, align 8
  %107 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %9, i64 0, i32 4
  store i8 1, i8* %107, align 8
  %108 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %9, i64 0, i32 5
  %109 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %9, i64 0, i32 6
  store i64 0, i64* %109, align 8
  store i8 1, i8* %108, align 1
  %110 = call i32 @_ZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutE(%"struct.jxl::CompressParams"* dereferenceable(360) %0, %"struct.jxl::FrameInfo"* nonnull dereferenceable(32) %9, %"struct.jxl::CodecMetadata"* %2, %"class.jxl::ImageBundle"* dereferenceable(368) %1, %"struct.jxl::PassesEncoderState"* nonnull %8, %"class.jxl::ThreadPool"* %3, %"struct.jxl::BitWriter"* nonnull %6, %"struct.jxl::AuxOut"* nonnull %7) #11
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %137, label %112

112:                                              ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %103) #11
  call void @_ZN3jxl18PassesEncoderStateD2Ev(%"struct.jxl::PassesEncoderState"* nonnull %8) #11
  call void @llvm.lifetime.end.p0i8(i64 5088, i8* nonnull %25) #11
  %113 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %24, align 8
  %114 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %113, i64 0, i32 1
  %115 = load void (i8*)*, void (i8*)** %114, align 8
  %116 = icmp eq void (i8*)* %115, null
  br i1 %116, label %120, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %7, i64 0, i32 18, i32 0, i32 0, i32 0
  %119 = load i8*, i8** %118, align 8
  call void %115(i8* %119) #11
  br label %120

120:                                              ; preds = %117, %112
  %121 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %22, align 8
  %122 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %121, i64 0, i32 1
  %123 = load void (i8*)*, void (i8*)** %122, align 8
  %124 = icmp eq void (i8*)* %123, null
  br i1 %124, label %128, label %125

125:                                              ; preds = %120
  %126 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %7, i64 0, i32 17, i32 0, i32 0, i32 0
  %127 = load i8*, i8** %126, align 8
  call void %123(i8* %127) #11
  br label %128

128:                                              ; preds = %125, %120
  %129 = bitcast %"class.std::__1::basic_string"* %18 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %130 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %129, i64 0, i32 1, i32 0
  %131 = load i8, i8* %130, align 1
  %132 = icmp slt i8 %131, 0
  br i1 %132, label %133, label %136

133:                                              ; preds = %128
  %134 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load i8*, i8** %134, align 8
  call void @_ZdlPv(i8* %135) #12
  br label %136

136:                                              ; preds = %128, %133
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %17) #11
  br label %192

137:                                              ; preds = %16
  %138 = load i64, i64* %11, align 8
  %139 = add i64 %138, 7
  %140 = and i64 %139, -8
  %141 = sub i64 %140, %138
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %150, label %143

143:                                              ; preds = %137
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %6, i64 %141, i64 0) #11
  %144 = load i64, i64* %11, align 8
  %145 = and i64 %144, 7
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %150, label %147

147:                                              ; preds = %143
  %148 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.18, i64 0, i64 0), i32 133, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0)) #11
  %149 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

150:                                              ; preds = %137, %143
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %103) #11
  call void @_ZN3jxl18PassesEncoderStateD2Ev(%"struct.jxl::PassesEncoderState"* nonnull %8) #11
  call void @llvm.lifetime.end.p0i8(i64 5088, i8* nonnull %25) #11
  %151 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %24, align 8
  %152 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %151, i64 0, i32 1
  %153 = load void (i8*)*, void (i8*)** %152, align 8
  %154 = icmp eq void (i8*)* %153, null
  br i1 %154, label %158, label %155

155:                                              ; preds = %150
  %156 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %7, i64 0, i32 18, i32 0, i32 0, i32 0
  %157 = load i8*, i8** %156, align 8
  call void %153(i8* %157) #11
  br label %158

158:                                              ; preds = %155, %150
  %159 = load %"struct.std::__1::__function::__policy"*, %"struct.std::__1::__function::__policy"** %22, align 8
  %160 = getelementptr inbounds %"struct.std::__1::__function::__policy", %"struct.std::__1::__function::__policy"* %159, i64 0, i32 1
  %161 = load void (i8*)*, void (i8*)** %160, align 8
  %162 = icmp eq void (i8*)* %161, null
  br i1 %162, label %166, label %163

163:                                              ; preds = %158
  %164 = getelementptr inbounds %"struct.jxl::AuxOut", %"struct.jxl::AuxOut"* %7, i64 0, i32 17, i32 0, i32 0, i32 0
  %165 = load i8*, i8** %164, align 8
  call void %161(i8* %165) #11
  br label %166

166:                                              ; preds = %163, %158
  %167 = bitcast %"class.std::__1::basic_string"* %18 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %168 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %167, i64 0, i32 1, i32 0
  %169 = load i8, i8* %168, align 1
  %170 = icmp slt i8 %169, 0
  br i1 %170, label %171, label %174

171:                                              ; preds = %166
  %172 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %173 = load i8*, i8** %172, align 8
  call void @_ZdlPv(i8* %173) #12
  br label %174

174:                                              ; preds = %171, %166
  call void @llvm.lifetime.end.p0i8(i64 1096, i8* nonnull %17) #11
  %175 = load i64, i64* %11, align 8
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %192, label %177

177:                                              ; preds = %174
  %178 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %4, i64 0, i32 0
  %179 = load i64, i64* %178, align 8
  %180 = add i64 %179, 7
  %181 = and i64 %180, -8
  %182 = sub i64 %181, %179
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %191, label %184

184:                                              ; preds = %177
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %4, i64 %182, i64 0) #11
  %185 = load i64, i64* %178, align 8
  %186 = and i64 %185, 7
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %191, label %188

188:                                              ; preds = %184
  %189 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.18, i64 0, i64 0), i32 133, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0)) #11
  %190 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

191:                                              ; preds = %177, %184
  call void @_ZN3jxl9BitWriter17AppendByteAlignedERKS0_(%"struct.jxl::BitWriter"* %4, %"struct.jxl::BitWriter"* nonnull dereferenceable(40) %6) #11
  br label %192

192:                                              ; preds = %5, %191, %174, %136
  %193 = phi i32 [ %110, %136 ], [ 0, %174 ], [ 0, %191 ], [ 0, %5 ]
  %194 = load i8*, i8** %12, align 8
  store i8* null, i8** %12, align 8
  %195 = icmp eq i8* %194, null
  br i1 %195, label %197, label %196

196:                                              ; preds = %192
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %194) #11
  br label %197

197:                                              ; preds = %192, %196
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #11
  ret i32 %193
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @_ZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutE(%"struct.jxl::CompressParams"* dereferenceable(360), %"struct.jxl::FrameInfo"* dereferenceable(32), %"struct.jxl::CodecMetadata"*, %"class.jxl::ImageBundle"* dereferenceable(368), %"struct.jxl::PassesEncoderState"*, %"class.jxl::ThreadPool"*, %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesEncoderStateD2Ev(%"struct.jxl::PassesEncoderState"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %3 = load %"class.jxl::EncoderHeuristics"*, %"class.jxl::EncoderHeuristics"** %2, align 8
  store %"class.jxl::EncoderHeuristics"* null, %"class.jxl::EncoderHeuristics"** %2, align 8
  %4 = icmp eq %"class.jxl::EncoderHeuristics"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.jxl::EncoderHeuristics"* %3 to void (%"class.jxl::EncoderHeuristics"*)***
  %7 = load void (%"class.jxl::EncoderHeuristics"*)**, void (%"class.jxl::EncoderHeuristics"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.jxl::EncoderHeuristics"*)*, void (%"class.jxl::EncoderHeuristics"*)** %7, i64 1
  %9 = load void (%"class.jxl::EncoderHeuristics"*)*, void (%"class.jxl::EncoderHeuristics"*)** %8, align 8
  tail call void %9(%"class.jxl::EncoderHeuristics"* nonnull %3) #11
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 9, i32 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = icmp eq i32* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = ptrtoint i32* %12 to i64
  %16 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 9, i32 0, i32 1
  %17 = bitcast i32** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast i32* %12 to i8*
  tail call void @_ZdlPv(i8* %18) #12
  br label %19

19:                                               ; preds = %10, %14
  %20 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 8, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = icmp eq i8* %21, null
  br i1 %22, label %27, label %23

23:                                               ; preds = %19
  %24 = ptrtoint i8* %21 to i64
  %25 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 8, i32 0, i32 1
  %26 = bitcast i8** %25 to i64*
  store i64 %24, i64* %26, align 8
  tail call void @_ZdlPv(i8* nonnull %21) #12
  br label %27

27:                                               ; preds = %19, %23
  %28 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 7
  %29 = getelementptr inbounds %"class.std::__1::vector.216", %"class.std::__1::vector.216"* %28, i64 0, i32 0, i32 0
  %30 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %29, align 8
  %31 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %30, null
  br i1 %31, label %46, label %32

32:                                               ; preds = %27
  %33 = bitcast %"struct.jxl::PassesEncoderState::PassData"* %30 to i8*
  %34 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 7, i32 0, i32 1
  %35 = load %"struct.jxl::PassesEncoderState::PassData"*, %"struct.jxl::PassesEncoderState::PassData"** %34, align 8
  %36 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %35, %30
  br i1 %36, label %44, label %37

37:                                               ; preds = %32, %37
  %38 = phi %"struct.jxl::PassesEncoderState::PassData"* [ %39, %37 ], [ %35, %32 ]
  %39 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %38, i64 -1
  tail call void @_ZN3jxl18PassesEncoderState8PassDataD2Ev(%"struct.jxl::PassesEncoderState::PassData"* %39) #11
  %40 = icmp eq %"struct.jxl::PassesEncoderState::PassData"* %39, %30
  br i1 %40, label %41, label %37

41:                                               ; preds = %37
  %42 = bitcast %"class.std::__1::vector.216"* %28 to i8**
  %43 = load i8*, i8** %42, align 8
  br label %44

44:                                               ; preds = %41, %32
  %45 = phi i8* [ %43, %41 ], [ %33, %32 ]
  store %"struct.jxl::PassesEncoderState::PassData"* %30, %"struct.jxl::PassesEncoderState::PassData"** %34, align 8
  tail call void @_ZdlPv(i8* %45) #12
  br label %46

46:                                               ; preds = %27, %44
  %47 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 6, i32 39, i32 3, i32 0, i32 0
  %48 = load i32*, i32** %47, align 8
  %49 = icmp eq i32* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = ptrtoint i32* %48 to i64
  %52 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 6, i32 39, i32 3, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = bitcast i32* %48 to i8*
  tail call void @_ZdlPv(i8* %54) #12
  br label %55

55:                                               ; preds = %46, %50
  %56 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 4
  %57 = getelementptr inbounds %"class.std::__1::vector.208", %"class.std::__1::vector.208"* %56, i64 0, i32 0, i32 0
  %58 = load %"class.std::__1::unique_ptr.210"*, %"class.std::__1::unique_ptr.210"** %57, align 8
  %59 = icmp eq %"class.std::__1::unique_ptr.210"* %58, null
  br i1 %59, label %85, label %60

60:                                               ; preds = %55
  %61 = bitcast %"class.std::__1::unique_ptr.210"* %58 to i8*
  %62 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 4, i32 0, i32 1
  %63 = load %"class.std::__1::unique_ptr.210"*, %"class.std::__1::unique_ptr.210"** %62, align 8
  %64 = icmp eq %"class.std::__1::unique_ptr.210"* %63, %58
  br i1 %64, label %83, label %65

65:                                               ; preds = %60, %78
  %66 = phi %"class.std::__1::unique_ptr.210"* [ %67, %78 ], [ %63, %60 ]
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr.210", %"class.std::__1::unique_ptr.210"* %66, i64 -1
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr.210", %"class.std::__1::unique_ptr.210"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = load %"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"** %68, align 8
  store %"struct.jxl::BitWriter"* null, %"struct.jxl::BitWriter"** %68, align 8
  %70 = icmp eq %"struct.jxl::BitWriter"* %69, null
  br i1 %70, label %78, label %71

71:                                               ; preds = %65
  %72 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %69, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %73 = load i8*, i8** %72, align 8
  store i8* null, i8** %72, align 8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %76, label %75

75:                                               ; preds = %71
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %73) #11
  br label %76

76:                                               ; preds = %75, %71
  %77 = bitcast %"struct.jxl::BitWriter"* %69 to i8*
  tail call void @_ZdlPv(i8* %77) #12
  br label %78

78:                                               ; preds = %76, %65
  %79 = icmp eq %"class.std::__1::unique_ptr.210"* %67, %58
  br i1 %79, label %80, label %65

80:                                               ; preds = %78
  %81 = bitcast %"class.std::__1::vector.208"* %56 to i8**
  %82 = load i8*, i8** %81, align 8
  br label %83

83:                                               ; preds = %80, %60
  %84 = phi i8* [ %82, %80 ], [ %61, %60 ]
  store %"class.std::__1::unique_ptr.210"* %58, %"class.std::__1::unique_ptr.210"** %62, align 8
  tail call void @_ZdlPv(i8* %84) #12
  br label %85

85:                                               ; preds = %55, %83
  %86 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 3
  %87 = getelementptr inbounds %"class.std::__1::vector.200", %"class.std::__1::vector.200"* %86, i64 0, i32 0, i32 0
  %88 = load %"class.std::__1::unique_ptr.202"*, %"class.std::__1::unique_ptr.202"** %87, align 8
  %89 = icmp eq %"class.std::__1::unique_ptr.202"* %88, null
  br i1 %89, label %113, label %90

90:                                               ; preds = %85
  %91 = bitcast %"class.std::__1::unique_ptr.202"* %88 to i8*
  %92 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 3, i32 0, i32 1
  %93 = load %"class.std::__1::unique_ptr.202"*, %"class.std::__1::unique_ptr.202"** %92, align 8
  %94 = icmp eq %"class.std::__1::unique_ptr.202"* %93, %88
  br i1 %94, label %111, label %95

95:                                               ; preds = %90, %106
  %96 = phi %"class.std::__1::unique_ptr.202"* [ %97, %106 ], [ %93, %90 ]
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.202", %"class.std::__1::unique_ptr.202"* %96, i64 -1
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.202", %"class.std::__1::unique_ptr.202"* %97, i64 0, i32 0, i32 0, i32 0
  %99 = load %"class.jxl::ACImage"*, %"class.jxl::ACImage"** %98, align 8
  store %"class.jxl::ACImage"* null, %"class.jxl::ACImage"** %98, align 8
  %100 = icmp eq %"class.jxl::ACImage"* %99, null
  br i1 %100, label %106, label %101

101:                                              ; preds = %95
  %102 = bitcast %"class.jxl::ACImage"* %99 to void (%"class.jxl::ACImage"*)***
  %103 = load void (%"class.jxl::ACImage"*)**, void (%"class.jxl::ACImage"*)*** %102, align 8
  %104 = getelementptr inbounds void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %103, i64 1
  %105 = load void (%"class.jxl::ACImage"*)*, void (%"class.jxl::ACImage"*)** %104, align 8
  tail call void %105(%"class.jxl::ACImage"* nonnull %99) #11
  br label %106

106:                                              ; preds = %101, %95
  %107 = icmp eq %"class.std::__1::unique_ptr.202"* %97, %88
  br i1 %107, label %108, label %95

108:                                              ; preds = %106
  %109 = bitcast %"class.std::__1::vector.200"* %86 to i8**
  %110 = load i8*, i8** %109, align 8
  br label %111

111:                                              ; preds = %108, %90
  %112 = phi i8* [ %110, %108 ], [ %91, %90 ]
  store %"class.std::__1::unique_ptr.202"* %88, %"class.std::__1::unique_ptr.202"** %92, align 8
  tail call void @_ZdlPv(i8* %112) #12
  br label %113

113:                                              ; preds = %85, %111
  %114 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %115 = load i8*, i8** %114, align 8
  store i8* null, i8** %114, align 8
  %116 = icmp eq i8* %115, null
  br i1 %116, label %118, label %117

117:                                              ; preds = %113
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %115) #11
  br label %118

118:                                              ; preds = %113, %117
  %119 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %120 = load i8*, i8** %119, align 8
  store i8* null, i8** %119, align 8
  %121 = icmp eq i8* %120, null
  br i1 %121, label %123, label %122

122:                                              ; preds = %118
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %120) #11
  br label %123

123:                                              ; preds = %118, %122
  %124 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %0, i64 0, i32 0
  tail call void @_ZN3jxl17PassesSharedStateD2Ev(%"struct.jxl::PassesSharedState"* %124) #11
  ret void
}

declare void @_ZN3jxl9BitWriter17AppendByteAlignedERKS0_(%"struct.jxl::BitWriter"*, %"struct.jxl::BitWriter"* dereferenceable(40)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl12WriteHeadersEPNS_13CodecMetadataEPNS_9BitWriterEPNS_6AuxOutE(%"struct.jxl::CodecMetadata"*, %"struct.jxl::BitWriter"*, %"struct.jxl::AuxOut"*) local_unnamed_addr #0 {
  %4 = alloca %"class.jxl::BitWriter::Allotment", align 8
  %5 = bitcast %"class.jxl::BitWriter::Allotment"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %5) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 40, i1 false)
  call void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"* nonnull %4, %"struct.jxl::BitWriter"* %1, i64 16) #11
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 8, i64 255) #11
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* %1, i64 8, i64 10) #11
  call void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"* %1, %"class.jxl::BitWriter::Allotment"* nonnull %4, i64 0, %"struct.jxl::AuxOut"* %2) #11
  %6 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %0, i64 0, i32 1
  %7 = call i32 @_ZN3jxl15WriteSizeHeaderERKNS_10SizeHeaderEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::SizeHeader"* dereferenceable(32) %6, %"struct.jxl::BitWriter"* %1, i64 0, %"struct.jxl::AuxOut"* %2) #11
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %19

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %0, i64 0, i32 0
  %11 = call i32 @_ZN3jxl18WriteImageMetadataERKNS_13ImageMetadataEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::ImageMetadata"* dereferenceable(1600) %10, %"struct.jxl::BitWriter"* %1, i64 0, %"struct.jxl::AuxOut"* %2) #11
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %19

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %0, i64 0, i32 0, i32 5
  %15 = load i8, i8* %14, align 1, !range !2
  %16 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %0, i64 0, i32 2, i32 1
  store i8 %15, i8* %16, align 8
  %17 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %0, i64 0, i32 2, i32 0
  %18 = call i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8) %17, %"struct.jxl::BitWriter"* %1, i64 0, %"struct.jxl::AuxOut"* %2) #11
  br label %19

19:                                               ; preds = %13, %9, %3
  %20 = phi i32 [ %7, %3 ], [ %11, %9 ], [ %18, %13 ]
  call void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #11
  ret i32 %20
}

declare void @_ZN3jxl9BitWriter9AllotmentC1EPS0_m(%"class.jxl::BitWriter::Allotment"*, %"struct.jxl::BitWriter"*, i64) unnamed_addr #2

declare void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"*, i64, i64) local_unnamed_addr #2

declare void @_ZN3jxl16ReclaimAndChargeEPNS_9BitWriterEPNS0_9AllotmentEmPNS_6AuxOutE(%"struct.jxl::BitWriter"*, %"class.jxl::BitWriter::Allotment"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

declare i32 @_ZN3jxl15WriteSizeHeaderERKNS_10SizeHeaderEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::SizeHeader"* dereferenceable(32), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

declare i32 @_ZN3jxl18WriteImageMetadataERKNS_13ImageMetadataEPNS_9BitWriterEmPNS_6AuxOutE(%"struct.jxl::ImageMetadata"* dereferenceable(1600), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

declare i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3jxl9BitWriter9AllotmentD1Ev(%"class.jxl::BitWriter::Allotment"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl10EncodeFileERKNS_14CompressParamsEPKNS_10CodecInOutEPNS_18PassesEncoderStateEPNS_11PaddedBytesEPNS_6AuxOutEPNS_10ThreadPoolE(%"struct.jxl::CompressParams"* dereferenceable(360), %"class.jxl::CodecInOut"*, %"struct.jxl::PassesEncoderState"*, %"class.jxl::PaddedBytes"*, %"struct.jxl::AuxOut"*, %"class.jxl::ThreadPool"*) local_unnamed_addr #0 {
  %7 = alloca %"struct.jxl::BitWriter", align 8
  %8 = alloca %"struct.jxl::ProgressiveMode", align 8
  %9 = alloca [11 x %"struct.jxl::PassDefinition"], align 8
  %10 = alloca %"struct.jxl::ProgressiveMode", align 8
  %11 = alloca %"struct.jxl::ProgressiveMode", align 8
  %12 = alloca %"struct.jxl::ProgressiveMode", align 8
  %13 = alloca %"struct.jxl::ProgressiveMode", align 8
  %14 = alloca %"struct.jxl::FrameInfo", align 8
  %15 = alloca { i32, i32, i32, i32, i64 }, align 8
  %16 = alloca { i32, i32, i32, i32, i64 }, align 8
  %17 = alloca %"class.jxl::ImageBundle", align 8
  tail call void @_ZNK3jxl10CodecInOut13CheckMetadataEv(%"class.jxl::CodecInOut"* %1)
  %18 = bitcast %"struct.jxl::BitWriter"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %18) #11
  %19 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %7, i64 0, i32 0
  %20 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %7, i64 0, i32 1, i32 1
  %21 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %7, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 40, i1 false) #11
  %22 = tail call i8* @_Znwm(i64 2856) #12
  %23 = bitcast i8* %22 to %"struct.jxl::CodecMetadata"*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 0, i64 2856, i1 false) #11
  %24 = bitcast i8* %22 to %"struct.jxl::ImageMetadata"*
  tail call void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"* nonnull %24) #11
  %25 = getelementptr inbounds i8, i8* %22, i64 1600
  %26 = bitcast i8* %25 to %"class.jxl::SizeHeader"*
  tail call void @_ZN3jxl10SizeHeaderC1Ev(%"class.jxl::SizeHeader"* %26) #11
  %27 = getelementptr inbounds i8, i8* %22, i64 1632
  %28 = bitcast i8* %27 to %"struct.jxl::CustomTransformData"*
  tail call void @_ZN3jxl19CustomTransformDataC1Ev(%"struct.jxl::CustomTransformData"* %28) #11
  %29 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6
  %30 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 1
  %31 = load i8, i8* %30, align 8, !range !2
  %32 = getelementptr inbounds i8, i8* %22, i64 8
  store i8 %31, i8* %32, align 8
  %33 = getelementptr inbounds i8, i8* %22, i64 24
  %34 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 12, i1 false) #11
  %35 = getelementptr inbounds i8, i8* %22, i64 40
  %36 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 4
  %37 = bitcast i8* %36 to i16*
  %38 = bitcast i8* %35 to i16*
  %39 = load i16, i16* %37, align 8
  store i16 %39, i16* %38, align 8
  %40 = getelementptr inbounds i8, i8* %22, i64 56
  %41 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 7, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 12, i1 false) #11
  %42 = getelementptr inbounds i8, i8* %22, i64 80
  %43 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 7, i32 4, i32 1
  %44 = bitcast i32* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %44, i64 16, i1 false) #11
  %45 = getelementptr inbounds i8, i8* %22, i64 96
  %46 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 7, i32 5
  %47 = bitcast i32* %46 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %47, i64 6, i1 false) #11
  %48 = getelementptr inbounds i8, i8* %22, i64 104
  %49 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 7, i32 8, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds i8, i8* %22, i64 112
  %52 = bitcast i8* %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = icmp ult i64 %53, %50
  br i1 %54, label %55, label %57

55:                                               ; preds = %6
  %56 = bitcast i8* %48 to %"class.jxl::PaddedBytes"*
  tail call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %56, i64 %50) #11
  br label %57

57:                                               ; preds = %55, %6
  %58 = getelementptr inbounds i8, i8* %22, i64 120
  %59 = bitcast i8* %58 to i8**
  %60 = load i8*, i8** %59, align 8
  %61 = icmp eq i8* %60, null
  %62 = select i1 %61, i64 0, i64 %50
  %63 = bitcast i8* %48 to i64*
  store i64 %62, i64* %63, align 8
  br i1 %61, label %67, label %64

64:                                               ; preds = %57
  %65 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %60, i8* align 1 %66, i64 %62, i1 false) #11
  br label %67

67:                                               ; preds = %64, %57
  %68 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 7, i32 9
  %69 = load i32, i32* %68, align 8
  %70 = getelementptr inbounds i8, i8* %22, i64 128
  %71 = bitcast i8* %70 to i32*
  store i32 %69, i32* %71, align 8
  %72 = getelementptr inbounds i8, i8* %22, i64 144
  %73 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 7, i32 10, i32 1
  %74 = bitcast i32* %73 to i64*
  %75 = bitcast i8* %72 to i64*
  %76 = load i64, i64* %74, align 8
  store i64 %76, i64* %75, align 8
  %77 = getelementptr inbounds i8, i8* %22, i64 160
  %78 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 7, i32 11, i32 1
  %79 = bitcast i32* %78 to i64*
  %80 = bitcast i8* %77 to i64*
  %81 = load i64, i64* %79, align 8
  store i64 %81, i64* %80, align 8
  %82 = getelementptr inbounds i8, i8* %22, i64 176
  %83 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 7, i32 12, i32 1
  %84 = bitcast i32* %83 to i64*
  %85 = bitcast i8* %82 to i64*
  %86 = load i64, i64* %84, align 8
  store i64 %86, i64* %85, align 8
  %87 = getelementptr inbounds i8, i8* %22, i64 192
  %88 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 7, i32 13, i32 1
  %89 = bitcast i32* %88 to i64*
  %90 = bitcast i8* %87 to i64*
  %91 = load i64, i64* %89, align 8
  store i64 %91, i64* %90, align 8
  %92 = getelementptr inbounds i8, i8* %22, i64 200
  %93 = bitcast i8* %92 to i32*
  %94 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 8
  %95 = bitcast i32* %94 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %95, i64 7, i1 false) #11
  %96 = getelementptr inbounds i8, i8* %22, i64 216
  %97 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 13, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 24, i1 false) #11
  %98 = getelementptr inbounds i8, i8* %22, i64 248
  %99 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 14, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 20, i1 false) #11
  %100 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 15
  %101 = load i32, i32* %100, align 8
  %102 = getelementptr inbounds i8, i8* %22, i64 272
  %103 = bitcast i8* %102 to i32*
  store i32 %101, i32* %103, align 8
  %104 = icmp eq %"struct.jxl::CodecMetadata"* %29, %23
  br i1 %104, label %112, label %105

105:                                              ; preds = %67
  %106 = getelementptr inbounds i8, i8* %22, i64 280
  %107 = bitcast i8* %106 to %"class.std::__1::vector.78"*
  %108 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 17, i32 0, i32 0
  %109 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %108, align 8
  %110 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 17, i32 0, i32 1
  %111 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %110, align 8
  tail call void @_ZNSt3__16vectorIN3jxl16ExtraChannelInfoENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.78"* %107, %"struct.jxl::ExtraChannelInfo"* %109, %"struct.jxl::ExtraChannelInfo"* %111) #11
  br label %112

112:                                              ; preds = %105, %67
  %113 = getelementptr inbounds i8, i8* %22, i64 312
  %114 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 18, i32 1
  %115 = bitcast i8* %114 to i16*
  %116 = bitcast i8* %113 to i16*
  %117 = load i16, i16* %115, align 8
  store i16 %117, i16* %116, align 8
  %118 = getelementptr inbounds i8, i8* %22, i64 328
  %119 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 18, i32 4, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %119, i64 68, i1 false) #11
  %120 = getelementptr inbounds i8, i8* %22, i64 400
  %121 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 18, i32 5
  %122 = bitcast i32* %121 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* align 8 %122, i64 1124, i1 false) #11
  %123 = getelementptr inbounds i8, i8* %22, i64 1536
  %124 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 19, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %123, i8* align 8 %124, i64 24, i1 false) #11
  %125 = getelementptr inbounds i8, i8* %22, i64 1568
  %126 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 20, i32 1
  %127 = bitcast i32* %126 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %127, i64 13, i1 false) #11
  %128 = getelementptr inbounds i8, i8* %22, i64 1584
  %129 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 0, i32 21
  %130 = bitcast i64* %129 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %128, i8* align 8 %130, i64 9, i1 false) #11
  %131 = getelementptr inbounds i8, i8* %22, i64 1608
  %132 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 1, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %131, i8* align 8 %132, i64 24, i1 false) #11
  %133 = getelementptr inbounds i8, i8* %22, i64 1640
  %134 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 2, i32 1
  %135 = bitcast i8* %134 to i16*
  %136 = bitcast i8* %133 to i16*
  %137 = load i16, i16* %135, align 8
  store i16 %137, i16* %136, align 8
  %138 = getelementptr inbounds i8, i8* %22, i64 1656
  %139 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 2, i32 4, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %138, i8* align 8 %139, i64 68, i1 false) #11
  %140 = getelementptr inbounds i8, i8* %22, i64 1728
  %141 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 2, i32 5
  %142 = bitcast i32* %141 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %140, i8* align 8 %142, i64 1124, i1 false) #11
  %143 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 1
  %144 = tail call i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"* %143) #11
  %145 = load i8, i8* %132, align 8, !range !2
  %146 = icmp eq i8 %145, 0
  br i1 %146, label %152, label %147

147:                                              ; preds = %112
  %148 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 1, i32 2
  %149 = load i32, i32* %148, align 4
  %150 = shl i32 %149, 3
  %151 = add i32 %150, 8
  br label %155

152:                                              ; preds = %112
  %153 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 6, i32 1, i32 3
  %154 = load i32, i32* %153, align 8
  br label %155

155:                                              ; preds = %152, %147
  %156 = phi i32 [ %151, %147 ], [ %154, %152 ]
  %157 = zext i32 %156 to i64
  %158 = tail call i32 @_ZN3jxl10SizeHeader3SetEmm(%"class.jxl::SizeHeader"* %26, i64 %144, i64 %157) #11
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %524

160:                                              ; preds = %155
  %161 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 14
  %162 = load i8, i8* %161, align 8, !range !2
  %163 = icmp ne i8 %162, 0
  %164 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 41, i32 0
  %165 = load float, float* %164, align 4
  %166 = fcmp oeq float %165, 1.000000e+02
  %167 = and i1 %163, %166
  br i1 %167, label %196, label %168

168:                                              ; preds = %160
  %169 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 8
  %170 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 8, i32 0, i32 1
  %171 = bitcast %"class.jxl::ImageBundle"** %170 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = bitcast %"class.std::__1::vector.107"* %169 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = icmp eq i64 %172, %174
  %176 = inttoptr i64 %174 to %"class.jxl::ImageBundle"*
  br i1 %175, label %188, label %177

177:                                              ; preds = %168
  %178 = sub i64 %172, %174
  %179 = sdiv exact i64 %178, 368
  br label %180

180:                                              ; preds = %185, %177
  %181 = phi i64 [ 0, %177 ], [ %186, %185 ]
  %182 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %176, i64 %181, i32 5
  %183 = load i32, i32* %182, align 8
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %188

185:                                              ; preds = %180
  %186 = add nuw i64 %181, 1
  %187 = icmp ult i64 %186, %179
  br i1 %187, label %180, label %188

188:                                              ; preds = %185, %180, %168
  %189 = phi i64 [ 0, %168 ], [ %181, %180 ], [ %181, %185 ]
  %190 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %176, i64 %189, i32 0, i32 0, i32 0, i32 0
  %191 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %190, align 8
  %192 = icmp eq %"struct.jxl::jpeg::JPEGData"* %191, null
  br i1 %192, label %193, label %196

193:                                              ; preds = %188
  %194 = getelementptr inbounds i8, i8* %22, i64 48
  %195 = bitcast i8* %194 to %"struct.jxl::ColorEncoding"*
  tail call void @_ZN3jxl13ColorEncoding15DecideIfWantICCEv(%"struct.jxl::ColorEncoding"* %195) #11
  br label %196

196:                                              ; preds = %193, %188, %160
  %197 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 11
  %198 = load i32, i32* %197, align 8
  %199 = icmp eq i32 %198, 0
  %200 = getelementptr inbounds i8, i8* %22, i64 41
  %201 = zext i1 %199 to i8
  store i8 %201, i8* %200, align 1
  %202 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 5, i32 0, i32 0
  %203 = load i64, i64* %202, align 8
  %204 = icmp ult i64 %203, 12
  br i1 %204, label %320, label %205

205:                                              ; preds = %196
  %206 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0, i32 0
  %207 = load i8*, i8** %206, align 8
  %208 = bitcast i8* %207 to i32*
  %209 = load i32, i32* %208, align 1
  switch i32 %209, label %320 [
    i32 704662861, label %210
    i32 2771273, label %215
  ]

210:                                              ; preds = %205
  %211 = getelementptr inbounds i8, i8* %207, i64 4
  %212 = bitcast i8* %211 to i32*
  %213 = load i32, i32* %212, align 1
  %214 = tail call i32 @llvm.bswap.i32(i32 %213) #11
  br label %219

215:                                              ; preds = %205
  %216 = getelementptr inbounds i8, i8* %207, i64 4
  %217 = bitcast i8* %216 to i32*
  %218 = load i32, i32* %217, align 1
  br label %219

219:                                              ; preds = %215, %210
  %220 = phi i1 [ true, %210 ], [ false, %215 ]
  %221 = phi i32 [ %214, %210 ], [ %218, %215 ]
  %222 = add i32 %221, 14
  %223 = zext i32 %222 to i64
  %224 = icmp ult i64 %203, %223
  %225 = icmp ult i32 %221, 8
  %226 = or i1 %225, %224
  br i1 %226, label %320, label %227

227:                                              ; preds = %219
  %228 = getelementptr inbounds i8, i8* %207, i64 4
  %229 = add i32 %221, -4
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds i8, i8* %228, i64 %230
  %232 = load i8, i8* %231, align 1
  %233 = zext i8 %232 to i32
  %234 = getelementptr inbounds i8, i8* %231, i64 1
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i32
  %237 = shl nuw nsw i32 %233, 8
  %238 = or i32 %237, %236
  %239 = shl nuw nsw i32 %236, 8
  %240 = or i32 %239, %233
  %241 = select i1 %220, i32 %238, i32 %240
  %242 = trunc i32 %241 to i16
  %243 = icmp eq i16 %242, 0
  br i1 %243, label %320, label %244

244:                                              ; preds = %227
  %245 = getelementptr inbounds i8, i8* %231, i64 2
  %246 = getelementptr inbounds i8, i8* %245, i64 12
  %247 = getelementptr inbounds i8, i8* %207, i64 %203
  %248 = icmp ult i8* %246, %247
  br i1 %248, label %249, label %320

249:                                              ; preds = %244, %317
  %250 = phi i8* [ %318, %317 ], [ %246, %244 ]
  %251 = phi i8* [ %250, %317 ], [ %245, %244 ]
  %252 = phi i16 [ %315, %317 ], [ %242, %244 ]
  %253 = load i8, i8* %251, align 1
  %254 = zext i8 %253 to i32
  %255 = getelementptr inbounds i8, i8* %251, i64 1
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i32
  br i1 %220, label %258, label %275

258:                                              ; preds = %249
  %259 = shl nuw nsw i32 %254, 8
  %260 = or i32 %259, %257
  %261 = getelementptr inbounds i8, i8* %251, i64 2
  %262 = load i8, i8* %261, align 1
  %263 = zext i8 %262 to i32
  %264 = getelementptr inbounds i8, i8* %251, i64 3
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i32
  %267 = shl nuw nsw i32 %263, 8
  %268 = or i32 %267, %266
  %269 = getelementptr inbounds i8, i8* %251, i64 4
  %270 = bitcast i8* %269 to i32*
  %271 = load i32, i32* %270, align 1
  %272 = tail call i32 @llvm.bswap.i32(i32 %271) #11
  %273 = getelementptr inbounds i8, i8* %251, i64 8
  %274 = getelementptr inbounds i8, i8* %251, i64 9
  br label %291

275:                                              ; preds = %249
  %276 = shl nuw nsw i32 %257, 8
  %277 = or i32 %276, %254
  %278 = getelementptr inbounds i8, i8* %251, i64 2
  %279 = load i8, i8* %278, align 1
  %280 = zext i8 %279 to i32
  %281 = getelementptr inbounds i8, i8* %251, i64 3
  %282 = load i8, i8* %281, align 1
  %283 = zext i8 %282 to i32
  %284 = shl nuw nsw i32 %283, 8
  %285 = or i32 %284, %280
  %286 = getelementptr inbounds i8, i8* %251, i64 4
  %287 = bitcast i8* %286 to i32*
  %288 = load i32, i32* %287, align 1
  %289 = getelementptr inbounds i8, i8* %251, i64 8
  %290 = getelementptr inbounds i8, i8* %251, i64 9
  br label %291

291:                                              ; preds = %275, %258
  %292 = phi i8* [ %290, %275 ], [ %273, %258 ]
  %293 = phi i8* [ %289, %275 ], [ %274, %258 ]
  %294 = phi i32 [ %288, %275 ], [ %272, %258 ]
  %295 = phi i32 [ %277, %275 ], [ %260, %258 ]
  %296 = phi i32 [ %285, %275 ], [ %268, %258 ]
  %297 = load i8, i8* %293, align 1
  %298 = load i8, i8* %292, align 1
  %299 = zext i8 %297 to i32
  %300 = zext i8 %298 to i32
  %301 = shl nuw nsw i32 %300, 8
  %302 = or i32 %301, %299
  %303 = and i32 %295, 65535
  %304 = icmp eq i32 %303, 274
  br i1 %304, label %305, label %314

305:                                              ; preds = %291
  %306 = and i32 %296, 65535
  %307 = icmp eq i32 %306, 3
  %308 = icmp eq i32 %294, 1
  %309 = and i1 %308, %307
  %310 = add nsw i32 %302, -1
  %311 = icmp ult i32 %310, 8
  %312 = and i1 %309, %311
  br i1 %312, label %313, label %314

313:                                              ; preds = %305
  store i32 %302, i32* %93, align 8
  br label %314

314:                                              ; preds = %313, %305, %291
  %315 = add i16 %252, -1
  %316 = icmp eq i16 %315, 0
  br i1 %316, label %320, label %317

317:                                              ; preds = %314
  %318 = getelementptr inbounds i8, i8* %250, i64 12
  %319 = icmp ult i8* %318, %247
  br i1 %319, label %249, label %320

320:                                              ; preds = %314, %317, %196, %205, %219, %227, %244
  %321 = call i32 @_ZN3jxl12WriteHeadersEPNS_13CodecMetadataEPNS_9BitWriterEPNS_6AuxOutE(%"struct.jxl::CodecMetadata"* nonnull %23, %"struct.jxl::BitWriter"* nonnull %7, %"struct.jxl::AuxOut"* %4)
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %323, label %524

323:                                              ; preds = %320
  %324 = getelementptr inbounds i8, i8* %22, i64 100
  %325 = load i8, i8* %324, align 4, !range !2
  %326 = icmp eq i8 %325, 0
  br i1 %326, label %331, label %327

327:                                              ; preds = %323
  %328 = bitcast i8* %48 to %"class.jxl::PaddedBytes"*
  %329 = call i32 @_ZN3jxl8WriteICCERKNS_11PaddedBytesEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::PaddedBytes"* dereferenceable(24) %328, %"struct.jxl::BitWriter"* nonnull %7, i64 0, %"struct.jxl::AuxOut"* %4) #11
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %524

331:                                              ; preds = %323, %327
  %332 = getelementptr inbounds i8, i8* %22, i64 204
  %333 = load i8, i8* %332, align 4, !range !2
  %334 = icmp eq i8 %333, 0
  br i1 %334, label %339, label %335

335:                                              ; preds = %331
  %336 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 7
  %337 = call i32 @_ZN3jxl13EncodePreviewERKNS_14CompressParamsERKNS_11ImageBundleEPKNS_13CodecMetadataEPNS_10ThreadPoolEPNS_9BitWriterE(%"struct.jxl::CompressParams"* dereferenceable(360) %0, %"class.jxl::ImageBundle"* dereferenceable(368) %336, %"struct.jxl::CodecMetadata"* nonnull %23, %"class.jxl::ThreadPool"* %5, %"struct.jxl::BitWriter"* nonnull %7)
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %339, label %524

339:                                              ; preds = %331, %335
  %340 = load i64, i64* %19, align 8
  %341 = add i64 %340, 7
  %342 = and i64 %341, -8
  %343 = sub i64 %342, %340
  %344 = icmp eq i64 %343, 0
  br i1 %344, label %352, label %345

345:                                              ; preds = %339
  call void @_ZN3jxl9BitWriter5WriteEmm(%"struct.jxl::BitWriter"* nonnull %7, i64 %343, i64 0) #11
  %346 = load i64, i64* %19, align 8
  %347 = and i64 %346, 7
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %352, label %349

349:                                              ; preds = %345
  %350 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.18, i64 0, i64 0), i32 133, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0)) #11
  %351 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

352:                                              ; preds = %339, %345
  %353 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 23
  %354 = load i8, i8* %353, align 4, !range !2
  %355 = icmp eq i8 %354, 0
  br i1 %355, label %356, label %360

356:                                              ; preds = %352
  %357 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 24
  %358 = load i8, i8* %357, align 1, !range !2
  %359 = icmp eq i8 %358, 0
  br i1 %359, label %402, label %360

360:                                              ; preds = %356, %352
  %361 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 30
  %362 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %361, align 8
  %363 = icmp eq %"class.jxl::Plane"* %362, null
  br i1 %363, label %366, label %364

364:                                              ; preds = %360
  %365 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 5, i32 1
  store %"class.jxl::Plane"* %362, %"class.jxl::Plane"** %365, align 8
  br label %366

366:                                              ; preds = %360, %364
  %367 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 5
  %368 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 29
  %369 = bitcast float* %368 to i32*
  %370 = load i32, i32* %369, align 8
  %371 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 5, i32 2
  %372 = bitcast float* %371 to i32*
  store i32 %370, i32* %372, align 8
  %373 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 24
  %374 = load i8, i8* %373, align 1, !range !2
  %375 = icmp eq i8 %374, 0
  br i1 %375, label %379, label %376

376:                                              ; preds = %366
  call void @_ZN3jxl15ProgressiveModeC2ILm3EEERAT__KNS_14PassDefinitionE(%"struct.jxl::ProgressiveMode"* nonnull %8, [3 x %"struct.jxl::PassDefinition"]* nonnull dereferenceable(96) @_ZN3jxl12_GLOBAL__N_138progressive_passes_dc_quant_ac_full_acE)
  %377 = bitcast %"struct.jxl::ProgressiveMode"* %8 to i8*
  %378 = bitcast %"class.jxl::ProgressiveSplitter"* %367 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %378, i8* nonnull align 8 %377, i64 360, i1 false)
  br label %402

379:                                              ; preds = %366
  %380 = getelementptr inbounds %"struct.jxl::CompressParams", %"struct.jxl::CompressParams"* %0, i64 0, i32 28
  %381 = load i64, i64* %380, align 8
  switch i64 %381, label %524 [
    i64 1, label %382
    i64 2, label %387
    i64 3, label %390
    i64 4, label %393
  ]

382:                                              ; preds = %379
  %383 = bitcast [11 x %"struct.jxl::PassDefinition"]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %383, i8* align 8 bitcast (<{ %"struct.jxl::PassDefinition", [10 x %"struct.jxl::PassDefinition"] }>* @constinit.34 to i8*), i64 352, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %383, i8* align 16 bitcast ([1 x %"struct.jxl::PassDefinition"]* @_ZN3jxl12_GLOBAL__N_125progressive_passes_dc_vlfE to i8*), i64 32, i1 false)
  %384 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 5, i32 0, i32 0
  store i64 1, i64* %384, align 8
  %385 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 5, i32 0, i32 1
  %386 = bitcast [11 x %"struct.jxl::PassDefinition"]* %385 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %386, i8* nonnull align 8 %383, i64 352, i1 false)
  br label %402

387:                                              ; preds = %379
  call void @_ZN3jxl15ProgressiveModeC2ILm2EEERAT__KNS_14PassDefinitionE(%"struct.jxl::ProgressiveMode"* nonnull %10, [2 x %"struct.jxl::PassDefinition"]* nonnull dereferenceable(64) @_ZN3jxl12_GLOBAL__N_124progressive_passes_dc_lfE)
  %388 = bitcast %"struct.jxl::ProgressiveMode"* %10 to i8*
  %389 = bitcast %"class.jxl::ProgressiveSplitter"* %367 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %389, i8* nonnull align 8 %388, i64 360, i1 false)
  br label %402

390:                                              ; preds = %379
  call void @_ZN3jxl15ProgressiveModeC2ILm3EEERAT__KNS_14PassDefinitionE(%"struct.jxl::ProgressiveMode"* nonnull %11, [3 x %"struct.jxl::PassDefinition"]* nonnull dereferenceable(96) @_ZN3jxl12_GLOBAL__N_135progressive_passes_dc_lf_salient_acE)
  %391 = bitcast %"struct.jxl::ProgressiveMode"* %11 to i8*
  %392 = bitcast %"class.jxl::ProgressiveSplitter"* %367 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %392, i8* nonnull align 8 %391, i64 360, i1 false)
  br label %402

393:                                              ; preds = %379
  %394 = load float, float* %368, align 8
  %395 = fcmp oeq float %394, 0.000000e+00
  br i1 %395, label %396, label %399

396:                                              ; preds = %393
  call void @_ZN3jxl15ProgressiveModeC2ILm3EEERAT__KNS_14PassDefinitionE(%"struct.jxl::ProgressiveMode"* nonnull %12, [3 x %"struct.jxl::PassDefinition"]* nonnull dereferenceable(96) @_ZN3jxl12_GLOBAL__N_135progressive_passes_dc_lf_salient_acE)
  %397 = bitcast %"struct.jxl::ProgressiveMode"* %12 to i8*
  %398 = bitcast %"class.jxl::ProgressiveSplitter"* %367 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %398, i8* nonnull align 8 %397, i64 360, i1 false)
  br label %402

399:                                              ; preds = %393
  call void @_ZN3jxl15ProgressiveModeC2ILm4EEERAT__KNS_14PassDefinitionE(%"struct.jxl::ProgressiveMode"* nonnull %13, [4 x %"struct.jxl::PassDefinition"]* nonnull dereferenceable(128) @_ZN3jxl12_GLOBAL__N_144progressive_passes_dc_lf_salient_ac_other_acE)
  %400 = bitcast %"struct.jxl::ProgressiveMode"* %13 to i8*
  %401 = bitcast %"class.jxl::ProgressiveSplitter"* %367 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %401, i8* nonnull align 8 %400, i64 360, i1 false)
  br label %402

402:                                              ; preds = %356, %376, %396, %399, %390, %387, %382
  %403 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 8
  %404 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %1, i64 0, i32 8, i32 0, i32 1
  %405 = bitcast %"class.jxl::ImageBundle"** %404 to i64*
  %406 = load i64, i64* %405, align 8
  %407 = bitcast %"class.std::__1::vector.107"* %403 to i64*
  %408 = load i64, i64* %407, align 8
  %409 = sub i64 %406, %408
  %410 = icmp eq i64 %409, 0
  br i1 %410, label %426, label %411

411:                                              ; preds = %402
  %412 = sdiv exact i64 %409, 368
  %413 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %14, i64 0, i32 0
  %414 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %14, i64 0, i32 1
  %415 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %14, i64 0, i32 2
  %416 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %14, i64 0, i32 3
  %417 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %14, i64 0, i32 4
  %418 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %14, i64 0, i32 5
  %419 = getelementptr inbounds %"struct.jxl::FrameInfo", %"struct.jxl::FrameInfo"* %14, i64 0, i32 6
  br label %440

420:                                              ; preds = %453
  %421 = load i64, i64* %405, align 8
  %422 = load i64, i64* %407, align 8
  %423 = sub i64 %421, %422
  %424 = sdiv exact i64 %423, 368
  %425 = icmp ult i64 %456, %424
  br i1 %425, label %440, label %426

426:                                              ; preds = %420, %402
  %427 = bitcast { i32, i32, i32, i32, i64 }* %15 to i8*
  %428 = bitcast { i32, i32, i32, i32, i64 }* %16 to i8*
  %429 = bitcast %"class.jxl::ImageBundle"* %17 to i8*
  %430 = bitcast %"class.jxl::ImageBundle"* %17 to i64*
  %431 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %17, i64 0, i32 1
  %432 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %17, i64 0, i32 3
  %433 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %17, i64 0, i32 4, i32 0
  %434 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %17, i64 0, i32 8
  %435 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %17, i64 0, i32 11
  %436 = bitcast i32* %433 to i8*
  %437 = bitcast %"class.std::__1::basic_string"* %434 to i8*
  %438 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %17, i64 0, i32 12
  %439 = bitcast %"class.std::__1::vector.85"* %438 to i8*
  br label %491

440:                                              ; preds = %411, %420
  %441 = phi i64 [ %408, %411 ], [ %422, %420 ]
  %442 = phi i64 [ %412, %411 ], [ %424, %420 ]
  %443 = phi i64 [ 0, %411 ], [ %456, %420 ]
  %444 = inttoptr i64 %441 to %"class.jxl::ImageBundle"*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %413) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %413, i8 -86, i64 24, i1 false)
  store i8 0, i8* %413, align 8
  store i8 1, i8* %414, align 1
  store i32 0, i32* %415, align 4
  store i64 0, i64* %416, align 8
  store i8 0, i8* %418, align 1
  store i64 0, i64* %419, align 8
  %445 = add nsw i64 %442, -1
  %446 = icmp eq i64 %443, %445
  %447 = zext i1 %446 to i8
  store i8 %447, i8* %417, align 8
  %448 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %444, i64 %443
  %449 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %444, i64 %443, i32 6
  %450 = load i8, i8* %449, align 4, !range !2
  %451 = icmp eq i8 %450, 0
  br i1 %451, label %453, label %452

452:                                              ; preds = %440
  store i64 1, i64* %419, align 8
  br label %453

453:                                              ; preds = %440, %452
  %454 = call i32 @_ZN3jxl11EncodeFrameERKNS_14CompressParamsERKNS_9FrameInfoEPKNS_13CodecMetadataERKNS_11ImageBundleEPNS_18PassesEncoderStateEPNS_10ThreadPoolEPNS_9BitWriterEPNS_6AuxOutE(%"struct.jxl::CompressParams"* dereferenceable(360) %0, %"struct.jxl::FrameInfo"* nonnull dereferenceable(32) %14, %"struct.jxl::CodecMetadata"* nonnull %23, %"class.jxl::ImageBundle"* dereferenceable(368) %448, %"struct.jxl::PassesEncoderState"* %2, %"class.jxl::ThreadPool"* %5, %"struct.jxl::BitWriter"* nonnull %7, %"struct.jxl::AuxOut"* %4) #11
  %455 = icmp eq i32 %454, 0
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %413) #11
  %456 = add nuw i64 %443, 1
  br i1 %455, label %420, label %524

457:                                              ; preds = %519
  %458 = load i64, i64* %19, align 8
  %459 = and i64 %458, 7
  %460 = icmp eq i64 %459, 0
  br i1 %460, label %464, label %461

461:                                              ; preds = %457
  %462 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.18, i64 0, i64 0), i32 67, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0)) #11
  %463 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

464:                                              ; preds = %457
  %465 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %7, i64 0, i32 1
  %466 = lshr i64 %458, 3
  %467 = load i64, i64* %20, align 8
  %468 = icmp ult i64 %467, %466
  br i1 %468, label %469, label %471

469:                                              ; preds = %464
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %465, i64 %466) #11
  %470 = load i64, i64* %20, align 8
  br label %471

471:                                              ; preds = %464, %469
  %472 = phi i64 [ %467, %464 ], [ %470, %469 ]
  %473 = load i8*, i8** %21, align 8
  %474 = icmp eq i8* %473, null
  %475 = select i1 %474, i64 0, i64 %466
  %476 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %465, i64 0, i32 0
  store i64 %475, i64* %476, align 8
  %477 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %3, i64 0, i32 0
  store i64 %475, i64* %477, align 8
  %478 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %3, i64 0, i32 1
  store i64 %472, i64* %478, align 8
  %479 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %3, i64 0, i32 2
  %480 = getelementptr inbounds %"struct.jxl::BitWriter", %"struct.jxl::BitWriter"* %7, i64 0, i32 1, i32 2, i32 0, i32 0, i32 0
  %481 = ptrtoint i8* %473 to i64
  store i8* null, i8** %480, align 8
  %482 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %479, i64 0, i32 0, i32 0, i32 0
  %483 = load i8*, i8** %482, align 8
  %484 = bitcast %"class.std::__1::unique_ptr"* %479 to i64*
  store i64 %481, i64* %484, align 8
  %485 = icmp eq i8* %483, null
  br i1 %485, label %487, label %486

486:                                              ; preds = %471
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %483) #11
  br label %487

487:                                              ; preds = %486, %471
  %488 = icmp eq %"class.jxl::PaddedBytes"* %465, %3
  br i1 %488, label %524, label %489

489:                                              ; preds = %487
  %490 = bitcast %"class.jxl::PaddedBytes"* %465 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %490, i8 0, i64 16, i1 false) #11
  br label %524

491:                                              ; preds = %519, %426
  %492 = phi i64 [ 0, %426 ], [ %522, %519 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %427)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %428)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %427, i8 0, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %428, i8 0, i64 24, i1 false)
  %493 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 16, i64 %492
  %494 = bitcast %"class.jxl::Image3"* %493 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %494, i8 0, i64 24, i1 false)
  %495 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 16, i64 %492, i32 0, i64 0, i32 0, i32 5
  %496 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %495, i64 0, i32 0, i32 0, i32 0
  %497 = load i8*, i8** %496, align 8
  %498 = bitcast %"class.std::__1::unique_ptr"* %495 to i64*
  store i64 0, i64* %498, align 8
  %499 = icmp eq i8* %497, null
  br i1 %499, label %501, label %500

500:                                              ; preds = %491
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %497) #11
  br label %501

501:                                              ; preds = %500, %491
  %502 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 16, i64 %492, i32 0, i64 1
  %503 = bitcast %"class.jxl::Plane"* %502 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %503, i8* nonnull align 8 %427, i64 24, i1 false)
  %504 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 16, i64 %492, i32 0, i64 1, i32 0, i32 5
  %505 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %504, i64 0, i32 0, i32 0, i32 0
  %506 = load i8*, i8** %505, align 8
  %507 = bitcast %"class.std::__1::unique_ptr"* %504 to i64*
  store i64 0, i64* %507, align 8
  %508 = icmp eq i8* %506, null
  br i1 %508, label %510, label %509

509:                                              ; preds = %501
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %506) #11
  br label %510

510:                                              ; preds = %509, %501
  %511 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 16, i64 %492, i32 0, i64 2
  %512 = bitcast %"class.jxl::Plane"* %511 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %512, i8* nonnull align 8 %428, i64 24, i1 false)
  %513 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 16, i64 %492, i32 0, i64 2, i32 0, i32 5
  %514 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %513, i64 0, i32 0, i32 0, i32 0
  %515 = load i8*, i8** %514, align 8
  %516 = bitcast %"class.std::__1::unique_ptr"* %513 to i64*
  store i64 0, i64* %516, align 8
  %517 = icmp eq i8* %515, null
  br i1 %517, label %519, label %518

518:                                              ; preds = %510
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %515) #11
  br label %519

519:                                              ; preds = %518, %510
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %427)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %428)
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %429) #11
  store i64 0, i64* %430, align 8
  store i32 1, i32* %431, align 8
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %432) #11
  call void @llvm.memset.p0i8.i64(i8* align 8 %436, i8 0, i64 14, i1 false) #11
  call void @llvm.memset.p0i8.i64(i8* align 8 %437, i8 0, i64 128, i1 false) #11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %435) #11
  call void @llvm.memset.p0i8.i64(i8* align 8 %439, i8 0, i64 32, i1 false) #11
  %520 = getelementptr inbounds %"struct.jxl::PassesEncoderState", %"struct.jxl::PassesEncoderState"* %2, i64 0, i32 0, i32 17, i64 %492, i32 0
  %521 = call dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"* %520, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %17) #11
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %17) #11
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %429) #11
  %522 = add nuw nsw i64 %492, 1
  %523 = icmp eq i64 %522, 4
  br i1 %523, label %457, label %491

524:                                              ; preds = %453, %155, %320, %327, %335, %379, %487, %489
  %525 = phi i32 [ %158, %155 ], [ %321, %320 ], [ %329, %327 ], [ %337, %335 ], [ 1, %379 ], [ 0, %487 ], [ 0, %489 ], [ %454, %453 ]
  %526 = bitcast i8* %22 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ImageMetadataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %526, align 8
  %527 = getelementptr inbounds i8, i8* %22, i64 280
  %528 = bitcast i8* %527 to %"struct.jxl::ExtraChannelInfo"**
  %529 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %528, align 8
  %530 = icmp eq %"struct.jxl::ExtraChannelInfo"* %529, null
  br i1 %530, label %549, label %531

531:                                              ; preds = %524
  %532 = bitcast %"struct.jxl::ExtraChannelInfo"* %529 to i8*
  %533 = getelementptr inbounds i8, i8* %22, i64 288
  %534 = bitcast i8* %533 to %"struct.jxl::ExtraChannelInfo"**
  %535 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %534, align 8
  %536 = icmp eq %"struct.jxl::ExtraChannelInfo"* %535, %529
  br i1 %536, label %547, label %537

537:                                              ; preds = %531, %537
  %538 = phi %"struct.jxl::ExtraChannelInfo"* [ %539, %537 ], [ %535, %531 ]
  %539 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %538, i64 -1
  %540 = bitcast %"struct.jxl::ExtraChannelInfo"* %539 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %541 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %540, align 8
  %542 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %541, align 8
  call void %542(%"struct.jxl::ExtraChannelInfo"* %539) #11
  %543 = icmp eq %"struct.jxl::ExtraChannelInfo"* %539, %529
  br i1 %543, label %544, label %537

544:                                              ; preds = %537
  %545 = bitcast i8* %527 to i8**
  %546 = load i8*, i8** %545, align 8
  br label %547

547:                                              ; preds = %544, %531
  %548 = phi i8* [ %546, %544 ], [ %532, %531 ]
  store %"struct.jxl::ExtraChannelInfo"* %529, %"struct.jxl::ExtraChannelInfo"** %534, align 8
  call void @_ZdlPv(i8* %548) #12
  br label %549

549:                                              ; preds = %547, %524
  %550 = getelementptr inbounds i8, i8* %22, i64 48
  %551 = bitcast i8* %550 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %551, align 8
  %552 = load i8*, i8** %59, align 8
  store i8* null, i8** %59, align 8
  %553 = icmp eq i8* %552, null
  br i1 %553, label %555, label %554

554:                                              ; preds = %549
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %552) #11
  br label %555

555:                                              ; preds = %549, %554
  call void @_ZdlPv(i8* nonnull %22) #12
  %556 = load i8*, i8** %21, align 8
  store i8* null, i8** %21, align 8
  %557 = icmp eq i8* %556, null
  br i1 %557, label %559, label %558

558:                                              ; preds = %555
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %556) #11
  br label %559

559:                                              ; preds = %555, %558
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %18) #11
  ret i32 %525
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl10CodecInOut13CheckMetadataEv(%"class.jxl::CodecInOut"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0
  %3 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 3, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.20, i64 0, i64 0), i32 162, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.21, i64 0, i64 0)) #11
  %8 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 6, i32 0, i32 7, i32 8, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %9
  %14 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.20, i64 0, i64 0), i32 163, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.22, i64 0, i64 0)) #11
  %15 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

16:                                               ; preds = %9
  %17 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7
  %18 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %17, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %18, align 8
  %20 = icmp eq %"struct.jxl::jpeg::JPEGData"* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %19, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = sext i32 %23 to i64
  br label %40

25:                                               ; preds = %16
  %26 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 10, i32 0, i64 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = zext i32 %27 to i64
  %29 = icmp eq i32 %27, 0
  br i1 %29, label %30, label %40

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 12, i32 0, i32 0
  %32 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %31, align 8
  %33 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 12, i32 0, i32 1
  %34 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %33, align 8
  %35 = icmp eq %"class.jxl::Plane"* %32, %34
  br i1 %35, label %44, label %36

36:                                               ; preds = %30
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %32, i64 0, i32 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = zext i32 %38 to i64
  br label %40

40:                                               ; preds = %21, %25, %36
  %41 = phi i64 [ %24, %21 ], [ %39, %36 ], [ %28, %25 ]
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %44, label %43

43:                                               ; preds = %40
  tail call void @_ZNK3jxl11ImageBundle14VerifyMetadataEv(%"class.jxl::ImageBundle"* %17) #11
  br label %44

44:                                               ; preds = %30, %40, %43
  %45 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 7, i32 9
  %46 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %45, align 8
  %47 = icmp eq %"struct.jxl::ImageMetadata"* %46, %2
  br i1 %47, label %51, label %48

48:                                               ; preds = %44
  %49 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.20, i64 0, i64 0), i32 166, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.23, i64 0, i64 0)) #11
  %50 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

51:                                               ; preds = %44
  %52 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 0
  %53 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %52, align 8
  %54 = getelementptr inbounds %"class.jxl::CodecInOut", %"class.jxl::CodecInOut"* %0, i64 0, i32 8, i32 0, i32 1
  %55 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %54, align 8
  %56 = icmp eq %"class.jxl::ImageBundle"* %53, %55
  br i1 %56, label %59, label %60

57:                                               ; preds = %60
  %58 = icmp eq %"class.jxl::ImageBundle"* %65, %55
  br i1 %58, label %59, label %60

59:                                               ; preds = %57, %51
  ret void

60:                                               ; preds = %51, %57
  %61 = phi %"class.jxl::ImageBundle"* [ %65, %57 ], [ %53, %51 ]
  tail call void @_ZNK3jxl11ImageBundle14VerifyMetadataEv(%"class.jxl::ImageBundle"* %61) #11
  %62 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %61, i64 0, i32 9
  %63 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %62, align 8
  %64 = icmp eq %"struct.jxl::ImageMetadata"* %63, %2
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %61, i64 1
  br i1 %64, label %57, label %66

66:                                               ; preds = %60
  %67 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.20, i64 0, i64 0), i32 170, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.24, i64 0, i64 0)) #11
  %68 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable
}

declare i32 @_ZN3jxl8WriteICCERKNS_11PaddedBytesEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::PaddedBytes"* dereferenceable(24), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15ProgressiveModeC2ILm3EEERAT__KNS_14PassDefinitionE(%"struct.jxl::ProgressiveMode"*, [3 x %"struct.jxl::PassDefinition"]* dereferenceable(96)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 0
  store i64 1, i64* %3, align 8
  %4 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1
  %5 = bitcast [11 x %"struct.jxl::PassDefinition"]* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 bitcast (<{ %"struct.jxl::PassDefinition", [10 x %"struct.jxl::PassDefinition"] }>* @constinit.34 to i8*), i64 352, i1 false)
  store i64 3, i64* %3, align 8
  %6 = getelementptr inbounds [3 x %"struct.jxl::PassDefinition"], [3 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %7, 1
  br i1 %8, label %15, label %9

9:                                                ; preds = %2, %75, %66, %40, %31
  %10 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.27, i64 0, i64 0), i32 85, i8* getelementptr inbounds ([265 x i8], [265 x i8]* @.str.28, i64 0, i64 0)) #11
  %11 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

12:                                               ; preds = %79, %44
  %13 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.27, i64 0, i64 0), i32 89, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.29, i64 0, i64 0)) #11
  %14 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

15:                                               ; preds = %2
  %16 = getelementptr inbounds [3 x %"struct.jxl::PassDefinition"], [3 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 0
  %19 = bitcast %"struct.jxl::PassDefinition"* %18 to i8*
  %20 = bitcast [3 x %"struct.jxl::PassDefinition"]* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 32, i1 false)
  %21 = getelementptr inbounds %"struct.jxl::PassDefinition", %"struct.jxl::PassDefinition"* %18, i64 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 0, i32 2
  %26 = load i8, i8* %25, align 8
  %27 = getelementptr inbounds [3 x %"struct.jxl::PassDefinition"], [3 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 1
  %28 = getelementptr inbounds %"struct.jxl::PassDefinition", %"struct.jxl::PassDefinition"* %27, i64 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = icmp ugt i64 %29, %22
  br i1 %30, label %44, label %31

31:                                               ; preds = %15
  %32 = icmp eq i64 %29, %22
  br i1 %32, label %33, label %9

33:                                               ; preds = %31
  %34 = getelementptr inbounds [3 x %"struct.jxl::PassDefinition"], [3 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 1, i32 2
  %35 = load i8, i8* %34, align 8, !range !2
  %36 = icmp ne i8 %35, 0
  %37 = and i8 %26, 1
  %38 = icmp eq i8 %37, 0
  %39 = or i1 %38, %36
  br i1 %39, label %40, label %44

40:                                               ; preds = %33
  %41 = getelementptr inbounds [3 x %"struct.jxl::PassDefinition"], [3 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 1, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = icmp ult i64 %42, %24
  br i1 %43, label %44, label %9

44:                                               ; preds = %40, %33, %15
  %45 = getelementptr inbounds [3 x %"struct.jxl::PassDefinition"], [3 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 1, i32 3
  %46 = load i64, i64* %45, align 8
  %47 = icmp ne i64 %46, -1
  %48 = icmp ugt i64 %46, %17
  %49 = and i1 %47, %48
  br i1 %49, label %12, label %50

50:                                               ; preds = %44
  %51 = icmp eq i64 %46, -1
  %52 = select i1 %51, i64 %17, i64 %46
  %53 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 1
  %54 = bitcast %"struct.jxl::PassDefinition"* %53 to i8*
  %55 = bitcast %"struct.jxl::PassDefinition"* %27 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 32, i1 false)
  %56 = getelementptr inbounds %"struct.jxl::PassDefinition", %"struct.jxl::PassDefinition"* %53, i64 0, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 1, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 1, i32 2
  %61 = load i8, i8* %60, align 8
  %62 = getelementptr inbounds [3 x %"struct.jxl::PassDefinition"], [3 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 2
  %63 = getelementptr inbounds %"struct.jxl::PassDefinition", %"struct.jxl::PassDefinition"* %62, i64 0, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = icmp ugt i64 %64, %57
  br i1 %65, label %79, label %66

66:                                               ; preds = %50
  %67 = icmp eq i64 %64, %57
  br i1 %67, label %68, label %9

68:                                               ; preds = %66
  %69 = getelementptr inbounds [3 x %"struct.jxl::PassDefinition"], [3 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 2, i32 2
  %70 = load i8, i8* %69, align 8, !range !2
  %71 = icmp ne i8 %70, 0
  %72 = and i8 %61, 1
  %73 = icmp eq i8 %72, 0
  %74 = or i1 %73, %71
  br i1 %74, label %75, label %79

75:                                               ; preds = %68
  %76 = getelementptr inbounds [3 x %"struct.jxl::PassDefinition"], [3 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 2, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = icmp ult i64 %77, %59
  br i1 %78, label %79, label %9

79:                                               ; preds = %75, %68, %50
  %80 = getelementptr inbounds [3 x %"struct.jxl::PassDefinition"], [3 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 2, i32 3
  %81 = load i64, i64* %80, align 8
  %82 = icmp ne i64 %81, -1
  %83 = icmp ugt i64 %81, %52
  %84 = and i1 %82, %83
  br i1 %84, label %12, label %85

85:                                               ; preds = %79
  %86 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 2
  %87 = bitcast %"struct.jxl::PassDefinition"* %86 to i8*
  %88 = bitcast %"struct.jxl::PassDefinition"* %62 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15ProgressiveModeC2ILm2EEERAT__KNS_14PassDefinitionE(%"struct.jxl::ProgressiveMode"*, [2 x %"struct.jxl::PassDefinition"]* dereferenceable(64)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 0
  store i64 1, i64* %3, align 8
  %4 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1
  %5 = bitcast [11 x %"struct.jxl::PassDefinition"]* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 bitcast (<{ %"struct.jxl::PassDefinition", [10 x %"struct.jxl::PassDefinition"] }>* @constinit.34 to i8*), i64 352, i1 false)
  store i64 2, i64* %3, align 8
  %6 = getelementptr inbounds [2 x %"struct.jxl::PassDefinition"], [2 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %7, 1
  br i1 %8, label %15, label %9

9:                                                ; preds = %2, %40, %31
  %10 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.27, i64 0, i64 0), i32 85, i8* getelementptr inbounds ([265 x i8], [265 x i8]* @.str.28, i64 0, i64 0)) #11
  %11 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

12:                                               ; preds = %44
  %13 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.27, i64 0, i64 0), i32 89, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.29, i64 0, i64 0)) #11
  %14 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

15:                                               ; preds = %2
  %16 = getelementptr inbounds [2 x %"struct.jxl::PassDefinition"], [2 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 0
  %19 = bitcast %"struct.jxl::PassDefinition"* %18 to i8*
  %20 = bitcast [2 x %"struct.jxl::PassDefinition"]* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 32, i1 false)
  %21 = getelementptr inbounds %"struct.jxl::PassDefinition", %"struct.jxl::PassDefinition"* %18, i64 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 0, i32 2
  %26 = load i8, i8* %25, align 8
  %27 = getelementptr inbounds [2 x %"struct.jxl::PassDefinition"], [2 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 1
  %28 = getelementptr inbounds %"struct.jxl::PassDefinition", %"struct.jxl::PassDefinition"* %27, i64 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = icmp ugt i64 %29, %22
  br i1 %30, label %44, label %31

31:                                               ; preds = %15
  %32 = icmp eq i64 %29, %22
  br i1 %32, label %33, label %9

33:                                               ; preds = %31
  %34 = getelementptr inbounds [2 x %"struct.jxl::PassDefinition"], [2 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 1, i32 2
  %35 = load i8, i8* %34, align 8, !range !2
  %36 = icmp ne i8 %35, 0
  %37 = and i8 %26, 1
  %38 = icmp eq i8 %37, 0
  %39 = or i1 %38, %36
  br i1 %39, label %40, label %44

40:                                               ; preds = %33
  %41 = getelementptr inbounds [2 x %"struct.jxl::PassDefinition"], [2 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 1, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = icmp ult i64 %42, %24
  br i1 %43, label %44, label %9

44:                                               ; preds = %40, %33, %15
  %45 = getelementptr inbounds [2 x %"struct.jxl::PassDefinition"], [2 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 1, i32 3
  %46 = load i64, i64* %45, align 8
  %47 = icmp ne i64 %46, -1
  %48 = icmp ugt i64 %46, %17
  %49 = and i1 %47, %48
  br i1 %49, label %12, label %50

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 1
  %52 = bitcast %"struct.jxl::PassDefinition"* %51 to i8*
  %53 = bitcast %"struct.jxl::PassDefinition"* %27 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15ProgressiveModeC2ILm4EEERAT__KNS_14PassDefinitionE(%"struct.jxl::ProgressiveMode"*, [4 x %"struct.jxl::PassDefinition"]* dereferenceable(128)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 0
  store i64 1, i64* %3, align 8
  %4 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1
  %5 = bitcast [11 x %"struct.jxl::PassDefinition"]* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 bitcast (<{ %"struct.jxl::PassDefinition", [10 x %"struct.jxl::PassDefinition"] }>* @constinit.34 to i8*), i64 352, i1 false)
  store i64 4, i64* %3, align 8
  %6 = getelementptr inbounds [4 x %"struct.jxl::PassDefinition"], [4 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %7, 1
  br i1 %8, label %15, label %9

9:                                                ; preds = %2, %110, %101, %75, %66, %40, %31
  %10 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.27, i64 0, i64 0), i32 85, i8* getelementptr inbounds ([265 x i8], [265 x i8]* @.str.28, i64 0, i64 0)) #11
  %11 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

12:                                               ; preds = %114, %79, %44
  %13 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.27, i64 0, i64 0), i32 89, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.29, i64 0, i64 0)) #11
  %14 = tail call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

15:                                               ; preds = %2
  %16 = getelementptr inbounds [4 x %"struct.jxl::PassDefinition"], [4 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 0, i32 3
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 0
  %19 = bitcast %"struct.jxl::PassDefinition"* %18 to i8*
  %20 = bitcast [4 x %"struct.jxl::PassDefinition"]* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 32, i1 false)
  %21 = getelementptr inbounds %"struct.jxl::PassDefinition", %"struct.jxl::PassDefinition"* %18, i64 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 0, i32 2
  %26 = load i8, i8* %25, align 8
  %27 = getelementptr inbounds [4 x %"struct.jxl::PassDefinition"], [4 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 1
  %28 = getelementptr inbounds %"struct.jxl::PassDefinition", %"struct.jxl::PassDefinition"* %27, i64 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = icmp ugt i64 %29, %22
  br i1 %30, label %44, label %31

31:                                               ; preds = %15
  %32 = icmp eq i64 %29, %22
  br i1 %32, label %33, label %9

33:                                               ; preds = %31
  %34 = getelementptr inbounds [4 x %"struct.jxl::PassDefinition"], [4 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 1, i32 2
  %35 = load i8, i8* %34, align 8, !range !2
  %36 = icmp ne i8 %35, 0
  %37 = and i8 %26, 1
  %38 = icmp eq i8 %37, 0
  %39 = or i1 %38, %36
  br i1 %39, label %40, label %44

40:                                               ; preds = %33
  %41 = getelementptr inbounds [4 x %"struct.jxl::PassDefinition"], [4 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 1, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = icmp ult i64 %42, %24
  br i1 %43, label %44, label %9

44:                                               ; preds = %40, %33, %15
  %45 = getelementptr inbounds [4 x %"struct.jxl::PassDefinition"], [4 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 1, i32 3
  %46 = load i64, i64* %45, align 8
  %47 = icmp ne i64 %46, -1
  %48 = icmp ugt i64 %46, %17
  %49 = and i1 %47, %48
  br i1 %49, label %12, label %50

50:                                               ; preds = %44
  %51 = icmp eq i64 %46, -1
  %52 = select i1 %51, i64 %17, i64 %46
  %53 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 1
  %54 = bitcast %"struct.jxl::PassDefinition"* %53 to i8*
  %55 = bitcast %"struct.jxl::PassDefinition"* %27 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 32, i1 false)
  %56 = getelementptr inbounds %"struct.jxl::PassDefinition", %"struct.jxl::PassDefinition"* %53, i64 0, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 1, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 1, i32 2
  %61 = load i8, i8* %60, align 8
  %62 = getelementptr inbounds [4 x %"struct.jxl::PassDefinition"], [4 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 2
  %63 = getelementptr inbounds %"struct.jxl::PassDefinition", %"struct.jxl::PassDefinition"* %62, i64 0, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = icmp ugt i64 %64, %57
  br i1 %65, label %79, label %66

66:                                               ; preds = %50
  %67 = icmp eq i64 %64, %57
  br i1 %67, label %68, label %9

68:                                               ; preds = %66
  %69 = getelementptr inbounds [4 x %"struct.jxl::PassDefinition"], [4 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 2, i32 2
  %70 = load i8, i8* %69, align 8, !range !2
  %71 = icmp ne i8 %70, 0
  %72 = and i8 %61, 1
  %73 = icmp eq i8 %72, 0
  %74 = or i1 %73, %71
  br i1 %74, label %75, label %79

75:                                               ; preds = %68
  %76 = getelementptr inbounds [4 x %"struct.jxl::PassDefinition"], [4 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 2, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = icmp ult i64 %77, %59
  br i1 %78, label %79, label %9

79:                                               ; preds = %75, %68, %50
  %80 = getelementptr inbounds [4 x %"struct.jxl::PassDefinition"], [4 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 2, i32 3
  %81 = load i64, i64* %80, align 8
  %82 = icmp ne i64 %81, -1
  %83 = icmp ugt i64 %81, %52
  %84 = and i1 %82, %83
  br i1 %84, label %12, label %85

85:                                               ; preds = %79
  %86 = icmp eq i64 %81, -1
  %87 = select i1 %86, i64 %52, i64 %81
  %88 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 2
  %89 = bitcast %"struct.jxl::PassDefinition"* %88 to i8*
  %90 = bitcast %"struct.jxl::PassDefinition"* %62 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 32, i1 false)
  %91 = getelementptr inbounds %"struct.jxl::PassDefinition", %"struct.jxl::PassDefinition"* %88, i64 0, i32 0
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 2, i32 1
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 2, i32 2
  %96 = load i8, i8* %95, align 8
  %97 = getelementptr inbounds [4 x %"struct.jxl::PassDefinition"], [4 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 3
  %98 = getelementptr inbounds %"struct.jxl::PassDefinition", %"struct.jxl::PassDefinition"* %97, i64 0, i32 0
  %99 = load i64, i64* %98, align 8
  %100 = icmp ugt i64 %99, %92
  br i1 %100, label %114, label %101

101:                                              ; preds = %85
  %102 = icmp eq i64 %99, %92
  br i1 %102, label %103, label %9

103:                                              ; preds = %101
  %104 = getelementptr inbounds [4 x %"struct.jxl::PassDefinition"], [4 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 3, i32 2
  %105 = load i8, i8* %104, align 8, !range !2
  %106 = icmp ne i8 %105, 0
  %107 = and i8 %96, 1
  %108 = icmp eq i8 %107, 0
  %109 = or i1 %108, %106
  br i1 %109, label %110, label %114

110:                                              ; preds = %103
  %111 = getelementptr inbounds [4 x %"struct.jxl::PassDefinition"], [4 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 3, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = icmp ult i64 %112, %94
  br i1 %113, label %114, label %9

114:                                              ; preds = %110, %103, %85
  %115 = getelementptr inbounds [4 x %"struct.jxl::PassDefinition"], [4 x %"struct.jxl::PassDefinition"]* %1, i64 0, i64 3, i32 3
  %116 = load i64, i64* %115, align 8
  %117 = icmp ne i64 %116, -1
  %118 = icmp ugt i64 %116, %87
  %119 = and i1 %117, %118
  br i1 %119, label %12, label %120

120:                                              ; preds = %114
  %121 = getelementptr inbounds %"struct.jxl::ProgressiveMode", %"struct.jxl::ProgressiveMode"* %0, i64 0, i32 1, i64 3
  %122 = bitcast %"struct.jxl::PassDefinition"* %121 to i8*
  %123 = bitcast %"struct.jxl::PassDefinition"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 8 %123, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(368) %"class.jxl::ImageBundle"* @_ZN3jxl11ImageBundleaSEOS0_(%"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"* dereferenceable(368)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.jxl::ImageBundle"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %3, align 8
  %6 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %6, align 8
  %8 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 %5, i64* %8, align 8
  %9 = icmp eq %"struct.jxl::jpeg::JPEGData"* %7, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = bitcast %"struct.jxl::jpeg::JPEGData"* %7 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %12 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %12, i64 1
  %14 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %13, align 8
  tail call void %14(%"struct.jxl::jpeg::JPEGData"* nonnull %7) #11
  br label %15

15:                                               ; preds = %2, %10
  %16 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  store i32 %17, i32* %18, align 8
  %19 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 1
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 3, i32 1
  %21 = bitcast [3 x i32]* %19 to i8*
  %22 = bitcast [3 x i32]* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 14, i1 false) #11
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4
  %24 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 4
  %25 = bitcast %"struct.jxl::FrameOrigin"* %23 to i8*
  %26 = bitcast %"struct.jxl::FrameOrigin"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 14, i1 false)
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 8
  %29 = bitcast %"class.std::__1::basic_string"* %27 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %15
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  tail call void @_ZdlPv(i8* %35) #12
  br label %36

36:                                               ; preds = %15, %33
  %37 = bitcast %"class.std::__1::basic_string"* %27 to i8*
  %38 = bitcast %"class.std::__1::basic_string"* %28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #11
  %39 = bitcast %"class.std::__1::basic_string"* %28 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %39, i64 0, i32 1, i32 0
  store i8 0, i8* %40, align 1
  store i8 0, i8* %38, align 1
  %41 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %42 = bitcast %"struct.jxl::ImageMetadata"** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %45 = bitcast %"struct.jxl::ImageMetadata"** %44 to i64*
  store i64 %43, i64* %45, align 8
  %46 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  %48 = bitcast %"class.jxl::Image3"* %46 to i8*
  %49 = bitcast %"class.jxl::Image3"* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 24, i1 false) #11
  %50 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %51 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %52 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %51, i64 0, i32 0, i32 0, i32 0
  %53 = bitcast %"class.std::__1::unique_ptr"* %51 to i64*
  %54 = load i64, i64* %53, align 8
  store i8* null, i8** %52, align 8
  %55 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %50, i64 0, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = bitcast %"class.std::__1::unique_ptr"* %50 to i64*
  store i64 %54, i64* %57, align 8
  %58 = icmp eq i8* %56, null
  br i1 %58, label %60, label %59

59:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %56) #11
  br label %60

60:                                               ; preds = %59, %36
  %61 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1
  %62 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %63 = bitcast %"class.jxl::Plane"* %62 to i8*
  %64 = bitcast %"class.jxl::Plane"* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 24, i1 false) #11
  %65 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %66 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %66, i64 0, i32 0, i32 0, i32 0
  %68 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  %69 = load i64, i64* %68, align 8
  store i8* null, i8** %67, align 8
  %70 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %65, i64 0, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = bitcast %"class.std::__1::unique_ptr"* %65 to i64*
  store i64 %69, i64* %72, align 8
  %73 = icmp eq i8* %71, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %60
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %71) #11
  br label %75

75:                                               ; preds = %74, %60
  %76 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2
  %77 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %78 = bitcast %"class.jxl::Plane"* %77 to i8*
  %79 = bitcast %"class.jxl::Plane"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 24, i1 false) #11
  %80 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %81 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %82 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %81, i64 0, i32 0, i32 0, i32 0
  %83 = bitcast %"class.std::__1::unique_ptr"* %81 to i64*
  %84 = load i64, i64* %83, align 8
  store i8* null, i8** %82, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %80, i64 0, i32 0, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  %87 = bitcast %"class.std::__1::unique_ptr"* %80 to i64*
  store i64 %84, i64* %87, align 8
  %88 = icmp eq i8* %86, null
  br i1 %88, label %90, label %89

89:                                               ; preds = %75
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %86) #11
  br label %90

90:                                               ; preds = %75, %89
  %91 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %92 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 12, i1 false) #11
  %93 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %94 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 1
  %95 = bitcast i32* %93 to i8*
  %96 = bitcast i32* %94 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 16, i1 false) #11
  %97 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %98 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 5
  %99 = bitcast i32* %97 to i8*
  %100 = bitcast i32* %98 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %100, i64 6, i1 false) #11
  %101 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8
  %102 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %101, i64 0, i32 0
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 0
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 1
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  store i64 %106, i64* %107, align 8
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 2
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %108, i64 0, i32 0, i32 0, i32 0
  %111 = bitcast %"class.std::__1::unique_ptr"* %108 to i64*
  %112 = load i64, i64* %111, align 8
  store i8* null, i8** %110, align 8
  %113 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %109, i64 0, i32 0, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  %115 = bitcast %"class.std::__1::unique_ptr"* %109 to i64*
  store i64 %112, i64* %115, align 8
  %116 = icmp eq i8* %114, null
  br i1 %116, label %118, label %117

117:                                              ; preds = %90
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %114) #11
  br label %118

118:                                              ; preds = %117, %90
  %119 = icmp eq %"class.jxl::ImageBundle"* %1, %0
  br i1 %119, label %122, label %120

120:                                              ; preds = %118
  %121 = bitcast %"class.jxl::PaddedBytes"* %101 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %121, i8 0, i64 16, i1 false) #11
  br label %122

122:                                              ; preds = %118, %120
  %123 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %124 = load i32, i32* %123, align 8
  %125 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  store i32 %124, i32* %125, align 8
  %126 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %127 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 10, i32 1
  %128 = bitcast i32* %127 to i64*
  %129 = bitcast i32* %126 to i64*
  %130 = load i64, i64* %128, align 8
  store i64 %130, i64* %129, align 8
  %131 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %132 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 11, i32 1
  %133 = bitcast i32* %132 to i64*
  %134 = bitcast i32* %131 to i64*
  %135 = load i64, i64* %133, align 8
  store i64 %135, i64* %134, align 8
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %137 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 12, i32 1
  %138 = bitcast i32* %137 to i64*
  %139 = bitcast i32* %136 to i64*
  %140 = load i64, i64* %138, align 8
  store i64 %140, i64* %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %142 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 13, i32 1
  %143 = bitcast i32* %142 to i64*
  %144 = bitcast i32* %141 to i64*
  %145 = load i64, i64* %143, align 8
  store i64 %145, i64* %144, align 8
  %146 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %147 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12
  %148 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %146, i64 0, i32 0, i32 0
  %149 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %148, align 8
  %150 = icmp eq %"class.jxl::Plane"* %149, null
  br i1 %150, label %171, label %151

151:                                              ; preds = %122
  %152 = bitcast %"class.jxl::Plane"* %149 to i8*
  %153 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %154 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %153, align 8
  %155 = icmp eq %"class.jxl::Plane"* %154, %149
  br i1 %155, label %168, label %156

156:                                              ; preds = %151, %163
  %157 = phi %"class.jxl::Plane"* [ %158, %163 ], [ %154, %151 ]
  %158 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %157, i64 -1
  %159 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %157, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %160 = load i8*, i8** %159, align 8
  store i8* null, i8** %159, align 8
  %161 = icmp eq i8* %160, null
  br i1 %161, label %163, label %162

162:                                              ; preds = %156
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %160) #11
  br label %163

163:                                              ; preds = %162, %156
  %164 = icmp eq %"class.jxl::Plane"* %158, %149
  br i1 %164, label %165, label %156

165:                                              ; preds = %163
  %166 = bitcast %"class.std::__1::vector.85"* %146 to i8**
  %167 = load i8*, i8** %166, align 8
  br label %168

168:                                              ; preds = %165, %151
  %169 = phi i8* [ %167, %165 ], [ %152, %151 ]
  store %"class.jxl::Plane"* %149, %"class.jxl::Plane"** %153, align 8
  tail call void @_ZdlPv(i8* %169) #12
  %170 = bitcast %"class.std::__1::vector.85"* %146 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %170, i8 0, i64 24, i1 false) #11
  br label %171

171:                                              ; preds = %122, %168
  %172 = bitcast %"class.std::__1::vector.85"* %147 to i64*
  %173 = load i64, i64* %172, align 8
  %174 = bitcast %"class.std::__1::vector.85"* %146 to i64*
  store i64 %173, i64* %174, align 8
  %175 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %176 = bitcast %"class.jxl::Plane"** %175 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %179 = bitcast %"class.jxl::Plane"** %178 to i64*
  store i64 %177, i64* %179, align 8
  %180 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %181 = bitcast %"class.jxl::Plane"** %180 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %184 = bitcast %"class.jxl::Plane"** %183 to i64*
  store i64 %182, i64* %184, align 8
  %185 = bitcast %"class.std::__1::vector.85"* %147 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %185, i8 0, i64 24, i1 false) #11
  %186 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 13
  %187 = load i64, i64* %186, align 8
  %188 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 13
  store i64 %187, i64* %188, align 8
  ret %"class.jxl::ImageBundle"* %0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %5 = icmp eq %"class.jxl::Plane"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Plane"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = icmp eq %"class.jxl::Plane"* %9, %4
  br i1 %10, label %23, label %11

11:                                               ; preds = %6, %18
  %12 = phi %"class.jxl::Plane"* [ %13, %18 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1
  %14 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %15) #11
  br label %18

18:                                               ; preds = %17, %11
  %19 = icmp eq %"class.jxl::Plane"* %13, %4
  br i1 %19, label %20, label %11

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.85"* %2 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %6
  %24 = phi i8* [ %22, %20 ], [ %7, %6 ]
  store %"class.jxl::Plane"* %4, %"class.jxl::Plane"** %8, align 8
  tail call void @_ZdlPv(i8* %24) #12
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %28) #11
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #11
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #11
  br label %41

41:                                               ; preds = %40, %36
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #11
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #12
  br label %55

55:                                               ; preds = %46, %52
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  %58 = icmp eq %"struct.jxl::jpeg::JPEGData"* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = bitcast %"struct.jxl::jpeg::JPEGData"* %57 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %61 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %61, i64 1
  %63 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %62, align 8
  tail call void %63(%"struct.jxl::jpeg::JPEGData"* nonnull %57) #11
  br label %64

64:                                               ; preds = %55, %59
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__110__function16__policy_invokerIFbPKcRKN3jxl6Image3IfEEEE12__call_emptyEPKNS0_16__policy_storageES3_S8_(%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"* dereferenceable(96)) #0 comdat align 2 {
  tail call void @_ZNSt3__125__throw_bad_function_callEv() #14
  unreachable
}

; Function Attrs: inlinehint noreturn nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__125__throw_bad_function_callEv() local_unnamed_addr #5 comdat {
  tail call void @abort() #13
  unreachable
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__110__function16__policy_invokerIFN3jxl6StatusERKNS2_10CodecInOutERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEE12__call_emptyEPKNS0_16__policy_storageES6_SE_(%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"* dereferenceable(3416), %"class.std::__1::basic_string"* dereferenceable(24)) #0 comdat align 2 {
  tail call void @_ZNSt3__125__throw_bad_function_callEv() #14
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl17PassesSharedStateC2Ev(%"struct.jxl::PassesSharedState"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1
  tail call void @_ZN3jxl11FrameHeaderC1EPKNS_13CodecMetadataE(%"struct.jxl::FrameHeader"* %2, %"struct.jxl::CodecMetadata"* null) #11
  %3 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 3
  %4 = bitcast %"class.jxl::AcStrategyImage"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 32, i1 false) #11
  %5 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4
  tail call void @_ZN3jxl15DequantMatricesC2Ev(%"class.jxl::DequantMatrices"* %5)
  %6 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 5
  tail call void @_ZN3jxl9QuantizerC1EPKNS_15DequantMatricesE(%"class.jxl::Quantizer"* %6, %"class.jxl::DequantMatrices"* %5) #11
  %7 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 6
  %8 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 3
  %9 = bitcast %"class.jxl::Plane.153"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 144, i1 false)
  store i32 84, i32* %8, align 8
  %10 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 4
  store float 0x3F88618620000000, float* %10, align 4
  %11 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 5
  store float 0.000000e+00, float* %11, align 8
  %12 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 6
  store float 1.000000e+00, float* %12, align 4
  %13 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 7
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 8
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 1
  %16 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 1
  %17 = bitcast %"class.std::__1::vector.155"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 76, i1 false) #11
  %18 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13
  %19 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 14
  %20 = bitcast %"class.std::__1::vector.176"* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 208, i1 false)
  store %"class.jxl::Image3"* %18, %"class.jxl::Image3"** %19, align 8
  %21 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15
  %22 = bitcast %"struct.jxl::BlockCtxMap"* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 96, i1 false) #11
  %23 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 2, i32 0, i32 0
  %24 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 0
  %25 = tail call i8* @_Znwm(i64 39) #12
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 1
  store i8* %25, i8** %24, align 8
  %27 = getelementptr inbounds i8, i8* %25, i64 39
  store i8* %27, i8** %23, align 8
  %28 = bitcast i8** %26 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %25, i8* align 16 getelementptr inbounds ([39 x i8], [39 x i8]* @_ZN3jxl11BlockCtxMap14kDefaultCtxMapE, i64 0, i64 0), i64 39, i1 false) #11
  %29 = ptrtoint i8* %27 to i64
  store i64 %29, i64* %28, align 8
  %30 = ptrtoint i8* %25 to i64
  br label %31

31:                                               ; preds = %31, %1
  %32 = phi i64 [ 1, %1 ], [ %49, %31 ]
  %33 = phi i64 [ %30, %1 ], [ %48, %31 ]
  %34 = getelementptr inbounds i8, i8* %25, i64 %32
  %35 = ptrtoint i8* %34 to i64
  %36 = inttoptr i64 %33 to i8*
  %37 = load i8, i8* %36, align 1
  %38 = load i8, i8* %34, align 1
  %39 = icmp ult i8 %37, %38
  %40 = select i1 %39, i64 %35, i64 %33
  %41 = add nuw nsw i64 %32, 1
  %42 = getelementptr inbounds i8, i8* %25, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = inttoptr i64 %40 to i8*
  %45 = load i8, i8* %44, align 1
  %46 = load i8, i8* %42, align 1
  %47 = icmp ult i8 %45, %46
  %48 = select i1 %47, i64 %43, i64 %40
  %49 = add nuw nsw i64 %32, 2
  %50 = icmp eq i64 %49, 39
  br i1 %50, label %51, label %31

51:                                               ; preds = %31
  %52 = inttoptr i64 %48 to i8*
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i64
  %55 = add nuw nsw i64 %54, 1
  %56 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 3
  store i64 %55, i64* %56, align 8
  %57 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 4
  store i64 1, i64* %57, align 8
  %58 = getelementptr %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0
  %59 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0
  %60 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 1
  %61 = bitcast %"class.jxl::Image3"* %58 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 392, i1 false)
  store i32 1, i32* %60, align 8
  %62 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %62) #11
  %63 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 4, i32 0
  %64 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 8
  %65 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 11
  %66 = bitcast i32* %63 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 14, i1 false) #11
  %67 = bitcast %"class.std::__1::basic_string"* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %67, i8 0, i64 128, i1 false) #11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %65) #11
  %68 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0, i32 12
  %69 = bitcast %"class.std::__1::vector.85"* %68 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %69, i8 0, i64 32, i1 false) #11
  %70 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 1
  store %"class.jxl::ImageBundle"* %59, %"class.jxl::ImageBundle"** %70, align 8
  %71 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 2
  store i8 0, i8* %71, align 8
  %72 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1
  %73 = getelementptr inbounds %struct.anon.198, %struct.anon.198* %72, i64 0, i32 0
  %74 = bitcast %struct.anon.198* %72 to i64*
  store i64 0, i64* %74, align 8
  %75 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 1
  store i32 1, i32* %75, align 8
  %76 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %76) #11
  %77 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 4, i32 0
  %78 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 8
  %79 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 11
  %80 = bitcast i32* %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %80, i8 0, i64 14, i1 false) #11
  %81 = bitcast %"class.std::__1::basic_string"* %78 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 128, i1 false) #11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %79) #11
  %82 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0, i32 12
  %83 = bitcast %"class.std::__1::vector.85"* %82 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %83, i8 0, i64 32, i1 false) #11
  %84 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 1
  store %"class.jxl::ImageBundle"* %73, %"class.jxl::ImageBundle"** %84, align 8
  %85 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 2
  store i8 0, i8* %85, align 8
  %86 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2
  %87 = getelementptr inbounds %struct.anon.198, %struct.anon.198* %86, i64 0, i32 0
  %88 = bitcast %struct.anon.198* %86 to i64*
  store i64 0, i64* %88, align 8
  %89 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 1
  store i32 1, i32* %89, align 8
  %90 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %90) #11
  %91 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 4, i32 0
  %92 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 8
  %93 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 11
  %94 = bitcast i32* %91 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %94, i8 0, i64 14, i1 false) #11
  %95 = bitcast %"class.std::__1::basic_string"* %92 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 128, i1 false) #11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %93) #11
  %96 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0, i32 12
  %97 = bitcast %"class.std::__1::vector.85"* %96 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %97, i8 0, i64 32, i1 false) #11
  %98 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 1
  store %"class.jxl::ImageBundle"* %87, %"class.jxl::ImageBundle"** %98, align 8
  %99 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 2
  store i8 0, i8* %99, align 8
  %100 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3
  %101 = getelementptr inbounds %struct.anon.198, %struct.anon.198* %100, i64 0, i32 0
  %102 = bitcast %struct.anon.198* %100 to i64*
  store i64 0, i64* %102, align 8
  %103 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 1
  store i32 1, i32* %103, align 8
  %104 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %104) #11
  %105 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 4, i32 0
  %106 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 8
  %107 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 11
  %108 = bitcast i32* %105 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %108, i8 0, i64 14, i1 false) #11
  %109 = bitcast %"class.std::__1::basic_string"* %106 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %109, i8 0, i64 128, i1 false) #11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %107) #11
  %110 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0, i32 12
  %111 = bitcast %"class.std::__1::vector.85"* %110 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %111, i8 0, i64 32, i1 false) #11
  %112 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 1
  store %"class.jxl::ImageBundle"* %101, %"class.jxl::ImageBundle"** %112, align 8
  %113 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 2
  store i8 0, i8* %113, align 8
  %114 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 18
  store i64 0, i64* %114, align 8
  ret void
}

declare void @_ZN3jxl11FrameHeaderC1EPKNS_13CodecMetadataE(%"struct.jxl::FrameHeader"*, %"struct.jxl::CodecMetadata"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl15DequantMatricesC2Ev(%"class.jxl::DequantMatrices"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca [216 x i8], align 4
  %3 = alloca [112 x i8], align 4
  %4 = alloca [216 x i8], align 4
  %5 = alloca %"class.jxl::QuantEncoding", align 8
  %6 = alloca [51 x i64], align 16
  %7 = alloca %"class.jxl::QuantEncoding", align 8
  %8 = bitcast %"class.jxl::DequantMatrices"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #11
  %9 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 3, i64 0
  %10 = bitcast float* %9 to <4 x float>*
  store <4 x float> <float 0x3F30000000000000, float 0x3F60000000000000, float 3.906250e-03, float 4.096000e+03>, <4 x float>* %10, align 4
  %11 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 1
  store float 5.120000e+02, float* %11, align 4
  %12 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 4, i64 2
  store float 2.560000e+02, float* %12, align 4
  %13 = getelementptr inbounds %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 6
  %14 = bitcast %"class.std::__1::vector.126"* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #11
  %15 = bitcast %"class.jxl::QuantEncoding"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %15) #11
  %16 = getelementptr inbounds [216 x i8], [216 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %16)
  %17 = getelementptr inbounds [112 x i8], [112 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %17)
  %18 = getelementptr inbounds [216 x i8], [216 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %18)
  %19 = getelementptr inbounds [216 x i8], [216 x i8]* %2, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 212, i1 false), !alias.scope !3, !noalias !6
  %20 = getelementptr inbounds [112 x i8], [112 x i8]* %3, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 108, i1 false), !alias.scope !3, !noalias !6
  %21 = getelementptr inbounds [216 x i8], [216 x i8]* %4, i64 0, i64 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 212, i1 false), !alias.scope !3, !noalias !6
  %22 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 0
  store i32 0, i32* %22, align 8, !alias.scope !6
  %23 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* nonnull align 4 %16, i64 216, i1 false) #11
  %24 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 2, i32 2, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %24, i8* nonnull align 4 %17, i64 112, i1 false) #11
  %25 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 3, i32 1, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* nonnull align 4 %18, i64 216, i1 false) #11
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 5, i32 0
  store i8 0, i8* %26, align 8, !alias.scope !6
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %18)
  call void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.126"* %13, i64 17, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %5) #11
  %27 = load i32, i32* %22, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %45

29:                                               ; preds = %1
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %5, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon.130* %30 to %"class.std::__1::vector.140"**
  %32 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.140"* %32, null
  br i1 %33, label %45, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %32, i64 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = icmp eq i32* %36, null
  br i1 %37, label %43, label %38

38:                                               ; preds = %34
  %39 = ptrtoint i32* %36 to i64
  %40 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %32, i64 0, i32 0, i32 1
  %41 = bitcast i32** %40 to i64*
  store i64 %39, i64* %41, align 8
  %42 = bitcast i32* %36 to i8*
  call void @_ZdlPv(i8* %42) #12
  br label %43

43:                                               ; preds = %38, %34
  %44 = bitcast %"class.std::__1::vector.140"* %32 to i8*
  call void @_ZdlPv(i8* %44) #12
  br label %45

45:                                               ; preds = %1, %29, %43
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %15) #11
  %46 = bitcast [51 x i64]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 408, i8* nonnull %46) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 408, i1 false)
  %47 = bitcast %"class.jxl::QuantEncoding"* %7 to i8*
  %48 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 1, i64 0
  %50 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 2, i32 2, i64 0
  %51 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 3, i32 1, i64 0
  %52 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 5, i32 0
  %53 = getelementptr inbounds %"class.std::__1::vector.126", %"class.std::__1::vector.126"* %13, i64 0, i32 0, i32 0
  %54 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %7, i64 0, i32 0, i32 3
  %55 = bitcast %union.anon.130* %54 to %"class.std::__1::vector.140"**
  br label %56

56:                                               ; preds = %78, %45
  %57 = phi i64 [ 0, %45 ], [ %93, %78 ]
  %58 = phi i64 [ 0, %45 ], [ %92, %78 ]
  call void @llvm.lifetime.start.p0i8(i64 560, i8* nonnull %47) #11
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %18)
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 212, i1 false), !alias.scope !9, !noalias !12
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 0, i64 108, i1 false), !alias.scope !9, !noalias !12
  call void @llvm.memset.p0i8.i64(i8* align 4 %21, i8 0, i64 212, i1 false), !alias.scope !9, !noalias !12
  store i32 0, i32* %48, align 8, !alias.scope !12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %49, i8* nonnull align 4 %16, i64 216, i1 false) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %50, i8* nonnull align 4 %17, i64 112, i1 false) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* nonnull align 4 %18, i64 216, i1 false) #11
  store i8 0, i8* %52, align 8, !alias.scope !12
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %16)
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %18)
  %59 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %53, align 8
  %60 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %59, i64 %57
  %61 = call dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"* %60, %"class.jxl::QuantEncoding"* nonnull dereferenceable(560) %7)
  %62 = load i32, i32* %48, align 8
  %63 = icmp eq i32 %62, 7
  br i1 %63, label %64, label %78

64:                                               ; preds = %56
  %65 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %55, align 8
  %66 = icmp eq %"class.std::__1::vector.140"* %65, null
  br i1 %66, label %78, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %65, i64 0, i32 0, i32 0
  %69 = load i32*, i32** %68, align 8
  %70 = icmp eq i32* %69, null
  br i1 %70, label %76, label %71

71:                                               ; preds = %67
  %72 = ptrtoint i32* %69 to i64
  %73 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %65, i64 0, i32 0, i32 1
  %74 = bitcast i32** %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = bitcast i32* %69 to i8*
  call void @_ZdlPv(i8* %75) #12
  br label %76

76:                                               ; preds = %71, %67
  %77 = bitcast %"class.std::__1::vector.140"* %65 to i8*
  call void @_ZdlPv(i8* %77) #12
  br label %78

78:                                               ; preds = %56, %64, %76
  call void @llvm.lifetime.end.p0i8(i64 560, i8* nonnull %47) #11
  %79 = getelementptr inbounds [17 x i64], [17 x i64]* @_ZN3jxl15DequantMatrices14required_size_E.const, i64 0, i64 %57
  %80 = load i64, i64* %79, align 8
  %81 = shl i64 %80, 6
  %82 = mul nuw nsw i64 %57, 3
  %83 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %82
  store i64 %58, i64* %83, align 8
  %84 = add i64 %81, %58
  %85 = add nuw nsw i64 %82, 1
  %86 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %85
  store i64 %84, i64* %86, align 8
  %87 = shl i64 %80, 7
  %88 = add i64 %87, %58
  %89 = add nuw nsw i64 %82, 2
  %90 = getelementptr inbounds [51 x i64], [51 x i64]* %6, i64 0, i64 %89
  store i64 %88, i64* %90, align 8
  %91 = mul i64 %80, 192
  %92 = add i64 %91, %58
  %93 = add nuw nsw i64 %57, 1
  %94 = icmp eq i64 %93, 17
  br i1 %94, label %95, label %56

95:                                               ; preds = %78, %114
  %96 = phi i64 [ %123, %114 ], [ 0, %78 ]
  %97 = mul nuw nsw i64 %96, 3
  %98 = getelementptr %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 5, i64 %97
  %99 = bitcast i64* %98 to i8*
  %100 = getelementptr inbounds [27 x i64], [27 x i64]* @_ZN3jxl15DequantMatrices11kQuantTableE.const, i64 0, i64 %96
  %101 = load i64, i64* %100, align 16
  %102 = mul i64 %101, 3
  %103 = getelementptr [51 x i64], [51 x i64]* %6, i64 0, i64 %102
  %104 = bitcast i64* %103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %104, i64 24, i1 false)
  %105 = or i64 %96, 1
  %106 = icmp eq i64 %105, 27
  br i1 %106, label %107, label %114

107:                                              ; preds = %95
  %108 = call i32 @_ZN3jxl15DequantMatrices7ComputeEv(%"class.jxl::DequantMatrices"* %0) #11
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %113, label %110

110:                                              ; preds = %107
  %111 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.13, i64 0, i64 0), i32 393, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0)) #11
  %112 = call zeroext i1 @_ZN3jxl5AbortEv() #13
  unreachable

113:                                              ; preds = %107
  call void @llvm.lifetime.end.p0i8(i64 408, i8* nonnull %46) #11
  ret void

114:                                              ; preds = %95
  %115 = mul nuw nsw i64 %105, 3
  %116 = getelementptr %"class.jxl::DequantMatrices", %"class.jxl::DequantMatrices"* %0, i64 0, i32 5, i64 %115
  %117 = bitcast i64* %116 to i8*
  %118 = getelementptr inbounds [27 x i64], [27 x i64]* @_ZN3jxl15DequantMatrices11kQuantTableE.const, i64 0, i64 %105
  %119 = load i64, i64* %118, align 8
  %120 = mul i64 %119, 3
  %121 = getelementptr [51 x i64], [51 x i64]* %6, i64 0, i64 %120
  %122 = bitcast i64* %121 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %122, i64 24, i1 false)
  %123 = add nuw nsw i64 %96, 2
  br label %95
}

declare void @_ZN3jxl9QuantizerC1EPKNS_15DequantMatricesE(%"class.jxl::Quantizer"*, %"class.jxl::DequantMatrices"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(560) %"class.jxl::QuantEncoding"* @_ZN3jxl13QuantEncodingaSERKS0_(%"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 7
  br i1 %5, label %6, label %22

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %8 = bitcast %union.anon.130* %7 to %"class.std::__1::vector.140"**
  %9 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %8, align 8
  %10 = icmp eq %"class.std::__1::vector.140"* %9, null
  br i1 %10, label %22, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %9, i64 0, i32 0, i32 0
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = ptrtoint i32* %13 to i64
  %17 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %9, i64 0, i32 0, i32 1
  %18 = bitcast i32** %17 to i64*
  store i64 %16, i64* %18, align 8
  %19 = bitcast i32* %13 to i8*
  tail call void @_ZdlPv(i8* %19) #12
  br label %20

20:                                               ; preds = %11, %15
  %21 = bitcast %"class.std::__1::vector.140"* %9 to i8*
  tail call void @_ZdlPv(i8* %21) #12
  br label %22

22:                                               ; preds = %6, %20, %2
  %23 = bitcast %"class.jxl::QuantEncoding"* %1 to i8*
  %24 = bitcast %"class.jxl::QuantEncoding"* %0 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %23, i64 553, i1 false)
  %25 = load i32, i32* %3, align 8
  %26 = icmp eq i32 %25, 7
  br i1 %26, label %27, label %75

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %0, i64 0, i32 0, i32 3
  %29 = bitcast %union.anon.130* %28 to %"class.std::__1::vector.140"**
  %30 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %29, align 8
  %31 = icmp eq %"class.std::__1::vector.140"* %30, null
  br i1 %31, label %75, label %32

32:                                               ; preds = %27
  %33 = tail call i8* @_Znwm(i64 24) #12
  %34 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %1, i64 0, i32 0, i32 3
  %35 = bitcast %union.anon.130* %34 to %"class.std::__1::vector.140"**
  %36 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %35, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 0, i64 24, i1 false) #11
  %37 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.140"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %32
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #13
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #12
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %33, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %33 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %33, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #11
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %32, %71
  %74 = bitcast %union.anon.130* %28 to i8**
  store i8* %33, i8** %74, align 8
  br label %75

75:                                               ; preds = %27, %73, %22
  ret %"class.jxl::QuantEncoding"* %0
}

declare i32 @_ZN3jxl15DequantMatrices7ComputeEv(%"class.jxl::DequantMatrices"*) local_unnamed_addr #2

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl13QuantEncodingENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.126"*, i64, %"class.jxl::QuantEncoding"* dereferenceable(560)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.126", %"class.std::__1::vector.126"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.jxl::QuantEncoding"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.126", %"class.std::__1::vector.126"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.jxl::QuantEncoding"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sdiv exact i64 %10, 560
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %80, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"class.jxl::QuantEncoding"*
  %15 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %78, label %17

17:                                               ; preds = %13
  %18 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %19 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %20 = bitcast %union.anon.130* %19 to %"class.std::__1::vector.140"**
  br label %23

21:                                               ; preds = %75
  %22 = ptrtoint %"class.jxl::QuantEncoding"* %15 to i64
  br label %78

23:                                               ; preds = %75, %17
  %24 = phi %"class.jxl::QuantEncoding"* [ %14, %17 ], [ %76, %75 ]
  %25 = bitcast %"class.jxl::QuantEncoding"* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %18, i64 553, i1 false) #11
  %26 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 7
  br i1 %28, label %29, label %75

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 0, i32 0, i32 3
  %31 = bitcast %union.anon.130* %30 to %"class.std::__1::vector.140"**
  %32 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %31, align 8
  %33 = icmp eq %"class.std::__1::vector.140"* %32, null
  br i1 %33, label %75, label %34

34:                                               ; preds = %29
  %35 = tail call i8* @_Znwm(i64 24) #12
  %36 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %20, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #11
  %37 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %36, i64 0, i32 0, i32 1
  %38 = bitcast i32** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::vector.140"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %73, label %45

45:                                               ; preds = %34
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast i8* %35 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #13
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #12
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %35, i64 8
  %53 = bitcast i8* %52 to i8**
  store i8* %50, i8** %53, align 8
  %54 = bitcast i8* %35 to i8**
  store i8* %50, i8** %54, align 8
  %55 = getelementptr inbounds i32, i32* %51, i64 %43
  %56 = getelementptr inbounds i8, i8* %35, i64 16
  %57 = bitcast i8* %56 to i32**
  store i32* %55, i32** %57, align 8
  %58 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %36, i64 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %38, align 8
  %61 = bitcast i8* %52 to i64*
  %62 = ptrtoint i8* %50 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %49
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %68, i64 %64, i1 false) #11
  %69 = getelementptr inbounds i32, i32* %51, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %49
  %72 = phi i64 [ %70, %66 ], [ %62, %49 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %71, %34
  %74 = bitcast %union.anon.130* %30 to i8**
  store i8* %35, i8** %74, align 8
  br label %75

75:                                               ; preds = %73, %29, %23
  %76 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %24, i64 1
  %77 = icmp eq %"class.jxl::QuantEncoding"* %76, %15
  br i1 %77, label %21, label %23

78:                                               ; preds = %13, %21
  %79 = phi i64 [ %22, %21 ], [ %9, %13 ]
  store i64 %79, i64* %8, align 8
  br label %229

80:                                               ; preds = %3
  %81 = bitcast %"class.std::__1::vector.126"* %0 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 %9, %82
  %84 = sdiv exact i64 %83, 560
  %85 = add i64 %84, %1
  %86 = icmp ugt i64 %85, 32940614417338485
  br i1 %86, label %87, label %89

87:                                               ; preds = %80
  %88 = bitcast %"class.std::__1::vector.126"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %88) #13
  unreachable

89:                                               ; preds = %80
  %90 = sub i64 %6, %82
  %91 = sdiv exact i64 %90, 560
  %92 = icmp ult i64 %91, 16470307208669242
  br i1 %92, label %93, label %98

93:                                               ; preds = %89
  %94 = shl nsw i64 %91, 1
  %95 = icmp ult i64 %94, %85
  %96 = select i1 %95, i64 %85, i64 %94
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %103, label %98

98:                                               ; preds = %89, %93
  %99 = phi i64 [ %96, %93 ], [ 32940614417338485, %89 ]
  %100 = mul i64 %99, 560
  %101 = tail call i8* @_Znwm(i64 %100) #12
  %102 = bitcast i8* %101 to %"class.jxl::QuantEncoding"*
  br label %103

103:                                              ; preds = %98, %93
  %104 = phi i64 [ %99, %98 ], [ 0, %93 ]
  %105 = phi %"class.jxl::QuantEncoding"* [ %102, %98 ], [ null, %93 ]
  %106 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %105, i64 %84
  %107 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %105, i64 %104
  %108 = ptrtoint %"class.jxl::QuantEncoding"* %107 to i64
  %109 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %106, i64 %1
  %110 = bitcast %"class.jxl::QuantEncoding"* %2 to i8*
  %111 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %2, i64 0, i32 0, i32 3
  %112 = bitcast %union.anon.130* %111 to %"class.std::__1::vector.140"**
  br label %113

113:                                              ; preds = %165, %103
  %114 = phi %"class.jxl::QuantEncoding"* [ %106, %103 ], [ %166, %165 ]
  %115 = bitcast %"class.jxl::QuantEncoding"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %110, i64 553, i1 false) #11
  %116 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 0, i32 0, i32 0
  %117 = load i32, i32* %116, align 8
  %118 = icmp eq i32 %117, 7
  br i1 %118, label %119, label %165

119:                                              ; preds = %113
  %120 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 0, i32 0, i32 3
  %121 = bitcast %union.anon.130* %120 to %"class.std::__1::vector.140"**
  %122 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %121, align 8
  %123 = icmp eq %"class.std::__1::vector.140"* %122, null
  br i1 %123, label %165, label %124

124:                                              ; preds = %119
  %125 = tail call i8* @_Znwm(i64 24) #12
  %126 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %112, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %125, i8 0, i64 24, i1 false) #11
  %127 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %126, i64 0, i32 0, i32 1
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.std::__1::vector.140"* %126 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = sub i64 %129, %131
  %133 = ashr exact i64 %132, 2
  %134 = icmp eq i64 %132, 0
  br i1 %134, label %163, label %135

135:                                              ; preds = %124
  %136 = icmp ugt i64 %133, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %135
  %138 = bitcast i8* %125 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %138) #13
  unreachable

139:                                              ; preds = %135
  %140 = tail call i8* @_Znwm(i64 %132) #12
  %141 = bitcast i8* %140 to i32*
  %142 = getelementptr inbounds i8, i8* %125, i64 8
  %143 = bitcast i8* %142 to i8**
  store i8* %140, i8** %143, align 8
  %144 = bitcast i8* %125 to i8**
  store i8* %140, i8** %144, align 8
  %145 = getelementptr inbounds i32, i32* %141, i64 %133
  %146 = getelementptr inbounds i8, i8* %125, i64 16
  %147 = bitcast i8* %146 to i32**
  store i32* %145, i32** %147, align 8
  %148 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %126, i64 0, i32 0, i32 0
  %149 = load i32*, i32** %148, align 8
  %150 = load i64, i64* %128, align 8
  %151 = bitcast i8* %142 to i64*
  %152 = ptrtoint i8* %140 to i64
  %153 = ptrtoint i32* %149 to i64
  %154 = sub i64 %150, %153
  %155 = icmp sgt i64 %154, 0
  br i1 %155, label %156, label %161

156:                                              ; preds = %139
  %157 = lshr exact i64 %154, 2
  %158 = bitcast i32* %149 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %140, i8* align 4 %158, i64 %154, i1 false) #11
  %159 = getelementptr inbounds i32, i32* %141, i64 %157
  %160 = ptrtoint i32* %159 to i64
  br label %161

161:                                              ; preds = %156, %139
  %162 = phi i64 [ %160, %156 ], [ %152, %139 ]
  store i64 %162, i64* %151, align 8
  br label %163

163:                                              ; preds = %161, %124
  %164 = bitcast %union.anon.130* %120 to i8**
  store i8* %125, i8** %164, align 8
  br label %165

165:                                              ; preds = %113, %119, %163
  %166 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %114, i64 1
  %167 = icmp eq %"class.jxl::QuantEncoding"* %109, %166
  br i1 %167, label %168, label %113

168:                                              ; preds = %165
  %169 = ptrtoint %"class.jxl::QuantEncoding"* %109 to i64
  %170 = getelementptr inbounds %"class.std::__1::vector.126", %"class.std::__1::vector.126"* %0, i64 0, i32 0, i32 0
  %171 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %170, align 8
  %172 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %7, align 8
  %173 = icmp eq %"class.jxl::QuantEncoding"* %172, %171
  br i1 %173, label %174, label %176

174:                                              ; preds = %168
  %175 = ptrtoint %"class.jxl::QuantEncoding"* %171 to i64
  br label %194

176:                                              ; preds = %168, %189
  %177 = phi %"class.jxl::QuantEncoding"* [ %179, %189 ], [ %106, %168 ]
  %178 = phi %"class.jxl::QuantEncoding"* [ %180, %189 ], [ %172, %168 ]
  %179 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %177, i64 -1
  %180 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %178, i64 -1
  %181 = bitcast %"class.jxl::QuantEncoding"* %179 to i8*
  %182 = bitcast %"class.jxl::QuantEncoding"* %180 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %181, i8* align 8 %182, i64 553, i1 false) #11
  %183 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %179, i64 0, i32 0, i32 0
  %184 = load i32, i32* %183, align 8
  %185 = icmp eq i32 %184, 7
  br i1 %185, label %186, label %189

186:                                              ; preds = %176
  %187 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %178, i64 -1, i32 0, i32 3
  %188 = bitcast %union.anon.130* %187 to %"class.std::__1::vector.140"**
  store %"class.std::__1::vector.140"* null, %"class.std::__1::vector.140"** %188, align 8
  br label %189

189:                                              ; preds = %186, %176
  %190 = icmp eq %"class.jxl::QuantEncoding"* %180, %171
  br i1 %190, label %191, label %176

191:                                              ; preds = %189
  %192 = load i64, i64* %81, align 8
  %193 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %7, align 8
  br label %194

194:                                              ; preds = %174, %191
  %195 = phi %"class.jxl::QuantEncoding"* [ %171, %174 ], [ %193, %191 ]
  %196 = phi %"class.jxl::QuantEncoding"* [ %106, %174 ], [ %179, %191 ]
  %197 = phi i64 [ %175, %174 ], [ %192, %191 ]
  %198 = ptrtoint %"class.jxl::QuantEncoding"* %196 to i64
  store i64 %198, i64* %81, align 8
  store i64 %169, i64* %8, align 8
  store i64 %108, i64* %5, align 8
  %199 = inttoptr i64 %197 to %"class.jxl::QuantEncoding"*
  %200 = icmp eq %"class.jxl::QuantEncoding"* %195, %199
  br i1 %200, label %225, label %201

201:                                              ; preds = %194, %223
  %202 = phi %"class.jxl::QuantEncoding"* [ %203, %223 ], [ %195, %194 ]
  %203 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %202, i64 -1
  %204 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %203, i64 0, i32 0, i32 0
  %205 = load i32, i32* %204, align 8
  %206 = icmp eq i32 %205, 7
  br i1 %206, label %207, label %223

207:                                              ; preds = %201
  %208 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %202, i64 -1, i32 0, i32 3
  %209 = bitcast %union.anon.130* %208 to %"class.std::__1::vector.140"**
  %210 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %209, align 8
  %211 = icmp eq %"class.std::__1::vector.140"* %210, null
  br i1 %211, label %223, label %212

212:                                              ; preds = %207
  %213 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %210, i64 0, i32 0, i32 0
  %214 = load i32*, i32** %213, align 8
  %215 = icmp eq i32* %214, null
  br i1 %215, label %221, label %216

216:                                              ; preds = %212
  %217 = ptrtoint i32* %214 to i64
  %218 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %210, i64 0, i32 0, i32 1
  %219 = bitcast i32** %218 to i64*
  store i64 %217, i64* %219, align 8
  %220 = bitcast i32* %214 to i8*
  tail call void @_ZdlPv(i8* %220) #12
  br label %221

221:                                              ; preds = %216, %212
  %222 = bitcast %"class.std::__1::vector.140"* %210 to i8*
  tail call void @_ZdlPv(i8* %222) #12
  br label %223

223:                                              ; preds = %221, %207, %201
  %224 = icmp eq %"class.jxl::QuantEncoding"* %203, %199
  br i1 %224, label %225, label %201

225:                                              ; preds = %223, %194
  %226 = icmp eq i64 %197, 0
  br i1 %226, label %229, label %227

227:                                              ; preds = %225
  %228 = inttoptr i64 %197 to i8*
  tail call void @_ZdlPv(i8* %228) #12
  br label %229

229:                                              ; preds = %227, %225, %78
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl17PassesSharedStateD2Ev(%"struct.jxl::PassesSharedState"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 3, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %2) #11
  %3 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 2, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %3) #11
  %4 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 1, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %4) #11
  %5 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 17, i64 0, i32 0
  tail call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* %5) #11
  %6 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 3, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  store i8* null, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %7) #11
  br label %10

10:                                               ; preds = %9, %1
  %11 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 3, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  store i8* null, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %10
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %12) #11
  br label %15

15:                                               ; preds = %14, %10
  %16 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 3, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  store i8* null, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %17) #11
  br label %20

20:                                               ; preds = %15, %19
  %21 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 2, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  store i8* null, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %293, label %292

24:                                               ; preds = %333
  %25 = ptrtoint i8* %335 to i64
  %26 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 1
  %27 = bitcast i8** %26 to i64*
  store i64 %25, i64* %27, align 8
  tail call void @_ZdlPv(i8* nonnull %335) #12
  br label %28

28:                                               ; preds = %24, %333
  %29 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 1, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = icmp eq i32* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %28
  %33 = ptrtoint i32* %30 to i64
  %34 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 1, i32 0, i32 1
  %35 = bitcast i32** %34 to i64*
  store i64 %33, i64* %35, align 8
  %36 = bitcast i32* %30 to i8*
  tail call void @_ZdlPv(i8* %36) #12
  br label %37

37:                                               ; preds = %32, %28
  %38 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 2, i32 0, i32 0
  %39 = load i32*, i32** %38, align 8
  %40 = icmp eq i32* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %37
  %42 = ptrtoint i32* %39 to i64
  %43 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 2, i32 0, i32 1
  %44 = bitcast i32** %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = bitcast i32* %39 to i8*
  tail call void @_ZdlPv(i8* %45) #12
  br label %46

46:                                               ; preds = %41, %37
  %47 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 1, i32 0, i32 0
  %48 = load i32*, i32** %47, align 8
  %49 = icmp eq i32* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = ptrtoint i32* %48 to i64
  %52 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 1, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = bitcast i32* %48 to i8*
  tail call void @_ZdlPv(i8* %54) #12
  br label %55

55:                                               ; preds = %50, %46
  %56 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 0, i32 0, i32 0
  %57 = load i32*, i32** %56, align 8
  %58 = icmp eq i32* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = ptrtoint i32* %57 to i64
  %61 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 0, i64 0, i32 0, i32 1
  %62 = bitcast i32** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast i32* %57 to i8*
  tail call void @_ZdlPv(i8* %63) #12
  br label %64

64:                                               ; preds = %55, %59
  %65 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  store i8* null, i8** %65, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %64
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %66) #11
  br label %69

69:                                               ; preds = %68, %64
  %70 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  store i8* null, i8** %70, align 8
  %72 = icmp eq i8* %71, null
  br i1 %72, label %74, label %73

73:                                               ; preds = %69
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %71) #11
  br label %74

74:                                               ; preds = %73, %69
  %75 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 13, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  store i8* null, i8** %75, align 8
  %77 = icmp eq i8* %76, null
  br i1 %77, label %79, label %78

78:                                               ; preds = %74
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %76) #11
  br label %79

79:                                               ; preds = %74, %78
  %80 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 12, i32 0, i32 5, i32 0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  store i8* null, i8** %80, align 8
  %82 = icmp eq i8* %81, null
  br i1 %82, label %84, label %83

83:                                               ; preds = %79
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %81) #11
  br label %84

84:                                               ; preds = %79, %83
  %85 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 11, i32 0, i32 0
  %86 = load i32*, i32** %85, align 8
  %87 = icmp eq i32* %86, null
  br i1 %87, label %93, label %88

88:                                               ; preds = %84
  %89 = ptrtoint i32* %86 to i64
  %90 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 11, i32 0, i32 1
  %91 = bitcast i32** %90 to i64*
  store i64 %89, i64* %91, align 8
  %92 = bitcast i32* %86 to i8*
  tail call void @_ZdlPv(i8* %92) #12
  br label %93

93:                                               ; preds = %84, %88
  %94 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 2, i32 0, i32 0
  %95 = load %"struct.jxl::Spline::Point"*, %"struct.jxl::Spline::Point"** %94, align 8
  %96 = icmp eq %"struct.jxl::Spline::Point"* %95, null
  br i1 %96, label %102, label %97

97:                                               ; preds = %93
  %98 = ptrtoint %"struct.jxl::Spline::Point"* %95 to i64
  %99 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 2, i32 0, i32 1
  %100 = bitcast %"struct.jxl::Spline::Point"** %99 to i64*
  store i64 %98, i64* %100, align 8
  %101 = bitcast %"struct.jxl::Spline::Point"* %95 to i8*
  tail call void @_ZdlPv(i8* %101) #12
  br label %102

102:                                              ; preds = %97, %93
  %103 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 1
  %104 = getelementptr inbounds %"class.std::__1::vector.176", %"class.std::__1::vector.176"* %103, i64 0, i32 0, i32 0
  %105 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %104, align 8
  %106 = icmp eq %"class.jxl::QuantizedSpline"* %105, null
  br i1 %106, label %130, label %107

107:                                              ; preds = %102
  %108 = bitcast %"class.jxl::QuantizedSpline"* %105 to i8*
  %109 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 2, i32 1, i32 0, i32 1
  %110 = load %"class.jxl::QuantizedSpline"*, %"class.jxl::QuantizedSpline"** %109, align 8
  %111 = icmp eq %"class.jxl::QuantizedSpline"* %110, %105
  br i1 %111, label %128, label %112

112:                                              ; preds = %107, %123
  %113 = phi %"class.jxl::QuantizedSpline"* [ %114, %123 ], [ %110, %107 ]
  %114 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %114, i64 0, i32 0, i32 0, i32 0
  %116 = load %"struct.std::__1::pair.180"*, %"struct.std::__1::pair.180"** %115, align 8
  %117 = icmp eq %"struct.std::__1::pair.180"* %116, null
  br i1 %117, label %123, label %118

118:                                              ; preds = %112
  %119 = ptrtoint %"struct.std::__1::pair.180"* %116 to i64
  %120 = getelementptr inbounds %"class.jxl::QuantizedSpline", %"class.jxl::QuantizedSpline"* %113, i64 -1, i32 0, i32 0, i32 1
  %121 = bitcast %"struct.std::__1::pair.180"** %120 to i64*
  store i64 %119, i64* %121, align 8
  %122 = bitcast %"struct.std::__1::pair.180"* %116 to i8*
  tail call void @_ZdlPv(i8* %122) #12
  br label %123

123:                                              ; preds = %118, %112
  %124 = icmp eq %"class.jxl::QuantizedSpline"* %114, %105
  br i1 %124, label %125, label %112

125:                                              ; preds = %123
  %126 = bitcast %"class.std::__1::vector.176"* %103 to i8**
  %127 = load i8*, i8** %126, align 8
  br label %128

128:                                              ; preds = %125, %107
  %129 = phi i8* [ %127, %125 ], [ %108, %107 ]
  store %"class.jxl::QuantizedSpline"* %105, %"class.jxl::QuantizedSpline"** %109, align 8
  tail call void @_ZdlPv(i8* %129) #12
  br label %130

130:                                              ; preds = %102, %128
  %131 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 3, i32 0, i32 0
  %132 = load i64*, i64** %131, align 8
  %133 = icmp eq i64* %132, null
  br i1 %133, label %139, label %134

134:                                              ; preds = %130
  %135 = ptrtoint i64* %132 to i64
  %136 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 3, i32 0, i32 1
  %137 = bitcast i64** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = bitcast i64* %132 to i8*
  tail call void @_ZdlPv(i8* %138) #12
  br label %139

139:                                              ; preds = %134, %130
  %140 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 2, i32 0, i32 0
  %141 = load i64*, i64** %140, align 8
  %142 = icmp eq i64* %141, null
  br i1 %142, label %148, label %143

143:                                              ; preds = %139
  %144 = ptrtoint i64* %141 to i64
  %145 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 2, i32 0, i32 1
  %146 = bitcast i64** %145 to i64*
  store i64 %144, i64* %146, align 8
  %147 = bitcast i64* %141 to i8*
  tail call void @_ZdlPv(i8* %147) #12
  br label %148

148:                                              ; preds = %143, %139
  %149 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 1
  %150 = getelementptr inbounds %"class.std::__1::vector.155", %"class.std::__1::vector.155"* %149, i64 0, i32 0, i32 0
  %151 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %150, align 8
  %152 = icmp eq %"struct.jxl::PatchPosition"* %151, null
  br i1 %152, label %176, label %153

153:                                              ; preds = %148
  %154 = bitcast %"struct.jxl::PatchPosition"* %151 to i8*
  %155 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 9, i32 1, i32 1, i32 0, i32 1
  %156 = load %"struct.jxl::PatchPosition"*, %"struct.jxl::PatchPosition"** %155, align 8
  %157 = icmp eq %"struct.jxl::PatchPosition"* %156, %151
  br i1 %157, label %174, label %158

158:                                              ; preds = %153, %169
  %159 = phi %"struct.jxl::PatchPosition"* [ %160, %169 ], [ %156, %153 ]
  %160 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %159, i64 -1
  %161 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %159, i64 -1, i32 2, i32 0, i32 0
  %162 = load %"struct.jxl::PatchBlending"*, %"struct.jxl::PatchBlending"** %161, align 8
  %163 = icmp eq %"struct.jxl::PatchBlending"* %162, null
  br i1 %163, label %169, label %164

164:                                              ; preds = %158
  %165 = ptrtoint %"struct.jxl::PatchBlending"* %162 to i64
  %166 = getelementptr inbounds %"struct.jxl::PatchPosition", %"struct.jxl::PatchPosition"* %159, i64 -1, i32 2, i32 0, i32 1
  %167 = bitcast %"struct.jxl::PatchBlending"** %166 to i64*
  store i64 %165, i64* %167, align 8
  %168 = getelementptr inbounds %"struct.jxl::PatchBlending", %"struct.jxl::PatchBlending"* %162, i64 0, i32 0
  tail call void @_ZdlPv(i8* %168) #12
  br label %169

169:                                              ; preds = %164, %158
  %170 = icmp eq %"struct.jxl::PatchPosition"* %160, %151
  br i1 %170, label %171, label %158

171:                                              ; preds = %169
  %172 = bitcast %"class.std::__1::vector.155"* %149 to i8**
  %173 = load i8*, i8** %172, align 8
  br label %174

174:                                              ; preds = %171, %153
  %175 = phi i8* [ %173, %171 ], [ %154, %153 ]
  store %"struct.jxl::PatchPosition"* %151, %"struct.jxl::PatchPosition"** %155, align 8
  tail call void @_ZdlPv(i8* %175) #12
  br label %176

176:                                              ; preds = %148, %174
  %177 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %178 = load i8*, i8** %177, align 8
  store i8* null, i8** %177, align 8
  %179 = icmp eq i8* %178, null
  br i1 %179, label %181, label %180

180:                                              ; preds = %176
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %178) #11
  br label %181

181:                                              ; preds = %180, %176
  %182 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 8, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %183 = load i8*, i8** %182, align 8
  store i8* null, i8** %182, align 8
  %184 = icmp eq i8* %183, null
  br i1 %184, label %186, label %185

185:                                              ; preds = %181
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %183) #11
  br label %186

186:                                              ; preds = %181, %185
  %187 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 7, i32 0, i32 5, i32 0, i32 0, i32 0
  %188 = load i8*, i8** %187, align 8
  store i8* null, i8** %187, align 8
  %189 = icmp eq i8* %188, null
  br i1 %189, label %191, label %190

190:                                              ; preds = %186
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %188) #11
  br label %191

191:                                              ; preds = %186, %190
  %192 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 6, i32 0, i32 5, i32 0, i32 0, i32 0
  %193 = load i8*, i8** %192, align 8
  store i8* null, i8** %192, align 8
  %194 = icmp eq i8* %193, null
  br i1 %194, label %196, label %195

195:                                              ; preds = %191
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %193) #11
  br label %196

196:                                              ; preds = %191, %195
  %197 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 6
  %198 = getelementptr inbounds %"class.std::__1::vector.126", %"class.std::__1::vector.126"* %197, i64 0, i32 0, i32 0
  %199 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %198, align 8
  %200 = icmp eq %"class.jxl::QuantEncoding"* %199, null
  br i1 %200, label %235, label %201

201:                                              ; preds = %196
  %202 = bitcast %"class.jxl::QuantEncoding"* %199 to i8*
  %203 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 6, i32 0, i32 1
  %204 = load %"class.jxl::QuantEncoding"*, %"class.jxl::QuantEncoding"** %203, align 8
  %205 = icmp eq %"class.jxl::QuantEncoding"* %204, %199
  br i1 %205, label %233, label %206

206:                                              ; preds = %201, %228
  %207 = phi %"class.jxl::QuantEncoding"* [ %208, %228 ], [ %204, %201 ]
  %208 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %207, i64 -1
  %209 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %208, i64 0, i32 0, i32 0
  %210 = load i32, i32* %209, align 8
  %211 = icmp eq i32 %210, 7
  br i1 %211, label %212, label %228

212:                                              ; preds = %206
  %213 = getelementptr inbounds %"class.jxl::QuantEncoding", %"class.jxl::QuantEncoding"* %207, i64 -1, i32 0, i32 3
  %214 = bitcast %union.anon.130* %213 to %"class.std::__1::vector.140"**
  %215 = load %"class.std::__1::vector.140"*, %"class.std::__1::vector.140"** %214, align 8
  %216 = icmp eq %"class.std::__1::vector.140"* %215, null
  br i1 %216, label %228, label %217

217:                                              ; preds = %212
  %218 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %215, i64 0, i32 0, i32 0
  %219 = load i32*, i32** %218, align 8
  %220 = icmp eq i32* %219, null
  br i1 %220, label %226, label %221

221:                                              ; preds = %217
  %222 = ptrtoint i32* %219 to i64
  %223 = getelementptr inbounds %"class.std::__1::vector.140", %"class.std::__1::vector.140"* %215, i64 0, i32 0, i32 1
  %224 = bitcast i32** %223 to i64*
  store i64 %222, i64* %224, align 8
  %225 = bitcast i32* %219 to i8*
  tail call void @_ZdlPv(i8* %225) #12
  br label %226

226:                                              ; preds = %221, %217
  %227 = bitcast %"class.std::__1::vector.140"* %215 to i8*
  tail call void @_ZdlPv(i8* %227) #12
  br label %228

228:                                              ; preds = %226, %212, %206
  %229 = icmp eq %"class.jxl::QuantEncoding"* %208, %199
  br i1 %229, label %230, label %206

230:                                              ; preds = %228
  %231 = bitcast %"class.std::__1::vector.126"* %197 to i8**
  %232 = load i8*, i8** %231, align 8
  br label %233

233:                                              ; preds = %230, %201
  %234 = phi i8* [ %232, %230 ], [ %202, %201 ]
  store %"class.jxl::QuantEncoding"* %199, %"class.jxl::QuantEncoding"** %203, align 8
  tail call void @_ZdlPv(i8* %234) #12
  br label %235

235:                                              ; preds = %233, %196
  %236 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %237 = load float*, float** %236, align 8
  store float* null, float** %236, align 8
  %238 = icmp eq float* %237, null
  br i1 %238, label %245, label %239

239:                                              ; preds = %235
  %240 = bitcast float* %237 to i8*
  %241 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 0, i32 0, i32 1, i32 0, i32 0
  %242 = load void (i8*, i8*)*, void (i8*, i8*)** %241, align 8
  %243 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 4, i32 0, i32 0, i32 1, i32 0, i32 1
  %244 = load i8*, i8** %243, align 8
  tail call void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8* nonnull %240, void (i8*, i8*)* %242, i8* %244) #11
  br label %245

245:                                              ; preds = %235, %239
  %246 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 3, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %247 = load i8*, i8** %246, align 8
  store i8* null, i8** %246, align 8
  %248 = icmp eq i8* %247, null
  br i1 %248, label %250, label %249

249:                                              ; preds = %245
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %247) #11
  br label %250

250:                                              ; preds = %245, %249
  %251 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11FrameHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %251, align 8
  %252 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 19
  %253 = getelementptr inbounds %"class.std::__1::vector.114", %"class.std::__1::vector.114"* %252, i64 0, i32 0, i32 0
  %254 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %253, align 8
  %255 = icmp eq %"struct.jxl::BlendingInfo"* %254, null
  br i1 %255, label %273, label %256

256:                                              ; preds = %250
  %257 = bitcast %"struct.jxl::BlendingInfo"* %254 to i8*
  %258 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 19, i32 0, i32 1
  %259 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %258, align 8
  %260 = icmp eq %"struct.jxl::BlendingInfo"* %259, %254
  br i1 %260, label %271, label %261

261:                                              ; preds = %256, %261
  %262 = phi %"struct.jxl::BlendingInfo"* [ %263, %261 ], [ %259, %256 ]
  %263 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %262, i64 -1
  %264 = bitcast %"struct.jxl::BlendingInfo"* %263 to void (%"struct.jxl::BlendingInfo"*)***
  %265 = load void (%"struct.jxl::BlendingInfo"*)**, void (%"struct.jxl::BlendingInfo"*)*** %264, align 8
  %266 = load void (%"struct.jxl::BlendingInfo"*)*, void (%"struct.jxl::BlendingInfo"*)** %265, align 8
  tail call void %266(%"struct.jxl::BlendingInfo"* %263) #11
  %267 = icmp eq %"struct.jxl::BlendingInfo"* %263, %254
  br i1 %267, label %268, label %261

268:                                              ; preds = %261
  %269 = bitcast %"class.std::__1::vector.114"* %252 to i8**
  %270 = load i8*, i8** %269, align 8
  br label %271

271:                                              ; preds = %268, %256
  %272 = phi i8* [ %270, %268 ], [ %257, %256 ]
  store %"struct.jxl::BlendingInfo"* %254, %"struct.jxl::BlendingInfo"** %258, align 8
  tail call void @_ZdlPv(i8* %272) #12
  br label %273

273:                                              ; preds = %271, %250
  %274 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 16, i32 0, i32 0
  %275 = load i32*, i32** %274, align 8
  %276 = icmp eq i32* %275, null
  br i1 %276, label %282, label %277

277:                                              ; preds = %273
  %278 = ptrtoint i32* %275 to i64
  %279 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 16, i32 0, i32 1
  %280 = bitcast i32** %279 to i64*
  store i64 %278, i64* %280, align 8
  %281 = bitcast i32* %275 to i8*
  tail call void @_ZdlPv(i8* %281) #12
  br label %282

282:                                              ; preds = %277, %273
  %283 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 1, i32 11
  %284 = bitcast %"class.std::__1::basic_string"* %283 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %285 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %284, i64 0, i32 1, i32 0
  %286 = load i8, i8* %285, align 1
  %287 = icmp slt i8 %286, 0
  br i1 %287, label %288, label %291

288:                                              ; preds = %282
  %289 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %283, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %290 = load i8*, i8** %289, align 8
  tail call void @_ZdlPv(i8* %290) #12
  br label %291

291:                                              ; preds = %282, %288
  ret void

292:                                              ; preds = %20
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %22) #11
  br label %293

293:                                              ; preds = %292, %20
  %294 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 2, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %295 = load i8*, i8** %294, align 8
  store i8* null, i8** %294, align 8
  %296 = icmp eq i8* %295, null
  br i1 %296, label %298, label %297

297:                                              ; preds = %293
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %295) #11
  br label %298

298:                                              ; preds = %297, %293
  %299 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 2, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %300 = load i8*, i8** %299, align 8
  store i8* null, i8** %299, align 8
  %301 = icmp eq i8* %300, null
  br i1 %301, label %303, label %302

302:                                              ; preds = %298
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %300) #11
  br label %303

303:                                              ; preds = %302, %298
  %304 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 1, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %305 = load i8*, i8** %304, align 8
  store i8* null, i8** %304, align 8
  %306 = icmp eq i8* %305, null
  br i1 %306, label %308, label %307

307:                                              ; preds = %303
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %305) #11
  br label %308

308:                                              ; preds = %307, %303
  %309 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 1, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %310 = load i8*, i8** %309, align 8
  store i8* null, i8** %309, align 8
  %311 = icmp eq i8* %310, null
  br i1 %311, label %313, label %312

312:                                              ; preds = %308
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %310) #11
  br label %313

313:                                              ; preds = %312, %308
  %314 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 1, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %315 = load i8*, i8** %314, align 8
  store i8* null, i8** %314, align 8
  %316 = icmp eq i8* %315, null
  br i1 %316, label %318, label %317

317:                                              ; preds = %313
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %315) #11
  br label %318

318:                                              ; preds = %317, %313
  %319 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %320 = load i8*, i8** %319, align 8
  store i8* null, i8** %319, align 8
  %321 = icmp eq i8* %320, null
  br i1 %321, label %323, label %322

322:                                              ; preds = %318
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %320) #11
  br label %323

323:                                              ; preds = %322, %318
  %324 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %325 = load i8*, i8** %324, align 8
  store i8* null, i8** %324, align 8
  %326 = icmp eq i8* %325, null
  br i1 %326, label %328, label %327

327:                                              ; preds = %323
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %325) #11
  br label %328

328:                                              ; preds = %327, %323
  %329 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 16, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %330 = load i8*, i8** %329, align 8
  store i8* null, i8** %329, align 8
  %331 = icmp eq i8* %330, null
  br i1 %331, label %333, label %332

332:                                              ; preds = %328
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %330) #11
  br label %333

333:                                              ; preds = %332, %328
  %334 = getelementptr inbounds %"struct.jxl::PassesSharedState", %"struct.jxl::PassesSharedState"* %0, i64 0, i32 15, i32 2, i32 0, i32 0
  %335 = load i8*, i8** %334, align 8
  %336 = icmp eq i8* %335, null
  br i1 %336, label %28, label %24
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl18PassesEncoderState8PassDataD2Ev(%"struct.jxl::PassesEncoderState::PassData"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 2, i32 2, i32 0, i32 0
  %4 = load %"struct.jxl::HybridUintConfig"*, %"struct.jxl::HybridUintConfig"** %3, align 8
  %5 = icmp eq %"struct.jxl::HybridUintConfig"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"struct.jxl::HybridUintConfig"* %4 to i64
  %8 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 2, i32 2, i32 0, i32 1
  %9 = bitcast %"struct.jxl::HybridUintConfig"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"struct.jxl::HybridUintConfig"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #12
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"struct.jxl::EntropyEncodingData", %"struct.jxl::EntropyEncodingData"* %2, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.std::__1::vector.228"*, %"class.std::__1::vector.228"** %12, align 8
  %14 = icmp eq %"class.std::__1::vector.228"* %13, null
  br i1 %14, label %56, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.std::__1::vector.228"* %13 to i8*
  %17 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %18 = load %"class.std::__1::vector.228"*, %"class.std::__1::vector.228"** %17, align 8
  %19 = icmp eq %"class.std::__1::vector.228"* %18, %13
  br i1 %19, label %54, label %20

20:                                               ; preds = %15, %49
  %21 = phi %"class.std::__1::vector.228"* [ %22, %49 ], [ %18, %15 ]
  %22 = getelementptr inbounds %"class.std::__1::vector.228", %"class.std::__1::vector.228"* %21, i64 -1
  %23 = getelementptr inbounds %"class.std::__1::vector.228", %"class.std::__1::vector.228"* %22, i64 0, i32 0, i32 0
  %24 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %23, align 8
  %25 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %24, null
  br i1 %25, label %49, label %26

26:                                               ; preds = %20
  %27 = bitcast %"struct.jxl::ANSEncSymbolInfo"* %24 to i8*
  %28 = getelementptr inbounds %"class.std::__1::vector.228", %"class.std::__1::vector.228"* %21, i64 -1, i32 0, i32 1
  %29 = load %"struct.jxl::ANSEncSymbolInfo"*, %"struct.jxl::ANSEncSymbolInfo"** %28, align 8
  %30 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %29, %24
  br i1 %30, label %47, label %31

31:                                               ; preds = %26, %42
  %32 = phi %"struct.jxl::ANSEncSymbolInfo"* [ %33, %42 ], [ %29, %26 ]
  %33 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %32, i64 -1
  %34 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %32, i64 -1, i32 2, i32 0, i32 0
  %35 = load i16*, i16** %34, align 8
  %36 = icmp eq i16* %35, null
  br i1 %36, label %42, label %37

37:                                               ; preds = %31
  %38 = ptrtoint i16* %35 to i64
  %39 = getelementptr inbounds %"struct.jxl::ANSEncSymbolInfo", %"struct.jxl::ANSEncSymbolInfo"* %32, i64 -1, i32 2, i32 0, i32 1
  %40 = bitcast i16** %39 to i64*
  store i64 %38, i64* %40, align 8
  %41 = bitcast i16* %35 to i8*
  tail call void @_ZdlPv(i8* %41) #12
  br label %42

42:                                               ; preds = %37, %31
  %43 = icmp eq %"struct.jxl::ANSEncSymbolInfo"* %33, %24
  br i1 %43, label %44, label %31

44:                                               ; preds = %42
  %45 = bitcast %"class.std::__1::vector.228"* %22 to i8**
  %46 = load i8*, i8** %45, align 8
  br label %47

47:                                               ; preds = %44, %26
  %48 = phi i8* [ %46, %44 ], [ %27, %26 ]
  store %"struct.jxl::ANSEncSymbolInfo"* %24, %"struct.jxl::ANSEncSymbolInfo"** %28, align 8
  tail call void @_ZdlPv(i8* %48) #12
  br label %49

49:                                               ; preds = %47, %20
  %50 = icmp eq %"class.std::__1::vector.228"* %22, %13
  br i1 %50, label %51, label %20

51:                                               ; preds = %49
  %52 = bitcast %"struct.jxl::EntropyEncodingData"* %2 to i8**
  %53 = load i8*, i8** %52, align 8
  br label %54

54:                                               ; preds = %51, %15
  %55 = phi i8* [ %53, %51 ], [ %16, %15 ]
  store %"class.std::__1::vector.228"* %13, %"class.std::__1::vector.228"** %17, align 8
  tail call void @_ZdlPv(i8* %55) #12
  br label %56

56:                                               ; preds = %11, %54
  %57 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 1, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %64, label %60

60:                                               ; preds = %56
  %61 = ptrtoint i8* %58 to i64
  %62 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 1, i32 0, i32 1
  %63 = bitcast i8** %62 to i64*
  store i64 %61, i64* %63, align 8
  tail call void @_ZdlPv(i8* nonnull %58) #12
  br label %64

64:                                               ; preds = %56, %60
  %65 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 0, i32 0, i32 0
  %66 = load %"class.std::__1::vector.220"*, %"class.std::__1::vector.220"** %65, align 8
  %67 = icmp eq %"class.std::__1::vector.220"* %66, null
  br i1 %67, label %91, label %68

68:                                               ; preds = %64
  %69 = bitcast %"class.std::__1::vector.220"* %66 to i8*
  %70 = getelementptr inbounds %"struct.jxl::PassesEncoderState::PassData", %"struct.jxl::PassesEncoderState::PassData"* %0, i64 0, i32 0, i32 0, i32 1
  %71 = load %"class.std::__1::vector.220"*, %"class.std::__1::vector.220"** %70, align 8
  %72 = icmp eq %"class.std::__1::vector.220"* %71, %66
  br i1 %72, label %89, label %73

73:                                               ; preds = %68, %84
  %74 = phi %"class.std::__1::vector.220"* [ %75, %84 ], [ %71, %68 ]
  %75 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %74, i64 -1
  %76 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %75, i64 0, i32 0, i32 0
  %77 = load %"struct.jxl::Token"*, %"struct.jxl::Token"** %76, align 8
  %78 = icmp eq %"struct.jxl::Token"* %77, null
  br i1 %78, label %84, label %79

79:                                               ; preds = %73
  %80 = ptrtoint %"struct.jxl::Token"* %77 to i64
  %81 = getelementptr inbounds %"class.std::__1::vector.220", %"class.std::__1::vector.220"* %74, i64 -1, i32 0, i32 1
  %82 = bitcast %"struct.jxl::Token"** %81 to i64*
  store i64 %80, i64* %82, align 8
  %83 = bitcast %"struct.jxl::Token"* %77 to i8*
  tail call void @_ZdlPv(i8* %83) #12
  br label %84

84:                                               ; preds = %79, %73
  %85 = icmp eq %"class.std::__1::vector.220"* %75, %66
  br i1 %85, label %86, label %73

86:                                               ; preds = %84
  %87 = bitcast %"struct.jxl::PassesEncoderState::PassData"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %86, %68
  %90 = phi i8* [ %88, %86 ], [ %69, %68 ]
  store %"class.std::__1::vector.220"* %66, %"class.std::__1::vector.220"** %70, align 8
  tail call void @_ZdlPv(i8* %90) #12
  br label %91

91:                                               ; preds = %64, %89
  ret void
}

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

declare void @_ZN3hwy16FreeAlignedBytesEPKvPFvPvS2_ES2_(i8*, void (i8*, i8*)*, i8*) local_unnamed_addr #2

declare void @_ZNK3jxl11ImageBundle14VerifyMetadataEv(%"class.jxl::ImageBundle"*) local_unnamed_addr #2

declare i32 @_ZN3jxl10SizeHeader3SetEmm(%"class.jxl::SizeHeader"*, i64, i64) local_unnamed_addr #2

declare void @_ZN3jxl13ColorEncoding15DecideIfWantICCEv(%"struct.jxl::ColorEncoding"*) local_unnamed_addr #2

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl16ExtraChannelInfoENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(%"class.std::__1::vector.78"*, %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %2 to i64
  %5 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %1 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv exact i64 %6, 96
  %8 = getelementptr inbounds %"class.std::__1::vector.78", %"class.std::__1::vector.78"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"struct.jxl::ExtraChannelInfo"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.78"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 96
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"struct.jxl::ExtraChannelInfo"*
  br i1 %15, label %135, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.78", %"class.std::__1::vector.78"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"struct.jxl::ExtraChannelInfo"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = sdiv exact i64 %21, 96
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %1, i64 %22
  %25 = select i1 %23, %"struct.jxl::ExtraChannelInfo"* %24, %"struct.jxl::ExtraChannelInfo"* %2
  %26 = icmp eq %"struct.jxl::ExtraChannelInfo"* %25, %1
  br i1 %26, label %78, label %27

27:                                               ; preds = %17, %72
  %28 = phi %"struct.jxl::ExtraChannelInfo"* [ %76, %72 ], [ %16, %17 ]
  %29 = phi %"struct.jxl::ExtraChannelInfo"* [ %75, %72 ], [ %1, %17 ]
  %30 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %28, i64 0, i32 1
  %31 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %29, i64 0, i32 1
  %32 = bitcast i8* %31 to i64*
  %33 = bitcast i8* %30 to i64*
  %34 = load i64, i64* %32, align 8
  store i64 %34, i64* %33, align 8
  %35 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %28, i64 0, i32 3, i32 1
  %36 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %29, i64 0, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 12, i1 false) #11
  %37 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %29, i64 0, i32 4
  %38 = load i32, i32* %37, align 8
  %39 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %28, i64 0, i32 4
  store i32 %38, i32* %39, align 8
  %40 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %28, i64 0, i32 5
  %41 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %29, i64 0, i32 5
  %42 = icmp eq %"struct.jxl::ExtraChannelInfo"* %28, %29
  br i1 %42, label %72, label %43

43:                                               ; preds = %27
  %44 = bitcast %"class.std::__1::basic_string"* %40 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %45 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %44, i64 0, i32 1, i32 0
  %46 = load i8, i8* %45, align 1
  %47 = icmp slt i8 %46, 0
  %48 = bitcast %"class.std::__1::basic_string"* %41 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %47, label %62, label %52

52:                                               ; preds = %43
  br i1 %51, label %56, label %53

53:                                               ; preds = %52
  %54 = bitcast %"class.std::__1::basic_string"* %40 to i8*
  %55 = bitcast %"class.std::__1::basic_string"* %41 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 24, i1 false) #11
  br label %72

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %29, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"* %40, i8* %58, i64 %60) #11
  br label %72

62:                                               ; preds = %43
  %63 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %29, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = bitcast %"class.std::__1::basic_string"* %41 to i8*
  %68 = zext i8 %50 to i64
  %69 = select i1 %51, i8* %64, i8* %67
  %70 = select i1 %51, i64 %66, i64 %68
  %71 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"* %40, i8* %69, i64 %70) #11
  br label %72

72:                                               ; preds = %62, %56, %53, %27
  %73 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %28, i64 0, i32 6
  %74 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %29, i64 0, i32 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %73, i8* align 8 %74, i64 24, i1 false) #11
  %75 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %29, i64 1
  %76 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %28, i64 1
  %77 = icmp eq %"struct.jxl::ExtraChannelInfo"* %75, %25
  br i1 %77, label %78, label %27

78:                                               ; preds = %72, %17
  %79 = phi %"struct.jxl::ExtraChannelInfo"* [ %16, %17 ], [ %76, %72 ]
  br i1 %23, label %80, label %124

80:                                               ; preds = %78
  %81 = load i64, i64* %19, align 8
  %82 = icmp eq %"struct.jxl::ExtraChannelInfo"* %25, %2
  br i1 %82, label %122, label %83

83:                                               ; preds = %80
  %84 = inttoptr i64 %81 to %"struct.jxl::ExtraChannelInfo"*
  br label %85

85:                                               ; preds = %114, %83
  %86 = phi %"struct.jxl::ExtraChannelInfo"* [ %118, %114 ], [ %84, %83 ]
  %87 = phi %"struct.jxl::ExtraChannelInfo"* [ %117, %114 ], [ %24, %83 ]
  %88 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %86, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %88, align 8
  %89 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %86, i64 0, i32 1
  %90 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %87, i64 0, i32 1
  %91 = bitcast i8* %90 to i64*
  %92 = bitcast i8* %89 to i64*
  %93 = load i64, i64* %91, align 8
  store i64 %93, i64* %92, align 8
  %94 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %86, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %94, align 8
  %95 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %86, i64 0, i32 3, i32 1
  %96 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %87, i64 0, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %96, i64 12, i1 false) #11
  %97 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %86, i64 0, i32 4
  %98 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %87, i64 0, i32 4
  %99 = load i32, i32* %98, align 8
  store i32 %99, i32* %97, align 8
  %100 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %86, i64 0, i32 5
  %101 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %87, i64 0, i32 5
  %102 = bitcast %"class.std::__1::basic_string"* %101 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %103 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %102, i64 0, i32 1, i32 0
  %104 = load i8, i8* %103, align 1
  %105 = icmp slt i8 %104, 0
  br i1 %105, label %109, label %106

106:                                              ; preds = %85
  %107 = bitcast %"class.std::__1::basic_string"* %100 to i8*
  %108 = bitcast %"class.std::__1::basic_string"* %101 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %107, i8* align 8 %108, i64 24, i1 false) #11
  br label %114

109:                                              ; preds = %85
  %110 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %101, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  %112 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %87, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %113 = load i64, i64* %112, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %100, i8* %111, i64 %113) #11
  br label %114

114:                                              ; preds = %109, %106
  %115 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %86, i64 0, i32 6
  %116 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %87, i64 0, i32 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %116, i64 24, i1 false) #11
  %117 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %87, i64 1
  %118 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %86, i64 1
  %119 = icmp eq %"struct.jxl::ExtraChannelInfo"* %117, %2
  br i1 %119, label %120, label %85

120:                                              ; preds = %114
  %121 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %118 to i64
  br label %122

122:                                              ; preds = %80, %120
  %123 = phi i64 [ %81, %80 ], [ %121, %120 ]
  store i64 %123, i64* %19, align 8
  br label %218

124:                                              ; preds = %78
  %125 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %18, align 8
  %126 = icmp eq %"struct.jxl::ExtraChannelInfo"* %125, %79
  br i1 %126, label %134, label %127

127:                                              ; preds = %124, %127
  %128 = phi %"struct.jxl::ExtraChannelInfo"* [ %129, %127 ], [ %125, %124 ]
  %129 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %128, i64 -1
  %130 = bitcast %"struct.jxl::ExtraChannelInfo"* %129 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %131 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %130, align 8
  %132 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %131, align 8
  tail call void %132(%"struct.jxl::ExtraChannelInfo"* %129) #11
  %133 = icmp eq %"struct.jxl::ExtraChannelInfo"* %129, %79
  br i1 %133, label %134, label %127

134:                                              ; preds = %127, %124
  store %"struct.jxl::ExtraChannelInfo"* %79, %"struct.jxl::ExtraChannelInfo"** %18, align 8
  br label %218

135:                                              ; preds = %3
  %136 = icmp eq i64 %12, 0
  br i1 %136, label %155, label %137

137:                                              ; preds = %135
  %138 = inttoptr i64 %12 to i8*
  %139 = getelementptr inbounds %"class.std::__1::vector.78", %"class.std::__1::vector.78"* %0, i64 0, i32 0, i32 1
  %140 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %139, align 8
  %141 = icmp eq %"struct.jxl::ExtraChannelInfo"* %140, %16
  br i1 %141, label %152, label %142

142:                                              ; preds = %137, %142
  %143 = phi %"struct.jxl::ExtraChannelInfo"* [ %144, %142 ], [ %140, %137 ]
  %144 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %143, i64 -1
  %145 = bitcast %"struct.jxl::ExtraChannelInfo"* %144 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %146 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %145, align 8
  %147 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %146, align 8
  tail call void %147(%"struct.jxl::ExtraChannelInfo"* %144) #11
  %148 = icmp eq %"struct.jxl::ExtraChannelInfo"* %144, %16
  br i1 %148, label %149, label %142

149:                                              ; preds = %142
  %150 = bitcast %"class.std::__1::vector.78"* %0 to i8**
  %151 = load i8*, i8** %150, align 8
  br label %152

152:                                              ; preds = %149, %137
  %153 = phi i8* [ %151, %149 ], [ %138, %137 ]
  store %"struct.jxl::ExtraChannelInfo"* %16, %"struct.jxl::ExtraChannelInfo"** %139, align 8
  tail call void @_ZdlPv(i8* %153) #12
  %154 = bitcast %"class.std::__1::vector.78"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %154, i8 0, i64 24, i1 false) #11
  br label %155

155:                                              ; preds = %135, %152
  %156 = phi i64 [ %10, %135 ], [ 0, %152 ]
  %157 = icmp ugt i64 %7, 192153584101141162
  br i1 %157, label %158, label %160

158:                                              ; preds = %155
  %159 = bitcast %"class.std::__1::vector.78"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %159) #13
  unreachable

160:                                              ; preds = %155
  %161 = sdiv exact i64 %156, 96
  %162 = icmp ult i64 %161, 96076792050570581
  br i1 %162, label %163, label %167

163:                                              ; preds = %160
  %164 = shl nsw i64 %161, 1
  %165 = icmp ult i64 %164, %7
  %166 = select i1 %165, i64 %7, i64 %164
  br label %167

167:                                              ; preds = %163, %160
  %168 = phi i64 [ %166, %163 ], [ 192153584101141162, %160 ]
  %169 = mul i64 %168, 96
  %170 = tail call i8* @_Znwm(i64 %169) #12
  %171 = bitcast i8* %170 to %"struct.jxl::ExtraChannelInfo"*
  %172 = getelementptr inbounds %"class.std::__1::vector.78", %"class.std::__1::vector.78"* %0, i64 0, i32 0, i32 1
  %173 = bitcast %"struct.jxl::ExtraChannelInfo"** %172 to i8**
  store i8* %170, i8** %173, align 8
  %174 = bitcast %"class.std::__1::vector.78"* %0 to i8**
  store i8* %170, i8** %174, align 8
  %175 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %171, i64 %168
  store %"struct.jxl::ExtraChannelInfo"* %175, %"struct.jxl::ExtraChannelInfo"** %8, align 8
  %176 = bitcast %"struct.jxl::ExtraChannelInfo"** %172 to i64*
  %177 = ptrtoint i8* %170 to i64
  %178 = icmp eq %"struct.jxl::ExtraChannelInfo"* %1, %2
  br i1 %178, label %216, label %179

179:                                              ; preds = %167, %208
  %180 = phi %"struct.jxl::ExtraChannelInfo"* [ %212, %208 ], [ %171, %167 ]
  %181 = phi %"struct.jxl::ExtraChannelInfo"* [ %211, %208 ], [ %1, %167 ]
  %182 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %180, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %182, align 8
  %183 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %180, i64 0, i32 1
  %184 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %181, i64 0, i32 1
  %185 = bitcast i8* %184 to i64*
  %186 = bitcast i8* %183 to i64*
  %187 = load i64, i64* %185, align 8
  store i64 %187, i64* %186, align 8
  %188 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %180, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %188, align 8
  %189 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %180, i64 0, i32 3, i32 1
  %190 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %181, i64 0, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %189, i8* align 8 %190, i64 12, i1 false) #11
  %191 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %180, i64 0, i32 4
  %192 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %181, i64 0, i32 4
  %193 = load i32, i32* %192, align 8
  store i32 %193, i32* %191, align 8
  %194 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %180, i64 0, i32 5
  %195 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %181, i64 0, i32 5
  %196 = bitcast %"class.std::__1::basic_string"* %195 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %197 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %196, i64 0, i32 1, i32 0
  %198 = load i8, i8* %197, align 1
  %199 = icmp slt i8 %198, 0
  br i1 %199, label %203, label %200

200:                                              ; preds = %179
  %201 = bitcast %"class.std::__1::basic_string"* %194 to i8*
  %202 = bitcast %"class.std::__1::basic_string"* %195 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %201, i8* align 8 %202, i64 24, i1 false) #11
  br label %208

203:                                              ; preds = %179
  %204 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %195, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %205 = load i8*, i8** %204, align 8
  %206 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %181, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %207 = load i64, i64* %206, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %194, i8* %205, i64 %207) #11
  br label %208

208:                                              ; preds = %203, %200
  %209 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %180, i64 0, i32 6
  %210 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %181, i64 0, i32 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %209, i8* align 8 %210, i64 24, i1 false) #11
  %211 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %181, i64 1
  %212 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %180, i64 1
  %213 = icmp eq %"struct.jxl::ExtraChannelInfo"* %211, %2
  br i1 %213, label %214, label %179

214:                                              ; preds = %208
  %215 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %212 to i64
  br label %216

216:                                              ; preds = %167, %214
  %217 = phi i64 [ %177, %167 ], [ %215, %214 ]
  store i64 %217, i64* %176, align 8
  br label %218

218:                                              ; preds = %122, %134, %216
  ret void
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb1EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_no_aliasILb0EEERS5_PKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #10

declare void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"*) unnamed_addr #2

declare void @_ZN3jxl13ImageMetadataC1Ev(%"struct.jxl::ImageMetadata"*) unnamed_addr #2

declare void @_ZN3jxl10SizeHeaderC1Ev(%"class.jxl::SizeHeader"*) unnamed_addr #2

declare void @_ZN3jxl19CustomTransformDataC1Ev(%"struct.jxl::CustomTransformData"*) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { noreturn }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3jxl21QuantEncodingInternal7LibraryEh: argument 0"}
!5 = distinct !{!5, !"_ZN3jxl21QuantEncodingInternal7LibraryEh"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN3jxl13QuantEncoding7LibraryEh: argument 0"}
!8 = distinct !{!8, !"_ZN3jxl13QuantEncoding7LibraryEh"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3jxl21QuantEncodingInternal7LibraryEh: argument 0"}
!11 = distinct !{!11, !"_ZN3jxl21QuantEncodingInternal7LibraryEh"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN3jxl13QuantEncoding7LibraryEh: argument 0"}
!14 = distinct !{!14, !"_ZN3jxl13QuantEncoding7LibraryEh"}
