; ModuleID = '../../third_party/libgav1/src/src/tile/bitstream/palette.cc'
source_filename = "../../third_party/libgav1/src/src/tile/bitstream/palette.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.std::nothrow_t" = type { i8 }
%"class.libgav1::Tile" = type { i32, i32, i32, i8*, i64, i32, i32, i32, i32, i32, i32, i8, [3 x i8], [3 x i8], [3 x i32], [3 x i32], [8 x [4 x [8 x [2 x i8]]]], i8, %"struct.std::__1::array", %"struct.std::__1::array.1", %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuFrameHeader"*, %"struct.std::__1::array.14"*, %"struct.std::__1::array.15"*, %"struct.libgav1::TemporalMotionField"*, %"struct.std::__1::array.21"*, %"struct.std::__1::array.40"*, %"struct.std::__1::array.41"*, %"class.libgav1::DaalaBitReader", [8 x i8], %"struct.libgav1::SymbolDecoderContext", %"struct.libgav1::SymbolDecoderContext"*, %"class.libgav1::SegmentationMap"*, %"struct.libgav1::dsp::Dsp"*, %"class.libgav1::PostFilter"*, %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::Quantizer", %"class.std::__1::unique_ptr.95", %"class.libgav1::Array2D.98", i64, i32, [3 x %"class.libgav1::Array2DView"], %"class.libgav1::RefCountedBuffer"*, %"class.libgav1::Array2D.43"*, %"class.libgav1::Array2D.51"*, [24 x i8], %"struct.std::__1::array.125", %"class.libgav1::ThreadPool"*, %"struct.libgav1::Tile::ThreadingParameters", %"class.libgav1::ResidualBufferPool"*, %"class.libgav1::TileScratchBufferPool"*, %"class.libgav1::BlockingCounterImpl"*, i8, %"class.std::__1::unique_ptr.78", [32 x [32 x i8]], [4 x i8], i8, i8, i8, %"struct.std::__1::array.141"*, %"struct.std::__1::array.142", [24 x i8] }
%"struct.std::__1::array" = type { [2 x %"class.libgav1::Array2D"] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"struct.std::__1::array.1" = type { [2 x %"class.libgav1::Array2D.2"] }
%"class.libgav1::Array2D.2" = type { %"class.std::__1::unique_ptr.3", i64, i64, %"class.libgav1::Array2DView.9" }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i8* }
%"class.libgav1::Array2DView.9" = type { i32, i32, i8* }
%"struct.libgav1::ObuSequenceHeader" = type { i8, i8, i8, i32, [32 x i32], [32 x %"struct.libgav1::BitStreamLevel"], [32 x i8], i8, i8, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"struct.libgav1::ColorConfig", i8, %"struct.libgav1::TimingInfo", i8, %"struct.libgav1::DecoderModelInfo", [32 x i8], i8, [32 x i8], i8, %"struct.libgav1::OperatingParameters" }
%"struct.libgav1::BitStreamLevel" = type { i8, i8 }
%"struct.libgav1::ColorConfig" = type { i8, i8, i32, i32, i32, i32, i8, i8, i32, i8 }
%"struct.libgav1::TimingInfo" = type { i32, i32, i8, i32 }
%"struct.libgav1::DecoderModelInfo" = type { i8, i32, i8, i8 }
%"struct.libgav1::OperatingParameters" = type { [32 x i32], [32 x i32], [32 x i8] }
%"struct.libgav1::ObuFrameHeader" = type { i16, i16, i64, [7 x i16], i32, i32, i32, i32, i32, i32, i32, %"struct.libgav1::LoopRestoration", [32 x i32], i32, %"struct.std::__1::array.10", %"struct.libgav1::TileInfo", %"struct.libgav1::QuantizerParameters", %"struct.libgav1::Segmentation", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], i8, i8, i8, %"struct.libgav1::Delta", %"struct.libgav1::Delta", [7 x i8], [8 x i8], %"struct.libgav1::LoopFilter", %"struct.libgav1::Cdef", %"struct.libgav1::FilmGrainParams" }
%"struct.libgav1::LoopRestoration" = type { [3 x i8], [3 x i32] }
%"struct.std::__1::array.10" = type { [8 x %"struct.libgav1::GlobalMotion"] }
%"struct.libgav1::GlobalMotion" = type { i8, [6 x i32], i16, i16, i16, i16 }
%"struct.libgav1::TileInfo" = type { i8, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32, [65 x i32], [65 x i32], i16, i8 }
%"struct.libgav1::QuantizerParameters" = type { i8, [3 x i8], [3 x i8], i8, [3 x i8] }
%"struct.libgav1::Segmentation" = type { i8, i8, i8, i8, i8, i8, [8 x [8 x i8]], [8 x [8 x i16]], [8 x i8], [8 x i8] }
%"struct.libgav1::Delta" = type { i8, i8, i8 }
%"struct.libgav1::LoopFilter" = type { %"struct.std::__1::array.11", i8, i8, i8, %"struct.std::__1::array.12", %"struct.std::__1::array.13" }
%"struct.std::__1::array.11" = type { [4 x i8] }
%"struct.std::__1::array.12" = type { [8 x i8] }
%"struct.std::__1::array.13" = type { [2 x i8] }
%"struct.libgav1::Cdef" = type { i8, i8, [8 x i8], [8 x i8], [8 x i8], [8 x i8] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.std::__1::array.14" = type { [8 x i8] }
%"struct.std::__1::array.15" = type { [8 x %"class.std::__1::shared_ptr"] }
%"class.std::__1::shared_ptr" = type { %"class.libgav1::RefCountedBuffer"*, %"class.std::__1::__shared_weak_count"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.31", %"class.libgav1::Array2D.2" }
%"class.libgav1::Array2D.31" = type { %"class.std::__1::unique_ptr.32", i64, i64, %"class.libgav1::Array2DView.39" }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon.35 }
%union.anon.35 = type { i32 }
%"class.libgav1::Array2DView.39" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.std::__1::array.21" = type { [8 x i8] }
%"struct.std::__1::array.40" = type opaque
%"struct.std::__1::array.41" = type opaque
%"class.libgav1::DaalaBitReader" = type { %"class.libgav1::BitReader", i8*, i8*, i8*, i8, i32, i32, i64 }
%"class.libgav1::BitReader" = type { i32 (...)** }
%"struct.libgav1::SymbolDecoderContext" = type { [5 x [4 x [11 x i16]]], [8 x i8], [3 x [9 x i16]], [10 x i8], [3 x [3 x i16]], [14 x i8], [3 x [3 x i16]], [14 x i8], [3 x [3 x i16]], [14 x i8], [5 x i16], [22 x i8], [5 x i16], [22 x i8], [4 x [5 x i16]], [24 x i8], [3 x i16], [26 x i8], [5 x [5 x [14 x i16]]], [4 x i8], [4 x [14 x i16]], [16 x i8], [8 x [8 x i16]], [2 x [13 x [15 x i16]]], [20 x i8], [9 x i16], [14 x i8], [6 x [17 x i16]], [20 x i8], [22 x [3 x i16]], [28 x i8], [6 x i16], [20 x i8], [4 x [3 x [4 x i16]]], [21 x [3 x i16]], [2 x i8], [5 x [13 x [3 x i16]]], [26 x i8], [3 x [4 x [17 x i16]]], [8 x i8], [2 x [4 x [13 x [17 x i16]]]], [16 x i8], [2 x [2 x [6 x i16]]], [16 x i8], [2 x [2 x [7 x i16]]], [8 x i8], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [24 x i8], [2 x [2 x [10 x i16]]], [16 x i8], [2 x [11 x i16]], [20 x i8], [2 x [12 x i16]], [16 x i8], [5 x [2 x [9 x [3 x i16]]]], [4 x i8], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [24 x i8], [5 x [2 x [21 x [5 x i16]]]], [12 x i8], [2 x [3 x [3 x i16]]], [28 x i8], [4 x i16], [24 x i8], [3 x i16], [26 x i8], [3 x i16], [26 x i8], [7 x [3 x [3 x i16]]], [2 x i8], [7 x [8 x i16]], [16 x i8], [2 x [3 x i16]], [20 x i8], [7 x [8 x i16]], [16 x i8], [2 x [7 x [5 x [9 x i16]]]], [20 x i8], [4 x [3 x i16]], [8 x i8], [5 x [3 x i16]], [2 x i8], [5 x [3 x i16]], [2 x i8], [2 x [3 x [3 x [3 x i16]]]], [20 x i8], [3 x [2 x [3 x i16]]], [28 x i8], [3 x [6 x [3 x i16]]], [20 x i8], [8 x [9 x i16]], [16 x i8], [6 x [3 x i16]], [28 x i8], [2 x [3 x i16]], [20 x i8], [6 x [3 x i16]], [28 x i8], [3 x [3 x i16]], [14 x i8], [3 x [3 x i16]], [14 x i8], [3 x [5 x i16]], [2 x i8], [22 x [3 x i16]], [28 x i8], [22 x [17 x i16]], [20 x i8], [22 x [3 x i16]], [28 x i8], [22 x [4 x i16]], [16 x i8], [6 x [3 x i16]], [28 x i8], [6 x [3 x i16]], [28 x i8], [22 x [3 x i16]], [28 x i8], [16 x [4 x i16]], [2 x [5 x i16]], [12 x i8], [2 x [2 x [3 x i16]]], [8 x i8], [2 x [2 x [12 x i16]]], [2 x [2 x [3 x i16]]], [8 x i8], [2 x [2 x [2 x [5 x i16]]]], [16 x i8], [2 x [2 x [3 x i16]]], [8 x i8], [2 x [2 x [10 x [3 x i16]]]], [16 x i8], [2 x [2 x [5 x i16]]], [24 x i8], [2 x [2 x [3 x i16]]], [8 x i8] }
%"class.libgav1::SegmentationMap" = type { i32, i32, %"class.std::__1::unique_ptr.3", %"class.libgav1::Array2DView.9" }
%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array.21", %"struct.std::__1::array.12", %"struct.std::__1::array.12", %"struct.std::__1::array.14", %"struct.std::__1::array.22", %"class.libgav1::Array2D.23", %"class.libgav1::Array2D.31" }
%"struct.std::__1::array.22" = type { [8 x i16] }
%"class.libgav1::Array2D.23" = type { %"class.std::__1::unique_ptr.24", i64, i64, %"class.libgav1::Array2DView.30" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i8* }
%"class.libgav1::Array2DView.30" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }
%"class.libgav1::PostFilter" = type <{ [2 x { i64, i64 }], %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::LoopRestoration"*, %"struct.libgav1::dsp::Dsp"*, i32, i32, i32, i32, i8, [3 x i8], [3 x i8], i8, i32, [4 x i8], i8*, i8*, i8, [8 x [4 x [8 x [2 x i8]]]], [3 x i8], [3 x %struct.anon.42], %"class.libgav1::Array2D.43"*, %"class.libgav1::Array2D.51"*, %"class.libgav1::LoopRestorationInfo"*, [2 x i8*], %"class.libgav1::YuvBuffer"*, %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"*, [3 x i8*], [3 x i8*], [3 x i8*], [3 x i8*], %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"*, i8, [7 x i8], %"class.libgav1::ThreadPool"*, i32, [9248 x i16], [4 x i8] }>
%struct.anon.42 = type { i32, i32, i32 }
%"class.libgav1::LoopRestorationInfo" = type { [3 x %"struct.libgav1::RestorationUnitInfo"*], %"class.libgav1::DynamicBuffer", [3 x i8], %"struct.libgav1::LoopRestoration"*, i8, i8, [3 x i32], [3 x i32], [3 x i32] }
%"class.libgav1::DynamicBuffer" = type { %"class.std::__1::unique_ptr.59", i64 }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"struct.libgav1::RestorationUnitInfo"* }
%"class.libgav1::YuvBuffer" = type <{ i32, i8, [3 x i8], i32, i32, i32, i32, [3 x i32], [3 x i32], [3 x i32], [3 x i32], [3 x i32], [4 x i8], [3 x i8*], %"class.std::__1::unique_ptr", i64, i8, i8, [6 x i8] }>
%"class.libgav1::BlockParametersHolder" = type { i32, i32, %"class.libgav1::DynamicBuffer.65", %"struct.std::__1::atomic", %"class.libgav1::Array2D.74" }
%"class.libgav1::DynamicBuffer.65" = type { %"class.std::__1::unique_ptr.66", i64 }
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.std::__1::unique_ptr.69"* }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"struct.libgav1::BlockParameters"* }
%"struct.libgav1::BlockParameters" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x i8], [4 x i8], %"union.libgav1::CompoundMotionVector", %"struct.libgav1::PaletteModeInfo", %"class.std::__1::unique_ptr.78" }
%"struct.libgav1::PaletteModeInfo" = type { [2 x i8], [3 x [8 x i16]] }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.73" }
%"struct.std::__1::__atomic_base.73" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.libgav1::Array2D.74" = type { %"class.std::__1::unique_ptr.75", i64, i64, %"class.libgav1::Array2DView.88" }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.libgav1::BlockParameters"** }
%"class.libgav1::Array2DView.88" = type { i32, i32, %"struct.libgav1::BlockParameters"** }
%"class.libgav1::Quantizer" = type { %"struct.libgav1::QuantizerParameters"*, i16*, i16* }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.libgav1::Array2D.98" = type { %"class.std::__1::unique_ptr.99", i64, i64, %"class.libgav1::Array2DView.124" }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.std::__1::unique_ptr.102"* }
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"class.libgav1::ResidualBuffer"* }
%"class.libgav1::ResidualBuffer" = type { %"class.std::__1::unique_ptr.95", %"class.libgav1::Queue", %"class.libgav1::Queue.111", %"class.libgav1::ResidualBuffer"* }
%"class.libgav1::Queue" = type { %"class.std::__1::unique_ptr.105", i64, i64, i64, i64 }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.libgav1::TransformParameters"* }
%"struct.libgav1::TransformParameters" = type { i8, i32 }
%"class.libgav1::Queue.111" = type { %"class.std::__1::unique_ptr.112", i64, i64, i64, i64 }
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"struct.libgav1::PartitionTreeNode"* }
%"struct.libgav1::PartitionTreeNode" = type <{ i32, i32, i8, [3 x i8] }>
%"class.libgav1::Array2DView.124" = type { i32, i32, %"class.std::__1::unique_ptr.102"* }
%"class.libgav1::RefCountedBuffer" = type { %"class.libgav1::BufferPool"*, i8, i8*, %"class.libgav1::YuvBuffer", i8, %"class.std::__1::mutex", i8, i32, %"class.std::__1::condition_variable", %"class.std::__1::condition_variable", %"class.std::__1::condition_variable", i8, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.libgav1::SegmentationMap", %"struct.std::__1::array.10", [8 x i8], %"struct.libgav1::SymbolDecoderContext", %"struct.std::__1::array.12", %"struct.std::__1::array.13", %"struct.libgav1::Segmentation", %"struct.libgav1::FilmGrainParams", %"struct.libgav1::ReferenceInfo", [16 x i8] }
%"class.libgav1::BufferPool" = type { %"class.std::__1::mutex", %"class.libgav1::Vector", %"class.libgav1::InternalFrameBufferList", i32 (i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.Libgav1FrameBuffer*)*, void (i8*, i8*)*, i8* }
%"class.libgav1::Vector" = type { %"class.libgav1::internal::VectorBase" }
%"class.libgav1::internal::VectorBase" = type { %"class.libgav1::RefCountedBuffer"**, i64, i64 }
%"class.libgav1::InternalFrameBufferList" = type { %"class.libgav1::Vector.16" }
%"class.libgav1::Vector.16" = type { %"class.libgav1::internal::VectorBase.17" }
%"class.libgav1::internal::VectorBase.17" = type { %"class.std::__1::unique_ptr.18"*, i64, i64 }
%"class.std::__1::unique_ptr.18" = type opaque
%struct.Libgav1FrameBuffer = type { [3 x i8*], [3 x i32], i8* }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::condition_variable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.19, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.19 = type { i64 }
%"class.libgav1::Array2D.43" = type { %"class.std::__1::unique_ptr.44", i64, i64, %"class.libgav1::Array2DView.50" }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { i16* }
%"class.libgav1::Array2DView.50" = type { i32, i32, i16* }
%"class.libgav1::Array2D.51" = type { %"class.std::__1::unique_ptr.52", i64, i64, %"class.libgav1::Array2DView.58" }
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { i8* }
%"class.libgav1::Array2DView.58" = type { i32, i32, i8* }
%"struct.std::__1::array.125" = type { [3 x %"struct.libgav1::RestorationUnitInfo"] }
%"class.libgav1::ThreadPool" = type { %"class.libgav1::Executor", %"class.std::__1::condition_variable", %"class.std::__1::mutex", %"class.libgav1::UnboundedQueue", %"class.std::__1::unique_ptr.89", i8, i32, [16 x i8] }
%"class.libgav1::Executor" = type { i32 (...)** }
%"class.libgav1::UnboundedQueue" = type { %"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block"*, i64, %"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block"*, i64 }
%"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block" = type opaque
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.libgav1::ThreadPool::WorkerThread"** }
%"class.libgav1::ThreadPool::WorkerThread" = type opaque
%"struct.libgav1::Tile::ThreadingParameters" = type { %"class.std::__1::mutex", %"class.libgav1::Array2D.126", i8, i32, %"class.std::__1::condition_variable" }
%"class.libgav1::Array2D.126" = type { %"class.std::__1::unique_ptr.127", i64, i64, %"class.libgav1::Array2DView.133" }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { i8* }
%"class.libgav1::Array2DView.133" = type { i32, i32, i8* }
%"class.libgav1::ResidualBufferPool" = type <{ %"class.std::__1::mutex", %"class.libgav1::ResidualBufferStack", i64, i32, [4 x i8] }>
%"class.libgav1::ResidualBufferStack" = type { %"class.libgav1::ResidualBuffer"*, i64 }
%"class.libgav1::TileScratchBufferPool" = type <{ %"class.std::__1::mutex", %"class.libgav1::Stack", i32, [4 x i8] }>
%"class.libgav1::Stack" = type <{ [128 x %"class.std::__1::unique_ptr.134"], i32, [4 x i8] }>
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"struct.libgav1::TileScratchBuffer"* }
%"struct.libgav1::TileScratchBuffer" = type <{ [16384 x i8], %union.anon.137, %"class.std::__1::unique_ptr.95", i64, i8, [3 x [34 x [34 x i8]]], [3 x i8] }>
%union.anon.137 = type { [2 x [16384 x i16]] }
%"class.libgav1::BlockingCounterImpl" = type opaque
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"struct.libgav1::PredictionParameters"* }
%"struct.libgav1::PredictionParameters" = type { i8, i8, [2 x i32], i8, i8, i32, i32, [2 x %"class.libgav1::Array2D"], i8, i8, i8, i32, i32, i8, i8, i8, %union.anon.81, [8 x i16], i32, i32, i32, [2 x %"struct.libgav1::MotionVector"], i32, [8 x [4 x i32]] }
%union.anon.81 = type { [8 x %"union.libgav1::CompoundMotionVector"] }
%"struct.std::__1::array.141" = type { [3 x %"class.libgav1::AlignedDynamicBuffer"] }
%"class.libgav1::AlignedDynamicBuffer" = type { %"class.std::__1::unique_ptr.95", i64 }
%"struct.std::__1::array.142" = type { [8 x i32] }
%"struct.libgav1::Tile::Block" = type { %"class.libgav1::Tile"*, i8, i8, [3 x i8], [3 x i8], [3 x i8], i32, i32, i32, i32, i32, i32, %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"*, %"struct.libgav1::TileScratchBuffer"*, i8** }
%"struct.std::__1::__less.149" = type { i8 }

$_ZNSt3__115__inplace_mergeIRNS_6__lessIttEEPtEEvT0_S5_S5_T_NS_15iterator_traitsIS5_E15difference_typeES9_PNS8_10value_typeEl = comdat any

@_ZN7libgav113k4x4WidthLog2E = external local_unnamed_addr constant [22 x i8], align 16
@_ZN7libgav114k4x4HeightLog2E = external local_unnamed_addr constant [22 x i8], align 16
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7libgav14Tile15GetPaletteCacheERKNS0_5BlockENS_9PlaneTypeEPt(%"class.libgav1::Tile"* nocapture readnone, %"struct.libgav1::Tile::Block"* nocapture readonly dereferenceable(88), i8 zeroext, i16*) local_unnamed_addr #0 align 2 {
  %5 = alloca [1 x i16], align 2
  %6 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 3, i64 0
  %7 = load i8, i8* %6, align 2, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %21, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 6
  %11 = load i32, i32* %10, align 4
  %12 = and i32 %11, 15
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 12
  %16 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %15, align 8
  %17 = zext i8 %2 to i64
  %18 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %16, i64 0, i32 17, i32 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  br label %21

21:                                               ; preds = %9, %4, %14
  %22 = phi i32 [ %20, %14 ], [ 0, %9 ], [ 0, %4 ]
  %23 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 4, i64 0
  %24 = load i8, i8* %23, align 1, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %33, label %26

26:                                               ; preds = %21
  %27 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 13
  %28 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %27, align 8
  %29 = zext i8 %2 to i64
  %30 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %28, i64 0, i32 17, i32 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  br label %33

33:                                               ; preds = %21, %26
  %34 = phi i32 [ %32, %26 ], [ 0, %21 ]
  %35 = or i32 %34, %22
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %169, label %37

37:                                               ; preds = %33
  %38 = bitcast [1 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %38) #6
  %39 = getelementptr inbounds [1 x i16], [1 x i16]* %5, i64 0, i64 0
  store i16 -21846, i16* %39, align 2
  %40 = icmp eq i32 %22, 0
  br i1 %40, label %46, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 12
  %43 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %42, align 8
  %44 = zext i8 %2 to i64
  %45 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %43, i64 0, i32 17, i32 1, i64 %44, i64 0
  br label %46

46:                                               ; preds = %37, %41
  %47 = phi i16* [ %45, %41 ], [ %39, %37 ]
  %48 = icmp eq i32 %34, 0
  br i1 %48, label %54, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 13
  %51 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %50, align 8
  %52 = zext i8 %2 to i64
  %53 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %51, i64 0, i32 17, i32 1, i64 %52, i64 0
  br label %54

54:                                               ; preds = %46, %49
  %55 = phi i16* [ %53, %49 ], [ %39, %46 ]
  %56 = zext i32 %22 to i64
  %57 = getelementptr inbounds i16, i16* %47, i64 %56
  %58 = zext i32 %34 to i64
  %59 = getelementptr inbounds i16, i16* %55, i64 %58
  br i1 %40, label %86, label %60

60:                                               ; preds = %54, %81
  %61 = phi i16* [ %84, %81 ], [ %3, %54 ]
  %62 = phi i16* [ %83, %81 ], [ %47, %54 ]
  %63 = phi i16* [ %82, %81 ], [ %55, %54 ]
  %64 = icmp eq i16* %63, %59
  br i1 %64, label %65, label %73

65:                                               ; preds = %60
  %66 = ptrtoint i16* %57 to i64
  %67 = ptrtoint i16* %62 to i64
  %68 = sub i64 %66, %67
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %96, label %70

70:                                               ; preds = %65
  %71 = bitcast i16* %61 to i8*
  %72 = bitcast i16* %62 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %71, i8* align 2 %72, i64 %68, i1 false) #6
  br label %96

73:                                               ; preds = %60
  %74 = load i16, i16* %63, align 2
  %75 = load i16, i16* %62, align 2
  %76 = icmp ult i16 %74, %75
  br i1 %76, label %77, label %79

77:                                               ; preds = %73
  store i16 %74, i16* %61, align 2
  %78 = getelementptr inbounds i16, i16* %63, i64 1
  br label %81

79:                                               ; preds = %73
  store i16 %75, i16* %61, align 2
  %80 = getelementptr inbounds i16, i16* %62, i64 1
  br label %81

81:                                               ; preds = %79, %77
  %82 = phi i16* [ %78, %77 ], [ %63, %79 ]
  %83 = phi i16* [ %62, %77 ], [ %80, %79 ]
  %84 = getelementptr inbounds i16, i16* %61, i64 1
  %85 = icmp eq i16* %83, %57
  br i1 %85, label %86, label %60

86:                                               ; preds = %81, %54
  %87 = phi i16* [ %55, %54 ], [ %82, %81 ]
  %88 = phi i16* [ %3, %54 ], [ %84, %81 ]
  %89 = ptrtoint i16* %59 to i64
  %90 = ptrtoint i16* %87 to i64
  %91 = sub i64 %89, %90
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %96, label %93

93:                                               ; preds = %86
  %94 = bitcast i16* %88 to i8*
  %95 = bitcast i16* %87 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %94, i8* align 2 %95, i64 %91, i1 false) #6
  br label %96

96:                                               ; preds = %65, %70, %86, %93
  %97 = getelementptr inbounds i16, i16* %3, i64 %58
  %98 = getelementptr inbounds i16, i16* %97, i64 %56
  %99 = icmp eq i16* %98, %3
  br i1 %99, label %108, label %100

100:                                              ; preds = %96, %104
  %101 = phi i16* [ %102, %104 ], [ %3, %96 ]
  %102 = getelementptr inbounds i16, i16* %101, i64 1
  %103 = icmp eq i16* %102, %98
  br i1 %103, label %162, label %104

104:                                              ; preds = %100
  %105 = load i16, i16* %101, align 2
  %106 = load i16, i16* %102, align 2
  %107 = icmp eq i16 %105, %106
  br i1 %107, label %108, label %100

108:                                              ; preds = %104, %96
  %109 = phi i16* [ %3, %96 ], [ %101, %104 ]
  %110 = ptrtoint i16* %109 to i64
  %111 = icmp eq i16* %109, %98
  br i1 %111, label %162, label %112

112:                                              ; preds = %108
  %113 = getelementptr inbounds i16, i16* %109, i64 2
  %114 = icmp eq i16* %113, %98
  br i1 %114, label %159, label %115

115:                                              ; preds = %112
  %116 = load i16, i16* %109, align 2
  %117 = add nuw nsw i64 %56, %58
  %118 = add nsw i64 %117, -3
  %119 = getelementptr i16, i16* %3, i64 %118
  %120 = ptrtoint i16* %119 to i64
  %121 = sub i64 %120, %110
  %122 = lshr i64 %121, 1
  %123 = add nuw i64 %122, 1
  %124 = and i64 %123, 3
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %140, label %126

126:                                              ; preds = %115, %135
  %127 = phi i16 [ %131, %135 ], [ %116, %115 ]
  %128 = phi i16* [ %137, %135 ], [ %113, %115 ]
  %129 = phi i16* [ %136, %135 ], [ %109, %115 ]
  %130 = phi i64 [ %138, %135 ], [ %124, %115 ]
  %131 = load i16, i16* %128, align 2
  %132 = icmp eq i16 %127, %131
  br i1 %132, label %135, label %133

133:                                              ; preds = %126
  %134 = getelementptr inbounds i16, i16* %129, i64 1
  store i16 %131, i16* %134, align 2
  br label %135

135:                                              ; preds = %133, %126
  %136 = phi i16* [ %129, %126 ], [ %134, %133 ]
  %137 = getelementptr inbounds i16, i16* %128, i64 1
  %138 = add i64 %130, -1
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %126, !llvm.loop !3

140:                                              ; preds = %135, %115
  %141 = phi i16* [ undef, %115 ], [ %136, %135 ]
  %142 = phi i16 [ %116, %115 ], [ %131, %135 ]
  %143 = phi i16* [ %113, %115 ], [ %137, %135 ]
  %144 = phi i16* [ %109, %115 ], [ %136, %135 ]
  %145 = icmp ult i64 %121, 6
  br i1 %145, label %159, label %146

146:                                              ; preds = %140, %187
  %147 = phi i16 [ %183, %187 ], [ %142, %140 ]
  %148 = phi i16* [ %189, %187 ], [ %143, %140 ]
  %149 = phi i16* [ %188, %187 ], [ %144, %140 ]
  %150 = load i16, i16* %148, align 2
  %151 = icmp eq i16 %147, %150
  br i1 %151, label %154, label %152

152:                                              ; preds = %146
  %153 = getelementptr inbounds i16, i16* %149, i64 1
  store i16 %150, i16* %153, align 2
  br label %154

154:                                              ; preds = %152, %146
  %155 = phi i16* [ %149, %146 ], [ %153, %152 ]
  %156 = getelementptr inbounds i16, i16* %148, i64 1
  %157 = load i16, i16* %156, align 2
  %158 = icmp eq i16 %150, %157
  br i1 %158, label %173, label %171

159:                                              ; preds = %140, %187, %112
  %160 = phi i16* [ %109, %112 ], [ %141, %140 ], [ %188, %187 ]
  %161 = getelementptr inbounds i16, i16* %160, i64 1
  br label %162

162:                                              ; preds = %100, %108, %159
  %163 = phi i16* [ %161, %159 ], [ %98, %108 ], [ %98, %100 ]
  %164 = ptrtoint i16* %163 to i64
  %165 = ptrtoint i16* %3 to i64
  %166 = sub i64 %164, %165
  %167 = lshr exact i64 %166, 1
  %168 = trunc i64 %167 to i32
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %38) #6
  br label %169

169:                                              ; preds = %33, %162
  %170 = phi i32 [ %168, %162 ], [ 0, %33 ]
  ret i32 %170

171:                                              ; preds = %154
  %172 = getelementptr inbounds i16, i16* %155, i64 1
  store i16 %157, i16* %172, align 2
  br label %173

173:                                              ; preds = %171, %154
  %174 = phi i16* [ %155, %154 ], [ %172, %171 ]
  %175 = getelementptr inbounds i16, i16* %148, i64 2
  %176 = load i16, i16* %175, align 2
  %177 = icmp eq i16 %157, %176
  br i1 %177, label %180, label %178

178:                                              ; preds = %173
  %179 = getelementptr inbounds i16, i16* %174, i64 1
  store i16 %176, i16* %179, align 2
  br label %180

180:                                              ; preds = %178, %173
  %181 = phi i16* [ %174, %173 ], [ %179, %178 ]
  %182 = getelementptr inbounds i16, i16* %148, i64 3
  %183 = load i16, i16* %182, align 2
  %184 = icmp eq i16 %176, %183
  br i1 %184, label %187, label %185

185:                                              ; preds = %180
  %186 = getelementptr inbounds i16, i16* %181, i64 1
  store i16 %183, i16* %186, align 2
  br label %187

187:                                              ; preds = %185, %180
  %188 = phi i16* [ %181, %180 ], [ %186, %185 ]
  %189 = getelementptr inbounds i16, i16* %148, i64 4
  %190 = icmp eq i16* %189, %98
  br i1 %190, label %159, label %146
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav14Tile17ReadPaletteColorsERKNS0_5BlockENS_5PlaneE(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* nocapture readonly dereferenceable(88), i8 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.std::__1::__less.149", align 1
  %5 = alloca [16 x i16], align 16
  %6 = icmp ne i8 %2, 0
  %7 = zext i1 %6 to i8
  %8 = bitcast [16 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #6
  %9 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 0
  %10 = bitcast [16 x i16]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 32, i1 false)
  %11 = call i32 @_ZN7libgav14Tile15GetPaletteCacheERKNS0_5BlockENS_9PlaneTypeEPt(%"class.libgav1::Tile"* undef, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext %7, i16* nonnull %9)
  %12 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %13 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %12, align 8
  %14 = zext i1 %6 to i64
  %15 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %13, i64 0, i32 17, i32 0, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %2 to i64
  %18 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %13, i64 0, i32 17, i32 1, i64 %17, i64 0
  %19 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 20
  %20 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %19, align 32
  %21 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %20, i64 0, i32 33, i32 0
  %22 = load i8, i8* %21, align 4
  %23 = icmp sgt i32 %11, 0
  %24 = zext i8 %16 to i32
  %25 = icmp ne i8 %16, 0
  %26 = and i1 %25, %23
  br i1 %26, label %27, label %30

27:                                               ; preds = %3
  %28 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 28
  %29 = sext i32 %11 to i64
  br label %35

30:                                               ; preds = %46, %3
  %31 = phi i32 [ 0, %3 ], [ %47, %46 ]
  %32 = phi i1 [ %25, %3 ], [ %50, %46 ]
  br i1 %32, label %52, label %33

33:                                               ; preds = %30
  %34 = sext i8 %22 to i32
  br label %60

35:                                               ; preds = %27, %46
  %36 = phi i64 [ 0, %27 ], [ %48, %46 ]
  %37 = phi i32 [ 0, %27 ], [ %47, %46 ]
  %38 = call i32 @_ZN7libgav114DaalaBitReader7ReadBitEv(%"class.libgav1::DaalaBitReader"* %28) #6
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %46, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 %36
  %42 = load i16, i16* %41, align 2
  %43 = add nsw i32 %37, 1
  %44 = sext i32 %37 to i64
  %45 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %13, i64 0, i32 17, i32 1, i64 %17, i64 %44
  store i16 %42, i16* %45, align 2
  br label %46

46:                                               ; preds = %35, %40
  %47 = phi i32 [ %43, %40 ], [ %37, %35 ]
  %48 = add nuw nsw i64 %36, 1
  %49 = icmp slt i64 %48, %29
  %50 = icmp slt i32 %47, %24
  %51 = and i1 %50, %49
  br i1 %51, label %35, label %30

52:                                               ; preds = %30
  %53 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 28
  %54 = sext i8 %22 to i32
  %55 = call i64 @_ZN7libgav114DaalaBitReader11ReadLiteralEi(%"class.libgav1::DaalaBitReader"* %53, i32 %54) #6
  %56 = trunc i64 %55 to i16
  %57 = add nsw i32 %31, 1
  %58 = sext i32 %31 to i64
  %59 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %13, i64 0, i32 17, i32 1, i64 %17, i64 %58
  store i16 %56, i16* %59, align 2
  br label %60

60:                                               ; preds = %33, %52
  %61 = phi i32 [ %34, %33 ], [ %54, %52 ]
  %62 = phi i32 [ %31, %33 ], [ %57, %52 ]
  %63 = shl i32 1, %61
  %64 = add nsw i32 %63, -1
  %65 = icmp slt i32 %62, %24
  br i1 %65, label %66, label %201

66:                                               ; preds = %60
  %67 = add nsw i32 %61, -3
  %68 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 28
  %69 = call i64 @_ZN7libgav114DaalaBitReader11ReadLiteralEi(%"class.libgav1::DaalaBitReader"* %68, i32 2) #6
  %70 = trunc i64 %69 to i32
  %71 = add nsw i32 %67, %70
  %72 = xor i1 %6, true
  %73 = zext i1 %72 to i32
  %74 = sext i32 %62 to i64
  br label %75

75:                                               ; preds = %194, %66
  %76 = phi i64 [ %198, %194 ], [ %74, %66 ]
  %77 = phi i32 [ %197, %194 ], [ %71, %66 ]
  %78 = call i64 @_ZN7libgav114DaalaBitReader11ReadLiteralEi(%"class.libgav1::DaalaBitReader"* %68, i32 %77) #6
  %79 = trunc i64 %78 to i32
  %80 = add nsw i32 %79, %73
  %81 = add nsw i64 %76, -1
  %82 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %13, i64 0, i32 17, i32 1, i64 %17, i64 %81
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = add nsw i32 %80, %84
  %86 = icmp slt i32 %64, %85
  %87 = select i1 %86, i32 %64, i32 %85
  %88 = trunc i32 %87 to i16
  %89 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %13, i64 0, i32 17, i32 1, i64 %17, i64 %76
  store i16 %88, i16* %89, align 2
  %90 = and i32 %87, 65535
  %91 = add nuw nsw i32 %90, %73
  %92 = icmp slt i32 %91, %64
  br i1 %92, label %186, label %93

93:                                               ; preds = %75
  %94 = trunc i64 %76 to i32
  %95 = shl i64 %76, 32
  %96 = add i64 %95, 4294967296
  %97 = ashr exact i64 %96, 32
  %98 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %13, i64 0, i32 17, i32 1, i64 %17, i64 %97
  %99 = xor i32 %94, -1
  %100 = add i32 %99, %24
  %101 = sext i32 %100 to i64
  %102 = icmp eq i32 %100, 0
  br i1 %102, label %201, label %103

103:                                              ; preds = %93
  %104 = trunc i32 %64 to i16
  %105 = icmp ult i32 %100, 16
  br i1 %105, label %179, label %106

106:                                              ; preds = %103
  %107 = and i64 %101, -16
  %108 = insertelement <8 x i16> undef, i16 %104, i32 0
  %109 = shufflevector <8 x i16> %108, <8 x i16> undef, <8 x i32> zeroinitializer
  %110 = insertelement <8 x i16> undef, i16 %104, i32 0
  %111 = shufflevector <8 x i16> %110, <8 x i16> undef, <8 x i32> zeroinitializer
  %112 = add nsw i64 %107, -16
  %113 = lshr exact i64 %112, 4
  %114 = add nuw nsw i64 %113, 1
  %115 = and i64 %114, 7
  %116 = icmp ult i64 %112, 112
  br i1 %116, label %164, label %117

117:                                              ; preds = %106
  %118 = sub nsw i64 %114, %115
  br label %119

119:                                              ; preds = %119, %117
  %120 = phi i64 [ 0, %117 ], [ %161, %119 ]
  %121 = phi i64 [ %118, %117 ], [ %162, %119 ]
  %122 = getelementptr inbounds i16, i16* %98, i64 %120
  %123 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %123, align 2
  %124 = getelementptr inbounds i16, i16* %122, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %125, align 2
  %126 = or i64 %120, 16
  %127 = getelementptr inbounds i16, i16* %98, i64 %126
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %128, align 2
  %129 = getelementptr inbounds i16, i16* %127, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %130, align 2
  %131 = or i64 %120, 32
  %132 = getelementptr inbounds i16, i16* %98, i64 %131
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %133, align 2
  %134 = getelementptr inbounds i16, i16* %132, i64 8
  %135 = bitcast i16* %134 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %135, align 2
  %136 = or i64 %120, 48
  %137 = getelementptr inbounds i16, i16* %98, i64 %136
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %138, align 2
  %139 = getelementptr inbounds i16, i16* %137, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %140, align 2
  %141 = or i64 %120, 64
  %142 = getelementptr inbounds i16, i16* %98, i64 %141
  %143 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %143, align 2
  %144 = getelementptr inbounds i16, i16* %142, i64 8
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %145, align 2
  %146 = or i64 %120, 80
  %147 = getelementptr inbounds i16, i16* %98, i64 %146
  %148 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %148, align 2
  %149 = getelementptr inbounds i16, i16* %147, i64 8
  %150 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %150, align 2
  %151 = or i64 %120, 96
  %152 = getelementptr inbounds i16, i16* %98, i64 %151
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %153, align 2
  %154 = getelementptr inbounds i16, i16* %152, i64 8
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %155, align 2
  %156 = or i64 %120, 112
  %157 = getelementptr inbounds i16, i16* %98, i64 %156
  %158 = bitcast i16* %157 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %158, align 2
  %159 = getelementptr inbounds i16, i16* %157, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %160, align 2
  %161 = add i64 %120, 128
  %162 = add i64 %121, -8
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %119, !llvm.loop !5

164:                                              ; preds = %119, %106
  %165 = phi i64 [ 0, %106 ], [ %161, %119 ]
  %166 = icmp eq i64 %115, 0
  br i1 %166, label %177, label %167

167:                                              ; preds = %164, %167
  %168 = phi i64 [ %174, %167 ], [ %165, %164 ]
  %169 = phi i64 [ %175, %167 ], [ %115, %164 ]
  %170 = getelementptr inbounds i16, i16* %98, i64 %168
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %109, <8 x i16>* %171, align 2
  %172 = getelementptr inbounds i16, i16* %170, i64 8
  %173 = bitcast i16* %172 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %173, align 2
  %174 = add i64 %168, 16
  %175 = add i64 %169, -1
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %177, label %167, !llvm.loop !7

177:                                              ; preds = %167, %164
  %178 = icmp eq i64 %107, %101
  br i1 %178, label %201, label %179

179:                                              ; preds = %177, %103
  %180 = phi i64 [ 0, %103 ], [ %107, %177 ]
  br label %181

181:                                              ; preds = %179, %181
  %182 = phi i64 [ %184, %181 ], [ %180, %179 ]
  %183 = getelementptr inbounds i16, i16* %98, i64 %182
  store i16 %104, i16* %183, align 2
  %184 = add nuw i64 %182, 1
  %185 = icmp eq i64 %184, %101
  br i1 %185, label %201, label %181, !llvm.loop !8

186:                                              ; preds = %75
  %187 = sub nsw i32 %63, %90
  %188 = sub i32 %187, %73
  %189 = icmp ult i32 %188, 2
  br i1 %189, label %194, label %190

190:                                              ; preds = %186
  %191 = add i32 %188, -1
  %192 = call i32 @llvm.ctlz.i32(i32 %191, i1 true) #6, !range !10
  %193 = sub nuw nsw i32 32, %192
  br label %194

194:                                              ; preds = %186, %190
  %195 = phi i32 [ %193, %190 ], [ 0, %186 ]
  %196 = icmp slt i32 %195, %77
  %197 = select i1 %196, i32 %195, i32 %77
  %198 = add nsw i64 %76, 1
  %199 = trunc i64 %198 to i32
  %200 = icmp eq i32 %199, %24
  br i1 %200, label %201, label %75

201:                                              ; preds = %194, %181, %177, %93, %60
  %202 = sext i32 %31 to i64
  %203 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %13, i64 0, i32 17, i32 1, i64 %17, i64 %202
  %204 = zext i8 %16 to i64
  %205 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %13, i64 0, i32 17, i32 1, i64 %17, i64 %204
  %206 = getelementptr inbounds %"struct.std::__1::__less.149", %"struct.std::__1::__less.149"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %206) #6
  %207 = ptrtoint i16* %203 to i64
  %208 = ptrtoint i16* %18 to i64
  %209 = sub i64 %207, %208
  %210 = ashr exact i64 %209, 1
  %211 = ptrtoint i16* %205 to i64
  %212 = sub i64 %211, %207
  %213 = ashr exact i64 %212, 1
  %214 = icmp slt i64 %213, %210
  %215 = select i1 %214, i64 %213, i64 %210
  %216 = icmp sgt i64 %215, 0
  br i1 %216, label %217, label %228

217:                                              ; preds = %201
  %218 = icmp slt i64 %215, 4611686018427387903
  %219 = select i1 %218, i64 %215, i64 4611686018427387903
  br label %220

220:                                              ; preds = %225, %217
  %221 = phi i64 [ %226, %225 ], [ %219, %217 ]
  %222 = shl i64 %221, 1
  %223 = call noalias i8* @_ZnwmRKSt9nothrow_t(i64 %222, %"struct.std::nothrow_t"* nonnull dereferenceable(1) @_ZSt7nothrow) #6
  %224 = icmp eq i8* %223, null
  br i1 %224, label %225, label %229

225:                                              ; preds = %220
  %226 = lshr i64 %221, 1
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %220

228:                                              ; preds = %225, %201
  call void @_ZNSt3__115__inplace_mergeIRNS_6__lessIttEEPtEEvT0_S5_S5_T_NS_15iterator_traitsIS5_E15difference_typeES9_PNS8_10value_typeEl(i16* %18, i16* %203, i16* %205, %"struct.std::__1::__less.149"* nonnull dereferenceable(1) %4, i64 %210, i64 %213, i16* null, i64 0) #6
  br label %231

229:                                              ; preds = %220
  %230 = bitcast i8* %223 to i16*
  call void @_ZNSt3__115__inplace_mergeIRNS_6__lessIttEEPtEEvT0_S5_S5_T_NS_15iterator_traitsIS5_E15difference_typeES9_PNS8_10value_typeEl(i16* %18, i16* %203, i16* %205, %"struct.std::__1::__less.149"* nonnull dereferenceable(1) %4, i64 %210, i64 %213, i16* nonnull %230, i64 %221) #6
  call void @_ZdlPv(i8* nonnull %223) #7
  br label %231

231:                                              ; preds = %228, %229
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %206) #6
  br i1 %6, label %232, label %280

232:                                              ; preds = %231
  %233 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 28
  %234 = call i32 @_ZN7libgav114DaalaBitReader7ReadBitEv(%"class.libgav1::DaalaBitReader"* %233) #6
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %236, label %240

236:                                              ; preds = %232
  %237 = icmp eq i8 %16, 0
  br i1 %237, label %280, label %238

238:                                              ; preds = %236
  %239 = zext i8 %16 to i64
  br label %273

240:                                              ; preds = %232
  %241 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %13, i64 0, i32 17, i32 1, i64 2, i64 0
  %242 = add nsw i32 %61, -4
  %243 = call i64 @_ZN7libgav114DaalaBitReader11ReadLiteralEi(%"class.libgav1::DaalaBitReader"* %233, i32 2) #6
  %244 = trunc i64 %243 to i32
  %245 = add nsw i32 %242, %244
  %246 = call i64 @_ZN7libgav114DaalaBitReader11ReadLiteralEi(%"class.libgav1::DaalaBitReader"* %233, i32 %61) #6
  %247 = trunc i64 %246 to i16
  store i16 %247, i16* %241, align 2
  %248 = icmp ugt i8 %16, 1
  br i1 %248, label %249, label %280

249:                                              ; preds = %240
  %250 = zext i8 %16 to i64
  br label %251

251:                                              ; preds = %261, %249
  %252 = phi i64 [ 1, %249 ], [ %271, %261 ]
  %253 = call i64 @_ZN7libgav114DaalaBitReader11ReadLiteralEi(%"class.libgav1::DaalaBitReader"* %233, i32 %245) #6
  %254 = trunc i64 %253 to i32
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %261, label %256

256:                                              ; preds = %251
  %257 = call i32 @_ZN7libgav114DaalaBitReader7ReadBitEv(%"class.libgav1::DaalaBitReader"* %233) #6
  %258 = icmp eq i32 %257, 0
  %259 = sub nsw i32 0, %254
  %260 = select i1 %258, i32 %254, i32 %259
  br label %261

261:                                              ; preds = %256, %251
  %262 = phi i32 [ 0, %251 ], [ %260, %256 ]
  %263 = add nsw i64 %252, -1
  %264 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %13, i64 0, i32 17, i32 1, i64 2, i64 %263
  %265 = load i16, i16* %264, align 2
  %266 = zext i16 %265 to i32
  %267 = add nsw i32 %262, %266
  %268 = and i32 %267, %64
  %269 = trunc i32 %268 to i16
  %270 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %13, i64 0, i32 17, i32 1, i64 2, i64 %252
  store i16 %269, i16* %270, align 2
  %271 = add nuw nsw i64 %252, 1
  %272 = icmp eq i64 %271, %250
  br i1 %272, label %280, label %251

273:                                              ; preds = %273, %238
  %274 = phi i64 [ 0, %238 ], [ %278, %273 ]
  %275 = call i64 @_ZN7libgav114DaalaBitReader11ReadLiteralEi(%"class.libgav1::DaalaBitReader"* %233, i32 %61) #6
  %276 = trunc i64 %275 to i16
  %277 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %13, i64 0, i32 17, i32 1, i64 2, i64 %274
  store i16 %276, i16* %277, align 2
  %278 = add nuw nsw i64 %274, 1
  %279 = icmp eq i64 %278, %239
  br i1 %279, label %280, label %273

280:                                              ; preds = %261, %273, %236, %240, %231
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #6
  ret void
}

declare i32 @_ZN7libgav114DaalaBitReader7ReadBitEv(%"class.libgav1::DaalaBitReader"*) unnamed_addr #2

declare i64 @_ZN7libgav114DaalaBitReader11ReadLiteralEi(%"class.libgav1::DaalaBitReader"*, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav14Tile19ReadPaletteModeInfoERKNS0_5BlockE(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* nocapture readonly dereferenceable(88)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %4 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %3, align 8
  %5 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %4, i64 0, i32 17, i32 0, i64 0
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %4, i64 0, i32 17, i32 0, i64 1
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 2
  %8 = load i8, i8* %7, align 1
  %9 = icmp ult i8 %8, 4
  %10 = icmp ne i8 %8, 2
  %11 = and i1 %9, %10
  %12 = icmp ugt i8 %8, 18
  %13 = or i1 %12, %11
  br i1 %13, label %89, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 21
  %16 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %15, align 8
  %17 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %16, i64 0, i32 31
  %18 = load i8, i8* %17, align 1, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %89, label %20

20:                                               ; preds = %14
  %21 = zext i8 %8 to i64
  %22 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav113k4x4WidthLog2E, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = getelementptr inbounds [22 x i8], [22 x i8]* @_ZN7libgav114k4x4HeightLog2E, i64 0, i64 %21
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = add nsw i32 %24, -2
  %29 = add nsw i32 %28, %27
  %30 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %4, i64 0, i32 9
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %33, label %68

33:                                               ; preds = %20
  %34 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 3, i64 0
  %35 = load i8, i8* %34, align 2, !range !2
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 12
  %39 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %38, align 8
  %40 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %39, i64 0, i32 17, i32 0, i64 0
  %41 = load i8, i8* %40, align 8
  %42 = icmp ne i8 %41, 0
  %43 = zext i1 %42 to i64
  br label %44

44:                                               ; preds = %33, %37
  %45 = phi i64 [ 0, %33 ], [ %43, %37 ]
  %46 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 4, i64 0
  %47 = load i8, i8* %46, align 1, !range !2
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %56, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 13
  %51 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %50, align 8
  %52 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %51, i64 0, i32 17, i32 0, i64 0
  %53 = load i8, i8* %52, align 8
  %54 = icmp ne i8 %53, 0
  %55 = zext i1 %54 to i64
  br label %56

56:                                               ; preds = %44, %49
  %57 = phi i64 [ 0, %44 ], [ %55, %49 ]
  %58 = add nuw nsw i64 %57, %45
  %59 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 28
  %60 = sext i32 %29 to i64
  %61 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 70, i64 %60, i64 %58, i64 0
  %62 = tail call zeroext i1 @_ZN7libgav114DaalaBitReader10ReadSymbolEPt(%"class.libgav1::DaalaBitReader"* %59, i16* %61) #6
  br i1 %62, label %63, label %68

63:                                               ; preds = %56
  %64 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 72, i64 %60, i64 0
  %65 = tail call i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi7EEEiPt(%"class.libgav1::DaalaBitReader"* %59, i16* %64) #6
  %66 = trunc i32 %65 to i8
  %67 = add i8 %66, 2
  store i8 %67, i8* %5, align 8
  tail call void @_ZN7libgav14Tile17ReadPaletteColorsERKNS0_5BlockENS_5PlaneE(%"class.libgav1::Tile"* %0, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext 0)
  br label %68

68:                                               ; preds = %56, %63, %20
  %69 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 1
  %70 = load i8, i8* %69, align 8, !range !2
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %89, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %4, i64 0, i32 10
  %74 = load i8, i8* %73, align 2
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %76, label %89

76:                                               ; preds = %72
  %77 = load i8, i8* %5, align 8
  %78 = icmp ne i8 %77, 0
  %79 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 28
  %80 = zext i1 %78 to i64
  %81 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 74, i64 %80, i64 0
  %82 = tail call zeroext i1 @_ZN7libgav114DaalaBitReader10ReadSymbolEPt(%"class.libgav1::DaalaBitReader"* %79, i16* %81) #6
  br i1 %82, label %83, label %89

83:                                               ; preds = %76
  %84 = sext i32 %29 to i64
  %85 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 76, i64 %84, i64 0
  %86 = tail call i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi7EEEiPt(%"class.libgav1::DaalaBitReader"* %79, i16* %85) #6
  %87 = trunc i32 %86 to i8
  %88 = add i8 %87, 2
  store i8 %88, i8* %6, align 1
  tail call void @_ZN7libgav14Tile17ReadPaletteColorsERKNS0_5BlockENS_5PlaneE(%"class.libgav1::Tile"* %0, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext 1)
  br label %89

89:                                               ; preds = %68, %72, %83, %76, %2, %14
  ret void
}

declare zeroext i1 @_ZN7libgav114DaalaBitReader10ReadSymbolEPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #2

declare i32 @_ZN7libgav114DaalaBitReader10ReadSymbolILi7EEEiPt(%"class.libgav1::DaalaBitReader"*, i16*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav14Tile28PopulatePaletteColorContextsERKNS0_5BlockENS_9PlaneTypeEiiiPA8_hPh(%"class.libgav1::Tile"* nocapture readnone, %"struct.libgav1::Tile::Block"* nocapture readonly dereferenceable(88), i8 zeroext, i32, i32, i32, [8 x i8]* nocapture, i8* nocapture) local_unnamed_addr #0 align 2 {
  %9 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %10 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %9, align 8
  %11 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %10, i64 0, i32 18, i32 0, i32 0, i32 0
  %12 = load %"struct.libgav1::PredictionParameters"*, %"struct.libgav1::PredictionParameters"** %11, align 8
  %13 = icmp slt i32 %4, %5
  br i1 %13, label %21, label %14

14:                                               ; preds = %8
  %15 = zext i8 %2 to i64
  %16 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %12, i64 0, i32 7, i64 %15, i32 3, i32 1
  %17 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %12, i64 0, i32 7, i64 %15, i32 3, i32 2
  %18 = sext i32 %4 to i64
  %19 = sext i32 %3 to i64
  %20 = sext i32 %5 to i64
  br label %22

21:                                               ; preds = %167, %8
  ret void

22:                                               ; preds = %167, %14
  %23 = phi i64 [ %168, %167 ], [ %18, %14 ]
  %24 = phi i64 [ %169, %167 ], [ 0, %14 ]
  %25 = sub nsw i64 %19, %23
  %26 = icmp sgt i64 %25, 0
  br i1 %26, label %27, label %36

27:                                               ; preds = %22
  %28 = add nsw i64 %25, -1
  %29 = load i32, i32* %16, align 4
  %30 = sext i32 %29 to i64
  %31 = mul nsw i64 %28, %30
  %32 = load i8*, i8** %17, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 %31
  %34 = getelementptr inbounds i8, i8* %33, i64 %23
  %35 = load i8, i8* %34, align 1
  br label %36

36:                                               ; preds = %22, %27
  %37 = phi i8 [ %35, %27 ], [ 0, %22 ]
  %38 = icmp sgt i64 %23, 0
  br i1 %38, label %44, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds i8, i8* %7, i64 %24
  store i8 0, i8* %40, align 1
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 0
  store i8 %37, i8* %41, align 1
  %42 = zext i8 %37 to i32
  %43 = shl i32 1, %42
  br label %103

44:                                               ; preds = %36
  %45 = load i32, i32* %16, align 4
  %46 = sext i32 %45 to i64
  %47 = mul nsw i64 %25, %46
  %48 = load i8*, i8** %17, align 8
  %49 = getelementptr inbounds i8, i8* %48, i64 %47
  %50 = add nsw i64 %23, -1
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i64 %25, 1
  br i1 %53, label %54, label %59

54:                                               ; preds = %44
  %55 = getelementptr inbounds i8, i8* %7, i64 %24
  store i8 0, i8* %55, align 1
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 0
  store i8 %52, i8* %56, align 1
  %57 = zext i8 %52 to i32
  %58 = shl i32 1, %57
  br label %103

59:                                               ; preds = %44
  %60 = add nsw i64 %25, -1
  %61 = mul nsw i64 %60, %46
  %62 = getelementptr inbounds i8, i8* %48, i64 %61
  %63 = getelementptr inbounds i8, i8* %62, i64 %50
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %37 to i32
  %66 = shl i32 1, %65
  %67 = zext i8 %52 to i32
  %68 = shl i32 1, %67
  %69 = or i32 %68, %66
  %70 = zext i8 %64 to i32
  %71 = shl i32 1, %70
  %72 = or i32 %69, %71
  %73 = icmp eq i8 %37, %52
  %74 = icmp eq i8 %37, %64
  %75 = and i1 %73, %74
  br i1 %75, label %76, label %79

76:                                               ; preds = %59
  %77 = getelementptr inbounds i8, i8* %7, i64 %24
  store i8 4, i8* %77, align 1
  %78 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 0
  store i8 %37, i8* %78, align 1
  br label %103

79:                                               ; preds = %59
  br i1 %73, label %80, label %84

80:                                               ; preds = %79
  %81 = getelementptr inbounds i8, i8* %7, i64 %24
  store i8 3, i8* %81, align 1
  %82 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 0
  store i8 %37, i8* %82, align 1
  %83 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 1
  store i8 %64, i8* %83, align 1
  br label %103

84:                                               ; preds = %79
  br i1 %74, label %85, label %89

85:                                               ; preds = %84
  %86 = getelementptr inbounds i8, i8* %7, i64 %24
  store i8 2, i8* %86, align 1
  %87 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 0
  store i8 %37, i8* %87, align 1
  %88 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 1
  store i8 %52, i8* %88, align 1
  br label %103

89:                                               ; preds = %84
  %90 = icmp eq i8 %52, %64
  %91 = getelementptr inbounds i8, i8* %7, i64 %24
  br i1 %90, label %92, label %95

92:                                               ; preds = %89
  store i8 2, i8* %91, align 1
  %93 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 0
  store i8 %52, i8* %93, align 1
  %94 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 1
  store i8 %37, i8* %94, align 1
  br label %103

95:                                               ; preds = %89
  store i8 1, i8* %91, align 1
  %96 = icmp ult i8 %52, %37
  %97 = select i1 %96, i8 %52, i8 %37
  %98 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 0
  store i8 %97, i8* %98, align 1
  %99 = icmp ult i8 %37, %52
  %100 = select i1 %99, i8 %52, i8 %37
  %101 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 1
  store i8 %100, i8* %101, align 1
  %102 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 2
  store i8 %64, i8* %102, align 1
  br label %103

103:                                              ; preds = %76, %85, %95, %92, %80, %54, %39
  %104 = phi i32 [ %43, %39 ], [ %58, %54 ], [ %72, %80 ], [ %72, %92 ], [ %72, %95 ], [ %72, %85 ], [ %72, %76 ]
  %105 = phi i32 [ 1, %39 ], [ 1, %54 ], [ 2, %80 ], [ 2, %92 ], [ 3, %95 ], [ 2, %85 ], [ 1, %76 ]
  %106 = and i32 %104, 1
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %112

108:                                              ; preds = %103
  %109 = add nuw nsw i32 %105, 1
  %110 = zext i32 %105 to i64
  %111 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 %110
  store i8 0, i8* %111, align 1
  br label %112

112:                                              ; preds = %103, %108
  %113 = phi i32 [ %105, %103 ], [ %109, %108 ]
  %114 = and i32 %104, 2
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %120

116:                                              ; preds = %112
  %117 = add nuw nsw i32 %113, 1
  %118 = sext i32 %113 to i64
  %119 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 %118
  store i8 1, i8* %119, align 1
  br label %120

120:                                              ; preds = %116, %112
  %121 = phi i32 [ %113, %112 ], [ %117, %116 ]
  %122 = and i32 %104, 4
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %128

124:                                              ; preds = %120
  %125 = add nuw nsw i32 %121, 1
  %126 = sext i32 %121 to i64
  %127 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 %126
  store i8 2, i8* %127, align 1
  br label %128

128:                                              ; preds = %124, %120
  %129 = phi i32 [ %121, %120 ], [ %125, %124 ]
  %130 = and i32 %104, 8
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %136

132:                                              ; preds = %128
  %133 = add nuw nsw i32 %129, 1
  %134 = sext i32 %129 to i64
  %135 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 %134
  store i8 3, i8* %135, align 1
  br label %136

136:                                              ; preds = %132, %128
  %137 = phi i32 [ %129, %128 ], [ %133, %132 ]
  %138 = and i32 %104, 16
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %144

140:                                              ; preds = %136
  %141 = add nuw nsw i32 %137, 1
  %142 = sext i32 %137 to i64
  %143 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 %142
  store i8 4, i8* %143, align 1
  br label %144

144:                                              ; preds = %140, %136
  %145 = phi i32 [ %137, %136 ], [ %141, %140 ]
  %146 = and i32 %104, 32
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %152

148:                                              ; preds = %144
  %149 = add nuw nsw i32 %145, 1
  %150 = sext i32 %145 to i64
  %151 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 %150
  store i8 5, i8* %151, align 1
  br label %152

152:                                              ; preds = %148, %144
  %153 = phi i32 [ %145, %144 ], [ %149, %148 ]
  %154 = and i32 %104, 64
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %160

156:                                              ; preds = %152
  %157 = add nuw nsw i32 %153, 1
  %158 = sext i32 %153 to i64
  %159 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 %158
  store i8 6, i8* %159, align 1
  br label %160

160:                                              ; preds = %156, %152
  %161 = phi i32 [ %153, %152 ], [ %157, %156 ]
  %162 = trunc i32 %104 to i8
  %163 = icmp sgt i8 %162, -1
  br i1 %163, label %164, label %167

164:                                              ; preds = %160
  %165 = sext i32 %161 to i64
  %166 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 %24, i64 %165
  store i8 7, i8* %166, align 1
  br label %167

167:                                              ; preds = %164, %160
  %168 = add nsw i64 %23, -1
  %169 = add nuw nsw i64 %24, 1
  %170 = icmp sgt i64 %23, %20
  br i1 %170, label %22, label %21
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav14Tile17ReadPaletteTokensERKNS0_5BlockE(%"class.libgav1::Tile"*, %"struct.libgav1::Tile::Block"* nocapture readonly dereferenceable(88)) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca [64 x [8 x i8]], align 16
  %5 = alloca [64 x i8], align 16
  %6 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 14
  %7 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %6, align 8
  %8 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %7, i64 0, i32 18, i32 0, i32 0, i32 0
  %9 = load %"struct.libgav1::PredictionParameters"*, %"struct.libgav1::PredictionParameters"** %8, align 8
  %10 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 1
  %11 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 9
  %12 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 8
  %13 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 21
  %14 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 6
  %15 = getelementptr inbounds %"struct.libgav1::Tile::Block", %"struct.libgav1::Tile::Block"* %1, i64 0, i32 7
  %16 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 20
  %17 = bitcast i32* %3 to i8*
  %18 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 28
  %19 = getelementptr inbounds %"class.libgav1::DaalaBitReader", %"class.libgav1::DaalaBitReader"* %18, i64 0, i32 0
  %20 = getelementptr inbounds [64 x [8 x i8]], [64 x [8 x i8]]* %4, i64 0, i64 0, i64 0
  %21 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 0
  %22 = getelementptr inbounds [64 x [8 x i8]], [64 x [8 x i8]]* %4, i64 0, i64 0
  br label %23

23:                                               ; preds = %2, %277
  %24 = phi i64 [ 0, %2 ], [ %278, %277 ]
  %25 = phi i32 [ 0, %2 ], [ %279, %277 ]
  %26 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %7, i64 0, i32 17, i32 0, i64 %24
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = icmp eq i8 %27, 0
  br i1 %29, label %277, label %30

30:                                               ; preds = %23
  %31 = load i32, i32* %11, align 8
  %32 = load i32, i32* %12, align 4
  %33 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %13, align 8
  %34 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %33, i64 0, i32 7
  %35 = load i32, i32* %34, align 4
  %36 = load i32, i32* %14, align 4
  %37 = sub nsw i32 %35, %36
  %38 = shl i32 %37, 2
  %39 = icmp slt i32 %38, %31
  %40 = select i1 %39, i32 %38, i32 %31
  %41 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %33, i64 0, i32 6
  %42 = load i32, i32* %41, align 8
  %43 = load i32, i32* %15, align 8
  %44 = sub nsw i32 %42, %43
  %45 = shl i32 %44, 2
  %46 = icmp slt i32 %45, %32
  %47 = select i1 %46, i32 %45, i32 %32
  %48 = icmp eq i64 %24, 1
  br i1 %48, label %49, label %70

49:                                               ; preds = %30
  %50 = load %"struct.libgav1::ObuSequenceHeader"*, %"struct.libgav1::ObuSequenceHeader"** %16, align 32
  %51 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %50, i64 0, i32 33, i32 7
  %52 = load i8, i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = ashr i32 %31, %53
  %55 = getelementptr inbounds %"struct.libgav1::ObuSequenceHeader", %"struct.libgav1::ObuSequenceHeader"* %50, i64 0, i32 33, i32 6
  %56 = load i8, i8* %55, align 4
  %57 = sext i8 %56 to i32
  %58 = ashr i32 %32, %57
  %59 = ashr i32 %40, %53
  %60 = ashr i32 %47, %57
  %61 = icmp slt i32 %54, 4
  %62 = add nsw i32 %54, 2
  %63 = add nsw i32 %59, 2
  %64 = select i1 %61, i32 %62, i32 %54
  %65 = select i1 %61, i32 %63, i32 %59
  %66 = icmp slt i32 %58, 4
  br i1 %66, label %67, label %70

67:                                               ; preds = %49
  %68 = add nsw i32 %58, 2
  %69 = add nsw i32 %60, 2
  br label %70

70:                                               ; preds = %49, %67, %30
  %71 = phi i32 [ %68, %67 ], [ %58, %49 ], [ %32, %30 ]
  %72 = phi i32 [ %64, %67 ], [ %64, %49 ], [ %31, %30 ]
  %73 = phi i32 [ %65, %67 ], [ %65, %49 ], [ %40, %30 ]
  %74 = phi i32 [ %69, %67 ], [ %60, %49 ], [ %47, %30 ]
  %75 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %9, i64 0, i32 7, i64 %24
  %76 = mul nsw i32 %72, %71
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %9, i64 0, i32 7, i64 %24, i32 2
  store i64 %77, i64* %78, align 8
  %79 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %9, i64 0, i32 7, i64 %24, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = icmp ult i64 %80, %77
  br i1 %81, label %85, label %82

82:                                               ; preds = %70
  %83 = bitcast %"class.libgav1::Array2D"* %75 to i64*
  %84 = load i64, i64* %83, align 8
  br label %98

85:                                               ; preds = %70
  %86 = call noalias i8* @_ZnamRKSt9nothrow_t(i64 %77, %"struct.std::nothrow_t"* dereferenceable(1) @_ZSt7nothrow) #7
  %87 = getelementptr inbounds %"class.libgav1::Array2D", %"class.libgav1::Array2D"* %75, i64 0, i32 0, i32 0, i32 0, i32 0
  %88 = load i8*, i8** %87, align 8
  store i8* %86, i8** %87, align 8
  %89 = icmp eq i8* %88, null
  br i1 %89, label %92, label %90

90:                                               ; preds = %85
  call void @_ZdaPv(i8* nonnull %88) #7
  %91 = load i8*, i8** %87, align 8
  br label %92

92:                                               ; preds = %90, %85
  %93 = phi i8* [ %91, %90 ], [ %86, %85 ]
  %94 = icmp eq i8* %93, null
  br i1 %94, label %284, label %95

95:                                               ; preds = %92
  %96 = ptrtoint i8* %93 to i64
  %97 = load i64, i64* %78, align 8
  store i64 %97, i64* %79, align 8
  br label %98

98:                                               ; preds = %82, %95
  %99 = phi i64 [ %84, %82 ], [ %96, %95 ]
  %100 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %9, i64 0, i32 7, i64 %24, i32 3, i32 0
  store i32 %72, i32* %100, align 8
  %101 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %9, i64 0, i32 7, i64 %24, i32 3, i32 1
  store i32 %71, i32* %101, align 4
  %102 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %9, i64 0, i32 7, i64 %24, i32 3, i32 2
  %103 = bitcast i8** %102 to i64*
  store i64 %99, i64* %103, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #6
  store i32 0, i32* %3, align 4
  %104 = call zeroext i1 @_ZN7libgav19BitReader13DecodeUniformEiPi(%"class.libgav1::BitReader"* %19, i32 %28, i32* nonnull %3) #6
  %105 = load i32, i32* %3, align 4
  %106 = trunc i32 %105 to i8
  %107 = load i8*, i8** %102, align 8
  store i8 %106, i8* %107, align 1
  %108 = add i32 %74, -1
  %109 = add i32 %108, %73
  %110 = icmp sgt i32 %109, 1
  br i1 %110, label %111, label %118

111:                                              ; preds = %98
  %112 = trunc i32 %25 to i8
  %113 = add nsw i32 %28, -2
  %114 = sext i32 %113 to i64
  %115 = sext i32 %73 to i64
  %116 = sext i32 %108 to i64
  %117 = zext i32 %109 to i64
  br label %133

118:                                              ; preds = %150, %98
  %119 = icmp sgt i32 %71, %74
  %120 = icmp sgt i32 %73, 0
  %121 = and i1 %119, %120
  br i1 %121, label %122, label %232

122:                                              ; preds = %118
  %123 = sext i32 %74 to i64
  %124 = sext i32 %108 to i64
  %125 = sub nsw i32 %71, %74
  %126 = sext i32 %125 to i64
  %127 = zext i32 %73 to i64
  %128 = add nsw i64 %127, -1
  %129 = and i64 %127, 3
  %130 = icmp ult i64 %128, 3
  br i1 %130, label %215, label %131

131:                                              ; preds = %122
  %132 = sub nsw i64 %127, %129
  br label %174

133:                                              ; preds = %150, %111
  %134 = phi i64 [ 1, %111 ], [ %151, %150 ]
  %135 = trunc i64 %134 to i32
  %136 = icmp sgt i64 %134, %116
  %137 = select i1 %136, i32 %108, i32 %135
  %138 = sub nsw i64 %134, %115
  %139 = icmp sgt i64 %138, -1
  %140 = select i1 %139, i64 %138, i64 -1
  %141 = trunc i64 %140 to i32
  %142 = add nsw i32 %141, 1
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %20) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 512, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %21) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 64, i1 false)
  call void @_ZN7libgav14Tile28PopulatePaletteColorContextsERKNS0_5BlockENS_9PlaneTypeEiiiPA8_hPh(%"class.libgav1::Tile"* undef, %"struct.libgav1::Tile::Block"* dereferenceable(88) %1, i8 zeroext %112, i32 %135, i32 %137, i32 %142, [8 x i8]* nonnull %22, i8* nonnull %21)
  %143 = icmp sgt i32 %137, %141
  br i1 %143, label %144, label %150

144:                                              ; preds = %133
  %145 = icmp slt i64 %134, %116
  %146 = select i1 %145, i32 %135, i32 %108
  %147 = sext i32 %146 to i64
  %148 = shl i64 %140, 32
  %149 = ashr exact i64 %148, 32
  br label %153

150:                                              ; preds = %153, %133
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %21) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %20) #6
  %151 = add nuw nsw i64 %134, 1
  %152 = icmp eq i64 %151, %117
  br i1 %152, label %118, label %133

153:                                              ; preds = %144, %153
  %154 = phi i64 [ %147, %144 ], [ %171, %153 ]
  %155 = phi i64 [ 0, %144 ], [ %172, %153 ]
  %156 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i64
  %159 = getelementptr inbounds %"class.libgav1::Tile", %"class.libgav1::Tile"* %0, i64 0, i32 30, i32 78, i64 %24, i64 %114, i64 %158, i64 0
  %160 = call i32 @_ZN7libgav114DaalaBitReader10ReadSymbolEPti(%"class.libgav1::DaalaBitReader"* %18, i16* %159, i32 %28) #6
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds [64 x [8 x i8]], [64 x [8 x i8]]* %4, i64 0, i64 %155, i64 %161
  %163 = load i8, i8* %162, align 1
  %164 = sub nsw i64 %134, %154
  %165 = load i32, i32* %101, align 4
  %166 = sext i32 %165 to i64
  %167 = mul nsw i64 %164, %166
  %168 = load i8*, i8** %102, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 %167
  %170 = getelementptr inbounds i8, i8* %169, i64 %154
  store i8 %163, i8* %170, align 1
  %171 = add nsw i64 %154, -1
  %172 = add nuw nsw i64 %155, 1
  %173 = icmp sgt i64 %171, %149
  br i1 %173, label %153, label %150

174:                                              ; preds = %174, %131
  %175 = phi i64 [ 0, %131 ], [ %212, %174 ]
  %176 = phi i64 [ %132, %131 ], [ %213, %174 ]
  %177 = load i32, i32* %101, align 4
  %178 = sext i32 %177 to i64
  %179 = mul nsw i64 %175, %178
  %180 = load i8*, i8** %102, align 8
  %181 = getelementptr inbounds i8, i8* %180, i64 %179
  %182 = getelementptr inbounds i8, i8* %181, i64 %123
  %183 = getelementptr inbounds i8, i8* %181, i64 %124
  %184 = load i8, i8* %183, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %182, i8 %184, i64 %126, i1 false)
  %185 = or i64 %175, 1
  %186 = load i32, i32* %101, align 4
  %187 = sext i32 %186 to i64
  %188 = mul nsw i64 %185, %187
  %189 = load i8*, i8** %102, align 8
  %190 = getelementptr inbounds i8, i8* %189, i64 %188
  %191 = getelementptr inbounds i8, i8* %190, i64 %123
  %192 = getelementptr inbounds i8, i8* %190, i64 %124
  %193 = load i8, i8* %192, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %191, i8 %193, i64 %126, i1 false)
  %194 = or i64 %175, 2
  %195 = load i32, i32* %101, align 4
  %196 = sext i32 %195 to i64
  %197 = mul nsw i64 %194, %196
  %198 = load i8*, i8** %102, align 8
  %199 = getelementptr inbounds i8, i8* %198, i64 %197
  %200 = getelementptr inbounds i8, i8* %199, i64 %123
  %201 = getelementptr inbounds i8, i8* %199, i64 %124
  %202 = load i8, i8* %201, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %200, i8 %202, i64 %126, i1 false)
  %203 = or i64 %175, 3
  %204 = load i32, i32* %101, align 4
  %205 = sext i32 %204 to i64
  %206 = mul nsw i64 %203, %205
  %207 = load i8*, i8** %102, align 8
  %208 = getelementptr inbounds i8, i8* %207, i64 %206
  %209 = getelementptr inbounds i8, i8* %208, i64 %123
  %210 = getelementptr inbounds i8, i8* %208, i64 %124
  %211 = load i8, i8* %210, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %209, i8 %211, i64 %126, i1 false)
  %212 = add nuw nsw i64 %175, 4
  %213 = add i64 %176, -4
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %215, label %174

215:                                              ; preds = %174, %122
  %216 = phi i64 [ 0, %122 ], [ %212, %174 ]
  %217 = icmp eq i64 %129, 0
  br i1 %217, label %232, label %218

218:                                              ; preds = %215, %218
  %219 = phi i64 [ %229, %218 ], [ %216, %215 ]
  %220 = phi i64 [ %230, %218 ], [ %129, %215 ]
  %221 = load i32, i32* %101, align 4
  %222 = sext i32 %221 to i64
  %223 = mul nsw i64 %219, %222
  %224 = load i8*, i8** %102, align 8
  %225 = getelementptr inbounds i8, i8* %224, i64 %223
  %226 = getelementptr inbounds i8, i8* %225, i64 %123
  %227 = getelementptr inbounds i8, i8* %225, i64 %124
  %228 = load i8, i8* %227, align 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %226, i8 %228, i64 %126, i1 false)
  %229 = add nuw nsw i64 %219, 1
  %230 = add i64 %220, -1
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %218, !llvm.loop !11

232:                                              ; preds = %215, %218, %118
  %233 = icmp slt i32 %73, %72
  br i1 %233, label %234, label %257

234:                                              ; preds = %232
  %235 = add nsw i32 %73, -1
  %236 = sext i32 %235 to i64
  %237 = sext i32 %71 to i64
  %238 = sext i32 %73 to i64
  %239 = sext i32 %72 to i64
  %240 = sub nsw i64 %239, %238
  %241 = xor i64 %238, -1
  %242 = and i64 %240, 1
  %243 = icmp eq i64 %242, 0
  br i1 %243, label %253, label %244

244:                                              ; preds = %234
  %245 = load i32, i32* %101, align 4
  %246 = sext i32 %245 to i64
  %247 = mul nsw i64 %238, %246
  %248 = load i8*, i8** %102, align 8
  %249 = getelementptr inbounds i8, i8* %248, i64 %247
  %250 = mul nsw i64 %246, %236
  %251 = getelementptr inbounds i8, i8* %248, i64 %250
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %249, i8* align 1 %251, i64 %237, i1 false)
  %252 = add nsw i64 %238, 1
  br label %253

253:                                              ; preds = %244, %234
  %254 = phi i64 [ %252, %244 ], [ %238, %234 ]
  %255 = sub nsw i64 0, %239
  %256 = icmp eq i64 %241, %255
  br i1 %256, label %257, label %258

257:                                              ; preds = %253, %258, %232
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #6
  br label %277

258:                                              ; preds = %253, %258
  %259 = phi i64 [ %275, %258 ], [ %254, %253 ]
  %260 = load i32, i32* %101, align 4
  %261 = sext i32 %260 to i64
  %262 = mul nsw i64 %259, %261
  %263 = load i8*, i8** %102, align 8
  %264 = getelementptr inbounds i8, i8* %263, i64 %262
  %265 = mul nsw i64 %261, %236
  %266 = getelementptr inbounds i8, i8* %263, i64 %265
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %264, i8* align 1 %266, i64 %237, i1 false)
  %267 = add nsw i64 %259, 1
  %268 = load i32, i32* %101, align 4
  %269 = sext i32 %268 to i64
  %270 = mul nsw i64 %267, %269
  %271 = load i8*, i8** %102, align 8
  %272 = getelementptr inbounds i8, i8* %271, i64 %270
  %273 = mul nsw i64 %269, %236
  %274 = getelementptr inbounds i8, i8* %271, i64 %273
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %272, i8* align 1 %274, i64 %237, i1 false)
  %275 = add nsw i64 %259, 2
  %276 = icmp eq i64 %275, %239
  br i1 %276, label %257, label %258

277:                                              ; preds = %23, %257
  %278 = add nuw nsw i64 %24, 1
  %279 = add nuw nsw i32 %25, 1
  %280 = load i8, i8* %10, align 8, !range !2
  %281 = icmp eq i8 %280, 0
  %282 = select i1 %281, i64 1, i64 2
  %283 = icmp ult i64 %278, %282
  br i1 %283, label %23, label %285

284:                                              ; preds = %92
  store i64 0, i64* %79, align 8
  br label %285

285:                                              ; preds = %277, %284
  %286 = phi i1 [ false, %284 ], [ true, %277 ]
  ret i1 %286
}

declare zeroext i1 @_ZN7libgav19BitReader13DecodeUniformEiPi(%"class.libgav1::BitReader"*, i32, i32*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @_ZN7libgav114DaalaBitReader10ReadSymbolEPti(%"class.libgav1::DaalaBitReader"*, i16*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__115__inplace_mergeIRNS_6__lessIttEEPtEEvT0_S5_S5_T_NS_15iterator_traitsIS5_E15difference_typeES9_PNS8_10value_typeEl(i16*, i16*, i16*, %"struct.std::__1::__less.149"* dereferenceable(1), i64, i64, i16*, i64) local_unnamed_addr #0 comdat {
  %9 = ptrtoint i16* %6 to i64
  %10 = icmp eq i64 %5, 0
  br i1 %10, label %870, label %11

11:                                               ; preds = %8, %863
  %12 = phi i16* [ %868, %863 ], [ %0, %8 ]
  %13 = phi i16* [ %867, %863 ], [ %1, %8 ]
  %14 = phi i64 [ %866, %863 ], [ %5, %8 ]
  %15 = phi i64 [ %865, %863 ], [ %4, %8 ]
  %16 = phi i16* [ %864, %863 ], [ %2, %8 ]
  %17 = bitcast i16* %13 to i8*
  %18 = icmp sgt i64 %15, %7
  %19 = icmp sgt i64 %14, %7
  %20 = and i1 %18, %19
  br i1 %20, label %21, label %25

21:                                               ; preds = %11
  %22 = icmp eq i64 %15, 0
  br i1 %22, label %870, label %23

23:                                               ; preds = %21
  %24 = load i16, i16* %13, align 2
  br label %533

25:                                               ; preds = %11
  %26 = ptrtoint i16* %13 to i64
  %27 = ptrtoint i16* %12 to i64
  %28 = icmp sgt i64 %15, %14
  br i1 %28, label %155, label %29

29:                                               ; preds = %25
  %30 = icmp eq i16* %12, %13
  br i1 %30, label %870, label %31

31:                                               ; preds = %29
  %32 = getelementptr i16, i16* %13, i64 -1
  %33 = ptrtoint i16* %32 to i64
  %34 = sub i64 %33, %27
  %35 = lshr i64 %34, 1
  %36 = add nuw i64 %35, 1
  %37 = icmp ult i64 %36, 16
  br i1 %37, label %38, label %63

38:                                               ; preds = %153, %63, %31
  %39 = phi i16* [ %12, %63 ], [ %12, %31 ], [ %76, %153 ]
  %40 = phi i16* [ %6, %63 ], [ %6, %31 ], [ %77, %153 ]
  %41 = ptrtoint i16* %39 to i64
  %42 = getelementptr i16, i16* %13, i64 -1
  %43 = ptrtoint i16* %42 to i64
  %44 = sub i64 %43, %41
  %45 = lshr i64 %44, 1
  %46 = add nuw i64 %45, 1
  %47 = and i64 %46, 7
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %58, label %49

49:                                               ; preds = %38, %49
  %50 = phi i16* [ %54, %49 ], [ %39, %38 ]
  %51 = phi i16* [ %55, %49 ], [ %40, %38 ]
  %52 = phi i64 [ %56, %49 ], [ %47, %38 ]
  %53 = load i16, i16* %50, align 2
  store i16 %53, i16* %51, align 2
  %54 = getelementptr inbounds i16, i16* %50, i64 1
  %55 = getelementptr inbounds i16, i16* %51, i64 1
  %56 = add i64 %52, -1
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %49, !llvm.loop !12

58:                                               ; preds = %49, %38
  %59 = phi i16* [ undef, %38 ], [ %55, %49 ]
  %60 = phi i16* [ %39, %38 ], [ %54, %49 ]
  %61 = phi i16* [ %40, %38 ], [ %55, %49 ]
  %62 = icmp ult i64 %44, 14
  br i1 %62, label %281, label %310

63:                                               ; preds = %31
  %64 = getelementptr i16, i16* %13, i64 -1
  %65 = ptrtoint i16* %64 to i64
  %66 = sub i64 %65, %27
  %67 = lshr i64 %66, 1
  %68 = add nuw i64 %67, 1
  %69 = getelementptr i16, i16* %6, i64 %68
  %70 = getelementptr i16, i16* %12, i64 %68
  %71 = icmp ugt i16* %70, %6
  %72 = icmp ult i16* %12, %69
  %73 = and i1 %71, %72
  br i1 %73, label %38, label %74

74:                                               ; preds = %63
  %75 = and i64 %36, -16
  %76 = getelementptr i16, i16* %12, i64 %75
  %77 = getelementptr i16, i16* %6, i64 %75
  %78 = add i64 %75, -16
  %79 = lshr exact i64 %78, 4
  %80 = add nuw nsw i64 %79, 1
  %81 = and i64 %80, 3
  %82 = icmp ult i64 %78, 48
  br i1 %82, label %134, label %83

83:                                               ; preds = %74
  %84 = sub nsw i64 %80, %81
  br label %85

85:                                               ; preds = %85, %83
  %86 = phi i64 [ 0, %83 ], [ %131, %85 ]
  %87 = phi i64 [ %84, %83 ], [ %132, %85 ]
  %88 = getelementptr i16, i16* %12, i64 %86
  %89 = getelementptr i16, i16* %6, i64 %86
  %90 = bitcast i16* %88 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !13
  %92 = getelementptr i16, i16* %88, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !13
  %95 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %95, align 2, !alias.scope !16, !noalias !13
  %96 = getelementptr i16, i16* %89, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %97, align 2, !alias.scope !16, !noalias !13
  %98 = or i64 %86, 16
  %99 = getelementptr i16, i16* %12, i64 %98
  %100 = getelementptr i16, i16* %6, i64 %98
  %101 = bitcast i16* %99 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !13
  %103 = getelementptr i16, i16* %99, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !13
  %106 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %106, align 2, !alias.scope !16, !noalias !13
  %107 = getelementptr i16, i16* %100, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %108, align 2, !alias.scope !16, !noalias !13
  %109 = or i64 %86, 32
  %110 = getelementptr i16, i16* %12, i64 %109
  %111 = getelementptr i16, i16* %6, i64 %109
  %112 = bitcast i16* %110 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !13
  %114 = getelementptr i16, i16* %110, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !13
  %117 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %117, align 2, !alias.scope !16, !noalias !13
  %118 = getelementptr i16, i16* %111, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %119, align 2, !alias.scope !16, !noalias !13
  %120 = or i64 %86, 48
  %121 = getelementptr i16, i16* %12, i64 %120
  %122 = getelementptr i16, i16* %6, i64 %120
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !13
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !13
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !16, !noalias !13
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !16, !noalias !13
  %131 = add i64 %86, 64
  %132 = add i64 %87, -4
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %85, !llvm.loop !18

134:                                              ; preds = %85, %74
  %135 = phi i64 [ 0, %74 ], [ %131, %85 ]
  %136 = icmp eq i64 %81, 0
  br i1 %136, label %153, label %137

137:                                              ; preds = %134, %137
  %138 = phi i64 [ %150, %137 ], [ %135, %134 ]
  %139 = phi i64 [ %151, %137 ], [ %81, %134 ]
  %140 = getelementptr i16, i16* %12, i64 %138
  %141 = getelementptr i16, i16* %6, i64 %138
  %142 = bitcast i16* %140 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !13
  %144 = getelementptr i16, i16* %140, i64 8
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 2, !alias.scope !13
  %147 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %147, align 2, !alias.scope !16, !noalias !13
  %148 = getelementptr i16, i16* %141, i64 8
  %149 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %149, align 2, !alias.scope !16, !noalias !13
  %150 = add i64 %138, 16
  %151 = add i64 %139, -1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %137, !llvm.loop !19

153:                                              ; preds = %137, %134
  %154 = icmp eq i64 %36, %75
  br i1 %154, label %281, label %38

155:                                              ; preds = %25
  %156 = icmp eq i16* %13, %16
  br i1 %156, label %870, label %157

157:                                              ; preds = %155
  %158 = getelementptr i16, i16* %16, i64 -1
  %159 = ptrtoint i16* %158 to i64
  %160 = sub i64 %159, %26
  %161 = lshr i64 %160, 1
  %162 = add nuw i64 %161, 1
  %163 = icmp ult i64 %162, 16
  br i1 %163, label %164, label %189

164:                                              ; preds = %279, %189, %157
  %165 = phi i16* [ %13, %189 ], [ %13, %157 ], [ %202, %279 ]
  %166 = phi i16* [ %6, %189 ], [ %6, %157 ], [ %203, %279 ]
  %167 = ptrtoint i16* %165 to i64
  %168 = getelementptr i16, i16* %16, i64 -1
  %169 = ptrtoint i16* %168 to i64
  %170 = sub i64 %169, %167
  %171 = lshr i64 %170, 1
  %172 = add nuw i64 %171, 1
  %173 = and i64 %172, 7
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %184, label %175

175:                                              ; preds = %164, %175
  %176 = phi i16* [ %180, %175 ], [ %165, %164 ]
  %177 = phi i16* [ %181, %175 ], [ %166, %164 ]
  %178 = phi i64 [ %182, %175 ], [ %173, %164 ]
  %179 = load i16, i16* %176, align 2
  store i16 %179, i16* %177, align 2
  %180 = getelementptr inbounds i16, i16* %176, i64 1
  %181 = getelementptr inbounds i16, i16* %177, i64 1
  %182 = add i64 %178, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %175, !llvm.loop !20

184:                                              ; preds = %175, %164
  %185 = phi i16* [ undef, %164 ], [ %181, %175 ]
  %186 = phi i16* [ %165, %164 ], [ %180, %175 ]
  %187 = phi i16* [ %166, %164 ], [ %181, %175 ]
  %188 = icmp ult i64 %170, 14
  br i1 %188, label %338, label %505

189:                                              ; preds = %157
  %190 = getelementptr i16, i16* %16, i64 -1
  %191 = ptrtoint i16* %190 to i64
  %192 = sub i64 %191, %26
  %193 = lshr i64 %192, 1
  %194 = add nuw i64 %193, 1
  %195 = getelementptr i16, i16* %6, i64 %194
  %196 = getelementptr i16, i16* %13, i64 %194
  %197 = icmp ugt i16* %196, %6
  %198 = icmp ult i16* %13, %195
  %199 = and i1 %197, %198
  br i1 %199, label %164, label %200

200:                                              ; preds = %189
  %201 = and i64 %162, -16
  %202 = getelementptr i16, i16* %13, i64 %201
  %203 = getelementptr i16, i16* %6, i64 %201
  %204 = add i64 %201, -16
  %205 = lshr exact i64 %204, 4
  %206 = add nuw nsw i64 %205, 1
  %207 = and i64 %206, 3
  %208 = icmp ult i64 %204, 48
  br i1 %208, label %260, label %209

209:                                              ; preds = %200
  %210 = sub nsw i64 %206, %207
  br label %211

211:                                              ; preds = %211, %209
  %212 = phi i64 [ 0, %209 ], [ %257, %211 ]
  %213 = phi i64 [ %210, %209 ], [ %258, %211 ]
  %214 = getelementptr i16, i16* %13, i64 %212
  %215 = getelementptr i16, i16* %6, i64 %212
  %216 = bitcast i16* %214 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2, !alias.scope !21
  %218 = getelementptr i16, i16* %214, i64 8
  %219 = bitcast i16* %218 to <8 x i16>*
  %220 = load <8 x i16>, <8 x i16>* %219, align 2, !alias.scope !21
  %221 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %221, align 2, !alias.scope !24, !noalias !21
  %222 = getelementptr i16, i16* %215, i64 8
  %223 = bitcast i16* %222 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %223, align 2, !alias.scope !24, !noalias !21
  %224 = or i64 %212, 16
  %225 = getelementptr i16, i16* %13, i64 %224
  %226 = getelementptr i16, i16* %6, i64 %224
  %227 = bitcast i16* %225 to <8 x i16>*
  %228 = load <8 x i16>, <8 x i16>* %227, align 2, !alias.scope !21
  %229 = getelementptr i16, i16* %225, i64 8
  %230 = bitcast i16* %229 to <8 x i16>*
  %231 = load <8 x i16>, <8 x i16>* %230, align 2, !alias.scope !21
  %232 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %228, <8 x i16>* %232, align 2, !alias.scope !24, !noalias !21
  %233 = getelementptr i16, i16* %226, i64 8
  %234 = bitcast i16* %233 to <8 x i16>*
  store <8 x i16> %231, <8 x i16>* %234, align 2, !alias.scope !24, !noalias !21
  %235 = or i64 %212, 32
  %236 = getelementptr i16, i16* %13, i64 %235
  %237 = getelementptr i16, i16* %6, i64 %235
  %238 = bitcast i16* %236 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 2, !alias.scope !21
  %240 = getelementptr i16, i16* %236, i64 8
  %241 = bitcast i16* %240 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 2, !alias.scope !21
  %243 = bitcast i16* %237 to <8 x i16>*
  store <8 x i16> %239, <8 x i16>* %243, align 2, !alias.scope !24, !noalias !21
  %244 = getelementptr i16, i16* %237, i64 8
  %245 = bitcast i16* %244 to <8 x i16>*
  store <8 x i16> %242, <8 x i16>* %245, align 2, !alias.scope !24, !noalias !21
  %246 = or i64 %212, 48
  %247 = getelementptr i16, i16* %13, i64 %246
  %248 = getelementptr i16, i16* %6, i64 %246
  %249 = bitcast i16* %247 to <8 x i16>*
  %250 = load <8 x i16>, <8 x i16>* %249, align 2, !alias.scope !21
  %251 = getelementptr i16, i16* %247, i64 8
  %252 = bitcast i16* %251 to <8 x i16>*
  %253 = load <8 x i16>, <8 x i16>* %252, align 2, !alias.scope !21
  %254 = bitcast i16* %248 to <8 x i16>*
  store <8 x i16> %250, <8 x i16>* %254, align 2, !alias.scope !24, !noalias !21
  %255 = getelementptr i16, i16* %248, i64 8
  %256 = bitcast i16* %255 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %256, align 2, !alias.scope !24, !noalias !21
  %257 = add i64 %212, 64
  %258 = add i64 %213, -4
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %211, !llvm.loop !26

260:                                              ; preds = %211, %200
  %261 = phi i64 [ 0, %200 ], [ %257, %211 ]
  %262 = icmp eq i64 %207, 0
  br i1 %262, label %279, label %263

263:                                              ; preds = %260, %263
  %264 = phi i64 [ %276, %263 ], [ %261, %260 ]
  %265 = phi i64 [ %277, %263 ], [ %207, %260 ]
  %266 = getelementptr i16, i16* %13, i64 %264
  %267 = getelementptr i16, i16* %6, i64 %264
  %268 = bitcast i16* %266 to <8 x i16>*
  %269 = load <8 x i16>, <8 x i16>* %268, align 2, !alias.scope !21
  %270 = getelementptr i16, i16* %266, i64 8
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 2, !alias.scope !21
  %273 = bitcast i16* %267 to <8 x i16>*
  store <8 x i16> %269, <8 x i16>* %273, align 2, !alias.scope !24, !noalias !21
  %274 = getelementptr i16, i16* %267, i64 8
  %275 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %272, <8 x i16>* %275, align 2, !alias.scope !24, !noalias !21
  %276 = add i64 %264, 16
  %277 = add i64 %265, -1
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %263, !llvm.loop !27

279:                                              ; preds = %263, %260
  %280 = icmp eq i64 %162, %201
  br i1 %280, label %338, label %164

281:                                              ; preds = %58, %310, %153
  %282 = phi i16* [ %77, %153 ], [ %59, %58 ], [ %336, %310 ]
  %283 = icmp eq i16* %282, %6
  br i1 %283, label %870, label %284

284:                                              ; preds = %281, %305
  %285 = phi i16* [ %307, %305 ], [ %6, %281 ]
  %286 = phi i16* [ %308, %305 ], [ %12, %281 ]
  %287 = phi i16* [ %306, %305 ], [ %13, %281 ]
  %288 = icmp eq i16* %287, %16
  br i1 %288, label %289, label %297

289:                                              ; preds = %284
  %290 = ptrtoint i16* %282 to i64
  %291 = ptrtoint i16* %285 to i64
  %292 = sub i64 %290, %291
  %293 = icmp eq i64 %292, 0
  br i1 %293, label %870, label %294

294:                                              ; preds = %289
  %295 = bitcast i16* %286 to i8*
  %296 = bitcast i16* %285 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %295, i8* align 2 %296, i64 %292, i1 false) #6
  br label %870

297:                                              ; preds = %284
  %298 = load i16, i16* %287, align 2
  %299 = load i16, i16* %285, align 2
  %300 = icmp ult i16 %298, %299
  br i1 %300, label %301, label %303

301:                                              ; preds = %297
  store i16 %298, i16* %286, align 2
  %302 = getelementptr inbounds i16, i16* %287, i64 1
  br label %305

303:                                              ; preds = %297
  store i16 %299, i16* %286, align 2
  %304 = getelementptr inbounds i16, i16* %285, i64 1
  br label %305

305:                                              ; preds = %303, %301
  %306 = phi i16* [ %302, %301 ], [ %287, %303 ]
  %307 = phi i16* [ %285, %301 ], [ %304, %303 ]
  %308 = getelementptr inbounds i16, i16* %286, i64 1
  %309 = icmp eq i16* %307, %282
  br i1 %309, label %870, label %284

310:                                              ; preds = %58, %310
  %311 = phi i16* [ %335, %310 ], [ %60, %58 ]
  %312 = phi i16* [ %336, %310 ], [ %61, %58 ]
  %313 = load i16, i16* %311, align 2
  store i16 %313, i16* %312, align 2
  %314 = getelementptr inbounds i16, i16* %311, i64 1
  %315 = getelementptr inbounds i16, i16* %312, i64 1
  %316 = load i16, i16* %314, align 2
  store i16 %316, i16* %315, align 2
  %317 = getelementptr inbounds i16, i16* %311, i64 2
  %318 = getelementptr inbounds i16, i16* %312, i64 2
  %319 = load i16, i16* %317, align 2
  store i16 %319, i16* %318, align 2
  %320 = getelementptr inbounds i16, i16* %311, i64 3
  %321 = getelementptr inbounds i16, i16* %312, i64 3
  %322 = load i16, i16* %320, align 2
  store i16 %322, i16* %321, align 2
  %323 = getelementptr inbounds i16, i16* %311, i64 4
  %324 = getelementptr inbounds i16, i16* %312, i64 4
  %325 = load i16, i16* %323, align 2
  store i16 %325, i16* %324, align 2
  %326 = getelementptr inbounds i16, i16* %311, i64 5
  %327 = getelementptr inbounds i16, i16* %312, i64 5
  %328 = load i16, i16* %326, align 2
  store i16 %328, i16* %327, align 2
  %329 = getelementptr inbounds i16, i16* %311, i64 6
  %330 = getelementptr inbounds i16, i16* %312, i64 6
  %331 = load i16, i16* %329, align 2
  store i16 %331, i16* %330, align 2
  %332 = getelementptr inbounds i16, i16* %311, i64 7
  %333 = getelementptr inbounds i16, i16* %312, i64 7
  %334 = load i16, i16* %332, align 2
  store i16 %334, i16* %333, align 2
  %335 = getelementptr inbounds i16, i16* %311, i64 8
  %336 = getelementptr inbounds i16, i16* %312, i64 8
  %337 = icmp eq i16* %335, %13
  br i1 %337, label %281, label %310, !llvm.loop !28

338:                                              ; preds = %184, %505, %279
  %339 = phi i16* [ %203, %279 ], [ %185, %184 ], [ %531, %505 ]
  %340 = icmp eq i16* %339, %6
  br i1 %340, label %870, label %341

341:                                              ; preds = %338, %494
  %342 = phi i16* [ %500, %494 ], [ %16, %338 ]
  %343 = phi i16* [ %503, %494 ], [ %339, %338 ]
  %344 = phi i16* [ %502, %494 ], [ %13, %338 ]
  %345 = icmp eq i16* %344, %12
  br i1 %345, label %346, label %494

346:                                              ; preds = %341
  %347 = getelementptr i16, i16* %343, i64 -1
  %348 = ptrtoint i16* %347 to i64
  %349 = sub i64 %348, %9
  %350 = lshr i64 %349, 1
  %351 = add nuw i64 %350, 1
  %352 = icmp ult i64 %351, 16
  br i1 %352, label %443, label %353

353:                                              ; preds = %346
  %354 = getelementptr i16, i16* %343, i64 -1
  %355 = ptrtoint i16* %354 to i64
  %356 = sub i64 %355, %9
  %357 = lshr i64 %356, 1
  %358 = xor i64 %357, -1
  %359 = getelementptr i16, i16* %342, i64 %358
  %360 = getelementptr i16, i16* %343, i64 %358
  %361 = icmp ult i16* %359, %343
  %362 = icmp ult i16* %360, %342
  %363 = and i1 %361, %362
  br i1 %363, label %443, label %364

364:                                              ; preds = %353
  %365 = and i64 %351, -16
  %366 = sub i64 0, %365
  %367 = getelementptr i16, i16* %343, i64 %366
  %368 = sub i64 0, %365
  %369 = getelementptr i16, i16* %342, i64 %368
  %370 = add i64 %365, -16
  %371 = lshr exact i64 %370, 4
  %372 = add nuw nsw i64 %371, 1
  %373 = and i64 %372, 1
  %374 = icmp eq i64 %370, 0
  br i1 %374, label %421, label %375

375:                                              ; preds = %364
  %376 = sub nuw nsw i64 %372, %373
  %377 = getelementptr i16, i16* %343, i64 -1
  %378 = getelementptr i16, i16* %342, i64 -1
  %379 = getelementptr i16, i16* %343, i64 -1
  %380 = getelementptr i16, i16* %342, i64 -1
  br label %381

381:                                              ; preds = %381, %375
  %382 = phi i64 [ 0, %375 ], [ %416, %381 ]
  %383 = phi i64 [ %376, %375 ], [ %417, %381 ]
  %384 = sub i64 0, %382
  %385 = sub i64 0, %382
  %386 = getelementptr inbounds i16, i16* %377, i64 %384
  %387 = getelementptr inbounds i16, i16* %386, i64 -7
  %388 = bitcast i16* %387 to <8 x i16>*
  %389 = load <8 x i16>, <8 x i16>* %388, align 2, !alias.scope !29
  %390 = getelementptr inbounds i16, i16* %386, i64 -8
  %391 = getelementptr inbounds i16, i16* %390, i64 -7
  %392 = bitcast i16* %391 to <8 x i16>*
  %393 = load <8 x i16>, <8 x i16>* %392, align 2, !alias.scope !29
  %394 = getelementptr inbounds i16, i16* %378, i64 %385
  %395 = getelementptr inbounds i16, i16* %394, i64 -7
  %396 = bitcast i16* %395 to <8 x i16>*
  store <8 x i16> %389, <8 x i16>* %396, align 2, !alias.scope !32, !noalias !29
  %397 = getelementptr inbounds i16, i16* %394, i64 -8
  %398 = getelementptr inbounds i16, i16* %397, i64 -7
  %399 = bitcast i16* %398 to <8 x i16>*
  store <8 x i16> %393, <8 x i16>* %399, align 2, !alias.scope !32, !noalias !29
  %400 = sub nuw nsw i64 -16, %382
  %401 = sub nuw nsw i64 -16, %382
  %402 = getelementptr inbounds i16, i16* %379, i64 %400
  %403 = getelementptr inbounds i16, i16* %402, i64 -7
  %404 = bitcast i16* %403 to <8 x i16>*
  %405 = load <8 x i16>, <8 x i16>* %404, align 2, !alias.scope !29
  %406 = getelementptr inbounds i16, i16* %402, i64 -8
  %407 = getelementptr inbounds i16, i16* %406, i64 -7
  %408 = bitcast i16* %407 to <8 x i16>*
  %409 = load <8 x i16>, <8 x i16>* %408, align 2, !alias.scope !29
  %410 = getelementptr inbounds i16, i16* %380, i64 %401
  %411 = getelementptr inbounds i16, i16* %410, i64 -7
  %412 = bitcast i16* %411 to <8 x i16>*
  store <8 x i16> %405, <8 x i16>* %412, align 2, !alias.scope !32, !noalias !29
  %413 = getelementptr inbounds i16, i16* %410, i64 -8
  %414 = getelementptr inbounds i16, i16* %413, i64 -7
  %415 = bitcast i16* %414 to <8 x i16>*
  store <8 x i16> %409, <8 x i16>* %415, align 2, !alias.scope !32, !noalias !29
  %416 = add i64 %382, 32
  %417 = add i64 %383, -2
  %418 = icmp eq i64 %417, 0
  br i1 %418, label %419, label %381, !llvm.loop !34

419:                                              ; preds = %381
  %420 = sub nuw nsw i64 -32, %382
  br label %421

421:                                              ; preds = %419, %364
  %422 = phi i64 [ 0, %364 ], [ %420, %419 ]
  %423 = icmp eq i64 %373, 0
  br i1 %423, label %441, label %424

424:                                              ; preds = %421
  %425 = getelementptr i16, i16* %343, i64 -1
  %426 = getelementptr i16, i16* %342, i64 -1
  %427 = getelementptr inbounds i16, i16* %425, i64 %422
  %428 = getelementptr inbounds i16, i16* %427, i64 -7
  %429 = bitcast i16* %428 to <8 x i16>*
  %430 = load <8 x i16>, <8 x i16>* %429, align 2, !alias.scope !29
  %431 = getelementptr inbounds i16, i16* %427, i64 -8
  %432 = getelementptr inbounds i16, i16* %431, i64 -7
  %433 = bitcast i16* %432 to <8 x i16>*
  %434 = load <8 x i16>, <8 x i16>* %433, align 2, !alias.scope !29
  %435 = getelementptr inbounds i16, i16* %426, i64 %422
  %436 = getelementptr inbounds i16, i16* %435, i64 -7
  %437 = bitcast i16* %436 to <8 x i16>*
  store <8 x i16> %430, <8 x i16>* %437, align 2, !alias.scope !32, !noalias !29
  %438 = getelementptr inbounds i16, i16* %435, i64 -8
  %439 = getelementptr inbounds i16, i16* %438, i64 -7
  %440 = bitcast i16* %439 to <8 x i16>*
  store <8 x i16> %434, <8 x i16>* %440, align 2, !alias.scope !32, !noalias !29
  br label %441

441:                                              ; preds = %421, %424
  %442 = icmp eq i64 %351, %365
  br i1 %442, label %870, label %443

443:                                              ; preds = %441, %353, %346
  %444 = phi i16* [ %343, %353 ], [ %343, %346 ], [ %367, %441 ]
  %445 = phi i16* [ %342, %353 ], [ %342, %346 ], [ %369, %441 ]
  %446 = getelementptr i16, i16* %444, i64 -1
  %447 = ptrtoint i16* %446 to i64
  %448 = sub i64 %447, %9
  %449 = lshr i64 %448, 1
  %450 = add nuw i64 %449, 1
  %451 = and i64 %450, 7
  %452 = icmp eq i64 %451, 0
  br i1 %452, label %462, label %453

453:                                              ; preds = %443, %453
  %454 = phi i16* [ %457, %453 ], [ %444, %443 ]
  %455 = phi i16* [ %459, %453 ], [ %445, %443 ]
  %456 = phi i64 [ %460, %453 ], [ %451, %443 ]
  %457 = getelementptr inbounds i16, i16* %454, i64 -1
  %458 = load i16, i16* %457, align 2
  %459 = getelementptr inbounds i16, i16* %455, i64 -1
  store i16 %458, i16* %459, align 2
  %460 = add i64 %456, -1
  %461 = icmp eq i64 %460, 0
  br i1 %461, label %462, label %453, !llvm.loop !35

462:                                              ; preds = %453, %443
  %463 = phi i16* [ %444, %443 ], [ %457, %453 ]
  %464 = phi i16* [ %445, %443 ], [ %459, %453 ]
  %465 = icmp ult i64 %448, 14
  br i1 %465, label %870, label %466

466:                                              ; preds = %462, %466
  %467 = phi i16* [ %490, %466 ], [ %463, %462 ]
  %468 = phi i16* [ %492, %466 ], [ %464, %462 ]
  %469 = getelementptr inbounds i16, i16* %467, i64 -1
  %470 = load i16, i16* %469, align 2
  %471 = getelementptr inbounds i16, i16* %468, i64 -1
  store i16 %470, i16* %471, align 2
  %472 = getelementptr inbounds i16, i16* %467, i64 -2
  %473 = load i16, i16* %472, align 2
  %474 = getelementptr inbounds i16, i16* %468, i64 -2
  store i16 %473, i16* %474, align 2
  %475 = getelementptr inbounds i16, i16* %467, i64 -3
  %476 = load i16, i16* %475, align 2
  %477 = getelementptr inbounds i16, i16* %468, i64 -3
  store i16 %476, i16* %477, align 2
  %478 = getelementptr inbounds i16, i16* %467, i64 -4
  %479 = load i16, i16* %478, align 2
  %480 = getelementptr inbounds i16, i16* %468, i64 -4
  store i16 %479, i16* %480, align 2
  %481 = getelementptr inbounds i16, i16* %467, i64 -5
  %482 = load i16, i16* %481, align 2
  %483 = getelementptr inbounds i16, i16* %468, i64 -5
  store i16 %482, i16* %483, align 2
  %484 = getelementptr inbounds i16, i16* %467, i64 -6
  %485 = load i16, i16* %484, align 2
  %486 = getelementptr inbounds i16, i16* %468, i64 -6
  store i16 %485, i16* %486, align 2
  %487 = getelementptr inbounds i16, i16* %467, i64 -7
  %488 = load i16, i16* %487, align 2
  %489 = getelementptr inbounds i16, i16* %468, i64 -7
  store i16 %488, i16* %489, align 2
  %490 = getelementptr inbounds i16, i16* %467, i64 -8
  %491 = load i16, i16* %490, align 2
  %492 = getelementptr inbounds i16, i16* %468, i64 -8
  store i16 %491, i16* %492, align 2
  %493 = icmp eq i16* %490, %6
  br i1 %493, label %870, label %466, !llvm.loop !36

494:                                              ; preds = %341
  %495 = getelementptr inbounds i16, i16* %344, i64 -1
  %496 = getelementptr inbounds i16, i16* %343, i64 -1
  %497 = load i16, i16* %496, align 2
  %498 = load i16, i16* %495, align 2
  %499 = icmp ult i16 %497, %498
  %500 = getelementptr inbounds i16, i16* %342, i64 -1
  %501 = select i1 %499, i16 %498, i16 %497
  %502 = select i1 %499, i16* %495, i16* %344
  %503 = select i1 %499, i16* %343, i16* %496
  store i16 %501, i16* %500, align 2
  %504 = icmp eq i16* %503, %6
  br i1 %504, label %870, label %341

505:                                              ; preds = %184, %505
  %506 = phi i16* [ %530, %505 ], [ %186, %184 ]
  %507 = phi i16* [ %531, %505 ], [ %187, %184 ]
  %508 = load i16, i16* %506, align 2
  store i16 %508, i16* %507, align 2
  %509 = getelementptr inbounds i16, i16* %506, i64 1
  %510 = getelementptr inbounds i16, i16* %507, i64 1
  %511 = load i16, i16* %509, align 2
  store i16 %511, i16* %510, align 2
  %512 = getelementptr inbounds i16, i16* %506, i64 2
  %513 = getelementptr inbounds i16, i16* %507, i64 2
  %514 = load i16, i16* %512, align 2
  store i16 %514, i16* %513, align 2
  %515 = getelementptr inbounds i16, i16* %506, i64 3
  %516 = getelementptr inbounds i16, i16* %507, i64 3
  %517 = load i16, i16* %515, align 2
  store i16 %517, i16* %516, align 2
  %518 = getelementptr inbounds i16, i16* %506, i64 4
  %519 = getelementptr inbounds i16, i16* %507, i64 4
  %520 = load i16, i16* %518, align 2
  store i16 %520, i16* %519, align 2
  %521 = getelementptr inbounds i16, i16* %506, i64 5
  %522 = getelementptr inbounds i16, i16* %507, i64 5
  %523 = load i16, i16* %521, align 2
  store i16 %523, i16* %522, align 2
  %524 = getelementptr inbounds i16, i16* %506, i64 6
  %525 = getelementptr inbounds i16, i16* %507, i64 6
  %526 = load i16, i16* %524, align 2
  store i16 %526, i16* %525, align 2
  %527 = getelementptr inbounds i16, i16* %506, i64 7
  %528 = getelementptr inbounds i16, i16* %507, i64 7
  %529 = load i16, i16* %527, align 2
  store i16 %529, i16* %528, align 2
  %530 = getelementptr inbounds i16, i16* %506, i64 8
  %531 = getelementptr inbounds i16, i16* %507, i64 8
  %532 = icmp eq i16* %530, %16
  br i1 %532, label %338, label %505, !llvm.loop !37

533:                                              ; preds = %23, %538
  %534 = phi i16* [ %12, %23 ], [ %539, %538 ]
  %535 = phi i64 [ %15, %23 ], [ %540, %538 ]
  %536 = load i16, i16* %534, align 2
  %537 = icmp ult i16 %24, %536
  br i1 %537, label %542, label %538

538:                                              ; preds = %533
  %539 = getelementptr inbounds i16, i16* %534, i64 1
  %540 = add nsw i64 %535, -1
  %541 = icmp eq i64 %540, 0
  br i1 %541, label %870, label %533

542:                                              ; preds = %533
  %543 = icmp slt i64 %535, %14
  br i1 %543, label %544, label %574

544:                                              ; preds = %542
  %545 = sdiv i64 %14, 2
  %546 = getelementptr inbounds i16, i16* %13, i64 %545
  %547 = ptrtoint i16* %13 to i64
  %548 = ptrtoint i16* %534 to i64
  %549 = sub i64 %547, %548
  %550 = icmp eq i64 %549, 0
  br i1 %550, label %569, label %551

551:                                              ; preds = %544
  %552 = ashr exact i64 %549, 1
  %553 = load i16, i16* %546, align 2
  br label %554

554:                                              ; preds = %554, %551
  %555 = phi i64 [ %552, %551 ], [ %565, %554 ]
  %556 = phi i16* [ %534, %551 ], [ %564, %554 ]
  %557 = lshr i64 %555, 1
  %558 = getelementptr inbounds i16, i16* %556, i64 %557
  %559 = load i16, i16* %558, align 2
  %560 = icmp ult i16 %553, %559
  %561 = getelementptr inbounds i16, i16* %558, i64 1
  %562 = xor i64 %557, -1
  %563 = add i64 %555, %562
  %564 = select i1 %560, i16* %556, i16* %561
  %565 = select i1 %560, i64 %557, i64 %563
  %566 = icmp eq i64 %565, 0
  br i1 %566, label %567, label %554

567:                                              ; preds = %554
  %568 = ptrtoint i16* %564 to i64
  br label %569

569:                                              ; preds = %567, %544
  %570 = phi i64 [ %568, %567 ], [ %548, %544 ]
  %571 = phi i16* [ %564, %567 ], [ %534, %544 ]
  %572 = sub i64 %570, %548
  %573 = ashr exact i64 %572, 1
  br label %607

574:                                              ; preds = %542
  %575 = icmp eq i64 %535, 1
  br i1 %575, label %576, label %577

576:                                              ; preds = %574
  store i16 %24, i16* %534, align 2
  store i16 %536, i16* %13, align 2
  br label %870

577:                                              ; preds = %574
  %578 = sdiv i64 %535, 2
  %579 = getelementptr inbounds i16, i16* %534, i64 %578
  %580 = ptrtoint i16* %16 to i64
  %581 = ptrtoint i16* %13 to i64
  %582 = sub i64 %580, %581
  %583 = icmp eq i64 %582, 0
  br i1 %583, label %602, label %584

584:                                              ; preds = %577
  %585 = ashr exact i64 %582, 1
  %586 = load i16, i16* %579, align 2
  br label %587

587:                                              ; preds = %587, %584
  %588 = phi i64 [ %585, %584 ], [ %598, %587 ]
  %589 = phi i16* [ %13, %584 ], [ %597, %587 ]
  %590 = lshr i64 %588, 1
  %591 = getelementptr inbounds i16, i16* %589, i64 %590
  %592 = load i16, i16* %591, align 2
  %593 = icmp ult i16 %592, %586
  %594 = getelementptr inbounds i16, i16* %591, i64 1
  %595 = xor i64 %590, -1
  %596 = add i64 %588, %595
  %597 = select i1 %593, i16* %594, i16* %589
  %598 = select i1 %593, i64 %596, i64 %590
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %600, label %587

600:                                              ; preds = %587
  %601 = ptrtoint i16* %597 to i64
  br label %602

602:                                              ; preds = %600, %577
  %603 = phi i64 [ %601, %600 ], [ %581, %577 ]
  %604 = phi i16* [ %597, %600 ], [ %13, %577 ]
  %605 = sub i64 %603, %581
  %606 = ashr exact i64 %605, 1
  br label %607

607:                                              ; preds = %602, %569
  %608 = phi i16* [ %571, %569 ], [ %579, %602 ]
  %609 = phi i16* [ %546, %569 ], [ %604, %602 ]
  %610 = phi i64 [ %573, %569 ], [ %578, %602 ]
  %611 = phi i64 [ %545, %569 ], [ %606, %602 ]
  %612 = ptrtoint i16* %608 to i64
  %613 = bitcast i16* %608 to i8*
  %614 = sub nsw i64 %535, %610
  %615 = sub nsw i64 %14, %611
  %616 = icmp eq i16* %608, %13
  br i1 %616, label %856, label %617

617:                                              ; preds = %607
  %618 = icmp eq i16* %13, %609
  br i1 %618, label %856, label %619

619:                                              ; preds = %617
  %620 = getelementptr inbounds i16, i16* %608, i64 1
  %621 = icmp eq i16* %620, %13
  br i1 %621, label %622, label %632

622:                                              ; preds = %619
  %623 = load i16, i16* %608, align 2
  %624 = ptrtoint i16* %609 to i64
  %625 = ptrtoint i16* %13 to i64
  %626 = sub i64 %624, %625
  %627 = ashr exact i64 %626, 1
  %628 = icmp eq i64 %626, 0
  br i1 %628, label %630, label %629

629:                                              ; preds = %622
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %613, i8* align 2 %17, i64 %626, i1 false) #6
  br label %630

630:                                              ; preds = %629, %622
  %631 = getelementptr inbounds i16, i16* %608, i64 %627
  store i16 %623, i16* %631, align 2
  br label %856

632:                                              ; preds = %619
  %633 = getelementptr inbounds i16, i16* %13, i64 1
  %634 = icmp eq i16* %633, %609
  br i1 %634, label %635, label %648

635:                                              ; preds = %632
  %636 = getelementptr inbounds i16, i16* %609, i64 -1
  %637 = load i16, i16* %636, align 2
  %638 = ptrtoint i16* %636 to i64
  %639 = sub i64 %638, %612
  %640 = icmp eq i64 %639, 0
  br i1 %640, label %646, label %641

641:                                              ; preds = %635
  %642 = ashr exact i64 %639, 1
  %643 = sub nsw i64 0, %642
  %644 = getelementptr inbounds i16, i16* %609, i64 %643
  %645 = bitcast i16* %644 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %645, i8* align 2 %613, i64 %639, i1 false) #6
  br label %646

646:                                              ; preds = %641, %635
  %647 = phi i16* [ %644, %641 ], [ %609, %635 ]
  store i16 %637, i16* %608, align 2
  br label %856

648:                                              ; preds = %632
  %649 = ptrtoint i16* %13 to i64
  %650 = ptrtoint i16* %608 to i64
  %651 = sub i64 %649, %650
  %652 = ashr exact i64 %651, 1
  %653 = ptrtoint i16* %609 to i64
  %654 = sub i64 %653, %649
  %655 = ashr exact i64 %654, 1
  %656 = icmp eq i64 %652, %655
  br i1 %656, label %657, label %798

657:                                              ; preds = %648
  %658 = load i16, i16* %608, align 2
  store i16 %24, i16* %608, align 2
  store i16 %658, i16* %13, align 2
  %659 = getelementptr inbounds i16, i16* %608, i64 1
  %660 = getelementptr inbounds i16, i16* %13, i64 1
  %661 = icmp eq i16* %659, %13
  br i1 %661, label %856, label %662

662:                                              ; preds = %657
  %663 = getelementptr i16, i16* %13, i64 -2
  %664 = ptrtoint i16* %663 to i64
  %665 = sub i64 %664, %612
  %666 = lshr i64 %665, 1
  %667 = add nuw i64 %666, 1
  %668 = icmp ult i64 %667, 16
  br i1 %668, label %753, label %669

669:                                              ; preds = %662
  %670 = getelementptr i16, i16* %608, i64 2
  %671 = getelementptr i16, i16* %13, i64 -2
  %672 = ptrtoint i16* %671 to i64
  %673 = sub i64 %672, %612
  %674 = lshr i64 %673, 1
  %675 = getelementptr i16, i16* %670, i64 %674
  %676 = getelementptr i16, i16* %13, i64 2
  %677 = getelementptr i16, i16* %676, i64 %674
  %678 = icmp ult i16* %659, %677
  %679 = icmp ult i16* %660, %675
  %680 = and i1 %678, %679
  br i1 %680, label %753, label %681

681:                                              ; preds = %669
  %682 = and i64 %667, -16
  %683 = getelementptr i16, i16* %660, i64 %682
  %684 = getelementptr i16, i16* %659, i64 %682
  %685 = add i64 %682, -16
  %686 = lshr exact i64 %685, 4
  %687 = add nuw nsw i64 %686, 1
  %688 = and i64 %687, 1
  %689 = icmp eq i64 %685, 0
  br i1 %689, label %731, label %690

690:                                              ; preds = %681
  %691 = sub nuw nsw i64 %687, %688
  br label %692

692:                                              ; preds = %692, %690
  %693 = phi i64 [ 0, %690 ], [ %728, %692 ]
  %694 = phi i64 [ %691, %690 ], [ %729, %692 ]
  %695 = getelementptr i16, i16* %660, i64 %693
  %696 = getelementptr i16, i16* %659, i64 %693
  %697 = bitcast i16* %695 to <8 x i16>*
  %698 = load <8 x i16>, <8 x i16>* %697, align 2, !alias.scope !38
  %699 = getelementptr i16, i16* %695, i64 8
  %700 = bitcast i16* %699 to <8 x i16>*
  %701 = load <8 x i16>, <8 x i16>* %700, align 2, !alias.scope !38
  %702 = bitcast i16* %696 to <8 x i16>*
  %703 = load <8 x i16>, <8 x i16>* %702, align 2, !alias.scope !41, !noalias !38
  %704 = getelementptr i16, i16* %696, i64 8
  %705 = bitcast i16* %704 to <8 x i16>*
  %706 = load <8 x i16>, <8 x i16>* %705, align 2, !alias.scope !41, !noalias !38
  %707 = bitcast i16* %696 to <8 x i16>*
  store <8 x i16> %698, <8 x i16>* %707, align 2, !alias.scope !41, !noalias !38
  %708 = bitcast i16* %704 to <8 x i16>*
  store <8 x i16> %701, <8 x i16>* %708, align 2, !alias.scope !41, !noalias !38
  %709 = bitcast i16* %695 to <8 x i16>*
  store <8 x i16> %703, <8 x i16>* %709, align 2, !alias.scope !38
  %710 = bitcast i16* %699 to <8 x i16>*
  store <8 x i16> %706, <8 x i16>* %710, align 2, !alias.scope !38
  %711 = or i64 %693, 16
  %712 = getelementptr i16, i16* %660, i64 %711
  %713 = getelementptr i16, i16* %659, i64 %711
  %714 = bitcast i16* %712 to <8 x i16>*
  %715 = load <8 x i16>, <8 x i16>* %714, align 2, !alias.scope !38
  %716 = getelementptr i16, i16* %712, i64 8
  %717 = bitcast i16* %716 to <8 x i16>*
  %718 = load <8 x i16>, <8 x i16>* %717, align 2, !alias.scope !38
  %719 = bitcast i16* %713 to <8 x i16>*
  %720 = load <8 x i16>, <8 x i16>* %719, align 2, !alias.scope !41, !noalias !38
  %721 = getelementptr i16, i16* %713, i64 8
  %722 = bitcast i16* %721 to <8 x i16>*
  %723 = load <8 x i16>, <8 x i16>* %722, align 2, !alias.scope !41, !noalias !38
  %724 = bitcast i16* %713 to <8 x i16>*
  store <8 x i16> %715, <8 x i16>* %724, align 2, !alias.scope !41, !noalias !38
  %725 = bitcast i16* %721 to <8 x i16>*
  store <8 x i16> %718, <8 x i16>* %725, align 2, !alias.scope !41, !noalias !38
  %726 = bitcast i16* %712 to <8 x i16>*
  store <8 x i16> %720, <8 x i16>* %726, align 2, !alias.scope !38
  %727 = bitcast i16* %716 to <8 x i16>*
  store <8 x i16> %723, <8 x i16>* %727, align 2, !alias.scope !38
  %728 = add i64 %693, 32
  %729 = add i64 %694, -2
  %730 = icmp eq i64 %729, 0
  br i1 %730, label %731, label %692, !llvm.loop !43

731:                                              ; preds = %692, %681
  %732 = phi i64 [ 0, %681 ], [ %728, %692 ]
  %733 = icmp eq i64 %688, 0
  br i1 %733, label %751, label %734

734:                                              ; preds = %731
  %735 = getelementptr i16, i16* %660, i64 %732
  %736 = getelementptr i16, i16* %659, i64 %732
  %737 = bitcast i16* %735 to <8 x i16>*
  %738 = load <8 x i16>, <8 x i16>* %737, align 2, !alias.scope !38
  %739 = getelementptr i16, i16* %735, i64 8
  %740 = bitcast i16* %739 to <8 x i16>*
  %741 = load <8 x i16>, <8 x i16>* %740, align 2, !alias.scope !38
  %742 = bitcast i16* %736 to <8 x i16>*
  %743 = load <8 x i16>, <8 x i16>* %742, align 2, !alias.scope !41, !noalias !38
  %744 = getelementptr i16, i16* %736, i64 8
  %745 = bitcast i16* %744 to <8 x i16>*
  %746 = load <8 x i16>, <8 x i16>* %745, align 2, !alias.scope !41, !noalias !38
  %747 = bitcast i16* %736 to <8 x i16>*
  store <8 x i16> %738, <8 x i16>* %747, align 2, !alias.scope !41, !noalias !38
  %748 = bitcast i16* %744 to <8 x i16>*
  store <8 x i16> %741, <8 x i16>* %748, align 2, !alias.scope !41, !noalias !38
  %749 = bitcast i16* %735 to <8 x i16>*
  store <8 x i16> %743, <8 x i16>* %749, align 2, !alias.scope !38
  %750 = bitcast i16* %739 to <8 x i16>*
  store <8 x i16> %746, <8 x i16>* %750, align 2, !alias.scope !38
  br label %751

751:                                              ; preds = %731, %734
  %752 = icmp eq i64 %667, %682
  br i1 %752, label %856, label %753

753:                                              ; preds = %751, %669, %662
  %754 = phi i16* [ %660, %669 ], [ %660, %662 ], [ %683, %751 ]
  %755 = phi i16* [ %659, %669 ], [ %659, %662 ], [ %684, %751 ]
  %756 = ptrtoint i16* %755 to i64
  %757 = getelementptr i16, i16* %13, i64 -1
  %758 = ptrtoint i16* %757 to i64
  %759 = sub i64 %758, %756
  %760 = lshr i64 %759, 1
  %761 = add nuw i64 %760, 1
  %762 = and i64 %761, 3
  %763 = icmp eq i64 %762, 0
  br i1 %763, label %774, label %764

764:                                              ; preds = %753, %764
  %765 = phi i16* [ %771, %764 ], [ %754, %753 ]
  %766 = phi i16* [ %770, %764 ], [ %755, %753 ]
  %767 = phi i64 [ %772, %764 ], [ %762, %753 ]
  %768 = load i16, i16* %765, align 2
  %769 = load i16, i16* %766, align 2
  store i16 %768, i16* %766, align 2
  store i16 %769, i16* %765, align 2
  %770 = getelementptr inbounds i16, i16* %766, i64 1
  %771 = getelementptr inbounds i16, i16* %765, i64 1
  %772 = add i64 %767, -1
  %773 = icmp eq i64 %772, 0
  br i1 %773, label %774, label %764, !llvm.loop !44

774:                                              ; preds = %764, %753
  %775 = phi i16* [ %754, %753 ], [ %771, %764 ]
  %776 = phi i16* [ %755, %753 ], [ %770, %764 ]
  %777 = icmp ult i64 %759, 6
  br i1 %777, label %856, label %778

778:                                              ; preds = %774, %778
  %779 = phi i16* [ %796, %778 ], [ %775, %774 ]
  %780 = phi i16* [ %795, %778 ], [ %776, %774 ]
  %781 = load i16, i16* %779, align 2
  %782 = load i16, i16* %780, align 2
  store i16 %781, i16* %780, align 2
  store i16 %782, i16* %779, align 2
  %783 = getelementptr inbounds i16, i16* %780, i64 1
  %784 = getelementptr inbounds i16, i16* %779, i64 1
  %785 = load i16, i16* %784, align 2
  %786 = load i16, i16* %783, align 2
  store i16 %785, i16* %783, align 2
  store i16 %786, i16* %784, align 2
  %787 = getelementptr inbounds i16, i16* %780, i64 2
  %788 = getelementptr inbounds i16, i16* %779, i64 2
  %789 = load i16, i16* %788, align 2
  %790 = load i16, i16* %787, align 2
  store i16 %789, i16* %787, align 2
  store i16 %790, i16* %788, align 2
  %791 = getelementptr inbounds i16, i16* %780, i64 3
  %792 = getelementptr inbounds i16, i16* %779, i64 3
  %793 = load i16, i16* %792, align 2
  %794 = load i16, i16* %791, align 2
  store i16 %793, i16* %791, align 2
  store i16 %794, i16* %792, align 2
  %795 = getelementptr inbounds i16, i16* %780, i64 4
  %796 = getelementptr inbounds i16, i16* %779, i64 4
  %797 = icmp eq i16* %795, %13
  br i1 %797, label %856, label %778, !llvm.loop !45

798:                                              ; preds = %648, %798
  %799 = phi i64 [ %801, %798 ], [ %655, %648 ]
  %800 = phi i64 [ %799, %798 ], [ %652, %648 ]
  %801 = srem i64 %800, %799
  %802 = icmp eq i64 %801, 0
  br i1 %802, label %803, label %798

803:                                              ; preds = %798
  %804 = icmp eq i64 %799, 0
  br i1 %804, label %832, label %805

805:                                              ; preds = %803
  %806 = getelementptr inbounds i16, i16* %608, i64 %799
  %807 = shl nsw i64 %799, 1
  %808 = add i64 %807, -2
  %809 = and i64 %808, 2
  %810 = icmp eq i64 %809, 0
  br i1 %810, label %811, label %829

811:                                              ; preds = %805
  %812 = getelementptr inbounds i16, i16* %806, i64 -1
  %813 = load i16, i16* %812, align 2
  %814 = getelementptr inbounds i16, i16* %812, i64 %652
  br label %815

815:                                              ; preds = %815, %811
  %816 = phi i16* [ %812, %811 ], [ %817, %815 ]
  %817 = phi i16* [ %814, %811 ], [ %826, %815 ]
  %818 = load i16, i16* %817, align 2
  store i16 %818, i16* %816, align 2
  %819 = ptrtoint i16* %817 to i64
  %820 = sub i64 %653, %819
  %821 = ashr exact i64 %820, 1
  %822 = icmp slt i64 %652, %821
  %823 = getelementptr inbounds i16, i16* %817, i64 %652
  %824 = sub nsw i64 %652, %821
  %825 = getelementptr inbounds i16, i16* %608, i64 %824
  %826 = select i1 %822, i16* %823, i16* %825
  %827 = icmp eq i16* %826, %812
  br i1 %827, label %828, label %815

828:                                              ; preds = %815
  store i16 %813, i16* %817, align 2
  br label %829

829:                                              ; preds = %828, %805
  %830 = phi i16* [ %812, %828 ], [ %806, %805 ]
  %831 = icmp eq i64 %808, 0
  br i1 %831, label %832, label %834

832:                                              ; preds = %829, %884, %803
  %833 = getelementptr inbounds i16, i16* %608, i64 %655
  br label %856

834:                                              ; preds = %829, %884
  %835 = phi i16* [ %853, %884 ], [ %830, %829 ]
  %836 = getelementptr inbounds i16, i16* %835, i64 -1
  %837 = load i16, i16* %836, align 2
  %838 = getelementptr inbounds i16, i16* %836, i64 %652
  br label %839

839:                                              ; preds = %839, %834
  %840 = phi i16* [ %836, %834 ], [ %841, %839 ]
  %841 = phi i16* [ %838, %834 ], [ %850, %839 ]
  %842 = load i16, i16* %841, align 2
  store i16 %842, i16* %840, align 2
  %843 = ptrtoint i16* %841 to i64
  %844 = sub i64 %653, %843
  %845 = ashr exact i64 %844, 1
  %846 = icmp slt i64 %652, %845
  %847 = getelementptr inbounds i16, i16* %841, i64 %652
  %848 = sub nsw i64 %652, %845
  %849 = getelementptr inbounds i16, i16* %608, i64 %848
  %850 = select i1 %846, i16* %847, i16* %849
  %851 = icmp eq i16* %850, %836
  br i1 %851, label %852, label %839

852:                                              ; preds = %839
  store i16 %837, i16* %841, align 2
  %853 = getelementptr inbounds i16, i16* %835, i64 -2
  %854 = load i16, i16* %853, align 2
  %855 = getelementptr inbounds i16, i16* %853, i64 %652
  br label %871

856:                                              ; preds = %774, %778, %657, %751, %607, %617, %630, %646, %832
  %857 = phi i16* [ %609, %607 ], [ %608, %617 ], [ %631, %630 ], [ %647, %646 ], [ %833, %832 ], [ %13, %751 ], [ %13, %657 ], [ %13, %778 ], [ %13, %774 ]
  %858 = add nsw i64 %611, %610
  %859 = add nsw i64 %615, %614
  %860 = icmp slt i64 %858, %859
  br i1 %860, label %861, label %862

861:                                              ; preds = %856
  tail call void @_ZNSt3__115__inplace_mergeIRNS_6__lessIttEEPtEEvT0_S5_S5_T_NS_15iterator_traitsIS5_E15difference_typeES9_PNS8_10value_typeEl(i16* %534, i16* %608, i16* %857, %"struct.std::__1::__less.149"* dereferenceable(1) %3, i64 %610, i64 %611, i16* %6, i64 %7)
  br label %863

862:                                              ; preds = %856
  tail call void @_ZNSt3__115__inplace_mergeIRNS_6__lessIttEEPtEEvT0_S5_S5_T_NS_15iterator_traitsIS5_E15difference_typeES9_PNS8_10value_typeEl(i16* %857, i16* %609, i16* %16, %"struct.std::__1::__less.149"* dereferenceable(1) %3, i64 %614, i64 %615, i16* %6, i64 %7)
  br label %863

863:                                              ; preds = %861, %862
  %864 = phi i16* [ %16, %861 ], [ %857, %862 ]
  %865 = phi i64 [ %614, %861 ], [ %610, %862 ]
  %866 = phi i64 [ %615, %861 ], [ %611, %862 ]
  %867 = phi i16* [ %609, %861 ], [ %608, %862 ]
  %868 = phi i16* [ %857, %861 ], [ %534, %862 ]
  %869 = icmp eq i64 %866, 0
  br i1 %869, label %870, label %11

870:                                              ; preds = %863, %21, %538, %305, %494, %462, %466, %441, %8, %576, %338, %294, %289, %281, %155, %29
  ret void

871:                                              ; preds = %871, %852
  %872 = phi i16* [ %853, %852 ], [ %873, %871 ]
  %873 = phi i16* [ %855, %852 ], [ %882, %871 ]
  %874 = load i16, i16* %873, align 2
  store i16 %874, i16* %872, align 2
  %875 = ptrtoint i16* %873 to i64
  %876 = sub i64 %653, %875
  %877 = ashr exact i64 %876, 1
  %878 = icmp slt i64 %652, %877
  %879 = getelementptr inbounds i16, i16* %873, i64 %652
  %880 = sub nsw i64 %652, %877
  %881 = getelementptr inbounds i16, i16* %608, i64 %880
  %882 = select i1 %878, i16* %879, i16* %881
  %883 = icmp eq i16* %882, %853
  br i1 %883, label %884, label %871

884:                                              ; preds = %871
  store i16 %854, i16* %873, align 2
  %885 = icmp eq i16* %853, %608
  br i1 %885, label %832, label %834
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnamRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !9, !6}
!9 = !{!"llvm.loop.unroll.runtime.disable"}
!10 = !{i32 0, i32 33}
!11 = distinct !{!11, !4}
!12 = distinct !{!12, !4}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !6}
!19 = distinct !{!19, !4}
!20 = distinct !{!20, !4}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !6}
!27 = distinct !{!27, !4}
!28 = distinct !{!28, !6}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !6}
!35 = distinct !{!35, !4}
!36 = distinct !{!36, !6}
!37 = distinct !{!37, !6}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = distinct !{!43, !6}
!44 = distinct !{!44, !4}
!45 = distinct !{!45, !6}
