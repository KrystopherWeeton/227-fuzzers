; ModuleID = '../../third_party/libjpeg_turbo/jquant2.c'
source_filename = "../../third_party/libjpeg_turbo/jquant2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, {}* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { {}*, {}*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, {}*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, {}*, {}*, {}*, i32, i32 }
%struct.jpeg_marker_reader = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { {}*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { {}*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, {}*, {}* }
%struct.my_cquantizer = type { %struct.jpeg_color_quantizer, i8**, i32, [32 x i16]**, i32, i16*, i32, i32* }
%struct.box = type { i32, i32, i32, i32, i32, i32, i64, i64 }

@c_scales = internal unnamed_addr constant [3 x i32] [i32 2, i32 3, i32 1], align 4
@rgb_red = internal unnamed_addr constant [17 x i32] [i32 -1, i32 -1, i32 0, i32 -1, i32 -1, i32 -1, i32 0, i32 0, i32 2, i32 2, i32 3, i32 1, i32 0, i32 2, i32 3, i32 1, i32 -1], align 16
@rgb_green = internal unnamed_addr constant [17 x i32] [i32 -1, i32 -1, i32 1, i32 -1, i32 -1, i32 -1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 1, i32 1, i32 2, i32 2, i32 -1], align 16
@rgb_blue = internal unnamed_addr constant [17 x i32] [i32 -1, i32 -1, i32 2, i32 -1, i32 -1, i32 -1, i32 2, i32 2, i32 0, i32 0, i32 1, i32 3, i32 2, i32 0, i32 1, i32 3, i32 -1], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_2pass_quantizer(%struct.jpeg_decompress_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %3, i64 0, i32 0
  %5 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %4, align 8
  %6 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %7 = tail call i8* %5(%struct.jpeg_common_struct* %6, i32 1, i64 88) #5
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %9 = bitcast %struct.jpeg_color_quantizer** %8 to i8**
  store i8* %7, i8** %9, align 8
  %10 = bitcast i8* %7 to void (%struct.jpeg_decompress_struct*, i32)**
  store void (%struct.jpeg_decompress_struct*, i32)* @start_pass_2_quant, void (%struct.jpeg_decompress_struct*, i32)** %10, align 8
  %11 = getelementptr inbounds i8, i8* %7, i64 24
  %12 = bitcast i8* %11 to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @new_color_map_2_quant, void (%struct.jpeg_decompress_struct*)** %12, align 8
  %13 = getelementptr inbounds i8, i8* %7, i64 64
  %14 = bitcast i8* %13 to i16**
  store i16* null, i16** %14, align 8
  %15 = getelementptr inbounds i8, i8* %7, i64 80
  %16 = bitcast i8* %15 to i32**
  store i32* null, i32** %16, align 8
  %17 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 29
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 3
  br i1 %19, label %27, label %20

20:                                               ; preds = %1
  %21 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %22 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %21, align 8
  %23 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %22, i64 0, i32 5
  store i32 47, i32* %23, align 8
  %24 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %21, align 8
  %25 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %24, i64 0, i32 0
  %26 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %25, align 8
  tail call void %26(%struct.jpeg_common_struct* %6) #5
  br label %27

27:                                               ; preds = %1, %20
  %28 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %29 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %28, i64 0, i32 0
  %30 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %29, align 8
  %31 = tail call i8* %30(%struct.jpeg_common_struct* %6, i32 1, i64 256) #5
  %32 = getelementptr inbounds i8, i8* %7, i64 48
  %33 = bitcast i8* %32 to [32 x i16]***
  %34 = bitcast i8* %32 to i8**
  store i8* %31, i8** %34, align 8
  br label %35

35:                                               ; preds = %35, %27
  %36 = phi i64 [ 0, %27 ], [ %44, %35 ]
  %37 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %38 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %37, i64 0, i32 1
  %39 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %38, align 8
  %40 = tail call i8* %39(%struct.jpeg_common_struct* %6, i32 1, i64 4096) #5
  %41 = load [32 x i16]**, [32 x i16]*** %33, align 8
  %42 = getelementptr inbounds [32 x i16]*, [32 x i16]** %41, i64 %36
  %43 = bitcast [32 x i16]** %42 to i8**
  store i8* %40, i8** %43, align 8
  %44 = add nuw nsw i64 %36, 1
  %45 = icmp eq i64 %44, 32
  br i1 %45, label %46, label %35

46:                                               ; preds = %35
  %47 = getelementptr inbounds i8, i8* %7, i64 56
  %48 = bitcast i8* %47 to i32*
  store i32 1, i32* %48, align 8
  %49 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 26
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %85, label %52

52:                                               ; preds = %46
  %53 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 23
  %54 = load i32, i32* %53, align 8
  %55 = icmp slt i32 %54, 8
  br i1 %55, label %56, label %65

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %58 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %57, align 8
  %59 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %58, i64 0, i32 5
  store i32 56, i32* %59, align 8
  %60 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %57, align 8
  %61 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %60, i64 0, i32 6, i32 0, i64 0
  store i32 8, i32* %61, align 4
  %62 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %57, align 8
  %63 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %62, i64 0, i32 0
  %64 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %63, align 8
  tail call void %64(%struct.jpeg_common_struct* %6) #5
  br label %76

65:                                               ; preds = %52
  %66 = icmp sgt i32 %54, 256
  br i1 %66, label %67, label %76

67:                                               ; preds = %65
  %68 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %69 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %68, align 8
  %70 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %69, i64 0, i32 5
  store i32 57, i32* %70, align 8
  %71 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %68, align 8
  %72 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %71, i64 0, i32 6, i32 0, i64 0
  store i32 256, i32* %72, align 4
  %73 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %68, align 8
  %74 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %73, i64 0, i32 0
  %75 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %74, align 8
  tail call void %75(%struct.jpeg_common_struct* %6) #5
  br label %76

76:                                               ; preds = %56, %67, %65
  %77 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %78 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %77, i64 0, i32 2
  %79 = load i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)** %78, align 8
  %80 = tail call i8** %79(%struct.jpeg_common_struct* %6, i32 1, i32 %54, i32 3) #5
  %81 = getelementptr inbounds i8, i8* %7, i64 32
  %82 = bitcast i8* %81 to i8***
  store i8** %80, i8*** %82, align 8
  %83 = getelementptr inbounds i8, i8* %7, i64 40
  %84 = bitcast i8* %83 to i32*
  store i32 %54, i32* %84, align 8
  br label %88

85:                                               ; preds = %46
  %86 = getelementptr inbounds i8, i8* %7, i64 32
  %87 = bitcast i8* %86 to i8***
  store i8** null, i8*** %87, align 8
  br label %88

88:                                               ; preds = %85, %76
  %89 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 21
  %90 = load i32, i32* %89, align 8
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %103, label %92

92:                                               ; preds = %88
  store i32 2, i32* %89, align 8
  %93 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %94 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %93, i64 0, i32 1
  %95 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %94, align 8
  %96 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %97 = load i32, i32* %96, align 8
  %98 = add i32 %97, 2
  %99 = zext i32 %98 to i64
  %100 = mul nuw nsw i64 %99, 6
  %101 = tail call i8* %95(%struct.jpeg_common_struct* %6, i32 1, i64 %100) #5
  %102 = bitcast i8* %13 to i8**
  store i8* %101, i8** %102, align 8
  tail call fastcc void @init_error_limit(%struct.jpeg_decompress_struct* %0)
  br label %103

103:                                              ; preds = %88, %92
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal void @start_pass_2_quant(%struct.jpeg_decompress_struct*, i32) #0 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %4 = bitcast %struct.jpeg_color_quantizer** %3 to %struct.my_cquantizer**
  %5 = load %struct.my_cquantizer*, %struct.my_cquantizer** %4, align 8
  %6 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 3
  %7 = load [32 x i16]**, [32 x i16]*** %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 21
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  store i32 2, i32* %8, align 8
  br label %12

12:                                               ; preds = %2, %11
  %13 = phi i32 [ 0, %2 ], [ 2, %11 ]
  %14 = icmp eq i32 %1, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 0, i32 1
  store void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)* @prescan_quantize, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)** %16, align 8
  %17 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 0, i32 2
  %18 = bitcast {}** %17 to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @finish_pass1, void (%struct.jpeg_decompress_struct*)** %18, align 8
  %19 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 4
  store i32 1, i32* %19, align 8
  br label %81

20:                                               ; preds = %12
  %21 = icmp eq i32 %13, 2
  %22 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 0, i32 1
  %23 = select i1 %21, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)* @pass2_fs_dither, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)* @pass2_no_dither
  store void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)* %23, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)** %22, align 8
  %24 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 0, i32 2
  %25 = bitcast {}** %24 to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @finish_pass2, void (%struct.jpeg_decompress_struct*)** %25, align 8
  %26 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 32
  %27 = load i32, i32* %26, align 4
  %28 = icmp slt i32 %27, 1
  br i1 %28, label %29, label %39

29:                                               ; preds = %20
  %30 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %31 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %30, align 8
  %32 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %31, i64 0, i32 5
  store i32 56, i32* %32, align 8
  %33 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %30, align 8
  %34 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %33, i64 0, i32 6, i32 0, i64 0
  store i32 1, i32* %34, align 4
  %35 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %30, align 8
  %36 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %35, i64 0, i32 0
  %37 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %36, align 8
  %38 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %37(%struct.jpeg_common_struct* %38) #5
  br label %51

39:                                               ; preds = %20
  %40 = icmp sgt i32 %27, 256
  br i1 %40, label %41, label %51

41:                                               ; preds = %39
  %42 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %43 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %42, align 8
  %44 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %43, i64 0, i32 5
  store i32 57, i32* %44, align 8
  %45 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %42, align 8
  %46 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %45, i64 0, i32 6, i32 0, i64 0
  store i32 256, i32* %46, align 4
  %47 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %42, align 8
  %48 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %47, i64 0, i32 0
  %49 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %48, align 8
  %50 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %49(%struct.jpeg_common_struct* %50) #5
  br label %51

51:                                               ; preds = %29, %41, %39
  %52 = load i32, i32* %8, align 8
  %53 = icmp eq i32 %52, 2
  br i1 %53, label %54, label %81

54:                                               ; preds = %51
  %55 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %56 = load i32, i32* %55, align 8
  %57 = add i32 %56, 2
  %58 = zext i32 %57 to i64
  %59 = mul nuw nsw i64 %58, 6
  %60 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 5
  %61 = load i16*, i16** %60, align 8
  %62 = icmp eq i16* %61, null
  br i1 %62, label %65, label %63

63:                                               ; preds = %54
  %64 = bitcast i16* %61 to i8*
  br label %73

65:                                               ; preds = %54
  %66 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %67 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %66, align 8
  %68 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %67, i64 0, i32 1
  %69 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %68, align 8
  %70 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %71 = tail call i8* %69(%struct.jpeg_common_struct* %70, i32 1, i64 %59) #5
  %72 = bitcast i16** %60 to i8**
  store i8* %71, i8** %72, align 8
  br label %73

73:                                               ; preds = %63, %65
  %74 = phi i8* [ %71, %65 ], [ %64, %63 ]
  tail call void @jzero_far(i8* %74, i64 %59) #5
  %75 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 7
  %76 = load i32*, i32** %75, align 8
  %77 = icmp eq i32* %76, null
  br i1 %77, label %78, label %79

78:                                               ; preds = %73
  tail call fastcc void @init_error_limit(%struct.jpeg_decompress_struct* %0)
  br label %79

79:                                               ; preds = %78, %73
  %80 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 6
  store i32 0, i32* %80, align 8
  br label %81

81:                                               ; preds = %51, %79, %15
  %82 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 4
  %83 = load i32, i32* %82, align 8
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %93, label %85

85:                                               ; preds = %81, %85
  %86 = phi i64 [ %90, %85 ], [ 0, %81 ]
  %87 = getelementptr inbounds [32 x i16]*, [32 x i16]** %7, i64 %86
  %88 = bitcast [32 x i16]** %87 to i8**
  %89 = load i8*, i8** %88, align 8
  tail call void @jzero_far(i8* %89, i64 4096) #5
  %90 = add nuw nsw i64 %86, 1
  %91 = icmp eq i64 %90, 32
  br i1 %91, label %92, label %85

92:                                               ; preds = %85
  store i32 0, i32* %82, align 8
  br label %93

93:                                               ; preds = %81, %92
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @new_color_map_2_quant(%struct.jpeg_decompress_struct* nocapture readonly) #2 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %3 = bitcast %struct.jpeg_color_quantizer** %2 to %struct.my_cquantizer**
  %4 = load %struct.my_cquantizer*, %struct.my_cquantizer** %3, align 8
  %5 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %4, i64 0, i32 4
  store i32 1, i32* %5, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @init_error_limit(%struct.jpeg_decompress_struct*) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %3 = bitcast %struct.jpeg_color_quantizer** %2 to %struct.my_cquantizer**
  %4 = load %struct.my_cquantizer*, %struct.my_cquantizer** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %6 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %5, align 8
  %7 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %6, i64 0, i32 0
  %8 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %7, align 8
  %9 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %10 = tail call i8* %8(%struct.jpeg_common_struct* %9, i32 1, i64 2044) #5
  %11 = getelementptr inbounds i8, i8* %10, i64 1020
  %12 = bitcast i8* %11 to i32*
  %13 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %4, i64 0, i32 7
  %14 = bitcast i32** %13 to i8**
  store i8* %11, i8** %14, align 8
  %15 = getelementptr inbounds i8, i8* %10, i64 1024
  %16 = getelementptr inbounds i8, i8* %10, i64 1008
  %17 = bitcast i8* %16 to <4 x i32>*
  store <4 x i32> <i32 -3, i32 -2, i32 -1, i32 0>, <4 x i32>* %17, align 4
  %18 = bitcast i8* %15 to <4 x i32>*
  store <4 x i32> <i32 1, i32 2, i32 3, i32 4>, <4 x i32>* %18, align 4
  %19 = getelementptr inbounds i8, i8* %10, i64 1040
  %20 = getelementptr inbounds i8, i8* %10, i64 992
  %21 = bitcast i8* %20 to <4 x i32>*
  store <4 x i32> <i32 -7, i32 -6, i32 -5, i32 -4>, <4 x i32>* %21, align 4
  %22 = bitcast i8* %19 to <4 x i32>*
  store <4 x i32> <i32 5, i32 6, i32 7, i32 8>, <4 x i32>* %22, align 4
  %23 = getelementptr inbounds i8, i8* %10, i64 1056
  %24 = getelementptr inbounds i8, i8* %10, i64 976
  %25 = bitcast i8* %24 to <4 x i32>*
  store <4 x i32> <i32 -11, i32 -10, i32 -9, i32 -8>, <4 x i32>* %25, align 4
  %26 = bitcast i8* %23 to <4 x i32>*
  store <4 x i32> <i32 9, i32 10, i32 11, i32 12>, <4 x i32>* %26, align 4
  %27 = getelementptr inbounds i8, i8* %10, i64 1072
  %28 = bitcast i8* %27 to i32*
  store i32 13, i32* %28, align 4
  %29 = getelementptr inbounds i8, i8* %10, i64 1076
  %30 = bitcast i8* %29 to i32*
  store i32 14, i32* %30, align 4
  %31 = getelementptr inbounds i8, i8* %10, i64 1080
  %32 = bitcast i8* %31 to i32*
  store i32 15, i32* %32, align 4
  %33 = getelementptr inbounds i8, i8* %10, i64 960
  %34 = bitcast i8* %33 to <4 x i32>*
  store <4 x i32> <i32 -15, i32 -14, i32 -13, i32 -12>, <4 x i32>* %34, align 4
  br label %37

35:                                               ; preds = %37
  %36 = xor i32 %39, -1
  br label %56

37:                                               ; preds = %37, %1
  %38 = phi i64 [ 16, %1 ], [ %52, %37 ]
  %39 = phi i32 [ 16, %1 ], [ %54, %37 ]
  %40 = phi i32 [ 16, %1 ], [ %53, %37 ]
  %41 = getelementptr inbounds i32, i32* %12, i64 %38
  store i32 %39, i32* %41, align 4
  %42 = sub nsw i32 0, %39
  %43 = sub nsw i32 0, %40
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i32, i32* %12, i64 %44
  store i32 %42, i32* %45, align 4
  %46 = or i64 %38, 1
  %47 = getelementptr inbounds i32, i32* %12, i64 %46
  store i32 %39, i32* %47, align 4
  %48 = sub nsw i32 0, %39
  %49 = xor i32 %40, -1
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %12, i64 %50
  store i32 %48, i32* %51, align 4
  %52 = add nuw nsw i64 %38, 2
  %53 = add nuw nsw i32 %40, 2
  %54 = add nuw nsw i32 %39, 1
  %55 = icmp eq i64 %52, 48
  br i1 %55, label %35, label %37

56:                                               ; preds = %56, %35
  %57 = phi i64 [ 48, %35 ], [ %68, %56 ]
  %58 = phi i32 [ 48, %35 ], [ %69, %56 ]
  %59 = getelementptr inbounds i32, i32* %12, i64 %57
  store i32 %54, i32* %59, align 4
  %60 = sub nsw i32 0, %58
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, i32* %12, i64 %61
  store i32 %36, i32* %62, align 4
  %63 = or i64 %57, 1
  %64 = getelementptr inbounds i32, i32* %12, i64 %63
  store i32 %54, i32* %64, align 4
  %65 = xor i32 %58, -1
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i32, i32* %12, i64 %66
  store i32 %36, i32* %67, align 4
  %68 = add nuw nsw i64 %57, 2
  %69 = add nuw nsw i32 %58, 2
  %70 = icmp eq i64 %68, 256
  br i1 %70, label %71, label %56

71:                                               ; preds = %56
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @prescan_quantize(%struct.jpeg_decompress_struct* nocapture readonly, i8** nocapture readonly, i8** nocapture readnone, i32) #2 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %6 = bitcast %struct.jpeg_color_quantizer** %5 to %struct.my_cquantizer**
  %7 = load %struct.my_cquantizer*, %struct.my_cquantizer** %6, align 8
  %8 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 3
  %9 = load [32 x i16]**, [32 x i16]*** %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %3, 0
  br i1 %12, label %13, label %48

13:                                               ; preds = %4
  %14 = icmp eq i32 %11, 0
  %15 = zext i32 %3 to i64
  br label %16

16:                                               ; preds = %45, %13
  %17 = phi i64 [ 0, %13 ], [ %46, %45 ]
  br i1 %14, label %45, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds i8*, i8** %1, i64 %17
  %20 = load i8*, i8** %19, align 8
  br label %21

21:                                               ; preds = %18, %21
  %22 = phi i32 [ %43, %21 ], [ %11, %18 ]
  %23 = phi i8* [ %42, %21 ], [ %20, %18 ]
  %24 = load i8, i8* %23, align 1
  %25 = lshr i8 %24, 3
  %26 = zext i8 %25 to i64
  %27 = getelementptr inbounds [32 x i16]*, [32 x i16]** %9, i64 %26
  %28 = load [32 x i16]*, [32 x i16]** %27, align 8
  %29 = getelementptr inbounds i8, i8* %23, i64 1
  %30 = load i8, i8* %29, align 1
  %31 = lshr i8 %30, 2
  %32 = zext i8 %31 to i64
  %33 = getelementptr inbounds i8, i8* %23, i64 2
  %34 = load i8, i8* %33, align 1
  %35 = lshr i8 %34, 3
  %36 = zext i8 %35 to i64
  %37 = getelementptr inbounds [32 x i16], [32 x i16]* %28, i64 %32, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = add i16 %38, 1
  %40 = icmp eq i16 %39, 0
  %41 = select i1 %40, i16 %38, i16 %39
  store i16 %41, i16* %37, align 2
  %42 = getelementptr inbounds i8, i8* %23, i64 3
  %43 = add i32 %22, -1
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %21

45:                                               ; preds = %21, %16
  %46 = add nuw nsw i64 %17, 1
  %47 = icmp eq i64 %46, %15
  br i1 %47, label %48, label %16

48:                                               ; preds = %45, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @finish_pass1(%struct.jpeg_decompress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %3 = bitcast %struct.jpeg_color_quantizer** %2 to %struct.my_cquantizer**
  %4 = load %struct.my_cquantizer*, %struct.my_cquantizer** %3, align 8
  %5 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %4, i64 0, i32 1
  %6 = bitcast i8*** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 33
  %9 = bitcast i8*** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %4, i64 0, i32 2
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %13 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %12, align 8
  %14 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %13, i64 0, i32 0
  %15 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %14, align 8
  %16 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %17 = sext i32 %11 to i64
  %18 = mul nsw i64 %17, 40
  %19 = tail call i8* %15(%struct.jpeg_common_struct* %16, i32 1, i64 %18) #5
  %20 = bitcast i8* %19 to %struct.box*
  %21 = bitcast i8* %19 to <4 x i32>*
  store <4 x i32> <i32 0, i32 31, i32 0, i32 63>, <4 x i32>* %21, align 8
  %22 = getelementptr inbounds i8, i8* %19, i64 16
  %23 = bitcast i8* %22 to i32*
  store i32 0, i32* %23, align 8
  %24 = getelementptr inbounds i8, i8* %19, i64 20
  %25 = bitcast i8* %24 to i32*
  store i32 31, i32* %25, align 4
  tail call fastcc void @update_box(%struct.jpeg_decompress_struct* %0, %struct.box* %20) #5
  %26 = icmp sgt i32 %11, 1
  br i1 %26, label %27, label %226

27:                                               ; preds = %1
  %28 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 11
  %29 = zext i32 %11 to i64
  br label %30

30:                                               ; preds = %218, %27
  %31 = phi i64 [ %222, %218 ], [ 0, %27 ]
  %32 = phi i64 [ %219, %218 ], [ 1, %27 ]
  %33 = phi i32 [ %220, %218 ], [ 1, %27 ]
  %34 = add i64 %31, 1
  %35 = add i64 %31, 1
  %36 = trunc i64 %32 to i32
  %37 = shl i32 %36, 1
  %38 = icmp sgt i32 %37, %11
  br i1 %38, label %44, label %39

39:                                               ; preds = %30
  %40 = and i64 %35, 1
  %41 = icmp eq i64 %31, 0
  br i1 %41, label %119, label %42

42:                                               ; preds = %39
  %43 = sub i64 %35, %40
  br label %49

44:                                               ; preds = %30
  %45 = and i64 %34, 3
  %46 = icmp ult i64 %31, 3
  br i1 %46, label %100, label %47

47:                                               ; preds = %44
  %48 = sub i64 %34, %45
  br label %69

49:                                               ; preds = %372, %42
  %50 = phi %struct.box* [ null, %42 ], [ %374, %372 ]
  %51 = phi i64 [ 0, %42 ], [ %373, %372 ]
  %52 = phi %struct.box* [ %20, %42 ], [ %375, %372 ]
  %53 = phi i64 [ %43, %42 ], [ %376, %372 ]
  %54 = getelementptr inbounds %struct.box, %struct.box* %52, i64 0, i32 7
  %55 = load i64, i64* %54, align 8
  %56 = icmp sgt i64 %55, %51
  br i1 %56, label %57, label %63

57:                                               ; preds = %49
  %58 = getelementptr inbounds %struct.box, %struct.box* %52, i64 0, i32 6
  %59 = load i64, i64* %58, align 8
  %60 = icmp sgt i64 %59, 0
  %61 = select i1 %60, i64 %55, i64 %51
  %62 = select i1 %60, %struct.box* %52, %struct.box* %50
  br label %63

63:                                               ; preds = %57, %49
  %64 = phi i64 [ %51, %49 ], [ %61, %57 ]
  %65 = phi %struct.box* [ %50, %49 ], [ %62, %57 ]
  %66 = getelementptr inbounds %struct.box, %struct.box* %52, i64 1, i32 7
  %67 = load i64, i64* %66, align 8
  %68 = icmp sgt i64 %67, %64
  br i1 %68, label %365, label %372

69:                                               ; preds = %69, %47
  %70 = phi %struct.box* [ null, %47 ], [ %96, %69 ]
  %71 = phi i64 [ 0, %47 ], [ %95, %69 ]
  %72 = phi %struct.box* [ %20, %47 ], [ %97, %69 ]
  %73 = phi i64 [ %48, %47 ], [ %98, %69 ]
  %74 = getelementptr inbounds %struct.box, %struct.box* %72, i64 0, i32 6
  %75 = load i64, i64* %74, align 8
  %76 = icmp sgt i64 %75, %71
  %77 = select i1 %76, i64 %75, i64 %71
  %78 = select i1 %76, %struct.box* %72, %struct.box* %70
  %79 = getelementptr inbounds %struct.box, %struct.box* %72, i64 1
  %80 = getelementptr inbounds %struct.box, %struct.box* %72, i64 1, i32 6
  %81 = load i64, i64* %80, align 8
  %82 = icmp sgt i64 %81, %77
  %83 = select i1 %82, i64 %81, i64 %77
  %84 = select i1 %82, %struct.box* %79, %struct.box* %78
  %85 = getelementptr inbounds %struct.box, %struct.box* %72, i64 2
  %86 = getelementptr inbounds %struct.box, %struct.box* %72, i64 2, i32 6
  %87 = load i64, i64* %86, align 8
  %88 = icmp sgt i64 %87, %83
  %89 = select i1 %88, i64 %87, i64 %83
  %90 = select i1 %88, %struct.box* %85, %struct.box* %84
  %91 = getelementptr inbounds %struct.box, %struct.box* %72, i64 3
  %92 = getelementptr inbounds %struct.box, %struct.box* %72, i64 3, i32 6
  %93 = load i64, i64* %92, align 8
  %94 = icmp sgt i64 %93, %89
  %95 = select i1 %94, i64 %93, i64 %89
  %96 = select i1 %94, %struct.box* %91, %struct.box* %90
  %97 = getelementptr inbounds %struct.box, %struct.box* %72, i64 4
  %98 = add i64 %73, -4
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %69

100:                                              ; preds = %69, %44
  %101 = phi %struct.box* [ undef, %44 ], [ %96, %69 ]
  %102 = phi %struct.box* [ null, %44 ], [ %96, %69 ]
  %103 = phi i64 [ 0, %44 ], [ %95, %69 ]
  %104 = phi %struct.box* [ %20, %44 ], [ %97, %69 ]
  %105 = icmp eq i64 %45, 0
  br i1 %105, label %134, label %106

106:                                              ; preds = %100, %106
  %107 = phi %struct.box* [ %115, %106 ], [ %102, %100 ]
  %108 = phi i64 [ %114, %106 ], [ %103, %100 ]
  %109 = phi %struct.box* [ %116, %106 ], [ %104, %100 ]
  %110 = phi i64 [ %117, %106 ], [ %45, %100 ]
  %111 = getelementptr inbounds %struct.box, %struct.box* %109, i64 0, i32 6
  %112 = load i64, i64* %111, align 8
  %113 = icmp sgt i64 %112, %108
  %114 = select i1 %113, i64 %112, i64 %108
  %115 = select i1 %113, %struct.box* %109, %struct.box* %107
  %116 = getelementptr inbounds %struct.box, %struct.box* %109, i64 1
  %117 = add i64 %110, -1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %134, label %106, !llvm.loop !2

119:                                              ; preds = %372, %39
  %120 = phi %struct.box* [ undef, %39 ], [ %374, %372 ]
  %121 = phi %struct.box* [ null, %39 ], [ %374, %372 ]
  %122 = phi i64 [ 0, %39 ], [ %373, %372 ]
  %123 = phi %struct.box* [ %20, %39 ], [ %375, %372 ]
  %124 = icmp eq i64 %40, 0
  br i1 %124, label %134, label %125

125:                                              ; preds = %119
  %126 = getelementptr inbounds %struct.box, %struct.box* %123, i64 0, i32 7
  %127 = load i64, i64* %126, align 8
  %128 = icmp sgt i64 %127, %122
  br i1 %128, label %129, label %134

129:                                              ; preds = %125
  %130 = getelementptr inbounds %struct.box, %struct.box* %123, i64 0, i32 6
  %131 = load i64, i64* %130, align 8
  %132 = icmp sgt i64 %131, 0
  %133 = select i1 %132, %struct.box* %123, %struct.box* %121
  br label %134

134:                                              ; preds = %119, %125, %129, %100, %106
  %135 = phi %struct.box* [ %101, %100 ], [ %115, %106 ], [ %120, %119 ], [ %121, %125 ], [ %133, %129 ]
  %136 = icmp eq %struct.box* %135, null
  br i1 %136, label %223, label %137

137:                                              ; preds = %134
  %138 = getelementptr inbounds %struct.box, %struct.box* %20, i64 %32
  %139 = getelementptr inbounds %struct.box, %struct.box* %135, i64 0, i32 1
  %140 = load i32, i32* %139, align 4
  %141 = getelementptr inbounds %struct.box, %struct.box* %20, i64 %32, i32 1
  store i32 %140, i32* %141, align 4
  %142 = getelementptr inbounds %struct.box, %struct.box* %135, i64 0, i32 3
  %143 = load i32, i32* %142, align 4
  %144 = getelementptr inbounds %struct.box, %struct.box* %20, i64 %32, i32 3
  store i32 %143, i32* %144, align 4
  %145 = getelementptr inbounds %struct.box, %struct.box* %135, i64 0, i32 5
  %146 = load i32, i32* %145, align 4
  %147 = getelementptr inbounds %struct.box, %struct.box* %20, i64 %32, i32 5
  store i32 %146, i32* %147, align 4
  %148 = getelementptr inbounds %struct.box, %struct.box* %135, i64 0, i32 0
  %149 = load i32, i32* %148, align 8
  %150 = getelementptr inbounds %struct.box, %struct.box* %138, i64 0, i32 0
  store i32 %149, i32* %150, align 8
  %151 = getelementptr inbounds %struct.box, %struct.box* %135, i64 0, i32 2
  %152 = load i32, i32* %151, align 8
  %153 = getelementptr inbounds %struct.box, %struct.box* %20, i64 %32, i32 2
  store i32 %152, i32* %153, align 8
  %154 = getelementptr inbounds %struct.box, %struct.box* %135, i64 0, i32 4
  %155 = load i32, i32* %154, align 8
  %156 = getelementptr inbounds %struct.box, %struct.box* %20, i64 %32, i32 4
  store i32 %155, i32* %156, align 8
  %157 = load i32, i32* %139, align 4
  %158 = load i32, i32* %148, align 8
  %159 = sub nsw i32 %157, %158
  %160 = shl i32 %159, 3
  %161 = load i32, i32* %28, align 8
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_red, i64 0, i64 %162
  %164 = load i32, i32* %163, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %165
  %167 = load i32, i32* %166, align 4
  %168 = mul nsw i32 %167, %160
  %169 = load i32, i32* %142, align 4
  %170 = load i32, i32* %151, align 8
  %171 = sub nsw i32 %169, %170
  %172 = shl i32 %171, 2
  %173 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_green, i64 0, i64 %162
  %174 = load i32, i32* %173, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %175
  %177 = load i32, i32* %176, align 4
  %178 = mul nsw i32 %172, %177
  %179 = load i32, i32* %145, align 4
  %180 = load i32, i32* %154, align 8
  %181 = sub nsw i32 %179, %180
  %182 = shl i32 %181, 3
  %183 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_blue, i64 0, i64 %162
  %184 = load i32, i32* %183, align 4
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %185
  %187 = load i32, i32* %186, align 4
  %188 = mul nsw i32 %182, %187
  %189 = lshr i64 4292, %162
  %190 = and i64 %189, 1
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %198, label %192

192:                                              ; preds = %137
  %193 = icmp sgt i32 %168, %178
  %194 = xor i1 %193, true
  %195 = zext i1 %194 to i32
  %196 = select i1 %193, i32 %168, i32 %178
  %197 = icmp sgt i32 %188, %196
  br i1 %197, label %211, label %203

198:                                              ; preds = %137
  %199 = icmp sgt i32 %188, %178
  %200 = select i1 %199, i32 2, i32 1
  %201 = select i1 %199, i32 %188, i32 %178
  %202 = icmp sgt i32 %168, %201
  br i1 %202, label %205, label %203

203:                                              ; preds = %198, %192
  %204 = phi i32 [ %195, %192 ], [ %200, %198 ]
  switch i32 %204, label %218 [
    i32 0, label %205
    i32 1, label %208
    i32 2, label %211
  ]

205:                                              ; preds = %203, %198
  %206 = add nsw i32 %158, %157
  %207 = sdiv i32 %206, 2
  store i32 %207, i32* %139, align 4
  br label %214

208:                                              ; preds = %203
  %209 = add nsw i32 %170, %169
  %210 = sdiv i32 %209, 2
  store i32 %210, i32* %142, align 4
  br label %214

211:                                              ; preds = %203, %192
  %212 = add nsw i32 %180, %179
  %213 = sdiv i32 %212, 2
  store i32 %213, i32* %145, align 4
  br label %214

214:                                              ; preds = %205, %208, %211
  %215 = phi i32 [ %213, %211 ], [ %210, %208 ], [ %207, %205 ]
  %216 = phi i32* [ %156, %211 ], [ %153, %208 ], [ %150, %205 ]
  %217 = add nsw i32 %215, 1
  store i32 %217, i32* %216, align 8
  br label %218

218:                                              ; preds = %214, %203
  tail call fastcc void @update_box(%struct.jpeg_decompress_struct* %0, %struct.box* nonnull %135) #5
  tail call fastcc void @update_box(%struct.jpeg_decompress_struct* %0, %struct.box* %138) #5
  %219 = add nuw nsw i64 %32, 1
  %220 = add nuw nsw i32 %33, 1
  %221 = icmp eq i64 %219, %29
  %222 = add i64 %31, 1
  br i1 %221, label %226, label %30

223:                                              ; preds = %134
  %224 = trunc i64 %32 to i32
  %225 = icmp sgt i32 %224, 0
  br i1 %225, label %226, label %353

226:                                              ; preds = %218, %223, %1
  %227 = phi i32 [ %224, %223 ], [ 1, %1 ], [ %220, %218 ]
  %228 = zext i32 %227 to i64
  br label %229

229:                                              ; preds = %325, %226
  %230 = phi i64 [ 0, %226 ], [ %351, %325 ]
  %231 = load %struct.my_cquantizer*, %struct.my_cquantizer** %3, align 8
  %232 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %231, i64 0, i32 3
  %233 = load [32 x i16]**, [32 x i16]*** %232, align 8
  %234 = getelementptr inbounds %struct.box, %struct.box* %20, i64 %230, i32 0
  %235 = load i32, i32* %234, align 8
  %236 = getelementptr inbounds %struct.box, %struct.box* %20, i64 %230, i32 1
  %237 = load i32, i32* %236, align 4
  %238 = getelementptr inbounds %struct.box, %struct.box* %20, i64 %230, i32 2
  %239 = load i32, i32* %238, align 8
  %240 = getelementptr inbounds %struct.box, %struct.box* %20, i64 %230, i32 3
  %241 = load i32, i32* %240, align 4
  %242 = getelementptr inbounds %struct.box, %struct.box* %20, i64 %230, i32 4
  %243 = load i32, i32* %242, align 8
  %244 = getelementptr inbounds %struct.box, %struct.box* %20, i64 %230, i32 5
  %245 = load i32, i32* %244, align 4
  %246 = icmp sgt i32 %235, %237
  br i1 %246, label %325, label %247

247:                                              ; preds = %229
  %248 = icmp sgt i32 %239, %241
  %249 = sext i32 %243 to i64
  %250 = icmp sgt i32 %243, %245
  %251 = sext i32 %245 to i64
  %252 = sext i32 %239 to i64
  %253 = sext i32 %241 to i64
  %254 = sext i32 %235 to i64
  %255 = sext i32 %237 to i64
  br label %256

256:                                              ; preds = %318, %247
  %257 = phi i64 [ %323, %318 ], [ %254, %247 ]
  %258 = phi i64 [ %322, %318 ], [ 0, %247 ]
  %259 = phi i64 [ %321, %318 ], [ 0, %247 ]
  %260 = phi i64 [ %320, %318 ], [ 0, %247 ]
  %261 = phi i64 [ %319, %318 ], [ 0, %247 ]
  br i1 %248, label %318, label %262

262:                                              ; preds = %256
  %263 = getelementptr inbounds [32 x i16]*, [32 x i16]** %233, i64 %257
  %264 = load [32 x i16]*, [32 x i16]** %263, align 8
  %265 = trunc i64 %257 to i32
  %266 = shl i32 %265, 3
  %267 = or i32 %266, 4
  %268 = sext i32 %267 to i64
  br label %269

269:                                              ; preds = %311, %262
  %270 = phi i64 [ %316, %311 ], [ %252, %262 ]
  %271 = phi i64 [ %315, %311 ], [ %258, %262 ]
  %272 = phi i64 [ %314, %311 ], [ %259, %262 ]
  %273 = phi i64 [ %313, %311 ], [ %260, %262 ]
  %274 = phi i64 [ %312, %311 ], [ %261, %262 ]
  br i1 %250, label %311, label %275

275:                                              ; preds = %269
  %276 = getelementptr inbounds [32 x i16], [32 x i16]* %264, i64 %270, i64 %249
  %277 = trunc i64 %270 to i32
  %278 = shl i32 %277, 2
  %279 = or i32 %278, 2
  %280 = sext i32 %279 to i64
  br label %281

281:                                              ; preds = %304, %275
  %282 = phi i64 [ %309, %304 ], [ %249, %275 ]
  %283 = phi i64 [ %308, %304 ], [ %271, %275 ]
  %284 = phi i64 [ %307, %304 ], [ %272, %275 ]
  %285 = phi i64 [ %306, %304 ], [ %273, %275 ]
  %286 = phi i64 [ %305, %304 ], [ %274, %275 ]
  %287 = phi i16* [ %288, %304 ], [ %276, %275 ]
  %288 = getelementptr inbounds i16, i16* %287, i64 1
  %289 = load i16, i16* %287, align 2
  %290 = zext i16 %289 to i64
  %291 = icmp eq i16 %289, 0
  br i1 %291, label %304, label %292

292:                                              ; preds = %281
  %293 = add nsw i64 %286, %290
  %294 = mul nsw i64 %290, %268
  %295 = add nsw i64 %294, %285
  %296 = mul nsw i64 %290, %280
  %297 = add nsw i64 %296, %284
  %298 = trunc i64 %282 to i32
  %299 = shl i32 %298, 3
  %300 = or i32 %299, 4
  %301 = sext i32 %300 to i64
  %302 = mul nsw i64 %290, %301
  %303 = add nsw i64 %302, %283
  br label %304

304:                                              ; preds = %292, %281
  %305 = phi i64 [ %293, %292 ], [ %286, %281 ]
  %306 = phi i64 [ %295, %292 ], [ %285, %281 ]
  %307 = phi i64 [ %297, %292 ], [ %284, %281 ]
  %308 = phi i64 [ %303, %292 ], [ %283, %281 ]
  %309 = add nsw i64 %282, 1
  %310 = icmp slt i64 %282, %251
  br i1 %310, label %281, label %311

311:                                              ; preds = %304, %269
  %312 = phi i64 [ %274, %269 ], [ %305, %304 ]
  %313 = phi i64 [ %273, %269 ], [ %306, %304 ]
  %314 = phi i64 [ %272, %269 ], [ %307, %304 ]
  %315 = phi i64 [ %271, %269 ], [ %308, %304 ]
  %316 = add nsw i64 %270, 1
  %317 = icmp slt i64 %270, %253
  br i1 %317, label %269, label %318

318:                                              ; preds = %311, %256
  %319 = phi i64 [ %261, %256 ], [ %312, %311 ]
  %320 = phi i64 [ %260, %256 ], [ %313, %311 ]
  %321 = phi i64 [ %259, %256 ], [ %314, %311 ]
  %322 = phi i64 [ %258, %256 ], [ %315, %311 ]
  %323 = add nsw i64 %257, 1
  %324 = icmp slt i64 %257, %255
  br i1 %324, label %256, label %325

325:                                              ; preds = %318, %229
  %326 = phi i64 [ 0, %229 ], [ %319, %318 ]
  %327 = phi i64 [ 0, %229 ], [ %320, %318 ]
  %328 = phi i64 [ 0, %229 ], [ %321, %318 ]
  %329 = phi i64 [ 0, %229 ], [ %322, %318 ]
  %330 = ashr i64 %326, 1
  %331 = add nsw i64 %327, %330
  %332 = sdiv i64 %331, %326
  %333 = trunc i64 %332 to i8
  %334 = load i8**, i8*** %8, align 8
  %335 = load i8*, i8** %334, align 8
  %336 = getelementptr inbounds i8, i8* %335, i64 %230
  store i8 %333, i8* %336, align 1
  %337 = add nsw i64 %328, %330
  %338 = sdiv i64 %337, %326
  %339 = trunc i64 %338 to i8
  %340 = load i8**, i8*** %8, align 8
  %341 = getelementptr inbounds i8*, i8** %340, i64 1
  %342 = load i8*, i8** %341, align 8
  %343 = getelementptr inbounds i8, i8* %342, i64 %230
  store i8 %339, i8* %343, align 1
  %344 = add nsw i64 %329, %330
  %345 = sdiv i64 %344, %326
  %346 = trunc i64 %345 to i8
  %347 = load i8**, i8*** %8, align 8
  %348 = getelementptr inbounds i8*, i8** %347, i64 2
  %349 = load i8*, i8** %348, align 8
  %350 = getelementptr inbounds i8, i8* %349, i64 %230
  store i8 %346, i8* %350, align 1
  %351 = add nuw nsw i64 %230, 1
  %352 = icmp eq i64 %351, %228
  br i1 %352, label %353, label %229

353:                                              ; preds = %325, %223
  %354 = phi i32 [ %224, %223 ], [ %227, %325 ]
  %355 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 32
  store i32 %354, i32* %355, align 4
  %356 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %357 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %356, align 8
  %358 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %357, i64 0, i32 5
  store i32 96, i32* %358, align 8
  %359 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %356, align 8
  %360 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %359, i64 0, i32 6, i32 0, i64 0
  store i32 %354, i32* %360, align 4
  %361 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %356, align 8
  %362 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %361, i64 0, i32 1
  %363 = load void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*, i32)** %362, align 8
  tail call void %363(%struct.jpeg_common_struct* %16, i32 1) #5
  %364 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %4, i64 0, i32 4
  store i32 1, i32* %364, align 8
  ret void

365:                                              ; preds = %63
  %366 = getelementptr inbounds %struct.box, %struct.box* %52, i64 1
  %367 = getelementptr inbounds %struct.box, %struct.box* %52, i64 1, i32 6
  %368 = load i64, i64* %367, align 8
  %369 = icmp sgt i64 %368, 0
  %370 = select i1 %369, i64 %67, i64 %64
  %371 = select i1 %369, %struct.box* %366, %struct.box* %65
  br label %372

372:                                              ; preds = %365, %63
  %373 = phi i64 [ %64, %63 ], [ %370, %365 ]
  %374 = phi %struct.box* [ %65, %63 ], [ %371, %365 ]
  %375 = getelementptr inbounds %struct.box, %struct.box* %52, i64 2
  %376 = add i64 %53, -2
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %119, label %49
}

; Function Attrs: nounwind ssp uwtable
define internal void @pass2_fs_dither(%struct.jpeg_decompress_struct* nocapture readonly, i8** nocapture readonly, i8** nocapture readonly, i32) #0 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %6 = bitcast %struct.jpeg_color_quantizer** %5 to %struct.my_cquantizer**
  %7 = load %struct.my_cquantizer*, %struct.my_cquantizer** %6, align 8
  %8 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 3
  %9 = load [32 x i16]**, [32 x i16]*** %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 65
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 7
  %15 = load i32*, i32** %14, align 8
  %16 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 33
  %17 = load i8**, i8*** %16, align 8
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds i8*, i8** %17, i64 1
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8*, i8** %17, i64 2
  %22 = load i8*, i8** %21, align 8
  %23 = icmp sgt i32 %3, 0
  br i1 %23, label %24, label %195

24:                                               ; preds = %4
  %25 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 6
  %26 = add i32 %11, -1
  %27 = mul i32 %26, 3
  %28 = zext i32 %27 to i64
  %29 = zext i32 %26 to i64
  %30 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 5
  %31 = mul i32 %11, 3
  %32 = add i32 %31, 3
  %33 = zext i32 %32 to i64
  %34 = icmp eq i32 %11, 0
  %35 = zext i32 %3 to i64
  br label %36

36:                                               ; preds = %183, %24
  %37 = phi i64 [ 0, %24 ], [ %193, %183 ]
  %38 = getelementptr inbounds i8*, i8** %1, i64 %37
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds i8*, i8** %2, i64 %37
  %41 = load i8*, i8** %40, align 8
  %42 = load i32, i32* %25, align 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %36
  %45 = getelementptr inbounds i8, i8* %39, i64 %28
  %46 = getelementptr inbounds i8, i8* %41, i64 %29
  %47 = load i16*, i16** %30, align 8
  %48 = getelementptr inbounds i16, i16* %47, i64 %33
  br label %51

49:                                               ; preds = %36
  %50 = load i16*, i16** %30, align 8
  br label %51

51:                                               ; preds = %49, %44
  %52 = phi i32 [ 1, %49 ], [ 0, %44 ]
  %53 = phi i16* [ %50, %49 ], [ %48, %44 ]
  %54 = phi i8* [ %39, %49 ], [ %45, %44 ]
  %55 = phi i8* [ %41, %49 ], [ %46, %44 ]
  %56 = phi i64 [ 1, %49 ], [ -1, %44 ]
  %57 = phi i32 [ 3, %49 ], [ -3, %44 ]
  store i32 %52, i32* %25, align 8
  br i1 %34, label %183, label %58

58:                                               ; preds = %51
  %59 = sext i32 %57 to i64
  %60 = add nsw i32 %57, 1
  %61 = sext i32 %60 to i64
  %62 = add nsw i32 %57, 2
  %63 = sext i32 %62 to i64
  br label %64

64:                                               ; preds = %58, %141
  %65 = phi i32 [ %11, %58 ], [ %181, %141 ]
  %66 = phi i8* [ %55, %58 ], [ %180, %141 ]
  %67 = phi i8* [ %54, %58 ], [ %179, %141 ]
  %68 = phi i16* [ %53, %58 ], [ %78, %141 ]
  %69 = phi i32 [ 0, %58 ], [ %177, %141 ]
  %70 = phi i32 [ 0, %58 ], [ %170, %141 ]
  %71 = phi i32 [ 0, %58 ], [ %163, %141 ]
  %72 = phi i32 [ 0, %58 ], [ %158, %141 ]
  %73 = phi i32 [ 0, %58 ], [ %154, %141 ]
  %74 = phi i32 [ 0, %58 ], [ %150, %141 ]
  %75 = phi i32 [ 0, %58 ], [ %178, %141 ]
  %76 = phi i32 [ 0, %58 ], [ %171, %141 ]
  %77 = phi i32 [ 0, %58 ], [ %164, %141 ]
  %78 = getelementptr inbounds i16, i16* %68, i64 %59
  %79 = load i16, i16* %78, align 2
  %80 = sext i16 %79 to i32
  %81 = add nsw i32 %77, 8
  %82 = add nsw i32 %81, %80
  %83 = ashr i32 %82, 4
  %84 = getelementptr inbounds i16, i16* %68, i64 %61
  %85 = load i16, i16* %84, align 2
  %86 = sext i16 %85 to i32
  %87 = add nsw i32 %76, 8
  %88 = add nsw i32 %87, %86
  %89 = ashr i32 %88, 4
  %90 = getelementptr inbounds i16, i16* %68, i64 %63
  %91 = load i16, i16* %90, align 2
  %92 = sext i16 %91 to i32
  %93 = add nsw i32 %75, 8
  %94 = add nsw i32 %93, %92
  %95 = ashr i32 %94, 4
  %96 = sext i32 %83 to i64
  %97 = getelementptr inbounds i32, i32* %15, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = sext i32 %89 to i64
  %100 = getelementptr inbounds i32, i32* %15, i64 %99
  %101 = load i32, i32* %100, align 4
  %102 = sext i32 %95 to i64
  %103 = getelementptr inbounds i32, i32* %15, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = load i8, i8* %67, align 1
  %106 = zext i8 %105 to i32
  %107 = add nsw i32 %98, %106
  %108 = getelementptr inbounds i8, i8* %67, i64 1
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = add nsw i32 %101, %110
  %112 = getelementptr inbounds i8, i8* %67, i64 2
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = add nsw i32 %104, %114
  %116 = sext i32 %107 to i64
  %117 = getelementptr inbounds i8, i8* %13, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = sext i32 %111 to i64
  %121 = getelementptr inbounds i8, i8* %13, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = sext i32 %115 to i64
  %125 = getelementptr inbounds i8, i8* %13, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = lshr i32 %119, 3
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds [32 x i16]*, [32 x i16]** %9, i64 %129
  %131 = load [32 x i16]*, [32 x i16]** %130, align 8
  %132 = lshr i32 %123, 2
  %133 = zext i32 %132 to i64
  %134 = lshr i32 %127, 3
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds [32 x i16], [32 x i16]* %131, i64 %133, i64 %135
  %137 = load i16, i16* %136, align 2
  %138 = icmp eq i16 %137, 0
  br i1 %138, label %139, label %141

139:                                              ; preds = %64
  tail call fastcc void @fill_inverse_cmap(%struct.jpeg_decompress_struct* %0, i32 %128, i32 %132, i32 %134)
  %140 = load i16, i16* %136, align 2
  br label %141

141:                                              ; preds = %139, %64
  %142 = phi i16 [ %140, %139 ], [ %137, %64 ]
  %143 = zext i16 %142 to i32
  %144 = add nsw i32 %143, -1
  %145 = trunc i32 %144 to i8
  store i8 %145, i8* %66, align 1
  %146 = sext i32 %144 to i64
  %147 = getelementptr inbounds i8, i8* %18, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = sub nsw i32 %119, %149
  %151 = getelementptr inbounds i8, i8* %20, i64 %146
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i32
  %154 = sub nsw i32 %123, %153
  %155 = getelementptr inbounds i8, i8* %22, i64 %146
  %156 = load i8, i8* %155, align 1
  %157 = zext i8 %156 to i32
  %158 = sub nsw i32 %127, %157
  %159 = mul nsw i32 %150, 3
  %160 = add nsw i32 %159, %71
  %161 = trunc i32 %160 to i16
  store i16 %161, i16* %68, align 2
  %162 = mul nsw i32 %150, 5
  %163 = add nsw i32 %162, %74
  %164 = mul nsw i32 %150, 7
  %165 = mul nsw i32 %154, 3
  %166 = add nsw i32 %165, %70
  %167 = trunc i32 %166 to i16
  %168 = getelementptr inbounds i16, i16* %68, i64 1
  store i16 %167, i16* %168, align 2
  %169 = mul nsw i32 %154, 5
  %170 = add nsw i32 %169, %73
  %171 = mul nsw i32 %154, 7
  %172 = mul nsw i32 %158, 3
  %173 = add nsw i32 %172, %69
  %174 = trunc i32 %173 to i16
  %175 = getelementptr inbounds i16, i16* %68, i64 2
  store i16 %174, i16* %175, align 2
  %176 = mul nsw i32 %158, 5
  %177 = add nsw i32 %176, %72
  %178 = mul nsw i32 %158, 7
  %179 = getelementptr inbounds i8, i8* %67, i64 %59
  %180 = getelementptr inbounds i8, i8* %66, i64 %56
  %181 = add i32 %65, -1
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %64

183:                                              ; preds = %141, %51
  %184 = phi i32 [ 0, %51 ], [ %163, %141 ]
  %185 = phi i32 [ 0, %51 ], [ %170, %141 ]
  %186 = phi i32 [ 0, %51 ], [ %177, %141 ]
  %187 = phi i16* [ %53, %51 ], [ %78, %141 ]
  %188 = trunc i32 %184 to i16
  store i16 %188, i16* %187, align 2
  %189 = trunc i32 %185 to i16
  %190 = getelementptr inbounds i16, i16* %187, i64 1
  store i16 %189, i16* %190, align 2
  %191 = trunc i32 %186 to i16
  %192 = getelementptr inbounds i16, i16* %187, i64 2
  store i16 %191, i16* %192, align 2
  %193 = add nuw nsw i64 %37, 1
  %194 = icmp eq i64 %193, %35
  br i1 %194, label %195, label %36

195:                                              ; preds = %183, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @pass2_no_dither(%struct.jpeg_decompress_struct* nocapture readonly, i8** nocapture readonly, i8** nocapture readonly, i32) #0 {
  %5 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %6 = bitcast %struct.jpeg_color_quantizer** %5 to %struct.my_cquantizer**
  %7 = load %struct.my_cquantizer*, %struct.my_cquantizer** %6, align 8
  %8 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %7, i64 0, i32 3
  %9 = load [32 x i16]**, [32 x i16]*** %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 27
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %3, 0
  br i1 %12, label %13, label %59

13:                                               ; preds = %4
  %14 = icmp eq i32 %11, 0
  %15 = zext i32 %3 to i64
  br label %16

16:                                               ; preds = %56, %13
  %17 = phi i64 [ 0, %13 ], [ %57, %56 ]
  br i1 %14, label %56, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds i8*, i8** %2, i64 %17
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8*, i8** %1, i64 %17
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %18, %49
  %24 = phi i32 [ %54, %49 ], [ %11, %18 ]
  %25 = phi i8* [ %53, %49 ], [ %20, %18 ]
  %26 = phi i8* [ %33, %49 ], [ %22, %18 ]
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  %28 = load i8, i8* %26, align 1
  %29 = lshr i8 %28, 3
  %30 = getelementptr inbounds i8, i8* %26, i64 2
  %31 = load i8, i8* %27, align 1
  %32 = lshr i8 %31, 2
  %33 = getelementptr inbounds i8, i8* %26, i64 3
  %34 = load i8, i8* %30, align 1
  %35 = lshr i8 %34, 3
  %36 = zext i8 %29 to i64
  %37 = getelementptr inbounds [32 x i16]*, [32 x i16]** %9, i64 %36
  %38 = load [32 x i16]*, [32 x i16]** %37, align 8
  %39 = zext i8 %32 to i64
  %40 = zext i8 %35 to i64
  %41 = getelementptr inbounds [32 x i16], [32 x i16]* %38, i64 %39, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %42, 0
  br i1 %43, label %44, label %49

44:                                               ; preds = %23
  %45 = zext i8 %35 to i32
  %46 = zext i8 %32 to i32
  %47 = zext i8 %29 to i32
  tail call fastcc void @fill_inverse_cmap(%struct.jpeg_decompress_struct* %0, i32 %47, i32 %46, i32 %45)
  %48 = load i16, i16* %41, align 2
  br label %49

49:                                               ; preds = %44, %23
  %50 = phi i16 [ %48, %44 ], [ %42, %23 ]
  %51 = trunc i16 %50 to i8
  %52 = add i8 %51, -1
  %53 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %52, i8* %25, align 1
  %54 = add i32 %24, -1
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %23

56:                                               ; preds = %49, %16
  %57 = add nuw nsw i64 %17, 1
  %58 = icmp eq i64 %57, %15
  br i1 %58, label %59, label %16

59:                                               ; preds = %56, %4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @finish_pass2(%struct.jpeg_decompress_struct* nocapture) #3 {
  ret void
}

declare void @jzero_far(i8*, i64) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @update_box(%struct.jpeg_decompress_struct* nocapture readonly, %struct.box* nocapture) unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %4 = bitcast %struct.jpeg_color_quantizer** %3 to %struct.my_cquantizer**
  %5 = load %struct.my_cquantizer*, %struct.my_cquantizer** %4, align 8
  %6 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %5, i64 0, i32 3
  %7 = load [32 x i16]**, [32 x i16]*** %6, align 8
  %8 = getelementptr inbounds %struct.box, %struct.box* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.box, %struct.box* %1, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.box, %struct.box* %1, i64 0, i32 2
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.box, %struct.box* %1, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.box, %struct.box* %1, i64 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.box, %struct.box* %1, i64 0, i32 5
  %19 = load i32, i32* %18, align 4
  %20 = icmp sgt i32 %11, %9
  br i1 %20, label %21, label %55

21:                                               ; preds = %2
  %22 = icmp sgt i32 %13, %15
  %23 = sext i32 %17 to i64
  %24 = icmp sgt i32 %17, %19
  %25 = sext i32 %13 to i64
  %26 = sext i32 %15 to i64
  %27 = sext i32 %9 to i64
  %28 = sext i32 %11 to i64
  br label %29

29:                                               ; preds = %52, %21
  %30 = phi i64 [ %53, %52 ], [ %27, %21 ]
  br i1 %22, label %52, label %31

31:                                               ; preds = %29
  %32 = getelementptr inbounds [32 x i16]*, [32 x i16]** %7, i64 %30
  %33 = load [32 x i16]*, [32 x i16]** %32, align 8
  br label %34

34:                                               ; preds = %49, %31
  %35 = phi i64 [ %50, %49 ], [ %25, %31 ]
  br i1 %24, label %49, label %36

36:                                               ; preds = %34
  %37 = getelementptr inbounds [32 x i16], [32 x i16]* %33, i64 %35, i64 %23
  br label %38

38:                                               ; preds = %36, %45
  %39 = phi i32 [ %47, %45 ], [ %17, %36 ]
  %40 = phi i16* [ %46, %45 ], [ %37, %36 ]
  %41 = load i16, i16* %40, align 2
  %42 = icmp eq i16 %41, 0
  br i1 %42, label %45, label %43

43:                                               ; preds = %38
  %44 = trunc i64 %30 to i32
  store i32 %44, i32* %8, align 8
  br label %55

45:                                               ; preds = %38
  %46 = getelementptr inbounds i16, i16* %40, i64 1
  %47 = add nsw i32 %39, 1
  %48 = icmp slt i32 %39, %19
  br i1 %48, label %38, label %49

49:                                               ; preds = %45, %34
  %50 = add nsw i64 %35, 1
  %51 = icmp slt i64 %35, %26
  br i1 %51, label %34, label %52

52:                                               ; preds = %49, %29
  %53 = add nsw i64 %30, 1
  %54 = icmp slt i64 %30, %28
  br i1 %54, label %29, label %55

55:                                               ; preds = %52, %2, %43
  %56 = phi i32 [ %44, %43 ], [ %9, %2 ], [ %9, %52 ]
  %57 = icmp sgt i32 %11, %56
  br i1 %57, label %58, label %92

58:                                               ; preds = %55
  %59 = icmp sgt i32 %13, %15
  %60 = sext i32 %17 to i64
  %61 = icmp sgt i32 %17, %19
  %62 = sext i32 %13 to i64
  %63 = sext i32 %15 to i64
  %64 = sext i32 %11 to i64
  %65 = sext i32 %56 to i64
  br label %66

66:                                               ; preds = %89, %58
  %67 = phi i64 [ %90, %89 ], [ %64, %58 ]
  br i1 %59, label %89, label %68

68:                                               ; preds = %66
  %69 = getelementptr inbounds [32 x i16]*, [32 x i16]** %7, i64 %67
  %70 = load [32 x i16]*, [32 x i16]** %69, align 8
  br label %71

71:                                               ; preds = %86, %68
  %72 = phi i64 [ %87, %86 ], [ %62, %68 ]
  br i1 %61, label %86, label %73

73:                                               ; preds = %71
  %74 = getelementptr inbounds [32 x i16], [32 x i16]* %70, i64 %72, i64 %60
  br label %75

75:                                               ; preds = %73, %82
  %76 = phi i32 [ %84, %82 ], [ %17, %73 ]
  %77 = phi i16* [ %83, %82 ], [ %74, %73 ]
  %78 = load i16, i16* %77, align 2
  %79 = icmp eq i16 %78, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %75
  %81 = trunc i64 %67 to i32
  store i32 %81, i32* %10, align 4
  br label %92

82:                                               ; preds = %75
  %83 = getelementptr inbounds i16, i16* %77, i64 1
  %84 = add nsw i32 %76, 1
  %85 = icmp slt i32 %76, %19
  br i1 %85, label %75, label %86

86:                                               ; preds = %82, %71
  %87 = add nsw i64 %72, 1
  %88 = icmp slt i64 %72, %63
  br i1 %88, label %71, label %89

89:                                               ; preds = %86, %66
  %90 = add nsw i64 %67, -1
  %91 = icmp sgt i64 %67, %65
  br i1 %91, label %66, label %92

92:                                               ; preds = %89, %55, %80
  %93 = phi i32 [ %81, %80 ], [ %11, %55 ], [ %11, %89 ]
  %94 = icmp sgt i32 %15, %13
  br i1 %94, label %95, label %128

95:                                               ; preds = %92
  %96 = icmp slt i32 %93, %56
  %97 = sext i32 %17 to i64
  %98 = icmp sgt i32 %17, %19
  %99 = sext i32 %56 to i64
  %100 = sext i32 %93 to i64
  %101 = sext i32 %13 to i64
  %102 = sext i32 %15 to i64
  br label %103

103:                                              ; preds = %125, %95
  %104 = phi i64 [ %126, %125 ], [ %101, %95 ]
  br i1 %96, label %125, label %105

105:                                              ; preds = %103, %122
  %106 = phi i64 [ %123, %122 ], [ %99, %103 ]
  br i1 %98, label %122, label %107

107:                                              ; preds = %105
  %108 = getelementptr inbounds [32 x i16]*, [32 x i16]** %7, i64 %106
  %109 = load [32 x i16]*, [32 x i16]** %108, align 8
  %110 = getelementptr inbounds [32 x i16], [32 x i16]* %109, i64 %104, i64 %97
  br label %111

111:                                              ; preds = %107, %118
  %112 = phi i32 [ %120, %118 ], [ %17, %107 ]
  %113 = phi i16* [ %119, %118 ], [ %110, %107 ]
  %114 = load i16, i16* %113, align 2
  %115 = icmp eq i16 %114, 0
  br i1 %115, label %118, label %116

116:                                              ; preds = %111
  %117 = trunc i64 %104 to i32
  store i32 %117, i32* %12, align 8
  br label %128

118:                                              ; preds = %111
  %119 = getelementptr inbounds i16, i16* %113, i64 1
  %120 = add nsw i32 %112, 1
  %121 = icmp slt i32 %112, %19
  br i1 %121, label %111, label %122

122:                                              ; preds = %118, %105
  %123 = add nsw i64 %106, 1
  %124 = icmp slt i64 %106, %100
  br i1 %124, label %105, label %125

125:                                              ; preds = %122, %103
  %126 = add nsw i64 %104, 1
  %127 = icmp slt i64 %104, %102
  br i1 %127, label %103, label %128

128:                                              ; preds = %125, %92, %116
  %129 = phi i32 [ %117, %116 ], [ %13, %92 ], [ %13, %125 ]
  %130 = icmp sgt i32 %15, %129
  br i1 %130, label %131, label %164

131:                                              ; preds = %128
  %132 = icmp slt i32 %93, %56
  %133 = sext i32 %17 to i64
  %134 = icmp sgt i32 %17, %19
  %135 = sext i32 %56 to i64
  %136 = sext i32 %93 to i64
  %137 = sext i32 %15 to i64
  %138 = sext i32 %129 to i64
  br label %139

139:                                              ; preds = %161, %131
  %140 = phi i64 [ %162, %161 ], [ %137, %131 ]
  br i1 %132, label %161, label %141

141:                                              ; preds = %139, %158
  %142 = phi i64 [ %159, %158 ], [ %135, %139 ]
  br i1 %134, label %158, label %143

143:                                              ; preds = %141
  %144 = getelementptr inbounds [32 x i16]*, [32 x i16]** %7, i64 %142
  %145 = load [32 x i16]*, [32 x i16]** %144, align 8
  %146 = getelementptr inbounds [32 x i16], [32 x i16]* %145, i64 %140, i64 %133
  br label %147

147:                                              ; preds = %143, %154
  %148 = phi i32 [ %156, %154 ], [ %17, %143 ]
  %149 = phi i16* [ %155, %154 ], [ %146, %143 ]
  %150 = load i16, i16* %149, align 2
  %151 = icmp eq i16 %150, 0
  br i1 %151, label %154, label %152

152:                                              ; preds = %147
  %153 = trunc i64 %140 to i32
  store i32 %153, i32* %14, align 4
  br label %164

154:                                              ; preds = %147
  %155 = getelementptr inbounds i16, i16* %149, i64 1
  %156 = add nsw i32 %148, 1
  %157 = icmp slt i32 %148, %19
  br i1 %157, label %147, label %158

158:                                              ; preds = %154, %141
  %159 = add nsw i64 %142, 1
  %160 = icmp slt i64 %142, %136
  br i1 %160, label %141, label %161

161:                                              ; preds = %158, %139
  %162 = add nsw i64 %140, -1
  %163 = icmp sgt i64 %140, %138
  br i1 %163, label %139, label %164

164:                                              ; preds = %161, %128, %152
  %165 = phi i32 [ %153, %152 ], [ %15, %128 ], [ %15, %161 ]
  %166 = icmp sgt i32 %19, %17
  br i1 %166, label %167, label %200

167:                                              ; preds = %164
  %168 = icmp slt i32 %93, %56
  %169 = sext i32 %129 to i64
  %170 = icmp slt i32 %165, %129
  %171 = sext i32 %56 to i64
  %172 = sext i32 %93 to i64
  %173 = sext i32 %17 to i64
  %174 = sext i32 %19 to i64
  br label %175

175:                                              ; preds = %197, %167
  %176 = phi i64 [ %198, %197 ], [ %173, %167 ]
  br i1 %168, label %197, label %177

177:                                              ; preds = %175, %194
  %178 = phi i64 [ %195, %194 ], [ %171, %175 ]
  br i1 %170, label %194, label %179

179:                                              ; preds = %177
  %180 = getelementptr inbounds [32 x i16]*, [32 x i16]** %7, i64 %178
  %181 = load [32 x i16]*, [32 x i16]** %180, align 8
  %182 = getelementptr inbounds [32 x i16], [32 x i16]* %181, i64 %169, i64 %176
  br label %183

183:                                              ; preds = %179, %190
  %184 = phi i32 [ %191, %190 ], [ %129, %179 ]
  %185 = phi i16* [ %192, %190 ], [ %182, %179 ]
  %186 = load i16, i16* %185, align 2
  %187 = icmp eq i16 %186, 0
  br i1 %187, label %190, label %188

188:                                              ; preds = %183
  %189 = trunc i64 %176 to i32
  store i32 %189, i32* %16, align 8
  br label %200

190:                                              ; preds = %183
  %191 = add nsw i32 %184, 1
  %192 = getelementptr inbounds i16, i16* %185, i64 32
  %193 = icmp slt i32 %184, %165
  br i1 %193, label %183, label %194

194:                                              ; preds = %190, %177
  %195 = add nsw i64 %178, 1
  %196 = icmp slt i64 %178, %172
  br i1 %196, label %177, label %197

197:                                              ; preds = %194, %175
  %198 = add nsw i64 %176, 1
  %199 = icmp slt i64 %176, %174
  br i1 %199, label %175, label %200

200:                                              ; preds = %197, %164, %188
  %201 = phi i32 [ %189, %188 ], [ %17, %164 ], [ %17, %197 ]
  %202 = icmp sgt i32 %19, %201
  br i1 %202, label %203, label %236

203:                                              ; preds = %200
  %204 = icmp slt i32 %93, %56
  %205 = sext i32 %129 to i64
  %206 = icmp slt i32 %165, %129
  %207 = sext i32 %56 to i64
  %208 = sext i32 %93 to i64
  %209 = sext i32 %19 to i64
  %210 = sext i32 %201 to i64
  br label %211

211:                                              ; preds = %233, %203
  %212 = phi i64 [ %234, %233 ], [ %209, %203 ]
  br i1 %204, label %233, label %213

213:                                              ; preds = %211, %230
  %214 = phi i64 [ %231, %230 ], [ %207, %211 ]
  br i1 %206, label %230, label %215

215:                                              ; preds = %213
  %216 = getelementptr inbounds [32 x i16]*, [32 x i16]** %7, i64 %214
  %217 = load [32 x i16]*, [32 x i16]** %216, align 8
  %218 = getelementptr inbounds [32 x i16], [32 x i16]* %217, i64 %205, i64 %212
  br label %219

219:                                              ; preds = %215, %226
  %220 = phi i32 [ %227, %226 ], [ %129, %215 ]
  %221 = phi i16* [ %228, %226 ], [ %218, %215 ]
  %222 = load i16, i16* %221, align 2
  %223 = icmp eq i16 %222, 0
  br i1 %223, label %226, label %224

224:                                              ; preds = %219
  %225 = trunc i64 %212 to i32
  store i32 %225, i32* %18, align 4
  br label %236

226:                                              ; preds = %219
  %227 = add nsw i32 %220, 1
  %228 = getelementptr inbounds i16, i16* %221, i64 32
  %229 = icmp slt i32 %220, %165
  br i1 %229, label %219, label %230

230:                                              ; preds = %226, %213
  %231 = add nsw i64 %214, 1
  %232 = icmp slt i64 %214, %208
  br i1 %232, label %213, label %233

233:                                              ; preds = %230, %211
  %234 = add nsw i64 %212, -1
  %235 = icmp sgt i64 %212, %210
  br i1 %235, label %211, label %236

236:                                              ; preds = %233, %200, %224
  %237 = phi i32 [ %225, %224 ], [ %19, %200 ], [ %19, %233 ]
  %238 = sub nsw i32 %93, %56
  %239 = shl i32 %238, 3
  %240 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 11
  %241 = load i32, i32* %240, align 8
  %242 = zext i32 %241 to i64
  %243 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_red, i64 0, i64 %242
  %244 = load i32, i32* %243, align 4
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %245
  %247 = load i32, i32* %246, align 4
  %248 = mul nsw i32 %239, %247
  %249 = sext i32 %248 to i64
  %250 = sub nsw i32 %165, %129
  %251 = shl i32 %250, 2
  %252 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_green, i64 0, i64 %242
  %253 = load i32, i32* %252, align 4
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %254
  %256 = load i32, i32* %255, align 4
  %257 = mul nsw i32 %251, %256
  %258 = sext i32 %257 to i64
  %259 = sub nsw i32 %237, %201
  %260 = shl i32 %259, 3
  %261 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_blue, i64 0, i64 %242
  %262 = load i32, i32* %261, align 4
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %263
  %265 = load i32, i32* %264, align 4
  %266 = mul nsw i32 %260, %265
  %267 = sext i32 %266 to i64
  %268 = mul nsw i64 %249, %249
  %269 = mul nsw i64 %258, %258
  %270 = add nuw nsw i64 %269, %268
  %271 = mul nsw i64 %267, %267
  %272 = add nuw nsw i64 %270, %271
  %273 = getelementptr inbounds %struct.box, %struct.box* %1, i64 0, i32 6
  store i64 %272, i64* %273, align 8
  %274 = icmp slt i32 %93, %56
  br i1 %274, label %338, label %275

275:                                              ; preds = %236
  %276 = icmp slt i32 %165, %129
  %277 = sext i32 %201 to i64
  %278 = icmp slt i32 %237, %201
  %279 = sext i32 %129 to i64
  %280 = sext i32 %165 to i64
  %281 = sext i32 %56 to i64
  %282 = sext i32 %93 to i64
  %283 = add nsw i64 %280, 1
  %284 = sub nsw i64 %283, %279
  %285 = and i64 %284, 1
  %286 = icmp eq i64 %285, 0
  %287 = add nsw i64 %279, 1
  %288 = icmp eq i32 %165, %129
  br label %289

289:                                              ; preds = %334, %275
  %290 = phi i64 [ %336, %334 ], [ %281, %275 ]
  %291 = phi i64 [ %335, %334 ], [ 0, %275 ]
  br i1 %276, label %334, label %292

292:                                              ; preds = %289
  %293 = getelementptr inbounds [32 x i16]*, [32 x i16]** %7, i64 %290
  %294 = load [32 x i16]*, [32 x i16]** %293, align 8
  %295 = or i1 %286, %278
  %296 = select i1 %286, i64 %279, i64 %287
  %297 = select i1 %286, i64 undef, i64 %291
  br i1 %295, label %311, label %298

298:                                              ; preds = %292
  %299 = getelementptr inbounds [32 x i16], [32 x i16]* %294, i64 %279, i64 %277
  br label %300

300:                                              ; preds = %300, %298
  %301 = phi i64 [ %307, %300 ], [ %291, %298 ]
  %302 = phi i32 [ %308, %300 ], [ %201, %298 ]
  %303 = phi i16* [ %309, %300 ], [ %299, %298 ]
  %304 = load i16, i16* %303, align 2
  %305 = icmp ne i16 %304, 0
  %306 = zext i1 %305 to i64
  %307 = add nsw i64 %301, %306
  %308 = add nsw i32 %302, 1
  %309 = getelementptr inbounds i16, i16* %303, i64 1
  %310 = icmp slt i32 %302, %237
  br i1 %310, label %300, label %311

311:                                              ; preds = %292, %300
  %312 = phi i64 [ %296, %292 ], [ %287, %300 ]
  %313 = phi i64 [ %291, %292 ], [ %307, %300 ]
  %314 = phi i64 [ %297, %292 ], [ %307, %300 ]
  br i1 %288, label %334, label %315

315:                                              ; preds = %311, %354
  %316 = phi i64 [ %356, %354 ], [ %312, %311 ]
  %317 = phi i64 [ %355, %354 ], [ %313, %311 ]
  br i1 %278, label %331, label %318

318:                                              ; preds = %315
  %319 = getelementptr inbounds [32 x i16], [32 x i16]* %294, i64 %316, i64 %277
  br label %320

320:                                              ; preds = %318, %320
  %321 = phi i64 [ %327, %320 ], [ %317, %318 ]
  %322 = phi i32 [ %328, %320 ], [ %201, %318 ]
  %323 = phi i16* [ %329, %320 ], [ %319, %318 ]
  %324 = load i16, i16* %323, align 2
  %325 = icmp ne i16 %324, 0
  %326 = zext i1 %325 to i64
  %327 = add nsw i64 %321, %326
  %328 = add nsw i32 %322, 1
  %329 = getelementptr inbounds i16, i16* %323, i64 1
  %330 = icmp slt i32 %322, %237
  br i1 %330, label %320, label %331

331:                                              ; preds = %320, %315
  %332 = phi i64 [ %317, %315 ], [ %327, %320 ]
  %333 = add nsw i64 %316, 1
  br i1 %278, label %354, label %341

334:                                              ; preds = %311, %354, %289
  %335 = phi i64 [ %291, %289 ], [ %314, %311 ], [ %355, %354 ]
  %336 = add nsw i64 %290, 1
  %337 = icmp slt i64 %290, %282
  br i1 %337, label %289, label %338

338:                                              ; preds = %334, %236
  %339 = phi i64 [ 0, %236 ], [ %335, %334 ]
  %340 = getelementptr inbounds %struct.box, %struct.box* %1, i64 0, i32 7
  store i64 %339, i64* %340, align 8
  ret void

341:                                              ; preds = %331
  %342 = getelementptr inbounds [32 x i16], [32 x i16]* %294, i64 %333, i64 %277
  br label %343

343:                                              ; preds = %343, %341
  %344 = phi i64 [ %350, %343 ], [ %332, %341 ]
  %345 = phi i32 [ %351, %343 ], [ %201, %341 ]
  %346 = phi i16* [ %352, %343 ], [ %342, %341 ]
  %347 = load i16, i16* %346, align 2
  %348 = icmp ne i16 %347, 0
  %349 = zext i1 %348 to i64
  %350 = add nsw i64 %344, %349
  %351 = add nsw i32 %345, 1
  %352 = getelementptr inbounds i16, i16* %346, i64 1
  %353 = icmp slt i32 %345, %237
  br i1 %353, label %343, label %354

354:                                              ; preds = %343, %331
  %355 = phi i64 [ %332, %331 ], [ %350, %343 ]
  %356 = add nsw i64 %316, 2
  %357 = icmp slt i64 %333, %280
  br i1 %357, label %315, label %334
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @fill_inverse_cmap(%struct.jpeg_decompress_struct* nocapture readonly, i32, i32, i32) unnamed_addr #0 {
  %5 = alloca [128 x i64], align 16
  %6 = alloca [256 x i64], align 16
  %7 = alloca [256 x i8], align 16
  %8 = alloca [128 x i8], align 16
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 87
  %10 = bitcast %struct.jpeg_color_quantizer** %9 to %struct.my_cquantizer**
  %11 = load %struct.my_cquantizer*, %struct.my_cquantizer** %10, align 8
  %12 = getelementptr inbounds %struct.my_cquantizer, %struct.my_cquantizer* %11, i64 0, i32 3
  %13 = load [32 x i16]**, [32 x i16]*** %12, align 8
  %14 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %14) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 256, i1 false)
  %15 = getelementptr inbounds [128 x i8], [128 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %15) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 128, i1 false)
  %16 = lshr i32 %1, 2
  %17 = lshr i32 %2, 3
  %18 = lshr i32 %3, 2
  %19 = shl i32 %16, 5
  %20 = or i32 %19, 4
  %21 = shl i32 %17, 5
  %22 = or i32 %21, 2
  %23 = shl i32 %18, 5
  %24 = or i32 %23, 4
  %25 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 32
  %26 = load i32, i32* %25, align 4
  %27 = bitcast [256 x i64]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %27) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -86, i64 2048, i1 false) #5
  %28 = or i32 %19, 28
  %29 = add nsw i32 %28, %20
  %30 = ashr exact i32 %29, 1
  %31 = or i32 %21, 30
  %32 = add nsw i32 %31, %22
  %33 = ashr exact i32 %32, 1
  %34 = or i32 %23, 28
  %35 = add nsw i32 %34, %24
  %36 = ashr exact i32 %35, 1
  %37 = icmp sgt i32 %26, 0
  br i1 %37, label %38, label %293

38:                                               ; preds = %4
  %39 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 33
  %40 = load i8**, i8*** %39, align 8
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 11
  %43 = getelementptr inbounds i8*, i8** %40, i64 1
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds i8*, i8** %40, i64 2
  %46 = load i8*, i8** %45, align 8
  %47 = zext i32 %26 to i64
  br label %48

48:                                               ; preds = %247, %38
  %49 = phi i64 [ 0, %38 ], [ %254, %247 ]
  %50 = phi i64 [ 2147483647, %38 ], [ %253, %247 ]
  %51 = getelementptr inbounds i8, i8* %41, i64 %49
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i32
  %54 = icmp sgt i32 %20, %53
  br i1 %54, label %55, label %71

55:                                               ; preds = %48
  %56 = sub nsw i32 %53, %20
  %57 = load i32, i32* %42, align 8
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_red, i64 0, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = mul nsw i32 %63, %56
  %65 = sext i32 %64 to i64
  %66 = mul nsw i64 %65, %65
  %67 = sub nsw i32 %53, %28
  %68 = mul nsw i32 %63, %67
  %69 = sext i32 %68 to i64
  %70 = mul nsw i64 %69, %69
  br label %115

71:                                               ; preds = %48
  %72 = icmp slt i32 %28, %53
  br i1 %72, label %73, label %89

73:                                               ; preds = %71
  %74 = sub nsw i32 %53, %28
  %75 = load i32, i32* %42, align 8
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_red, i64 0, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = mul nsw i32 %81, %74
  %83 = sext i32 %82 to i64
  %84 = mul nsw i64 %83, %83
  %85 = sub nsw i32 %53, %20
  %86 = mul nsw i32 %81, %85
  %87 = sext i32 %86 to i64
  %88 = mul nsw i64 %87, %87
  br label %115

89:                                               ; preds = %71
  %90 = icmp slt i32 %30, %53
  br i1 %90, label %103, label %91

91:                                               ; preds = %89
  %92 = sub nsw i32 %53, %28
  %93 = load i32, i32* %42, align 8
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_red, i64 0, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = mul nsw i32 %99, %92
  %101 = sext i32 %100 to i64
  %102 = mul nsw i64 %101, %101
  br label %115

103:                                              ; preds = %89
  %104 = sub nsw i32 %53, %20
  %105 = load i32, i32* %42, align 8
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_red, i64 0, i64 %106
  %108 = load i32, i32* %107, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = mul nsw i32 %111, %104
  %113 = sext i32 %112 to i64
  %114 = mul nsw i64 %113, %113
  br label %115

115:                                              ; preds = %103, %91, %73, %55
  %116 = phi i32 [ %57, %55 ], [ %75, %73 ], [ %93, %91 ], [ %105, %103 ]
  %117 = phi i64 [ %66, %55 ], [ %84, %73 ], [ 0, %91 ], [ 0, %103 ]
  %118 = phi i64 [ %70, %55 ], [ %88, %73 ], [ %102, %91 ], [ %114, %103 ]
  %119 = getelementptr inbounds i8, i8* %44, i64 %49
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = icmp sgt i32 %22, %121
  br i1 %122, label %123, label %139

123:                                              ; preds = %115
  %124 = sub nsw i32 %121, %22
  %125 = zext i32 %116 to i64
  %126 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_green, i64 0, i64 %125
  %127 = load i32, i32* %126, align 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %128
  %130 = load i32, i32* %129, align 4
  %131 = mul nsw i32 %130, %124
  %132 = sext i32 %131 to i64
  %133 = mul nsw i64 %132, %132
  %134 = add nuw nsw i64 %133, %117
  %135 = sub nsw i32 %121, %31
  %136 = mul nsw i32 %130, %135
  %137 = sext i32 %136 to i64
  %138 = mul nsw i64 %137, %137
  br label %181

139:                                              ; preds = %115
  %140 = icmp slt i32 %31, %121
  br i1 %140, label %141, label %157

141:                                              ; preds = %139
  %142 = sub nsw i32 %121, %31
  %143 = zext i32 %116 to i64
  %144 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_green, i64 0, i64 %143
  %145 = load i32, i32* %144, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %146
  %148 = load i32, i32* %147, align 4
  %149 = mul nsw i32 %148, %142
  %150 = sext i32 %149 to i64
  %151 = mul nsw i64 %150, %150
  %152 = add nuw nsw i64 %151, %117
  %153 = sub nsw i32 %121, %22
  %154 = mul nsw i32 %148, %153
  %155 = sext i32 %154 to i64
  %156 = mul nsw i64 %155, %155
  br label %181

157:                                              ; preds = %139
  %158 = icmp slt i32 %33, %121
  br i1 %158, label %170, label %159

159:                                              ; preds = %157
  %160 = sub nsw i32 %121, %31
  %161 = zext i32 %116 to i64
  %162 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_green, i64 0, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %164
  %166 = load i32, i32* %165, align 4
  %167 = mul nsw i32 %166, %160
  %168 = sext i32 %167 to i64
  %169 = mul nsw i64 %168, %168
  br label %181

170:                                              ; preds = %157
  %171 = sub nsw i32 %121, %22
  %172 = zext i32 %116 to i64
  %173 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_green, i64 0, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %175
  %177 = load i32, i32* %176, align 4
  %178 = mul nsw i32 %177, %171
  %179 = sext i32 %178 to i64
  %180 = mul nsw i64 %179, %179
  br label %181

181:                                              ; preds = %170, %159, %141, %123
  %182 = phi i64 [ %134, %123 ], [ %152, %141 ], [ %117, %159 ], [ %117, %170 ]
  %183 = phi i64 [ %138, %123 ], [ %156, %141 ], [ %169, %159 ], [ %180, %170 ]
  %184 = add nuw nsw i64 %183, %118
  %185 = getelementptr inbounds i8, i8* %46, i64 %49
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = icmp sgt i32 %24, %187
  br i1 %188, label %189, label %205

189:                                              ; preds = %181
  %190 = sub nsw i32 %187, %24
  %191 = zext i32 %116 to i64
  %192 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_blue, i64 0, i64 %191
  %193 = load i32, i32* %192, align 4
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %194
  %196 = load i32, i32* %195, align 4
  %197 = mul nsw i32 %196, %190
  %198 = sext i32 %197 to i64
  %199 = mul nsw i64 %198, %198
  %200 = add nsw i64 %199, %182
  %201 = sub nsw i32 %187, %34
  %202 = mul nsw i32 %196, %201
  %203 = sext i32 %202 to i64
  %204 = mul nsw i64 %203, %203
  br label %247

205:                                              ; preds = %181
  %206 = icmp slt i32 %34, %187
  br i1 %206, label %207, label %223

207:                                              ; preds = %205
  %208 = sub nsw i32 %187, %34
  %209 = zext i32 %116 to i64
  %210 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_blue, i64 0, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = mul nsw i32 %214, %208
  %216 = sext i32 %215 to i64
  %217 = mul nsw i64 %216, %216
  %218 = add nsw i64 %217, %182
  %219 = sub nsw i32 %187, %24
  %220 = mul nsw i32 %214, %219
  %221 = sext i32 %220 to i64
  %222 = mul nsw i64 %221, %221
  br label %247

223:                                              ; preds = %205
  %224 = icmp slt i32 %36, %187
  br i1 %224, label %236, label %225

225:                                              ; preds = %223
  %226 = sub nsw i32 %187, %34
  %227 = zext i32 %116 to i64
  %228 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_blue, i64 0, i64 %227
  %229 = load i32, i32* %228, align 4
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %230
  %232 = load i32, i32* %231, align 4
  %233 = mul nsw i32 %232, %226
  %234 = sext i32 %233 to i64
  %235 = mul nsw i64 %234, %234
  br label %247

236:                                              ; preds = %223
  %237 = sub nsw i32 %187, %24
  %238 = zext i32 %116 to i64
  %239 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_blue, i64 0, i64 %238
  %240 = load i32, i32* %239, align 4
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %241
  %243 = load i32, i32* %242, align 4
  %244 = mul nsw i32 %243, %237
  %245 = sext i32 %244 to i64
  %246 = mul nsw i64 %245, %245
  br label %247

247:                                              ; preds = %236, %225, %207, %189
  %248 = phi i64 [ %200, %189 ], [ %218, %207 ], [ %182, %225 ], [ %182, %236 ]
  %249 = phi i64 [ %204, %189 ], [ %222, %207 ], [ %235, %225 ], [ %246, %236 ]
  %250 = add nuw nsw i64 %184, %249
  %251 = getelementptr inbounds [256 x i64], [256 x i64]* %6, i64 0, i64 %49
  store i64 %248, i64* %251, align 8
  %252 = icmp slt i64 %250, %50
  %253 = select i1 %252, i64 %250, i64 %50
  %254 = add nuw nsw i64 %49, 1
  %255 = icmp eq i64 %254, %47
  br i1 %255, label %256, label %48

256:                                              ; preds = %247
  %257 = and i64 %47, 1
  %258 = icmp eq i32 %26, 1
  br i1 %258, label %279, label %259

259:                                              ; preds = %256
  %260 = sub nsw i64 %47, %257
  br label %261

261:                                              ; preds = %804, %259
  %262 = phi i64 [ 0, %259 ], [ %806, %804 ]
  %263 = phi i32 [ 0, %259 ], [ %805, %804 ]
  %264 = phi i64 [ %260, %259 ], [ %807, %804 ]
  %265 = getelementptr inbounds [256 x i64], [256 x i64]* %6, i64 0, i64 %262
  %266 = load i64, i64* %265, align 16
  %267 = icmp sgt i64 %266, %253
  br i1 %267, label %273, label %268

268:                                              ; preds = %261
  %269 = trunc i64 %262 to i8
  %270 = add nsw i32 %263, 1
  %271 = sext i32 %263 to i64
  %272 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 %271
  store i8 %269, i8* %272, align 1
  br label %273

273:                                              ; preds = %268, %261
  %274 = phi i32 [ %270, %268 ], [ %263, %261 ]
  %275 = or i64 %262, 1
  %276 = getelementptr inbounds [256 x i64], [256 x i64]* %6, i64 0, i64 %275
  %277 = load i64, i64* %276, align 8
  %278 = icmp sgt i64 %277, %253
  br i1 %278, label %804, label %799

279:                                              ; preds = %804, %256
  %280 = phi i32 [ undef, %256 ], [ %805, %804 ]
  %281 = phi i64 [ 0, %256 ], [ %806, %804 ]
  %282 = phi i32 [ 0, %256 ], [ %805, %804 ]
  %283 = icmp eq i64 %257, 0
  br i1 %283, label %293, label %284

284:                                              ; preds = %279
  %285 = getelementptr inbounds [256 x i64], [256 x i64]* %6, i64 0, i64 %281
  %286 = load i64, i64* %285, align 8
  %287 = icmp sgt i64 %286, %253
  br i1 %287, label %293, label %288

288:                                              ; preds = %284
  %289 = trunc i64 %281 to i8
  %290 = add nsw i32 %282, 1
  %291 = sext i32 %282 to i64
  %292 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 %291
  store i8 %289, i8* %292, align 1
  br label %293

293:                                              ; preds = %279, %284, %288, %4
  %294 = phi i32 [ 0, %4 ], [ %280, %279 ], [ %290, %288 ], [ %282, %284 ]
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %27) #5
  %295 = bitcast [128 x i64]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %295) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %295, i8 -86, i64 1024, i1 false) #5
  %296 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 0
  %297 = bitcast [128 x i64]* %5 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %297, align 16
  %298 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 2
  %299 = bitcast i64* %298 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %299, align 16
  %300 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 4
  %301 = bitcast i64* %300 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %301, align 16
  %302 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 6
  %303 = bitcast i64* %302 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %303, align 16
  %304 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 8
  %305 = bitcast i64* %304 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %305, align 16
  %306 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 10
  %307 = bitcast i64* %306 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %307, align 16
  %308 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 12
  %309 = bitcast i64* %308 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %309, align 16
  %310 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 14
  %311 = bitcast i64* %310 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %311, align 16
  %312 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 16
  %313 = bitcast i64* %312 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %313, align 16
  %314 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 18
  %315 = bitcast i64* %314 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %315, align 16
  %316 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 20
  %317 = bitcast i64* %316 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %317, align 16
  %318 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 22
  %319 = bitcast i64* %318 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %319, align 16
  %320 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 24
  %321 = bitcast i64* %320 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %321, align 16
  %322 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 26
  %323 = bitcast i64* %322 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %323, align 16
  %324 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 28
  %325 = bitcast i64* %324 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %325, align 16
  %326 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 30
  %327 = bitcast i64* %326 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %327, align 16
  %328 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 32
  %329 = bitcast i64* %328 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %329, align 16
  %330 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 34
  %331 = bitcast i64* %330 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %331, align 16
  %332 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 36
  %333 = bitcast i64* %332 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %333, align 16
  %334 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 38
  %335 = bitcast i64* %334 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %335, align 16
  %336 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 40
  %337 = bitcast i64* %336 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %337, align 16
  %338 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 42
  %339 = bitcast i64* %338 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %339, align 16
  %340 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 44
  %341 = bitcast i64* %340 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %341, align 16
  %342 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 46
  %343 = bitcast i64* %342 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %343, align 16
  %344 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 48
  %345 = bitcast i64* %344 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %345, align 16
  %346 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 50
  %347 = bitcast i64* %346 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %347, align 16
  %348 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 52
  %349 = bitcast i64* %348 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %349, align 16
  %350 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 54
  %351 = bitcast i64* %350 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %351, align 16
  %352 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 56
  %353 = bitcast i64* %352 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %353, align 16
  %354 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 58
  %355 = bitcast i64* %354 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %355, align 16
  %356 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 60
  %357 = bitcast i64* %356 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %357, align 16
  %358 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 62
  %359 = bitcast i64* %358 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %359, align 16
  %360 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 64
  %361 = bitcast i64* %360 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %361, align 16
  %362 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 66
  %363 = bitcast i64* %362 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %363, align 16
  %364 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 68
  %365 = bitcast i64* %364 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %365, align 16
  %366 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 70
  %367 = bitcast i64* %366 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %367, align 16
  %368 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 72
  %369 = bitcast i64* %368 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %369, align 16
  %370 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 74
  %371 = bitcast i64* %370 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %371, align 16
  %372 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 76
  %373 = bitcast i64* %372 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %373, align 16
  %374 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 78
  %375 = bitcast i64* %374 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %375, align 16
  %376 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 80
  %377 = bitcast i64* %376 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %377, align 16
  %378 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 82
  %379 = bitcast i64* %378 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %379, align 16
  %380 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 84
  %381 = bitcast i64* %380 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %381, align 16
  %382 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 86
  %383 = bitcast i64* %382 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %383, align 16
  %384 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 88
  %385 = bitcast i64* %384 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %385, align 16
  %386 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 90
  %387 = bitcast i64* %386 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %387, align 16
  %388 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 92
  %389 = bitcast i64* %388 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %389, align 16
  %390 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 94
  %391 = bitcast i64* %390 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %391, align 16
  %392 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 96
  %393 = bitcast i64* %392 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %393, align 16
  %394 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 98
  %395 = bitcast i64* %394 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %395, align 16
  %396 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 100
  %397 = bitcast i64* %396 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %397, align 16
  %398 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 102
  %399 = bitcast i64* %398 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %399, align 16
  %400 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 104
  %401 = bitcast i64* %400 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %401, align 16
  %402 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 106
  %403 = bitcast i64* %402 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %403, align 16
  %404 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 108
  %405 = bitcast i64* %404 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %405, align 16
  %406 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 110
  %407 = bitcast i64* %406 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %407, align 16
  %408 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 112
  %409 = bitcast i64* %408 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %409, align 16
  %410 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 114
  %411 = bitcast i64* %410 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %411, align 16
  %412 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 116
  %413 = bitcast i64* %412 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %413, align 16
  %414 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 118
  %415 = bitcast i64* %414 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %415, align 16
  %416 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 120
  %417 = bitcast i64* %416 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %417, align 16
  %418 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 122
  %419 = bitcast i64* %418 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %419, align 16
  %420 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 124
  %421 = bitcast i64* %420 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %421, align 16
  %422 = getelementptr inbounds [128 x i64], [128 x i64]* %5, i64 0, i64 126
  %423 = bitcast i64* %422 to <2 x i64>*
  store <2 x i64> <i64 2147483647, i64 2147483647>, <2 x i64>* %423, align 16
  %424 = icmp sgt i32 %294, 0
  br i1 %424, label %425, label %609

425:                                              ; preds = %293
  %426 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 33
  %427 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 11
  %428 = zext i32 %294 to i64
  %429 = load i32, i32* %427, align 8
  %430 = zext i32 %429 to i64
  %431 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_red, i64 0, i64 %430
  %432 = load i32, i32* %431, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %433
  %435 = load i32, i32* %434, align 4
  br label %436

436:                                              ; preds = %554, %425
  %437 = phi i32 [ %429, %425 ], [ %593, %554 ]
  %438 = phi i32 [ %435, %425 ], [ %547, %554 ]
  %439 = phi i64 [ 0, %425 ], [ %555, %554 ]
  %440 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 %439
  %441 = load i8, i8* %440, align 1
  %442 = load i8**, i8*** %426, align 8
  %443 = load i8*, i8** %442, align 8
  %444 = zext i8 %441 to i64
  %445 = getelementptr inbounds i8, i8* %443, i64 %444
  %446 = load i8, i8* %445, align 1
  %447 = zext i8 %446 to i32
  %448 = sub nsw i32 %20, %447
  %449 = zext i32 %437 to i64
  %450 = mul nsw i32 %448, %438
  %451 = sext i32 %450 to i64
  %452 = mul nsw i64 %451, %451
  %453 = getelementptr inbounds i8*, i8** %442, i64 1
  %454 = load i8*, i8** %453, align 8
  %455 = getelementptr inbounds i8, i8* %454, i64 %444
  %456 = load i8, i8* %455, align 1
  %457 = zext i8 %456 to i32
  %458 = sub nsw i32 %22, %457
  %459 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_green, i64 0, i64 %449
  %460 = load i32, i32* %459, align 4
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %461
  %463 = load i32, i32* %462, align 4
  %464 = mul nsw i32 %458, %463
  %465 = sext i32 %464 to i64
  %466 = mul nsw i64 %465, %465
  %467 = add nuw nsw i64 %466, %452
  %468 = getelementptr inbounds i8*, i8** %442, i64 2
  %469 = load i8*, i8** %468, align 8
  %470 = getelementptr inbounds i8, i8* %469, i64 %444
  %471 = load i8, i8* %470, align 1
  %472 = zext i8 %471 to i32
  %473 = sub nsw i32 %24, %472
  %474 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_blue, i64 0, i64 %449
  %475 = load i32, i32* %474, align 4
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %476
  %478 = load i32, i32* %477, align 4
  %479 = mul nsw i32 %473, %478
  %480 = sext i32 %479 to i64
  %481 = mul nsw i64 %480, %480
  %482 = add nuw nsw i64 %467, %481
  %483 = shl nsw i32 %438, 3
  %484 = shl nsw i32 %438, 4
  %485 = sext i32 %484 to i64
  %486 = mul nsw i64 %451, %485
  %487 = mul nsw i32 %483, %483
  %488 = zext i32 %487 to i64
  %489 = add nsw i64 %486, %488
  %490 = shl nsw i32 %463, 2
  %491 = shl nsw i32 %463, 3
  %492 = sext i32 %491 to i64
  %493 = mul nsw i64 %465, %492
  %494 = mul nsw i32 %490, %490
  %495 = zext i32 %494 to i64
  %496 = add nsw i64 %493, %495
  %497 = shl nsw i32 %478, 3
  %498 = shl nsw i32 %478, 4
  %499 = sext i32 %498 to i64
  %500 = mul nsw i64 %480, %499
  %501 = mul nsw i32 %497, %497
  %502 = zext i32 %501 to i64
  %503 = add nsw i64 %500, %502
  br label %504

504:                                              ; preds = %540, %436
  %505 = phi i32 [ %437, %436 ], [ %593, %540 ]
  %506 = phi i64 [ %489, %436 ], [ %551, %540 ]
  %507 = phi i64 [ %482, %436 ], [ %541, %540 ]
  %508 = phi i8* [ %15, %436 ], [ %596, %540 ]
  %509 = phi i64* [ %296, %436 ], [ %595, %540 ]
  %510 = phi i32 [ 3, %436 ], [ %552, %540 ]
  br label %511

511:                                              ; preds = %591, %504
  %512 = phi i32 [ %505, %504 ], [ %593, %591 ]
  %513 = phi i32 [ %505, %504 ], [ %592, %591 ]
  %514 = phi i64 [ %496, %504 ], [ %606, %591 ]
  %515 = phi i64 [ %507, %504 ], [ %597, %591 ]
  %516 = phi i8* [ %508, %504 ], [ %596, %591 ]
  %517 = phi i64* [ %509, %504 ], [ %595, %591 ]
  %518 = phi i32 [ 7, %504 ], [ %607, %591 ]
  %519 = load i64, i64* %517, align 8
  %520 = icmp slt i64 %515, %519
  br i1 %520, label %521, label %523

521:                                              ; preds = %511
  store i64 %515, i64* %517, align 8
  store i8 %441, i8* %516, align 1
  %522 = load i32, i32* %427, align 8
  br label %523

523:                                              ; preds = %521, %511
  %524 = phi i32 [ %522, %521 ], [ %512, %511 ]
  %525 = phi i32 [ %522, %521 ], [ %513, %511 ]
  %526 = add nsw i64 %515, %503
  %527 = zext i32 %525 to i64
  %528 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_blue, i64 0, i64 %527
  %529 = load i32, i32* %528, align 4
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %530
  %532 = load i32, i32* %531, align 4
  %533 = shl i32 %532, 7
  %534 = mul i32 %533, %532
  %535 = sext i32 %534 to i64
  %536 = add nsw i64 %503, %535
  %537 = getelementptr inbounds i64, i64* %517, i64 1
  %538 = load i64, i64* %537, align 8
  %539 = icmp slt i64 %526, %538
  br i1 %539, label %557, label %569

540:                                              ; preds = %591
  %541 = add nsw i64 %507, %506
  %542 = zext i32 %593 to i64
  %543 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_red, i64 0, i64 %542
  %544 = load i32, i32* %543, align 4
  %545 = sext i32 %544 to i64
  %546 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %545
  %547 = load i32, i32* %546, align 4
  %548 = shl i32 %547, 7
  %549 = mul i32 %548, %547
  %550 = sext i32 %549 to i64
  %551 = add nsw i64 %506, %550
  %552 = add nsw i32 %510, -1
  %553 = icmp eq i32 %510, 0
  br i1 %553, label %554, label %504

554:                                              ; preds = %540
  %555 = add nuw nsw i64 %439, 1
  %556 = icmp eq i64 %555, %428
  br i1 %556, label %609, label %436

557:                                              ; preds = %523
  %558 = getelementptr inbounds i8, i8* %516, i64 1
  store i64 %526, i64* %537, align 8
  store i8 %441, i8* %558, align 1
  %559 = load i32, i32* %427, align 8
  %560 = zext i32 %559 to i64
  %561 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_blue, i64 0, i64 %560
  %562 = load i32, i32* %561, align 4
  %563 = sext i32 %562 to i64
  %564 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %563
  %565 = load i32, i32* %564, align 4
  %566 = shl i32 %565, 7
  %567 = mul i32 %566, %565
  %568 = sext i32 %567 to i64
  br label %569

569:                                              ; preds = %557, %523
  %570 = phi i64 [ %568, %557 ], [ %535, %523 ]
  %571 = phi i32 [ %559, %557 ], [ %524, %523 ]
  %572 = phi i32 [ %559, %557 ], [ %525, %523 ]
  %573 = add nsw i64 %536, %526
  %574 = getelementptr inbounds i64, i64* %517, i64 2
  %575 = load i64, i64* %574, align 8
  %576 = icmp slt i64 %573, %575
  br i1 %576, label %577, label %580

577:                                              ; preds = %569
  %578 = getelementptr inbounds i8, i8* %516, i64 2
  store i64 %573, i64* %574, align 8
  store i8 %441, i8* %578, align 1
  %579 = load i32, i32* %427, align 8
  br label %580

580:                                              ; preds = %577, %569
  %581 = phi i32 [ %579, %577 ], [ %571, %569 ]
  %582 = phi i32 [ %579, %577 ], [ %572, %569 ]
  %583 = add i64 %573, %536
  %584 = add i64 %583, %570
  %585 = getelementptr inbounds i64, i64* %517, i64 3
  %586 = load i64, i64* %585, align 8
  %587 = icmp slt i64 %584, %586
  br i1 %587, label %588, label %591

588:                                              ; preds = %580
  %589 = getelementptr inbounds i8, i8* %516, i64 3
  store i64 %584, i64* %585, align 8
  store i8 %441, i8* %589, align 1
  %590 = load i32, i32* %427, align 8
  br label %591

591:                                              ; preds = %588, %580
  %592 = phi i32 [ %590, %588 ], [ %582, %580 ]
  %593 = phi i32 [ %590, %588 ], [ %581, %580 ]
  %594 = zext i32 %592 to i64
  %595 = getelementptr inbounds i64, i64* %517, i64 4
  %596 = getelementptr inbounds i8, i8* %516, i64 4
  %597 = add nsw i64 %515, %514
  %598 = getelementptr inbounds [17 x i32], [17 x i32]* @rgb_green, i64 0, i64 %594
  %599 = load i32, i32* %598, align 4
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds [3 x i32], [3 x i32]* @c_scales, i64 0, i64 %600
  %602 = load i32, i32* %601, align 4
  %603 = shl i32 %602, 5
  %604 = mul i32 %603, %602
  %605 = sext i32 %604 to i64
  %606 = add nsw i64 %514, %605
  %607 = add nsw i32 %518, -1
  %608 = icmp eq i32 %518, 0
  br i1 %608, label %540, label %511

609:                                              ; preds = %554, %293
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %295) #5
  %610 = and i32 %1, -4
  %611 = and i32 %2, -8
  %612 = and i32 %3, -4
  %613 = sext i32 %612 to i64
  %614 = sext i32 %611 to i64
  %615 = sext i32 %610 to i64
  %616 = or i64 %614, 1
  %617 = or i64 %614, 2
  %618 = or i64 %614, 3
  %619 = or i64 %614, 4
  %620 = or i64 %614, 5
  %621 = or i64 %614, 6
  %622 = or i64 %614, 7
  br label %623

623:                                              ; preds = %623, %609
  %624 = phi i64 [ 0, %609 ], [ %796, %623 ]
  %625 = phi i8* [ %15, %609 ], [ %792, %623 ]
  %626 = add nuw nsw i64 %624, %615
  %627 = getelementptr inbounds [32 x i16]*, [32 x i16]** %13, i64 %626
  %628 = load [32 x i16]*, [32 x i16]** %627, align 8
  %629 = getelementptr inbounds [32 x i16], [32 x i16]* %628, i64 %614, i64 %613
  %630 = getelementptr inbounds i8, i8* %625, i64 1
  %631 = load i8, i8* %625, align 1
  %632 = zext i8 %631 to i16
  %633 = add nuw nsw i16 %632, 1
  %634 = getelementptr inbounds i16, i16* %629, i64 1
  store i16 %633, i16* %629, align 2
  %635 = getelementptr inbounds i8, i8* %625, i64 2
  %636 = load i8, i8* %630, align 1
  %637 = zext i8 %636 to i16
  %638 = add nuw nsw i16 %637, 1
  %639 = getelementptr inbounds i16, i16* %629, i64 2
  store i16 %638, i16* %634, align 2
  %640 = getelementptr inbounds i8, i8* %625, i64 3
  %641 = load i8, i8* %635, align 1
  %642 = zext i8 %641 to i16
  %643 = add nuw nsw i16 %642, 1
  %644 = getelementptr inbounds i16, i16* %629, i64 3
  store i16 %643, i16* %639, align 2
  %645 = getelementptr inbounds i8, i8* %625, i64 4
  %646 = load i8, i8* %640, align 1
  %647 = zext i8 %646 to i16
  %648 = add nuw nsw i16 %647, 1
  store i16 %648, i16* %644, align 2
  %649 = load [32 x i16]*, [32 x i16]** %627, align 8
  %650 = getelementptr inbounds [32 x i16], [32 x i16]* %649, i64 %616, i64 %613
  %651 = getelementptr inbounds i8, i8* %625, i64 5
  %652 = load i8, i8* %645, align 1
  %653 = zext i8 %652 to i16
  %654 = add nuw nsw i16 %653, 1
  %655 = getelementptr inbounds i16, i16* %650, i64 1
  store i16 %654, i16* %650, align 2
  %656 = getelementptr inbounds i8, i8* %625, i64 6
  %657 = load i8, i8* %651, align 1
  %658 = zext i8 %657 to i16
  %659 = add nuw nsw i16 %658, 1
  %660 = getelementptr inbounds i16, i16* %650, i64 2
  store i16 %659, i16* %655, align 2
  %661 = getelementptr inbounds i8, i8* %625, i64 7
  %662 = load i8, i8* %656, align 1
  %663 = zext i8 %662 to i16
  %664 = add nuw nsw i16 %663, 1
  %665 = getelementptr inbounds i16, i16* %650, i64 3
  store i16 %664, i16* %660, align 2
  %666 = getelementptr inbounds i8, i8* %625, i64 8
  %667 = load i8, i8* %661, align 1
  %668 = zext i8 %667 to i16
  %669 = add nuw nsw i16 %668, 1
  store i16 %669, i16* %665, align 2
  %670 = load [32 x i16]*, [32 x i16]** %627, align 8
  %671 = getelementptr inbounds [32 x i16], [32 x i16]* %670, i64 %617, i64 %613
  %672 = getelementptr inbounds i8, i8* %625, i64 9
  %673 = load i8, i8* %666, align 1
  %674 = zext i8 %673 to i16
  %675 = add nuw nsw i16 %674, 1
  %676 = getelementptr inbounds i16, i16* %671, i64 1
  store i16 %675, i16* %671, align 2
  %677 = getelementptr inbounds i8, i8* %625, i64 10
  %678 = load i8, i8* %672, align 1
  %679 = zext i8 %678 to i16
  %680 = add nuw nsw i16 %679, 1
  %681 = getelementptr inbounds i16, i16* %671, i64 2
  store i16 %680, i16* %676, align 2
  %682 = getelementptr inbounds i8, i8* %625, i64 11
  %683 = load i8, i8* %677, align 1
  %684 = zext i8 %683 to i16
  %685 = add nuw nsw i16 %684, 1
  %686 = getelementptr inbounds i16, i16* %671, i64 3
  store i16 %685, i16* %681, align 2
  %687 = getelementptr inbounds i8, i8* %625, i64 12
  %688 = load i8, i8* %682, align 1
  %689 = zext i8 %688 to i16
  %690 = add nuw nsw i16 %689, 1
  store i16 %690, i16* %686, align 2
  %691 = load [32 x i16]*, [32 x i16]** %627, align 8
  %692 = getelementptr inbounds [32 x i16], [32 x i16]* %691, i64 %618, i64 %613
  %693 = getelementptr inbounds i8, i8* %625, i64 13
  %694 = load i8, i8* %687, align 1
  %695 = zext i8 %694 to i16
  %696 = add nuw nsw i16 %695, 1
  %697 = getelementptr inbounds i16, i16* %692, i64 1
  store i16 %696, i16* %692, align 2
  %698 = getelementptr inbounds i8, i8* %625, i64 14
  %699 = load i8, i8* %693, align 1
  %700 = zext i8 %699 to i16
  %701 = add nuw nsw i16 %700, 1
  %702 = getelementptr inbounds i16, i16* %692, i64 2
  store i16 %701, i16* %697, align 2
  %703 = getelementptr inbounds i8, i8* %625, i64 15
  %704 = load i8, i8* %698, align 1
  %705 = zext i8 %704 to i16
  %706 = add nuw nsw i16 %705, 1
  %707 = getelementptr inbounds i16, i16* %692, i64 3
  store i16 %706, i16* %702, align 2
  %708 = getelementptr inbounds i8, i8* %625, i64 16
  %709 = load i8, i8* %703, align 1
  %710 = zext i8 %709 to i16
  %711 = add nuw nsw i16 %710, 1
  store i16 %711, i16* %707, align 2
  %712 = load [32 x i16]*, [32 x i16]** %627, align 8
  %713 = getelementptr inbounds [32 x i16], [32 x i16]* %712, i64 %619, i64 %613
  %714 = getelementptr inbounds i8, i8* %625, i64 17
  %715 = load i8, i8* %708, align 1
  %716 = zext i8 %715 to i16
  %717 = add nuw nsw i16 %716, 1
  %718 = getelementptr inbounds i16, i16* %713, i64 1
  store i16 %717, i16* %713, align 2
  %719 = getelementptr inbounds i8, i8* %625, i64 18
  %720 = load i8, i8* %714, align 1
  %721 = zext i8 %720 to i16
  %722 = add nuw nsw i16 %721, 1
  %723 = getelementptr inbounds i16, i16* %713, i64 2
  store i16 %722, i16* %718, align 2
  %724 = getelementptr inbounds i8, i8* %625, i64 19
  %725 = load i8, i8* %719, align 1
  %726 = zext i8 %725 to i16
  %727 = add nuw nsw i16 %726, 1
  %728 = getelementptr inbounds i16, i16* %713, i64 3
  store i16 %727, i16* %723, align 2
  %729 = getelementptr inbounds i8, i8* %625, i64 20
  %730 = load i8, i8* %724, align 1
  %731 = zext i8 %730 to i16
  %732 = add nuw nsw i16 %731, 1
  store i16 %732, i16* %728, align 2
  %733 = load [32 x i16]*, [32 x i16]** %627, align 8
  %734 = getelementptr inbounds [32 x i16], [32 x i16]* %733, i64 %620, i64 %613
  %735 = getelementptr inbounds i8, i8* %625, i64 21
  %736 = load i8, i8* %729, align 1
  %737 = zext i8 %736 to i16
  %738 = add nuw nsw i16 %737, 1
  %739 = getelementptr inbounds i16, i16* %734, i64 1
  store i16 %738, i16* %734, align 2
  %740 = getelementptr inbounds i8, i8* %625, i64 22
  %741 = load i8, i8* %735, align 1
  %742 = zext i8 %741 to i16
  %743 = add nuw nsw i16 %742, 1
  %744 = getelementptr inbounds i16, i16* %734, i64 2
  store i16 %743, i16* %739, align 2
  %745 = getelementptr inbounds i8, i8* %625, i64 23
  %746 = load i8, i8* %740, align 1
  %747 = zext i8 %746 to i16
  %748 = add nuw nsw i16 %747, 1
  %749 = getelementptr inbounds i16, i16* %734, i64 3
  store i16 %748, i16* %744, align 2
  %750 = getelementptr inbounds i8, i8* %625, i64 24
  %751 = load i8, i8* %745, align 1
  %752 = zext i8 %751 to i16
  %753 = add nuw nsw i16 %752, 1
  store i16 %753, i16* %749, align 2
  %754 = load [32 x i16]*, [32 x i16]** %627, align 8
  %755 = getelementptr inbounds [32 x i16], [32 x i16]* %754, i64 %621, i64 %613
  %756 = getelementptr inbounds i8, i8* %625, i64 25
  %757 = load i8, i8* %750, align 1
  %758 = zext i8 %757 to i16
  %759 = add nuw nsw i16 %758, 1
  %760 = getelementptr inbounds i16, i16* %755, i64 1
  store i16 %759, i16* %755, align 2
  %761 = getelementptr inbounds i8, i8* %625, i64 26
  %762 = load i8, i8* %756, align 1
  %763 = zext i8 %762 to i16
  %764 = add nuw nsw i16 %763, 1
  %765 = getelementptr inbounds i16, i16* %755, i64 2
  store i16 %764, i16* %760, align 2
  %766 = getelementptr inbounds i8, i8* %625, i64 27
  %767 = load i8, i8* %761, align 1
  %768 = zext i8 %767 to i16
  %769 = add nuw nsw i16 %768, 1
  %770 = getelementptr inbounds i16, i16* %755, i64 3
  store i16 %769, i16* %765, align 2
  %771 = getelementptr inbounds i8, i8* %625, i64 28
  %772 = load i8, i8* %766, align 1
  %773 = zext i8 %772 to i16
  %774 = add nuw nsw i16 %773, 1
  store i16 %774, i16* %770, align 2
  %775 = load [32 x i16]*, [32 x i16]** %627, align 8
  %776 = getelementptr inbounds [32 x i16], [32 x i16]* %775, i64 %622, i64 %613
  %777 = getelementptr inbounds i8, i8* %625, i64 29
  %778 = load i8, i8* %771, align 1
  %779 = zext i8 %778 to i16
  %780 = add nuw nsw i16 %779, 1
  %781 = getelementptr inbounds i16, i16* %776, i64 1
  store i16 %780, i16* %776, align 2
  %782 = getelementptr inbounds i8, i8* %625, i64 30
  %783 = load i8, i8* %777, align 1
  %784 = zext i8 %783 to i16
  %785 = add nuw nsw i16 %784, 1
  %786 = getelementptr inbounds i16, i16* %776, i64 2
  store i16 %785, i16* %781, align 2
  %787 = getelementptr inbounds i8, i8* %625, i64 31
  %788 = load i8, i8* %782, align 1
  %789 = zext i8 %788 to i16
  %790 = add nuw nsw i16 %789, 1
  %791 = getelementptr inbounds i16, i16* %776, i64 3
  store i16 %790, i16* %786, align 2
  %792 = getelementptr inbounds i8, i8* %625, i64 32
  %793 = load i8, i8* %787, align 1
  %794 = zext i8 %793 to i16
  %795 = add nuw nsw i16 %794, 1
  store i16 %795, i16* %791, align 2
  %796 = add nuw nsw i64 %624, 1
  %797 = icmp eq i64 %796, 4
  br i1 %797, label %798, label %623

798:                                              ; preds = %623
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %15) #5
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %14) #5
  ret void

799:                                              ; preds = %273
  %800 = trunc i64 %275 to i8
  %801 = add nsw i32 %274, 1
  %802 = sext i32 %274 to i64
  %803 = getelementptr inbounds [256 x i8], [256 x i8]* %7, i64 0, i64 %802
  store i8 %800, i8* %803, align 1
  br label %804

804:                                              ; preds = %799, %273
  %805 = phi i32 [ %801, %799 ], [ %274, %273 ]
  %806 = add nuw nsw i64 %262, 2
  %807 = add i64 %264, -2
  %808 = icmp eq i64 %807, 0
  br i1 %808, label %279, label %261
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
