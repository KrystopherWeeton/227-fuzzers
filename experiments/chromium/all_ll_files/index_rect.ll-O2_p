; ModuleID = '../../cc/base/index_rect.cc'
source_filename = "../../cc/base/index_rect.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.cc::IndexRect" = type { i32, i32, i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }

@.str = private unnamed_addr constant [12 x i8] c"%d,%d,%d,%d\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc9IndexRect7ClampToERKS0_(%"class.cc::IndexRect"* nocapture, %"class.cc::IndexRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = load i32, i32* %3, align 4
  %7 = icmp slt i32 %6, %5
  %8 = select i1 %7, i32 %5, i32 %6
  store i32 %8, i32* %3, align 4
  %9 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %1, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = load i32, i32* %9, align 4
  %13 = icmp slt i32 %12, %11
  %14 = select i1 %13, i32 %11, i32 %12
  store i32 %14, i32* %9, align 4
  %15 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %0, i64 0, i32 1
  %16 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %1, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = load i32, i32* %15, align 4
  %19 = icmp slt i32 %17, %18
  %20 = select i1 %19, i32 %17, i32 %18
  store i32 %20, i32* %15, align 4
  %21 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %0, i64 0, i32 3
  %22 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %1, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = load i32, i32* %21, align 4
  %25 = icmp slt i32 %23, %24
  %26 = select i1 %25, i32 %23, i32 %24
  store i32 %26, i32* %21, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc9IndexRect8ContainsEii(%"class.cc::IndexRect"* nocapture readonly, i32, i32) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, %1
  br i1 %6, label %19, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, %1
  br i1 %10, label %19, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp sgt i32 %13, %2
  br i1 %14, label %19, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %0, i64 0, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = icmp sge i32 %17, %2
  br label %19

19:                                               ; preds = %11, %7, %3, %15
  %20 = phi i1 [ false, %11 ], [ false, %7 ], [ false, %3 ], [ %18, %15 ]
  ret i1 %20
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2cc9IndexRect8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.cc::IndexRect"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.cc::IndexRect", %"class.cc::IndexRect"* %1, i64 0, i32 3
  %10 = load i32, i32* %9, align 4
  tail call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 %4, i32 %6, i32 %8, i32 %10) #3
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
