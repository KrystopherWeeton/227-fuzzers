; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_loopfilter_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_loopfilter_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_horizontal_16_sse2(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = icmp eq i32 %5, 8
  br i1 %7, label %8, label %21

8:                                                ; preds = %6
  %9 = bitcast i8* %2 to <16 x i8>*
  %10 = load <16 x i8>, <16 x i8>* %9, align 16
  %11 = shufflevector <16 x i8> %10, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %12 = bitcast <16 x i8> %11 to <2 x i64>
  %13 = bitcast i8* %3 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 16
  %15 = shufflevector <16 x i8> %14, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %16 = bitcast <16 x i8> %15 to <2 x i64>
  %17 = bitcast i8* %4 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 16
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = bitcast <16 x i8> %19 to <2 x i64>
  br label %57

21:                                               ; preds = %6
  %22 = icmp eq i32 %5, 10
  %23 = bitcast i8* %2 to <16 x i8>*
  %24 = load <16 x i8>, <16 x i8>* %23, align 16
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %26 = bitcast <16 x i8> %25 to <8 x i16>
  br i1 %22, label %27, label %42

27:                                               ; preds = %21
  %28 = shl <8 x i16> %26, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29 = bitcast <8 x i16> %28 to <2 x i64>
  %30 = bitcast i8* %3 to <16 x i8>*
  %31 = load <16 x i8>, <16 x i8>* %30, align 16
  %32 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = bitcast <16 x i8> %32 to <8 x i16>
  %34 = shl <8 x i16> %33, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %35 = bitcast <8 x i16> %34 to <2 x i64>
  %36 = bitcast i8* %4 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 16
  %38 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %39 = bitcast <16 x i8> %38 to <8 x i16>
  %40 = shl <8 x i16> %39, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %41 = bitcast <8 x i16> %40 to <2 x i64>
  br label %57

42:                                               ; preds = %21
  %43 = shl <8 x i16> %26, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %44 = bitcast <8 x i16> %43 to <2 x i64>
  %45 = bitcast i8* %3 to <16 x i8>*
  %46 = load <16 x i8>, <16 x i8>* %45, align 16
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %48 = bitcast <16 x i8> %47 to <8 x i16>
  %49 = shl <8 x i16> %48, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %50 = bitcast <8 x i16> %49 to <2 x i64>
  %51 = bitcast i8* %4 to <16 x i8>*
  %52 = load <16 x i8>, <16 x i8>* %51, align 16
  %53 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = bitcast <16 x i8> %53 to <8 x i16>
  %55 = shl <8 x i16> %54, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %56 = bitcast <8 x i16> %55 to <2 x i64>
  br label %57

57:                                               ; preds = %27, %42, %8
  %58 = phi <2 x i64> [ %12, %8 ], [ %29, %27 ], [ %44, %42 ]
  %59 = phi <2 x i64> [ %16, %8 ], [ %35, %27 ], [ %50, %42 ]
  %60 = phi <2 x i64> [ %20, %8 ], [ %41, %27 ], [ %56, %42 ]
  %61 = shl nsw i32 %1, 2
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i16, i16* %0, i64 %62
  %64 = bitcast i16* %63 to <2 x i64>*
  %65 = load <2 x i64>, <2 x i64>* %64, align 16
  %66 = mul nsw i32 %1, 5
  %67 = sext i32 %66 to i64
  %68 = sub nsw i64 0, %67
  %69 = getelementptr inbounds i16, i16* %0, i64 %68
  %70 = bitcast i16* %69 to <2 x i64>*
  %71 = load <2 x i64>, <2 x i64>* %70, align 16
  %72 = mul nsw i32 %1, 3
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i16, i16* %0, i64 %73
  %75 = bitcast i16* %74 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 16
  %77 = sub nsw i64 0, %62
  %78 = getelementptr inbounds i16, i16* %0, i64 %77
  %79 = bitcast i16* %78 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 16
  %81 = shl nsw i32 %1, 1
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i16, i16* %0, i64 %82
  %84 = bitcast i16* %83 to <2 x i64>*
  %85 = load <2 x i64>, <2 x i64>* %84, align 16
  %86 = sub nsw i64 0, %73
  %87 = getelementptr inbounds i16, i16* %0, i64 %86
  %88 = bitcast i16* %87 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 16
  %90 = sext i32 %1 to i64
  %91 = getelementptr inbounds i16, i16* %0, i64 %90
  %92 = bitcast i16* %91 to <2 x i64>*
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 16
  %95 = sub nsw i64 0, %82
  %96 = getelementptr inbounds i16, i16* %0, i64 %95
  %97 = bitcast i16* %96 to <2 x i64>*
  %98 = bitcast i16* %96 to <8 x i16>*
  %99 = load <8 x i16>, <8 x i16>* %98, align 16
  %100 = bitcast i16* %0 to <2 x i64>*
  %101 = bitcast i16* %0 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 16
  %103 = sub nsw i64 0, %90
  %104 = getelementptr inbounds i16, i16* %0, i64 %103
  %105 = bitcast i16* %104 to <2 x i64>*
  %106 = bitcast i16* %104 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 16
  %108 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %99, <8 x i16> %107) #6
  %109 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %107, <8 x i16> %99) #6
  %110 = or <8 x i16> %109, %108
  %111 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %94, <8 x i16> %102) #6
  %112 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %102, <8 x i16> %94) #6
  %113 = or <8 x i16> %112, %111
  %114 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %107, <8 x i16> %102) #6
  %115 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %102, <8 x i16> %107) #6
  %116 = or <8 x i16> %115, %114
  %117 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %99, <8 x i16> %94) #6
  %118 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %94, <8 x i16> %99) #6
  %119 = or <8 x i16> %118, %117
  %120 = icmp sgt <8 x i16> %110, %113
  %121 = select <8 x i1> %120, <8 x i16> %110, <8 x i16> %113
  %122 = bitcast <2 x i64> %60 to <8 x i16>
  %123 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %121, <8 x i16> %122) #6
  %124 = icmp eq <8 x i16> %123, zeroinitializer
  %125 = sext <8 x i1> %124 to <8 x i16>
  %126 = bitcast <8 x i16> %125 to <2 x i64>
  %127 = xor <2 x i64> %126, <i64 -1, i64 -1>
  %128 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %116, <8 x i16> %116) #6
  %129 = lshr <8 x i16> %119, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %130 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %128, <8 x i16> %129) #6
  %131 = bitcast <2 x i64> %58 to <8 x i16>
  %132 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %130, <8 x i16> %131) #6
  %133 = icmp eq <8 x i16> %132, zeroinitializer
  %134 = bitcast <2 x i64> %59 to <8 x i16>
  %135 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %134, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %136 = select <8 x i1> %133, <8 x i16> zeroinitializer, <8 x i16> %135
  %137 = icmp sgt <8 x i16> %121, %136
  %138 = select <8 x i1> %137, <8 x i16> %121, <8 x i16> %136
  %139 = bitcast <2 x i64> %89 to <8 x i16>
  %140 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %139, <8 x i16> %99) #6
  %141 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %99, <8 x i16> %139) #6
  %142 = or <8 x i16> %141, %140
  %143 = bitcast <2 x i64> %85 to <8 x i16>
  %144 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %143, <8 x i16> %94) #6
  %145 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %94, <8 x i16> %143) #6
  %146 = or <8 x i16> %145, %144
  %147 = icmp sgt <8 x i16> %142, %146
  %148 = select <8 x i1> %147, <8 x i16> %142, <8 x i16> %146
  %149 = icmp sgt <8 x i16> %148, %138
  %150 = select <8 x i1> %149, <8 x i16> %148, <8 x i16> %138
  %151 = bitcast <2 x i64> %80 to <8 x i16>
  %152 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %151, <8 x i16> %139) #6
  %153 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %139, <8 x i16> %151) #6
  %154 = or <8 x i16> %153, %152
  %155 = bitcast <2 x i64> %76 to <8 x i16>
  %156 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %155, <8 x i16> %143) #6
  %157 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %143, <8 x i16> %155) #6
  %158 = or <8 x i16> %157, %156
  %159 = icmp sgt <8 x i16> %154, %158
  %160 = select <8 x i1> %159, <8 x i16> %154, <8 x i16> %158
  %161 = icmp sgt <8 x i16> %160, %150
  %162 = select <8 x i1> %161, <8 x i16> %160, <8 x i16> %150
  %163 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %162, <8 x i16> %134) #6
  %164 = icmp eq <8 x i16> %163, zeroinitializer
  br i1 %7, label %165, label %171

165:                                              ; preds = %57
  %166 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %99, <8 x i16> <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>)
  %167 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %94, <8 x i16> <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>)
  %168 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %107, <8 x i16> <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>)
  %169 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %102, <8 x i16> <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>)
  %170 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %166, <8 x i16> %167) #6
  br label %185

171:                                              ; preds = %57
  %172 = icmp eq i32 %5, 10
  br i1 %172, label %173, label %179

173:                                              ; preds = %171
  %174 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %99, <8 x i16> <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>)
  %175 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %94, <8 x i16> <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>)
  %176 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %107, <8 x i16> <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>)
  %177 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %102, <8 x i16> <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>)
  %178 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %174, <8 x i16> %175) #6
  br label %185

179:                                              ; preds = %171
  %180 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %99, <8 x i16> <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>)
  %181 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %94, <8 x i16> <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>)
  %182 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %107, <8 x i16> <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>)
  %183 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %102, <8 x i16> <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>)
  %184 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %180, <8 x i16> %181) #6
  br label %185

185:                                              ; preds = %165, %173, %179
  %186 = phi <8 x i16> [ %178, %173 ], [ %184, %179 ], [ %170, %165 ]
  %187 = phi <8 x i16> [ %177, %173 ], [ %183, %179 ], [ %169, %165 ]
  %188 = phi <8 x i16> [ %176, %173 ], [ %182, %179 ], [ %168, %165 ]
  %189 = phi <8 x i16> [ %175, %173 ], [ %181, %179 ], [ %167, %165 ]
  %190 = phi <8 x i16> [ %174, %173 ], [ %180, %179 ], [ %166, %165 ]
  %191 = phi <8 x i16> [ <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, %173 ], [ <i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048>, %179 ], [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %165 ]
  %192 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %173 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %179 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %165 ]
  %193 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %173 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %179 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %165 ]
  %194 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %173 ], [ <i64 576188069258921983, i64 576188069258921983>, %179 ], [ <i64 35747867511423103, i64 35747867511423103>, %165 ]
  %195 = bitcast <8 x i16> %186 to <2 x i64>
  %196 = icmp slt <8 x i16> %193, %186
  %197 = sext <8 x i1> %196 to <8 x i16>
  %198 = bitcast <8 x i16> %197 to <2 x i64>
  %199 = icmp sgt <8 x i16> %192, %186
  %200 = or <8 x i1> %196, %199
  %201 = sext <8 x i1> %200 to <8 x i16>
  %202 = bitcast <8 x i16> %201 to <2 x i64>
  %203 = xor <2 x i64> %202, <i64 -1, i64 -1>
  %204 = and <2 x i64> %203, %195
  %205 = and <2 x i64> %194, %198
  %206 = select <8 x i1> %199, <8 x i16> %192, <8 x i16> zeroinitializer
  %207 = bitcast <8 x i16> %206 to <2 x i64>
  %208 = or <2 x i64> %205, %207
  %209 = or <2 x i64> %208, %204
  %210 = and <2 x i64> %209, %127
  %211 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %187, <8 x i16> %188) #6
  %212 = bitcast <2 x i64> %210 to <8 x i16>
  %213 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %212, <8 x i16> %211) #6
  %214 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %213, <8 x i16> %211) #6
  %215 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %214, <8 x i16> %211) #6
  %216 = bitcast <8 x i16> %215 to <2 x i64>
  switch i32 %5, label %218 [
    i32 8, label %219
    i32 10, label %217
  ]

217:                                              ; preds = %185
  br label %219

218:                                              ; preds = %185
  br label %219

219:                                              ; preds = %185, %217, %218
  %220 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %217 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %218 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %185 ]
  %221 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %217 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %218 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %185 ]
  %222 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %217 ], [ <i64 576188069258921983, i64 576188069258921983>, %218 ], [ <i64 35747867511423103, i64 35747867511423103>, %185 ]
  %223 = icmp slt <8 x i16> %221, %215
  %224 = sext <8 x i1> %223 to <8 x i16>
  %225 = bitcast <8 x i16> %224 to <2 x i64>
  %226 = icmp sgt <8 x i16> %220, %215
  %227 = or <8 x i1> %223, %226
  %228 = sext <8 x i1> %227 to <8 x i16>
  %229 = bitcast <8 x i16> %228 to <2 x i64>
  %230 = xor <2 x i64> %229, <i64 -1, i64 -1>
  %231 = and <2 x i64> %230, %216
  %232 = and <2 x i64> %222, %225
  %233 = select <8 x i1> %226, <8 x i16> %220, <8 x i16> zeroinitializer
  %234 = bitcast <8 x i16> %233 to <2 x i64>
  %235 = or <2 x i64> %232, %234
  %236 = or <2 x i64> %235, %231
  %237 = bitcast <2 x i64> %236 to <8 x i16>
  %238 = select <8 x i1> %164, <8 x i16> %237, <8 x i16> zeroinitializer
  %239 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %238, <8 x i16> <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>) #6
  %240 = bitcast <8 x i16> %239 to <2 x i64>
  switch i32 %5, label %242 [
    i32 8, label %243
    i32 10, label %241
  ]

241:                                              ; preds = %219
  br label %243

242:                                              ; preds = %219
  br label %243

243:                                              ; preds = %219, %241, %242
  %244 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %241 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %242 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %219 ]
  %245 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %241 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %242 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %219 ]
  %246 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %241 ], [ <i64 576188069258921983, i64 576188069258921983>, %242 ], [ <i64 35747867511423103, i64 35747867511423103>, %219 ]
  %247 = icmp slt <8 x i16> %245, %239
  %248 = sext <8 x i1> %247 to <8 x i16>
  %249 = bitcast <8 x i16> %248 to <2 x i64>
  %250 = icmp sgt <8 x i16> %244, %239
  %251 = or <8 x i1> %247, %250
  %252 = sext <8 x i1> %251 to <8 x i16>
  %253 = bitcast <8 x i16> %252 to <2 x i64>
  %254 = xor <2 x i64> %253, <i64 -1, i64 -1>
  %255 = and <2 x i64> %254, %240
  %256 = and <2 x i64> %246, %249
  %257 = select <8 x i1> %250, <8 x i16> %244, <8 x i16> zeroinitializer
  %258 = bitcast <8 x i16> %257 to <2 x i64>
  %259 = or <2 x i64> %256, %258
  %260 = or <2 x i64> %259, %255
  %261 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %238, <8 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>) #6
  %262 = bitcast <8 x i16> %261 to <2 x i64>
  switch i32 %5, label %264 [
    i32 8, label %265
    i32 10, label %263
  ]

263:                                              ; preds = %243
  br label %265

264:                                              ; preds = %243
  br label %265

265:                                              ; preds = %243, %263, %264
  %266 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %263 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %264 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %243 ]
  %267 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %263 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %264 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %243 ]
  %268 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %263 ], [ <i64 576188069258921983, i64 576188069258921983>, %264 ], [ <i64 35747867511423103, i64 35747867511423103>, %243 ]
  %269 = icmp slt <8 x i16> %267, %261
  %270 = sext <8 x i1> %269 to <8 x i16>
  %271 = bitcast <8 x i16> %270 to <2 x i64>
  %272 = icmp sgt <8 x i16> %266, %261
  %273 = or <8 x i1> %269, %272
  %274 = sext <8 x i1> %273 to <8 x i16>
  %275 = bitcast <8 x i16> %274 to <2 x i64>
  %276 = xor <2 x i64> %275, <i64 -1, i64 -1>
  %277 = and <2 x i64> %276, %262
  %278 = and <2 x i64> %268, %271
  %279 = select <8 x i1> %272, <8 x i16> %266, <8 x i16> zeroinitializer
  %280 = bitcast <8 x i16> %279 to <2 x i64>
  %281 = or <2 x i64> %278, %280
  %282 = or <2 x i64> %281, %277
  %283 = bitcast <2 x i64> %260 to <8 x i16>
  %284 = ashr <8 x i16> %283, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %285 = bitcast <2 x i64> %282 to <8 x i16>
  %286 = ashr <8 x i16> %285, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %287 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %187, <8 x i16> %284) #6
  %288 = bitcast <8 x i16> %287 to <2 x i64>
  switch i32 %5, label %290 [
    i32 8, label %291
    i32 10, label %289
  ]

289:                                              ; preds = %265
  br label %291

290:                                              ; preds = %265
  br label %291

291:                                              ; preds = %265, %289, %290
  %292 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %289 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %290 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %265 ]
  %293 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %289 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %290 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %265 ]
  %294 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %289 ], [ <i64 576188069258921983, i64 576188069258921983>, %290 ], [ <i64 35747867511423103, i64 35747867511423103>, %265 ]
  %295 = icmp slt <8 x i16> %293, %287
  %296 = sext <8 x i1> %295 to <8 x i16>
  %297 = bitcast <8 x i16> %296 to <2 x i64>
  %298 = icmp sgt <8 x i16> %292, %287
  %299 = or <8 x i1> %295, %298
  %300 = sext <8 x i1> %299 to <8 x i16>
  %301 = bitcast <8 x i16> %300 to <2 x i64>
  %302 = xor <2 x i64> %301, <i64 -1, i64 -1>
  %303 = and <2 x i64> %302, %288
  %304 = and <2 x i64> %294, %297
  %305 = select <8 x i1> %298, <8 x i16> %292, <8 x i16> zeroinitializer
  %306 = bitcast <8 x i16> %305 to <2 x i64>
  %307 = or <2 x i64> %304, %306
  %308 = or <2 x i64> %307, %303
  %309 = bitcast <2 x i64> %308 to <8 x i16>
  %310 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %309, <8 x i16> %191) #6
  %311 = bitcast <8 x i16> %310 to <2 x i64>
  %312 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %188, <8 x i16> %286) #6
  %313 = bitcast <8 x i16> %312 to <2 x i64>
  switch i32 %5, label %315 [
    i32 8, label %316
    i32 10, label %314
  ]

314:                                              ; preds = %291
  br label %316

315:                                              ; preds = %291
  br label %316

316:                                              ; preds = %291, %314, %315
  %317 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %314 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %315 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %291 ]
  %318 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %314 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %315 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %291 ]
  %319 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %314 ], [ <i64 576188069258921983, i64 576188069258921983>, %315 ], [ <i64 35747867511423103, i64 35747867511423103>, %291 ]
  %320 = icmp slt <8 x i16> %318, %312
  %321 = sext <8 x i1> %320 to <8 x i16>
  %322 = bitcast <8 x i16> %321 to <2 x i64>
  %323 = icmp sgt <8 x i16> %317, %312
  %324 = or <8 x i1> %320, %323
  %325 = sext <8 x i1> %324 to <8 x i16>
  %326 = bitcast <8 x i16> %325 to <2 x i64>
  %327 = xor <2 x i64> %326, <i64 -1, i64 -1>
  %328 = and <2 x i64> %327, %313
  %329 = and <2 x i64> %319, %322
  %330 = select <8 x i1> %323, <8 x i16> %317, <8 x i16> zeroinitializer
  %331 = bitcast <8 x i16> %330 to <2 x i64>
  %332 = or <2 x i64> %329, %331
  %333 = or <2 x i64> %332, %328
  %334 = bitcast <2 x i64> %333 to <8 x i16>
  %335 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %334, <8 x i16> %191) #6
  %336 = bitcast <8 x i16> %335 to <2 x i64>
  %337 = add nsw <8 x i16> %284, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %338 = ashr <8 x i16> %337, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %339 = and <8 x i16> %338, %125
  %340 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %189, <8 x i16> %339) #6
  %341 = bitcast <8 x i16> %340 to <2 x i64>
  switch i32 %5, label %343 [
    i32 8, label %344
    i32 10, label %342
  ]

342:                                              ; preds = %316
  br label %344

343:                                              ; preds = %316
  br label %344

344:                                              ; preds = %316, %342, %343
  %345 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %342 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %343 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %316 ]
  %346 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %342 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %343 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %316 ]
  %347 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %342 ], [ <i64 576188069258921983, i64 576188069258921983>, %343 ], [ <i64 35747867511423103, i64 35747867511423103>, %316 ]
  %348 = icmp slt <8 x i16> %346, %340
  %349 = sext <8 x i1> %348 to <8 x i16>
  %350 = bitcast <8 x i16> %349 to <2 x i64>
  %351 = icmp sgt <8 x i16> %345, %340
  %352 = or <8 x i1> %348, %351
  %353 = sext <8 x i1> %352 to <8 x i16>
  %354 = bitcast <8 x i16> %353 to <2 x i64>
  %355 = xor <2 x i64> %354, <i64 -1, i64 -1>
  %356 = and <2 x i64> %355, %341
  %357 = and <2 x i64> %347, %350
  %358 = select <8 x i1> %351, <8 x i16> %345, <8 x i16> zeroinitializer
  %359 = bitcast <8 x i16> %358 to <2 x i64>
  %360 = or <2 x i64> %357, %359
  %361 = or <2 x i64> %360, %356
  %362 = bitcast <2 x i64> %361 to <8 x i16>
  %363 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %362, <8 x i16> %191) #6
  %364 = bitcast <8 x i16> %363 to <2 x i64>
  %365 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %190, <8 x i16> %339) #6
  %366 = bitcast <8 x i16> %365 to <2 x i64>
  switch i32 %5, label %368 [
    i32 8, label %369
    i32 10, label %367
  ]

367:                                              ; preds = %344
  br label %369

368:                                              ; preds = %344
  br label %369

369:                                              ; preds = %344, %367, %368
  %370 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %367 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %368 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %344 ]
  %371 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %367 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %368 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %344 ]
  %372 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %367 ], [ <i64 576188069258921983, i64 576188069258921983>, %368 ], [ <i64 35747867511423103, i64 35747867511423103>, %344 ]
  %373 = icmp slt <8 x i16> %371, %365
  %374 = sext <8 x i1> %373 to <8 x i16>
  %375 = bitcast <8 x i16> %374 to <2 x i64>
  %376 = icmp sgt <8 x i16> %370, %365
  %377 = or <8 x i1> %373, %376
  %378 = sext <8 x i1> %377 to <8 x i16>
  %379 = bitcast <8 x i16> %378 to <2 x i64>
  %380 = xor <2 x i64> %379, <i64 -1, i64 -1>
  %381 = and <2 x i64> %380, %366
  %382 = and <2 x i64> %372, %375
  %383 = select <8 x i1> %376, <8 x i16> %370, <8 x i16> zeroinitializer
  %384 = bitcast <8 x i16> %383 to <2 x i64>
  %385 = or <2 x i64> %382, %384
  %386 = or <2 x i64> %385, %381
  %387 = bitcast <2 x i64> %386 to <8 x i16>
  %388 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %387, <8 x i16> %191) #6
  %389 = bitcast <8 x i16> %388 to <2 x i64>
  %390 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %139, <8 x i16> %107) #6
  %391 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %107, <8 x i16> %139) #6
  %392 = or <8 x i16> %391, %390
  %393 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %151, <8 x i16> %107) #6
  %394 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %107, <8 x i16> %151) #6
  %395 = or <8 x i16> %394, %393
  %396 = icmp sgt <8 x i16> %392, %395
  %397 = select <8 x i1> %396, <8 x i16> %392, <8 x i16> %395
  %398 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %143, <8 x i16> %102) #6
  %399 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %102, <8 x i16> %143) #6
  %400 = or <8 x i16> %399, %398
  %401 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %155, <8 x i16> %102) #6
  %402 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %102, <8 x i16> %155) #6
  %403 = or <8 x i16> %402, %401
  %404 = icmp sgt <8 x i16> %400, %403
  %405 = select <8 x i1> %404, <8 x i16> %400, <8 x i16> %403
  %406 = icmp sgt <8 x i16> %405, %397
  %407 = select <8 x i1> %406, <8 x i16> %405, <8 x i16> %397
  %408 = icmp sgt <8 x i16> %121, %407
  %409 = select <8 x i1> %408, <8 x i16> %121, <8 x i16> %407
  br i1 %7, label %410, label %412

410:                                              ; preds = %369
  %411 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %409, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  br label %418

412:                                              ; preds = %369
  %413 = icmp eq i32 %5, 10
  br i1 %413, label %414, label %416

414:                                              ; preds = %412
  %415 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %409, <8 x i16> <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>) #6
  br label %418

416:                                              ; preds = %412
  %417 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %409, <8 x i16> <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>) #6
  br label %418

418:                                              ; preds = %414, %416, %410
  %419 = phi <8 x i16> [ %411, %410 ], [ %415, %414 ], [ %417, %416 ]
  %420 = icmp eq <8 x i16> %419, zeroinitializer
  %421 = and <8 x i1> %420, %164
  %422 = sext <8 x i1> %421 to <8 x i16>
  %423 = bitcast <8 x i16> %422 to <2 x i64>
  %424 = mul nsw i32 %1, 6
  %425 = sext i32 %424 to i64
  %426 = sub nsw i64 0, %425
  %427 = getelementptr inbounds i16, i16* %0, i64 %426
  %428 = bitcast i16* %427 to <2 x i64>*
  %429 = load <2 x i64>, <2 x i64>* %428, align 16
  %430 = getelementptr inbounds i16, i16* %0, i64 %67
  %431 = bitcast i16* %430 to <2 x i64>*
  %432 = load <2 x i64>, <2 x i64>* %431, align 16
  %433 = mul nsw i32 %1, 7
  %434 = sext i32 %433 to i64
  %435 = sub nsw i64 0, %434
  %436 = getelementptr inbounds i16, i16* %0, i64 %435
  %437 = bitcast i16* %436 to <2 x i64>*
  %438 = load <2 x i64>, <2 x i64>* %437, align 16
  %439 = getelementptr inbounds i16, i16* %0, i64 %425
  %440 = bitcast i16* %439 to <2 x i64>*
  %441 = load <2 x i64>, <2 x i64>* %440, align 16
  %442 = shl nsw i32 %1, 3
  %443 = sext i32 %442 to i64
  %444 = sub nsw i64 0, %443
  %445 = getelementptr inbounds i16, i16* %0, i64 %444
  %446 = bitcast i16* %445 to <8 x i16>*
  %447 = load <8 x i16>, <8 x i16>* %446, align 16
  %448 = getelementptr inbounds i16, i16* %0, i64 %434
  %449 = bitcast i16* %448 to <8 x i16>*
  %450 = load <8 x i16>, <8 x i16>* %449, align 16
  %451 = bitcast <2 x i64> %71 to <8 x i16>
  %452 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %451, <8 x i16> %107) #6
  %453 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %107, <8 x i16> %451) #6
  %454 = or <8 x i16> %453, %452
  %455 = bitcast <2 x i64> %65 to <8 x i16>
  %456 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %455, <8 x i16> %102) #6
  %457 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %102, <8 x i16> %455) #6
  %458 = or <8 x i16> %457, %456
  %459 = icmp sgt <8 x i16> %454, %458
  %460 = select <8 x i1> %459, <8 x i16> %454, <8 x i16> %458
  %461 = bitcast <2 x i64> %429 to <8 x i16>
  %462 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %461, <8 x i16> %107) #6
  %463 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %107, <8 x i16> %461) #6
  %464 = or <8 x i16> %463, %462
  %465 = bitcast <2 x i64> %432 to <8 x i16>
  %466 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %465, <8 x i16> %102) #6
  %467 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %102, <8 x i16> %465) #6
  %468 = or <8 x i16> %467, %466
  %469 = icmp sgt <8 x i16> %464, %468
  %470 = select <8 x i1> %469, <8 x i16> %464, <8 x i16> %468
  %471 = icmp sgt <8 x i16> %470, %460
  %472 = select <8 x i1> %471, <8 x i16> %470, <8 x i16> %460
  %473 = bitcast <2 x i64> %438 to <8 x i16>
  %474 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %473, <8 x i16> %107) #6
  %475 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %107, <8 x i16> %473) #6
  %476 = or <8 x i16> %475, %474
  %477 = bitcast <2 x i64> %441 to <8 x i16>
  %478 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %477, <8 x i16> %102) #6
  %479 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %102, <8 x i16> %477) #6
  %480 = or <8 x i16> %479, %478
  %481 = icmp sgt <8 x i16> %476, %480
  %482 = select <8 x i1> %481, <8 x i16> %476, <8 x i16> %480
  %483 = icmp sgt <8 x i16> %482, %472
  %484 = select <8 x i1> %483, <8 x i16> %482, <8 x i16> %472
  %485 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %447, <8 x i16> %107) #6
  %486 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %107, <8 x i16> %447) #6
  %487 = or <8 x i16> %486, %485
  %488 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %450, <8 x i16> %102) #6
  %489 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %102, <8 x i16> %450) #6
  %490 = or <8 x i16> %489, %488
  %491 = icmp sgt <8 x i16> %487, %490
  %492 = select <8 x i1> %491, <8 x i16> %487, <8 x i16> %490
  %493 = icmp sgt <8 x i16> %492, %484
  %494 = select <8 x i1> %493, <8 x i16> %492, <8 x i16> %484
  br i1 %7, label %495, label %497

495:                                              ; preds = %418
  %496 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %494, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  br label %503

497:                                              ; preds = %418
  %498 = icmp eq i32 %5, 10
  br i1 %498, label %499, label %501

499:                                              ; preds = %497
  %500 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %494, <8 x i16> <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>) #6
  br label %503

501:                                              ; preds = %497
  %502 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %494, <8 x i16> <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>) #6
  br label %503

503:                                              ; preds = %499, %501, %495
  %504 = phi <8 x i16> [ %496, %495 ], [ %500, %499 ], [ %502, %501 ]
  %505 = icmp eq <8 x i16> %504, zeroinitializer
  %506 = and <8 x i1> %505, %421
  %507 = sext <8 x i1> %506 to <8 x i16>
  %508 = bitcast <8 x i16> %507 to <2 x i64>
  %509 = add <8 x i16> %99, %139
  %510 = add <8 x i16> %509, %107
  %511 = add <8 x i16> %94, %143
  %512 = add <8 x i16> %511, %102
  %513 = add <8 x i16> %455, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %514 = add <8 x i16> %513, %451
  %515 = add <8 x i16> %514, %155
  %516 = add <8 x i16> %515, %151
  %517 = add <8 x i16> %516, %512
  %518 = add <8 x i16> %517, %510
  %519 = add <8 x i16> %518, %461
  %520 = add <8 x i16> %519, %465
  %521 = add <8 x i16> %520, %473
  %522 = add <8 x i16> %521, %477
  %523 = add <8 x i16> %512, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %524 = add <8 x i16> %523, %510
  %525 = add <8 x i16> %447, %107
  %526 = add <8 x i16> %525, %522
  %527 = lshr <8 x i16> %526, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %528 = add <8 x i16> %450, %102
  %529 = add <8 x i16> %528, %522
  %530 = lshr <8 x i16> %529, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %531 = add <8 x i16> %107, %151
  %532 = add <8 x i16> %531, %524
  %533 = lshr <8 x i16> %532, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %534 = add <8 x i16> %102, %155
  %535 = add <8 x i16> %534, %524
  %536 = lshr <8 x i16> %535, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %537 = shl <8 x i16> %447, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %538 = shl <8 x i16> %450, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %539 = shl <8 x i16> %151, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %540 = shl <8 x i16> %155, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %541 = sub <8 x i16> %522, %473
  %542 = add <8 x i16> %537, %99
  %543 = add <8 x i16> %542, %521
  %544 = lshr <8 x i16> %543, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %545 = add <8 x i16> %538, %94
  %546 = add <8 x i16> %545, %541
  %547 = lshr <8 x i16> %546, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %548 = sub <8 x i16> %524, %139
  %549 = sub <8 x i16> %524, %143
  %550 = add <8 x i16> %99, %539
  %551 = add <8 x i16> %550, %549
  %552 = lshr <8 x i16> %551, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %553 = add <8 x i16> %94, %540
  %554 = add <8 x i16> %553, %548
  %555 = lshr <8 x i16> %554, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %556 = mul <8 x i16> %447, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %557 = mul <8 x i16> %450, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %558 = mul <8 x i16> %151, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %559 = mul <8 x i16> %155, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %560 = sub <8 x i16> %521, %465
  %561 = sub <8 x i16> %541, %461
  %562 = add <8 x i16> %556, %139
  %563 = add <8 x i16> %562, %560
  %564 = lshr <8 x i16> %563, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %565 = add <8 x i16> %557, %143
  %566 = add <8 x i16> %565, %561
  %567 = lshr <8 x i16> %566, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %568 = add <8 x i16> %558, %139
  %569 = sub <8 x i16> %568, %94
  %570 = add <8 x i16> %569, %549
  %571 = lshr <8 x i16> %570, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %572 = add <8 x i16> %559, %143
  %573 = sub <8 x i16> %572, %99
  %574 = add <8 x i16> %573, %548
  %575 = lshr <8 x i16> %574, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %576 = shl <8 x i16> %447, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %577 = shl <8 x i16> %450, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %578 = sub <8 x i16> %560, %455
  %579 = sub <8 x i16> %561, %451
  %580 = add <8 x i16> %576, %151
  %581 = add <8 x i16> %580, %578
  %582 = lshr <8 x i16> %581, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %583 = add <8 x i16> %577, %155
  %584 = add <8 x i16> %583, %579
  %585 = lshr <8 x i16> %584, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %586 = mul <8 x i16> %447, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %587 = mul <8 x i16> %450, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %588 = sub <8 x i16> %578, %155
  %589 = sub <8 x i16> %579, %151
  %590 = add <8 x i16> %586, %451
  %591 = add <8 x i16> %590, %588
  %592 = lshr <8 x i16> %591, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %593 = add <8 x i16> %587, %455
  %594 = add <8 x i16> %593, %589
  %595 = lshr <8 x i16> %594, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %596 = mul <8 x i16> %447, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %597 = mul <8 x i16> %450, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %598 = sub <8 x i16> %588, %143
  %599 = sub <8 x i16> %589, %139
  %600 = add <8 x i16> %596, %461
  %601 = add <8 x i16> %600, %598
  %602 = lshr <8 x i16> %601, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %603 = add <8 x i16> %597, %465
  %604 = add <8 x i16> %603, %599
  %605 = lshr <8 x i16> %604, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %606 = mul <8 x i16> %447, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %607 = mul <8 x i16> %450, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %608 = sub <8 x i16> %473, %94
  %609 = add <8 x i16> %608, %606
  %610 = add <8 x i16> %609, %598
  %611 = lshr <8 x i16> %610, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %612 = sub <8 x i16> %477, %99
  %613 = add <8 x i16> %612, %607
  %614 = add <8 x i16> %613, %599
  %615 = lshr <8 x i16> %614, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %616 = xor <2 x i64> %423, <i64 -1, i64 -1>
  %617 = and <2 x i64> %89, %616
  %618 = and <8 x i16> %571, %422
  %619 = bitcast <8 x i16> %618 to <2 x i64>
  %620 = or <2 x i64> %617, %619
  %621 = and <2 x i64> %85, %616
  %622 = and <8 x i16> %575, %422
  %623 = bitcast <8 x i16> %622 to <2 x i64>
  %624 = or <2 x i64> %621, %623
  %625 = and <2 x i64> %616, %389
  %626 = and <8 x i16> %552, %422
  %627 = bitcast <8 x i16> %626 to <2 x i64>
  %628 = or <2 x i64> %625, %627
  %629 = and <2 x i64> %616, %364
  %630 = and <8 x i16> %555, %422
  %631 = bitcast <8 x i16> %630 to <2 x i64>
  %632 = or <2 x i64> %629, %631
  %633 = and <2 x i64> %616, %336
  %634 = and <8 x i16> %533, %422
  %635 = bitcast <8 x i16> %634 to <2 x i64>
  %636 = or <2 x i64> %633, %635
  %637 = and <2 x i64> %616, %311
  %638 = and <8 x i16> %536, %422
  %639 = bitcast <8 x i16> %638 to <2 x i64>
  %640 = or <2 x i64> %637, %639
  %641 = xor <2 x i64> %508, <i64 -1, i64 -1>
  %642 = and <2 x i64> %438, %641
  %643 = and <8 x i16> %611, %507
  %644 = bitcast <8 x i16> %643 to <2 x i64>
  %645 = or <2 x i64> %642, %644
  %646 = and <2 x i64> %441, %641
  %647 = and <8 x i16> %615, %507
  %648 = bitcast <8 x i16> %647 to <2 x i64>
  %649 = or <2 x i64> %646, %648
  store <2 x i64> %645, <2 x i64>* %437, align 16
  store <2 x i64> %649, <2 x i64>* %440, align 16
  %650 = and <2 x i64> %429, %641
  %651 = and <8 x i16> %602, %507
  %652 = bitcast <8 x i16> %651 to <2 x i64>
  %653 = or <2 x i64> %650, %652
  %654 = and <2 x i64> %432, %641
  %655 = and <8 x i16> %605, %507
  %656 = bitcast <8 x i16> %655 to <2 x i64>
  %657 = or <2 x i64> %654, %656
  store <2 x i64> %653, <2 x i64>* %428, align 16
  store <2 x i64> %657, <2 x i64>* %431, align 16
  %658 = and <2 x i64> %71, %641
  %659 = and <8 x i16> %592, %507
  %660 = bitcast <8 x i16> %659 to <2 x i64>
  %661 = or <2 x i64> %658, %660
  %662 = and <2 x i64> %65, %641
  %663 = and <8 x i16> %595, %507
  %664 = bitcast <8 x i16> %663 to <2 x i64>
  %665 = or <2 x i64> %662, %664
  store <2 x i64> %661, <2 x i64>* %70, align 16
  store <2 x i64> %665, <2 x i64>* %64, align 16
  %666 = and <2 x i64> %80, %641
  %667 = and <8 x i16> %582, %507
  %668 = bitcast <8 x i16> %667 to <2 x i64>
  %669 = or <2 x i64> %666, %668
  %670 = and <2 x i64> %76, %641
  %671 = and <8 x i16> %585, %507
  %672 = bitcast <8 x i16> %671 to <2 x i64>
  %673 = or <2 x i64> %670, %672
  store <2 x i64> %669, <2 x i64>* %79, align 16
  store <2 x i64> %673, <2 x i64>* %75, align 16
  %674 = and <2 x i64> %620, %641
  %675 = and <8 x i16> %564, %507
  %676 = bitcast <8 x i16> %675 to <2 x i64>
  %677 = or <2 x i64> %674, %676
  %678 = and <2 x i64> %624, %641
  %679 = and <8 x i16> %567, %507
  %680 = bitcast <8 x i16> %679 to <2 x i64>
  %681 = or <2 x i64> %678, %680
  store <2 x i64> %677, <2 x i64>* %88, align 16
  store <2 x i64> %681, <2 x i64>* %84, align 16
  %682 = and <2 x i64> %628, %641
  %683 = and <8 x i16> %544, %507
  %684 = bitcast <8 x i16> %683 to <2 x i64>
  %685 = or <2 x i64> %682, %684
  %686 = and <2 x i64> %632, %641
  %687 = and <8 x i16> %547, %507
  %688 = bitcast <8 x i16> %687 to <2 x i64>
  %689 = or <2 x i64> %686, %688
  store <2 x i64> %685, <2 x i64>* %97, align 16
  store <2 x i64> %689, <2 x i64>* %92, align 16
  %690 = and <2 x i64> %636, %641
  %691 = and <8 x i16> %527, %507
  %692 = bitcast <8 x i16> %691 to <2 x i64>
  %693 = or <2 x i64> %690, %692
  %694 = and <2 x i64> %640, %641
  %695 = and <8 x i16> %530, %507
  %696 = bitcast <8 x i16> %695 to <2 x i64>
  %697 = or <2 x i64> %694, %696
  store <2 x i64> %693, <2 x i64>* %105, align 16
  store <2 x i64> %697, <2 x i64>* %100, align 16
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_horizontal_16_dual_sse2(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #2 {
  tail call void @vpx_highbd_lpf_horizontal_16_sse2(i16* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 %5)
  %7 = getelementptr inbounds i16, i16* %0, i64 8
  tail call void @vpx_highbd_lpf_horizontal_16_sse2(i16* %7, i32 %1, i8* %2, i8* %3, i8* %4, i32 %5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_horizontal_8_sse2(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #3 {
  %7 = shl nsw i32 %1, 2
  %8 = sext i32 %7 to i64
  %9 = sub nsw i64 0, %8
  %10 = getelementptr inbounds i16, i16* %0, i64 %9
  %11 = bitcast i16* %10 to <8 x i16>*
  %12 = load <8 x i16>, <8 x i16>* %11, align 16
  %13 = mul nsw i32 %1, 3
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i16, i16* %0, i64 %14
  %16 = bitcast i16* %15 to <8 x i16>*
  %17 = load <8 x i16>, <8 x i16>* %16, align 16
  %18 = sub nsw i64 0, %14
  %19 = getelementptr inbounds i16, i16* %0, i64 %18
  %20 = bitcast i16* %19 to <2 x i64>*
  %21 = load <2 x i64>, <2 x i64>* %20, align 16
  %22 = shl nsw i32 %1, 1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i16, i16* %0, i64 %23
  %25 = bitcast i16* %24 to <2 x i64>*
  %26 = load <2 x i64>, <2 x i64>* %25, align 16
  %27 = sub nsw i64 0, %23
  %28 = getelementptr inbounds i16, i16* %0, i64 %27
  %29 = bitcast i16* %28 to <2 x i64>*
  %30 = bitcast i16* %28 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 16
  %32 = sext i32 %1 to i64
  %33 = getelementptr inbounds i16, i16* %0, i64 %32
  %34 = bitcast i16* %33 to <2 x i64>*
  %35 = bitcast i16* %33 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 16
  %37 = sub nsw i64 0, %32
  %38 = getelementptr inbounds i16, i16* %0, i64 %37
  %39 = bitcast i16* %38 to <2 x i64>*
  %40 = bitcast i16* %38 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 16
  %42 = bitcast i16* %0 to <2 x i64>*
  %43 = bitcast i16* %0 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 16
  %45 = icmp eq i32 %5, 8
  br i1 %45, label %46, label %59

46:                                               ; preds = %6
  %47 = bitcast i8* %2 to <16 x i8>*
  %48 = load <16 x i8>, <16 x i8>* %47, align 16
  %49 = shufflevector <16 x i8> %48, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %50 = bitcast <16 x i8> %49 to <2 x i64>
  %51 = bitcast i8* %3 to <16 x i8>*
  %52 = load <16 x i8>, <16 x i8>* %51, align 16
  %53 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = bitcast <16 x i8> %53 to <2 x i64>
  %55 = bitcast i8* %4 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 16
  %57 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = bitcast <16 x i8> %57 to <2 x i64>
  br label %95

59:                                               ; preds = %6
  %60 = icmp eq i32 %5, 10
  %61 = bitcast i8* %2 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 16
  %63 = shufflevector <16 x i8> %62, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %64 = bitcast <16 x i8> %63 to <8 x i16>
  br i1 %60, label %65, label %80

65:                                               ; preds = %59
  %66 = shl <8 x i16> %64, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %67 = bitcast <8 x i16> %66 to <2 x i64>
  %68 = bitcast i8* %3 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 16
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = bitcast <16 x i8> %70 to <8 x i16>
  %72 = shl <8 x i16> %71, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %73 = bitcast <8 x i16> %72 to <2 x i64>
  %74 = bitcast i8* %4 to <16 x i8>*
  %75 = load <16 x i8>, <16 x i8>* %74, align 16
  %76 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %77 = bitcast <16 x i8> %76 to <8 x i16>
  %78 = shl <8 x i16> %77, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %79 = bitcast <8 x i16> %78 to <2 x i64>
  br label %95

80:                                               ; preds = %59
  %81 = shl <8 x i16> %64, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %82 = bitcast <8 x i16> %81 to <2 x i64>
  %83 = bitcast i8* %3 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 16
  %85 = shufflevector <16 x i8> %84, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %86 = bitcast <16 x i8> %85 to <8 x i16>
  %87 = shl <8 x i16> %86, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %88 = bitcast <8 x i16> %87 to <2 x i64>
  %89 = bitcast i8* %4 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 16
  %91 = shufflevector <16 x i8> %90, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %92 = bitcast <16 x i8> %91 to <8 x i16>
  %93 = shl <8 x i16> %92, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %94 = bitcast <8 x i16> %93 to <2 x i64>
  br label %95

95:                                               ; preds = %65, %80, %46
  %96 = phi <2 x i64> [ %50, %46 ], [ %67, %65 ], [ %82, %80 ]
  %97 = phi <2 x i64> [ %54, %46 ], [ %73, %65 ], [ %88, %80 ]
  %98 = phi <2 x i64> [ %58, %46 ], [ %79, %65 ], [ %94, %80 ]
  %99 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %46 ], [ <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, %65 ], [ <i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048>, %80 ]
  %100 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %31, <8 x i16> %99) #6
  %101 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %41, <8 x i16> %99) #6
  %102 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %44, <8 x i16> %99) #6
  %103 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %36, <8 x i16> %99) #6
  %104 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %31, <8 x i16> %41) #6
  %105 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %41, <8 x i16> %31) #6
  %106 = or <8 x i16> %105, %104
  %107 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %36, <8 x i16> %44) #6
  %108 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %44, <8 x i16> %36) #6
  %109 = or <8 x i16> %108, %107
  %110 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %41, <8 x i16> %44) #6
  %111 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %44, <8 x i16> %41) #6
  %112 = or <8 x i16> %111, %110
  %113 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %31, <8 x i16> %36) #6
  %114 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %36, <8 x i16> %31) #6
  %115 = or <8 x i16> %114, %113
  %116 = icmp sgt <8 x i16> %106, %109
  %117 = select <8 x i1> %116, <8 x i16> %106, <8 x i16> %109
  %118 = bitcast <2 x i64> %98 to <8 x i16>
  %119 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %117, <8 x i16> %118) #6
  %120 = icmp eq <8 x i16> %119, zeroinitializer
  %121 = sext <8 x i1> %120 to <8 x i16>
  %122 = bitcast <8 x i16> %121 to <2 x i64>
  %123 = xor <2 x i64> %122, <i64 -1, i64 -1>
  %124 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %112, <8 x i16> %112) #6
  %125 = lshr <8 x i16> %115, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %126 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %124, <8 x i16> %125) #6
  %127 = bitcast <2 x i64> %96 to <8 x i16>
  %128 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %126, <8 x i16> %127) #6
  %129 = icmp eq <8 x i16> %128, zeroinitializer
  %130 = bitcast <2 x i64> %97 to <8 x i16>
  %131 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %130, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %132 = select <8 x i1> %129, <8 x i16> zeroinitializer, <8 x i16> %131
  %133 = icmp sgt <8 x i16> %106, %132
  %134 = select <8 x i1> %133, <8 x i16> %106, <8 x i16> %132
  %135 = icmp sgt <8 x i16> %109, %134
  %136 = select <8 x i1> %135, <8 x i16> %109, <8 x i16> %134
  %137 = bitcast <2 x i64> %21 to <8 x i16>
  %138 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %137, <8 x i16> %31) #6
  %139 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %31, <8 x i16> %137) #6
  %140 = or <8 x i16> %139, %138
  %141 = bitcast <2 x i64> %26 to <8 x i16>
  %142 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %141, <8 x i16> %36) #6
  %143 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %36, <8 x i16> %141) #6
  %144 = or <8 x i16> %143, %142
  %145 = icmp sgt <8 x i16> %140, %144
  %146 = select <8 x i1> %145, <8 x i16> %140, <8 x i16> %144
  %147 = icmp sgt <8 x i16> %146, %136
  %148 = select <8 x i1> %147, <8 x i16> %146, <8 x i16> %136
  %149 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %12, <8 x i16> %137) #6
  %150 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %137, <8 x i16> %12) #6
  %151 = or <8 x i16> %150, %149
  %152 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %17, <8 x i16> %141) #6
  %153 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %141, <8 x i16> %17) #6
  %154 = or <8 x i16> %153, %152
  %155 = icmp sgt <8 x i16> %151, %154
  %156 = select <8 x i1> %155, <8 x i16> %151, <8 x i16> %154
  %157 = icmp sgt <8 x i16> %156, %148
  %158 = select <8 x i1> %157, <8 x i16> %156, <8 x i16> %148
  %159 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %158, <8 x i16> %130) #6
  %160 = icmp eq <8 x i16> %159, zeroinitializer
  %161 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %137, <8 x i16> %41) #6
  %162 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %41, <8 x i16> %137) #6
  %163 = or <8 x i16> %162, %161
  %164 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %141, <8 x i16> %44) #6
  %165 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %44, <8 x i16> %141) #6
  %166 = or <8 x i16> %165, %164
  %167 = icmp sgt <8 x i16> %163, %166
  %168 = select <8 x i1> %167, <8 x i16> %163, <8 x i16> %166
  %169 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %12, <8 x i16> %41) #6
  %170 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %41, <8 x i16> %12) #6
  %171 = or <8 x i16> %170, %169
  %172 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %17, <8 x i16> %44) #6
  %173 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %44, <8 x i16> %17) #6
  %174 = or <8 x i16> %173, %172
  %175 = icmp sgt <8 x i16> %171, %174
  %176 = select <8 x i1> %175, <8 x i16> %171, <8 x i16> %174
  %177 = icmp sgt <8 x i16> %176, %168
  %178 = select <8 x i1> %177, <8 x i16> %176, <8 x i16> %168
  %179 = icmp sgt <8 x i16> %106, %178
  %180 = select <8 x i1> %179, <8 x i16> %106, <8 x i16> %178
  %181 = icmp sgt <8 x i16> %109, %180
  %182 = select <8 x i1> %181, <8 x i16> %109, <8 x i16> %180
  br i1 %45, label %183, label %185

183:                                              ; preds = %95
  %184 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %182, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  br label %191

185:                                              ; preds = %95
  %186 = icmp eq i32 %5, 10
  br i1 %186, label %187, label %189

187:                                              ; preds = %185
  %188 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %182, <8 x i16> <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>) #6
  br label %191

189:                                              ; preds = %185
  %190 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %182, <8 x i16> <i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16, i16 16>) #6
  br label %191

191:                                              ; preds = %187, %189, %183
  %192 = phi <8 x i16> [ %184, %183 ], [ %188, %187 ], [ %190, %189 ]
  %193 = icmp eq <8 x i16> %192, zeroinitializer
  %194 = and <8 x i1> %193, %160
  %195 = sext <8 x i1> %194 to <8 x i16>
  %196 = bitcast <8 x i16> %195 to <2 x i64>
  %197 = shl <8 x i16> %12, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %198 = add <8 x i16> %197, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %199 = add <8 x i16> %198, %137
  %200 = add <8 x i16> %199, %31
  %201 = add <8 x i16> %200, %41
  %202 = add <8 x i16> %12, %137
  %203 = add <8 x i16> %202, %44
  %204 = add <8 x i16> %203, %201
  %205 = lshr <8 x i16> %204, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %206 = add <8 x i16> %44, %36
  %207 = add <8 x i16> %206, %31
  %208 = add <8 x i16> %207, %201
  %209 = lshr <8 x i16> %208, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %210 = sub <8 x i16> %201, %12
  %211 = add <8 x i16> %210, %141
  %212 = add <8 x i16> %206, %41
  %213 = add <8 x i16> %212, %211
  %214 = lshr <8 x i16> %213, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %215 = sub <8 x i16> %211, %12
  %216 = add <8 x i16> %215, %17
  %217 = add <8 x i16> %206, %44
  %218 = add <8 x i16> %217, %216
  %219 = lshr <8 x i16> %218, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %220 = sub <8 x i16> %216, %137
  %221 = add <8 x i16> %220, %17
  %222 = add <8 x i16> %206, %36
  %223 = add <8 x i16> %222, %221
  %224 = lshr <8 x i16> %223, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %225 = add <8 x i16> %17, %141
  %226 = sub <8 x i16> %225, %31
  %227 = add <8 x i16> %226, %206
  %228 = add <8 x i16> %227, %221
  %229 = lshr <8 x i16> %228, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %230 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %100, <8 x i16> %103) #6
  %231 = bitcast <8 x i16> %230 to <2 x i64>
  switch i32 %5, label %233 [
    i32 8, label %234
    i32 10, label %232
  ]

232:                                              ; preds = %191
  br label %234

233:                                              ; preds = %191
  br label %234

234:                                              ; preds = %191, %232, %233
  %235 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %232 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %233 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %191 ]
  %236 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %232 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %233 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %191 ]
  %237 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %232 ], [ <i64 576188069258921983, i64 576188069258921983>, %233 ], [ <i64 35747867511423103, i64 35747867511423103>, %191 ]
  %238 = icmp slt <8 x i16> %236, %230
  %239 = sext <8 x i1> %238 to <8 x i16>
  %240 = bitcast <8 x i16> %239 to <2 x i64>
  %241 = icmp sgt <8 x i16> %235, %230
  %242 = or <8 x i1> %238, %241
  %243 = sext <8 x i1> %242 to <8 x i16>
  %244 = bitcast <8 x i16> %243 to <2 x i64>
  %245 = xor <2 x i64> %244, <i64 -1, i64 -1>
  %246 = and <2 x i64> %245, %231
  %247 = and <2 x i64> %237, %240
  %248 = select <8 x i1> %241, <8 x i16> %235, <8 x i16> zeroinitializer
  %249 = bitcast <8 x i16> %248 to <2 x i64>
  %250 = or <2 x i64> %247, %249
  %251 = or <2 x i64> %250, %246
  %252 = and <2 x i64> %251, %123
  %253 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %102, <8 x i16> %101) #6
  %254 = bitcast <2 x i64> %252 to <8 x i16>
  %255 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %254, <8 x i16> %253) #6
  %256 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %255, <8 x i16> %253) #6
  %257 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %256, <8 x i16> %253) #6
  %258 = bitcast <8 x i16> %257 to <2 x i64>
  switch i32 %5, label %260 [
    i32 8, label %261
    i32 10, label %259
  ]

259:                                              ; preds = %234
  br label %261

260:                                              ; preds = %234
  br label %261

261:                                              ; preds = %234, %259, %260
  %262 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %259 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %260 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %234 ]
  %263 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %259 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %260 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %234 ]
  %264 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %259 ], [ <i64 576188069258921983, i64 576188069258921983>, %260 ], [ <i64 35747867511423103, i64 35747867511423103>, %234 ]
  %265 = icmp slt <8 x i16> %263, %257
  %266 = sext <8 x i1> %265 to <8 x i16>
  %267 = bitcast <8 x i16> %266 to <2 x i64>
  %268 = icmp sgt <8 x i16> %262, %257
  %269 = or <8 x i1> %265, %268
  %270 = sext <8 x i1> %269 to <8 x i16>
  %271 = bitcast <8 x i16> %270 to <2 x i64>
  %272 = xor <2 x i64> %271, <i64 -1, i64 -1>
  %273 = and <2 x i64> %272, %258
  %274 = and <2 x i64> %264, %267
  %275 = select <8 x i1> %268, <8 x i16> %262, <8 x i16> zeroinitializer
  %276 = bitcast <8 x i16> %275 to <2 x i64>
  %277 = or <2 x i64> %274, %276
  %278 = or <2 x i64> %277, %273
  %279 = bitcast <2 x i64> %278 to <8 x i16>
  %280 = select <8 x i1> %160, <8 x i16> %279, <8 x i16> zeroinitializer
  %281 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %280, <8 x i16> <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>) #6
  %282 = bitcast <8 x i16> %281 to <2 x i64>
  %283 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %280, <8 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>) #6
  %284 = bitcast <8 x i16> %283 to <2 x i64>
  switch i32 %5, label %286 [
    i32 8, label %287
    i32 10, label %285
  ]

285:                                              ; preds = %261
  br label %287

286:                                              ; preds = %261
  br label %287

287:                                              ; preds = %261, %285, %286
  %288 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %285 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %286 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %261 ]
  %289 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %285 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %286 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %261 ]
  %290 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %285 ], [ <i64 576188069258921983, i64 576188069258921983>, %286 ], [ <i64 35747867511423103, i64 35747867511423103>, %261 ]
  %291 = icmp slt <8 x i16> %289, %281
  %292 = sext <8 x i1> %291 to <8 x i16>
  %293 = bitcast <8 x i16> %292 to <2 x i64>
  %294 = icmp sgt <8 x i16> %288, %281
  %295 = or <8 x i1> %291, %294
  %296 = sext <8 x i1> %295 to <8 x i16>
  %297 = bitcast <8 x i16> %296 to <2 x i64>
  %298 = xor <2 x i64> %297, <i64 -1, i64 -1>
  %299 = and <2 x i64> %298, %282
  %300 = and <2 x i64> %290, %293
  %301 = select <8 x i1> %294, <8 x i16> %288, <8 x i16> zeroinitializer
  %302 = bitcast <8 x i16> %301 to <2 x i64>
  %303 = or <2 x i64> %300, %302
  %304 = or <2 x i64> %303, %299
  %305 = bitcast <2 x i64> %304 to <8 x i16>
  %306 = ashr <8 x i16> %305, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  switch i32 %5, label %308 [
    i32 8, label %309
    i32 10, label %307
  ]

307:                                              ; preds = %287
  br label %309

308:                                              ; preds = %287
  br label %309

309:                                              ; preds = %287, %307, %308
  %310 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %307 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %308 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %287 ]
  %311 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %307 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %308 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %287 ]
  %312 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %307 ], [ <i64 576188069258921983, i64 576188069258921983>, %308 ], [ <i64 35747867511423103, i64 35747867511423103>, %287 ]
  %313 = icmp slt <8 x i16> %311, %283
  %314 = sext <8 x i1> %313 to <8 x i16>
  %315 = bitcast <8 x i16> %314 to <2 x i64>
  %316 = icmp sgt <8 x i16> %310, %283
  %317 = or <8 x i1> %313, %316
  %318 = sext <8 x i1> %317 to <8 x i16>
  %319 = bitcast <8 x i16> %318 to <2 x i64>
  %320 = xor <2 x i64> %319, <i64 -1, i64 -1>
  %321 = and <2 x i64> %320, %284
  %322 = and <2 x i64> %312, %315
  %323 = select <8 x i1> %316, <8 x i16> %310, <8 x i16> zeroinitializer
  %324 = bitcast <8 x i16> %323 to <2 x i64>
  %325 = or <2 x i64> %322, %324
  %326 = or <2 x i64> %325, %321
  %327 = bitcast <2 x i64> %326 to <8 x i16>
  %328 = ashr <8 x i16> %327, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %329 = add nsw <8 x i16> %306, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %330 = ashr <8 x i16> %329, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %331 = and <8 x i16> %330, %121
  %332 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %102, <8 x i16> %306) #6
  %333 = bitcast <8 x i16> %332 to <2 x i64>
  switch i32 %5, label %335 [
    i32 8, label %336
    i32 10, label %334
  ]

334:                                              ; preds = %309
  br label %336

335:                                              ; preds = %309
  br label %336

336:                                              ; preds = %309, %334, %335
  %337 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %334 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %335 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %309 ]
  %338 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %334 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %335 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %309 ]
  %339 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %334 ], [ <i64 576188069258921983, i64 576188069258921983>, %335 ], [ <i64 35747867511423103, i64 35747867511423103>, %309 ]
  %340 = icmp slt <8 x i16> %338, %332
  %341 = sext <8 x i1> %340 to <8 x i16>
  %342 = bitcast <8 x i16> %341 to <2 x i64>
  %343 = icmp sgt <8 x i16> %337, %332
  %344 = or <8 x i1> %340, %343
  %345 = sext <8 x i1> %344 to <8 x i16>
  %346 = bitcast <8 x i16> %345 to <2 x i64>
  %347 = xor <2 x i64> %346, <i64 -1, i64 -1>
  %348 = and <2 x i64> %347, %333
  %349 = and <2 x i64> %339, %342
  %350 = select <8 x i1> %343, <8 x i16> %337, <8 x i16> zeroinitializer
  %351 = bitcast <8 x i16> %350 to <2 x i64>
  %352 = or <2 x i64> %349, %351
  %353 = or <2 x i64> %352, %348
  %354 = bitcast <2 x i64> %353 to <8 x i16>
  %355 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %354, <8 x i16> %99) #6
  %356 = bitcast <8 x i16> %355 to <2 x i64>
  %357 = xor <2 x i64> %196, <i64 -1, i64 -1>
  %358 = and <2 x i64> %356, %357
  %359 = and <8 x i16> %219, %195
  %360 = bitcast <8 x i16> %359 to <2 x i64>
  %361 = or <2 x i64> %358, %360
  %362 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %103, <8 x i16> %331) #6
  %363 = bitcast <8 x i16> %362 to <2 x i64>
  switch i32 %5, label %365 [
    i32 8, label %366
    i32 10, label %364
  ]

364:                                              ; preds = %336
  br label %366

365:                                              ; preds = %336
  br label %366

366:                                              ; preds = %336, %364, %365
  %367 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %364 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %365 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %336 ]
  %368 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %364 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %365 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %336 ]
  %369 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %364 ], [ <i64 576188069258921983, i64 576188069258921983>, %365 ], [ <i64 35747867511423103, i64 35747867511423103>, %336 ]
  %370 = icmp slt <8 x i16> %368, %362
  %371 = sext <8 x i1> %370 to <8 x i16>
  %372 = bitcast <8 x i16> %371 to <2 x i64>
  %373 = icmp sgt <8 x i16> %367, %362
  %374 = or <8 x i1> %370, %373
  %375 = sext <8 x i1> %374 to <8 x i16>
  %376 = bitcast <8 x i16> %375 to <2 x i64>
  %377 = xor <2 x i64> %376, <i64 -1, i64 -1>
  %378 = and <2 x i64> %377, %363
  %379 = and <2 x i64> %369, %372
  %380 = select <8 x i1> %373, <8 x i16> %367, <8 x i16> zeroinitializer
  %381 = bitcast <8 x i16> %380 to <2 x i64>
  %382 = or <2 x i64> %379, %381
  %383 = or <2 x i64> %382, %378
  %384 = bitcast <2 x i64> %383 to <8 x i16>
  %385 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %384, <8 x i16> %99) #6
  %386 = bitcast <8 x i16> %385 to <2 x i64>
  %387 = and <2 x i64> %386, %357
  %388 = and <8 x i16> %224, %195
  %389 = bitcast <8 x i16> %388 to <2 x i64>
  %390 = or <2 x i64> %387, %389
  %391 = and <2 x i64> %26, %357
  %392 = and <8 x i16> %229, %195
  %393 = bitcast <8 x i16> %392 to <2 x i64>
  %394 = or <2 x i64> %391, %393
  %395 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %101, <8 x i16> %328) #6
  %396 = bitcast <8 x i16> %395 to <2 x i64>
  switch i32 %5, label %398 [
    i32 8, label %399
    i32 10, label %397
  ]

397:                                              ; preds = %366
  br label %399

398:                                              ; preds = %366
  br label %399

399:                                              ; preds = %366, %397, %398
  %400 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %397 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %398 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %366 ]
  %401 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %397 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %398 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %366 ]
  %402 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %397 ], [ <i64 576188069258921983, i64 576188069258921983>, %398 ], [ <i64 35747867511423103, i64 35747867511423103>, %366 ]
  %403 = icmp slt <8 x i16> %401, %395
  %404 = sext <8 x i1> %403 to <8 x i16>
  %405 = bitcast <8 x i16> %404 to <2 x i64>
  %406 = icmp sgt <8 x i16> %400, %395
  %407 = or <8 x i1> %403, %406
  %408 = sext <8 x i1> %407 to <8 x i16>
  %409 = bitcast <8 x i16> %408 to <2 x i64>
  %410 = xor <2 x i64> %409, <i64 -1, i64 -1>
  %411 = and <2 x i64> %410, %396
  %412 = and <2 x i64> %402, %405
  %413 = select <8 x i1> %406, <8 x i16> %400, <8 x i16> zeroinitializer
  %414 = bitcast <8 x i16> %413 to <2 x i64>
  %415 = or <2 x i64> %412, %414
  %416 = or <2 x i64> %415, %411
  %417 = bitcast <2 x i64> %416 to <8 x i16>
  %418 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %417, <8 x i16> %99) #6
  %419 = bitcast <8 x i16> %418 to <2 x i64>
  %420 = and <2 x i64> %419, %357
  %421 = and <8 x i16> %214, %195
  %422 = bitcast <8 x i16> %421 to <2 x i64>
  %423 = or <2 x i64> %420, %422
  %424 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %100, <8 x i16> %331) #6
  %425 = bitcast <8 x i16> %424 to <2 x i64>
  switch i32 %5, label %427 [
    i32 8, label %428
    i32 10, label %426
  ]

426:                                              ; preds = %399
  br label %428

427:                                              ; preds = %399
  br label %428

428:                                              ; preds = %399, %426, %427
  %429 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %426 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %427 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %399 ]
  %430 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %426 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %427 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %399 ]
  %431 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %426 ], [ <i64 576188069258921983, i64 576188069258921983>, %427 ], [ <i64 35747867511423103, i64 35747867511423103>, %399 ]
  %432 = icmp slt <8 x i16> %430, %424
  %433 = sext <8 x i1> %432 to <8 x i16>
  %434 = bitcast <8 x i16> %433 to <2 x i64>
  %435 = icmp sgt <8 x i16> %429, %424
  %436 = or <8 x i1> %432, %435
  %437 = sext <8 x i1> %436 to <8 x i16>
  %438 = bitcast <8 x i16> %437 to <2 x i64>
  %439 = xor <2 x i64> %438, <i64 -1, i64 -1>
  %440 = and <2 x i64> %439, %425
  %441 = and <2 x i64> %431, %434
  %442 = select <8 x i1> %435, <8 x i16> %429, <8 x i16> zeroinitializer
  %443 = bitcast <8 x i16> %442 to <2 x i64>
  %444 = or <2 x i64> %441, %443
  %445 = or <2 x i64> %444, %440
  %446 = bitcast <2 x i64> %445 to <8 x i16>
  %447 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %446, <8 x i16> %99) #6
  %448 = bitcast <8 x i16> %447 to <2 x i64>
  %449 = and <2 x i64> %448, %357
  %450 = and <8 x i16> %209, %195
  %451 = bitcast <8 x i16> %450 to <2 x i64>
  %452 = or <2 x i64> %449, %451
  %453 = and <2 x i64> %21, %357
  %454 = and <8 x i16> %205, %195
  %455 = bitcast <8 x i16> %454 to <2 x i64>
  %456 = or <2 x i64> %453, %455
  store <2 x i64> %456, <2 x i64>* %20, align 16
  store <2 x i64> %452, <2 x i64>* %29, align 16
  store <2 x i64> %423, <2 x i64>* %39, align 16
  store <2 x i64> %361, <2 x i64>* %42, align 16
  store <2 x i64> %390, <2 x i64>* %34, align 16
  store <2 x i64> %394, <2 x i64>* %25, align 16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_horizontal_8_dual_sse2(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #4 {
  tail call void @vpx_highbd_lpf_horizontal_8_sse2(i16* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 %8)
  %10 = getelementptr inbounds i16, i16* %0, i64 8
  tail call void @vpx_highbd_lpf_horizontal_8_sse2(i16* %10, i32 %1, i8* %5, i8* %6, i8* %7, i32 %8)
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_horizontal_4_sse2(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = shl nsw i32 %1, 2
  %8 = sext i32 %7 to i64
  %9 = sub nsw i64 0, %8
  %10 = getelementptr inbounds i16, i16* %0, i64 %9
  %11 = bitcast i16* %10 to <8 x i16>*
  %12 = load <8 x i16>, <8 x i16>* %11, align 1
  %13 = mul nsw i32 %1, 3
  %14 = sext i32 %13 to i64
  %15 = sub nsw i64 0, %14
  %16 = getelementptr inbounds i16, i16* %0, i64 %15
  %17 = bitcast i16* %16 to <8 x i16>*
  %18 = load <8 x i16>, <8 x i16>* %17, align 1
  %19 = shl nsw i32 %1, 1
  %20 = sext i32 %19 to i64
  %21 = sub nsw i64 0, %20
  %22 = getelementptr inbounds i16, i16* %0, i64 %21
  %23 = bitcast i16* %22 to <8 x i16>*
  %24 = load <8 x i16>, <8 x i16>* %23, align 1
  %25 = sext i32 %1 to i64
  %26 = sub nsw i64 0, %25
  %27 = getelementptr inbounds i16, i16* %0, i64 %26
  %28 = bitcast i16* %27 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 1
  %30 = bitcast i16* %0 to <8 x i16>*
  %31 = load <8 x i16>, <8 x i16>* %30, align 1
  %32 = getelementptr inbounds i16, i16* %0, i64 %25
  %33 = bitcast i16* %32 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 1
  %35 = getelementptr inbounds i16, i16* %0, i64 %20
  %36 = bitcast i16* %35 to <8 x i16>*
  %37 = load <8 x i16>, <8 x i16>* %36, align 1
  %38 = getelementptr inbounds i16, i16* %0, i64 %14
  %39 = bitcast i16* %38 to <8 x i16>*
  %40 = load <8 x i16>, <8 x i16>* %39, align 1
  %41 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %24, <8 x i16> %29) #6
  %42 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %29, <8 x i16> %24) #6
  %43 = or <8 x i16> %42, %41
  %44 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %34, <8 x i16> %31) #6
  %45 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %31, <8 x i16> %34) #6
  %46 = or <8 x i16> %45, %44
  %47 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %29, <8 x i16> %31) #6
  %48 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %31, <8 x i16> %29) #6
  %49 = or <8 x i16> %48, %47
  %50 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %24, <8 x i16> %34) #6
  %51 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %34, <8 x i16> %24) #6
  %52 = or <8 x i16> %51, %50
  %53 = icmp eq i32 %5, 8
  br i1 %53, label %54, label %67

54:                                               ; preds = %6
  %55 = bitcast i8* %2 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 16
  %57 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %58 = bitcast <16 x i8> %57 to <2 x i64>
  %59 = bitcast i8* %3 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 16
  %61 = shufflevector <16 x i8> %60, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %62 = bitcast <16 x i8> %61 to <2 x i64>
  %63 = bitcast i8* %4 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 16
  %65 = shufflevector <16 x i8> %64, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = bitcast <16 x i8> %65 to <2 x i64>
  br label %103

67:                                               ; preds = %6
  %68 = icmp eq i32 %5, 10
  %69 = bitcast i8* %2 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 16
  %71 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %72 = bitcast <16 x i8> %71 to <8 x i16>
  br i1 %68, label %73, label %88

73:                                               ; preds = %67
  %74 = shl <8 x i16> %72, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %75 = bitcast <8 x i16> %74 to <2 x i64>
  %76 = bitcast i8* %3 to <16 x i8>*
  %77 = load <16 x i8>, <16 x i8>* %76, align 16
  %78 = shufflevector <16 x i8> %77, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %79 = bitcast <16 x i8> %78 to <8 x i16>
  %80 = shl <8 x i16> %79, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %81 = bitcast <8 x i16> %80 to <2 x i64>
  %82 = bitcast i8* %4 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 16
  %84 = shufflevector <16 x i8> %83, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %85 = bitcast <16 x i8> %84 to <8 x i16>
  %86 = shl <8 x i16> %85, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %87 = bitcast <8 x i16> %86 to <2 x i64>
  br label %103

88:                                               ; preds = %67
  %89 = shl <8 x i16> %72, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %90 = bitcast <8 x i16> %89 to <2 x i64>
  %91 = bitcast i8* %3 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 16
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %94 = bitcast <16 x i8> %93 to <8 x i16>
  %95 = shl <8 x i16> %94, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %96 = bitcast <8 x i16> %95 to <2 x i64>
  %97 = bitcast i8* %4 to <16 x i8>*
  %98 = load <16 x i8>, <16 x i8>* %97, align 16
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %100 = bitcast <16 x i8> %99 to <8 x i16>
  %101 = shl <8 x i16> %100, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %102 = bitcast <8 x i16> %101 to <2 x i64>
  br label %103

103:                                              ; preds = %73, %88, %54
  %104 = phi <2 x i64> [ %58, %54 ], [ %75, %73 ], [ %90, %88 ]
  %105 = phi <2 x i64> [ %62, %54 ], [ %81, %73 ], [ %96, %88 ]
  %106 = phi <2 x i64> [ %66, %54 ], [ %87, %73 ], [ %102, %88 ]
  %107 = phi <8 x i16> [ <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>, %54 ], [ <i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512>, %73 ], [ <i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048, i16 2048>, %88 ]
  %108 = phi <2 x i64> [ <i64 -35747867511423104, i64 -35747867511423104>, %54 ], [ <i64 -143835907860922880, i64 -143835907860922880>, %73 ], [ <i64 -576188069258921984, i64 -576188069258921984>, %88 ]
  %109 = phi <2 x i64> [ <i64 -8725857424048160, i64 -8725857424048160>, %54 ], [ <i64 -35747867511423104, i64 -35747867511423104>, %73 ], [ <i64 -143835907860922880, i64 -143835907860922880>, %88 ]
  %110 = phi <2 x i64> [ <i64 8725857424048159, i64 8725857424048159>, %54 ], [ <i64 35747867511423103, i64 35747867511423103>, %73 ], [ <i64 143835907860922879, i64 143835907860922879>, %88 ]
  %111 = phi <2 x i64> [ <i64 35747867511423103, i64 35747867511423103>, %54 ], [ <i64 143835907860922879, i64 143835907860922879>, %73 ], [ <i64 576188069258921983, i64 576188069258921983>, %88 ]
  %112 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %24, <8 x i16> %107) #6
  %113 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %29, <8 x i16> %107) #6
  %114 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %31, <8 x i16> %107) #6
  %115 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %34, <8 x i16> %107) #6
  %116 = icmp sgt <8 x i16> %43, %46
  %117 = select <8 x i1> %116, <8 x i16> %43, <8 x i16> %46
  %118 = bitcast <2 x i64> %106 to <8 x i16>
  %119 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %117, <8 x i16> %118) #6
  %120 = icmp eq <8 x i16> %119, zeroinitializer
  %121 = sext <8 x i1> %120 to <8 x i16>
  %122 = bitcast <8 x i16> %121 to <2 x i64>
  %123 = xor <2 x i64> %122, <i64 -1, i64 -1>
  %124 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %49, <8 x i16> %49) #6
  %125 = lshr <8 x i16> %52, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %126 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %124, <8 x i16> %125) #6
  %127 = bitcast <2 x i64> %104 to <8 x i16>
  %128 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %126, <8 x i16> %127) #6
  %129 = icmp eq <8 x i16> %128, zeroinitializer
  %130 = bitcast <2 x i64> %105 to <8 x i16>
  %131 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %130, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %132 = select <8 x i1> %129, <8 x i16> zeroinitializer, <8 x i16> %131
  %133 = icmp sgt <8 x i16> %117, %132
  %134 = select <8 x i1> %133, <8 x i16> %117, <8 x i16> %132
  %135 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %18, <8 x i16> %24) #6
  %136 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %24, <8 x i16> %18) #6
  %137 = or <8 x i16> %136, %135
  %138 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %12, <8 x i16> %18) #6
  %139 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %18, <8 x i16> %12) #6
  %140 = or <8 x i16> %139, %138
  %141 = icmp sgt <8 x i16> %137, %140
  %142 = select <8 x i1> %141, <8 x i16> %137, <8 x i16> %140
  %143 = icmp sgt <8 x i16> %142, %134
  %144 = select <8 x i1> %143, <8 x i16> %142, <8 x i16> %134
  %145 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %37, <8 x i16> %34) #6
  %146 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %34, <8 x i16> %37) #6
  %147 = or <8 x i16> %146, %145
  %148 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %40, <8 x i16> %37) #6
  %149 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %37, <8 x i16> %40) #6
  %150 = or <8 x i16> %149, %148
  %151 = icmp sgt <8 x i16> %147, %150
  %152 = select <8 x i1> %151, <8 x i16> %147, <8 x i16> %150
  %153 = icmp sgt <8 x i16> %152, %144
  %154 = select <8 x i1> %153, <8 x i16> %152, <8 x i16> %144
  %155 = tail call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %154, <8 x i16> %130) #6
  %156 = icmp eq <8 x i16> %155, zeroinitializer
  %157 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %112, <8 x i16> %115) #6
  %158 = bitcast <8 x i16> %157 to <2 x i64>
  switch i32 %5, label %160 [
    i32 8, label %161
    i32 10, label %159
  ]

159:                                              ; preds = %103
  br label %161

160:                                              ; preds = %103
  br label %161

161:                                              ; preds = %103, %159, %160
  %162 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %159 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %160 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %103 ]
  %163 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %159 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %160 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %103 ]
  %164 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %159 ], [ <i64 576188069258921983, i64 576188069258921983>, %160 ], [ <i64 35747867511423103, i64 35747867511423103>, %103 ]
  %165 = icmp slt <8 x i16> %163, %157
  %166 = sext <8 x i1> %165 to <8 x i16>
  %167 = bitcast <8 x i16> %166 to <2 x i64>
  %168 = icmp sgt <8 x i16> %162, %157
  %169 = or <8 x i1> %165, %168
  %170 = sext <8 x i1> %169 to <8 x i16>
  %171 = bitcast <8 x i16> %170 to <2 x i64>
  %172 = xor <2 x i64> %171, <i64 -1, i64 -1>
  %173 = and <2 x i64> %172, %158
  %174 = and <2 x i64> %164, %167
  %175 = select <8 x i1> %168, <8 x i16> %162, <8 x i16> zeroinitializer
  %176 = bitcast <8 x i16> %175 to <2 x i64>
  %177 = or <2 x i64> %174, %176
  %178 = or <2 x i64> %177, %173
  %179 = and <2 x i64> %178, %123
  %180 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %114, <8 x i16> %113) #6
  %181 = bitcast <2 x i64> %179 to <8 x i16>
  %182 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %181, <8 x i16> %180) #6
  %183 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %182, <8 x i16> %180) #6
  %184 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %183, <8 x i16> %180) #6
  %185 = bitcast <8 x i16> %184 to <2 x i64>
  switch i32 %5, label %187 [
    i32 8, label %188
    i32 10, label %186
  ]

186:                                              ; preds = %161
  br label %188

187:                                              ; preds = %161
  br label %188

188:                                              ; preds = %161, %186, %187
  %189 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %186 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %187 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %161 ]
  %190 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %186 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %187 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %161 ]
  %191 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %186 ], [ <i64 576188069258921983, i64 576188069258921983>, %187 ], [ <i64 35747867511423103, i64 35747867511423103>, %161 ]
  %192 = icmp slt <8 x i16> %190, %184
  %193 = sext <8 x i1> %192 to <8 x i16>
  %194 = bitcast <8 x i16> %193 to <2 x i64>
  %195 = icmp sgt <8 x i16> %189, %184
  %196 = or <8 x i1> %192, %195
  %197 = sext <8 x i1> %196 to <8 x i16>
  %198 = bitcast <8 x i16> %197 to <2 x i64>
  %199 = xor <2 x i64> %198, <i64 -1, i64 -1>
  %200 = and <2 x i64> %199, %185
  %201 = and <2 x i64> %191, %194
  %202 = select <8 x i1> %195, <8 x i16> %189, <8 x i16> zeroinitializer
  %203 = bitcast <8 x i16> %202 to <2 x i64>
  %204 = or <2 x i64> %201, %203
  %205 = or <2 x i64> %204, %200
  %206 = bitcast <2 x i64> %205 to <8 x i16>
  %207 = select <8 x i1> %156, <8 x i16> %206, <8 x i16> zeroinitializer
  %208 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %207, <8 x i16> <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>) #6
  %209 = bitcast <8 x i16> %208 to <2 x i64>
  switch i32 %5, label %211 [
    i32 8, label %212
    i32 10, label %210
  ]

210:                                              ; preds = %188
  br label %212

211:                                              ; preds = %188
  br label %212

212:                                              ; preds = %188, %210, %211
  %213 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %210 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %211 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %188 ]
  %214 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %210 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %211 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %188 ]
  %215 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %210 ], [ <i64 576188069258921983, i64 576188069258921983>, %211 ], [ <i64 35747867511423103, i64 35747867511423103>, %188 ]
  %216 = icmp slt <8 x i16> %214, %208
  %217 = sext <8 x i1> %216 to <8 x i16>
  %218 = bitcast <8 x i16> %217 to <2 x i64>
  %219 = icmp sgt <8 x i16> %213, %208
  %220 = or <8 x i1> %216, %219
  %221 = sext <8 x i1> %220 to <8 x i16>
  %222 = bitcast <8 x i16> %221 to <2 x i64>
  %223 = xor <2 x i64> %222, <i64 -1, i64 -1>
  %224 = and <2 x i64> %223, %209
  %225 = and <2 x i64> %215, %218
  %226 = select <8 x i1> %219, <8 x i16> %213, <8 x i16> zeroinitializer
  %227 = bitcast <8 x i16> %226 to <2 x i64>
  %228 = or <2 x i64> %225, %227
  %229 = or <2 x i64> %228, %224
  %230 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %207, <8 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>) #6
  %231 = bitcast <8 x i16> %230 to <2 x i64>
  switch i32 %5, label %233 [
    i32 8, label %234
    i32 10, label %232
  ]

232:                                              ; preds = %212
  br label %234

233:                                              ; preds = %212
  br label %234

234:                                              ; preds = %212, %232, %233
  %235 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %232 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %233 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %212 ]
  %236 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %232 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %233 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %212 ]
  %237 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %232 ], [ <i64 576188069258921983, i64 576188069258921983>, %233 ], [ <i64 35747867511423103, i64 35747867511423103>, %212 ]
  %238 = icmp slt <8 x i16> %236, %230
  %239 = sext <8 x i1> %238 to <8 x i16>
  %240 = bitcast <8 x i16> %239 to <2 x i64>
  %241 = icmp sgt <8 x i16> %235, %230
  %242 = or <8 x i1> %238, %241
  %243 = sext <8 x i1> %242 to <8 x i16>
  %244 = bitcast <8 x i16> %243 to <2 x i64>
  %245 = xor <2 x i64> %244, <i64 -1, i64 -1>
  %246 = and <2 x i64> %245, %231
  %247 = and <2 x i64> %237, %240
  %248 = select <8 x i1> %241, <8 x i16> %235, <8 x i16> zeroinitializer
  %249 = bitcast <8 x i16> %248 to <2 x i64>
  %250 = or <2 x i64> %247, %249
  %251 = or <2 x i64> %250, %246
  %252 = bitcast <2 x i64> %229 to <8 x i16>
  %253 = ashr <8 x i16> %252, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %254 = bitcast <8 x i16> %253 to <2 x i64>
  %255 = lshr <8 x i16> %252, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %256 = bitcast <8 x i16> %255 to <2 x i64>
  %257 = and <2 x i64> %109, %254
  %258 = and <2 x i64> %110, %256
  %259 = or <2 x i64> %257, %258
  %260 = bitcast <2 x i64> %251 to <8 x i16>
  %261 = ashr <8 x i16> %260, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %262 = bitcast <8 x i16> %261 to <2 x i64>
  %263 = lshr <8 x i16> %260, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %264 = bitcast <8 x i16> %263 to <2 x i64>
  %265 = and <2 x i64> %109, %262
  %266 = and <2 x i64> %110, %264
  %267 = or <2 x i64> %265, %266
  %268 = bitcast <2 x i64> %259 to <8 x i16>
  %269 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %268, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #6
  %270 = ashr <8 x i16> %269, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %271 = bitcast <8 x i16> %270 to <2 x i64>
  %272 = lshr <8 x i16> %269, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %273 = bitcast <8 x i16> %272 to <2 x i64>
  %274 = and <2 x i64> %108, %271
  %275 = and <2 x i64> %111, %273
  %276 = or <2 x i64> %274, %275
  %277 = and <2 x i64> %276, %122
  %278 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %114, <8 x i16> %268) #6
  %279 = bitcast <8 x i16> %278 to <2 x i64>
  switch i32 %5, label %281 [
    i32 8, label %282
    i32 10, label %280
  ]

280:                                              ; preds = %234
  br label %282

281:                                              ; preds = %234
  br label %282

282:                                              ; preds = %234, %280, %281
  %283 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %280 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %281 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %234 ]
  %284 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %280 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %281 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %234 ]
  %285 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %280 ], [ <i64 576188069258921983, i64 576188069258921983>, %281 ], [ <i64 35747867511423103, i64 35747867511423103>, %234 ]
  %286 = icmp slt <8 x i16> %284, %278
  %287 = sext <8 x i1> %286 to <8 x i16>
  %288 = bitcast <8 x i16> %287 to <2 x i64>
  %289 = icmp sgt <8 x i16> %283, %278
  %290 = or <8 x i1> %286, %289
  %291 = sext <8 x i1> %290 to <8 x i16>
  %292 = bitcast <8 x i16> %291 to <2 x i64>
  %293 = xor <2 x i64> %292, <i64 -1, i64 -1>
  %294 = and <2 x i64> %293, %279
  %295 = and <2 x i64> %285, %288
  %296 = select <8 x i1> %289, <8 x i16> %283, <8 x i16> zeroinitializer
  %297 = bitcast <8 x i16> %296 to <2 x i64>
  %298 = or <2 x i64> %295, %297
  %299 = or <2 x i64> %298, %294
  %300 = bitcast <2 x i64> %299 to <8 x i16>
  %301 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %300, <8 x i16> %107) #6
  %302 = bitcast <2 x i64> %277 to <8 x i16>
  %303 = tail call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %115, <8 x i16> %302) #6
  %304 = bitcast <8 x i16> %303 to <2 x i64>
  switch i32 %5, label %306 [
    i32 8, label %307
    i32 10, label %305
  ]

305:                                              ; preds = %282
  br label %307

306:                                              ; preds = %282
  br label %307

307:                                              ; preds = %282, %305, %306
  %308 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %305 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %306 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %282 ]
  %309 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %305 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %306 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %282 ]
  %310 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %305 ], [ <i64 576188069258921983, i64 576188069258921983>, %306 ], [ <i64 35747867511423103, i64 35747867511423103>, %282 ]
  %311 = icmp slt <8 x i16> %309, %303
  %312 = sext <8 x i1> %311 to <8 x i16>
  %313 = bitcast <8 x i16> %312 to <2 x i64>
  %314 = icmp sgt <8 x i16> %308, %303
  %315 = or <8 x i1> %311, %314
  %316 = sext <8 x i1> %315 to <8 x i16>
  %317 = bitcast <8 x i16> %316 to <2 x i64>
  %318 = xor <2 x i64> %317, <i64 -1, i64 -1>
  %319 = and <2 x i64> %318, %304
  %320 = and <2 x i64> %310, %313
  %321 = select <8 x i1> %314, <8 x i16> %308, <8 x i16> zeroinitializer
  %322 = bitcast <8 x i16> %321 to <2 x i64>
  %323 = or <2 x i64> %320, %322
  %324 = or <2 x i64> %323, %319
  %325 = bitcast <2 x i64> %324 to <8 x i16>
  %326 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %325, <8 x i16> %107) #6
  %327 = bitcast <2 x i64> %267 to <8 x i16>
  %328 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %113, <8 x i16> %327) #6
  %329 = bitcast <8 x i16> %328 to <2 x i64>
  switch i32 %5, label %331 [
    i32 8, label %332
    i32 10, label %330
  ]

330:                                              ; preds = %307
  br label %332

331:                                              ; preds = %307
  br label %332

332:                                              ; preds = %307, %330, %331
  %333 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %330 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %331 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %307 ]
  %334 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %330 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %331 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %307 ]
  %335 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %330 ], [ <i64 576188069258921983, i64 576188069258921983>, %331 ], [ <i64 35747867511423103, i64 35747867511423103>, %307 ]
  %336 = icmp slt <8 x i16> %334, %328
  %337 = sext <8 x i1> %336 to <8 x i16>
  %338 = bitcast <8 x i16> %337 to <2 x i64>
  %339 = icmp sgt <8 x i16> %333, %328
  %340 = or <8 x i1> %336, %339
  %341 = sext <8 x i1> %340 to <8 x i16>
  %342 = bitcast <8 x i16> %341 to <2 x i64>
  %343 = xor <2 x i64> %342, <i64 -1, i64 -1>
  %344 = and <2 x i64> %343, %329
  %345 = and <2 x i64> %335, %338
  %346 = select <8 x i1> %339, <8 x i16> %333, <8 x i16> zeroinitializer
  %347 = bitcast <8 x i16> %346 to <2 x i64>
  %348 = or <2 x i64> %345, %347
  %349 = or <2 x i64> %348, %344
  %350 = bitcast <2 x i64> %349 to <8 x i16>
  %351 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %350, <8 x i16> %107) #6
  %352 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %112, <8 x i16> %302) #6
  %353 = bitcast <8 x i16> %352 to <2 x i64>
  switch i32 %5, label %355 [
    i32 8, label %356
    i32 10, label %354
  ]

354:                                              ; preds = %332
  br label %356

355:                                              ; preds = %332
  br label %356

356:                                              ; preds = %332, %354, %355
  %357 = phi <8 x i16> [ <i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512, i16 -512>, %354 ], [ <i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048, i16 -2048>, %355 ], [ <i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128, i16 -128>, %332 ]
  %358 = phi <8 x i16> [ <i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511, i16 511>, %354 ], [ <i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047, i16 2047>, %355 ], [ <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>, %332 ]
  %359 = phi <2 x i64> [ <i64 143835907860922879, i64 143835907860922879>, %354 ], [ <i64 576188069258921983, i64 576188069258921983>, %355 ], [ <i64 35747867511423103, i64 35747867511423103>, %332 ]
  %360 = icmp slt <8 x i16> %358, %352
  %361 = sext <8 x i1> %360 to <8 x i16>
  %362 = bitcast <8 x i16> %361 to <2 x i64>
  %363 = icmp sgt <8 x i16> %357, %352
  %364 = or <8 x i1> %360, %363
  %365 = sext <8 x i1> %364 to <8 x i16>
  %366 = bitcast <8 x i16> %365 to <2 x i64>
  %367 = xor <2 x i64> %366, <i64 -1, i64 -1>
  %368 = and <2 x i64> %367, %353
  %369 = and <2 x i64> %359, %362
  %370 = select <8 x i1> %363, <8 x i16> %357, <8 x i16> zeroinitializer
  %371 = bitcast <8 x i16> %370 to <2 x i64>
  %372 = or <2 x i64> %369, %371
  %373 = or <2 x i64> %372, %368
  %374 = bitcast <2 x i64> %373 to <8 x i16>
  %375 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %374, <8 x i16> %107) #6
  store <8 x i16> %375, <8 x i16>* %23, align 1
  store <8 x i16> %351, <8 x i16>* %28, align 1
  store <8 x i16> %301, <8 x i16>* %30, align 1
  store <8 x i16> %326, <8 x i16>* %33, align 1
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_horizontal_4_dual_sse2(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #2 {
  tail call void @vpx_highbd_lpf_horizontal_4_sse2(i16* %0, i32 %1, i8* %2, i8* %3, i8* %4, i32 %8)
  %10 = getelementptr inbounds i16, i16* %0, i64 8
  tail call void @vpx_highbd_lpf_horizontal_4_sse2(i16* %10, i32 %1, i8* %5, i8* %6, i8* %7, i32 %8)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_vertical_4_sse2(i16*, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #3 {
  %7 = alloca [64 x i16], align 16
  %8 = bitcast [64 x i16]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 56
  %10 = bitcast i16* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 16, i1 false)
  %11 = getelementptr inbounds i16, i16* %0, i64 -4
  %12 = sext i32 %1 to i64
  %13 = shl nsw i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = mul nsw i32 %1, 3
  %16 = sext i32 %15 to i64
  %17 = shl nsw i32 %1, 2
  %18 = sext i32 %17 to i64
  %19 = mul nsw i32 %1, 5
  %20 = sext i32 %19 to i64
  %21 = mul nsw i32 %1, 6
  %22 = sext i32 %21 to i64
  %23 = mul nsw i32 %1, 7
  %24 = sext i32 %23 to i64
  %25 = bitcast i16* %11 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 1
  %27 = getelementptr inbounds i16, i16* %11, i64 %12
  %28 = bitcast i16* %27 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 1
  %30 = getelementptr inbounds i16, i16* %11, i64 %14
  %31 = bitcast i16* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 1
  %33 = getelementptr inbounds i16, i16* %11, i64 %16
  %34 = bitcast i16* %33 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %11, i64 %18
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %11, i64 %20
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %11, i64 %22
  %43 = bitcast i16* %42 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 1
  %45 = getelementptr inbounds i16, i16* %11, i64 %24
  %46 = bitcast i16* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 1
  %48 = shufflevector <8 x i16> %26, <8 x i16> %29, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %49 = shufflevector <8 x i16> %32, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %50 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %51 = shufflevector <8 x i16> %44, <8 x i16> %47, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = bitcast <8 x i16> %48 to <4 x i32>
  %53 = bitcast <8 x i16> %49 to <4 x i32>
  %54 = shufflevector <4 x i32> %52, <4 x i32> %53, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %55 = bitcast <4 x i32> %54 to <2 x i64>
  %56 = bitcast <8 x i16> %50 to <4 x i32>
  %57 = bitcast <8 x i16> %51 to <4 x i32>
  %58 = shufflevector <4 x i32> %56, <4 x i32> %57, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = shufflevector <2 x i64> %55, <2 x i64> %59, <2 x i32> <i32 0, i32 2>
  %61 = shufflevector <2 x i64> %55, <2 x i64> %59, <2 x i32> <i32 1, i32 3>
  %62 = bitcast [64 x i16]* %7 to <2 x i64>*
  store <2 x i64> %60, <2 x i64>* %62, align 16
  %63 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 8
  %64 = bitcast i16* %63 to <2 x i64>*
  store <2 x i64> %61, <2 x i64>* %64, align 16
  %65 = shufflevector <4 x i32> %52, <4 x i32> %53, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %66 = bitcast <4 x i32> %65 to <2 x i64>
  %67 = shufflevector <4 x i32> %56, <4 x i32> %57, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %68 = bitcast <4 x i32> %67 to <2 x i64>
  %69 = shufflevector <2 x i64> %66, <2 x i64> %68, <2 x i32> <i32 0, i32 2>
  %70 = shufflevector <2 x i64> %66, <2 x i64> %68, <2 x i32> <i32 1, i32 3>
  %71 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 16
  %72 = bitcast i16* %71 to <2 x i64>*
  store <2 x i64> %69, <2 x i64>* %72, align 16
  %73 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 24
  %74 = bitcast i16* %73 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %74, align 16
  %75 = shufflevector <8 x i16> %26, <8 x i16> %29, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %76 = shufflevector <8 x i16> %32, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %77 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %78 = shufflevector <8 x i16> %44, <8 x i16> %47, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %79 = bitcast <8 x i16> %75 to <4 x i32>
  %80 = bitcast <8 x i16> %76 to <4 x i32>
  %81 = shufflevector <4 x i32> %79, <4 x i32> %80, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %82 = bitcast <4 x i32> %81 to <2 x i64>
  %83 = bitcast <8 x i16> %77 to <4 x i32>
  %84 = bitcast <8 x i16> %78 to <4 x i32>
  %85 = shufflevector <4 x i32> %83, <4 x i32> %84, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %86 = bitcast <4 x i32> %85 to <2 x i64>
  %87 = shufflevector <2 x i64> %82, <2 x i64> %86, <2 x i32> <i32 0, i32 2>
  %88 = shufflevector <2 x i64> %82, <2 x i64> %86, <2 x i32> <i32 1, i32 3>
  %89 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 32
  %90 = bitcast i16* %89 to <2 x i64>*
  store <2 x i64> %87, <2 x i64>* %90, align 16
  %91 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 40
  %92 = bitcast i16* %91 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %92, align 16
  %93 = shufflevector <4 x i32> %79, <4 x i32> %80, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %94 = bitcast <4 x i32> %93 to <2 x i64>
  %95 = shufflevector <4 x i32> %83, <4 x i32> %84, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = shufflevector <2 x i64> %94, <2 x i64> %96, <2 x i32> <i32 0, i32 2>
  %98 = shufflevector <2 x i64> %94, <2 x i64> %96, <2 x i32> <i32 1, i32 3>
  %99 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 48
  %100 = bitcast i16* %99 to <2 x i64>*
  store <2 x i64> %97, <2 x i64>* %100, align 16
  %101 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 56
  %102 = bitcast i16* %101 to <2 x i64>*
  store <2 x i64> %98, <2 x i64>* %102, align 16
  call void @vpx_highbd_lpf_horizontal_4_sse2(i16* %89, i32 8, i8* %2, i8* %3, i8* %4, i32 %5)
  %103 = bitcast [64 x i16]* %7 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 16
  %105 = bitcast i16* %63 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 16
  %107 = bitcast i16* %71 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 16
  %109 = bitcast i16* %73 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 16
  %111 = bitcast i16* %89 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 16
  %113 = bitcast i16* %91 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 16
  %115 = bitcast i16* %99 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 16
  %117 = bitcast i16* %101 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 16
  %119 = shufflevector <8 x i16> %104, <8 x i16> %106, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %120 = shufflevector <8 x i16> %108, <8 x i16> %110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %121 = shufflevector <8 x i16> %112, <8 x i16> %114, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %122 = shufflevector <8 x i16> %116, <8 x i16> %118, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %123 = bitcast <8 x i16> %119 to <4 x i32>
  %124 = bitcast <8 x i16> %120 to <4 x i32>
  %125 = shufflevector <4 x i32> %123, <4 x i32> %124, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %126 = bitcast <4 x i32> %125 to <2 x i64>
  %127 = bitcast <8 x i16> %121 to <4 x i32>
  %128 = bitcast <8 x i16> %122 to <4 x i32>
  %129 = shufflevector <4 x i32> %127, <4 x i32> %128, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %130 = bitcast <4 x i32> %129 to <2 x i64>
  %131 = shufflevector <2 x i64> %126, <2 x i64> %130, <2 x i32> <i32 0, i32 2>
  %132 = shufflevector <2 x i64> %126, <2 x i64> %130, <2 x i32> <i32 1, i32 3>
  %133 = bitcast i16* %11 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %133, align 1
  %134 = bitcast i16* %27 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %134, align 1
  %135 = shufflevector <4 x i32> %123, <4 x i32> %124, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %136 = bitcast <4 x i32> %135 to <2 x i64>
  %137 = shufflevector <4 x i32> %127, <4 x i32> %128, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %138 = bitcast <4 x i32> %137 to <2 x i64>
  %139 = shufflevector <2 x i64> %136, <2 x i64> %138, <2 x i32> <i32 0, i32 2>
  %140 = shufflevector <2 x i64> %136, <2 x i64> %138, <2 x i32> <i32 1, i32 3>
  %141 = bitcast i16* %30 to <2 x i64>*
  store <2 x i64> %139, <2 x i64>* %141, align 1
  %142 = bitcast i16* %33 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %142, align 1
  %143 = shufflevector <8 x i16> %104, <8 x i16> %106, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %144 = shufflevector <8 x i16> %108, <8 x i16> %110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %145 = shufflevector <8 x i16> %112, <8 x i16> %114, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %146 = shufflevector <8 x i16> %116, <8 x i16> %118, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %147 = bitcast <8 x i16> %143 to <4 x i32>
  %148 = bitcast <8 x i16> %144 to <4 x i32>
  %149 = shufflevector <4 x i32> %147, <4 x i32> %148, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %150 = bitcast <4 x i32> %149 to <2 x i64>
  %151 = bitcast <8 x i16> %145 to <4 x i32>
  %152 = bitcast <8 x i16> %146 to <4 x i32>
  %153 = shufflevector <4 x i32> %151, <4 x i32> %152, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %154 = bitcast <4 x i32> %153 to <2 x i64>
  %155 = shufflevector <2 x i64> %150, <2 x i64> %154, <2 x i32> <i32 0, i32 2>
  %156 = shufflevector <2 x i64> %150, <2 x i64> %154, <2 x i32> <i32 1, i32 3>
  %157 = bitcast i16* %36 to <2 x i64>*
  store <2 x i64> %155, <2 x i64>* %157, align 1
  %158 = bitcast i16* %39 to <2 x i64>*
  store <2 x i64> %156, <2 x i64>* %158, align 1
  %159 = shufflevector <4 x i32> %147, <4 x i32> %148, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %160 = bitcast <4 x i32> %159 to <2 x i64>
  %161 = shufflevector <4 x i32> %151, <4 x i32> %152, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %162 = bitcast <4 x i32> %161 to <2 x i64>
  %163 = shufflevector <2 x i64> %160, <2 x i64> %162, <2 x i32> <i32 0, i32 2>
  %164 = shufflevector <2 x i64> %160, <2 x i64> %162, <2 x i32> <i32 1, i32 3>
  %165 = bitcast i16* %42 to <2 x i64>*
  store <2 x i64> %163, <2 x i64>* %165, align 1
  %166 = bitcast i16* %45 to <2 x i64>*
  store <2 x i64> %164, <2 x i64>* %166, align 1
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_vertical_4_dual_sse2(i16*, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #3 {
  %10 = alloca [128 x i16], align 16
  %11 = bitcast [128 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %11) #6
  %12 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 8
  %13 = bitcast i16* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 240, i1 false)
  %14 = getelementptr inbounds i16, i16* %0, i64 -4
  %15 = shl nsw i32 %1, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i16, i16* %14, i64 %16
  %18 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 8
  %19 = sext i32 %1 to i64
  %20 = shl nsw i32 %1, 1
  %21 = sext i32 %20 to i64
  %22 = mul nsw i32 %1, 3
  %23 = sext i32 %22 to i64
  %24 = shl nsw i32 %1, 2
  %25 = sext i32 %24 to i64
  %26 = mul nsw i32 %1, 5
  %27 = sext i32 %26 to i64
  %28 = mul nsw i32 %1, 6
  %29 = sext i32 %28 to i64
  %30 = mul nsw i32 %1, 7
  %31 = sext i32 %30 to i64
  %32 = bitcast i16* %14 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = getelementptr inbounds i16, i16* %14, i64 %19
  %35 = bitcast i16* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 1
  %37 = getelementptr inbounds i16, i16* %14, i64 %21
  %38 = bitcast i16* %37 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %14, i64 %23
  %41 = bitcast i16* %40 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %14, i64 %25
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %14, i64 %27
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 1
  %49 = getelementptr inbounds i16, i16* %14, i64 %29
  %50 = bitcast i16* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 1
  %52 = getelementptr inbounds i16, i16* %14, i64 %31
  %53 = bitcast i16* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 1
  %55 = shufflevector <8 x i16> %33, <8 x i16> %36, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %56 = shufflevector <8 x i16> %39, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %57 = shufflevector <8 x i16> %45, <8 x i16> %48, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %58 = shufflevector <8 x i16> %51, <8 x i16> %54, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %59 = bitcast <8 x i16> %55 to <4 x i32>
  %60 = bitcast <8 x i16> %56 to <4 x i32>
  %61 = shufflevector <4 x i32> %59, <4 x i32> %60, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %62 = bitcast <4 x i32> %61 to <2 x i64>
  %63 = bitcast <8 x i16> %57 to <4 x i32>
  %64 = bitcast <8 x i16> %58 to <4 x i32>
  %65 = shufflevector <4 x i32> %63, <4 x i32> %64, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %66 = bitcast <4 x i32> %65 to <2 x i64>
  %67 = shufflevector <2 x i64> %62, <2 x i64> %66, <2 x i32> <i32 0, i32 2>
  %68 = shufflevector <2 x i64> %62, <2 x i64> %66, <2 x i32> <i32 1, i32 3>
  %69 = bitcast [128 x i16]* %10 to <2 x i64>*
  store <2 x i64> %67, <2 x i64>* %69, align 16
  %70 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 16
  %71 = bitcast i16* %70 to <2 x i64>*
  store <2 x i64> %68, <2 x i64>* %71, align 16
  %72 = shufflevector <4 x i32> %59, <4 x i32> %60, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %73 = bitcast <4 x i32> %72 to <2 x i64>
  %74 = shufflevector <4 x i32> %63, <4 x i32> %64, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %75 = bitcast <4 x i32> %74 to <2 x i64>
  %76 = shufflevector <2 x i64> %73, <2 x i64> %75, <2 x i32> <i32 0, i32 2>
  %77 = shufflevector <2 x i64> %73, <2 x i64> %75, <2 x i32> <i32 1, i32 3>
  %78 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 32
  %79 = bitcast i16* %78 to <2 x i64>*
  store <2 x i64> %76, <2 x i64>* %79, align 16
  %80 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 48
  %81 = bitcast i16* %80 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %81, align 16
  %82 = shufflevector <8 x i16> %33, <8 x i16> %36, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %83 = shufflevector <8 x i16> %39, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = shufflevector <8 x i16> %45, <8 x i16> %48, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %85 = shufflevector <8 x i16> %51, <8 x i16> %54, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %86 = bitcast <8 x i16> %82 to <4 x i32>
  %87 = bitcast <8 x i16> %83 to <4 x i32>
  %88 = shufflevector <4 x i32> %86, <4 x i32> %87, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %89 = bitcast <4 x i32> %88 to <2 x i64>
  %90 = bitcast <8 x i16> %84 to <4 x i32>
  %91 = bitcast <8 x i16> %85 to <4 x i32>
  %92 = shufflevector <4 x i32> %90, <4 x i32> %91, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %93 = bitcast <4 x i32> %92 to <2 x i64>
  %94 = shufflevector <2 x i64> %89, <2 x i64> %93, <2 x i32> <i32 0, i32 2>
  %95 = shufflevector <2 x i64> %89, <2 x i64> %93, <2 x i32> <i32 1, i32 3>
  %96 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 64
  %97 = bitcast i16* %96 to <2 x i64>*
  store <2 x i64> %94, <2 x i64>* %97, align 16
  %98 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 80
  %99 = bitcast i16* %98 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %99, align 16
  %100 = shufflevector <4 x i32> %86, <4 x i32> %87, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %101 = bitcast <4 x i32> %100 to <2 x i64>
  %102 = shufflevector <4 x i32> %90, <4 x i32> %91, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %103 = bitcast <4 x i32> %102 to <2 x i64>
  %104 = shufflevector <2 x i64> %101, <2 x i64> %103, <2 x i32> <i32 0, i32 2>
  %105 = shufflevector <2 x i64> %101, <2 x i64> %103, <2 x i32> <i32 1, i32 3>
  %106 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 96
  %107 = bitcast i16* %106 to <2 x i64>*
  store <2 x i64> %104, <2 x i64>* %107, align 16
  %108 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 112
  %109 = bitcast i16* %108 to <2 x i64>*
  store <2 x i64> %105, <2 x i64>* %109, align 16
  %110 = bitcast i16* %17 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 1
  %112 = getelementptr inbounds i16, i16* %17, i64 %19
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 1
  %115 = getelementptr inbounds i16, i16* %17, i64 %21
  %116 = bitcast i16* %115 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 1
  %118 = getelementptr inbounds i16, i16* %17, i64 %23
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 1
  %121 = getelementptr inbounds i16, i16* %17, i64 %25
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 1
  %124 = getelementptr inbounds i16, i16* %17, i64 %27
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 1
  %127 = getelementptr inbounds i16, i16* %17, i64 %29
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 1
  %130 = getelementptr inbounds i16, i16* %17, i64 %31
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 1
  %133 = shufflevector <8 x i16> %111, <8 x i16> %114, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %134 = shufflevector <8 x i16> %117, <8 x i16> %120, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %135 = shufflevector <8 x i16> %123, <8 x i16> %126, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %136 = shufflevector <8 x i16> %129, <8 x i16> %132, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %137 = bitcast <8 x i16> %133 to <4 x i32>
  %138 = bitcast <8 x i16> %134 to <4 x i32>
  %139 = shufflevector <4 x i32> %137, <4 x i32> %138, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %140 = bitcast <4 x i32> %139 to <2 x i64>
  %141 = bitcast <8 x i16> %135 to <4 x i32>
  %142 = bitcast <8 x i16> %136 to <4 x i32>
  %143 = shufflevector <4 x i32> %141, <4 x i32> %142, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %144 = bitcast <4 x i32> %143 to <2 x i64>
  %145 = shufflevector <2 x i64> %140, <2 x i64> %144, <2 x i32> <i32 0, i32 2>
  %146 = shufflevector <2 x i64> %140, <2 x i64> %144, <2 x i32> <i32 1, i32 3>
  %147 = bitcast i16* %18 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %147, align 16
  %148 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 24
  %149 = bitcast i16* %148 to <2 x i64>*
  store <2 x i64> %146, <2 x i64>* %149, align 16
  %150 = shufflevector <4 x i32> %137, <4 x i32> %138, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %151 = bitcast <4 x i32> %150 to <2 x i64>
  %152 = shufflevector <4 x i32> %141, <4 x i32> %142, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %153 = bitcast <4 x i32> %152 to <2 x i64>
  %154 = shufflevector <2 x i64> %151, <2 x i64> %153, <2 x i32> <i32 0, i32 2>
  %155 = shufflevector <2 x i64> %151, <2 x i64> %153, <2 x i32> <i32 1, i32 3>
  %156 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 40
  %157 = bitcast i16* %156 to <2 x i64>*
  store <2 x i64> %154, <2 x i64>* %157, align 16
  %158 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 56
  %159 = bitcast i16* %158 to <2 x i64>*
  store <2 x i64> %155, <2 x i64>* %159, align 16
  %160 = shufflevector <8 x i16> %111, <8 x i16> %114, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %161 = shufflevector <8 x i16> %117, <8 x i16> %120, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %162 = shufflevector <8 x i16> %123, <8 x i16> %126, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %163 = shufflevector <8 x i16> %129, <8 x i16> %132, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %164 = bitcast <8 x i16> %160 to <4 x i32>
  %165 = bitcast <8 x i16> %161 to <4 x i32>
  %166 = shufflevector <4 x i32> %164, <4 x i32> %165, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %167 = bitcast <4 x i32> %166 to <2 x i64>
  %168 = bitcast <8 x i16> %162 to <4 x i32>
  %169 = bitcast <8 x i16> %163 to <4 x i32>
  %170 = shufflevector <4 x i32> %168, <4 x i32> %169, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %171 = bitcast <4 x i32> %170 to <2 x i64>
  %172 = shufflevector <2 x i64> %167, <2 x i64> %171, <2 x i32> <i32 0, i32 2>
  %173 = shufflevector <2 x i64> %167, <2 x i64> %171, <2 x i32> <i32 1, i32 3>
  %174 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 72
  %175 = bitcast i16* %174 to <2 x i64>*
  store <2 x i64> %172, <2 x i64>* %175, align 16
  %176 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 88
  %177 = bitcast i16* %176 to <2 x i64>*
  store <2 x i64> %173, <2 x i64>* %177, align 16
  %178 = shufflevector <4 x i32> %164, <4 x i32> %165, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %179 = bitcast <4 x i32> %178 to <2 x i64>
  %180 = shufflevector <4 x i32> %168, <4 x i32> %169, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %181 = bitcast <4 x i32> %180 to <2 x i64>
  %182 = shufflevector <2 x i64> %179, <2 x i64> %181, <2 x i32> <i32 0, i32 2>
  %183 = shufflevector <2 x i64> %179, <2 x i64> %181, <2 x i32> <i32 1, i32 3>
  %184 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 104
  %185 = bitcast i16* %184 to <2 x i64>*
  store <2 x i64> %182, <2 x i64>* %185, align 16
  %186 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 120
  %187 = bitcast i16* %186 to <2 x i64>*
  store <2 x i64> %183, <2 x i64>* %187, align 16
  call void @vpx_highbd_lpf_horizontal_4_sse2(i16* %96, i32 16, i8* %2, i8* %3, i8* %4, i32 %8) #6
  call void @vpx_highbd_lpf_horizontal_4_sse2(i16* %174, i32 16, i8* %5, i8* %6, i8* %7, i32 %8) #6
  %188 = bitcast [128 x i16]* %10 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 16
  %190 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 16
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 16
  %193 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 32
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 16
  %196 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 48
  %197 = bitcast i16* %196 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 16
  %199 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 64
  %200 = bitcast i16* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 16
  %202 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 80
  %203 = bitcast i16* %202 to <8 x i16>*
  %204 = load <8 x i16>, <8 x i16>* %203, align 16
  %205 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 96
  %206 = bitcast i16* %205 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 16
  %208 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 112
  %209 = bitcast i16* %208 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 16
  %211 = shufflevector <8 x i16> %189, <8 x i16> %192, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %212 = shufflevector <8 x i16> %195, <8 x i16> %198, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %213 = shufflevector <8 x i16> %201, <8 x i16> %204, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %214 = shufflevector <8 x i16> %207, <8 x i16> %210, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %215 = bitcast <8 x i16> %211 to <4 x i32>
  %216 = bitcast <8 x i16> %212 to <4 x i32>
  %217 = shufflevector <4 x i32> %215, <4 x i32> %216, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %218 = bitcast <4 x i32> %217 to <2 x i64>
  %219 = bitcast <8 x i16> %213 to <4 x i32>
  %220 = bitcast <8 x i16> %214 to <4 x i32>
  %221 = shufflevector <4 x i32> %219, <4 x i32> %220, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %222 = bitcast <4 x i32> %221 to <2 x i64>
  %223 = shufflevector <2 x i64> %218, <2 x i64> %222, <2 x i32> <i32 0, i32 2>
  %224 = shufflevector <2 x i64> %218, <2 x i64> %222, <2 x i32> <i32 1, i32 3>
  %225 = bitcast i16* %14 to <2 x i64>*
  store <2 x i64> %223, <2 x i64>* %225, align 1
  %226 = bitcast i16* %34 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %226, align 1
  %227 = shufflevector <4 x i32> %215, <4 x i32> %216, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %228 = bitcast <4 x i32> %227 to <2 x i64>
  %229 = shufflevector <4 x i32> %219, <4 x i32> %220, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %230 = bitcast <4 x i32> %229 to <2 x i64>
  %231 = shufflevector <2 x i64> %228, <2 x i64> %230, <2 x i32> <i32 0, i32 2>
  %232 = shufflevector <2 x i64> %228, <2 x i64> %230, <2 x i32> <i32 1, i32 3>
  %233 = bitcast i16* %37 to <2 x i64>*
  store <2 x i64> %231, <2 x i64>* %233, align 1
  %234 = bitcast i16* %40 to <2 x i64>*
  store <2 x i64> %232, <2 x i64>* %234, align 1
  %235 = shufflevector <8 x i16> %189, <8 x i16> %192, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %236 = shufflevector <8 x i16> %195, <8 x i16> %198, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %237 = shufflevector <8 x i16> %201, <8 x i16> %204, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %238 = shufflevector <8 x i16> %207, <8 x i16> %210, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %239 = bitcast <8 x i16> %235 to <4 x i32>
  %240 = bitcast <8 x i16> %236 to <4 x i32>
  %241 = shufflevector <4 x i32> %239, <4 x i32> %240, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %242 = bitcast <4 x i32> %241 to <2 x i64>
  %243 = bitcast <8 x i16> %237 to <4 x i32>
  %244 = bitcast <8 x i16> %238 to <4 x i32>
  %245 = shufflevector <4 x i32> %243, <4 x i32> %244, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %246 = bitcast <4 x i32> %245 to <2 x i64>
  %247 = shufflevector <2 x i64> %242, <2 x i64> %246, <2 x i32> <i32 0, i32 2>
  %248 = shufflevector <2 x i64> %242, <2 x i64> %246, <2 x i32> <i32 1, i32 3>
  %249 = bitcast i16* %43 to <2 x i64>*
  store <2 x i64> %247, <2 x i64>* %249, align 1
  %250 = bitcast i16* %46 to <2 x i64>*
  store <2 x i64> %248, <2 x i64>* %250, align 1
  %251 = shufflevector <4 x i32> %239, <4 x i32> %240, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %252 = bitcast <4 x i32> %251 to <2 x i64>
  %253 = shufflevector <4 x i32> %243, <4 x i32> %244, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %254 = bitcast <4 x i32> %253 to <2 x i64>
  %255 = shufflevector <2 x i64> %252, <2 x i64> %254, <2 x i32> <i32 0, i32 2>
  %256 = shufflevector <2 x i64> %252, <2 x i64> %254, <2 x i32> <i32 1, i32 3>
  %257 = bitcast i16* %49 to <2 x i64>*
  store <2 x i64> %255, <2 x i64>* %257, align 1
  %258 = bitcast i16* %52 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %258, align 1
  %259 = bitcast i16* %18 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 16
  %261 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 24
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 16
  %264 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 40
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 16
  %267 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 56
  %268 = bitcast i16* %267 to <8 x i16>*
  %269 = load <8 x i16>, <8 x i16>* %268, align 16
  %270 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 72
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 16
  %273 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 88
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 16
  %276 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 104
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 16
  %279 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 120
  %280 = bitcast i16* %279 to <8 x i16>*
  %281 = load <8 x i16>, <8 x i16>* %280, align 16
  %282 = shufflevector <8 x i16> %260, <8 x i16> %263, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %283 = shufflevector <8 x i16> %266, <8 x i16> %269, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %284 = shufflevector <8 x i16> %272, <8 x i16> %275, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %285 = shufflevector <8 x i16> %278, <8 x i16> %281, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %286 = bitcast <8 x i16> %282 to <4 x i32>
  %287 = bitcast <8 x i16> %283 to <4 x i32>
  %288 = shufflevector <4 x i32> %286, <4 x i32> %287, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %289 = bitcast <4 x i32> %288 to <2 x i64>
  %290 = bitcast <8 x i16> %284 to <4 x i32>
  %291 = bitcast <8 x i16> %285 to <4 x i32>
  %292 = shufflevector <4 x i32> %290, <4 x i32> %291, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %293 = bitcast <4 x i32> %292 to <2 x i64>
  %294 = shufflevector <2 x i64> %289, <2 x i64> %293, <2 x i32> <i32 0, i32 2>
  %295 = shufflevector <2 x i64> %289, <2 x i64> %293, <2 x i32> <i32 1, i32 3>
  %296 = bitcast i16* %17 to <2 x i64>*
  store <2 x i64> %294, <2 x i64>* %296, align 1
  %297 = bitcast i16* %112 to <2 x i64>*
  store <2 x i64> %295, <2 x i64>* %297, align 1
  %298 = shufflevector <4 x i32> %286, <4 x i32> %287, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %299 = bitcast <4 x i32> %298 to <2 x i64>
  %300 = shufflevector <4 x i32> %290, <4 x i32> %291, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %301 = bitcast <4 x i32> %300 to <2 x i64>
  %302 = shufflevector <2 x i64> %299, <2 x i64> %301, <2 x i32> <i32 0, i32 2>
  %303 = shufflevector <2 x i64> %299, <2 x i64> %301, <2 x i32> <i32 1, i32 3>
  %304 = bitcast i16* %115 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %304, align 1
  %305 = bitcast i16* %118 to <2 x i64>*
  store <2 x i64> %303, <2 x i64>* %305, align 1
  %306 = shufflevector <8 x i16> %260, <8 x i16> %263, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %307 = shufflevector <8 x i16> %266, <8 x i16> %269, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %308 = shufflevector <8 x i16> %272, <8 x i16> %275, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %309 = shufflevector <8 x i16> %278, <8 x i16> %281, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %310 = bitcast <8 x i16> %306 to <4 x i32>
  %311 = bitcast <8 x i16> %307 to <4 x i32>
  %312 = shufflevector <4 x i32> %310, <4 x i32> %311, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %313 = bitcast <4 x i32> %312 to <2 x i64>
  %314 = bitcast <8 x i16> %308 to <4 x i32>
  %315 = bitcast <8 x i16> %309 to <4 x i32>
  %316 = shufflevector <4 x i32> %314, <4 x i32> %315, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %317 = bitcast <4 x i32> %316 to <2 x i64>
  %318 = shufflevector <2 x i64> %313, <2 x i64> %317, <2 x i32> <i32 0, i32 2>
  %319 = shufflevector <2 x i64> %313, <2 x i64> %317, <2 x i32> <i32 1, i32 3>
  %320 = bitcast i16* %121 to <2 x i64>*
  store <2 x i64> %318, <2 x i64>* %320, align 1
  %321 = bitcast i16* %124 to <2 x i64>*
  store <2 x i64> %319, <2 x i64>* %321, align 1
  %322 = shufflevector <4 x i32> %310, <4 x i32> %311, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %323 = bitcast <4 x i32> %322 to <2 x i64>
  %324 = shufflevector <4 x i32> %314, <4 x i32> %315, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %325 = bitcast <4 x i32> %324 to <2 x i64>
  %326 = shufflevector <2 x i64> %323, <2 x i64> %325, <2 x i32> <i32 0, i32 2>
  %327 = shufflevector <2 x i64> %323, <2 x i64> %325, <2 x i32> <i32 1, i32 3>
  %328 = bitcast i16* %127 to <2 x i64>*
  store <2 x i64> %326, <2 x i64>* %328, align 1
  %329 = bitcast i16* %130 to <2 x i64>*
  store <2 x i64> %327, <2 x i64>* %329, align 1
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %11) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_vertical_8_sse2(i16*, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #3 {
  %7 = alloca [64 x i16], align 16
  %8 = bitcast [64 x i16]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 56
  %10 = bitcast i16* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 16, i1 false)
  %11 = getelementptr inbounds i16, i16* %0, i64 -4
  %12 = sext i32 %1 to i64
  %13 = shl nsw i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = mul nsw i32 %1, 3
  %16 = sext i32 %15 to i64
  %17 = shl nsw i32 %1, 2
  %18 = sext i32 %17 to i64
  %19 = mul nsw i32 %1, 5
  %20 = sext i32 %19 to i64
  %21 = mul nsw i32 %1, 6
  %22 = sext i32 %21 to i64
  %23 = mul nsw i32 %1, 7
  %24 = sext i32 %23 to i64
  %25 = bitcast i16* %11 to <8 x i16>*
  %26 = load <8 x i16>, <8 x i16>* %25, align 1
  %27 = getelementptr inbounds i16, i16* %11, i64 %12
  %28 = bitcast i16* %27 to <8 x i16>*
  %29 = load <8 x i16>, <8 x i16>* %28, align 1
  %30 = getelementptr inbounds i16, i16* %11, i64 %14
  %31 = bitcast i16* %30 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 1
  %33 = getelementptr inbounds i16, i16* %11, i64 %16
  %34 = bitcast i16* %33 to <8 x i16>*
  %35 = load <8 x i16>, <8 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %11, i64 %18
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %11, i64 %20
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %11, i64 %22
  %43 = bitcast i16* %42 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 1
  %45 = getelementptr inbounds i16, i16* %11, i64 %24
  %46 = bitcast i16* %45 to <8 x i16>*
  %47 = load <8 x i16>, <8 x i16>* %46, align 1
  %48 = shufflevector <8 x i16> %26, <8 x i16> %29, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %49 = shufflevector <8 x i16> %32, <8 x i16> %35, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %50 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %51 = shufflevector <8 x i16> %44, <8 x i16> %47, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = bitcast <8 x i16> %48 to <4 x i32>
  %53 = bitcast <8 x i16> %49 to <4 x i32>
  %54 = shufflevector <4 x i32> %52, <4 x i32> %53, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %55 = bitcast <4 x i32> %54 to <2 x i64>
  %56 = bitcast <8 x i16> %50 to <4 x i32>
  %57 = bitcast <8 x i16> %51 to <4 x i32>
  %58 = shufflevector <4 x i32> %56, <4 x i32> %57, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = shufflevector <2 x i64> %55, <2 x i64> %59, <2 x i32> <i32 0, i32 2>
  %61 = shufflevector <2 x i64> %55, <2 x i64> %59, <2 x i32> <i32 1, i32 3>
  %62 = bitcast [64 x i16]* %7 to <2 x i64>*
  store <2 x i64> %60, <2 x i64>* %62, align 16
  %63 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 8
  %64 = bitcast i16* %63 to <2 x i64>*
  store <2 x i64> %61, <2 x i64>* %64, align 16
  %65 = shufflevector <4 x i32> %52, <4 x i32> %53, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %66 = bitcast <4 x i32> %65 to <2 x i64>
  %67 = shufflevector <4 x i32> %56, <4 x i32> %57, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %68 = bitcast <4 x i32> %67 to <2 x i64>
  %69 = shufflevector <2 x i64> %66, <2 x i64> %68, <2 x i32> <i32 0, i32 2>
  %70 = shufflevector <2 x i64> %66, <2 x i64> %68, <2 x i32> <i32 1, i32 3>
  %71 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 16
  %72 = bitcast i16* %71 to <2 x i64>*
  store <2 x i64> %69, <2 x i64>* %72, align 16
  %73 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 24
  %74 = bitcast i16* %73 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %74, align 16
  %75 = shufflevector <8 x i16> %26, <8 x i16> %29, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %76 = shufflevector <8 x i16> %32, <8 x i16> %35, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %77 = shufflevector <8 x i16> %38, <8 x i16> %41, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %78 = shufflevector <8 x i16> %44, <8 x i16> %47, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %79 = bitcast <8 x i16> %75 to <4 x i32>
  %80 = bitcast <8 x i16> %76 to <4 x i32>
  %81 = shufflevector <4 x i32> %79, <4 x i32> %80, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %82 = bitcast <4 x i32> %81 to <2 x i64>
  %83 = bitcast <8 x i16> %77 to <4 x i32>
  %84 = bitcast <8 x i16> %78 to <4 x i32>
  %85 = shufflevector <4 x i32> %83, <4 x i32> %84, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %86 = bitcast <4 x i32> %85 to <2 x i64>
  %87 = shufflevector <2 x i64> %82, <2 x i64> %86, <2 x i32> <i32 0, i32 2>
  %88 = shufflevector <2 x i64> %82, <2 x i64> %86, <2 x i32> <i32 1, i32 3>
  %89 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 32
  %90 = bitcast i16* %89 to <2 x i64>*
  store <2 x i64> %87, <2 x i64>* %90, align 16
  %91 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 40
  %92 = bitcast i16* %91 to <2 x i64>*
  store <2 x i64> %88, <2 x i64>* %92, align 16
  %93 = shufflevector <4 x i32> %79, <4 x i32> %80, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %94 = bitcast <4 x i32> %93 to <2 x i64>
  %95 = shufflevector <4 x i32> %83, <4 x i32> %84, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = shufflevector <2 x i64> %94, <2 x i64> %96, <2 x i32> <i32 0, i32 2>
  %98 = shufflevector <2 x i64> %94, <2 x i64> %96, <2 x i32> <i32 1, i32 3>
  %99 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 48
  %100 = bitcast i16* %99 to <2 x i64>*
  store <2 x i64> %97, <2 x i64>* %100, align 16
  %101 = getelementptr inbounds [64 x i16], [64 x i16]* %7, i64 0, i64 56
  %102 = bitcast i16* %101 to <2 x i64>*
  store <2 x i64> %98, <2 x i64>* %102, align 16
  call void @vpx_highbd_lpf_horizontal_8_sse2(i16* %89, i32 8, i8* %2, i8* %3, i8* %4, i32 %5)
  %103 = bitcast [64 x i16]* %7 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 16
  %105 = bitcast i16* %63 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 16
  %107 = bitcast i16* %71 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 16
  %109 = bitcast i16* %73 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 16
  %111 = bitcast i16* %89 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 16
  %113 = bitcast i16* %91 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 16
  %115 = bitcast i16* %99 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 16
  %117 = bitcast i16* %101 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 16
  %119 = shufflevector <8 x i16> %104, <8 x i16> %106, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %120 = shufflevector <8 x i16> %108, <8 x i16> %110, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %121 = shufflevector <8 x i16> %112, <8 x i16> %114, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %122 = shufflevector <8 x i16> %116, <8 x i16> %118, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %123 = bitcast <8 x i16> %119 to <4 x i32>
  %124 = bitcast <8 x i16> %120 to <4 x i32>
  %125 = shufflevector <4 x i32> %123, <4 x i32> %124, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %126 = bitcast <4 x i32> %125 to <2 x i64>
  %127 = bitcast <8 x i16> %121 to <4 x i32>
  %128 = bitcast <8 x i16> %122 to <4 x i32>
  %129 = shufflevector <4 x i32> %127, <4 x i32> %128, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %130 = bitcast <4 x i32> %129 to <2 x i64>
  %131 = shufflevector <2 x i64> %126, <2 x i64> %130, <2 x i32> <i32 0, i32 2>
  %132 = shufflevector <2 x i64> %126, <2 x i64> %130, <2 x i32> <i32 1, i32 3>
  %133 = bitcast i16* %11 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %133, align 1
  %134 = bitcast i16* %27 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %134, align 1
  %135 = shufflevector <4 x i32> %123, <4 x i32> %124, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %136 = bitcast <4 x i32> %135 to <2 x i64>
  %137 = shufflevector <4 x i32> %127, <4 x i32> %128, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %138 = bitcast <4 x i32> %137 to <2 x i64>
  %139 = shufflevector <2 x i64> %136, <2 x i64> %138, <2 x i32> <i32 0, i32 2>
  %140 = shufflevector <2 x i64> %136, <2 x i64> %138, <2 x i32> <i32 1, i32 3>
  %141 = bitcast i16* %30 to <2 x i64>*
  store <2 x i64> %139, <2 x i64>* %141, align 1
  %142 = bitcast i16* %33 to <2 x i64>*
  store <2 x i64> %140, <2 x i64>* %142, align 1
  %143 = shufflevector <8 x i16> %104, <8 x i16> %106, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %144 = shufflevector <8 x i16> %108, <8 x i16> %110, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %145 = shufflevector <8 x i16> %112, <8 x i16> %114, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %146 = shufflevector <8 x i16> %116, <8 x i16> %118, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %147 = bitcast <8 x i16> %143 to <4 x i32>
  %148 = bitcast <8 x i16> %144 to <4 x i32>
  %149 = shufflevector <4 x i32> %147, <4 x i32> %148, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %150 = bitcast <4 x i32> %149 to <2 x i64>
  %151 = bitcast <8 x i16> %145 to <4 x i32>
  %152 = bitcast <8 x i16> %146 to <4 x i32>
  %153 = shufflevector <4 x i32> %151, <4 x i32> %152, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %154 = bitcast <4 x i32> %153 to <2 x i64>
  %155 = shufflevector <2 x i64> %150, <2 x i64> %154, <2 x i32> <i32 0, i32 2>
  %156 = shufflevector <2 x i64> %150, <2 x i64> %154, <2 x i32> <i32 1, i32 3>
  %157 = bitcast i16* %36 to <2 x i64>*
  store <2 x i64> %155, <2 x i64>* %157, align 1
  %158 = bitcast i16* %39 to <2 x i64>*
  store <2 x i64> %156, <2 x i64>* %158, align 1
  %159 = shufflevector <4 x i32> %147, <4 x i32> %148, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %160 = bitcast <4 x i32> %159 to <2 x i64>
  %161 = shufflevector <4 x i32> %151, <4 x i32> %152, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %162 = bitcast <4 x i32> %161 to <2 x i64>
  %163 = shufflevector <2 x i64> %160, <2 x i64> %162, <2 x i32> <i32 0, i32 2>
  %164 = shufflevector <2 x i64> %160, <2 x i64> %162, <2 x i32> <i32 1, i32 3>
  %165 = bitcast i16* %42 to <2 x i64>*
  store <2 x i64> %163, <2 x i64>* %165, align 1
  %166 = bitcast i16* %45 to <2 x i64>*
  store <2 x i64> %164, <2 x i64>* %166, align 1
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_vertical_8_dual_sse2(i16*, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #3 {
  %10 = alloca [128 x i16], align 16
  %11 = bitcast [128 x i16]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %11) #6
  %12 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 8
  %13 = bitcast i16* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 240, i1 false)
  %14 = getelementptr inbounds i16, i16* %0, i64 -4
  %15 = shl nsw i32 %1, 3
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i16, i16* %14, i64 %16
  %18 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 8
  %19 = sext i32 %1 to i64
  %20 = shl nsw i32 %1, 1
  %21 = sext i32 %20 to i64
  %22 = mul nsw i32 %1, 3
  %23 = sext i32 %22 to i64
  %24 = shl nsw i32 %1, 2
  %25 = sext i32 %24 to i64
  %26 = mul nsw i32 %1, 5
  %27 = sext i32 %26 to i64
  %28 = mul nsw i32 %1, 6
  %29 = sext i32 %28 to i64
  %30 = mul nsw i32 %1, 7
  %31 = sext i32 %30 to i64
  %32 = bitcast i16* %14 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = getelementptr inbounds i16, i16* %14, i64 %19
  %35 = bitcast i16* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 1
  %37 = getelementptr inbounds i16, i16* %14, i64 %21
  %38 = bitcast i16* %37 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %14, i64 %23
  %41 = bitcast i16* %40 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %14, i64 %25
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %14, i64 %27
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 1
  %49 = getelementptr inbounds i16, i16* %14, i64 %29
  %50 = bitcast i16* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 1
  %52 = getelementptr inbounds i16, i16* %14, i64 %31
  %53 = bitcast i16* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 1
  %55 = shufflevector <8 x i16> %33, <8 x i16> %36, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %56 = shufflevector <8 x i16> %39, <8 x i16> %42, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %57 = shufflevector <8 x i16> %45, <8 x i16> %48, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %58 = shufflevector <8 x i16> %51, <8 x i16> %54, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %59 = bitcast <8 x i16> %55 to <4 x i32>
  %60 = bitcast <8 x i16> %56 to <4 x i32>
  %61 = shufflevector <4 x i32> %59, <4 x i32> %60, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %62 = bitcast <4 x i32> %61 to <2 x i64>
  %63 = bitcast <8 x i16> %57 to <4 x i32>
  %64 = bitcast <8 x i16> %58 to <4 x i32>
  %65 = shufflevector <4 x i32> %63, <4 x i32> %64, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %66 = bitcast <4 x i32> %65 to <2 x i64>
  %67 = shufflevector <2 x i64> %62, <2 x i64> %66, <2 x i32> <i32 0, i32 2>
  %68 = shufflevector <2 x i64> %62, <2 x i64> %66, <2 x i32> <i32 1, i32 3>
  %69 = bitcast [128 x i16]* %10 to <2 x i64>*
  store <2 x i64> %67, <2 x i64>* %69, align 16
  %70 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 16
  %71 = bitcast i16* %70 to <2 x i64>*
  store <2 x i64> %68, <2 x i64>* %71, align 16
  %72 = shufflevector <4 x i32> %59, <4 x i32> %60, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %73 = bitcast <4 x i32> %72 to <2 x i64>
  %74 = shufflevector <4 x i32> %63, <4 x i32> %64, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %75 = bitcast <4 x i32> %74 to <2 x i64>
  %76 = shufflevector <2 x i64> %73, <2 x i64> %75, <2 x i32> <i32 0, i32 2>
  %77 = shufflevector <2 x i64> %73, <2 x i64> %75, <2 x i32> <i32 1, i32 3>
  %78 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 32
  %79 = bitcast i16* %78 to <2 x i64>*
  store <2 x i64> %76, <2 x i64>* %79, align 16
  %80 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 48
  %81 = bitcast i16* %80 to <2 x i64>*
  store <2 x i64> %77, <2 x i64>* %81, align 16
  %82 = shufflevector <8 x i16> %33, <8 x i16> %36, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %83 = shufflevector <8 x i16> %39, <8 x i16> %42, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %84 = shufflevector <8 x i16> %45, <8 x i16> %48, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %85 = shufflevector <8 x i16> %51, <8 x i16> %54, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %86 = bitcast <8 x i16> %82 to <4 x i32>
  %87 = bitcast <8 x i16> %83 to <4 x i32>
  %88 = shufflevector <4 x i32> %86, <4 x i32> %87, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %89 = bitcast <4 x i32> %88 to <2 x i64>
  %90 = bitcast <8 x i16> %84 to <4 x i32>
  %91 = bitcast <8 x i16> %85 to <4 x i32>
  %92 = shufflevector <4 x i32> %90, <4 x i32> %91, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %93 = bitcast <4 x i32> %92 to <2 x i64>
  %94 = shufflevector <2 x i64> %89, <2 x i64> %93, <2 x i32> <i32 0, i32 2>
  %95 = shufflevector <2 x i64> %89, <2 x i64> %93, <2 x i32> <i32 1, i32 3>
  %96 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 64
  %97 = bitcast i16* %96 to <2 x i64>*
  store <2 x i64> %94, <2 x i64>* %97, align 16
  %98 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 80
  %99 = bitcast i16* %98 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %99, align 16
  %100 = shufflevector <4 x i32> %86, <4 x i32> %87, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %101 = bitcast <4 x i32> %100 to <2 x i64>
  %102 = shufflevector <4 x i32> %90, <4 x i32> %91, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %103 = bitcast <4 x i32> %102 to <2 x i64>
  %104 = shufflevector <2 x i64> %101, <2 x i64> %103, <2 x i32> <i32 0, i32 2>
  %105 = shufflevector <2 x i64> %101, <2 x i64> %103, <2 x i32> <i32 1, i32 3>
  %106 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 96
  %107 = bitcast i16* %106 to <2 x i64>*
  store <2 x i64> %104, <2 x i64>* %107, align 16
  %108 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 112
  %109 = bitcast i16* %108 to <2 x i64>*
  store <2 x i64> %105, <2 x i64>* %109, align 16
  %110 = bitcast i16* %17 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 1
  %112 = getelementptr inbounds i16, i16* %17, i64 %19
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 1
  %115 = getelementptr inbounds i16, i16* %17, i64 %21
  %116 = bitcast i16* %115 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 1
  %118 = getelementptr inbounds i16, i16* %17, i64 %23
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 1
  %121 = getelementptr inbounds i16, i16* %17, i64 %25
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 1
  %124 = getelementptr inbounds i16, i16* %17, i64 %27
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 1
  %127 = getelementptr inbounds i16, i16* %17, i64 %29
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 1
  %130 = getelementptr inbounds i16, i16* %17, i64 %31
  %131 = bitcast i16* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 1
  %133 = shufflevector <8 x i16> %111, <8 x i16> %114, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %134 = shufflevector <8 x i16> %117, <8 x i16> %120, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %135 = shufflevector <8 x i16> %123, <8 x i16> %126, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %136 = shufflevector <8 x i16> %129, <8 x i16> %132, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %137 = bitcast <8 x i16> %133 to <4 x i32>
  %138 = bitcast <8 x i16> %134 to <4 x i32>
  %139 = shufflevector <4 x i32> %137, <4 x i32> %138, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %140 = bitcast <4 x i32> %139 to <2 x i64>
  %141 = bitcast <8 x i16> %135 to <4 x i32>
  %142 = bitcast <8 x i16> %136 to <4 x i32>
  %143 = shufflevector <4 x i32> %141, <4 x i32> %142, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %144 = bitcast <4 x i32> %143 to <2 x i64>
  %145 = shufflevector <2 x i64> %140, <2 x i64> %144, <2 x i32> <i32 0, i32 2>
  %146 = shufflevector <2 x i64> %140, <2 x i64> %144, <2 x i32> <i32 1, i32 3>
  %147 = bitcast i16* %18 to <2 x i64>*
  store <2 x i64> %145, <2 x i64>* %147, align 16
  %148 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 24
  %149 = bitcast i16* %148 to <2 x i64>*
  store <2 x i64> %146, <2 x i64>* %149, align 16
  %150 = shufflevector <4 x i32> %137, <4 x i32> %138, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %151 = bitcast <4 x i32> %150 to <2 x i64>
  %152 = shufflevector <4 x i32> %141, <4 x i32> %142, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %153 = bitcast <4 x i32> %152 to <2 x i64>
  %154 = shufflevector <2 x i64> %151, <2 x i64> %153, <2 x i32> <i32 0, i32 2>
  %155 = shufflevector <2 x i64> %151, <2 x i64> %153, <2 x i32> <i32 1, i32 3>
  %156 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 40
  %157 = bitcast i16* %156 to <2 x i64>*
  store <2 x i64> %154, <2 x i64>* %157, align 16
  %158 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 56
  %159 = bitcast i16* %158 to <2 x i64>*
  store <2 x i64> %155, <2 x i64>* %159, align 16
  %160 = shufflevector <8 x i16> %111, <8 x i16> %114, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %161 = shufflevector <8 x i16> %117, <8 x i16> %120, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %162 = shufflevector <8 x i16> %123, <8 x i16> %126, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %163 = shufflevector <8 x i16> %129, <8 x i16> %132, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %164 = bitcast <8 x i16> %160 to <4 x i32>
  %165 = bitcast <8 x i16> %161 to <4 x i32>
  %166 = shufflevector <4 x i32> %164, <4 x i32> %165, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %167 = bitcast <4 x i32> %166 to <2 x i64>
  %168 = bitcast <8 x i16> %162 to <4 x i32>
  %169 = bitcast <8 x i16> %163 to <4 x i32>
  %170 = shufflevector <4 x i32> %168, <4 x i32> %169, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %171 = bitcast <4 x i32> %170 to <2 x i64>
  %172 = shufflevector <2 x i64> %167, <2 x i64> %171, <2 x i32> <i32 0, i32 2>
  %173 = shufflevector <2 x i64> %167, <2 x i64> %171, <2 x i32> <i32 1, i32 3>
  %174 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 72
  %175 = bitcast i16* %174 to <2 x i64>*
  store <2 x i64> %172, <2 x i64>* %175, align 16
  %176 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 88
  %177 = bitcast i16* %176 to <2 x i64>*
  store <2 x i64> %173, <2 x i64>* %177, align 16
  %178 = shufflevector <4 x i32> %164, <4 x i32> %165, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %179 = bitcast <4 x i32> %178 to <2 x i64>
  %180 = shufflevector <4 x i32> %168, <4 x i32> %169, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %181 = bitcast <4 x i32> %180 to <2 x i64>
  %182 = shufflevector <2 x i64> %179, <2 x i64> %181, <2 x i32> <i32 0, i32 2>
  %183 = shufflevector <2 x i64> %179, <2 x i64> %181, <2 x i32> <i32 1, i32 3>
  %184 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 104
  %185 = bitcast i16* %184 to <2 x i64>*
  store <2 x i64> %182, <2 x i64>* %185, align 16
  %186 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 120
  %187 = bitcast i16* %186 to <2 x i64>*
  store <2 x i64> %183, <2 x i64>* %187, align 16
  call void @vpx_highbd_lpf_horizontal_8_sse2(i16* %96, i32 16, i8* %2, i8* %3, i8* %4, i32 %8) #6
  call void @vpx_highbd_lpf_horizontal_8_sse2(i16* %174, i32 16, i8* %5, i8* %6, i8* %7, i32 %8) #6
  %188 = bitcast [128 x i16]* %10 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 16
  %190 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 16
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 16
  %193 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 32
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 16
  %196 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 48
  %197 = bitcast i16* %196 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 16
  %199 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 64
  %200 = bitcast i16* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 16
  %202 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 80
  %203 = bitcast i16* %202 to <8 x i16>*
  %204 = load <8 x i16>, <8 x i16>* %203, align 16
  %205 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 96
  %206 = bitcast i16* %205 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 16
  %208 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 112
  %209 = bitcast i16* %208 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 16
  %211 = shufflevector <8 x i16> %189, <8 x i16> %192, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %212 = shufflevector <8 x i16> %195, <8 x i16> %198, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %213 = shufflevector <8 x i16> %201, <8 x i16> %204, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %214 = shufflevector <8 x i16> %207, <8 x i16> %210, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %215 = bitcast <8 x i16> %211 to <4 x i32>
  %216 = bitcast <8 x i16> %212 to <4 x i32>
  %217 = shufflevector <4 x i32> %215, <4 x i32> %216, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %218 = bitcast <4 x i32> %217 to <2 x i64>
  %219 = bitcast <8 x i16> %213 to <4 x i32>
  %220 = bitcast <8 x i16> %214 to <4 x i32>
  %221 = shufflevector <4 x i32> %219, <4 x i32> %220, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %222 = bitcast <4 x i32> %221 to <2 x i64>
  %223 = shufflevector <2 x i64> %218, <2 x i64> %222, <2 x i32> <i32 0, i32 2>
  %224 = shufflevector <2 x i64> %218, <2 x i64> %222, <2 x i32> <i32 1, i32 3>
  %225 = bitcast i16* %14 to <2 x i64>*
  store <2 x i64> %223, <2 x i64>* %225, align 1
  %226 = bitcast i16* %34 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %226, align 1
  %227 = shufflevector <4 x i32> %215, <4 x i32> %216, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %228 = bitcast <4 x i32> %227 to <2 x i64>
  %229 = shufflevector <4 x i32> %219, <4 x i32> %220, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %230 = bitcast <4 x i32> %229 to <2 x i64>
  %231 = shufflevector <2 x i64> %228, <2 x i64> %230, <2 x i32> <i32 0, i32 2>
  %232 = shufflevector <2 x i64> %228, <2 x i64> %230, <2 x i32> <i32 1, i32 3>
  %233 = bitcast i16* %37 to <2 x i64>*
  store <2 x i64> %231, <2 x i64>* %233, align 1
  %234 = bitcast i16* %40 to <2 x i64>*
  store <2 x i64> %232, <2 x i64>* %234, align 1
  %235 = shufflevector <8 x i16> %189, <8 x i16> %192, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %236 = shufflevector <8 x i16> %195, <8 x i16> %198, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %237 = shufflevector <8 x i16> %201, <8 x i16> %204, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %238 = shufflevector <8 x i16> %207, <8 x i16> %210, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %239 = bitcast <8 x i16> %235 to <4 x i32>
  %240 = bitcast <8 x i16> %236 to <4 x i32>
  %241 = shufflevector <4 x i32> %239, <4 x i32> %240, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %242 = bitcast <4 x i32> %241 to <2 x i64>
  %243 = bitcast <8 x i16> %237 to <4 x i32>
  %244 = bitcast <8 x i16> %238 to <4 x i32>
  %245 = shufflevector <4 x i32> %243, <4 x i32> %244, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %246 = bitcast <4 x i32> %245 to <2 x i64>
  %247 = shufflevector <2 x i64> %242, <2 x i64> %246, <2 x i32> <i32 0, i32 2>
  %248 = shufflevector <2 x i64> %242, <2 x i64> %246, <2 x i32> <i32 1, i32 3>
  %249 = bitcast i16* %43 to <2 x i64>*
  store <2 x i64> %247, <2 x i64>* %249, align 1
  %250 = bitcast i16* %46 to <2 x i64>*
  store <2 x i64> %248, <2 x i64>* %250, align 1
  %251 = shufflevector <4 x i32> %239, <4 x i32> %240, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %252 = bitcast <4 x i32> %251 to <2 x i64>
  %253 = shufflevector <4 x i32> %243, <4 x i32> %244, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %254 = bitcast <4 x i32> %253 to <2 x i64>
  %255 = shufflevector <2 x i64> %252, <2 x i64> %254, <2 x i32> <i32 0, i32 2>
  %256 = shufflevector <2 x i64> %252, <2 x i64> %254, <2 x i32> <i32 1, i32 3>
  %257 = bitcast i16* %49 to <2 x i64>*
  store <2 x i64> %255, <2 x i64>* %257, align 1
  %258 = bitcast i16* %52 to <2 x i64>*
  store <2 x i64> %256, <2 x i64>* %258, align 1
  %259 = bitcast i16* %18 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 16
  %261 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 24
  %262 = bitcast i16* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 16
  %264 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 40
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 16
  %267 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 56
  %268 = bitcast i16* %267 to <8 x i16>*
  %269 = load <8 x i16>, <8 x i16>* %268, align 16
  %270 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 72
  %271 = bitcast i16* %270 to <8 x i16>*
  %272 = load <8 x i16>, <8 x i16>* %271, align 16
  %273 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 88
  %274 = bitcast i16* %273 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 16
  %276 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 104
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 16
  %279 = getelementptr inbounds [128 x i16], [128 x i16]* %10, i64 0, i64 120
  %280 = bitcast i16* %279 to <8 x i16>*
  %281 = load <8 x i16>, <8 x i16>* %280, align 16
  %282 = shufflevector <8 x i16> %260, <8 x i16> %263, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %283 = shufflevector <8 x i16> %266, <8 x i16> %269, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %284 = shufflevector <8 x i16> %272, <8 x i16> %275, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %285 = shufflevector <8 x i16> %278, <8 x i16> %281, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %286 = bitcast <8 x i16> %282 to <4 x i32>
  %287 = bitcast <8 x i16> %283 to <4 x i32>
  %288 = shufflevector <4 x i32> %286, <4 x i32> %287, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %289 = bitcast <4 x i32> %288 to <2 x i64>
  %290 = bitcast <8 x i16> %284 to <4 x i32>
  %291 = bitcast <8 x i16> %285 to <4 x i32>
  %292 = shufflevector <4 x i32> %290, <4 x i32> %291, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %293 = bitcast <4 x i32> %292 to <2 x i64>
  %294 = shufflevector <2 x i64> %289, <2 x i64> %293, <2 x i32> <i32 0, i32 2>
  %295 = shufflevector <2 x i64> %289, <2 x i64> %293, <2 x i32> <i32 1, i32 3>
  %296 = bitcast i16* %17 to <2 x i64>*
  store <2 x i64> %294, <2 x i64>* %296, align 1
  %297 = bitcast i16* %112 to <2 x i64>*
  store <2 x i64> %295, <2 x i64>* %297, align 1
  %298 = shufflevector <4 x i32> %286, <4 x i32> %287, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %299 = bitcast <4 x i32> %298 to <2 x i64>
  %300 = shufflevector <4 x i32> %290, <4 x i32> %291, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %301 = bitcast <4 x i32> %300 to <2 x i64>
  %302 = shufflevector <2 x i64> %299, <2 x i64> %301, <2 x i32> <i32 0, i32 2>
  %303 = shufflevector <2 x i64> %299, <2 x i64> %301, <2 x i32> <i32 1, i32 3>
  %304 = bitcast i16* %115 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %304, align 1
  %305 = bitcast i16* %118 to <2 x i64>*
  store <2 x i64> %303, <2 x i64>* %305, align 1
  %306 = shufflevector <8 x i16> %260, <8 x i16> %263, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %307 = shufflevector <8 x i16> %266, <8 x i16> %269, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %308 = shufflevector <8 x i16> %272, <8 x i16> %275, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %309 = shufflevector <8 x i16> %278, <8 x i16> %281, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %310 = bitcast <8 x i16> %306 to <4 x i32>
  %311 = bitcast <8 x i16> %307 to <4 x i32>
  %312 = shufflevector <4 x i32> %310, <4 x i32> %311, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %313 = bitcast <4 x i32> %312 to <2 x i64>
  %314 = bitcast <8 x i16> %308 to <4 x i32>
  %315 = bitcast <8 x i16> %309 to <4 x i32>
  %316 = shufflevector <4 x i32> %314, <4 x i32> %315, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %317 = bitcast <4 x i32> %316 to <2 x i64>
  %318 = shufflevector <2 x i64> %313, <2 x i64> %317, <2 x i32> <i32 0, i32 2>
  %319 = shufflevector <2 x i64> %313, <2 x i64> %317, <2 x i32> <i32 1, i32 3>
  %320 = bitcast i16* %121 to <2 x i64>*
  store <2 x i64> %318, <2 x i64>* %320, align 1
  %321 = bitcast i16* %124 to <2 x i64>*
  store <2 x i64> %319, <2 x i64>* %321, align 1
  %322 = shufflevector <4 x i32> %310, <4 x i32> %311, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %323 = bitcast <4 x i32> %322 to <2 x i64>
  %324 = shufflevector <4 x i32> %314, <4 x i32> %315, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %325 = bitcast <4 x i32> %324 to <2 x i64>
  %326 = shufflevector <2 x i64> %323, <2 x i64> %325, <2 x i32> <i32 0, i32 2>
  %327 = shufflevector <2 x i64> %323, <2 x i64> %325, <2 x i32> <i32 1, i32 3>
  %328 = bitcast i16* %127 to <2 x i64>*
  store <2 x i64> %326, <2 x i64>* %328, align 1
  %329 = bitcast i16* %130 to <2 x i64>*
  store <2 x i64> %327, <2 x i64>* %329, align 1
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %11) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_vertical_16_sse2(i16*, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #3 {
  %7 = alloca [128 x i16], align 16
  %8 = alloca [2 x i16*], align 16
  %9 = alloca [2 x i16*], align 16
  %10 = bitcast [128 x i16]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %10) #6
  %11 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 40
  %12 = bitcast i16* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 176, i1 false)
  %13 = bitcast [2 x i16*]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #6
  %14 = getelementptr inbounds [2 x i16*], [2 x i16*]* %8, i64 0, i64 0
  %15 = getelementptr inbounds [2 x i16*], [2 x i16*]* %8, i64 0, i64 1
  %16 = bitcast [2 x i16*]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #6
  %17 = getelementptr inbounds [2 x i16*], [2 x i16*]* %9, i64 0, i64 0
  %18 = getelementptr inbounds [2 x i16*], [2 x i16*]* %9, i64 0, i64 1
  %19 = getelementptr inbounds i16, i16* %0, i64 -8
  store i16* %19, i16** %14, align 16
  store i16* %0, i16** %15, align 8
  %20 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 0
  store i16* %20, i16** %17, align 16
  %21 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 64
  store i16* %21, i16** %18, align 8
  %22 = sext i32 %1 to i64
  %23 = shl nsw i32 %1, 1
  %24 = sext i32 %23 to i64
  %25 = mul nsw i32 %1, 3
  %26 = sext i32 %25 to i64
  %27 = shl nsw i32 %1, 2
  %28 = sext i32 %27 to i64
  %29 = mul nsw i32 %1, 5
  %30 = sext i32 %29 to i64
  %31 = mul nsw i32 %1, 6
  %32 = sext i32 %31 to i64
  %33 = mul nsw i32 %1, 7
  %34 = sext i32 %33 to i64
  %35 = bitcast i16* %19 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 1
  %37 = getelementptr inbounds i16, i16* %19, i64 %22
  %38 = bitcast i16* %37 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %19, i64 %24
  %41 = bitcast i16* %40 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %19, i64 %26
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %19, i64 %28
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 1
  %49 = getelementptr inbounds i16, i16* %19, i64 %30
  %50 = bitcast i16* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 1
  %52 = getelementptr inbounds i16, i16* %19, i64 %32
  %53 = bitcast i16* %52 to <8 x i16>*
  %54 = load <8 x i16>, <8 x i16>* %53, align 1
  %55 = getelementptr inbounds i16, i16* %19, i64 %34
  %56 = bitcast i16* %55 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 1
  %58 = shufflevector <8 x i16> %36, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %59 = shufflevector <8 x i16> %42, <8 x i16> %45, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %60 = shufflevector <8 x i16> %48, <8 x i16> %51, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %61 = shufflevector <8 x i16> %54, <8 x i16> %57, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %62 = bitcast <8 x i16> %58 to <4 x i32>
  %63 = bitcast <8 x i16> %59 to <4 x i32>
  %64 = shufflevector <4 x i32> %62, <4 x i32> %63, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %65 = bitcast <4 x i32> %64 to <2 x i64>
  %66 = bitcast <8 x i16> %60 to <4 x i32>
  %67 = bitcast <8 x i16> %61 to <4 x i32>
  %68 = shufflevector <4 x i32> %66, <4 x i32> %67, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %69 = bitcast <4 x i32> %68 to <2 x i64>
  %70 = shufflevector <2 x i64> %65, <2 x i64> %69, <2 x i32> <i32 0, i32 2>
  %71 = shufflevector <2 x i64> %65, <2 x i64> %69, <2 x i32> <i32 1, i32 3>
  %72 = bitcast [128 x i16]* %7 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %72, align 16
  %73 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 8
  %74 = bitcast i16* %73 to <2 x i64>*
  store <2 x i64> %71, <2 x i64>* %74, align 16
  %75 = shufflevector <4 x i32> %62, <4 x i32> %63, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %76 = bitcast <4 x i32> %75 to <2 x i64>
  %77 = shufflevector <4 x i32> %66, <4 x i32> %67, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %78 = bitcast <4 x i32> %77 to <2 x i64>
  %79 = shufflevector <2 x i64> %76, <2 x i64> %78, <2 x i32> <i32 0, i32 2>
  %80 = shufflevector <2 x i64> %76, <2 x i64> %78, <2 x i32> <i32 1, i32 3>
  %81 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 16
  %82 = bitcast i16* %81 to <2 x i64>*
  store <2 x i64> %79, <2 x i64>* %82, align 16
  %83 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 24
  %84 = bitcast i16* %83 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %84, align 16
  %85 = shufflevector <8 x i16> %36, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %86 = shufflevector <8 x i16> %42, <8 x i16> %45, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %87 = shufflevector <8 x i16> %48, <8 x i16> %51, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %88 = shufflevector <8 x i16> %54, <8 x i16> %57, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %89 = bitcast <8 x i16> %85 to <4 x i32>
  %90 = bitcast <8 x i16> %86 to <4 x i32>
  %91 = shufflevector <4 x i32> %89, <4 x i32> %90, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %92 = bitcast <4 x i32> %91 to <2 x i64>
  %93 = bitcast <8 x i16> %87 to <4 x i32>
  %94 = bitcast <8 x i16> %88 to <4 x i32>
  %95 = shufflevector <4 x i32> %93, <4 x i32> %94, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = shufflevector <2 x i64> %92, <2 x i64> %96, <2 x i32> <i32 0, i32 2>
  %98 = shufflevector <2 x i64> %92, <2 x i64> %96, <2 x i32> <i32 1, i32 3>
  %99 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 32
  %100 = bitcast i16* %99 to <2 x i64>*
  store <2 x i64> %97, <2 x i64>* %100, align 16
  %101 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 40
  %102 = bitcast i16* %101 to <2 x i64>*
  store <2 x i64> %98, <2 x i64>* %102, align 16
  %103 = shufflevector <4 x i32> %89, <4 x i32> %90, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %104 = bitcast <4 x i32> %103 to <2 x i64>
  %105 = shufflevector <4 x i32> %93, <4 x i32> %94, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %106 = bitcast <4 x i32> %105 to <2 x i64>
  %107 = shufflevector <2 x i64> %104, <2 x i64> %106, <2 x i32> <i32 0, i32 2>
  %108 = shufflevector <2 x i64> %104, <2 x i64> %106, <2 x i32> <i32 1, i32 3>
  %109 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 48
  %110 = bitcast i16* %109 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %110, align 16
  %111 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 56
  %112 = bitcast i16* %111 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %112, align 16
  %113 = load i16*, i16** %15, align 8
  %114 = load i16*, i16** %18, align 8
  %115 = bitcast i16* %113 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 1
  %117 = getelementptr inbounds i16, i16* %113, i64 %22
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 1
  %120 = getelementptr inbounds i16, i16* %113, i64 %24
  %121 = bitcast i16* %120 to <8 x i16>*
  %122 = load <8 x i16>, <8 x i16>* %121, align 1
  %123 = getelementptr inbounds i16, i16* %113, i64 %26
  %124 = bitcast i16* %123 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 1
  %126 = getelementptr inbounds i16, i16* %113, i64 %28
  %127 = bitcast i16* %126 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 1
  %129 = getelementptr inbounds i16, i16* %113, i64 %30
  %130 = bitcast i16* %129 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 1
  %132 = getelementptr inbounds i16, i16* %113, i64 %32
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 1
  %135 = getelementptr inbounds i16, i16* %113, i64 %34
  %136 = bitcast i16* %135 to <8 x i16>*
  %137 = load <8 x i16>, <8 x i16>* %136, align 1
  %138 = shufflevector <8 x i16> %116, <8 x i16> %119, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %139 = shufflevector <8 x i16> %122, <8 x i16> %125, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %140 = shufflevector <8 x i16> %128, <8 x i16> %131, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %141 = shufflevector <8 x i16> %134, <8 x i16> %137, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %142 = bitcast <8 x i16> %138 to <4 x i32>
  %143 = bitcast <8 x i16> %139 to <4 x i32>
  %144 = shufflevector <4 x i32> %142, <4 x i32> %143, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %145 = bitcast <4 x i32> %144 to <2 x i64>
  %146 = bitcast <8 x i16> %140 to <4 x i32>
  %147 = bitcast <8 x i16> %141 to <4 x i32>
  %148 = shufflevector <4 x i32> %146, <4 x i32> %147, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %149 = bitcast <4 x i32> %148 to <2 x i64>
  %150 = shufflevector <2 x i64> %145, <2 x i64> %149, <2 x i32> <i32 0, i32 2>
  %151 = shufflevector <2 x i64> %145, <2 x i64> %149, <2 x i32> <i32 1, i32 3>
  %152 = bitcast i16* %114 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %152, align 1
  %153 = getelementptr inbounds i16, i16* %114, i64 8
  %154 = bitcast i16* %153 to <2 x i64>*
  store <2 x i64> %151, <2 x i64>* %154, align 1
  %155 = shufflevector <4 x i32> %142, <4 x i32> %143, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %156 = bitcast <4 x i32> %155 to <2 x i64>
  %157 = shufflevector <4 x i32> %146, <4 x i32> %147, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %158 = bitcast <4 x i32> %157 to <2 x i64>
  %159 = shufflevector <2 x i64> %156, <2 x i64> %158, <2 x i32> <i32 0, i32 2>
  %160 = shufflevector <2 x i64> %156, <2 x i64> %158, <2 x i32> <i32 1, i32 3>
  %161 = getelementptr inbounds i16, i16* %114, i64 16
  %162 = bitcast i16* %161 to <2 x i64>*
  store <2 x i64> %159, <2 x i64>* %162, align 1
  %163 = getelementptr inbounds i16, i16* %114, i64 24
  %164 = bitcast i16* %163 to <2 x i64>*
  store <2 x i64> %160, <2 x i64>* %164, align 1
  %165 = shufflevector <8 x i16> %116, <8 x i16> %119, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %166 = shufflevector <8 x i16> %122, <8 x i16> %125, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %167 = shufflevector <8 x i16> %128, <8 x i16> %131, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %168 = shufflevector <8 x i16> %134, <8 x i16> %137, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %169 = bitcast <8 x i16> %165 to <4 x i32>
  %170 = bitcast <8 x i16> %166 to <4 x i32>
  %171 = shufflevector <4 x i32> %169, <4 x i32> %170, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %172 = bitcast <4 x i32> %171 to <2 x i64>
  %173 = bitcast <8 x i16> %167 to <4 x i32>
  %174 = bitcast <8 x i16> %168 to <4 x i32>
  %175 = shufflevector <4 x i32> %173, <4 x i32> %174, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %176 = bitcast <4 x i32> %175 to <2 x i64>
  %177 = shufflevector <2 x i64> %172, <2 x i64> %176, <2 x i32> <i32 0, i32 2>
  %178 = shufflevector <2 x i64> %172, <2 x i64> %176, <2 x i32> <i32 1, i32 3>
  %179 = getelementptr inbounds i16, i16* %114, i64 32
  %180 = bitcast i16* %179 to <2 x i64>*
  store <2 x i64> %177, <2 x i64>* %180, align 1
  %181 = getelementptr inbounds i16, i16* %114, i64 40
  %182 = bitcast i16* %181 to <2 x i64>*
  store <2 x i64> %178, <2 x i64>* %182, align 1
  %183 = shufflevector <4 x i32> %169, <4 x i32> %170, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %184 = bitcast <4 x i32> %183 to <2 x i64>
  %185 = shufflevector <4 x i32> %173, <4 x i32> %174, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %186 = bitcast <4 x i32> %185 to <2 x i64>
  %187 = shufflevector <2 x i64> %184, <2 x i64> %186, <2 x i32> <i32 0, i32 2>
  %188 = shufflevector <2 x i64> %184, <2 x i64> %186, <2 x i32> <i32 1, i32 3>
  %189 = getelementptr inbounds i16, i16* %114, i64 48
  %190 = bitcast i16* %189 to <2 x i64>*
  store <2 x i64> %187, <2 x i64>* %190, align 1
  %191 = getelementptr inbounds i16, i16* %114, i64 56
  %192 = bitcast i16* %191 to <2 x i64>*
  store <2 x i64> %188, <2 x i64>* %192, align 1
  call void @vpx_highbd_lpf_horizontal_16_sse2(i16* %21, i32 8, i8* %2, i8* %3, i8* %4, i32 %5)
  store i16* %20, i16** %14, align 16
  store i16* %21, i16** %15, align 8
  store i16* %19, i16** %17, align 16
  store i16* %0, i16** %18, align 8
  %193 = bitcast [128 x i16]* %7 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 16
  %195 = bitcast i16* %73 to <8 x i16>*
  %196 = load <8 x i16>, <8 x i16>* %195, align 16
  %197 = bitcast i16* %81 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 16
  %199 = bitcast i16* %83 to <8 x i16>*
  %200 = load <8 x i16>, <8 x i16>* %199, align 16
  %201 = bitcast i16* %99 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 16
  %203 = bitcast i16* %101 to <8 x i16>*
  %204 = load <8 x i16>, <8 x i16>* %203, align 16
  %205 = bitcast i16* %109 to <8 x i16>*
  %206 = load <8 x i16>, <8 x i16>* %205, align 16
  %207 = bitcast i16* %111 to <8 x i16>*
  %208 = load <8 x i16>, <8 x i16>* %207, align 16
  %209 = shufflevector <8 x i16> %194, <8 x i16> %196, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %210 = shufflevector <8 x i16> %198, <8 x i16> %200, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %211 = shufflevector <8 x i16> %202, <8 x i16> %204, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %212 = shufflevector <8 x i16> %206, <8 x i16> %208, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %213 = bitcast <8 x i16> %209 to <4 x i32>
  %214 = bitcast <8 x i16> %210 to <4 x i32>
  %215 = shufflevector <4 x i32> %213, <4 x i32> %214, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %216 = bitcast <4 x i32> %215 to <2 x i64>
  %217 = bitcast <8 x i16> %211 to <4 x i32>
  %218 = bitcast <8 x i16> %212 to <4 x i32>
  %219 = shufflevector <4 x i32> %217, <4 x i32> %218, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %220 = bitcast <4 x i32> %219 to <2 x i64>
  %221 = shufflevector <2 x i64> %216, <2 x i64> %220, <2 x i32> <i32 0, i32 2>
  %222 = shufflevector <2 x i64> %216, <2 x i64> %220, <2 x i32> <i32 1, i32 3>
  %223 = bitcast i16* %19 to <2 x i64>*
  store <2 x i64> %221, <2 x i64>* %223, align 1
  %224 = bitcast i16* %37 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %224, align 1
  %225 = shufflevector <4 x i32> %213, <4 x i32> %214, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %226 = bitcast <4 x i32> %225 to <2 x i64>
  %227 = shufflevector <4 x i32> %217, <4 x i32> %218, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %228 = bitcast <4 x i32> %227 to <2 x i64>
  %229 = shufflevector <2 x i64> %226, <2 x i64> %228, <2 x i32> <i32 0, i32 2>
  %230 = shufflevector <2 x i64> %226, <2 x i64> %228, <2 x i32> <i32 1, i32 3>
  %231 = bitcast i16* %40 to <2 x i64>*
  store <2 x i64> %229, <2 x i64>* %231, align 1
  %232 = bitcast i16* %43 to <2 x i64>*
  store <2 x i64> %230, <2 x i64>* %232, align 1
  %233 = shufflevector <8 x i16> %194, <8 x i16> %196, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %234 = shufflevector <8 x i16> %198, <8 x i16> %200, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %235 = shufflevector <8 x i16> %202, <8 x i16> %204, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %236 = shufflevector <8 x i16> %206, <8 x i16> %208, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %237 = bitcast <8 x i16> %233 to <4 x i32>
  %238 = bitcast <8 x i16> %234 to <4 x i32>
  %239 = shufflevector <4 x i32> %237, <4 x i32> %238, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %240 = bitcast <4 x i32> %239 to <2 x i64>
  %241 = bitcast <8 x i16> %235 to <4 x i32>
  %242 = bitcast <8 x i16> %236 to <4 x i32>
  %243 = shufflevector <4 x i32> %241, <4 x i32> %242, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %244 = bitcast <4 x i32> %243 to <2 x i64>
  %245 = shufflevector <2 x i64> %240, <2 x i64> %244, <2 x i32> <i32 0, i32 2>
  %246 = shufflevector <2 x i64> %240, <2 x i64> %244, <2 x i32> <i32 1, i32 3>
  %247 = bitcast i16* %46 to <2 x i64>*
  store <2 x i64> %245, <2 x i64>* %247, align 1
  %248 = bitcast i16* %49 to <2 x i64>*
  store <2 x i64> %246, <2 x i64>* %248, align 1
  %249 = shufflevector <4 x i32> %237, <4 x i32> %238, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %250 = bitcast <4 x i32> %249 to <2 x i64>
  %251 = shufflevector <4 x i32> %241, <4 x i32> %242, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %252 = bitcast <4 x i32> %251 to <2 x i64>
  %253 = shufflevector <2 x i64> %250, <2 x i64> %252, <2 x i32> <i32 0, i32 2>
  %254 = shufflevector <2 x i64> %250, <2 x i64> %252, <2 x i32> <i32 1, i32 3>
  %255 = bitcast i16* %52 to <2 x i64>*
  store <2 x i64> %253, <2 x i64>* %255, align 1
  %256 = bitcast i16* %55 to <2 x i64>*
  store <2 x i64> %254, <2 x i64>* %256, align 1
  %257 = bitcast i16* %21 to <8 x i16>*
  %258 = load <8 x i16>, <8 x i16>* %257, align 16
  %259 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 72
  %260 = bitcast i16* %259 to <8 x i16>*
  %261 = load <8 x i16>, <8 x i16>* %260, align 16
  %262 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 80
  %263 = bitcast i16* %262 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 16
  %265 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 88
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 16
  %268 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 96
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 16
  %271 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 104
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 16
  %274 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 112
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 16
  %277 = getelementptr inbounds [128 x i16], [128 x i16]* %7, i64 0, i64 120
  %278 = bitcast i16* %277 to <8 x i16>*
  %279 = load <8 x i16>, <8 x i16>* %278, align 16
  %280 = shufflevector <8 x i16> %258, <8 x i16> %261, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %281 = shufflevector <8 x i16> %264, <8 x i16> %267, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %282 = shufflevector <8 x i16> %270, <8 x i16> %273, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %283 = shufflevector <8 x i16> %276, <8 x i16> %279, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %284 = bitcast <8 x i16> %280 to <4 x i32>
  %285 = bitcast <8 x i16> %281 to <4 x i32>
  %286 = shufflevector <4 x i32> %284, <4 x i32> %285, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %287 = bitcast <4 x i32> %286 to <2 x i64>
  %288 = bitcast <8 x i16> %282 to <4 x i32>
  %289 = bitcast <8 x i16> %283 to <4 x i32>
  %290 = shufflevector <4 x i32> %288, <4 x i32> %289, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %291 = bitcast <4 x i32> %290 to <2 x i64>
  %292 = shufflevector <2 x i64> %287, <2 x i64> %291, <2 x i32> <i32 0, i32 2>
  %293 = shufflevector <2 x i64> %287, <2 x i64> %291, <2 x i32> <i32 1, i32 3>
  %294 = bitcast i16* %0 to <2 x i64>*
  store <2 x i64> %292, <2 x i64>* %294, align 1
  %295 = getelementptr inbounds i16, i16* %0, i64 %22
  %296 = bitcast i16* %295 to <2 x i64>*
  store <2 x i64> %293, <2 x i64>* %296, align 1
  %297 = shufflevector <4 x i32> %284, <4 x i32> %285, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %298 = bitcast <4 x i32> %297 to <2 x i64>
  %299 = shufflevector <4 x i32> %288, <4 x i32> %289, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %300 = bitcast <4 x i32> %299 to <2 x i64>
  %301 = shufflevector <2 x i64> %298, <2 x i64> %300, <2 x i32> <i32 0, i32 2>
  %302 = shufflevector <2 x i64> %298, <2 x i64> %300, <2 x i32> <i32 1, i32 3>
  %303 = getelementptr inbounds i16, i16* %0, i64 %24
  %304 = bitcast i16* %303 to <2 x i64>*
  store <2 x i64> %301, <2 x i64>* %304, align 1
  %305 = getelementptr inbounds i16, i16* %0, i64 %26
  %306 = bitcast i16* %305 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %306, align 1
  %307 = shufflevector <8 x i16> %258, <8 x i16> %261, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %308 = shufflevector <8 x i16> %264, <8 x i16> %267, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %309 = shufflevector <8 x i16> %270, <8 x i16> %273, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %310 = shufflevector <8 x i16> %276, <8 x i16> %279, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %311 = bitcast <8 x i16> %307 to <4 x i32>
  %312 = bitcast <8 x i16> %308 to <4 x i32>
  %313 = shufflevector <4 x i32> %311, <4 x i32> %312, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %314 = bitcast <4 x i32> %313 to <2 x i64>
  %315 = bitcast <8 x i16> %309 to <4 x i32>
  %316 = bitcast <8 x i16> %310 to <4 x i32>
  %317 = shufflevector <4 x i32> %315, <4 x i32> %316, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %318 = bitcast <4 x i32> %317 to <2 x i64>
  %319 = shufflevector <2 x i64> %314, <2 x i64> %318, <2 x i32> <i32 0, i32 2>
  %320 = shufflevector <2 x i64> %314, <2 x i64> %318, <2 x i32> <i32 1, i32 3>
  %321 = getelementptr inbounds i16, i16* %0, i64 %28
  %322 = bitcast i16* %321 to <2 x i64>*
  store <2 x i64> %319, <2 x i64>* %322, align 1
  %323 = getelementptr inbounds i16, i16* %0, i64 %30
  %324 = bitcast i16* %323 to <2 x i64>*
  store <2 x i64> %320, <2 x i64>* %324, align 1
  %325 = shufflevector <4 x i32> %311, <4 x i32> %312, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %326 = bitcast <4 x i32> %325 to <2 x i64>
  %327 = shufflevector <4 x i32> %315, <4 x i32> %316, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %328 = bitcast <4 x i32> %327 to <2 x i64>
  %329 = shufflevector <2 x i64> %326, <2 x i64> %328, <2 x i32> <i32 0, i32 2>
  %330 = shufflevector <2 x i64> %326, <2 x i64> %328, <2 x i32> <i32 1, i32 3>
  %331 = getelementptr inbounds i16, i16* %0, i64 %32
  %332 = bitcast i16* %331 to <2 x i64>*
  store <2 x i64> %329, <2 x i64>* %332, align 1
  %333 = getelementptr inbounds i16, i16* %0, i64 %34
  %334 = bitcast i16* %333 to <2 x i64>*
  store <2 x i64> %330, <2 x i64>* %334, align 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %10) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_lpf_vertical_16_dual_sse2(i16* nocapture, i32, i8* nocapture readonly, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #3 {
  %7 = alloca [256 x i16], align 16
  %8 = bitcast [256 x i16]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #6
  %9 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 8
  %10 = bitcast i16* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 496, i1 false)
  %11 = getelementptr inbounds i16, i16* %0, i64 -8
  %12 = shl nsw i32 %1, 3
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i16, i16* %11, i64 %13
  %15 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 8
  %16 = sext i32 %1 to i64
  %17 = shl nsw i32 %1, 1
  %18 = sext i32 %17 to i64
  %19 = mul nsw i32 %1, 3
  %20 = sext i32 %19 to i64
  %21 = shl nsw i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = mul nsw i32 %1, 5
  %24 = sext i32 %23 to i64
  %25 = mul nsw i32 %1, 6
  %26 = sext i32 %25 to i64
  %27 = mul nsw i32 %1, 7
  %28 = sext i32 %27 to i64
  %29 = bitcast i16* %11 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 1
  %31 = getelementptr inbounds i16, i16* %11, i64 %16
  %32 = bitcast i16* %31 to <8 x i16>*
  %33 = load <8 x i16>, <8 x i16>* %32, align 1
  %34 = getelementptr inbounds i16, i16* %11, i64 %18
  %35 = bitcast i16* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 1
  %37 = getelementptr inbounds i16, i16* %11, i64 %20
  %38 = bitcast i16* %37 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %11, i64 %22
  %41 = bitcast i16* %40 to <8 x i16>*
  %42 = load <8 x i16>, <8 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %11, i64 %24
  %44 = bitcast i16* %43 to <8 x i16>*
  %45 = load <8 x i16>, <8 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %11, i64 %26
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 1
  %49 = getelementptr inbounds i16, i16* %11, i64 %28
  %50 = bitcast i16* %49 to <8 x i16>*
  %51 = load <8 x i16>, <8 x i16>* %50, align 1
  %52 = shufflevector <8 x i16> %30, <8 x i16> %33, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %53 = shufflevector <8 x i16> %36, <8 x i16> %39, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %54 = shufflevector <8 x i16> %42, <8 x i16> %45, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %55 = shufflevector <8 x i16> %48, <8 x i16> %51, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %56 = bitcast <8 x i16> %52 to <4 x i32>
  %57 = bitcast <8 x i16> %53 to <4 x i32>
  %58 = shufflevector <4 x i32> %56, <4 x i32> %57, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %59 = bitcast <4 x i32> %58 to <2 x i64>
  %60 = bitcast <8 x i16> %54 to <4 x i32>
  %61 = bitcast <8 x i16> %55 to <4 x i32>
  %62 = shufflevector <4 x i32> %60, <4 x i32> %61, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %63 = bitcast <4 x i32> %62 to <2 x i64>
  %64 = shufflevector <2 x i64> %59, <2 x i64> %63, <2 x i32> <i32 0, i32 2>
  %65 = shufflevector <2 x i64> %59, <2 x i64> %63, <2 x i32> <i32 1, i32 3>
  %66 = bitcast [256 x i16]* %7 to <2 x i64>*
  store <2 x i64> %64, <2 x i64>* %66, align 16
  %67 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 16
  %68 = bitcast i16* %67 to <2 x i64>*
  store <2 x i64> %65, <2 x i64>* %68, align 16
  %69 = shufflevector <4 x i32> %56, <4 x i32> %57, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %70 = bitcast <4 x i32> %69 to <2 x i64>
  %71 = shufflevector <4 x i32> %60, <4 x i32> %61, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %72 = bitcast <4 x i32> %71 to <2 x i64>
  %73 = shufflevector <2 x i64> %70, <2 x i64> %72, <2 x i32> <i32 0, i32 2>
  %74 = shufflevector <2 x i64> %70, <2 x i64> %72, <2 x i32> <i32 1, i32 3>
  %75 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 32
  %76 = bitcast i16* %75 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %76, align 16
  %77 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 48
  %78 = bitcast i16* %77 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %78, align 16
  %79 = shufflevector <8 x i16> %30, <8 x i16> %33, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %80 = shufflevector <8 x i16> %36, <8 x i16> %39, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %81 = shufflevector <8 x i16> %42, <8 x i16> %45, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %82 = shufflevector <8 x i16> %48, <8 x i16> %51, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %83 = bitcast <8 x i16> %79 to <4 x i32>
  %84 = bitcast <8 x i16> %80 to <4 x i32>
  %85 = shufflevector <4 x i32> %83, <4 x i32> %84, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %86 = bitcast <4 x i32> %85 to <2 x i64>
  %87 = bitcast <8 x i16> %81 to <4 x i32>
  %88 = bitcast <8 x i16> %82 to <4 x i32>
  %89 = shufflevector <4 x i32> %87, <4 x i32> %88, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %90 = bitcast <4 x i32> %89 to <2 x i64>
  %91 = shufflevector <2 x i64> %86, <2 x i64> %90, <2 x i32> <i32 0, i32 2>
  %92 = shufflevector <2 x i64> %86, <2 x i64> %90, <2 x i32> <i32 1, i32 3>
  %93 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 64
  %94 = bitcast i16* %93 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %94, align 16
  %95 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 80
  %96 = bitcast i16* %95 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %96, align 16
  %97 = shufflevector <4 x i32> %83, <4 x i32> %84, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %98 = bitcast <4 x i32> %97 to <2 x i64>
  %99 = shufflevector <4 x i32> %87, <4 x i32> %88, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %100 = bitcast <4 x i32> %99 to <2 x i64>
  %101 = shufflevector <2 x i64> %98, <2 x i64> %100, <2 x i32> <i32 0, i32 2>
  %102 = shufflevector <2 x i64> %98, <2 x i64> %100, <2 x i32> <i32 1, i32 3>
  %103 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 96
  %104 = bitcast i16* %103 to <2 x i64>*
  store <2 x i64> %101, <2 x i64>* %104, align 16
  %105 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 112
  %106 = bitcast i16* %105 to <2 x i64>*
  store <2 x i64> %102, <2 x i64>* %106, align 16
  %107 = bitcast i16* %14 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 1
  %109 = getelementptr inbounds i16, i16* %14, i64 %16
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 1
  %112 = getelementptr inbounds i16, i16* %14, i64 %18
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 1
  %115 = getelementptr inbounds i16, i16* %14, i64 %20
  %116 = bitcast i16* %115 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 1
  %118 = getelementptr inbounds i16, i16* %14, i64 %22
  %119 = bitcast i16* %118 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 1
  %121 = getelementptr inbounds i16, i16* %14, i64 %24
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 1
  %124 = getelementptr inbounds i16, i16* %14, i64 %26
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 1
  %127 = getelementptr inbounds i16, i16* %14, i64 %28
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 1
  %130 = shufflevector <8 x i16> %108, <8 x i16> %111, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %131 = shufflevector <8 x i16> %114, <8 x i16> %117, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %132 = shufflevector <8 x i16> %120, <8 x i16> %123, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %133 = shufflevector <8 x i16> %126, <8 x i16> %129, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %134 = bitcast <8 x i16> %130 to <4 x i32>
  %135 = bitcast <8 x i16> %131 to <4 x i32>
  %136 = shufflevector <4 x i32> %134, <4 x i32> %135, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %137 = bitcast <4 x i32> %136 to <2 x i64>
  %138 = bitcast <8 x i16> %132 to <4 x i32>
  %139 = bitcast <8 x i16> %133 to <4 x i32>
  %140 = shufflevector <4 x i32> %138, <4 x i32> %139, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %141 = bitcast <4 x i32> %140 to <2 x i64>
  %142 = shufflevector <2 x i64> %137, <2 x i64> %141, <2 x i32> <i32 0, i32 2>
  %143 = shufflevector <2 x i64> %137, <2 x i64> %141, <2 x i32> <i32 1, i32 3>
  %144 = bitcast i16* %15 to <2 x i64>*
  store <2 x i64> %142, <2 x i64>* %144, align 16
  %145 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 24
  %146 = bitcast i16* %145 to <2 x i64>*
  store <2 x i64> %143, <2 x i64>* %146, align 16
  %147 = shufflevector <4 x i32> %134, <4 x i32> %135, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %148 = bitcast <4 x i32> %147 to <2 x i64>
  %149 = shufflevector <4 x i32> %138, <4 x i32> %139, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %150 = bitcast <4 x i32> %149 to <2 x i64>
  %151 = shufflevector <2 x i64> %148, <2 x i64> %150, <2 x i32> <i32 0, i32 2>
  %152 = shufflevector <2 x i64> %148, <2 x i64> %150, <2 x i32> <i32 1, i32 3>
  %153 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 40
  %154 = bitcast i16* %153 to <2 x i64>*
  store <2 x i64> %151, <2 x i64>* %154, align 16
  %155 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 56
  %156 = bitcast i16* %155 to <2 x i64>*
  store <2 x i64> %152, <2 x i64>* %156, align 16
  %157 = shufflevector <8 x i16> %108, <8 x i16> %111, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %158 = shufflevector <8 x i16> %114, <8 x i16> %117, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %159 = shufflevector <8 x i16> %120, <8 x i16> %123, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %160 = shufflevector <8 x i16> %126, <8 x i16> %129, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %161 = bitcast <8 x i16> %157 to <4 x i32>
  %162 = bitcast <8 x i16> %158 to <4 x i32>
  %163 = shufflevector <4 x i32> %161, <4 x i32> %162, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %164 = bitcast <4 x i32> %163 to <2 x i64>
  %165 = bitcast <8 x i16> %159 to <4 x i32>
  %166 = bitcast <8 x i16> %160 to <4 x i32>
  %167 = shufflevector <4 x i32> %165, <4 x i32> %166, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %168 = bitcast <4 x i32> %167 to <2 x i64>
  %169 = shufflevector <2 x i64> %164, <2 x i64> %168, <2 x i32> <i32 0, i32 2>
  %170 = shufflevector <2 x i64> %164, <2 x i64> %168, <2 x i32> <i32 1, i32 3>
  %171 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 72
  %172 = bitcast i16* %171 to <2 x i64>*
  store <2 x i64> %169, <2 x i64>* %172, align 16
  %173 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 88
  %174 = bitcast i16* %173 to <2 x i64>*
  store <2 x i64> %170, <2 x i64>* %174, align 16
  %175 = shufflevector <4 x i32> %161, <4 x i32> %162, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %176 = bitcast <4 x i32> %175 to <2 x i64>
  %177 = shufflevector <4 x i32> %165, <4 x i32> %166, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %178 = bitcast <4 x i32> %177 to <2 x i64>
  %179 = shufflevector <2 x i64> %176, <2 x i64> %178, <2 x i32> <i32 0, i32 2>
  %180 = shufflevector <2 x i64> %176, <2 x i64> %178, <2 x i32> <i32 1, i32 3>
  %181 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 104
  %182 = bitcast i16* %181 to <2 x i64>*
  store <2 x i64> %179, <2 x i64>* %182, align 16
  %183 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 120
  %184 = bitcast i16* %183 to <2 x i64>*
  store <2 x i64> %180, <2 x i64>* %184, align 16
  %185 = getelementptr inbounds i16, i16* %0, i64 %13
  %186 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 128
  %187 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 136
  %188 = bitcast i16* %0 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 1
  %190 = getelementptr inbounds i16, i16* %0, i64 %16
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 1
  %193 = getelementptr inbounds i16, i16* %0, i64 %18
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 1
  %196 = getelementptr inbounds i16, i16* %0, i64 %20
  %197 = bitcast i16* %196 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 1
  %199 = getelementptr inbounds i16, i16* %0, i64 %22
  %200 = bitcast i16* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 1
  %202 = getelementptr inbounds i16, i16* %0, i64 %24
  %203 = bitcast i16* %202 to <8 x i16>*
  %204 = load <8 x i16>, <8 x i16>* %203, align 1
  %205 = getelementptr inbounds i16, i16* %0, i64 %26
  %206 = bitcast i16* %205 to <8 x i16>*
  %207 = load <8 x i16>, <8 x i16>* %206, align 1
  %208 = getelementptr inbounds i16, i16* %0, i64 %28
  %209 = bitcast i16* %208 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 1
  %211 = shufflevector <8 x i16> %189, <8 x i16> %192, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %212 = shufflevector <8 x i16> %195, <8 x i16> %198, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %213 = shufflevector <8 x i16> %201, <8 x i16> %204, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %214 = shufflevector <8 x i16> %207, <8 x i16> %210, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %215 = bitcast <8 x i16> %211 to <4 x i32>
  %216 = bitcast <8 x i16> %212 to <4 x i32>
  %217 = shufflevector <4 x i32> %215, <4 x i32> %216, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %218 = bitcast <4 x i32> %217 to <2 x i64>
  %219 = bitcast <8 x i16> %213 to <4 x i32>
  %220 = bitcast <8 x i16> %214 to <4 x i32>
  %221 = shufflevector <4 x i32> %219, <4 x i32> %220, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %222 = bitcast <4 x i32> %221 to <2 x i64>
  %223 = shufflevector <2 x i64> %218, <2 x i64> %222, <2 x i32> <i32 0, i32 2>
  %224 = shufflevector <2 x i64> %218, <2 x i64> %222, <2 x i32> <i32 1, i32 3>
  %225 = bitcast i16* %186 to <2 x i64>*
  store <2 x i64> %223, <2 x i64>* %225, align 16
  %226 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 144
  %227 = bitcast i16* %226 to <2 x i64>*
  store <2 x i64> %224, <2 x i64>* %227, align 16
  %228 = shufflevector <4 x i32> %215, <4 x i32> %216, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %229 = bitcast <4 x i32> %228 to <2 x i64>
  %230 = shufflevector <4 x i32> %219, <4 x i32> %220, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %231 = bitcast <4 x i32> %230 to <2 x i64>
  %232 = shufflevector <2 x i64> %229, <2 x i64> %231, <2 x i32> <i32 0, i32 2>
  %233 = shufflevector <2 x i64> %229, <2 x i64> %231, <2 x i32> <i32 1, i32 3>
  %234 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 160
  %235 = bitcast i16* %234 to <2 x i64>*
  store <2 x i64> %232, <2 x i64>* %235, align 16
  %236 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 176
  %237 = bitcast i16* %236 to <2 x i64>*
  store <2 x i64> %233, <2 x i64>* %237, align 16
  %238 = shufflevector <8 x i16> %189, <8 x i16> %192, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %239 = shufflevector <8 x i16> %195, <8 x i16> %198, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %240 = shufflevector <8 x i16> %201, <8 x i16> %204, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %241 = shufflevector <8 x i16> %207, <8 x i16> %210, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %242 = bitcast <8 x i16> %238 to <4 x i32>
  %243 = bitcast <8 x i16> %239 to <4 x i32>
  %244 = shufflevector <4 x i32> %242, <4 x i32> %243, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %245 = bitcast <4 x i32> %244 to <2 x i64>
  %246 = bitcast <8 x i16> %240 to <4 x i32>
  %247 = bitcast <8 x i16> %241 to <4 x i32>
  %248 = shufflevector <4 x i32> %246, <4 x i32> %247, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %249 = bitcast <4 x i32> %248 to <2 x i64>
  %250 = shufflevector <2 x i64> %245, <2 x i64> %249, <2 x i32> <i32 0, i32 2>
  %251 = shufflevector <2 x i64> %245, <2 x i64> %249, <2 x i32> <i32 1, i32 3>
  %252 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 192
  %253 = bitcast i16* %252 to <2 x i64>*
  store <2 x i64> %250, <2 x i64>* %253, align 16
  %254 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 208
  %255 = bitcast i16* %254 to <2 x i64>*
  store <2 x i64> %251, <2 x i64>* %255, align 16
  %256 = shufflevector <4 x i32> %242, <4 x i32> %243, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %257 = bitcast <4 x i32> %256 to <2 x i64>
  %258 = shufflevector <4 x i32> %246, <4 x i32> %247, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %259 = bitcast <4 x i32> %258 to <2 x i64>
  %260 = shufflevector <2 x i64> %257, <2 x i64> %259, <2 x i32> <i32 0, i32 2>
  %261 = shufflevector <2 x i64> %257, <2 x i64> %259, <2 x i32> <i32 1, i32 3>
  %262 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 224
  %263 = bitcast i16* %262 to <2 x i64>*
  store <2 x i64> %260, <2 x i64>* %263, align 16
  %264 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 240
  %265 = bitcast i16* %264 to <2 x i64>*
  store <2 x i64> %261, <2 x i64>* %265, align 16
  %266 = bitcast i16* %185 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 1
  %268 = getelementptr inbounds i16, i16* %185, i64 %16
  %269 = bitcast i16* %268 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 1
  %271 = getelementptr inbounds i16, i16* %185, i64 %18
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 1
  %274 = getelementptr inbounds i16, i16* %185, i64 %20
  %275 = bitcast i16* %274 to <8 x i16>*
  %276 = load <8 x i16>, <8 x i16>* %275, align 1
  %277 = getelementptr inbounds i16, i16* %185, i64 %22
  %278 = bitcast i16* %277 to <8 x i16>*
  %279 = load <8 x i16>, <8 x i16>* %278, align 1
  %280 = getelementptr inbounds i16, i16* %185, i64 %24
  %281 = bitcast i16* %280 to <8 x i16>*
  %282 = load <8 x i16>, <8 x i16>* %281, align 1
  %283 = getelementptr inbounds i16, i16* %185, i64 %26
  %284 = bitcast i16* %283 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 1
  %286 = getelementptr inbounds i16, i16* %185, i64 %28
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 1
  %289 = shufflevector <8 x i16> %267, <8 x i16> %270, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %290 = shufflevector <8 x i16> %273, <8 x i16> %276, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %291 = shufflevector <8 x i16> %279, <8 x i16> %282, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %292 = shufflevector <8 x i16> %285, <8 x i16> %288, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %293 = bitcast <8 x i16> %289 to <4 x i32>
  %294 = bitcast <8 x i16> %290 to <4 x i32>
  %295 = shufflevector <4 x i32> %293, <4 x i32> %294, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %296 = bitcast <4 x i32> %295 to <2 x i64>
  %297 = bitcast <8 x i16> %291 to <4 x i32>
  %298 = bitcast <8 x i16> %292 to <4 x i32>
  %299 = shufflevector <4 x i32> %297, <4 x i32> %298, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %300 = bitcast <4 x i32> %299 to <2 x i64>
  %301 = shufflevector <2 x i64> %296, <2 x i64> %300, <2 x i32> <i32 0, i32 2>
  %302 = shufflevector <2 x i64> %296, <2 x i64> %300, <2 x i32> <i32 1, i32 3>
  %303 = bitcast i16* %187 to <2 x i64>*
  store <2 x i64> %301, <2 x i64>* %303, align 16
  %304 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 152
  %305 = bitcast i16* %304 to <2 x i64>*
  store <2 x i64> %302, <2 x i64>* %305, align 16
  %306 = shufflevector <4 x i32> %293, <4 x i32> %294, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %307 = bitcast <4 x i32> %306 to <2 x i64>
  %308 = shufflevector <4 x i32> %297, <4 x i32> %298, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %309 = bitcast <4 x i32> %308 to <2 x i64>
  %310 = shufflevector <2 x i64> %307, <2 x i64> %309, <2 x i32> <i32 0, i32 2>
  %311 = shufflevector <2 x i64> %307, <2 x i64> %309, <2 x i32> <i32 1, i32 3>
  %312 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 168
  %313 = bitcast i16* %312 to <2 x i64>*
  store <2 x i64> %310, <2 x i64>* %313, align 16
  %314 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 184
  %315 = bitcast i16* %314 to <2 x i64>*
  store <2 x i64> %311, <2 x i64>* %315, align 16
  %316 = shufflevector <8 x i16> %267, <8 x i16> %270, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %317 = shufflevector <8 x i16> %273, <8 x i16> %276, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %318 = shufflevector <8 x i16> %279, <8 x i16> %282, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %319 = shufflevector <8 x i16> %285, <8 x i16> %288, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %320 = bitcast <8 x i16> %316 to <4 x i32>
  %321 = bitcast <8 x i16> %317 to <4 x i32>
  %322 = shufflevector <4 x i32> %320, <4 x i32> %321, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %323 = bitcast <4 x i32> %322 to <2 x i64>
  %324 = bitcast <8 x i16> %318 to <4 x i32>
  %325 = bitcast <8 x i16> %319 to <4 x i32>
  %326 = shufflevector <4 x i32> %324, <4 x i32> %325, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %327 = bitcast <4 x i32> %326 to <2 x i64>
  %328 = shufflevector <2 x i64> %323, <2 x i64> %327, <2 x i32> <i32 0, i32 2>
  %329 = shufflevector <2 x i64> %323, <2 x i64> %327, <2 x i32> <i32 1, i32 3>
  %330 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 200
  %331 = bitcast i16* %330 to <2 x i64>*
  store <2 x i64> %328, <2 x i64>* %331, align 16
  %332 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 216
  %333 = bitcast i16* %332 to <2 x i64>*
  store <2 x i64> %329, <2 x i64>* %333, align 16
  %334 = shufflevector <4 x i32> %320, <4 x i32> %321, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %335 = bitcast <4 x i32> %334 to <2 x i64>
  %336 = shufflevector <4 x i32> %324, <4 x i32> %325, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %337 = bitcast <4 x i32> %336 to <2 x i64>
  %338 = shufflevector <2 x i64> %335, <2 x i64> %337, <2 x i32> <i32 0, i32 2>
  %339 = shufflevector <2 x i64> %335, <2 x i64> %337, <2 x i32> <i32 1, i32 3>
  %340 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 232
  %341 = bitcast i16* %340 to <2 x i64>*
  store <2 x i64> %338, <2 x i64>* %341, align 16
  %342 = getelementptr inbounds [256 x i16], [256 x i16]* %7, i64 0, i64 248
  %343 = bitcast i16* %342 to <2 x i64>*
  store <2 x i64> %339, <2 x i64>* %343, align 16
  call void @vpx_highbd_lpf_horizontal_16_sse2(i16* %186, i32 16, i8* %2, i8* %3, i8* %4, i32 %5) #6
  call void @vpx_highbd_lpf_horizontal_16_sse2(i16* %187, i32 16, i8* %2, i8* %3, i8* %4, i32 %5) #6
  %344 = bitcast [256 x i16]* %7 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 16
  %346 = bitcast i16* %67 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 16
  %348 = bitcast i16* %75 to <8 x i16>*
  %349 = load <8 x i16>, <8 x i16>* %348, align 16
  %350 = bitcast i16* %77 to <8 x i16>*
  %351 = load <8 x i16>, <8 x i16>* %350, align 16
  %352 = bitcast i16* %93 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 16
  %354 = bitcast i16* %95 to <8 x i16>*
  %355 = load <8 x i16>, <8 x i16>* %354, align 16
  %356 = bitcast i16* %103 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 16
  %358 = bitcast i16* %105 to <8 x i16>*
  %359 = load <8 x i16>, <8 x i16>* %358, align 16
  %360 = shufflevector <8 x i16> %345, <8 x i16> %347, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %361 = shufflevector <8 x i16> %349, <8 x i16> %351, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %362 = shufflevector <8 x i16> %353, <8 x i16> %355, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %363 = shufflevector <8 x i16> %357, <8 x i16> %359, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %364 = bitcast <8 x i16> %360 to <4 x i32>
  %365 = bitcast <8 x i16> %361 to <4 x i32>
  %366 = shufflevector <4 x i32> %364, <4 x i32> %365, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %367 = bitcast <4 x i32> %366 to <2 x i64>
  %368 = bitcast <8 x i16> %362 to <4 x i32>
  %369 = bitcast <8 x i16> %363 to <4 x i32>
  %370 = shufflevector <4 x i32> %368, <4 x i32> %369, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %371 = bitcast <4 x i32> %370 to <2 x i64>
  %372 = shufflevector <2 x i64> %367, <2 x i64> %371, <2 x i32> <i32 0, i32 2>
  %373 = shufflevector <2 x i64> %367, <2 x i64> %371, <2 x i32> <i32 1, i32 3>
  %374 = bitcast i16* %11 to <2 x i64>*
  store <2 x i64> %372, <2 x i64>* %374, align 1
  %375 = bitcast i16* %31 to <2 x i64>*
  store <2 x i64> %373, <2 x i64>* %375, align 1
  %376 = shufflevector <4 x i32> %364, <4 x i32> %365, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %377 = bitcast <4 x i32> %376 to <2 x i64>
  %378 = shufflevector <4 x i32> %368, <4 x i32> %369, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %379 = bitcast <4 x i32> %378 to <2 x i64>
  %380 = shufflevector <2 x i64> %377, <2 x i64> %379, <2 x i32> <i32 0, i32 2>
  %381 = shufflevector <2 x i64> %377, <2 x i64> %379, <2 x i32> <i32 1, i32 3>
  %382 = bitcast i16* %34 to <2 x i64>*
  store <2 x i64> %380, <2 x i64>* %382, align 1
  %383 = bitcast i16* %37 to <2 x i64>*
  store <2 x i64> %381, <2 x i64>* %383, align 1
  %384 = shufflevector <8 x i16> %345, <8 x i16> %347, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %385 = shufflevector <8 x i16> %349, <8 x i16> %351, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %386 = shufflevector <8 x i16> %353, <8 x i16> %355, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %387 = shufflevector <8 x i16> %357, <8 x i16> %359, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %388 = bitcast <8 x i16> %384 to <4 x i32>
  %389 = bitcast <8 x i16> %385 to <4 x i32>
  %390 = shufflevector <4 x i32> %388, <4 x i32> %389, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %391 = bitcast <4 x i32> %390 to <2 x i64>
  %392 = bitcast <8 x i16> %386 to <4 x i32>
  %393 = bitcast <8 x i16> %387 to <4 x i32>
  %394 = shufflevector <4 x i32> %392, <4 x i32> %393, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %395 = bitcast <4 x i32> %394 to <2 x i64>
  %396 = shufflevector <2 x i64> %391, <2 x i64> %395, <2 x i32> <i32 0, i32 2>
  %397 = shufflevector <2 x i64> %391, <2 x i64> %395, <2 x i32> <i32 1, i32 3>
  %398 = bitcast i16* %40 to <2 x i64>*
  store <2 x i64> %396, <2 x i64>* %398, align 1
  %399 = bitcast i16* %43 to <2 x i64>*
  store <2 x i64> %397, <2 x i64>* %399, align 1
  %400 = shufflevector <4 x i32> %388, <4 x i32> %389, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %401 = bitcast <4 x i32> %400 to <2 x i64>
  %402 = shufflevector <4 x i32> %392, <4 x i32> %393, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %403 = bitcast <4 x i32> %402 to <2 x i64>
  %404 = shufflevector <2 x i64> %401, <2 x i64> %403, <2 x i32> <i32 0, i32 2>
  %405 = shufflevector <2 x i64> %401, <2 x i64> %403, <2 x i32> <i32 1, i32 3>
  %406 = bitcast i16* %46 to <2 x i64>*
  store <2 x i64> %404, <2 x i64>* %406, align 1
  %407 = bitcast i16* %49 to <2 x i64>*
  store <2 x i64> %405, <2 x i64>* %407, align 1
  %408 = bitcast i16* %186 to <8 x i16>*
  %409 = load <8 x i16>, <8 x i16>* %408, align 16
  %410 = bitcast i16* %226 to <8 x i16>*
  %411 = load <8 x i16>, <8 x i16>* %410, align 16
  %412 = bitcast i16* %234 to <8 x i16>*
  %413 = load <8 x i16>, <8 x i16>* %412, align 16
  %414 = bitcast i16* %236 to <8 x i16>*
  %415 = load <8 x i16>, <8 x i16>* %414, align 16
  %416 = bitcast i16* %252 to <8 x i16>*
  %417 = load <8 x i16>, <8 x i16>* %416, align 16
  %418 = bitcast i16* %254 to <8 x i16>*
  %419 = load <8 x i16>, <8 x i16>* %418, align 16
  %420 = bitcast i16* %262 to <8 x i16>*
  %421 = load <8 x i16>, <8 x i16>* %420, align 16
  %422 = bitcast i16* %264 to <8 x i16>*
  %423 = load <8 x i16>, <8 x i16>* %422, align 16
  %424 = shufflevector <8 x i16> %409, <8 x i16> %411, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %425 = shufflevector <8 x i16> %413, <8 x i16> %415, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %426 = shufflevector <8 x i16> %417, <8 x i16> %419, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %427 = shufflevector <8 x i16> %421, <8 x i16> %423, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %428 = bitcast <8 x i16> %424 to <4 x i32>
  %429 = bitcast <8 x i16> %425 to <4 x i32>
  %430 = shufflevector <4 x i32> %428, <4 x i32> %429, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %431 = bitcast <4 x i32> %430 to <2 x i64>
  %432 = bitcast <8 x i16> %426 to <4 x i32>
  %433 = bitcast <8 x i16> %427 to <4 x i32>
  %434 = shufflevector <4 x i32> %432, <4 x i32> %433, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %435 = bitcast <4 x i32> %434 to <2 x i64>
  %436 = shufflevector <2 x i64> %431, <2 x i64> %435, <2 x i32> <i32 0, i32 2>
  %437 = shufflevector <2 x i64> %431, <2 x i64> %435, <2 x i32> <i32 1, i32 3>
  %438 = bitcast i16* %0 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %438, align 1
  %439 = bitcast i16* %190 to <2 x i64>*
  store <2 x i64> %437, <2 x i64>* %439, align 1
  %440 = shufflevector <4 x i32> %428, <4 x i32> %429, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %441 = bitcast <4 x i32> %440 to <2 x i64>
  %442 = shufflevector <4 x i32> %432, <4 x i32> %433, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %443 = bitcast <4 x i32> %442 to <2 x i64>
  %444 = shufflevector <2 x i64> %441, <2 x i64> %443, <2 x i32> <i32 0, i32 2>
  %445 = shufflevector <2 x i64> %441, <2 x i64> %443, <2 x i32> <i32 1, i32 3>
  %446 = bitcast i16* %193 to <2 x i64>*
  store <2 x i64> %444, <2 x i64>* %446, align 1
  %447 = bitcast i16* %196 to <2 x i64>*
  store <2 x i64> %445, <2 x i64>* %447, align 1
  %448 = shufflevector <8 x i16> %409, <8 x i16> %411, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %449 = shufflevector <8 x i16> %413, <8 x i16> %415, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %450 = shufflevector <8 x i16> %417, <8 x i16> %419, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %451 = shufflevector <8 x i16> %421, <8 x i16> %423, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %452 = bitcast <8 x i16> %448 to <4 x i32>
  %453 = bitcast <8 x i16> %449 to <4 x i32>
  %454 = shufflevector <4 x i32> %452, <4 x i32> %453, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %455 = bitcast <4 x i32> %454 to <2 x i64>
  %456 = bitcast <8 x i16> %450 to <4 x i32>
  %457 = bitcast <8 x i16> %451 to <4 x i32>
  %458 = shufflevector <4 x i32> %456, <4 x i32> %457, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %459 = bitcast <4 x i32> %458 to <2 x i64>
  %460 = shufflevector <2 x i64> %455, <2 x i64> %459, <2 x i32> <i32 0, i32 2>
  %461 = shufflevector <2 x i64> %455, <2 x i64> %459, <2 x i32> <i32 1, i32 3>
  %462 = bitcast i16* %199 to <2 x i64>*
  store <2 x i64> %460, <2 x i64>* %462, align 1
  %463 = bitcast i16* %202 to <2 x i64>*
  store <2 x i64> %461, <2 x i64>* %463, align 1
  %464 = shufflevector <4 x i32> %452, <4 x i32> %453, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %465 = bitcast <4 x i32> %464 to <2 x i64>
  %466 = shufflevector <4 x i32> %456, <4 x i32> %457, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %467 = bitcast <4 x i32> %466 to <2 x i64>
  %468 = shufflevector <2 x i64> %465, <2 x i64> %467, <2 x i32> <i32 0, i32 2>
  %469 = shufflevector <2 x i64> %465, <2 x i64> %467, <2 x i32> <i32 1, i32 3>
  %470 = bitcast i16* %205 to <2 x i64>*
  store <2 x i64> %468, <2 x i64>* %470, align 1
  %471 = bitcast i16* %208 to <2 x i64>*
  store <2 x i64> %469, <2 x i64>* %471, align 1
  %472 = getelementptr inbounds i16, i16* %14, i64 8
  %473 = bitcast i16* %15 to <8 x i16>*
  %474 = load <8 x i16>, <8 x i16>* %473, align 16
  %475 = bitcast i16* %145 to <8 x i16>*
  %476 = load <8 x i16>, <8 x i16>* %475, align 16
  %477 = bitcast i16* %153 to <8 x i16>*
  %478 = load <8 x i16>, <8 x i16>* %477, align 16
  %479 = bitcast i16* %155 to <8 x i16>*
  %480 = load <8 x i16>, <8 x i16>* %479, align 16
  %481 = bitcast i16* %171 to <8 x i16>*
  %482 = load <8 x i16>, <8 x i16>* %481, align 16
  %483 = bitcast i16* %173 to <8 x i16>*
  %484 = load <8 x i16>, <8 x i16>* %483, align 16
  %485 = bitcast i16* %181 to <8 x i16>*
  %486 = load <8 x i16>, <8 x i16>* %485, align 16
  %487 = bitcast i16* %183 to <8 x i16>*
  %488 = load <8 x i16>, <8 x i16>* %487, align 16
  %489 = shufflevector <8 x i16> %474, <8 x i16> %476, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %490 = shufflevector <8 x i16> %478, <8 x i16> %480, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %491 = shufflevector <8 x i16> %482, <8 x i16> %484, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %492 = shufflevector <8 x i16> %486, <8 x i16> %488, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %493 = bitcast <8 x i16> %489 to <4 x i32>
  %494 = bitcast <8 x i16> %490 to <4 x i32>
  %495 = shufflevector <4 x i32> %493, <4 x i32> %494, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %496 = bitcast <4 x i32> %495 to <2 x i64>
  %497 = bitcast <8 x i16> %491 to <4 x i32>
  %498 = bitcast <8 x i16> %492 to <4 x i32>
  %499 = shufflevector <4 x i32> %497, <4 x i32> %498, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %500 = bitcast <4 x i32> %499 to <2 x i64>
  %501 = shufflevector <2 x i64> %496, <2 x i64> %500, <2 x i32> <i32 0, i32 2>
  %502 = shufflevector <2 x i64> %496, <2 x i64> %500, <2 x i32> <i32 1, i32 3>
  %503 = bitcast i16* %14 to <2 x i64>*
  store <2 x i64> %501, <2 x i64>* %503, align 1
  %504 = bitcast i16* %109 to <2 x i64>*
  store <2 x i64> %502, <2 x i64>* %504, align 1
  %505 = shufflevector <4 x i32> %493, <4 x i32> %494, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %506 = bitcast <4 x i32> %505 to <2 x i64>
  %507 = shufflevector <4 x i32> %497, <4 x i32> %498, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %508 = bitcast <4 x i32> %507 to <2 x i64>
  %509 = shufflevector <2 x i64> %506, <2 x i64> %508, <2 x i32> <i32 0, i32 2>
  %510 = shufflevector <2 x i64> %506, <2 x i64> %508, <2 x i32> <i32 1, i32 3>
  %511 = bitcast i16* %112 to <2 x i64>*
  store <2 x i64> %509, <2 x i64>* %511, align 1
  %512 = bitcast i16* %115 to <2 x i64>*
  store <2 x i64> %510, <2 x i64>* %512, align 1
  %513 = shufflevector <8 x i16> %474, <8 x i16> %476, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %514 = shufflevector <8 x i16> %478, <8 x i16> %480, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %515 = shufflevector <8 x i16> %482, <8 x i16> %484, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %516 = shufflevector <8 x i16> %486, <8 x i16> %488, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %517 = bitcast <8 x i16> %513 to <4 x i32>
  %518 = bitcast <8 x i16> %514 to <4 x i32>
  %519 = shufflevector <4 x i32> %517, <4 x i32> %518, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %520 = bitcast <4 x i32> %519 to <2 x i64>
  %521 = bitcast <8 x i16> %515 to <4 x i32>
  %522 = bitcast <8 x i16> %516 to <4 x i32>
  %523 = shufflevector <4 x i32> %521, <4 x i32> %522, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %524 = bitcast <4 x i32> %523 to <2 x i64>
  %525 = shufflevector <2 x i64> %520, <2 x i64> %524, <2 x i32> <i32 0, i32 2>
  %526 = shufflevector <2 x i64> %520, <2 x i64> %524, <2 x i32> <i32 1, i32 3>
  %527 = bitcast i16* %118 to <2 x i64>*
  store <2 x i64> %525, <2 x i64>* %527, align 1
  %528 = bitcast i16* %121 to <2 x i64>*
  store <2 x i64> %526, <2 x i64>* %528, align 1
  %529 = shufflevector <4 x i32> %517, <4 x i32> %518, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %530 = bitcast <4 x i32> %529 to <2 x i64>
  %531 = shufflevector <4 x i32> %521, <4 x i32> %522, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %532 = bitcast <4 x i32> %531 to <2 x i64>
  %533 = shufflevector <2 x i64> %530, <2 x i64> %532, <2 x i32> <i32 0, i32 2>
  %534 = shufflevector <2 x i64> %530, <2 x i64> %532, <2 x i32> <i32 1, i32 3>
  %535 = bitcast i16* %124 to <2 x i64>*
  store <2 x i64> %533, <2 x i64>* %535, align 1
  %536 = bitcast i16* %127 to <2 x i64>*
  store <2 x i64> %534, <2 x i64>* %536, align 1
  %537 = bitcast i16* %187 to <8 x i16>*
  %538 = load <8 x i16>, <8 x i16>* %537, align 16
  %539 = bitcast i16* %304 to <8 x i16>*
  %540 = load <8 x i16>, <8 x i16>* %539, align 16
  %541 = bitcast i16* %312 to <8 x i16>*
  %542 = load <8 x i16>, <8 x i16>* %541, align 16
  %543 = bitcast i16* %314 to <8 x i16>*
  %544 = load <8 x i16>, <8 x i16>* %543, align 16
  %545 = bitcast i16* %330 to <8 x i16>*
  %546 = load <8 x i16>, <8 x i16>* %545, align 16
  %547 = bitcast i16* %332 to <8 x i16>*
  %548 = load <8 x i16>, <8 x i16>* %547, align 16
  %549 = bitcast i16* %340 to <8 x i16>*
  %550 = load <8 x i16>, <8 x i16>* %549, align 16
  %551 = bitcast i16* %342 to <8 x i16>*
  %552 = load <8 x i16>, <8 x i16>* %551, align 16
  %553 = shufflevector <8 x i16> %538, <8 x i16> %540, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %554 = shufflevector <8 x i16> %542, <8 x i16> %544, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %555 = shufflevector <8 x i16> %546, <8 x i16> %548, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %556 = shufflevector <8 x i16> %550, <8 x i16> %552, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %557 = bitcast <8 x i16> %553 to <4 x i32>
  %558 = bitcast <8 x i16> %554 to <4 x i32>
  %559 = shufflevector <4 x i32> %557, <4 x i32> %558, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %560 = bitcast <4 x i32> %559 to <2 x i64>
  %561 = bitcast <8 x i16> %555 to <4 x i32>
  %562 = bitcast <8 x i16> %556 to <4 x i32>
  %563 = shufflevector <4 x i32> %561, <4 x i32> %562, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %564 = bitcast <4 x i32> %563 to <2 x i64>
  %565 = shufflevector <2 x i64> %560, <2 x i64> %564, <2 x i32> <i32 0, i32 2>
  %566 = shufflevector <2 x i64> %560, <2 x i64> %564, <2 x i32> <i32 1, i32 3>
  %567 = bitcast i16* %472 to <2 x i64>*
  store <2 x i64> %565, <2 x i64>* %567, align 1
  %568 = getelementptr inbounds i16, i16* %472, i64 %16
  %569 = bitcast i16* %568 to <2 x i64>*
  store <2 x i64> %566, <2 x i64>* %569, align 1
  %570 = shufflevector <4 x i32> %557, <4 x i32> %558, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %571 = bitcast <4 x i32> %570 to <2 x i64>
  %572 = shufflevector <4 x i32> %561, <4 x i32> %562, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %573 = bitcast <4 x i32> %572 to <2 x i64>
  %574 = shufflevector <2 x i64> %571, <2 x i64> %573, <2 x i32> <i32 0, i32 2>
  %575 = shufflevector <2 x i64> %571, <2 x i64> %573, <2 x i32> <i32 1, i32 3>
  %576 = getelementptr inbounds i16, i16* %472, i64 %18
  %577 = bitcast i16* %576 to <2 x i64>*
  store <2 x i64> %574, <2 x i64>* %577, align 1
  %578 = getelementptr inbounds i16, i16* %472, i64 %20
  %579 = bitcast i16* %578 to <2 x i64>*
  store <2 x i64> %575, <2 x i64>* %579, align 1
  %580 = shufflevector <8 x i16> %538, <8 x i16> %540, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %581 = shufflevector <8 x i16> %542, <8 x i16> %544, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %582 = shufflevector <8 x i16> %546, <8 x i16> %548, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %583 = shufflevector <8 x i16> %550, <8 x i16> %552, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %584 = bitcast <8 x i16> %580 to <4 x i32>
  %585 = bitcast <8 x i16> %581 to <4 x i32>
  %586 = shufflevector <4 x i32> %584, <4 x i32> %585, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %587 = bitcast <4 x i32> %586 to <2 x i64>
  %588 = bitcast <8 x i16> %582 to <4 x i32>
  %589 = bitcast <8 x i16> %583 to <4 x i32>
  %590 = shufflevector <4 x i32> %588, <4 x i32> %589, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %591 = bitcast <4 x i32> %590 to <2 x i64>
  %592 = shufflevector <2 x i64> %587, <2 x i64> %591, <2 x i32> <i32 0, i32 2>
  %593 = shufflevector <2 x i64> %587, <2 x i64> %591, <2 x i32> <i32 1, i32 3>
  %594 = getelementptr inbounds i16, i16* %472, i64 %22
  %595 = bitcast i16* %594 to <2 x i64>*
  store <2 x i64> %592, <2 x i64>* %595, align 1
  %596 = getelementptr inbounds i16, i16* %472, i64 %24
  %597 = bitcast i16* %596 to <2 x i64>*
  store <2 x i64> %593, <2 x i64>* %597, align 1
  %598 = shufflevector <4 x i32> %584, <4 x i32> %585, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %599 = bitcast <4 x i32> %598 to <2 x i64>
  %600 = shufflevector <4 x i32> %588, <4 x i32> %589, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %601 = bitcast <4 x i32> %600 to <2 x i64>
  %602 = shufflevector <2 x i64> %599, <2 x i64> %601, <2 x i32> <i32 0, i32 2>
  %603 = shufflevector <2 x i64> %599, <2 x i64> %601, <2 x i32> <i32 1, i32 3>
  %604 = getelementptr inbounds i16, i16* %472, i64 %26
  %605 = bitcast i16* %604 to <2 x i64>*
  store <2 x i64> %602, <2 x i64>* %605, align 1
  %606 = getelementptr inbounds i16, i16* %472, i64 %28
  %607 = bitcast i16* %606 to <2 x i64>*
  store <2 x i64> %603, <2 x i64>* %607, align 1
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.usub.sat.v8i16(<8 x i16>, <8 x i16>) #5

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16>, <8 x i16>) #5

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16>, <8 x i16>) #5

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #5

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
