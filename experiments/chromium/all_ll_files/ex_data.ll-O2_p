; ModuleID = '../../third_party/boringssl/src/crypto/ex_data.c'
source_filename = "../../third_party/boringssl/src/crypto/ex_data.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.CRYPTO_EX_DATA_CLASS = type { %struct.CRYPTO_STATIC_MUTEX, %struct.stack_st_CRYPTO_EX_DATA_FUNCS*, i8 }
%struct.CRYPTO_STATIC_MUTEX = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%struct.stack_st_CRYPTO_EX_DATA_FUNCS = type opaque
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }

@.str = private unnamed_addr constant [49 x i8] c"../../third_party/boringssl/src/crypto/ex_data.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CRYPTO_get_ex_new_index(%struct.CRYPTO_EX_DATA_CLASS*, i32* nocapture, i64, i8*, void (i8*, i8*, %struct.crypto_ex_data_st*, i32, i64, i8*)*) local_unnamed_addr #0 {
  %6 = tail call i8* @OPENSSL_malloc(i64 24) #4
  %7 = icmp eq i8* %6, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  tail call void @ERR_put_error(i32 14, i32 0, i32 65, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0), i32 138) #4
  br label %42

9:                                                ; preds = %5
  %10 = bitcast i8* %6 to i64*
  store i64 %2, i64* %10, align 8
  %11 = getelementptr inbounds i8, i8* %6, i64 8
  %12 = bitcast i8* %11 to i8**
  store i8* %3, i8** %12, align 8
  %13 = getelementptr inbounds i8, i8* %6, i64 16
  %14 = bitcast i8* %13 to void (i8*, i8*, %struct.crypto_ex_data_st*, i32, i64, i8*)**
  store void (i8*, i8*, %struct.crypto_ex_data_st*, i32, i64, i8*)* %4, void (i8*, i8*, %struct.crypto_ex_data_st*, i32, i64, i8*)** %14, align 8
  %15 = getelementptr inbounds %struct.CRYPTO_EX_DATA_CLASS, %struct.CRYPTO_EX_DATA_CLASS* %0, i64 0, i32 0
  tail call void @CRYPTO_STATIC_MUTEX_lock_write(%struct.CRYPTO_STATIC_MUTEX* %15) #4
  %16 = getelementptr inbounds %struct.CRYPTO_EX_DATA_CLASS, %struct.CRYPTO_EX_DATA_CLASS* %0, i64 0, i32 1
  %17 = load %struct.stack_st_CRYPTO_EX_DATA_FUNCS*, %struct.stack_st_CRYPTO_EX_DATA_FUNCS** %16, align 8
  %18 = icmp eq %struct.stack_st_CRYPTO_EX_DATA_FUNCS* %17, null
  br i1 %18, label %19, label %24

19:                                               ; preds = %9
  %20 = tail call %struct.stack_st* @sk_new_null() #4
  %21 = bitcast %struct.stack_st* %20 to %struct.stack_st_CRYPTO_EX_DATA_FUNCS*
  %22 = bitcast %struct.stack_st_CRYPTO_EX_DATA_FUNCS** %16 to %struct.stack_st**
  store %struct.stack_st* %20, %struct.stack_st** %22, align 8
  %23 = icmp eq %struct.stack_st* %20, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %9, %19
  %25 = phi %struct.stack_st_CRYPTO_EX_DATA_FUNCS* [ %21, %19 ], [ %17, %9 ]
  %26 = bitcast %struct.stack_st_CRYPTO_EX_DATA_FUNCS* %25 to %struct.stack_st*
  %27 = tail call i64 @sk_push(%struct.stack_st* %26, i8* nonnull %6) #4
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %24, %19
  tail call void @ERR_put_error(i32 14, i32 0, i32 65, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0), i32 154) #4
  tail call void @OPENSSL_free(i8* nonnull %6) #4
  br label %40

30:                                               ; preds = %24
  %31 = bitcast %struct.stack_st_CRYPTO_EX_DATA_FUNCS** %16 to %struct.stack_st**
  %32 = load %struct.stack_st*, %struct.stack_st** %31, align 8
  %33 = tail call i64 @sk_num(%struct.stack_st* %32) #4
  %34 = add i64 %33, 4294967295
  %35 = getelementptr inbounds %struct.CRYPTO_EX_DATA_CLASS, %struct.CRYPTO_EX_DATA_CLASS* %0, i64 0, i32 2
  %36 = load i8, i8* %35, align 8
  %37 = zext i8 %36 to i64
  %38 = add i64 %34, %37
  %39 = trunc i64 %38 to i32
  store i32 %39, i32* %1, align 4
  br label %40

40:                                               ; preds = %30, %29
  %41 = phi i32 [ 0, %29 ], [ 1, %30 ]
  tail call void @CRYPTO_STATIC_MUTEX_unlock_write(%struct.CRYPTO_STATIC_MUTEX* %15) #4
  br label %42

42:                                               ; preds = %40, %8
  %43 = phi i32 [ 0, %8 ], [ %41, %40 ]
  ret i32 %43
}

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare void @CRYPTO_STATIC_MUTEX_lock_write(%struct.CRYPTO_STATIC_MUTEX*) local_unnamed_addr #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

declare void @CRYPTO_STATIC_MUTEX_unlock_write(%struct.CRYPTO_STATIC_MUTEX*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CRYPTO_set_ex_data(%struct.crypto_ex_data_st* nocapture, i32, i8*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.crypto_ex_data_st, %struct.crypto_ex_data_st* %0, i64 0, i32 0
  %5 = load %struct.stack_st_void*, %struct.stack_st_void** %4, align 8
  %6 = icmp eq %struct.stack_st_void* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = bitcast %struct.stack_st_void* %5 to %struct.stack_st*
  br label %14

9:                                                ; preds = %3
  %10 = tail call %struct.stack_st* @sk_new_null() #4
  %11 = bitcast %struct.crypto_ex_data_st* %0 to %struct.stack_st**
  store %struct.stack_st* %10, %struct.stack_st** %11, align 8
  %12 = icmp eq %struct.stack_st* %10, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %9
  tail call void @ERR_put_error(i32 14, i32 0, i32 65, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0), i32 174) #4
  br label %36

14:                                               ; preds = %7, %9
  %15 = phi %struct.stack_st* [ %10, %9 ], [ %8, %7 ]
  %16 = tail call i64 @sk_num(%struct.stack_st* %15) #4
  %17 = trunc i64 %16 to i32
  %18 = icmp sgt i32 %17, %1
  %19 = load %struct.stack_st_void*, %struct.stack_st_void** %4, align 8
  br i1 %18, label %31, label %24

20:                                               ; preds = %24
  %21 = add nsw i32 %26, 1
  %22 = icmp slt i32 %26, %1
  %23 = load %struct.stack_st_void*, %struct.stack_st_void** %4, align 8
  br i1 %22, label %24, label %31

24:                                               ; preds = %14, %20
  %25 = phi %struct.stack_st_void* [ %23, %20 ], [ %19, %14 ]
  %26 = phi i32 [ %21, %20 ], [ %17, %14 ]
  %27 = bitcast %struct.stack_st_void* %25 to %struct.stack_st*
  %28 = tail call i64 @sk_push(%struct.stack_st* %27, i8* null) #4
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %20

30:                                               ; preds = %24
  tail call void @ERR_put_error(i32 14, i32 0, i32 65, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0), i32 184) #4
  br label %36

31:                                               ; preds = %20, %14
  %32 = phi %struct.stack_st_void* [ %19, %14 ], [ %23, %20 ]
  %33 = sext i32 %1 to i64
  %34 = bitcast %struct.stack_st_void* %32 to %struct.stack_st*
  %35 = tail call i8* @sk_set(%struct.stack_st* %34, i64 %33, i8* %2) #4
  br label %36

36:                                               ; preds = %31, %30, %13
  %37 = phi i32 [ 0, %13 ], [ 0, %30 ], [ 1, %31 ]
  ret i32 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @CRYPTO_get_ex_data(%struct.crypto_ex_data_st* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.crypto_ex_data_st, %struct.crypto_ex_data_st* %0, i64 0, i32 0
  %4 = load %struct.stack_st_void*, %struct.stack_st_void** %3, align 8
  %5 = icmp eq %struct.stack_st_void* %4, null
  %6 = icmp slt i32 %1, 0
  %7 = or i1 %6, %5
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = sext i32 %1 to i64
  %10 = bitcast %struct.stack_st_void* %4 to %struct.stack_st*
  %11 = tail call i64 @sk_num(%struct.stack_st* %10) #4
  %12 = icmp ugt i64 %11, %9
  br i1 %12, label %13, label %17

13:                                               ; preds = %8
  %14 = bitcast %struct.crypto_ex_data_st* %0 to %struct.stack_st**
  %15 = load %struct.stack_st*, %struct.stack_st** %14, align 8
  %16 = tail call i8* @sk_value(%struct.stack_st* %15, i64 %9) #4
  br label %17

17:                                               ; preds = %2, %8, %13
  %18 = phi i8* [ %16, %13 ], [ null, %8 ], [ null, %2 ]
  ret i8* %18
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @CRYPTO_new_ex_data(%struct.crypto_ex_data_st* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.crypto_ex_data_st, %struct.crypto_ex_data_st* %0, i64 0, i32 0
  store %struct.stack_st_void* null, %struct.stack_st_void** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @CRYPTO_free_ex_data(%struct.CRYPTO_EX_DATA_CLASS*, i8*, %struct.crypto_ex_data_st*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.crypto_ex_data_st, %struct.crypto_ex_data_st* %2, i64 0, i32 0
  %5 = load %struct.stack_st_void*, %struct.stack_st_void** %4, align 8
  %6 = icmp eq %struct.stack_st_void* %5, null
  br i1 %6, label %75, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.CRYPTO_EX_DATA_CLASS, %struct.CRYPTO_EX_DATA_CLASS* %0, i64 0, i32 0
  tail call void @CRYPTO_STATIC_MUTEX_lock_read(%struct.CRYPTO_STATIC_MUTEX* %8) #4
  %9 = getelementptr inbounds %struct.CRYPTO_EX_DATA_CLASS, %struct.CRYPTO_EX_DATA_CLASS* %0, i64 0, i32 1
  %10 = bitcast %struct.stack_st_CRYPTO_EX_DATA_FUNCS** %9 to %struct.stack_st**
  %11 = load %struct.stack_st*, %struct.stack_st** %10, align 8
  %12 = tail call i64 @sk_num(%struct.stack_st* %11) #4
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %7
  %15 = load %struct.stack_st*, %struct.stack_st** %10, align 8
  %16 = tail call %struct.stack_st* @sk_dup(%struct.stack_st* %15) #4
  %17 = bitcast %struct.stack_st* %16 to %struct.stack_st_CRYPTO_EX_DATA_FUNCS*
  tail call void @CRYPTO_STATIC_MUTEX_unlock_read(%struct.CRYPTO_STATIC_MUTEX* %8) #4
  %18 = icmp eq %struct.stack_st* %16, null
  br i1 %18, label %19, label %21

19:                                               ; preds = %14
  tail call void @ERR_put_error(i32 14, i32 0, i32 65, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0), i32 221) #4
  br label %75

20:                                               ; preds = %7
  tail call void @CRYPTO_STATIC_MUTEX_unlock_read(%struct.CRYPTO_STATIC_MUTEX* %8) #4
  br label %21

21:                                               ; preds = %14, %20
  %22 = phi %struct.stack_st_CRYPTO_EX_DATA_FUNCS* [ null, %20 ], [ %17, %14 ]
  %23 = bitcast %struct.stack_st_CRYPTO_EX_DATA_FUNCS* %22 to %struct.stack_st*
  %24 = tail call i64 @sk_num(%struct.stack_st* %23) #4
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %21
  %27 = bitcast %struct.crypto_ex_data_st* %2 to %struct.stack_st**
  br label %31

28:                                               ; preds = %21
  %29 = getelementptr inbounds %struct.CRYPTO_EX_DATA_CLASS, %struct.CRYPTO_EX_DATA_CLASS* %0, i64 0, i32 2
  %30 = bitcast %struct.crypto_ex_data_st* %2 to %struct.stack_st**
  br label %34

31:                                               ; preds = %71, %26
  %32 = phi %struct.stack_st** [ %27, %26 ], [ %30, %71 ]
  tail call void @sk_free(%struct.stack_st* %23) #4
  %33 = load %struct.stack_st*, %struct.stack_st** %32, align 8
  tail call void @sk_free(%struct.stack_st* %33) #4
  store %struct.stack_st_void* null, %struct.stack_st_void** %4, align 8
  br label %75

34:                                               ; preds = %28, %71
  %35 = phi i64 [ 0, %28 ], [ %72, %71 ]
  %36 = tail call i8* @sk_value(%struct.stack_st* %23, i64 %35) #4
  %37 = getelementptr inbounds i8, i8* %36, i64 16
  %38 = bitcast i8* %37 to void (i8*, i8*, %struct.crypto_ex_data_st*, i32, i64, i8*)**
  %39 = load void (i8*, i8*, %struct.crypto_ex_data_st*, i32, i64, i8*)*, void (i8*, i8*, %struct.crypto_ex_data_st*, i32, i64, i8*)** %38, align 8
  %40 = icmp eq void (i8*, i8*, %struct.crypto_ex_data_st*, i32, i64, i8*)* %39, null
  br i1 %40, label %71, label %41

41:                                               ; preds = %34
  %42 = load i8, i8* %29, align 8
  %43 = zext i8 %42 to i64
  %44 = add i64 %35, %43
  %45 = trunc i64 %44 to i32
  %46 = load %struct.stack_st_void*, %struct.stack_st_void** %4, align 8
  %47 = icmp eq %struct.stack_st_void* %46, null
  %48 = icmp slt i32 %45, 0
  %49 = or i1 %47, %48
  br i1 %49, label %59, label %50

50:                                               ; preds = %41
  %51 = shl i64 %44, 32
  %52 = ashr exact i64 %51, 32
  %53 = bitcast %struct.stack_st_void* %46 to %struct.stack_st*
  %54 = tail call i64 @sk_num(%struct.stack_st* %53) #4
  %55 = icmp ugt i64 %54, %52
  br i1 %55, label %56, label %59

56:                                               ; preds = %50
  %57 = load %struct.stack_st*, %struct.stack_st** %30, align 8
  %58 = tail call i8* @sk_value(%struct.stack_st* %57, i64 %52) #4
  br label %59

59:                                               ; preds = %41, %50, %56
  %60 = phi i8* [ %58, %56 ], [ null, %50 ], [ null, %41 ]
  %61 = load void (i8*, i8*, %struct.crypto_ex_data_st*, i32, i64, i8*)*, void (i8*, i8*, %struct.crypto_ex_data_st*, i32, i64, i8*)** %38, align 8
  %62 = load i8, i8* %29, align 8
  %63 = zext i8 %62 to i64
  %64 = add i64 %35, %63
  %65 = trunc i64 %64 to i32
  %66 = bitcast i8* %36 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds i8, i8* %36, i64 8
  %69 = bitcast i8* %68 to i8**
  %70 = load i8*, i8** %69, align 8
  tail call void %61(i8* %1, i8* %60, %struct.crypto_ex_data_st* %2, i32 %65, i64 %67, i8* %70) #4
  br label %71

71:                                               ; preds = %34, %59
  %72 = add nuw i64 %35, 1
  %73 = tail call i64 @sk_num(%struct.stack_st* %23) #4
  %74 = icmp ult i64 %72, %73
  br i1 %74, label %34, label %31

75:                                               ; preds = %31, %19, %3
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @CRYPTO_cleanup_all_ex_data() local_unnamed_addr #3 {
  ret void
}

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #1

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #1

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #1

declare i8* @sk_set(%struct.stack_st*, i64, i8*) local_unnamed_addr #1

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #1

declare void @CRYPTO_STATIC_MUTEX_lock_read(%struct.CRYPTO_STATIC_MUTEX*) local_unnamed_addr #1

declare void @CRYPTO_STATIC_MUTEX_unlock_read(%struct.CRYPTO_STATIC_MUTEX*) local_unnamed_addr #1

declare %struct.stack_st* @sk_dup(%struct.stack_st*) local_unnamed_addr #1

declare void @sk_free(%struct.stack_st*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
