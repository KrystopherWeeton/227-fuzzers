; ModuleID = '../../third_party/blink/renderer/platform/fonts/opentype/font_format_check.cc'
source_filename = "../../third_party/blink/renderer/platform/fonts/opentype/font_format_check.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::FontFormatCheck" = type <{ %"class.WTF::Vector", i32, [4 x i8] }>
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i32*, i32, i32 }
%class.sk_sp = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.hb_blob_t = type opaque
%struct.hb_face_t = type opaque
%class.sk_sp.7 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.8" }
%"struct.std::__1::atomic.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm = comdat any

@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv = private unnamed_addr constant [60 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned int]\00", align 1

@_ZN5blink15FontFormatCheckC1E5sk_spI6SkDataE = hidden unnamed_addr alias void (%"class.blink::FontFormatCheck"*, %class.sk_sp*), void (%"class.blink::FontFormatCheck"*, %class.sk_sp*)* @_ZN5blink15FontFormatCheckC2E5sk_spI6SkDataE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15FontFormatCheckC2E5sk_spI6SkDataE(%"class.blink::FontFormatCheck"* nocapture, %class.sk_sp* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = bitcast %"class.blink::FontFormatCheck"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #7
  %6 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 1
  store i32 2, i32* %6, align 8
  %7 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %8 = load %class.SkData*, %class.SkData** %7, align 8
  %9 = getelementptr inbounds %class.SkData, %class.SkData* %8, i64 0, i32 3
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %class.SkData, %class.SkData* %8, i64 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = trunc i64 %12 to i32
  %14 = tail call %struct.hb_blob_t* @hb_blob_create(i8* %10, i32 %13, i32 1, i8* null, void (i8*)* null) #7
  %15 = tail call %struct.hb_face_t* @hb_face_create(%struct.hb_blob_t* %14, i32 0) #7
  %16 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #7
  %17 = tail call i32 @hb_face_get_table_tags(%struct.hb_face_t* %15, i32 0, i32* null, i32* null) #7
  store i32 %17, i32* %4, align 4
  %18 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = icmp ult i32 %19, %17
  br i1 %20, label %21, label %76

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = icmp ult i32 %23, %17
  br i1 %24, label %25, label %64

25:                                               ; preds = %21
  %26 = lshr i32 %23, 2
  %27 = add nuw i32 %23, 1
  %28 = add i32 %27, %26
  %29 = icmp ugt i32 %28, 4
  %30 = select i1 %29, i32 %28, i32 4
  %31 = icmp ugt i32 %30, %17
  %32 = select i1 %31, i32 %30, i32 %17
  %33 = icmp ult i32 %23, %32
  br i1 %33, label %34, label %64, !prof !2

34:                                               ; preds = %25
  %35 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %36 = load i32*, i32** %35, align 8
  %37 = icmp eq i32* %36, null
  %38 = zext i32 %32 to i64
  %39 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64 %38) #7
  %40 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %39, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIjEEPKcv, i64 0, i64 0)) #7
  br i1 %37, label %41, label %46

41:                                               ; preds = %34
  %42 = ptrtoint i8* %40 to i64
  %43 = bitcast %"class.blink::FontFormatCheck"* %0 to i64*
  store atomic i64 %42, i64* %43 monotonic, align 8
  %44 = lshr i64 %39, 2
  %45 = trunc i64 %44 to i32
  store i32 %45, i32* %22, align 8
  br label %64

46:                                               ; preds = %34
  %47 = lshr i64 %39, 2
  %48 = ptrtoint i8* %40 to i64
  %49 = load i32*, i32** %35, align 8
  %50 = icmp ne i8* %40, null
  %51 = icmp ne i32* %49, null
  %52 = and i1 %50, %51
  %53 = bitcast i32* %49 to i8*
  br i1 %52, label %54, label %60, !prof !2

54:                                               ; preds = %46
  %55 = load i32, i32* %18, align 4
  %56 = zext i32 %55 to i64
  %57 = shl nuw nsw i64 %56, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %40, i8* nonnull align 4 %53, i64 %57, i1 false) #7
  %58 = bitcast %"class.blink::FontFormatCheck"* %0 to i8**
  %59 = load i8*, i8** %58, align 8
  br label %60

60:                                               ; preds = %54, %46
  %61 = phi i8* [ %59, %54 ], [ %53, %46 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %61) #7
  %62 = bitcast %"class.blink::FontFormatCheck"* %0 to i64*
  store atomic i64 %48, i64* %62 monotonic, align 8
  %63 = trunc i64 %47 to i32
  store i32 %63, i32* %22, align 8
  br label %64

64:                                               ; preds = %60, %41, %25, %21
  %65 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i32, i32* %18, align 4
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i32, i32* %66, i64 %68
  %70 = zext i32 %17 to i64
  %71 = getelementptr inbounds i32, i32* %66, i64 %70
  %72 = bitcast i32* %69 to i8*
  %73 = ptrtoint i32* %71 to i64
  %74 = ptrtoint i32* %69 to i64
  %75 = sub i64 %73, %74
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %72, i8 0, i64 %75, i1 false) #7
  br label %76

76:                                               ; preds = %2, %64
  store i32 %17, i32* %18, align 4
  %77 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %78 = load i32*, i32** %77, align 8
  %79 = call i32 @hb_face_get_table_tags(%struct.hb_face_t* %15, i32 0, i32* nonnull %4, i32* %78) #7
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %82

81:                                               ; preds = %76
  store i32 0, i32* %18, align 4
  br label %141

82:                                               ; preds = %76
  %83 = load i32, i32* %18, align 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %141, label %85

85:                                               ; preds = %82
  %86 = load i32*, i32** %77, align 8
  %87 = zext i32 %83 to i64
  %88 = getelementptr inbounds i32, i32* %86, i64 %87
  br label %89

89:                                               ; preds = %93, %85
  %90 = phi i32* [ %86, %85 ], [ %94, %93 ]
  %91 = load i32, i32* %90, align 4
  %92 = icmp eq i32 %91, 1129270354
  br i1 %92, label %96, label %93

93:                                               ; preds = %89
  %94 = getelementptr inbounds i32, i32* %90, i64 1
  %95 = icmp ult i32* %94, %88
  br i1 %95, label %89, label %141

96:                                               ; preds = %89
  %97 = ptrtoint i32* %90 to i64
  %98 = ptrtoint i32* %86 to i64
  %99 = sub i64 %97, %98
  %100 = lshr exact i64 %99, 2
  %101 = trunc i64 %100 to i32
  %102 = icmp eq i32 %101, -1
  br i1 %102, label %141, label %103

103:                                              ; preds = %96, %107
  %104 = phi i32* [ %108, %107 ], [ %86, %96 ]
  %105 = load i32, i32* %104, align 4
  %106 = icmp eq i32 %105, 1129333068
  br i1 %106, label %110, label %107

107:                                              ; preds = %103
  %108 = getelementptr inbounds i32, i32* %104, i64 1
  %109 = icmp ult i32* %108, %88
  br i1 %109, label %103, label %141

110:                                              ; preds = %103
  %111 = ptrtoint i32* %104 to i64
  %112 = sub i64 %111, %98
  %113 = lshr exact i64 %112, 2
  %114 = trunc i64 %113 to i32
  %115 = icmp eq i32 %114, -1
  br i1 %115, label %141, label %116

116:                                              ; preds = %110
  %117 = call %struct.hb_blob_t* @hb_face_reference_table(%struct.hb_face_t* %15, i32 1129270354) #7
  %118 = call i32 @hb_blob_get_length(%struct.hb_blob_t* %117) #7
  %119 = icmp ult i32 %118, 14
  br i1 %119, label %134, label %120

120:                                              ; preds = %116
  %121 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %121) #7
  store i32 2, i32* %3, align 4
  %122 = call i8* @hb_blob_get_data(%struct.hb_blob_t* %117, i32* nonnull %3) #7
  %123 = load i32, i32* %3, align 4
  %124 = icmp ult i32 %123, 2
  br i1 %124, label %131, label %125

125:                                              ; preds = %120
  %126 = bitcast i8* %122 to i16*
  %127 = load i16, i16* %126, align 2
  %128 = call i16 @llvm.bswap.i16(i16 %127) #7
  switch i16 %128, label %130 [
    i16 0, label %131
    i16 1, label %129
  ]

129:                                              ; preds = %125
  br label %131

130:                                              ; preds = %125
  br label %131

131:                                              ; preds = %130, %129, %125, %120
  %132 = phi i32 [ 2, %120 ], [ 1, %129 ], [ undef, %130 ], [ 0, %125 ]
  %133 = phi i32 [ 1, %120 ], [ 1, %129 ], [ 0, %130 ], [ 1, %125 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %121) #7
  br label %134

134:                                              ; preds = %131, %116
  %135 = phi i32 [ %132, %131 ], [ 2, %116 ]
  %136 = phi i32 [ %133, %131 ], [ 1, %116 ]
  %137 = icmp eq %struct.hb_blob_t* %117, null
  br i1 %137, label %139, label %138

138:                                              ; preds = %134
  call void @hb_blob_destroy(%struct.hb_blob_t* nonnull %117) #7
  br label %139

139:                                              ; preds = %138, %134
  %140 = icmp eq i32 %136, 0
  br i1 %140, label %141, label %142

141:                                              ; preds = %93, %107, %81, %139, %110, %96, %82
  br label %142

142:                                              ; preds = %139, %141
  %143 = phi i32 [ 2, %141 ], [ %135, %139 ]
  store i32 %143, i32* %6, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #7
  %144 = icmp eq %struct.hb_face_t* %15, null
  br i1 %144, label %146, label %145

145:                                              ; preds = %142
  call void @hb_face_destroy(%struct.hb_face_t* nonnull %15) #7
  br label %146

146:                                              ; preds = %142, %145
  %147 = icmp eq %struct.hb_blob_t* %14, null
  br i1 %147, label %149, label %148

148:                                              ; preds = %146
  call void @hb_blob_destroy(%struct.hb_blob_t* nonnull %14) #7
  br label %149

149:                                              ; preds = %146, %148
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.hb_blob_t* @hb_blob_create(i8*, i32, i32, i8*, void (i8*)*) local_unnamed_addr #2

declare %struct.hb_face_t* @hb_face_create(%struct.hb_blob_t*, i32) local_unnamed_addr #2

declare i32 @hb_face_get_table_tags(%struct.hb_face_t*, i32, i32*, i32*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink15FontFormatCheck14IsVariableFontEv(%"class.blink::FontFormatCheck"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %24, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = zext i32 %3 to i64
  %9 = getelementptr inbounds i32, i32* %7, i64 %8
  br label %10

10:                                               ; preds = %14, %5
  %11 = phi i32* [ %7, %5 ], [ %15, %14 ]
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 1719034226
  br i1 %13, label %17, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds i32, i32* %11, i64 1
  %16 = icmp ult i32* %15, %9
  br i1 %16, label %10, label %24

17:                                               ; preds = %10
  %18 = ptrtoint i32* %11 to i64
  %19 = ptrtoint i32* %7 to i64
  %20 = sub i64 %18, %19
  %21 = lshr exact i64 %20, 2
  %22 = trunc i64 %21 to i32
  %23 = icmp ne i32 %22, -1
  br label %24

24:                                               ; preds = %14, %17, %1
  %25 = phi i1 [ false, %1 ], [ %23, %17 ], [ false, %14 ]
  ret i1 %25
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink15FontFormatCheck19IsCbdtCblcColorFontEv(%"class.blink::FontFormatCheck"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %37, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = zext i32 %3 to i64
  %9 = getelementptr inbounds i32, i32* %7, i64 %8
  br label %10

10:                                               ; preds = %14, %5
  %11 = phi i32* [ %7, %5 ], [ %15, %14 ]
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 1128416340
  br i1 %13, label %17, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds i32, i32* %11, i64 1
  %16 = icmp ult i32* %15, %9
  br i1 %16, label %10, label %37

17:                                               ; preds = %10
  %18 = ptrtoint i32* %11 to i64
  %19 = ptrtoint i32* %7 to i64
  %20 = sub i64 %18, %19
  %21 = lshr exact i64 %20, 2
  %22 = trunc i64 %21 to i32
  %23 = icmp eq i32 %22, -1
  br i1 %23, label %37, label %24

24:                                               ; preds = %17, %28
  %25 = phi i32* [ %29, %28 ], [ %7, %17 ]
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 1128418371
  br i1 %27, label %31, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds i32, i32* %25, i64 1
  %30 = icmp ult i32* %29, %9
  br i1 %30, label %24, label %37

31:                                               ; preds = %24
  %32 = ptrtoint i32* %25 to i64
  %33 = sub i64 %32, %19
  %34 = lshr exact i64 %33, 2
  %35 = trunc i64 %34 to i32
  %36 = icmp ne i32 %35, -1
  br label %37

37:                                               ; preds = %14, %28, %17, %31, %1
  %38 = phi i1 [ false, %17 ], [ false, %1 ], [ %36, %31 ], [ false, %28 ], [ false, %14 ]
  ret i1 %38
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink15FontFormatCheck21IsColrCpalColorFontV0Ev(%"class.blink::FontFormatCheck"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink15FontFormatCheck21IsColrCpalColorFontV1Ev(%"class.blink::FontFormatCheck"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 1
  ret i1 %4
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink15FontFormatCheck15IsSbixColorFontEv(%"class.blink::FontFormatCheck"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %24, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = zext i32 %3 to i64
  %9 = getelementptr inbounds i32, i32* %7, i64 %8
  br label %10

10:                                               ; preds = %14, %5
  %11 = phi i32* [ %7, %5 ], [ %15, %14 ]
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 1935829368
  br i1 %13, label %17, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds i32, i32* %11, i64 1
  %16 = icmp ult i32* %15, %9
  br i1 %16, label %10, label %24

17:                                               ; preds = %10
  %18 = ptrtoint i32* %11 to i64
  %19 = ptrtoint i32* %7 to i64
  %20 = sub i64 %18, %19
  %21 = lshr exact i64 %20, 2
  %22 = trunc i64 %21 to i32
  %23 = icmp ne i32 %22, -1
  br label %24

24:                                               ; preds = %14, %17, %1
  %25 = phi i1 [ false, %1 ], [ %23, %17 ], [ false, %14 ]
  ret i1 %25
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink15FontFormatCheck17IsCff2OutlineFontEv(%"class.blink::FontFormatCheck"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %24, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = zext i32 %3 to i64
  %9 = getelementptr inbounds i32, i32* %7, i64 %8
  br label %10

10:                                               ; preds = %14, %5
  %11 = phi i32* [ %7, %5 ], [ %15, %14 ]
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 1128678962
  br i1 %13, label %17, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds i32, i32* %11, i64 1
  %16 = icmp ult i32* %15, %9
  br i1 %16, label %10, label %24

17:                                               ; preds = %10
  %18 = ptrtoint i32* %11 to i64
  %19 = ptrtoint i32* %7 to i64
  %20 = sub i64 %18, %19
  %21 = lshr exact i64 %20, 2
  %22 = trunc i64 %21 to i32
  %23 = icmp ne i32 %22, -1
  br label %24

24:                                               ; preds = %14, %17, %1
  %25 = phi i1 [ false, %1 ], [ %23, %17 ], [ false, %14 ]
  ret i1 %25
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink15FontFormatCheck11IsColorFontEv(%"class.blink::FontFormatCheck"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp ult i32 %7, 2
  br label %65

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i32*, i32** %10, align 8
  %12 = zext i32 %3 to i64
  %13 = getelementptr inbounds i32, i32* %11, i64 %12
  br label %14

14:                                               ; preds = %18, %9
  %15 = phi i32* [ %11, %9 ], [ %19, %18 ]
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 1128416340
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds i32, i32* %15, i64 1
  %20 = icmp ult i32* %19, %13
  br i1 %20, label %14, label %41

21:                                               ; preds = %14
  %22 = ptrtoint i32* %15 to i64
  %23 = ptrtoint i32* %11 to i64
  %24 = sub i64 %22, %23
  %25 = lshr exact i64 %24, 2
  %26 = trunc i64 %25 to i32
  %27 = icmp eq i32 %26, -1
  br i1 %27, label %41, label %28

28:                                               ; preds = %21, %32
  %29 = phi i32* [ %33, %32 ], [ %11, %21 ]
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 1128418371
  br i1 %31, label %35, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds i32, i32* %29, i64 1
  %34 = icmp ult i32* %33, %13
  br i1 %34, label %28, label %41

35:                                               ; preds = %28
  %36 = ptrtoint i32* %29 to i64
  %37 = sub i64 %36, %23
  %38 = lshr exact i64 %37, 2
  %39 = trunc i64 %38 to i32
  %40 = icmp eq i32 %39, -1
  br i1 %40, label %41, label %65

41:                                               ; preds = %18, %32, %35, %21
  %42 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = icmp ult i32 %43, 2
  %45 = or i1 %4, %44
  br i1 %45, label %65, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.blink::FontFormatCheck", %"class.blink::FontFormatCheck"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %48 = load i32*, i32** %47, align 8
  %49 = zext i32 %3 to i64
  %50 = getelementptr inbounds i32, i32* %48, i64 %49
  br label %51

51:                                               ; preds = %55, %46
  %52 = phi i32* [ %48, %46 ], [ %56, %55 ]
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, 1935829368
  br i1 %54, label %58, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds i32, i32* %52, i64 1
  %57 = icmp ult i32* %56, %50
  br i1 %57, label %51, label %65

58:                                               ; preds = %51
  %59 = ptrtoint i32* %52 to i64
  %60 = ptrtoint i32* %48 to i64
  %61 = sub i64 %59, %60
  %62 = lshr exact i64 %61, 2
  %63 = trunc i64 %62 to i32
  %64 = icmp ne i32 %63, -1
  br label %65

65:                                               ; preds = %55, %5, %35, %41, %58
  %66 = phi i1 [ %44, %41 ], [ true, %35 ], [ %64, %58 ], [ %8, %5 ], [ false, %55 ]
  ret i1 %66
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink15FontFormatCheck17ProbeVariableFontE5sk_spI10SkTypefaceE(%class.sk_sp.7* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %0, i64 0, i32 0
  %3 = load %class.SkTypeface*, %class.SkTypeface** %2, align 8
  %4 = tail call i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface* %3, i32 1719034226) #7
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = load %class.SkTypeface*, %class.SkTypeface** %2, align 8
  %8 = tail call i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface* %7, i32 1128678962) #7
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %9, i32 1, i32 2
  br label %11

11:                                               ; preds = %6, %1
  %12 = phi i32 [ 0, %1 ], [ %10, %6 ]
  ret i32 %12
}

declare i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface*, i32) local_unnamed_addr #2

declare %struct.hb_blob_t* @hb_face_reference_table(%struct.hb_face_t*, i32) local_unnamed_addr #2

declare i32 @hb_blob_get_length(%struct.hb_blob_t*) local_unnamed_addr #2

declare i8* @hb_blob_get_data(%struct.hb_blob_t*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #5

declare void @hb_blob_destroy(%struct.hb_blob_t*) local_unnamed_addr #2

declare void @hb_face_destroy(%struct.hb_face_t*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIjEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 536346624
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 536346624) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 2
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
