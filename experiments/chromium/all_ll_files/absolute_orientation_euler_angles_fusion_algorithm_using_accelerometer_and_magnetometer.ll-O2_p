; ModuleID = '../../services/device/generic_sensor/absolute_orientation_euler_angles_fusion_algorithm_using_accelerometer_and_magnetometer.cc'
source_filename = "../../services/device/generic_sensor/absolute_orientation_euler_angles_fusion_algorithm_using_accelerometer_and_magnetometer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer" = type { %"class.device::PlatformSensorFusionAlgorithm" }
%"class.device::PlatformSensorFusionAlgorithm" = type { i32 (...)**, %"class.device::PlatformSensorFusion"*, double, i32, %"class.std::__1::vector.29" }
%"class.device::PlatformSensorFusion" = type <{ %"class.device::PlatformSensor", %"class.device::PlatformSensor::Client", %"union.device::SensorReading", %"class.std::__1::unique_ptr", %"class.base::flat_map", i32, [4 x i8] }>
%"class.device::PlatformSensor" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::ObserverList", %class.scoped_refptr, %"struct.device::SensorReadingSharedBuffer"*, i32, %"class.std::__1::map", %"class.device::PlatformSensorProvider"*, i8, %"union.device::SensorReading", %"class.base::Lock", i8, %"class.base::WeakPtrFactory" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%class.scoped_refptr = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2" }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.device::SensorReadingSharedBuffer" = type { %"class.device::SensorReadingField", %"union.device::SensorReading" }
%"class.device::SensorReadingField" = type { %"union.device::SensorReadingField<device::OneWriterSeqLock>::Storage" }
%"union.device::SensorReadingField<device::OneWriterSeqLock>::Storage" = type { i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.4", %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i64 }
%"class.device::PlatformSensorProvider" = type opaque
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.12 }
%class.scoped_refptr.12 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.13", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.13" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.14" }
%"struct.std::__1::atomic.14" = type { %"struct.std::__1::__atomic_base.15" }
%"struct.std::__1::__atomic_base.15" = type { %"struct.std::__1::__atomic_base.16" }
%"struct.std::__1::__atomic_base.16" = type { %"struct.std::__1::__cxx_atomic_impl.17" }
%"struct.std::__1::__cxx_atomic_impl.17" = type { %"struct.std::__1::__cxx_atomic_base_impl.18" }
%"struct.std::__1::__cxx_atomic_base_impl.18" = type { i8 }
%"class.device::PlatformSensor::Client" = type { i32 (...)** }
%"union.device::SensorReading" = type { %"struct.device::SensorReadingRaw" }
%"struct.device::SensorReadingRaw" = type { %"struct.device::SensorReadingBase", [4 x %"class.device::SensorReadingField.3"] }
%"struct.device::SensorReadingBase" = type { %"class.device::SensorReadingField.3" }
%"class.device::SensorReadingField.3" = type { %"union.device::SensorReadingField<double>::Storage" }
%"union.device::SensorReadingField<double>::Storage" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.device::PlatformSensorFusionAlgorithm"* }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.22" }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.24" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { i32*, i32*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i32* }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { double*, double*, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { double* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm = comdat any

@_ZTVN6device78AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometerE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"*)* @_ZN6device78AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometerD2Ev to i8*), i8* bitcast (void (%"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"*)* @_ZN6device78AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometerD0Ev to i8*), i8* bitcast (void (%"class.device::PlatformSensorFusionAlgorithm"*, double)* @_ZN6device29PlatformSensorFusionAlgorithm12SetFrequencyEd to i8*), i8* bitcast (void (%"class.device::PlatformSensorFusionAlgorithm"*)* @_ZN6device29PlatformSensorFusionAlgorithm5ResetEv to i8*), i8* bitcast (i1 (%"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"*, i32, %"union.device::SensorReading"*)* @_ZN6device78AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer20GetFusedDataInternalENS_5mojom10SensorTypeEPNS_13SensorReadingE to i8*)] }, align 8

@_ZN6device78AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometerC1Ev = hidden unnamed_addr alias void (%"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"*), void (%"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"*)* @_ZN6device78AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometerC2Ev
@_ZN6device78AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometerD1Ev = hidden unnamed_addr alias void (%"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"*), void (%"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"*)* @_ZN6device78AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device78AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometerC2Ev(%"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::vector.29", align 8
  %3 = getelementptr inbounds %"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer", %"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"* %0, i64 0, i32 0
  %4 = bitcast %"class.std::__1::vector.29"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #9
  %5 = tail call i8* @_Znwm(i64 8) #10
  %6 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %2, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.29"* %2 to i8**
  store i8* %5, i8** %7, align 8
  %8 = getelementptr inbounds i8, i8* %5, i64 8
  %9 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = bitcast i32** %9 to i8**
  store i8* %8, i8** %10, align 8
  %11 = bitcast i32** %6 to i64*
  %12 = bitcast i8* %5 to i64*
  store i64 25769803778, i64* %12, align 4
  %13 = ptrtoint i8* %8 to i64
  store i64 %13, i64* %11, align 8
  call void @_ZN6device29PlatformSensorFusionAlgorithmC2ENS_5mojom10SensorTypeERKNSt3__16vectorIS2_NS3_9allocatorIS2_EEEE(%"class.device::PlatformSensorFusionAlgorithm"* %3, i32 8, %"class.std::__1::vector.29"* nonnull dereferenceable(24) %2) #9
  %14 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %2, i64 0, i32 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = icmp eq i32* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %1
  %18 = ptrtoint i32* %15 to i64
  store i64 %18, i64* %11, align 8
  %19 = bitcast i32* %15 to i8*
  call void @_ZdlPv(i8* %19) #10
  br label %20

20:                                               ; preds = %1, %17
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #9
  %21 = getelementptr inbounds %"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer", %"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN6device78AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN6device29PlatformSensorFusionAlgorithmC2ENS_5mojom10SensorTypeERKNSt3__16vectorIS2_NS3_9allocatorIS2_EEEE(%"class.device::PlatformSensorFusionAlgorithm"*, i32, %"class.std::__1::vector.29"* dereferenceable(24)) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @_ZN6device29PlatformSensorFusionAlgorithmD2Ev(%"class.device::PlatformSensorFusionAlgorithm"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device78AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometerD2Ev(%"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer", %"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"* %0, i64 0, i32 0
  tail call void @_ZN6device29PlatformSensorFusionAlgorithmD2Ev(%"class.device::PlatformSensorFusionAlgorithm"* %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6device78AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometerD0Ev(%"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer", %"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"* %0, i64 0, i32 0
  tail call void @_ZN6device29PlatformSensorFusionAlgorithmD2Ev(%"class.device::PlatformSensorFusionAlgorithm"* %2) #9
  %3 = bitcast %"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6device78AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer20GetFusedDataInternalENS_5mojom10SensorTypeEPNS_13SensorReadingE(%"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"* nocapture readonly, i32, %"union.device::SensorReading"*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::vector.36", align 8
  %5 = alloca %"union.device::SensorReading", align 8
  %6 = alloca %"union.device::SensorReading", align 8
  %7 = icmp eq i32 %1, 2
  br i1 %7, label %8, label %126

8:                                                ; preds = %3
  %9 = bitcast %"union.device::SensorReading"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %9) #9
  %10 = bitcast %"union.device::SensorReading"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 40, i1 false)
  call void @_ZN6device13SensorReadingC1Ev(%"union.device::SensorReading"* nonnull %5) #9
  %11 = bitcast %"union.device::SensorReading"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %11) #9
  %12 = bitcast %"union.device::SensorReading"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 40, i1 false)
  call void @_ZN6device13SensorReadingC1Ev(%"union.device::SensorReading"* nonnull %6) #9
  %13 = getelementptr inbounds %"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer", %"class.device::AbsoluteOrientationEulerAnglesFusionAlgorithmUsingAccelerometerAndMagnetometer"* %0, i64 0, i32 0, i32 1
  %14 = load %"class.device::PlatformSensorFusion"*, %"class.device::PlatformSensorFusion"** %13, align 8
  %15 = bitcast %"class.device::PlatformSensorFusion"* %14 to i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)***
  %16 = load i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)**, i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)*** %15, align 8
  %17 = getelementptr inbounds i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)*, i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)** %16, i64 14
  %18 = load i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)*, i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)** %17, align 8
  %19 = call zeroext i1 %18(%"class.device::PlatformSensorFusion"* %14, i32 2, %"union.device::SensorReading"* nonnull %5) #9
  br i1 %19, label %20, label %124

20:                                               ; preds = %8
  %21 = load %"class.device::PlatformSensorFusion"*, %"class.device::PlatformSensorFusion"** %13, align 8
  %22 = bitcast %"class.device::PlatformSensorFusion"* %21 to i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)***
  %23 = load i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)**, i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)*** %22, align 8
  %24 = getelementptr inbounds i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)*, i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)** %23, i64 14
  %25 = load i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)*, i1 (%"class.device::PlatformSensorFusion"*, i32, %"union.device::SensorReading"*)** %24, align 8
  %26 = call zeroext i1 %25(%"class.device::PlatformSensorFusion"* %21, i32 6, %"union.device::SensorReading"* nonnull %6) #9
  br i1 %26, label %27, label %124

27:                                               ; preds = %20
  %28 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %5, i64 0, i32 0, i32 1, i64 0
  %29 = bitcast %"class.device::SensorReadingField.3"* %28 to <2 x double>*
  %30 = load <2 x double>, <2 x double>* %29, align 8
  %31 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %5, i64 0, i32 0, i32 1, i64 2
  %32 = bitcast %"class.device::SensorReadingField.3"* %31 to double*
  %33 = load double, double* %32, align 8
  %34 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %6, i64 0, i32 0, i32 1, i64 0
  %35 = bitcast %"class.device::SensorReadingField.3"* %34 to <2 x double>*
  %36 = load <2 x double>, <2 x double>* %35, align 8
  %37 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %6, i64 0, i32 0, i32 1, i64 2
  %38 = bitcast %"class.device::SensorReadingField.3"* %37 to double*
  %39 = load double, double* %38, align 8
  %40 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %2, i64 0, i32 0, i32 1, i64 2
  %41 = bitcast %"class.device::SensorReadingField.3"* %40 to double*
  %42 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %2, i64 0, i32 0, i32 1, i64 0
  %43 = bitcast %"class.device::SensorReadingField.3"* %42 to double*
  %44 = getelementptr inbounds %"union.device::SensorReading", %"union.device::SensorReading"* %2, i64 0, i32 0, i32 1, i64 1
  %45 = bitcast %"class.device::SensorReadingField.3"* %44 to double*
  %46 = bitcast %"class.std::__1::vector.36"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #9
  %47 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %4, i64 0, i32 0, i32 0
  %48 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %4, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 0, i64 24, i1 false) #9
  %49 = fmul <2 x double> %30, %30
  %50 = extractelement <2 x double> %49, i32 0
  %51 = extractelement <2 x double> %49, i32 1
  %52 = fadd double %50, %51
  %53 = fmul double %33, %33
  %54 = fadd double %52, %53
  %55 = fcmp olt double %54, 0x3FEEC64722D967C8
  br i1 %55, label %122, label %56

56:                                               ; preds = %27
  %57 = extractelement <2 x double> %36, i32 1
  %58 = fmul double %33, %57
  %59 = extractelement <2 x double> %30, i32 1
  %60 = fmul double %59, %39
  %61 = fsub double %58, %60
  %62 = insertelement <2 x double> undef, double %39, i32 0
  %63 = shufflevector <2 x double> %62, <2 x double> %36, <2 x i32> <i32 0, i32 2>
  %64 = fmul <2 x double> %30, %63
  %65 = insertelement <2 x double> undef, double %33, i32 0
  %66 = shufflevector <2 x double> %65, <2 x double> %30, <2 x i32> <i32 0, i32 2>
  %67 = fmul <2 x double> %66, %36
  %68 = fsub <2 x double> %64, %67
  %69 = fmul double %61, %61
  %70 = fmul <2 x double> %68, %68
  %71 = extractelement <2 x double> %70, i32 0
  %72 = fadd double %69, %71
  %73 = extractelement <2 x double> %70, i32 1
  %74 = fadd double %73, %72
  %75 = call double @sqrt(double %74) #9
  %76 = fcmp olt double %75, 1.000000e-01
  br i1 %76, label %122, label %77

77:                                               ; preds = %56
  %78 = extractelement <2 x double> %30, i32 0
  %79 = fdiv double 1.000000e+00, %75
  %80 = fmul double %61, %79
  %81 = insertelement <2 x double> undef, double %79, i32 0
  %82 = shufflevector <2 x double> %81, <2 x double> undef, <2 x i32> zeroinitializer
  %83 = fmul <2 x double> %68, %82
  %84 = call double @sqrt(double %54) #9
  %85 = fdiv double 1.000000e+00, %84
  %86 = fmul double %78, %85
  %87 = insertelement <2 x double> undef, double %59, i32 0
  %88 = insertelement <2 x double> %87, double %33, i32 1
  %89 = insertelement <2 x double> undef, double %85, i32 0
  %90 = shufflevector <2 x double> %89, <2 x double> undef, <2 x i32> zeroinitializer
  %91 = fmul <2 x double> %88, %90
  %92 = extractelement <2 x double> %83, i32 1
  %93 = insertelement <2 x double> undef, double %92, i32 0
  %94 = insertelement <2 x double> %93, double %80, i32 1
  %95 = fmul <2 x double> %94, %91
  %96 = extractelement <2 x double> %91, i32 1
  %97 = insertelement <2 x double> undef, double %96, i32 0
  %98 = insertelement <2 x double> %97, double %86, i32 1
  %99 = fmul <2 x double> %83, %98
  %100 = fsub <2 x double> %95, %99
  %101 = extractelement <2 x double> %83, i32 0
  %102 = fmul double %101, %86
  %103 = extractelement <2 x double> %91, i32 0
  %104 = fmul double %80, %103
  %105 = fsub double %102, %104
  call void @_ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm(%"class.std::__1::vector.36"* nonnull %4, i64 9) #9
  %106 = load double*, double** %47, align 8
  store double %80, double* %106, align 8
  %107 = load double*, double** %47, align 8
  %108 = getelementptr inbounds double, double* %107, i64 1
  %109 = bitcast double* %108 to <2 x double>*
  store <2 x double> %83, <2 x double>* %109, align 8
  %110 = getelementptr inbounds double, double* %107, i64 3
  %111 = bitcast double* %110 to <2 x double>*
  store <2 x double> %100, <2 x double>* %111, align 8
  %112 = getelementptr inbounds double, double* %107, i64 5
  store double %105, double* %112, align 8
  %113 = getelementptr inbounds double, double* %107, i64 6
  store double %86, double* %113, align 8
  %114 = getelementptr inbounds double, double* %107, i64 7
  %115 = bitcast double* %114 to <2 x double>*
  store <2 x double> %91, <2 x double>* %115, align 8
  call void @_ZN6device47ComputeOrientationEulerAnglesFromRotationMatrixERKNSt3__16vectorIdNS0_9allocatorIdEEEEPdS7_S7_(%"class.std::__1::vector.36"* nonnull dereferenceable(24) %4, double* %41, double* %43, double* %45) #9
  %116 = load double*, double** %47, align 8
  %117 = icmp eq double* %116, null
  br i1 %117, label %122, label %118

118:                                              ; preds = %77
  %119 = bitcast double* %116 to i8*
  %120 = ptrtoint double* %116 to i64
  %121 = bitcast double** %48 to i64*
  store i64 %120, i64* %121, align 8
  call void @_ZdlPv(i8* %119) #10
  br label %122

122:                                              ; preds = %27, %56, %77, %118
  %123 = phi i1 [ true, %77 ], [ true, %118 ], [ false, %27 ], [ false, %56 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #9
  br label %124

124:                                              ; preds = %8, %20, %122
  %125 = phi i1 [ %123, %122 ], [ false, %20 ], [ false, %8 ]
  call void @_ZN6device13SensorReadingD1Ev(%"union.device::SensorReading"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %11) #9
  call void @_ZN6device13SensorReadingD1Ev(%"union.device::SensorReading"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %9) #9
  br label %126

126:                                              ; preds = %3, %124
  %127 = phi i1 [ %125, %124 ], [ false, %3 ]
  ret i1 %127
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN6device13SensorReadingC1Ev(%"union.device::SensorReading"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6device13SensorReadingD1Ev(%"union.device::SensorReading"*) unnamed_addr #3

declare void @_ZN6device29PlatformSensorFusionAlgorithm12SetFrequencyEd(%"class.device::PlatformSensorFusionAlgorithm"*, double) unnamed_addr #2

declare void @_ZN6device29PlatformSensorFusionAlgorithm5ResetEv(%"class.device::PlatformSensorFusionAlgorithm"*) unnamed_addr #2

declare void @_ZN6device47ComputeOrientationEulerAnglesFromRotationMatrixERKNSt3__16vectorIdNS0_9allocatorIdEEEEPdS7_S7_(%"class.std::__1::vector.36"* dereferenceable(24), double*, double*, double*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm(%"class.std::__1::vector.36"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast double** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %0, i64 0, i32 0, i32 1
  %7 = bitcast double** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to double*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds double, double* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr double, double* %13, i64 %18
  %20 = bitcast double* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint double* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.36"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.36"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #10
  %54 = bitcast i8* %53 to double*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi double* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds double, double* %57, i64 %33
  %59 = getelementptr inbounds double, double* %57, i64 %56
  %60 = getelementptr inbounds double, double* %58, i64 %1
  %61 = bitcast double* %58 to i8*
  %62 = shl i64 %1, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 %62, i1 false) #9
  %63 = ptrtoint double* %59 to i64
  %64 = ptrtoint double* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %0, i64 0, i32 0, i32 0
  %66 = load double*, double** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint double* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds double, double* %58, i64 %71
  %73 = ptrtoint double* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast double* %72 to i8*
  %77 = bitcast double* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #9
  %78 = load double*, double** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi double* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq double* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast double* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #10
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
