; ModuleID = '../../third_party/libjxl/src/lib/jxl/dec_group_border.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/dec_group_border.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.jxl::GroupBorderAssigner" = type { %"struct.jxl::FrameDimensions", %"class.std::__1::unique_ptr" }
%"struct.jxl::FrameDimensions" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::atomic"* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i8 }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl19GroupBorderAssigner4InitERKNS_15FrameDimensionsE(%"class.jxl::GroupBorderAssigner"* nocapture, %"struct.jxl::FrameDimensions"* nocapture readonly dereferenceable(144)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.jxl::GroupBorderAssigner"* %0 to i8*
  %4 = bitcast %"struct.jxl::FrameDimensions"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 144, i1 false)
  %5 = getelementptr inbounds %"class.jxl::GroupBorderAssigner", %"class.jxl::GroupBorderAssigner"* %0, i64 0, i32 0, i32 10
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 1
  %8 = getelementptr inbounds %"class.jxl::GroupBorderAssigner", %"class.jxl::GroupBorderAssigner"* %0, i64 0, i32 0, i32 11
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %9, 1
  %11 = mul i64 %10, %7
  %12 = tail call i8* @_Znam(i64 %11) #6
  %13 = getelementptr inbounds %"class.jxl::GroupBorderAssigner", %"class.jxl::GroupBorderAssigner"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %14 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %13, align 8
  %15 = bitcast %"struct.std::__1::atomic"** %13 to i8**
  store i8* %12, i8** %15, align 8
  %16 = icmp eq %"struct.std::__1::atomic"* %14, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdaPv(i8* %18) #6
  %19 = load i64, i64* %8, align 8
  br label %20

20:                                               ; preds = %2, %17
  %21 = phi i64 [ %9, %2 ], [ %19, %17 ]
  %22 = icmp eq i64 %21, -1
  br i1 %22, label %33, label %23

23:                                               ; preds = %20
  %24 = load i64, i64* %5, align 8
  br label %25

25:                                               ; preds = %23, %34
  %26 = phi i64 [ %35, %34 ], [ %21, %23 ]
  %27 = phi i64 [ %36, %34 ], [ %24, %23 ]
  %28 = phi i64 [ %37, %34 ], [ 0, %23 ]
  %29 = add i64 %27, 1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = icmp eq i64 %28, 0
  br label %40

33:                                               ; preds = %34, %20
  ret void

34:                                               ; preds = %40, %25
  %35 = phi i64 [ %26, %25 ], [ %63, %40 ]
  %36 = phi i64 [ -1, %25 ], [ %60, %40 ]
  %37 = add nuw i64 %28, 1
  %38 = add i64 %35, 1
  %39 = icmp ult i64 %37, %38
  br i1 %39, label %25, label %33

40:                                               ; preds = %40, %31
  %41 = phi i64 [ %26, %31 ], [ %63, %40 ]
  %42 = phi i64 [ %29, %31 ], [ %61, %40 ]
  %43 = phi i64 [ %27, %31 ], [ %60, %40 ]
  %44 = phi i64 [ 0, %31 ], [ %59, %40 ]
  %45 = icmp eq i64 %44, 0
  %46 = select i1 %45, i8 9, i8 0
  %47 = icmp eq i64 %44, %43
  %48 = or i8 %46, 6
  %49 = select i1 %47, i8 %48, i8 %46
  %50 = or i8 %49, 3
  %51 = select i1 %32, i8 %50, i8 %49
  %52 = icmp eq i64 %28, %41
  %53 = or i8 %51, 12
  %54 = select i1 %52, i8 %53, i8 %51
  %55 = mul i64 %42, %28
  %56 = add i64 %55, %44
  %57 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %13, align 8
  %58 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %57, i64 %56, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i8 %54, i8* %58 seq_cst, align 1
  %59 = add nuw i64 %44, 1
  %60 = load i64, i64* %5, align 8
  %61 = add i64 %60, 1
  %62 = icmp ult i64 %59, %61
  %63 = load i64, i64* %8, align 8
  br i1 %62, label %40, label %34
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl19GroupBorderAssigner9ClearDoneEm(%"class.jxl::GroupBorderAssigner"* nocapture readonly, i64) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.jxl::GroupBorderAssigner", %"class.jxl::GroupBorderAssigner"* %0, i64 0, i32 0, i32 10
  %4 = load i64, i64* %3, align 8
  %5 = urem i64 %1, %4
  %6 = udiv i64 %1, %4
  %7 = add i64 %4, 1
  %8 = mul i64 %6, %7
  %9 = add i64 %8, %5
  %10 = add i64 %9, 1
  %11 = add i64 %6, 1
  %12 = mul i64 %11, %7
  %13 = add i64 %12, %5
  %14 = add i64 %13, 1
  %15 = getelementptr inbounds %"class.jxl::GroupBorderAssigner", %"class.jxl::GroupBorderAssigner"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %16 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %15, align 8
  %17 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %16, i64 %9, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw and i8* %17, i8 -5 seq_cst
  %19 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %15, align 8
  %20 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %19, i64 %10, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = atomicrmw and i8* %20, i8 -9 seq_cst
  %22 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %15, align 8
  %23 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %22, i64 %13, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = atomicrmw and i8* %23, i8 -3 seq_cst
  %25 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %15, align 8
  %26 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %25, i64 %14, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = atomicrmw and i8* %26, i8 -2 seq_cst
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl19GroupBorderAssigner9GroupDoneEmmPNS_4RectEPm(%"class.jxl::GroupBorderAssigner"*, i64, i64, %"class.jxl::Rect"*, i64*) local_unnamed_addr #0 align 2 {
  %6 = alloca [4 x i64], align 16
  %7 = getelementptr inbounds %"class.jxl::GroupBorderAssigner", %"class.jxl::GroupBorderAssigner"* %0, i64 0, i32 0, i32 10
  %8 = load i64, i64* %7, align 8
  %9 = urem i64 %1, %8
  %10 = udiv i64 %1, %8
  %11 = getelementptr inbounds %"class.jxl::GroupBorderAssigner", %"class.jxl::GroupBorderAssigner"* %0, i64 0, i32 0, i32 16
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %9
  %14 = lshr i64 %13, 3
  %15 = mul i64 %12, %10
  %16 = lshr i64 %15, 3
  %17 = lshr i64 %12, 3
  %18 = getelementptr inbounds %"class.jxl::GroupBorderAssigner", %"class.jxl::GroupBorderAssigner"* %0, i64 0, i32 0, i32 8
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.jxl::GroupBorderAssigner", %"class.jxl::GroupBorderAssigner"* %0, i64 0, i32 0, i32 9
  %21 = load i64, i64* %20, align 8
  %22 = add nuw nsw i64 %14, %17
  %23 = icmp ugt i64 %22, %19
  %24 = tail call i64 @llvm.usub.sat.i64(i64 %19, i64 %14) #7
  %25 = select i1 %23, i64 %24, i64 %17
  %26 = add nuw nsw i64 %16, %17
  %27 = icmp ugt i64 %26, %21
  %28 = tail call i64 @llvm.usub.sat.i64(i64 %21, i64 %16) #7
  %29 = select i1 %27, i64 %28, i64 %17
  %30 = add i64 %8, 1
  %31 = mul i64 %10, %30
  %32 = add i64 %31, %9
  %33 = add i64 %32, 1
  %34 = add i64 %10, 1
  %35 = mul i64 %34, %30
  %36 = add i64 %35, %9
  %37 = add i64 %36, 1
  %38 = getelementptr inbounds %"class.jxl::GroupBorderAssigner", %"class.jxl::GroupBorderAssigner"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %39 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %38, align 8
  %40 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %39, i64 %32, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = atomicrmw or i8* %40, i8 4 seq_cst
  %42 = or i8 %41, 4
  %43 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %38, align 8
  %44 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %43, i64 %33, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = atomicrmw or i8* %44, i8 8 seq_cst
  %46 = or i8 %45, 8
  %47 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %38, align 8
  %48 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %47, i64 %37, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = atomicrmw or i8* %48, i8 1 seq_cst
  %50 = or i8 %49, 1
  %51 = load %"struct.std::__1::atomic"*, %"struct.std::__1::atomic"** %38, align 8
  %52 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %51, i64 %36, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = atomicrmw or i8* %52, i8 2 seq_cst
  %54 = or i8 %53, 2
  %55 = add i64 %2, 7
  %56 = and i64 %55, -8
  %57 = add i64 %25, %14
  %58 = add i64 %29, %16
  %59 = load i64, i64* %7, align 8
  %60 = add nuw i64 %9, 1
  %61 = icmp eq i64 %59, %60
  %62 = getelementptr inbounds %"class.jxl::GroupBorderAssigner", %"class.jxl::GroupBorderAssigner"* %0, i64 0, i32 0, i32 11
  %63 = load i64, i64* %62, align 8
  %64 = icmp eq i64 %63, %34
  %65 = bitcast [4 x i64]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %65) #7
  %66 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 0
  %67 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 1
  %68 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 2
  %69 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 3
  %70 = icmp eq i64 %14, 0
  %71 = bitcast [4 x i64]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %71, i8 -86, i64 32, i1 false)
  br i1 %70, label %72, label %73

72:                                               ; preds = %5
  store i64 0, i64* %66, align 16
  br label %77

73:                                               ; preds = %5
  %74 = and i64 %13, -8
  %75 = sub i64 %74, %56
  store i64 %75, i64* %66, align 16
  %76 = add i64 %74, %56
  br label %77

77:                                               ; preds = %72, %73
  %78 = phi i64 [ %76, %73 ], [ 0, %72 ]
  store i64 %78, i64* %67, align 8
  br i1 %61, label %79, label %82

79:                                               ; preds = %77
  %80 = getelementptr inbounds %"class.jxl::GroupBorderAssigner", %"class.jxl::GroupBorderAssigner"* %0, i64 0, i32 0, i32 6
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %68, align 16
  br label %86

82:                                               ; preds = %77
  %83 = shl i64 %57, 3
  %84 = sub i64 %83, %56
  store i64 %84, i64* %68, align 16
  %85 = add i64 %83, %56
  br label %86

86:                                               ; preds = %82, %79
  %87 = phi i64 [ %81, %79 ], [ %85, %82 ]
  store i64 %87, i64* %69, align 8
  %88 = icmp eq i64 %16, 0
  br i1 %88, label %93, label %89

89:                                               ; preds = %86
  %90 = and i64 %15, -8
  %91 = sub i64 %90, %2
  %92 = add i64 %90, %2
  br label %93

93:                                               ; preds = %86, %89
  %94 = phi i64 [ %91, %89 ], [ 0, %86 ]
  %95 = phi i64 [ %92, %89 ], [ 0, %86 ]
  br i1 %64, label %96, label %99

96:                                               ; preds = %93
  %97 = getelementptr inbounds %"class.jxl::GroupBorderAssigner", %"class.jxl::GroupBorderAssigner"* %0, i64 0, i32 0, i32 7
  %98 = load i64, i64* %97, align 8
  br label %103

99:                                               ; preds = %93
  %100 = shl i64 %58, 3
  %101 = sub i64 %100, %2
  %102 = add i64 %100, %2
  br label %103

103:                                              ; preds = %99, %96
  %104 = phi i64 [ %98, %96 ], [ %101, %99 ]
  %105 = phi i64 [ %98, %96 ], [ %102, %99 ]
  store i64 0, i64* %4, align 8
  %106 = icmp ne i8 %42, 15
  %107 = icmp ne i8 %46, 15
  %108 = icmp ne i8 %50, 15
  %109 = icmp ne i8 %54, 15
  %110 = and i8 %41, 2
  %111 = and i8 %45, 4
  %112 = and i8 %53, 4
  %113 = select i1 %106, i64 3, i64 1
  %114 = select i1 %106, i64 3, i64 0
  %115 = icmp eq i8 %110, 0
  %116 = zext i1 %106 to i64
  %117 = select i1 %115, i64 %113, i64 2
  %118 = select i1 %115, i64 %114, i64 %116
  %119 = icmp eq i64 %118, 3
  %120 = select i1 %119, i64 2, i64 %118
  %121 = select i1 %107, i64 %117, i64 3
  %122 = select i1 %107, i64 %118, i64 %120
  %123 = lshr i8 %41, 3
  %124 = and i8 %123, 1
  %125 = xor i8 %124, 1
  %126 = zext i8 %125 to i64
  %127 = icmp eq i8 %111, 0
  %128 = select i1 %127, i64 2, i64 3
  %129 = select i1 %109, i64 3, i64 1
  %130 = select i1 %109, i64 3, i64 0
  %131 = icmp eq i8 %112, 0
  %132 = zext i1 %109 to i64
  %133 = select i1 %131, i64 %129, i64 2
  %134 = select i1 %131, i64 %130, i64 %132
  %135 = icmp eq i64 %134, 3
  %136 = select i1 %135, i64 2, i64 %134
  %137 = select i1 %108, i64 %133, i64 3
  %138 = select i1 %108, i64 %134, i64 %136
  %139 = icmp eq i64 %122, %126
  br i1 %139, label %140, label %194

140:                                              ; preds = %103
  %141 = icmp eq i64 %121, %128
  %142 = icmp eq i64 %122, %138
  %143 = and i1 %141, %142
  %144 = icmp eq i64 %121, %137
  %145 = and i1 %143, %144
  br i1 %145, label %146, label %161

146:                                              ; preds = %140
  %147 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 %122
  %148 = load i64, i64* %147, align 8
  %149 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 %121
  %150 = load i64, i64* %149, align 8
  %151 = sub i64 %150, %148
  %152 = sub i64 %105, %94
  %153 = icmp eq i64 %151, 0
  %154 = icmp eq i64 %152, 0
  %155 = or i1 %154, %153
  br i1 %155, label %259, label %156

156:                                              ; preds = %146
  store i64 1, i64* %4, align 8
  %157 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 0
  store i64 %148, i64* %157, align 8
  %158 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 1
  store i64 %94, i64* %158, align 8
  %159 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 2
  store i64 %151, i64* %159, align 8
  %160 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 3
  store i64 %152, i64* %160, align 8
  br label %259

161:                                              ; preds = %140
  br i1 %141, label %162, label %194

162:                                              ; preds = %161
  %163 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 %122
  %164 = load i64, i64* %163, align 8
  %165 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 %121
  %166 = load i64, i64* %165, align 8
  %167 = sub i64 %166, %164
  %168 = sub i64 %104, %94
  %169 = icmp eq i64 %167, 0
  %170 = icmp eq i64 %168, 0
  %171 = or i1 %170, %169
  br i1 %171, label %177, label %172

172:                                              ; preds = %162
  store i64 1, i64* %4, align 8
  %173 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 0
  store i64 %164, i64* %173, align 8
  %174 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 1
  store i64 %94, i64* %174, align 8
  %175 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 2
  store i64 %167, i64* %175, align 8
  %176 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 3
  store i64 %168, i64* %176, align 8
  br label %177

177:                                              ; preds = %162, %172
  %178 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 %138
  %179 = load i64, i64* %178, align 8
  %180 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 %137
  %181 = load i64, i64* %180, align 8
  %182 = sub i64 %181, %179
  %183 = sub i64 %105, %104
  %184 = icmp eq i64 %182, 0
  %185 = icmp eq i64 %183, 0
  %186 = or i1 %185, %184
  br i1 %186, label %259, label %187

187:                                              ; preds = %177
  %188 = load i64, i64* %4, align 8
  %189 = add i64 %188, 1
  store i64 %189, i64* %4, align 8
  %190 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %188, i32 0
  store i64 %179, i64* %190, align 8
  %191 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %188, i32 1
  store i64 %104, i64* %191, align 8
  %192 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %188, i32 2
  store i64 %182, i64* %192, align 8
  %193 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %188, i32 3
  store i64 %183, i64* %193, align 8
  br label %259

194:                                              ; preds = %103, %161
  %195 = icmp eq i64 %138, %126
  %196 = icmp eq i64 %128, %137
  %197 = and i1 %195, %196
  %198 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 %122
  %199 = load i64, i64* %198, align 8
  %200 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 %121
  %201 = load i64, i64* %200, align 8
  %202 = sub i64 %201, %199
  %203 = sub i64 %95, %94
  %204 = icmp eq i64 %202, 0
  %205 = icmp eq i64 %203, 0
  %206 = or i1 %205, %204
  br i1 %206, label %212, label %207

207:                                              ; preds = %194
  store i64 1, i64* %4, align 8
  %208 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 0
  store i64 %199, i64* %208, align 8
  %209 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 1
  store i64 %94, i64* %209, align 8
  %210 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 2
  store i64 %202, i64* %210, align 8
  %211 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 3
  store i64 %203, i64* %211, align 8
  br label %212

212:                                              ; preds = %194, %207
  %213 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 %126
  %214 = load i64, i64* %213, align 8
  %215 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 %128
  %216 = load i64, i64* %215, align 8
  %217 = sub i64 %216, %214
  br i1 %197, label %218, label %230

218:                                              ; preds = %212
  %219 = sub i64 %105, %95
  %220 = icmp eq i64 %217, 0
  %221 = icmp eq i64 %219, 0
  %222 = or i1 %221, %220
  br i1 %222, label %259, label %223

223:                                              ; preds = %218
  %224 = load i64, i64* %4, align 8
  %225 = add i64 %224, 1
  store i64 %225, i64* %4, align 8
  %226 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %224, i32 0
  store i64 %214, i64* %226, align 8
  %227 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %224, i32 1
  store i64 %95, i64* %227, align 8
  %228 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %224, i32 2
  store i64 %217, i64* %228, align 8
  %229 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %224, i32 3
  store i64 %219, i64* %229, align 8
  br label %259

230:                                              ; preds = %212
  %231 = sub i64 %104, %95
  %232 = icmp eq i64 %217, 0
  %233 = icmp eq i64 %231, 0
  %234 = or i1 %233, %232
  br i1 %234, label %242, label %235

235:                                              ; preds = %230
  %236 = load i64, i64* %4, align 8
  %237 = add i64 %236, 1
  store i64 %237, i64* %4, align 8
  %238 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %236, i32 0
  store i64 %214, i64* %238, align 8
  %239 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %236, i32 1
  store i64 %95, i64* %239, align 8
  %240 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %236, i32 2
  store i64 %217, i64* %240, align 8
  %241 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %236, i32 3
  store i64 %231, i64* %241, align 8
  br label %242

242:                                              ; preds = %230, %235
  %243 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 %138
  %244 = load i64, i64* %243, align 8
  %245 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 %137
  %246 = load i64, i64* %245, align 8
  %247 = sub i64 %246, %244
  %248 = sub i64 %105, %104
  %249 = icmp eq i64 %247, 0
  %250 = icmp eq i64 %248, 0
  %251 = or i1 %250, %249
  br i1 %251, label %259, label %252

252:                                              ; preds = %242
  %253 = load i64, i64* %4, align 8
  %254 = add i64 %253, 1
  store i64 %254, i64* %4, align 8
  %255 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %253, i32 0
  store i64 %244, i64* %255, align 8
  %256 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %253, i32 1
  store i64 %104, i64* %256, align 8
  %257 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %253, i32 2
  store i64 %247, i64* %257, align 8
  %258 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 %253, i32 3
  store i64 %248, i64* %258, align 8
  br label %259

259:                                              ; preds = %252, %242, %223, %218, %187, %177, %156, %146
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %65) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { builtin nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
