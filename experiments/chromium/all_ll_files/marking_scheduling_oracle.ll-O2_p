; ModuleID = '../../third_party/blink/renderer/platform/heap/impl/marking_scheduling_oracle.cc'
source_filename = "../../third_party/blink/renderer/platform/heap/impl/marking_scheduling_oracle.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::TimeDelta" = type { i64 }
%"class.blink::MarkingSchedulingOracle" = type { %"class.base::TimeTicks", %"class.base::TimeDelta", i64, %"struct.std::__1::atomic", double }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

$_ZNK4base9TimeDeltamiES0_ = comdat any

@_ZN5blink23MarkingSchedulingOracle23kEstimatedMarkingTimeMsE = hidden local_unnamed_addr constant double 5.000000e+02, align 8
@_ZN5blink23MarkingSchedulingOracle38kDefaultIncrementalMarkingStepDurationE = hidden local_unnamed_addr constant %"class.base::TimeDelta" { i64 500 }, align 8
@_ZN5blink23MarkingSchedulingOracle25kMinimumMarkedBytesInStepE = hidden local_unnamed_addr constant i64 65536, align 8
@_ZN5blink23MarkingSchedulingOracle38kMaximumIncrementalMarkingStepDurationE = hidden local_unnamed_addr constant %"class.base::TimeDelta" { i64 2000 }, align 8
@.str = private unnamed_addr constant [23 x i8] c"delta_ != other.delta_\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1

@_ZN5blink23MarkingSchedulingOracleC1Ev = hidden unnamed_addr alias void (%"class.blink::MarkingSchedulingOracle"*), void (%"class.blink::MarkingSchedulingOracle"*)* @_ZN5blink23MarkingSchedulingOracleC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23MarkingSchedulingOracleC2Ev(%"class.blink::MarkingSchedulingOracle"* nocapture) unnamed_addr #0 align 2 {
  %2 = tail call i64 @_ZN4base9TimeTicks3NowEv() #7
  %3 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 0, i32 0, i32 0
  store i64 %2, i64* %3, align 8
  %4 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 1, i32 0
  %5 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 4
  %6 = bitcast i64* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false)
  store double -1.000000e+00, double* %5, align 8
  ret void
}

declare i64 @_ZN4base9TimeTicks3NowEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink23MarkingSchedulingOracle29UpdateIncrementalMarkingStatsEmN4base9TimeDeltaES2_(%"class.blink::MarkingSchedulingOracle"* nocapture, i64, i64, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.base::TimeDelta", align 8
  %6 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %5, i64 0, i32 0
  store i64 %2, i64* %6, align 8
  %7 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 2
  store i64 %1, i64* %7, align 8
  %8 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %5, i64 %3)
  %9 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 1, i32 0
  store i64 %8, i64* %9, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = add i64 %1, -9223372036854775807
  %7 = icmp ult i64 %6, 2
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp sgt i64 %1, -1
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  %13 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %10, i64 %1) #7
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 %12, i64 %15, !prof !2
  ret i64 %16

17:                                               ; preds = %2
  %18 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #7
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp eq i64 %21, %1
  br i1 %23, label %25, label %24

24:                                               ; preds = %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %19, align 8
  br label %34

25:                                               ; preds = %17
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #7
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %26, i8* %27) #7
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %19, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 387, %"class.logging::CheckOpResult"* nonnull %4) #7
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #7
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #7
  %35 = icmp slt i64 %1, 0
  %36 = select i1 %35, i64 9223372036854775807, i64 -9223372036854775808
  ret i64 %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink23MarkingSchedulingOracle26AddConcurrentlyMarkedBytesEm(%"class.blink::MarkingSchedulingOracle"* nocapture, i64) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = atomicrmw add i64* %3, i64 %1 monotonic
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZN5blink23MarkingSchedulingOracle26GetConcurrentlyMarkedBytesEv(%"class.blink::MarkingSchedulingOracle"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i64, i64* %2 monotonic, align 8
  ret i64 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZN5blink23MarkingSchedulingOracle21GetOverallMarkedBytesEv(%"class.blink::MarkingSchedulingOracle"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = add i64 %5, %3
  ret i64 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN5blink23MarkingSchedulingOracle18GetElapsedTimeInMsEN4base9TimeTicksE(%"class.blink::MarkingSchedulingOracle"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::TimeDelta", align 8
  %4 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 4
  %5 = load double, double* %4, align 8
  %6 = fcmp une double %5, -1.000000e+00
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  store double -1.000000e+00, double* %4, align 8
  br label %14

8:                                                ; preds = %2
  %9 = bitcast %"class.base::TimeDelta"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #7
  %10 = tail call i64 @_ZN4base9TimeTicks3NowEv() #7
  %11 = sub nsw i64 %10, %1
  %12 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 0, i32 0
  store i64 %11, i64* %12, align 8
  %13 = call double @_ZNK4base9TimeDelta15InMillisecondsFEv(%"class.base::TimeDelta"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #7
  br label %14

14:                                               ; preds = %8, %7
  %15 = phi double [ %5, %7 ], [ %13, %8 ]
  ret double %15
}

declare double @_ZNK4base9TimeDelta15InMillisecondsFEv(%"class.base::TimeDelta"*) local_unnamed_addr #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN5blink23MarkingSchedulingOracle22GetMinimumStepDurationEv(%"class.blink::MarkingSchedulingOracle"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 1, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp sgt i64 %3, -1
  br i1 %4, label %5, label %26, !prof !3

5:                                                ; preds = %1
  %6 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %3, i64 65536) #7
  %7 = extractvalue { i64, i1 } %6, 1
  %8 = extractvalue { i64, i1 } %6, 0
  %9 = xor i1 %7, true
  %10 = icmp sgt i64 %8, -1
  %11 = and i1 %10, %9
  %12 = select i1 %11, i64 %8, i64 9223372036854775807
  %13 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 2
  %14 = load i64, i64* %13, align 8
  %15 = icmp ne i64 %14, 0
  %16 = icmp sgt i64 %12, -1
  %17 = and i1 %16, %15
  br i1 %17, label %18, label %24, !prof !4

18:                                               ; preds = %5
  %19 = udiv i64 %12, %14
  %20 = icmp sgt i64 %19, 0
  %21 = select i1 %20, i64 %19, i64 0
  %22 = icmp sgt i64 %19, -1
  %23 = select i1 %22, i64 %21, i64 9223372036854775807
  br label %26

24:                                               ; preds = %5
  %25 = select i1 %16, i64 9223372036854775807, i64 -9223372036854775808
  ret i64 %25

26:                                               ; preds = %1, %18
  %27 = phi i64 [ %23, %18 ], [ -9223372036854775808, %1 ]
  ret i64 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN5blink23MarkingSchedulingOracle37GetNextIncrementalStepDurationForTaskEm(%"class.blink::MarkingSchedulingOracle"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::TimeDelta", align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %110, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 1, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %110, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 4
  %15 = load double, double* %14, align 8
  %16 = fcmp une double %15, -1.000000e+00
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  store double -1.000000e+00, double* %14, align 8
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 0, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"class.base::TimeDelta"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #7
  %22 = tail call i64 @_ZN4base9TimeTicks3NowEv() #7
  %23 = sub nsw i64 %22, %20
  %24 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 0, i32 0
  store i64 %23, i64* %24, align 8
  %25 = call double @_ZNK4base9TimeDelta15InMillisecondsFEv(%"class.base::TimeDelta"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #7
  %26 = load i64, i64* %6, align 8
  %27 = load i64, i64* %10, align 8
  br label %28

28:                                               ; preds = %17, %18
  %29 = phi i64 [ %11, %17 ], [ %27, %18 ]
  %30 = phi i64 [ %7, %17 ], [ %26, %18 ]
  %31 = phi double [ %15, %17 ], [ %25, %18 ]
  %32 = getelementptr inbounds %"class.blink::MarkingSchedulingOracle", %"class.blink::MarkingSchedulingOracle"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load atomic i64, i64* %32 monotonic, align 8
  %34 = add i64 %33, %30
  %35 = uitofp i64 %1 to double
  %36 = fmul double %31, %35
  %37 = fdiv double %36, 5.000000e+02
  %38 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38)
  store i64 -6148914691236517206, i64* %4, align 8
  %39 = icmp sgt i64 %29, -1
  br i1 %39, label %40, label %59, !prof !3

40:                                               ; preds = %28
  %41 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %29, i64 65536) #7
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = xor i1 %42, true
  %45 = icmp sgt i64 %43, -1
  %46 = and i1 %45, %44
  %47 = select i1 %46, i64 %43, i64 9223372036854775807
  %48 = icmp ne i64 %30, 0
  %49 = icmp sgt i64 %47, -1
  %50 = and i1 %48, %49
  br i1 %50, label %51, label %57, !prof !4

51:                                               ; preds = %40
  %52 = udiv i64 %47, %30
  %53 = icmp sgt i64 %52, 0
  %54 = select i1 %53, i64 %52, i64 0
  %55 = icmp sgt i64 %52, -1
  %56 = select i1 %55, i64 %54, i64 9223372036854775807
  br label %59

57:                                               ; preds = %40
  %58 = select i1 %49, i64 9223372036854775807, i64 -9223372036854775808
  br label %59

59:                                               ; preds = %28, %51, %57
  %60 = phi i64 [ %58, %57 ], [ %56, %51 ], [ -9223372036854775808, %28 ]
  store i64 %60, i64* %4, align 8
  %61 = uitofp i64 %34 to double
  %62 = fcmp olt double %37, %61
  br i1 %62, label %63, label %69

63:                                               ; preds = %59
  %64 = icmp sgt i64 %60, 2000
  %65 = bitcast i64* %4 to %"class.base::TimeDelta"*
  %66 = select i1 %64, %"class.base::TimeDelta"* @_ZN5blink23MarkingSchedulingOracle38kMaximumIncrementalMarkingStepDurationE, %"class.base::TimeDelta"* %65
  %67 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %66, i64 0, i32 0
  %68 = load i64, i64* %67, align 8
  br label %108

69:                                               ; preds = %59
  %70 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %70)
  store i64 -6148914691236517206, i64* %5, align 8
  %71 = fsub double %37, %61
  %72 = sitofp i64 %29 to double
  %73 = fmul double %71, %72
  %74 = fcmp oge double %73, 0xC3E0000000000000
  %75 = fcmp ole double %73, 0x43DFFFFFFFFFFFFF
  %76 = and i1 %75, %74
  %77 = fptosi double %73 to i64
  br i1 %76, label %85, label %78

78:                                               ; preds = %69
  %79 = lshr i64 %29, 63
  %80 = trunc i64 %79 to i32
  %81 = fcmp olt double %71, 0.000000e+00
  %82 = zext i1 %81 to i32
  %83 = icmp eq i32 %80, %82
  %84 = select i1 %83, i64 9223372036854775807, i64 -9223372036854775808
  br label %85

85:                                               ; preds = %69, %78
  %86 = phi i64 [ %77, %69 ], [ %84, %78 ]
  %87 = icmp ne i64 %30, 0
  %88 = icmp sgt i64 %86, -1
  %89 = and i1 %87, %88
  br i1 %89, label %90, label %96, !prof !4

90:                                               ; preds = %85
  %91 = udiv i64 %86, %30
  %92 = icmp sgt i64 %91, 0
  %93 = select i1 %92, i64 %91, i64 0
  %94 = icmp sgt i64 %91, -1
  %95 = select i1 %94, i64 %93, i64 9223372036854775807
  br label %98

96:                                               ; preds = %85
  %97 = select i1 %88, i64 9223372036854775807, i64 -9223372036854775808
  br label %98

98:                                               ; preds = %90, %96
  %99 = phi i64 [ %95, %90 ], [ %97, %96 ]
  store i64 %99, i64* %5, align 8
  %100 = icmp slt i64 %99, %60
  %101 = select i1 %100, i64* %4, i64* %5
  %102 = bitcast i64* %101 to %"class.base::TimeDelta"*
  %103 = load i64, i64* %101, align 8
  %104 = icmp sgt i64 %103, 2000
  %105 = select i1 %104, %"class.base::TimeDelta"* @_ZN5blink23MarkingSchedulingOracle38kMaximumIncrementalMarkingStepDurationE, %"class.base::TimeDelta"* %102
  %106 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %105, i64 0, i32 0
  %107 = load i64, i64* %106, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %70)
  br label %108

108:                                              ; preds = %98, %63
  %109 = phi i64 [ %68, %63 ], [ %107, %98 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38)
  br label %110

110:                                              ; preds = %2, %9, %108
  %111 = phi i64 [ %109, %108 ], [ 500, %9 ], [ 500, %2 ]
  ret i64 %111
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #6

declare i8* @_ZN7logging15CheckOpValueStrEl(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 8003, i32 1}
!4 = !{!"branch_weights", i32 2000, i32 2002}
