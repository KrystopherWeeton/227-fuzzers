; ModuleID = '../../third_party/skia/src/sksl/ir/SkSLForStatement.cpp'
source_filename = "../../third_party/skia/src/sksl/ir/SkSLForStatement.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"class.SkSL::ForStatement" = type { %"class.SkSL::Statement", %"class.std::__1::shared_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr" }
%"class.std::__1::shared_ptr" = type { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* }
%"class.SkSL::SymbolTable" = type { %"class.std::__1::shared_ptr", %"class.std::__1::vector.22", i8, %"class.std::__1::vector.30", %"class.std::__1::forward_list", %class.SkTHashMap, %"class.SkSL::ErrorReporter"* }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"class.std::__1::unique_ptr.24"*, %"class.std::__1::unique_ptr.24"*, %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.SkSL::Symbol"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.12", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.14" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.SkSL::Type::Field"* }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::unique_ptr.24"* }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"class.std::__1::unique_ptr.32"*, %"class.std::__1::unique_ptr.32"*, %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.SkSL::IRNode"* }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.std::__1::unique_ptr.32"* }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type { %"struct.std::__1::__forward_begin_node", %"class.SkSL::String" }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.43" }
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"struct.SkSL::SymbolTable::SymbolKey", %"class.SkSL::Symbol"* }
%"struct.SkSL::SymbolTable::SymbolKey" = type <{ %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.SkSL::Expression"* }
%"class.SkSL::Expression" = type { %"class.SkSL::IRNode", %"class.SkSL::Type"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.SkSL::Statement"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55" }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.SkSL::Type"* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.61" }
%"struct.std::__1::__atomic_base.61" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.62", %"class.std::__1::__compressed_pair.71", %"class.std::__1::__compressed_pair.76", %"class.std::__1::__compressed_pair.78", [4 x i8] }>
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64", %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { i64 }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { float }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.81"* }
%"class.std::__1::vector.81" = type opaque
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [16 x i8] }
%class.SkTArray = type { %"class.std::__1::unique_ptr"*, i64 }
%"struct.SkSL::Analysis::UnrollableLoopInfo" = type { %"class.SkSL::Variable"*, double, double, i32 }
%"class.SkSL::Variable" = type <{ %"class.SkSL::Symbol", %"class.SkSL::VarDeclaration"*, %"struct.SkSL::Modifiers"*, i8, i8, [6 x i8] }>
%"class.SkSL::VarDeclaration" = type { %"class.SkSL::Statement", %"class.SkSL::Variable"*, %"class.SkSL::Type"*, i32, %"class.std::__1::unique_ptr.1" }
%"class.SkSL::Block" = type <{ %"class.SkSL::Statement", %class.SkSTArray, %"class.std::__1::shared_ptr", i8, [7 x i8] }>
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::__shared_ptr_emplace" = type { %"class.std::__1::__shared_weak_count", %"struct.std::__1::__shared_ptr_emplace<SkSL::SymbolTable, std::__1::allocator<SkSL::SymbolTable> >::_Storage" }
%"struct.std::__1::__shared_ptr_emplace<SkSL::SymbolTable, std::__1::allocator<SkSL::SymbolTable> >::_Storage" = type { [104 x i8] }
%"class.std::type_info" = type { i32 (...)**, i8* }

$_ZN4SkSL11SymbolTable13WrapIfBuiltinENSt3__110shared_ptrIS0_EE = comdat any

$_ZN4SkSL13ErrorReporter5errorEiPKc = comdat any

$_ZN4SkSL12ForStatementD2Ev = comdat any

$_ZN4SkSL12ForStatementD0Ev = comdat any

$_ZNK4SkSL9Statement7isEmptyEv = comdat any

$_ZNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEED2Ev = comdat any

$_ZNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEED0Ev = comdat any

$_ZNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEE16__on_zero_sharedEv = comdat any

$_ZNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEE21__on_zero_shared_weakEv = comdat any

$_ZN4SkSL11SymbolTableD2Ev = comdat any

$_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EEaSEOS7_ = comdat any

$_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE = comdat any

$_ZTVNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEEE = comdat any

@.str = private unnamed_addr constant [6 x i8] c"for (\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c";\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"; \00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"invalid for loop initializer\00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"while loops are not supported\00", align 1
@_ZTVN4SkSL12ForStatementE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::ForStatement"*)* @_ZN4SkSL12ForStatementD2Ev to i8*), i8* bitcast (void (%"class.SkSL::ForStatement"*)* @_ZN4SkSL12ForStatementD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::ForStatement"*)* @_ZNK4SkSL12ForStatement11descriptionEv to i8*), i8* bitcast (i1 (%"class.SkSL::Statement"*)* @_ZNK4SkSL9Statement7isEmptyEv to i8*), i8* bitcast (%"class.SkSL::Statement"* (%"class.SkSL::ForStatement"*)* @_ZNK4SkSL12ForStatement5cloneEv to i8*)] }, align 8
@_ZTVNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEEE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.std::__1::__shared_ptr_emplace"*)* @_ZNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEED2Ev to i8*), i8* bitcast (void (%"struct.std::__1::__shared_ptr_emplace"*)* @_ZNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEED0Ev to i8*), i8* bitcast (void (%"struct.std::__1::__shared_ptr_emplace"*)* @_ZNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEE16__on_zero_sharedEv to i8*), i8* bitcast (i8* (%"class.std::__1::__shared_weak_count"*, %"class.std::type_info"*)* @_ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info to i8*), i8* bitcast (void (%"struct.std::__1::__shared_ptr_emplace"*)* @_ZNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEE21__on_zero_shared_weakEv to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Statement"* @_ZNK4SkSL12ForStatement5cloneEv(%"class.SkSL::ForStatement"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 0, i32 0, i32 1
  %3 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %3, align 8
  %5 = icmp eq %"class.SkSL::Statement"* %4, null
  br i1 %5, label %13, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Statement"* %4 to %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)***
  %8 = load %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)**, %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)*** %7, align 8
  %9 = getelementptr inbounds %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)*, %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)** %8, i64 4
  %10 = load %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)*, %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)** %9, align 8
  %11 = tail call %"class.SkSL::Statement"* %10(%"class.SkSL::Statement"* nonnull %4) #9
  %12 = ptrtoint %"class.SkSL::Statement"* %11 to i64
  br label %13

13:                                               ; preds = %1, %6
  %14 = phi i64 [ %12, %6 ], [ 0, %1 ]
  %15 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %16 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %15, align 8
  %17 = icmp eq %"class.SkSL::Expression"* %16, null
  br i1 %17, label %25, label %18

18:                                               ; preds = %13
  %19 = bitcast %"class.SkSL::Expression"* %16 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %20 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %19, align 8
  %21 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %20, i64 10
  %22 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %21, align 8
  %23 = tail call %"class.SkSL::Expression"* %22(%"class.SkSL::Expression"* nonnull %16) #9
  %24 = ptrtoint %"class.SkSL::Expression"* %23 to i64
  br label %25

25:                                               ; preds = %13, %18
  %26 = phi i64 [ %24, %18 ], [ 0, %13 ]
  %27 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %28 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %27, align 8
  %29 = icmp eq %"class.SkSL::Expression"* %28, null
  br i1 %29, label %37, label %30

30:                                               ; preds = %25
  %31 = bitcast %"class.SkSL::Expression"* %28 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %32 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %31, align 8
  %33 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %32, i64 10
  %34 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %33, align 8
  %35 = tail call %"class.SkSL::Expression"* %34(%"class.SkSL::Expression"* nonnull %28) #9
  %36 = ptrtoint %"class.SkSL::Expression"* %35 to i64
  br label %37

37:                                               ; preds = %25, %30
  %38 = phi i64 [ %36, %30 ], [ 0, %25 ]
  %39 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %40 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %39, align 8
  %41 = bitcast %"class.SkSL::Statement"* %40 to %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)***
  %42 = load %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)**, %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)*** %41, align 8
  %43 = getelementptr inbounds %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)*, %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)** %42, i64 4
  %44 = load %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)*, %"class.SkSL::Statement"* (%"class.SkSL::Statement"*)** %43, align 8
  %45 = tail call %"class.SkSL::Statement"* %44(%"class.SkSL::Statement"* %40) #9
  %46 = ptrtoint %"class.SkSL::Statement"* %45 to i64
  %47 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 1, i32 0
  %48 = load %"class.SkSL::SymbolTable"*, %"class.SkSL::SymbolTable"** %47, align 8
  %49 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 1, i32 1
  %50 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %49, align 8
  %51 = icmp eq %"class.std::__1::__shared_weak_count"* %50, null
  br i1 %51, label %55, label %52

52:                                               ; preds = %37
  %53 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %50, i64 0, i32 0, i32 1
  %54 = atomicrmw add i64* %53, i64 1 monotonic
  br label %55

55:                                               ; preds = %37, %52
  %56 = tail call { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* } @_ZN4SkSL11SymbolTable13WrapIfBuiltinENSt3__110shared_ptrIS0_EE(%"class.SkSL::SymbolTable"* %48, %"class.std::__1::__shared_weak_count"* %50)
  %57 = extractvalue { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* } %56, 0
  %58 = ptrtoint %"class.SkSL::SymbolTable"* %57 to i64
  %59 = extractvalue { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* } %56, 1
  %60 = ptrtoint %"class.std::__1::__shared_weak_count"* %59 to i64
  %61 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 64) #9
  %62 = load i32, i32* %2, align 4
  %63 = getelementptr inbounds i8, i8* %61, i64 8
  %64 = bitcast i8* %63 to i32*
  store i32 %62, i32* %64, align 8
  %65 = getelementptr inbounds i8, i8* %61, i64 12
  %66 = bitcast i8* %65 to i32*
  store i32 22, i32* %66, align 4
  %67 = bitcast i8* %61 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL12ForStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %67, align 8
  %68 = getelementptr inbounds i8, i8* %61, i64 16
  %69 = bitcast i8* %68 to i64*
  store i64 %58, i64* %69, align 8
  %70 = getelementptr inbounds i8, i8* %61, i64 24
  %71 = bitcast i8* %70 to i64*
  store i64 %60, i64* %71, align 8
  %72 = getelementptr inbounds i8, i8* %61, i64 32
  %73 = bitcast i8* %72 to i64*
  store i64 %14, i64* %73, align 8
  %74 = getelementptr inbounds i8, i8* %61, i64 40
  %75 = bitcast i8* %74 to i64*
  store i64 %26, i64* %75, align 8
  %76 = getelementptr inbounds i8, i8* %61, i64 48
  %77 = bitcast i8* %76 to i64*
  store i64 %38, i64* %77, align 8
  %78 = getelementptr inbounds i8, i8* %61, i64 56
  %79 = bitcast i8* %78 to i64*
  store i64 %46, i64* %79, align 8
  %80 = bitcast i8* %61 to %"class.SkSL::Statement"*
  ret %"class.SkSL::Statement"* %80
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* } @_ZN4SkSL11SymbolTable13WrapIfBuiltinENSt3__110shared_ptrIS0_EE(%"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"*) local_unnamed_addr #0 comdat align 2 {
  %3 = ptrtoint %"class.SkSL::SymbolTable"* %0 to i64
  %4 = icmp eq %"class.SkSL::SymbolTable"* %0, null
  br i1 %4, label %44, label %5

5:                                                ; preds = %2
  %6 = ptrtoint %"class.std::__1::__shared_weak_count"* %1 to i64
  %7 = getelementptr inbounds %"class.SkSL::SymbolTable", %"class.SkSL::SymbolTable"* %0, i64 0, i32 2
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %56, label %10

10:                                               ; preds = %5
  %11 = tail call i8* @_Znwm(i64 128) #10
  %12 = bitcast i8* %11 to i32 (...)***
  %13 = getelementptr inbounds i8, i8* %11, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #9
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %14 = getelementptr inbounds i8, i8* %11, i64 24
  %15 = bitcast i8* %14 to i64*
  store i64 %3, i64* %15, align 8
  %16 = getelementptr inbounds i8, i8* %11, i64 32
  %17 = bitcast i8* %16 to %"class.std::__1::__shared_weak_count"**
  store %"class.std::__1::__shared_weak_count"* %1, %"class.std::__1::__shared_weak_count"** %17, align 8
  %18 = icmp eq %"class.std::__1::__shared_weak_count"* %1, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %1, i64 0, i32 0, i32 1
  %21 = atomicrmw add i64* %20, i64 1 monotonic
  br label %22

22:                                               ; preds = %19, %10
  %23 = phi i1 [ %18, %19 ], [ true, %10 ]
  %24 = getelementptr inbounds i8, i8* %11, i64 40
  %25 = getelementptr inbounds i8, i8* %11, i64 72
  %26 = getelementptr inbounds i8, i8* %11, i64 120
  %27 = getelementptr inbounds %"class.SkSL::SymbolTable", %"class.SkSL::SymbolTable"* %0, i64 0, i32 6
  %28 = bitcast %"class.SkSL::ErrorReporter"** %27 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 48, i1 false) #9
  call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 25, i1 false)
  %29 = load i64, i64* %28, align 8
  %30 = bitcast i8* %26 to i64*
  store i64 %29, i64* %30, align 8
  br i1 %23, label %41, label %31

31:                                               ; preds = %22
  %32 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %1, i64 0, i32 0, i32 1
  %33 = atomicrmw add i64* %32, i64 -1 acq_rel
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %41

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %1, i64 0, i32 0
  %37 = bitcast %"class.std::__1::__shared_weak_count"* %1 to void (%"class.std::__1::__shared_count"*)***
  %38 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %37, align 8
  %39 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %38, i64 2
  %40 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %39, align 8
  tail call void %40(%"class.std::__1::__shared_count"* %36) #9
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %1) #9
  br label %41

41:                                               ; preds = %22, %31, %35
  %42 = ptrtoint i8* %14 to i64
  %43 = ptrtoint i8* %11 to i64
  br label %56

44:                                               ; preds = %2
  %45 = icmp eq %"class.std::__1::__shared_weak_count"* %1, null
  br i1 %45, label %56, label %46

46:                                               ; preds = %44
  %47 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %1, i64 0, i32 0, i32 1
  %48 = atomicrmw add i64* %47, i64 -1 acq_rel
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %56

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %1, i64 0, i32 0
  %52 = bitcast %"class.std::__1::__shared_weak_count"* %1 to void (%"class.std::__1::__shared_count"*)***
  %53 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %52, align 8
  %54 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %53, i64 2
  %55 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %54, align 8
  tail call void %55(%"class.std::__1::__shared_count"* %51) #9
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %1) #9
  br label %56

56:                                               ; preds = %5, %41, %44, %46, %50
  %57 = phi i64 [ 0, %44 ], [ 0, %46 ], [ 0, %50 ], [ %3, %5 ], [ %42, %41 ]
  %58 = phi i64 [ 0, %44 ], [ 0, %46 ], [ 0, %50 ], [ %6, %5 ], [ %43, %41 ]
  %59 = inttoptr i64 %57 to %"class.SkSL::SymbolTable"*
  %60 = insertvalue { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* } undef, %"class.SkSL::SymbolTable"* %59, 0
  %61 = inttoptr i64 %58 to %"class.std::__1::__shared_weak_count"*
  %62 = insertvalue { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* } %60, %"class.std::__1::__shared_weak_count"* %61, 1
  ret { %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"* } %62
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4SkSL12ForStatement11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::ForStatement"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.SkSL::String", align 8
  %4 = alloca %"class.SkSL::String", align 8
  %5 = alloca %"class.SkSL::String", align 8
  %6 = alloca %"class.SkSL::String", align 8
  %7 = alloca %"class.SkSL::String", align 8
  %8 = bitcast %"class.SkSL::String"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = bitcast %"class.SkSL::String"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 -86, i64 24, i1 false)
  store i8 5, i8* %9, align 1
  %11 = bitcast %"class.SkSL::String"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i64 5, i1 false) #9
  %12 = getelementptr inbounds i8, i8* %11, i64 5
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %14 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %13, align 8
  %15 = icmp eq %"class.SkSL::Statement"* %14, null
  br i1 %15, label %32, label %16

16:                                               ; preds = %2
  %17 = bitcast %"class.SkSL::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #9
  %18 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %14, i64 0, i32 0
  %19 = bitcast %"class.SkSL::Statement"* %14 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %20 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %20, i64 2
  %22 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %21, align 8
  call void %22(%"class.SkSL::String"* nonnull sret %3, %"class.SkSL::IRNode"* %18) #9
  %23 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"* %0, %"class.SkSL::String"* nonnull dereferenceable(24) %3) #9
  %24 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %24, i64 0, i32 1, i32 0
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %16
  %29 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  call void @_ZdlPv(i8* %30) #10
  br label %31

31:                                               ; preds = %16, %28
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #9
  br label %34

32:                                               ; preds = %2
  %33 = tail call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #9
  br label %34

34:                                               ; preds = %32, %31
  %35 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)) #9
  %36 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %37 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %36, align 8
  %38 = icmp eq %"class.SkSL::Expression"* %37, null
  br i1 %38, label %55, label %39

39:                                               ; preds = %34
  %40 = bitcast %"class.SkSL::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %40) #9
  %41 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %37, i64 0, i32 0
  %42 = bitcast %"class.SkSL::Expression"* %37 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %43 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %43, i64 2
  %45 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %44, align 8
  call void %45(%"class.SkSL::String"* nonnull sret %4, %"class.SkSL::IRNode"* %41) #9
  %46 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"* %0, %"class.SkSL::String"* nonnull dereferenceable(24) %4) #9
  %47 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  %49 = load i8, i8* %48, align 1
  %50 = icmp slt i8 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %39
  %52 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  call void @_ZdlPv(i8* %53) #10
  br label %54

54:                                               ; preds = %39, %51
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %40) #9
  br label %55

55:                                               ; preds = %34, %54
  %56 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)) #9
  %57 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %1, i64 0, i32 4, i32 0, i32 0, i32 0
  %58 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %57, align 8
  %59 = icmp eq %"class.SkSL::Expression"* %58, null
  br i1 %59, label %76, label %60

60:                                               ; preds = %55
  %61 = bitcast %"class.SkSL::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %61) #9
  %62 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %58, i64 0, i32 0
  %63 = bitcast %"class.SkSL::Expression"* %58 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %64 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %63, align 8
  %65 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %64, i64 2
  %66 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %65, align 8
  call void %66(%"class.SkSL::String"* nonnull sret %5, %"class.SkSL::IRNode"* %62) #9
  %67 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"* %0, %"class.SkSL::String"* nonnull dereferenceable(24) %5) #9
  %68 = bitcast %"class.SkSL::String"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %68, i64 0, i32 1, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %60
  %73 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  call void @_ZdlPv(i8* %74) #10
  br label %75

75:                                               ; preds = %60, %72
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %61) #9
  br label %76

76:                                               ; preds = %55, %75
  %77 = bitcast %"class.SkSL::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %77) #9
  %78 = bitcast %"class.SkSL::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %78) #9
  %79 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %1, i64 0, i32 5, i32 0, i32 0, i32 0
  %80 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %79, align 8
  %81 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %80, i64 0, i32 0
  %82 = bitcast %"class.SkSL::Statement"* %80 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %83 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %82, align 8
  %84 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %83, i64 2
  %85 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %84, align 8
  call void %85(%"class.SkSL::String"* nonnull sret %7, %"class.SkSL::IRNode"* %81) #9
  call void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* nonnull sret %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), %"class.SkSL::String"* nonnull dereferenceable(24) %7) #9
  %86 = call dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"* %0, %"class.SkSL::String"* nonnull dereferenceable(24) %6) #9
  %87 = bitcast %"class.SkSL::String"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %88 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %87, i64 0, i32 1, i32 0
  %89 = load i8, i8* %88, align 1
  %90 = icmp slt i8 %89, 0
  br i1 %90, label %91, label %94

91:                                               ; preds = %76
  %92 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = load i8*, i8** %92, align 8
  call void @_ZdlPv(i8* %93) #10
  br label %94

94:                                               ; preds = %76, %91
  %95 = bitcast %"class.SkSL::String"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %96 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %95, i64 0, i32 1, i32 0
  %97 = load i8, i8* %96, align 1
  %98 = icmp slt i8 %97, 0
  br i1 %98, label %99, label %102

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = load i8*, i8** %100, align 8
  call void @_ZdlPv(i8* %101) #10
  br label %102

102:                                              ; preds = %94, %99
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %78) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %77) #9
  ret void
}

declare dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLERKS0_(%"class.SkSL::String"*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

declare dereferenceable(24) %"class.SkSL::String"* @_ZN4SkSL6StringpLEPKc(%"class.SkSL::String"*, i8*) local_unnamed_addr #2

declare void @_ZN4SkSLplEPKcRKNS_6StringE(%"class.SkSL::String"* sret, i8*, %"class.SkSL::String"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Statement"* @_ZN4SkSL12ForStatement7ConvertERKNS_7ContextEiNSt3__110unique_ptrINS_9StatementENS4_14default_deleteIS6_EEEENS5_INS_10ExpressionENS7_ISA_EEEESC_S9_NS4_10shared_ptrINS_11SymbolTableEEE(%"class.SkSL::Context"* dereferenceable(744), i32, %"class.SkSL::Statement"*, %"class.SkSL::Expression"*, %"class.SkSL::Expression"*, %"class.SkSL::Statement"*, %"class.std::__1::shared_ptr"* nocapture byval(%"class.std::__1::shared_ptr") align 8) local_unnamed_addr #0 align 2 {
  %8 = alloca %class.SkSTArray, align 8
  %9 = alloca %class.SkSTArray, align 8
  %10 = ptrtoint %"class.SkSL::Statement"* %2 to i64
  %11 = ptrtoint %"class.SkSL::Expression"* %3 to i64
  %12 = ptrtoint %"class.SkSL::Expression"* %4 to i64
  %13 = ptrtoint %"class.SkSL::Statement"* %5 to i64
  %14 = icmp eq %"class.SkSL::Statement"* %2, null
  br i1 %14, label %61, label %15

15:                                               ; preds = %7
  %16 = bitcast %"class.SkSL::Statement"* %2 to i1 (%"class.SkSL::Statement"*)***
  %17 = load i1 (%"class.SkSL::Statement"*)**, i1 (%"class.SkSL::Statement"*)*** %16, align 8
  %18 = getelementptr inbounds i1 (%"class.SkSL::Statement"*)*, i1 (%"class.SkSL::Statement"*)** %17, i64 3
  %19 = load i1 (%"class.SkSL::Statement"*)*, i1 (%"class.SkSL::Statement"*)** %18, align 8
  %20 = tail call zeroext i1 %19(%"class.SkSL::Statement"* nonnull %2) #9
  br i1 %20, label %61, label %21

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %2, i64 0, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = or i32 %23, 8
  %25 = icmp eq i32 %24, 29
  br i1 %25, label %61, label %26

26:                                               ; preds = %21
  %27 = icmp eq i32 %23, 16
  br i1 %27, label %28, label %56

28:                                               ; preds = %26
  %29 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %2, i64 4
  %30 = bitcast %"class.SkSL::Statement"* %29 to i8*
  %31 = load i8, i8* %30, align 8, !range !2
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %33, label %56

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %2, i64 2
  %35 = bitcast %"class.SkSL::Statement"* %34 to %"class.std::__1::unique_ptr"**
  %36 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %35, align 8
  %37 = icmp eq %"class.std::__1::unique_ptr"* %36, null
  br i1 %37, label %61, label %38

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %2, i64 2, i32 0, i32 1
  %40 = bitcast i32* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = lshr i64 %41, 1
  %43 = and i64 %42, 2147483647
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 %43
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %61, label %48

46:                                               ; preds = %48
  %47 = icmp eq %"class.std::__1::unique_ptr"* %55, %44
  br i1 %47, label %61, label %48

48:                                               ; preds = %38, %46
  %49 = phi %"class.std::__1::unique_ptr"* [ %55, %46 ], [ %36, %38 ]
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %50, align 8
  %52 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %51, i64 0, i32 0, i32 2
  %53 = load i32, i32* %52, align 4
  %54 = icmp eq i32 %53, 29
  %55 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 1
  br i1 %54, label %46, label %56

56:                                               ; preds = %48, %28, %26
  %57 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %58 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %57, align 8
  %59 = getelementptr inbounds %"class.SkSL::Statement", %"class.SkSL::Statement"* %2, i64 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  tail call void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"* %58, i32 %60, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0))
  br label %222

61:                                               ; preds = %46, %7, %15, %33, %38, %21
  %62 = phi i1 [ true, %33 ], [ true, %38 ], [ false, %21 ], [ false, %15 ], [ false, %7 ], [ true, %46 ]
  %63 = icmp eq %"class.SkSL::Expression"* %3, null
  br i1 %63, label %70, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 0, i32 24, i32 0, i32 0, i32 0
  %66 = load %"class.SkSL::Type"*, %"class.SkSL::Type"** %65, align 8
  %67 = tail call %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"* %66, %"class.SkSL::Expression"* nonnull %3, %"class.SkSL::Context"* dereferenceable(744) %0) #9
  %68 = ptrtoint %"class.SkSL::Expression"* %67 to i64
  %69 = icmp eq %"class.SkSL::Expression"* %67, null
  br i1 %69, label %222, label %70

70:                                               ; preds = %64, %61
  %71 = phi i64 [ %68, %64 ], [ %11, %61 ]
  %72 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 4
  %73 = load %"struct.SkSL::ProgramConfig"*, %"struct.SkSL::ProgramConfig"** %72, align 8
  %74 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %73, i64 0, i32 1, i32 19
  %75 = load i8, i8* %74, align 1, !range !2
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %87, label %77

77:                                               ; preds = %70
  %78 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %73, i64 0, i32 0
  %79 = load i8, i8* %78, align 8
  %80 = add i8 %79, -4
  %81 = icmp ult i8 %80, 3
  br i1 %81, label %82, label %87

82:                                               ; preds = %77
  %83 = inttoptr i64 %71 to %"class.SkSL::Expression"*
  %84 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %85 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %84, align 8
  %86 = tail call zeroext i1 @_ZN4SkSL8Analysis20ForLoopIsValidForES2EiPKNS_9StatementEPKNS_10ExpressionES6_S3_PNS0_18UnrollableLoopInfoEPNS_13ErrorReporterE(i32 %1, %"class.SkSL::Statement"* %2, %"class.SkSL::Expression"* %83, %"class.SkSL::Expression"* %4, %"class.SkSL::Statement"* %5, %"struct.SkSL::Analysis::UnrollableLoopInfo"* null, %"class.SkSL::ErrorReporter"* %85) #9
  br i1 %86, label %87, label %222

87:                                               ; preds = %70, %82, %77
  br i1 %62, label %88, label %201

88:                                               ; preds = %87
  %89 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %8, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %89) #9
  %90 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %8, i64 0, i32 0, i32 0, i64 16
  %91 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %8, i64 0, i32 0, i32 0, i64 24
  %92 = bitcast i8* %91 to i64*
  %93 = bitcast i8* %90 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %89, i8 -86, i64 16, i1 false)
  store i8* %89, i8** %93, align 8
  store i64 17179869184, i64* %92, align 8
  %94 = bitcast i8* %90 to %class.SkTArray*
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %94, i32 1, i32 1) #9
  %95 = bitcast i8* %90 to %"class.std::__1::unique_ptr"**
  %96 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %95, align 8
  %97 = load i64, i64* %92, align 8
  %98 = lshr i64 %97, 1
  %99 = and i64 %98, 2147483647
  %100 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %96, i64 %99
  %101 = add i64 %97, 2
  %102 = and i64 %101, 4294967294
  %103 = and i64 %97, -4294967295
  %104 = or i64 %102, %103
  store i64 %104, i64* %92, align 8
  %105 = bitcast %"class.std::__1::unique_ptr"* %100 to i64*
  store i64 %10, i64* %105, align 8
  %106 = bitcast %"class.std::__1::shared_ptr"* %6 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 8
  %108 = bitcast %"class.std::__1::shared_ptr"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %108, i8 0, i64 16, i1 false) #9
  %109 = call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 64) #9
  %110 = getelementptr inbounds i8, i8* %109, i64 8
  %111 = bitcast i8* %110 to i32*
  store i32 %1, i32* %111, align 8
  %112 = getelementptr inbounds i8, i8* %109, i64 12
  %113 = bitcast i8* %112 to i32*
  store i32 22, i32* %113, align 4
  %114 = bitcast i8* %109 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL12ForStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %114, align 8
  %115 = getelementptr inbounds i8, i8* %109, i64 16
  %116 = bitcast i8* %115 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %116, align 8
  %117 = getelementptr inbounds i8, i8* %109, i64 32
  %118 = bitcast i8* %117 to i64*
  store i64 0, i64* %118, align 8
  %119 = getelementptr inbounds i8, i8* %109, i64 40
  %120 = bitcast i8* %119 to i64*
  store i64 %71, i64* %120, align 8
  %121 = getelementptr inbounds i8, i8* %109, i64 48
  %122 = bitcast i8* %121 to i64*
  store i64 %12, i64* %122, align 8
  %123 = getelementptr inbounds i8, i8* %109, i64 56
  %124 = bitcast i8* %123 to i64*
  store i64 %13, i64* %124, align 8
  %125 = ptrtoint i8* %109 to i64
  call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %94, i32 1, i32 1) #9
  %126 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %95, align 8
  %127 = load i64, i64* %92, align 8
  %128 = lshr i64 %127, 1
  %129 = and i64 %128, 2147483647
  %130 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %126, i64 %129
  %131 = add i64 %127, 2
  %132 = and i64 %131, 4294967294
  %133 = and i64 %127, -4294967295
  %134 = or i64 %132, %133
  store i64 %134, i64* %92, align 8
  %135 = bitcast %"class.std::__1::unique_ptr"* %130 to i64*
  store i64 %125, i64* %135, align 8
  %136 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %9, i64 0, i32 0, i32 0, i64 16
  %137 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %9, i64 0, i32 0, i32 0, i64 0
  %138 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %9, i64 0, i32 0, i32 0, i64 24
  %139 = bitcast i8* %138 to i64*
  %140 = bitcast i8* %136 to i8**
  store i8* %137, i8** %140, align 8
  store i64 17179869184, i64* %139, align 8
  %141 = bitcast i8* %136 to %class.SkTArray*
  %142 = call dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray* %141, %class.SkTArray* dereferenceable(16) %94) #9
  %143 = call %"class.SkSL::Block"* @_ZN4SkSL5Block4MakeEi9SkSTArrayILi2ENSt3__110unique_ptrINS_9StatementENS2_14default_deleteIS4_EEEELb0EENS2_10shared_ptrINS_11SymbolTableEEEb(i32 %1, %class.SkSTArray* nonnull %9, %"class.SkSL::SymbolTable"* null, %"class.std::__1::__shared_weak_count"* null, i1 zeroext true) #9
  %144 = ptrtoint %"class.SkSL::Block"* %143 to i64
  %145 = load i64, i64* %139, align 8
  %146 = and i64 %145, 4294967294
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %150, label %148

148:                                              ; preds = %88
  %149 = bitcast i8* %136 to %"class.std::__1::unique_ptr"**
  br label %154

150:                                              ; preds = %165, %88
  %151 = phi i64 [ %145, %88 ], [ %167, %165 ]
  %152 = and i64 %151, 1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %173, label %171

154:                                              ; preds = %165, %148
  %155 = phi i64 [ 0, %148 ], [ %166, %165 ]
  %156 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %149, align 8
  %157 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %156, i64 %155, i32 0, i32 0, i32 0
  %158 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %157, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %157, align 8
  %159 = icmp eq %"class.SkSL::Statement"* %158, null
  br i1 %159, label %165, label %160

160:                                              ; preds = %154
  %161 = bitcast %"class.SkSL::Statement"* %158 to void (%"class.SkSL::Statement"*)***
  %162 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %161, align 8
  %163 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %162, i64 1
  %164 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %163, align 8
  call void %164(%"class.SkSL::Statement"* nonnull %158) #9
  br label %165

165:                                              ; preds = %160, %154
  %166 = add nuw nsw i64 %155, 1
  %167 = load i64, i64* %139, align 8
  %168 = lshr i64 %167, 1
  %169 = and i64 %168, 2147483647
  %170 = icmp ult i64 %166, %169
  br i1 %170, label %154, label %150

171:                                              ; preds = %150
  %172 = load i8*, i8** %140, align 8
  call void @_Z7sk_freePv(i8* %172) #9
  br label %173

173:                                              ; preds = %150, %171
  %174 = load i64, i64* %92, align 8
  %175 = and i64 %174, 4294967294
  %176 = icmp eq i64 %175, 0
  br i1 %176, label %177, label %181

177:                                              ; preds = %192, %173
  %178 = phi i64 [ %174, %173 ], [ %194, %192 ]
  %179 = and i64 %178, 1
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %200, label %198

181:                                              ; preds = %173, %192
  %182 = phi i64 [ %193, %192 ], [ 0, %173 ]
  %183 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %95, align 8
  %184 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %183, i64 %182, i32 0, i32 0, i32 0
  %185 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %184, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %184, align 8
  %186 = icmp eq %"class.SkSL::Statement"* %185, null
  br i1 %186, label %192, label %187

187:                                              ; preds = %181
  %188 = bitcast %"class.SkSL::Statement"* %185 to void (%"class.SkSL::Statement"*)***
  %189 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %188, align 8
  %190 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %189, i64 1
  %191 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %190, align 8
  call void %191(%"class.SkSL::Statement"* nonnull %185) #9
  br label %192

192:                                              ; preds = %187, %181
  %193 = add nuw nsw i64 %182, 1
  %194 = load i64, i64* %92, align 8
  %195 = lshr i64 %194, 1
  %196 = and i64 %195, 2147483647
  %197 = icmp ult i64 %193, %196
  br i1 %197, label %181, label %177

198:                                              ; preds = %177
  %199 = load i8*, i8** %93, align 8
  call void @_Z7sk_freePv(i8* %199) #9
  br label %200

200:                                              ; preds = %177, %198
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %89) #9
  br label %222

201:                                              ; preds = %87
  %202 = bitcast %"class.std::__1::shared_ptr"* %6 to <2 x i64>*
  %203 = load <2 x i64>, <2 x i64>* %202, align 8
  %204 = bitcast %"class.std::__1::shared_ptr"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %204, i8 0, i64 16, i1 false) #9
  %205 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 64) #9
  %206 = getelementptr inbounds i8, i8* %205, i64 8
  %207 = bitcast i8* %206 to i32*
  store i32 %1, i32* %207, align 8
  %208 = getelementptr inbounds i8, i8* %205, i64 12
  %209 = bitcast i8* %208 to i32*
  store i32 22, i32* %209, align 4
  %210 = bitcast i8* %205 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL12ForStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %210, align 8
  %211 = getelementptr inbounds i8, i8* %205, i64 16
  %212 = bitcast i8* %211 to <2 x i64>*
  store <2 x i64> %203, <2 x i64>* %212, align 8
  %213 = getelementptr inbounds i8, i8* %205, i64 32
  %214 = bitcast i8* %213 to i64*
  store i64 %10, i64* %214, align 8
  %215 = getelementptr inbounds i8, i8* %205, i64 40
  %216 = bitcast i8* %215 to i64*
  store i64 %71, i64* %216, align 8
  %217 = getelementptr inbounds i8, i8* %205, i64 48
  %218 = bitcast i8* %217 to i64*
  store i64 %12, i64* %218, align 8
  %219 = getelementptr inbounds i8, i8* %205, i64 56
  %220 = bitcast i8* %219 to i64*
  store i64 %13, i64* %220, align 8
  %221 = ptrtoint i8* %205 to i64
  br label %222

222:                                              ; preds = %64, %82, %201, %200, %56
  %223 = phi i64 [ 0, %200 ], [ 0, %201 ], [ %13, %56 ], [ %13, %64 ], [ %13, %82 ]
  %224 = phi i64 [ 0, %200 ], [ 0, %201 ], [ %12, %56 ], [ %12, %64 ], [ %12, %82 ]
  %225 = phi i64 [ 0, %200 ], [ 0, %201 ], [ %11, %56 ], [ %68, %64 ], [ %71, %82 ]
  %226 = phi i64 [ 0, %200 ], [ 0, %201 ], [ %10, %56 ], [ %10, %64 ], [ %10, %82 ]
  %227 = phi i64 [ %144, %200 ], [ %221, %201 ], [ 0, %56 ], [ 0, %64 ], [ 0, %82 ]
  %228 = getelementptr inbounds %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr"* %6, i64 0, i32 1
  %229 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %228, align 8
  %230 = icmp eq %"class.std::__1::__shared_weak_count"* %229, null
  br i1 %230, label %241, label %231

231:                                              ; preds = %222
  %232 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %229, i64 0, i32 0, i32 1
  %233 = atomicrmw add i64* %232, i64 -1 acq_rel
  %234 = icmp eq i64 %233, 0
  br i1 %234, label %235, label %241

235:                                              ; preds = %231
  %236 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %229, i64 0, i32 0
  %237 = bitcast %"class.std::__1::__shared_weak_count"* %229 to void (%"class.std::__1::__shared_count"*)***
  %238 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %237, align 8
  %239 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %238, i64 2
  %240 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %239, align 8
  call void %240(%"class.std::__1::__shared_count"* %236) #9
  call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %229) #9
  br label %241

241:                                              ; preds = %222, %231, %235
  %242 = icmp eq i64 %223, 0
  br i1 %242, label %249, label %243

243:                                              ; preds = %241
  %244 = inttoptr i64 %223 to %"class.SkSL::Statement"*
  %245 = inttoptr i64 %223 to void (%"class.SkSL::Statement"*)***
  %246 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %245, align 8
  %247 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %246, i64 1
  %248 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %247, align 8
  call void %248(%"class.SkSL::Statement"* nonnull %244) #9
  br label %249

249:                                              ; preds = %241, %243
  %250 = icmp eq i64 %224, 0
  br i1 %250, label %257, label %251

251:                                              ; preds = %249
  %252 = inttoptr i64 %224 to %"class.SkSL::Expression"*
  %253 = inttoptr i64 %224 to void (%"class.SkSL::Expression"*)***
  %254 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %253, align 8
  %255 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %254, i64 1
  %256 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %255, align 8
  call void %256(%"class.SkSL::Expression"* nonnull %252) #9
  br label %257

257:                                              ; preds = %249, %251
  %258 = icmp eq i64 %225, 0
  br i1 %258, label %265, label %259

259:                                              ; preds = %257
  %260 = inttoptr i64 %225 to %"class.SkSL::Expression"*
  %261 = inttoptr i64 %225 to void (%"class.SkSL::Expression"*)***
  %262 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %261, align 8
  %263 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %262, i64 1
  %264 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %263, align 8
  call void %264(%"class.SkSL::Expression"* nonnull %260) #9
  br label %265

265:                                              ; preds = %257, %259
  %266 = icmp eq i64 %226, 0
  br i1 %266, label %273, label %267

267:                                              ; preds = %265
  %268 = inttoptr i64 %226 to %"class.SkSL::Statement"*
  %269 = inttoptr i64 %226 to void (%"class.SkSL::Statement"*)***
  %270 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %269, align 8
  %271 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %270, i64 1
  %272 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %271, align 8
  call void %272(%"class.SkSL::Statement"* nonnull %268) #9
  br label %273

273:                                              ; preds = %265, %267
  %274 = inttoptr i64 %227 to %"class.SkSL::Statement"*
  ret %"class.SkSL::Statement"* %274
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"*, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.SkSL::String", align 8
  %5 = tail call i64 @strlen(i8* %2) #9
  %6 = icmp ugt i64 %5, -17
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = bitcast %"class.SkSL::String"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %8) #11
  unreachable

9:                                                ; preds = %3
  %10 = icmp ult i64 %5, 23
  br i1 %10, label %20, label %11

11:                                               ; preds = %9
  %12 = add nuw i64 %5, 16
  %13 = and i64 %12, -16
  %14 = tail call i8* @_Znwm(i64 %13) #10
  %15 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %14, i8** %15, align 8
  %16 = or i64 %13, -9223372036854775808
  %17 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %5, i64* %18, align 8
  %19 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %26

20:                                               ; preds = %9
  %21 = trunc i64 %5 to i8
  %22 = bitcast %"class.SkSL::String"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  store i8 %21, i8* %23, align 1
  %24 = bitcast %"class.SkSL::String"* %4 to i8*
  %25 = icmp eq i64 %5, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %20, %11
  %27 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %22, %20 ], [ %19, %11 ]
  %28 = phi i8* [ %24, %20 ], [ %14, %11 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %28, i8* align 1 %2, i64 %5, i1 false) #9
  br label %29

29:                                               ; preds = %20, %26
  %30 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %22, %20 ], [ %27, %26 ]
  %31 = phi i8* [ %24, %20 ], [ %28, %26 ]
  %32 = getelementptr inbounds i8, i8* %31, i64 %5
  store i8 0, i8* %32, align 1
  %33 = bitcast %"class.SkSL::ErrorReporter"* %0 to void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)***
  %34 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)**, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*** %33, align 8
  %35 = getelementptr inbounds void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %34, i64 2
  %36 = load void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)*, void (%"class.SkSL::ErrorReporter"*, i32, %"class.SkSL::String"*)** %35, align 8
  call void %36(%"class.SkSL::ErrorReporter"* %0, i32 %1, %"class.SkSL::String"* nonnull %4) #9
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  call void @_ZdlPv(i8* %42) #10
  br label %43

43:                                               ; preds = %29, %40
  ret void
}

declare %"class.SkSL::Expression"* @_ZNK4SkSL4Type16coerceExpressionENSt3__110unique_ptrINS_10ExpressionENS1_14default_deleteIS3_EEEERKNS_7ContextE(%"class.SkSL::Type"*, %"class.SkSL::Expression"*, %"class.SkSL::Context"* dereferenceable(744)) local_unnamed_addr #2

declare zeroext i1 @_ZN4SkSL8Analysis20ForLoopIsValidForES2EiPKNS_9StatementEPKNS_10ExpressionES6_S3_PNS0_18UnrollableLoopInfoEPNS_13ErrorReporterE(i32, %"class.SkSL::Statement"*, %"class.SkSL::Expression"*, %"class.SkSL::Expression"*, %"class.SkSL::Statement"*, %"struct.SkSL::Analysis::UnrollableLoopInfo"*, %"class.SkSL::ErrorReporter"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Statement"* @_ZN4SkSL12ForStatement4MakeERKNS_7ContextEiNSt3__110unique_ptrINS_9StatementENS4_14default_deleteIS6_EEEENS5_INS_10ExpressionENS7_ISA_EEEESC_S9_NS4_10shared_ptrINS_11SymbolTableEEE(%"class.SkSL::Context"* nocapture readnone dereferenceable(744), i32, %"class.SkSL::Statement"*, %"class.SkSL::Expression"*, %"class.SkSL::Expression"*, %"class.SkSL::Statement"*, %"class.std::__1::shared_ptr"* nocapture byval(%"class.std::__1::shared_ptr") align 8) local_unnamed_addr #0 align 2 {
  %8 = ptrtoint %"class.SkSL::Statement"* %2 to i64
  %9 = ptrtoint %"class.SkSL::Expression"* %3 to i64
  %10 = ptrtoint %"class.SkSL::Expression"* %4 to i64
  %11 = ptrtoint %"class.SkSL::Statement"* %5 to i64
  %12 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 64) #9
  %13 = bitcast %"class.std::__1::shared_ptr"* %6 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8
  %15 = getelementptr inbounds i8, i8* %12, i64 8
  %16 = bitcast i8* %15 to i32*
  store i32 %1, i32* %16, align 8
  %17 = getelementptr inbounds i8, i8* %12, i64 12
  %18 = bitcast i8* %17 to i32*
  store i32 22, i32* %18, align 4
  %19 = bitcast i8* %12 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL12ForStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %19, align 8
  %20 = getelementptr inbounds i8, i8* %12, i64 16
  %21 = bitcast i8* %20 to <2 x i64>*
  store <2 x i64> %14, <2 x i64>* %21, align 8
  %22 = getelementptr inbounds i8, i8* %12, i64 32
  %23 = bitcast i8* %22 to i64*
  store i64 %8, i64* %23, align 8
  %24 = getelementptr inbounds i8, i8* %12, i64 40
  %25 = bitcast i8* %24 to i64*
  store i64 %9, i64* %25, align 8
  %26 = getelementptr inbounds i8, i8* %12, i64 48
  %27 = bitcast i8* %26 to i64*
  store i64 %10, i64* %27, align 8
  %28 = getelementptr inbounds i8, i8* %12, i64 56
  %29 = bitcast i8* %28 to i64*
  store i64 %11, i64* %29, align 8
  %30 = bitcast i8* %12 to %"class.SkSL::Statement"*
  ret %"class.SkSL::Statement"* %30
}

declare %"class.SkSL::Block"* @_ZN4SkSL5Block4MakeEi9SkSTArrayILi2ENSt3__110unique_ptrINS_9StatementENS2_14default_deleteIS4_EEEELb0EENS2_10shared_ptrINS_11SymbolTableEEEb(i32, %class.SkSTArray*, %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Statement"* @_ZN4SkSL12ForStatement12ConvertWhileERKNS_7ContextEiNSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEENS5_INS_9StatementENS7_ISA_EEEENS4_10shared_ptrINS_11SymbolTableEEE(%"class.SkSL::Context"* dereferenceable(744), i32, %"class.SkSL::Expression"*, %"class.SkSL::Statement"*, %"class.SkSL::SymbolTable"*, %"class.std::__1::__shared_weak_count"*) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.std::__1::shared_ptr", align 8
  %8 = ptrtoint %"class.SkSL::SymbolTable"* %4 to i64
  %9 = ptrtoint %"class.std::__1::__shared_weak_count"* %5 to i64
  %10 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 4
  %11 = load %"struct.SkSL::ProgramConfig"*, %"struct.SkSL::ProgramConfig"** %10, align 8
  %12 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %11, i64 0, i32 1, i32 19
  %13 = load i8, i8* %12, align 1, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %20, label %15

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %11, i64 0, i32 0
  %17 = load i8, i8* %16, align 8
  %18 = add i8 %17, -4
  %19 = icmp ult i8 %18, 3
  br i1 %19, label %25, label %20

20:                                               ; preds = %15, %6
  %21 = bitcast %"class.std::__1::shared_ptr"* %7 to i64*
  store i64 %8, i64* %21, align 8
  %22 = getelementptr inbounds %"class.std::__1::shared_ptr", %"class.std::__1::shared_ptr"* %7, i64 0, i32 1
  %23 = bitcast %"class.std::__1::__shared_weak_count"** %22 to i64*
  store i64 %9, i64* %23, align 8
  %24 = tail call %"class.SkSL::Statement"* @_ZN4SkSL12ForStatement7ConvertERKNS_7ContextEiNSt3__110unique_ptrINS_9StatementENS4_14default_deleteIS6_EEEENS5_INS_10ExpressionENS7_ISA_EEEESC_S9_NS4_10shared_ptrINS_11SymbolTableEEE(%"class.SkSL::Context"* dereferenceable(744) %0, i32 %1, %"class.SkSL::Statement"* null, %"class.SkSL::Expression"* %2, %"class.SkSL::Expression"* null, %"class.SkSL::Statement"* %3, %"class.std::__1::shared_ptr"* nonnull byval(%"class.std::__1::shared_ptr") align 8 %7)
  br label %53

25:                                               ; preds = %15
  %26 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 1
  %27 = load %"class.SkSL::ErrorReporter"*, %"class.SkSL::ErrorReporter"** %26, align 8
  tail call void @_ZN4SkSL13ErrorReporter5errorEiPKc(%"class.SkSL::ErrorReporter"* %27, i32 %1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i64 0, i64 0))
  %28 = icmp eq %"class.std::__1::__shared_weak_count"* %5, null
  br i1 %28, label %39, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %5, i64 0, i32 0, i32 1
  %31 = atomicrmw add i64* %30, i64 -1 acq_rel
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %39

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %5, i64 0, i32 0
  %35 = bitcast %"class.std::__1::__shared_weak_count"* %5 to void (%"class.std::__1::__shared_count"*)***
  %36 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %36, i64 2
  %38 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %37, align 8
  tail call void %38(%"class.std::__1::__shared_count"* %34) #9
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %5) #9
  br label %39

39:                                               ; preds = %25, %29, %33
  %40 = icmp eq %"class.SkSL::Statement"* %3, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %39
  %42 = bitcast %"class.SkSL::Statement"* %3 to void (%"class.SkSL::Statement"*)***
  %43 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %42, align 8
  %44 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %43, i64 1
  %45 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %44, align 8
  tail call void %45(%"class.SkSL::Statement"* nonnull %3) #9
  br label %46

46:                                               ; preds = %39, %41
  %47 = icmp eq %"class.SkSL::Expression"* %2, null
  br i1 %47, label %53, label %48

48:                                               ; preds = %46
  %49 = bitcast %"class.SkSL::Expression"* %2 to void (%"class.SkSL::Expression"*)***
  %50 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %50, i64 1
  %52 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %51, align 8
  tail call void %52(%"class.SkSL::Expression"* nonnull %2) #9
  br label %53

53:                                               ; preds = %20, %46, %48
  %54 = phi %"class.SkSL::Statement"* [ %24, %20 ], [ null, %46 ], [ null, %48 ]
  ret %"class.SkSL::Statement"* %54
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL12ForStatementD2Ev(%"class.SkSL::ForStatement"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL12ForStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %3, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %3, align 8
  %5 = icmp eq %"class.SkSL::Statement"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Statement"* %4 to void (%"class.SkSL::Statement"*)***
  %8 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %9, align 8
  tail call void %10(%"class.SkSL::Statement"* nonnull %4) #9
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %13 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %12, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %12, align 8
  %14 = icmp eq %"class.SkSL::Expression"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.SkSL::Expression"* %13 to void (%"class.SkSL::Expression"*)***
  %17 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %18, align 8
  tail call void %19(%"class.SkSL::Expression"* nonnull %13) #9
  br label %20

20:                                               ; preds = %11, %15
  %21 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %22 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %21, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %21, align 8
  %23 = icmp eq %"class.SkSL::Expression"* %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = bitcast %"class.SkSL::Expression"* %22 to void (%"class.SkSL::Expression"*)***
  %26 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %26, i64 1
  %28 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %27, align 8
  tail call void %28(%"class.SkSL::Expression"* nonnull %22) #9
  br label %29

29:                                               ; preds = %20, %24
  %30 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %31 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %30, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %30, align 8
  %32 = icmp eq %"class.SkSL::Statement"* %31, null
  br i1 %32, label %38, label %33

33:                                               ; preds = %29
  %34 = bitcast %"class.SkSL::Statement"* %31 to void (%"class.SkSL::Statement"*)***
  %35 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %34, align 8
  %36 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %35, i64 1
  %37 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %36, align 8
  tail call void %37(%"class.SkSL::Statement"* nonnull %31) #9
  br label %38

38:                                               ; preds = %29, %33
  %39 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 1, i32 1
  %40 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %39, align 8
  %41 = icmp eq %"class.std::__1::__shared_weak_count"* %40, null
  br i1 %41, label %52, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %40, i64 0, i32 0, i32 1
  %44 = atomicrmw add i64* %43, i64 -1 acq_rel
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %52

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %40, i64 0, i32 0
  %48 = bitcast %"class.std::__1::__shared_weak_count"* %40 to void (%"class.std::__1::__shared_count"*)***
  %49 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %49, i64 2
  %51 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %50, align 8
  tail call void %51(%"class.std::__1::__shared_count"* %47) #9
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %40) #9
  br label %52

52:                                               ; preds = %38, %42, %46
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL12ForStatementD0Ev(%"class.SkSL::ForStatement"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL12ForStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %3, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %3, align 8
  %5 = icmp eq %"class.SkSL::Statement"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Statement"* %4 to void (%"class.SkSL::Statement"*)***
  %8 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %9, align 8
  tail call void %10(%"class.SkSL::Statement"* nonnull %4) #9
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %13 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %12, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %12, align 8
  %14 = icmp eq %"class.SkSL::Expression"* %13, null
  br i1 %14, label %20, label %15

15:                                               ; preds = %11
  %16 = bitcast %"class.SkSL::Expression"* %13 to void (%"class.SkSL::Expression"*)***
  %17 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %17, i64 1
  %19 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %18, align 8
  tail call void %19(%"class.SkSL::Expression"* nonnull %13) #9
  br label %20

20:                                               ; preds = %15, %11
  %21 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %22 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %21, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %21, align 8
  %23 = icmp eq %"class.SkSL::Expression"* %22, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = bitcast %"class.SkSL::Expression"* %22 to void (%"class.SkSL::Expression"*)***
  %26 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %26, i64 1
  %28 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %27, align 8
  tail call void %28(%"class.SkSL::Expression"* nonnull %22) #9
  br label %29

29:                                               ; preds = %24, %20
  %30 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %31 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %30, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %30, align 8
  %32 = icmp eq %"class.SkSL::Statement"* %31, null
  br i1 %32, label %38, label %33

33:                                               ; preds = %29
  %34 = bitcast %"class.SkSL::Statement"* %31 to void (%"class.SkSL::Statement"*)***
  %35 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %34, align 8
  %36 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %35, i64 1
  %37 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %36, align 8
  tail call void %37(%"class.SkSL::Statement"* nonnull %31) #9
  br label %38

38:                                               ; preds = %33, %29
  %39 = getelementptr inbounds %"class.SkSL::ForStatement", %"class.SkSL::ForStatement"* %0, i64 0, i32 1, i32 1
  %40 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %39, align 8
  %41 = icmp eq %"class.std::__1::__shared_weak_count"* %40, null
  br i1 %41, label %52, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %40, i64 0, i32 0, i32 1
  %44 = atomicrmw add i64* %43, i64 -1 acq_rel
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %52

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %40, i64 0, i32 0
  %48 = bitcast %"class.std::__1::__shared_weak_count"* %40 to void (%"class.std::__1::__shared_count"*)***
  %49 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %49, i64 2
  %51 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %50, align 8
  tail call void %51(%"class.std::__1::__shared_count"* %47) #9
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %40) #9
  br label %52

52:                                               ; preds = %38, %42, %46
  %53 = bitcast %"class.SkSL::ForStatement"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %53) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL9Statement7isEmptyEv(%"class.SkSL::Statement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEED2Ev(%"struct.std::__1::__shared_ptr_emplace"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace", %"struct.std::__1::__shared_ptr_emplace"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace", %"struct.std::__1::__shared_ptr_emplace"* %0, i64 0, i32 0
  tail call void @_ZNSt3__119__shared_weak_countD2Ev(%"class.std::__1::__shared_weak_count"* %3) #9
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEED0Ev(%"struct.std::__1::__shared_ptr_emplace"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace", %"struct.std::__1::__shared_ptr_emplace"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace", %"struct.std::__1::__shared_ptr_emplace"* %0, i64 0, i32 0
  tail call void @_ZNSt3__119__shared_weak_countD2Ev(%"class.std::__1::__shared_weak_count"* %3) #9
  %4 = bitcast %"struct.std::__1::__shared_ptr_emplace"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEE16__on_zero_sharedEv(%"struct.std::__1::__shared_ptr_emplace"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::__shared_ptr_emplace", %"struct.std::__1::__shared_ptr_emplace"* %0, i64 0, i32 1
  %3 = bitcast %"struct.std::__1::__shared_ptr_emplace<SkSL::SymbolTable, std::__1::allocator<SkSL::SymbolTable> >::_Storage"* %2 to %"class.SkSL::SymbolTable"*
  tail call void @_ZN4SkSL11SymbolTableD2Ev(%"class.SkSL::SymbolTable"* %3) #9
  ret void
}

; Function Attrs: nounwind
declare i8* @_ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info(%"class.std::__1::__shared_weak_count"*, %"class.std::type_info"* dereferenceable(16)) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__shared_ptr_emplaceIN4SkSL11SymbolTableENS_9allocatorIS2_EEE21__on_zero_shared_weakEv(%"struct.std::__1::__shared_ptr_emplace"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"struct.std::__1::__shared_ptr_emplace"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind
declare void @_ZNSt3__119__shared_weak_countD2Ev(%"class.std::__1::__shared_weak_count"*) unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL11SymbolTableD2Ev(%"class.SkSL::SymbolTable"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::SymbolTable", %"class.SkSL::SymbolTable"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %3 = load %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"** %2, align 8
  store %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* null, %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"** %2, align 8
  %4 = icmp eq %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast %"struct.SkTHashTable<SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair, SkSL::SymbolTable::SymbolKey, SkTHashMap<SkSL::SymbolTable::SymbolKey, const SkSL::Symbol *, SkSL::SymbolTable::SymbolKey::Hash>::Pair>::Slot"* %3 to i8*
  tail call void @_ZdaPv(i8* %6) #10
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.SkSL::SymbolTable", %"class.SkSL::SymbolTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load %"struct.std::__1::__forward_list_node"*, %"struct.std::__1::__forward_list_node"** %8, align 8
  %10 = icmp eq %"struct.std::__1::__forward_list_node"* %9, null
  br i1 %10, label %26, label %11

11:                                               ; preds = %7, %24
  %12 = phi %"struct.std::__1::__forward_list_node"* [ %15, %24 ], [ %9, %7 ]
  %13 = bitcast %"struct.std::__1::__forward_list_node"* %12 to i8*
  %14 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %12, i64 0, i32 0, i32 0
  %15 = load %"struct.std::__1::__forward_list_node"*, %"struct.std::__1::__forward_list_node"** %14, align 8
  %16 = getelementptr inbounds %"struct.std::__1::__forward_list_node", %"struct.std::__1::__forward_list_node"* %12, i64 0, i32 1
  %17 = bitcast %"class.SkSL::String"* %16 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %11
  %22 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  tail call void @_ZdlPv(i8* %23) #10
  br label %24

24:                                               ; preds = %21, %11
  tail call void @_ZdlPv(i8* %13) #10
  %25 = icmp eq %"struct.std::__1::__forward_list_node"* %15, null
  br i1 %25, label %26, label %11

26:                                               ; preds = %24, %7
  store %"struct.std::__1::__forward_list_node"* null, %"struct.std::__1::__forward_list_node"** %8, align 8
  %27 = getelementptr inbounds %"class.SkSL::SymbolTable", %"class.SkSL::SymbolTable"* %0, i64 0, i32 3
  %28 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %27, i64 0, i32 0, i32 0
  %29 = load %"class.std::__1::unique_ptr.32"*, %"class.std::__1::unique_ptr.32"** %28, align 8
  %30 = icmp eq %"class.std::__1::unique_ptr.32"* %29, null
  br i1 %30, label %54, label %31

31:                                               ; preds = %26
  %32 = bitcast %"class.std::__1::unique_ptr.32"* %29 to i8*
  %33 = getelementptr inbounds %"class.SkSL::SymbolTable", %"class.SkSL::SymbolTable"* %0, i64 0, i32 3, i32 0, i32 1
  %34 = load %"class.std::__1::unique_ptr.32"*, %"class.std::__1::unique_ptr.32"** %33, align 8
  %35 = icmp eq %"class.std::__1::unique_ptr.32"* %34, %29
  br i1 %35, label %52, label %36

36:                                               ; preds = %31, %47
  %37 = phi %"class.std::__1::unique_ptr.32"* [ %38, %47 ], [ %34, %31 ]
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.32", %"class.std::__1::unique_ptr.32"* %37, i64 -1
  %39 = getelementptr inbounds %"class.std::__1::unique_ptr.32", %"class.std::__1::unique_ptr.32"* %38, i64 0, i32 0, i32 0, i32 0
  %40 = load %"class.SkSL::IRNode"*, %"class.SkSL::IRNode"** %39, align 8
  store %"class.SkSL::IRNode"* null, %"class.SkSL::IRNode"** %39, align 8
  %41 = icmp eq %"class.SkSL::IRNode"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %36
  %43 = bitcast %"class.SkSL::IRNode"* %40 to void (%"class.SkSL::IRNode"*)***
  %44 = load void (%"class.SkSL::IRNode"*)**, void (%"class.SkSL::IRNode"*)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.SkSL::IRNode"*)*, void (%"class.SkSL::IRNode"*)** %44, i64 1
  %46 = load void (%"class.SkSL::IRNode"*)*, void (%"class.SkSL::IRNode"*)** %45, align 8
  tail call void %46(%"class.SkSL::IRNode"* nonnull %40) #9
  br label %47

47:                                               ; preds = %42, %36
  %48 = icmp eq %"class.std::__1::unique_ptr.32"* %38, %29
  br i1 %48, label %49, label %36

49:                                               ; preds = %47
  %50 = bitcast %"class.std::__1::vector.30"* %27 to i8**
  %51 = load i8*, i8** %50, align 8
  br label %52

52:                                               ; preds = %49, %31
  %53 = phi i8* [ %51, %49 ], [ %32, %31 ]
  store %"class.std::__1::unique_ptr.32"* %29, %"class.std::__1::unique_ptr.32"** %33, align 8
  tail call void @_ZdlPv(i8* %53) #10
  br label %54

54:                                               ; preds = %26, %52
  %55 = getelementptr inbounds %"class.SkSL::SymbolTable", %"class.SkSL::SymbolTable"* %0, i64 0, i32 1
  %56 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %55, i64 0, i32 0, i32 0
  %57 = load %"class.std::__1::unique_ptr.24"*, %"class.std::__1::unique_ptr.24"** %56, align 8
  %58 = icmp eq %"class.std::__1::unique_ptr.24"* %57, null
  br i1 %58, label %82, label %59

59:                                               ; preds = %54
  %60 = bitcast %"class.std::__1::unique_ptr.24"* %57 to i8*
  %61 = getelementptr inbounds %"class.SkSL::SymbolTable", %"class.SkSL::SymbolTable"* %0, i64 0, i32 1, i32 0, i32 1
  %62 = load %"class.std::__1::unique_ptr.24"*, %"class.std::__1::unique_ptr.24"** %61, align 8
  %63 = icmp eq %"class.std::__1::unique_ptr.24"* %62, %57
  br i1 %63, label %80, label %64

64:                                               ; preds = %59, %75
  %65 = phi %"class.std::__1::unique_ptr.24"* [ %66, %75 ], [ %62, %59 ]
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr.24", %"class.std::__1::unique_ptr.24"* %65, i64 -1
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr.24", %"class.std::__1::unique_ptr.24"* %66, i64 0, i32 0, i32 0, i32 0
  %68 = load %"class.SkSL::Symbol"*, %"class.SkSL::Symbol"** %67, align 8
  store %"class.SkSL::Symbol"* null, %"class.SkSL::Symbol"** %67, align 8
  %69 = icmp eq %"class.SkSL::Symbol"* %68, null
  br i1 %69, label %75, label %70

70:                                               ; preds = %64
  %71 = bitcast %"class.SkSL::Symbol"* %68 to void (%"class.SkSL::Symbol"*)***
  %72 = load void (%"class.SkSL::Symbol"*)**, void (%"class.SkSL::Symbol"*)*** %71, align 8
  %73 = getelementptr inbounds void (%"class.SkSL::Symbol"*)*, void (%"class.SkSL::Symbol"*)** %72, i64 1
  %74 = load void (%"class.SkSL::Symbol"*)*, void (%"class.SkSL::Symbol"*)** %73, align 8
  tail call void %74(%"class.SkSL::Symbol"* nonnull %68) #9
  br label %75

75:                                               ; preds = %70, %64
  %76 = icmp eq %"class.std::__1::unique_ptr.24"* %66, %57
  br i1 %76, label %77, label %64

77:                                               ; preds = %75
  %78 = bitcast %"class.std::__1::vector.22"* %55 to i8**
  %79 = load i8*, i8** %78, align 8
  br label %80

80:                                               ; preds = %77, %59
  %81 = phi i8* [ %79, %77 ], [ %60, %59 ]
  store %"class.std::__1::unique_ptr.24"* %57, %"class.std::__1::unique_ptr.24"** %61, align 8
  tail call void @_ZdlPv(i8* %81) #10
  br label %82

82:                                               ; preds = %54, %80
  %83 = getelementptr inbounds %"class.SkSL::SymbolTable", %"class.SkSL::SymbolTable"* %0, i64 0, i32 0, i32 1
  %84 = load %"class.std::__1::__shared_weak_count"*, %"class.std::__1::__shared_weak_count"** %83, align 8
  %85 = icmp eq %"class.std::__1::__shared_weak_count"* %84, null
  br i1 %85, label %96, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %84, i64 0, i32 0, i32 1
  %88 = atomicrmw add i64* %87, i64 -1 acq_rel
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %96

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"class.std::__1::__shared_weak_count", %"class.std::__1::__shared_weak_count"* %84, i64 0, i32 0
  %92 = bitcast %"class.std::__1::__shared_weak_count"* %84 to void (%"class.std::__1::__shared_count"*)***
  %93 = load void (%"class.std::__1::__shared_count"*)**, void (%"class.std::__1::__shared_count"*)*** %92, align 8
  %94 = getelementptr inbounds void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %93, i64 2
  %95 = load void (%"class.std::__1::__shared_count"*)*, void (%"class.std::__1::__shared_count"*)** %94, align 8
  tail call void %95(%"class.std::__1::__shared_count"* %91) #9
  tail call void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"* nonnull %84) #9
  br label %96

96:                                               ; preds = %82, %86, %90
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #7

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #8

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

declare void @_ZN4SkSL4Pool10FreeMemoryEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__119__shared_weak_count14__release_weakEv(%"class.std::__1::__shared_weak_count"*) local_unnamed_addr #5

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %class.SkTArray* @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EEaSEOS7_(%class.SkTArray*, %class.SkTArray* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %class.SkTArray* %0, %1
  br i1 %3, label %76, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = and i64 %6, 4294967294
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %59

11:                                               ; preds = %70, %4
  %12 = phi i64 [ %6, %4 ], [ %72, %70 ]
  %13 = and i64 %12, -4294967295
  store i64 %13, i64* %5, align 8
  %14 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %1, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = lshr i64 %15, 1
  %17 = trunc i64 %16 to i32
  %18 = and i32 %17, 2147483647
  tail call void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray* %0, i32 %18, i32 0)
  %19 = load i64, i64* %14, align 8
  %20 = and i64 %19, 4294967294
  %21 = load i64, i64* %5, align 8
  %22 = and i64 %21, -4294967295
  %23 = or i64 %22, %20
  store i64 %23, i64* %5, align 8
  %24 = bitcast %class.SkTArray* %0 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = load i64, i64* %14, align 8
  %27 = and i64 %26, 4294967294
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %56, label %29

29:                                               ; preds = %11
  %30 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %1, i64 0, i32 0
  br label %31

31:                                               ; preds = %50, %29
  %32 = phi i64 [ 0, %29 ], [ %51, %50 ]
  %33 = shl nuw nsw i64 %32, 3
  %34 = getelementptr inbounds i8, i8* %25, i64 %33
  %35 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %30, align 8
  %36 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %35, i64 %32
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 0, i32 0, i32 0, i32 0
  %38 = bitcast %"class.std::__1::unique_ptr"* %36 to i64*
  %39 = load i64, i64* %38, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %37, align 8
  %40 = bitcast i8* %34 to i64*
  store i64 %39, i64* %40, align 8
  %41 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %30, align 8
  %42 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %41, i64 %32, i32 0, i32 0, i32 0
  %43 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %42, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %42, align 8
  %44 = icmp eq %"class.SkSL::Statement"* %43, null
  br i1 %44, label %50, label %45

45:                                               ; preds = %31
  %46 = bitcast %"class.SkSL::Statement"* %43 to void (%"class.SkSL::Statement"*)***
  %47 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %47, i64 1
  %49 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %48, align 8
  tail call void %49(%"class.SkSL::Statement"* nonnull %43) #9
  br label %50

50:                                               ; preds = %45, %31
  %51 = add nuw nsw i64 %32, 1
  %52 = load i64, i64* %14, align 8
  %53 = lshr i64 %52, 1
  %54 = and i64 %53, 2147483647
  %55 = icmp ult i64 %51, %54
  br i1 %55, label %31, label %56

56:                                               ; preds = %50, %11
  %57 = phi i64 [ %26, %11 ], [ %52, %50 ]
  %58 = and i64 %57, -4294967295
  store i64 %58, i64* %14, align 8
  br label %76

59:                                               ; preds = %9, %70
  %60 = phi i64 [ 0, %9 ], [ %71, %70 ]
  %61 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %10, align 8
  %62 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %61, i64 %60, i32 0, i32 0, i32 0
  %63 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %62, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %62, align 8
  %64 = icmp eq %"class.SkSL::Statement"* %63, null
  br i1 %64, label %70, label %65

65:                                               ; preds = %59
  %66 = bitcast %"class.SkSL::Statement"* %63 to void (%"class.SkSL::Statement"*)***
  %67 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %66, align 8
  %68 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %67, i64 1
  %69 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %68, align 8
  tail call void %69(%"class.SkSL::Statement"* nonnull %63) #9
  br label %70

70:                                               ; preds = %59, %65
  %71 = add nuw nsw i64 %60, 1
  %72 = load i64, i64* %5, align 8
  %73 = lshr i64 %72, 1
  %74 = and i64 %73, 2147483647
  %75 = icmp ult i64 %71, %74
  br i1 %75, label %59, label %11

76:                                               ; preds = %2, %56
  ret %class.SkTArray* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayINSt3__110unique_ptrIN4SkSL9StatementENS0_14default_deleteIS3_EEEELb0EE12checkReallocEiNS7_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %87

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %87, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #9
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %75, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %69, %48
  %51 = phi i64 [ 0, %48 ], [ %70, %69 ]
  %52 = shl nuw nsw i64 %51, 3
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %49, align 8
  %55 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %54, i64 %51
  %56 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %55, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"class.std::__1::unique_ptr"* %55 to i64*
  %58 = load i64, i64* %57, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %56, align 8
  %59 = bitcast i8* %53 to i64*
  store i64 %58, i64* %59, align 8
  %60 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %49, align 8
  %61 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %60, i64 %51, i32 0, i32 0, i32 0
  %62 = load %"class.SkSL::Statement"*, %"class.SkSL::Statement"** %61, align 8
  store %"class.SkSL::Statement"* null, %"class.SkSL::Statement"** %61, align 8
  %63 = icmp eq %"class.SkSL::Statement"* %62, null
  br i1 %63, label %69, label %64

64:                                               ; preds = %50
  %65 = bitcast %"class.SkSL::Statement"* %62 to void (%"class.SkSL::Statement"*)***
  %66 = load void (%"class.SkSL::Statement"*)**, void (%"class.SkSL::Statement"*)*** %65, align 8
  %67 = getelementptr inbounds void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %66, i64 1
  %68 = load void (%"class.SkSL::Statement"*)*, void (%"class.SkSL::Statement"*)** %67, align 8
  tail call void %68(%"class.SkSL::Statement"* nonnull %62) #9
  br label %69

69:                                               ; preds = %64, %50
  %70 = add nuw nsw i64 %51, 1
  %71 = load i64, i64* %4, align 8
  %72 = lshr i64 %71, 1
  %73 = and i64 %72, 2147483647
  %74 = icmp ult i64 %70, %73
  br i1 %74, label %50, label %75

75:                                               ; preds = %69, %35
  %76 = phi i64 [ %45, %35 ], [ %71, %69 ]
  %77 = and i64 %76, 1
  %78 = icmp eq i64 %77, 0
  %79 = bitcast %class.SkTArray* %0 to i8**
  br i1 %78, label %83, label %80

80:                                               ; preds = %75
  %81 = load i8*, i8** %79, align 8
  tail call void @_Z7sk_freePv(i8* %81) #9
  %82 = load i64, i64* %4, align 8
  br label %83

83:                                               ; preds = %75, %80
  %84 = phi i64 [ %82, %80 ], [ %76, %75 ]
  store i8* %44, i8** %79, align 8
  %85 = and i64 %84, -4294967298
  %86 = or i64 %85, 1
  store i64 %86, i64* %4, align 8
  br label %87

87:                                               ; preds = %83, %32, %21
  ret void
}

declare i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
