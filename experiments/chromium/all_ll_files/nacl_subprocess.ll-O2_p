; ModuleID = '../../components/nacl/renderer/plugin/nacl_subprocess.cc'
source_filename = "../../components/nacl/renderer/plugin/nacl_subprocess.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.plugin::NaClSubprocess" = type { i32 (...)**, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.plugin::ServiceRuntime"* }
%"class.plugin::ServiceRuntime" = type { %"class.plugin::Plugin"*, i32, i8, i8, %"class.std::__1::unique_ptr.0" }
%"class.plugin::Plugin" = type opaque
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.IPC::SyncChannel"* }
%"class.IPC::SyncChannel" = type { %"class.IPC::ChannelProxy.base", %class.scoped_refptr.50, %"class.base::WaitableEventWatcher", %"class.base::OnceCallback", %"class.std::__1::vector.83" }
%"class.IPC::ChannelProxy.base" = type <{ %"class.IPC::Sender", %class.scoped_refptr, i8 }>
%"class.IPC::Sender" = type { i32 (...)** }
%class.scoped_refptr = type { %"class.IPC::ChannelProxy::Context"* }
%"class.IPC::ChannelProxy::Context" = type { %"class.IPC::Listener", %"class.base::RefCountedThreadSafe", %"class.base::Lock", %"class.std::__1::map", %class.scoped_refptr.10, %"class.IPC::Listener"*, %"class.std::__1::vector", %class.scoped_refptr.10, %"class.std::__1::unique_ptr.18", i8, %class.scoped_refptr.22, %"class.base::Lock", %"class.std::__1::unique_ptr.29", %"class.std::__1::vector", %"class.base::Lock", i32, %"class.base::Lock", %"class.std::__1::unique_ptr.35", %"class.base::Lock", %"class.std::__1::vector.43" }
%"class.IPC::Listener" = type { i32 (...)** }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.4", %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i64 }
%class.scoped_refptr.10 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.11" }>
%"class.base::RefCountedThreadSafe.11" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.IPC::Channel"* }
%"class.IPC::Channel" = type <{ %"class.IPC::Sender", i8, [7 x i8] }>
%class.scoped_refptr.22 = type { %"class.mojo::internal::MessageQuotaChecker"* }
%"class.mojo::internal::MessageQuotaChecker" = type <{ %"class.base::RefCountedThreadSafe.23", [4 x i8], %"struct.mojo::internal::MessageQuotaChecker::Configuration"*, %"class.base::TimeTicks", %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24", %"class.base::Lock", %"class.mojo::internal::MessageQuotaChecker::DecayingRateAverage", i64, i64, %"class.mojo::MessagePipeHandle", [4 x i8] }>
%"class.base::RefCountedThreadSafe.23" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.mojo::internal::MessageQuotaChecker::Configuration" = type { i8, i64, i64, i64, {}* }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl.27" }
%"struct.std::__1::__cxx_atomic_impl.27" = type { %"struct.std::__1::__cxx_atomic_base_impl.28" }
%"struct.std::__1::__cxx_atomic_base_impl.28" = type { i64 }
%"class.mojo::internal::MessageQuotaChecker::DecayingRateAverage" = type { i64, i64, double }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.IPC::MessageFilterRouter"* }
%"class.IPC::MessageFilterRouter" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.scoped_refptr.12*, %class.scoped_refptr.12*, %"class.std::__1::__compressed_pair.13" }
%class.scoped_refptr.12 = type opaque
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %class.scoped_refptr.12* }
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.mojo::ThreadSafeForwarder"* }
%"class.mojo::ThreadSafeForwarder" = type { %"class.mojo::internal::ThreadSafeForwarderBase", %"class.IPC::mojom::ChannelProxy" }
%"class.mojo::internal::ThreadSafeForwarderBase" = type { %"class.mojo::MessageReceiverWithResponder", %class.scoped_refptr.38 }
%"class.mojo::MessageReceiverWithResponder" = type { %"class.mojo::MessageReceiver" }
%"class.mojo::MessageReceiver" = type { i32 (...)** }
%class.scoped_refptr.38 = type { %"class.mojo::ThreadSafeProxy"* }
%"class.mojo::ThreadSafeProxy" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.39", [4 x i8] }>
%"class.base::RefCountedThreadSafe.39" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.IPC::mojom::ChannelProxy" = type { %"class.IPC::mojom::Channel", %"class.mojo::MessageReceiverWithResponder"* }
%"class.IPC::mojom::Channel" = type { i32 (...)** }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.45" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"struct.std::__1::pair"* }
%class.scoped_refptr.50 = type { %"class.mojo::SyncHandleRegistry"* }
%"class.mojo::SyncHandleRegistry" = type <{ %"class.base::RefCounted", [4 x i8], %"class.mojo::WaitSet", %"class.std::__1::map.52", %"class.std::__1::map.63", i8, [7 x i8] }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.mojo::WaitSet" = type { %class.scoped_refptr.51 }
%class.scoped_refptr.51 = type { %"class.mojo::WaitSet::State"* }
%"class.mojo::WaitSet::State" = type opaque
%"class.std::__1::map.52" = type { %"class.std::__1::__tree.53" }
%"class.std::__1::__tree.53" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.54", %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.std::__1::map.63" = type { %"class.std::__1::__tree.64" }
%"class.std::__1::__tree.64" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.65", %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.base::WaitableEventWatcher" = type <{ %class.scoped_refptr.74, %"class.base::AsyncWaiter"*, %class.scoped_refptr.75, %"class.base::SequenceCheckerDoNothing", [7 x i8] }>
%class.scoped_refptr.74 = type { %"class.base::Flag"* }
%"class.base::Flag" = type opaque
%"class.base::AsyncWaiter" = type opaque
%class.scoped_refptr.75 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.76", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.76" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.77" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.81 }
%class.scoped_refptr.81 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.82", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.82" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::vector.83" = type { %"class.std::__1::__vector_base.84" }
%"class.std::__1::__vector_base.84" = type { %class.scoped_refptr.85*, %class.scoped_refptr.85*, %"class.std::__1::__compressed_pair.86" }
%class.scoped_refptr.85 = type opaque
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %class.scoped_refptr.85* }

@_ZTVN6plugin14NaClSubprocessE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.plugin::NaClSubprocess"*)* @_ZN6plugin14NaClSubprocessD2Ev to i8*), i8* bitcast (void (%"class.plugin::NaClSubprocess"*)* @_ZN6plugin14NaClSubprocessD0Ev to i8*)] }, align 8

@_ZN6plugin14NaClSubprocessC1Ev = hidden unnamed_addr alias void (%"class.plugin::NaClSubprocess"*), void (%"class.plugin::NaClSubprocess"*)* @_ZN6plugin14NaClSubprocessC2Ev
@_ZN6plugin14NaClSubprocessD1Ev = hidden unnamed_addr alias void (%"class.plugin::NaClSubprocess"*), void (%"class.plugin::NaClSubprocess"*)* @_ZN6plugin14NaClSubprocessD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6plugin14NaClSubprocessC2Ev(%"class.plugin::NaClSubprocess"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.plugin::NaClSubprocess", %"class.plugin::NaClSubprocess"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN6plugin14NaClSubprocessE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.plugin::NaClSubprocess", %"class.plugin::NaClSubprocess"* %0, i64 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 0, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6plugin14NaClSubprocess8ShutdownEv(%"class.plugin::NaClSubprocess"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.plugin::NaClSubprocess", %"class.plugin::NaClSubprocess"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.plugin::ServiceRuntime"*, %"class.plugin::ServiceRuntime"** %2, align 8
  %4 = icmp eq %"class.plugin::ServiceRuntime"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  tail call void @_ZN6plugin14ServiceRuntime8ShutdownEv(%"class.plugin::ServiceRuntime"* nonnull %3) #5
  %6 = load %"class.plugin::ServiceRuntime"*, %"class.plugin::ServiceRuntime"** %2, align 8
  store %"class.plugin::ServiceRuntime"* null, %"class.plugin::ServiceRuntime"** %2, align 8
  %7 = icmp eq %"class.plugin::ServiceRuntime"* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %5
  tail call void @_ZN6plugin14ServiceRuntimeD1Ev(%"class.plugin::ServiceRuntime"* nonnull %6) #5
  %9 = bitcast %"class.plugin::ServiceRuntime"* %6 to i8*
  tail call void @_ZdlPv(i8* %9) #6
  br label %10

10:                                               ; preds = %8, %5, %1
  ret void
}

declare void @_ZN6plugin14ServiceRuntime8ShutdownEv(%"class.plugin::ServiceRuntime"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6plugin14NaClSubprocessD2Ev(%"class.plugin::NaClSubprocess"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.plugin::NaClSubprocess", %"class.plugin::NaClSubprocess"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN6plugin14NaClSubprocessE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.plugin::NaClSubprocess", %"class.plugin::NaClSubprocess"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.plugin::ServiceRuntime"*, %"class.plugin::ServiceRuntime"** %3, align 8
  %5 = icmp eq %"class.plugin::ServiceRuntime"* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  tail call void @_ZN6plugin14ServiceRuntime8ShutdownEv(%"class.plugin::ServiceRuntime"* nonnull %4) #5
  %7 = load %"class.plugin::ServiceRuntime"*, %"class.plugin::ServiceRuntime"** %3, align 8
  store %"class.plugin::ServiceRuntime"* null, %"class.plugin::ServiceRuntime"** %3, align 8
  %8 = icmp eq %"class.plugin::ServiceRuntime"* %7, null
  br i1 %8, label %9, label %10

9:                                                ; preds = %1, %6
  store %"class.plugin::ServiceRuntime"* null, %"class.plugin::ServiceRuntime"** %3, align 8
  br label %16

10:                                               ; preds = %6
  tail call void @_ZN6plugin14ServiceRuntimeD1Ev(%"class.plugin::ServiceRuntime"* nonnull %7) #5
  %11 = bitcast %"class.plugin::ServiceRuntime"* %7 to i8*
  tail call void @_ZdlPv(i8* %11) #6
  %12 = load %"class.plugin::ServiceRuntime"*, %"class.plugin::ServiceRuntime"** %3, align 8
  store %"class.plugin::ServiceRuntime"* null, %"class.plugin::ServiceRuntime"** %3, align 8
  %13 = icmp eq %"class.plugin::ServiceRuntime"* %12, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = bitcast %"class.plugin::ServiceRuntime"* %12 to i8*
  tail call void @_ZN6plugin14ServiceRuntimeD1Ev(%"class.plugin::ServiceRuntime"* nonnull %12) #5
  tail call void @_ZdlPv(i8* %15) #6
  br label %16

16:                                               ; preds = %9, %10, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6plugin14NaClSubprocessD0Ev(%"class.plugin::NaClSubprocess"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.plugin::NaClSubprocess", %"class.plugin::NaClSubprocess"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN6plugin14NaClSubprocessE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.plugin::NaClSubprocess", %"class.plugin::NaClSubprocess"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.plugin::ServiceRuntime"*, %"class.plugin::ServiceRuntime"** %3, align 8
  %5 = icmp eq %"class.plugin::ServiceRuntime"* %4, null
  br i1 %5, label %15, label %6

6:                                                ; preds = %1
  tail call void @_ZN6plugin14ServiceRuntime8ShutdownEv(%"class.plugin::ServiceRuntime"* nonnull %4) #5
  %7 = load %"class.plugin::ServiceRuntime"*, %"class.plugin::ServiceRuntime"** %3, align 8
  store %"class.plugin::ServiceRuntime"* null, %"class.plugin::ServiceRuntime"** %3, align 8
  %8 = icmp eq %"class.plugin::ServiceRuntime"* %7, null
  br i1 %8, label %15, label %9

9:                                                ; preds = %6
  tail call void @_ZN6plugin14ServiceRuntimeD1Ev(%"class.plugin::ServiceRuntime"* nonnull %7) #5
  %10 = bitcast %"class.plugin::ServiceRuntime"* %7 to i8*
  tail call void @_ZdlPv(i8* %10) #6
  %11 = load %"class.plugin::ServiceRuntime"*, %"class.plugin::ServiceRuntime"** %3, align 8
  store %"class.plugin::ServiceRuntime"* null, %"class.plugin::ServiceRuntime"** %3, align 8
  %12 = icmp eq %"class.plugin::ServiceRuntime"* %11, null
  br i1 %12, label %15, label %13

13:                                               ; preds = %9
  %14 = bitcast %"class.plugin::ServiceRuntime"* %11 to i8*
  tail call void @_ZN6plugin14ServiceRuntimeD1Ev(%"class.plugin::ServiceRuntime"* nonnull %11) #5
  tail call void @_ZdlPv(i8* %14) #6
  br label %15

15:                                               ; preds = %1, %6, %9, %13
  %16 = bitcast %"class.plugin::NaClSubprocess"* %0 to i8*
  tail call void @_ZdlPv(i8* %16) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN6plugin14ServiceRuntimeD1Ev(%"class.plugin::ServiceRuntime"*) unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
