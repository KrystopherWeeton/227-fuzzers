; ModuleID = '../../third_party/blink/renderer/platform/audio/down_sampler.cc'
source_filename = "../../third_party/blink/renderer/platform/audio/down_sampler.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::DownSampler" = type { i64, %"class.blink::SimpleFFTConvolver", %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::SimpleFFTConvolver" = type { i64, %"class.blink::FFTFrame", %"class.blink::FFTFrame", %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::FFTFrame" = type { i32, i32, %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray", %"class.blink::AudioArray" }
%"class.blink::AudioArray" = type <{ float*, float*, i32, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::AudioArray"* }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink10AudioArrayIfE8AllocateEm = comdat any

@.str = private unnamed_addr constant [54 x i8] c"n <= std::numeric_limits<unsigned>::max() / sizeof(T)\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c"../../third_party/blink/renderer/platform/audio/audio_array.h\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"allocation_\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIfEEEEPKcv = private unnamed_addr constant [72 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::AudioArray<float>]\00", align 1

@_ZN5blink11DownSamplerC1Em = hidden unnamed_addr alias void (%"class.blink::DownSampler"*, i64), void (%"class.blink::DownSampler"*, i64)* @_ZN5blink11DownSamplerC2Em

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11DownSamplerC2Em(%"class.blink::DownSampler"*, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::unique_ptr", align 8
  %4 = getelementptr inbounds %"class.blink::DownSampler", %"class.blink::DownSampler"* %0, i64 0, i32 0
  store i64 %1, i64* %4, align 8
  %5 = getelementptr inbounds %"class.blink::DownSampler", %"class.blink::DownSampler"* %0, i64 0, i32 1
  %6 = bitcast %"class.std::__1::unique_ptr"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = tail call noalias i8* @malloc(i64 24) #8
  %8 = bitcast i8* %7 to %"class.blink::AudioArray"*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 20, i1 false) #8
  tail call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %8, i64 128) #8
  %9 = getelementptr inbounds i8, i8* %7, i64 8
  %10 = bitcast i8* %9 to float**
  br label %11

11:                                               ; preds = %21, %2
  %12 = phi i64 [ 1, %2 ], [ %39, %21 ]
  %13 = trunc i64 %12 to i32
  %14 = add nsw i32 %13, -128
  %15 = sitofp i32 %14 to double
  %16 = fmul double %15, 0x3FF921FB54442D18
  %17 = fcmp une double %16, 0.000000e+00
  br i1 %17, label %18, label %21

18:                                               ; preds = %11
  %19 = tail call double @_ZN6fdlibm3sinEd(double %16) #8
  %20 = fdiv double %19, %16
  br label %21

21:                                               ; preds = %18, %11
  %22 = phi double [ %20, %18 ], [ 1.000000e+00, %11 ]
  %23 = fmul double %22, 5.000000e-01
  %24 = sitofp i32 %13 to double
  %25 = fmul double %24, 3.906250e-03
  %26 = fmul double %25, 0x401921FB54442D18
  %27 = tail call double @_ZN6fdlibm3cosEd(double %26) #8
  %28 = fmul double %27, 5.000000e-01
  %29 = fsub double 4.200000e-01, %28
  %30 = fmul double %25, 0x402921FB54442D18
  %31 = tail call double @_ZN6fdlibm3cosEd(double %30) #8
  %32 = fmul double %31, 8.000000e-02
  %33 = fadd double %29, %32
  %34 = fmul double %23, %33
  %35 = fptrunc double %34 to float
  %36 = lshr i64 %12, 1
  %37 = load float*, float** %10, align 8
  %38 = getelementptr inbounds float, float* %37, i64 %36
  store float %35, float* %38, align 4
  %39 = add nuw nsw i64 %12, 2
  %40 = icmp ult i64 %39, 256
  br i1 %40, label %11, label %41

41:                                               ; preds = %21
  %42 = lshr i64 %1, 1
  %43 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %3, i64 0, i32 0, i32 0, i32 0
  %44 = bitcast %"class.std::__1::unique_ptr"* %3 to i8**
  store i8* %7, i8** %44, align 8
  call void @_ZN5blink18SimpleFFTConvolverC1EmRKNSt3__110unique_ptrINS_10AudioArrayIfEENS1_14default_deleteIS4_EEEE(%"class.blink::SimpleFFTConvolver"* %5, i64 %42, %"class.std::__1::unique_ptr"* nonnull dereferenceable(8) %3) #8
  %45 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %43, align 8
  store %"class.blink::AudioArray"* null, %"class.blink::AudioArray"** %43, align 8
  %46 = icmp eq %"class.blink::AudioArray"* %45, null
  br i1 %46, label %51, label %47

47:                                               ; preds = %41
  %48 = bitcast %"class.blink::AudioArray"* %45 to i8**
  %49 = load i8*, i8** %48, align 8
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* %49) #8
  %50 = bitcast %"class.blink::AudioArray"* %45 to i8*
  call void @free(i8* %50) #8
  br label %51

51:                                               ; preds = %41, %47
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %52 = getelementptr inbounds %"class.blink::DownSampler", %"class.blink::DownSampler"* %0, i64 0, i32 2
  %53 = bitcast %"class.blink::AudioArray"* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 20, i1 false) #8
  call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %52, i64 %42) #8
  %54 = getelementptr inbounds %"class.blink::DownSampler", %"class.blink::DownSampler"* %0, i64 0, i32 3
  %55 = shl i64 %1, 1
  %56 = bitcast %"class.blink::AudioArray"* %54 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 20, i1 false) #8
  call void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"* %54, i64 %55) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN5blink18SimpleFFTConvolverC1EmRKNSt3__110unique_ptrINS_10AudioArrayIfEENS1_14default_deleteIS4_EEEE(%"class.blink::SimpleFFTConvolver"*, i64, %"class.std::__1::unique_ptr"* dereferenceable(8)) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11DownSampler7ProcessEPKfPfm(%"class.blink::DownSampler"*, float* nocapture readonly, float*, i64) local_unnamed_addr #0 align 2 {
  %5 = lshr i64 %3, 1
  %6 = getelementptr inbounds %"class.blink::DownSampler", %"class.blink::DownSampler"* %0, i64 0, i32 3, i32 1
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds float, float* %7, i64 %3
  %9 = bitcast float* %8 to i8*
  %10 = bitcast float* %1 to i8*
  %11 = shl i64 %3, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %10, i64 %11, i1 false)
  %12 = getelementptr inbounds %"class.blink::DownSampler", %"class.blink::DownSampler"* %0, i64 0, i32 2, i32 1
  %13 = load float*, float** %12, align 8
  %14 = icmp eq i64 %5, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.blink::DownSampler", %"class.blink::DownSampler"* %0, i64 0, i32 1
  %17 = trunc i64 %5 to i32
  tail call void @_ZN5blink18SimpleFFTConvolver7ProcessEPKfPfj(%"class.blink::SimpleFFTConvolver"* %16, float* %13, float* %2, i32 %17) #8
  br label %37

18:                                               ; preds = %4
  %19 = getelementptr inbounds float, float* %8, i64 -1
  br label %24

20:                                               ; preds = %24
  %21 = getelementptr inbounds %"class.blink::DownSampler", %"class.blink::DownSampler"* %0, i64 0, i32 1
  %22 = trunc i64 %5 to i32
  tail call void @_ZN5blink18SimpleFFTConvolver7ProcessEPKfPfj(%"class.blink::SimpleFFTConvolver"* %21, float* %13, float* %2, i32 %22) #8
  %23 = getelementptr inbounds float, float* %8, i64 -128
  br label %40

24:                                               ; preds = %18, %24
  %25 = phi i64 [ 0, %18 ], [ %35, %24 ]
  %26 = phi i32 [ 0, %18 ], [ %34, %24 ]
  %27 = shl i32 %26, 1
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds float, float* %19, i64 %28
  %30 = bitcast float* %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds float, float* %13, i64 %25
  %33 = bitcast float* %32 to i32*
  store i32 %31, i32* %33, align 4
  %34 = add i32 %26, 1
  %35 = zext i32 %34 to i64
  %36 = icmp ugt i64 %5, %35
  br i1 %36, label %24, label %20

37:                                               ; preds = %40, %15
  %38 = bitcast float** %6 to i8**
  %39 = load i8*, i8** %38, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %9, i64 %11, i1 false)
  ret void

40:                                               ; preds = %20, %40
  %41 = phi i64 [ 0, %20 ], [ %55, %40 ]
  %42 = phi i32 [ 0, %20 ], [ %54, %40 ]
  %43 = shl i32 %42, 1
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds float, float* %23, i64 %44
  %46 = load float, float* %45, align 4
  %47 = fpext float %46 to double
  %48 = fmul double %47, 5.000000e-01
  %49 = getelementptr inbounds float, float* %2, i64 %41
  %50 = load float, float* %49, align 4
  %51 = fpext float %50 to double
  %52 = fadd double %48, %51
  %53 = fptrunc double %52 to float
  store float %53, float* %49, align 4
  %54 = add i32 %42, 1
  %55 = zext i32 %54 to i64
  %56 = icmp ugt i64 %5, %55
  br i1 %56, label %40, label %37
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN5blink18SimpleFFTConvolver7ProcessEPKfPfj(%"class.blink::SimpleFFTConvolver"*, float*, float*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11DownSampler5ResetEv(%"class.blink::DownSampler"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::DownSampler", %"class.blink::DownSampler"* %0, i64 0, i32 1
  tail call void @_ZN5blink18SimpleFFTConvolver5ResetEv(%"class.blink::SimpleFFTConvolver"* %2) #8
  %3 = getelementptr inbounds %"class.blink::DownSampler", %"class.blink::DownSampler"* %0, i64 0, i32 3, i32 1
  %4 = bitcast float** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.blink::DownSampler", %"class.blink::DownSampler"* %0, i64 0, i32 3, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = shl nuw nsw i64 %8, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 %9, i1 false) #8
  ret void
}

declare void @_ZN5blink18SimpleFFTConvolver5ResetEv(%"class.blink::SimpleFFTConvolver"*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK5blink11DownSampler13LatencyFramesEv(%"class.blink::DownSampler"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::DownSampler", %"class.blink::DownSampler"* %0, i64 0, i32 1, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = lshr i64 %3, 1
  ret i64 %4
}

declare double @_ZN6fdlibm3sinEd(double) local_unnamed_addr #2

declare double @_ZN6fdlibm3cosEd(double) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10AudioArrayIfE8AllocateEm(%"class.blink::AudioArray"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #8
  %8 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  %10 = icmp ugt i64 %1, 1073741823
  br i1 %10, label %12, label %11

11:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* null, i8** %8, align 8
  br label %21

12:                                               ; preds = %2
  %13 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #8
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1073741823) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0), i8* %13, i8* %14) #8
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  store i8* %16, i8** %8, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 63, %"class.logging::CheckOpResult"* nonnull %4) #8
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #8
  br label %21

21:                                               ; preds = %11, %12, %18
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #8
  %22 = trunc i64 %1 to i32
  %23 = shl i32 %22, 2
  %24 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 0
  %25 = load float*, float** %24, align 8
  %26 = icmp eq float* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %21
  %28 = bitcast float* %25 to i8*
  call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %28) #8
  br label %29

29:                                               ; preds = %21, %27
  %30 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %23, i32 32) #8
  %31 = extractvalue { i32, i1 } %30, 1
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %29
  call void @llvm.trap() #8
  unreachable

33:                                               ; preds = %29
  %34 = extractvalue { i32, i1 } %30, 0
  %35 = zext i32 %34 to i64
  %36 = call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 %35, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10AudioArrayIfEEEEPKcv, i64 0, i64 0)) #8
  %37 = bitcast %"class.blink::AudioArray"* %0 to i8**
  store i8* %36, i8** %37, align 8
  %38 = icmp eq i8* %36, null
  br i1 %38, label %41, label %39

39:                                               ; preds = %33
  %40 = ptrtoint i8* %36 to i64
  br label %46

41:                                               ; preds = %33
  %42 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0)) #8
  %43 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #8
  %44 = bitcast %"class.blink::AudioArray"* %0 to i64*
  %45 = load i64, i64* %44, align 8
  br label %46

46:                                               ; preds = %39, %41
  %47 = phi i64 [ %40, %39 ], [ %45, %41 ]
  %48 = add i64 %47, 31
  %49 = and i64 %48, -32
  %50 = inttoptr i64 %49 to float*
  %51 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 1
  store float* %50, float** %51, align 8
  %52 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %0, i64 0, i32 2
  store i32 %22, i32* %52, align 8
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
