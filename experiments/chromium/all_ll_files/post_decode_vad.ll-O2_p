; ModuleID = '../../third_party/webrtc/modules/audio_coding/neteq/post_decode_vad.cc'
source_filename = "../../third_party/webrtc/modules/audio_coding/neteq/post_decode_vad.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::PostDecodeVad" = type { i32 (...)**, i8, i8, i8, i32, %struct.WebRtcVadInst* }
%struct.WebRtcVadInst = type opaque

@_ZTVN6webrtc13PostDecodeVadE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::PostDecodeVad"*)* @_ZN6webrtc13PostDecodeVadD2Ev to i8*), i8* bitcast (void (%"class.webrtc::PostDecodeVad"*)* @_ZN6webrtc13PostDecodeVadD0Ev to i8*)] }, align 8

@_ZN6webrtc13PostDecodeVadD1Ev = hidden unnamed_addr alias void (%"class.webrtc::PostDecodeVad"*), void (%"class.webrtc::PostDecodeVad"*)* @_ZN6webrtc13PostDecodeVadD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc13PostDecodeVadD2Ev(%"class.webrtc::PostDecodeVad"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN6webrtc13PostDecodeVadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 5
  %4 = load %struct.WebRtcVadInst*, %struct.WebRtcVadInst** %3, align 8
  %5 = icmp eq %struct.WebRtcVadInst* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @WebRtcVad_Free(%struct.WebRtcVadInst* nonnull %4) #4
  br label %7

7:                                                ; preds = %1, %6
  ret void
}

declare void @WebRtcVad_Free(%struct.WebRtcVadInst*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc13PostDecodeVadD0Ev(%"class.webrtc::PostDecodeVad"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN6webrtc13PostDecodeVadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 5
  %4 = load %struct.WebRtcVadInst*, %struct.WebRtcVadInst** %3, align 8
  %5 = icmp eq %struct.WebRtcVadInst* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @WebRtcVad_Free(%struct.WebRtcVadInst* nonnull %4) #4
  br label %7

7:                                                ; preds = %1, %6
  %8 = bitcast %"class.webrtc::PostDecodeVad"* %0 to i8*
  tail call void @_ZdlPv(i8* %8) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc13PostDecodeVad6EnableEv(%"class.webrtc::PostDecodeVad"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 5
  %3 = load %struct.WebRtcVadInst*, %struct.WebRtcVadInst** %2, align 8
  %4 = icmp eq %struct.WebRtcVadInst* %3, null
  br i1 %4, label %5, label %11

5:                                                ; preds = %1
  %6 = tail call %struct.WebRtcVadInst* @WebRtcVad_Create() #4
  store %struct.WebRtcVadInst* %6, %struct.WebRtcVadInst** %2, align 8
  %7 = icmp eq %struct.WebRtcVadInst* %6, null
  br i1 %7, label %8, label %11

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 1
  store i8 0, i8* %9, align 8
  %10 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 2
  store i8 0, i8* %10, align 1
  br label %18

11:                                               ; preds = %1, %5
  %12 = phi %struct.WebRtcVadInst* [ %3, %1 ], [ %6, %5 ]
  %13 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 2
  store i8 0, i8* %13, align 1
  %14 = tail call i32 @WebRtcVad_Init(%struct.WebRtcVadInst* nonnull %12) #4
  %15 = load %struct.WebRtcVadInst*, %struct.WebRtcVadInst** %2, align 8
  %16 = tail call i32 @WebRtcVad_set_mode(%struct.WebRtcVadInst* %15, i32 0) #4
  store i8 1, i8* %13, align 1
  %17 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 1
  store i8 1, i8* %17, align 8
  br label %18

18:                                               ; preds = %11, %8
  ret void
}

declare %struct.WebRtcVadInst* @WebRtcVad_Create() local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc13PostDecodeVad7DisableEv(%"class.webrtc::PostDecodeVad"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 1
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 2
  store i8 0, i8* %3, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc13PostDecodeVad4InitEv(%"class.webrtc::PostDecodeVad"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 2
  store i8 0, i8* %2, align 1
  %3 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 5
  %4 = load %struct.WebRtcVadInst*, %struct.WebRtcVadInst** %3, align 8
  %5 = icmp eq %struct.WebRtcVadInst* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = tail call i32 @WebRtcVad_Init(%struct.WebRtcVadInst* nonnull %4) #4
  %8 = load %struct.WebRtcVadInst*, %struct.WebRtcVadInst** %3, align 8
  %9 = tail call i32 @WebRtcVad_set_mode(%struct.WebRtcVadInst* %8, i32 0) #4
  store i8 1, i8* %2, align 1
  br label %10

10:                                               ; preds = %1, %6
  ret void
}

declare i32 @WebRtcVad_Init(%struct.WebRtcVadInst*) local_unnamed_addr #1

declare i32 @WebRtcVad_set_mode(%struct.WebRtcVadInst*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc13PostDecodeVad6UpdateEPsmNS_12AudioDecoder10SpeechTypeEbi(%"class.webrtc::PostDecodeVad"* nocapture, i16*, i64, i32, i1 zeroext, i32) local_unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 5
  %8 = load %struct.WebRtcVadInst*, %struct.WebRtcVadInst** %7, align 8
  %9 = icmp eq %struct.WebRtcVadInst* %8, null
  br i1 %9, label %67, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 1
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %67, label %14

14:                                               ; preds = %10
  %15 = icmp eq i32 %3, 2
  %16 = icmp sgt i32 %5, 16000
  %17 = or i1 %16, %4
  %18 = or i1 %15, %17
  %19 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 2
  br i1 %18, label %20, label %23

20:                                               ; preds = %14
  store i8 0, i8* %19, align 1
  %21 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 3
  store i8 1, i8* %21, align 2
  %22 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 4
  store i32 0, i32* %22, align 4
  br label %38

23:                                               ; preds = %14
  %24 = load i8, i8* %19, align 1, !range !2
  %25 = icmp eq i8 %24, 0
  %26 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 4
  %27 = load i32, i32* %26, align 4
  br i1 %25, label %28, label %30

28:                                               ; preds = %23
  %29 = add nsw i32 %27, 1
  store i32 %29, i32* %26, align 4
  br label %30

30:                                               ; preds = %23, %28
  %31 = phi i8 [ 0, %28 ], [ 1, %23 ]
  %32 = phi i32 [ %29, %28 ], [ %27, %23 ]
  %33 = icmp sgt i32 %32, 2999
  br i1 %33, label %34, label %38

34:                                               ; preds = %30
  store i8 0, i8* %19, align 1
  %35 = tail call i32 @WebRtcVad_Init(%struct.WebRtcVadInst* nonnull %8) #4
  %36 = load %struct.WebRtcVadInst*, %struct.WebRtcVadInst** %7, align 8
  %37 = tail call i32 @WebRtcVad_set_mode(%struct.WebRtcVadInst* %36, i32 0) #4
  store i8 1, i8* %19, align 1
  br label %38

38:                                               ; preds = %20, %34, %30
  %39 = phi i8 [ 1, %34 ], [ %31, %30 ], [ 0, %20 ]
  %40 = icmp eq i64 %2, 0
  %41 = icmp eq i8 %39, 0
  %42 = or i1 %40, %41
  br i1 %42, label %67, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.webrtc::PostDecodeVad", %"class.webrtc::PostDecodeVad"* %0, i64 0, i32 3
  store i8 0, i8* %44, align 2
  %45 = mul nsw i32 %5, 30
  %46 = sdiv i32 %45, 1000
  %47 = sext i32 %46 to i64
  %48 = icmp ugt i64 %47, %2
  br i1 %48, label %61, label %49

49:                                               ; preds = %43, %49
  %50 = phi i64 [ %58, %49 ], [ 0, %43 ]
  %51 = load %struct.WebRtcVadInst*, %struct.WebRtcVadInst** %7, align 8
  %52 = getelementptr inbounds i16, i16* %1, i64 %50
  %53 = tail call i32 @WebRtcVad_Process(%struct.WebRtcVadInst* %51, i32 %5, i16* %52, i64 %47) #4
  %54 = icmp eq i32 %53, 1
  %55 = zext i1 %54 to i8
  %56 = load i8, i8* %44, align 2, !range !2
  %57 = or i8 %56, %55
  store i8 %57, i8* %44, align 2
  %58 = add i64 %50, %47
  %59 = sub i64 %2, %58
  %60 = icmp ult i64 %59, %47
  br i1 %60, label %61, label %49

61:                                               ; preds = %49, %43
  %62 = phi i64 [ 0, %43 ], [ %58, %49 ]
  %63 = sdiv i32 %5, 50
  %64 = sext i32 %63 to i64
  %65 = sub i64 %2, %62
  %66 = icmp ult i64 %65, %64
  br i1 %66, label %80, label %68

67:                                               ; preds = %86, %80, %38, %10, %6
  ret void

68:                                               ; preds = %61, %68
  %69 = phi i64 [ %77, %68 ], [ %62, %61 ]
  %70 = load %struct.WebRtcVadInst*, %struct.WebRtcVadInst** %7, align 8
  %71 = getelementptr inbounds i16, i16* %1, i64 %69
  %72 = tail call i32 @WebRtcVad_Process(%struct.WebRtcVadInst* %70, i32 %5, i16* %71, i64 %64) #4
  %73 = icmp eq i32 %72, 1
  %74 = zext i1 %73 to i8
  %75 = load i8, i8* %44, align 2, !range !2
  %76 = or i8 %75, %74
  store i8 %76, i8* %44, align 2
  %77 = add i64 %69, %64
  %78 = sub i64 %2, %77
  %79 = icmp ult i64 %78, %64
  br i1 %79, label %80, label %68

80:                                               ; preds = %68, %61
  %81 = phi i64 [ %65, %61 ], [ %78, %68 ]
  %82 = phi i64 [ %62, %61 ], [ %77, %68 ]
  %83 = sdiv i32 %5, 100
  %84 = sext i32 %83 to i64
  %85 = icmp ult i64 %81, %84
  br i1 %85, label %67, label %86

86:                                               ; preds = %80, %86
  %87 = phi i64 [ %95, %86 ], [ %82, %80 ]
  %88 = load %struct.WebRtcVadInst*, %struct.WebRtcVadInst** %7, align 8
  %89 = getelementptr inbounds i16, i16* %1, i64 %87
  %90 = tail call i32 @WebRtcVad_Process(%struct.WebRtcVadInst* %88, i32 %5, i16* %89, i64 %84) #4
  %91 = icmp eq i32 %90, 1
  %92 = zext i1 %91 to i8
  %93 = load i8, i8* %44, align 2, !range !2
  %94 = or i8 %93, %92
  store i8 %94, i8* %44, align 2
  %95 = add i64 %87, %84
  %96 = sub i64 %2, %95
  %97 = icmp ult i64 %96, %84
  br i1 %97, label %67, label %86
}

declare i32 @WebRtcVad_Process(%struct.WebRtcVadInst*, i32, i16*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
