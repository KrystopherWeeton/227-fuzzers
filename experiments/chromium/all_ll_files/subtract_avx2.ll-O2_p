; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/subtract_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/subtract_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_subtract_block_avx2(i32, i32, i16*, i64, i8*, i64, i8*, i64) local_unnamed_addr #0 {
  %9 = add i32 %1, -16
  %10 = lshr i32 %9, 4
  %11 = shl i32 %9, 28
  %12 = or i32 %10, %11
  switch i32 %12, label %240 [
    i32 0, label %13
    i32 1, label %45
    i32 3, label %78
    i32 7, label %135
  ]

13:                                               ; preds = %8
  %14 = icmp sgt i32 %0, 0
  br i1 %14, label %15, label %253

15:                                               ; preds = %13
  %16 = and i32 %0, 1
  %17 = icmp eq i32 %0, 1
  br i1 %17, label %241, label %18

18:                                               ; preds = %15
  %19 = sub i32 %0, %16
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi i16* [ %2, %18 ], [ %42, %20 ]
  %22 = phi i8* [ %4, %18 ], [ %40, %20 ]
  %23 = phi i8* [ %6, %18 ], [ %41, %20 ]
  %24 = phi i32 [ %19, %18 ], [ %43, %20 ]
  %25 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %22) #3
  %26 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %23) #3
  %27 = zext <16 x i8> %25 to <16 x i16>
  %28 = zext <16 x i8> %26 to <16 x i16>
  %29 = sub nsw <16 x i16> %27, %28
  %30 = bitcast i16* %21 to <16 x i16>*
  store <16 x i16> %29, <16 x i16>* %30, align 32
  %31 = getelementptr inbounds i8, i8* %22, i64 %5
  %32 = getelementptr inbounds i8, i8* %23, i64 %7
  %33 = getelementptr inbounds i16, i16* %21, i64 %3
  %34 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %31) #3
  %35 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %32) #3
  %36 = zext <16 x i8> %34 to <16 x i16>
  %37 = zext <16 x i8> %35 to <16 x i16>
  %38 = sub nsw <16 x i16> %36, %37
  %39 = bitcast i16* %33 to <16 x i16>*
  store <16 x i16> %38, <16 x i16>* %39, align 32
  %40 = getelementptr inbounds i8, i8* %31, i64 %5
  %41 = getelementptr inbounds i8, i8* %32, i64 %7
  %42 = getelementptr inbounds i16, i16* %33, i64 %3
  %43 = add i32 %24, -2
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %241, label %20

45:                                               ; preds = %8
  %46 = icmp sgt i32 %0, 0
  br i1 %46, label %47, label %253

47:                                               ; preds = %45, %47
  %48 = phi i32 [ %76, %47 ], [ 0, %45 ]
  %49 = phi i16* [ %75, %47 ], [ %2, %45 ]
  %50 = phi i8* [ %74, %47 ], [ %6, %45 ]
  %51 = phi i8* [ %73, %47 ], [ %4, %45 ]
  %52 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %51) #3
  %53 = bitcast <32 x i8> %52 to <4 x i64>
  %54 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %50) #3
  %55 = bitcast <32 x i8> %54 to <4 x i64>
  %56 = shufflevector <4 x i64> %53, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %57 = bitcast <2 x i64> %56 to <16 x i8>
  %58 = zext <16 x i8> %57 to <16 x i16>
  %59 = shufflevector <4 x i64> %53, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %60 = bitcast <2 x i64> %59 to <16 x i8>
  %61 = zext <16 x i8> %60 to <16 x i16>
  %62 = shufflevector <4 x i64> %55, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %63 = bitcast <2 x i64> %62 to <16 x i8>
  %64 = zext <16 x i8> %63 to <16 x i16>
  %65 = shufflevector <4 x i64> %55, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %66 = bitcast <2 x i64> %65 to <16 x i8>
  %67 = zext <16 x i8> %66 to <16 x i16>
  %68 = sub nsw <16 x i16> %58, %64
  %69 = sub nsw <16 x i16> %61, %67
  %70 = bitcast i16* %49 to <16 x i16>*
  store <16 x i16> %68, <16 x i16>* %70, align 32
  %71 = getelementptr inbounds i16, i16* %49, i64 16
  %72 = bitcast i16* %71 to <16 x i16>*
  store <16 x i16> %69, <16 x i16>* %72, align 32
  %73 = getelementptr inbounds i8, i8* %51, i64 %5
  %74 = getelementptr inbounds i8, i8* %50, i64 %7
  %75 = getelementptr inbounds i16, i16* %49, i64 %3
  %76 = add nuw nsw i32 %48, 1
  %77 = icmp eq i32 %76, %0
  br i1 %77, label %253, label %47

78:                                               ; preds = %8
  %79 = icmp sgt i32 %0, 0
  br i1 %79, label %80, label %253

80:                                               ; preds = %78, %80
  %81 = phi i32 [ %133, %80 ], [ 0, %78 ]
  %82 = phi i16* [ %132, %80 ], [ %2, %78 ]
  %83 = phi i8* [ %131, %80 ], [ %6, %78 ]
  %84 = phi i8* [ %130, %80 ], [ %4, %78 ]
  %85 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %84) #3
  %86 = bitcast <32 x i8> %85 to <4 x i64>
  %87 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %83) #3
  %88 = bitcast <32 x i8> %87 to <4 x i64>
  %89 = shufflevector <4 x i64> %86, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %90 = bitcast <2 x i64> %89 to <16 x i8>
  %91 = zext <16 x i8> %90 to <16 x i16>
  %92 = shufflevector <4 x i64> %86, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %93 = bitcast <2 x i64> %92 to <16 x i8>
  %94 = zext <16 x i8> %93 to <16 x i16>
  %95 = shufflevector <4 x i64> %88, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %96 = bitcast <2 x i64> %95 to <16 x i8>
  %97 = zext <16 x i8> %96 to <16 x i16>
  %98 = shufflevector <4 x i64> %88, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %99 = bitcast <2 x i64> %98 to <16 x i8>
  %100 = zext <16 x i8> %99 to <16 x i16>
  %101 = sub nsw <16 x i16> %91, %97
  %102 = sub nsw <16 x i16> %94, %100
  %103 = bitcast i16* %82 to <16 x i16>*
  store <16 x i16> %101, <16 x i16>* %103, align 32
  %104 = getelementptr inbounds i16, i16* %82, i64 16
  %105 = bitcast i16* %104 to <16 x i16>*
  store <16 x i16> %102, <16 x i16>* %105, align 32
  %106 = getelementptr inbounds i16, i16* %82, i64 32
  %107 = getelementptr inbounds i8, i8* %84, i64 32
  %108 = getelementptr inbounds i8, i8* %83, i64 32
  %109 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %107) #3
  %110 = bitcast <32 x i8> %109 to <4 x i64>
  %111 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %108) #3
  %112 = bitcast <32 x i8> %111 to <4 x i64>
  %113 = shufflevector <4 x i64> %110, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %114 = bitcast <2 x i64> %113 to <16 x i8>
  %115 = zext <16 x i8> %114 to <16 x i16>
  %116 = shufflevector <4 x i64> %110, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %117 = bitcast <2 x i64> %116 to <16 x i8>
  %118 = zext <16 x i8> %117 to <16 x i16>
  %119 = shufflevector <4 x i64> %112, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %120 = bitcast <2 x i64> %119 to <16 x i8>
  %121 = zext <16 x i8> %120 to <16 x i16>
  %122 = shufflevector <4 x i64> %112, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %123 = bitcast <2 x i64> %122 to <16 x i8>
  %124 = zext <16 x i8> %123 to <16 x i16>
  %125 = sub nsw <16 x i16> %115, %121
  %126 = sub nsw <16 x i16> %118, %124
  %127 = bitcast i16* %106 to <16 x i16>*
  store <16 x i16> %125, <16 x i16>* %127, align 32
  %128 = getelementptr inbounds i16, i16* %82, i64 48
  %129 = bitcast i16* %128 to <16 x i16>*
  store <16 x i16> %126, <16 x i16>* %129, align 32
  %130 = getelementptr inbounds i8, i8* %84, i64 %5
  %131 = getelementptr inbounds i8, i8* %83, i64 %7
  %132 = getelementptr inbounds i16, i16* %82, i64 %3
  %133 = add nuw nsw i32 %81, 1
  %134 = icmp eq i32 %133, %0
  br i1 %134, label %253, label %80

135:                                              ; preds = %8
  %136 = icmp sgt i32 %0, 0
  br i1 %136, label %137, label %253

137:                                              ; preds = %135, %137
  %138 = phi i32 [ %238, %137 ], [ 0, %135 ]
  %139 = phi i16* [ %237, %137 ], [ %2, %135 ]
  %140 = phi i8* [ %236, %137 ], [ %6, %135 ]
  %141 = phi i8* [ %235, %137 ], [ %4, %135 ]
  %142 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %141) #3
  %143 = bitcast <32 x i8> %142 to <4 x i64>
  %144 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %140) #3
  %145 = bitcast <32 x i8> %144 to <4 x i64>
  %146 = shufflevector <4 x i64> %143, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %147 = bitcast <2 x i64> %146 to <16 x i8>
  %148 = zext <16 x i8> %147 to <16 x i16>
  %149 = shufflevector <4 x i64> %143, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %150 = bitcast <2 x i64> %149 to <16 x i8>
  %151 = zext <16 x i8> %150 to <16 x i16>
  %152 = shufflevector <4 x i64> %145, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %153 = bitcast <2 x i64> %152 to <16 x i8>
  %154 = zext <16 x i8> %153 to <16 x i16>
  %155 = shufflevector <4 x i64> %145, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %156 = bitcast <2 x i64> %155 to <16 x i8>
  %157 = zext <16 x i8> %156 to <16 x i16>
  %158 = sub nsw <16 x i16> %148, %154
  %159 = sub nsw <16 x i16> %151, %157
  %160 = bitcast i16* %139 to <16 x i16>*
  store <16 x i16> %158, <16 x i16>* %160, align 32
  %161 = getelementptr inbounds i16, i16* %139, i64 16
  %162 = bitcast i16* %161 to <16 x i16>*
  store <16 x i16> %159, <16 x i16>* %162, align 32
  %163 = getelementptr inbounds i16, i16* %139, i64 32
  %164 = getelementptr inbounds i8, i8* %141, i64 32
  %165 = getelementptr inbounds i8, i8* %140, i64 32
  %166 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %164) #3
  %167 = bitcast <32 x i8> %166 to <4 x i64>
  %168 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %165) #3
  %169 = bitcast <32 x i8> %168 to <4 x i64>
  %170 = shufflevector <4 x i64> %167, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %171 = bitcast <2 x i64> %170 to <16 x i8>
  %172 = zext <16 x i8> %171 to <16 x i16>
  %173 = shufflevector <4 x i64> %167, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %174 = bitcast <2 x i64> %173 to <16 x i8>
  %175 = zext <16 x i8> %174 to <16 x i16>
  %176 = shufflevector <4 x i64> %169, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %177 = bitcast <2 x i64> %176 to <16 x i8>
  %178 = zext <16 x i8> %177 to <16 x i16>
  %179 = shufflevector <4 x i64> %169, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %180 = bitcast <2 x i64> %179 to <16 x i8>
  %181 = zext <16 x i8> %180 to <16 x i16>
  %182 = sub nsw <16 x i16> %172, %178
  %183 = sub nsw <16 x i16> %175, %181
  %184 = bitcast i16* %163 to <16 x i16>*
  store <16 x i16> %182, <16 x i16>* %184, align 32
  %185 = getelementptr inbounds i16, i16* %139, i64 48
  %186 = bitcast i16* %185 to <16 x i16>*
  store <16 x i16> %183, <16 x i16>* %186, align 32
  %187 = getelementptr inbounds i16, i16* %139, i64 64
  %188 = getelementptr inbounds i8, i8* %141, i64 64
  %189 = getelementptr inbounds i8, i8* %140, i64 64
  %190 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %188) #3
  %191 = bitcast <32 x i8> %190 to <4 x i64>
  %192 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %189) #3
  %193 = bitcast <32 x i8> %192 to <4 x i64>
  %194 = shufflevector <4 x i64> %191, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %195 = bitcast <2 x i64> %194 to <16 x i8>
  %196 = zext <16 x i8> %195 to <16 x i16>
  %197 = shufflevector <4 x i64> %191, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %198 = bitcast <2 x i64> %197 to <16 x i8>
  %199 = zext <16 x i8> %198 to <16 x i16>
  %200 = shufflevector <4 x i64> %193, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %201 = bitcast <2 x i64> %200 to <16 x i8>
  %202 = zext <16 x i8> %201 to <16 x i16>
  %203 = shufflevector <4 x i64> %193, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %204 = bitcast <2 x i64> %203 to <16 x i8>
  %205 = zext <16 x i8> %204 to <16 x i16>
  %206 = sub nsw <16 x i16> %196, %202
  %207 = sub nsw <16 x i16> %199, %205
  %208 = bitcast i16* %187 to <16 x i16>*
  store <16 x i16> %206, <16 x i16>* %208, align 32
  %209 = getelementptr inbounds i16, i16* %139, i64 80
  %210 = bitcast i16* %209 to <16 x i16>*
  store <16 x i16> %207, <16 x i16>* %210, align 32
  %211 = getelementptr inbounds i16, i16* %139, i64 96
  %212 = getelementptr inbounds i8, i8* %141, i64 96
  %213 = getelementptr inbounds i8, i8* %140, i64 96
  %214 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %212) #3
  %215 = bitcast <32 x i8> %214 to <4 x i64>
  %216 = tail call <32 x i8> @llvm.x86.avx.ldu.dq.256(i8* %213) #3
  %217 = bitcast <32 x i8> %216 to <4 x i64>
  %218 = shufflevector <4 x i64> %215, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %219 = bitcast <2 x i64> %218 to <16 x i8>
  %220 = zext <16 x i8> %219 to <16 x i16>
  %221 = shufflevector <4 x i64> %215, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %222 = bitcast <2 x i64> %221 to <16 x i8>
  %223 = zext <16 x i8> %222 to <16 x i16>
  %224 = shufflevector <4 x i64> %217, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %225 = bitcast <2 x i64> %224 to <16 x i8>
  %226 = zext <16 x i8> %225 to <16 x i16>
  %227 = shufflevector <4 x i64> %217, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %228 = bitcast <2 x i64> %227 to <16 x i8>
  %229 = zext <16 x i8> %228 to <16 x i16>
  %230 = sub nsw <16 x i16> %220, %226
  %231 = sub nsw <16 x i16> %223, %229
  %232 = bitcast i16* %211 to <16 x i16>*
  store <16 x i16> %230, <16 x i16>* %232, align 32
  %233 = getelementptr inbounds i16, i16* %139, i64 112
  %234 = bitcast i16* %233 to <16 x i16>*
  store <16 x i16> %231, <16 x i16>* %234, align 32
  %235 = getelementptr inbounds i8, i8* %141, i64 %5
  %236 = getelementptr inbounds i8, i8* %140, i64 %7
  %237 = getelementptr inbounds i16, i16* %139, i64 %3
  %238 = add nuw nsw i32 %138, 1
  %239 = icmp eq i32 %238, %0
  br i1 %239, label %253, label %137

240:                                              ; preds = %8
  tail call void @aom_subtract_block_sse2(i32 %0, i32 %1, i16* %2, i64 %3, i8* %4, i64 %5, i8* %6, i64 %7) #3
  br label %253

241:                                              ; preds = %20, %15
  %242 = phi i16* [ %2, %15 ], [ %42, %20 ]
  %243 = phi i8* [ %4, %15 ], [ %40, %20 ]
  %244 = phi i8* [ %6, %15 ], [ %41, %20 ]
  %245 = icmp eq i32 %16, 0
  br i1 %245, label %253, label %246

246:                                              ; preds = %241
  %247 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %243) #3
  %248 = tail call <16 x i8> @llvm.x86.sse3.ldu.dq(i8* %244) #3
  %249 = zext <16 x i8> %247 to <16 x i16>
  %250 = zext <16 x i8> %248 to <16 x i16>
  %251 = sub nsw <16 x i16> %249, %250
  %252 = bitcast i16* %242 to <16 x i16>*
  store <16 x i16> %251, <16 x i16>* %252, align 32
  br label %253

253:                                              ; preds = %137, %80, %47, %246, %241, %135, %78, %45, %13, %240
  ret void
}

declare void @aom_subtract_block_sse2(i32, i32, i16*, i64, i8*, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind readonly
declare <16 x i8> @llvm.x86.sse3.ldu.dq(i8*) #2

; Function Attrs: nounwind readonly
declare <32 x i8> @llvm.x86.avx.ldu.dq.256(i8*) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
