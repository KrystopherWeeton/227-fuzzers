; ModuleID = '../../third_party/breakpad/breakpad/src/client/linux/minidump_writer/linux_core_dumper.cc'
source_filename = "../../third_party/breakpad/breakpad/src/client/linux/minidump_writer/linux_core_dumper.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.google_breakpad::LinuxCoreDumper" = type { %"class.google_breakpad::LinuxDumper", i8*, i8*, %"class.google_breakpad::MemoryMappedFile", %"class.google_breakpad::ElfCoreDump", %"class.google_breakpad::wasteful_vector.23" }
%"class.google_breakpad::LinuxDumper" = type { i32 (...)**, i32, i8*, i64, i32, i32, %"class.std::__1::vector", i32, %"class.google_breakpad::PageAllocator", %"class.google_breakpad::wasteful_vector", %"class.google_breakpad::wasteful_vector.8", %"class.google_breakpad::wasteful_vector.17" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64* }
%"class.google_breakpad::PageAllocator" = type { i64, %"struct.google_breakpad::PageAllocator::PageHeader"*, i8*, i64, i64 }
%"struct.google_breakpad::PageAllocator::PageHeader" = type { %"struct.google_breakpad::PageAllocator::PageHeader"*, i64 }
%"class.google_breakpad::wasteful_vector" = type { %"class.std::__1::vector.1" }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i32*, i32*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4", %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i32* }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.google_breakpad::PageStdAllocator" }
%"struct.google_breakpad::PageStdAllocator" = type { %"class.google_breakpad::PageAllocator"*, i32*, i64 }
%"class.google_breakpad::wasteful_vector.8" = type { %"class.std::__1::vector.9" }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { %"struct.google_breakpad::MappingInfo"**, %"struct.google_breakpad::MappingInfo"**, %"class.std::__1::__compressed_pair.11" }
%"struct.google_breakpad::MappingInfo" = type { i64, i64, %struct.anon, i64, i8, [255 x i8] }
%struct.anon = type { i64, i64 }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12", %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.google_breakpad::MappingInfo"** }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"struct.google_breakpad::PageStdAllocator.14" }
%"struct.google_breakpad::PageStdAllocator.14" = type { %"class.google_breakpad::PageAllocator"*, %"struct.google_breakpad::MappingInfo"**, i64 }
%"class.google_breakpad::wasteful_vector.17" = type { %"class.std::__1::vector.18" }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { i64*, i64*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.google_breakpad::PageStdAllocator.22" }
%"struct.google_breakpad::PageStdAllocator.22" = type { %"class.google_breakpad::PageAllocator"*, i64*, i64 }
%"class.google_breakpad::MemoryMappedFile" = type { %"class.google_breakpad::MemoryRange" }
%"class.google_breakpad::MemoryRange" = type { i8*, i64 }
%"class.google_breakpad::ElfCoreDump" = type <{ %"class.google_breakpad::MemoryRange", i32, [4 x i8] }>
%"class.google_breakpad::wasteful_vector.23" = type { %"class.std::__1::vector.24" }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"struct.google_breakpad::ThreadInfo"*, %"struct.google_breakpad::ThreadInfo"*, %"class.std::__1::__compressed_pair.26" }
%"struct.google_breakpad::ThreadInfo" = type { i32, i32, i64, %struct.user_regs_struct, %struct.user_fpregs_struct, [8 x i64] }
%struct.user_regs_struct = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.user_fpregs_struct = type { i16, i16, i16, i16, i64, i64, i32, i32, [32 x i32], [64 x i32], [24 x i32] }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27", %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"struct.google_breakpad::ThreadInfo"* }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.google_breakpad::PageStdAllocator.29" }
%"struct.google_breakpad::PageStdAllocator.29" = type { %"class.google_breakpad::PageAllocator"*, %"struct.google_breakpad::ThreadInfo"*, i64 }
%"class.google_breakpad::ElfCoreDump::Note" = type { %"class.google_breakpad::MemoryRange" }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN15google_breakpad15LinuxCoreDumperD2Ev = comdat any

$_ZN15google_breakpad15LinuxCoreDumperD0Ev = comdat any

$_ZNSt3__16vectorImNS_9allocatorImEEE6assignIPmEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleImNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZN15google_breakpad13PageAllocator5AllocEm = comdat any

@_ZTVN15google_breakpad15LinuxCoreDumperE = hidden unnamed_addr constant { [14 x i8*] } { [14 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.google_breakpad::LinuxCoreDumper"*)* @_ZN15google_breakpad15LinuxCoreDumperD2Ev to i8*), i8* bitcast (void (%"class.google_breakpad::LinuxCoreDumper"*)* @_ZN15google_breakpad15LinuxCoreDumperD0Ev to i8*), i8* bitcast (i1 (%"class.google_breakpad::LinuxDumper"*)* @_ZN15google_breakpad11LinuxDumper4InitEv to i8*), i8* bitcast (i1 (%"class.google_breakpad::LinuxDumper"*)* @_ZN15google_breakpad11LinuxDumper8LateInitEv to i8*), i8* bitcast (i1 (%"class.google_breakpad::LinuxCoreDumper"*)* @_ZNK15google_breakpad15LinuxCoreDumper12IsPostMortemEv to i8*), i8* bitcast (i1 (%"class.google_breakpad::LinuxCoreDumper"*)* @_ZN15google_breakpad15LinuxCoreDumper14ThreadsSuspendEv to i8*), i8* bitcast (i1 (%"class.google_breakpad::LinuxCoreDumper"*)* @_ZN15google_breakpad15LinuxCoreDumper13ThreadsResumeEv to i8*), i8* bitcast (i1 (%"class.google_breakpad::LinuxCoreDumper"*, i64, %"struct.google_breakpad::ThreadInfo"*)* @_ZN15google_breakpad15LinuxCoreDumper20GetThreadInfoByIndexEmPNS_10ThreadInfoE to i8*), i8* bitcast (i1 (%"class.google_breakpad::LinuxCoreDumper"*, i8*, i32, i8*, i64)* @_ZN15google_breakpad15LinuxCoreDumper15CopyFromProcessEPviPKvm to i8*), i8* bitcast (i1 (%"class.google_breakpad::LinuxCoreDumper"*, i8*, i32, i8*)* @_ZNK15google_breakpad15LinuxCoreDumper13BuildProcPathEPciPKc to i8*), i8* bitcast (i1 (%"class.google_breakpad::LinuxDumper"*)* @_ZN15google_breakpad11LinuxDumper17EnumerateMappingsEv to i8*), i8* bitcast (i1 (%"class.google_breakpad::LinuxCoreDumper"*)* @_ZN15google_breakpad15LinuxCoreDumper16EnumerateThreadsEv to i8*)] }, align 8
@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [42 x i8] c"Could not map core dump file into memory\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"mem\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"Cannot open %s (%s)\0A\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"Invalid core dump file\0A\00", align 1
@.str.4 = private unnamed_addr constant [27 x i8] c"PT_NOTE section not found\0A\00", align 1
@.str.5 = private unnamed_addr constant [34 x i8] c"Could not found a valid PT_NOTE.\0A\00", align 1
@.str.6 = private unnamed_addr constant [49 x i8] c"Found NT_PRSTATUS descriptor of unexpected size\0A\00", align 1
@.str.7 = private unnamed_addr constant [48 x i8] c"Found NT_SIGINFO descriptor of unexpected size\0A\00", align 1
@.str.8 = private unnamed_addr constant [49 x i8] c"Found NT_FPREGSET descriptor of unexpected size\0A\00", align 1

@_ZN15google_breakpad15LinuxCoreDumperC1EiPKcS2_S2_ = hidden unnamed_addr alias void (%"class.google_breakpad::LinuxCoreDumper"*, i32, i8*, i8*, i8*), void (%"class.google_breakpad::LinuxCoreDumper"*, i32, i8*, i8*, i8*)* @_ZN15google_breakpad15LinuxCoreDumperC2EiPKcS2_S2_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15google_breakpad15LinuxCoreDumperC2EiPKcS2_S2_(%"class.google_breakpad::LinuxCoreDumper"*, i32, i8*, i8*, i8*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0
  tail call void @_ZN15google_breakpad11LinuxDumperC2EiPKc(%"class.google_breakpad::LinuxDumper"* %6, i32 %1, i8* %4) #13
  %7 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTVN15google_breakpad15LinuxCoreDumperE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 1
  store i8* %2, i8** %8, align 8
  %9 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 2
  store i8* %3, i8** %9, align 8
  %10 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 3
  tail call void @_ZN15google_breakpad16MemoryMappedFileC1Ev(%"class.google_breakpad::MemoryMappedFile"* %10) #13
  %11 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 4
  tail call void @_ZN15google_breakpad11ElfCoreDumpC1Ev(%"class.google_breakpad::ElfCoreDump"* %11) #13
  %12 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5
  %13 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 8
  %14 = bitcast %"class.google_breakpad::wasteful_vector.23"* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #13
  %15 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  store %"class.google_breakpad::PageAllocator"* %13, %"class.google_breakpad::PageAllocator"** %15, align 8
  %16 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %17 = bitcast %"struct.google_breakpad::ThreadInfo"** %16 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 16, i1 false) #13
  %18 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %19 = bitcast %"struct.google_breakpad::ThreadInfo"** %18 to i64*
  %20 = bitcast %"class.google_breakpad::wasteful_vector.23"* %12 to i64*
  %21 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %22 = bitcast %"struct.google_breakpad::ThreadInfo"** %21 to i64*
  %23 = tail call i8* @_ZN15google_breakpad13PageAllocator5AllocEm(%"class.google_breakpad::PageAllocator"* %13, i64 6464) #13
  %24 = getelementptr inbounds %"class.google_breakpad::wasteful_vector.23", %"class.google_breakpad::wasteful_vector.23"* %12, i64 0, i32 0, i32 0, i32 0
  %25 = load %"struct.google_breakpad::ThreadInfo"*, %"struct.google_breakpad::ThreadInfo"** %24, align 8
  %26 = load %"struct.google_breakpad::ThreadInfo"*, %"struct.google_breakpad::ThreadInfo"** %21, align 8
  %27 = ptrtoint i8* %23 to i64
  %28 = getelementptr inbounds i8, i8* %23, i64 6464
  %29 = ptrtoint i8* %28 to i64
  %30 = icmp eq %"struct.google_breakpad::ThreadInfo"* %26, %25
  br i1 %30, label %43, label %31

31:                                               ; preds = %5
  %32 = bitcast i8* %23 to %"struct.google_breakpad::ThreadInfo"*
  br label %33

33:                                               ; preds = %31, %33
  %34 = phi %"struct.google_breakpad::ThreadInfo"* [ %36, %33 ], [ %32, %31 ]
  %35 = phi %"struct.google_breakpad::ThreadInfo"* [ %37, %33 ], [ %26, %31 ]
  %36 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %34, i64 -1
  %37 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %35, i64 -1
  %38 = bitcast %"struct.google_breakpad::ThreadInfo"* %36 to i8*
  %39 = bitcast %"struct.google_breakpad::ThreadInfo"* %37 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 808, i1 false) #13
  %40 = icmp eq %"struct.google_breakpad::ThreadInfo"* %37, %25
  br i1 %40, label %41, label %33

41:                                               ; preds = %33
  %42 = ptrtoint %"struct.google_breakpad::ThreadInfo"* %36 to i64
  br label %43

43:                                               ; preds = %5, %41
  %44 = phi i64 [ %42, %41 ], [ %27, %5 ]
  store i64 %44, i64* %20, align 8
  store i64 %27, i64* %22, align 8
  store i64 %29, i64* %19, align 8
  ret void
}

declare void @_ZN15google_breakpad11LinuxDumperC2EiPKc(%"class.google_breakpad::LinuxDumper"*, i32, i8*) unnamed_addr #1

declare void @_ZN15google_breakpad16MemoryMappedFileC1Ev(%"class.google_breakpad::MemoryMappedFile"*) unnamed_addr #1

declare void @_ZN15google_breakpad11ElfCoreDumpC1Ev(%"class.google_breakpad::ElfCoreDump"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK15google_breakpad15LinuxCoreDumper13BuildProcPathEPciPKc(%"class.google_breakpad::LinuxCoreDumper"* nocapture readonly, i8*, i32, i8*) unnamed_addr #0 align 2 {
  %5 = icmp ne i8* %1, null
  %6 = icmp ne i8* %3, null
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %23

8:                                                ; preds = %4
  %9 = tail call i64 @my_strlen(i8* nonnull %3) #13
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %23, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 2
  %13 = load i8*, i8** %12, align 8
  %14 = tail call i64 @my_strlen(i8* %13) #13
  %15 = add i64 %9, 1
  %16 = add i64 %15, %14
  %17 = icmp ugt i64 %16, 254
  br i1 %17, label %23, label %18

18:                                               ; preds = %11
  %19 = load i8*, i8** %12, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %1, i8* align 1 %19, i64 %14, i1 false)
  %20 = getelementptr inbounds i8, i8* %1, i64 %14
  store i8 47, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %21, i8* nonnull align 1 %3, i64 %9, i1 false)
  %22 = getelementptr inbounds i8, i8* %1, i64 %16
  store i8 0, i8* %22, align 1
  br label %23

23:                                               ; preds = %8, %11, %18, %4
  %24 = phi i1 [ false, %4 ], [ false, %8 ], [ true, %18 ], [ false, %11 ]
  ret i1 %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @my_strlen(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15google_breakpad15LinuxCoreDumper15CopyFromProcessEPviPKvm(%"class.google_breakpad::LinuxCoreDumper"*, i8*, i32, i8*, i64) unnamed_addr #0 align 2 {
  %6 = ptrtoint i8* %3 to i64
  %7 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 4
  %8 = tail call zeroext i1 @_ZN15google_breakpad11ElfCoreDump8CopyDataEPvmm(%"class.google_breakpad::ElfCoreDump"* %7, i8* %1, i64 %6, i64 %4) #13
  br i1 %8, label %10, label %9

9:                                                ; preds = %5
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 -85, i64 %4, i1 false)
  br label %10

10:                                               ; preds = %5, %9
  %11 = phi i1 [ false, %9 ], [ true, %5 ]
  ret i1 %11
}

declare zeroext i1 @_ZN15google_breakpad11ElfCoreDump8CopyDataEPvmm(%"class.google_breakpad::ElfCoreDump"*, i8*, i64, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15google_breakpad15LinuxCoreDumper20GetThreadInfoByIndexEmPNS_10ThreadInfoE(%"class.google_breakpad::LinuxCoreDumper"* nocapture readonly, i64, %"struct.google_breakpad::ThreadInfo"* nocapture) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0
  %5 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %6 = bitcast %"struct.google_breakpad::ThreadInfo"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.24"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 808
  %12 = icmp ugt i64 %11, %1
  br i1 %12, label %13, label %21

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"struct.google_breakpad::ThreadInfo"*
  %15 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %14, i64 %1
  %16 = bitcast %"struct.google_breakpad::ThreadInfo"* %2 to i8*
  %17 = bitcast %"struct.google_breakpad::ThreadInfo"* %15 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 808, i1 false)
  %18 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %2, i64 0, i32 3, i32 19
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %2, i64 0, i32 2
  store i64 %19, i64* %20, align 8
  br label %21

21:                                               ; preds = %3, %13
  %22 = phi i1 [ true, %13 ], [ false, %3 ]
  ret i1 %22
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK15google_breakpad15LinuxCoreDumper12IsPostMortemEv(%"class.google_breakpad::LinuxCoreDumper"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN15google_breakpad15LinuxCoreDumper14ThreadsSuspendEv(%"class.google_breakpad::LinuxCoreDumper"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN15google_breakpad15LinuxCoreDumper13ThreadsResumeEv(%"class.google_breakpad::LinuxCoreDumper"* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15google_breakpad15LinuxCoreDumper16EnumerateThreadsEv(%"class.google_breakpad::LinuxCoreDumper"*) unnamed_addr #0 align 2 {
  %2 = alloca [255 x i8], align 16
  %3 = alloca %"class.google_breakpad::ElfCoreDump::Note", align 8
  %4 = alloca { i64, %struct.user_regs_struct }, align 8
  %5 = alloca { %struct.user_fpregs_struct, [8 x i64] }, align 8
  %6 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 3
  %7 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 1
  %8 = load i8*, i8** %7, align 8
  %9 = tail call zeroext i1 @_ZN15google_breakpad16MemoryMappedFile3MapEPKcm(%"class.google_breakpad::MemoryMappedFile"* %6, i8* %8, i64 0) #13
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %12 = tail call i64 @fwrite(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0), i64 41, i64 1, %struct._IO_FILE* %11) #14
  br label %467

13:                                               ; preds = %1
  %14 = getelementptr inbounds [255 x i8], [255 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 255, i8* nonnull %14) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 255, i1 false)
  %15 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = bitcast %"class.google_breakpad::LinuxCoreDumper"* %0 to i1 (%"class.google_breakpad::LinuxCoreDumper"*, i8*, i32, i8*)***
  %18 = load i1 (%"class.google_breakpad::LinuxCoreDumper"*, i8*, i32, i8*)**, i1 (%"class.google_breakpad::LinuxCoreDumper"*, i8*, i32, i8*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.google_breakpad::LinuxCoreDumper"*, i8*, i32, i8*)*, i1 (%"class.google_breakpad::LinuxCoreDumper"*, i8*, i32, i8*)** %18, i64 9
  %20 = load i1 (%"class.google_breakpad::LinuxCoreDumper"*, i8*, i32, i8*)*, i1 (%"class.google_breakpad::LinuxCoreDumper"*, i8*, i32, i8*)** %19, align 8
  %21 = call zeroext i1 %20(%"class.google_breakpad::LinuxCoreDumper"* %0, i8* nonnull %14, i32 %16, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0)) #13
  br i1 %21, label %22, label %33

22:                                               ; preds = %13
  %23 = call i32 (i8*, i32, ...) @open64(i8* nonnull %14, i32 524288) #13
  %24 = icmp eq i32 %23, -1
  br i1 %24, label %27, label %25

25:                                               ; preds = %22
  %26 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 4
  call void @_ZN15google_breakpad11ElfCoreDump10SetProcMemEi(%"class.google_breakpad::ElfCoreDump"* %26, i32 %23) #13
  br label %33

27:                                               ; preds = %22
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %29 = tail call i32* @__errno_location() #15
  %30 = load i32, i32* %29, align 4
  %31 = call i8* @strerror(i32 %30) #13
  %32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i8* nonnull %14, i8* %31) #14
  br label %33

33:                                               ; preds = %25, %27, %13
  %34 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 4
  %35 = getelementptr inbounds %"class.google_breakpad::MemoryMappedFile", %"class.google_breakpad::MemoryMappedFile"* %6, i64 0, i32 0
  call void @_ZN15google_breakpad11ElfCoreDump10SetContentERKNS_11MemoryRangeE(%"class.google_breakpad::ElfCoreDump"* %34, %"class.google_breakpad::MemoryRange"* dereferenceable(16) %35) #13
  %36 = call zeroext i1 @_ZNK15google_breakpad11ElfCoreDump7IsValidEv(%"class.google_breakpad::ElfCoreDump"* %34) #13
  br i1 %36, label %40, label %37

37:                                               ; preds = %33
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %39 = call i64 @fwrite(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i64 23, i64 1, %struct._IO_FILE* %38) #14
  br label %465

40:                                               ; preds = %33
  %41 = bitcast %"class.google_breakpad::ElfCoreDump::Note"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #13
  %42 = getelementptr inbounds %"class.google_breakpad::ElfCoreDump::Note", %"class.google_breakpad::ElfCoreDump::Note"* %3, i64 0, i32 0, i32 0
  %43 = getelementptr inbounds %"class.google_breakpad::ElfCoreDump::Note", %"class.google_breakpad::ElfCoreDump::Note"* %3, i64 0, i32 0, i32 1
  %44 = bitcast %"class.google_breakpad::ElfCoreDump::Note"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 -86, i64 16, i1 false)
  %45 = call { i8*, i64 } @_ZNK15google_breakpad11ElfCoreDump12GetFirstNoteEv(%"class.google_breakpad::ElfCoreDump"* %34) #13
  %46 = extractvalue { i8*, i64 } %45, 0
  store i8* %46, i8** %42, align 8
  %47 = extractvalue { i8*, i64 } %45, 1
  store i64 %47, i64* %43, align 8
  %48 = call zeroext i1 @_ZNK15google_breakpad11ElfCoreDump4Note7IsValidEv(%"class.google_breakpad::ElfCoreDump::Note"* nonnull %3) #13
  br i1 %48, label %49, label %80

49:                                               ; preds = %40
  %50 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %51 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %52 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 3
  %53 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 6
  %54 = bitcast { i64, %struct.user_regs_struct }* %4 to i8*
  %55 = bitcast { %struct.user_fpregs_struct, [8 x i64] }* %5 to i8*
  %56 = getelementptr inbounds { i64, %struct.user_regs_struct }, { i64, %struct.user_regs_struct }* %4, i64 0, i32 1
  %57 = bitcast %struct.user_regs_struct* %56 to i8*
  %58 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 7
  %59 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 4
  %60 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 5
  %61 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 9, i32 0
  %62 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 9, i32 0, i32 0, i32 1
  %63 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 9, i32 0, i32 0, i32 2, i32 0, i32 0
  %64 = bitcast i32** %62 to i64*
  %65 = bitcast %"class.std::__1::vector.1"* %61 to i64*
  %66 = bitcast i32** %63 to i64*
  %67 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 9, i32 0, i32 0, i32 2, i32 1, i32 0, i32 2
  %68 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 9, i32 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %69 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 9, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %70 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %61, i64 0, i32 0, i32 0
  %71 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0
  %72 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %73 = bitcast %"struct.google_breakpad::ThreadInfo"** %51 to i64*
  %74 = bitcast %"class.std::__1::vector.24"* %71 to i64*
  %75 = bitcast %"struct.google_breakpad::ThreadInfo"** %72 to i64*
  %76 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 2
  %77 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %78 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %79 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %71, i64 0, i32 0, i32 0
  br label %83

80:                                               ; preds = %40
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %82 = call i64 @fwrite(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0), i64 26, i64 1, %struct._IO_FILE* %81) #14
  br label %463

83:                                               ; preds = %49, %457
  %84 = phi i8 [ %458, %457 ], [ 1, %49 ]
  %85 = call i32 @_ZNK15google_breakpad11ElfCoreDump4Note7GetTypeEv(%"class.google_breakpad::ElfCoreDump::Note"* nonnull %3) #13
  %86 = call { i8*, i64 } @_ZNK15google_breakpad11ElfCoreDump4Note7GetNameEv(%"class.google_breakpad::ElfCoreDump::Note"* nonnull %3) #13
  %87 = extractvalue { i8*, i64 } %86, 1
  %88 = call { i8*, i64 } @_ZNK15google_breakpad11ElfCoreDump4Note14GetDescriptionEv(%"class.google_breakpad::ElfCoreDump::Note"* nonnull %3) #13
  %89 = extractvalue { i8*, i64 } %88, 0
  %90 = extractvalue { i8*, i64 } %88, 1
  %91 = icmp eq i32 %85, 0
  %92 = icmp eq i64 %87, 0
  %93 = or i1 %91, %92
  %94 = icmp eq i64 %90, 0
  %95 = or i1 %93, %94
  br i1 %95, label %96, label %99

96:                                               ; preds = %83
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %98 = call i64 @fwrite(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0), i64 33, i64 1, %struct._IO_FILE* %97) #14
  br label %463

99:                                               ; preds = %83
  switch i32 %85, label %457 [
    i32 1, label %100
    i32 1397311305, label %400
    i32 2, label %445
  ]

100:                                              ; preds = %99
  %101 = icmp eq i64 %90, 336
  br i1 %101, label %105, label %102

102:                                              ; preds = %100
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %104 = call i64 @fwrite(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.6, i64 0, i64 0), i64 48, i64 1, %struct._IO_FILE* %103) #14
  br label %463

105:                                              ; preds = %100
  %106 = getelementptr inbounds i8, i8* %89, i64 32
  %107 = bitcast i8* %106 to i32*
  %108 = load i32, i32* %107, align 8
  call void @llvm.lifetime.start.p0i8(i64 224, i8* nonnull %54)
  call void @llvm.lifetime.start.p0i8(i64 576, i8* nonnull %55)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %54, i8 0, i64 224, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 0, i64 576, i1 false)
  %109 = getelementptr inbounds i8, i8* %89, i64 40
  %110 = bitcast i8* %109 to i32*
  %111 = load i32, i32* %110, align 8
  %112 = getelementptr inbounds i8, i8* %89, i64 36
  %113 = bitcast i8* %112 to i32*
  %114 = load i32, i32* %113, align 4
  %115 = getelementptr inbounds i8, i8* %89, i64 112
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %115, i64 216, i1 false)
  %116 = and i8 %84, 1
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %124, label %118

118:                                              ; preds = %105
  store i32 %108, i32* %58, align 8
  %119 = bitcast i8* %89 to i32*
  %120 = load i32, i32* %119, align 8
  store i32 %120, i32* %59, align 8
  %121 = getelementptr inbounds i8, i8* %89, i64 4
  %122 = bitcast i8* %121 to i32*
  %123 = load i32, i32* %122, align 4
  store i32 %123, i32* %60, align 4
  br label %124

124:                                              ; preds = %105, %118
  %125 = load i32*, i32** %62, align 8
  %126 = load i32*, i32** %63, align 8
  %127 = icmp eq i32* %125, %126
  %128 = ptrtoint i32* %126 to i64
  br i1 %127, label %132, label %129

129:                                              ; preds = %124
  store i32 %108, i32* %125, align 4
  %130 = getelementptr inbounds i32, i32* %125, i64 1
  %131 = ptrtoint i32* %130 to i64
  store i64 %131, i64* %64, align 8
  br label %328

132:                                              ; preds = %124
  %133 = ptrtoint i32* %125 to i64
  %134 = load i64, i64* %65, align 8
  %135 = sub i64 %133, %134
  %136 = ashr exact i64 %135, 2
  %137 = add nsw i64 %136, 1
  %138 = icmp ugt i64 %137, 4611686018427387903
  br i1 %138, label %139, label %141

139:                                              ; preds = %132
  %140 = bitcast %"class.std::__1::vector.1"* %61 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %140) #16
  unreachable

141:                                              ; preds = %132
  %142 = sub i64 %128, %134
  %143 = ashr exact i64 %142, 2
  %144 = icmp ult i64 %143, 2305843009213693951
  br i1 %144, label %145, label %150

145:                                              ; preds = %141
  %146 = ashr exact i64 %142, 1
  %147 = icmp ult i64 %146, %137
  %148 = select i1 %147, i64 %137, i64 %146
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %161, label %150

150:                                              ; preds = %145, %141
  %151 = phi i64 [ %148, %145 ], [ 4611686018427387903, %141 ]
  %152 = shl i64 %151, 2
  %153 = load i64, i64* %67, align 8
  %154 = icmp ugt i64 %152, %153
  br i1 %154, label %157, label %155

155:                                              ; preds = %150
  %156 = load i32*, i32** %68, align 8
  br label %161

157:                                              ; preds = %150
  %158 = load %"class.google_breakpad::PageAllocator"*, %"class.google_breakpad::PageAllocator"** %69, align 8
  %159 = call i8* @_ZN15google_breakpad13PageAllocator5AllocEm(%"class.google_breakpad::PageAllocator"* %158, i64 %152) #13
  %160 = bitcast i8* %159 to i32*
  br label %161

161:                                              ; preds = %157, %155, %145
  %162 = phi i64 [ 0, %145 ], [ %151, %155 ], [ %151, %157 ]
  %163 = phi i32* [ null, %145 ], [ %156, %155 ], [ %160, %157 ]
  %164 = getelementptr inbounds i32, i32* %163, i64 %136
  %165 = getelementptr inbounds i32, i32* %163, i64 %162
  %166 = ptrtoint i32* %165 to i64
  store i32 %108, i32* %164, align 4
  %167 = getelementptr inbounds i32, i32* %164, i64 1
  %168 = ptrtoint i32* %167 to i64
  %169 = load i32*, i32** %70, align 8
  %170 = ptrtoint i32* %169 to i64
  %171 = load i32*, i32** %62, align 8
  %172 = icmp eq i32* %171, %169
  br i1 %172, label %325, label %173

173:                                              ; preds = %161
  %174 = getelementptr i32, i32* %171, i64 -1
  %175 = ptrtoint i32* %174 to i64
  %176 = sub i64 %175, %170
  %177 = lshr i64 %176, 2
  %178 = add nuw nsw i64 %177, 1
  %179 = icmp ult i64 %178, 8
  br i1 %179, label %273, label %180

180:                                              ; preds = %173
  %181 = getelementptr i32, i32* %163, i64 -1
  %182 = getelementptr i32, i32* %171, i64 -1
  %183 = ptrtoint i32* %182 to i64
  %184 = sub i64 %183, %170
  %185 = lshr i64 %184, 2
  %186 = sub nsw i64 %136, %185
  %187 = getelementptr i32, i32* %181, i64 %186
  %188 = getelementptr i32, i32* %171, i64 -1
  %189 = sub nsw i64 0, %185
  %190 = getelementptr i32, i32* %188, i64 %189
  %191 = icmp ult i32* %187, %171
  %192 = icmp ult i32* %190, %164
  %193 = and i1 %191, %192
  br i1 %193, label %273, label %194

194:                                              ; preds = %180
  %195 = and i64 %178, 9223372036854775800
  %196 = sub nsw i64 0, %195
  %197 = getelementptr i32, i32* %164, i64 %196
  %198 = sub nsw i64 0, %195
  %199 = getelementptr i32, i32* %171, i64 %198
  %200 = add nsw i64 %195, -8
  %201 = lshr exact i64 %200, 3
  %202 = add nuw nsw i64 %201, 1
  %203 = and i64 %202, 1
  %204 = icmp eq i64 %200, 0
  br i1 %204, label %249, label %205

205:                                              ; preds = %194
  %206 = sub nuw nsw i64 %202, %203
  %207 = getelementptr i32, i32* %164, i64 -1
  %208 = getelementptr i32, i32* %171, i64 -1
  %209 = getelementptr i32, i32* %164, i64 -1
  %210 = getelementptr i32, i32* %171, i64 -1
  br label %211

211:                                              ; preds = %211, %205
  %212 = phi i64 [ 0, %205 ], [ %246, %211 ]
  %213 = phi i64 [ %206, %205 ], [ %247, %211 ]
  %214 = sub i64 0, %212
  %215 = sub i64 0, %212
  %216 = getelementptr inbounds i32, i32* %207, i64 %214
  %217 = getelementptr inbounds i32, i32* %208, i64 %215
  %218 = getelementptr inbounds i32, i32* %217, i64 -3
  %219 = bitcast i32* %218 to <4 x i32>*
  %220 = load <4 x i32>, <4 x i32>* %219, align 4, !alias.scope !2
  %221 = getelementptr inbounds i32, i32* %217, i64 -4
  %222 = getelementptr inbounds i32, i32* %221, i64 -3
  %223 = bitcast i32* %222 to <4 x i32>*
  %224 = load <4 x i32>, <4 x i32>* %223, align 4, !alias.scope !2
  %225 = getelementptr inbounds i32, i32* %216, i64 -3
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %220, <4 x i32>* %226, align 4, !alias.scope !5, !noalias !2
  %227 = getelementptr inbounds i32, i32* %216, i64 -4
  %228 = getelementptr inbounds i32, i32* %227, i64 -3
  %229 = bitcast i32* %228 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %229, align 4, !alias.scope !5, !noalias !2
  %230 = sub nuw nsw i64 -8, %212
  %231 = sub nuw nsw i64 -8, %212
  %232 = getelementptr inbounds i32, i32* %209, i64 %230
  %233 = getelementptr inbounds i32, i32* %210, i64 %231
  %234 = getelementptr inbounds i32, i32* %233, i64 -3
  %235 = bitcast i32* %234 to <4 x i32>*
  %236 = load <4 x i32>, <4 x i32>* %235, align 4, !alias.scope !2
  %237 = getelementptr inbounds i32, i32* %233, i64 -4
  %238 = getelementptr inbounds i32, i32* %237, i64 -3
  %239 = bitcast i32* %238 to <4 x i32>*
  %240 = load <4 x i32>, <4 x i32>* %239, align 4, !alias.scope !2
  %241 = getelementptr inbounds i32, i32* %232, i64 -3
  %242 = bitcast i32* %241 to <4 x i32>*
  store <4 x i32> %236, <4 x i32>* %242, align 4, !alias.scope !5, !noalias !2
  %243 = getelementptr inbounds i32, i32* %232, i64 -4
  %244 = getelementptr inbounds i32, i32* %243, i64 -3
  %245 = bitcast i32* %244 to <4 x i32>*
  store <4 x i32> %240, <4 x i32>* %245, align 4, !alias.scope !5, !noalias !2
  %246 = add i64 %212, 16
  %247 = add i64 %213, -2
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %211, !llvm.loop !7

249:                                              ; preds = %211, %194
  %250 = phi i64 [ 0, %194 ], [ %246, %211 ]
  %251 = icmp eq i64 %203, 0
  br i1 %251, label %271, label %252

252:                                              ; preds = %249
  %253 = sub i64 0, %250
  %254 = getelementptr i32, i32* %164, i64 -1
  %255 = sub i64 0, %250
  %256 = getelementptr i32, i32* %171, i64 -1
  %257 = getelementptr inbounds i32, i32* %254, i64 %253
  %258 = getelementptr inbounds i32, i32* %256, i64 %255
  %259 = getelementptr inbounds i32, i32* %258, i64 -3
  %260 = bitcast i32* %259 to <4 x i32>*
  %261 = load <4 x i32>, <4 x i32>* %260, align 4, !alias.scope !2
  %262 = getelementptr inbounds i32, i32* %258, i64 -4
  %263 = getelementptr inbounds i32, i32* %262, i64 -3
  %264 = bitcast i32* %263 to <4 x i32>*
  %265 = load <4 x i32>, <4 x i32>* %264, align 4, !alias.scope !2
  %266 = getelementptr inbounds i32, i32* %257, i64 -3
  %267 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> %261, <4 x i32>* %267, align 4, !alias.scope !5, !noalias !2
  %268 = getelementptr inbounds i32, i32* %257, i64 -4
  %269 = getelementptr inbounds i32, i32* %268, i64 -3
  %270 = bitcast i32* %269 to <4 x i32>*
  store <4 x i32> %265, <4 x i32>* %270, align 4, !alias.scope !5, !noalias !2
  br label %271

271:                                              ; preds = %249, %252
  %272 = icmp eq i64 %178, %195
  br i1 %272, label %325, label %273

273:                                              ; preds = %271, %180, %173
  %274 = phi i32* [ %164, %180 ], [ %164, %173 ], [ %197, %271 ]
  %275 = phi i32* [ %171, %180 ], [ %171, %173 ], [ %199, %271 ]
  %276 = getelementptr i32, i32* %275, i64 -1
  %277 = ptrtoint i32* %276 to i64
  %278 = sub i64 %277, %170
  %279 = lshr i64 %278, 2
  %280 = add nuw nsw i64 %279, 1
  %281 = and i64 %280, 7
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %292, label %283

283:                                              ; preds = %273, %283
  %284 = phi i32* [ %287, %283 ], [ %274, %273 ]
  %285 = phi i32* [ %288, %283 ], [ %275, %273 ]
  %286 = phi i64 [ %290, %283 ], [ %281, %273 ]
  %287 = getelementptr inbounds i32, i32* %284, i64 -1
  %288 = getelementptr inbounds i32, i32* %285, i64 -1
  %289 = load i32, i32* %288, align 4
  store i32 %289, i32* %287, align 4
  %290 = add i64 %286, -1
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %283, !llvm.loop !9

292:                                              ; preds = %283, %273
  %293 = phi i32* [ undef, %273 ], [ %287, %283 ]
  %294 = phi i32* [ %274, %273 ], [ %287, %283 ]
  %295 = phi i32* [ %275, %273 ], [ %288, %283 ]
  %296 = icmp ult i64 %278, 28
  br i1 %296, label %325, label %297

297:                                              ; preds = %292, %297
  %298 = phi i32* [ %321, %297 ], [ %294, %292 ]
  %299 = phi i32* [ %322, %297 ], [ %295, %292 ]
  %300 = getelementptr inbounds i32, i32* %298, i64 -1
  %301 = getelementptr inbounds i32, i32* %299, i64 -1
  %302 = load i32, i32* %301, align 4
  store i32 %302, i32* %300, align 4
  %303 = getelementptr inbounds i32, i32* %298, i64 -2
  %304 = getelementptr inbounds i32, i32* %299, i64 -2
  %305 = load i32, i32* %304, align 4
  store i32 %305, i32* %303, align 4
  %306 = getelementptr inbounds i32, i32* %298, i64 -3
  %307 = getelementptr inbounds i32, i32* %299, i64 -3
  %308 = load i32, i32* %307, align 4
  store i32 %308, i32* %306, align 4
  %309 = getelementptr inbounds i32, i32* %298, i64 -4
  %310 = getelementptr inbounds i32, i32* %299, i64 -4
  %311 = load i32, i32* %310, align 4
  store i32 %311, i32* %309, align 4
  %312 = getelementptr inbounds i32, i32* %298, i64 -5
  %313 = getelementptr inbounds i32, i32* %299, i64 -5
  %314 = load i32, i32* %313, align 4
  store i32 %314, i32* %312, align 4
  %315 = getelementptr inbounds i32, i32* %298, i64 -6
  %316 = getelementptr inbounds i32, i32* %299, i64 -6
  %317 = load i32, i32* %316, align 4
  store i32 %317, i32* %315, align 4
  %318 = getelementptr inbounds i32, i32* %298, i64 -7
  %319 = getelementptr inbounds i32, i32* %299, i64 -7
  %320 = load i32, i32* %319, align 4
  store i32 %320, i32* %318, align 4
  %321 = getelementptr inbounds i32, i32* %298, i64 -8
  %322 = getelementptr inbounds i32, i32* %299, i64 -8
  %323 = load i32, i32* %322, align 4
  store i32 %323, i32* %321, align 4
  %324 = icmp eq i32* %322, %169
  br i1 %324, label %325, label %297, !llvm.loop !11

325:                                              ; preds = %292, %297, %271, %161
  %326 = phi i32* [ %164, %161 ], [ %197, %271 ], [ %293, %292 ], [ %321, %297 ]
  %327 = ptrtoint i32* %326 to i64
  store i64 %327, i64* %65, align 8
  store i64 %168, i64* %64, align 8
  store i64 %166, i64* %66, align 8
  br label %328

328:                                              ; preds = %129, %325
  %329 = load %"struct.google_breakpad::ThreadInfo"*, %"struct.google_breakpad::ThreadInfo"** %51, align 8
  %330 = load %"struct.google_breakpad::ThreadInfo"*, %"struct.google_breakpad::ThreadInfo"** %72, align 8
  %331 = icmp eq %"struct.google_breakpad::ThreadInfo"* %329, %330
  %332 = ptrtoint %"struct.google_breakpad::ThreadInfo"* %330 to i64
  br i1 %331, label %342, label %333

333:                                              ; preds = %328
  %334 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %329, i64 0, i32 0
  store i32 %111, i32* %334, align 8
  %335 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %329, i64 0, i32 1
  store i32 %114, i32* %335, align 4
  %336 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %329, i64 0, i32 2
  %337 = bitcast i64* %336 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %337, i8* nonnull align 8 %54, i64 224, i1 false)
  %338 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %329, i64 0, i32 4
  %339 = bitcast %struct.user_fpregs_struct* %338 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %339, i8* nonnull align 8 %55, i64 576, i1 false)
  %340 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %329, i64 1
  %341 = ptrtoint %"struct.google_breakpad::ThreadInfo"* %340 to i64
  store i64 %341, i64* %73, align 8
  br label %399

342:                                              ; preds = %328
  %343 = ptrtoint %"struct.google_breakpad::ThreadInfo"* %329 to i64
  %344 = load i64, i64* %74, align 8
  %345 = sub i64 %343, %344
  %346 = sdiv exact i64 %345, 808
  %347 = add nsw i64 %346, 1
  %348 = icmp ugt i64 %347, 22830128804095979
  br i1 %348, label %349, label %351

349:                                              ; preds = %342
  %350 = bitcast %"class.std::__1::vector.24"* %71 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %350) #16
  unreachable

351:                                              ; preds = %342
  %352 = sub i64 %332, %344
  %353 = sdiv exact i64 %352, 808
  %354 = icmp ult i64 %353, 11415064402047989
  br i1 %354, label %355, label %360

355:                                              ; preds = %351
  %356 = shl nsw i64 %353, 1
  %357 = icmp ult i64 %356, %347
  %358 = select i1 %357, i64 %347, i64 %356
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %371, label %360

360:                                              ; preds = %355, %351
  %361 = phi i64 [ %358, %355 ], [ 22830128804095979, %351 ]
  %362 = mul i64 %361, 808
  %363 = load i64, i64* %76, align 8
  %364 = icmp ugt i64 %362, %363
  br i1 %364, label %367, label %365

365:                                              ; preds = %360
  %366 = load %"struct.google_breakpad::ThreadInfo"*, %"struct.google_breakpad::ThreadInfo"** %77, align 8
  br label %371

367:                                              ; preds = %360
  %368 = load %"class.google_breakpad::PageAllocator"*, %"class.google_breakpad::PageAllocator"** %78, align 8
  %369 = call i8* @_ZN15google_breakpad13PageAllocator5AllocEm(%"class.google_breakpad::PageAllocator"* %368, i64 %362) #13
  %370 = bitcast i8* %369 to %"struct.google_breakpad::ThreadInfo"*
  br label %371

371:                                              ; preds = %367, %365, %355
  %372 = phi i64 [ 0, %355 ], [ %361, %365 ], [ %361, %367 ]
  %373 = phi %"struct.google_breakpad::ThreadInfo"* [ null, %355 ], [ %366, %365 ], [ %370, %367 ]
  %374 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %373, i64 %346
  %375 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %373, i64 %372
  %376 = ptrtoint %"struct.google_breakpad::ThreadInfo"* %375 to i64
  %377 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %374, i64 0, i32 0
  store i32 %111, i32* %377, align 8
  %378 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %373, i64 %346, i32 1
  store i32 %114, i32* %378, align 4
  %379 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %373, i64 %346, i32 2
  %380 = bitcast i64* %379 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %380, i8* nonnull align 8 %54, i64 224, i1 false)
  %381 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %373, i64 %346, i32 4
  %382 = bitcast %struct.user_fpregs_struct* %381 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %382, i8* nonnull align 8 %55, i64 576, i1 false)
  %383 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %374, i64 1
  %384 = ptrtoint %"struct.google_breakpad::ThreadInfo"* %383 to i64
  %385 = load %"struct.google_breakpad::ThreadInfo"*, %"struct.google_breakpad::ThreadInfo"** %79, align 8
  %386 = load %"struct.google_breakpad::ThreadInfo"*, %"struct.google_breakpad::ThreadInfo"** %51, align 8
  %387 = icmp eq %"struct.google_breakpad::ThreadInfo"* %386, %385
  br i1 %387, label %396, label %388

388:                                              ; preds = %371, %388
  %389 = phi %"struct.google_breakpad::ThreadInfo"* [ %391, %388 ], [ %374, %371 ]
  %390 = phi %"struct.google_breakpad::ThreadInfo"* [ %392, %388 ], [ %386, %371 ]
  %391 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %389, i64 -1
  %392 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %390, i64 -1
  %393 = bitcast %"struct.google_breakpad::ThreadInfo"* %391 to i8*
  %394 = bitcast %"struct.google_breakpad::ThreadInfo"* %392 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %393, i8* align 8 %394, i64 808, i1 false) #13
  %395 = icmp eq %"struct.google_breakpad::ThreadInfo"* %392, %385
  br i1 %395, label %396, label %388

396:                                              ; preds = %388, %371
  %397 = phi %"struct.google_breakpad::ThreadInfo"* [ %374, %371 ], [ %391, %388 ]
  %398 = ptrtoint %"struct.google_breakpad::ThreadInfo"* %397 to i64
  store i64 %398, i64* %74, align 8
  store i64 %384, i64* %73, align 8
  store i64 %376, i64* %75, align 8
  br label %399

399:                                              ; preds = %333, %396
  call void @llvm.lifetime.end.p0i8(i64 224, i8* nonnull %54)
  call void @llvm.lifetime.end.p0i8(i64 576, i8* nonnull %55)
  br label %457

400:                                              ; preds = %99
  %401 = icmp eq i64 %90, 128
  br i1 %401, label %405, label %402

402:                                              ; preds = %400
  %403 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %404 = call i64 @fwrite(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.7, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %403) #14
  br label %463

405:                                              ; preds = %400
  %406 = bitcast i8* %89 to i32*
  %407 = load i32, i32* %406, align 8
  switch i32 %407, label %413 [
    i32 7, label %408
    i32 8, label %408
    i32 4, label %408
    i32 11, label %408
    i32 31, label %408
    i32 5, label %408
  ]

408:                                              ; preds = %405, %405, %405, %405, %405, %405
  %409 = getelementptr inbounds i8, i8* %89, i64 16
  %410 = bitcast i8* %409 to i64*
  %411 = load i64, i64* %410, align 8
  store i64 %411, i64* %52, align 8
  %412 = load i32, i32* %406, align 8
  br label %413

413:                                              ; preds = %405, %408
  %414 = phi i32 [ %407, %405 ], [ %412, %408 ]
  switch i32 %414, label %457 [
    i32 9, label %415
    i32 31, label %430
  ]

415:                                              ; preds = %413
  %416 = getelementptr inbounds i8, i8* %89, i64 16
  %417 = bitcast i8* %416 to i32*
  %418 = load i32, i32* %417, align 8
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds i8, i8* %89, i64 20
  %421 = bitcast i8* %420 to i32*
  %422 = load i32, i32* %421, align 4
  %423 = zext i32 %422 to i64
  %424 = call i8* @_Znwm(i64 16) #17
  %425 = bitcast i8* %424 to i64*
  %426 = getelementptr inbounds i8, i8* %424, i64 16
  store i64 %419, i64* %425, align 8
  %427 = getelementptr inbounds i8, i8* %424, i64 8
  %428 = bitcast i8* %427 to i64*
  store i64 %423, i64* %428, align 8
  %429 = bitcast i8* %426 to i64*
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE6assignIPmEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleImNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %53, i64* nonnull %425, i64* %429) #13
  call void @_ZdlPv(i8* nonnull %424) #17
  br label %457

430:                                              ; preds = %413
  %431 = getelementptr inbounds i8, i8* %89, i64 24
  %432 = bitcast i8* %431 to i32*
  %433 = load i32, i32* %432, align 8
  %434 = sext i32 %433 to i64
  %435 = getelementptr inbounds i8, i8* %89, i64 28
  %436 = bitcast i8* %435 to i32*
  %437 = load i32, i32* %436, align 4
  %438 = zext i32 %437 to i64
  %439 = call i8* @_Znwm(i64 16) #17
  %440 = bitcast i8* %439 to i64*
  %441 = getelementptr inbounds i8, i8* %439, i64 16
  store i64 %434, i64* %440, align 8
  %442 = getelementptr inbounds i8, i8* %439, i64 8
  %443 = bitcast i8* %442 to i64*
  store i64 %438, i64* %443, align 8
  %444 = bitcast i8* %441 to i64*
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE6assignIPmEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleImNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %53, i64* nonnull %440, i64* %444) #13
  call void @_ZdlPv(i8* nonnull %439) #17
  br label %457

445:                                              ; preds = %99
  %446 = load %"struct.google_breakpad::ThreadInfo"*, %"struct.google_breakpad::ThreadInfo"** %50, align 8
  %447 = load %"struct.google_breakpad::ThreadInfo"*, %"struct.google_breakpad::ThreadInfo"** %51, align 8
  %448 = icmp eq %"struct.google_breakpad::ThreadInfo"* %446, %447
  br i1 %448, label %463, label %449

449:                                              ; preds = %445
  %450 = icmp eq i64 %90, 512
  br i1 %450, label %454, label %451

451:                                              ; preds = %449
  %452 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %453 = call i64 @fwrite(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.8, i64 0, i64 0), i64 48, i64 1, %struct._IO_FILE* %452) #14
  br label %463

454:                                              ; preds = %449
  %455 = getelementptr inbounds %"struct.google_breakpad::ThreadInfo", %"struct.google_breakpad::ThreadInfo"* %447, i64 -1, i32 4
  %456 = bitcast %struct.user_fpregs_struct* %455 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %456, i8* align 1 %89, i64 512, i1 false)
  br label %457

457:                                              ; preds = %454, %415, %430, %413, %99, %399
  %458 = phi i8 [ %84, %99 ], [ %84, %454 ], [ %84, %413 ], [ %84, %430 ], [ %84, %415 ], [ 0, %399 ]
  %459 = call { i8*, i64 } @_ZNK15google_breakpad11ElfCoreDump4Note11GetNextNoteEv(%"class.google_breakpad::ElfCoreDump::Note"* nonnull %3) #13
  %460 = extractvalue { i8*, i64 } %459, 0
  %461 = extractvalue { i8*, i64 } %459, 1
  store i8* %460, i8** %42, align 8
  store i64 %461, i64* %43, align 8
  %462 = call zeroext i1 @_ZNK15google_breakpad11ElfCoreDump4Note7IsValidEv(%"class.google_breakpad::ElfCoreDump::Note"* nonnull %3) #13
  br i1 %462, label %83, label %463

463:                                              ; preds = %445, %457, %451, %102, %402, %96, %80
  %464 = phi i1 [ false, %80 ], [ false, %96 ], [ false, %402 ], [ false, %102 ], [ false, %451 ], [ false, %445 ], [ true, %457 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #13
  br label %465

465:                                              ; preds = %463, %37
  %466 = phi i1 [ %464, %463 ], [ false, %37 ]
  call void @llvm.lifetime.end.p0i8(i64 255, i8* nonnull %14) #13
  br label %467

467:                                              ; preds = %465, %10
  %468 = phi i1 [ %466, %465 ], [ false, %10 ]
  ret i1 %468
}

declare zeroext i1 @_ZN15google_breakpad16MemoryMappedFile3MapEPKcm(%"class.google_breakpad::MemoryMappedFile"*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #4

; Function Attrs: nofree
declare i32 @open64(i8* nocapture readonly, i32, ...) local_unnamed_addr #5

declare void @_ZN15google_breakpad11ElfCoreDump10SetProcMemEi(%"class.google_breakpad::ElfCoreDump"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare i8* @strerror(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #7

declare void @_ZN15google_breakpad11ElfCoreDump10SetContentERKNS_11MemoryRangeE(%"class.google_breakpad::ElfCoreDump"*, %"class.google_breakpad::MemoryRange"* dereferenceable(16)) local_unnamed_addr #1

declare zeroext i1 @_ZNK15google_breakpad11ElfCoreDump7IsValidEv(%"class.google_breakpad::ElfCoreDump"*) local_unnamed_addr #1

declare { i8*, i64 } @_ZNK15google_breakpad11ElfCoreDump12GetFirstNoteEv(%"class.google_breakpad::ElfCoreDump"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK15google_breakpad11ElfCoreDump4Note7IsValidEv(%"class.google_breakpad::ElfCoreDump::Note"*) local_unnamed_addr #1

declare i32 @_ZNK15google_breakpad11ElfCoreDump4Note7GetTypeEv(%"class.google_breakpad::ElfCoreDump::Note"*) local_unnamed_addr #1

declare { i8*, i64 } @_ZNK15google_breakpad11ElfCoreDump4Note7GetNameEv(%"class.google_breakpad::ElfCoreDump::Note"*) local_unnamed_addr #1

declare { i8*, i64 } @_ZNK15google_breakpad11ElfCoreDump4Note14GetDescriptionEv(%"class.google_breakpad::ElfCoreDump::Note"*) local_unnamed_addr #1

declare { i8*, i64 } @_ZNK15google_breakpad11ElfCoreDump4Note11GetNextNoteEv(%"class.google_breakpad::ElfCoreDump::Note"*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN15google_breakpad15LinuxCoreDumperD2Ev(%"class.google_breakpad::LinuxCoreDumper"*) unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTVN15google_breakpad15LinuxCoreDumperE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %"struct.google_breakpad::ThreadInfo"*, %"struct.google_breakpad::ThreadInfo"** %3, align 8
  %5 = icmp eq %"struct.google_breakpad::ThreadInfo"* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"struct.google_breakpad::ThreadInfo"* %4 to i64
  %8 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %9 = bitcast %"struct.google_breakpad::ThreadInfo"** %8 to i64*
  store i64 %7, i64* %9, align 8
  br label %10

10:                                               ; preds = %1, %6
  %11 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 4
  tail call void @_ZN15google_breakpad11ElfCoreDumpD1Ev(%"class.google_breakpad::ElfCoreDump"* %11) #13
  %12 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 3
  tail call void @_ZN15google_breakpad16MemoryMappedFileD1Ev(%"class.google_breakpad::MemoryMappedFile"* %12) #13
  %13 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0
  tail call void @_ZN15google_breakpad11LinuxDumperD2Ev(%"class.google_breakpad::LinuxDumper"* %13) #13
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN15google_breakpad15LinuxCoreDumperD0Ev(%"class.google_breakpad::LinuxCoreDumper"*) unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTVN15google_breakpad15LinuxCoreDumperE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %"struct.google_breakpad::ThreadInfo"*, %"struct.google_breakpad::ThreadInfo"** %3, align 8
  %5 = icmp eq %"struct.google_breakpad::ThreadInfo"* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"struct.google_breakpad::ThreadInfo"* %4 to i64
  %8 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %9 = bitcast %"struct.google_breakpad::ThreadInfo"** %8 to i64*
  store i64 %7, i64* %9, align 8
  br label %10

10:                                               ; preds = %1, %6
  %11 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 4
  tail call void @_ZN15google_breakpad11ElfCoreDumpD1Ev(%"class.google_breakpad::ElfCoreDump"* %11) #13
  %12 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 3
  tail call void @_ZN15google_breakpad16MemoryMappedFileD1Ev(%"class.google_breakpad::MemoryMappedFile"* %12) #13
  %13 = getelementptr inbounds %"class.google_breakpad::LinuxCoreDumper", %"class.google_breakpad::LinuxCoreDumper"* %0, i64 0, i32 0
  tail call void @_ZN15google_breakpad11LinuxDumperD2Ev(%"class.google_breakpad::LinuxDumper"* %13) #13
  %14 = bitcast %"class.google_breakpad::LinuxCoreDumper"* %0 to i8*
  tail call void @_ZdlPv(i8* %14) #17
  ret void
}

declare zeroext i1 @_ZN15google_breakpad11LinuxDumper4InitEv(%"class.google_breakpad::LinuxDumper"*) unnamed_addr #1

declare zeroext i1 @_ZN15google_breakpad11LinuxDumper8LateInitEv(%"class.google_breakpad::LinuxDumper"*) unnamed_addr #1

declare zeroext i1 @_ZN15google_breakpad11LinuxDumper17EnumerateMappingsEv(%"class.google_breakpad::LinuxDumper"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorImNS_9allocatorImEEE6assignIPmEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleImNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"*, i64*, i64*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint i64* %2 to i64
  %5 = ptrtoint i64* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 3
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i64** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 3
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i64*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i64** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 3
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i64, i64* %1, i64 %22
  %25 = select i1 %23, i64* %24, i64* %2
  %26 = ptrtoint i64* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 3
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i64* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %27, i1 false) #13
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 3
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i64* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 %36, i1 false) #13
  %42 = inttoptr i64 %35 to i64*
  %43 = getelementptr inbounds i64, i64* %42, i64 %39
  %44 = ptrtoint i64* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i64, i64* %16, i64 %28
  store i64* %48, i64** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i64** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #17
  %55 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #13
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 2305843009213693951
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #16
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 3
  %63 = icmp ult i64 %62, 1152921504606846975
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 2
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 2305843009213693951
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #16
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 2305843009213693951, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 3
  %74 = tail call i8* @_Znwm(i64 %73) #17
  %75 = bitcast i8* %74 to i64*
  %76 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i64** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i64, i64* %75, i64 %72
  store i64* %79, i64** %8, align 8
  %80 = bitcast i64** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 3
  %85 = bitcast i64* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %74, i8* align 8 %85, i64 %6, i1 false) #13
  %86 = getelementptr inbounds i64, i64* %75, i64 %84
  %87 = ptrtoint i64* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nounwind
declare void @_ZN15google_breakpad11ElfCoreDumpD1Ev(%"class.google_breakpad::ElfCoreDump"*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN15google_breakpad16MemoryMappedFileD1Ev(%"class.google_breakpad::MemoryMappedFile"*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN15google_breakpad11LinuxDumperD2Ev(%"class.google_breakpad::LinuxDumper"*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN15google_breakpad13PageAllocator5AllocEm(%"class.google_breakpad::PageAllocator"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %62, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 0
  %9 = load i64, i64* %8, align 8
  br i1 %7, label %21, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %9, %12
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %21, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds i8, i8* %6, i64 %12
  %17 = add i64 %12, %1
  store i64 %17, i64* %11, align 8
  %18 = icmp eq i64 %17, %9
  br i1 %18, label %19, label %62

19:                                               ; preds = %15
  %20 = bitcast i8** %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false)
  br label %62

21:                                               ; preds = %4, %10
  %22 = add i64 %1, 16
  %23 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 0
  %24 = add i64 %1, 15
  %25 = add i64 %24, %9
  %26 = udiv i64 %25, %9
  %27 = mul i64 %26, %9
  %28 = tail call i64 asm sideeffect "movq $5,%r10;movq $6,%r8;movq $7,%r9;syscall\0A", "={ax},0,{di},{si},{dx},r,r,r,~{r10},~{r8},~{r9},~{r11},~{rcx},~{memory},~{dirflag},~{fpsr},~{flags}"(i64 9, i64 0, i64 %27, i64 3, i64 34, i64 -1, i64 0) #13, !srcloc !12
  %29 = icmp ugt i64 %28, -4096
  br i1 %29, label %30, label %34

30:                                               ; preds = %21
  %31 = trunc i64 %28 to i32
  %32 = sub nsw i32 0, %31
  %33 = tail call i32* @__errno_location() #15
  store i32 %32, i32* %33, align 4
  br label %62

34:                                               ; preds = %21
  %35 = inttoptr i64 %28 to i8*
  %36 = icmp eq i8* %35, inttoptr (i64 -1 to i8*)
  br i1 %36, label %62, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 1
  %39 = bitcast %"struct.google_breakpad::PageAllocator::PageHeader"** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = inttoptr i64 %28 to i64*
  store i64 %40, i64* %41, align 8
  %42 = getelementptr inbounds i8, i8* %35, i64 8
  %43 = bitcast i8* %42 to i64*
  store i64 %26, i64* %43, align 8
  %44 = bitcast %"struct.google_breakpad::PageAllocator::PageHeader"** %38 to i8**
  store i8* %35, i8** %44, align 8
  %45 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 4
  %46 = load i64, i64* %45, align 8
  %47 = add i64 %46, %26
  store i64 %47, i64* %45, align 8
  %48 = icmp eq i64 %28, 0
  br i1 %48, label %62, label %49

49:                                               ; preds = %37
  %50 = load i64, i64* %23, align 8
  %51 = mul i64 %50, %26
  %52 = add i64 %50, %22
  %53 = sub i64 %52, %51
  %54 = urem i64 %53, %50
  %55 = getelementptr inbounds %"class.google_breakpad::PageAllocator", %"class.google_breakpad::PageAllocator"* %0, i64 0, i32 3
  store i64 %54, i64* %55, align 8
  %56 = icmp eq i64 %54, 0
  %57 = add i64 %26, -1
  %58 = mul i64 %50, %57
  %59 = getelementptr inbounds i8, i8* %35, i64 %58
  %60 = select i1 %56, i8* null, i8* %59
  store i8* %60, i8** %5, align 8
  %61 = getelementptr inbounds i8, i8* %35, i64 16
  br label %62

62:                                               ; preds = %30, %34, %49, %37, %15, %19, %2
  %63 = phi i8* [ null, %2 ], [ %16, %19 ], [ %16, %15 ], [ %61, %49 ], [ null, %37 ], [ null, %34 ], [ null, %30 ]
  ret i8* %63
}

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #12

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind }
attributes #13 = { nounwind }
attributes #14 = { cold }
attributes #15 = { nounwind readnone }
attributes #16 = { noreturn nounwind }
attributes #17 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{i32 -2143573659}
