; ModuleID = '../../third_party/lzma_sdk/XzCrc64Opt.c'
source_filename = "../../third_party/lzma_sdk/XzCrc64Opt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @XzCrc64UpdateT4(i64, i8*, i64, i64* nocapture readonly) local_unnamed_addr #0 {
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %119, label %6

6:                                                ; preds = %4, %13
  %7 = phi i64 [ %21, %13 ], [ %0, %4 ]
  %8 = phi i8* [ %23, %13 ], [ %1, %4 ]
  %9 = phi i64 [ %22, %13 ], [ %2, %4 ]
  %10 = ptrtoint i8* %8 to i64
  %11 = and i64 %10, 3
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %25, label %13

13:                                               ; preds = %6
  %14 = load i8, i8* %8, align 1
  %15 = zext i8 %14 to i64
  %16 = and i64 %7, 255
  %17 = xor i64 %16, %15
  %18 = getelementptr inbounds i64, i64* %3, i64 %17
  %19 = load i64, i64* %18, align 8
  %20 = lshr i64 %7, 8
  %21 = xor i64 %19, %20
  %22 = add i64 %9, -1
  %23 = getelementptr inbounds i8, i8* %8, i64 1
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %119, label %6

25:                                               ; preds = %6
  %26 = icmp ugt i64 %9, 3
  br i1 %26, label %27, label %35

27:                                               ; preds = %25
  %28 = add i64 %9, -4
  %29 = and i64 %28, -4
  %30 = add nuw i64 %29, 4
  br label %58

31:                                               ; preds = %58
  %32 = sub i64 %28, %29
  %33 = getelementptr i8, i8* %8, i64 %30
  %34 = icmp eq i64 %32, 0
  br i1 %34, label %119, label %35

35:                                               ; preds = %25, %31
  %36 = phi i64 [ %7, %25 ], [ %91, %31 ]
  %37 = phi i8* [ %8, %25 ], [ %33, %31 ]
  %38 = phi i64 [ %9, %25 ], [ %32, %31 ]
  %39 = and i64 %38, 1
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %52, label %41

41:                                               ; preds = %35
  %42 = load i8, i8* %37, align 1
  %43 = zext i8 %42 to i64
  %44 = and i64 %36, 255
  %45 = xor i64 %44, %43
  %46 = getelementptr inbounds i64, i64* %3, i64 %45
  %47 = load i64, i64* %46, align 8
  %48 = lshr i64 %36, 8
  %49 = xor i64 %47, %48
  %50 = add i64 %38, -1
  %51 = getelementptr inbounds i8, i8* %37, i64 1
  br label %52

52:                                               ; preds = %35, %41
  %53 = phi i64 [ undef, %35 ], [ %49, %41 ]
  %54 = phi i64 [ %36, %35 ], [ %49, %41 ]
  %55 = phi i8* [ %37, %35 ], [ %51, %41 ]
  %56 = phi i64 [ %38, %35 ], [ %50, %41 ]
  %57 = icmp eq i64 %38, 1
  br i1 %57, label %119, label %95

58:                                               ; preds = %27, %58
  %59 = phi i64 [ %91, %58 ], [ %7, %27 ]
  %60 = phi i8* [ %93, %58 ], [ %8, %27 ]
  %61 = phi i64 [ %92, %58 ], [ %9, %27 ]
  %62 = trunc i64 %59 to i32
  %63 = bitcast i8* %60 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = xor i32 %64, %62
  %66 = lshr i64 %59, 32
  %67 = and i32 %65, 255
  %68 = or i32 %67, 768
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds i64, i64* %3, i64 %69
  %71 = load i64, i64* %70, align 8
  %72 = xor i64 %71, %66
  %73 = lshr i32 %65, 8
  %74 = and i32 %73, 255
  %75 = or i32 %74, 512
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i64, i64* %3, i64 %76
  %78 = load i64, i64* %77, align 8
  %79 = xor i64 %72, %78
  %80 = lshr i32 %65, 16
  %81 = and i32 %80, 255
  %82 = or i32 %81, 256
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i64, i64* %3, i64 %83
  %85 = load i64, i64* %84, align 8
  %86 = xor i64 %79, %85
  %87 = lshr i32 %65, 24
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds i64, i64* %3, i64 %88
  %90 = load i64, i64* %89, align 8
  %91 = xor i64 %86, %90
  %92 = add i64 %61, -4
  %93 = getelementptr inbounds i8, i8* %60, i64 4
  %94 = icmp ugt i64 %92, 3
  br i1 %94, label %58, label %31

95:                                               ; preds = %52, %95
  %96 = phi i64 [ %115, %95 ], [ %54, %52 ]
  %97 = phi i8* [ %117, %95 ], [ %55, %52 ]
  %98 = phi i64 [ %116, %95 ], [ %56, %52 ]
  %99 = load i8, i8* %97, align 1
  %100 = zext i8 %99 to i64
  %101 = and i64 %96, 255
  %102 = xor i64 %101, %100
  %103 = getelementptr inbounds i64, i64* %3, i64 %102
  %104 = load i64, i64* %103, align 8
  %105 = lshr i64 %96, 8
  %106 = xor i64 %104, %105
  %107 = getelementptr inbounds i8, i8* %97, i64 1
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i64
  %110 = and i64 %106, 255
  %111 = xor i64 %110, %109
  %112 = getelementptr inbounds i64, i64* %3, i64 %111
  %113 = load i64, i64* %112, align 8
  %114 = lshr i64 %106, 8
  %115 = xor i64 %113, %114
  %116 = add i64 %98, -2
  %117 = getelementptr inbounds i8, i8* %97, i64 2
  %118 = icmp eq i64 %116, 0
  br i1 %118, label %119, label %95

119:                                              ; preds = %13, %52, %95, %4, %31
  %120 = phi i64 [ %91, %31 ], [ %0, %4 ], [ %53, %52 ], [ %115, %95 ], [ %21, %13 ]
  ret i64 %120
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
