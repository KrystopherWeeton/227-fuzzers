; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/x86/vp9_diamond_search_sad_avx.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/x86/vp9_diamond_search_sad_avx.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_diamond_search_sad_avx(%struct.macroblock* nocapture readonly, %struct.search_site_config* nocapture readonly, %struct.mv* nocapture readonly, %struct.mv* nocapture, i32, i32, i32* nocapture, %struct.vp9_variance_vtable* nocapture readonly, %struct.mv* nocapture readonly) local_unnamed_addr #0 {
  %10 = alloca <2 x i64>, align 16
  %11 = alloca [2 x <2 x i64>], align 16
  %12 = alloca <2 x i64>, align 16
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 36, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 36, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = shl i32 %16, 16
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 36, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 36, i32 0
  %21 = load i32, i32* %20, align 16
  %22 = shl i32 %21, 16
  %23 = insertelement <4 x i32> undef, i32 %5, i32 0
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> zeroinitializer
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 30, i64 0
  %26 = load i32, i32* %25, align 16
  %27 = insertelement <4 x i32> undef, i32 %26, i32 0
  %28 = shufflevector <4 x i32> %27, <4 x i32> undef, <4 x i32> zeroinitializer
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 30, i64 1
  %30 = load i32, i32* %29, align 4
  %31 = insertelement <4 x i32> undef, i32 %30, i32 0
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> zeroinitializer
  %33 = getelementptr inbounds %struct.search_site_config, %struct.search_site_config* %1, i64 0, i32 2
  %34 = load i32, i32* %33, align 8
  %35 = mul nsw i32 %34, %4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.search_site_config, %struct.search_site_config* %1, i64 0, i32 0, i64 %36
  %38 = getelementptr inbounds %struct.search_site_config, %struct.search_site_config* %1, i64 0, i32 1, i64 %36
  %39 = getelementptr inbounds %struct.search_site_config, %struct.search_site_config* %1, i64 0, i32 3
  %40 = load i32, i32* %39, align 4
  %41 = sub i32 %40, %4
  %42 = getelementptr inbounds %struct.mv, %struct.mv* %8, i64 0, i32 0
  %43 = load i16, i16* %42, align 2
  %44 = ashr i16 %43, 3
  %45 = getelementptr inbounds %struct.mv, %struct.mv* %8, i64 0, i32 1
  %46 = load i16, i16* %45, align 2
  %47 = ashr i16 %46, 3
  %48 = getelementptr inbounds %struct.mv, %struct.mv* %2, i64 0, i32 0
  %49 = load i16, i16* %48, align 2
  %50 = sext i16 %49 to i32
  %51 = shl i32 %19, 16
  %52 = ashr exact i32 %51, 16
  %53 = shl i32 %14, 16
  %54 = ashr exact i32 %53, 16
  %55 = icmp sgt i32 %52, %50
  %56 = icmp slt i32 %54, %50
  %57 = select i1 %56, i32 %54, i32 %50
  %58 = select i1 %55, i32 %52, i32 %57
  %59 = getelementptr inbounds %struct.mv, %struct.mv* %2, i64 0, i32 1
  %60 = load i16, i16* %59, align 2
  %61 = sext i16 %60 to i32
  %62 = ashr exact i32 %22, 16
  %63 = ashr exact i32 %17, 16
  %64 = icmp sgt i32 %62, %61
  %65 = icmp slt i32 %63, %61
  %66 = select i1 %65, i32 %63, i32 %61
  %67 = select i1 %64, i32 %62, i32 %66
  %68 = trunc i32 %67 to i16
  %69 = shl nsw i32 %67, 16
  %70 = and i32 %58, 65535
  %71 = or i32 %69, %70
  %72 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 4, i32 1
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0, i32 1
  %75 = load i32, i32* %74, align 8
  %76 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0, i32 4, i32 0
  %77 = load i8*, i8** %76, align 8
  %78 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i32 0, i64 0, i32 4, i64 0, i32 0
  %79 = load i8*, i8** %78, align 16
  %80 = mul nsw i32 %58, %75
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %79, i64 %81
  %83 = sext i32 %67 to i64
  %84 = getelementptr inbounds i8, i8* %82, i64 %83
  %85 = getelementptr inbounds %struct.vp9_variance_vtable, %struct.vp9_variance_vtable* %7, i64 0, i32 0
  %86 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %85, align 8
  %87 = tail call i32 %86(i8* %77, i32 %73, i8* %84, i32 %75) #3
  %88 = trunc i32 %58 to i16
  %89 = sub i16 %88, %44
  %90 = sub i16 %68, %47
  %91 = zext i16 %90 to i32
  %92 = shl nuw i32 %91, 16
  %93 = zext i16 %89 to i32
  %94 = or i32 %92, %93
  %95 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 31, i64 0
  %96 = icmp ne i32 %94, 0
  %97 = zext i1 %96 to i64
  %98 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 30, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = load i32*, i32** %95, align 8
  %101 = sext i16 %89 to i64
  %102 = getelementptr inbounds i32, i32* %100, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = add nsw i32 %103, %99
  %105 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 31, i64 1
  %106 = load i32*, i32** %105, align 8
  %107 = sext i16 %90 to i64
  %108 = getelementptr inbounds i32, i32* %106, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = add nsw i32 %104, %109
  %111 = mul i32 %110, %5
  %112 = add i32 %111, 256
  %113 = lshr i32 %112, 9
  %114 = add i32 %113, %87
  store i32 0, i32* %6, align 4
  %115 = icmp sgt i32 %41, 0
  br i1 %115, label %116, label %328

116:                                              ; preds = %9
  %117 = ptrtoint i8* %84 to i64
  %118 = insertelement <2 x i64> undef, i64 %117, i32 0
  %119 = shufflevector <2 x i64> %118, <2 x i64> undef, <2 x i32> zeroinitializer
  %120 = insertelement <4 x i32> undef, i32 %71, i32 0
  %121 = shufflevector <4 x i32> %120, <4 x i32> undef, <4 x i32> zeroinitializer
  %122 = zext i16 %47 to i32
  %123 = shl nuw i32 %122, 16
  %124 = zext i16 %44 to i32
  %125 = or i32 %123, %124
  %126 = insertelement <4 x i32> undef, i32 %125, i32 0
  %127 = shufflevector <4 x i32> %126, <4 x i32> undef, <4 x i32> zeroinitializer
  %128 = and i32 %19, 65535
  %129 = or i32 %22, %128
  %130 = insertelement <4 x i32> undef, i32 %129, i32 0
  %131 = shufflevector <4 x i32> %130, <4 x i32> undef, <4 x i32> zeroinitializer
  %132 = and i32 %14, 65535
  %133 = or i32 %17, %132
  %134 = insertelement <4 x i32> undef, i32 %133, i32 0
  %135 = shufflevector <4 x i32> %134, <4 x i32> undef, <4 x i32> zeroinitializer
  %136 = bitcast <2 x i64>* %10 to i8*
  %137 = bitcast [2 x <2 x i64>]* %11 to i8*
  %138 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %11, i64 0, i64 0
  %139 = getelementptr inbounds [2 x <2 x i64>], [2 x <2 x i64>]* %11, i64 0, i64 1
  %140 = bitcast <2 x i64>* %12 to i8*
  %141 = bitcast <2 x i64>* %12 to <8 x i16>*
  %142 = bitcast <4 x i32> %135 to <8 x i16>
  %143 = bitcast <4 x i32> %131 to <8 x i16>
  %144 = bitcast <4 x i32> %127 to <8 x i16>
  %145 = getelementptr inbounds %struct.vp9_variance_vtable, %struct.vp9_variance_vtable* %7, i64 0, i32 5
  %146 = bitcast [2 x <2 x i64>]* %11 to i8**
  %147 = bitcast <2 x i64>* %10 to i32*
  %148 = bitcast <2 x i64>* %10 to <4 x i32>*
  %149 = bitcast <2 x i64>* %12 to %union.int_mv*
  %150 = bitcast [2 x <2 x i64>]* %11 to i8*
  br label %151

151:                                              ; preds = %325, %116
  %152 = phi i32 [ %71, %116 ], [ %315, %325 ]
  %153 = phi <4 x i32> [ %121, %116 ], [ %317, %325 ]
  %154 = phi i8* [ %84, %116 ], [ %314, %325 ]
  %155 = phi <2 x i64> [ %119, %116 ], [ %320, %325 ]
  %156 = phi i32 [ %114, %116 ], [ %313, %325 ]
  %157 = phi i32 [ 0, %116 ], [ %312, %325 ]
  %158 = phi i32 [ 0, %116 ], [ %326, %325 ]
  %159 = load i32, i32* %33, align 8
  %160 = icmp sgt i32 %159, 0
  br i1 %160, label %161, label %311

161:                                              ; preds = %151
  %162 = bitcast <4 x i32> %153 to <8 x i16>
  %163 = sext i32 %157 to i64
  br label %164

164:                                              ; preds = %161, %301
  %165 = phi i64 [ %163, %161 ], [ %306, %301 ]
  %166 = phi i32 [ %152, %161 ], [ %304, %301 ]
  %167 = phi i8* [ %154, %161 ], [ %303, %301 ]
  %168 = phi i32 [ %156, %161 ], [ %302, %301 ]
  %169 = phi i32 [ 0, %161 ], [ %305, %301 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %136) #3
  store <2 x i64> <i64 -6148914691236517206, i64 -6148914691236517206>, <2 x i64>* %10, align 16
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %137) #3
  %170 = getelementptr inbounds %struct.mv, %struct.mv* %37, i64 %165
  %171 = bitcast %struct.mv* %170 to <8 x i16>*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %150, i8 -86, i64 32, i1 false)
  %172 = load <8 x i16>, <8 x i16>* %171, align 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %140) #3
  %173 = add <8 x i16> %172, %162
  store <8 x i16> %173, <8 x i16>* %141, align 16
  %174 = icmp slt <8 x i16> %173, %142
  %175 = select <8 x i1> %174, <8 x i16> %173, <8 x i16> %142
  %176 = icmp sgt <8 x i16> %175, %143
  %177 = select <8 x i1> %176, <8 x i16> %175, <8 x i16> %143
  %178 = bitcast <8 x i16> %177 to <4 x i32>
  %179 = bitcast <8 x i16> %173 to <4 x i32>
  %180 = icmp eq <4 x i32> %178, %179
  %181 = sext <4 x i1> %180 to <4 x i32>
  %182 = bitcast <4 x i32> %181 to <2 x i64>
  %183 = call i32 @llvm.x86.sse41.ptestz(<2 x i64> %182, <2 x i64> %182) #3
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %301, !prof !2

185:                                              ; preds = %164
  %186 = lshr <4 x i32> %181, <i32 1, i32 1, i32 1, i32 1>
  %187 = bitcast <4 x i32> %186 to <2 x i64>
  %188 = xor <2 x i64> %187, <i64 9223372034707292159, i64 9223372034707292159>
  %189 = sub <8 x i16> %177, %144
  %190 = sub <8 x i16> zeroinitializer, %189
  %191 = icmp slt <8 x i16> %189, zeroinitializer
  %192 = select <8 x i1> %191, <8 x i16> %190, <8 x i16> %189
  %193 = getelementptr inbounds i64, i64* %38, i64 %165
  %194 = bitcast i64* %193 to <2 x i64>*
  %195 = load <2 x i64>, <2 x i64>* %194, align 1
  %196 = add nsw i64 %165, 2
  %197 = getelementptr inbounds i64, i64* %38, i64 %196
  %198 = bitcast i64* %197 to <2 x i64>*
  %199 = load <2 x i64>, <2 x i64>* %198, align 1
  %200 = shufflevector <4 x i32> %181, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %201 = sext <2 x i32> %200 to <2 x i64>
  %202 = and <2 x i64> %195, %201
  %203 = shufflevector <4 x i32> %181, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %204 = bitcast <4 x i32> %203 to <2 x i64>
  %205 = and <2 x i64> %199, %204
  %206 = add <2 x i64> %202, %155
  store <2 x i64> %206, <2 x i64>* %138, align 16
  %207 = add <2 x i64> %205, %155
  store <2 x i64> %207, <2 x i64>* %139, align 16
  %208 = load void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)** %145, align 8
  call void %208(i8* %77, i32 %73, i8** nonnull %146, i32 %75, i32* nonnull %147) #3
  %209 = extractelement <8 x i16> %192, i64 0
  %210 = extractelement <8 x i16> %192, i64 1
  %211 = extractelement <8 x i16> %192, i64 2
  %212 = extractelement <8 x i16> %192, i64 3
  %213 = extractelement <8 x i16> %192, i64 4
  %214 = extractelement <8 x i16> %192, i64 5
  %215 = extractelement <8 x i16> %192, i64 6
  %216 = extractelement <8 x i16> %192, i64 7
  %217 = load i32*, i32** %95, align 16
  %218 = zext i16 %209 to i64
  %219 = getelementptr inbounds i32, i32* %217, i64 %218
  %220 = load i32, i32* %219, align 4
  %221 = zext i16 %210 to i64
  %222 = getelementptr inbounds i32, i32* %217, i64 %221
  %223 = load i32, i32* %222, align 4
  %224 = add nsw i32 %223, %220
  %225 = zext i16 %211 to i64
  %226 = getelementptr inbounds i32, i32* %217, i64 %225
  %227 = load i32, i32* %226, align 4
  %228 = zext i16 %212 to i64
  %229 = getelementptr inbounds i32, i32* %217, i64 %228
  %230 = load i32, i32* %229, align 4
  %231 = add nsw i32 %230, %227
  %232 = zext i16 %213 to i64
  %233 = getelementptr inbounds i32, i32* %217, i64 %232
  %234 = load i32, i32* %233, align 4
  %235 = zext i16 %214 to i64
  %236 = getelementptr inbounds i32, i32* %217, i64 %235
  %237 = load i32, i32* %236, align 4
  %238 = add nsw i32 %237, %234
  %239 = zext i16 %215 to i64
  %240 = getelementptr inbounds i32, i32* %217, i64 %239
  %241 = load i32, i32* %240, align 4
  %242 = zext i16 %216 to i64
  %243 = getelementptr inbounds i32, i32* %217, i64 %242
  %244 = load i32, i32* %243, align 4
  %245 = add nsw i32 %244, %241
  %246 = insertelement <4 x i32> undef, i32 %224, i32 0
  %247 = insertelement <4 x i32> %246, i32 %231, i64 1
  %248 = bitcast <4 x i32> %247 to <2 x i64>
  %249 = insertelement <4 x i32> undef, i32 %238, i32 0
  %250 = insertelement <4 x i32> %249, i32 %245, i64 1
  %251 = bitcast <4 x i32> %250 to <2 x i64>
  %252 = shufflevector <2 x i64> %248, <2 x i64> %251, <2 x i32> <i32 0, i32 2>
  %253 = bitcast <8 x i16> %192 to <4 x i32>
  %254 = icmp eq <4 x i32> %253, zeroinitializer
  %255 = select <4 x i1> %254, <4 x i32> %28, <4 x i32> %32
  %256 = bitcast <2 x i64> %252 to <4 x i32>
  %257 = add <4 x i32> %255, %256
  %258 = mul <4 x i32> %257, %24
  %259 = add <4 x i32> %258, <i32 256, i32 256, i32 256, i32 256>
  %260 = ashr <4 x i32> %259, <i32 9, i32 9, i32 9, i32 9>
  %261 = load <4 x i32>, <4 x i32>* %148, align 16
  %262 = add <4 x i32> %260, %261
  %263 = bitcast <4 x i32> %262 to <2 x i64>
  %264 = or <2 x i64> %188, %263
  store <2 x i64> %264, <2 x i64>* %10, align 16
  %265 = bitcast <2 x i64> %264 to <4 x i32>
  %266 = call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %265, <4 x i32> %265) #3
  %267 = call <8 x i16> @llvm.x86.sse41.phminposuw(<8 x i16> %266) #3
  %268 = extractelement <8 x i16> %267, i64 0
  %269 = zext i16 %268 to i32
  %270 = extractelement <8 x i16> %267, i64 1
  %271 = zext i16 %270 to i32
  %272 = icmp eq i16 %268, -1
  br i1 %272, label %273, label %291, !prof !2

273:                                              ; preds = %185
  %274 = bitcast <2 x i64> %264 to <16 x i8>
  %275 = shufflevector <16 x i8> %274, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %276 = bitcast <16 x i8> %275 to <4 x i32>
  %277 = icmp sgt <4 x i32> %265, %276
  %278 = select <4 x i1> %277, <4 x i32> %276, <4 x i32> %265
  %279 = bitcast <4 x i32> %278 to <16 x i8>
  %280 = select <4 x i1> %277, <4 x i32> <i32 2, i32 3, i32 0, i32 0>, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %281 = bitcast <4 x i32> %280 to <16 x i8>
  %282 = shufflevector <16 x i8> %279, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %283 = shufflevector <16 x i8> %281, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %284 = bitcast <16 x i8> %282 to <4 x i32>
  %285 = icmp sgt <4 x i32> %278, %284
  %286 = select <4 x i1> %285, <4 x i32> %284, <4 x i32> %278
  %287 = bitcast <16 x i8> %283 to <4 x i32>
  %288 = select <4 x i1> %285, <4 x i32> %287, <4 x i32> %280
  %289 = extractelement <4 x i32> %286, i64 0
  %290 = extractelement <4 x i32> %288, i64 0
  br label %291

291:                                              ; preds = %273, %185
  %292 = phi i32 [ %289, %273 ], [ %269, %185 ]
  %293 = phi i32 [ %290, %273 ], [ %271, %185 ]
  %294 = icmp ult i32 %292, %168
  br i1 %294, label %295, label %301, !prof !3

295:                                              ; preds = %291
  %296 = zext i32 %293 to i64
  %297 = getelementptr inbounds %union.int_mv, %union.int_mv* %149, i64 %296, i32 0
  %298 = load i32, i32* %297, align 4
  %299 = getelementptr inbounds i8*, i8** %146, i64 %296
  %300 = load i8*, i8** %299, align 8
  br label %301

301:                                              ; preds = %291, %295, %164
  %302 = phi i32 [ %168, %164 ], [ %292, %295 ], [ %168, %291 ]
  %303 = phi i8* [ %167, %164 ], [ %300, %295 ], [ %167, %291 ]
  %304 = phi i32 [ %166, %164 ], [ %298, %295 ], [ %166, %291 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %140) #3
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %137) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %136) #3
  %305 = add nuw nsw i32 %169, 4
  %306 = add i64 %165, 4
  %307 = load i32, i32* %33, align 8
  %308 = icmp slt i32 %305, %307
  br i1 %308, label %164, label %309

309:                                              ; preds = %301
  %310 = trunc i64 %306 to i32
  br label %311

311:                                              ; preds = %309, %151
  %312 = phi i32 [ %157, %151 ], [ %310, %309 ]
  %313 = phi i32 [ %156, %151 ], [ %302, %309 ]
  %314 = phi i8* [ %154, %151 ], [ %303, %309 ]
  %315 = phi i32 [ %152, %151 ], [ %304, %309 ]
  %316 = insertelement <4 x i32> undef, i32 %315, i32 0
  %317 = shufflevector <4 x i32> %316, <4 x i32> undef, <4 x i32> zeroinitializer
  %318 = ptrtoint i8* %314 to i64
  %319 = insertelement <2 x i64> undef, i64 %318, i32 0
  %320 = shufflevector <2 x i64> %319, <2 x i64> undef, <2 x i32> zeroinitializer
  %321 = icmp eq i8* %314, %84
  br i1 %321, label %322, label %325, !prof !2

322:                                              ; preds = %311
  %323 = load i32, i32* %6, align 4
  %324 = add nsw i32 %323, 1
  store i32 %324, i32* %6, align 4
  br label %325

325:                                              ; preds = %311, %322
  %326 = add nuw nsw i32 %158, 1
  %327 = icmp eq i32 %326, %41
  br i1 %327, label %328, label %151

328:                                              ; preds = %325, %9
  %329 = phi i32 [ %114, %9 ], [ %313, %325 ]
  %330 = phi i32 [ %71, %9 ], [ %315, %325 ]
  %331 = bitcast %struct.mv* %3 to i32*
  store i32 %330, i32* %331, align 2
  ret i32 %329
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse41.ptestz(<2 x i64>, <2 x i64>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.phminposuw(<8 x i16>) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
