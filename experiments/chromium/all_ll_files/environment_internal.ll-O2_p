; ModuleID = '../../base/process/environment_internal.cc'
source_filename = "../../base/process/environment_internal.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1", %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i64* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::__value_type" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }

$_ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEElEERKT_ = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden i8** @_ZN4base8internal16AlterEnvironmentEPKPKcRKNSt3__13mapINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEESC_NS5_4lessISC_EENSA_INS5_4pairIKSC_SC_EEEEEE(i8** nocapture readonly, %"class.std::__1::map"* dereferenceable(24)) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #9
  %10 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #9
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false) #9
  %14 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #9
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 24, i1 false) #9
  %16 = load i8*, i8** %0, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %38, label %18

18:                                               ; preds = %2
  %19 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  %27 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %1, i64 0, i32 0
  %28 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %29 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = bitcast i64** %12 to i64*
  %32 = bitcast %"class.std::__1::vector"* %5 to i64*
  %33 = bitcast i64** %13 to i64*
  br label %34

34:                                               ; preds = %18, %151
  %35 = phi i8* [ %16, %18 ], [ %154, %151 ]
  %36 = phi i8** [ %0, %18 ], [ %153, %151 ]
  %37 = phi i64 [ 0, %18 ], [ %152, %151 ]
  br label %53

38:                                               ; preds = %151, %2
  %39 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %1, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %39, align 8
  %41 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %1, i64 0, i32 0, i32 1, i32 0, i32 0
  %42 = icmp eq %"class.std::__1::__tree_end_node"* %40, %41
  br i1 %42, label %43, label %47

43:                                               ; preds = %38
  %44 = bitcast i64** %12 to i64*
  %45 = bitcast %"class.std::__1::vector"* %5 to i64*
  %46 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %156

47:                                               ; preds = %38
  %48 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = bitcast i64** %12 to i64*
  %51 = bitcast %"class.std::__1::vector"* %5 to i64*
  %52 = bitcast i64** %13 to i64*
  br label %185

53:                                               ; preds = %34, %57
  %54 = phi i64 [ %58, %57 ], [ 0, %34 ]
  %55 = getelementptr inbounds i8, i8* %35, i64 %54
  %56 = load i8, i8* %55, align 1
  switch i8 %56, label %57 [
    i8 0, label %59
    i8 61, label %59
  ]

57:                                               ; preds = %53
  %58 = add i64 %54, 1
  br label %53

59:                                               ; preds = %53, %53
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #9
  %60 = icmp ugt i64 %54, -17
  br i1 %60, label %61, label %63

61:                                               ; preds = %59
  %62 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %62) #10
  unreachable

63:                                               ; preds = %59
  %64 = icmp ult i64 %54, 23
  br i1 %64, label %70, label %65

65:                                               ; preds = %63
  %66 = add nuw i64 %54, 16
  %67 = and i64 %66, -16
  %68 = call i8* @_Znwm(i64 %67) #11
  store i8* %68, i8** %20, align 8
  %69 = or i64 %67, -9223372036854775808
  store i64 %69, i64* %21, align 8
  store i64 %54, i64* %22, align 8
  br label %73

70:                                               ; preds = %63
  %71 = trunc i64 %54 to i8
  store i8 %71, i8* %24, align 1
  %72 = icmp eq i64 %54, 0
  br i1 %72, label %75, label %73

73:                                               ; preds = %70, %65
  %74 = phi i8* [ %68, %65 ], [ %19, %70 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %74, i8* nonnull align 1 %35, i64 %54, i1 false) #9
  br label %75

75:                                               ; preds = %73, %70
  %76 = phi i8* [ %19, %70 ], [ %74, %73 ]
  %77 = getelementptr inbounds i8, i8* %76, i64 %54
  store i8 0, i8* %77, align 1
  %78 = load i8, i8* %26, align 1
  %79 = icmp slt i8 %78, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %75
  %81 = load i8*, i8** %15, align 8
  call void @_ZdlPv(i8* %81) #11
  br label %82

82:                                               ; preds = %80, %75
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %14, i8* nonnull align 8 %19, i64 24, i1 false) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #9
  br label %83

83:                                               ; preds = %83, %82
  %84 = phi i64 [ %54, %82 ], [ %88, %83 ]
  %85 = getelementptr inbounds i8, i8* %35, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = icmp eq i8 %86, 0
  %88 = add i64 %84, 1
  br i1 %87, label %89, label %83

89:                                               ; preds = %83
  %90 = call %"class.std::__1::__tree_end_node"* @_ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEElEERKT_(%"class.std::__1::__tree"* %27, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %6) #9
  %91 = icmp eq %"class.std::__1::__tree_end_node"* %90, %28
  br i1 %91, label %92, label %151

92:                                               ; preds = %89
  %93 = load i8, i8* %30, align 1
  %94 = icmp slt i8 %93, 0
  %95 = load i64, i64* %9, align 8
  %96 = zext i8 %93 to i64
  %97 = select i1 %94, i64 %95, i64 %96
  %98 = load i64*, i64** %12, align 8
  %99 = load i64*, i64** %13, align 8
  %100 = icmp ult i64* %98, %99
  %101 = ptrtoint i64* %99 to i64
  br i1 %100, label %102, label %105

102:                                              ; preds = %92
  store i64 %97, i64* %98, align 8
  %103 = getelementptr inbounds i64, i64* %98, i64 1
  %104 = ptrtoint i64* %103 to i64
  store i64 %104, i64* %31, align 8
  br label %148

105:                                              ; preds = %92
  %106 = ptrtoint i64* %98 to i64
  %107 = load i64, i64* %32, align 8
  %108 = sub i64 %106, %107
  %109 = ashr exact i64 %108, 3
  %110 = add nsw i64 %109, 1
  %111 = icmp ugt i64 %110, 2305843009213693951
  br i1 %111, label %112, label %114

112:                                              ; preds = %105
  %113 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %113) #10
  unreachable

114:                                              ; preds = %105
  %115 = sub i64 %101, %107
  %116 = ashr exact i64 %115, 3
  %117 = icmp ult i64 %116, 1152921504606846975
  br i1 %117, label %118, label %126

118:                                              ; preds = %114
  %119 = ashr exact i64 %115, 2
  %120 = icmp ult i64 %119, %110
  %121 = select i1 %120, i64 %110, i64 %119
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %131, label %123

123:                                              ; preds = %118
  %124 = icmp ugt i64 %121, 2305843009213693951
  br i1 %124, label %125, label %126

125:                                              ; preds = %123
  call void @abort() #10
  unreachable

126:                                              ; preds = %123, %114
  %127 = phi i64 [ %121, %123 ], [ 2305843009213693951, %114 ]
  %128 = shl i64 %127, 3
  %129 = call i8* @_Znwm(i64 %128) #11
  %130 = bitcast i8* %129 to i64*
  br label %131

131:                                              ; preds = %126, %118
  %132 = phi i64 [ %127, %126 ], [ 0, %118 ]
  %133 = phi i8* [ %129, %126 ], [ null, %118 ]
  %134 = phi i64* [ %130, %126 ], [ null, %118 ]
  %135 = getelementptr inbounds i64, i64* %134, i64 %109
  %136 = getelementptr inbounds i64, i64* %134, i64 %132
  %137 = ptrtoint i64* %136 to i64
  store i64 %97, i64* %135, align 8
  %138 = getelementptr inbounds i64, i64* %135, i64 1
  %139 = ptrtoint i64* %138 to i64
  %140 = ptrtoint i64* %134 to i64
  %141 = icmp sgt i64 %108, 0
  br i1 %141, label %142, label %144

142:                                              ; preds = %131
  %143 = inttoptr i64 %107 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %133, i8* align 8 %143, i64 %108, i1 false) #9
  br label %144

144:                                              ; preds = %142, %131
  store i64 %140, i64* %32, align 8
  store i64 %139, i64* %31, align 8
  store i64 %137, i64* %33, align 8
  %145 = icmp eq i64 %107, 0
  br i1 %145, label %148, label %146

146:                                              ; preds = %144
  %147 = inttoptr i64 %107 to i8*
  call void @_ZdlPv(i8* %147) #11
  br label %148

148:                                              ; preds = %102, %144, %146
  %149 = load i8*, i8** %36, align 8
  %150 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %149, i64 %88) #9
  br label %151

151:                                              ; preds = %148, %89
  %152 = add i64 %37, 1
  %153 = getelementptr inbounds i8*, i8** %0, i64 %152
  %154 = load i8*, i8** %153, align 8
  %155 = icmp eq i8* %154, null
  br i1 %155, label %38, label %34

156:                                              ; preds = %313, %43
  %157 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %46, %43 ], [ %48, %313 ]
  %158 = phi i64* [ %45, %43 ], [ %51, %313 ]
  %159 = phi i64* [ %44, %43 ], [ %50, %313 ]
  %160 = load i64, i64* %159, align 8
  %161 = load i64, i64* %158, align 8
  %162 = sub i64 %160, %161
  %163 = ashr exact i64 %162, 3
  %164 = add nsw i64 %163, 1
  %165 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %157, i64 0, i32 1, i32 0
  %166 = load i8, i8* %165, align 1
  %167 = icmp slt i8 %166, 0
  %168 = load i64, i64* %9, align 8
  %169 = zext i8 %166 to i64
  %170 = select i1 %167, i64 %168, i64 %169
  %171 = add i64 %170, 7
  %172 = lshr i64 %171, 3
  %173 = add nsw i64 %172, %164
  %174 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %173, i64 8)
  %175 = extractvalue { i64, i1 } %174, 1
  %176 = extractvalue { i64, i1 } %174, 0
  %177 = select i1 %175, i64 -1, i64 %176
  %178 = call i8* @_Znam(i64 %177) #11
  %179 = bitcast i8* %178 to i8**
  %180 = getelementptr inbounds i8*, i8** %179, i64 %164
  %181 = bitcast i8** %180 to i8*
  %182 = icmp eq i64 %170, 0
  %183 = inttoptr i64 %161 to i64*
  %184 = inttoptr i64 %161 to i8*
  br i1 %182, label %319, label %316

185:                                              ; preds = %47, %313
  %186 = phi %"class.std::__1::__tree_end_node"* [ %40, %47 ], [ %314, %313 ]
  %187 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %186, i64 4
  %188 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %186, i64 7
  %189 = bitcast %"class.std::__1::__tree_end_node"* %188 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %190 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %189, i64 0, i32 1, i32 0
  %191 = load i8, i8* %190, align 1
  %192 = icmp slt i8 %191, 0
  br i1 %192, label %193, label %197

193:                                              ; preds = %185
  %194 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %186, i64 8
  %195 = bitcast %"class.std::__1::__tree_end_node"* %194 to i64*
  %196 = load i64, i64* %195, align 8
  br label %199

197:                                              ; preds = %185
  %198 = zext i8 %191 to i64
  br label %199

199:                                              ; preds = %193, %197
  %200 = phi i64 [ %196, %193 ], [ %198, %197 ]
  %201 = icmp eq i64 %200, 0
  br i1 %201, label %285, label %202

202:                                              ; preds = %199
  %203 = load i8, i8* %49, align 1
  %204 = icmp slt i8 %203, 0
  %205 = load i64, i64* %9, align 8
  %206 = zext i8 %203 to i64
  %207 = select i1 %204, i64 %205, i64 %206
  %208 = load i64*, i64** %12, align 8
  %209 = load i64*, i64** %13, align 8
  %210 = icmp ult i64* %208, %209
  %211 = ptrtoint i64* %209 to i64
  br i1 %210, label %212, label %215

212:                                              ; preds = %202
  store i64 %207, i64* %208, align 8
  %213 = getelementptr inbounds i64, i64* %208, i64 1
  %214 = ptrtoint i64* %213 to i64
  store i64 %214, i64* %50, align 8
  br label %258

215:                                              ; preds = %202
  %216 = ptrtoint i64* %208 to i64
  %217 = load i64, i64* %51, align 8
  %218 = sub i64 %216, %217
  %219 = ashr exact i64 %218, 3
  %220 = add nsw i64 %219, 1
  %221 = icmp ugt i64 %220, 2305843009213693951
  br i1 %221, label %222, label %224

222:                                              ; preds = %215
  %223 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %223) #10
  unreachable

224:                                              ; preds = %215
  %225 = sub i64 %211, %217
  %226 = ashr exact i64 %225, 3
  %227 = icmp ult i64 %226, 1152921504606846975
  br i1 %227, label %228, label %236

228:                                              ; preds = %224
  %229 = ashr exact i64 %225, 2
  %230 = icmp ult i64 %229, %220
  %231 = select i1 %230, i64 %220, i64 %229
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %241, label %233

233:                                              ; preds = %228
  %234 = icmp ugt i64 %231, 2305843009213693951
  br i1 %234, label %235, label %236

235:                                              ; preds = %233
  call void @abort() #10
  unreachable

236:                                              ; preds = %233, %224
  %237 = phi i64 [ %231, %233 ], [ 2305843009213693951, %224 ]
  %238 = shl i64 %237, 3
  %239 = call i8* @_Znwm(i64 %238) #11
  %240 = bitcast i8* %239 to i64*
  br label %241

241:                                              ; preds = %236, %228
  %242 = phi i64 [ %237, %236 ], [ 0, %228 ]
  %243 = phi i8* [ %239, %236 ], [ null, %228 ]
  %244 = phi i64* [ %240, %236 ], [ null, %228 ]
  %245 = getelementptr inbounds i64, i64* %244, i64 %219
  %246 = getelementptr inbounds i64, i64* %244, i64 %242
  %247 = ptrtoint i64* %246 to i64
  store i64 %207, i64* %245, align 8
  %248 = getelementptr inbounds i64, i64* %245, i64 1
  %249 = ptrtoint i64* %248 to i64
  %250 = ptrtoint i64* %244 to i64
  %251 = icmp sgt i64 %218, 0
  br i1 %251, label %252, label %254

252:                                              ; preds = %241
  %253 = inttoptr i64 %217 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %243, i8* align 8 %253, i64 %218, i1 false) #9
  br label %254

254:                                              ; preds = %252, %241
  store i64 %250, i64* %51, align 8
  store i64 %249, i64* %50, align 8
  store i64 %247, i64* %52, align 8
  %255 = icmp eq i64 %217, 0
  br i1 %255, label %258, label %256

256:                                              ; preds = %254
  %257 = inttoptr i64 %217 to i8*
  call void @_ZdlPv(i8* %257) #11
  br label %258

258:                                              ; preds = %212, %254, %256
  %259 = bitcast %"class.std::__1::__tree_end_node"* %187 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %260 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %259, i64 0, i32 1, i32 0
  %261 = load i8, i8* %260, align 1
  %262 = icmp slt i8 %261, 0
  %263 = bitcast %"class.std::__1::__tree_end_node"* %187 to i8**
  %264 = load i8*, i8** %263, align 8
  %265 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %186, i64 5
  %266 = bitcast %"class.std::__1::__tree_end_node"* %265 to i64*
  %267 = load i64, i64* %266, align 8
  %268 = bitcast %"class.std::__1::__tree_end_node"* %187 to i8*
  %269 = zext i8 %261 to i64
  %270 = select i1 %262, i8* %264, i8* %268
  %271 = select i1 %262, i64 %267, i64 %269
  %272 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %270, i64 %271) #9
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %4, i8 signext 61) #9
  %273 = load i8, i8* %190, align 1
  %274 = icmp slt i8 %273, 0
  %275 = bitcast %"class.std::__1::__tree_end_node"* %188 to i8**
  %276 = load i8*, i8** %275, align 8
  %277 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %186, i64 8
  %278 = bitcast %"class.std::__1::__tree_end_node"* %277 to i64*
  %279 = load i64, i64* %278, align 8
  %280 = bitcast %"class.std::__1::__tree_end_node"* %188 to i8*
  %281 = zext i8 %273 to i64
  %282 = select i1 %274, i8* %276, i8* %280
  %283 = select i1 %274, i64 %279, i64 %281
  %284 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %282, i64 %283) #9
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* nonnull %4, i8 signext 0) #9
  br label %285

285:                                              ; preds = %258, %199
  %286 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %186, i64 1, i32 0
  %287 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %286, align 8
  %288 = icmp eq %"class.std::__1::__tree_node_base"* %287, null
  br i1 %288, label %289, label %297

289:                                              ; preds = %285
  %290 = bitcast %"class.std::__1::__tree_end_node"* %186 to %"class.std::__1::__tree_node_base"*
  %291 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %186, i64 2
  %292 = bitcast %"class.std::__1::__tree_end_node"* %291 to %"class.std::__1::__tree_end_node"**
  %293 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %292, align 8
  %294 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %293, i64 0, i32 0
  %295 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %294, align 8
  %296 = icmp eq %"class.std::__1::__tree_node_base"* %295, %290
  br i1 %296, label %313, label %304

297:                                              ; preds = %285, %297
  %298 = phi %"class.std::__1::__tree_node_base"* [ %300, %297 ], [ %287, %285 ]
  %299 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %298, i64 0, i32 0, i32 0
  %300 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %299, align 8
  %301 = icmp eq %"class.std::__1::__tree_node_base"* %300, null
  br i1 %301, label %302, label %297

302:                                              ; preds = %297
  %303 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %298, i64 0, i32 0
  br label %313

304:                                              ; preds = %289, %304
  %305 = phi %"class.std::__1::__tree_end_node"** [ %308, %304 ], [ %292, %289 ]
  %306 = bitcast %"class.std::__1::__tree_end_node"** %305 to %"class.std::__1::__tree_node_base"**
  %307 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %306, align 8
  %308 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %307, i64 0, i32 2
  %309 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %308, align 8
  %310 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %309, i64 0, i32 0
  %311 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %310, align 8
  %312 = icmp eq %"class.std::__1::__tree_node_base"* %311, %307
  br i1 %312, label %313, label %304

313:                                              ; preds = %304, %289, %302
  %314 = phi %"class.std::__1::__tree_end_node"* [ %303, %302 ], [ %293, %289 ], [ %309, %304 ]
  %315 = icmp eq %"class.std::__1::__tree_end_node"* %314, %41
  br i1 %315, label %156, label %185

316:                                              ; preds = %156
  %317 = load i8*, i8** %8, align 8
  %318 = select i1 %167, i8* %317, i8* %7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %181, i8* align 1 %318, i64 %170, i1 false)
  br label %319

319:                                              ; preds = %316, %156
  %320 = icmp eq i64 %162, 0
  br i1 %320, label %427, label %321

321:                                              ; preds = %319
  %322 = icmp ugt i64 %163, 1
  %323 = select i1 %322, i64 %163, i64 1
  %324 = icmp ult i64 %323, 4
  br i1 %324, label %325, label %327

325:                                              ; preds = %425, %327, %321
  %326 = phi i64 [ 0, %327 ], [ 0, %321 ], [ %339, %425 ]
  br label %448

327:                                              ; preds = %321
  %328 = icmp ugt i64 %163, 1
  %329 = select i1 %328, i64 %163, i64 1
  %330 = shl nsw i64 %329, 3
  %331 = add i64 %330, -8
  %332 = getelementptr i8, i8* %178, i64 %331
  %333 = getelementptr i64, i64* %183, i64 %329
  %334 = bitcast i64* %333 to i8*
  %335 = icmp ult i8* %178, %334
  %336 = icmp ugt i8* %332, %184
  %337 = and i1 %335, %336
  br i1 %337, label %325, label %338

338:                                              ; preds = %327
  %339 = and i64 %323, -4
  %340 = add nsw i64 %339, -4
  %341 = lshr exact i64 %340, 2
  %342 = add nuw nsw i64 %341, 1
  %343 = and i64 %342, 3
  %344 = icmp ult i64 %340, 12
  br i1 %344, label %404, label %345

345:                                              ; preds = %338
  %346 = sub nsw i64 %342, %343
  br label %347

347:                                              ; preds = %347, %345
  %348 = phi i64 [ 0, %345 ], [ %401, %347 ]
  %349 = phi i64 [ %346, %345 ], [ %402, %347 ]
  %350 = getelementptr inbounds i64, i64* %183, i64 %348
  %351 = bitcast i64* %350 to <2 x i64>*
  %352 = load <2 x i64>, <2 x i64>* %351, align 8, !alias.scope !2
  %353 = getelementptr inbounds i64, i64* %350, i64 2
  %354 = bitcast i64* %353 to <2 x i64>*
  %355 = load <2 x i64>, <2 x i64>* %354, align 8, !alias.scope !2
  %356 = getelementptr inbounds i8, i8* %181, <2 x i64> %352
  %357 = getelementptr inbounds i8, i8* %181, <2 x i64> %355
  %358 = getelementptr inbounds i8*, i8** %179, i64 %348
  %359 = bitcast i8** %358 to <2 x i8*>*
  store <2 x i8*> %356, <2 x i8*>* %359, align 8, !alias.scope !5, !noalias !2
  %360 = getelementptr inbounds i8*, i8** %358, i64 2
  %361 = bitcast i8** %360 to <2 x i8*>*
  store <2 x i8*> %357, <2 x i8*>* %361, align 8, !alias.scope !5, !noalias !2
  %362 = or i64 %348, 4
  %363 = getelementptr inbounds i64, i64* %183, i64 %362
  %364 = bitcast i64* %363 to <2 x i64>*
  %365 = load <2 x i64>, <2 x i64>* %364, align 8, !alias.scope !2
  %366 = getelementptr inbounds i64, i64* %363, i64 2
  %367 = bitcast i64* %366 to <2 x i64>*
  %368 = load <2 x i64>, <2 x i64>* %367, align 8, !alias.scope !2
  %369 = getelementptr inbounds i8, i8* %181, <2 x i64> %365
  %370 = getelementptr inbounds i8, i8* %181, <2 x i64> %368
  %371 = getelementptr inbounds i8*, i8** %179, i64 %362
  %372 = bitcast i8** %371 to <2 x i8*>*
  store <2 x i8*> %369, <2 x i8*>* %372, align 8, !alias.scope !5, !noalias !2
  %373 = getelementptr inbounds i8*, i8** %371, i64 2
  %374 = bitcast i8** %373 to <2 x i8*>*
  store <2 x i8*> %370, <2 x i8*>* %374, align 8, !alias.scope !5, !noalias !2
  %375 = or i64 %348, 8
  %376 = getelementptr inbounds i64, i64* %183, i64 %375
  %377 = bitcast i64* %376 to <2 x i64>*
  %378 = load <2 x i64>, <2 x i64>* %377, align 8, !alias.scope !2
  %379 = getelementptr inbounds i64, i64* %376, i64 2
  %380 = bitcast i64* %379 to <2 x i64>*
  %381 = load <2 x i64>, <2 x i64>* %380, align 8, !alias.scope !2
  %382 = getelementptr inbounds i8, i8* %181, <2 x i64> %378
  %383 = getelementptr inbounds i8, i8* %181, <2 x i64> %381
  %384 = getelementptr inbounds i8*, i8** %179, i64 %375
  %385 = bitcast i8** %384 to <2 x i8*>*
  store <2 x i8*> %382, <2 x i8*>* %385, align 8, !alias.scope !5, !noalias !2
  %386 = getelementptr inbounds i8*, i8** %384, i64 2
  %387 = bitcast i8** %386 to <2 x i8*>*
  store <2 x i8*> %383, <2 x i8*>* %387, align 8, !alias.scope !5, !noalias !2
  %388 = or i64 %348, 12
  %389 = getelementptr inbounds i64, i64* %183, i64 %388
  %390 = bitcast i64* %389 to <2 x i64>*
  %391 = load <2 x i64>, <2 x i64>* %390, align 8, !alias.scope !2
  %392 = getelementptr inbounds i64, i64* %389, i64 2
  %393 = bitcast i64* %392 to <2 x i64>*
  %394 = load <2 x i64>, <2 x i64>* %393, align 8, !alias.scope !2
  %395 = getelementptr inbounds i8, i8* %181, <2 x i64> %391
  %396 = getelementptr inbounds i8, i8* %181, <2 x i64> %394
  %397 = getelementptr inbounds i8*, i8** %179, i64 %388
  %398 = bitcast i8** %397 to <2 x i8*>*
  store <2 x i8*> %395, <2 x i8*>* %398, align 8, !alias.scope !5, !noalias !2
  %399 = getelementptr inbounds i8*, i8** %397, i64 2
  %400 = bitcast i8** %399 to <2 x i8*>*
  store <2 x i8*> %396, <2 x i8*>* %400, align 8, !alias.scope !5, !noalias !2
  %401 = add i64 %348, 16
  %402 = add i64 %349, -4
  %403 = icmp eq i64 %402, 0
  br i1 %403, label %404, label %347, !llvm.loop !7

404:                                              ; preds = %347, %338
  %405 = phi i64 [ 0, %338 ], [ %401, %347 ]
  %406 = icmp eq i64 %343, 0
  br i1 %406, label %425, label %407

407:                                              ; preds = %404, %407
  %408 = phi i64 [ %422, %407 ], [ %405, %404 ]
  %409 = phi i64 [ %423, %407 ], [ %343, %404 ]
  %410 = getelementptr inbounds i64, i64* %183, i64 %408
  %411 = bitcast i64* %410 to <2 x i64>*
  %412 = load <2 x i64>, <2 x i64>* %411, align 8, !alias.scope !2
  %413 = getelementptr inbounds i64, i64* %410, i64 2
  %414 = bitcast i64* %413 to <2 x i64>*
  %415 = load <2 x i64>, <2 x i64>* %414, align 8, !alias.scope !2
  %416 = getelementptr inbounds i8, i8* %181, <2 x i64> %412
  %417 = getelementptr inbounds i8, i8* %181, <2 x i64> %415
  %418 = getelementptr inbounds i8*, i8** %179, i64 %408
  %419 = bitcast i8** %418 to <2 x i8*>*
  store <2 x i8*> %416, <2 x i8*>* %419, align 8, !alias.scope !5, !noalias !2
  %420 = getelementptr inbounds i8*, i8** %418, i64 2
  %421 = bitcast i8** %420 to <2 x i8*>*
  store <2 x i8*> %417, <2 x i8*>* %421, align 8, !alias.scope !5, !noalias !2
  %422 = add i64 %408, 4
  %423 = add i64 %409, -1
  %424 = icmp eq i64 %423, 0
  br i1 %424, label %425, label %407, !llvm.loop !9

425:                                              ; preds = %407, %404
  %426 = icmp eq i64 %323, %339
  br i1 %426, label %427, label %325

427:                                              ; preds = %448, %425, %319
  %428 = getelementptr inbounds i8*, i8** %179, i64 %163
  store i8* null, i8** %428, align 8
  %429 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %430 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %429, i64 0, i32 1, i32 0
  %431 = load i8, i8* %430, align 1
  %432 = icmp slt i8 %431, 0
  br i1 %432, label %433, label %436

433:                                              ; preds = %427
  %434 = load i8*, i8** %15, align 8
  call void @_ZdlPv(i8* %434) #11
  %435 = load i64*, i64** %11, align 8
  br label %436

436:                                              ; preds = %427, %433
  %437 = phi i64* [ %183, %427 ], [ %435, %433 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #9
  %438 = icmp eq i64* %437, null
  br i1 %438, label %442, label %439

439:                                              ; preds = %436
  %440 = ptrtoint i64* %437 to i64
  store i64 %440, i64* %159, align 8
  %441 = bitcast i64* %437 to i8*
  call void @_ZdlPv(i8* %441) #11
  br label %442

442:                                              ; preds = %436, %439
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #9
  %443 = load i8, i8* %165, align 1
  %444 = icmp slt i8 %443, 0
  br i1 %444, label %445, label %447

445:                                              ; preds = %442
  %446 = load i8*, i8** %8, align 8
  call void @_ZdlPv(i8* %446) #11
  br label %447

447:                                              ; preds = %442, %445
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #9
  ret i8** %179

448:                                              ; preds = %325, %448
  %449 = phi i64 [ %454, %448 ], [ %326, %325 ]
  %450 = getelementptr inbounds i64, i64* %183, i64 %449
  %451 = load i64, i64* %450, align 8
  %452 = getelementptr inbounds i8, i8* %181, i64 %451
  %453 = getelementptr inbounds i8*, i8** %179, i64 %449
  store i8* %452, i8** %453, align 8
  %454 = add nuw i64 %449, 1
  %455 = icmp ult i64 %454, %163
  br i1 %455, label %448, label %427, !llvm.loop !11
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"*, i8 signext) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::__tree_end_node"* @_ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEElEERKT_(%"class.std::__1::__tree"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::__tree", %"class.std::__1::__tree"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = bitcast %"class.std::__1::__tree_end_node"* %3 to %"class.std::__1::__tree_node"**
  %5 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %4, align 8
  %6 = icmp eq %"class.std::__1::__tree_node"* %5, null
  br i1 %6, label %84, label %7

7:                                                ; preds = %2
  %8 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = zext i8 %10 to i64
  %15 = select i1 %11, i64 %13, i64 %14
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %19 = select i1 %11, i8* %17, i8* %18
  br label %20

20:                                               ; preds = %46, %7
  %21 = phi %"class.std::__1::__tree_end_node"* [ %3, %7 ], [ %54, %46 ]
  %22 = phi %"class.std::__1::__tree_node"* [ %5, %7 ], [ %55, %46 ]
  %23 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %22, i64 0, i32 1
  %24 = bitcast %"struct.std::__1::__value_type"* %23 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %24, i64 0, i32 1, i32 0
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  %28 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %22, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = zext i8 %26 to i64
  %31 = select i1 %27, i64 %29, i64 %30
  %32 = icmp ult i64 %15, %31
  %33 = select i1 %32, i64 %15, i64 %31
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %42, label %35

35:                                               ; preds = %20
  %36 = getelementptr inbounds %"struct.std::__1::__value_type", %"struct.std::__1::__value_type"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = bitcast %"struct.std::__1::__value_type"* %23 to i8*
  %39 = select i1 %27, i8* %37, i8* %38
  %40 = tail call i32 @memcmp(i8* %39, i8* %19, i64 %33) #9
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %35, %20
  %43 = icmp ult i64 %31, %15
  %44 = zext i1 %32 to i32
  %45 = select i1 %43, i32 -1, i32 %44
  br label %46

46:                                               ; preds = %42, %35
  %47 = phi i32 [ %45, %42 ], [ %40, %35 ]
  %48 = icmp slt i32 %47, 0
  %49 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %22, i64 0, i32 0, i32 1
  %50 = bitcast %"class.std::__1::__tree_node_base"** %49 to %"class.std::__1::__tree_node"**
  %51 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %22, i64 0, i32 0, i32 0
  %52 = bitcast %"class.std::__1::__tree_node"* %22 to %"class.std::__1::__tree_node"**
  %53 = select i1 %48, %"class.std::__1::__tree_node"** %50, %"class.std::__1::__tree_node"** %52
  %54 = select i1 %48, %"class.std::__1::__tree_end_node"* %21, %"class.std::__1::__tree_end_node"* %51
  %55 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %53, align 8
  %56 = icmp eq %"class.std::__1::__tree_node"* %55, null
  br i1 %56, label %57, label %20

57:                                               ; preds = %46
  %58 = icmp eq %"class.std::__1::__tree_end_node"* %54, %3
  br i1 %58, label %84, label %59

59:                                               ; preds = %57
  %60 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %54, i64 4
  %61 = bitcast %"class.std::__1::__tree_end_node"* %60 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %62 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %61, i64 0, i32 1, i32 0
  %63 = load i8, i8* %62, align 1
  %64 = icmp slt i8 %63, 0
  %65 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %54, i64 5
  %66 = bitcast %"class.std::__1::__tree_end_node"* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = zext i8 %63 to i64
  %69 = select i1 %64, i64 %67, i64 %68
  %70 = icmp ult i64 %69, %15
  %71 = select i1 %70, i64 %69, i64 %15
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %80, label %73

73:                                               ; preds = %59
  %74 = bitcast %"class.std::__1::__tree_end_node"* %60 to i8**
  %75 = load i8*, i8** %74, align 8
  %76 = bitcast %"class.std::__1::__tree_end_node"* %60 to i8*
  %77 = select i1 %64, i8* %75, i8* %76
  %78 = tail call i32 @memcmp(i8* %19, i8* %77, i64 %71) #9
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %82

80:                                               ; preds = %73, %59
  %81 = icmp ult i64 %15, %69
  br i1 %81, label %84, label %85

82:                                               ; preds = %73
  %83 = icmp slt i32 %78, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %57, %80, %2, %82
  br label %85

85:                                               ; preds = %80, %82, %84
  %86 = phi %"class.std::__1::__tree_end_node"* [ %3, %84 ], [ %54, %82 ], [ %54, %80 ]
  ret %"class.std::__1::__tree_end_node"* %86
}

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
