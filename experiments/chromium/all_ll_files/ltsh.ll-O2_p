; ModuleID = '../../third_party/ots/src/src/ltsh.cc'
source_filename = "../../third_party/ots/src/src/ltsh.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.ots::OpenTypeLTSH" = type { %"class.ots::Table.base", i16, %"class.std::__1::vector" }
%"class.ots::Table.base" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8 }>
%"struct.ots::Font" = type { %"struct.ots::FontFile"*, i32, i16, i16, i16, i16, %"class.std::__1::map.15" }
%"struct.ots::FontFile" = type { %"class.ots::OTSContext"*, %"class.std::__1::map", %"class.std::__1::map.4" }
%"class.ots::OTSContext" = type { i32 (...)** }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::map.4" = type { %"class.std::__1::__tree.5" }
%"class.std::__1::__tree.5" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::map.15" = type { %"class.std::__1::__tree.16" }
%"class.std::__1::__tree.16" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.17", %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { i8* }
%"class.ots::Table" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8, [7 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.ots::OTSStream" = type <{ i32 (...)**, i32, [4 x i8] }>

$_ZN3ots12OpenTypeLTSHD2Ev = comdat any

$_ZN3ots12OpenTypeLTSHD0Ev = comdat any

@.str = private unnamed_addr constant [31 x i8] c"Required maxp table is missing\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"Failed to read table header\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"Unsupported version: %u\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"Bad numGlyphs: %u\00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"Failed to read pixels for glyph %d\00", align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"Failed to write table header\00", align 1
@.str.6 = private unnamed_addr constant [40 x i8] c"Failed to write pixel size for glyph %d\00", align 1
@_ZTVN3ots12OpenTypeLTSHE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ots::OpenTypeLTSH"*)* @_ZN3ots12OpenTypeLTSHD2Ev to i8*), i8* bitcast (void (%"class.ots::OpenTypeLTSH"*)* @_ZN3ots12OpenTypeLTSHD0Ev to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeLTSH"*, i8*, i64)* @_ZN3ots12OpenTypeLTSH5ParseEPKhm to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeLTSH"*, %"class.ots::OTSStream"*)* @_ZN3ots12OpenTypeLTSH9SerializeEPNS_9OTSStreamE to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeLTSH"*)* @_ZN3ots12OpenTypeLTSH15ShouldSerializeEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeLTSH5ParseEPKhm(%"class.ots::OpenTypeLTSH"*, i8*, i64) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.ots::OpenTypeLTSH"* %0 to %"class.ots::Table"*
  %5 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 0, i32 3
  %6 = load %"struct.ots::Font"*, %"struct.ots::Font"** %5, align 8
  %7 = tail call %"class.ots::Table"* @_ZNK3ots4Font13GetTypedTableEj(%"struct.ots::Font"* %6, i32 1835104368) #8
  %8 = icmp eq %"class.ots::Table"* %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %3
  %10 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %4, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0)) #8
  br label %133

11:                                               ; preds = %3
  %12 = icmp ult i64 %2, 2
  br i1 %12, label %19, label %13

13:                                               ; preds = %11
  %14 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 1
  %15 = bitcast i8* %1 to i16*
  %16 = load i16, i16* %15, align 1
  %17 = tail call i16 @llvm.bswap.i16(i16 %16) #8
  store i16 %17, i16* %14, align 2
  %18 = icmp ult i64 %2, 4
  br i1 %18, label %19, label %21

19:                                               ; preds = %13, %11
  %20 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %4, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0)) #8
  br label %133

21:                                               ; preds = %13
  %22 = getelementptr inbounds i8, i8* %1, i64 2
  %23 = bitcast i8* %22 to i16*
  %24 = load i16, i16* %23, align 1
  %25 = tail call i16 @llvm.bswap.i16(i16 %24) #8
  %26 = icmp eq i16 %16, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = zext i16 %17 to i32
  %29 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table4DropEPKcz(%"class.ots::Table"* %4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i32 %28) #8
  br label %133

30:                                               ; preds = %21
  %31 = getelementptr inbounds %"class.ots::Table", %"class.ots::Table"* %7, i64 0, i32 5, i64 1
  %32 = bitcast i8* %31 to i16*
  %33 = load i16, i16* %32, align 2
  %34 = icmp eq i16 %25, %33
  br i1 %34, label %38, label %35

35:                                               ; preds = %30
  %36 = zext i16 %25 to i32
  %37 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table4DropEPKcz(%"class.ots::Table"* %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i32 %36) #8
  br label %133

38:                                               ; preds = %30
  %39 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 2
  %40 = zext i16 %25 to i64
  %41 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %42 = bitcast i8** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.std::__1::vector"* %39 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = sub i64 %43, %45
  %47 = icmp ult i64 %46, %40
  %48 = inttoptr i64 %45 to i8*
  br i1 %47, label %49, label %65

49:                                               ; preds = %38
  %50 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 2, i32 0, i32 1
  %51 = bitcast i8** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %52, %45
  %54 = tail call i8* @_Znwm(i64 %40) #9
  %55 = getelementptr inbounds i8, i8* %54, i64 %53
  %56 = ptrtoint i8* %55 to i64
  %57 = getelementptr inbounds i8, i8* %54, i64 %40
  %58 = ptrtoint i8* %57 to i64
  %59 = ptrtoint i8* %54 to i64
  %60 = icmp sgt i64 %53, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %49
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %54, i8* align 1 %48, i64 %53, i1 false) #8
  br label %62

62:                                               ; preds = %61, %49
  store i64 %59, i64* %44, align 8
  store i64 %56, i64* %51, align 8
  store i64 %58, i64* %42, align 8
  %63 = icmp eq i64 %45, 0
  br i1 %63, label %65, label %64

64:                                               ; preds = %62
  tail call void @_ZdlPv(i8* nonnull %48) #9
  br label %65

65:                                               ; preds = %38, %62, %64
  %66 = zext i16 %25 to i32
  %67 = icmp eq i16 %24, 0
  br i1 %67, label %133, label %68

68:                                               ; preds = %65
  %69 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 2, i32 0, i32 1
  %70 = bitcast i8** %69 to i64*
  %71 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %39, i64 0, i32 0, i32 0
  br label %72

72:                                               ; preds = %68, %128
  %73 = phi i32 [ 0, %68 ], [ %129, %128 ]
  %74 = phi i64 [ 4, %68 ], [ %75, %128 ]
  %75 = add nuw nsw i64 %74, 1
  %76 = icmp ult i64 %74, %2
  br i1 %76, label %77, label %131

77:                                               ; preds = %72
  %78 = getelementptr inbounds i8, i8* %1, i64 %74
  %79 = load i8, i8* %78, align 1
  %80 = load i8*, i8** %69, align 8
  %81 = load i8*, i8** %41, align 8
  %82 = icmp eq i8* %80, %81
  %83 = ptrtoint i8* %81 to i64
  br i1 %82, label %87, label %84

84:                                               ; preds = %77
  store i8 %79, i8* %80, align 1
  %85 = getelementptr inbounds i8, i8* %80, i64 1
  %86 = ptrtoint i8* %85 to i64
  store i64 %86, i64* %70, align 8
  br label %128

87:                                               ; preds = %77
  %88 = ptrtoint i8* %80 to i64
  %89 = load i64, i64* %44, align 8
  %90 = sub i64 %88, %89
  %91 = add i64 %90, 1
  %92 = icmp slt i64 %91, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %87
  %94 = bitcast %"class.std::__1::vector"* %39 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %94) #10
  unreachable

95:                                               ; preds = %87
  %96 = sub i64 %83, %89
  %97 = icmp ult i64 %96, 4611686018427387903
  br i1 %97, label %98, label %103

98:                                               ; preds = %95
  %99 = shl i64 %96, 1
  %100 = icmp ult i64 %99, %91
  %101 = select i1 %100, i64 %91, i64 %99
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %106, label %103

103:                                              ; preds = %98, %95
  %104 = phi i64 [ %101, %98 ], [ 9223372036854775807, %95 ]
  %105 = tail call i8* @_Znwm(i64 %104) #9
  br label %106

106:                                              ; preds = %103, %98
  %107 = phi i64 [ %104, %103 ], [ 0, %98 ]
  %108 = phi i8* [ %105, %103 ], [ null, %98 ]
  %109 = getelementptr inbounds i8, i8* %108, i64 %90
  %110 = getelementptr inbounds i8, i8* %108, i64 %107
  %111 = ptrtoint i8* %110 to i64
  store i8 %79, i8* %109, align 1
  %112 = getelementptr inbounds i8, i8* %109, i64 1
  %113 = ptrtoint i8* %112 to i64
  %114 = load i8*, i8** %71, align 8
  %115 = load i64, i64* %70, align 8
  %116 = ptrtoint i8* %114 to i64
  %117 = sub i64 %115, %116
  %118 = sub i64 0, %117
  %119 = getelementptr inbounds i8, i8* %109, i64 %118
  %120 = ptrtoint i8* %119 to i64
  %121 = icmp sgt i64 %117, 0
  br i1 %121, label %122, label %124

122:                                              ; preds = %106
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %119, i8* align 1 %114, i64 %117, i1 false) #8
  %123 = load i8*, i8** %71, align 8
  br label %124

124:                                              ; preds = %122, %106
  %125 = phi i8* [ %114, %106 ], [ %123, %122 ]
  store i64 %120, i64* %44, align 8
  store i64 %113, i64* %70, align 8
  store i64 %111, i64* %42, align 8
  %126 = icmp eq i8* %125, null
  br i1 %126, label %128, label %127

127:                                              ; preds = %124
  tail call void @_ZdlPv(i8* nonnull %125) #9
  br label %128

128:                                              ; preds = %84, %124, %127
  %129 = add nuw nsw i32 %73, 1
  %130 = icmp ult i32 %129, %66
  br i1 %130, label %72, label %133

131:                                              ; preds = %72
  %132 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %4, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0), i32 %73) #8
  br label %133

133:                                              ; preds = %128, %65, %19, %27, %35, %131, %9
  %134 = phi i1 [ %10, %9 ], [ %29, %27 ], [ %37, %35 ], [ %20, %19 ], [ %132, %131 ], [ true, %65 ], [ true, %128 ]
  ret i1 %134
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.ots::Table"* @_ZNK3ots4Font13GetTypedTableEj(%"struct.ots::Font"*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"*, i8*, ...) local_unnamed_addr #2

declare zeroext i1 @_ZN3ots5Table4DropEPKcz(%"class.ots::Table"*, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeLTSH9SerializeEPNS_9OTSStreamE(%"class.ots::OpenTypeLTSH"*, %"class.ots::OTSStream"*) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i16, align 2
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 2
  %12 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 2, i32 0, i32 1
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::vector"* %11 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = trunc i64 %17 to i16
  %19 = icmp ult i64 %17, 65536
  br i1 %19, label %20, label %111

20:                                               ; preds = %2
  %21 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 1
  %22 = load i16, i16* %21, align 2
  %23 = bitcast i16* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %23)
  %24 = tail call i16 @llvm.bswap.i16(i16 %22) #8
  store i16 %24, i16* %8, align 2
  %25 = bitcast %"class.ots::OTSStream"* %1 to i64 (%"class.ots::OTSStream"*)***
  %26 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %25, align 8
  %27 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %26, i64 4
  %28 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %27, align 8
  %29 = tail call i64 %28(%"class.ots::OTSStream"* %1) #8
  %30 = and i64 %29, 3
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %20
  %33 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %34 = load i32, i32* %33, align 8
  br label %47

35:                                               ; preds = %20
  %36 = sub nuw nsw i64 4, %30
  %37 = icmp ult i64 %36, 2
  %38 = select i1 %37, i64 %36, i64 2
  %39 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %39) #8
  store i32 0, i32* %6, align 4
  %40 = getelementptr inbounds i8, i8* %39, i64 %30
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* nonnull align 2 %23, i64 %38, i1 false) #8
  %41 = load i32, i32* %6, align 4
  %42 = tail call i32 @llvm.bswap.i32(i32 %41) #8
  %43 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = add i32 %44, %42
  store i32 %45, i32* %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %39) #8
  %46 = icmp eq i64 %30, 3
  br i1 %46, label %47, label %57

47:                                               ; preds = %35, %32
  %48 = phi i32 [ %45, %35 ], [ %34, %32 ]
  %49 = phi i64 [ %38, %35 ], [ 0, %32 ]
  %50 = phi i64 [ 1, %35 ], [ 2, %32 ]
  %51 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %51)
  store i32 0, i32* %7, align 4
  %52 = getelementptr inbounds i8, i8* %23, i64 %49
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %51, i8* align 1 %52, i64 %50, i1 false) #8
  %53 = load i32, i32* %7, align 4
  %54 = tail call i32 @llvm.bswap.i32(i32 %53) #8
  %55 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %56 = add i32 %54, %48
  store i32 %56, i32* %55, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %51)
  br label %57

57:                                               ; preds = %35, %47
  %58 = bitcast %"class.ots::OTSStream"* %1 to i1 (%"class.ots::OTSStream"*, i8*, i64)***
  %59 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %58, align 8
  %60 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %59, i64 2
  %61 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %60, align 8
  %62 = call zeroext i1 %61(%"class.ots::OTSStream"* %1, i8* nonnull %23, i64 2) #8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %23)
  br i1 %62, label %63, label %111

63:                                               ; preds = %57
  %64 = bitcast i16* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %64)
  %65 = call i16 @llvm.bswap.i16(i16 %18) #8
  store i16 %65, i16* %5, align 2
  %66 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %25, align 8
  %67 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %66, i64 4
  %68 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %67, align 8
  %69 = call i64 %68(%"class.ots::OTSStream"* %1) #8
  %70 = and i64 %69, 3
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %63
  %73 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %74 = load i32, i32* %73, align 8
  br label %87

75:                                               ; preds = %63
  %76 = sub nuw nsw i64 4, %70
  %77 = icmp ult i64 %76, 2
  %78 = select i1 %77, i64 %76, i64 2
  %79 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %79) #8
  store i32 0, i32* %3, align 4
  %80 = getelementptr inbounds i8, i8* %79, i64 %70
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %80, i8* nonnull align 2 %64, i64 %78, i1 false) #8
  %81 = load i32, i32* %3, align 4
  %82 = call i32 @llvm.bswap.i32(i32 %81) #8
  %83 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %84 = load i32, i32* %83, align 8
  %85 = add i32 %84, %82
  store i32 %85, i32* %83, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %79) #8
  %86 = icmp eq i64 %70, 3
  br i1 %86, label %87, label %97

87:                                               ; preds = %75, %72
  %88 = phi i32 [ %85, %75 ], [ %74, %72 ]
  %89 = phi i64 [ %78, %75 ], [ 0, %72 ]
  %90 = phi i64 [ 1, %75 ], [ 2, %72 ]
  %91 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %91)
  store i32 0, i32* %4, align 4
  %92 = getelementptr inbounds i8, i8* %64, i64 %89
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %91, i8* align 1 %92, i64 %90, i1 false) #8
  %93 = load i32, i32* %4, align 4
  %94 = call i32 @llvm.bswap.i32(i32 %93) #8
  %95 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %96 = add i32 %94, %88
  store i32 %96, i32* %95, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %91)
  br label %97

97:                                               ; preds = %75, %87
  %98 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %58, align 8
  %99 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %98, i64 2
  %100 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %99, align 8
  %101 = call zeroext i1 %100(%"class.ots::OTSStream"* %1, i8* nonnull %64, i64 2) #8
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %64)
  br i1 %101, label %102, label %111

102:                                              ; preds = %97
  %103 = trunc i64 %17 to i32
  %104 = and i32 %103, 65535
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %151, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %11, i64 0, i32 0, i32 0
  %108 = bitcast i32* %9 to i8*
  %109 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %110 = bitcast i32* %10 to i8*
  br label %117

111:                                              ; preds = %2, %97, %57
  %112 = bitcast %"class.ots::OpenTypeLTSH"* %0 to %"class.ots::Table"*
  %113 = call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %112, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0)) #8
  ret i1 %113

114:                                              ; preds = %142
  %115 = zext i16 %147 to i32
  %116 = icmp ugt i32 %104, %115
  br i1 %116, label %117, label %151

117:                                              ; preds = %106, %114
  %118 = phi i32 [ 0, %106 ], [ %115, %114 ]
  %119 = phi i16 [ 0, %106 ], [ %147, %114 ]
  %120 = zext i16 %119 to i64
  %121 = load i8*, i8** %107, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 %120
  %123 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %25, align 8
  %124 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %123, i64 4
  %125 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %124, align 8
  %126 = call i64 %125(%"class.ots::OTSStream"* %1) #8
  %127 = and i64 %126, 3
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %136, label %129

129:                                              ; preds = %117
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %108) #8
  store i32 0, i32* %9, align 4
  %130 = getelementptr inbounds i8, i8* %108, i64 %127
  %131 = load i8, i8* %122, align 1
  store i8 %131, i8* %130, align 1
  %132 = load i32, i32* %9, align 4
  %133 = call i32 @llvm.bswap.i32(i32 %132) #8
  %134 = load i32, i32* %109, align 8
  %135 = add i32 %134, %133
  store i32 %135, i32* %109, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %108) #8
  br label %142

136:                                              ; preds = %117
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %110)
  store i32 0, i32* %10, align 4
  %137 = load i8, i8* %122, align 1
  store i8 %137, i8* %110, align 4
  %138 = load i32, i32* %10, align 4
  %139 = call i32 @llvm.bswap.i32(i32 %138) #8
  %140 = load i32, i32* %109, align 8
  %141 = add i32 %140, %139
  store i32 %141, i32* %109, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %110)
  br label %142

142:                                              ; preds = %129, %136
  %143 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %58, align 8
  %144 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %143, i64 2
  %145 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %144, align 8
  %146 = call zeroext i1 %145(%"class.ots::OTSStream"* %1, i8* %122, i64 1) #8
  %147 = add i16 %119, 1
  br i1 %146, label %114, label %148

148:                                              ; preds = %142
  %149 = bitcast %"class.ots::OpenTypeLTSH"* %0 to %"class.ots::Table"*
  %150 = call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %149, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6, i64 0, i64 0), i32 %118) #8
  br label %151

151:                                              ; preds = %114, %102, %148
  %152 = phi i1 [ %150, %148 ], [ true, %102 ], [ true, %114 ]
  ret i1 %152
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeLTSH15ShouldSerializeEv(%"class.ots::OpenTypeLTSH"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.ots::OpenTypeLTSH"* %0 to %"class.ots::Table"*
  %3 = tail call zeroext i1 @_ZN3ots5Table15ShouldSerializeEv(%"class.ots::Table"* %2) #8
  br i1 %3, label %4, label %9

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 0, i32 3
  %6 = load %"struct.ots::Font"*, %"struct.ots::Font"** %5, align 8
  %7 = tail call %"class.ots::Table"* @_ZNK3ots4Font8GetTableEj(%"struct.ots::Font"* %6, i32 1735162214) #8
  %8 = icmp ne %"class.ots::Table"* %7, null
  br label %9

9:                                                ; preds = %4, %1
  %10 = phi i1 [ false, %1 ], [ %8, %4 ]
  ret i1 %10
}

declare zeroext i1 @_ZN3ots5Table15ShouldSerializeEv(%"class.ots::Table"*) unnamed_addr #2

declare %"class.ots::Table"* @_ZNK3ots4Font8GetTableEj(%"struct.ots::Font"*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3ots12OpenTypeLTSHD2Ev(%"class.ots::OpenTypeLTSH"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3ots12OpenTypeLTSHE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_ZdlPv(i8* nonnull %4) #9
  br label %10

10:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3ots12OpenTypeLTSHD0Ev(%"class.ots::OpenTypeLTSH"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3ots12OpenTypeLTSHE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i8* %4 to i64
  %8 = getelementptr inbounds %"class.ots::OpenTypeLTSH", %"class.ots::OpenTypeLTSH"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  tail call void @_ZdlPv(i8* nonnull %4) #9
  br label %10

10:                                               ; preds = %1, %6
  %11 = bitcast %"class.ots::OpenTypeLTSH"* %0 to i8*
  tail call void @_ZdlPv(i8* %11) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #7

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
