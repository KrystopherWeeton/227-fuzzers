; ModuleID = '../../third_party/webrtc/call/audio_state.cc'
source_filename = "../../third_party/webrtc/call/audio_state.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.webrtc::AudioState::Config" = type { %"class.rtc::scoped_refptr", %"class.rtc::scoped_refptr.0", %"class.rtc::scoped_refptr.1", %"class.rtc::scoped_refptr.2" }
%"class.rtc::scoped_refptr" = type { %"class.webrtc::AudioMixer"* }
%"class.webrtc::AudioMixer" = type { %"class.rtc::RefCountInterface" }
%"class.rtc::RefCountInterface" = type { i32 (...)** }
%"class.rtc::scoped_refptr.0" = type { %"class.webrtc::AudioProcessing"* }
%"class.webrtc::AudioProcessing" = type { %"class.rtc::RefCountInterface" }
%"class.rtc::scoped_refptr.1" = type { %"class.webrtc::AudioDeviceModule"* }
%"class.webrtc::AudioDeviceModule" = type { %"class.rtc::RefCountInterface" }
%"class.rtc::scoped_refptr.2" = type { %"class.webrtc::AsyncAudioProcessing::Factory"* }
%"class.webrtc::AsyncAudioProcessing::Factory" = type { %"class.rtc::RefCountInterface", %"class.webrtc::AudioFrameProcessor"*, %"class.webrtc::TaskQueueFactory"* }
%"class.webrtc::AudioFrameProcessor" = type { i32 (...)** }
%"class.webrtc::TaskQueueFactory" = type { i32 (...)** }

@_ZN6webrtc10AudioState6ConfigC1Ev = hidden unnamed_addr alias void (%"struct.webrtc::AudioState::Config"*), void (%"struct.webrtc::AudioState::Config"*)* @_ZN6webrtc10AudioState6ConfigC2Ev
@_ZN6webrtc10AudioState6ConfigD1Ev = hidden unnamed_addr alias void (%"struct.webrtc::AudioState::Config"*), void (%"struct.webrtc::AudioState::Config"*)* @_ZN6webrtc10AudioState6ConfigD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6webrtc10AudioState6ConfigC2Ev(%"struct.webrtc::AudioState::Config"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.webrtc::AudioState::Config"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc10AudioState6ConfigD2Ev(%"struct.webrtc::AudioState::Config"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"struct.webrtc::AudioState::Config", %"struct.webrtc::AudioState::Config"* %0, i64 0, i32 3, i32 0
  %3 = load %"class.webrtc::AsyncAudioProcessing::Factory"*, %"class.webrtc::AsyncAudioProcessing::Factory"** %2, align 8
  %4 = icmp eq %"class.webrtc::AsyncAudioProcessing::Factory"* %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.webrtc::AsyncAudioProcessing::Factory", %"class.webrtc::AsyncAudioProcessing::Factory"* %3, i64 0, i32 0
  %7 = bitcast %"class.webrtc::AsyncAudioProcessing::Factory"* %3 to i32 (%"class.rtc::RefCountInterface"*)***
  %8 = load i32 (%"class.rtc::RefCountInterface"*)**, i32 (%"class.rtc::RefCountInterface"*)*** %7, align 8
  %9 = getelementptr inbounds i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %8, i64 1
  %10 = load i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %9, align 8
  %11 = tail call i32 %10(%"class.rtc::RefCountInterface"* %6) #3
  br label %12

12:                                               ; preds = %1, %5
  %13 = getelementptr inbounds %"struct.webrtc::AudioState::Config", %"struct.webrtc::AudioState::Config"* %0, i64 0, i32 2, i32 0
  %14 = load %"class.webrtc::AudioDeviceModule"*, %"class.webrtc::AudioDeviceModule"** %13, align 8
  %15 = icmp eq %"class.webrtc::AudioDeviceModule"* %14, null
  br i1 %15, label %23, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.webrtc::AudioDeviceModule", %"class.webrtc::AudioDeviceModule"* %14, i64 0, i32 0
  %18 = bitcast %"class.webrtc::AudioDeviceModule"* %14 to i32 (%"class.rtc::RefCountInterface"*)***
  %19 = load i32 (%"class.rtc::RefCountInterface"*)**, i32 (%"class.rtc::RefCountInterface"*)*** %18, align 8
  %20 = getelementptr inbounds i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %19, i64 1
  %21 = load i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %20, align 8
  %22 = tail call i32 %21(%"class.rtc::RefCountInterface"* %17) #3
  br label %23

23:                                               ; preds = %12, %16
  %24 = getelementptr inbounds %"struct.webrtc::AudioState::Config", %"struct.webrtc::AudioState::Config"* %0, i64 0, i32 1, i32 0
  %25 = load %"class.webrtc::AudioProcessing"*, %"class.webrtc::AudioProcessing"** %24, align 8
  %26 = icmp eq %"class.webrtc::AudioProcessing"* %25, null
  br i1 %26, label %34, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.webrtc::AudioProcessing", %"class.webrtc::AudioProcessing"* %25, i64 0, i32 0
  %29 = bitcast %"class.webrtc::AudioProcessing"* %25 to i32 (%"class.rtc::RefCountInterface"*)***
  %30 = load i32 (%"class.rtc::RefCountInterface"*)**, i32 (%"class.rtc::RefCountInterface"*)*** %29, align 8
  %31 = getelementptr inbounds i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %30, i64 1
  %32 = load i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %31, align 8
  %33 = tail call i32 %32(%"class.rtc::RefCountInterface"* %28) #3
  br label %34

34:                                               ; preds = %23, %27
  %35 = getelementptr inbounds %"struct.webrtc::AudioState::Config", %"struct.webrtc::AudioState::Config"* %0, i64 0, i32 0, i32 0
  %36 = load %"class.webrtc::AudioMixer"*, %"class.webrtc::AudioMixer"** %35, align 8
  %37 = icmp eq %"class.webrtc::AudioMixer"* %36, null
  br i1 %37, label %45, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"class.webrtc::AudioMixer", %"class.webrtc::AudioMixer"* %36, i64 0, i32 0
  %40 = bitcast %"class.webrtc::AudioMixer"* %36 to i32 (%"class.rtc::RefCountInterface"*)***
  %41 = load i32 (%"class.rtc::RefCountInterface"*)**, i32 (%"class.rtc::RefCountInterface"*)*** %40, align 8
  %42 = getelementptr inbounds i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %41, i64 1
  %43 = load i32 (%"class.rtc::RefCountInterface"*)*, i32 (%"class.rtc::RefCountInterface"*)** %42, align 8
  %44 = tail call i32 %43(%"class.rtc::RefCountInterface"* %39) #3
  br label %45

45:                                               ; preds = %34, %38
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
