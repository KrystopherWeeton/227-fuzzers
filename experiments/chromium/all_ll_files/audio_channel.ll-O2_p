; ModuleID = '../../third_party/blink/renderer/platform/audio/audio_channel.cc'
source_filename = "../../third_party/blink/renderer/platform/audio/audio_channel.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::AudioChannel" = type <{ i64, float*, %"class.std::__1::unique_ptr", i8, [7 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::AudioArray"* }
%"class.blink::AudioArray" = type <{ float*, float*, i32, [4 x i8] }>

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink12AudioChannel13ResizeSmallerEm(%"class.blink::AudioChannel"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12AudioChannel5ScaleEf(%"class.blink::AudioChannel"* nocapture, float) local_unnamed_addr #1 align 2 {
  %3 = alloca float, align 4
  store float %1, float* %3, align 4
  %4 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 3
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %24

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 1
  %9 = load float*, float** %8, align 8
  %10 = icmp eq float* %9, null
  br i1 %10, label %12, label %11

11:                                               ; preds = %7
  store i8 0, i8* %4, align 8
  br label %18

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %14 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %14, i64 0, i32 1
  %16 = load float*, float** %15, align 8
  store i8 0, i8* %4, align 8
  %17 = load float*, float** %15, align 8
  br label %18

18:                                               ; preds = %11, %12
  %19 = phi float* [ %16, %12 ], [ %9, %11 ]
  %20 = phi float* [ %17, %12 ], [ %9, %11 ]
  %21 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = trunc i64 %22 to i32
  call void @_ZN5blink11vector_math5VsmulEPKfiS2_Pfij(float* %19, i32 1, float* nonnull %3, float* %20, i32 1, i32 %23) #6
  br label %24

24:                                               ; preds = %2, %18
  ret void
}

declare void @_ZN5blink11vector_math5VsmulEPKfiS2_Pfij(float*, i32, float*, float*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12AudioChannel8CopyFromEPKS0_(%"class.blink::AudioChannel"* nocapture, %"class.blink::AudioChannel"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 3
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  %6 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 3
  br i1 %5, label %33, label %7

7:                                                ; preds = %2
  %8 = load i8, i8* %6, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %63

10:                                               ; preds = %7
  store i8 1, i8* %6, align 8
  %11 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %12 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %11, align 8
  %13 = icmp eq %"class.blink::AudioArray"* %12, null
  br i1 %13, label %22, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %12, i64 0, i32 1
  %16 = bitcast float** %15 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %12, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = zext i32 %19 to i64
  %21 = shl nuw nsw i64 %20, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %21, i1 false) #6
  br label %63

22:                                               ; preds = %10
  %23 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %24, i64 4) #6
  %26 = extractvalue { i64, i1 } %25, 1
  br i1 %26, label %27, label %28, !prof !3

27:                                               ; preds = %22
  tail call void @llvm.trap() #6
  unreachable

28:                                               ; preds = %22
  %29 = extractvalue { i64, i1 } %25, 0
  %30 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 1
  %31 = bitcast float** %30 to i8**
  %32 = load i8*, i8** %31, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %32, i8 0, i64 %29, i1 false) #6
  br label %63

33:                                               ; preds = %2
  store i8 0, i8* %6, align 8
  %34 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 1
  %35 = load float*, float** %34, align 8
  %36 = icmp eq float* %35, null
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %39 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %38, align 8
  %40 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %39, i64 0, i32 1
  %41 = load float*, float** %40, align 8
  br label %42

42:                                               ; preds = %33, %37
  %43 = phi float* [ %41, %37 ], [ %35, %33 ]
  %44 = bitcast float* %43 to i8*
  %45 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 1
  %46 = load float*, float** %45, align 8
  %47 = icmp eq float* %46, null
  br i1 %47, label %48, label %53

48:                                               ; preds = %42
  %49 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %50 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %49, align 8
  %51 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %50, i64 0, i32 1
  %52 = load float*, float** %51, align 8
  br label %53

53:                                               ; preds = %42, %48
  %54 = phi float* [ %52, %48 ], [ %46, %42 ]
  %55 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 4) #6
  %58 = extractvalue { i64, i1 } %57, 1
  br i1 %58, label %59, label %60, !prof !3

59:                                               ; preds = %53
  tail call void @llvm.trap() #6
  unreachable

60:                                               ; preds = %53
  %61 = extractvalue { i64, i1 } %57, 0
  %62 = bitcast float* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %44, i8* align 4 %62, i64 %61, i1 false)
  br label %63

63:                                               ; preds = %28, %14, %7, %60
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12AudioChannel13CopyFromRangeEPKS0_jj(%"class.blink::AudioChannel"* nocapture, %"class.blink::AudioChannel"* nocapture readonly, i32, i32) local_unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 3
  %6 = load i8, i8* %5, align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %12, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 3
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %65

12:                                               ; preds = %8, %4
  %13 = sub i32 %3, %2
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 1
  %16 = load float*, float** %15, align 8
  %17 = icmp eq float* %16, null
  br i1 %17, label %18, label %23

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %20 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %20, i64 0, i32 1
  %22 = load float*, float** %21, align 8
  br label %23

23:                                               ; preds = %12, %18
  %24 = phi float* [ %22, %18 ], [ %16, %12 ]
  %25 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 3
  store i8 0, i8* %25, align 8
  %26 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 1
  %27 = load float*, float** %26, align 8
  %28 = icmp eq float* %27, null
  %29 = bitcast float* %27 to i8*
  br i1 %28, label %30, label %35

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %32 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %31, align 8
  %33 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %32, i64 0, i32 1
  %34 = load float*, float** %33, align 8
  br label %35

35:                                               ; preds = %23, %30
  %36 = phi float* [ %34, %30 ], [ %27, %23 ]
  %37 = shl nuw nsw i64 %14, 2
  %38 = load i8, i8* %5, align 8, !range !2
  %39 = icmp eq i8 %38, 0
  br i1 %39, label %60, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %42, %14
  br i1 %43, label %44, label %58

44:                                               ; preds = %40
  store i8 1, i8* %25, align 8
  %45 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %46 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %45, align 8
  %47 = icmp eq %"class.blink::AudioArray"* %46, null
  br i1 %47, label %56, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %46, i64 0, i32 1
  %50 = bitcast float** %49 to i8**
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %46, i64 0, i32 2
  %53 = load i32, i32* %52, align 8
  %54 = zext i32 %53 to i64
  %55 = shl nuw nsw i64 %54, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %51, i8 0, i64 %55, i1 false) #6
  br label %65

56:                                               ; preds = %44
  %57 = shl nuw nsw i64 %14, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 %57, i1 false) #6
  br label %65

58:                                               ; preds = %40
  %59 = bitcast float* %36 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 %37, i1 false)
  br label %65

60:                                               ; preds = %35
  %61 = bitcast float* %36 to i8*
  %62 = zext i32 %2 to i64
  %63 = getelementptr inbounds float, float* %24, i64 %62
  %64 = bitcast float* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %61, i8* align 4 %64, i64 %37, i1 false)
  br label %65

65:                                               ; preds = %8, %56, %48, %60, %58
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink12AudioChannel7SumFromEPKS0_(%"class.blink::AudioChannel"* nocapture, %"class.blink::AudioChannel"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 3
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %71

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 3
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %40, label %10

10:                                               ; preds = %6
  store i8 0, i8* %7, align 8
  %11 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 1
  %12 = load float*, float** %11, align 8
  %13 = icmp eq float* %12, null
  br i1 %13, label %14, label %19

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %16 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %15, align 8
  %17 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %16, i64 0, i32 1
  %18 = load float*, float** %17, align 8
  br label %19

19:                                               ; preds = %14, %10
  %20 = phi float* [ %18, %14 ], [ %12, %10 ]
  %21 = bitcast float* %20 to i8*
  %22 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 1
  %23 = load float*, float** %22, align 8
  %24 = icmp eq float* %23, null
  br i1 %24, label %25, label %30

25:                                               ; preds = %19
  %26 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %27 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %26, align 8
  %28 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %27, i64 0, i32 1
  %29 = load float*, float** %28, align 8
  br label %30

30:                                               ; preds = %25, %19
  %31 = phi float* [ %29, %25 ], [ %23, %19 ]
  %32 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %33, i64 4) #6
  %35 = extractvalue { i64, i1 } %34, 1
  br i1 %35, label %36, label %37, !prof !3

36:                                               ; preds = %30
  tail call void @llvm.trap() #6
  unreachable

37:                                               ; preds = %30
  %38 = extractvalue { i64, i1 } %34, 0
  %39 = bitcast float* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %39, i64 %38, i1 false) #6
  br label %71

40:                                               ; preds = %6
  %41 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 1
  %42 = load float*, float** %41, align 8
  %43 = icmp eq float* %42, null
  br i1 %43, label %44, label %49

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %46 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %45, align 8
  %47 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %46, i64 0, i32 1
  %48 = load float*, float** %47, align 8
  br label %49

49:                                               ; preds = %40, %44
  %50 = phi float* [ %48, %44 ], [ %42, %40 ]
  %51 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 1
  %52 = load float*, float** %51, align 8
  %53 = icmp eq float* %52, null
  br i1 %53, label %54, label %59

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %56 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %55, align 8
  %57 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %56, i64 0, i32 1
  %58 = load float*, float** %57, align 8
  br label %59

59:                                               ; preds = %49, %54
  %60 = phi float* [ %58, %54 ], [ %52, %49 ]
  store i8 0, i8* %7, align 8
  br i1 %43, label %61, label %66

61:                                               ; preds = %59
  %62 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %63 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %62, align 8
  %64 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %63, i64 0, i32 1
  %65 = load float*, float** %64, align 8
  br label %66

66:                                               ; preds = %59, %61
  %67 = phi float* [ %65, %61 ], [ %42, %59 ]
  %68 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 0
  %69 = load i64, i64* %68, align 8
  %70 = trunc i64 %69 to i32
  tail call void @_ZN5blink11vector_math4VaddEPKfiS2_iPfij(float* %50, i32 1, float* %60, i32 1, float* %67, i32 1, i32 %70) #6
  br label %71

71:                                               ; preds = %2, %66, %37
  ret void
}

declare void @_ZN5blink11vector_math4VaddEPKfiS2_iPfij(float*, i32, float*, i32, float*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink12AudioChannel11MaxAbsValueEv(%"class.blink::AudioChannel"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = alloca float, align 4
  %3 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 3
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %22

6:                                                ; preds = %1
  %7 = bitcast float* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #6
  store float 0.000000e+00, float* %2, align 4
  %8 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 1
  %9 = load float*, float** %8, align 8
  %10 = icmp eq float* %9, null
  br i1 %10, label %11, label %16

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %13 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %12, align 8
  %14 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %13, i64 0, i32 1
  %15 = load float*, float** %14, align 8
  br label %16

16:                                               ; preds = %6, %11
  %17 = phi float* [ %15, %11 ], [ %9, %6 ]
  %18 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %0, i64 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = trunc i64 %19 to i32
  call void @_ZN5blink11vector_math7VmaxmgvEPKfiPfj(float* %17, i32 1, float* nonnull %2, i32 %20) #6
  %21 = load float, float* %2, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #6
  br label %22

22:                                               ; preds = %1, %16
  %23 = phi float [ %21, %16 ], [ 0.000000e+00, %1 ]
  ret float %23
}

declare void @_ZN5blink11vector_math7VmaxmgvEPKfiPfj(float*, i32, float*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
