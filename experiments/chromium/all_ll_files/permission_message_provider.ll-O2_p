; ModuleID = '../../extensions/common/permissions/permission_message_provider.cc'
source_filename = "../../extensions/common/permissions/permission_message_provider.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.extensions::PermissionMessageProvider" = type { i32 (...)** }
%"class.extensions::ExtensionsClient" = type <{ i32 (...)**, %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::unique_ptr"* }
%"class.extensions::PermissionIDSet" = type { i32 (...)**, %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1", %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.extensions::PermissionSet" = type opaque

$_ZN10extensions25PermissionMessageProviderD2Ev = comdat any

$_ZN10extensions25PermissionMessageProviderD0Ev = comdat any

@_ZTVN10extensions25PermissionMessageProviderE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.extensions::PermissionMessageProvider"*)* @_ZN10extensions25PermissionMessageProviderD2Ev to i8*), i8* bitcast (void (%"class.extensions::PermissionMessageProvider"*)* @_ZN10extensions25PermissionMessageProviderD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.extensions::PermissionIDSet"*, %"class.extensions::PermissionMessageProvider"*, %"class.extensions::PermissionSet"*, i32)* @_ZNK10extensions25PermissionMessageProvider28GetManagementUIPermissionIDsERKNS_13PermissionSetENS_8Manifest4TypeE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.extensions::PermissionMessageProvider"* @_ZN10extensions25PermissionMessageProvider3GetEv() local_unnamed_addr #0 align 2 {
  %1 = tail call %"class.extensions::ExtensionsClient"* @_ZN10extensions16ExtensionsClient3GetEv() #3
  %2 = bitcast %"class.extensions::ExtensionsClient"* %1 to %"class.extensions::PermissionMessageProvider"* (%"class.extensions::ExtensionsClient"*)***
  %3 = load %"class.extensions::PermissionMessageProvider"* (%"class.extensions::ExtensionsClient"*)**, %"class.extensions::PermissionMessageProvider"* (%"class.extensions::ExtensionsClient"*)*** %2, align 8
  %4 = getelementptr inbounds %"class.extensions::PermissionMessageProvider"* (%"class.extensions::ExtensionsClient"*)*, %"class.extensions::PermissionMessageProvider"* (%"class.extensions::ExtensionsClient"*)** %3, i64 4
  %5 = load %"class.extensions::PermissionMessageProvider"* (%"class.extensions::ExtensionsClient"*)*, %"class.extensions::PermissionMessageProvider"* (%"class.extensions::ExtensionsClient"*)** %4, align 8
  %6 = tail call dereferenceable(8) %"class.extensions::PermissionMessageProvider"* %5(%"class.extensions::ExtensionsClient"* %1) #3
  ret %"class.extensions::PermissionMessageProvider"* %6
}

declare %"class.extensions::ExtensionsClient"* @_ZN10extensions16ExtensionsClient3GetEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK10extensions25PermissionMessageProvider28GetManagementUIPermissionIDsERKNS_13PermissionSetENS_8Manifest4TypeE(%"class.extensions::PermissionIDSet"* noalias sret, %"class.extensions::PermissionMessageProvider"* nocapture readnone, %"class.extensions::PermissionSet"* nocapture readnone, i32) unnamed_addr #0 align 2 {
  tail call void @_ZN10extensions15PermissionIDSetC1Ev(%"class.extensions::PermissionIDSet"* %0) #3
  ret void
}

declare void @_ZN10extensions15PermissionIDSetC1Ev(%"class.extensions::PermissionIDSet"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN10extensions25PermissionMessageProviderD2Ev(%"class.extensions::PermissionMessageProvider"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN10extensions25PermissionMessageProviderD0Ev(%"class.extensions::PermissionMessageProvider"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #4
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { nounwind }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
