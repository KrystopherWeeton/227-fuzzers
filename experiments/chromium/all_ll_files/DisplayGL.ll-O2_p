; ModuleID = '../../third_party/angle/src/libANGLE/renderer/gl/DisplayGL.cpp'
source_filename = "../../third_party/angle/src/libANGLE/renderer/gl/DisplayGL.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.rx::DisplayGL" = type { %"class.rx::DisplayImpl" }
%"class.rx::DisplayImpl" = type { %"class.rx::EGLImplFactory", %"class.angle::Subject", %"struct.egl::DisplayState"*, i8, %"struct.egl::DisplayExtensions", i8, %"struct.egl::Caps", %"class.egl::BlobCache"* }
%"class.rx::EGLImplFactory" = type { i32 (...)** }
%"class.angle::Subject" = type { i32 (...)**, %"class.angle::FastVector" }
%"class.angle::FastVector" = type { %"struct.std::__1::array", %"class.angle::ObserverBindingBase"**, i64, i64 }
%"struct.std::__1::array" = type { [8 x %"class.angle::ObserverBindingBase"*] }
%"class.angle::ObserverBindingBase" = type { i32 (...)**, %"class.angle::ObserverInterface"*, i64 }
%"class.angle::ObserverInterface" = type { i32 (...)** }
%"struct.egl::DisplayState" = type { i8*, %"class.std::__1::set.656", %"class.std::__1::vector.136", %"class.std::__1::vector.136", i8, i64 }
%"class.std::__1::set.656" = type { %"class.std::__1::__tree.657" }
%"class.std::__1::__tree.657" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.658", %"class.std::__1::__compressed_pair.662" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.658" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.662" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::vector.136" = type { %"class.std::__1::__vector_base.137" }
%"class.std::__1::__vector_base.137" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.std::__1::basic_string"* }
%"struct.egl::DisplayExtensions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"struct.egl::Caps" = type { i8, i8 }
%"class.egl::BlobCache" = type { %"class.std::__1::mutex", %"class.angle::SizedMRUCache", void (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)* }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.angle::SizedMRUCache" = type { i64, i64, %"class.angle::base::HashingMRUCache" }
%"class.angle::base::HashingMRUCache" = type { %"class.angle::base::MRUCacheBase" }
%"class.angle::base::MRUCacheBase" = type { i32 (...)**, %"class.std::__1::list", %"class.std::__1::unordered_map", i64 }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.626" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.630", %"class.std::__1::__compressed_pair.638", %"class.std::__1::__compressed_pair.643", %"class.std::__1::__compressed_pair.645", [4 x i8] }>
%"class.std::__1::unique_ptr.630" = type { %"class.std::__1::__compressed_pair.631" }
%"class.std::__1::__compressed_pair.631" = type { %"struct.std::__1::__compressed_pair_elem.632", %"struct.std::__1::__compressed_pair_elem.633" }
%"struct.std::__1::__compressed_pair_elem.632" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.633" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.634" }
%"class.std::__1::__compressed_pair.634" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.638" = type { %"struct.std::__1::__compressed_pair_elem.639" }
%"struct.std::__1::__compressed_pair_elem.639" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.643" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.645" = type { %"struct.std::__1::__compressed_pair_elem.646" }
%"struct.std::__1::__compressed_pair_elem.646" = type { float }
%"class.rx::ExternalImageSiblingImpl" = type opaque
%"class.gl::Context" = type <{ %"class.egl::LabeledObject", %"class.angle::ObserverInterface", %"class.gl::State", i8, i8, i8, i8, [4 x i8], %"class.gl::ErrorSet", %"class.angle::BitSetT.548", [4 x i8], %"class.std::__1::unique_ptr.549", i8*, %"struct.gl::Extensions", [4 x i8], %"class.gl::BindingPointer", %"struct.egl::Config"*, %"class.angle::PackedEnumMap.555", %"class.gl::ResourceMap.557", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.567", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.577", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.587", %"class.gl::HandleAllocator", i8*, i8*, i8*, i8*, %"class.std::__1::vector.597", i8*, %"class.std::__1::vector.597", %"class.std::__1::unique_ptr.604", i8, i8, i8, i8, i32, i8, i8, i8, [5 x i8], %"class.egl::Surface"*, %"class.egl::Surface"*, %"class.egl::Display"*, i8, i8, i8, [5 x i8], %"class.gl::MemoryProgramCache"*, %"class.angle::BitSetT.547", %"class.gl::StateCache", %"class.angle::BitSetT.179", %"class.angle::BitSetT.179", %"class.angle::BitSetT.547", %"class.angle::BitSetT.179", %"class.angle::BitSetT.547", %"class.angle::BitSetT.179", %"class.angle::BitSetT.547", %"class.angle::BitSetT.179", %"class.angle::BitSetT.547", %"class.angle::BitSetT.179", %"class.angle::BitSetT.547", %"class.angle::BitSetT.179", %"class.angle::BitSetT.547", %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.std::__1::vector.348", %"class.std::__1::vector.348", %"class.std::__1::vector.348", %struct.Optional.618, %struct.Optional.618, %"class.std::__1::shared_ptr.619", %"class.std::__1::unique_ptr.620", %"class.std::__1::basic_string", i64, %"class.gl::MockOverlay", i8, i8, i8, [4 x i8] }>
%"class.egl::LabeledObject" = type { i32 (...)** }
%"class.gl::State" = type <{ %"struct.gl::ContextID", i32, i32, %"struct.gl::Version", [4 x i8], %"struct.gl::Caps", %"class.gl::TextureCapsMap", %"struct.gl::Extensions", %"struct.gl::Limitations", %"class.egl::ShareGroup"*, %"class.gl::BufferManager"*, %"class.gl::ShaderProgramManager"*, %"class.gl::TextureManager"*, %"class.gl::RenderbufferManager"*, %"class.gl::SamplerManager"*, %"class.gl::SyncManager"*, %"class.gl::FramebufferManager"*, %"class.gl::ProgramPipelineManager"*, %"class.gl::MemoryObjectManager"*, %"class.gl::SemaphoreManager"*, i32, i32, %"struct.angle::Color", float, i32, %"struct.gl::RasterizerState", i8, [3 x i8], %"struct.gl::Rectangle", %"struct.gl::BlendState", [4 x i8], %"class.gl::BlendStateExt", %"struct.angle::Color", i8, i8, [2 x i8], float, i8, i8, [2 x i8], i32, %"struct.std::__1::array.384", i8, [3 x i8], float, %"struct.gl::DepthStencilState", i32, i32, float, i32, i32, i32, i8, i8, [2 x i8], %"struct.gl::Rectangle", float, float, i32, i32, %"class.gl::Framebuffer"*, %"class.gl::Framebuffer"*, %"class.gl::BindingPointer.385", %"class.gl::Program"*, %"class.gl::BindingPointer.387", %"class.gl::ProgramExecutable"*, i8, [7 x i8], %"class.std::__1::vector.389", %"class.gl::VertexArray"*, %"class.angle::BitSetT.159", i64, %"class.angle::PackedEnumMap.417", %"class.gl::ActiveTexturesCache", %"class.std::__1::vector.348", %"class.angle::BitSetArray", %"class.std::__1::vector.429", %"class.std::__1::vector.438", %"class.angle::PackedEnumMap.445", %"class.angle::PackedEnumMap.449", %"class.std::__1::vector.451", %"class.std::__1::vector.451", %"class.std::__1::vector.451", %"class.angle::BitSetArray.458", %"class.angle::BitSetT.459", %"class.angle::BitSetT.179", %"class.gl::BindingPointer.460", %"struct.gl::PixelUnpackState", %"struct.gl::PixelPackState", i8, [3 x i8], %"class.gl::Debug", i8, i8, [2 x i8], i32, i8, i8, i8, i8, i32, %"class.angle::BitSetT.487", i32, %"class.gl::GLES1State", %"class.angle::BitSetT.179", %"class.angle::BitSetT.546", [4 x i8], %"class.angle::BitSetT.547", %"class.angle::BitSetT.177", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.gl::MockOverlay"*, %"class.angle::BitSetT.158", %"class.angle::BitSetT.158", i8, [5 x i8] }>
%"struct.gl::ContextID" = type { i32 }
%"struct.gl::Version" = type { i32, i32 }
%"struct.gl::Caps" = type <{ float, float, i32, [4 x i8], i64, i32, i32, i32, i32, float, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, [4 x i8], %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap.39", i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array.41", %"struct.std::__1::array.41", i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, i32, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { i32* }
%"struct.gl::TypePrecision" = type { %"struct.std::__1::array.37", i32 }
%"struct.std::__1::array.37" = type { [2 x i32] }
%"class.angle::PackedEnumMap" = type { %"struct.std::__1::array.38" }
%"struct.std::__1::array.38" = type { [6 x i32] }
%"class.angle::PackedEnumMap.39" = type { %"struct.std::__1::array.40" }
%"struct.std::__1::array.40" = type { [6 x i64] }
%"struct.std::__1::array.41" = type { [3 x i32] }
%"class.gl::TextureCapsMap" = type { %"class.angle::PackedEnumMap.42" }
%"class.angle::PackedEnumMap.42" = type { %"struct.std::__1::array.43" }
%"struct.std::__1::array.43" = type { [227 x %"struct.gl::TextureCaps"] }
%"struct.gl::TextureCaps" = type { i8, i8, i8, i8, i8, %"class.std::__1::set.44" }
%"class.std::__1::set.44" = type { %"class.std::__1::__tree.45" }
%"class.std::__1::__tree.45" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.46", %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.gl::Limitations" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.egl::ShareGroup" = type { i64, %"class.rx::ShareGroupImpl"*, %"class.rx::SerialFactoryBase", %"class.std::__1::unique_ptr.650" }
%"class.rx::ShareGroupImpl" = type { i32 (...)** }
%"class.rx::SerialFactoryBase" = type { i64 }
%"class.std::__1::unique_ptr.650" = type { %"class.std::__1::__compressed_pair.651" }
%"class.std::__1::__compressed_pair.651" = type { %"struct.std::__1::__compressed_pair_elem.652" }
%"struct.std::__1::__compressed_pair_elem.652" = type { %"class.angle::FrameCaptureShared"* }
%"class.angle::FrameCaptureShared" = type opaque
%"class.gl::BufferManager" = type { %"class.gl::TypedResourceManager" }
%"class.gl::TypedResourceManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap" }
%"class.gl::ResourceManagerBase" = type { i32 (...)**, %"class.gl::HandleAllocator", i64 }
%"class.gl::ResourceMap" = type { i64, %"class.gl::Buffer"**, %"class.absl::flat_hash_map" }
%"class.gl::Buffer" = type { %"class.gl::RefCountObject.base.62", %"class.gl::LabeledObject", %"class.angle::ObserverInterface", %"class.angle::Subject", %"class.gl::BufferState", %"class.rx::BufferImpl"*, %"class.angle::ObserverBinding", %"class.gl::IndexRangeCache" }
%"class.gl::RefCountObject.base.62" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::BufferID" }>
%"class.angle::RefCountObject" = type { i32 (...)**, i64 }
%"class.rx::Serial" = type { i64 }
%"struct.gl::BufferID" = type { i32 }
%"class.gl::LabeledObject" = type { i32 (...)** }
%"class.gl::BufferState" = type <{ %"class.std::__1::basic_string", i8, [7 x i8], i64, i32, i32, i8, [7 x i8], i8*, i64, i64, i32, i32, i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"class.rx::BufferImpl" = type opaque
%"class.gl::IndexRangeCache" = type { %"class.std::__1::map.63" }
%"class.std::__1::map.63" = type { %"class.std::__1::__tree.64" }
%"class.std::__1::__tree.64" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.65", %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, %"class.gl::Buffer"* }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.gl::ShaderProgramManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.80", %"class.gl::ResourceMap.133" }
%"class.gl::ResourceMap.80" = type { i64, %"class.gl::Shader"**, %"class.absl::flat_hash_map.124" }
%"class.gl::Shader" = type { %"class.gl::LabeledObject", %"class.gl::ShaderState", %"class.std::__1::unique_ptr.96", %"struct.gl::Limitations", %"struct.gl::ShaderProgramID", i8, i32, i8, %"class.std::__1::basic_string", %"class.gl::BindingPointer", %"class.std::__1::unique_ptr.118", %"class.std::__1::basic_string", %"class.gl::ShaderProgramManager"*, i32, i32 }
%"class.gl::ShaderState" = type <{ %"class.std::__1::basic_string", i8, [3 x i8], i32, %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.std::__1::basic_string", %"struct.sh::WorkGroupSize", [4 x i8], %"class.std::__1::vector.81", %"class.std::__1::vector.81", %"class.std::__1::vector.81", %"class.std::__1::vector.88", %"class.std::__1::vector.88", %"class.std::__1::vector.81", %"class.std::__1::vector.81", %"class.std::__1::vector.81", i8, [3 x i8], %"class.angle::BitSetT", i32, %struct.Optional, %struct.Optional, %struct.Optional.95, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.std::__1::vector.88" = type { %"class.std::__1::__vector_base.89" }
%"class.std::__1::__vector_base.89" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.90" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.81" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"struct.sh::InterfaceBlock"* }
%"class.std::__1::vector.81" = type { %"class.std::__1::__vector_base.82" }
%"class.std::__1::__vector_base.82" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.83" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", i8, i8, %"class.std::__1::vector.81", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"struct.sh::ShaderVariable"* }
%"class.angle::BitSetT" = type { i32 }
%struct.Optional = type { i8, i8 }
%struct.Optional.95 = type { i8, i32 }
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"class.rx::ShaderImpl"* }
%"class.rx::ShaderImpl" = type opaque
%"struct.gl::ShaderProgramID" = type { i32 }
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"struct.gl::Shader::CompilingState"* }
%"struct.gl::Shader::CompilingState" = type opaque
%"class.absl::flat_hash_map.124" = type { %"class.absl::container_internal::raw_hash_map.125" }
%"class.absl::container_internal::raw_hash_map.125" = type { %"class.absl::container_internal::raw_hash_set.126" }
%"class.absl::container_internal::raw_hash_set.126" = type { i8*, %"union.absl::container_internal::map_slot_type.127"*, i64, i64, %"class.absl::container_internal::CompressedTuple.128" }
%"union.absl::container_internal::map_slot_type.127" = type opaque
%"class.absl::container_internal::CompressedTuple.128" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.129" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.129" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.133" = type { i64, %"class.gl::Program"**, %"class.absl::flat_hash_map.252" }
%"class.absl::flat_hash_map.252" = type { %"class.absl::container_internal::raw_hash_map.253" }
%"class.absl::container_internal::raw_hash_map.253" = type { %"class.absl::container_internal::raw_hash_set.254" }
%"class.absl::container_internal::raw_hash_set.254" = type { i8*, %"union.absl::container_internal::map_slot_type.255"*, i64, i64, %"class.absl::container_internal::CompressedTuple.256" }
%"union.absl::container_internal::map_slot_type.255" = type { %"struct.std::__1::pair.805" }
%"struct.std::__1::pair.805" = type { i32, %"class.gl::Program"* }
%"class.absl::container_internal::CompressedTuple.256" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.257" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.257" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::TextureManager" = type { %"class.gl::TypedResourceManager.261" }
%"class.gl::TypedResourceManager.261" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.262" }
%"class.gl::ResourceMap.262" = type { i64, %"class.gl::Texture"**, %"class.absl::flat_hash_map.281" }
%"class.gl::Texture" = type <{ %"class.gl::RefCountObject.base.264", [4 x i8], %"class.egl::ImageSibling", %"class.gl::LabeledObject", %"class.gl::TextureState", %"class.angle::BitSetT.277", %"class.rx::TextureImpl"*, %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.std::__1::basic_string", %"class.egl::Surface"*, %"class.egl::Stream"*, %"class.angle::FastVector.279", %"struct.gl::Texture::SamplerCompletenessCache", [4 x i8] }>
%"class.gl::RefCountObject.base.264" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::TextureID" }>
%"struct.gl::TextureID" = type { i32 }
%"class.egl::ImageSibling" = type { %"class.gl::FramebufferAttachmentObject", %"class.std::__1::set", %"class.angle::BindingPointer" }
%"class.gl::FramebufferAttachmentObject" = type { %"class.angle::Subject", %"class.angle::ObserverInterface" }
%"class.std::__1::set" = type { %"class.std::__1::__tree.4" }
%"class.std::__1::__tree.4" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.angle::BindingPointer" = type { i32 (...)**, %"class.egl::Image"* }
%"class.egl::Image" = type <{ %"class.angle::RefCountObject.13", %"class.egl::LabeledObject", %"struct.egl::ImageState", %"class.rx::ImageImpl"*, i8, [7 x i8] }>
%"class.angle::RefCountObject.13" = type { i32 (...)**, i64 }
%"struct.egl::ImageState" = type { i8*, i32, %"class.gl::ImageIndex", %"class.egl::ImageSibling"*, %"class.std::__1::set.14", %"struct.gl::Format", i8, %"struct.gl::Extents", i64, i32, i32 }
%"class.gl::ImageIndex" = type { i8, i32, i32, i32 }
%"class.std::__1::set.14" = type { %"class.std::__1::__tree.15" }
%"class.std::__1::__tree.15" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.16", %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.gl::Format" = type { %"struct.gl::InternalFormat"* }
%"struct.gl::InternalFormat" = type { i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)* }
%"struct.gl::Extents" = type { i32, i32, i32 }
%"class.rx::ImageImpl" = type opaque
%"class.gl::TextureState" = type <{ i8, [3 x i8], %"struct.gl::SwizzleState", %"class.gl::SamplerState", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, [4 x i8], %"class.std::__1::vector.268", %"struct.gl::Rectangle", i32, [4 x i8], %"class.gl::OffsetBindingPointer", i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"struct.gl::SwizzleState" = type { i32, i32, i32, i32 }
%"class.gl::SamplerState" = type { i32, i32, i32, i32, i32, float, float, float, i32, i32, i32, %"struct.angle::ColorGeneric", %"union.gl::SamplerState::Completeness" }
%"struct.angle::ColorGeneric" = type <{ %union.anon.265, i8, [3 x i8] }>
%union.anon.265 = type { %"struct.angle::Color" }
%"union.gl::SamplerState::Completeness" = type { i32 }
%"class.std::__1::vector.268" = type { %"class.std::__1::__vector_base.269" }
%"class.std::__1::__vector_base.269" = type { %"struct.gl::ImageDesc"*, %"struct.gl::ImageDesc"*, %"class.std::__1::__compressed_pair.270" }
%"struct.gl::ImageDesc" = type <{ %"struct.gl::Extents", [4 x i8], %"struct.gl::Format", i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.270" = type { %"struct.std::__1::__compressed_pair_elem.271" }
%"struct.std::__1::__compressed_pair_elem.271" = type { %"struct.gl::ImageDesc"* }
%"class.gl::OffsetBindingPointer" = type { %"class.gl::BindingPointer.275", i64, i64 }
%"class.gl::BindingPointer.275" = type { %"class.angle::BindingPointer.276" }
%"class.angle::BindingPointer.276" = type { i32 (...)**, %"class.gl::Buffer"* }
%"class.angle::BitSetT.277" = type { i64 }
%"class.rx::TextureImpl" = type opaque
%"class.egl::Stream" = type { %"class.egl::LabeledObject", i8*, %"class.egl::Display"*, %"class.rx::StreamProducerImpl"*, %"class.gl::Context"*, i32, i64, i64, i32, i32, i32, %"struct.std::__1::array.278", i32, i32 }
%"class.rx::StreamProducerImpl" = type opaque
%"struct.std::__1::array.278" = type { [3 x %"struct.egl::Stream::PlaneTexture"] }
%"struct.egl::Stream::PlaneTexture" = type { i32, %"class.gl::Texture"* }
%"class.angle::FastVector.279" = type { %"struct.std::__1::array.280", %"class.rx::Serial"*, i64, i64 }
%"struct.std::__1::array.280" = type { [8 x %"class.rx::Serial"] }
%"struct.gl::Texture::SamplerCompletenessCache" = type <{ %"struct.gl::ContextID", %"class.gl::SamplerState", i8, [3 x i8] }>
%"class.absl::flat_hash_map.281" = type { %"class.absl::container_internal::raw_hash_map.282" }
%"class.absl::container_internal::raw_hash_map.282" = type { %"class.absl::container_internal::raw_hash_set.283" }
%"class.absl::container_internal::raw_hash_set.283" = type { i8*, %"union.absl::container_internal::map_slot_type.284"*, i64, i64, %"class.absl::container_internal::CompressedTuple.285" }
%"union.absl::container_internal::map_slot_type.284" = type { %"struct.std::__1::pair.807" }
%"struct.std::__1::pair.807" = type { i32, %"class.gl::Texture"* }
%"class.absl::container_internal::CompressedTuple.285" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.286" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.286" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::RenderbufferManager" = type { %"class.gl::TypedResourceManager.290" }
%"class.gl::TypedResourceManager.290" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.291" }
%"class.gl::ResourceMap.291" = type { i64, %"class.gl::Renderbuffer"**, %"class.absl::flat_hash_map.292" }
%"class.gl::Renderbuffer" = type { %"class.gl::RefCountObject.base", %"class.egl::ImageSibling", %"class.gl::LabeledObject", %"class.gl::RenderbufferState", %"class.std::__1::unique_ptr", %"class.std::__1::basic_string", %"class.angle::ObserverBinding" }
%"class.gl::RefCountObject.base" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::RenderbufferID" }>
%"struct.gl::RenderbufferID" = type { i32 }
%"class.gl::RenderbufferState" = type <{ i32, i32, %"struct.gl::Format", i32, i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.rx::RenderbufferImpl"* }
%"class.rx::RenderbufferImpl" = type { %"class.rx::FramebufferAttachmentObjectImpl", %"class.gl::RenderbufferState"* }
%"class.rx::FramebufferAttachmentObjectImpl" = type { %"class.angle::Subject" }
%"class.absl::flat_hash_map.292" = type { %"class.absl::container_internal::raw_hash_map.293" }
%"class.absl::container_internal::raw_hash_map.293" = type { %"class.absl::container_internal::raw_hash_set.294" }
%"class.absl::container_internal::raw_hash_set.294" = type { i8*, %"union.absl::container_internal::map_slot_type.295"*, i64, i64, %"class.absl::container_internal::CompressedTuple.296" }
%"union.absl::container_internal::map_slot_type.295" = type { %"struct.std::__1::pair.809" }
%"struct.std::__1::pair.809" = type { i32, %"class.gl::Renderbuffer"* }
%"class.absl::container_internal::CompressedTuple.296" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.297" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.297" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SamplerManager" = type { %"class.gl::TypedResourceManager.301" }
%"class.gl::TypedResourceManager.301" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.302" }
%"class.gl::ResourceMap.302" = type { i64, %"class.gl::Sampler"**, %"class.absl::flat_hash_map.305" }
%"class.gl::Sampler" = type { %"class.gl::RefCountObject.base.304", %"class.gl::LabeledObject", %"class.angle::Subject", %"class.gl::SamplerState", i8, %"class.rx::SamplerImpl"*, %"class.std::__1::basic_string" }
%"class.gl::RefCountObject.base.304" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::SamplerID" }>
%"struct.gl::SamplerID" = type { i32 }
%"class.rx::SamplerImpl" = type opaque
%"class.absl::flat_hash_map.305" = type { %"class.absl::container_internal::raw_hash_map.306" }
%"class.absl::container_internal::raw_hash_map.306" = type { %"class.absl::container_internal::raw_hash_set.307" }
%"class.absl::container_internal::raw_hash_set.307" = type { i8*, %"union.absl::container_internal::map_slot_type.308"*, i64, i64, %"class.absl::container_internal::CompressedTuple.309" }
%"union.absl::container_internal::map_slot_type.308" = type { %"struct.std::__1::pair.811" }
%"struct.std::__1::pair.811" = type { i32, %"class.gl::Sampler"* }
%"class.absl::container_internal::CompressedTuple.309" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.310" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.310" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SyncManager" = type { %"class.gl::TypedResourceManager.314" }
%"class.gl::TypedResourceManager.314" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.315" }
%"class.gl::ResourceMap.315" = type { i64, %"class.gl::Sync"**, %"class.absl::flat_hash_map.316" }
%"class.gl::Sync" = type opaque
%"class.absl::flat_hash_map.316" = type { %"class.absl::container_internal::raw_hash_map.317" }
%"class.absl::container_internal::raw_hash_map.317" = type { %"class.absl::container_internal::raw_hash_set.318" }
%"class.absl::container_internal::raw_hash_set.318" = type { i8*, %"union.absl::container_internal::map_slot_type.319"*, i64, i64, %"class.absl::container_internal::CompressedTuple.320" }
%"union.absl::container_internal::map_slot_type.319" = type opaque
%"class.absl::container_internal::CompressedTuple.320" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.321" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.321" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::FramebufferManager" = type { %"class.gl::TypedResourceManager.325" }
%"class.gl::TypedResourceManager.325" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.326" }
%"class.gl::ResourceMap.326" = type { i64, %"class.gl::Framebuffer"**, %"class.absl::flat_hash_map.327" }
%"class.absl::flat_hash_map.327" = type { %"class.absl::container_internal::raw_hash_map.328" }
%"class.absl::container_internal::raw_hash_map.328" = type { %"class.absl::container_internal::raw_hash_set.329" }
%"class.absl::container_internal::raw_hash_set.329" = type { i8*, %"union.absl::container_internal::map_slot_type.330"*, i64, i64, %"class.absl::container_internal::CompressedTuple.331" }
%"union.absl::container_internal::map_slot_type.330" = type { %"struct.std::__1::pair.813" }
%"struct.std::__1::pair.813" = type { i32, %"class.gl::Framebuffer"* }
%"class.absl::container_internal::CompressedTuple.331" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.332" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.332" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ProgramPipelineManager" = type { %"class.gl::TypedResourceManager.336" }
%"class.gl::TypedResourceManager.336" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.337" }
%"class.gl::ResourceMap.337" = type { i64, %"class.gl::ProgramPipeline"**, %"class.absl::flat_hash_map.355" }
%"class.gl::ProgramPipeline" = type { %"class.gl::RefCountObject.base.339", %"class.gl::LabeledObject", %"class.angle::ObserverInterface", %"class.gl::HasAttachedShaders", %"class.std::__1::unique_ptr.340", %"class.gl::ProgramPipelineState", %"class.std::__1::vector.348", %"class.angle::ObserverBinding" }
%"class.gl::RefCountObject.base.339" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::ProgramPipelineID" }>
%"struct.gl::ProgramPipelineID" = type { i32 }
%"class.gl::HasAttachedShaders" = type { i32 (...)** }
%"class.std::__1::unique_ptr.340" = type { %"class.std::__1::__compressed_pair.341" }
%"class.std::__1::__compressed_pair.341" = type { %"struct.std::__1::__compressed_pair_elem.342" }
%"struct.std::__1::__compressed_pair_elem.342" = type { %"class.rx::ProgramPipelineImpl"* }
%"class.rx::ProgramPipelineImpl" = type opaque
%"class.gl::ProgramPipelineState" = type <{ %"class.std::__1::basic_string", %"class.gl::Program"*, %"class.angle::PackedEnumMap.346", i8, [7 x i8], %"class.gl::ProgramExecutable"*, i8, [7 x i8] }>
%"class.angle::PackedEnumMap.346" = type { %"struct.std::__1::array.347" }
%"struct.std::__1::array.347" = type { [6 x %"class.gl::Program"*] }
%"class.absl::flat_hash_map.355" = type { %"class.absl::container_internal::raw_hash_map.356" }
%"class.absl::container_internal::raw_hash_map.356" = type { %"class.absl::container_internal::raw_hash_set.357" }
%"class.absl::container_internal::raw_hash_set.357" = type { i8*, %"union.absl::container_internal::map_slot_type.358"*, i64, i64, %"class.absl::container_internal::CompressedTuple.359" }
%"union.absl::container_internal::map_slot_type.358" = type { %"struct.std::__1::pair.815" }
%"struct.std::__1::pair.815" = type { i32, %"class.gl::ProgramPipeline"* }
%"class.absl::container_internal::CompressedTuple.359" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.360" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.360" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::MemoryObjectManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.364" }
%"class.gl::ResourceMap.364" = type { i64, %"class.gl::MemoryObject"**, %"class.absl::flat_hash_map.365" }
%"class.gl::MemoryObject" = type opaque
%"class.absl::flat_hash_map.365" = type { %"class.absl::container_internal::raw_hash_map.366" }
%"class.absl::container_internal::raw_hash_map.366" = type { %"class.absl::container_internal::raw_hash_set.367" }
%"class.absl::container_internal::raw_hash_set.367" = type { i8*, %"union.absl::container_internal::map_slot_type.368"*, i64, i64, %"class.absl::container_internal::CompressedTuple.369" }
%"union.absl::container_internal::map_slot_type.368" = type opaque
%"class.absl::container_internal::CompressedTuple.369" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.370" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.370" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SemaphoreManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.374" }
%"class.gl::ResourceMap.374" = type { i64, %"class.gl::Semaphore"**, %"class.absl::flat_hash_map.375" }
%"class.gl::Semaphore" = type opaque
%"class.absl::flat_hash_map.375" = type { %"class.absl::container_internal::raw_hash_map.376" }
%"class.absl::container_internal::raw_hash_map.376" = type { %"class.absl::container_internal::raw_hash_set.377" }
%"class.absl::container_internal::raw_hash_set.377" = type { i8*, %"union.absl::container_internal::map_slot_type.378"*, i64, i64, %"class.absl::container_internal::CompressedTuple.379" }
%"union.absl::container_internal::map_slot_type.378" = type opaque
%"class.absl::container_internal::CompressedTuple.379" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.380" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.380" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.gl::RasterizerState" = type { i8, i8, i32, i8, float, float, i8, i8, i8, i8 }
%"struct.gl::BlendState" = type { i8, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%"class.gl::BlendStateExt" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"class.angle::BitSetT.158", %"class.angle::BitSetT.158", i64 }
%"struct.angle::Color" = type { float, float, float, float }
%"struct.std::__1::array.384" = type { [2 x i32] }
%"struct.gl::DepthStencilState" = type { i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.gl::Rectangle" = type { i32, i32, i32, i32 }
%"class.gl::Framebuffer" = type { %"class.angle::ObserverInterface", %"class.gl::LabeledObject", %"class.angle::Subject", %"class.gl::FramebufferState", %"class.rx::FramebufferImpl"*, %struct.Optional.741, %"class.std::__1::vector.348", %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.angle::BitSetT.742", %"class.angle::BitSetT.158", %struct.Optional.743 }
%"class.gl::FramebufferState" = type { %"struct.gl::FramebufferID", %"class.rx::Serial", %"class.std::__1::basic_string", %"class.std::__1::vector.734", %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment", %"class.angle::BitSetT.158", %"class.std::__1::vector", i32, %"class.angle::BitSetT.158", %"class.angle::BitSetT.159", i32, i32, i32, i8, i32, %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment", %"class.gl::FramebufferAttachment", i8, %"class.angle::BitSetT.547", i8, %"class.gl::FramebufferAttachment", i32, %"struct.gl::Offset" }
%"struct.gl::FramebufferID" = type { i32 }
%"class.std::__1::vector.734" = type { %"class.std::__1::__vector_base.735" }
%"class.std::__1::__vector_base.735" = type { %"class.gl::FramebufferAttachment"*, %"class.gl::FramebufferAttachment"*, %"class.std::__1::__compressed_pair.736" }
%"class.std::__1::__compressed_pair.736" = type { %"struct.std::__1::__compressed_pair_elem.737" }
%"struct.std::__1::__compressed_pair_elem.737" = type { %"class.gl::FramebufferAttachment"* }
%"class.gl::FramebufferAttachment" = type { i32, %"class.gl::FramebufferAttachment::Target", %"class.gl::FramebufferAttachmentObject"*, i32, i8, i32, i32 }
%"class.gl::FramebufferAttachment::Target" = type { i32, %"class.gl::ImageIndex" }
%"struct.gl::Offset" = type { i32, i32, i32 }
%"class.rx::FramebufferImpl" = type opaque
%struct.Optional.741 = type { i8, %"struct.gl::FramebufferStatus" }
%"struct.gl::FramebufferStatus" = type { i32, i8* }
%"class.angle::BitSetT.742" = type { i64 }
%struct.Optional.743 = type { i8, %"class.angle::BitSetT.742" }
%"class.gl::BindingPointer.385" = type { %"class.angle::BindingPointer.386" }
%"class.angle::BindingPointer.386" = type { i32 (...)**, %"class.gl::Renderbuffer"* }
%"class.gl::Program" = type { %"class.gl::LabeledObject", %"class.angle::Subject", %"class.gl::HasAttachedShaders", %"class.rx::Serial", %"class.gl::ProgramState", %"class.rx::ProgramImpl"*, i8, %"class.gl::ProgramBindings", %"class.gl::ProgramAliasedBindings", %"class.gl::ProgramAliasedBindings", i8, %"class.std::__1::unique_ptr.246", i8, i32, %"class.gl::ShaderProgramManager"*, %"struct.gl::ShaderProgramID", %"class.angle::BitSetT.212" }
%"class.gl::ProgramState" = type { %"class.std::__1::basic_string", %"struct.sh::WorkGroupSize", %"class.angle::PackedEnumMap.134", i32, %"class.std::__1::vector.136", %"class.std::__1::vector.143", %"class.std::__1::vector.150", %"class.gl::Range", %"class.angle::BitSetT.158", %"class.std::__1::vector", %"class.angle::BitSetT.159", i8, i8, i8, i8, %"class.angle::BitSetT", i32, i32, i32, i32, i32, i32, %"class.gl::ProgramAliasedBindings", %"class.std::__1::shared_ptr" }
%"class.angle::PackedEnumMap.134" = type { %"struct.std::__1::array.135" }
%"struct.std::__1::array.135" = type { [6 x %"class.gl::Shader"*] }
%"class.std::__1::vector.143" = type { %"class.std::__1::__vector_base.144" }
%"class.std::__1::__vector_base.144" = type { %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"*, %"class.std::__1::__compressed_pair.145" }
%"struct.gl::VariableLocation" = type <{ i32, i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"struct.gl::VariableLocation"* }
%"class.std::__1::vector.150" = type { %"class.std::__1::__vector_base.151" }
%"class.std::__1::__vector_base.151" = type { %"struct.gl::BufferVariable"*, %"struct.gl::BufferVariable"*, %"class.std::__1::__compressed_pair.153" }
%"struct.gl::BufferVariable" = type <{ %"struct.gl::ActiveVariable.base", [7 x i8], %"struct.sh::ShaderVariable", i32, %"struct.sh::BlockMemberInfo", i32, [4 x i8] }>
%"struct.gl::ActiveVariable.base" = type <{ i32 (...)**, %"class.angle::BitSetT.152" }>
%"class.angle::BitSetT.152" = type { i8 }
%"struct.sh::BlockMemberInfo" = type { i32, i32, i32, i8, i32 }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"struct.gl::BufferVariable"* }
%"class.gl::Range" = type { i32, i32 }
%"class.std::__1::shared_ptr" = type { %"class.gl::ProgramExecutable"*, %"class.std::__1::__shared_weak_count"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.rx::ProgramImpl" = type opaque
%"class.gl::ProgramBindings" = type { %"class.absl::flat_hash_map.237" }
%"class.absl::flat_hash_map.237" = type { %"class.absl::container_internal::raw_hash_map.238" }
%"class.absl::container_internal::raw_hash_map.238" = type { %"class.absl::container_internal::raw_hash_set.239" }
%"class.absl::container_internal::raw_hash_set.239" = type { i8*, %"union.absl::container_internal::map_slot_type.240"*, i64, i64, %"class.absl::container_internal::CompressedTuple.241" }
%"union.absl::container_internal::map_slot_type.240" = type opaque
%"class.absl::container_internal::CompressedTuple.241" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.242" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.242" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ProgramAliasedBindings" = type { %"class.absl::flat_hash_map.160" }
%"class.absl::flat_hash_map.160" = type { %"class.absl::container_internal::raw_hash_map.161" }
%"class.absl::container_internal::raw_hash_map.161" = type { %"class.absl::container_internal::raw_hash_set.162" }
%"class.absl::container_internal::raw_hash_set.162" = type { i8*, %"union.absl::container_internal::map_slot_type.163"*, i64, i64, %"class.absl::container_internal::CompressedTuple.164" }
%"union.absl::container_internal::map_slot_type.163" = type opaque
%"class.absl::container_internal::CompressedTuple.164" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.165" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.165" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::unique_ptr.246" = type { %"class.std::__1::__compressed_pair.247" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.248" }
%"struct.std::__1::__compressed_pair_elem.248" = type { %"struct.gl::Program::LinkingState"* }
%"struct.gl::Program::LinkingState" = type opaque
%"class.angle::BitSetT.212" = type { i64 }
%"class.gl::BindingPointer.387" = type { %"class.angle::BindingPointer.388" }
%"class.angle::BindingPointer.388" = type { i32 (...)**, %"class.gl::ProgramPipeline"* }
%"class.gl::ProgramExecutable" = type <{ %"class.angle::Subject", %"class.gl::InfoLog", %"class.angle::BitSetT.152", %"class.angle::BitSetT.152", [6 x i8], %"class.angle::BitSetT.177", i32, [4 x i8], %"class.angle::BitSetT.159", %"class.angle::BitSetT.177", %"class.angle::BitSetArray", %"struct.std::__1::array.180", %"struct.std::__1::array.181", %"class.angle::BitSetArray", %"struct.std::__1::array.182", %"struct.std::__1::array.183", %"class.angle::BitSetArray", %"struct.std::__1::array.183", i8, [7 x i8], %"class.std::__1::vector.81", %"class.std::__1::vector.143", %"class.std::__1::vector.143", i8, [7 x i8], %"class.std::__1::vector.81", %"class.std::__1::vector.184", %"class.std::__1::vector.191", i32, [4 x i8], %"class.std::__1::vector.198", %"class.gl::Range", %"class.gl::Range", %"class.std::__1::vector.205", %"class.angle::BitSetT.212", %"class.std::__1::vector.213", %"class.gl::Range", %"class.std::__1::vector.205", %"class.std::__1::vector.205", %"class.gl::Range", %"class.std::__1::vector.220", %"class.std::__1::vector.227", %"class.std::__1::vector.227", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [3 x i8], %"class.angle::PackedEnumMap.234", %"class.angle::PackedEnumMap.234", %"class.angle::PackedEnumMap", i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, %struct.Optional.236, [6 x i8] }>
%"class.gl::InfoLog" = type { %"class.std::__1::unique_ptr.171" }
%"class.std::__1::unique_ptr.171" = type { %"class.std::__1::__compressed_pair.172" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"class.std::__1::basic_stringstream"* }
%"class.std::__1::basic_stringstream" = type { %"class.std::__1::basic_iostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_iostream.base" = type { %"class.std::__1::basic_istream.base", %"class.std::__1::basic_ostream.base" }
%"class.std::__1::basic_istream.base" = type { i32 (...)**, i64 }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"struct.std::__1::array.180" = type { [96 x i32] }
%"struct.std::__1::array.181" = type { [96 x i8] }
%"struct.std::__1::array.182" = type { [96 x i8] }
%"struct.std::__1::array.183" = type { [96 x %"class.angle::BitSetT.152"] }
%"class.std::__1::vector.184" = type { %"class.std::__1::__vector_base.185" }
%"class.std::__1::__vector_base.185" = type { %"struct.gl::TransformFeedbackVarying"*, %"struct.gl::TransformFeedbackVarying"*, %"class.std::__1::__compressed_pair.186" }
%"struct.gl::TransformFeedbackVarying" = type <{ %"struct.sh::ShaderVariable", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"struct.gl::TransformFeedbackVarying"* }
%"class.std::__1::vector.191" = type { %"class.std::__1::__vector_base.192" }
%"class.std::__1::__vector_base.192" = type { i32*, i32*, %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { i32* }
%"class.std::__1::vector.198" = type { %"class.std::__1::__vector_base.199" }
%"class.std::__1::__vector_base.199" = type { %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"*, %"class.std::__1::__compressed_pair.200" }
%"struct.gl::LinkedUniform" = type { %"struct.gl::ActiveVariable.base", %"struct.sh::ShaderVariable", %"struct.gl::UniformTypeInfo"*, i32, %"struct.sh::BlockMemberInfo", %"class.std::__1::vector" }
%"struct.gl::UniformTypeInfo" = type <{ i32, i32, i32, i32, i32, i8, [3 x i8], i32, i32, i32, [4 x i8], i64, i64, i64, i8, i8, i8, [5 x i8] }>
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"struct.gl::LinkedUniform"* }
%"class.std::__1::vector.213" = type { %"class.std::__1::__vector_base.214" }
%"class.std::__1::__vector_base.214" = type { %"struct.gl::ShaderVariableBuffer"*, %"struct.gl::ShaderVariableBuffer"*, %"class.std::__1::__compressed_pair.215" }
%"struct.gl::ShaderVariableBuffer" = type { %"struct.gl::ActiveVariable.base", i32, i32, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"struct.gl::ShaderVariableBuffer"* }
%"class.std::__1::vector.205" = type { %"class.std::__1::__vector_base.206" }
%"class.std::__1::__vector_base.206" = type { %"struct.gl::InterfaceBlock"*, %"struct.gl::InterfaceBlock"*, %"class.std::__1::__compressed_pair.207" }
%"struct.gl::InterfaceBlock" = type <{ %"struct.gl::ShaderVariableBuffer", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.208" }
%"struct.std::__1::__compressed_pair_elem.208" = type { %"struct.gl::InterfaceBlock"* }
%"class.std::__1::vector.220" = type { %"class.std::__1::__vector_base.221" }
%"class.std::__1::__vector_base.221" = type { %"struct.gl::SamplerBinding"*, %"struct.gl::SamplerBinding"*, %"class.std::__1::__compressed_pair.222" }
%"struct.gl::SamplerBinding" = type { i8, i32, i8, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"struct.gl::SamplerBinding"* }
%"class.std::__1::vector.227" = type { %"class.std::__1::__vector_base.228" }
%"class.std::__1::__vector_base.228" = type { %"struct.gl::ImageBinding"*, %"struct.gl::ImageBinding"*, %"class.std::__1::__compressed_pair.229" }
%"struct.gl::ImageBinding" = type { i8, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"struct.gl::ImageBinding"* }
%"class.angle::PackedEnumMap.234" = type { %"struct.std::__1::array.235" }
%"struct.std::__1::array.235" = type { [6 x %"class.std::__1::vector.81"] }
%struct.Optional.236 = type { i8, i8 }
%"class.std::__1::vector.389" = type { %"class.std::__1::__vector_base.390" }
%"class.std::__1::__vector_base.390" = type { %"struct.gl::VertexAttribCurrentValueData"*, %"struct.gl::VertexAttribCurrentValueData"*, %"class.std::__1::__compressed_pair.392" }
%"struct.gl::VertexAttribCurrentValueData" = type { %union.anon.391, i32 }
%union.anon.391 = type { [4 x float] }
%"class.std::__1::__compressed_pair.392" = type { %"struct.std::__1::__compressed_pair_elem.393" }
%"struct.std::__1::__compressed_pair_elem.393" = type { %"struct.gl::VertexAttribCurrentValueData"* }
%"class.gl::VertexArray" = type <{ %"class.angle::ObserverInterface", %"class.gl::LabeledObject", %"class.angle::Subject", %"struct.gl::VertexArrayID", [4 x i8], %"class.gl::VertexArrayState", %"class.angle::BitSetT.411", %"struct.std::__1::array.412", %"struct.std::__1::array.414", %struct.Optional.416, %"class.rx::VertexArrayImpl"*, %"class.std::__1::vector.348", %"class.angle::BitSetT.177", %"class.gl::VertexArray::IndexRangeCache", i8, [7 x i8] }>
%"struct.gl::VertexArrayID" = type { i32 }
%"class.gl::VertexArrayState" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.397", %"class.gl::SubjectBindingPointer", %"class.std::__1::vector.404", %"class.angle::BitSetT.177", %"class.angle::BitSetT.159", %"class.angle::BitSetT.177", %"class.angle::BitSetT.177", %"class.angle::BitSetT.177", %"class.angle::BitSetT.177", %"class.angle::BitSetT.177" }
%"class.std::__1::vector.397" = type { %"class.std::__1::__vector_base.398" }
%"class.std::__1::__vector_base.398" = type { %"struct.gl::VertexAttribute"*, %"struct.gl::VertexAttribute"*, %"class.std::__1::__compressed_pair.399" }
%"struct.gl::VertexAttribute" = type { i8, %"struct.angle::Format"*, i8*, i32, i32, i32, i64 }
%"struct.angle::Format" = type { i32, i32, i32, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, void (i8*, i8*)*, void (i8*, i8*)*, %"class.rx::FastCopyFunctionMap"*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i32 }
%"class.rx::FastCopyFunctionMap" = type { i64, %"struct.rx::FastCopyFunctionMap::Entry"* }
%"struct.rx::FastCopyFunctionMap::Entry" = type { i32, void (i8*, i8*)* }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.400" }
%"struct.std::__1::__compressed_pair_elem.400" = type { %"struct.gl::VertexAttribute"* }
%"class.gl::SubjectBindingPointer" = type { %"class.gl::BindingPointer.275", %"class.angle::ObserverBindingBase" }
%"class.std::__1::vector.404" = type { %"class.std::__1::__vector_base.405" }
%"class.std::__1::__vector_base.405" = type { %"class.gl::VertexBinding"*, %"class.gl::VertexBinding"*, %"class.std::__1::__compressed_pair.406" }
%"class.gl::VertexBinding" = type { i32, i32, i64, %"class.gl::BindingPointer.275", %"class.angle::BitSetT.177" }
%"class.std::__1::__compressed_pair.406" = type { %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"class.gl::VertexBinding"* }
%"class.angle::BitSetT.411" = type { i64 }
%"struct.std::__1::array.412" = type { [16 x %"class.angle::BitSetT.413"] }
%"class.angle::BitSetT.413" = type { i64 }
%"struct.std::__1::array.414" = type { [16 x %"class.angle::BitSetT.415"] }
%"class.angle::BitSetT.415" = type { i64 }
%struct.Optional.416 = type { i8, %"class.angle::BitSetT.411" }
%"class.rx::VertexArrayImpl" = type opaque
%"class.gl::VertexArray::IndexRangeCache" = type { i64, i32, i64, %"struct.gl::IndexRange" }
%"struct.gl::IndexRange" = type { i64, i64, i64 }
%"class.angle::BitSetT.159" = type { i64 }
%"class.angle::PackedEnumMap.417" = type { %"struct.std::__1::array.418" }
%"struct.std::__1::array.418" = type { [11 x %"class.std::__1::vector.419"] }
%"class.std::__1::vector.419" = type { %"class.std::__1::__vector_base.420" }
%"class.std::__1::__vector_base.420" = type { %"class.gl::BindingPointer.421"*, %"class.gl::BindingPointer.421"*, %"class.std::__1::__compressed_pair.423" }
%"class.gl::BindingPointer.421" = type { %"class.angle::BindingPointer.422" }
%"class.angle::BindingPointer.422" = type { i32 (...)**, %"class.gl::Texture"* }
%"class.std::__1::__compressed_pair.423" = type { %"struct.std::__1::__compressed_pair_elem.424" }
%"struct.std::__1::__compressed_pair_elem.424" = type { %"class.gl::BindingPointer.421"* }
%"class.gl::ActiveTexturesCache" = type { %"struct.std::__1::array.428" }
%"struct.std::__1::array.428" = type { [96 x %"class.gl::Texture"*] }
%"class.std::__1::vector.429" = type { %"class.std::__1::__vector_base.430" }
%"class.std::__1::__vector_base.430" = type { %"class.gl::BindingPointer.431"*, %"class.gl::BindingPointer.431"*, %"class.std::__1::__compressed_pair.433" }
%"class.gl::BindingPointer.431" = type { %"class.angle::BindingPointer.432" }
%"class.angle::BindingPointer.432" = type { i32 (...)**, %"class.gl::Sampler"* }
%"class.std::__1::__compressed_pair.433" = type { %"struct.std::__1::__compressed_pair_elem.434" }
%"struct.std::__1::__compressed_pair_elem.434" = type { %"class.gl::BindingPointer.431"* }
%"class.std::__1::vector.438" = type { %"class.std::__1::__vector_base.439" }
%"class.std::__1::__vector_base.439" = type { %"struct.gl::ImageUnit"*, %"struct.gl::ImageUnit"*, %"class.std::__1::__compressed_pair.440" }
%"struct.gl::ImageUnit" = type <{ %"class.gl::BindingPointer.421", i32, i8, [3 x i8], i32, i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.440" = type { %"struct.std::__1::__compressed_pair_elem.441" }
%"struct.std::__1::__compressed_pair_elem.441" = type { %"struct.gl::ImageUnit"* }
%"class.angle::PackedEnumMap.445" = type { %"struct.std::__1::array.446" }
%"struct.std::__1::array.446" = type { [7 x %"class.gl::BindingPointer.447"] }
%"class.gl::BindingPointer.447" = type { %"class.angle::BindingPointer.448" }
%"class.angle::BindingPointer.448" = type { i32 (...)**, %"class.gl::Query"* }
%"class.gl::Query" = type opaque
%"class.angle::PackedEnumMap.449" = type { %"struct.std::__1::array.450" }
%"struct.std::__1::array.450" = type { [13 x %"class.gl::BindingPointer.275"] }
%"class.std::__1::vector.451" = type { %"class.std::__1::__vector_base.452" }
%"class.std::__1::__vector_base.452" = type { %"class.gl::OffsetBindingPointer"*, %"class.gl::OffsetBindingPointer"*, %"class.std::__1::__compressed_pair.453" }
%"class.std::__1::__compressed_pair.453" = type { %"struct.std::__1::__compressed_pair_elem.454" }
%"struct.std::__1::__compressed_pair_elem.454" = type { %"class.gl::OffsetBindingPointer"* }
%"class.angle::BitSetArray.458" = type { %"struct.std::__1::array.178" }
%"struct.std::__1::array.178" = type { [2 x %"class.angle::BitSetT.179"] }
%"class.angle::BitSetT.459" = type { i64 }
%"class.gl::BindingPointer.460" = type { %"class.angle::BindingPointer.461" }
%"class.angle::BindingPointer.461" = type { i32 (...)**, %"class.gl::TransformFeedback"* }
%"class.gl::TransformFeedback" = type { %"class.gl::RefCountObject.base.463", %"class.gl::LabeledObject", %"class.gl::TransformFeedbackState", %"class.rx::TransformFeedbackImpl"* }
%"class.gl::RefCountObject.base.463" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::TransformFeedbackID" }>
%"struct.gl::TransformFeedbackID" = type { i32 }
%"class.gl::TransformFeedbackState" = type { %"class.std::__1::basic_string", i8, i8, i8, i64, i64, %"class.gl::Program"*, %"class.std::__1::vector.451" }
%"class.rx::TransformFeedbackImpl" = type opaque
%"struct.gl::PixelUnpackState" = type { %"struct.gl::PixelStoreStateBase" }
%"struct.gl::PixelStoreStateBase" = type { i32, i32, i32, i32, i32, i32 }
%"struct.gl::PixelPackState" = type <{ %"struct.gl::PixelStoreStateBase", i8, [3 x i8] }>
%"class.gl::Debug" = type { i8, void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*, %"class.std::__1::deque", i32, i8, %"class.std::__1::vector.473" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.469" }
%"struct.std::__1::__split_buffer" = type { %"struct.gl::Debug::Message"**, %"struct.gl::Debug::Message"**, %"struct.gl::Debug::Message"**, %"class.std::__1::__compressed_pair.464" }
%"struct.gl::Debug::Message" = type { i32, i32, i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.464" = type { %"struct.std::__1::__compressed_pair_elem.465" }
%"struct.std::__1::__compressed_pair_elem.465" = type { %"struct.gl::Debug::Message"** }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::vector.473" = type { %"class.std::__1::__vector_base.474" }
%"class.std::__1::__vector_base.474" = type { %"struct.gl::Debug::Group"*, %"struct.gl::Debug::Group"*, %"class.std::__1::__compressed_pair.482" }
%"struct.gl::Debug::Group" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::vector.475" }
%"class.std::__1::vector.475" = type { %"class.std::__1::__vector_base.476" }
%"class.std::__1::__vector_base.476" = type { %"struct.gl::Debug::Control"*, %"struct.gl::Debug::Control"*, %"class.std::__1::__compressed_pair.477" }
%"struct.gl::Debug::Control" = type <{ i32, i32, i32, [4 x i8], %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.477" = type { %"struct.std::__1::__compressed_pair_elem.478" }
%"struct.std::__1::__compressed_pair_elem.478" = type { %"struct.gl::Debug::Control"* }
%"class.std::__1::__compressed_pair.482" = type { %"struct.std::__1::__compressed_pair_elem.483" }
%"struct.std::__1::__compressed_pair_elem.483" = type { %"struct.gl::Debug::Group"* }
%"class.angle::BitSetT.487" = type { i32 }
%"class.gl::GLES1State" = type <{ %"class.gl::State"*, %"class.angle::BitSetT.177", %"class.std::__1::vector.488", i8, i8, i8, i8, [4 x i8], %"class.std::__1::vector.496", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"struct.angle::Color", %"class.angle::Vector", %"class.std::__1::vector.501", i32, i8, [3 x i8], %"class.angle::FixedVector", %"class.angle::FixedVector", %"class.std::__1::vector.516", %"class.std::__1::vector.523", %"struct.gl::MaterialParameters", %"struct.gl::LightModelParameters", %"class.std::__1::vector.530", %"struct.gl::FogParameters", i8, [3 x i8], %"struct.gl::PointParameters", i8, [3 x i8], float, i8, [7 x i8], %"class.std::__1::vector.539", i8, i8, i8, i8, [4 x i8] }>
%"class.std::__1::vector.488" = type { %"class.std::__1::__vector_base.489" }
%"class.std::__1::__vector_base.489" = type { %"class.angle::BitSetT.490"*, %"class.angle::BitSetT.490"*, %"class.std::__1::__compressed_pair.491" }
%"class.angle::BitSetT.490" = type opaque
%"class.std::__1::__compressed_pair.491" = type { %"struct.std::__1::__compressed_pair_elem.492" }
%"struct.std::__1::__compressed_pair_elem.492" = type { %"class.angle::BitSetT.490"* }
%"class.std::__1::vector.496" = type { i64*, i64, %"class.std::__1::__compressed_pair.497" }
%"class.std::__1::__compressed_pair.497" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.angle::Vector" = type { %"class.angle::VectorBase" }
%"class.angle::VectorBase" = type { [3 x float] }
%"class.std::__1::vector.501" = type { %"class.std::__1::__vector_base.502" }
%"class.std::__1::__vector_base.502" = type { %"struct.gl::TextureCoordF"*, %"struct.gl::TextureCoordF"*, %"class.std::__1::__compressed_pair.503" }
%"struct.gl::TextureCoordF" = type { float, float, float, float }
%"class.std::__1::__compressed_pair.503" = type { %"struct.std::__1::__compressed_pair_elem.504" }
%"struct.std::__1::__compressed_pair_elem.504" = type { %"struct.gl::TextureCoordF"* }
%"class.angle::FixedVector" = type { %"struct.std::__1::array.508", i64 }
%"struct.std::__1::array.508" = type { [16 x %"class.angle::Mat4"] }
%"class.angle::Mat4" = type { %"class.angle::Matrix" }
%"class.angle::Matrix" = type { %"class.std::__1::vector.509", i32, i32 }
%"class.std::__1::vector.509" = type { %"class.std::__1::__vector_base.510" }
%"class.std::__1::__vector_base.510" = type { float*, float*, %"class.std::__1::__compressed_pair.511" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.512" }
%"struct.std::__1::__compressed_pair_elem.512" = type { float* }
%"class.std::__1::vector.516" = type { %"class.std::__1::__vector_base.517" }
%"class.std::__1::__vector_base.517" = type { %"class.angle::FixedVector"*, %"class.angle::FixedVector"*, %"class.std::__1::__compressed_pair.518" }
%"class.std::__1::__compressed_pair.518" = type { %"struct.std::__1::__compressed_pair_elem.519" }
%"struct.std::__1::__compressed_pair_elem.519" = type { %"class.angle::FixedVector"* }
%"class.std::__1::vector.523" = type { %"class.std::__1::__vector_base.524" }
%"class.std::__1::__vector_base.524" = type { %"struct.gl::TextureEnvironmentParameters"*, %"struct.gl::TextureEnvironmentParameters"*, %"class.std::__1::__compressed_pair.525" }
%"struct.gl::TextureEnvironmentParameters" = type <{ i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"struct.angle::Color", float, float, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.525" = type { %"struct.std::__1::__compressed_pair_elem.526" }
%"struct.std::__1::__compressed_pair_elem.526" = type { %"struct.gl::TextureEnvironmentParameters"* }
%"struct.gl::MaterialParameters" = type { %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", float }
%"struct.gl::LightModelParameters" = type <{ %"struct.angle::Color", i8, [3 x i8] }>
%"class.std::__1::vector.530" = type { %"class.std::__1::__vector_base.531" }
%"class.std::__1::__vector_base.531" = type { %"struct.gl::LightParameters"*, %"struct.gl::LightParameters"*, %"class.std::__1::__compressed_pair.534" }
%"struct.gl::LightParameters" = type { i8, %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", %"class.angle::Vector.532", %"class.angle::Vector", float, float, float, float, float }
%"class.angle::Vector.532" = type { %"class.angle::VectorBase.533" }
%"class.angle::VectorBase.533" = type { [4 x float] }
%"class.std::__1::__compressed_pair.534" = type { %"struct.std::__1::__compressed_pair_elem.535" }
%"struct.std::__1::__compressed_pair_elem.535" = type { %"struct.gl::LightParameters"* }
%"struct.gl::FogParameters" = type { i8, float, float, float, %"struct.angle::Color" }
%"struct.gl::PointParameters" = type { float, float, float, %"class.angle::Vector", float }
%"class.std::__1::vector.539" = type { %"class.std::__1::__vector_base.540" }
%"class.std::__1::__vector_base.540" = type { %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"*, %"class.std::__1::__compressed_pair.541" }
%"struct.gl::ClipPlaneParameters" = type { i8, %"class.angle::Vector.532" }
%"class.std::__1::__compressed_pair.541" = type { %"struct.std::__1::__compressed_pair_elem.542" }
%"struct.std::__1::__compressed_pair_elem.542" = type { %"struct.gl::ClipPlaneParameters"* }
%"class.angle::BitSetT.546" = type { i32 }
%"class.angle::BitSetT.177" = type { i64 }
%"class.angle::BitSetArray" = type { %"struct.std::__1::array.178" }
%"class.angle::BitSetT.158" = type { i8 }
%"class.gl::ErrorSet" = type { %"class.gl::Context"*, %"class.std::__1::set.44" }
%"class.angle::BitSetT.548" = type { i32 }
%"class.std::__1::unique_ptr.549" = type { %"class.std::__1::__compressed_pair.550" }
%"class.std::__1::__compressed_pair.550" = type { %"struct.std::__1::__compressed_pair_elem.551" }
%"struct.std::__1::__compressed_pair_elem.551" = type { %"class.rx::ContextImpl"* }
%"class.rx::ContextImpl" = type { %"class.rx::GLImplFactory", %"class.gl::State"*, %"class.gl::MemoryProgramCache"*, %"class.gl::ErrorSet"* }
%"class.rx::GLImplFactory" = type { i32 (...)**, %"class.rx::SerialFactoryBase" }
%"struct.gl::Extensions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, float, i8, i8, i8, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.gl::BindingPointer" = type { %"class.angle::BindingPointer.102" }
%"class.angle::BindingPointer.102" = type { i32 (...)**, %"class.gl::Compiler"* }
%"class.gl::Compiler" = type { %"class.angle::RefCountObject", %"class.std::__1::unique_ptr.103", i32, i32, %struct.ShBuiltInResources, %"class.angle::PackedEnumMap.109" }
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.rx::CompilerImpl"* }
%"class.rx::CompilerImpl" = type opaque
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array.41", %"struct.std::__1::array.41", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.angle::PackedEnumMap.109" = type { %"struct.std::__1::array.110" }
%"struct.std::__1::array.110" = type { [6 x %"class.std::__1::vector.111"] }
%"class.std::__1::vector.111" = type { %"class.std::__1::__vector_base.112" }
%"class.std::__1::__vector_base.112" = type { %"class.gl::ShCompilerInstance"*, %"class.gl::ShCompilerInstance"*, %"class.std::__1::__compressed_pair.113" }
%"class.gl::ShCompilerInstance" = type <{ i8*, i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.gl::ShCompilerInstance"* }
%"struct.egl::Config" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.angle::PackedEnumMap.555" = type { %"struct.std::__1::array.556" }
%"struct.std::__1::array.556" = type { [11 x %"class.gl::BindingPointer.421"] }
%"class.gl::ResourceMap.557" = type { i64, %"class.gl::FenceNV"**, %"class.absl::flat_hash_map.558" }
%"class.gl::FenceNV" = type opaque
%"class.absl::flat_hash_map.558" = type { %"class.absl::container_internal::raw_hash_map.559" }
%"class.absl::container_internal::raw_hash_map.559" = type { %"class.absl::container_internal::raw_hash_set.560" }
%"class.absl::container_internal::raw_hash_set.560" = type { i8*, %"union.absl::container_internal::map_slot_type.561"*, i64, i64, %"class.absl::container_internal::CompressedTuple.562" }
%"union.absl::container_internal::map_slot_type.561" = type opaque
%"class.absl::container_internal::CompressedTuple.562" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.563" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.563" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.567" = type { i64, %"class.gl::Query"**, %"class.absl::flat_hash_map.568" }
%"class.absl::flat_hash_map.568" = type { %"class.absl::container_internal::raw_hash_map.569" }
%"class.absl::container_internal::raw_hash_map.569" = type { %"class.absl::container_internal::raw_hash_set.570" }
%"class.absl::container_internal::raw_hash_set.570" = type { i8*, %"union.absl::container_internal::map_slot_type.571"*, i64, i64, %"class.absl::container_internal::CompressedTuple.572" }
%"union.absl::container_internal::map_slot_type.571" = type opaque
%"class.absl::container_internal::CompressedTuple.572" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.573" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.573" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.577" = type { i64, %"class.gl::VertexArray"**, %"class.absl::flat_hash_map.578" }
%"class.absl::flat_hash_map.578" = type { %"class.absl::container_internal::raw_hash_map.579" }
%"class.absl::container_internal::raw_hash_map.579" = type { %"class.absl::container_internal::raw_hash_set.580" }
%"class.absl::container_internal::raw_hash_set.580" = type { i8*, %"union.absl::container_internal::map_slot_type.581"*, i64, i64, %"class.absl::container_internal::CompressedTuple.582" }
%"union.absl::container_internal::map_slot_type.581" = type opaque
%"class.absl::container_internal::CompressedTuple.582" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.583" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.583" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.587" = type { i64, %"class.gl::TransformFeedback"**, %"class.absl::flat_hash_map.588" }
%"class.absl::flat_hash_map.588" = type { %"class.absl::container_internal::raw_hash_map.589" }
%"class.absl::container_internal::raw_hash_map.589" = type { %"class.absl::container_internal::raw_hash_set.590" }
%"class.absl::container_internal::raw_hash_set.590" = type { i8*, %"union.absl::container_internal::map_slot_type.591"*, i64, i64, %"class.absl::container_internal::CompressedTuple.592" }
%"union.absl::container_internal::map_slot_type.591" = type opaque
%"class.absl::container_internal::CompressedTuple.592" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.593" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.593" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::HandleAllocator" = type <{ i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.54", %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::vector.54" = type { %"class.std::__1::__vector_base.55" }
%"class.std::__1::__vector_base.55" = type { %"struct.gl::HandleAllocator::HandleRange"*, %"struct.gl::HandleAllocator::HandleRange"*, %"class.std::__1::__compressed_pair.56" }
%"struct.gl::HandleAllocator::HandleRange" = type { i32, i32 }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"struct.gl::HandleAllocator::HandleRange"* }
%"class.std::__1::vector.597" = type { %"class.std::__1::__vector_base.598" }
%"class.std::__1::__vector_base.598" = type { i8**, i8**, %"class.std::__1::__compressed_pair.599" }
%"class.std::__1::__compressed_pair.599" = type { %"struct.std::__1::__compressed_pair_elem.600" }
%"struct.std::__1::__compressed_pair_elem.600" = type { i8** }
%"class.std::__1::unique_ptr.604" = type { %"class.std::__1::__compressed_pair.605" }
%"class.std::__1::__compressed_pair.605" = type { %"struct.std::__1::__compressed_pair_elem.606" }
%"struct.std::__1::__compressed_pair_elem.606" = type { %"class.gl::GLES1Renderer"* }
%"class.gl::GLES1Renderer" = type opaque
%"class.egl::Surface" = type { %"class.egl::LabeledObject", %"class.gl::FramebufferAttachmentObject", %"struct.egl::SurfaceState", %"class.rx::SurfaceImpl"*, i32, i8, i32, i32, i8, i8, i8, i32, i32, i32, i8, i32, i32, i32, i32, i8, i64, i64, i8, i8, i32, i32, i32, i32, i32, %"class.gl::Texture"*, %"struct.gl::Format", %"struct.gl::Format", %"struct.gl::Offset", i32, %"class.angle::ObserverBinding" }
%"struct.egl::SurfaceState" = type <{ i8*, %"struct.egl::Config"*, %"class.egl::AttributeMap", i8, [3 x i8], %"class.angle::BitSetT.732", %"class.angle::BitSetT.733", i8, [3 x i8] }>
%"class.egl::AttributeMap" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.angle::BitSetT.732" = type { i32 }
%"class.angle::BitSetT.733" = type { i32 }
%"class.rx::SurfaceImpl" = type { %"class.rx::FramebufferAttachmentObjectImpl", %"struct.egl::SurfaceState"* }
%"class.egl::Display" = type { %"class.egl::LabeledObject", %"class.angle::ObserverInterface", %"struct.egl::DisplayState", %"class.rx::DisplayImpl"*, %"class.angle::ObserverBinding", %"class.egl::AttributeMap", %"class.egl::ConfigSet", %"class.std::__1::set.677", %"class.std::__1::set", %"class.std::__1::set.687", %"class.std::__1::set.697", i8, i8, %"struct.egl::Caps", %"struct.egl::DisplayExtensions", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.egl::Device"*, %"class.egl::Surface"*, i32, %"class.angle::LoggingAnnotator", %"class.gl::TextureManager"*, %"class.gl::SemaphoreManager"*, %"class.egl::BlobCache", %"class.gl::MemoryProgramCache", i64, i64, %"struct.angle::FrontendFeatures", %"class.std::__1::vector.718", %"class.std::__1::mutex", %"class.std::__1::vector.725", %"class.std::__1::vector.725", %"class.std::__1::mutex", %"class.std::__1::mutex" }
%"class.egl::ConfigSet" = type { %"class.std::__1::map.666" }
%"class.std::__1::map.666" = type { %"class.std::__1::__tree.667" }
%"class.std::__1::__tree.667" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.668", %"class.std::__1::__compressed_pair.672" }
%"class.std::__1::__compressed_pair.668" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.672" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.677" = type { %"class.std::__1::__tree.678" }
%"class.std::__1::__tree.678" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.679", %"class.std::__1::__compressed_pair.683" }
%"class.std::__1::__compressed_pair.679" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.683" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.687" = type { %"class.std::__1::__tree.688" }
%"class.std::__1::__tree.688" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.689", %"class.std::__1::__compressed_pair.693" }
%"class.std::__1::__compressed_pair.689" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.693" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::set.697" = type { %"class.std::__1::__tree.698" }
%"class.std::__1::__tree.698" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.699", %"class.std::__1::__compressed_pair.703" }
%"class.std::__1::__compressed_pair.699" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.703" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.egl::Device" = type opaque
%"class.angle::LoggingAnnotator" = type { %"class.gl::DebugAnnotator" }
%"class.gl::DebugAnnotator" = type { i32 (...)** }
%"class.gl::MemoryProgramCache" = type <{ %"class.egl::BlobCache"*, i32, [4 x i8] }>
%"struct.angle::FrontendFeatures" = type { %"struct.angle::FeatureSetBase", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature" }
%"struct.angle::FeatureSetBase" = type { %"class.std::__1::map.707" }
%"class.std::__1::map.707" = type { %"class.std::__1::__tree.708" }
%"class.std::__1::__tree.708" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.709", %"class.std::__1::__compressed_pair.713" }
%"class.std::__1::__compressed_pair.709" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.713" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.angle::Feature" = type { i8*, i32, i8*, i8*, i8, i8* }
%"class.std::__1::vector.718" = type { %"class.std::__1::__vector_base.719" }
%"class.std::__1::__vector_base.719" = type { %"struct.angle::Feature"**, %"struct.angle::Feature"**, %"class.std::__1::__compressed_pair.720" }
%"class.std::__1::__compressed_pair.720" = type { %"struct.std::__1::__compressed_pair_elem.721" }
%"struct.std::__1::__compressed_pair_elem.721" = type { %"struct.angle::Feature"** }
%"class.std::__1::vector.725" = type { %"class.std::__1::__vector_base.726" }
%"class.std::__1::__vector_base.726" = type { %"class.angle::ScratchBuffer"*, %"class.angle::ScratchBuffer"*, %"class.std::__1::__compressed_pair.727" }
%"class.angle::ScratchBuffer" = type { i32, i32, %"class.angle::MemoryBuffer" }
%"class.angle::MemoryBuffer" = type { i64, i8* }
%"class.std::__1::__compressed_pair.727" = type { %"struct.std::__1::__compressed_pair_elem.728" }
%"struct.std::__1::__compressed_pair_elem.728" = type { %"class.angle::ScratchBuffer"* }
%"class.gl::StateCache" = type <{ %"class.angle::BitSetT.177", %"class.angle::BitSetT.177", %"class.angle::BitSetT.177", i8, [7 x i8], i64, i64, i64, i64, i8, [7 x i8], %"class.angle::BitSetT.179", %"class.angle::BitSetArray", %"class.angle::PackedEnumMap.610", %"class.angle::PackedEnumMap.612", %"class.angle::PackedEnumMap.614", %"class.angle::PackedEnumMap.616", %"class.angle::PackedEnumMap.616", i8, [7 x i8] }>
%"class.angle::PackedEnumMap.610" = type { %"struct.std::__1::array.611" }
%"struct.std::__1::array.611" = type { [16 x i8] }
%"class.angle::PackedEnumMap.612" = type { %"struct.std::__1::array.613" }
%"struct.std::__1::array.613" = type { [12 x i8] }
%"class.angle::PackedEnumMap.614" = type { %"struct.std::__1::array.615" }
%"struct.std::__1::array.615" = type { [4 x i8] }
%"class.angle::PackedEnumMap.616" = type { %"struct.std::__1::array.617" }
%"struct.std::__1::array.617" = type { [19 x i32] }
%"class.angle::BitSetT.179" = type { i64 }
%"class.angle::BitSetT.547" = type { i64 }
%"class.angle::ObserverBinding" = type { %"class.angle::ObserverBindingBase", %"class.angle::Subject"* }
%"class.std::__1::vector.348" = type { %"class.std::__1::__vector_base.349" }
%"class.std::__1::__vector_base.349" = type { %"class.angle::ObserverBinding"*, %"class.angle::ObserverBinding"*, %"class.std::__1::__compressed_pair.350" }
%"class.std::__1::__compressed_pair.350" = type { %"struct.std::__1::__compressed_pair_elem.351" }
%"struct.std::__1::__compressed_pair_elem.351" = type { %"class.angle::ObserverBinding"* }
%struct.Optional.618 = type { i8, %"class.angle::ScratchBuffer" }
%"class.std::__1::shared_ptr.619" = type { %"class.angle::WorkerThreadPool"*, %"class.std::__1::__shared_weak_count"* }
%"class.angle::WorkerThreadPool" = type { i32 (...)** }
%"class.std::__1::unique_ptr.620" = type { %"class.std::__1::__compressed_pair.621" }
%"class.std::__1::__compressed_pair.621" = type { %"struct.std::__1::__compressed_pair_elem.622" }
%"struct.std::__1::__compressed_pair_elem.622" = type { %"class.angle::FrameCapture"* }
%"class.angle::FrameCapture" = type opaque
%"class.gl::MockOverlay" = type { %"class.gl::overlay::Mock" }
%"class.gl::overlay::Mock" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.egl::Error" = type { i32, i32, %"class.std::__1::unique_ptr.744" }
%"class.std::__1::unique_ptr.744" = type { %"class.std::__1::__compressed_pair.745" }
%"class.std::__1::__compressed_pair.745" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"class.rx::ContextGL" = type <{ %"class.rx::ContextImpl", %"class.std::__1::shared_ptr.749", i32, [4 x i8] }>
%"class.std::__1::shared_ptr.749" = type { %"class.rx::RendererGL"*, %"class.std::__1::__shared_weak_count"* }
%"class.rx::RendererGL" = type <{ i32 (...)**, %"struct.gl::Version", %"class.std::__1::unique_ptr.750", %"class.rx::StateManagerGL"*, %"class.rx::BlitGL"*, %"class.rx::ClearMultiviewGL"*, i8, i8, [6 x i8], %"struct.gl::Caps", %"class.gl::TextureCapsMap", %"struct.gl::Extensions", %"struct.gl::Limitations", i32, [4 x i8], %"class.absl::flat_hash_map.782", %"class.std::__1::list.797", %"class.std::__1::mutex", i8, [7 x i8], %"struct.angle::FeaturesGL", i8, [7 x i8] }>
%"class.std::__1::unique_ptr.750" = type { %"class.std::__1::__compressed_pair.751" }
%"class.std::__1::__compressed_pair.751" = type { %"struct.std::__1::__compressed_pair_elem.752" }
%"struct.std::__1::__compressed_pair_elem.752" = type { %"class.rx::FunctionsGL"* }
%"class.rx::FunctionsGL" = type { %"class.rx::DispatchTableGL", %"struct.gl::Version", i32, i32, %"class.std::__1::vector.136" }
%"class.rx::DispatchTableGL" = type { i32 (...)**, void (i32, i32)*, void (i32)*, void (float, float, float, float)*, void (double)*, void (i32)*, void (i8, i8, i8, i8)*, void (i32)*, void (i32)*, void (i8)*, void (double, double)*, void (i32)*, void (i32)*, void (i32)*, void ()*, void ()*, void (i32)*, void (i32, i8*)*, void (i32, double*)*, i32 ()*, void (i32, float*)*, void (i32, i32*)*, i8* (i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32)*, i8 (i32)*, void (float)*, void (i32)*, void (i32, float)*, void (i32, i32)*, void (float)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i8*)*, void (i32, i32*)*, i8 (i32)*, void (float, float)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (float, float, float, float)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32)*, i8 (i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i8*)*, void (float, i8)*, void (i32, i32, i32, i32)*, void (i32, i32*, i32*, i32)*, void (i32, i32*, i32, i8**, i32)*, void (i32, float)*, void (i32, float*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32)*, i8 (i32)*, i8* (i32, i32)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32)*, i32 ()*, i32 (i32)*, void (i32)*, void (i32)*, void (i32, i32)*, void (i32)*, void (i32, i32*)*, void (i32)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*, i32*)*, i32 (i32, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i8 (i32)*, i8 (i32)*, void (i32)*, void (i32, i32, i8**, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, float)*, void (i32, i32, float*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, float, float, float, float)*, void (i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32)*, void (i32)*, void (i32, double)*, void (i32, double*)*, void (i32, float)*, void (i32, float*)*, void (i32, i16)*, void (i32, i16*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, float, float)*, void (i32, float*)*, void (i32, i16, i16)*, void (i32, i16*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, float, float, float)*, void (i32, float*)*, void (i32, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8, i8, i8, i8)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32*)*, void (i32, i16, i16, i16, i16)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32, i32, i8, i32, i8*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32, i8, float*)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32)*, void (i32, i32)*, void (i32, i32, float, i32)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i8, i8, i8, i8)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void ()*, void ()*, void (i32, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32)*, void (i32, i32, i8*)*, i32 (i32, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8* (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, i8 (i32, i32)*, i8 (i32)*, i8 (i32)*, i8 (i32)*, i8* (i32, i64, i64, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8**, i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i8*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i16*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i8*)*, void (i32, i32, i32*, i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i8**, i32*)*, void (i32)*, void (i32, i32, i32)*, void (i32, i32, i32)*, i32 (%struct.__GLsync*, i32, i64)*, void (%struct.__GLsync*)*, void (i32, i32, i32, i8*, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i32, i32, i8*, i32)*, %struct.__GLsync* (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i64*)*, void (i32, i32, float*)*, void (%struct.__GLsync*, i32, i32, i32*, i32*)*, i8 (%struct.__GLsync*)*, void (i32, i32*, i32, i8**, i32, i32*)*, void (i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (%struct.__GLsync*, i32, i64)*, void (i32, i32, i32, i8*)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, i32 (i32, i8*)*, void (i32, i32, i64*)*, void (i32, i32, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, i8 (i32)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i8, i32)*, void (i32, i32, i8, i32*)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32*)*, void (i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, double*)*, i8 (i32)*, void (float)*, void (i32, float*)*, void (i32, i32)*, void ()*, void ()*, void (i32, double)*, void (i32, i32, double*)*, void (i32, double, double)*, void (i32, i32, double*)*, void (i32, double, double, double)*, void (i32, i32, double*)*, void (i32, double, double, double, double)*, void (i32, i32, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i8, double*)*, void (i32, i32, i32*)*, void (i32, i32)*, void (i32)*, void (float)*, i32 (i32, i32, i8**)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, double, double)*, void (float, float)*, void (i32, i32*)*, void (i32, i32, double*)*, void (i32, i32, float*)*, void (i32, i32, i32*, i32*, i8*)*, void (i32, i32, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32*)*, void (i32, i32, double*)*, i8 (i32)*, void (i32, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32, i32, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, double, double, double, double)*, void (i32, i32, i32, double*)*, void (i32, i32, float, float, float, float)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void (i32, i32, i32, i8, double*)*, void (i32, i32, i32, i8, float*)*, void ()*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*, i32, i8*, i32)*, void (i32, i32, i32)*, void (i32)*, void (i32, double)*, void (i32, double*)*, void (i32, double, double)*, void (i32, double*)*, void (i32, double, double, double)*, void (i32, double*)*, void (i32, double, double, double, double)*, void (i32, double*)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, float*)*, void (i32, float, float, float, float)*, void (i32, float*)*, void (i32, i32, i32, i8, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32, i32*)*, void (i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i64, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32)*, void (void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*)*, void (i32, i32, i32, i32, i32*, i8)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i64)*, void (i32, i32, i32)*, i32 (i32, i32, i32*, i32*, i32*, i32*, i32*, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i64*)*, void (i32, i32, i32, i32*, i8*)*, void (i8*, i32, i32*, i8*)*, void (i32, i8**)*, void (i32, i32, i32, i32*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)*, void (i32, i32, i32, i32, i32*, i8*)*, void (i32, i32, i32, i32, i32*, i32, i32*, i32*)*, void (i32)*, void (i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i8*, i32, i32)*, void (i32, i32, i8*, i32, i32)*, void (i32, i32, i32, i8*)*, void (i8*, i32, i8*)*, void ()*, void (i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*, i64*, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i64*, i32*)*, void (i32, i64, i8*, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32)*, void (i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i32, i32, i8*)*, void (i32, i32, i32, float, i32)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i64, i64, i64)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32)*, void (i32, i32)*, void (i32, i64, i64)*, void (i32)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, i32 ()*, void (i32, i32, i64*)*, void (i32, i32, i32*)*, void (i32, i32, i8**)*, void (i32, i64, i64, i8*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i64*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i64*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, double*)*, void (i32, i32, i32, float*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i32*, i32, i32, i32, i32)*, i8* (i32, i32)*, i8* (i32, i64, i64, i32)*, void (i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i8*, i32)*, void (i32, i64, i64, i8*)*, void (i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i32, i8*)*, void ()*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, float)*, void (i32, i32, float*)*, void (i32, i32, i32)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32, i8)*, void (i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, i8 (i32)*, void (i32, i32, i32)*, void (i32, i32, i32, i32, i8, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32, i32)*, void (i32, i32)*, void (i32, i32, i32, i64, i32)*, void (i32, i32, i32, i32*, i64*, i32*)*, void ()*, void (float, float, float, float, float, float, float, float)*, void (i32)*, void (i32, i8*)*, void ()*, void (i32, i8*)*, void (i32, i32, i32*)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i64, i32, i64)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i32*)*, void (i32, i32, i8*)*, void (i32, i8*)*, i8 (i32)*, void (i32, i32, i32*)*, void (i32, i64, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i32, i64)*, void (i32, i32, i32, i32, i32, i32, i8, i32, i64)*, void (i32, i64, i32, i32)*, void (i32, i64, i32, i8*)*, void (i32, i64, i32, i8*)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32, i32*)*, void (i32, i32*)*, void (i32, i32, i64*)*, i8 (i32)*, void (i32, i32, i64*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32*, i32, i32*, i32*)*, void (i32, i32, i32)*, void (i32, i32, i8*)*, void (i32, i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32)*, void (i32)*, void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)*, void (i32, i32, i32, i32, i32, i32*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i32, i32)*, void (i32, i32, i32, i64, i64)*, void (i32, i32, i32, i32, i32, i32)* }
%struct.__GLsync = type opaque
%"class.rx::StateManagerGL" = type { %"class.rx::FunctionsGL"*, %"struct.angle::FeaturesGL"*, i32, i32, %"class.std::__1::vector.389", i32, %"struct.rx::VertexArrayStateGL", %"struct.rx::VertexArrayStateGL"*, %"class.angle::PackedEnumMap.760", %"class.angle::PackedEnumMap.762", i64, %"class.angle::PackedEnumMap.771", %"struct.std::__1::array.180", %"class.std::__1::vector.773", i32, %"class.rx::TransformFeedbackGL"*, %"class.angle::PackedEnumMap.780", %"class.angle::PackedEnumMap.780", %"struct.gl::ContextID", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::vector", i32, i8, %"struct.gl::Rectangle", %"struct.gl::Rectangle", float, float, %"struct.angle::Color", %"class.gl::BlendStateExt", i8, i8, i8, float, i8, i8, %"struct.std::__1::array.384", i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, i8, float, float, i8, float, i8, i32, %"struct.angle::Color", float, i32, i8, i8, i8, i8, i8, i8, i8, i32, i8, i32, %"class.angle::BitSetT.487", i64, %"class.angle::BitSetT.179", %"class.angle::BitSetT.177" }
%"struct.rx::VertexArrayStateGL" = type { i32, %"class.angle::FixedVector.756", %"class.angle::FixedVector.758" }
%"class.angle::FixedVector.756" = type { %"struct.std::__1::array.757", i64 }
%"struct.std::__1::array.757" = type { [16 x %"struct.rx::VertexAttributeGL"] }
%"struct.rx::VertexAttributeGL" = type { i8, %"struct.angle::Format"*, i8*, i32, i32 }
%"class.angle::FixedVector.758" = type { %"struct.std::__1::array.759", i64 }
%"struct.std::__1::array.759" = type { [16 x %"struct.rx::VertexBindingGL"] }
%"struct.rx::VertexBindingGL" = type <{ i32, i32, i64, i32, [4 x i8] }>
%"class.angle::PackedEnumMap.760" = type { %"struct.std::__1::array.761" }
%"struct.std::__1::array.761" = type { [13 x i32] }
%"class.angle::PackedEnumMap.762" = type { %"struct.std::__1::array.763" }
%"struct.std::__1::array.763" = type { [13 x %"class.std::__1::vector.764"] }
%"class.std::__1::vector.764" = type { %"class.std::__1::__vector_base.765" }
%"class.std::__1::__vector_base.765" = type { %"struct.rx::StateManagerGL::IndexedBufferBinding"*, %"struct.rx::StateManagerGL::IndexedBufferBinding"*, %"class.std::__1::__compressed_pair.766" }
%"struct.rx::StateManagerGL::IndexedBufferBinding" = type <{ i64, i64, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.766" = type { %"struct.std::__1::__compressed_pair_elem.767" }
%"struct.std::__1::__compressed_pair_elem.767" = type { %"struct.rx::StateManagerGL::IndexedBufferBinding"* }
%"class.angle::PackedEnumMap.771" = type { %"struct.std::__1::array.772" }
%"struct.std::__1::array.772" = type { [11 x %"struct.std::__1::array.180"] }
%"class.std::__1::vector.773" = type { %"class.std::__1::__vector_base.774" }
%"class.std::__1::__vector_base.774" = type { %"struct.rx::StateManagerGL::ImageUnitBinding"*, %"struct.rx::StateManagerGL::ImageUnitBinding"*, %"class.std::__1::__compressed_pair.775" }
%"struct.rx::StateManagerGL::ImageUnitBinding" = type { i32, i32, i8, i32, i32, i32 }
%"class.std::__1::__compressed_pair.775" = type { %"struct.std::__1::__compressed_pair_elem.776" }
%"struct.std::__1::__compressed_pair_elem.776" = type { %"struct.rx::StateManagerGL::ImageUnitBinding"* }
%"class.rx::TransformFeedbackGL" = type opaque
%"class.angle::PackedEnumMap.780" = type { %"struct.std::__1::array.781" }
%"struct.std::__1::array.781" = type { [7 x %"class.rx::QueryGL"*] }
%"class.rx::QueryGL" = type opaque
%"class.rx::BlitGL" = type opaque
%"class.rx::ClearMultiviewGL" = type opaque
%"class.absl::flat_hash_map.782" = type { %"class.absl::container_internal::raw_hash_map.783" }
%"class.absl::container_internal::raw_hash_map.783" = type { %"class.absl::container_internal::raw_hash_set.784" }
%"class.absl::container_internal::raw_hash_set.784" = type { i8*, %"union.absl::container_internal::map_slot_type.785"*, i64, i64, %"class.absl::container_internal::CompressedTuple.786" }
%"union.absl::container_internal::map_slot_type.785" = type opaque
%"class.absl::container_internal::CompressedTuple.786" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.787" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.787" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::list.797" = type { %"class.std::__1::__list_imp.798" }
%"class.std::__1::__list_imp.798" = type { %"struct.std::__1::__list_node_base.799", %"class.std::__1::__compressed_pair.800" }
%"struct.std::__1::__list_node_base.799" = type { %"struct.std::__1::__list_node_base.799"*, %"struct.std::__1::__list_node_base.799"* }
%"class.std::__1::__compressed_pair.800" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.angle::FeaturesGL" = type { %"struct.angle::FeatureSetBase", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature", %"struct.angle::Feature" }
%"class.rx::EGLSyncImpl" = type opaque
%"class.rx::DeviceImpl" = type opaque
%"class.rx::ShareGroupGL" = type { %"class.rx::ShareGroupImpl" }

$_ZN2rx14EGLImplFactory26createExternalImageSiblingEPKN2gl7ContextEjPvRKN3egl12AttributeMapE = comdat any

$_ZN2rx14EGLImplFactory10createSyncERKN3egl12AttributeMapE = comdat any

$_ZN2rx11DisplayImpl17setBlobCacheFuncsEPFvPKvlS2_lEPFlS2_lPvlE = comdat any

$_ZNK2rx11DisplayImpl26initializeFrontendFeaturesEPN5angle16FrontendFeaturesE = comdat any

$_ZN2rx14ShareGroupImplD2Ev = comdat any

$_ZN2rx12ShareGroupGLD0Ev = comdat any

$_ZN2rx14ShareGroupImpl9onDestroyEPKN3egl7DisplayE = comdat any

$_ZTVN2rx12ShareGroupGLE = comdat any

@.str = private unnamed_addr constant [7 x i8] c", DRM \00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c" (DRM \00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"OpenGL\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"OpenGL \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"ES \00", align 1
@_ZTVN2rx9DisplayGLE = hidden unnamed_addr constant { [42 x i8*], [4 x i8*] } { [42 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rx::DisplayGL"*)* @_ZN2rx9DisplayGLD2Ev to i8*), i8* bitcast (void (%"class.rx::DisplayGL"*)* @_ZN2rx9DisplayGLD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.rx::ImageImpl"* (%"class.rx::DisplayGL"*, %"struct.egl::ImageState"*, %"class.gl::Context"*, i32, %"class.egl::AttributeMap"*)* @_ZN2rx9DisplayGL11createImageERKN3egl10ImageStateEPKN2gl7ContextEjRKNS1_12AttributeMapE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (%"class.rx::StreamProducerImpl"* (%"class.rx::DisplayGL"*, i32, %"class.egl::AttributeMap"*)* @_ZN2rx9DisplayGL30createStreamProducerD3DTextureEN3egl6Stream12ConsumerTypeERKNS1_12AttributeMapE to i8*), i8* bitcast (%"class.rx::ExternalImageSiblingImpl"* (%"class.rx::EGLImplFactory"*, %"class.gl::Context"*, i32, i8*, %"class.egl::AttributeMap"*)* @_ZN2rx14EGLImplFactory26createExternalImageSiblingEPKN2gl7ContextEjPvRKN3egl12AttributeMapE to i8*), i8* bitcast (%"class.rx::EGLSyncImpl"* (%"class.rx::EGLImplFactory"*, %"class.egl::AttributeMap"*)* @_ZN2rx14EGLImplFactory10createSyncERKN3egl12AttributeMapE to i8*), i8* bitcast (%"class.rx::ShareGroupImpl"* (%"class.rx::DisplayGL"*)* @_ZN2rx9DisplayGL16createShareGroupEv to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::DisplayGL"*, %"class.egl::Display"*)* @_ZN2rx9DisplayGL10initializeEPN3egl7DisplayE to i8*), i8* bitcast (void (%"class.rx::DisplayGL"*)* @_ZN2rx9DisplayGL9terminateEv to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::DisplayImpl"*)* @_ZN2rx11DisplayImpl14prepareForCallEv to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::DisplayImpl"*)* @_ZN2rx11DisplayImpl13releaseThreadEv to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::DisplayGL"*, %"class.egl::Display"*, %"class.egl::Surface"*, %"class.egl::Surface"*, %"class.gl::Context"*)* @_ZN2rx9DisplayGL11makeCurrentEPN3egl7DisplayEPNS1_7SurfaceES5_PN2gl7ContextE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::DisplayImpl"*, %"struct.egl::Config"*, i32, i8*, %"class.egl::AttributeMap"*)* @_ZNK2rx11DisplayImpl20validateClientBufferEPKN3egl6ConfigEjPvRKNS1_12AttributeMapE to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::DisplayImpl"*, %"class.gl::Context"*, i32, i8*, %"class.egl::AttributeMap"*)* @_ZNK2rx11DisplayImpl25validateImageClientBufferEPKN2gl7ContextEjPvRKN3egl12AttributeMapE to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::DisplayImpl"*, %"struct.egl::Config"*, i64, %"class.egl::AttributeMap"*)* @_ZNK2rx11DisplayImpl14validatePixmapEPKN3egl6ConfigElRKNS1_12AttributeMapE to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.rx::DisplayGL"*)* @_ZN2rx9DisplayGL22getRendererDescriptionEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.rx::DisplayGL"*)* @_ZN2rx9DisplayGL15getVendorStringEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.rx::DisplayGL"*)* @_ZN2rx9DisplayGL16getVersionStringEv to i8*), i8* bitcast (%"class.rx::DeviceImpl"* (%"class.rx::DisplayImpl"*)* @_ZN2rx11DisplayImpl12createDeviceEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i64 (%"class.rx::DisplayGL"*)* @_ZNK2rx9DisplayGL25getMaxConformantESVersionEv to i8*), i8* bitcast (void (%"class.rx::DisplayImpl"*, void (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)*)* @_ZN2rx11DisplayImpl17setBlobCacheFuncsEPFvPKvlS2_lEPFlS2_lPvlE to i8*), i8* bitcast (void (%"class.rx::DisplayImpl"*, %"struct.angle::FrontendFeatures"*)* @_ZNK2rx11DisplayImpl26initializeFrontendFeaturesEPN5angle16FrontendFeaturesE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::DisplayImpl"*)* @_ZN2rx11DisplayImpl15handleGPUSwitchEv to i8*), i8* bitcast (void (%"class.rx::DisplayGL"*, %"struct.egl::DisplayExtensions"*)* @_ZNK2rx9DisplayGL18generateExtensionsEPN3egl17DisplayExtensionsE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.egl::Error"*, %"class.rx::DisplayGL"*, %"class.gl::Context"*)* @_ZN2rx9DisplayGL22makeCurrentSurfacelessEPN2gl7ContextE to i8*)], [4 x i8*] [i8* inttoptr (i64 -8 to i8*), i8* null, i8* bitcast (void (%"class.rx::DisplayGL"*)* @_ZThn8_N2rx9DisplayGLD1Ev to i8*), i8* bitcast (void (%"class.rx::DisplayGL"*)* @_ZThn8_N2rx9DisplayGLD0Ev to i8*)] }, align 8
@_ZTVN2rx12ShareGroupGLE = linkonce_odr hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.rx::ShareGroupImpl"*)* @_ZN2rx14ShareGroupImplD2Ev to i8*), i8* bitcast (void (%"class.rx::ShareGroupGL"*)* @_ZN2rx12ShareGroupGLD0Ev to i8*), i8* bitcast (void (%"class.rx::ShareGroupImpl"*, %"class.egl::Display"*)* @_ZN2rx14ShareGroupImpl9onDestroyEPKN3egl7DisplayE to i8*)] }, comdat, align 8

@_ZN2rx9DisplayGLD1Ev = hidden unnamed_addr alias void (%"class.rx::DisplayGL"*), void (%"class.rx::DisplayGL"*)* @_ZN2rx9DisplayGLD2Ev

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.rx::ExternalImageSiblingImpl"* @_ZN2rx14EGLImplFactory26createExternalImageSiblingEPKN2gl7ContextEjPvRKN3egl12AttributeMapE(%"class.rx::EGLImplFactory"*, %"class.gl::Context"*, i32, i8*, %"class.egl::AttributeMap"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  ret %"class.rx::ExternalImageSiblingImpl"* null
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx22SanitizeRendererStringENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* noalias nocapture sret, %"class.std::__1::basic_string"*) local_unnamed_addr #2 {
  %3 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  br label %15

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %14 = zext i8 %5 to i64
  br label %15

15:                                               ; preds = %7, %12
  %16 = phi i8* [ %9, %7 ], [ %13, %12 ]
  %17 = phi i64 [ %11, %7 ], [ %14, %12 ]
  %18 = getelementptr inbounds i8, i8* %16, i64 %17
  %19 = ptrtoint i8* %18 to i64
  %20 = ptrtoint i8* %16 to i64
  %21 = icmp slt i64 %17, 6
  br i1 %21, label %47, label %22

22:                                               ; preds = %15, %33
  %23 = phi i64 [ %36, %33 ], [ %17, %15 ]
  %24 = phi i8* [ %34, %33 ], [ %16, %15 ]
  %25 = add nsw i64 %23, -5
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %47, label %27

27:                                               ; preds = %22
  %28 = tail call i8* @memchr(i8* %24, i32 44, i64 %25) #15
  %29 = icmp eq i8* %28, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %27
  %31 = tail call i32 @bcmp(i8* nonnull %28, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i64 6) #15
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds i8, i8* %28, i64 1
  %35 = ptrtoint i8* %34 to i64
  %36 = sub i64 %19, %35
  %37 = icmp slt i64 %36, 6
  br i1 %37, label %47, label %22

38:                                               ; preds = %30
  %39 = ptrtoint i8* %28 to i64
  %40 = icmp eq i8* %28, %18
  %41 = sub i64 %39, %20
  %42 = icmp eq i64 %41, -1
  %43 = or i1 %40, %42
  br i1 %43, label %47, label %44

44:                                               ; preds = %38
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %1, i64 %41, i8 signext 0) #15
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"* %1, i8 signext 41) #15
  %45 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %46 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %46, i64 24, i1 false) #15
  br label %91

47:                                               ; preds = %33, %27, %22, %15, %38
  br i1 %6, label %48, label %53

48:                                               ; preds = %47
  %49 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  br label %56

53:                                               ; preds = %47
  %54 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %55 = zext i8 %5 to i64
  br label %56

56:                                               ; preds = %48, %53
  %57 = phi i8* [ %50, %48 ], [ %54, %53 ]
  %58 = phi i64 [ %52, %48 ], [ %55, %53 ]
  %59 = getelementptr inbounds i8, i8* %57, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = ptrtoint i8* %57 to i64
  %62 = icmp slt i64 %58, 6
  br i1 %62, label %88, label %63

63:                                               ; preds = %56, %74
  %64 = phi i64 [ %77, %74 ], [ %58, %56 ]
  %65 = phi i8* [ %75, %74 ], [ %57, %56 ]
  %66 = add nsw i64 %64, -5
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %88, label %68

68:                                               ; preds = %63
  %69 = tail call i8* @memchr(i8* %65, i32 32, i64 %66) #15
  %70 = icmp eq i8* %69, null
  br i1 %70, label %88, label %71

71:                                               ; preds = %68
  %72 = tail call i32 @bcmp(i8* nonnull %69, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i64 6) #15
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %79, label %74

74:                                               ; preds = %71
  %75 = getelementptr inbounds i8, i8* %69, i64 1
  %76 = ptrtoint i8* %75 to i64
  %77 = sub i64 %60, %76
  %78 = icmp slt i64 %77, 6
  br i1 %78, label %88, label %63

79:                                               ; preds = %71
  %80 = ptrtoint i8* %69 to i64
  %81 = icmp eq i8* %69, %59
  %82 = sub i64 %80, %61
  %83 = icmp eq i64 %82, -1
  %84 = or i1 %81, %83
  br i1 %84, label %88, label %85

85:                                               ; preds = %79
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %1, i64 %82, i8 signext 0) #15
  %86 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %87 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %87, i64 24, i1 false) #15
  br label %91

88:                                               ; preds = %74, %68, %63, %56, %79
  %89 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %90 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 24, i1 false) #15
  br label %91

91:                                               ; preds = %88, %85, %44
  %92 = phi i8* [ %90, %88 ], [ %87, %85 ], [ %46, %44 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 24, i1 false) #15
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(%"class.std::__1::basic_string"*, i8 signext) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx21SanitizeVersionStringENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb(%"class.std::__1::basic_string"* noalias nocapture sret, %"class.std::__1::basic_string"*, i1 zeroext) local_unnamed_addr #2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %15

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  br label %18

15:                                               ; preds = %3
  %16 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %17 = zext i8 %8 to i64
  br label %18

18:                                               ; preds = %10, %15
  %19 = phi i8* [ %12, %10 ], [ %16, %15 ]
  %20 = phi i64 [ %14, %10 ], [ %17, %15 ]
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  %22 = ptrtoint i8* %21 to i64
  %23 = ptrtoint i8* %19 to i64
  %24 = icmp slt i64 %20, 6
  br i1 %24, label %49, label %25

25:                                               ; preds = %18, %36
  %26 = phi i64 [ %39, %36 ], [ %20, %18 ]
  %27 = phi i8* [ %37, %36 ], [ %19, %18 ]
  %28 = add nsw i64 %26, -5
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %49, label %30

30:                                               ; preds = %25
  %31 = tail call i8* @memchr(i8* %27, i32 79, i64 %28) #15
  %32 = icmp eq i8* %31, null
  br i1 %32, label %49, label %33

33:                                               ; preds = %30
  %34 = tail call i32 @bcmp(i8* nonnull %31, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i64 6) #15
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds i8, i8* %31, i64 1
  %38 = ptrtoint i8* %37 to i64
  %39 = sub i64 %22, %38
  %40 = icmp slt i64 %39, 6
  br i1 %40, label %49, label %25

41:                                               ; preds = %33
  %42 = ptrtoint i8* %31 to i64
  %43 = icmp eq i8* %31, %21
  %44 = sub i64 %42, %23
  %45 = icmp eq i64 %44, -1
  %46 = or i1 %43, %45
  br i1 %46, label %49, label %47

47:                                               ; preds = %41
  %48 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  br label %117

49:                                               ; preds = %36, %30, %25, %18, %41
  %50 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %50) #15
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %53 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %52, i64 0, i32 1, i32 0
  %54 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %55 = bitcast i64* %54 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %55, i8 -86, i64 16, i1 false)
  store i8 7, i8* %53, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %50, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i64 7, i1 false) #15
  %56 = getelementptr inbounds i8, i8* %50, i64 7
  store i8 0, i8* %56, align 1
  br i1 %2, label %57, label %63

57:                                               ; preds = %49
  %58 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %59 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0)) #15
  %60 = load i8, i8* %53, align 1, !noalias !2
  %61 = load i64, i64* %58, align 8, !noalias !2
  %62 = load i8, i8* %7, align 1, !noalias !2
  br label %63

63:                                               ; preds = %57, %49
  %64 = phi i8 [ %62, %57 ], [ %8, %49 ]
  %65 = phi i64 [ %61, %57 ], [ -6148914691236517206, %49 ]
  %66 = phi i8 [ %60, %57 ], [ 7, %49 ]
  %67 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %67) #15
  %68 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %67, i8 0, i64 24, i1 false) #15, !alias.scope !2
  %71 = icmp slt i8 %66, 0
  %72 = zext i8 %66 to i64
  %73 = select i1 %71, i64 %65, i64 %72
  %74 = icmp slt i8 %64, 0
  %75 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %76 = load i64, i64* %75, align 8, !noalias !2
  %77 = zext i8 %64 to i64
  %78 = select i1 %74, i64 %76, i64 %77
  %79 = load i8*, i8** %51, align 8, !noalias !2
  %80 = select i1 %71, i8* %79, i8* %50
  %81 = add i64 %78, %73
  %82 = icmp ugt i64 %81, -17
  br i1 %82, label %83, label %85

83:                                               ; preds = %63
  %84 = bitcast %"class.std::__1::basic_string"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %84) #16
  unreachable

85:                                               ; preds = %63
  %86 = icmp ult i64 %81, 23
  br i1 %86, label %87, label %91

87:                                               ; preds = %85
  %88 = trunc i64 %73 to i8
  %89 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %90 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %89, i64 0, i32 1, i32 0
  store i8 %88, i8* %90, align 1, !alias.scope !2
  br label %96

91:                                               ; preds = %85
  %92 = add nuw i64 %81, 16
  %93 = and i64 %92, -16
  %94 = call i8* @_Znwm(i64 %93) #17
  store i8* %94, i8** %68, align 8, !alias.scope !2
  %95 = or i64 %93, -9223372036854775808
  store i64 %95, i64* %70, align 8, !alias.scope !2
  store i64 %73, i64* %69, align 8, !alias.scope !2
  br label %96

96:                                               ; preds = %91, %87
  %97 = phi i8* [ %67, %87 ], [ %94, %91 ]
  %98 = icmp eq i64 %73, 0
  br i1 %98, label %100, label %99

99:                                               ; preds = %96
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %97, i8* align 1 %80, i64 %73, i1 false) #15
  br label %100

100:                                              ; preds = %96, %99
  %101 = getelementptr inbounds i8, i8* %97, i64 %73
  store i8 0, i8* %101, align 1
  %102 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = load i8*, i8** %102, align 8, !noalias !2
  %104 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %105 = select i1 %74, i8* %103, i8* %104
  %106 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %5, i8* %105, i64 %78) #15
  %107 = load i8, i8* %7, align 1
  %108 = icmp slt i8 %107, 0
  br i1 %108, label %109, label %111

109:                                              ; preds = %100
  %110 = load i8*, i8** %102, align 8
  call void @_ZdlPv(i8* %110) #17
  br label %111

111:                                              ; preds = %109, %100
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* nonnull align 8 %67, i64 24, i1 false) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %67) #15
  %112 = load i8, i8* %53, align 1
  %113 = icmp slt i8 %112, 0
  br i1 %113, label %114, label %116

114:                                              ; preds = %111
  %115 = load i8*, i8** %51, align 8
  call void @_ZdlPv(i8* %115) #17
  br label %116

116:                                              ; preds = %111, %114
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %50) #15
  br label %117

117:                                              ; preds = %47, %116
  %118 = phi i8* [ %48, %47 ], [ %104, %116 ]
  %119 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %118, i64 24, i1 false) #15
  call void @llvm.memset.p0i8.i64(i8* align 8 %118, i8 0, i64 24, i1 false) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9DisplayGLC2ERKN3egl12DisplayStateE(%"class.rx::DisplayGL"*, %"struct.egl::DisplayState"* dereferenceable(96)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.rx::DisplayGL", %"class.rx::DisplayGL"* %0, i64 0, i32 0
  tail call void @_ZN2rx11DisplayImplC2ERKN3egl12DisplayStateE(%"class.rx::DisplayImpl"* %3, %"struct.egl::DisplayState"* dereferenceable(96) %1) #15
  %4 = bitcast %"class.rx::DisplayGL"* %0 to <2 x i32 (...)**>*
  store <2 x i32 (...)**> <i32 (...)** bitcast (i8** getelementptr inbounds ({ [42 x i8*], [4 x i8*] }, { [42 x i8*], [4 x i8*] }* @_ZTVN2rx9DisplayGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)** bitcast (i8** getelementptr inbounds ({ [42 x i8*], [4 x i8*] }, { [42 x i8*], [4 x i8*] }* @_ZTVN2rx9DisplayGLE, i64 0, inrange i32 1, i64 2) to i32 (...)**)>, <2 x i32 (...)**>* %4, align 8
  ret void
}

declare void @_ZN2rx11DisplayImplC2ERKN3egl12DisplayStateE(%"class.rx::DisplayImpl"*, %"struct.egl::DisplayState"* dereferenceable(96)) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN2rx11DisplayImplD2Ev(%"class.rx::DisplayImpl"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9DisplayGLD2Ev(%"class.rx::DisplayGL"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.rx::DisplayGL", %"class.rx::DisplayGL"* %0, i64 0, i32 0
  tail call void @_ZN2rx11DisplayImplD2Ev(%"class.rx::DisplayImpl"* %2) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZThn8_N2rx9DisplayGLD1Ev(%"class.rx::DisplayGL"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.rx::DisplayGL", %"class.rx::DisplayGL"* %0, i64 -1, i32 0, i32 7
  %3 = bitcast %"class.egl::BlobCache"** %2 to %"class.rx::DisplayImpl"*
  tail call void @_ZN2rx11DisplayImplD2Ev(%"class.rx::DisplayImpl"* %3) #15
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN2rx9DisplayGLD0Ev(%"class.rx::DisplayGL"* nocapture readnone) unnamed_addr #6 align 2 {
  tail call void @llvm.trap() #16
  unreachable
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZThn8_N2rx9DisplayGLD0Ev(%"class.rx::DisplayGL"* nocapture readnone) unnamed_addr #6 align 2 {
  tail call void @llvm.trap() #16
  unreachable
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2rx9DisplayGL10initializeEPN3egl7DisplayE(%"class.egl::Error"* noalias nocapture sret, %"class.rx::DisplayGL"* nocapture readnone, %"class.egl::Display"* nocapture readnone) unnamed_addr #7 align 2 {
  %4 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 0
  store i32 12288, i32* %4, align 8, !alias.scope !5
  %5 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 1
  store i32 0, i32* %5, align 4, !alias.scope !5
  %6 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 2
  %7 = bitcast %"class.std::__1::unique_ptr.744"* %6 to i64*
  store i64 0, i64* %7, align 8, !alias.scope !5
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2rx9DisplayGL9terminateEv(%"class.rx::DisplayGL"* nocapture) unnamed_addr #8 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.rx::ImageImpl"* @_ZN2rx9DisplayGL11createImageERKN3egl10ImageStateEPKN2gl7ContextEjRKNS1_12AttributeMapE(%"class.rx::DisplayGL"* nocapture readnone, %"struct.egl::ImageState"* nocapture readnone dereferenceable(104), %"class.gl::Context"* nocapture readnone, i32, %"class.egl::AttributeMap"* nocapture readnone dereferenceable(24)) unnamed_addr #8 align 2 {
  ret %"class.rx::ImageImpl"* null
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias %"class.rx::StreamProducerImpl"* @_ZN2rx9DisplayGL30createStreamProducerD3DTextureEN3egl6Stream12ConsumerTypeERKNS1_12AttributeMapE(%"class.rx::DisplayGL"* nocapture readnone, i32, %"class.egl::AttributeMap"* nocapture readnone dereferenceable(24)) unnamed_addr #8 align 2 {
  ret %"class.rx::StreamProducerImpl"* null
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull %"class.rx::ShareGroupImpl"* @_ZN2rx9DisplayGL16createShareGroupEv(%"class.rx::DisplayGL"* nocapture readnone) unnamed_addr #9 align 2 {
  %2 = tail call i8* @_Znwm(i64 8) #17
  %3 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2rx12ShareGroupGLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = bitcast i8* %2 to %"class.rx::ShareGroupImpl"*
  ret %"class.rx::ShareGroupImpl"* %4
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9DisplayGL11makeCurrentEPN3egl7DisplayEPNS1_7SurfaceES5_PN2gl7ContextE(%"class.egl::Error"* noalias sret, %"class.rx::DisplayGL"*, %"class.egl::Display"*, %"class.egl::Surface"* readnone, %"class.egl::Surface"* nocapture readnone, %"class.gl::Context"*) unnamed_addr #2 align 2 {
  %7 = getelementptr inbounds %"class.egl::Display", %"class.egl::Display"* %2, i64 0, i32 21, i32 0
  tail call void @_ZN2gl26InitializeDebugAnnotationsEPNS_14DebugAnnotatorE(%"class.gl::DebugAnnotator"* %7) #15
  %8 = icmp eq %"class.gl::Context"* %5, null
  br i1 %8, label %38, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.gl::Context", %"class.gl::Context"* %5, i64 0, i32 11, i32 0, i32 0, i32 0
  %11 = bitcast %"class.rx::ContextImpl"** %10 to %"class.rx::ContextGL"**
  %12 = load %"class.rx::ContextGL"*, %"class.rx::ContextGL"** %11, align 8
  %13 = tail call %"class.rx::StateManagerGL"* @_ZN2rx9ContextGL15getStateManagerEv(%"class.rx::ContextGL"* %12) #15
  tail call void @_ZN2rx14StateManagerGL22pauseTransformFeedbackEv(%"class.rx::StateManagerGL"* %13) #15
  %14 = icmp eq %"class.egl::Surface"* %3, null
  br i1 %14, label %15, label %38

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 0
  %17 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %18 = bitcast %"class.rx::DisplayGL"* %1 to void (%"class.egl::Error"*, %"class.rx::DisplayGL"*, %"class.gl::Context"*)***
  %19 = bitcast %"class.egl::Error"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 -86, i64 16, i1 false)
  %20 = load void (%"class.egl::Error"*, %"class.rx::DisplayGL"*, %"class.gl::Context"*)**, void (%"class.egl::Error"*, %"class.rx::DisplayGL"*, %"class.gl::Context"*)*** %18, align 8
  %21 = getelementptr inbounds void (%"class.egl::Error"*, %"class.rx::DisplayGL"*, %"class.gl::Context"*)*, void (%"class.egl::Error"*, %"class.rx::DisplayGL"*, %"class.gl::Context"*)** %20, i64 39
  %22 = load void (%"class.egl::Error"*, %"class.rx::DisplayGL"*, %"class.gl::Context"*)*, void (%"class.egl::Error"*, %"class.rx::DisplayGL"*, %"class.gl::Context"*)** %21, align 8
  tail call void %22(%"class.egl::Error"* sret %0, %"class.rx::DisplayGL"* %1, %"class.gl::Context"* nonnull %5) #15
  %23 = load i32, i32* %16, align 8
  %24 = icmp eq i32 %23, 12288
  br i1 %24, label %25, label %43

25:                                               ; preds = %15
  %26 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %17, align 8
  store %"class.std::__1::basic_string"* null, %"class.std::__1::basic_string"** %17, align 8
  %27 = icmp eq %"class.std::__1::basic_string"* %26, null
  br i1 %27, label %38, label %28

28:                                               ; preds = %25
  %29 = bitcast %"class.std::__1::basic_string"* %26 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  tail call void @_ZdlPv(i8* %35) #17
  br label %36

36:                                               ; preds = %33, %28
  %37 = bitcast %"class.std::__1::basic_string"* %26 to i8*
  tail call void @_ZdlPv(i8* %37) #17
  br label %38

38:                                               ; preds = %9, %36, %25, %6
  %39 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 0
  store i32 12288, i32* %39, align 8, !alias.scope !10
  %40 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 1
  store i32 0, i32* %40, align 4, !alias.scope !10
  %41 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 2
  %42 = bitcast %"class.std::__1::unique_ptr.744"* %41 to i64*
  store i64 0, i64* %42, align 8, !alias.scope !10
  br label %43

43:                                               ; preds = %38, %15
  ret void
}

declare %"class.rx::StateManagerGL"* @_ZN2rx9ContextGL15getStateManagerEv(%"class.rx::ContextGL"*) local_unnamed_addr #4

declare void @_ZN2rx14StateManagerGL22pauseTransformFeedbackEv(%"class.rx::StateManagerGL"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK2rx9DisplayGL25getMaxConformantESVersionEv(%"class.rx::DisplayGL"*) unnamed_addr #2 align 2 {
  %2 = alloca i64, align 8
  %3 = alloca %"struct.gl::Version", align 4
  %4 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4)
  %5 = getelementptr inbounds %"class.rx::DisplayGL", %"class.rx::DisplayGL"* %0, i64 0, i32 0
  %6 = bitcast %"class.rx::DisplayGL"* %0 to i64 (%"class.rx::DisplayImpl"*)***
  %7 = load i64 (%"class.rx::DisplayImpl"*)**, i64 (%"class.rx::DisplayImpl"*)*** %6, align 8
  %8 = getelementptr inbounds i64 (%"class.rx::DisplayImpl"*)*, i64 (%"class.rx::DisplayImpl"*)** %7, i64 30
  %9 = load i64 (%"class.rx::DisplayImpl"*)*, i64 (%"class.rx::DisplayImpl"*)** %8, align 8
  %10 = tail call i64 %9(%"class.rx::DisplayImpl"* %5) #15
  store i64 %10, i64* %2, align 8
  %11 = bitcast %"struct.gl::Version"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = getelementptr inbounds %"struct.gl::Version", %"struct.gl::Version"* %3, i64 0, i32 0
  store i32 3, i32* %12, align 4
  %13 = getelementptr inbounds %"struct.gl::Version", %"struct.gl::Version"* %3, i64 0, i32 1
  store i32 0, i32* %13, align 4
  %14 = trunc i64 %10 to i32
  %15 = icmp ugt i32 %14, 3
  br i1 %15, label %21, label %16

16:                                               ; preds = %1
  %17 = bitcast i64* %2 to %"struct.gl::Version"*
  %18 = icmp ne i32 %14, 3
  %19 = icmp ult i64 %10, 4294967296
  %20 = or i1 %18, %19
  br i1 %20, label %22, label %21

21:                                               ; preds = %16, %1
  br label %22

22:                                               ; preds = %16, %21
  %23 = phi %"struct.gl::Version"* [ %3, %21 ], [ %17, %16 ]
  %24 = bitcast %"struct.gl::Version"* %23 to i64*
  %25 = load i64, i64* %24, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4)
  ret i64 %25
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZNK2rx9DisplayGL18generateExtensionsEPN3egl17DisplayExtensionsE(%"class.rx::DisplayGL"* nocapture readnone, %"struct.egl::DisplayExtensions"* nocapture) unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"struct.egl::DisplayExtensions", %"struct.egl::DisplayExtensions"* %1, i64 0, i32 39
  store i8 1, i8* %3, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2rx9DisplayGL22makeCurrentSurfacelessEPN2gl7ContextE(%"class.egl::Error"* noalias nocapture sret, %"class.rx::DisplayGL"* nocapture readnone, %"class.gl::Context"* nocapture readnone) unnamed_addr #7 align 2 {
  %4 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 0
  store i32 12288, i32* %4, align 8, !alias.scope !19
  %5 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 1
  store i32 0, i32* %5, align 4, !alias.scope !19
  %6 = getelementptr inbounds %"class.egl::Error", %"class.egl::Error"* %0, i64 0, i32 2
  %7 = bitcast %"class.std::__1::unique_ptr.744"* %6 to i64*
  store i64 0, i64* %7, align 8, !alias.scope !19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9DisplayGL22getRendererDescriptionEv(%"class.std::__1::basic_string"* noalias nocapture sret, %"class.rx::DisplayGL"*) unnamed_addr #2 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #15
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %"class.rx::DisplayGL"* %1 to %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)***
  %9 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 24, i1 false)
  %10 = load %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)**, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*** %8, align 8
  %11 = getelementptr inbounds %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)** %10, i64 38
  %12 = load %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)** %11, align 8
  %13 = tail call %"class.rx::RendererGL"* %12(%"class.rx::DisplayGL"* %1) #15
  %14 = getelementptr inbounds %"class.rx::RendererGL", %"class.rx::RendererGL"* %13, i64 0, i32 2, i32 0, i32 0, i32 0
  %15 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %14, align 8
  call void @_ZN2rx17GetRendererStringEPKNS_11FunctionsGLE(%"class.std::__1::basic_string"* nonnull sret %3, %"class.rx::FunctionsGL"* %15) #15
  %16 = load %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)**, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*** %8, align 8
  %17 = getelementptr inbounds %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)** %16, i64 38
  %18 = load %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)** %17, align 8
  %19 = call %"class.rx::RendererGL"* %18(%"class.rx::DisplayGL"* %1) #15
  %20 = getelementptr inbounds %"class.rx::RendererGL", %"class.rx::RendererGL"* %19, i64 0, i32 20, i32 71, i32 4
  %21 = load i8, i8* %20, align 8, !range !24
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %41, label %23

23:                                               ; preds = %2
  %24 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %24, i64 0, i32 1, i32 0
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %23
  %29 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %29, i8* nonnull align 8 %5, i64 24, i1 false) #15
  br label %33

30:                                               ; preds = %23
  %31 = load i8*, i8** %6, align 8
  %32 = load i64, i64* %7, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %31, i64 %32) #15
  br label %33

33:                                               ; preds = %28, %30
  call void @_ZN2rx22SanitizeRendererStringENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* sret %0, %"class.std::__1::basic_string"* nonnull %4)
  %34 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %34, i64 0, i32 1, i32 0
  %36 = load i8, i8* %35, align 1
  %37 = icmp slt i8 %36, 0
  br i1 %37, label %38, label %44

38:                                               ; preds = %33
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  call void @_ZdlPv(i8* %40) #17
  br label %44

41:                                               ; preds = %2
  %42 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* nonnull align 8 %5, i64 24, i1 false) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #15
  %43 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %44

44:                                               ; preds = %38, %33, %41
  %45 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %24, %38 ], [ %24, %33 ], [ %43, %41 ]
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  %47 = load i8, i8* %46, align 1
  %48 = icmp slt i8 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %44
  %50 = load i8*, i8** %6, align 8
  call void @_ZdlPv(i8* %50) #17
  br label %51

51:                                               ; preds = %44, %49
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #15
  ret void
}

declare void @_ZN2rx17GetRendererStringEPKNS_11FunctionsGLE(%"class.std::__1::basic_string"* sret, %"class.rx::FunctionsGL"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9DisplayGL15getVendorStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.rx::DisplayGL"*) unnamed_addr #2 align 2 {
  %3 = bitcast %"class.rx::DisplayGL"* %1 to %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)***
  %4 = load %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)**, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)** %4, i64 38
  %6 = load %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)** %5, align 8
  %7 = tail call %"class.rx::RendererGL"* %6(%"class.rx::DisplayGL"* %1) #15
  %8 = getelementptr inbounds %"class.rx::RendererGL", %"class.rx::RendererGL"* %7, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %8, align 8
  tail call void @_ZN2rx15GetVendorStringEPKNS_11FunctionsGLE(%"class.std::__1::basic_string"* sret %0, %"class.rx::FunctionsGL"* %9) #15
  ret void
}

declare void @_ZN2rx15GetVendorStringEPKNS_11FunctionsGLE(%"class.std::__1::basic_string"* sret, %"class.rx::FunctionsGL"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2rx9DisplayGL16getVersionStringEv(%"class.std::__1::basic_string"* noalias nocapture sret, %"class.rx::DisplayGL"*) unnamed_addr #2 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #15
  %6 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.rx::DisplayGL"* %1 to %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)***
  %8 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  %9 = load %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)**, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*** %7, align 8
  %10 = getelementptr inbounds %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)** %9, i64 38
  %11 = load %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)** %10, align 8
  %12 = tail call %"class.rx::RendererGL"* %11(%"class.rx::DisplayGL"* %1) #15
  %13 = getelementptr inbounds %"class.rx::RendererGL", %"class.rx::RendererGL"* %12, i64 0, i32 2, i32 0, i32 0, i32 0
  %14 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %13, align 8
  call void @_ZN2rx16GetVersionStringEPKNS_11FunctionsGLE(%"class.std::__1::basic_string"* nonnull sret %3, %"class.rx::FunctionsGL"* %14) #15
  %15 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %2
  %20 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* nonnull align 8 %5, i64 24, i1 false) #15
  br label %25

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %23 = load i8*, i8** %6, align 8
  %24 = load i64, i64* %22, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %23, i64 %24) #15
  br label %25

25:                                               ; preds = %19, %21
  %26 = load %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)**, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*** %7, align 8
  %27 = getelementptr inbounds %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)** %26, i64 38
  %28 = load %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)*, %"class.rx::RendererGL"* (%"class.rx::DisplayGL"*)** %27, align 8
  %29 = call %"class.rx::RendererGL"* %28(%"class.rx::DisplayGL"* %1) #15
  %30 = getelementptr inbounds %"class.rx::RendererGL", %"class.rx::RendererGL"* %29, i64 0, i32 2, i32 0, i32 0, i32 0
  %31 = load %"class.rx::FunctionsGL"*, %"class.rx::FunctionsGL"** %30, align 8
  %32 = getelementptr inbounds %"class.rx::FunctionsGL", %"class.rx::FunctionsGL"* %31, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, 1
  call void @_ZN2rx21SanitizeVersionStringENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb(%"class.std::__1::basic_string"* sret %0, %"class.std::__1::basic_string"* nonnull %4, i1 zeroext %34)
  %35 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  %37 = load i8, i8* %36, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %25
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  call void @_ZdlPv(i8* %41) #17
  br label %42

42:                                               ; preds = %25, %39
  %43 = load i8, i8* %16, align 1
  %44 = icmp slt i8 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %42
  %46 = load i8*, i8** %6, align 8
  call void @_ZdlPv(i8* %46) #17
  br label %47

47:                                               ; preds = %42, %45
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #15
  ret void
}

declare void @_ZN2rx16GetVersionStringEPKNS_11FunctionsGLE(%"class.std::__1::basic_string"* sret, %"class.rx::FunctionsGL"*) local_unnamed_addr #4

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.rx::EGLSyncImpl"* @_ZN2rx14EGLImplFactory10createSyncERKN3egl12AttributeMapE(%"class.rx::EGLImplFactory"*, %"class.egl::AttributeMap"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  ret %"class.rx::EGLSyncImpl"* null
}

declare void @_ZN2rx11DisplayImpl14prepareForCallEv(%"class.egl::Error"* sret, %"class.rx::DisplayImpl"*) unnamed_addr #4

declare void @_ZN2rx11DisplayImpl13releaseThreadEv(%"class.egl::Error"* sret, %"class.rx::DisplayImpl"*) unnamed_addr #4

declare void @_ZNK2rx11DisplayImpl20validateClientBufferEPKN3egl6ConfigEjPvRKNS1_12AttributeMapE(%"class.egl::Error"* sret, %"class.rx::DisplayImpl"*, %"struct.egl::Config"*, i32, i8*, %"class.egl::AttributeMap"* dereferenceable(24)) unnamed_addr #4

declare void @_ZNK2rx11DisplayImpl25validateImageClientBufferEPKN2gl7ContextEjPvRKN3egl12AttributeMapE(%"class.egl::Error"* sret, %"class.rx::DisplayImpl"*, %"class.gl::Context"*, i32, i8*, %"class.egl::AttributeMap"* dereferenceable(24)) unnamed_addr #4

declare void @_ZNK2rx11DisplayImpl14validatePixmapEPKN3egl6ConfigElRKNS1_12AttributeMapE(%"class.egl::Error"* sret, %"class.rx::DisplayImpl"*, %"struct.egl::Config"*, i64, %"class.egl::AttributeMap"* dereferenceable(24)) unnamed_addr #4

declare %"class.rx::DeviceImpl"* @_ZN2rx11DisplayImpl12createDeviceEv(%"class.rx::DisplayImpl"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx11DisplayImpl17setBlobCacheFuncsEPFvPKvlS2_lEPFlS2_lPvlE(%"class.rx::DisplayImpl"*, void (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK2rx11DisplayImpl26initializeFrontendFeaturesEPN5angle16FrontendFeaturesE(%"class.rx::DisplayImpl"*, %"struct.angle::FrontendFeatures"*) unnamed_addr #2 comdat align 2 {
  ret void
}

declare void @_ZN2rx11DisplayImpl15handleGPUSwitchEv(%"class.egl::Error"* sret, %"class.rx::DisplayImpl"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx14ShareGroupImplD2Ev(%"class.rx::ShareGroupImpl"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx12ShareGroupGLD0Ev(%"class.rx::ShareGroupGL"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.rx::ShareGroupGL"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2rx14ShareGroupImpl9onDestroyEPKN3egl7DisplayE(%"class.rx::ShareGroupImpl"*, %"class.egl::Display"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

declare void @_ZN2gl26InitializeDebugAnnotationsEPNS_14DebugAnnotatorE(%"class.gl::DebugAnnotator"*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #12

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #13

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #4

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #4

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #14

attributes #0 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { cold noreturn nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nofree nounwind readonly }
attributes #15 = { nounwind }
attributes #16 = { noreturn nounwind }
attributes #17 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_"}
!5 = !{!6, !8}
!6 = distinct !{!6, !7, !"_ZN3egl5Error7NoErrorEv: argument 0"}
!7 = distinct !{!7, !"_ZN3egl5Error7NoErrorEv"}
!8 = distinct !{!8, !9, !"_ZN3egl7NoErrorEv: argument 0"}
!9 = distinct !{!9, !"_ZN3egl7NoErrorEv"}
!10 = !{!11, !13, !15, !17}
!11 = distinct !{!11, !12, !"_ZN3egl5Error7NoErrorEv: argument 0"}
!12 = distinct !{!12, !"_ZN3egl5Error7NoErrorEv"}
!13 = distinct !{!13, !14, !"_ZN3egl7NoErrorEv: argument 0"}
!14 = distinct !{!14, !"_ZN3egl7NoErrorEv"}
!15 = distinct !{!15, !16, !"_ZN3egl5Error7NoErrorEv: argument 0"}
!16 = distinct !{!16, !"_ZN3egl5Error7NoErrorEv"}
!17 = distinct !{!17, !18, !"_ZN3egl7NoErrorEv: argument 0"}
!18 = distinct !{!18, !"_ZN3egl7NoErrorEv"}
!19 = !{!20, !22}
!20 = distinct !{!20, !21, !"_ZN3egl5Error7NoErrorEv: argument 0"}
!21 = distinct !{!21, !"_ZN3egl5Error7NoErrorEv"}
!22 = distinct !{!22, !23, !"_ZN3egl7NoErrorEv: argument 0"}
!23 = distinct !{!23, !"_ZN3egl7NoErrorEv"}
!24 = !{i8 0, i8 2}
