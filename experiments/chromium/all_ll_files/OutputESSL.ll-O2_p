; ModuleID = '../../third_party/angle/src/compiler/translator/OutputESSL.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/OutputESSL.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TOutputESSL" = type <{ %"class.sh::TOutputGLSLBase", i8, [7 x i8] }>
%"class.sh::TOutputGLSLBase" = type { %"class.sh::TIntermTraverser", %"class.sh::TInfoSinkBase"*, i8, i32, i64 (i8*, i64)*, %"class.std::__1::map"*, i32, i32, i32, i64 }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.6", %"class.std::__1::vector.13", %"class.sh::TVector", %"class.std::__1::vector.20" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.8" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.sh::TVector" = type { %"class.std::__1::vector.0" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.22" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::TInfoSinkBase" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.32" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { i32*, i32*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { i32* }
%"class.std::__1::map" = type opaque
%"class.sh::TSymbolTable" = type opaque
%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TVariable" = type opaque
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.39"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.39" = type opaque
%"class.sh::TInterfaceBlock" = type opaque
%"class.sh::TStructure" = type opaque
%"class.sh::TConstantUnion" = type { %union.anon.40, i32 }
%union.anon.40 = type { i32 }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.41", i8, [7 x i8] }>
%"class.sh::TVector.41" = type { %"class.std::__1::vector.42" }
%"class.std::__1::vector.42" = type { %"class.std::__1::__vector_base.43" }
%"class.std::__1::__vector_base.43" = type { i32*, i32*, %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.sh::TSymbol" = type opaque

$_ZN2sh11TOutputESSLD0Ev = comdat any

@_ZTVN2sh11TOutputESSLE = hidden unnamed_addr constant { [32 x i8*] } { [32 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::TOutputESSL"*)* @_ZN2sh11TOutputESSLD0Ev to i8*), i8* bitcast (void (%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh15TOutputGLSLBase11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh15TOutputGLSLBase18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh15TOutputGLSLBase12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh15TOutputGLSLBase11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh15TOutputGLSLBase10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh15TOutputGLSLBase12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh15TOutputGLSLBase11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh15TOutputGLSLBase11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh15TOutputGLSLBase9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh15TOutputGLSLBase22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh15TOutputGLSLBase23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh15TOutputGLSLBase14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh15TOutputGLSLBase10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh15TOutputGLSLBase31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh15TOutputGLSLBase16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh15TOutputGLSLBase9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh15TOutputGLSLBase11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh15TOutputGLSLBase26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*), i8* bitcast (void (%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermTyped"*)* @_ZN2sh15TOutputGLSLBase20writeLayoutQualifierEPNS_12TIntermTypedE to i8*), i8* bitcast (void (%"class.sh::TOutputGLSLBase"*, %"class.sh::TType"*, %"class.sh::TSymbol"*, i1)* @_ZN2sh15TOutputGLSLBase17writeVariableTypeERKNS_5TTypeEPKNS_7TSymbolEb to i8*), i8* bitcast (i1 (%"class.sh::TOutputESSL"*, i32)* @_ZN2sh11TOutputESSL22writeVariablePrecisionENS_10TPrecisionE to i8*), i8* bitcast ({ i8*, i64 } (%"class.sh::TOutputESSL"*, %"class.sh::ImmutableString"*, i64*)* @_ZN2sh11TOutputESSL24translateTextureFunctionERKNS_15ImmutableStringERKm to i8*)] }, align 8
@.str = private unnamed_addr constant [18 x i8] c"textureVideoWEBGL\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"texture2D\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"highp\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"mediump\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"lowp\00", align 1
@switch.table._ZN2sh11TOutputESSL22writeVariablePrecisionENS_10TPrecisionE = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0)], align 8

@_ZN2sh11TOutputESSLC1ERNS_13TInfoSinkBaseE28ShArrayIndexClampingStrategyPFmPKcmERNSt3__13mapINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESF_NS8_4lessISF_EENSD_INS8_4pairIKSF_SF_EEEEEEPNS_12TSymbolTableEjibm = hidden unnamed_addr alias void (%"class.sh::TOutputESSL"*, %"class.sh::TInfoSinkBase"*, i32, i64 (i8*, i64)*, %"class.std::__1::map"*, %"class.sh::TSymbolTable"*, i32, i32, i1, i64), void (%"class.sh::TOutputESSL"*, %"class.sh::TInfoSinkBase"*, i32, i64 (i8*, i64)*, %"class.std::__1::map"*, %"class.sh::TSymbolTable"*, i32, i32, i1, i64)* @_ZN2sh11TOutputESSLC2ERNS_13TInfoSinkBaseE28ShArrayIndexClampingStrategyPFmPKcmERNSt3__13mapINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESF_NS8_4lessISF_EENSD_INS8_4pairIKSF_SF_EEEEEEPNS_12TSymbolTableEjibm

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2sh11TOutputESSLC2ERNS_13TInfoSinkBaseE28ShArrayIndexClampingStrategyPFmPKcmERNSt3__13mapINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESF_NS8_4lessISF_EENSD_INS8_4pairIKSF_SF_EEEEEEPNS_12TSymbolTableEjibm(%"class.sh::TOutputESSL"*, %"class.sh::TInfoSinkBase"* dereferenceable(48), i32, i64 (i8*, i64)*, %"class.std::__1::map"*, %"class.sh::TSymbolTable"*, i32, i32, i1 zeroext, i64) unnamed_addr #0 align 2 {
  %11 = zext i1 %8 to i8
  %12 = getelementptr inbounds %"class.sh::TOutputESSL", %"class.sh::TOutputESSL"* %0, i64 0, i32 0
  tail call void @_ZN2sh15TOutputGLSLBaseC2ERNS_13TInfoSinkBaseE28ShArrayIndexClampingStrategyPFmPKcmERNSt3__13mapINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESF_NS8_4lessISF_EENSD_INS8_4pairIKSF_SF_EEEEEEPNS_12TSymbolTableEji14ShShaderOutputm(%"class.sh::TOutputGLSLBase"* %12, %"class.sh::TInfoSinkBase"* dereferenceable(48) %1, i32 %2, i64 (i8*, i64)* %3, %"class.std::__1::map"* %4, %"class.sh::TSymbolTable"* %5, i32 %6, i32 %7, i32 35653, i64 %9) #5
  %13 = getelementptr inbounds %"class.sh::TOutputESSL", %"class.sh::TOutputESSL"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [32 x i8*] }, { [32 x i8*] }* @_ZTVN2sh11TOutputESSLE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %14 = getelementptr inbounds %"class.sh::TOutputESSL", %"class.sh::TOutputESSL"* %0, i64 0, i32 1
  store i8 %11, i8* %14, align 8
  ret void
}

declare void @_ZN2sh15TOutputGLSLBaseC2ERNS_13TInfoSinkBaseE28ShArrayIndexClampingStrategyPFmPKcmERNSt3__13mapINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEESF_NS8_4lessISF_EENSD_INS8_4pairIKSF_SF_EEEEEEPNS_12TSymbolTableEji14ShShaderOutputm(%"class.sh::TOutputGLSLBase"*, %"class.sh::TInfoSinkBase"* dereferenceable(48), i32, i64 (i8*, i64)*, %"class.std::__1::map"*, %"class.sh::TSymbolTable"*, i32, i32, i32, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh11TOutputESSL22writeVariablePrecisionENS_10TPrecisionE(%"class.sh::TOutputESSL"* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %24, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.sh::TOutputESSL", %"class.sh::TOutputESSL"* %0, i64 0, i32 0, i32 1
  %6 = load %"class.sh::TInfoSinkBase"*, %"class.sh::TInfoSinkBase"** %5, align 8
  %7 = getelementptr inbounds %"class.sh::TOutputESSL", %"class.sh::TOutputESSL"* %0, i64 0, i32 1
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %6, i64 0, i32 0
  %12 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0)) #5
  br label %24

13:                                               ; preds = %4
  %14 = add i32 %1, -1
  %15 = icmp ult i32 %14, 3
  br i1 %15, label %16, label %20

16:                                               ; preds = %13
  %17 = sext i32 %14 to i64
  %18 = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table._ZN2sh11TOutputESSL22writeVariablePrecisionENS_10TPrecisionE, i64 0, i64 %17
  %19 = load i8*, i8** %18, align 8
  br label %20

20:                                               ; preds = %13, %16
  %21 = phi i8* [ %19, %16 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0), %13 ]
  %22 = getelementptr inbounds %"class.sh::TInfoSinkBase", %"class.sh::TInfoSinkBase"* %6, i64 0, i32 0
  %23 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %22, i8* nonnull %21) #5
  br label %24

24:                                               ; preds = %10, %20, %2
  %25 = phi i1 [ false, %2 ], [ true, %20 ], [ true, %10 ]
  ret i1 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZN2sh11TOutputESSL24translateTextureFunctionERKNS_15ImmutableStringERKm(%"class.sh::TOutputESSL"* nocapture readnone, %"class.sh::ImmutableString"* nocapture readonly dereferenceable(16), i64* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %1, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  %7 = select i1 %6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8* %5
  %8 = tail call i32 @strcmp(i8* %7, i8* nonnull getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0)) #6
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %3
  %11 = load i64, i64* %2, align 8
  %12 = and i64 %11, 8796093022208
  %13 = icmp eq i64 %12, 0
  %14 = select i1 %13, i64 9, i64 0
  %15 = select i1 %13, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)
  br label %19

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %1, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  br label %19

19:                                               ; preds = %10, %16
  %20 = phi i64 [ %18, %16 ], [ %14, %10 ]
  %21 = phi i8* [ %5, %16 ], [ %15, %10 ]
  %22 = insertvalue { i8*, i64 } undef, i8* %21, 0
  %23 = insertvalue { i8*, i64 } %22, i64 %20, 1
  ret { i8*, i64 } %23
}

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh11TOutputESSLD0Ev(%"class.sh::TOutputESSL"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.sh::TOutputESSL", %"class.sh::TOutputESSL"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #5
  ret void
}

declare void @_ZN2sh15TOutputGLSLBase11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermSymbol"*) unnamed_addr #1

declare void @_ZN2sh15TOutputGLSLBase18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #1

declare void @_ZN2sh15TOutputGLSLBase22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #1

declare zeroext i1 @_ZN2sh15TOutputGLSLBase11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TOutputGLSLBase"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #1

declare void @_ZN2sh15TOutputGLSLBase26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #1

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #1

declare void @_ZN2sh15TOutputGLSLBase20writeLayoutQualifierEPNS_12TIntermTypedE(%"class.sh::TOutputGLSLBase"*, %"class.sh::TIntermTyped"*) unnamed_addr #1

declare void @_ZN2sh15TOutputGLSLBase17writeVariableTypeERKNS_5TTypeEPKNS_7TSymbolEb(%"class.sh::TOutputGLSLBase"*, %"class.sh::TType"* dereferenceable(184), %"class.sh::TSymbol"*, i1 zeroext) unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
