; ModuleID = '../../third_party/skia/src/pdf/SkKeyedImage.cpp'
source_filename = "../../third_party/skia/src/pdf/SkKeyedImage.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkKeyedImage = type <{ %class.sk_sp.12, %struct.SkBitmapKey, [4 x i8] }>
%class.sk_sp.12 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%struct.SkBitmapKey = type { %struct.SkIRect, i32 }
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.SkBitmap = type { %class.sk_sp.6, %class.SkPixmap, %class.sk_sp.7 }
%class.sk_sp.6 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%class.sk_sp.7 = type { %class.SkMipmap* }
%class.SkMipmap = type <{ %class.SkCachedData.base, [6 x i8], %class.sk_sp, %"struct.SkMipmap::Level"*, i32, [4 x i8] }>
%class.SkCachedData.base = type <{ i32 (...)**, %class.SkMutex, %union.anon, i8*, i64, i32, i32, i8, i8 }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%union.anon = type { %class.SkDiscardableMemory* }
%class.SkDiscardableMemory = type opaque
%"struct.SkMipmap::Level" = type { %class.SkPixmap, %struct.SkSize }
%struct.SkSize = type { float, float }
%class.SkImage_Base = type { %class.SkImage.base, %"struct.std::__1::atomic.8", [3 x i8] }
%class.SkImage.base = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32 }>
%"struct.std::__1::atomic.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl.10" }
%"struct.std::__1::__cxx_atomic_impl.10" = type { %"struct.std::__1::__cxx_atomic_base_impl.11" }
%"struct.std::__1::__cxx_atomic_base_impl.11" = type { i8 }
%class.GrDirectContext = type { %class.GrRecordingContext, %"class.GrDirectContext::DirectContextID", %"class.std::__1::unique_ptr.40", %"class.std::__1::unique_ptr.46", %class.sk_sp.52, %"class.std::__1::unique_ptr.53", %"class.std::__1::unique_ptr.88", i8, i8, %"class.GrContextOptions::PersistentCache"*, %"class.GrContextOptions::ShaderErrorHandler"*, %"class.std::__1::unique_ptr.97", %"class.std::__1::unique_ptr.103", %"class.std::__1::unique_ptr.109" }
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.34" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp.13 }
%class.sk_sp.13 = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%class.GrSingleOwner = type { i8 }
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type opaque
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.21" }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %class.SkArenaAlloc* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.24 }
%class.SkFibBlockSizes.24 = type { i32 }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %class.GrProxyProvider* }
%class.GrProxyProvider = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %class.SkTaskGroup* }
%class.SkTaskGroup = type opaque
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %class.GrStrikeCache* }
%class.GrStrikeCache = type opaque
%class.sk_sp.52 = type { %class.GrGpu* }
%class.GrGpu = type opaque
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %class.GrResourceCache* }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray, %class.SkTMultiMap, %class.SkTDynamicHash.65, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray }
%class.SkTDArray = type { %class.GrGpuResource**, i32, i32 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon.56, [4 x i8] }>
%union.anon.56 = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.57, i8* }
%class.sk_sp.57 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.58, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.58 = type { %"struct.std::__1::atomic" }
%"class.GrGpuResource::UniqueID" = type { i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.59" }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.65 = type { %class.SkTHashTable.66 }
%class.SkTHashTable.66 = type { i32, i32, %class.SkAutoTArray.67 }
%class.SkAutoTArray.67 = type { %"class.std::__1::unique_ptr.68" }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.74, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.74 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.75 }
%class.sk_sp.75 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.76, void (i8*)*, i8* }
%class.SkNVRefCnt.76 = type { %"struct.std::__1::atomic" }
%class.SkTHashMap = type { %class.SkTHashTable.77 }
%class.SkTHashTable.77 = type { i32, i32, %class.SkAutoTArray.78 }
%class.SkAutoTArray.78 = type { %"class.std::__1::unique_ptr.79" }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %class.GrResourceProvider* }
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp.91, %class.sk_sp.93, %class.sk_sp.93 }
%class.sk_sp.91 = type { %class.GrCaps* }
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.92, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp.92 = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%class.sk_sp.93 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%class.GrBuffer = type { i32 (...)** }
%"class.GrContextOptions::PersistentCache" = type { i32 (...)** }
%"class.GrContextOptions::ShaderErrorHandler" = type { i32 (...)** }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %class.GrClientMappedBufferManager* }
%class.GrClientMappedBufferManager = type opaque
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %class.GrAtlasManager* }
%class.GrAtlasManager = type opaque
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %class.GrSmallPathAtlasMgr* }
%class.GrSmallPathAtlasMgr = type opaque

@_ZN12SkKeyedImageC1E5sk_spI7SkImageE = hidden unnamed_addr alias void (%class.SkKeyedImage*, %class.sk_sp.12*), void (%class.SkKeyedImage*, %class.sk_sp.12*)* @_ZN12SkKeyedImageC2E5sk_spI7SkImageE
@_ZN12SkKeyedImageC1ERK8SkBitmap = hidden unnamed_addr alias void (%class.SkKeyedImage*, %class.SkBitmap*), void (%class.SkKeyedImage*, %class.SkBitmap*)* @_ZN12SkKeyedImageC2ERK8SkBitmap

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z20SkBitmapKeyFromImagePK7SkImage(%struct.SkBitmapKey* noalias nocapture sret, %class.SkImage*) local_unnamed_addr #0 {
  %3 = icmp eq %class.SkImage* %1, null
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = bitcast %struct.SkBitmapKey* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 20, i1 false)
  br label %69

6:                                                ; preds = %2
  %7 = bitcast %class.SkImage* %1 to %class.SkImage_Base*
  %8 = bitcast %class.SkImage* %1 to %class.SkBitmap* (%class.SkImage_Base*)***
  %9 = load %class.SkBitmap* (%class.SkImage_Base*)**, %class.SkBitmap* (%class.SkImage_Base*)*** %8, align 8
  %10 = getelementptr inbounds %class.SkBitmap* (%class.SkImage_Base*)*, %class.SkBitmap* (%class.SkImage_Base*)** %9, i64 4
  %11 = load %class.SkBitmap* (%class.SkImage_Base*)*, %class.SkBitmap* (%class.SkImage_Base*)** %10, align 8
  %12 = tail call %class.SkBitmap* %11(%class.SkImage_Base* nonnull %7) #3
  %13 = icmp eq %class.SkBitmap* %12, null
  br i1 %13, label %54, label %14

14:                                               ; preds = %6
  %15 = tail call i64 @_ZNK8SkBitmap14pixelRefOriginEv(%class.SkBitmap* nonnull %12) #3
  %16 = getelementptr inbounds %class.SkImage, %class.SkImage* %1, i64 0, i32 2, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %class.SkImage, %class.SkImage* %1, i64 0, i32 2, i32 1, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = shl i64 %15, 32
  %21 = ashr exact i64 %20, 32
  %22 = icmp slt i64 %21, 2147483647
  %23 = select i1 %22, i64 %21, i64 2147483647
  %24 = icmp sgt i64 %23, -2147483647
  %25 = select i1 %24, i64 %23, i64 -2147483647
  %26 = ashr i64 %15, 32
  %27 = icmp slt i64 %26, 2147483647
  %28 = select i1 %27, i64 %26, i64 2147483647
  %29 = icmp sgt i64 %28, -2147483647
  %30 = select i1 %29, i64 %28, i64 -2147483647
  %31 = sext i32 %17 to i64
  %32 = add nsw i64 %21, %31
  %33 = icmp slt i64 %32, 2147483647
  %34 = select i1 %33, i64 %32, i64 2147483647
  %35 = icmp sgt i64 %34, -2147483647
  %36 = select i1 %35, i64 %34, i64 -2147483647
  %37 = sext i32 %19 to i64
  %38 = add nsw i64 %26, %37
  %39 = icmp slt i64 %38, 2147483647
  %40 = select i1 %39, i64 %38, i64 2147483647
  %41 = icmp sgt i64 %40, -2147483647
  %42 = select i1 %41, i64 %40, i64 -2147483647
  %43 = shl nsw i64 %30, 32
  %44 = and i64 %25, 4294967295
  %45 = or i64 %44, %43
  %46 = shl nsw i64 %42, 32
  %47 = and i64 %36, 4294967295
  %48 = or i64 %46, %47
  %49 = bitcast %struct.SkBitmapKey* %0 to i64*
  store i64 %45, i64* %49, align 4
  %50 = getelementptr inbounds %struct.SkBitmapKey, %struct.SkBitmapKey* %0, i64 0, i32 0, i32 2
  %51 = bitcast i32* %50 to i64*
  store i64 %48, i64* %51, align 4
  %52 = getelementptr inbounds %struct.SkBitmapKey, %struct.SkBitmapKey* %0, i64 0, i32 1
  %53 = tail call i32 @_ZNK8SkBitmap15getGenerationIDEv(%class.SkBitmap* nonnull %12) #3
  store i32 %53, i32* %52, align 4
  br label %69

54:                                               ; preds = %6
  %55 = getelementptr inbounds %class.SkImage, %class.SkImage* %1, i64 0, i32 2, i32 1, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %class.SkImage, %class.SkImage* %1, i64 0, i32 2, i32 1, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i64
  %60 = shl nuw i64 %59, 32
  %61 = zext i32 %56 to i64
  %62 = or i64 %60, %61
  %63 = bitcast %struct.SkBitmapKey* %0 to i64*
  store i64 0, i64* %63, align 4
  %64 = getelementptr inbounds %struct.SkBitmapKey, %struct.SkBitmapKey* %0, i64 0, i32 0, i32 2
  %65 = bitcast i32* %64 to i64*
  store i64 %62, i64* %65, align 4
  %66 = getelementptr inbounds %struct.SkBitmapKey, %struct.SkBitmapKey* %0, i64 0, i32 1
  %67 = getelementptr inbounds %class.SkImage, %class.SkImage* %1, i64 0, i32 3
  %68 = load i32, i32* %67, align 8
  store i32 %68, i32* %66, align 4
  br label %69

69:                                               ; preds = %14, %54, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @_ZNK8SkBitmap14pixelRefOriginEv(%class.SkBitmap*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @_ZNK8SkBitmap15getGenerationIDEv(%class.SkBitmap*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkKeyedImageC2E5sk_spI7SkImageE(%class.SkKeyedImage* nocapture, %class.sk_sp.12* nocapture) unnamed_addr #0 align 2 {
  %3 = alloca %struct.SkBitmapKey, align 4
  %4 = getelementptr inbounds %class.sk_sp.12, %class.sk_sp.12* %1, i64 0, i32 0
  %5 = bitcast %class.sk_sp.12* %1 to i64*
  %6 = load i64, i64* %5, align 8
  store %class.SkImage* null, %class.SkImage** %4, align 8
  %7 = bitcast %class.SkKeyedImage* %0 to i64*
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %0, i64 0, i32 1
  %9 = bitcast %struct.SkBitmapKey* %3 to i8*
  %10 = bitcast %struct.SkBitmapKey* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 20, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %9) #3
  %11 = inttoptr i64 %6 to %class.SkImage*
  call void @_Z20SkBitmapKeyFromImagePK7SkImage(%struct.SkBitmapKey* nonnull sret %3, %class.SkImage* %11)
  %12 = bitcast %struct.SkBitmapKey* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* nonnull align 4 %9, i64 20, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %9) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkKeyedImageC2ERK8SkBitmap(%class.SkKeyedImage*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %0, i64 0, i32 0
  tail call void @_ZNK8SkBitmap7asImageEv(%class.sk_sp.12* sret %3, %class.SkBitmap* %1) #3
  %4 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %0, i64 0, i32 1, i32 0, i32 0
  %5 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %0, i64 0, i32 0, i32 0
  %6 = bitcast i32* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 20, i1 false)
  %7 = load %class.SkImage*, %class.SkImage** %5, align 8
  %8 = icmp eq %class.SkImage* %7, null
  br i1 %8, label %39, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %0, i64 0, i32 1, i32 1
  %11 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %0, i64 0, i32 1, i32 0, i32 2
  %12 = tail call i64 @_ZNK8SkBitmap14pixelRefOriginEv(%class.SkBitmap* %1) #3
  %13 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 2, i32 1, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %1, i64 0, i32 1, i32 2, i32 1, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = shl i64 %12, 32
  %18 = ashr exact i64 %17, 32
  %19 = sext i32 %14 to i64
  %20 = add nsw i64 %18, %19
  %21 = icmp slt i64 %20, 2147483647
  %22 = select i1 %21, i64 %20, i64 2147483647
  %23 = icmp sgt i64 %22, -2147483647
  %24 = select i1 %23, i64 %22, i64 -2147483647
  %25 = ashr i64 %12, 32
  %26 = sext i32 %16 to i64
  %27 = add nsw i64 %25, %26
  %28 = icmp slt i64 %27, 2147483647
  %29 = select i1 %28, i64 %27, i64 2147483647
  %30 = icmp sgt i64 %29, -2147483647
  %31 = select i1 %30, i64 %29, i64 -2147483647
  %32 = shl nsw i64 %31, 32
  %33 = and i64 %24, 4294967295
  %34 = or i64 %32, %33
  %35 = tail call i32 @_ZNK8SkBitmap15getGenerationIDEv(%class.SkBitmap* %1) #3
  %36 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %0, i64 0, i32 1
  %37 = bitcast %struct.SkBitmapKey* %36 to i64*
  store i64 %12, i64* %37, align 8
  %38 = bitcast i32* %11 to i64*
  store i64 %34, i64* %38, align 8
  store i32 %35, i32* %10, align 8
  br label %39

39:                                               ; preds = %2, %9
  ret void
}

declare void @_ZNK8SkBitmap7asImageEv(%class.sk_sp.12* sret, %class.SkBitmap*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK12SkKeyedImage6subsetE7SkIRect(%class.SkKeyedImage* noalias nocapture sret, %class.SkKeyedImage* nocapture readonly, i64, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to %struct.SkIRect*
  %7 = alloca { i64, i64 }, align 8
  %8 = alloca %class.sk_sp.12, align 8
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  store i64 %2, i64* %9, align 8
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  store i64 %3, i64* %10, align 8
  %11 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %0, i64 0, i32 1, i32 0, i32 2
  %12 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %0, i64 0, i32 1, i32 1
  %13 = bitcast %class.SkKeyedImage* %0 to i8*
  %14 = bitcast %class.SkKeyedImage* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 -86, i64 32, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 28, i1 false) #3
  %15 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %1, i64 0, i32 0, i32 0
  %16 = load %class.SkImage*, %class.SkImage** %15, align 8
  %17 = icmp eq %class.SkImage* %16, null
  %18 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #3
  br i1 %17, label %89, label %19

19:                                               ; preds = %4
  %20 = bitcast { i64, i64 }* %7 to %struct.SkIRect*
  %21 = getelementptr inbounds %class.SkImage, %class.SkImage* %16, i64 0, i32 2, i32 1, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %class.SkImage, %class.SkImage* %16, i64 0, i32 2, i32 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = shl nuw i64 %25, 32
  %27 = zext i32 %22 to i64
  %28 = or i64 %26, %27
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 0
  store i64 0, i64* %29, align 8
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i64 0, i32 1
  store i64 %28, i64* %30, align 8
  %31 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %6, %struct.SkIRect* nonnull dereferenceable(16) %6, %struct.SkIRect* nonnull dereferenceable(16) %20) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #3
  br i1 %31, label %32, label %90

32:                                               ; preds = %19
  %33 = bitcast %class.sk_sp.12* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #3
  %34 = load %class.SkImage*, %class.SkImage** %15, align 8
  call void @_ZNK7SkImage10makeSubsetERK7SkIRectP15GrDirectContext(%class.sk_sp.12* nonnull sret %8, %class.SkImage* %34, %struct.SkIRect* nonnull dereferenceable(16) %6, %class.GrDirectContext* null) #3
  %35 = bitcast %class.sk_sp.12* %8 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = bitcast %class.SkKeyedImage* %0 to i64*
  store i64 %36, i64* %37, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #3
  %38 = icmp eq i64 %36, 0
  br i1 %38, label %90, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %1, i64 0, i32 1, i32 0, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %1, i64 0, i32 1, i32 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = bitcast { i64, i64 }* %5 to i32*
  %45 = load i32, i32* %44, align 8
  %46 = sext i32 %45 to i64
  %47 = sext i32 %41 to i64
  %48 = add nsw i64 %46, %47
  %49 = icmp slt i64 %48, 2147483647
  %50 = select i1 %49, i64 %48, i64 2147483647
  %51 = icmp sgt i64 %50, -2147483647
  %52 = select i1 %51, i64 %50, i64 -2147483647
  %53 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = sext i32 %54 to i64
  %56 = sext i32 %43 to i64
  %57 = add nsw i64 %55, %56
  %58 = icmp slt i64 %57, 2147483647
  %59 = select i1 %58, i64 %57, i64 2147483647
  %60 = icmp sgt i64 %59, -2147483647
  %61 = select i1 %60, i64 %59, i64 -2147483647
  %62 = bitcast i64* %10 to i32*
  %63 = load i32, i32* %62, align 8
  %64 = sext i32 %63 to i64
  %65 = add nsw i64 %64, %47
  %66 = icmp slt i64 %65, 2147483647
  %67 = select i1 %66, i64 %65, i64 2147483647
  %68 = icmp sgt i64 %67, -2147483647
  %69 = select i1 %68, i64 %67, i64 -2147483647
  %70 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %6, i64 0, i32 3
  %71 = load i32, i32* %70, align 4
  %72 = sext i32 %71 to i64
  %73 = add nsw i64 %72, %56
  %74 = icmp slt i64 %73, 2147483647
  %75 = select i1 %74, i64 %73, i64 2147483647
  %76 = icmp sgt i64 %75, -2147483647
  %77 = select i1 %76, i64 %75, i64 -2147483647
  %78 = shl nsw i64 %61, 32
  %79 = and i64 %52, 4294967295
  %80 = or i64 %78, %79
  %81 = shl nsw i64 %77, 32
  %82 = and i64 %69, 4294967295
  %83 = or i64 %81, %82
  %84 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %1, i64 0, i32 1, i32 1
  %85 = load i32, i32* %84, align 8
  %86 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %0, i64 0, i32 1
  %87 = bitcast %struct.SkBitmapKey* %86 to i64*
  store i64 %80, i64* %87, align 8
  %88 = bitcast i32* %11 to i64*
  store i64 %83, i64* %88, align 8
  store i32 %85, i32* %12, align 8
  br label %90

89:                                               ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #3
  br label %90

90:                                               ; preds = %32, %19, %89, %39
  ret void
}

declare void @_ZNK7SkImage10makeSubsetERK7SkIRectP15GrDirectContext(%class.sk_sp.12* sret, %class.SkImage*, %struct.SkIRect* dereferenceable(16), %class.GrDirectContext*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkKeyedImage7releaseEv(%class.sk_sp.12* noalias nocapture sret, %class.SkKeyedImage* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %1, i64 0, i32 0, i32 0
  %4 = bitcast %class.SkKeyedImage* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %class.SkImage* null, %class.SkImage** %3, align 8
  %6 = bitcast %class.sk_sp.12* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %class.SkKeyedImage, %class.SkKeyedImage* %1, i64 0, i32 1
  %8 = bitcast %struct.SkBitmapKey* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 20, i1 false)
  ret void
}

declare zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
