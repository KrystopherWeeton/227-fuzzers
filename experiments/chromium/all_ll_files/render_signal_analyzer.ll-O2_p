; ModuleID = '../../third_party/webrtc/modules/audio_processing/aec3/render_signal_analyzer.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/aec3/render_signal_analyzer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::RenderSignalAnalyzer" = type { i32, %"struct.std::__1::array", %"class.absl::optional", i64 }
%"struct.std::__1::array" = type { [63 x i64] }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"struct.webrtc::EchoCanceller3Config" = type { %"struct.webrtc::EchoCanceller3Config::Buffering", %"struct.webrtc::EchoCanceller3Config::Delay", %"struct.webrtc::EchoCanceller3Config::Filter", %"struct.webrtc::EchoCanceller3Config::Erle", %"struct.webrtc::EchoCanceller3Config::EpStrength", %"struct.webrtc::EchoCanceller3Config::EchoAudibility", %"struct.webrtc::EchoCanceller3Config::RenderLevels", %"struct.webrtc::EchoCanceller3Config::EchoRemovalControl", [6 x i8], %"struct.webrtc::EchoCanceller3Config::EchoModel", %"struct.webrtc::EchoCanceller3Config::ComfortNoise", [4 x i8], %"struct.webrtc::EchoCanceller3Config::Suppressor" }
%"struct.webrtc::EchoCanceller3Config::Buffering" = type { i64, i64 }
%"struct.webrtc::EchoCanceller3Config::Delay" = type { i64, i64, i64, i64, i64, i64, float, float, float, %"struct.webrtc::EchoCanceller3Config::Delay::DelaySelectionThresholds", i8, i8, %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing", %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing" }
%"struct.webrtc::EchoCanceller3Config::Delay::DelaySelectionThresholds" = type { i32, i32 }
%"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing" = type { i8, i8, float, i8 }
%"struct.webrtc::EchoCanceller3Config::Filter" = type <{ %"struct.webrtc::EchoCanceller3Config::Filter::RefinedConfiguration", %"struct.webrtc::EchoCanceller3Config::Filter::CoarseConfiguration", %"struct.webrtc::EchoCanceller3Config::Filter::RefinedConfiguration", %"struct.webrtc::EchoCanceller3Config::Filter::CoarseConfiguration", i64, float, i32, i8, i8, i8, i8, i8, [3 x i8] }>
%"struct.webrtc::EchoCanceller3Config::Filter::RefinedConfiguration" = type { i64, float, float, float, float, float }
%"struct.webrtc::EchoCanceller3Config::Filter::CoarseConfiguration" = type { i64, float, float }
%"struct.webrtc::EchoCanceller3Config::Erle" = type <{ float, float, float, i8, [3 x i8], i64, i8, i8, [6 x i8] }>
%"struct.webrtc::EchoCanceller3Config::EpStrength" = type <{ float, float, i8, i8, i8, i8 }>
%"struct.webrtc::EchoCanceller3Config::EchoAudibility" = type <{ float, float, float, float, float, float, i8, i8, [2 x i8] }>
%"struct.webrtc::EchoCanceller3Config::RenderLevels" = type { float, float, float, float }
%"struct.webrtc::EchoCanceller3Config::EchoRemovalControl" = type { i8, i8 }
%"struct.webrtc::EchoCanceller3Config::EchoModel" = type <{ i64, float, float, float, float, i64, i64, i8, [7 x i8] }>
%"struct.webrtc::EchoCanceller3Config::ComfortNoise" = type { float }
%"struct.webrtc::EchoCanceller3Config::Suppressor" = type <{ i64, %"struct.webrtc::EchoCanceller3Config::Suppressor::Tuning", %"struct.webrtc::EchoCanceller3Config::Suppressor::Tuning", %"struct.webrtc::EchoCanceller3Config::Suppressor::DominantNearendDetection", %"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection", i8, [3 x i8], %"struct.webrtc::EchoCanceller3Config::Suppressor::HighBandsSuppression", float, i8, [7 x i8] }>
%"struct.webrtc::EchoCanceller3Config::Suppressor::Tuning" = type { %"struct.webrtc::EchoCanceller3Config::Suppressor::MaskingThresholds", %"struct.webrtc::EchoCanceller3Config::Suppressor::MaskingThresholds", float, float }
%"struct.webrtc::EchoCanceller3Config::Suppressor::MaskingThresholds" = type { float, float, float }
%"struct.webrtc::EchoCanceller3Config::Suppressor::DominantNearendDetection" = type <{ float, float, float, i32, i32, i8, [3 x i8] }>
%"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection" = type { i64, %"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection::SubbandRegion", %"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection::SubbandRegion", float, float }
%"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection::SubbandRegion" = type { i64, i64 }
%"struct.webrtc::EchoCanceller3Config::Suppressor::HighBandsSuppression" = type { float, float, float, float }
%"class.webrtc::RenderBuffer" = type <{ %"struct.webrtc::BlockBuffer"*, %"struct.webrtc::SpectrumBuffer"*, %"struct.webrtc::FftBuffer"*, i8, [7 x i8] }>
%"struct.webrtc::BlockBuffer" = type { i32, %"class.std::__1::vector", i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"*, %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"*, %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.std::__1::vector.4"* }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.std::__1::vector.2"* }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.std::__1::vector.0"* }
%"struct.webrtc::SpectrumBuffer" = type { i32, %"class.std::__1::vector.22", i32, i32 }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"class.std::__1::vector.24"*, %"class.std::__1::vector.24"*, %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"struct.std::__1::array.26"*, %"struct.std::__1::array.26"*, %"class.std::__1::__compressed_pair.27" }
%"struct.std::__1::array.26" = type { [65 x float] }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"struct.std::__1::array.26"* }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.std::__1::vector.24"* }
%"struct.webrtc::FftBuffer" = type { i32, %"class.std::__1::vector.37", i32, i32 }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"class.std::__1::vector.39"*, %"class.std::__1::vector.39"*, %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.50" }
%"class.std::__1::__vector_base.50" = type { %"struct.webrtc::FftData"*, %"struct.webrtc::FftData"*, %"class.std::__1::__compressed_pair.51" }
%"struct.webrtc::FftData" = type { %"struct.std::__1::array.26", %"struct.std::__1::array.26" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"struct.webrtc::FftData"* }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.std::__1::vector.39"* }
%"class.absl::optional.45" = type { %"class.absl::optional_internal::optional_data.46" }
%"class.absl::optional_internal::optional_data.46" = type { %"class.absl::optional_internal::optional_data_base.47" }
%"class.absl::optional_internal::optional_data_base.47" = type { %"class.absl::optional_internal::optional_data_dtor_base.48" }
%"class.absl::optional_internal::optional_data_dtor_base.48" = type { i8, %union.anon.49 }
%union.anon.49 = type { i64 }

@_ZN6webrtc20RenderSignalAnalyzerC1ERKNS_20EchoCanceller3ConfigE = hidden unnamed_addr alias void (%"class.webrtc::RenderSignalAnalyzer"*, %"struct.webrtc::EchoCanceller3Config"*), void (%"class.webrtc::RenderSignalAnalyzer"*, %"struct.webrtc::EchoCanceller3Config"*)* @_ZN6webrtc20RenderSignalAnalyzerC2ERKNS_20EchoCanceller3ConfigE
@_ZN6webrtc20RenderSignalAnalyzerD1Ev = hidden unnamed_addr alias void (%"class.webrtc::RenderSignalAnalyzer"*), void (%"class.webrtc::RenderSignalAnalyzer"*)* @_ZN6webrtc20RenderSignalAnalyzerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc20RenderSignalAnalyzerC2ERKNS_20EchoCanceller3ConfigE(%"class.webrtc::RenderSignalAnalyzer"* nocapture, %"struct.webrtc::EchoCanceller3Config"* nocapture readonly dereferenceable(560)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::RenderSignalAnalyzer", %"class.webrtc::RenderSignalAnalyzer"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.webrtc::EchoCanceller3Config", %"struct.webrtc::EchoCanceller3Config"* %1, i64 0, i32 2, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* %3, align 8
  %7 = getelementptr %"class.webrtc::RenderSignalAnalyzer", %"class.webrtc::RenderSignalAnalyzer"* %0, i64 0, i32 1, i32 0, i64 0
  %8 = bitcast i64* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 505, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6webrtc20RenderSignalAnalyzerD2Ev(%"class.webrtc::RenderSignalAnalyzer"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc20RenderSignalAnalyzer6UpdateERKNS_12RenderBufferERKN4absl8optionalImEE(%"class.webrtc::RenderSignalAnalyzer"* nocapture, %"class.webrtc::RenderBuffer"* nocapture readonly dereferenceable(32), %"class.absl::optional.45"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca %"struct.std::__1::array", align 8
  %9 = bitcast %"struct.std::__1::array"* %8 to i8*
  %10 = getelementptr inbounds %"class.absl::optional.45", %"class.absl::optional.45"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i8, i8* %10, align 8, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.webrtc::RenderSignalAnalyzer", %"class.webrtc::RenderSignalAnalyzer"* %0, i64 0, i32 1
  %15 = bitcast %"struct.std::__1::array"* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 504, i1 false) #5
  br label %84

16:                                               ; preds = %3
  call void @llvm.lifetime.start.p0i8(i64 504, i8* nonnull %9) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 504, i1 false) #5
  %17 = getelementptr inbounds %"class.absl::optional.45", %"class.absl::optional.45"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = trunc i64 %18 to i32
  %20 = getelementptr inbounds %"class.webrtc::RenderBuffer", %"class.webrtc::RenderBuffer"* %1, i64 0, i32 1
  %21 = load %"struct.webrtc::SpectrumBuffer"*, %"struct.webrtc::SpectrumBuffer"** %20, align 8
  %22 = getelementptr inbounds %"struct.webrtc::SpectrumBuffer", %"struct.webrtc::SpectrumBuffer"* %21, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"struct.webrtc::SpectrumBuffer", %"struct.webrtc::SpectrumBuffer"* %21, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = add i32 %23, %19
  %27 = add i32 %26, %25
  %28 = srem i32 %27, %25
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %"struct.webrtc::SpectrumBuffer", %"struct.webrtc::SpectrumBuffer"* %21, i64 0, i32 1, i32 0, i32 0
  %31 = load %"class.std::__1::vector.24"*, %"class.std::__1::vector.24"** %30, align 8
  %32 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %31, i64 %29, i32 0, i32 0
  %33 = load %"struct.std::__1::array.26"*, %"struct.std::__1::array.26"** %32, align 8
  %34 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %31, i64 %29, i32 0, i32 1
  %35 = bitcast %"struct.std::__1::array.26"** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = ptrtoint %"struct.std::__1::array.26"* %33 to i64
  %38 = sub i64 %36, %37
  %39 = sdiv exact i64 %38, 260
  %40 = icmp eq i64 %38, 0
  %41 = select i1 %40, %"struct.std::__1::array.26"* null, %"struct.std::__1::array.26"* %33
  br i1 %40, label %42, label %43

42:                                               ; preds = %47, %16
  br label %70

43:                                               ; preds = %16, %47
  %44 = phi i64 [ %48, %47 ], [ 0, %16 ]
  %45 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %41, i64 %44, i32 0, i64 1
  %46 = load float, float* %45, align 4
  br label %50

47:                                               ; preds = %67
  %48 = add nuw i64 %44, 1
  %49 = icmp ult i64 %48, %39
  br i1 %49, label %43, label %42

50:                                               ; preds = %67, %43
  %51 = phi float [ %46, %43 ], [ %58, %67 ]
  %52 = phi i64 [ 1, %43 ], [ %55, %67 ]
  %53 = add nsw i64 %52, -1
  %54 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %41, i64 %44, i32 0, i64 %53
  %55 = add nuw nsw i64 %52, 1
  %56 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %41, i64 %44, i32 0, i64 %55
  %57 = load float, float* %54, align 4
  %58 = load float, float* %56, align 4
  %59 = fcmp olt float %57, %58
  %60 = select i1 %59, float %58, float %57
  %61 = fmul float %60, 3.000000e+00
  %62 = fcmp ogt float %51, %61
  br i1 %62, label %63, label %67

63:                                               ; preds = %50
  %64 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %8, i64 0, i32 0, i64 %53
  %65 = load i64, i64* %64, align 8
  %66 = add i64 %65, 1
  store i64 %66, i64* %64, align 8
  br label %67

67:                                               ; preds = %63, %50
  %68 = icmp eq i64 %55, 64
  br i1 %68, label %47, label %50

69:                                               ; preds = %80
  call void @llvm.lifetime.end.p0i8(i64 504, i8* nonnull %9) #5
  br label %84

70:                                               ; preds = %463, %42
  %71 = phi i64 [ 1, %42 ], [ %466, %463 ]
  %72 = add nsw i64 %71, -1
  %73 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %8, i64 0, i32 0, i64 %72
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %80, label %76

76:                                               ; preds = %70
  %77 = getelementptr inbounds %"class.webrtc::RenderSignalAnalyzer", %"class.webrtc::RenderSignalAnalyzer"* %0, i64 0, i32 1, i32 0, i64 %72
  %78 = load i64, i64* %77, align 8
  %79 = add i64 %78, 1
  br label %80

80:                                               ; preds = %76, %70
  %81 = phi i64 [ %79, %76 ], [ 0, %70 ]
  %82 = getelementptr inbounds %"class.webrtc::RenderSignalAnalyzer", %"class.webrtc::RenderSignalAnalyzer"* %0, i64 0, i32 1, i32 0, i64 %72
  store i64 %81, i64* %82, align 8
  %83 = icmp eq i64 %71, 63
  br i1 %83, label %69, label %455

84:                                               ; preds = %13, %69
  %85 = getelementptr inbounds %"class.webrtc::RenderSignalAnalyzer", %"class.webrtc::RenderSignalAnalyzer"* %0, i64 0, i32 2
  %86 = getelementptr inbounds %"class.webrtc::RenderSignalAnalyzer", %"class.webrtc::RenderSignalAnalyzer"* %0, i64 0, i32 3
  %87 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %85, i64 0, i32 0, i32 0, i32 0, i32 0
  %88 = load i8, i8* %87, align 4, !range !2
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %98, label %90

90:                                               ; preds = %84
  %91 = getelementptr inbounds %"class.webrtc::RenderSignalAnalyzer", %"class.webrtc::RenderSignalAnalyzer"* %0, i64 0, i32 0
  %92 = load i32, i32* %91, align 8
  %93 = load i64, i64* %86, align 8
  %94 = add i64 %93, 1
  store i64 %94, i64* %86, align 8
  %95 = sext i32 %92 to i64
  %96 = icmp ugt i64 %94, %95
  br i1 %96, label %97, label %98

97:                                               ; preds = %90
  store i8 0, i8* %87, align 4
  br label %98

98:                                               ; preds = %97, %90, %84
  %99 = getelementptr inbounds %"class.webrtc::RenderBuffer", %"class.webrtc::RenderBuffer"* %1, i64 0, i32 0
  %100 = load %"struct.webrtc::BlockBuffer"*, %"struct.webrtc::BlockBuffer"** %99, align 8
  %101 = getelementptr inbounds %"struct.webrtc::BlockBuffer", %"struct.webrtc::BlockBuffer"* %100, i64 0, i32 3
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds %"struct.webrtc::BlockBuffer", %"struct.webrtc::BlockBuffer"* %100, i64 0, i32 0
  %104 = load i32, i32* %103, align 8
  %105 = add i32 %104, %102
  %106 = srem i32 %105, %104
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds %"struct.webrtc::BlockBuffer", %"struct.webrtc::BlockBuffer"* %100, i64 0, i32 1, i32 0, i32 0
  %109 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %108, align 8
  %110 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %109, i64 %107, i32 0, i32 0
  %111 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %110, align 8
  %112 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %111, i64 0, i32 0, i32 1
  %113 = bitcast %"class.std::__1::vector.4"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.std::__1::vector.2"* %111 to i64*
  %116 = load i64, i64* %115, align 8
  %117 = icmp eq i64 %114, %116
  br i1 %117, label %454, label %118

118:                                              ; preds = %98
  %119 = getelementptr inbounds %"class.webrtc::RenderBuffer", %"class.webrtc::RenderBuffer"* %1, i64 0, i32 1
  %120 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %109, i64 %107, i32 0, i32 1
  %121 = bitcast %"class.std::__1::vector.2"** %120 to i64*
  %122 = bitcast %"class.absl::optional"* %85 to i64*
  %123 = bitcast float* %4 to i8*
  %124 = bitcast float* %5 to i8*
  %125 = bitcast float* %6 to i8*
  %126 = bitcast float* %7 to i8*
  br label %127

127:                                              ; preds = %442, %118
  %128 = phi %"class.std::__1::vector.2"* [ %111, %118 ], [ %443, %442 ]
  %129 = phi float [ 0.000000e+00, %118 ], [ %444, %442 ]
  %130 = phi i64 [ 0, %118 ], [ %445, %442 ]
  %131 = load %"struct.webrtc::SpectrumBuffer"*, %"struct.webrtc::SpectrumBuffer"** %119, align 8
  %132 = getelementptr inbounds %"struct.webrtc::SpectrumBuffer", %"struct.webrtc::SpectrumBuffer"* %131, i64 0, i32 3
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds %"struct.webrtc::SpectrumBuffer", %"struct.webrtc::SpectrumBuffer"* %131, i64 0, i32 0
  %135 = load i32, i32* %134, align 8
  %136 = add i32 %135, %133
  %137 = srem i32 %136, %135
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds %"struct.webrtc::SpectrumBuffer", %"struct.webrtc::SpectrumBuffer"* %131, i64 0, i32 1, i32 0, i32 0
  %140 = load %"class.std::__1::vector.24"*, %"class.std::__1::vector.24"** %139, align 8
  %141 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %140, i64 %138, i32 0, i32 0
  %142 = load %"struct.std::__1::array.26"*, %"struct.std::__1::array.26"** %141, align 8
  %143 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %140, i64 %138, i32 0, i32 1
  %144 = bitcast %"struct.std::__1::array.26"** %143 to i64*
  %145 = load i64, i64* %144, align 8
  %146 = ptrtoint %"struct.std::__1::array.26"* %142 to i64
  %147 = icmp eq i64 %145, %146
  %148 = select i1 %147, %"struct.std::__1::array.26"* null, %"struct.std::__1::array.26"* %142
  %149 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %148, i64 %130, i32 0, i64 0
  %150 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %148, i64 %130, i32 0, i64 65
  %151 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %148, i64 %130, i32 0, i64 1
  br label %152

152:                                              ; preds = %152, %127
  %153 = phi float* [ %151, %127 ], [ %174, %152 ]
  %154 = phi float* [ %149, %127 ], [ %173, %152 ]
  %155 = load float, float* %154, align 4
  %156 = load float, float* %153, align 4
  %157 = fcmp olt float %155, %156
  %158 = select i1 %157, float* %153, float* %154
  %159 = getelementptr inbounds float, float* %153, i64 1
  %160 = load float, float* %158, align 4
  %161 = load float, float* %159, align 4
  %162 = fcmp olt float %160, %161
  %163 = select i1 %162, float* %159, float* %158
  %164 = getelementptr inbounds float, float* %153, i64 2
  %165 = load float, float* %163, align 4
  %166 = load float, float* %164, align 4
  %167 = fcmp olt float %165, %166
  %168 = select i1 %167, float* %164, float* %163
  %169 = getelementptr inbounds float, float* %153, i64 3
  %170 = load float, float* %168, align 4
  %171 = load float, float* %169, align 4
  %172 = fcmp olt float %170, %171
  %173 = select i1 %172, float* %169, float* %168
  %174 = getelementptr inbounds float, float* %153, i64 4
  %175 = icmp eq float* %174, %150
  br i1 %175, label %176, label %152

176:                                              ; preds = %152
  %177 = ptrtoint %"class.std::__1::vector.2"* %128 to i64
  %178 = ptrtoint float* %173 to i64
  %179 = ptrtoint float* %149 to i64
  %180 = sub i64 %178, %179
  %181 = lshr exact i64 %180, 2
  %182 = trunc i64 %181 to i32
  %183 = icmp sgt i32 %182, 14
  %184 = select i1 %183, i32 %182, i32 14
  %185 = add nsw i32 %184, -10
  %186 = icmp slt i32 %185, %182
  br i1 %186, label %187, label %193

187:                                              ; preds = %176
  %188 = zext i32 %184 to i64
  %189 = add nsw i64 %188, -14
  %190 = shl i64 %180, 30
  %191 = add i64 %190, -17179869184
  %192 = ashr exact i64 %191, 32
  br label %224

193:                                              ; preds = %224, %176
  %194 = phi float [ 0.000000e+00, %176 ], [ %230, %224 ]
  %195 = add i32 %182, 5
  %196 = icmp slt i32 %182, 50
  %197 = select i1 %196, i32 %182, i32 50
  %198 = add nsw i32 %197, 15
  %199 = icmp slt i32 %195, %198
  br i1 %199, label %200, label %233

200:                                              ; preds = %193
  %201 = sext i32 %195 to i64
  %202 = sext i32 %198 to i64
  %203 = sub nsw i64 %202, %201
  %204 = xor i64 %201, -1
  %205 = add nsw i64 %204, %202
  %206 = and i64 %203, 3
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %219, label %208

208:                                              ; preds = %200, %208
  %209 = phi i64 [ %216, %208 ], [ %201, %200 ]
  %210 = phi float [ %215, %208 ], [ %194, %200 ]
  %211 = phi i64 [ %217, %208 ], [ %206, %200 ]
  %212 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %148, i64 %130, i32 0, i64 %209
  %213 = load float, float* %212, align 4
  %214 = fcmp olt float %213, %210
  %215 = select i1 %214, float %210, float %213
  %216 = add nsw i64 %209, 1
  %217 = add i64 %211, -1
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %219, label %208, !llvm.loop !3

219:                                              ; preds = %208, %200
  %220 = phi i64 [ %201, %200 ], [ %216, %208 ]
  %221 = phi float [ %194, %200 ], [ %215, %208 ]
  %222 = phi float [ undef, %200 ], [ %215, %208 ]
  %223 = icmp ult i64 %205, 3
  br i1 %223, label %233, label %318

224:                                              ; preds = %224, %187
  %225 = phi i64 [ %189, %187 ], [ %231, %224 ]
  %226 = phi float [ 0.000000e+00, %187 ], [ %230, %224 ]
  %227 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %148, i64 %130, i32 0, i64 %225
  %228 = load float, float* %227, align 4
  %229 = fcmp olt float %228, %226
  %230 = select i1 %229, float %226, float %228
  %231 = add nsw i64 %225, 1
  %232 = icmp slt i64 %231, %192
  br i1 %232, label %224, label %193

233:                                              ; preds = %219, %318, %193
  %234 = phi float [ %194, %193 ], [ %222, %219 ], [ %339, %318 ]
  %235 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %128, i64 0, i32 0, i32 0
  %236 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %235, align 8
  %237 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %236, i64 %130, i32 0, i32 0
  %238 = load float*, float** %237, align 8
  %239 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %236, i64 %130, i32 0, i32 1
  %240 = load float*, float** %239, align 8
  %241 = ptrtoint float* %238 to i64
  %242 = icmp eq float* %238, %240
  br i1 %242, label %300, label %243

243:                                              ; preds = %233
  %244 = getelementptr inbounds float, float* %238, i64 1
  %245 = ptrtoint float* %244 to i64
  %246 = icmp eq float* %244, %240
  br i1 %246, label %300, label %247

247:                                              ; preds = %243
  %248 = load float, float* %244, align 4
  %249 = load float, float* %238, align 4
  %250 = fcmp olt float %248, %249
  %251 = select i1 %250, i64 %245, i64 %241
  %252 = select i1 %250, i64 %241, i64 %245
  %253 = getelementptr inbounds float, float* %238, i64 2
  %254 = icmp eq float* %253, %240
  br i1 %254, label %300, label %255

255:                                              ; preds = %247, %294
  %256 = phi float* [ %297, %294 ], [ %253, %247 ]
  %257 = phi i64 [ %296, %294 ], [ %252, %247 ]
  %258 = phi float* [ %256, %294 ], [ %238, %247 ]
  %259 = phi i64 [ %295, %294 ], [ %251, %247 ]
  %260 = ptrtoint float* %256 to i64
  %261 = getelementptr inbounds float, float* %258, i64 3
  %262 = ptrtoint float* %261 to i64
  %263 = icmp eq float* %261, %240
  br i1 %263, label %264, label %274

264:                                              ; preds = %255
  %265 = ptrtoint float* %256 to i64
  %266 = inttoptr i64 %259 to float*
  %267 = load float, float* %256, align 4
  %268 = load float, float* %266, align 4
  %269 = fcmp olt float %267, %268
  br i1 %269, label %300, label %270

270:                                              ; preds = %264
  %271 = inttoptr i64 %257 to float*
  %272 = load float, float* %271, align 4
  %273 = fcmp olt float %267, %272
  br i1 %273, label %299, label %300

274:                                              ; preds = %255
  %275 = load float, float* %261, align 4
  %276 = load float, float* %256, align 4
  %277 = fcmp olt float %275, %276
  %278 = inttoptr i64 %259 to float*
  %279 = load float, float* %278, align 4
  br i1 %277, label %280, label %287

280:                                              ; preds = %274
  %281 = fcmp olt float %275, %279
  %282 = select i1 %281, i64 %262, i64 %259
  %283 = inttoptr i64 %257 to float*
  %284 = load float, float* %283, align 4
  %285 = fcmp olt float %276, %284
  br i1 %285, label %294, label %286

286:                                              ; preds = %280
  br label %294

287:                                              ; preds = %274
  %288 = fcmp olt float %276, %279
  %289 = select i1 %288, i64 %260, i64 %259
  %290 = inttoptr i64 %257 to float*
  %291 = load float, float* %290, align 4
  %292 = fcmp olt float %275, %291
  br i1 %292, label %294, label %293

293:                                              ; preds = %287
  br label %294

294:                                              ; preds = %293, %287, %286, %280
  %295 = phi i64 [ %282, %280 ], [ %282, %286 ], [ %289, %287 ], [ %289, %293 ]
  %296 = phi i64 [ %257, %280 ], [ %260, %286 ], [ %257, %287 ], [ %262, %293 ]
  %297 = getelementptr inbounds float, float* %256, i64 2
  %298 = icmp eq float* %297, %240
  br i1 %298, label %300, label %255

299:                                              ; preds = %270
  br label %300

300:                                              ; preds = %294, %299, %270, %264, %247, %243, %233
  %301 = phi i64 [ %259, %299 ], [ %241, %243 ], [ %241, %233 ], [ %265, %264 ], [ %259, %270 ], [ %251, %247 ], [ %295, %294 ]
  %302 = phi i64 [ %257, %299 ], [ %241, %243 ], [ %241, %233 ], [ %257, %264 ], [ %265, %270 ], [ %252, %247 ], [ %296, %294 ]
  %303 = inttoptr i64 %301 to float*
  %304 = inttoptr i64 %302 to float*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %123)
  %305 = load float, float* %303, align 4
  %306 = tail call float @llvm.fabs.f32(float %305) #5
  store float %306, float* %4, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %124)
  %307 = load float, float* %304, align 4
  %308 = tail call float @llvm.fabs.f32(float %307) #5
  store float %308, float* %5, align 4
  %309 = fcmp olt float %306, %308
  %310 = select i1 %309, float* %5, float* %4
  %311 = bitcast float* %310 to i32*
  %312 = load i32, i32* %311, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %124)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %123)
  %313 = load i64, i64* %121, align 8
  %314 = sub i64 %313, %177
  %315 = sdiv exact i64 %314, 24
  %316 = icmp ugt i64 %315, 1
  %317 = bitcast i32 %312 to float
  br i1 %316, label %342, label %425

318:                                              ; preds = %219, %318
  %319 = phi i64 [ %340, %318 ], [ %220, %219 ]
  %320 = phi float [ %339, %318 ], [ %221, %219 ]
  %321 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %148, i64 %130, i32 0, i64 %319
  %322 = load float, float* %321, align 4
  %323 = fcmp olt float %322, %320
  %324 = select i1 %323, float %320, float %322
  %325 = add nsw i64 %319, 1
  %326 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %148, i64 %130, i32 0, i64 %325
  %327 = load float, float* %326, align 4
  %328 = fcmp olt float %327, %324
  %329 = select i1 %328, float %324, float %327
  %330 = add nsw i64 %319, 2
  %331 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %148, i64 %130, i32 0, i64 %330
  %332 = load float, float* %331, align 4
  %333 = fcmp olt float %332, %329
  %334 = select i1 %333, float %329, float %332
  %335 = add nsw i64 %319, 3
  %336 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %148, i64 %130, i32 0, i64 %335
  %337 = load float, float* %336, align 4
  %338 = fcmp olt float %337, %334
  %339 = select i1 %338, float %334, float %337
  %340 = add nsw i64 %319, 4
  %341 = icmp slt i64 %340, %202
  br i1 %341, label %318, label %233

342:                                              ; preds = %300
  %343 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %128, i64 1, i32 0, i32 0
  %344 = load %"class.std::__1::vector.4"*, %"class.std::__1::vector.4"** %343, align 8
  %345 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %344, i64 %130, i32 0, i32 0
  %346 = load float*, float** %345, align 8
  %347 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %344, i64 %130, i32 0, i32 1
  %348 = load float*, float** %347, align 8
  %349 = ptrtoint float* %346 to i64
  %350 = icmp eq float* %346, %348
  br i1 %350, label %408, label %351

351:                                              ; preds = %342
  %352 = getelementptr inbounds float, float* %346, i64 1
  %353 = ptrtoint float* %352 to i64
  %354 = icmp eq float* %352, %348
  br i1 %354, label %408, label %355

355:                                              ; preds = %351
  %356 = load float, float* %352, align 4
  %357 = load float, float* %346, align 4
  %358 = fcmp olt float %356, %357
  %359 = select i1 %358, i64 %353, i64 %349
  %360 = select i1 %358, i64 %349, i64 %353
  %361 = getelementptr inbounds float, float* %346, i64 2
  %362 = icmp eq float* %361, %348
  br i1 %362, label %408, label %363

363:                                              ; preds = %355, %402
  %364 = phi float* [ %405, %402 ], [ %361, %355 ]
  %365 = phi i64 [ %404, %402 ], [ %360, %355 ]
  %366 = phi float* [ %364, %402 ], [ %346, %355 ]
  %367 = phi i64 [ %403, %402 ], [ %359, %355 ]
  %368 = ptrtoint float* %364 to i64
  %369 = getelementptr inbounds float, float* %366, i64 3
  %370 = ptrtoint float* %369 to i64
  %371 = icmp eq float* %369, %348
  br i1 %371, label %372, label %382

372:                                              ; preds = %363
  %373 = ptrtoint float* %364 to i64
  %374 = inttoptr i64 %367 to float*
  %375 = load float, float* %364, align 4
  %376 = load float, float* %374, align 4
  %377 = fcmp olt float %375, %376
  br i1 %377, label %408, label %378

378:                                              ; preds = %372
  %379 = inttoptr i64 %365 to float*
  %380 = load float, float* %379, align 4
  %381 = fcmp olt float %375, %380
  br i1 %381, label %407, label %408

382:                                              ; preds = %363
  %383 = load float, float* %369, align 4
  %384 = load float, float* %364, align 4
  %385 = fcmp olt float %383, %384
  %386 = inttoptr i64 %367 to float*
  %387 = load float, float* %386, align 4
  br i1 %385, label %388, label %395

388:                                              ; preds = %382
  %389 = fcmp olt float %383, %387
  %390 = select i1 %389, i64 %370, i64 %367
  %391 = inttoptr i64 %365 to float*
  %392 = load float, float* %391, align 4
  %393 = fcmp olt float %384, %392
  br i1 %393, label %402, label %394

394:                                              ; preds = %388
  br label %402

395:                                              ; preds = %382
  %396 = fcmp olt float %384, %387
  %397 = select i1 %396, i64 %368, i64 %367
  %398 = inttoptr i64 %365 to float*
  %399 = load float, float* %398, align 4
  %400 = fcmp olt float %383, %399
  br i1 %400, label %402, label %401

401:                                              ; preds = %395
  br label %402

402:                                              ; preds = %401, %395, %394, %388
  %403 = phi i64 [ %390, %388 ], [ %390, %394 ], [ %397, %395 ], [ %397, %401 ]
  %404 = phi i64 [ %365, %388 ], [ %368, %394 ], [ %365, %395 ], [ %370, %401 ]
  %405 = getelementptr inbounds float, float* %364, i64 2
  %406 = icmp eq float* %405, %348
  br i1 %406, label %408, label %363

407:                                              ; preds = %378
  br label %408

408:                                              ; preds = %402, %407, %378, %372, %355, %351, %342
  %409 = phi i64 [ %367, %407 ], [ %349, %351 ], [ %349, %342 ], [ %373, %372 ], [ %367, %378 ], [ %359, %355 ], [ %403, %402 ]
  %410 = phi i64 [ %365, %407 ], [ %349, %351 ], [ %349, %342 ], [ %365, %372 ], [ %373, %378 ], [ %360, %355 ], [ %404, %402 ]
  %411 = inttoptr i64 %409 to float*
  %412 = inttoptr i64 %410 to float*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %125)
  %413 = load float, float* %411, align 4
  %414 = tail call float @llvm.fabs.f32(float %413) #5
  store float %414, float* %6, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %126)
  %415 = load float, float* %412, align 4
  %416 = tail call float @llvm.fabs.f32(float %415) #5
  store float %416, float* %7, align 4
  %417 = fcmp olt float %414, %416
  %418 = select i1 %417, float* %7, float* %6
  %419 = bitcast float* %418 to i32*
  %420 = load i32, i32* %419, align 4
  %421 = bitcast i32 %420 to float
  %422 = fcmp olt float %317, %421
  %423 = select i1 %422, i32 %420, i32 %312
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %126)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %125)
  %424 = bitcast i32 %423 to float
  br label %425

425:                                              ; preds = %408, %300
  %426 = phi float [ %424, %408 ], [ %317, %300 ]
  %427 = shl i64 %180, 30
  %428 = ashr exact i64 %427, 32
  %429 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %148, i64 %130, i32 0, i64 %428
  %430 = load float, float* %429, align 4
  %431 = icmp sgt i32 %182, 0
  %432 = fcmp ogt float %426, 1.000000e+02
  %433 = and i1 %431, %432
  br i1 %433, label %434, label %442

434:                                              ; preds = %425
  %435 = fmul float %234, 1.000000e+02
  %436 = fcmp ogt float %430, %435
  %437 = fcmp ogt float %430, %129
  %438 = and i1 %437, %436
  br i1 %438, label %439, label %442

439:                                              ; preds = %434
  %440 = or i64 %427, 1
  store i64 %440, i64* %122, align 4
  store i64 0, i64* %86, align 8
  %441 = load %"class.std::__1::vector.2"*, %"class.std::__1::vector.2"** %110, align 8
  br label %442

442:                                              ; preds = %439, %434, %425
  %443 = phi %"class.std::__1::vector.2"* [ %441, %439 ], [ %128, %434 ], [ %128, %425 ]
  %444 = phi float [ %430, %439 ], [ %129, %434 ], [ %129, %425 ]
  %445 = add nuw i64 %130, 1
  %446 = getelementptr inbounds %"class.std::__1::vector.2", %"class.std::__1::vector.2"* %443, i64 0, i32 0, i32 1
  %447 = bitcast %"class.std::__1::vector.4"** %446 to i64*
  %448 = load i64, i64* %447, align 8
  %449 = bitcast %"class.std::__1::vector.2"* %443 to i64*
  %450 = load i64, i64* %449, align 8
  %451 = sub i64 %448, %450
  %452 = sdiv exact i64 %451, 24
  %453 = icmp ult i64 %445, %452
  br i1 %453, label %127, label %454

454:                                              ; preds = %442, %98
  ret void

455:                                              ; preds = %80
  %456 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %8, i64 0, i32 0, i64 %71
  %457 = load i64, i64* %456, align 8
  %458 = icmp eq i64 %457, 0
  br i1 %458, label %463, label %459

459:                                              ; preds = %455
  %460 = getelementptr inbounds %"class.webrtc::RenderSignalAnalyzer", %"class.webrtc::RenderSignalAnalyzer"* %0, i64 0, i32 1, i32 0, i64 %71
  %461 = load i64, i64* %460, align 8
  %462 = add i64 %461, 1
  br label %463

463:                                              ; preds = %459, %455
  %464 = phi i64 [ %462, %459 ], [ 0, %455 ]
  %465 = getelementptr inbounds %"class.webrtc::RenderSignalAnalyzer", %"class.webrtc::RenderSignalAnalyzer"* %0, i64 0, i32 1, i32 0, i64 %71
  store i64 %464, i64* %465, align 8
  %466 = add nuw nsw i64 %71, 2
  br label %70
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK6webrtc20RenderSignalAnalyzer28MaskRegionsAroundNarrowBandsEPNSt3__15arrayIfLm65EEE(%"class.webrtc::RenderSignalAnalyzer"* nocapture readonly, %"struct.std::__1::array.26"* nocapture) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::RenderSignalAnalyzer", %"class.webrtc::RenderSignalAnalyzer"* %0, i64 0, i32 1, i32 0, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, 5
  br i1 %5, label %7, label %6

6:                                                ; preds = %7, %2
  br label %14

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %1, i64 0, i32 0, i64 0
  store float 0.000000e+00, float* %8, align 4
  %9 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %1, i64 0, i32 0, i64 1
  store float 0.000000e+00, float* %9, align 4
  br label %6

10:                                               ; preds = %26
  %11 = getelementptr inbounds %"class.webrtc::RenderSignalAnalyzer", %"class.webrtc::RenderSignalAnalyzer"* %0, i64 0, i32 1, i32 0, i64 62
  %12 = load i64, i64* %11, align 8
  %13 = icmp ugt i64 %12, 5
  br i1 %13, label %29, label %32

14:                                               ; preds = %43, %6
  %15 = phi i64 [ 2, %6 ], [ %44, %43 ]
  %16 = add nsw i64 %15, -1
  %17 = getelementptr inbounds %"class.webrtc::RenderSignalAnalyzer", %"class.webrtc::RenderSignalAnalyzer"* %0, i64 0, i32 1, i32 0, i64 %16
  %18 = load i64, i64* %17, align 8
  %19 = icmp ugt i64 %18, 5
  br i1 %19, label %20, label %26

20:                                               ; preds = %14
  %21 = add nuw nsw i64 %15, 2
  %22 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %1, i64 0, i32 0, i64 %21
  store float 0.000000e+00, float* %22, align 4
  %23 = add nsw i64 %15, -2
  %24 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %1, i64 0, i32 0, i64 %23
  %25 = bitcast float* %24 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %25, align 4
  br label %26

26:                                               ; preds = %14, %20
  %27 = or i64 %15, 1
  %28 = icmp eq i64 %27, 63
  br i1 %28, label %10, label %33

29:                                               ; preds = %10
  %30 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %1, i64 0, i32 0, i64 63
  store float 0.000000e+00, float* %30, align 4
  %31 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %1, i64 0, i32 0, i64 64
  store float 0.000000e+00, float* %31, align 4
  br label %32

32:                                               ; preds = %29, %10
  ret void

33:                                               ; preds = %26
  %34 = getelementptr inbounds %"class.webrtc::RenderSignalAnalyzer", %"class.webrtc::RenderSignalAnalyzer"* %0, i64 0, i32 1, i32 0, i64 %15
  %35 = load i64, i64* %34, align 8
  %36 = icmp ugt i64 %35, 5
  br i1 %36, label %37, label %43

37:                                               ; preds = %33
  %38 = add nuw nsw i64 %15, 3
  %39 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %1, i64 0, i32 0, i64 %38
  store float 0.000000e+00, float* %39, align 4
  %40 = add nsw i64 %15, -1
  %41 = getelementptr inbounds %"struct.std::__1::array.26", %"struct.std::__1::array.26"* %1, i64 0, i32 0, i64 %40
  %42 = bitcast float* %41 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %42, align 4
  br label %43

43:                                               ; preds = %33, %37
  %44 = add nuw nsw i64 %15, 2
  br label %14
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
