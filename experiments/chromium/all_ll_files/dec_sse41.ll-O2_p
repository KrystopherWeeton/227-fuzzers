; ModuleID = '../../third_party/libwebp/src/dsp/dec_sse41.c'
source_filename = "../../third_party/libwebp/src/dsp/dec_sse41.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@VP8PredLuma16 = external local_unnamed_addr global [0 x void (i8*)*], align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @VP8DspInitSSE41() local_unnamed_addr #0 {
  store void (i8*)* @HE16_SSE41, void (i8*)** getelementptr inbounds ([0 x void (i8*)*], [0 x void (i8*)*]* @VP8PredLuma16, i64 0, i64 3), align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @HE16_SSE41(i8* nocapture) #1 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -4
  %3 = bitcast i8* %2 to i32*
  %4 = load i32, i32* %3, align 1
  %5 = insertelement <4 x i32> undef, i32 %4, i32 0
  %6 = bitcast <4 x i32> %5 to <16 x i8>
  %7 = shufflevector <16 x i8> %6, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %8 = bitcast i8* %0 to <16 x i8>*
  store <16 x i8> %7, <16 x i8>* %8, align 1
  %9 = getelementptr inbounds i8, i8* %0, i64 32
  %10 = getelementptr inbounds i8, i8* %0, i64 28
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 1
  %13 = insertelement <4 x i32> undef, i32 %12, i32 0
  %14 = bitcast <4 x i32> %13 to <16 x i8>
  %15 = shufflevector <16 x i8> %14, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %16 = bitcast i8* %9 to <16 x i8>*
  store <16 x i8> %15, <16 x i8>* %16, align 1
  %17 = getelementptr inbounds i8, i8* %0, i64 64
  %18 = getelementptr inbounds i8, i8* %0, i64 60
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 1
  %21 = insertelement <4 x i32> undef, i32 %20, i32 0
  %22 = bitcast <4 x i32> %21 to <16 x i8>
  %23 = shufflevector <16 x i8> %22, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %24 = bitcast i8* %17 to <16 x i8>*
  store <16 x i8> %23, <16 x i8>* %24, align 1
  %25 = getelementptr inbounds i8, i8* %0, i64 96
  %26 = getelementptr inbounds i8, i8* %0, i64 92
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 1
  %29 = insertelement <4 x i32> undef, i32 %28, i32 0
  %30 = bitcast <4 x i32> %29 to <16 x i8>
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %32 = bitcast i8* %25 to <16 x i8>*
  store <16 x i8> %31, <16 x i8>* %32, align 1
  %33 = getelementptr inbounds i8, i8* %0, i64 128
  %34 = getelementptr inbounds i8, i8* %0, i64 124
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 1
  %37 = insertelement <4 x i32> undef, i32 %36, i32 0
  %38 = bitcast <4 x i32> %37 to <16 x i8>
  %39 = shufflevector <16 x i8> %38, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %40 = bitcast i8* %33 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %0, i64 160
  %42 = getelementptr inbounds i8, i8* %0, i64 156
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 1
  %45 = insertelement <4 x i32> undef, i32 %44, i32 0
  %46 = bitcast <4 x i32> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %48 = bitcast i8* %41 to <16 x i8>*
  store <16 x i8> %47, <16 x i8>* %48, align 1
  %49 = getelementptr inbounds i8, i8* %0, i64 192
  %50 = getelementptr inbounds i8, i8* %0, i64 188
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = insertelement <4 x i32> undef, i32 %52, i32 0
  %54 = bitcast <4 x i32> %53 to <16 x i8>
  %55 = shufflevector <16 x i8> %54, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %56 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %55, <16 x i8>* %56, align 1
  %57 = getelementptr inbounds i8, i8* %0, i64 224
  %58 = getelementptr inbounds i8, i8* %0, i64 220
  %59 = bitcast i8* %58 to i32*
  %60 = load i32, i32* %59, align 1
  %61 = insertelement <4 x i32> undef, i32 %60, i32 0
  %62 = bitcast <4 x i32> %61 to <16 x i8>
  %63 = shufflevector <16 x i8> %62, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %64 = bitcast i8* %57 to <16 x i8>*
  store <16 x i8> %63, <16 x i8>* %64, align 1
  %65 = getelementptr inbounds i8, i8* %0, i64 256
  %66 = getelementptr inbounds i8, i8* %0, i64 252
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 1
  %69 = insertelement <4 x i32> undef, i32 %68, i32 0
  %70 = bitcast <4 x i32> %69 to <16 x i8>
  %71 = shufflevector <16 x i8> %70, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %72 = bitcast i8* %65 to <16 x i8>*
  store <16 x i8> %71, <16 x i8>* %72, align 1
  %73 = getelementptr inbounds i8, i8* %0, i64 288
  %74 = getelementptr inbounds i8, i8* %0, i64 284
  %75 = bitcast i8* %74 to i32*
  %76 = load i32, i32* %75, align 1
  %77 = insertelement <4 x i32> undef, i32 %76, i32 0
  %78 = bitcast <4 x i32> %77 to <16 x i8>
  %79 = shufflevector <16 x i8> %78, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %80 = bitcast i8* %73 to <16 x i8>*
  store <16 x i8> %79, <16 x i8>* %80, align 1
  %81 = getelementptr inbounds i8, i8* %0, i64 320
  %82 = getelementptr inbounds i8, i8* %0, i64 316
  %83 = bitcast i8* %82 to i32*
  %84 = load i32, i32* %83, align 1
  %85 = insertelement <4 x i32> undef, i32 %84, i32 0
  %86 = bitcast <4 x i32> %85 to <16 x i8>
  %87 = shufflevector <16 x i8> %86, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %88 = bitcast i8* %81 to <16 x i8>*
  store <16 x i8> %87, <16 x i8>* %88, align 1
  %89 = getelementptr inbounds i8, i8* %0, i64 352
  %90 = getelementptr inbounds i8, i8* %0, i64 348
  %91 = bitcast i8* %90 to i32*
  %92 = load i32, i32* %91, align 1
  %93 = insertelement <4 x i32> undef, i32 %92, i32 0
  %94 = bitcast <4 x i32> %93 to <16 x i8>
  %95 = shufflevector <16 x i8> %94, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %96, align 1
  %97 = getelementptr inbounds i8, i8* %0, i64 384
  %98 = getelementptr inbounds i8, i8* %0, i64 380
  %99 = bitcast i8* %98 to i32*
  %100 = load i32, i32* %99, align 1
  %101 = insertelement <4 x i32> undef, i32 %100, i32 0
  %102 = bitcast <4 x i32> %101 to <16 x i8>
  %103 = shufflevector <16 x i8> %102, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %104 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %104, align 1
  %105 = getelementptr inbounds i8, i8* %0, i64 416
  %106 = getelementptr inbounds i8, i8* %0, i64 412
  %107 = bitcast i8* %106 to i32*
  %108 = load i32, i32* %107, align 1
  %109 = insertelement <4 x i32> undef, i32 %108, i32 0
  %110 = bitcast <4 x i32> %109 to <16 x i8>
  %111 = shufflevector <16 x i8> %110, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %112 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %112, align 1
  %113 = getelementptr inbounds i8, i8* %0, i64 448
  %114 = getelementptr inbounds i8, i8* %0, i64 444
  %115 = bitcast i8* %114 to i32*
  %116 = load i32, i32* %115, align 1
  %117 = insertelement <4 x i32> undef, i32 %116, i32 0
  %118 = bitcast <4 x i32> %117 to <16 x i8>
  %119 = shufflevector <16 x i8> %118, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %120 = bitcast i8* %113 to <16 x i8>*
  store <16 x i8> %119, <16 x i8>* %120, align 1
  %121 = getelementptr inbounds i8, i8* %0, i64 480
  %122 = getelementptr inbounds i8, i8* %0, i64 476
  %123 = bitcast i8* %122 to i32*
  %124 = load i32, i32* %123, align 1
  %125 = insertelement <4 x i32> undef, i32 %124, i32 0
  %126 = bitcast <4 x i32> %125 to <16 x i8>
  %127 = shufflevector <16 x i8> %126, <16 x i8> undef, <16 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %128 = bitcast i8* %121 to <16 x i8>*
  store <16 x i8> %127, <16 x i8>* %128, align 1
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
