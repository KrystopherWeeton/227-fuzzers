; ModuleID = '../../third_party/ffmpeg/libavformat/oggparseogm.c'
source_filename = "../../third_party/ffmpeg/libavformat/oggparseogm.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.ogg_codec = type { i8*, i8, i8*, i32 (%struct.AVFormatContext*, i32)*, i32 (%struct.AVFormatContext*, i32)*, i64 (%struct.AVFormatContext*, i32, i64, i64*)*, i32, i32, void (%struct.AVFormatContext*, i32)* }
%struct.AVFormatContext = type { %struct.AVClass*, %struct.AVInputFormat*, %struct.AVOutputFormat*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i8*, i8*, %struct.AVFormatInternal*, i32, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, i32, i8*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i64, i8*, i32, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)*, i8*, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)*, void (%struct.AVFormatContext*, %struct.AVIOContext*)*, i8*, i32, i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVInputFormat = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, i8*, %struct.AVInputFormat*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i32)*, i64 (%struct.AVFormatContext*, i32, i64*, i64)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i64, i64, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)* }
%struct.AVCodecTag = type { i32, i32 }
%struct.AVProbeData = type { i8*, i8*, i32, i8* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVDeviceInfoList = type opaque
%struct.AVDeviceCapabilitiesQuery = type opaque
%struct.AVOutputFormat = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat*, i32, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext*, i32, i64*, i64*)*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i32 (%struct.AVFormatContext*, i32, %struct.AVFrame**, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32, i32 (%struct.AVFormatContext*)*, void (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)* }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVRational = type { i32, i32 }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVStream = type { i32, i32, %struct.AVCodecContext*, i8*, %struct.AVRational, i64, i64, i64, i32, i32, %struct.AVRational, %struct.AVDictionary*, %struct.AVRational, %struct.AVPacket, %struct.AVPacketSideData*, i32, i32, %struct.AVRational, i8*, %struct.AVCodecParameters*, i8*, i32, i64, i64, i64, i32, i32, i32, i32, %struct.AVCodecParserContext*, i8*, %struct.AVProbeData, [17 x i64], i8*, i32, i32, i32, i32, i32, i32, %struct.AVStreamInternal* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVStreamInternal = type { i32, %struct.AVBSFContext*, i32, %struct.AVCodecContext*, i32, i32, %struct.anon, i32, i32, %struct.FFFrac*, %struct.anon.0*, %struct.AVIndexEntry*, i32, i32, i64, i64, i32, i32, i32, i64, i64, i64, i32, i64, i64, i32, i32, [17 x i64], [17 x i8], [17 x i64], i64, i8, i8, i32, %struct.AVRational, %struct.AVProbeData, %struct.AVPacketList* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.anon = type { %struct.AVBSFContext*, %struct.AVPacket*, i32 }
%struct.FFFrac = type { i64, i64, i64 }
%struct.anon.0 = type { i64, i64, i32, i64, [2 x [399 x double]]*, i64, i64, i32, i32, i64, i64, i32, i64, i32 }
%struct.AVIndexEntry = type { i64, i64, i32, i32 }
%struct.AVPacketList = type { %struct.AVPacket, %struct.AVPacketList* }
%struct.AVProgram = type { i32, i32, i32, i32*, i32, %struct.AVDictionary*, i32, i32, i32, i32, i64, i64, i64, i32 }
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVDictionary = type opaque
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.AVFormatInternal = type { i32, %struct.AVPacketList*, %struct.AVPacketList*, i64, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, i32, i64, %struct.AVRational, i32, i32, i32, i64, i32, i32, %struct.AVDictionary*, i32, i32 }
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.ogg = type { %struct.ogg_stream*, i32, i32, i32, i64, %struct.ogg_state* }
%struct.ogg_stream = type { i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, %struct.ogg_codec*, i32, i32, i32, [255 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i8* }
%struct.ogg_state = type { i64, i32, %struct.ogg_state*, i32, [1 x %struct.ogg_stream] }

@.str = private unnamed_addr constant [7 x i8] c"\01video\00", align 1
@ff_ogm_video_codec = hidden local_unnamed_addr constant %struct.ogg_codec { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i8 6, i8* null, i32 (%struct.AVFormatContext*, i32)* @ogm_header, i32 (%struct.AVFormatContext*, i32)* @ogm_packet, i64 (%struct.AVFormatContext*, i32, i64, i64*)* null, i32 1, i32 2, void (%struct.AVFormatContext*, i32)* null }, align 8
@.str.1 = private unnamed_addr constant [7 x i8] c"\01audio\00", align 1
@ff_ogm_audio_codec = hidden local_unnamed_addr constant %struct.ogg_codec { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i8 6, i8* null, i32 (%struct.AVFormatContext*, i32)* @ogm_header, i32 (%struct.AVFormatContext*, i32)* @ogm_packet, i64 (%struct.AVFormatContext*, i32, i64, i64*)* null, i32 1, i32 2, void (%struct.AVFormatContext*, i32)* null }, align 8
@.str.2 = private unnamed_addr constant [6 x i8] c"\01text\00", align 1
@ff_ogm_text_codec = hidden local_unnamed_addr constant %struct.ogg_codec { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8 5, i8* null, i32 (%struct.AVFormatContext*, i32)* @ogm_header, i32 (%struct.AVFormatContext*, i32)* @ogm_packet, i64 (%struct.AVFormatContext*, i32, i64, i64*)* null, i32 1, i32 2, void (%struct.AVFormatContext*, i32)* null }, align 8
@.str.3 = private unnamed_addr constant [37 x i8] c"\01Direct Show Samples embedded in Ogg\00", align 1
@ff_ogm_old_codec = hidden local_unnamed_addr constant %struct.ogg_codec { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i32 0, i32 0), i8 35, i8* null, i32 (%struct.AVFormatContext*, i32)* @ogm_dshow_header, i32 (%struct.AVFormatContext*, i32)* @ogm_packet, i64 (%struct.AVFormatContext*, i32, i64, i64*)* null, i32 1, i32 1, void (%struct.AVFormatContext*, i32)* null }, align 8
@ff_codec_bmp_tags = external constant [0 x %struct.AVCodecTag], align 4
@ff_codec_wav_tags = external constant [0 x %struct.AVCodecTag], align 4
@.str.4 = private unnamed_addr constant [24 x i8] c"Invalid timing values.\0A\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"buf_size >= 0\00", align 1
@.str.7 = private unnamed_addr constant [49 x i8] c"../../third_party/ffmpeg/libavcodec/bytestream.h\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal i32 @ogm_header(%struct.AVFormatContext*, i32) #0 {
  %3 = alloca [5 x i8], align 4
  %4 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %5 = bitcast i8** %4 to %struct.ogg**
  %6 = load %struct.ogg*, %struct.ogg** %5, align 8
  %7 = getelementptr inbounds %struct.ogg, %struct.ogg* %6, i64 0, i32 0
  %8 = load %struct.ogg_stream*, %struct.ogg_stream** %7, align 8
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 7
  %11 = load %struct.AVStream**, %struct.AVStream*** %10, align 8
  %12 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %11, i64 %9
  %13 = load %struct.AVStream*, %struct.AVStream** %12, align 8
  %14 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %8, i64 %9, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %8, i64 %9, i32 3
  %17 = load i32, i32* %16, align 8
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %15, i64 %18
  %20 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %8, i64 %9, i32 4
  %21 = load i32, i32* %20, align 4
  %22 = icmp sgt i32 %21, -1
  br i1 %22, label %24, label %23

23:                                               ; preds = %2
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.7, i64 0, i64 0), i32 141) #6
  tail call void @abort() #7
  unreachable

24:                                               ; preds = %2
  %25 = sext i32 %21 to i64
  %26 = getelementptr inbounds i8, i8* %19, i64 %25
  %27 = ptrtoint i8* %26 to i64
  %28 = icmp eq i32 %21, 0
  br i1 %28, label %288, label %29

29:                                               ; preds = %24
  %30 = load i8, i8* %19, align 1
  %31 = and i8 %30, 1
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %288, label %33

33:                                               ; preds = %29
  switch i8 %30, label %288 [
    i8 1, label %34
    i8 3, label %277
  ]

34:                                               ; preds = %33
  %35 = icmp slt i64 %25, 1
  %36 = select i1 %35, i64 %25, i64 1
  %37 = getelementptr inbounds i8, i8* %19, i64 %36
  %38 = ptrtoint i8* %37 to i64
  %39 = sub i64 %27, %38
  %40 = icmp slt i64 %39, 1
  br i1 %40, label %82, label %41

41:                                               ; preds = %34
  %42 = load i8, i8* %37, align 1
  switch i8 %42, label %82 [
    i8 118, label %43
    i8 116, label %72
  ]

43:                                               ; preds = %41
  %44 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %13, i64 0, i32 19
  %45 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %44, align 8
  %46 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %45, i64 0, i32 0
  store i32 0, i32* %46, align 8
  %47 = icmp slt i64 %39, 8
  %48 = select i1 %47, i64 %39, i64 8
  %49 = getelementptr inbounds i8, i8* %37, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = sub i64 %27, %50
  %52 = icmp slt i64 %51, 4
  br i1 %52, label %58, label %53

53:                                               ; preds = %43
  %54 = getelementptr inbounds i8, i8* %49, i64 4
  %55 = ptrtoint i8* %54 to i64
  %56 = bitcast i8* %49 to i32*
  %57 = load i32, i32* %56, align 1
  br label %58

58:                                               ; preds = %43, %53
  %59 = phi i64 [ %55, %53 ], [ %27, %43 ]
  %60 = phi i32 [ %57, %53 ], [ 0, %43 ]
  %61 = tail call i32 @ff_codec_get_id(%struct.AVCodecTag* getelementptr inbounds ([0 x %struct.AVCodecTag], [0 x %struct.AVCodecTag]* @ff_codec_bmp_tags, i64 0, i64 0), i32 %60) #6
  %62 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %44, align 8
  %63 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %62, i64 0, i32 1
  store i32 %61, i32* %63, align 4
  %64 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %44, align 8
  %65 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %64, i64 0, i32 2
  store i32 %60, i32* %65, align 8
  %66 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %44, align 8
  %67 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %66, i64 0, i32 1
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 12
  br i1 %69, label %70, label %112

70:                                               ; preds = %58
  %71 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %13, i64 0, i32 28
  store i32 2, i32* %71, align 4
  br label %112

72:                                               ; preds = %41
  %73 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %13, i64 0, i32 19
  %74 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %73, align 8
  %75 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %74, i64 0, i32 0
  store i32 3, i32* %75, align 8
  %76 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %73, align 8
  %77 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %76, i64 0, i32 1
  store i32 94210, i32* %77, align 4
  %78 = icmp slt i64 %39, 12
  %79 = select i1 %78, i64 %39, i64 12
  %80 = getelementptr inbounds i8, i8* %37, i64 %79
  %81 = ptrtoint i8* %80 to i64
  br label %112

82:                                               ; preds = %41, %34
  %83 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %83) #6
  %84 = bitcast [5 x i8]* %3 to i32*
  store i32 0, i32* %84, align 4
  %85 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %13, i64 0, i32 19
  %86 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %85, align 8
  %87 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %86, i64 0, i32 0
  store i32 1, i32* %87, align 8
  %88 = icmp slt i64 %39, 8
  %89 = select i1 %88, i64 %39, i64 8
  %90 = getelementptr inbounds i8, i8* %37, i64 %89
  %91 = ptrtoint i8* %90 to i64
  %92 = sub i64 %27, %91
  %93 = icmp slt i64 %92, 4
  %94 = select i1 %93, i64 %92, i64 4
  %95 = shl i64 %94, 32
  %96 = ashr exact i64 %95, 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %83, i8* align 1 %90, i64 %96, i1 false) #6
  %97 = getelementptr inbounds i8, i8* %90, i64 %96
  %98 = ptrtoint i8* %97 to i64
  %99 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 4
  store i8 0, i8* %99, align 4
  %100 = call i64 @strtol(i8* nocapture nonnull %83, i8** null, i32 16) #6
  %101 = trunc i64 %100 to i32
  %102 = tail call i32 @ff_codec_get_id(%struct.AVCodecTag* getelementptr inbounds ([0 x %struct.AVCodecTag], [0 x %struct.AVCodecTag]* @ff_codec_wav_tags, i64 0, i64 0), i32 %101) #6
  %103 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %85, align 8
  %104 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %103, i64 0, i32 1
  store i32 %102, i32* %104, align 4
  %105 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %85, align 8
  %106 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %105, i64 0, i32 1
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 86018
  br i1 %108, label %111, label %109

109:                                              ; preds = %82
  %110 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %13, i64 0, i32 28
  store i32 1, i32* %110, align 4
  br label %111

111:                                              ; preds = %82, %109
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %83) #6
  br label %112

112:                                              ; preds = %58, %70, %72, %111
  %113 = phi i64 [ %59, %70 ], [ %59, %58 ], [ %81, %72 ], [ %98, %111 ]
  %114 = sub i64 %27, %113
  %115 = icmp slt i64 %114, 4
  br i1 %115, label %122, label %116

116:                                              ; preds = %112
  %117 = inttoptr i64 %113 to i8*
  %118 = getelementptr inbounds i8, i8* %117, i64 4
  %119 = ptrtoint i8* %118 to i64
  %120 = inttoptr i64 %113 to i32*
  %121 = load i32, i32* %120, align 1
  br label %122

122:                                              ; preds = %112, %116
  %123 = phi i64 [ %119, %116 ], [ %27, %112 ]
  %124 = phi i32 [ %121, %116 ], [ 0, %112 ]
  %125 = load i32, i32* %20, align 4
  %126 = icmp ugt i32 %124, %125
  %127 = select i1 %126, i32 %125, i32 %124
  %128 = sub i64 %27, %123
  %129 = icmp slt i64 %128, 8
  br i1 %129, label %136, label %130

130:                                              ; preds = %122
  %131 = inttoptr i64 %123 to i8*
  %132 = getelementptr inbounds i8, i8* %131, i64 8
  %133 = ptrtoint i8* %132 to i64
  %134 = inttoptr i64 %123 to i64*
  %135 = load i64, i64* %134, align 1
  br label %136

136:                                              ; preds = %122, %130
  %137 = phi i64 [ %133, %130 ], [ %27, %122 ]
  %138 = phi i64 [ %135, %130 ], [ 0, %122 ]
  %139 = sub i64 %27, %137
  %140 = icmp slt i64 %139, 8
  br i1 %140, label %149, label %141

141:                                              ; preds = %136
  %142 = inttoptr i64 %137 to i8*
  %143 = getelementptr inbounds i8, i8* %142, i64 8
  %144 = inttoptr i64 %137 to i64*
  %145 = load i64, i64* %144, align 1
  %146 = icmp ne i64 %138, 0
  %147 = icmp ne i64 %145, 0
  %148 = and i1 %146, %147
  br i1 %148, label %151, label %149

149:                                              ; preds = %136, %141
  %150 = bitcast %struct.AVFormatContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %150, i32 16, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0)) #6
  br label %288

151:                                              ; preds = %141
  %152 = ptrtoint i8* %143 to i64
  %153 = sub i64 %27, %152
  %154 = icmp slt i64 %153, 4
  %155 = select i1 %154, i64 %153, i64 4
  %156 = getelementptr inbounds i8, i8* %143, i64 %155
  %157 = ptrtoint i8* %156 to i64
  %158 = sub i64 %27, %157
  %159 = icmp slt i64 %158, 8
  %160 = select i1 %159, i64 %158, i64 8
  %161 = getelementptr inbounds i8, i8* %156, i64 %160
  %162 = ptrtoint i8* %161 to i64
  %163 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %13, i64 0, i32 19
  %164 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %163, align 8
  %165 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %164, i64 0, i32 0
  %166 = load i32, i32* %165, align 8
  %167 = icmp eq i32 %166, 0
  %168 = sub i64 %27, %162
  br i1 %167, label %169, label %192

169:                                              ; preds = %151
  %170 = icmp slt i64 %168, 4
  br i1 %170, label %176, label %171

171:                                              ; preds = %169
  %172 = getelementptr inbounds i8, i8* %161, i64 4
  %173 = ptrtoint i8* %172 to i64
  %174 = bitcast i8* %161 to i32*
  %175 = load i32, i32* %174, align 1
  br label %176

176:                                              ; preds = %169, %171
  %177 = phi i64 [ %173, %171 ], [ %27, %169 ]
  %178 = phi i32 [ %175, %171 ], [ 0, %169 ]
  %179 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %164, i64 0, i32 11
  store i32 %178, i32* %179, align 8
  %180 = sub i64 %27, %177
  %181 = icmp slt i64 %180, 4
  br i1 %181, label %185, label %182

182:                                              ; preds = %176
  %183 = inttoptr i64 %177 to i32*
  %184 = load i32, i32* %183, align 1
  br label %185

185:                                              ; preds = %176, %182
  %186 = phi i32 [ %184, %182 ], [ 0, %176 ]
  %187 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %163, align 8
  %188 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %187, i64 0, i32 12
  store i32 %186, i32* %188, align 4
  %189 = trunc i64 %138 to i32
  %190 = trunc i64 %145 to i32
  %191 = mul i32 %190, 10000000
  tail call void @avpriv_set_pts_info(%struct.AVStream* %13, i32 64, i32 %189, i32 %191) #6
  br label %273

192:                                              ; preds = %151
  %193 = icmp slt i64 %168, 2
  br i1 %193, label %200, label %194

194:                                              ; preds = %192
  %195 = getelementptr inbounds i8, i8* %161, i64 2
  %196 = ptrtoint i8* %195 to i64
  %197 = bitcast i8* %161 to i16*
  %198 = load i16, i16* %197, align 1
  %199 = zext i16 %198 to i32
  br label %200

200:                                              ; preds = %192, %194
  %201 = phi i64 [ %196, %194 ], [ %27, %192 ]
  %202 = phi i32 [ %199, %194 ], [ 0, %192 ]
  %203 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %164, i64 0, i32 22
  store i32 %202, i32* %203, align 8
  %204 = sub i64 %27, %201
  %205 = icmp slt i64 %204, 2
  %206 = select i1 %205, i64 %204, i64 2
  %207 = inttoptr i64 %201 to i8*
  %208 = getelementptr inbounds i8, i8* %207, i64 %206
  %209 = ptrtoint i8* %208 to i64
  %210 = sub i64 %27, %209
  %211 = icmp slt i64 %210, 4
  br i1 %211, label %219, label %212

212:                                              ; preds = %200
  %213 = getelementptr inbounds i8, i8* %208, i64 4
  %214 = ptrtoint i8* %213 to i64
  %215 = bitcast i8* %208 to i32*
  %216 = load i32, i32* %215, align 1
  %217 = shl i32 %216, 3
  %218 = zext i32 %217 to i64
  br label %219

219:                                              ; preds = %200, %212
  %220 = phi i64 [ %214, %212 ], [ %27, %200 ]
  %221 = phi i64 [ %218, %212 ], [ 0, %200 ]
  %222 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %163, align 8
  %223 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %222, i64 0, i32 6
  store i64 %221, i64* %223, align 8
  %224 = mul i64 %145, 10000000
  %225 = udiv i64 %224, %138
  %226 = trunc i64 %225 to i32
  %227 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %163, align 8
  %228 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %227, i64 0, i32 23
  store i32 %226, i32* %228, align 4
  %229 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %163, align 8
  %230 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %229, i64 0, i32 23
  %231 = load i32, i32* %230, align 4
  tail call void @avpriv_set_pts_info(%struct.AVStream* %13, i32 64, i32 1, i32 %231) #6
  %232 = icmp ugt i32 %127, 55
  br i1 %232, label %233, label %246

233:                                              ; preds = %219
  %234 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %163, align 8
  %235 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %234, i64 0, i32 1
  %236 = load i32, i32* %235, align 4
  %237 = icmp eq i32 %236, 86018
  br i1 %237, label %238, label %250

238:                                              ; preds = %233
  %239 = sub i64 %27, %220
  %240 = icmp slt i64 %239, 4
  %241 = select i1 %240, i64 %239, i64 4
  %242 = inttoptr i64 %220 to i8*
  %243 = getelementptr inbounds i8, i8* %242, i64 %241
  %244 = ptrtoint i8* %243 to i64
  %245 = add i32 %127, -4
  br label %246

246:                                              ; preds = %238, %219
  %247 = phi i64 [ %244, %238 ], [ %220, %219 ]
  %248 = phi i32 [ %245, %238 ], [ %127, %219 ]
  %249 = icmp ugt i32 %248, 52
  br i1 %249, label %250, label %273

250:                                              ; preds = %233, %246
  %251 = phi i32 [ %248, %246 ], [ %127, %233 ]
  %252 = phi i64 [ %247, %246 ], [ %220, %233 ]
  %253 = add i32 %251, -52
  %254 = sub i64 %27, %252
  %255 = trunc i64 %254 to i32
  %256 = icmp ugt i32 %253, %255
  br i1 %256, label %288, label %257

257:                                              ; preds = %250
  %258 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %163, align 8
  %259 = tail call i32 @ff_alloc_extradata(%struct.AVCodecParameters* %258, i32 %253) #6
  %260 = icmp slt i32 %259, 0
  br i1 %260, label %288, label %261

261:                                              ; preds = %257
  %262 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %163, align 8
  %263 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %262, i64 0, i32 3
  %264 = load i8*, i8** %263, align 8
  %265 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %262, i64 0, i32 4
  %266 = load i32, i32* %265, align 8
  %267 = zext i32 %266 to i64
  %268 = icmp sgt i64 %254, %267
  %269 = select i1 %268, i64 %267, i64 %254
  %270 = inttoptr i64 %252 to i8*
  %271 = shl i64 %269, 32
  %272 = ashr exact i64 %271, 32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %264, i8* align 1 %270, i64 %272, i1 false) #6
  br label %273

273:                                              ; preds = %246, %261, %185
  %274 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %13, i64 0, i32 40
  %275 = load %struct.AVStreamInternal*, %struct.AVStreamInternal** %274, align 8
  %276 = getelementptr inbounds %struct.AVStreamInternal, %struct.AVStreamInternal* %275, i64 0, i32 7
  store i32 1, i32* %276, align 8
  br label %288

277:                                              ; preds = %33
  %278 = icmp slt i64 %25, 7
  %279 = select i1 %278, i64 %25, i64 7
  %280 = getelementptr inbounds i8, i8* %19, i64 %279
  %281 = ptrtoint i8* %280 to i64
  %282 = sub i64 %27, %281
  %283 = trunc i64 %282 to i32
  %284 = icmp sgt i32 %283, 1
  br i1 %284, label %285, label %288

285:                                              ; preds = %277
  %286 = add nsw i32 %283, -1
  %287 = tail call i32 @ff_vorbis_stream_comment(%struct.AVFormatContext* %0, %struct.AVStream* %13, i8* %280, i32 %286) #6
  br label %288

288:                                              ; preds = %33, %24, %273, %277, %285, %257, %250, %29, %149
  %289 = phi i32 [ -1094995529, %149 ], [ 0, %29 ], [ -1094995529, %250 ], [ %259, %257 ], [ 1, %285 ], [ 1, %277 ], [ 1, %273 ], [ 0, %24 ], [ 1, %33 ]
  ret i32 %289
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @ogm_packet(%struct.AVFormatContext* nocapture readonly, i32) #1 {
  %3 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %4 = bitcast i8** %3 to %struct.ogg**
  %5 = load %struct.ogg*, %struct.ogg** %4, align 8
  %6 = getelementptr inbounds %struct.ogg, %struct.ogg* %5, i64 0, i32 0
  %7 = load %struct.ogg_stream*, %struct.ogg_stream** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %10, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = and i8 %15, 8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %23, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 5
  %20 = load i32, i32* %19, align 8
  %21 = or i32 %20, 1
  store i32 %21, i32* %19, align 8
  %22 = load i8, i8* %14, align 1
  br label %23

23:                                               ; preds = %2, %18
  %24 = phi i8 [ %15, %2 ], [ %22, %18 ]
  %25 = zext i8 %24 to i32
  %26 = shl nuw nsw i32 %25, 1
  %27 = and i32 %26, 4
  %28 = lshr i32 %25, 6
  %29 = or i32 %27, %28
  %30 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 4
  %31 = load i32, i32* %30, align 4
  %32 = add nuw nsw i32 %29, 1
  %33 = icmp ugt i32 %31, %29
  br i1 %33, label %34, label %53

34:                                               ; preds = %23
  %35 = add i32 %32, %12
  store i32 %35, i32* %11, align 8
  %36 = sub i32 %31, %32
  store i32 %36, i32* %30, align 4
  %37 = icmp eq i32 %29, 0
  br i1 %37, label %53, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 6
  %40 = zext i32 %29 to i64
  %41 = load i32, i32* %39, align 4
  %42 = add nsw i64 %40, -1
  %43 = getelementptr inbounds i8, i8* %14, i64 %40
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i64
  %46 = shl nuw nsw i32 %29, 3
  %47 = add nsw i32 %46, -8
  %48 = zext i32 %47 to i64
  %49 = shl i64 %45, %48
  %50 = trunc i64 %49 to i32
  %51 = add i32 %41, %50
  store i32 %51, i32* %39, align 4
  %52 = icmp eq i64 %42, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %38, %55, %67, %79, %91, %103, %115, %34, %23
  %54 = phi i32 [ -1094995529, %23 ], [ 0, %34 ], [ 0, %115 ], [ 0, %103 ], [ 0, %91 ], [ 0, %79 ], [ 0, %67 ], [ 0, %55 ], [ 0, %38 ]
  ret i32 %54

55:                                               ; preds = %38
  %56 = add nsw i64 %40, -2
  %57 = getelementptr inbounds i8, i8* %14, i64 %42
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i64
  %60 = shl nuw nsw i32 %29, 3
  %61 = add nsw i32 %60, -16
  %62 = zext i32 %61 to i64
  %63 = shl i64 %59, %62
  %64 = trunc i64 %63 to i32
  %65 = add i32 %51, %64
  store i32 %65, i32* %39, align 4
  %66 = icmp eq i64 %56, 0
  br i1 %66, label %53, label %67

67:                                               ; preds = %55
  %68 = add nsw i64 %40, -3
  %69 = getelementptr inbounds i8, i8* %14, i64 %56
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i64
  %72 = shl nuw nsw i32 %29, 3
  %73 = add nsw i32 %72, -24
  %74 = zext i32 %73 to i64
  %75 = shl i64 %71, %74
  %76 = trunc i64 %75 to i32
  %77 = add i32 %65, %76
  store i32 %77, i32* %39, align 4
  %78 = icmp eq i64 %68, 0
  br i1 %78, label %53, label %79

79:                                               ; preds = %67
  %80 = add nsw i64 %40, -4
  %81 = getelementptr inbounds i8, i8* %14, i64 %68
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i64
  %84 = shl nuw nsw i32 %29, 3
  %85 = add nsw i32 %84, -32
  %86 = zext i32 %85 to i64
  %87 = shl i64 %83, %86
  %88 = trunc i64 %87 to i32
  %89 = add i32 %77, %88
  store i32 %89, i32* %39, align 4
  %90 = icmp eq i64 %80, 0
  br i1 %90, label %53, label %91

91:                                               ; preds = %79
  %92 = add nsw i64 %40, -5
  %93 = getelementptr inbounds i8, i8* %14, i64 %80
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i64
  %96 = shl nuw nsw i32 %29, 3
  %97 = add nsw i32 %96, -40
  %98 = zext i32 %97 to i64
  %99 = shl i64 %95, %98
  %100 = trunc i64 %99 to i32
  %101 = add i32 %89, %100
  store i32 %101, i32* %39, align 4
  %102 = icmp eq i64 %92, 0
  br i1 %102, label %53, label %103

103:                                              ; preds = %91
  %104 = add nsw i64 %40, -6
  %105 = getelementptr inbounds i8, i8* %14, i64 %92
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i64
  %108 = shl nuw nsw i32 %29, 3
  %109 = add nsw i32 %108, -48
  %110 = zext i32 %109 to i64
  %111 = shl i64 %107, %110
  %112 = trunc i64 %111 to i32
  %113 = add i32 %101, %112
  store i32 %113, i32* %39, align 4
  %114 = icmp eq i64 %104, 0
  br i1 %114, label %53, label %115

115:                                              ; preds = %103
  %116 = getelementptr inbounds i8, i8* %14, i64 %104
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i64
  %119 = shl nuw nsw i32 %29, 3
  %120 = add nsw i32 %119, -56
  %121 = zext i32 %120 to i64
  %122 = shl i64 %118, %121
  %123 = trunc i64 %122 to i32
  %124 = add i32 %113, %123
  store i32 %124, i32* %39, align 4
  br label %53
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ogm_dshow_header(%struct.AVFormatContext* nocapture readonly, i32) #0 {
  %3 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %4 = bitcast i8** %3 to %struct.ogg**
  %5 = load %struct.ogg*, %struct.ogg** %4, align 8
  %6 = getelementptr inbounds %struct.ogg, %struct.ogg* %5, i64 0, i32 0
  %7 = load %struct.ogg_stream*, %struct.ogg_stream** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 7
  %10 = load %struct.AVStream**, %struct.AVStream*** %9, align 8
  %11 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %10, i64 %8
  %12 = load %struct.AVStream*, %struct.AVStream** %11, align 8
  %13 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %14, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = and i8 %19, 1
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %89, label %22

22:                                               ; preds = %2
  %23 = icmp eq i8 %19, 1
  br i1 %23, label %24, label %89

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 4
  %26 = load i32, i32* %25, align 4
  %27 = icmp ult i32 %26, 100
  br i1 %27, label %89, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds i8, i8* %18, i64 96
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 1
  switch i32 %31, label %89 [
    i32 89694080, label %32
    i32 89694081, label %58
  ]

32:                                               ; preds = %28
  %33 = icmp ult i32 %26, 184
  br i1 %33, label %89, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 19
  %36 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %35, align 8
  %37 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %36, i64 0, i32 0
  store i32 0, i32* %37, align 8
  %38 = getelementptr inbounds i8, i8* %18, i64 68
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 1
  %41 = tail call i32 @ff_codec_get_id(%struct.AVCodecTag* getelementptr inbounds ([0 x %struct.AVCodecTag], [0 x %struct.AVCodecTag]* @ff_codec_bmp_tags, i64 0, i64 0), i32 %40) #6
  %42 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %35, align 8
  %43 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %42, i64 0, i32 1
  store i32 %41, i32* %43, align 4
  %44 = getelementptr inbounds i8, i8* %18, i64 164
  %45 = bitcast i8* %44 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = trunc i64 %46 to i32
  tail call void @avpriv_set_pts_info(%struct.AVStream* %12, i32 64, i32 %47, i32 10000000) #6
  %48 = getelementptr inbounds i8, i8* %18, i64 176
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %35, align 8
  %52 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %51, i64 0, i32 11
  store i32 %50, i32* %52, align 8
  %53 = getelementptr inbounds i8, i8* %18, i64 180
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 1
  %56 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %35, align 8
  %57 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %56, i64 0, i32 12
  store i32 %55, i32* %57, align 4
  br label %89

58:                                               ; preds = %28
  %59 = icmp ult i32 %26, 136
  br i1 %59, label %89, label %60

60:                                               ; preds = %58
  %61 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 19
  %62 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %61, align 8
  %63 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %62, i64 0, i32 0
  store i32 1, i32* %63, align 8
  %64 = getelementptr inbounds i8, i8* %18, i64 124
  %65 = bitcast i8* %64 to i16*
  %66 = load i16, i16* %65, align 1
  %67 = zext i16 %66 to i32
  %68 = tail call i32 @ff_codec_get_id(%struct.AVCodecTag* getelementptr inbounds ([0 x %struct.AVCodecTag], [0 x %struct.AVCodecTag]* @ff_codec_wav_tags, i64 0, i64 0), i32 %67) #6
  %69 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %61, align 8
  %70 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %69, i64 0, i32 1
  store i32 %68, i32* %70, align 4
  %71 = getelementptr inbounds i8, i8* %18, i64 126
  %72 = bitcast i8* %71 to i16*
  %73 = load i16, i16* %72, align 1
  %74 = zext i16 %73 to i32
  %75 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %61, align 8
  %76 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %75, i64 0, i32 22
  store i32 %74, i32* %76, align 8
  %77 = getelementptr inbounds i8, i8* %18, i64 128
  %78 = bitcast i8* %77 to i32*
  %79 = load i32, i32* %78, align 1
  %80 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %61, align 8
  %81 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %80, i64 0, i32 23
  store i32 %79, i32* %81, align 4
  %82 = getelementptr inbounds i8, i8* %18, i64 132
  %83 = bitcast i8* %82 to i32*
  %84 = load i32, i32* %83, align 1
  %85 = shl i32 %84, 3
  %86 = zext i32 %85 to i64
  %87 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %61, align 8
  %88 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %87, i64 0, i32 6
  store i64 %86, i64* %88, align 8
  br label %89

89:                                               ; preds = %34, %60, %28, %58, %32, %24, %22, %2
  %90 = phi i32 [ 0, %2 ], [ 1, %22 ], [ -1094995529, %24 ], [ -1094995529, %32 ], [ -1094995529, %58 ], [ 1, %28 ], [ 1, %60 ], [ 1, %34 ]
  ret i32 %90
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @ff_codec_get_id(%struct.AVCodecTag*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #4

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #3

declare void @avpriv_set_pts_info(%struct.AVStream*, i32, i32, i32) local_unnamed_addr #3

declare i32 @ff_alloc_extradata(%struct.AVCodecParameters*, i32) local_unnamed_addr #3

declare i32 @ff_vorbis_stream_comment(%struct.AVFormatContext*, %struct.AVStream*, i8*, i32) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
