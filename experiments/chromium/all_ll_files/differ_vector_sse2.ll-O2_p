; ModuleID = '../../third_party/webrtc/modules/desktop_capture/differ_vector_sse2.cc'
source_filename = "../../third_party/webrtc/modules/desktop_capture/differ_vector_sse2.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN6webrtc25VectorDifference_SSE2_W16EPKhS1_(i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %3 = bitcast i8* %0 to <16 x i8>*
  %4 = load <16 x i8>, <16 x i8>* %3, align 1
  %5 = bitcast i8* %1 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %4, <16 x i8> %6) #3
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <16 x i8>*
  %10 = load <16 x i8>, <16 x i8>* %9, align 1
  %11 = getelementptr inbounds i8, i8* %1, i64 16
  %12 = bitcast i8* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %10, <16 x i8> %13) #3
  %15 = bitcast <2 x i64> %7 to <8 x i16>
  %16 = bitcast <2 x i64> %14 to <8 x i16>
  %17 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %15, <8 x i16> %16) #3
  %18 = getelementptr inbounds i8, i8* %0, i64 32
  %19 = bitcast i8* %18 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 1
  %21 = getelementptr inbounds i8, i8* %1, i64 32
  %22 = bitcast i8* %21 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %20, <16 x i8> %23) #3
  %25 = bitcast <2 x i64> %24 to <8 x i16>
  %26 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %17, <8 x i16> %25) #3
  %27 = getelementptr inbounds i8, i8* %0, i64 48
  %28 = bitcast i8* %27 to <16 x i8>*
  %29 = load <16 x i8>, <16 x i8>* %28, align 1
  %30 = getelementptr inbounds i8, i8* %1, i64 48
  %31 = bitcast i8* %30 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %29, <16 x i8> %32) #3
  %34 = bitcast <2 x i64> %33 to <8 x i16>
  %35 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %26, <8 x i16> %34) #3
  %36 = bitcast <8 x i16> %35 to <4 x i32>
  %37 = shufflevector <4 x i32> %36, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %38 = bitcast <4 x i32> %37 to <8 x i16>
  %39 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %38, <8 x i16> %35) #3
  %40 = bitcast <8 x i16> %39 to <4 x i32>
  %41 = extractelement <4 x i32> %40, i32 0
  %42 = icmp ne i32 %41, 0
  ret i1 %42
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN6webrtc25VectorDifference_SSE2_W32EPKhS1_(i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %3 = bitcast i8* %0 to <16 x i8>*
  %4 = load <16 x i8>, <16 x i8>* %3, align 1
  %5 = bitcast i8* %1 to <16 x i8>*
  %6 = load <16 x i8>, <16 x i8>* %5, align 1
  %7 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %4, <16 x i8> %6) #3
  %8 = getelementptr inbounds i8, i8* %0, i64 16
  %9 = bitcast i8* %8 to <16 x i8>*
  %10 = load <16 x i8>, <16 x i8>* %9, align 1
  %11 = getelementptr inbounds i8, i8* %1, i64 16
  %12 = bitcast i8* %11 to <16 x i8>*
  %13 = load <16 x i8>, <16 x i8>* %12, align 1
  %14 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %10, <16 x i8> %13) #3
  %15 = bitcast <2 x i64> %7 to <8 x i16>
  %16 = bitcast <2 x i64> %14 to <8 x i16>
  %17 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %15, <8 x i16> %16) #3
  %18 = getelementptr inbounds i8, i8* %0, i64 32
  %19 = bitcast i8* %18 to <16 x i8>*
  %20 = load <16 x i8>, <16 x i8>* %19, align 1
  %21 = getelementptr inbounds i8, i8* %1, i64 32
  %22 = bitcast i8* %21 to <16 x i8>*
  %23 = load <16 x i8>, <16 x i8>* %22, align 1
  %24 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %20, <16 x i8> %23) #3
  %25 = bitcast <2 x i64> %24 to <8 x i16>
  %26 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %17, <8 x i16> %25) #3
  %27 = getelementptr inbounds i8, i8* %0, i64 48
  %28 = bitcast i8* %27 to <16 x i8>*
  %29 = load <16 x i8>, <16 x i8>* %28, align 1
  %30 = getelementptr inbounds i8, i8* %1, i64 48
  %31 = bitcast i8* %30 to <16 x i8>*
  %32 = load <16 x i8>, <16 x i8>* %31, align 1
  %33 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %29, <16 x i8> %32) #3
  %34 = bitcast <2 x i64> %33 to <8 x i16>
  %35 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %26, <8 x i16> %34) #3
  %36 = getelementptr inbounds i8, i8* %0, i64 64
  %37 = bitcast i8* %36 to <16 x i8>*
  %38 = load <16 x i8>, <16 x i8>* %37, align 1
  %39 = getelementptr inbounds i8, i8* %1, i64 64
  %40 = bitcast i8* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1
  %42 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %38, <16 x i8> %41) #3
  %43 = bitcast <2 x i64> %42 to <8 x i16>
  %44 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %35, <8 x i16> %43) #3
  %45 = getelementptr inbounds i8, i8* %0, i64 80
  %46 = bitcast i8* %45 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1
  %48 = getelementptr inbounds i8, i8* %1, i64 80
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1
  %51 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %47, <16 x i8> %50) #3
  %52 = bitcast <2 x i64> %51 to <8 x i16>
  %53 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %44, <8 x i16> %52) #3
  %54 = getelementptr inbounds i8, i8* %0, i64 96
  %55 = bitcast i8* %54 to <16 x i8>*
  %56 = load <16 x i8>, <16 x i8>* %55, align 1
  %57 = getelementptr inbounds i8, i8* %1, i64 96
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %56, <16 x i8> %59) #3
  %61 = bitcast <2 x i64> %60 to <8 x i16>
  %62 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %53, <8 x i16> %61) #3
  %63 = getelementptr inbounds i8, i8* %0, i64 112
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1
  %66 = getelementptr inbounds i8, i8* %1, i64 112
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = tail call <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8> %65, <16 x i8> %68) #3
  %70 = bitcast <2 x i64> %69 to <8 x i16>
  %71 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %62, <8 x i16> %70) #3
  %72 = bitcast <8 x i16> %71 to <4 x i32>
  %73 = shufflevector <4 x i32> %72, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 2, i32 3>
  %74 = bitcast <4 x i32> %73 to <8 x i16>
  %75 = tail call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %74, <8 x i16> %71) #3
  %76 = bitcast <8 x i16> %75 to <4 x i32>
  %77 = extractelement <4 x i32> %76, i32 0
  %78 = icmp ne i32 %77, 0
  ret i1 %78
}

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.x86.sse2.psad.bw(<16 x i8>, <16 x i8>) #1

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
