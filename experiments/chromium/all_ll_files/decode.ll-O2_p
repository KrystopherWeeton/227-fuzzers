; ModuleID = '../../third_party/brotli/dec/decode.c'
source_filename = "../../third_party/brotli/dec/decode.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.BrotliPrefixCodeRange = type { i16, i8 }
%struct.CmdLutElement = type { i8, i8, i8, i8, i16, i16 }
%struct.BrotliDecoderStateStruct = type { i32, i32, %struct.BrotliBitReader, i8* (i8*, i64)*, void (i8*, i8*)*, i8*, %union.anon, i32, i32, i32, i32, i32, i32, i32, [4 x i32], i32, i8*, i8*, %struct.HuffmanCode*, i8*, i8*, i8*, %struct.HuffmanTreeGroup, %struct.HuffmanTreeGroup, %struct.HuffmanTreeGroup, %struct.HuffmanCode*, %struct.HuffmanCode*, i32, i32, i32, i32, [3 x i32], [3 x i32], [6 x i32], i32, i32, i32, i8*, %struct.HuffmanCode*, i8, i32, i32, i64, i64, i32, [65 x i32], i32, i32, i32, i32, i16, i32, i32, i32, i8*, i8*, %struct.BrotliDictionary*, %struct.BrotliTransforms*, [8 x i32], %union.anon.0 }
%struct.BrotliBitReader = type { i64, i32, i8*, i64 }
%union.anon = type { i64 }
%struct.HuffmanTreeGroup = type { %struct.HuffmanCode**, %struct.HuffmanCode*, i16, i16, i16 }
%struct.HuffmanCode = type { i8, i16 }
%struct.BrotliDictionary = type { [32 x i8], [32 x i32], i64, i8* }
%struct.BrotliTransforms = type { i16, i8*, i16*, i32, i8*, i8*, [10 x i16] }
%union.anon.0 = type { %struct.BrotliMetablockHeaderArena }
%struct.BrotliMetablockHeaderArena = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, [32 x %struct.HuffmanCode], i16*, [720 x i16], [32 x i32], [18 x i8], [16 x i16], i32, %struct.HuffmanCode*, i32, i32, i32, [646 x %struct.HuffmanCode] }

@.str = private unnamed_addr constant [9 x i8] c"NO_ERROR\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"SUCCESS\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"NEEDS_MORE_INPUT\00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c"NEEDS_MORE_OUTPUT\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"EXUBERANT_NIBBLE\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"RESERVED\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"EXUBERANT_META_NIBBLE\00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"SIMPLE_HUFFMAN_ALPHABET\00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"SIMPLE_HUFFMAN_SAME\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"CL_SPACE\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c"HUFFMAN_SPACE\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"CONTEXT_MAP_REPEAT\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"BLOCK_LENGTH_1\00", align 1
@.str.13 = private unnamed_addr constant [15 x i8] c"BLOCK_LENGTH_2\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"TRANSFORM\00", align 1
@.str.15 = private unnamed_addr constant [11 x i8] c"DICTIONARY\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"WINDOW_BITS\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"PADDING_1\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"PADDING_2\00", align 1
@.str.19 = private unnamed_addr constant [9 x i8] c"DISTANCE\00", align 1
@.str.20 = private unnamed_addr constant [19 x i8] c"DICTIONARY_NOT_SET\00", align 1
@.str.21 = private unnamed_addr constant [18 x i8] c"INVALID_ARGUMENTS\00", align 1
@.str.22 = private unnamed_addr constant [14 x i8] c"CONTEXT_MODES\00", align 1
@.str.23 = private unnamed_addr constant [12 x i8] c"TREE_GROUPS\00", align 1
@.str.24 = private unnamed_addr constant [12 x i8] c"CONTEXT_MAP\00", align 1
@.str.25 = private unnamed_addr constant [14 x i8] c"RING_BUFFER_1\00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"RING_BUFFER_2\00", align 1
@.str.27 = private unnamed_addr constant [17 x i8] c"BLOCK_TYPE_TREES\00", align 1
@.str.28 = private unnamed_addr constant [12 x i8] c"UNREACHABLE\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"INVALID\00", align 1
@kCodeLengthCodeOrder = internal unnamed_addr constant [18 x i8] c"\01\02\03\04\00\05\11\06\10\07\08\09\0A\0B\0C\0D\0E\0F", align 16
@kCodeLengthPrefixLength = internal unnamed_addr constant [16 x i8] c"\02\02\02\03\02\02\02\04\02\02\02\03\02\02\02\04", align 16
@kCodeLengthPrefixValue = internal unnamed_addr constant [16 x i8] c"\00\04\03\02\00\04\03\01\00\04\03\02\00\04\03\05", align 16
@_kBrotliPrefixCodeRanges = external local_unnamed_addr constant [26 x %struct.BrotliPrefixCodeRange], align 16
@kBrotliBitMask = external hidden local_unnamed_addr constant [33 x i32], align 16
@_kBrotliContextLookupTable = external constant [2048 x i8], align 16
@kCmdLut = internal unnamed_addr constant [704 x %struct.CmdLutElement] [%struct.CmdLutElement { i8 0, i8 0, i8 0, i8 0, i16 0, i16 2 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 1, i16 0, i16 3 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 2, i16 0, i16 4 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 0, i16 5 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 0, i16 6 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 0, i16 7 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 0, i16 8 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 0, i16 9 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 0, i16 1, i16 2 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 1, i16 1, i16 3 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 2, i16 1, i16 4 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 1, i16 5 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 1, i16 6 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 1, i16 7 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 1, i16 8 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 1, i16 9 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 0, i16 2, i16 2 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 1, i16 2, i16 3 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 2, i16 2, i16 4 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 2, i16 5 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 2, i16 6 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 2, i16 7 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 2, i16 8 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 2, i16 9 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 0, i16 3, i16 2 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 1, i16 3, i16 3 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 2, i16 3, i16 4 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 3, i16 5 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 3, i16 6 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 3, i16 7 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 3, i16 8 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 3, i16 9 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 0, i16 4, i16 2 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 1, i16 4, i16 3 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 2, i16 4, i16 4 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 4, i16 5 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 4, i16 6 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 4, i16 7 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 4, i16 8 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 4, i16 9 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 0, i16 5, i16 2 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 1, i16 5, i16 3 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 2, i16 5, i16 4 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 5, i16 5 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 5, i16 6 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 5, i16 7 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 5, i16 8 }, %struct.CmdLutElement { i8 0, i8 0, i8 0, i8 3, i16 5, i16 9 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 0, i16 6, i16 2 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 1, i16 6, i16 3 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 2, i16 6, i16 4 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 3, i16 6, i16 5 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 3, i16 6, i16 6 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 3, i16 6, i16 7 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 3, i16 6, i16 8 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 3, i16 6, i16 9 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 0, i16 8, i16 2 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 1, i16 8, i16 3 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 2, i16 8, i16 4 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 3, i16 8, i16 5 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 3, i16 8, i16 6 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 3, i16 8, i16 7 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 3, i16 8, i16 8 }, %struct.CmdLutElement { i8 1, i8 0, i8 0, i8 3, i16 8, i16 9 }, %struct.CmdLutElement { i8 0, i8 1, i8 0, i8 3, i16 0, i16 10 }, %struct.CmdLutElement { i8 0, i8 1, i8 0, i8 3, i16 0, i16 12 }, %struct.CmdLutElement { i8 0, i8 2, i8 0, i8 3, i16 0, i16 14 }, %struct.CmdLutElement { i8 0, i8 2, i8 0, i8 3, i16 0, i16 18 }, %struct.CmdLutElement { i8 0, i8 3, i8 0, i8 3, i16 0, i16 22 }, %struct.CmdLutElement { i8 0, i8 3, i8 0, i8 3, i16 0, i16 30 }, %struct.CmdLutElement { i8 0, i8 4, i8 0, i8 3, i16 0, i16 38 }, %struct.CmdLutElement { i8 0, i8 4, i8 0, i8 3, i16 0, i16 54 }, %struct.CmdLutElement { i8 0, i8 1, i8 0, i8 3, i16 1, i16 10 }, %struct.CmdLutElement { i8 0, i8 1, i8 0, i8 3, i16 1, i16 12 }, %struct.CmdLutElement { i8 0, i8 2, i8 0, i8 3, i16 1, i16 14 }, %struct.CmdLutElement { i8 0, i8 2, i8 0, i8 3, i16 1, i16 18 }, %struct.CmdLutElement { i8 0, i8 3, i8 0, i8 3, i16 1, i16 22 }, %struct.CmdLutElement { i8 0, i8 3, i8 0, i8 3, i16 1, i16 30 }, %struct.CmdLutElement { i8 0, i8 4, i8 0, i8 3, i16 1, i16 38 }, %struct.CmdLutElement { i8 0, i8 4, i8 0, i8 3, i16 1, i16 54 }, %struct.CmdLutElement { i8 0, i8 1, i8 0, i8 3, i16 2, i16 10 }, %struct.CmdLutElement { i8 0, i8 1, i8 0, i8 3, i16 2, i16 12 }, %struct.CmdLutElement { i8 0, i8 2, i8 0, i8 3, i16 2, i16 14 }, %struct.CmdLutElement { i8 0, i8 2, i8 0, i8 3, i16 2, i16 18 }, %struct.CmdLutElement { i8 0, i8 3, i8 0, i8 3, i16 2, i16 22 }, %struct.CmdLutElement { i8 0, i8 3, i8 0, i8 3, i16 2, i16 30 }, %struct.CmdLutElement { i8 0, i8 4, i8 0, i8 3, i16 2, i16 38 }, %struct.CmdLutElement { i8 0, i8 4, i8 0, i8 3, i16 2, i16 54 }, %struct.CmdLutElement { i8 0, i8 1, i8 0, i8 3, i16 3, i16 10 }, %struct.CmdLutElement { i8 0, i8 1, i8 0, i8 3, i16 3, i16 12 }, %struct.CmdLutElement { i8 0, i8 2, i8 0, i8 3, i16 3, i16 14 }, %struct.CmdLutElement { i8 0, i8 2, i8 0, i8 3, i16 3, i16 18 }, %struct.CmdLutElement { i8 0, i8 3, i8 0, i8 3, i16 3, i16 22 }, %struct.CmdLutElement { i8 0, i8 3, i8 0, i8 3, i16 3, i16 30 }, %struct.CmdLutElement { i8 0, i8 4, i8 0, i8 3, i16 3, i16 38 }, %struct.CmdLutElement { i8 0, i8 4, i8 0, i8 3, i16 3, i16 54 }, %struct.CmdLutElement { i8 0, i8 1, i8 0, i8 3, i16 4, i16 10 }, %struct.CmdLutElement { i8 0, i8 1, i8 0, i8 3, i16 4, i16 12 }, %struct.CmdLutElement { i8 0, i8 2, i8 0, i8 3, i16 4, i16 14 }, %struct.CmdLutElement { i8 0, i8 2, i8 0, i8 3, i16 4, i16 18 }, %struct.CmdLutElement { i8 0, i8 3, i8 0, i8 3, i16 4, i16 22 }, %struct.CmdLutElement { i8 0, i8 3, i8 0, i8 3, i16 4, i16 30 }, %struct.CmdLutElement { i8 0, i8 4, i8 0, i8 3, i16 4, i16 38 }, %struct.CmdLutElement { i8 0, i8 4, i8 0, i8 3, i16 4, i16 54 }, %struct.CmdLutElement { i8 0, i8 1, i8 0, i8 3, i16 5, i16 10 }, %struct.CmdLutElement { i8 0, i8 1, i8 0, i8 3, i16 5, i16 12 }, %struct.CmdLutElement { i8 0, i8 2, i8 0, i8 3, i16 5, i16 14 }, %struct.CmdLutElement { i8 0, i8 2, i8 0, i8 3, i16 5, i16 18 }, %struct.CmdLutElement { i8 0, i8 3, i8 0, i8 3, i16 5, i16 22 }, %struct.CmdLutElement { i8 0, i8 3, i8 0, i8 3, i16 5, i16 30 }, %struct.CmdLutElement { i8 0, i8 4, i8 0, i8 3, i16 5, i16 38 }, %struct.CmdLutElement { i8 0, i8 4, i8 0, i8 3, i16 5, i16 54 }, %struct.CmdLutElement { i8 1, i8 1, i8 0, i8 3, i16 6, i16 10 }, %struct.CmdLutElement { i8 1, i8 1, i8 0, i8 3, i16 6, i16 12 }, %struct.CmdLutElement { i8 1, i8 2, i8 0, i8 3, i16 6, i16 14 }, %struct.CmdLutElement { i8 1, i8 2, i8 0, i8 3, i16 6, i16 18 }, %struct.CmdLutElement { i8 1, i8 3, i8 0, i8 3, i16 6, i16 22 }, %struct.CmdLutElement { i8 1, i8 3, i8 0, i8 3, i16 6, i16 30 }, %struct.CmdLutElement { i8 1, i8 4, i8 0, i8 3, i16 6, i16 38 }, %struct.CmdLutElement { i8 1, i8 4, i8 0, i8 3, i16 6, i16 54 }, %struct.CmdLutElement { i8 1, i8 1, i8 0, i8 3, i16 8, i16 10 }, %struct.CmdLutElement { i8 1, i8 1, i8 0, i8 3, i16 8, i16 12 }, %struct.CmdLutElement { i8 1, i8 2, i8 0, i8 3, i16 8, i16 14 }, %struct.CmdLutElement { i8 1, i8 2, i8 0, i8 3, i16 8, i16 18 }, %struct.CmdLutElement { i8 1, i8 3, i8 0, i8 3, i16 8, i16 22 }, %struct.CmdLutElement { i8 1, i8 3, i8 0, i8 3, i16 8, i16 30 }, %struct.CmdLutElement { i8 1, i8 4, i8 0, i8 3, i16 8, i16 38 }, %struct.CmdLutElement { i8 1, i8 4, i8 0, i8 3, i16 8, i16 54 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 0, i16 0, i16 2 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 1, i16 0, i16 3 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 2, i16 0, i16 4 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 0, i16 5 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 0, i16 6 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 0, i16 7 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 0, i16 8 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 0, i16 9 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 0, i16 1, i16 2 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 1, i16 1, i16 3 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 2, i16 1, i16 4 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 1, i16 5 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 1, i16 6 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 1, i16 7 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 1, i16 8 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 1, i16 9 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 0, i16 2, i16 2 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 1, i16 2, i16 3 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 2, i16 2, i16 4 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 2, i16 5 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 2, i16 6 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 2, i16 7 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 2, i16 8 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 2, i16 9 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 0, i16 3, i16 2 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 1, i16 3, i16 3 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 2, i16 3, i16 4 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 3, i16 5 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 3, i16 6 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 3, i16 7 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 3, i16 8 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 3, i16 9 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 0, i16 4, i16 2 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 1, i16 4, i16 3 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 2, i16 4, i16 4 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 4, i16 5 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 4, i16 6 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 4, i16 7 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 4, i16 8 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 4, i16 9 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 0, i16 5, i16 2 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 1, i16 5, i16 3 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 2, i16 5, i16 4 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 5, i16 5 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 5, i16 6 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 5, i16 7 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 5, i16 8 }, %struct.CmdLutElement { i8 0, i8 0, i8 -1, i8 3, i16 5, i16 9 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 0, i16 6, i16 2 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 1, i16 6, i16 3 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 2, i16 6, i16 4 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 3, i16 6, i16 5 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 3, i16 6, i16 6 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 3, i16 6, i16 7 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 3, i16 6, i16 8 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 3, i16 6, i16 9 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 0, i16 8, i16 2 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 1, i16 8, i16 3 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 2, i16 8, i16 4 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 3, i16 8, i16 5 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 3, i16 8, i16 6 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 3, i16 8, i16 7 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 3, i16 8, i16 8 }, %struct.CmdLutElement { i8 1, i8 0, i8 -1, i8 3, i16 8, i16 9 }, %struct.CmdLutElement { i8 0, i8 1, i8 -1, i8 3, i16 0, i16 10 }, %struct.CmdLutElement { i8 0, i8 1, i8 -1, i8 3, i16 0, i16 12 }, %struct.CmdLutElement { i8 0, i8 2, i8 -1, i8 3, i16 0, i16 14 }, %struct.CmdLutElement { i8 0, i8 2, i8 -1, i8 3, i16 0, i16 18 }, %struct.CmdLutElement { i8 0, i8 3, i8 -1, i8 3, i16 0, i16 22 }, %struct.CmdLutElement { i8 0, i8 3, i8 -1, i8 3, i16 0, i16 30 }, %struct.CmdLutElement { i8 0, i8 4, i8 -1, i8 3, i16 0, i16 38 }, %struct.CmdLutElement { i8 0, i8 4, i8 -1, i8 3, i16 0, i16 54 }, %struct.CmdLutElement { i8 0, i8 1, i8 -1, i8 3, i16 1, i16 10 }, %struct.CmdLutElement { i8 0, i8 1, i8 -1, i8 3, i16 1, i16 12 }, %struct.CmdLutElement { i8 0, i8 2, i8 -1, i8 3, i16 1, i16 14 }, %struct.CmdLutElement { i8 0, i8 2, i8 -1, i8 3, i16 1, i16 18 }, %struct.CmdLutElement { i8 0, i8 3, i8 -1, i8 3, i16 1, i16 22 }, %struct.CmdLutElement { i8 0, i8 3, i8 -1, i8 3, i16 1, i16 30 }, %struct.CmdLutElement { i8 0, i8 4, i8 -1, i8 3, i16 1, i16 38 }, %struct.CmdLutElement { i8 0, i8 4, i8 -1, i8 3, i16 1, i16 54 }, %struct.CmdLutElement { i8 0, i8 1, i8 -1, i8 3, i16 2, i16 10 }, %struct.CmdLutElement { i8 0, i8 1, i8 -1, i8 3, i16 2, i16 12 }, %struct.CmdLutElement { i8 0, i8 2, i8 -1, i8 3, i16 2, i16 14 }, %struct.CmdLutElement { i8 0, i8 2, i8 -1, i8 3, i16 2, i16 18 }, %struct.CmdLutElement { i8 0, i8 3, i8 -1, i8 3, i16 2, i16 22 }, %struct.CmdLutElement { i8 0, i8 3, i8 -1, i8 3, i16 2, i16 30 }, %struct.CmdLutElement { i8 0, i8 4, i8 -1, i8 3, i16 2, i16 38 }, %struct.CmdLutElement { i8 0, i8 4, i8 -1, i8 3, i16 2, i16 54 }, %struct.CmdLutElement { i8 0, i8 1, i8 -1, i8 3, i16 3, i16 10 }, %struct.CmdLutElement { i8 0, i8 1, i8 -1, i8 3, i16 3, i16 12 }, %struct.CmdLutElement { i8 0, i8 2, i8 -1, i8 3, i16 3, i16 14 }, %struct.CmdLutElement { i8 0, i8 2, i8 -1, i8 3, i16 3, i16 18 }, %struct.CmdLutElement { i8 0, i8 3, i8 -1, i8 3, i16 3, i16 22 }, %struct.CmdLutElement { i8 0, i8 3, i8 -1, i8 3, i16 3, i16 30 }, %struct.CmdLutElement { i8 0, i8 4, i8 -1, i8 3, i16 3, i16 38 }, %struct.CmdLutElement { i8 0, i8 4, i8 -1, i8 3, i16 3, i16 54 }, %struct.CmdLutElement { i8 0, i8 1, i8 -1, i8 3, i16 4, i16 10 }, %struct.CmdLutElement { i8 0, i8 1, i8 -1, i8 3, i16 4, i16 12 }, %struct.CmdLutElement { i8 0, i8 2, i8 -1, i8 3, i16 4, i16 14 }, %struct.CmdLutElement { i8 0, i8 2, i8 -1, i8 3, i16 4, i16 18 }, %struct.CmdLutElement { i8 0, i8 3, i8 -1, i8 3, i16 4, i16 22 }, %struct.CmdLutElement { i8 0, i8 3, i8 -1, i8 3, i16 4, i16 30 }, %struct.CmdLutElement { i8 0, i8 4, i8 -1, i8 3, i16 4, i16 38 }, %struct.CmdLutElement { i8 0, i8 4, i8 -1, i8 3, i16 4, i16 54 }, %struct.CmdLutElement { i8 0, i8 1, i8 -1, i8 3, i16 5, i16 10 }, %struct.CmdLutElement { i8 0, i8 1, i8 -1, i8 3, i16 5, i16 12 }, %struct.CmdLutElement { i8 0, i8 2, i8 -1, i8 3, i16 5, i16 14 }, %struct.CmdLutElement { i8 0, i8 2, i8 -1, i8 3, i16 5, i16 18 }, %struct.CmdLutElement { i8 0, i8 3, i8 -1, i8 3, i16 5, i16 22 }, %struct.CmdLutElement { i8 0, i8 3, i8 -1, i8 3, i16 5, i16 30 }, %struct.CmdLutElement { i8 0, i8 4, i8 -1, i8 3, i16 5, i16 38 }, %struct.CmdLutElement { i8 0, i8 4, i8 -1, i8 3, i16 5, i16 54 }, %struct.CmdLutElement { i8 1, i8 1, i8 -1, i8 3, i16 6, i16 10 }, %struct.CmdLutElement { i8 1, i8 1, i8 -1, i8 3, i16 6, i16 12 }, %struct.CmdLutElement { i8 1, i8 2, i8 -1, i8 3, i16 6, i16 14 }, %struct.CmdLutElement { i8 1, i8 2, i8 -1, i8 3, i16 6, i16 18 }, %struct.CmdLutElement { i8 1, i8 3, i8 -1, i8 3, i16 6, i16 22 }, %struct.CmdLutElement { i8 1, i8 3, i8 -1, i8 3, i16 6, i16 30 }, %struct.CmdLutElement { i8 1, i8 4, i8 -1, i8 3, i16 6, i16 38 }, %struct.CmdLutElement { i8 1, i8 4, i8 -1, i8 3, i16 6, i16 54 }, %struct.CmdLutElement { i8 1, i8 1, i8 -1, i8 3, i16 8, i16 10 }, %struct.CmdLutElement { i8 1, i8 1, i8 -1, i8 3, i16 8, i16 12 }, %struct.CmdLutElement { i8 1, i8 2, i8 -1, i8 3, i16 8, i16 14 }, %struct.CmdLutElement { i8 1, i8 2, i8 -1, i8 3, i16 8, i16 18 }, %struct.CmdLutElement { i8 1, i8 3, i8 -1, i8 3, i16 8, i16 22 }, %struct.CmdLutElement { i8 1, i8 3, i8 -1, i8 3, i16 8, i16 30 }, %struct.CmdLutElement { i8 1, i8 4, i8 -1, i8 3, i16 8, i16 38 }, %struct.CmdLutElement { i8 1, i8 4, i8 -1, i8 3, i16 8, i16 54 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 0, i16 10, i16 2 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 1, i16 10, i16 3 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 2, i16 10, i16 4 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 3, i16 10, i16 5 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 3, i16 10, i16 6 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 3, i16 10, i16 7 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 3, i16 10, i16 8 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 3, i16 10, i16 9 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 0, i16 14, i16 2 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 1, i16 14, i16 3 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 2, i16 14, i16 4 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 3, i16 14, i16 5 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 3, i16 14, i16 6 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 3, i16 14, i16 7 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 3, i16 14, i16 8 }, %struct.CmdLutElement { i8 2, i8 0, i8 -1, i8 3, i16 14, i16 9 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 0, i16 18, i16 2 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 1, i16 18, i16 3 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 2, i16 18, i16 4 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 3, i16 18, i16 5 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 3, i16 18, i16 6 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 3, i16 18, i16 7 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 3, i16 18, i16 8 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 3, i16 18, i16 9 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 0, i16 26, i16 2 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 1, i16 26, i16 3 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 2, i16 26, i16 4 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 3, i16 26, i16 5 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 3, i16 26, i16 6 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 3, i16 26, i16 7 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 3, i16 26, i16 8 }, %struct.CmdLutElement { i8 3, i8 0, i8 -1, i8 3, i16 26, i16 9 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 0, i16 34, i16 2 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 1, i16 34, i16 3 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 2, i16 34, i16 4 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 3, i16 34, i16 5 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 3, i16 34, i16 6 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 3, i16 34, i16 7 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 3, i16 34, i16 8 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 3, i16 34, i16 9 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 0, i16 50, i16 2 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 1, i16 50, i16 3 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 2, i16 50, i16 4 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 3, i16 50, i16 5 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 3, i16 50, i16 6 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 3, i16 50, i16 7 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 3, i16 50, i16 8 }, %struct.CmdLutElement { i8 4, i8 0, i8 -1, i8 3, i16 50, i16 9 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 0, i16 66, i16 2 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 1, i16 66, i16 3 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 2, i16 66, i16 4 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 3, i16 66, i16 5 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 3, i16 66, i16 6 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 3, i16 66, i16 7 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 3, i16 66, i16 8 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 3, i16 66, i16 9 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 0, i16 98, i16 2 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 1, i16 98, i16 3 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 2, i16 98, i16 4 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 3, i16 98, i16 5 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 3, i16 98, i16 6 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 3, i16 98, i16 7 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 3, i16 98, i16 8 }, %struct.CmdLutElement { i8 5, i8 0, i8 -1, i8 3, i16 98, i16 9 }, %struct.CmdLutElement { i8 2, i8 1, i8 -1, i8 3, i16 10, i16 10 }, %struct.CmdLutElement { i8 2, i8 1, i8 -1, i8 3, i16 10, i16 12 }, %struct.CmdLutElement { i8 2, i8 2, i8 -1, i8 3, i16 10, i16 14 }, %struct.CmdLutElement { i8 2, i8 2, i8 -1, i8 3, i16 10, i16 18 }, %struct.CmdLutElement { i8 2, i8 3, i8 -1, i8 3, i16 10, i16 22 }, %struct.CmdLutElement { i8 2, i8 3, i8 -1, i8 3, i16 10, i16 30 }, %struct.CmdLutElement { i8 2, i8 4, i8 -1, i8 3, i16 10, i16 38 }, %struct.CmdLutElement { i8 2, i8 4, i8 -1, i8 3, i16 10, i16 54 }, %struct.CmdLutElement { i8 2, i8 1, i8 -1, i8 3, i16 14, i16 10 }, %struct.CmdLutElement { i8 2, i8 1, i8 -1, i8 3, i16 14, i16 12 }, %struct.CmdLutElement { i8 2, i8 2, i8 -1, i8 3, i16 14, i16 14 }, %struct.CmdLutElement { i8 2, i8 2, i8 -1, i8 3, i16 14, i16 18 }, %struct.CmdLutElement { i8 2, i8 3, i8 -1, i8 3, i16 14, i16 22 }, %struct.CmdLutElement { i8 2, i8 3, i8 -1, i8 3, i16 14, i16 30 }, %struct.CmdLutElement { i8 2, i8 4, i8 -1, i8 3, i16 14, i16 38 }, %struct.CmdLutElement { i8 2, i8 4, i8 -1, i8 3, i16 14, i16 54 }, %struct.CmdLutElement { i8 3, i8 1, i8 -1, i8 3, i16 18, i16 10 }, %struct.CmdLutElement { i8 3, i8 1, i8 -1, i8 3, i16 18, i16 12 }, %struct.CmdLutElement { i8 3, i8 2, i8 -1, i8 3, i16 18, i16 14 }, %struct.CmdLutElement { i8 3, i8 2, i8 -1, i8 3, i16 18, i16 18 }, %struct.CmdLutElement { i8 3, i8 3, i8 -1, i8 3, i16 18, i16 22 }, %struct.CmdLutElement { i8 3, i8 3, i8 -1, i8 3, i16 18, i16 30 }, %struct.CmdLutElement { i8 3, i8 4, i8 -1, i8 3, i16 18, i16 38 }, %struct.CmdLutElement { i8 3, i8 4, i8 -1, i8 3, i16 18, i16 54 }, %struct.CmdLutElement { i8 3, i8 1, i8 -1, i8 3, i16 26, i16 10 }, %struct.CmdLutElement { i8 3, i8 1, i8 -1, i8 3, i16 26, i16 12 }, %struct.CmdLutElement { i8 3, i8 2, i8 -1, i8 3, i16 26, i16 14 }, %struct.CmdLutElement { i8 3, i8 2, i8 -1, i8 3, i16 26, i16 18 }, %struct.CmdLutElement { i8 3, i8 3, i8 -1, i8 3, i16 26, i16 22 }, %struct.CmdLutElement { i8 3, i8 3, i8 -1, i8 3, i16 26, i16 30 }, %struct.CmdLutElement { i8 3, i8 4, i8 -1, i8 3, i16 26, i16 38 }, %struct.CmdLutElement { i8 3, i8 4, i8 -1, i8 3, i16 26, i16 54 }, %struct.CmdLutElement { i8 4, i8 1, i8 -1, i8 3, i16 34, i16 10 }, %struct.CmdLutElement { i8 4, i8 1, i8 -1, i8 3, i16 34, i16 12 }, %struct.CmdLutElement { i8 4, i8 2, i8 -1, i8 3, i16 34, i16 14 }, %struct.CmdLutElement { i8 4, i8 2, i8 -1, i8 3, i16 34, i16 18 }, %struct.CmdLutElement { i8 4, i8 3, i8 -1, i8 3, i16 34, i16 22 }, %struct.CmdLutElement { i8 4, i8 3, i8 -1, i8 3, i16 34, i16 30 }, %struct.CmdLutElement { i8 4, i8 4, i8 -1, i8 3, i16 34, i16 38 }, %struct.CmdLutElement { i8 4, i8 4, i8 -1, i8 3, i16 34, i16 54 }, %struct.CmdLutElement { i8 4, i8 1, i8 -1, i8 3, i16 50, i16 10 }, %struct.CmdLutElement { i8 4, i8 1, i8 -1, i8 3, i16 50, i16 12 }, %struct.CmdLutElement { i8 4, i8 2, i8 -1, i8 3, i16 50, i16 14 }, %struct.CmdLutElement { i8 4, i8 2, i8 -1, i8 3, i16 50, i16 18 }, %struct.CmdLutElement { i8 4, i8 3, i8 -1, i8 3, i16 50, i16 22 }, %struct.CmdLutElement { i8 4, i8 3, i8 -1, i8 3, i16 50, i16 30 }, %struct.CmdLutElement { i8 4, i8 4, i8 -1, i8 3, i16 50, i16 38 }, %struct.CmdLutElement { i8 4, i8 4, i8 -1, i8 3, i16 50, i16 54 }, %struct.CmdLutElement { i8 5, i8 1, i8 -1, i8 3, i16 66, i16 10 }, %struct.CmdLutElement { i8 5, i8 1, i8 -1, i8 3, i16 66, i16 12 }, %struct.CmdLutElement { i8 5, i8 2, i8 -1, i8 3, i16 66, i16 14 }, %struct.CmdLutElement { i8 5, i8 2, i8 -1, i8 3, i16 66, i16 18 }, %struct.CmdLutElement { i8 5, i8 3, i8 -1, i8 3, i16 66, i16 22 }, %struct.CmdLutElement { i8 5, i8 3, i8 -1, i8 3, i16 66, i16 30 }, %struct.CmdLutElement { i8 5, i8 4, i8 -1, i8 3, i16 66, i16 38 }, %struct.CmdLutElement { i8 5, i8 4, i8 -1, i8 3, i16 66, i16 54 }, %struct.CmdLutElement { i8 5, i8 1, i8 -1, i8 3, i16 98, i16 10 }, %struct.CmdLutElement { i8 5, i8 1, i8 -1, i8 3, i16 98, i16 12 }, %struct.CmdLutElement { i8 5, i8 2, i8 -1, i8 3, i16 98, i16 14 }, %struct.CmdLutElement { i8 5, i8 2, i8 -1, i8 3, i16 98, i16 18 }, %struct.CmdLutElement { i8 5, i8 3, i8 -1, i8 3, i16 98, i16 22 }, %struct.CmdLutElement { i8 5, i8 3, i8 -1, i8 3, i16 98, i16 30 }, %struct.CmdLutElement { i8 5, i8 4, i8 -1, i8 3, i16 98, i16 38 }, %struct.CmdLutElement { i8 5, i8 4, i8 -1, i8 3, i16 98, i16 54 }, %struct.CmdLutElement { i8 0, i8 5, i8 -1, i8 3, i16 0, i16 70 }, %struct.CmdLutElement { i8 0, i8 5, i8 -1, i8 3, i16 0, i16 102 }, %struct.CmdLutElement { i8 0, i8 6, i8 -1, i8 3, i16 0, i16 134 }, %struct.CmdLutElement { i8 0, i8 7, i8 -1, i8 3, i16 0, i16 198 }, %struct.CmdLutElement { i8 0, i8 8, i8 -1, i8 3, i16 0, i16 326 }, %struct.CmdLutElement { i8 0, i8 9, i8 -1, i8 3, i16 0, i16 582 }, %struct.CmdLutElement { i8 0, i8 10, i8 -1, i8 3, i16 0, i16 1094 }, %struct.CmdLutElement { i8 0, i8 24, i8 -1, i8 3, i16 0, i16 2118 }, %struct.CmdLutElement { i8 0, i8 5, i8 -1, i8 3, i16 1, i16 70 }, %struct.CmdLutElement { i8 0, i8 5, i8 -1, i8 3, i16 1, i16 102 }, %struct.CmdLutElement { i8 0, i8 6, i8 -1, i8 3, i16 1, i16 134 }, %struct.CmdLutElement { i8 0, i8 7, i8 -1, i8 3, i16 1, i16 198 }, %struct.CmdLutElement { i8 0, i8 8, i8 -1, i8 3, i16 1, i16 326 }, %struct.CmdLutElement { i8 0, i8 9, i8 -1, i8 3, i16 1, i16 582 }, %struct.CmdLutElement { i8 0, i8 10, i8 -1, i8 3, i16 1, i16 1094 }, %struct.CmdLutElement { i8 0, i8 24, i8 -1, i8 3, i16 1, i16 2118 }, %struct.CmdLutElement { i8 0, i8 5, i8 -1, i8 3, i16 2, i16 70 }, %struct.CmdLutElement { i8 0, i8 5, i8 -1, i8 3, i16 2, i16 102 }, %struct.CmdLutElement { i8 0, i8 6, i8 -1, i8 3, i16 2, i16 134 }, %struct.CmdLutElement { i8 0, i8 7, i8 -1, i8 3, i16 2, i16 198 }, %struct.CmdLutElement { i8 0, i8 8, i8 -1, i8 3, i16 2, i16 326 }, %struct.CmdLutElement { i8 0, i8 9, i8 -1, i8 3, i16 2, i16 582 }, %struct.CmdLutElement { i8 0, i8 10, i8 -1, i8 3, i16 2, i16 1094 }, %struct.CmdLutElement { i8 0, i8 24, i8 -1, i8 3, i16 2, i16 2118 }, %struct.CmdLutElement { i8 0, i8 5, i8 -1, i8 3, i16 3, i16 70 }, %struct.CmdLutElement { i8 0, i8 5, i8 -1, i8 3, i16 3, i16 102 }, %struct.CmdLutElement { i8 0, i8 6, i8 -1, i8 3, i16 3, i16 134 }, %struct.CmdLutElement { i8 0, i8 7, i8 -1, i8 3, i16 3, i16 198 }, %struct.CmdLutElement { i8 0, i8 8, i8 -1, i8 3, i16 3, i16 326 }, %struct.CmdLutElement { i8 0, i8 9, i8 -1, i8 3, i16 3, i16 582 }, %struct.CmdLutElement { i8 0, i8 10, i8 -1, i8 3, i16 3, i16 1094 }, %struct.CmdLutElement { i8 0, i8 24, i8 -1, i8 3, i16 3, i16 2118 }, %struct.CmdLutElement { i8 0, i8 5, i8 -1, i8 3, i16 4, i16 70 }, %struct.CmdLutElement { i8 0, i8 5, i8 -1, i8 3, i16 4, i16 102 }, %struct.CmdLutElement { i8 0, i8 6, i8 -1, i8 3, i16 4, i16 134 }, %struct.CmdLutElement { i8 0, i8 7, i8 -1, i8 3, i16 4, i16 198 }, %struct.CmdLutElement { i8 0, i8 8, i8 -1, i8 3, i16 4, i16 326 }, %struct.CmdLutElement { i8 0, i8 9, i8 -1, i8 3, i16 4, i16 582 }, %struct.CmdLutElement { i8 0, i8 10, i8 -1, i8 3, i16 4, i16 1094 }, %struct.CmdLutElement { i8 0, i8 24, i8 -1, i8 3, i16 4, i16 2118 }, %struct.CmdLutElement { i8 0, i8 5, i8 -1, i8 3, i16 5, i16 70 }, %struct.CmdLutElement { i8 0, i8 5, i8 -1, i8 3, i16 5, i16 102 }, %struct.CmdLutElement { i8 0, i8 6, i8 -1, i8 3, i16 5, i16 134 }, %struct.CmdLutElement { i8 0, i8 7, i8 -1, i8 3, i16 5, i16 198 }, %struct.CmdLutElement { i8 0, i8 8, i8 -1, i8 3, i16 5, i16 326 }, %struct.CmdLutElement { i8 0, i8 9, i8 -1, i8 3, i16 5, i16 582 }, %struct.CmdLutElement { i8 0, i8 10, i8 -1, i8 3, i16 5, i16 1094 }, %struct.CmdLutElement { i8 0, i8 24, i8 -1, i8 3, i16 5, i16 2118 }, %struct.CmdLutElement { i8 1, i8 5, i8 -1, i8 3, i16 6, i16 70 }, %struct.CmdLutElement { i8 1, i8 5, i8 -1, i8 3, i16 6, i16 102 }, %struct.CmdLutElement { i8 1, i8 6, i8 -1, i8 3, i16 6, i16 134 }, %struct.CmdLutElement { i8 1, i8 7, i8 -1, i8 3, i16 6, i16 198 }, %struct.CmdLutElement { i8 1, i8 8, i8 -1, i8 3, i16 6, i16 326 }, %struct.CmdLutElement { i8 1, i8 9, i8 -1, i8 3, i16 6, i16 582 }, %struct.CmdLutElement { i8 1, i8 10, i8 -1, i8 3, i16 6, i16 1094 }, %struct.CmdLutElement { i8 1, i8 24, i8 -1, i8 3, i16 6, i16 2118 }, %struct.CmdLutElement { i8 1, i8 5, i8 -1, i8 3, i16 8, i16 70 }, %struct.CmdLutElement { i8 1, i8 5, i8 -1, i8 3, i16 8, i16 102 }, %struct.CmdLutElement { i8 1, i8 6, i8 -1, i8 3, i16 8, i16 134 }, %struct.CmdLutElement { i8 1, i8 7, i8 -1, i8 3, i16 8, i16 198 }, %struct.CmdLutElement { i8 1, i8 8, i8 -1, i8 3, i16 8, i16 326 }, %struct.CmdLutElement { i8 1, i8 9, i8 -1, i8 3, i16 8, i16 582 }, %struct.CmdLutElement { i8 1, i8 10, i8 -1, i8 3, i16 8, i16 1094 }, %struct.CmdLutElement { i8 1, i8 24, i8 -1, i8 3, i16 8, i16 2118 }, %struct.CmdLutElement { i8 6, i8 0, i8 -1, i8 0, i16 130, i16 2 }, %struct.CmdLutElement { i8 6, i8 0, i8 -1, i8 1, i16 130, i16 3 }, %struct.CmdLutElement { i8 6, i8 0, i8 -1, i8 2, i16 130, i16 4 }, %struct.CmdLutElement { i8 6, i8 0, i8 -1, i8 3, i16 130, i16 5 }, %struct.CmdLutElement { i8 6, i8 0, i8 -1, i8 3, i16 130, i16 6 }, %struct.CmdLutElement { i8 6, i8 0, i8 -1, i8 3, i16 130, i16 7 }, %struct.CmdLutElement { i8 6, i8 0, i8 -1, i8 3, i16 130, i16 8 }, %struct.CmdLutElement { i8 6, i8 0, i8 -1, i8 3, i16 130, i16 9 }, %struct.CmdLutElement { i8 7, i8 0, i8 -1, i8 0, i16 194, i16 2 }, %struct.CmdLutElement { i8 7, i8 0, i8 -1, i8 1, i16 194, i16 3 }, %struct.CmdLutElement { i8 7, i8 0, i8 -1, i8 2, i16 194, i16 4 }, %struct.CmdLutElement { i8 7, i8 0, i8 -1, i8 3, i16 194, i16 5 }, %struct.CmdLutElement { i8 7, i8 0, i8 -1, i8 3, i16 194, i16 6 }, %struct.CmdLutElement { i8 7, i8 0, i8 -1, i8 3, i16 194, i16 7 }, %struct.CmdLutElement { i8 7, i8 0, i8 -1, i8 3, i16 194, i16 8 }, %struct.CmdLutElement { i8 7, i8 0, i8 -1, i8 3, i16 194, i16 9 }, %struct.CmdLutElement { i8 8, i8 0, i8 -1, i8 0, i16 322, i16 2 }, %struct.CmdLutElement { i8 8, i8 0, i8 -1, i8 1, i16 322, i16 3 }, %struct.CmdLutElement { i8 8, i8 0, i8 -1, i8 2, i16 322, i16 4 }, %struct.CmdLutElement { i8 8, i8 0, i8 -1, i8 3, i16 322, i16 5 }, %struct.CmdLutElement { i8 8, i8 0, i8 -1, i8 3, i16 322, i16 6 }, %struct.CmdLutElement { i8 8, i8 0, i8 -1, i8 3, i16 322, i16 7 }, %struct.CmdLutElement { i8 8, i8 0, i8 -1, i8 3, i16 322, i16 8 }, %struct.CmdLutElement { i8 8, i8 0, i8 -1, i8 3, i16 322, i16 9 }, %struct.CmdLutElement { i8 9, i8 0, i8 -1, i8 0, i16 578, i16 2 }, %struct.CmdLutElement { i8 9, i8 0, i8 -1, i8 1, i16 578, i16 3 }, %struct.CmdLutElement { i8 9, i8 0, i8 -1, i8 2, i16 578, i16 4 }, %struct.CmdLutElement { i8 9, i8 0, i8 -1, i8 3, i16 578, i16 5 }, %struct.CmdLutElement { i8 9, i8 0, i8 -1, i8 3, i16 578, i16 6 }, %struct.CmdLutElement { i8 9, i8 0, i8 -1, i8 3, i16 578, i16 7 }, %struct.CmdLutElement { i8 9, i8 0, i8 -1, i8 3, i16 578, i16 8 }, %struct.CmdLutElement { i8 9, i8 0, i8 -1, i8 3, i16 578, i16 9 }, %struct.CmdLutElement { i8 10, i8 0, i8 -1, i8 0, i16 1090, i16 2 }, %struct.CmdLutElement { i8 10, i8 0, i8 -1, i8 1, i16 1090, i16 3 }, %struct.CmdLutElement { i8 10, i8 0, i8 -1, i8 2, i16 1090, i16 4 }, %struct.CmdLutElement { i8 10, i8 0, i8 -1, i8 3, i16 1090, i16 5 }, %struct.CmdLutElement { i8 10, i8 0, i8 -1, i8 3, i16 1090, i16 6 }, %struct.CmdLutElement { i8 10, i8 0, i8 -1, i8 3, i16 1090, i16 7 }, %struct.CmdLutElement { i8 10, i8 0, i8 -1, i8 3, i16 1090, i16 8 }, %struct.CmdLutElement { i8 10, i8 0, i8 -1, i8 3, i16 1090, i16 9 }, %struct.CmdLutElement { i8 12, i8 0, i8 -1, i8 0, i16 2114, i16 2 }, %struct.CmdLutElement { i8 12, i8 0, i8 -1, i8 1, i16 2114, i16 3 }, %struct.CmdLutElement { i8 12, i8 0, i8 -1, i8 2, i16 2114, i16 4 }, %struct.CmdLutElement { i8 12, i8 0, i8 -1, i8 3, i16 2114, i16 5 }, %struct.CmdLutElement { i8 12, i8 0, i8 -1, i8 3, i16 2114, i16 6 }, %struct.CmdLutElement { i8 12, i8 0, i8 -1, i8 3, i16 2114, i16 7 }, %struct.CmdLutElement { i8 12, i8 0, i8 -1, i8 3, i16 2114, i16 8 }, %struct.CmdLutElement { i8 12, i8 0, i8 -1, i8 3, i16 2114, i16 9 }, %struct.CmdLutElement { i8 14, i8 0, i8 -1, i8 0, i16 6210, i16 2 }, %struct.CmdLutElement { i8 14, i8 0, i8 -1, i8 1, i16 6210, i16 3 }, %struct.CmdLutElement { i8 14, i8 0, i8 -1, i8 2, i16 6210, i16 4 }, %struct.CmdLutElement { i8 14, i8 0, i8 -1, i8 3, i16 6210, i16 5 }, %struct.CmdLutElement { i8 14, i8 0, i8 -1, i8 3, i16 6210, i16 6 }, %struct.CmdLutElement { i8 14, i8 0, i8 -1, i8 3, i16 6210, i16 7 }, %struct.CmdLutElement { i8 14, i8 0, i8 -1, i8 3, i16 6210, i16 8 }, %struct.CmdLutElement { i8 14, i8 0, i8 -1, i8 3, i16 6210, i16 9 }, %struct.CmdLutElement { i8 24, i8 0, i8 -1, i8 0, i16 22594, i16 2 }, %struct.CmdLutElement { i8 24, i8 0, i8 -1, i8 1, i16 22594, i16 3 }, %struct.CmdLutElement { i8 24, i8 0, i8 -1, i8 2, i16 22594, i16 4 }, %struct.CmdLutElement { i8 24, i8 0, i8 -1, i8 3, i16 22594, i16 5 }, %struct.CmdLutElement { i8 24, i8 0, i8 -1, i8 3, i16 22594, i16 6 }, %struct.CmdLutElement { i8 24, i8 0, i8 -1, i8 3, i16 22594, i16 7 }, %struct.CmdLutElement { i8 24, i8 0, i8 -1, i8 3, i16 22594, i16 8 }, %struct.CmdLutElement { i8 24, i8 0, i8 -1, i8 3, i16 22594, i16 9 }, %struct.CmdLutElement { i8 2, i8 5, i8 -1, i8 3, i16 10, i16 70 }, %struct.CmdLutElement { i8 2, i8 5, i8 -1, i8 3, i16 10, i16 102 }, %struct.CmdLutElement { i8 2, i8 6, i8 -1, i8 3, i16 10, i16 134 }, %struct.CmdLutElement { i8 2, i8 7, i8 -1, i8 3, i16 10, i16 198 }, %struct.CmdLutElement { i8 2, i8 8, i8 -1, i8 3, i16 10, i16 326 }, %struct.CmdLutElement { i8 2, i8 9, i8 -1, i8 3, i16 10, i16 582 }, %struct.CmdLutElement { i8 2, i8 10, i8 -1, i8 3, i16 10, i16 1094 }, %struct.CmdLutElement { i8 2, i8 24, i8 -1, i8 3, i16 10, i16 2118 }, %struct.CmdLutElement { i8 2, i8 5, i8 -1, i8 3, i16 14, i16 70 }, %struct.CmdLutElement { i8 2, i8 5, i8 -1, i8 3, i16 14, i16 102 }, %struct.CmdLutElement { i8 2, i8 6, i8 -1, i8 3, i16 14, i16 134 }, %struct.CmdLutElement { i8 2, i8 7, i8 -1, i8 3, i16 14, i16 198 }, %struct.CmdLutElement { i8 2, i8 8, i8 -1, i8 3, i16 14, i16 326 }, %struct.CmdLutElement { i8 2, i8 9, i8 -1, i8 3, i16 14, i16 582 }, %struct.CmdLutElement { i8 2, i8 10, i8 -1, i8 3, i16 14, i16 1094 }, %struct.CmdLutElement { i8 2, i8 24, i8 -1, i8 3, i16 14, i16 2118 }, %struct.CmdLutElement { i8 3, i8 5, i8 -1, i8 3, i16 18, i16 70 }, %struct.CmdLutElement { i8 3, i8 5, i8 -1, i8 3, i16 18, i16 102 }, %struct.CmdLutElement { i8 3, i8 6, i8 -1, i8 3, i16 18, i16 134 }, %struct.CmdLutElement { i8 3, i8 7, i8 -1, i8 3, i16 18, i16 198 }, %struct.CmdLutElement { i8 3, i8 8, i8 -1, i8 3, i16 18, i16 326 }, %struct.CmdLutElement { i8 3, i8 9, i8 -1, i8 3, i16 18, i16 582 }, %struct.CmdLutElement { i8 3, i8 10, i8 -1, i8 3, i16 18, i16 1094 }, %struct.CmdLutElement { i8 3, i8 24, i8 -1, i8 3, i16 18, i16 2118 }, %struct.CmdLutElement { i8 3, i8 5, i8 -1, i8 3, i16 26, i16 70 }, %struct.CmdLutElement { i8 3, i8 5, i8 -1, i8 3, i16 26, i16 102 }, %struct.CmdLutElement { i8 3, i8 6, i8 -1, i8 3, i16 26, i16 134 }, %struct.CmdLutElement { i8 3, i8 7, i8 -1, i8 3, i16 26, i16 198 }, %struct.CmdLutElement { i8 3, i8 8, i8 -1, i8 3, i16 26, i16 326 }, %struct.CmdLutElement { i8 3, i8 9, i8 -1, i8 3, i16 26, i16 582 }, %struct.CmdLutElement { i8 3, i8 10, i8 -1, i8 3, i16 26, i16 1094 }, %struct.CmdLutElement { i8 3, i8 24, i8 -1, i8 3, i16 26, i16 2118 }, %struct.CmdLutElement { i8 4, i8 5, i8 -1, i8 3, i16 34, i16 70 }, %struct.CmdLutElement { i8 4, i8 5, i8 -1, i8 3, i16 34, i16 102 }, %struct.CmdLutElement { i8 4, i8 6, i8 -1, i8 3, i16 34, i16 134 }, %struct.CmdLutElement { i8 4, i8 7, i8 -1, i8 3, i16 34, i16 198 }, %struct.CmdLutElement { i8 4, i8 8, i8 -1, i8 3, i16 34, i16 326 }, %struct.CmdLutElement { i8 4, i8 9, i8 -1, i8 3, i16 34, i16 582 }, %struct.CmdLutElement { i8 4, i8 10, i8 -1, i8 3, i16 34, i16 1094 }, %struct.CmdLutElement { i8 4, i8 24, i8 -1, i8 3, i16 34, i16 2118 }, %struct.CmdLutElement { i8 4, i8 5, i8 -1, i8 3, i16 50, i16 70 }, %struct.CmdLutElement { i8 4, i8 5, i8 -1, i8 3, i16 50, i16 102 }, %struct.CmdLutElement { i8 4, i8 6, i8 -1, i8 3, i16 50, i16 134 }, %struct.CmdLutElement { i8 4, i8 7, i8 -1, i8 3, i16 50, i16 198 }, %struct.CmdLutElement { i8 4, i8 8, i8 -1, i8 3, i16 50, i16 326 }, %struct.CmdLutElement { i8 4, i8 9, i8 -1, i8 3, i16 50, i16 582 }, %struct.CmdLutElement { i8 4, i8 10, i8 -1, i8 3, i16 50, i16 1094 }, %struct.CmdLutElement { i8 4, i8 24, i8 -1, i8 3, i16 50, i16 2118 }, %struct.CmdLutElement { i8 5, i8 5, i8 -1, i8 3, i16 66, i16 70 }, %struct.CmdLutElement { i8 5, i8 5, i8 -1, i8 3, i16 66, i16 102 }, %struct.CmdLutElement { i8 5, i8 6, i8 -1, i8 3, i16 66, i16 134 }, %struct.CmdLutElement { i8 5, i8 7, i8 -1, i8 3, i16 66, i16 198 }, %struct.CmdLutElement { i8 5, i8 8, i8 -1, i8 3, i16 66, i16 326 }, %struct.CmdLutElement { i8 5, i8 9, i8 -1, i8 3, i16 66, i16 582 }, %struct.CmdLutElement { i8 5, i8 10, i8 -1, i8 3, i16 66, i16 1094 }, %struct.CmdLutElement { i8 5, i8 24, i8 -1, i8 3, i16 66, i16 2118 }, %struct.CmdLutElement { i8 5, i8 5, i8 -1, i8 3, i16 98, i16 70 }, %struct.CmdLutElement { i8 5, i8 5, i8 -1, i8 3, i16 98, i16 102 }, %struct.CmdLutElement { i8 5, i8 6, i8 -1, i8 3, i16 98, i16 134 }, %struct.CmdLutElement { i8 5, i8 7, i8 -1, i8 3, i16 98, i16 198 }, %struct.CmdLutElement { i8 5, i8 8, i8 -1, i8 3, i16 98, i16 326 }, %struct.CmdLutElement { i8 5, i8 9, i8 -1, i8 3, i16 98, i16 582 }, %struct.CmdLutElement { i8 5, i8 10, i8 -1, i8 3, i16 98, i16 1094 }, %struct.CmdLutElement { i8 5, i8 24, i8 -1, i8 3, i16 98, i16 2118 }, %struct.CmdLutElement { i8 6, i8 1, i8 -1, i8 3, i16 130, i16 10 }, %struct.CmdLutElement { i8 6, i8 1, i8 -1, i8 3, i16 130, i16 12 }, %struct.CmdLutElement { i8 6, i8 2, i8 -1, i8 3, i16 130, i16 14 }, %struct.CmdLutElement { i8 6, i8 2, i8 -1, i8 3, i16 130, i16 18 }, %struct.CmdLutElement { i8 6, i8 3, i8 -1, i8 3, i16 130, i16 22 }, %struct.CmdLutElement { i8 6, i8 3, i8 -1, i8 3, i16 130, i16 30 }, %struct.CmdLutElement { i8 6, i8 4, i8 -1, i8 3, i16 130, i16 38 }, %struct.CmdLutElement { i8 6, i8 4, i8 -1, i8 3, i16 130, i16 54 }, %struct.CmdLutElement { i8 7, i8 1, i8 -1, i8 3, i16 194, i16 10 }, %struct.CmdLutElement { i8 7, i8 1, i8 -1, i8 3, i16 194, i16 12 }, %struct.CmdLutElement { i8 7, i8 2, i8 -1, i8 3, i16 194, i16 14 }, %struct.CmdLutElement { i8 7, i8 2, i8 -1, i8 3, i16 194, i16 18 }, %struct.CmdLutElement { i8 7, i8 3, i8 -1, i8 3, i16 194, i16 22 }, %struct.CmdLutElement { i8 7, i8 3, i8 -1, i8 3, i16 194, i16 30 }, %struct.CmdLutElement { i8 7, i8 4, i8 -1, i8 3, i16 194, i16 38 }, %struct.CmdLutElement { i8 7, i8 4, i8 -1, i8 3, i16 194, i16 54 }, %struct.CmdLutElement { i8 8, i8 1, i8 -1, i8 3, i16 322, i16 10 }, %struct.CmdLutElement { i8 8, i8 1, i8 -1, i8 3, i16 322, i16 12 }, %struct.CmdLutElement { i8 8, i8 2, i8 -1, i8 3, i16 322, i16 14 }, %struct.CmdLutElement { i8 8, i8 2, i8 -1, i8 3, i16 322, i16 18 }, %struct.CmdLutElement { i8 8, i8 3, i8 -1, i8 3, i16 322, i16 22 }, %struct.CmdLutElement { i8 8, i8 3, i8 -1, i8 3, i16 322, i16 30 }, %struct.CmdLutElement { i8 8, i8 4, i8 -1, i8 3, i16 322, i16 38 }, %struct.CmdLutElement { i8 8, i8 4, i8 -1, i8 3, i16 322, i16 54 }, %struct.CmdLutElement { i8 9, i8 1, i8 -1, i8 3, i16 578, i16 10 }, %struct.CmdLutElement { i8 9, i8 1, i8 -1, i8 3, i16 578, i16 12 }, %struct.CmdLutElement { i8 9, i8 2, i8 -1, i8 3, i16 578, i16 14 }, %struct.CmdLutElement { i8 9, i8 2, i8 -1, i8 3, i16 578, i16 18 }, %struct.CmdLutElement { i8 9, i8 3, i8 -1, i8 3, i16 578, i16 22 }, %struct.CmdLutElement { i8 9, i8 3, i8 -1, i8 3, i16 578, i16 30 }, %struct.CmdLutElement { i8 9, i8 4, i8 -1, i8 3, i16 578, i16 38 }, %struct.CmdLutElement { i8 9, i8 4, i8 -1, i8 3, i16 578, i16 54 }, %struct.CmdLutElement { i8 10, i8 1, i8 -1, i8 3, i16 1090, i16 10 }, %struct.CmdLutElement { i8 10, i8 1, i8 -1, i8 3, i16 1090, i16 12 }, %struct.CmdLutElement { i8 10, i8 2, i8 -1, i8 3, i16 1090, i16 14 }, %struct.CmdLutElement { i8 10, i8 2, i8 -1, i8 3, i16 1090, i16 18 }, %struct.CmdLutElement { i8 10, i8 3, i8 -1, i8 3, i16 1090, i16 22 }, %struct.CmdLutElement { i8 10, i8 3, i8 -1, i8 3, i16 1090, i16 30 }, %struct.CmdLutElement { i8 10, i8 4, i8 -1, i8 3, i16 1090, i16 38 }, %struct.CmdLutElement { i8 10, i8 4, i8 -1, i8 3, i16 1090, i16 54 }, %struct.CmdLutElement { i8 12, i8 1, i8 -1, i8 3, i16 2114, i16 10 }, %struct.CmdLutElement { i8 12, i8 1, i8 -1, i8 3, i16 2114, i16 12 }, %struct.CmdLutElement { i8 12, i8 2, i8 -1, i8 3, i16 2114, i16 14 }, %struct.CmdLutElement { i8 12, i8 2, i8 -1, i8 3, i16 2114, i16 18 }, %struct.CmdLutElement { i8 12, i8 3, i8 -1, i8 3, i16 2114, i16 22 }, %struct.CmdLutElement { i8 12, i8 3, i8 -1, i8 3, i16 2114, i16 30 }, %struct.CmdLutElement { i8 12, i8 4, i8 -1, i8 3, i16 2114, i16 38 }, %struct.CmdLutElement { i8 12, i8 4, i8 -1, i8 3, i16 2114, i16 54 }, %struct.CmdLutElement { i8 14, i8 1, i8 -1, i8 3, i16 6210, i16 10 }, %struct.CmdLutElement { i8 14, i8 1, i8 -1, i8 3, i16 6210, i16 12 }, %struct.CmdLutElement { i8 14, i8 2, i8 -1, i8 3, i16 6210, i16 14 }, %struct.CmdLutElement { i8 14, i8 2, i8 -1, i8 3, i16 6210, i16 18 }, %struct.CmdLutElement { i8 14, i8 3, i8 -1, i8 3, i16 6210, i16 22 }, %struct.CmdLutElement { i8 14, i8 3, i8 -1, i8 3, i16 6210, i16 30 }, %struct.CmdLutElement { i8 14, i8 4, i8 -1, i8 3, i16 6210, i16 38 }, %struct.CmdLutElement { i8 14, i8 4, i8 -1, i8 3, i16 6210, i16 54 }, %struct.CmdLutElement { i8 24, i8 1, i8 -1, i8 3, i16 22594, i16 10 }, %struct.CmdLutElement { i8 24, i8 1, i8 -1, i8 3, i16 22594, i16 12 }, %struct.CmdLutElement { i8 24, i8 2, i8 -1, i8 3, i16 22594, i16 14 }, %struct.CmdLutElement { i8 24, i8 2, i8 -1, i8 3, i16 22594, i16 18 }, %struct.CmdLutElement { i8 24, i8 3, i8 -1, i8 3, i16 22594, i16 22 }, %struct.CmdLutElement { i8 24, i8 3, i8 -1, i8 3, i16 22594, i16 30 }, %struct.CmdLutElement { i8 24, i8 4, i8 -1, i8 3, i16 22594, i16 38 }, %struct.CmdLutElement { i8 24, i8 4, i8 -1, i8 3, i16 22594, i16 54 }, %struct.CmdLutElement { i8 6, i8 5, i8 -1, i8 3, i16 130, i16 70 }, %struct.CmdLutElement { i8 6, i8 5, i8 -1, i8 3, i16 130, i16 102 }, %struct.CmdLutElement { i8 6, i8 6, i8 -1, i8 3, i16 130, i16 134 }, %struct.CmdLutElement { i8 6, i8 7, i8 -1, i8 3, i16 130, i16 198 }, %struct.CmdLutElement { i8 6, i8 8, i8 -1, i8 3, i16 130, i16 326 }, %struct.CmdLutElement { i8 6, i8 9, i8 -1, i8 3, i16 130, i16 582 }, %struct.CmdLutElement { i8 6, i8 10, i8 -1, i8 3, i16 130, i16 1094 }, %struct.CmdLutElement { i8 6, i8 24, i8 -1, i8 3, i16 130, i16 2118 }, %struct.CmdLutElement { i8 7, i8 5, i8 -1, i8 3, i16 194, i16 70 }, %struct.CmdLutElement { i8 7, i8 5, i8 -1, i8 3, i16 194, i16 102 }, %struct.CmdLutElement { i8 7, i8 6, i8 -1, i8 3, i16 194, i16 134 }, %struct.CmdLutElement { i8 7, i8 7, i8 -1, i8 3, i16 194, i16 198 }, %struct.CmdLutElement { i8 7, i8 8, i8 -1, i8 3, i16 194, i16 326 }, %struct.CmdLutElement { i8 7, i8 9, i8 -1, i8 3, i16 194, i16 582 }, %struct.CmdLutElement { i8 7, i8 10, i8 -1, i8 3, i16 194, i16 1094 }, %struct.CmdLutElement { i8 7, i8 24, i8 -1, i8 3, i16 194, i16 2118 }, %struct.CmdLutElement { i8 8, i8 5, i8 -1, i8 3, i16 322, i16 70 }, %struct.CmdLutElement { i8 8, i8 5, i8 -1, i8 3, i16 322, i16 102 }, %struct.CmdLutElement { i8 8, i8 6, i8 -1, i8 3, i16 322, i16 134 }, %struct.CmdLutElement { i8 8, i8 7, i8 -1, i8 3, i16 322, i16 198 }, %struct.CmdLutElement { i8 8, i8 8, i8 -1, i8 3, i16 322, i16 326 }, %struct.CmdLutElement { i8 8, i8 9, i8 -1, i8 3, i16 322, i16 582 }, %struct.CmdLutElement { i8 8, i8 10, i8 -1, i8 3, i16 322, i16 1094 }, %struct.CmdLutElement { i8 8, i8 24, i8 -1, i8 3, i16 322, i16 2118 }, %struct.CmdLutElement { i8 9, i8 5, i8 -1, i8 3, i16 578, i16 70 }, %struct.CmdLutElement { i8 9, i8 5, i8 -1, i8 3, i16 578, i16 102 }, %struct.CmdLutElement { i8 9, i8 6, i8 -1, i8 3, i16 578, i16 134 }, %struct.CmdLutElement { i8 9, i8 7, i8 -1, i8 3, i16 578, i16 198 }, %struct.CmdLutElement { i8 9, i8 8, i8 -1, i8 3, i16 578, i16 326 }, %struct.CmdLutElement { i8 9, i8 9, i8 -1, i8 3, i16 578, i16 582 }, %struct.CmdLutElement { i8 9, i8 10, i8 -1, i8 3, i16 578, i16 1094 }, %struct.CmdLutElement { i8 9, i8 24, i8 -1, i8 3, i16 578, i16 2118 }, %struct.CmdLutElement { i8 10, i8 5, i8 -1, i8 3, i16 1090, i16 70 }, %struct.CmdLutElement { i8 10, i8 5, i8 -1, i8 3, i16 1090, i16 102 }, %struct.CmdLutElement { i8 10, i8 6, i8 -1, i8 3, i16 1090, i16 134 }, %struct.CmdLutElement { i8 10, i8 7, i8 -1, i8 3, i16 1090, i16 198 }, %struct.CmdLutElement { i8 10, i8 8, i8 -1, i8 3, i16 1090, i16 326 }, %struct.CmdLutElement { i8 10, i8 9, i8 -1, i8 3, i16 1090, i16 582 }, %struct.CmdLutElement { i8 10, i8 10, i8 -1, i8 3, i16 1090, i16 1094 }, %struct.CmdLutElement { i8 10, i8 24, i8 -1, i8 3, i16 1090, i16 2118 }, %struct.CmdLutElement { i8 12, i8 5, i8 -1, i8 3, i16 2114, i16 70 }, %struct.CmdLutElement { i8 12, i8 5, i8 -1, i8 3, i16 2114, i16 102 }, %struct.CmdLutElement { i8 12, i8 6, i8 -1, i8 3, i16 2114, i16 134 }, %struct.CmdLutElement { i8 12, i8 7, i8 -1, i8 3, i16 2114, i16 198 }, %struct.CmdLutElement { i8 12, i8 8, i8 -1, i8 3, i16 2114, i16 326 }, %struct.CmdLutElement { i8 12, i8 9, i8 -1, i8 3, i16 2114, i16 582 }, %struct.CmdLutElement { i8 12, i8 10, i8 -1, i8 3, i16 2114, i16 1094 }, %struct.CmdLutElement { i8 12, i8 24, i8 -1, i8 3, i16 2114, i16 2118 }, %struct.CmdLutElement { i8 14, i8 5, i8 -1, i8 3, i16 6210, i16 70 }, %struct.CmdLutElement { i8 14, i8 5, i8 -1, i8 3, i16 6210, i16 102 }, %struct.CmdLutElement { i8 14, i8 6, i8 -1, i8 3, i16 6210, i16 134 }, %struct.CmdLutElement { i8 14, i8 7, i8 -1, i8 3, i16 6210, i16 198 }, %struct.CmdLutElement { i8 14, i8 8, i8 -1, i8 3, i16 6210, i16 326 }, %struct.CmdLutElement { i8 14, i8 9, i8 -1, i8 3, i16 6210, i16 582 }, %struct.CmdLutElement { i8 14, i8 10, i8 -1, i8 3, i16 6210, i16 1094 }, %struct.CmdLutElement { i8 14, i8 24, i8 -1, i8 3, i16 6210, i16 2118 }, %struct.CmdLutElement { i8 24, i8 5, i8 -1, i8 3, i16 22594, i16 70 }, %struct.CmdLutElement { i8 24, i8 5, i8 -1, i8 3, i16 22594, i16 102 }, %struct.CmdLutElement { i8 24, i8 6, i8 -1, i8 3, i16 22594, i16 134 }, %struct.CmdLutElement { i8 24, i8 7, i8 -1, i8 3, i16 22594, i16 198 }, %struct.CmdLutElement { i8 24, i8 8, i8 -1, i8 3, i16 22594, i16 326 }, %struct.CmdLutElement { i8 24, i8 9, i8 -1, i8 3, i16 22594, i16 582 }, %struct.CmdLutElement { i8 24, i8 10, i8 -1, i8 3, i16 22594, i16 1094 }, %struct.CmdLutElement { i8 24, i8 24, i8 -1, i8 3, i16 22594, i16 2118 }], align 16
@switch.table.BrotliDecoderErrorString = private unnamed_addr constant [35 x i8*] [i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0)], align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @BrotliDecoderSetParameter(%struct.BrotliDecoderStateStruct* nocapture, i32, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %24

7:                                                ; preds = %3
  switch i32 %1, label %24 [
    i32 0, label %8
    i32 1, label %16
  ]

8:                                                ; preds = %7
  %9 = icmp eq i32 %2, 0
  %10 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 50
  %11 = zext i1 %9 to i16
  %12 = load i16, i16* %10, align 8
  %13 = shl nuw nsw i16 %11, 4
  %14 = and i16 %12, -17
  %15 = or i16 %14, %13
  store i16 %15, i16* %10, align 8
  br label %24

16:                                               ; preds = %7
  %17 = icmp ne i32 %2, 0
  %18 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 50
  %19 = zext i1 %17 to i16
  %20 = load i16, i16* %18, align 8
  %21 = shl nuw nsw i16 %19, 5
  %22 = and i16 %20, -33
  %23 = or i16 %22, %21
  store i16 %23, i16* %18, align 8
  br label %24

24:                                               ; preds = %7, %3, %16, %8
  %25 = phi i32 [ 1, %16 ], [ 1, %8 ], [ 0, %3 ], [ 0, %7 ]
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.BrotliDecoderStateStruct* @BrotliDecoderCreateInstance(i8* (i8*, i64)*, void (i8*, i8*)*, i8*) local_unnamed_addr #1 {
  %4 = icmp ne i8* (i8*, i64)* %0, null
  %5 = icmp ne void (i8*, i8*)* %1, null
  %6 = or i1 %4, %5
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call noalias i8* @malloc(i64 5152) #14
  br label %13

9:                                                ; preds = %3
  %10 = and i1 %4, %5
  br i1 %10, label %11, label %25

11:                                               ; preds = %9
  %12 = tail call i8* %0(i8* %2, i64 5152) #14
  br label %13

13:                                               ; preds = %11, %7
  %14 = phi i8* [ %12, %11 ], [ %8, %7 ]
  %15 = bitcast i8* %14 to %struct.BrotliDecoderStateStruct*
  %16 = icmp eq i8* %14, null
  br i1 %16, label %25, label %17

17:                                               ; preds = %13
  %18 = tail call i32 @BrotliDecoderStateInit(%struct.BrotliDecoderStateStruct* nonnull %15, i8* (i8*, i64)* %0, void (i8*, i8*)* %1, i8* %2) #14
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %25

20:                                               ; preds = %17
  br i1 %6, label %22, label %21

21:                                               ; preds = %20
  tail call void @free(i8* nonnull %14) #14
  br label %25

22:                                               ; preds = %20
  %23 = and i1 %4, %5
  br i1 %23, label %24, label %25

24:                                               ; preds = %22
  tail call void %1(i8* %2, i8* nonnull %14) #14
  br label %25

25:                                               ; preds = %9, %17, %21, %24, %22, %13
  %26 = phi %struct.BrotliDecoderStateStruct* [ null, %13 ], [ null, %22 ], [ null, %24 ], [ null, %21 ], [ %15, %17 ], [ null, %9 ]
  ret %struct.BrotliDecoderStateStruct* %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #3

declare hidden i32 @BrotliDecoderStateInit(%struct.BrotliDecoderStateStruct*, i8* (i8*, i64)*, void (i8*, i8*)*, i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @BrotliDecoderDestroyInstance(%struct.BrotliDecoderStateStruct*) local_unnamed_addr #1 {
  %2 = icmp eq %struct.BrotliDecoderStateStruct* %0, null
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 4
  %5 = load void (i8*, i8*)*, void (i8*, i8*)** %4, align 8
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 5
  %7 = load i8*, i8** %6, align 8
  tail call void @BrotliDecoderStateCleanup(%struct.BrotliDecoderStateStruct* nonnull %0) #14
  %8 = bitcast %struct.BrotliDecoderStateStruct* %0 to i8*
  tail call void %5(i8* %7, i8* nonnull %8) #14
  br label %9

9:                                                ; preds = %1, %3
  ret void
}

declare hidden void @BrotliDecoderStateCleanup(%struct.BrotliDecoderStateStruct*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @BrotliDecoderDecompress(i64, i8*, i64* nocapture, i8*) local_unnamed_addr #1 {
  %5 = alloca %struct.BrotliDecoderStateStruct, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = bitcast %struct.BrotliDecoderStateStruct* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 5152, i8* nonnull %11) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 5152, i1 false)
  %12 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #14
  store i64 0, i64* %6, align 8
  %13 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #14
  store i64 %0, i64* %7, align 8
  %14 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #14
  store i8* %1, i8** %8, align 8
  %15 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #14
  %16 = load i64, i64* %2, align 8
  store i64 %16, i64* %9, align 8
  %17 = bitcast i8** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #14
  store i8* %3, i8** %10, align 8
  %18 = call i32 @BrotliDecoderStateInit(%struct.BrotliDecoderStateStruct* nonnull %5, i8* (i8*, i64)* null, void (i8*, i8*)* null, i8* null) #14
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %4
  %21 = call i32 @BrotliDecoderDecompressStream(%struct.BrotliDecoderStateStruct* nonnull %5, i64* nonnull %7, i8** nonnull %8, i64* nonnull %9, i8** nonnull %10, i64* nonnull %6)
  %22 = load i64, i64* %6, align 8
  store i64 %22, i64* %2, align 8
  call void @BrotliDecoderStateCleanup(%struct.BrotliDecoderStateStruct* nonnull %5) #14
  %23 = icmp eq i32 %21, 1
  %24 = zext i1 %23 to i32
  br label %25

25:                                               ; preds = %4, %20
  %26 = phi i32 [ %24, %20 ], [ 0, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #14
  call void @llvm.lifetime.end.p0i8(i64 5152, i8* nonnull %11) #14
  ret i32 %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @BrotliDecoderDecompressStream(%struct.BrotliDecoderStateStruct*, i64* nocapture, i8** nocapture, i64* nocapture, i8**, i64*) local_unnamed_addr #1 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2
  %10 = icmp eq i64* %5, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 43
  %13 = load i64, i64* %12, align 8
  store i64 %13, i64* %5, align 8
  br label %14

14:                                               ; preds = %6, %11
  %15 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 15
  %16 = load i32, i32* %15, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %1226, label %18

18:                                               ; preds = %14
  %19 = load i64, i64* %3, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %28, label %21

21:                                               ; preds = %18
  %22 = icmp eq i8** %4, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %21
  %24 = load i8*, i8** %4, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %26, label %28

26:                                               ; preds = %23, %21
  %27 = tail call fastcc i32 @SaveErrorCode(%struct.BrotliDecoderStateStruct* %0, i32 -20)
  br label %1226

28:                                               ; preds = %23, %18
  %29 = select i1 %20, i8** null, i8** %4
  %30 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 7
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %40

33:                                               ; preds = %28
  %34 = load i64, i64* %1, align 8
  %35 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  store i64 %34, i64* %35, align 8
  %36 = bitcast i8** %2 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %39 = bitcast i8** %38 to i64*
  store i64 %37, i64* %39, align 8
  br label %46

40:                                               ; preds = %28
  %41 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 6
  %42 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %43 = bitcast i8** %42 to %union.anon**
  store %union.anon* %41, %union.anon** %43, align 8
  %44 = bitcast i8** %2 to i64*
  %45 = bitcast i8** %42 to i64*
  br label %46

46:                                               ; preds = %40, %33
  %47 = phi i64* [ %45, %40 ], [ %39, %33 ]
  %48 = phi i64* [ %44, %40 ], [ %36, %33 ]
  %49 = phi i32 [ 2, %40 ], [ 1, %33 ]
  %50 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %51 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %52 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 6
  %53 = bitcast %union.anon* %52 to [8 x i8]*
  %54 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %55 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 0
  %56 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %57 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 50
  %58 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 1
  %59 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %9, i64 0, i32 0
  %60 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 11
  %61 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 51
  %62 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 9
  %63 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 10
  %64 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 1
  %65 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 34
  %66 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 35
  %67 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 3
  %68 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 5
  %69 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 32, i64 0
  %70 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 55
  %71 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 0
  %72 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 53
  %73 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 54
  %74 = getelementptr %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 58, i64 0
  %75 = bitcast i32* %74 to i8*
  %76 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 32, i64 2
  %77 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 36
  %78 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 37
  %79 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 22
  %80 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 23
  %81 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 32, i64 1
  %82 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 24
  %83 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59, i32 0, i32 0
  %84 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59, i32 0, i32 16
  %85 = bitcast %struct.HuffmanCode** %84 to i64*
  %86 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59, i32 0, i32 15
  %87 = bitcast i32* %7 to i8*
  %88 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 1
  %89 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 20
  %90 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 27
  %91 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 22, i32 0
  %92 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 38
  %93 = bitcast %struct.HuffmanCode** %92 to i64*
  %94 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 19
  %95 = bitcast i8** %78 to i64*
  %96 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 21
  %97 = bitcast i8** %96 to i64*
  %98 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 23, i32 0
  %99 = bitcast %struct.HuffmanCode*** %98 to i64**
  %100 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 18
  %101 = bitcast %struct.HuffmanCode** %100 to i64*
  %102 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59
  %103 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 24, i32 3
  %104 = bitcast %union.anon.0* %102 to [544 x i8]*
  %105 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59, i32 0, i32 11, i64 184
  %106 = bitcast i16* %105 to [544 x i32]*
  %107 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 25
  %108 = bitcast %struct.HuffmanCode** %107 to i8**
  %109 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 26
  %110 = bitcast %struct.HuffmanCode** %109 to i8**
  %111 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59, i32 0, i32 11, i64 16
  %112 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59, i32 0, i32 10
  %113 = bitcast i32* %8 to i8*
  %114 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 49
  %115 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 30
  %116 = getelementptr %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59, i32 0, i32 4
  %117 = getelementptr %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59, i32 0, i32 4
  %118 = bitcast i32* %117 to i8*
  %119 = getelementptr i8, i8* %118, i64 1
  %120 = getelementptr %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59, i32 0, i32 11, i64 216
  %121 = bitcast i16* %120 to i8*
  %122 = getelementptr %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59, i32 0, i32 11, i64 218
  %123 = bitcast i32* %83 to <4 x i32>*
  br label %124

124:                                              ; preds = %261, %46
  %125 = phi i32 [ %49, %46 ], [ %262, %261 ]
  switch i32 %125, label %173 [
    i32 1, label %197
    i32 2, label %126
  ]

126:                                              ; preds = %124
  %127 = load i8*, i8** %50, align 8
  %128 = icmp eq i8* %127, null
  br i1 %128, label %132, label %129

129:                                              ; preds = %126
  %130 = call fastcc i32 @WriteRingBuffer(%struct.BrotliDecoderStateStruct* %0, i64* %3, i8** %29, i64* %5, i32 1)
  %131 = icmp slt i32 %130, 0
  br i1 %131, label %1223, label %132

132:                                              ; preds = %129, %126
  %133 = load i32, i32* %30, align 8
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %156, label %135

135:                                              ; preds = %132
  %136 = load i64, i64* %51, align 8
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %141

138:                                              ; preds = %135
  store i32 0, i32* %30, align 8
  %139 = load i64, i64* %1, align 8
  store i64 %139, i64* %51, align 8
  %140 = load i64, i64* %48, align 8
  store i64 %140, i64* %47, align 8
  br label %261

141:                                              ; preds = %135
  %142 = load i64, i64* %1, align 8
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %1223, label %144

144:                                              ; preds = %141
  %145 = load i8*, i8** %2, align 8
  %146 = load i8, i8* %145, align 1
  %147 = zext i32 %133 to i64
  %148 = getelementptr inbounds [8 x i8], [8 x i8]* %53, i64 0, i64 %147
  store i8 %146, i8* %148, align 1
  %149 = load i32, i32* %30, align 8
  %150 = add i32 %149, 1
  store i32 %150, i32* %30, align 8
  %151 = zext i32 %150 to i64
  store i64 %151, i64* %51, align 8
  %152 = load i8*, i8** %2, align 8
  %153 = getelementptr inbounds i8, i8* %152, i64 1
  store i8* %153, i8** %2, align 8
  %154 = load i64, i64* %1, align 8
  %155 = add i64 %154, -1
  store i64 %155, i64* %1, align 8
  br label %261

156:                                              ; preds = %132
  %157 = load i64, i64* %47, align 8
  store i64 %157, i64* %48, align 8
  %158 = load i64, i64* %51, align 8
  store i64 %158, i64* %1, align 8
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %1223, label %160

160:                                              ; preds = %156, %160
  %161 = load i8*, i8** %2, align 8
  %162 = load i8, i8* %161, align 1
  %163 = load i32, i32* %30, align 8
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds [8 x i8], [8 x i8]* %53, i64 0, i64 %164
  store i8 %162, i8* %165, align 1
  %166 = load i32, i32* %30, align 8
  %167 = add i32 %166, 1
  store i32 %167, i32* %30, align 8
  %168 = load i8*, i8** %2, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 1
  store i8* %169, i8** %2, align 8
  %170 = load i64, i64* %1, align 8
  %171 = add i64 %170, -1
  store i64 %171, i64* %1, align 8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %1223, label %160

173:                                              ; preds = %124
  %174 = load i32, i32* %30, align 8
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %177, label %176

176:                                              ; preds = %173
  store i32 0, i32* %30, align 8
  br label %1223

177:                                              ; preds = %173
  %178 = load i32, i32* %58, align 8
  %179 = sub i32 64, %178
  %180 = lshr i32 %179, 3
  %181 = and i32 %179, -8
  %182 = zext i32 %180 to i64
  %183 = load i64, i64* %51, align 8
  %184 = add i64 %183, %182
  store i64 %184, i64* %51, align 8
  %185 = load i8*, i8** %54, align 8
  %186 = sub nsw i64 0, %182
  %187 = getelementptr inbounds i8, i8* %185, i64 %186
  store i8* %187, i8** %54, align 8
  %188 = icmp eq i32 %181, 64
  br i1 %188, label %193, label %189

189:                                              ; preds = %177
  %190 = zext i32 %181 to i64
  %191 = load i64, i64* %59, align 8
  %192 = shl i64 %191, %190
  br label %193

193:                                              ; preds = %177, %189
  %194 = phi i64 [ %192, %189 ], [ 0, %177 ]
  store i64 %194, i64* %59, align 8
  %195 = add i32 %181, %178
  store i32 %195, i32* %58, align 8
  store i64 %184, i64* %1, align 8
  %196 = load i64, i64* %47, align 8
  store i64 %196, i64* %48, align 8
  br label %1223

197:                                              ; preds = %124
  %198 = load i32, i32* %55, align 8
  switch i32 %198, label %261 [
    i32 0, label %213
    i32 1, label %264
    i32 2, label %202
    i32 3, label %307
    i32 4, label %308
    i32 17, label %352
    i32 18, label %353
    i32 19, label %199
    i32 20, label %389
    i32 21, label %398
    i32 11, label %538
    i32 12, label %208
    i32 5, label %569
    i32 6, label %206
    i32 22, label %204
    i32 23, label %817
    i32 24, label %875
    i32 25, label %935
    i32 7, label %1128
    i32 8, label %1128
    i32 9, label %1128
    i32 10, label %1128
    i32 13, label %1133
    i32 15, label %1133
    i32 16, label %1133
    i32 14, label %1160
    i32 26, label %1215
  ]

199:                                              ; preds = %197
  %200 = load i32, i32* %64, align 4
  %201 = sext i32 %200 to i64
  br label %376

202:                                              ; preds = %197
  %203 = load i32, i32* %61, align 4
  br label %297

204:                                              ; preds = %197
  %205 = load i32, i32* %69, align 4
  br label %656

206:                                              ; preds = %197
  %207 = load i32, i32* %64, align 4
  br label %609

208:                                              ; preds = %197
  %209 = load i32, i32* %56, align 8
  %210 = icmp sgt i32 %209, 0
  br i1 %210, label %211, label %568

211:                                              ; preds = %208
  %212 = load i32, i32* %58, align 8
  br label %542

213:                                              ; preds = %197
  %214 = call i32 @BrotliWarmupBitReader(%struct.BrotliBitReader* %9) #14
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %261, label %216

216:                                              ; preds = %213
  %217 = load i16, i16* %57, align 8
  %218 = and i16 %217, 32
  %219 = and i16 %217, -33
  store i16 %219, i16* %57, align 8
  %220 = load i64, i64* %59, align 8
  %221 = load i32, i32* %58, align 8
  %222 = zext i32 %221 to i64
  %223 = add i32 %221, 1
  store i32 %223, i32* %58, align 8
  %224 = shl i64 1, %222
  %225 = and i64 %224, %220
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %228

227:                                              ; preds = %216
  store i32 16, i32* %61, align 4
  br label %256

228:                                              ; preds = %216
  %229 = zext i32 %223 to i64
  %230 = lshr i64 %220, %229
  %231 = trunc i64 %230 to i32
  %232 = and i32 %231, 7
  %233 = add i32 %221, 4
  store i32 %233, i32* %58, align 8
  %234 = icmp eq i32 %232, 0
  br i1 %234, label %237, label %235

235:                                              ; preds = %228
  %236 = add nuw nsw i32 %232, 17
  store i32 %236, i32* %61, align 4
  br label %256

237:                                              ; preds = %228
  %238 = zext i32 %233 to i64
  %239 = lshr i64 %220, %238
  %240 = trunc i64 %239 to i32
  %241 = and i32 %240, 7
  %242 = add i32 %221, 7
  store i32 %242, i32* %58, align 8
  switch i32 %241, label %253 [
    i32 1, label %243
    i32 0, label %255
  ]

243:                                              ; preds = %237
  %244 = icmp eq i16 %218, 0
  br i1 %244, label %261, label %245

245:                                              ; preds = %243
  %246 = zext i32 %242 to i64
  %247 = add i32 %221, 8
  store i32 %247, i32* %58, align 8
  %248 = shl i64 1, %246
  %249 = and i64 %248, %220
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %251, label %261

251:                                              ; preds = %245
  %252 = or i16 %217, 32
  store i16 %252, i16* %57, align 8
  br label %256

253:                                              ; preds = %237
  %254 = or i32 %241, 8
  store i32 %254, i32* %61, align 4
  br label %256

255:                                              ; preds = %237
  store i32 17, i32* %61, align 4
  br label %256

256:                                              ; preds = %227, %235, %251, %253, %255
  %257 = phi i16 [ %219, %227 ], [ %219, %235 ], [ %252, %251 ], [ %219, %253 ], [ %219, %255 ]
  %258 = and i16 %257, 32
  %259 = icmp eq i16 %258, 0
  br i1 %259, label %263, label %260

260:                                              ; preds = %256
  store i32 1, i32* %55, align 8
  br label %261

261:                                              ; preds = %575, %1228, %270, %1267, %547, %1254, %260, %263, %341, %345, %350, %356, %373, %541, %1167, %197, %568, %1131, %1128, %1149, %1148, %1158, %1157, %1150, %1159, %1218, %1133, %656, %538, %357, %308, %213, %286, %297, %376, %389, %530, %935, %1160, %243, %245, %478, %529, %652, %854, %591, %927, %930, %1186, %335, %138, %144
  %262 = phi i32 [ 1, %138 ], [ 1, %144 ], [ 1, %197 ], [ %1219, %1218 ], [ 1, %1167 ], [ %1134, %1133 ], [ 1, %1148 ], [ 1, %1149 ], [ 1, %1150 ], [ 1, %1157 ], [ 1, %1158 ], [ 1, %1159 ], [ %1132, %1131 ], [ %1129, %1128 ], [ %659, %656 ], [ 2, %652 ], [ 1, %568 ], [ %539, %538 ], [ 1, %541 ], [ 1, %356 ], [ %360, %357 ], [ 1, %373 ], [ %309, %308 ], [ 1, %341 ], [ 1, %345 ], [ 1, %350 ], [ 1, %260 ], [ 1, %263 ], [ 2, %213 ], [ -13, %286 ], [ -30, %297 ], [ -14, %335 ], [ %386, %376 ], [ %395, %389 ], [ 1, %530 ], [ -27, %935 ], [ -10, %1160 ], [ -15, %1186 ], [ -13, %245 ], [ -13, %243 ], [ 2, %478 ], [ 2, %529 ], [ %859, %854 ], [ -21, %591 ], [ 1, %930 ], [ %909, %927 ], [ 2, %1254 ], [ 2, %547 ], [ 2, %1267 ], [ 2, %270 ], [ 2, %1228 ], [ 2, %575 ]
  br label %124

263:                                              ; preds = %256
  store i32 2, i32* %55, align 8
  br label %261

264:                                              ; preds = %197
  %265 = load i32, i32* %58, align 8
  %266 = sub i32 64, %265
  %267 = icmp ult i32 %266, 6
  br i1 %267, label %270, label %268

268:                                              ; preds = %264
  %269 = load i64, i64* %59, align 8
  br label %286

270:                                              ; preds = %264
  %271 = load i64, i64* %51, align 8
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %261, label %273

273:                                              ; preds = %270
  %274 = load i64, i64* %59, align 8
  %275 = lshr i64 %274, 8
  store i64 %275, i64* %59, align 8
  %276 = load i8*, i8** %54, align 8
  %277 = load i8, i8* %276, align 1
  %278 = zext i8 %277 to i64
  %279 = shl nuw i64 %278, 56
  %280 = or i64 %279, %275
  store i64 %280, i64* %59, align 8
  %281 = add i32 %265, -8
  store i32 %281, i32* %58, align 8
  %282 = add i64 %271, -1
  store i64 %282, i64* %51, align 8
  %283 = getelementptr inbounds i8, i8* %276, i64 1
  store i8* %283, i8** %54, align 8
  %284 = sub i32 72, %265
  %285 = icmp ult i32 %284, 6
  br i1 %285, label %1267, label %286

286:                                              ; preds = %273, %1269, %268
  %287 = phi i64 [ %269, %268 ], [ %280, %273 ], [ %1276, %1269 ]
  %288 = phi i32 [ %265, %268 ], [ %281, %273 ], [ %1277, %1269 ]
  %289 = zext i32 %288 to i64
  %290 = lshr i64 %287, %289
  %291 = trunc i64 %290 to i32
  %292 = and i32 %291, 63
  store i32 %292, i32* %61, align 4
  %293 = add i32 %288, 6
  store i32 %293, i32* %58, align 8
  %294 = add nsw i32 %292, -10
  %295 = icmp ugt i32 %294, 20
  br i1 %295, label %261, label %296

296:                                              ; preds = %286
  store i32 2, i32* %55, align 8
  br label %297

297:                                              ; preds = %202, %296
  %298 = phi i32 [ %203, %202 ], [ %292, %296 ]
  %299 = shl i32 1, %298
  %300 = add nsw i32 %299, -16
  store i32 %300, i32* %62, align 8
  %301 = load i8* (i8*, i64)*, i8* (i8*, i64)** %67, align 8
  %302 = load i8*, i8** %68, align 8
  %303 = call i8* %301(i8* %302, i64 12336) #14
  store i8* %303, i8** %108, align 8
  %304 = icmp eq i8* %303, null
  br i1 %304, label %261, label %305

305:                                              ; preds = %297
  %306 = getelementptr inbounds i8, i8* %303, i64 7584
  store i8* %306, i8** %110, align 8
  store i32 3, i32* %55, align 8
  br label %307

307:                                              ; preds = %197, %305
  call void @BrotliDecoderStateMetablockBegin(%struct.BrotliDecoderStateStruct* %0) #14
  store i32 4, i32* %55, align 8
  br label %308

308:                                              ; preds = %197, %307
  %309 = call fastcc i32 @DecodeMetaBlockLength(%struct.BrotliDecoderStateStruct* %0, %struct.BrotliBitReader* %9)
  %310 = icmp eq i32 %309, 1
  br i1 %310, label %311, label %261

311:                                              ; preds = %308
  %312 = load i16, i16* %57, align 8
  %313 = and i16 %312, 4
  %314 = icmp eq i16 %313, 0
  %315 = and i16 %312, 6
  %316 = icmp eq i16 %315, 0
  br i1 %316, label %340, label %317

317:                                              ; preds = %311
  %318 = load i32, i32* %58, align 8
  %319 = sub i32 0, %318
  %320 = and i32 %319, 7
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %340, label %322

322:                                              ; preds = %317
  %323 = load i64, i64* %59, align 8
  %324 = zext i32 %318 to i64
  %325 = lshr i64 %323, %324
  %326 = trunc i64 %325 to i32
  %327 = call i1 @llvm.is.constant.i32(i32 %320) #14
  br i1 %327, label %328, label %331

328:                                              ; preds = %322
  %329 = shl i32 -1, %320
  %330 = xor i32 %329, -1
  br label %335

331:                                              ; preds = %322
  %332 = zext i32 %320 to i64
  %333 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %332
  %334 = load i32, i32* %333, align 4
  br label %335

335:                                              ; preds = %328, %331
  %336 = phi i32 [ %330, %328 ], [ %334, %331 ]
  %337 = and i32 %336, %326
  %338 = add i32 %320, %318
  store i32 %338, i32* %58, align 8
  %339 = icmp eq i32 %337, 0
  br i1 %339, label %340, label %261

340:                                              ; preds = %335, %317, %311
  br i1 %314, label %342, label %341

341:                                              ; preds = %340
  store i32 12, i32* %55, align 8
  br label %261

342:                                              ; preds = %340
  %343 = load i32, i32* %56, align 8
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %345, label %346

345:                                              ; preds = %342
  store i32 14, i32* %55, align 8
  br label %261

346:                                              ; preds = %342
  call fastcc void @BrotliCalculateRingBufferSize(%struct.BrotliDecoderStateStruct* %0)
  %347 = load i16, i16* %57, align 8
  %348 = and i16 %347, 2
  %349 = icmp eq i16 %348, 0
  br i1 %349, label %351, label %350

350:                                              ; preds = %346
  store i32 11, i32* %55, align 8
  br label %261

351:                                              ; preds = %346
  store i32 17, i32* %55, align 8
  br label %352

352:                                              ; preds = %197, %351
  store i32 0, i32* %64, align 4
  store i16* %111, i16** %112, align 8
  store <4 x i32> zeroinitializer, <4 x i32>* %123, align 8
  store i32 18, i32* %55, align 8
  br label %353

353:                                              ; preds = %197, %352
  %354 = load i32, i32* %64, align 4
  %355 = icmp sgt i32 %354, 2
  br i1 %355, label %356, label %357

356:                                              ; preds = %353
  store i32 5, i32* %55, align 8
  br label %261

357:                                              ; preds = %353
  %358 = sext i32 %354 to i64
  %359 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 32, i64 %358
  %360 = call fastcc i32 @DecodeVarLenUint8(%struct.BrotliDecoderStateStruct* %0, %struct.BrotliBitReader* %9, i32* %359)
  %361 = icmp eq i32 %360, 1
  br i1 %361, label %362, label %261

362:                                              ; preds = %357
  %363 = load i32, i32* %64, align 4
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 32, i64 %364
  %366 = load i32, i32* %365, align 4
  %367 = add i32 %366, 1
  store i32 %367, i32* %365, align 4
  %368 = load i32, i32* %64, align 4
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 32, i64 %369
  %371 = load i32, i32* %370, align 4
  %372 = icmp ult i32 %371, 2
  br i1 %372, label %373, label %375

373:                                              ; preds = %362
  %374 = add nsw i32 %368, 1
  store i32 %374, i32* %64, align 4
  br label %261

375:                                              ; preds = %362
  store i32 19, i32* %55, align 8
  br label %376

376:                                              ; preds = %199, %375
  %377 = phi i64 [ %201, %199 ], [ %369, %375 ]
  %378 = phi i32 [ %200, %199 ], [ %368, %375 ]
  %379 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 32, i64 %377
  %380 = load i32, i32* %379, align 4
  %381 = add i32 %380, 2
  %382 = mul nsw i32 %378, 632
  %383 = load %struct.HuffmanCode*, %struct.HuffmanCode** %107, align 8
  %384 = sext i32 %382 to i64
  %385 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %383, i64 %384
  %386 = call fastcc i32 @ReadHuffmanCode(i32 %381, i32 %381, %struct.HuffmanCode* %385, i32* null, %struct.BrotliDecoderStateStruct* %0)
  %387 = icmp eq i32 %386, 1
  br i1 %387, label %388, label %261

388:                                              ; preds = %376
  store i32 20, i32* %55, align 8
  br label %389

389:                                              ; preds = %388, %197
  %390 = load i32, i32* %64, align 4
  %391 = mul nsw i32 %390, 396
  %392 = load %struct.HuffmanCode*, %struct.HuffmanCode** %109, align 8
  %393 = sext i32 %391 to i64
  %394 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %392, i64 %393
  %395 = call fastcc i32 @ReadHuffmanCode(i32 26, i32 26, %struct.HuffmanCode* %394, i32* null, %struct.BrotliDecoderStateStruct* %0)
  %396 = icmp eq i32 %395, 1
  br i1 %396, label %397, label %261

397:                                              ; preds = %389
  store i32 21, i32* %55, align 8
  br label %398

398:                                              ; preds = %397, %197
  %399 = load i32, i32* %64, align 4
  %400 = mul nsw i32 %399, 396
  %401 = sext i32 %399 to i64
  %402 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 31, i64 %401
  %403 = load %struct.HuffmanCode*, %struct.HuffmanCode** %109, align 8
  %404 = sext i32 %400 to i64
  %405 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %403, i64 %404
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %113) #14
  store i32 -1431655766, i32* %8, align 4
  %406 = load i32, i32* %114, align 4
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %408, label %481

408:                                              ; preds = %398
  %409 = load i32, i32* %58, align 8
  %410 = sub i32 64, %409
  %411 = icmp ult i32 %410, 15
  br i1 %411, label %414, label %412

412:                                              ; preds = %408
  %413 = load i64, i64* %59, align 8
  br label %430

414:                                              ; preds = %408
  %415 = load i64, i64* %51, align 8
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %475, label %417

417:                                              ; preds = %414
  %418 = load i64, i64* %59, align 8
  %419 = lshr i64 %418, 8
  store i64 %419, i64* %59, align 8
  %420 = load i8*, i8** %54, align 8
  %421 = load i8, i8* %420, align 1
  %422 = zext i8 %421 to i64
  %423 = shl nuw i64 %422, 56
  %424 = or i64 %423, %419
  store i64 %424, i64* %59, align 8
  %425 = add i32 %409, -8
  store i32 %425, i32* %58, align 8
  %426 = add i64 %415, -1
  store i64 %426, i64* %51, align 8
  %427 = getelementptr inbounds i8, i8* %420, i64 1
  store i8* %427, i8** %54, align 8
  %428 = sub i32 72, %409
  %429 = icmp ult i32 %428, 15
  br i1 %429, label %1280, label %430

430:                                              ; preds = %417, %1282, %1297, %412
  %431 = phi i64 [ %413, %412 ], [ %424, %417 ], [ %1289, %1282 ], [ %1304, %1297 ]
  %432 = phi i32 [ %409, %412 ], [ %425, %417 ], [ %1290, %1282 ], [ %1305, %1297 ]
  %433 = zext i32 %432 to i64
  %434 = lshr i64 %431, %433
  %435 = and i64 %434, 255
  %436 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %405, i64 %435
  %437 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %436, i64 0, i32 0
  %438 = load i8, i8* %437, align 2
  %439 = icmp ugt i8 %438, 8
  br i1 %439, label %440, label %466

440:                                              ; preds = %430
  %441 = trunc i64 %434 to i32
  %442 = zext i8 %438 to i32
  %443 = add nsw i32 %442, -8
  %444 = add i32 %432, 8
  store i32 %444, i32* %58, align 8
  %445 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %405, i64 %435, i32 1
  %446 = load i16, i16* %445, align 2
  %447 = zext i16 %446 to i32
  %448 = lshr i32 %441, 8
  %449 = and i32 %448, 127
  %450 = call i1 @llvm.is.constant.i32(i32 %443) #14
  br i1 %450, label %451, label %454

451:                                              ; preds = %440
  %452 = shl i32 -1, %443
  %453 = xor i32 %452, -1
  br label %458

454:                                              ; preds = %440
  %455 = zext i32 %443 to i64
  %456 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %455
  %457 = load i32, i32* %456, align 4
  br label %458

458:                                              ; preds = %454, %451
  %459 = phi i32 [ %453, %451 ], [ %457, %454 ]
  %460 = and i32 %449, %459
  %461 = add nuw nsw i32 %460, %447
  %462 = zext i32 %461 to i64
  %463 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %436, i64 %462
  %464 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %463, i64 0, i32 0
  %465 = load i8, i8* %464, align 2
  br label %466

466:                                              ; preds = %458, %430
  %467 = phi i32 [ %444, %458 ], [ %432, %430 ]
  %468 = phi i8 [ %465, %458 ], [ %438, %430 ]
  %469 = phi %struct.HuffmanCode* [ %463, %458 ], [ %436, %430 ]
  %470 = zext i8 %468 to i32
  %471 = add i32 %467, %470
  store i32 %471, i32* %58, align 8
  %472 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %469, i64 0, i32 1
  %473 = load i16, i16* %472, align 2
  %474 = zext i16 %473 to i32
  store i32 %474, i32* %8, align 4
  br label %483

475:                                              ; preds = %1295, %1280, %414
  %476 = call fastcc i32 @SafeDecodeSymbol(%struct.HuffmanCode* %405, %struct.BrotliBitReader* %9, i32* nonnull %8) #14
  %477 = icmp eq i32 %476, 0
  br i1 %477, label %478, label %479

478:                                              ; preds = %475
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %113) #14
  br label %261

479:                                              ; preds = %475
  %480 = load i32, i32* %8, align 4
  br label %483

481:                                              ; preds = %398
  %482 = load i32, i32* %115, align 4
  store i32 %482, i32* %8, align 4
  br label %483

483:                                              ; preds = %481, %479, %466
  %484 = phi i32 [ %480, %479 ], [ %474, %466 ], [ %482, %481 ]
  %485 = zext i32 %484 to i64
  %486 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %485, i32 1
  %487 = load i8, i8* %486, align 2
  %488 = zext i8 %487 to i32
  %489 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %485, i32 0
  %490 = load i16, i16* %489, align 4
  %491 = load i32, i32* %58, align 8
  %492 = sub i32 64, %491
  %493 = icmp ult i32 %492, %488
  br i1 %493, label %496, label %494

494:                                              ; preds = %483
  %495 = load i64, i64* %59, align 8
  br label %515

496:                                              ; preds = %483
  %497 = load i64, i64* %51, align 8
  br label %498

498:                                              ; preds = %502, %496
  %499 = phi i64 [ %497, %496 ], [ %511, %502 ]
  %500 = phi i32 [ %491, %496 ], [ %510, %502 ]
  %501 = icmp eq i64 %499, 0
  br i1 %501, label %529, label %502

502:                                              ; preds = %498
  %503 = load i64, i64* %59, align 8
  %504 = lshr i64 %503, 8
  store i64 %504, i64* %59, align 8
  %505 = load i8*, i8** %54, align 8
  %506 = load i8, i8* %505, align 1
  %507 = zext i8 %506 to i64
  %508 = shl nuw i64 %507, 56
  %509 = or i64 %508, %504
  store i64 %509, i64* %59, align 8
  %510 = add i32 %500, -8
  store i32 %510, i32* %58, align 8
  %511 = add i64 %499, -1
  store i64 %511, i64* %51, align 8
  %512 = getelementptr inbounds i8, i8* %505, i64 1
  store i8* %512, i8** %54, align 8
  %513 = sub i32 72, %500
  %514 = icmp ult i32 %513, %488
  br i1 %514, label %498, label %515

515:                                              ; preds = %502, %494
  %516 = phi i64 [ %495, %494 ], [ %509, %502 ]
  %517 = phi i32 [ %491, %494 ], [ %510, %502 ]
  %518 = zext i32 %517 to i64
  %519 = lshr i64 %516, %518
  %520 = trunc i64 %519 to i32
  %521 = call i1 @llvm.is.constant.i32(i32 %488) #14
  br i1 %521, label %522, label %525

522:                                              ; preds = %515
  %523 = shl i32 -1, %488
  %524 = xor i32 %523, -1
  br label %530

525:                                              ; preds = %515
  %526 = zext i8 %487 to i64
  %527 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %526
  %528 = load i32, i32* %527, align 4
  br label %530

529:                                              ; preds = %498
  store i32 %484, i32* %115, align 4
  store i32 1, i32* %114, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %113) #14
  br label %261

530:                                              ; preds = %525, %522
  %531 = phi i32 [ %524, %522 ], [ %528, %525 ]
  %532 = and i32 %531, %520
  %533 = add i32 %517, %488
  store i32 %533, i32* %58, align 8
  %534 = zext i16 %490 to i32
  %535 = add i32 %532, %534
  store i32 %535, i32* %402, align 4
  store i32 0, i32* %114, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %113) #14
  %536 = load i32, i32* %64, align 4
  %537 = add nsw i32 %536, 1
  store i32 %537, i32* %64, align 4
  store i32 18, i32* %55, align 8
  br label %261

538:                                              ; preds = %197
  %539 = call fastcc i32 @CopyUncompressedBlockToOutput(i64* %3, i8** %29, i64* %5, %struct.BrotliDecoderStateStruct* %0)
  %540 = icmp eq i32 %539, 1
  br i1 %540, label %541, label %261

541:                                              ; preds = %538
  store i32 14, i32* %55, align 8
  br label %261

542:                                              ; preds = %211, %563
  %543 = phi i32 [ %565, %563 ], [ %212, %211 ]
  %544 = phi i32 [ %566, %563 ], [ %209, %211 ]
  %545 = sub i32 64, %543
  %546 = icmp ult i32 %545, 8
  br i1 %546, label %547, label %563

547:                                              ; preds = %542
  %548 = load i64, i64* %51, align 8
  %549 = icmp eq i64 %548, 0
  br i1 %549, label %261, label %550

550:                                              ; preds = %547
  %551 = load i64, i64* %59, align 8
  %552 = lshr i64 %551, 8
  store i64 %552, i64* %59, align 8
  %553 = load i8*, i8** %54, align 8
  %554 = load i8, i8* %553, align 1
  %555 = zext i8 %554 to i64
  %556 = shl nuw i64 %555, 56
  %557 = or i64 %556, %552
  store i64 %557, i64* %59, align 8
  %558 = add i32 %543, -8
  store i32 %558, i32* %58, align 8
  %559 = add i64 %548, -1
  store i64 %559, i64* %51, align 8
  %560 = getelementptr inbounds i8, i8* %553, i64 1
  store i8* %560, i8** %54, align 8
  %561 = sub i32 72, %543
  %562 = icmp ult i32 %561, 8
  br i1 %562, label %1254, label %563

563:                                              ; preds = %550, %1256, %542
  %564 = phi i32 [ %543, %542 ], [ %558, %550 ], [ %1264, %1256 ]
  %565 = add i32 %564, 8
  store i32 %565, i32* %58, align 8
  %566 = add nsw i32 %544, -1
  store i32 %566, i32* %56, align 8
  %567 = icmp sgt i32 %566, 0
  br i1 %567, label %542, label %568

568:                                              ; preds = %563, %208
  store i32 14, i32* %55, align 8
  br label %261

569:                                              ; preds = %197
  %570 = load i32, i32* %58, align 8
  %571 = sub i32 64, %570
  %572 = icmp ult i32 %571, 6
  br i1 %572, label %575, label %573

573:                                              ; preds = %569
  %574 = load i64, i64* %59, align 8
  br label %591

575:                                              ; preds = %569
  %576 = load i64, i64* %51, align 8
  %577 = icmp eq i64 %576, 0
  br i1 %577, label %261, label %578

578:                                              ; preds = %575
  %579 = load i64, i64* %59, align 8
  %580 = lshr i64 %579, 8
  store i64 %580, i64* %59, align 8
  %581 = load i8*, i8** %54, align 8
  %582 = load i8, i8* %581, align 1
  %583 = zext i8 %582 to i64
  %584 = shl nuw i64 %583, 56
  %585 = or i64 %584, %580
  store i64 %585, i64* %59, align 8
  %586 = add i32 %570, -8
  store i32 %586, i32* %58, align 8
  %587 = add i64 %576, -1
  store i64 %587, i64* %51, align 8
  %588 = getelementptr inbounds i8, i8* %581, i64 1
  store i8* %588, i8** %54, align 8
  %589 = sub i32 72, %570
  %590 = icmp ult i32 %589, 6
  br i1 %590, label %1228, label %591

591:                                              ; preds = %578, %1230, %573
  %592 = phi i64 [ %574, %573 ], [ %585, %578 ], [ %1237, %1230 ]
  %593 = phi i32 [ %570, %573 ], [ %586, %578 ], [ %1238, %1230 ]
  %594 = zext i32 %593 to i64
  %595 = lshr i64 %592, %594
  %596 = trunc i64 %595 to i32
  %597 = add i32 %593, 6
  store i32 %597, i32* %58, align 8
  %598 = and i32 %596, 3
  store i32 %598, i32* %65, align 8
  %599 = lshr i32 %596, 2
  %600 = and i32 %599, 15
  %601 = shl i32 %600, %598
  store i32 %601, i32* %66, align 4
  %602 = load i8* (i8*, i64)*, i8* (i8*, i64)** %67, align 8
  %603 = load i8*, i8** %68, align 8
  %604 = load i32, i32* %69, align 4
  %605 = zext i32 %604 to i64
  %606 = call i8* %602(i8* %603, i64 %605) #14
  store i8* %606, i8** %70, align 8
  %607 = icmp eq i8* %606, null
  br i1 %607, label %261, label %608

608:                                              ; preds = %591
  store i32 0, i32* %64, align 4
  store i32 6, i32* %55, align 8
  br label %609

609:                                              ; preds = %206, %608
  %610 = phi i32 [ %207, %206 ], [ 0, %608 ]
  %611 = load i32, i32* %69, align 4
  %612 = icmp slt i32 %610, %611
  br i1 %612, label %613, label %654

613:                                              ; preds = %609
  %614 = sext i32 %610 to i64
  br label %615

615:                                              ; preds = %638, %613
  %616 = phi i64 [ %614, %613 ], [ %648, %638 ]
  %617 = load i32, i32* %58, align 8
  %618 = sub i32 64, %617
  %619 = icmp ult i32 %618, 2
  br i1 %619, label %622, label %620

620:                                              ; preds = %615
  %621 = load i64, i64* %71, align 8
  br label %638

622:                                              ; preds = %615
  %623 = load i64, i64* %51, align 8
  %624 = icmp eq i64 %623, 0
  br i1 %624, label %652, label %625

625:                                              ; preds = %622
  %626 = load i64, i64* %71, align 8
  %627 = lshr i64 %626, 8
  store i64 %627, i64* %71, align 8
  %628 = load i8*, i8** %54, align 8
  %629 = load i8, i8* %628, align 1
  %630 = zext i8 %629 to i64
  %631 = shl nuw i64 %630, 56
  %632 = or i64 %631, %627
  store i64 %632, i64* %71, align 8
  %633 = add i32 %617, -8
  store i32 %633, i32* %58, align 8
  %634 = add i64 %623, -1
  store i64 %634, i64* %51, align 8
  %635 = getelementptr inbounds i8, i8* %628, i64 1
  store i8* %635, i8** %54, align 8
  %636 = sub i32 72, %617
  %637 = icmp ult i32 %636, 2
  br i1 %637, label %1241, label %638

638:                                              ; preds = %625, %1243, %620
  %639 = phi i64 [ %621, %620 ], [ %632, %625 ], [ %1250, %1243 ]
  %640 = phi i32 [ %617, %620 ], [ %633, %625 ], [ %1251, %1243 ]
  %641 = zext i32 %640 to i64
  %642 = lshr i64 %639, %641
  %643 = trunc i64 %642 to i8
  %644 = and i8 %643, 3
  %645 = add i32 %640, 2
  store i32 %645, i32* %58, align 8
  %646 = load i8*, i8** %70, align 8
  %647 = getelementptr inbounds i8, i8* %646, i64 %616
  store i8 %644, i8* %647, align 1
  %648 = add nsw i64 %616, 1
  %649 = load i32, i32* %69, align 4
  %650 = sext i32 %649 to i64
  %651 = icmp slt i64 %648, %650
  br i1 %651, label %615, label %654

652:                                              ; preds = %1241, %622
  %653 = trunc i64 %616 to i32
  store i32 %653, i32* %64, align 4
  br label %261

654:                                              ; preds = %638, %609
  %655 = phi i32 [ %611, %609 ], [ %649, %638 ]
  store i32 22, i32* %55, align 8
  br label %656

656:                                              ; preds = %204, %654
  %657 = phi i32 [ %205, %204 ], [ %655, %654 ]
  %658 = shl i32 %657, 6
  %659 = call fastcc i32 @DecodeContextMap(i32 %658, i32* %72, i8** %73, %struct.BrotliDecoderStateStruct* %0)
  %660 = icmp eq i32 %659, 1
  br i1 %660, label %661, label %261

661:                                              ; preds = %656
  call void @llvm.memset.p0i8.i64(i8* align 4 %75, i8 0, i64 32, i1 false) #14
  %662 = load i32, i32* %69, align 4
  %663 = icmp eq i32 %662, 0
  br i1 %663, label %816, label %664

664:                                              ; preds = %661
  %665 = load i8*, i8** %73, align 8
  %666 = zext i32 %662 to i64
  br label %667

667:                                              ; preds = %813, %664
  %668 = phi i64 [ 0, %664 ], [ %814, %813 ]
  %669 = shl i64 %668, 6
  %670 = getelementptr inbounds i8, i8* %665, i64 %669
  %671 = load i8, i8* %670, align 1
  %672 = insertelement <2 x i8> undef, i8 %671, i32 0
  %673 = shufflevector <2 x i8> %672, <2 x i8> undef, <2 x i32> zeroinitializer
  %674 = getelementptr inbounds i8, i8* %665, i64 %669
  %675 = bitcast i8* %674 to <8 x i8>*
  %676 = load <8 x i8>, <8 x i8>* %675, align 1
  %677 = shufflevector <8 x i8> %676, <8 x i8> undef, <2 x i32> <i32 0, i32 4>
  %678 = shufflevector <8 x i8> %676, <8 x i8> undef, <2 x i32> <i32 1, i32 5>
  %679 = shufflevector <8 x i8> %676, <8 x i8> undef, <2 x i32> <i32 2, i32 6>
  %680 = shufflevector <8 x i8> %676, <8 x i8> undef, <2 x i32> <i32 3, i32 7>
  %681 = xor <2 x i8> %677, %673
  %682 = xor <2 x i8> %678, %673
  %683 = or <2 x i8> %681, %682
  %684 = xor <2 x i8> %679, %673
  %685 = or <2 x i8> %683, %684
  %686 = xor <2 x i8> %680, %673
  %687 = or <2 x i8> %685, %686
  %688 = or i64 %669, 8
  %689 = getelementptr inbounds i8, i8* %665, i64 %688
  %690 = bitcast i8* %689 to <8 x i8>*
  %691 = load <8 x i8>, <8 x i8>* %690, align 1
  %692 = shufflevector <8 x i8> %691, <8 x i8> undef, <2 x i32> <i32 0, i32 4>
  %693 = shufflevector <8 x i8> %691, <8 x i8> undef, <2 x i32> <i32 1, i32 5>
  %694 = shufflevector <8 x i8> %691, <8 x i8> undef, <2 x i32> <i32 2, i32 6>
  %695 = shufflevector <8 x i8> %691, <8 x i8> undef, <2 x i32> <i32 3, i32 7>
  %696 = xor <2 x i8> %692, %673
  %697 = or <2 x i8> %687, %696
  %698 = xor <2 x i8> %693, %673
  %699 = or <2 x i8> %697, %698
  %700 = xor <2 x i8> %694, %673
  %701 = or <2 x i8> %699, %700
  %702 = xor <2 x i8> %695, %673
  %703 = or <2 x i8> %701, %702
  %704 = or i64 %669, 16
  %705 = getelementptr inbounds i8, i8* %665, i64 %704
  %706 = bitcast i8* %705 to <8 x i8>*
  %707 = load <8 x i8>, <8 x i8>* %706, align 1
  %708 = shufflevector <8 x i8> %707, <8 x i8> undef, <2 x i32> <i32 0, i32 4>
  %709 = shufflevector <8 x i8> %707, <8 x i8> undef, <2 x i32> <i32 1, i32 5>
  %710 = shufflevector <8 x i8> %707, <8 x i8> undef, <2 x i32> <i32 2, i32 6>
  %711 = shufflevector <8 x i8> %707, <8 x i8> undef, <2 x i32> <i32 3, i32 7>
  %712 = xor <2 x i8> %708, %673
  %713 = or <2 x i8> %703, %712
  %714 = xor <2 x i8> %709, %673
  %715 = or <2 x i8> %713, %714
  %716 = xor <2 x i8> %710, %673
  %717 = or <2 x i8> %715, %716
  %718 = xor <2 x i8> %711, %673
  %719 = or <2 x i8> %717, %718
  %720 = or i64 %669, 24
  %721 = getelementptr inbounds i8, i8* %665, i64 %720
  %722 = bitcast i8* %721 to <8 x i8>*
  %723 = load <8 x i8>, <8 x i8>* %722, align 1
  %724 = shufflevector <8 x i8> %723, <8 x i8> undef, <2 x i32> <i32 0, i32 4>
  %725 = shufflevector <8 x i8> %723, <8 x i8> undef, <2 x i32> <i32 1, i32 5>
  %726 = shufflevector <8 x i8> %723, <8 x i8> undef, <2 x i32> <i32 2, i32 6>
  %727 = shufflevector <8 x i8> %723, <8 x i8> undef, <2 x i32> <i32 3, i32 7>
  %728 = xor <2 x i8> %724, %673
  %729 = or <2 x i8> %719, %728
  %730 = xor <2 x i8> %725, %673
  %731 = or <2 x i8> %729, %730
  %732 = xor <2 x i8> %726, %673
  %733 = or <2 x i8> %731, %732
  %734 = xor <2 x i8> %727, %673
  %735 = or <2 x i8> %733, %734
  %736 = or i64 %669, 32
  %737 = getelementptr inbounds i8, i8* %665, i64 %736
  %738 = bitcast i8* %737 to <8 x i8>*
  %739 = load <8 x i8>, <8 x i8>* %738, align 1
  %740 = shufflevector <8 x i8> %739, <8 x i8> undef, <2 x i32> <i32 0, i32 4>
  %741 = shufflevector <8 x i8> %739, <8 x i8> undef, <2 x i32> <i32 1, i32 5>
  %742 = shufflevector <8 x i8> %739, <8 x i8> undef, <2 x i32> <i32 2, i32 6>
  %743 = shufflevector <8 x i8> %739, <8 x i8> undef, <2 x i32> <i32 3, i32 7>
  %744 = xor <2 x i8> %740, %673
  %745 = or <2 x i8> %735, %744
  %746 = xor <2 x i8> %741, %673
  %747 = or <2 x i8> %745, %746
  %748 = xor <2 x i8> %742, %673
  %749 = or <2 x i8> %747, %748
  %750 = xor <2 x i8> %743, %673
  %751 = or <2 x i8> %749, %750
  %752 = or i64 %669, 40
  %753 = getelementptr inbounds i8, i8* %665, i64 %752
  %754 = bitcast i8* %753 to <8 x i8>*
  %755 = load <8 x i8>, <8 x i8>* %754, align 1
  %756 = shufflevector <8 x i8> %755, <8 x i8> undef, <2 x i32> <i32 0, i32 4>
  %757 = shufflevector <8 x i8> %755, <8 x i8> undef, <2 x i32> <i32 1, i32 5>
  %758 = shufflevector <8 x i8> %755, <8 x i8> undef, <2 x i32> <i32 2, i32 6>
  %759 = shufflevector <8 x i8> %755, <8 x i8> undef, <2 x i32> <i32 3, i32 7>
  %760 = xor <2 x i8> %756, %673
  %761 = or <2 x i8> %751, %760
  %762 = xor <2 x i8> %757, %673
  %763 = or <2 x i8> %761, %762
  %764 = xor <2 x i8> %758, %673
  %765 = or <2 x i8> %763, %764
  %766 = xor <2 x i8> %759, %673
  %767 = or <2 x i8> %765, %766
  %768 = or i64 %669, 48
  %769 = getelementptr inbounds i8, i8* %665, i64 %768
  %770 = bitcast i8* %769 to <8 x i8>*
  %771 = load <8 x i8>, <8 x i8>* %770, align 1
  %772 = shufflevector <8 x i8> %771, <8 x i8> undef, <2 x i32> <i32 0, i32 4>
  %773 = shufflevector <8 x i8> %771, <8 x i8> undef, <2 x i32> <i32 1, i32 5>
  %774 = shufflevector <8 x i8> %771, <8 x i8> undef, <2 x i32> <i32 2, i32 6>
  %775 = shufflevector <8 x i8> %771, <8 x i8> undef, <2 x i32> <i32 3, i32 7>
  %776 = xor <2 x i8> %772, %673
  %777 = or <2 x i8> %767, %776
  %778 = xor <2 x i8> %773, %673
  %779 = or <2 x i8> %777, %778
  %780 = xor <2 x i8> %774, %673
  %781 = or <2 x i8> %779, %780
  %782 = xor <2 x i8> %775, %673
  %783 = or <2 x i8> %781, %782
  %784 = or i64 %669, 56
  %785 = getelementptr inbounds i8, i8* %665, i64 %784
  %786 = bitcast i8* %785 to <8 x i8>*
  %787 = load <8 x i8>, <8 x i8>* %786, align 1
  %788 = shufflevector <8 x i8> %787, <8 x i8> undef, <2 x i32> <i32 0, i32 4>
  %789 = shufflevector <8 x i8> %787, <8 x i8> undef, <2 x i32> <i32 1, i32 5>
  %790 = shufflevector <8 x i8> %787, <8 x i8> undef, <2 x i32> <i32 2, i32 6>
  %791 = shufflevector <8 x i8> %787, <8 x i8> undef, <2 x i32> <i32 3, i32 7>
  %792 = xor <2 x i8> %788, %673
  %793 = or <2 x i8> %783, %792
  %794 = xor <2 x i8> %789, %673
  %795 = or <2 x i8> %793, %794
  %796 = xor <2 x i8> %790, %673
  %797 = or <2 x i8> %795, %796
  %798 = xor <2 x i8> %791, %673
  %799 = or <2 x i8> %797, %798
  %800 = zext <2 x i8> %799 to <2 x i64>
  %801 = shufflevector <2 x i64> %800, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %802 = or <2 x i64> %801, %800
  %803 = extractelement <2 x i64> %802, i32 0
  %804 = icmp eq i64 %803, 0
  br i1 %804, label %805, label %813

805:                                              ; preds = %667
  %806 = trunc i64 %668 to i32
  %807 = and i32 %806, 31
  %808 = shl i32 1, %807
  %809 = lshr i64 %668, 5
  %810 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 58, i64 %809
  %811 = load i32, i32* %810, align 4
  %812 = or i32 %811, %808
  store i32 %812, i32* %810, align 4
  br label %813

813:                                              ; preds = %805, %667
  %814 = add nuw nsw i64 %668, 1
  %815 = icmp eq i64 %814, %666
  br i1 %815, label %816, label %667

816:                                              ; preds = %813, %661
  store i32 23, i32* %55, align 8
  br label %817

817:                                              ; preds = %197, %816
  %818 = load i32, i32* %65, align 8
  %819 = load i32, i32* %66, align 4
  %820 = add i32 %819, 16
  %821 = add i32 %818, 1
  %822 = shl i32 24, %821
  %823 = add i32 %820, %822
  %824 = load i16, i16* %57, align 8
  %825 = and i16 %824, 32
  %826 = icmp eq i16 %825, 0
  br i1 %826, label %854, label %827

827:                                              ; preds = %817
  %828 = icmp ugt i32 %819, 2147483643
  br i1 %828, label %850, label %829

829:                                              ; preds = %827
  %830 = sub nuw nsw i32 2147483644, %819
  %831 = lshr i32 %830, %818
  %832 = add nuw i32 %831, 4
  %833 = lshr i32 %832, 1
  %834 = call i32 @llvm.ctlz.i32(i32 %833, i1 false) #14, !range !2
  %835 = sub nsw i32 31, %834
  %836 = lshr i32 %832, %835
  %837 = and i32 %836, 1
  %838 = shl nuw nsw i32 %834, 1
  %839 = sub nsw i32 60, %838
  %840 = or i32 %837, %839
  %841 = icmp eq i32 %840, 0
  br i1 %841, label %850, label %842

842:                                              ; preds = %829
  %843 = shl nsw i32 -1, %818
  %844 = xor i32 %843, -1
  %845 = add nsw i32 %840, -1
  %846 = shl i32 %845, %818
  %847 = or i32 %846, %844
  %848 = add nuw i32 %819, 17
  %849 = add i32 %848, %847
  br label %850

850:                                              ; preds = %829, %827, %842
  %851 = phi i32 [ -2147483636, %827 ], [ %849, %842 ], [ %820, %829 ]
  %852 = shl i32 62, %821
  %853 = add i32 %820, %852
  br label %854

854:                                              ; preds = %817, %850
  %855 = phi i32 [ %853, %850 ], [ %823, %817 ]
  %856 = phi i32 [ %851, %850 ], [ %823, %817 ]
  %857 = load i32, i32* %76, align 4
  %858 = shl i32 %857, 2
  %859 = call fastcc i32 @DecodeContextMap(i32 %858, i32* %77, i8** %78, %struct.BrotliDecoderStateStruct* %0)
  %860 = icmp eq i32 %859, 1
  br i1 %860, label %861, label %261

861:                                              ; preds = %854
  %862 = load i32, i32* %72, align 4
  %863 = call i32 @BrotliDecoderHuffmanTreeGroupInit(%struct.BrotliDecoderStateStruct* %0, %struct.HuffmanTreeGroup* %79, i32 256, i32 256, i32 %862) #14
  %864 = and i32 %863, 1
  %865 = load i32, i32* %81, align 4
  %866 = call i32 @BrotliDecoderHuffmanTreeGroupInit(%struct.BrotliDecoderStateStruct* %0, %struct.HuffmanTreeGroup* %80, i32 704, i32 704, i32 %865) #14
  %867 = and i32 %864, %866
  %868 = load i32, i32* %77, align 8
  %869 = call i32 @BrotliDecoderHuffmanTreeGroupInit(%struct.BrotliDecoderStateStruct* %0, %struct.HuffmanTreeGroup* %82, i32 %855, i32 %856, i32 %868) #14
  %870 = and i32 %867, %869
  %871 = icmp eq i32 %870, 0
  br i1 %871, label %872, label %874

872:                                              ; preds = %861
  %873 = call fastcc i32 @SaveErrorCode(%struct.BrotliDecoderStateStruct* %0, i32 -22)
  br label %1226

874:                                              ; preds = %861
  store i32 0, i32* %64, align 4
  store i32 24, i32* %55, align 8
  br label %881

875:                                              ; preds = %197
  %876 = load i32, i32* %64, align 4
  switch i32 %876, label %879 [
    i32 0, label %881
    i32 1, label %877
    i32 2, label %878
  ]

877:                                              ; preds = %875
  br label %881

878:                                              ; preds = %875
  br label %881

879:                                              ; preds = %875
  %880 = call fastcc i32 @SaveErrorCode(%struct.BrotliDecoderStateStruct* %0, i32 -31)
  br label %1226

881:                                              ; preds = %874, %875, %878, %877
  %882 = phi i32 [ %876, %878 ], [ %876, %877 ], [ %876, %875 ], [ 0, %874 ]
  %883 = phi %struct.HuffmanTreeGroup* [ %82, %878 ], [ %80, %877 ], [ %79, %875 ], [ %79, %874 ]
  %884 = load i32, i32* %83, align 8
  %885 = icmp eq i32 %884, 1
  br i1 %885, label %886, label %888

886:                                              ; preds = %881
  %887 = load i32, i32* %86, align 4
  br label %892

888:                                              ; preds = %881
  %889 = getelementptr inbounds %struct.HuffmanTreeGroup, %struct.HuffmanTreeGroup* %883, i64 0, i32 1
  %890 = bitcast %struct.HuffmanCode** %889 to i64*
  %891 = load i64, i64* %890, align 8
  store i64 %891, i64* %85, align 8
  store i32 0, i32* %86, align 4
  store i32 1, i32* %83, align 8
  br label %892

892:                                              ; preds = %888, %886
  %893 = phi i32 [ %887, %886 ], [ 0, %888 ]
  %894 = getelementptr inbounds %struct.HuffmanTreeGroup, %struct.HuffmanTreeGroup* %883, i64 0, i32 4
  %895 = load i16, i16* %894, align 4
  %896 = zext i16 %895 to i32
  %897 = icmp slt i32 %893, %896
  br i1 %897, label %898, label %930

898:                                              ; preds = %892
  %899 = getelementptr inbounds %struct.HuffmanTreeGroup, %struct.HuffmanTreeGroup* %883, i64 0, i32 2
  %900 = getelementptr inbounds %struct.HuffmanTreeGroup, %struct.HuffmanTreeGroup* %883, i64 0, i32 3
  %901 = getelementptr inbounds %struct.HuffmanTreeGroup, %struct.HuffmanTreeGroup* %883, i64 0, i32 0
  %902 = load %struct.HuffmanCode*, %struct.HuffmanCode** %84, align 8
  br label %903

903:                                              ; preds = %911, %898
  %904 = phi %struct.HuffmanCode* [ %902, %898 ], [ %921, %911 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %87) #14
  store i32 -1431655766, i32* %7, align 4
  %905 = load i16, i16* %899, align 8
  %906 = zext i16 %905 to i32
  %907 = load i16, i16* %900, align 2
  %908 = zext i16 %907 to i32
  %909 = call fastcc i32 @ReadHuffmanCode(i32 %906, i32 %908, %struct.HuffmanCode* %904, i32* nonnull %7, %struct.BrotliDecoderStateStruct* %0) #14
  %910 = icmp eq i32 %909, 1
  br i1 %910, label %911, label %927

911:                                              ; preds = %903
  %912 = load i64, i64* %85, align 8
  %913 = load %struct.HuffmanCode**, %struct.HuffmanCode*** %901, align 8
  %914 = load i32, i32* %86, align 4
  %915 = sext i32 %914 to i64
  %916 = getelementptr inbounds %struct.HuffmanCode*, %struct.HuffmanCode** %913, i64 %915
  %917 = bitcast %struct.HuffmanCode** %916 to i64*
  store i64 %912, i64* %917, align 8
  %918 = load i32, i32* %7, align 4
  %919 = load %struct.HuffmanCode*, %struct.HuffmanCode** %84, align 8
  %920 = zext i32 %918 to i64
  %921 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %919, i64 %920
  store %struct.HuffmanCode* %921, %struct.HuffmanCode** %84, align 8
  %922 = load i32, i32* %86, align 4
  %923 = add nsw i32 %922, 1
  store i32 %923, i32* %86, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %87) #14
  %924 = load i16, i16* %894, align 4
  %925 = zext i16 %924 to i32
  %926 = icmp slt i32 %923, %925
  br i1 %926, label %903, label %928

927:                                              ; preds = %903
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %87) #14
  br label %261

928:                                              ; preds = %911
  %929 = load i32, i32* %64, align 4
  br label %930

930:                                              ; preds = %928, %892
  %931 = phi i32 [ %929, %928 ], [ %882, %892 ]
  store i32 0, i32* %83, align 8
  %932 = add nsw i32 %931, 1
  store i32 %932, i32* %64, align 4
  %933 = icmp slt i32 %932, 3
  br i1 %933, label %261, label %934

934:                                              ; preds = %930
  store i32 25, i32* %55, align 8
  br label %935

935:                                              ; preds = %934, %197
  %936 = load i32, i32* %88, align 4
  %937 = shl i32 %936, 6
  %938 = load i8*, i8** %73, align 8
  %939 = zext i32 %937 to i64
  %940 = getelementptr inbounds i8, i8* %938, i64 %939
  store i8* %940, i8** %89, align 8
  %941 = lshr i32 %936, 5
  %942 = zext i32 %941 to i64
  %943 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 58, i64 %942
  %944 = load i32, i32* %943, align 4
  %945 = zext i32 %944 to i64
  %946 = and i32 %936, 31
  %947 = zext i32 %946 to i64
  %948 = lshr i64 %945, %947
  %949 = trunc i64 %948 to i32
  %950 = and i32 %949, 1
  store i32 %950, i32* %90, align 8
  %951 = load %struct.HuffmanCode**, %struct.HuffmanCode*** %91, align 8
  %952 = load i8, i8* %940, align 1
  %953 = zext i8 %952 to i64
  %954 = getelementptr inbounds %struct.HuffmanCode*, %struct.HuffmanCode** %951, i64 %953
  %955 = bitcast %struct.HuffmanCode** %954 to i64*
  %956 = load i64, i64* %955, align 8
  store i64 %956, i64* %93, align 8
  %957 = load i8*, i8** %70, align 8
  %958 = zext i32 %936 to i64
  %959 = getelementptr inbounds i8, i8* %957, i64 %958
  %960 = load i8, i8* %959, align 1
  %961 = and i8 %960, 3
  %962 = zext i8 %961 to i64
  %963 = shl nuw nsw i64 %962, 9
  %964 = getelementptr inbounds [2048 x i8], [2048 x i8]* @_kBrotliContextLookupTable, i64 0, i64 %963
  store i8* %964, i8** %94, align 8
  %965 = load i64, i64* %95, align 8
  store i64 %965, i64* %97, align 8
  %966 = load i64*, i64** %99, align 8
  %967 = load i64, i64* %966, align 8
  store i64 %967, i64* %101, align 8
  %968 = call fastcc i32 @BrotliEnsureRingBuffer(%struct.BrotliDecoderStateStruct* %0)
  %969 = icmp eq i32 %968, 0
  br i1 %969, label %261, label %970

970:                                              ; preds = %935
  %971 = load i32, i32* %65, align 8
  %972 = load i32, i32* %66, align 4
  %973 = load i16, i16* %103, align 2
  %974 = zext i16 %973 to i32
  %975 = icmp eq i32 %972, 0
  br i1 %975, label %1075, label %976

976:                                              ; preds = %970
  %977 = icmp ult i32 %972, 8
  %978 = add i32 %972, 15
  %979 = icmp ult i32 %978, 16
  %980 = or i1 %977, %979
  br i1 %980, label %981, label %1004

981:                                              ; preds = %1073, %1004, %976
  %982 = phi i32 [ 16, %1004 ], [ 16, %976 ], [ %1016, %1073 ]
  %983 = phi i32 [ 0, %1004 ], [ 0, %976 ], [ %1015, %1073 ]
  %984 = xor i32 %983, -1
  %985 = add i32 %972, %984
  %986 = and i32 %972, 3
  %987 = icmp eq i32 %986, 0
  br i1 %987, label %999, label %988

988:                                              ; preds = %981, %988
  %989 = phi i32 [ %996, %988 ], [ %982, %981 ]
  %990 = phi i32 [ %994, %988 ], [ %983, %981 ]
  %991 = phi i32 [ %997, %988 ], [ %986, %981 ]
  %992 = zext i32 %989 to i64
  %993 = getelementptr inbounds [544 x i8], [544 x i8]* %104, i64 0, i64 %992
  store i8 0, i8* %993, align 1
  %994 = add nuw i32 %990, 1
  %995 = getelementptr inbounds [544 x i32], [544 x i32]* %106, i64 0, i64 %992
  store i32 %994, i32* %995, align 4
  %996 = add i32 %989, 1
  %997 = add i32 %991, -1
  %998 = icmp eq i32 %997, 0
  br i1 %998, label %999, label %988, !llvm.loop !3

999:                                              ; preds = %988, %981
  %1000 = phi i32 [ undef, %981 ], [ %996, %988 ]
  %1001 = phi i32 [ %982, %981 ], [ %996, %988 ]
  %1002 = phi i32 [ %983, %981 ], [ %994, %988 ]
  %1003 = icmp ult i32 %985, 3
  br i1 %1003, label %1075, label %1078

1004:                                             ; preds = %976
  %1005 = add i32 %972, -1
  %1006 = zext i32 %1005 to i64
  %1007 = getelementptr i8, i8* %119, i64 %1006
  %1008 = shl nuw nsw i64 %1006, 1
  %1009 = getelementptr i16, i16* %122, i64 %1008
  %1010 = bitcast i16* %1009 to i32*
  %1011 = icmp ult i32* %116, %1010
  %1012 = icmp ugt i8* %1007, %121
  %1013 = and i1 %1011, %1012
  br i1 %1013, label %981, label %1014

1014:                                             ; preds = %1004
  %1015 = and i32 %972, -8
  %1016 = add i32 %1015, 16
  %1017 = add i32 %1015, -8
  %1018 = lshr exact i32 %1017, 3
  %1019 = add nuw nsw i32 %1018, 1
  %1020 = and i32 %1019, 1
  %1021 = icmp eq i32 %1017, 0
  br i1 %1021, label %1056, label %1022

1022:                                             ; preds = %1014
  %1023 = sub nuw nsw i32 %1019, %1020
  br label %1024

1024:                                             ; preds = %1024, %1022
  %1025 = phi i32 [ 0, %1022 ], [ %1052, %1024 ]
  %1026 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %1022 ], [ %1053, %1024 ]
  %1027 = phi i32 [ %1023, %1022 ], [ %1054, %1024 ]
  %1028 = add i32 %1025, 16
  %1029 = zext i32 %1028 to i64
  %1030 = getelementptr inbounds [544 x i8], [544 x i8]* %104, i64 0, i64 %1029
  %1031 = bitcast i8* %1030 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %1031, align 1, !alias.scope !5, !noalias !8
  %1032 = getelementptr inbounds i8, i8* %1030, i64 4
  %1033 = bitcast i8* %1032 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %1033, align 1, !alias.scope !5, !noalias !8
  %1034 = add nuw <4 x i32> %1026, <i32 1, i32 1, i32 1, i32 1>
  %1035 = add <4 x i32> %1026, <i32 5, i32 5, i32 5, i32 5>
  %1036 = getelementptr inbounds [544 x i32], [544 x i32]* %106, i64 0, i64 %1029
  %1037 = bitcast i32* %1036 to <4 x i32>*
  store <4 x i32> %1034, <4 x i32>* %1037, align 4, !alias.scope !8
  %1038 = getelementptr inbounds i32, i32* %1036, i64 4
  %1039 = bitcast i32* %1038 to <4 x i32>*
  store <4 x i32> %1035, <4 x i32>* %1039, align 4, !alias.scope !8
  %1040 = add i32 %1025, 24
  %1041 = zext i32 %1040 to i64
  %1042 = getelementptr inbounds [544 x i8], [544 x i8]* %104, i64 0, i64 %1041
  %1043 = bitcast i8* %1042 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %1043, align 1, !alias.scope !5, !noalias !8
  %1044 = getelementptr inbounds i8, i8* %1042, i64 4
  %1045 = bitcast i8* %1044 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %1045, align 1, !alias.scope !5, !noalias !8
  %1046 = add <4 x i32> %1026, <i32 9, i32 9, i32 9, i32 9>
  %1047 = add <4 x i32> %1026, <i32 13, i32 13, i32 13, i32 13>
  %1048 = getelementptr inbounds [544 x i32], [544 x i32]* %106, i64 0, i64 %1041
  %1049 = bitcast i32* %1048 to <4 x i32>*
  store <4 x i32> %1046, <4 x i32>* %1049, align 4, !alias.scope !8
  %1050 = getelementptr inbounds i32, i32* %1048, i64 4
  %1051 = bitcast i32* %1050 to <4 x i32>*
  store <4 x i32> %1047, <4 x i32>* %1051, align 4, !alias.scope !8
  %1052 = add i32 %1025, 16
  %1053 = add <4 x i32> %1026, <i32 16, i32 16, i32 16, i32 16>
  %1054 = add i32 %1027, -2
  %1055 = icmp eq i32 %1054, 0
  br i1 %1055, label %1056, label %1024, !llvm.loop !10

1056:                                             ; preds = %1024, %1014
  %1057 = phi i32 [ 0, %1014 ], [ %1052, %1024 ]
  %1058 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %1014 ], [ %1053, %1024 ]
  %1059 = icmp eq i32 %1020, 0
  br i1 %1059, label %1073, label %1060

1060:                                             ; preds = %1056
  %1061 = add i32 %1057, 16
  %1062 = zext i32 %1061 to i64
  %1063 = getelementptr inbounds [544 x i8], [544 x i8]* %104, i64 0, i64 %1062
  %1064 = bitcast i8* %1063 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %1064, align 1, !alias.scope !5, !noalias !8
  %1065 = getelementptr inbounds i8, i8* %1063, i64 4
  %1066 = bitcast i8* %1065 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %1066, align 1, !alias.scope !5, !noalias !8
  %1067 = add nuw <4 x i32> %1058, <i32 1, i32 1, i32 1, i32 1>
  %1068 = add <4 x i32> %1058, <i32 5, i32 5, i32 5, i32 5>
  %1069 = getelementptr inbounds [544 x i32], [544 x i32]* %106, i64 0, i64 %1062
  %1070 = bitcast i32* %1069 to <4 x i32>*
  store <4 x i32> %1067, <4 x i32>* %1070, align 4, !alias.scope !8
  %1071 = getelementptr inbounds i32, i32* %1069, i64 4
  %1072 = bitcast i32* %1071 to <4 x i32>*
  store <4 x i32> %1068, <4 x i32>* %1072, align 4, !alias.scope !8
  br label %1073

1073:                                             ; preds = %1056, %1060
  %1074 = icmp eq i32 %972, %1015
  br i1 %1074, label %1075, label %981

1075:                                             ; preds = %999, %1078, %1073, %970
  %1076 = phi i32 [ 16, %970 ], [ %1016, %1073 ], [ %1000, %999 ], [ %1100, %1078 ]
  %1077 = icmp ult i32 %1076, %974
  br i1 %1077, label %1102, label %1127

1078:                                             ; preds = %999, %1078
  %1079 = phi i32 [ %1100, %1078 ], [ %1001, %999 ]
  %1080 = phi i32 [ %1098, %1078 ], [ %1002, %999 ]
  %1081 = zext i32 %1079 to i64
  %1082 = getelementptr inbounds [544 x i8], [544 x i8]* %104, i64 0, i64 %1081
  store i8 0, i8* %1082, align 1
  %1083 = add nuw i32 %1080, 1
  %1084 = getelementptr inbounds [544 x i32], [544 x i32]* %106, i64 0, i64 %1081
  store i32 %1083, i32* %1084, align 4
  %1085 = add i32 %1079, 1
  %1086 = zext i32 %1085 to i64
  %1087 = getelementptr inbounds [544 x i8], [544 x i8]* %104, i64 0, i64 %1086
  store i8 0, i8* %1087, align 1
  %1088 = add nuw i32 %1080, 2
  %1089 = getelementptr inbounds [544 x i32], [544 x i32]* %106, i64 0, i64 %1086
  store i32 %1088, i32* %1089, align 4
  %1090 = add i32 %1079, 2
  %1091 = zext i32 %1090 to i64
  %1092 = getelementptr inbounds [544 x i8], [544 x i8]* %104, i64 0, i64 %1091
  store i8 0, i8* %1092, align 1
  %1093 = add nuw i32 %1080, 3
  %1094 = getelementptr inbounds [544 x i32], [544 x i32]* %106, i64 0, i64 %1091
  store i32 %1093, i32* %1094, align 4
  %1095 = add i32 %1079, 3
  %1096 = zext i32 %1095 to i64
  %1097 = getelementptr inbounds [544 x i8], [544 x i8]* %104, i64 0, i64 %1096
  store i8 0, i8* %1097, align 1
  %1098 = add nuw i32 %1080, 4
  %1099 = getelementptr inbounds [544 x i32], [544 x i32]* %106, i64 0, i64 %1096
  store i32 %1098, i32* %1099, align 4
  %1100 = add i32 %1079, 4
  %1101 = icmp eq i32 %1098, %972
  br i1 %1101, label %1075, label %1078, !llvm.loop !12

1102:                                             ; preds = %1075, %1123
  %1103 = phi i32 [ %1120, %1123 ], [ %1076, %1075 ]
  %1104 = phi i32 [ %1125, %1123 ], [ 0, %1075 ]
  %1105 = phi i32 [ %1124, %1123 ], [ 1, %1075 ]
  %1106 = add i32 %1104, 2
  %1107 = shl i32 %1106, %1105
  %1108 = add i32 %1107, -4
  %1109 = shl i32 %1108, %971
  %1110 = trunc i32 %1105 to i8
  %1111 = add i32 %1109, %972
  br label %1112

1112:                                             ; preds = %1112, %1102
  %1113 = phi i32 [ %1103, %1102 ], [ %1120, %1112 ]
  %1114 = phi i32 [ 0, %1102 ], [ %1117, %1112 ]
  %1115 = zext i32 %1113 to i64
  %1116 = getelementptr inbounds [544 x i8], [544 x i8]* %104, i64 0, i64 %1115
  store i8 %1110, i8* %1116, align 1
  %1117 = add i32 %1114, 1
  %1118 = add i32 %1111, %1117
  %1119 = getelementptr inbounds [544 x i32], [544 x i32]* %106, i64 0, i64 %1115
  store i32 %1118, i32* %1119, align 4
  %1120 = add i32 %1113, 1
  %1121 = lshr i32 %1117, %971
  %1122 = icmp eq i32 %1121, 0
  br i1 %1122, label %1112, label %1123

1123:                                             ; preds = %1112
  %1124 = add i32 %1105, %1104
  %1125 = xor i32 %1104, 1
  %1126 = icmp ult i32 %1120, %974
  br i1 %1126, label %1102, label %1127

1127:                                             ; preds = %1123, %1075
  store i32 7, i32* %55, align 8
  br label %1128

1128:                                             ; preds = %197, %197, %197, %197, %1127
  %1129 = call fastcc i32 @ProcessCommands(%struct.BrotliDecoderStateStruct* %0)
  %1130 = icmp eq i32 %1129, 2
  br i1 %1130, label %1131, label %261

1131:                                             ; preds = %1128
  %1132 = call fastcc i32 @SafeProcessCommands(%struct.BrotliDecoderStateStruct* %0)
  br label %261

1133:                                             ; preds = %197, %197, %197
  %1134 = call fastcc i32 @WriteRingBuffer(%struct.BrotliDecoderStateStruct* %0, i64* %3, i8** %29, i64* %5, i32 0)
  %1135 = icmp eq i32 %1134, 1
  br i1 %1135, label %1136, label %261

1136:                                             ; preds = %1133
  call fastcc void @WrapRingBuffer(%struct.BrotliDecoderStateStruct* %0)
  %1137 = load i32, i32* %60, align 8
  %1138 = load i32, i32* %61, align 4
  %1139 = shl i32 1, %1138
  %1140 = icmp eq i32 %1137, %1139
  br i1 %1140, label %1141, label %1143

1141:                                             ; preds = %1136
  %1142 = load i32, i32* %62, align 8
  store i32 %1142, i32* %63, align 4
  br label %1143

1143:                                             ; preds = %1141, %1136
  %1144 = load i32, i32* %55, align 8
  switch i32 %1144, label %1151 [
    i32 15, label %1145
    i32 16, label %1150
  ]

1145:                                             ; preds = %1143
  %1146 = load i32, i32* %56, align 8
  %1147 = icmp eq i32 %1146, 0
  br i1 %1147, label %1148, label %1149

1148:                                             ; preds = %1145
  store i32 14, i32* %55, align 8
  br label %261

1149:                                             ; preds = %1145
  store i32 7, i32* %55, align 8
  br label %261

1150:                                             ; preds = %1143
  store i32 10, i32* %55, align 8
  br label %261

1151:                                             ; preds = %1143
  %1152 = load i32, i32* %64, align 4
  %1153 = icmp eq i32 %1152, 0
  br i1 %1153, label %1154, label %1159

1154:                                             ; preds = %1151
  %1155 = load i32, i32* %56, align 8
  %1156 = icmp eq i32 %1155, 0
  br i1 %1156, label %1157, label %1158

1157:                                             ; preds = %1154
  store i32 14, i32* %55, align 8
  br label %261

1158:                                             ; preds = %1154
  store i32 9, i32* %55, align 8
  br label %261

1159:                                             ; preds = %1151
  store i32 8, i32* %55, align 8
  br label %261

1160:                                             ; preds = %197
  %1161 = load i32, i32* %56, align 8
  %1162 = icmp slt i32 %1161, 0
  br i1 %1162, label %261, label %1163

1163:                                             ; preds = %1160
  call void @BrotliDecoderStateCleanupAfterMetablock(%struct.BrotliDecoderStateStruct* %0) #14
  %1164 = load i16, i16* %57, align 8
  %1165 = and i16 %1164, 1
  %1166 = icmp eq i16 %1165, 0
  br i1 %1166, label %1167, label %1168

1167:                                             ; preds = %1163
  store i32 3, i32* %55, align 8
  br label %261

1168:                                             ; preds = %1163
  %1169 = load i32, i32* %58, align 8
  %1170 = sub i32 0, %1169
  %1171 = and i32 %1170, 7
  %1172 = icmp eq i32 %1171, 0
  br i1 %1172, label %1191, label %1173

1173:                                             ; preds = %1168
  %1174 = load i64, i64* %59, align 8
  %1175 = zext i32 %1169 to i64
  %1176 = lshr i64 %1174, %1175
  %1177 = trunc i64 %1176 to i32
  %1178 = call i1 @llvm.is.constant.i32(i32 %1171) #14
  br i1 %1178, label %1179, label %1182

1179:                                             ; preds = %1173
  %1180 = shl i32 -1, %1171
  %1181 = xor i32 %1180, -1
  br label %1186

1182:                                             ; preds = %1173
  %1183 = zext i32 %1171 to i64
  %1184 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %1183
  %1185 = load i32, i32* %1184, align 4
  br label %1186

1186:                                             ; preds = %1179, %1182
  %1187 = phi i32 [ %1181, %1179 ], [ %1185, %1182 ]
  %1188 = and i32 %1187, %1177
  %1189 = add i32 %1171, %1169
  store i32 %1189, i32* %58, align 8
  %1190 = icmp eq i32 %1188, 0
  br i1 %1190, label %1191, label %261

1191:                                             ; preds = %1186, %1168
  %1192 = phi i32 [ %1189, %1186 ], [ %1169, %1168 ]
  %1193 = load i32, i32* %30, align 8
  %1194 = icmp eq i32 %1193, 0
  br i1 %1194, label %1195, label %1214

1195:                                             ; preds = %1191
  %1196 = sub i32 64, %1192
  %1197 = lshr i32 %1196, 3
  %1198 = and i32 %1196, -8
  %1199 = zext i32 %1197 to i64
  %1200 = load i64, i64* %51, align 8
  %1201 = add i64 %1200, %1199
  store i64 %1201, i64* %51, align 8
  %1202 = load i8*, i8** %54, align 8
  %1203 = sub nsw i64 0, %1199
  %1204 = getelementptr inbounds i8, i8* %1202, i64 %1203
  store i8* %1204, i8** %54, align 8
  %1205 = icmp eq i32 %1198, 64
  br i1 %1205, label %1210, label %1206

1206:                                             ; preds = %1195
  %1207 = zext i32 %1198 to i64
  %1208 = load i64, i64* %59, align 8
  %1209 = shl i64 %1208, %1207
  br label %1210

1210:                                             ; preds = %1195, %1206
  %1211 = phi i64 [ %1209, %1206 ], [ 0, %1195 ]
  store i64 %1211, i64* %59, align 8
  %1212 = add i32 %1198, %1192
  store i32 %1212, i32* %58, align 8
  store i64 %1201, i64* %1, align 8
  %1213 = load i64, i64* %47, align 8
  store i64 %1213, i64* %48, align 8
  br label %1214

1214:                                             ; preds = %1210, %1191
  store i32 26, i32* %55, align 8
  br label %1215

1215:                                             ; preds = %197, %1214
  %1216 = load i8*, i8** %50, align 8
  %1217 = icmp eq i8* %1216, null
  br i1 %1217, label %1221, label %1218

1218:                                             ; preds = %1215
  %1219 = call fastcc i32 @WriteRingBuffer(%struct.BrotliDecoderStateStruct* %0, i64* %3, i8** %29, i64* %5, i32 1)
  %1220 = icmp eq i32 %1219, 1
  br i1 %1220, label %1221, label %261

1221:                                             ; preds = %1218, %1215
  %1222 = call fastcc i32 @SaveErrorCode(%struct.BrotliDecoderStateStruct* %0, i32 1)
  br label %1226

1223:                                             ; preds = %129, %141, %160, %156, %176, %193
  %1224 = phi i32 [ %125, %176 ], [ %125, %193 ], [ 2, %156 ], [ 2, %160 ], [ %130, %129 ], [ 2, %141 ]
  %1225 = call fastcc i32 @SaveErrorCode(%struct.BrotliDecoderStateStruct* %0, i32 %1224)
  br label %1226

1226:                                             ; preds = %879, %872, %14, %1223, %1221, %26
  %1227 = phi i32 [ %1225, %1223 ], [ %1222, %1221 ], [ %27, %26 ], [ 0, %14 ], [ %873, %872 ], [ %880, %879 ]
  ret i32 %1227

1228:                                             ; preds = %578
  %1229 = icmp eq i64 %587, 0
  br i1 %1229, label %261, label %1230

1230:                                             ; preds = %1228
  %1231 = load i64, i64* %59, align 8
  %1232 = lshr i64 %1231, 8
  store i64 %1232, i64* %59, align 8
  %1233 = load i8*, i8** %54, align 8
  %1234 = load i8, i8* %1233, align 1
  %1235 = zext i8 %1234 to i64
  %1236 = shl nuw i64 %1235, 56
  %1237 = or i64 %1236, %1232
  store i64 %1237, i64* %59, align 8
  %1238 = add i32 %570, -16
  store i32 %1238, i32* %58, align 8
  %1239 = add i64 %576, -2
  store i64 %1239, i64* %51, align 8
  %1240 = getelementptr inbounds i8, i8* %1233, i64 1
  store i8* %1240, i8** %54, align 8
  br label %591

1241:                                             ; preds = %625
  %1242 = icmp eq i64 %634, 0
  br i1 %1242, label %652, label %1243

1243:                                             ; preds = %1241
  %1244 = load i64, i64* %71, align 8
  %1245 = lshr i64 %1244, 8
  store i64 %1245, i64* %71, align 8
  %1246 = load i8*, i8** %54, align 8
  %1247 = load i8, i8* %1246, align 1
  %1248 = zext i8 %1247 to i64
  %1249 = shl nuw i64 %1248, 56
  %1250 = or i64 %1249, %1245
  store i64 %1250, i64* %71, align 8
  %1251 = add i32 %617, -16
  store i32 %1251, i32* %58, align 8
  %1252 = add i64 %623, -2
  store i64 %1252, i64* %51, align 8
  %1253 = getelementptr inbounds i8, i8* %1246, i64 1
  store i8* %1253, i8** %54, align 8
  br label %638

1254:                                             ; preds = %550
  %1255 = icmp eq i64 %559, 0
  br i1 %1255, label %261, label %1256

1256:                                             ; preds = %1254
  %1257 = load i64, i64* %59, align 8
  %1258 = lshr i64 %1257, 8
  store i64 %1258, i64* %59, align 8
  %1259 = load i8*, i8** %54, align 8
  %1260 = load i8, i8* %1259, align 1
  %1261 = zext i8 %1260 to i64
  %1262 = shl nuw i64 %1261, 56
  %1263 = or i64 %1262, %1258
  store i64 %1263, i64* %59, align 8
  %1264 = add i32 %543, -16
  store i32 %1264, i32* %58, align 8
  %1265 = add i64 %548, -2
  store i64 %1265, i64* %51, align 8
  %1266 = getelementptr inbounds i8, i8* %1259, i64 1
  store i8* %1266, i8** %54, align 8
  br label %563

1267:                                             ; preds = %273
  %1268 = icmp eq i64 %282, 0
  br i1 %1268, label %261, label %1269

1269:                                             ; preds = %1267
  %1270 = load i64, i64* %59, align 8
  %1271 = lshr i64 %1270, 8
  store i64 %1271, i64* %59, align 8
  %1272 = load i8*, i8** %54, align 8
  %1273 = load i8, i8* %1272, align 1
  %1274 = zext i8 %1273 to i64
  %1275 = shl nuw i64 %1274, 56
  %1276 = or i64 %1275, %1271
  store i64 %1276, i64* %59, align 8
  %1277 = add i32 %265, -16
  store i32 %1277, i32* %58, align 8
  %1278 = add i64 %271, -2
  store i64 %1278, i64* %51, align 8
  %1279 = getelementptr inbounds i8, i8* %1272, i64 1
  store i8* %1279, i8** %54, align 8
  br label %286

1280:                                             ; preds = %417
  %1281 = icmp eq i64 %426, 0
  br i1 %1281, label %475, label %1282

1282:                                             ; preds = %1280
  %1283 = load i64, i64* %59, align 8
  %1284 = lshr i64 %1283, 8
  store i64 %1284, i64* %59, align 8
  %1285 = load i8*, i8** %54, align 8
  %1286 = load i8, i8* %1285, align 1
  %1287 = zext i8 %1286 to i64
  %1288 = shl nuw i64 %1287, 56
  %1289 = or i64 %1288, %1284
  store i64 %1289, i64* %59, align 8
  %1290 = add i32 %409, -16
  store i32 %1290, i32* %58, align 8
  %1291 = add i64 %415, -2
  store i64 %1291, i64* %51, align 8
  %1292 = getelementptr inbounds i8, i8* %1285, i64 1
  store i8* %1292, i8** %54, align 8
  %1293 = sub i32 80, %409
  %1294 = icmp ult i32 %1293, 15
  br i1 %1294, label %1295, label %430

1295:                                             ; preds = %1282
  %1296 = icmp eq i64 %1291, 0
  br i1 %1296, label %475, label %1297

1297:                                             ; preds = %1295
  %1298 = load i64, i64* %59, align 8
  %1299 = lshr i64 %1298, 8
  store i64 %1299, i64* %59, align 8
  %1300 = load i8*, i8** %54, align 8
  %1301 = load i8, i8* %1300, align 1
  %1302 = zext i8 %1301 to i64
  %1303 = shl nuw i64 %1302, 56
  %1304 = or i64 %1303, %1299
  store i64 %1304, i64* %59, align 8
  %1305 = add i32 %409, -24
  store i32 %1305, i32* %58, align 8
  %1306 = add i64 %415, -3
  store i64 %1306, i64* %51, align 8
  %1307 = getelementptr inbounds i8, i8* %1300, i64 1
  store i8* %1307, i8** %54, align 8
  br label %430
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable writeonly
define internal fastcc i32 @SaveErrorCode(%struct.BrotliDecoderStateStruct* nocapture, i32) unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 15
  store i32 %1, i32* %3, align 4
  %4 = add i32 %1, -1
  %5 = icmp ult i32 %4, 3
  %6 = select i1 %5, i32 %1, i32 0
  ret i32 %6
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i32 @WriteRingBuffer(%struct.BrotliDecoderStateStruct* nocapture, i64* nocapture, i8**, i64*, i32) unnamed_addr #7 {
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 43
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 12
  %11 = load i32, i32* %10, align 4
  %12 = sext i32 %11 to i64
  %13 = and i64 %9, %12
  %14 = getelementptr inbounds i8, i8* %7, i64 %13
  %15 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 8
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 11
  %18 = load i32, i32* %17, align 8
  %19 = icmp sgt i32 %16, %18
  %20 = select i1 %19, i32 %18, i32 %16
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 42
  %23 = load i64, i64* %22, align 8
  %24 = sext i32 %18 to i64
  %25 = mul i64 %23, %24
  %26 = sub i64 %21, %9
  %27 = add i64 %26, %25
  %28 = load i64, i64* %1, align 8
  %29 = icmp ugt i64 %28, %27
  %30 = select i1 %29, i64 %27, i64 %28
  %31 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %32 = load i32, i32* %31, align 8
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %77, label %34

34:                                               ; preds = %5
  %35 = icmp eq i8** %2, null
  br i1 %35, label %44, label %36

36:                                               ; preds = %34
  %37 = load i8*, i8** %2, align 8
  %38 = icmp eq i8* %37, null
  br i1 %38, label %42, label %39

39:                                               ; preds = %36
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %37, i8* align 1 %14, i64 %30, i1 false)
  %40 = load i8*, i8** %2, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 %30
  br label %42

42:                                               ; preds = %36, %39
  %43 = phi i8* [ %41, %39 ], [ %14, %36 ]
  store i8* %43, i8** %2, align 8
  br label %44

44:                                               ; preds = %42, %34
  %45 = load i64, i64* %1, align 8
  %46 = sub i64 %45, %30
  store i64 %46, i64* %1, align 8
  %47 = load i64, i64* %8, align 8
  %48 = add i64 %47, %30
  store i64 %48, i64* %8, align 8
  %49 = icmp eq i64* %3, null
  br i1 %49, label %51, label %50

50:                                               ; preds = %44
  store i64 %48, i64* %3, align 8
  br label %51

51:                                               ; preds = %44, %50
  %52 = icmp ugt i64 %27, %28
  %53 = load i32, i32* %17, align 8
  %54 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 51
  %55 = load i32, i32* %54, align 4
  %56 = shl i32 1, %55
  %57 = icmp eq i32 %53, %56
  br i1 %52, label %58, label %62

58:                                               ; preds = %51
  %59 = icmp ne i32 %4, 0
  %60 = or i1 %59, %57
  %61 = select i1 %60, i32 3, i32 1
  br label %77

62:                                               ; preds = %51
  br i1 %57, label %63, label %77

63:                                               ; preds = %62
  %64 = load i32, i32* %15, align 4
  %65 = icmp slt i32 %64, %53
  br i1 %65, label %77, label %66

66:                                               ; preds = %63
  %67 = sub nsw i32 %64, %53
  store i32 %67, i32* %15, align 4
  %68 = load i64, i64* %22, align 8
  %69 = add i64 %68, 1
  store i64 %69, i64* %22, align 8
  %70 = icmp ne i32 %67, 0
  %71 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 50
  %72 = zext i1 %70 to i16
  %73 = load i16, i16* %71, align 8
  %74 = shl nuw nsw i16 %72, 3
  %75 = and i16 %73, -9
  %76 = or i16 %75, %74
  store i16 %76, i16* %71, align 8
  br label %77

77:                                               ; preds = %62, %66, %63, %58, %5
  %78 = phi i32 [ -9, %5 ], [ %61, %58 ], [ 1, %63 ], [ 1, %66 ], [ 1, %62 ]
  ret i32 %78
}

declare hidden i32 @BrotliWarmupBitReader(%struct.BrotliBitReader*) local_unnamed_addr #4

declare hidden void @BrotliDecoderStateMetablockBegin(%struct.BrotliDecoderStateStruct*) local_unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i32 @DecodeMetaBlockLength(%struct.BrotliDecoderStateStruct* nocapture, %struct.BrotliBitReader*) unnamed_addr #7 {
  %3 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 46
  %4 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 1
  %5 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 0
  %6 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 3
  %7 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 2
  %8 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 50
  %9 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %10 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 1
  %11 = load i32, i32* %3, align 8
  br label %12

12:                                               ; preds = %340, %2
  %13 = phi i32 [ %341, %340 ], [ %11, %2 ]
  switch i32 %13, label %342 [
    i32 0, label %14
    i32 1, label %45
    i32 2, label %73
    i32 3, label %113
    i32 4, label %173
    i32 5, label %213
    i32 6, label %240
    i32 7, label %278
  ]

14:                                               ; preds = %12
  %15 = load i32, i32* %4, align 8
  %16 = icmp eq i32 %15, 64
  br i1 %16, label %19, label %17

17:                                               ; preds = %14
  %18 = load i64, i64* %5, align 8
  br label %32

19:                                               ; preds = %14
  %20 = load i64, i64* %6, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %342, label %22

22:                                               ; preds = %19
  %23 = load i64, i64* %5, align 8
  %24 = lshr i64 %23, 8
  store i64 %24, i64* %5, align 8
  %25 = load i8*, i8** %7, align 8
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = shl nuw i64 %27, 56
  %29 = or i64 %28, %24
  store i64 %29, i64* %5, align 8
  store i32 56, i32* %4, align 8
  %30 = add i64 %20, -1
  store i64 %30, i64* %6, align 8
  %31 = getelementptr inbounds i8, i8* %25, i64 1
  store i8* %31, i8** %7, align 8
  br label %32

32:                                               ; preds = %22, %17
  %33 = phi i64 [ %18, %17 ], [ %29, %22 ]
  %34 = phi i32 [ %15, %17 ], [ 56, %22 ]
  %35 = zext i32 %34 to i64
  %36 = add i32 %34, 1
  store i32 %36, i32* %4, align 8
  %37 = shl i64 1, %35
  %38 = and i64 %37, %33
  %39 = icmp ne i64 %38, 0
  %40 = zext i1 %39 to i16
  %41 = load i16, i16* %8, align 8
  %42 = and i16 %41, -8
  %43 = or i16 %42, %40
  store i32 0, i32* %9, align 8
  store i16 %43, i16* %8, align 8
  br i1 %39, label %44, label %340

44:                                               ; preds = %32
  store i32 1, i32* %3, align 8
  br label %45

45:                                               ; preds = %12, %44
  %46 = load i32, i32* %4, align 8
  %47 = icmp eq i32 %46, 64
  br i1 %47, label %50, label %48

48:                                               ; preds = %45
  %49 = load i64, i64* %5, align 8
  br label %63

50:                                               ; preds = %45
  %51 = load i64, i64* %6, align 8
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %342, label %53

53:                                               ; preds = %50
  %54 = load i64, i64* %5, align 8
  %55 = lshr i64 %54, 8
  store i64 %55, i64* %5, align 8
  %56 = load i8*, i8** %7, align 8
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i64
  %59 = shl nuw i64 %58, 56
  %60 = or i64 %59, %55
  store i64 %60, i64* %5, align 8
  store i32 56, i32* %4, align 8
  %61 = add i64 %51, -1
  store i64 %61, i64* %6, align 8
  %62 = getelementptr inbounds i8, i8* %56, i64 1
  store i8* %62, i8** %7, align 8
  br label %63

63:                                               ; preds = %53, %48
  %64 = phi i64 [ %49, %48 ], [ %60, %53 ]
  %65 = phi i32 [ %46, %48 ], [ 56, %53 ]
  %66 = zext i32 %65 to i64
  %67 = add i32 %65, 1
  store i32 %67, i32* %4, align 8
  %68 = shl i64 1, %66
  %69 = and i64 %68, %64
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %72, label %71

71:                                               ; preds = %63
  store i32 0, i32* %3, align 8
  br label %342

72:                                               ; preds = %63
  store i32 2, i32* %3, align 8
  br label %73

73:                                               ; preds = %12, %72
  %74 = load i32, i32* %4, align 8
  %75 = sub i32 64, %74
  %76 = icmp ult i32 %75, 2
  br i1 %76, label %79, label %77

77:                                               ; preds = %73
  %78 = load i64, i64* %5, align 8
  br label %95

79:                                               ; preds = %73
  %80 = load i64, i64* %6, align 8
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %342, label %82

82:                                               ; preds = %79
  %83 = load i64, i64* %5, align 8
  %84 = lshr i64 %83, 8
  store i64 %84, i64* %5, align 8
  %85 = load i8*, i8** %7, align 8
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i64
  %88 = shl nuw i64 %87, 56
  %89 = or i64 %88, %84
  store i64 %89, i64* %5, align 8
  %90 = add i32 %74, -8
  store i32 %90, i32* %4, align 8
  %91 = add i64 %80, -1
  store i64 %91, i64* %6, align 8
  %92 = getelementptr inbounds i8, i8* %85, i64 1
  store i8* %92, i8** %7, align 8
  %93 = sub i32 72, %74
  %94 = icmp ult i32 %93, 2
  br i1 %94, label %383, label %95

95:                                               ; preds = %82, %385, %77
  %96 = phi i64 [ %78, %77 ], [ %89, %82 ], [ %392, %385 ]
  %97 = phi i32 [ %74, %77 ], [ %90, %82 ], [ %393, %385 ]
  %98 = zext i32 %97 to i64
  %99 = lshr i64 %96, %98
  %100 = trunc i64 %99 to i32
  %101 = and i32 %100, 3
  %102 = add i32 %97, 2
  store i32 %102, i32* %4, align 8
  %103 = trunc i32 %101 to i16
  %104 = load i16, i16* %8, align 8
  %105 = shl nuw nsw i16 %103, 6
  %106 = and i16 %104, -16321
  %107 = or i16 %106, %105
  %108 = or i16 %107, 256
  store i16 %108, i16* %8, align 8
  store i32 0, i32* %10, align 4
  %109 = icmp eq i32 %101, 3
  br i1 %109, label %110, label %112

110:                                              ; preds = %95
  %111 = or i16 %107, 260
  store i16 %111, i16* %8, align 8
  br label %340

112:                                              ; preds = %95
  store i32 3, i32* %3, align 8
  br label %116

113:                                              ; preds = %12
  %114 = load i32, i32* %10, align 4
  %115 = load i16, i16* %8, align 8
  br label %116

116:                                              ; preds = %113, %112
  %117 = phi i16 [ %115, %113 ], [ %108, %112 ]
  %118 = phi i32 [ %114, %113 ], [ 0, %112 ]
  %119 = lshr i16 %117, 6
  %120 = and i16 %119, 255
  %121 = zext i16 %120 to i32
  %122 = icmp slt i32 %118, %121
  br i1 %122, label %123, label %171

123:                                              ; preds = %116, %165
  %124 = phi i32 [ %155, %165 ], [ %118, %116 ]
  %125 = load i32, i32* %4, align 8
  %126 = sub i32 64, %125
  %127 = icmp ult i32 %126, 4
  br i1 %127, label %130, label %128

128:                                              ; preds = %123
  %129 = load i64, i64* %5, align 8
  br label %147

130:                                              ; preds = %123
  %131 = load i64, i64* %6, align 8
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %146, label %133

133:                                              ; preds = %130
  %134 = load i64, i64* %5, align 8
  %135 = lshr i64 %134, 8
  store i64 %135, i64* %5, align 8
  %136 = load i8*, i8** %7, align 8
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i64
  %139 = shl nuw i64 %138, 56
  %140 = or i64 %139, %135
  store i64 %140, i64* %5, align 8
  %141 = add i32 %125, -8
  store i32 %141, i32* %4, align 8
  %142 = add i64 %131, -1
  store i64 %142, i64* %6, align 8
  %143 = getelementptr inbounds i8, i8* %136, i64 1
  store i8* %143, i8** %7, align 8
  %144 = sub i32 72, %125
  %145 = icmp ult i32 %144, 4
  br i1 %145, label %344, label %147

146:                                              ; preds = %344, %130
  store i32 %124, i32* %10, align 4
  br label %342

147:                                              ; preds = %133, %346, %128
  %148 = phi i64 [ %129, %128 ], [ %140, %133 ], [ %353, %346 ]
  %149 = phi i32 [ %125, %128 ], [ %141, %133 ], [ %354, %346 ]
  %150 = zext i32 %149 to i64
  %151 = lshr i64 %148, %150
  %152 = trunc i64 %151 to i32
  %153 = and i32 %152, 15
  %154 = add i32 %149, 4
  store i32 %154, i32* %4, align 8
  %155 = add nsw i32 %124, 1
  %156 = load i16, i16* %8, align 8
  %157 = lshr i16 %156, 6
  %158 = and i16 %157, 255
  %159 = zext i16 %158 to i32
  %160 = icmp eq i32 %155, %159
  br i1 %160, label %161, label %165

161:                                              ; preds = %147
  %162 = icmp ugt i16 %158, 4
  %163 = icmp eq i32 %153, 0
  %164 = and i1 %163, %162
  br i1 %164, label %342, label %165

165:                                              ; preds = %161, %147
  %166 = shl nsw i32 %124, 2
  %167 = shl i32 %153, %166
  %168 = load i32, i32* %9, align 8
  %169 = or i32 %168, %167
  store i32 %169, i32* %9, align 8
  %170 = icmp slt i32 %155, %159
  br i1 %170, label %123, label %171

171:                                              ; preds = %165, %116
  %172 = phi i16 [ %117, %116 ], [ %156, %165 ]
  store i32 4, i32* %3, align 8
  br label %175

173:                                              ; preds = %12
  %174 = load i16, i16* %8, align 8
  br label %175

175:                                              ; preds = %173, %171
  %176 = phi i16 [ %174, %173 ], [ %172, %171 ]
  %177 = and i16 %176, 1
  %178 = icmp eq i16 %177, 0
  br i1 %178, label %179, label %210

179:                                              ; preds = %175
  %180 = load i32, i32* %4, align 8
  %181 = icmp eq i32 %180, 64
  br i1 %181, label %184, label %182

182:                                              ; preds = %179
  %183 = load i64, i64* %5, align 8
  br label %197

184:                                              ; preds = %179
  %185 = load i64, i64* %6, align 8
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %342, label %187

187:                                              ; preds = %184
  %188 = load i64, i64* %5, align 8
  %189 = lshr i64 %188, 8
  store i64 %189, i64* %5, align 8
  %190 = load i8*, i8** %7, align 8
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i64
  %193 = shl nuw i64 %192, 56
  %194 = or i64 %193, %189
  store i64 %194, i64* %5, align 8
  store i32 56, i32* %4, align 8
  %195 = add i64 %185, -1
  store i64 %195, i64* %6, align 8
  %196 = getelementptr inbounds i8, i8* %190, i64 1
  store i8* %196, i8** %7, align 8
  br label %197

197:                                              ; preds = %187, %182
  %198 = phi i64 [ %183, %182 ], [ %194, %187 ]
  %199 = phi i32 [ %180, %182 ], [ 56, %187 ]
  %200 = zext i32 %199 to i64
  %201 = add i32 %199, 1
  store i32 %201, i32* %4, align 8
  %202 = shl i64 1, %200
  %203 = and i64 %202, %198
  %204 = icmp ne i64 %203, 0
  %205 = zext i1 %204 to i16
  %206 = load i16, i16* %8, align 8
  %207 = shl nuw nsw i16 %205, 1
  %208 = and i16 %206, -3
  %209 = or i16 %207, %208
  store i16 %209, i16* %8, align 8
  br label %210

210:                                              ; preds = %175, %197
  %211 = load i32, i32* %9, align 8
  %212 = add nsw i32 %211, 1
  store i32 %212, i32* %9, align 8
  store i32 0, i32* %3, align 8
  br label %342

213:                                              ; preds = %12
  %214 = load i32, i32* %4, align 8
  %215 = icmp eq i32 %214, 64
  br i1 %215, label %218, label %216

216:                                              ; preds = %213
  %217 = load i64, i64* %5, align 8
  br label %231

218:                                              ; preds = %213
  %219 = load i64, i64* %6, align 8
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %342, label %221

221:                                              ; preds = %218
  %222 = load i64, i64* %5, align 8
  %223 = lshr i64 %222, 8
  store i64 %223, i64* %5, align 8
  %224 = load i8*, i8** %7, align 8
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i64
  %227 = shl nuw i64 %226, 56
  %228 = or i64 %227, %223
  store i64 %228, i64* %5, align 8
  store i32 56, i32* %4, align 8
  %229 = add i64 %219, -1
  store i64 %229, i64* %6, align 8
  %230 = getelementptr inbounds i8, i8* %224, i64 1
  store i8* %230, i8** %7, align 8
  br label %231

231:                                              ; preds = %221, %216
  %232 = phi i64 [ %217, %216 ], [ %228, %221 ]
  %233 = phi i32 [ %214, %216 ], [ 56, %221 ]
  %234 = zext i32 %233 to i64
  %235 = add i32 %233, 1
  store i32 %235, i32* %4, align 8
  %236 = shl i64 1, %234
  %237 = and i64 %236, %232
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %239, label %342

239:                                              ; preds = %231
  store i32 6, i32* %3, align 8
  br label %240

240:                                              ; preds = %12, %239
  %241 = load i32, i32* %4, align 8
  %242 = sub i32 64, %241
  %243 = icmp ult i32 %242, 2
  br i1 %243, label %246, label %244

244:                                              ; preds = %240
  %245 = load i64, i64* %5, align 8
  br label %262

246:                                              ; preds = %240
  %247 = load i64, i64* %6, align 8
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %342, label %249

249:                                              ; preds = %246
  %250 = load i64, i64* %5, align 8
  %251 = lshr i64 %250, 8
  store i64 %251, i64* %5, align 8
  %252 = load i8*, i8** %7, align 8
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i64
  %255 = shl nuw i64 %254, 56
  %256 = or i64 %255, %251
  store i64 %256, i64* %5, align 8
  %257 = add i32 %241, -8
  store i32 %257, i32* %4, align 8
  %258 = add i64 %247, -1
  store i64 %258, i64* %6, align 8
  %259 = getelementptr inbounds i8, i8* %252, i64 1
  store i8* %259, i8** %7, align 8
  %260 = sub i32 72, %241
  %261 = icmp ult i32 %260, 2
  br i1 %261, label %370, label %262

262:                                              ; preds = %249, %372, %244
  %263 = phi i64 [ %245, %244 ], [ %256, %249 ], [ %379, %372 ]
  %264 = phi i32 [ %241, %244 ], [ %257, %249 ], [ %380, %372 ]
  %265 = zext i32 %264 to i64
  %266 = lshr i64 %263, %265
  %267 = trunc i64 %266 to i32
  %268 = and i32 %267, 3
  %269 = add i32 %264, 2
  store i32 %269, i32* %4, align 8
  %270 = icmp eq i32 %268, 0
  br i1 %270, label %271, label %272

271:                                              ; preds = %262
  store i32 0, i32* %3, align 8
  br label %342

272:                                              ; preds = %262
  %273 = trunc i32 %268 to i16
  %274 = load i16, i16* %8, align 8
  %275 = shl nuw nsw i16 %273, 6
  %276 = and i16 %274, -16321
  %277 = or i16 %276, %275
  store i16 %277, i16* %8, align 8
  store i32 7, i32* %3, align 8
  br label %280

278:                                              ; preds = %12
  %279 = load i16, i16* %8, align 8
  br label %280

280:                                              ; preds = %278, %272
  %281 = phi i16 [ %279, %278 ], [ %277, %272 ]
  %282 = load i32, i32* %10, align 4
  %283 = lshr i16 %281, 6
  %284 = and i16 %283, 255
  %285 = zext i16 %284 to i32
  %286 = icmp slt i32 %282, %285
  br i1 %286, label %289, label %287

287:                                              ; preds = %280
  %288 = load i32, i32* %9, align 8
  br label %337

289:                                              ; preds = %280, %331
  %290 = phi i32 [ %321, %331 ], [ %282, %280 ]
  %291 = load i32, i32* %4, align 8
  %292 = sub i32 64, %291
  %293 = icmp ult i32 %292, 8
  br i1 %293, label %296, label %294

294:                                              ; preds = %289
  %295 = load i64, i64* %5, align 8
  br label %313

296:                                              ; preds = %289
  %297 = load i64, i64* %6, align 8
  %298 = icmp eq i64 %297, 0
  br i1 %298, label %312, label %299

299:                                              ; preds = %296
  %300 = load i64, i64* %5, align 8
  %301 = lshr i64 %300, 8
  store i64 %301, i64* %5, align 8
  %302 = load i8*, i8** %7, align 8
  %303 = load i8, i8* %302, align 1
  %304 = zext i8 %303 to i64
  %305 = shl nuw i64 %304, 56
  %306 = or i64 %305, %301
  store i64 %306, i64* %5, align 8
  %307 = add i32 %291, -8
  store i32 %307, i32* %4, align 8
  %308 = add i64 %297, -1
  store i64 %308, i64* %6, align 8
  %309 = getelementptr inbounds i8, i8* %302, i64 1
  store i8* %309, i8** %7, align 8
  %310 = sub i32 72, %291
  %311 = icmp ult i32 %310, 8
  br i1 %311, label %357, label %313

312:                                              ; preds = %357, %296
  store i32 %290, i32* %10, align 4
  br label %342

313:                                              ; preds = %299, %359, %294
  %314 = phi i64 [ %295, %294 ], [ %306, %299 ], [ %366, %359 ]
  %315 = phi i32 [ %291, %294 ], [ %307, %299 ], [ %367, %359 ]
  %316 = zext i32 %315 to i64
  %317 = lshr i64 %314, %316
  %318 = trunc i64 %317 to i32
  %319 = and i32 %318, 255
  %320 = add i32 %315, 8
  store i32 %320, i32* %4, align 8
  %321 = add nsw i32 %290, 1
  %322 = load i16, i16* %8, align 8
  %323 = lshr i16 %322, 6
  %324 = and i16 %323, 255
  %325 = zext i16 %324 to i32
  %326 = icmp eq i32 %321, %325
  br i1 %326, label %327, label %331

327:                                              ; preds = %313
  %328 = icmp ugt i16 %324, 1
  %329 = icmp eq i32 %319, 0
  %330 = and i1 %329, %328
  br i1 %330, label %342, label %331

331:                                              ; preds = %327, %313
  %332 = shl nsw i32 %290, 3
  %333 = shl i32 %319, %332
  %334 = load i32, i32* %9, align 8
  %335 = or i32 %334, %333
  store i32 %335, i32* %9, align 8
  %336 = icmp slt i32 %321, %325
  br i1 %336, label %289, label %337

337:                                              ; preds = %331, %287
  %338 = phi i32 [ %288, %287 ], [ %335, %331 ]
  %339 = add nsw i32 %338, 1
  store i32 %339, i32* %9, align 8
  store i32 0, i32* %3, align 8
  br label %342

340:                                              ; preds = %32, %110
  %341 = phi i32 [ 5, %110 ], [ 2, %32 ]
  store i32 %341, i32* %3, align 8
  br label %12

342:                                              ; preds = %12, %19, %50, %79, %383, %246, %370, %327, %161, %218, %184, %231, %337, %312, %271, %210, %146, %71
  %343 = phi i32 [ 2, %312 ], [ 1, %337 ], [ 1, %271 ], [ 1, %210 ], [ 2, %146 ], [ 1, %71 ], [ -2, %231 ], [ 2, %184 ], [ 2, %218 ], [ -1, %161 ], [ -3, %327 ], [ 2, %370 ], [ 2, %246 ], [ 2, %383 ], [ 2, %79 ], [ -31, %12 ], [ 2, %19 ], [ 2, %50 ]
  ret i32 %343

344:                                              ; preds = %133
  %345 = icmp eq i64 %142, 0
  br i1 %345, label %146, label %346

346:                                              ; preds = %344
  %347 = load i64, i64* %5, align 8
  %348 = lshr i64 %347, 8
  store i64 %348, i64* %5, align 8
  %349 = load i8*, i8** %7, align 8
  %350 = load i8, i8* %349, align 1
  %351 = zext i8 %350 to i64
  %352 = shl nuw i64 %351, 56
  %353 = or i64 %352, %348
  store i64 %353, i64* %5, align 8
  %354 = add i32 %125, -16
  store i32 %354, i32* %4, align 8
  %355 = add i64 %131, -2
  store i64 %355, i64* %6, align 8
  %356 = getelementptr inbounds i8, i8* %349, i64 1
  store i8* %356, i8** %7, align 8
  br label %147

357:                                              ; preds = %299
  %358 = icmp eq i64 %308, 0
  br i1 %358, label %312, label %359

359:                                              ; preds = %357
  %360 = load i64, i64* %5, align 8
  %361 = lshr i64 %360, 8
  store i64 %361, i64* %5, align 8
  %362 = load i8*, i8** %7, align 8
  %363 = load i8, i8* %362, align 1
  %364 = zext i8 %363 to i64
  %365 = shl nuw i64 %364, 56
  %366 = or i64 %365, %361
  store i64 %366, i64* %5, align 8
  %367 = add i32 %291, -16
  store i32 %367, i32* %4, align 8
  %368 = add i64 %297, -2
  store i64 %368, i64* %6, align 8
  %369 = getelementptr inbounds i8, i8* %362, i64 1
  store i8* %369, i8** %7, align 8
  br label %313

370:                                              ; preds = %249
  %371 = icmp eq i64 %258, 0
  br i1 %371, label %342, label %372

372:                                              ; preds = %370
  %373 = load i64, i64* %5, align 8
  %374 = lshr i64 %373, 8
  store i64 %374, i64* %5, align 8
  %375 = load i8*, i8** %7, align 8
  %376 = load i8, i8* %375, align 1
  %377 = zext i8 %376 to i64
  %378 = shl nuw i64 %377, 56
  %379 = or i64 %378, %374
  store i64 %379, i64* %5, align 8
  %380 = add i32 %241, -16
  store i32 %380, i32* %4, align 8
  %381 = add i64 %247, -2
  store i64 %381, i64* %6, align 8
  %382 = getelementptr inbounds i8, i8* %375, i64 1
  store i8* %382, i8** %7, align 8
  br label %262

383:                                              ; preds = %82
  %384 = icmp eq i64 %91, 0
  br i1 %384, label %342, label %385

385:                                              ; preds = %383
  %386 = load i64, i64* %5, align 8
  %387 = lshr i64 %386, 8
  store i64 %387, i64* %5, align 8
  %388 = load i8*, i8** %7, align 8
  %389 = load i8, i8* %388, align 1
  %390 = zext i8 %389 to i64
  %391 = shl nuw i64 %390, 56
  %392 = or i64 %391, %387
  store i64 %392, i64* %5, align 8
  %393 = add i32 %74, -16
  store i32 %393, i32* %4, align 8
  %394 = add i64 %80, -2
  store i64 %394, i64* %6, align 8
  %395 = getelementptr inbounds i8, i8* %388, i64 1
  store i8* %395, i8** %7, align 8
  br label %95
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc void @BrotliCalculateRingBufferSize(%struct.BrotliDecoderStateStruct* nocapture) unnamed_addr #8 {
  %2 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 51
  %3 = load i32, i32* %2, align 4
  %4 = shl i32 1, %3
  %5 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 11
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  %8 = select i1 %7, i32 1024, i32 %6
  %9 = icmp eq i32 %6, %4
  br i1 %9, label %38, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 50
  %12 = load i16, i16* %11, align 8
  %13 = and i16 %12, 4
  %14 = icmp eq i16 %13, 0
  br i1 %14, label %15, label %38

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 8
  %21 = load i32, i32* %20, align 4
  br label %22

22:                                               ; preds = %15, %19
  %23 = phi i32 [ %21, %19 ], [ 0, %15 ]
  %24 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %25 = load i32, i32* %24, align 8
  %26 = add nsw i32 %25, %23
  %27 = icmp slt i32 %8, %26
  %28 = select i1 %27, i32 %26, i32 %8
  %29 = and i16 %12, 16
  %30 = icmp eq i16 %29, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %22, %31
  %32 = phi i32 [ %33, %31 ], [ %4, %22 ]
  %33 = ashr i32 %32, 1
  %34 = icmp slt i32 %33, %28
  br i1 %34, label %35, label %31

35:                                               ; preds = %31, %22
  %36 = phi i32 [ %4, %22 ], [ %32, %31 ]
  %37 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 52
  store i32 %36, i32* %37, align 8
  br label %38

38:                                               ; preds = %10, %1, %35
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i32 @DecodeVarLenUint8(%struct.BrotliDecoderStateStruct* nocapture, %struct.BrotliBitReader* nocapture, i32* nocapture) unnamed_addr #7 {
  %4 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 48
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %135 [
    i32 0, label %11
    i32 1, label %8
    i32 2, label %6
  ]

6:                                                ; preds = %3
  %7 = load i32, i32* %2, align 4
  br label %82

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  br label %43

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 64
  br i1 %14, label %18, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 0
  %17 = load i64, i64* %16, align 8
  br label %34

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 3
  %20 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 0
  %21 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 2
  %22 = load i64, i64* %19, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %135, label %24

24:                                               ; preds = %18
  %25 = load i64, i64* %20, align 8
  %26 = lshr i64 %25, 8
  store i64 %26, i64* %20, align 8
  %27 = load i8*, i8** %21, align 8
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i64
  %30 = shl nuw i64 %29, 56
  %31 = or i64 %30, %26
  store i64 %31, i64* %20, align 8
  store i32 56, i32* %12, align 8
  %32 = add i64 %22, -1
  store i64 %32, i64* %19, align 8
  %33 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %33, i8** %21, align 8
  br label %34

34:                                               ; preds = %24, %15
  %35 = phi i64 [ %17, %15 ], [ %31, %24 ]
  %36 = phi i32 [ %13, %15 ], [ 56, %24 ]
  %37 = zext i32 %36 to i64
  %38 = add i32 %36, 1
  store i32 %38, i32* %12, align 8
  %39 = shl i64 1, %37
  %40 = and i64 %39, %35
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %34
  store i32 0, i32* %2, align 4
  br label %135

43:                                               ; preds = %8, %34
  %44 = phi i32 [ %10, %8 ], [ %38, %34 ]
  %45 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 1
  %46 = sub i32 64, %44
  %47 = icmp ult i32 %46, 3
  br i1 %47, label %51, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 0
  %50 = load i64, i64* %49, align 8
  br label %71

51:                                               ; preds = %43
  %52 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 3
  %53 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 0
  %54 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 2
  %55 = load i64, i64* %52, align 8
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %70, label %57

57:                                               ; preds = %51
  %58 = load i64, i64* %53, align 8
  %59 = lshr i64 %58, 8
  store i64 %59, i64* %53, align 8
  %60 = load i8*, i8** %54, align 8
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i64
  %63 = shl nuw i64 %62, 56
  %64 = or i64 %63, %59
  store i64 %64, i64* %53, align 8
  %65 = add i32 %44, -8
  store i32 %65, i32* %45, align 8
  %66 = add i64 %55, -1
  store i64 %66, i64* %52, align 8
  %67 = getelementptr inbounds i8, i8* %60, i64 1
  store i8* %67, i8** %54, align 8
  %68 = sub i32 72, %44
  %69 = icmp ult i32 %68, 3
  br i1 %69, label %137, label %71

70:                                               ; preds = %137, %51
  store i32 1, i32* %4, align 8
  br label %135

71:                                               ; preds = %57, %139, %48
  %72 = phi i64 [ %50, %48 ], [ %64, %57 ], [ %146, %139 ]
  %73 = phi i32 [ %44, %48 ], [ %65, %57 ], [ %147, %139 ]
  %74 = zext i32 %73 to i64
  %75 = lshr i64 %72, %74
  %76 = trunc i64 %75 to i32
  %77 = and i32 %76, 7
  %78 = add i32 %73, 3
  store i32 %78, i32* %45, align 8
  %79 = icmp eq i32 %77, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %71
  store i32 1, i32* %2, align 4
  store i32 0, i32* %4, align 8
  br label %135

81:                                               ; preds = %71
  store i32 %77, i32* %2, align 4
  br label %82

82:                                               ; preds = %6, %81
  %83 = phi i32 [ %7, %6 ], [ %77, %81 ]
  %84 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 1
  %85 = load i32, i32* %84, align 8
  %86 = sub i32 64, %85
  %87 = icmp ult i32 %86, %83
  br i1 %87, label %91, label %88

88:                                               ; preds = %82
  %89 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 0
  %90 = load i64, i64* %89, align 8
  br label %113

91:                                               ; preds = %82
  %92 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 3
  %93 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 0
  %94 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 2
  %95 = load i64, i64* %92, align 8
  br label %96

96:                                               ; preds = %100, %91
  %97 = phi i64 [ %95, %91 ], [ %109, %100 ]
  %98 = phi i32 [ %85, %91 ], [ %108, %100 ]
  %99 = icmp eq i64 %97, 0
  br i1 %99, label %127, label %100

100:                                              ; preds = %96
  %101 = load i64, i64* %93, align 8
  %102 = lshr i64 %101, 8
  store i64 %102, i64* %93, align 8
  %103 = load i8*, i8** %94, align 8
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i64
  %106 = shl nuw i64 %105, 56
  %107 = or i64 %106, %102
  store i64 %107, i64* %93, align 8
  %108 = add i32 %98, -8
  store i32 %108, i32* %84, align 8
  %109 = add i64 %97, -1
  store i64 %109, i64* %92, align 8
  %110 = getelementptr inbounds i8, i8* %103, i64 1
  store i8* %110, i8** %94, align 8
  %111 = sub i32 72, %98
  %112 = icmp ult i32 %111, %83
  br i1 %112, label %96, label %113

113:                                              ; preds = %100, %88
  %114 = phi i64 [ %90, %88 ], [ %107, %100 ]
  %115 = phi i32 [ %85, %88 ], [ %108, %100 ]
  %116 = zext i32 %115 to i64
  %117 = lshr i64 %114, %116
  %118 = trunc i64 %117 to i32
  %119 = tail call i1 @llvm.is.constant.i32(i32 %83) #14
  br i1 %119, label %120, label %123

120:                                              ; preds = %113
  %121 = shl i32 -1, %83
  %122 = xor i32 %121, -1
  br label %128

123:                                              ; preds = %113
  %124 = zext i32 %83 to i64
  %125 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %124
  %126 = load i32, i32* %125, align 4
  br label %128

127:                                              ; preds = %96
  store i32 2, i32* %4, align 8
  br label %135

128:                                              ; preds = %123, %120
  %129 = phi i32 [ %122, %120 ], [ %126, %123 ]
  %130 = and i32 %129, %118
  %131 = add i32 %115, %83
  store i32 %131, i32* %84, align 8
  %132 = load i32, i32* %2, align 4
  %133 = shl i32 1, %132
  %134 = add i32 %133, %130
  store i32 %134, i32* %2, align 4
  store i32 0, i32* %4, align 8
  br label %135

135:                                              ; preds = %18, %3, %128, %127, %80, %70, %42
  %136 = phi i32 [ 2, %127 ], [ 1, %128 ], [ 2, %70 ], [ 1, %80 ], [ 1, %42 ], [ -31, %3 ], [ 2, %18 ]
  ret i32 %136

137:                                              ; preds = %57
  %138 = icmp eq i64 %66, 0
  br i1 %138, label %70, label %139

139:                                              ; preds = %137
  %140 = load i64, i64* %53, align 8
  %141 = lshr i64 %140, 8
  store i64 %141, i64* %53, align 8
  %142 = load i8*, i8** %54, align 8
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i64
  %145 = shl nuw i64 %144, 56
  %146 = or i64 %145, %141
  store i64 %146, i64* %53, align 8
  %147 = add i32 %44, -16
  store i32 %147, i32* %45, align 8
  %148 = add i64 %55, -2
  store i64 %148, i64* %52, align 8
  %149 = getelementptr inbounds i8, i8* %142, i64 1
  store i8* %149, i8** %54, align 8
  br label %71
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @ReadHuffmanCode(i32, i32, %struct.HuffmanCode*, i32*, %struct.BrotliDecoderStateStruct*) unnamed_addr #1 {
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 2
  %7 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 2
  %8 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 3
  %9 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 2, i32 1
  %10 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %6, i64 0, i32 0
  %11 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 2, i32 3
  %12 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 2, i32 2
  %13 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 8
  %14 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 7
  %15 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 14, i64 0
  %16 = bitcast i16* %15 to i8*
  %17 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 13, i64 0
  %18 = load i32, i32* %7, align 8
  br label %19

19:                                               ; preds = %54, %5
  %20 = phi i32 [ 4, %54 ], [ %18, %5 ]
  switch i32 %20, label %710 [
    i32 0, label %23
    i32 1, label %21
    i32 2, label %87
    i32 3, label %171
    i32 4, label %213
    i32 5, label %362
  ]

21:                                               ; preds = %19
  %22 = load i32, i32* %9, align 8
  br label %55

23:                                               ; preds = %19
  %24 = load i32, i32* %9, align 8
  %25 = sub i32 64, %24
  %26 = icmp ult i32 %25, 2
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  %28 = load i64, i64* %10, align 8
  br label %45

29:                                               ; preds = %23
  %30 = load i64, i64* %11, align 8
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %710, label %32

32:                                               ; preds = %29
  %33 = load i64, i64* %10, align 8
  %34 = lshr i64 %33, 8
  store i64 %34, i64* %10, align 8
  %35 = load i8*, i8** %12, align 8
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = shl nuw i64 %37, 56
  %39 = or i64 %38, %34
  store i64 %39, i64* %10, align 8
  %40 = add i32 %24, -8
  store i32 %40, i32* %9, align 8
  %41 = add i64 %30, -1
  store i64 %41, i64* %11, align 8
  %42 = getelementptr inbounds i8, i8* %35, i64 1
  store i8* %42, i8** %12, align 8
  %43 = sub i32 72, %24
  %44 = icmp ult i32 %43, 2
  br i1 %44, label %796, label %45

45:                                               ; preds = %32, %798, %27
  %46 = phi i64 [ %28, %27 ], [ %39, %32 ], [ %805, %798 ]
  %47 = phi i32 [ %24, %27 ], [ %40, %32 ], [ %806, %798 ]
  %48 = zext i32 %47 to i64
  %49 = lshr i64 %46, %48
  %50 = trunc i64 %49 to i32
  %51 = and i32 %50, 3
  store i32 %51, i32* %8, align 4
  %52 = add i32 %47, 2
  store i32 %52, i32* %9, align 8
  %53 = icmp eq i32 %51, 1
  br i1 %53, label %55, label %54

54:                                               ; preds = %45
  store i32 32, i32* %13, align 8
  store i32 0, i32* %14, align 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 30, i1 false)
  store i32 4, i32* %7, align 8
  br label %19

55:                                               ; preds = %45, %21
  %56 = phi i32 [ %22, %21 ], [ %52, %45 ]
  %57 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 6
  %58 = sub i32 64, %56
  %59 = icmp ult i32 %58, 2
  br i1 %59, label %62, label %60

60:                                               ; preds = %55
  %61 = load i64, i64* %10, align 8
  br label %79

62:                                               ; preds = %55
  %63 = load i64, i64* %11, align 8
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %78, label %65

65:                                               ; preds = %62
  %66 = load i64, i64* %10, align 8
  %67 = lshr i64 %66, 8
  store i64 %67, i64* %10, align 8
  %68 = load i8*, i8** %12, align 8
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = shl nuw i64 %70, 56
  %72 = or i64 %71, %67
  store i64 %72, i64* %10, align 8
  %73 = add i32 %56, -8
  store i32 %73, i32* %9, align 8
  %74 = add i64 %63, -1
  store i64 %74, i64* %11, align 8
  %75 = getelementptr inbounds i8, i8* %68, i64 1
  store i8* %75, i8** %12, align 8
  %76 = sub i32 72, %56
  %77 = icmp ult i32 %76, 2
  br i1 %77, label %770, label %79

78:                                               ; preds = %770, %62
  store i32 1, i32* %7, align 8
  br label %710

79:                                               ; preds = %65, %772, %60
  %80 = phi i64 [ %61, %60 ], [ %72, %65 ], [ %779, %772 ]
  %81 = phi i32 [ %56, %60 ], [ %73, %65 ], [ %780, %772 ]
  %82 = zext i32 %81 to i64
  %83 = lshr i64 %80, %82
  %84 = trunc i64 %83 to i32
  %85 = and i32 %84, 3
  store i32 %85, i32* %57, align 4
  %86 = add i32 %81, 2
  store i32 %86, i32* %9, align 8
  store i32 0, i32* %8, align 4
  br label %87

87:                                               ; preds = %19, %79
  %88 = add i32 %0, -1
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %93, label %90

90:                                               ; preds = %87
  %91 = tail call i32 @llvm.ctlz.i32(i32 %88, i1 true) #14, !range !13
  %92 = sub nuw nsw i32 32, %91
  br label %93

93:                                               ; preds = %90, %87
  %94 = phi i32 [ 0, %87 ], [ %92, %90 ]
  %95 = load i32, i32* %8, align 4
  %96 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 6
  %97 = load i32, i32* %96, align 8
  %98 = icmp ugt i32 %95, %97
  br i1 %98, label %106, label %99

99:                                               ; preds = %93
  %100 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 2, i32 0
  %101 = zext i32 %94 to i64
  %102 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %101
  %103 = shl i32 -1, %94
  %104 = xor i32 %103, -1
  %105 = load i32, i32* %9, align 8
  br label %110

106:                                              ; preds = %148, %93
  %107 = icmp eq i32 %97, 0
  br i1 %107, label %206, label %108

108:                                              ; preds = %106
  %109 = zext i32 %97 to i64
  br label %156

110:                                              ; preds = %148, %99
  %111 = phi i32 [ %105, %99 ], [ %146, %148 ]
  %112 = phi i32 [ %95, %99 ], [ %152, %148 ]
  %113 = sub i32 64, %111
  %114 = icmp ult i32 %113, %94
  br i1 %114, label %117, label %115

115:                                              ; preds = %110
  %116 = load i64, i64* %100, align 8
  br label %133

117:                                              ; preds = %110
  %118 = load i64, i64* %11, align 8
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %142, label %120

120:                                              ; preds = %117
  %121 = load i64, i64* %100, align 8
  %122 = lshr i64 %121, 8
  store i64 %122, i64* %100, align 8
  %123 = load i8*, i8** %12, align 8
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i64
  %126 = shl nuw i64 %125, 56
  %127 = or i64 %126, %122
  store i64 %127, i64* %100, align 8
  %128 = add i32 %111, -8
  store i32 %128, i32* %9, align 8
  %129 = add i64 %118, -1
  store i64 %129, i64* %11, align 8
  %130 = getelementptr inbounds i8, i8* %123, i64 1
  store i8* %130, i8** %12, align 8
  %131 = sub i32 72, %111
  %132 = icmp ult i32 %131, %94
  br i1 %132, label %712, label %133

133:                                              ; preds = %120, %714, %729, %744, %759, %115
  %134 = phi i64 [ %116, %115 ], [ %127, %120 ], [ %721, %714 ], [ %736, %729 ], [ %751, %744 ], [ %766, %759 ]
  %135 = phi i32 [ %111, %115 ], [ %128, %120 ], [ %722, %714 ], [ %737, %729 ], [ %752, %744 ], [ %767, %759 ]
  %136 = zext i32 %135 to i64
  %137 = lshr i64 %134, %136
  %138 = trunc i64 %137 to i32
  %139 = tail call i1 @llvm.is.constant.i32(i32 %94) #14
  br i1 %139, label %143, label %140

140:                                              ; preds = %133
  %141 = load i32, i32* %102, align 4
  br label %143

142:                                              ; preds = %757, %742, %727, %712, %117
  store i32 %112, i32* %8, align 4
  store i32 2, i32* %7, align 8
  br label %710

143:                                              ; preds = %140, %133
  %144 = phi i32 [ %141, %140 ], [ %104, %133 ]
  %145 = and i32 %144, %138
  %146 = add i32 %135, %94
  store i32 %146, i32* %9, align 8
  %147 = icmp ult i32 %145, %1
  br i1 %147, label %148, label %710

148:                                              ; preds = %143
  %149 = trunc i32 %145 to i16
  %150 = zext i32 %112 to i64
  %151 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 11, i64 %150
  store i16 %149, i16* %151, align 2
  %152 = add i32 %112, 1
  %153 = icmp ugt i32 %152, %97
  br i1 %153, label %106, label %110

154:                                              ; preds = %162
  %155 = icmp eq i64 %158, %109
  br i1 %155, label %174, label %156

156:                                              ; preds = %154, %108
  %157 = phi i64 [ 0, %108 ], [ %158, %154 ]
  %158 = add nuw nsw i64 %157, 1
  %159 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 11, i64 %157
  %160 = load i16, i16* %159, align 2
  %161 = trunc i64 %158 to i32
  br label %164

162:                                              ; preds = %164
  %163 = icmp ugt i32 %170, %97
  br i1 %163, label %154, label %164

164:                                              ; preds = %162, %156
  %165 = phi i32 [ %161, %156 ], [ %170, %162 ]
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 11, i64 %166
  %168 = load i16, i16* %167, align 2
  %169 = icmp eq i16 %160, %168
  %170 = add i32 %165, 1
  br i1 %169, label %710, label %162

171:                                              ; preds = %19
  %172 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 6
  %173 = load i32, i32* %172, align 8
  br label %174

174:                                              ; preds = %154, %171
  %175 = phi i32 [ %173, %171 ], [ %97, %154 ]
  %176 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 6
  %177 = icmp eq i32 %175, 3
  br i1 %177, label %178, label %206

178:                                              ; preds = %174
  %179 = load i32, i32* %9, align 8
  %180 = icmp eq i32 %179, 64
  br i1 %180, label %183, label %181

181:                                              ; preds = %178
  %182 = load i64, i64* %10, align 8
  br label %196

183:                                              ; preds = %178
  %184 = load i64, i64* %11, align 8
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %205, label %186

186:                                              ; preds = %183
  %187 = load i64, i64* %10, align 8
  %188 = lshr i64 %187, 8
  store i64 %188, i64* %10, align 8
  %189 = load i8*, i8** %12, align 8
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i64
  %192 = shl nuw i64 %191, 56
  %193 = or i64 %192, %188
  store i64 %193, i64* %10, align 8
  store i32 56, i32* %9, align 8
  %194 = add i64 %184, -1
  store i64 %194, i64* %11, align 8
  %195 = getelementptr inbounds i8, i8* %189, i64 1
  store i8* %195, i8** %12, align 8
  br label %196

196:                                              ; preds = %186, %181
  %197 = phi i64 [ %182, %181 ], [ %193, %186 ]
  %198 = phi i32 [ %179, %181 ], [ 56, %186 ]
  %199 = zext i32 %198 to i64
  %200 = lshr i64 %197, %199
  %201 = trunc i64 %200 to i32
  %202 = and i32 %201, 1
  %203 = add i32 %198, 1
  store i32 %203, i32* %9, align 8
  %204 = add nuw nsw i32 %202, 3
  store i32 %204, i32* %176, align 8
  br label %206

205:                                              ; preds = %183
  store i32 3, i32* %7, align 8
  br label %710

206:                                              ; preds = %106, %174, %196
  %207 = phi i32 [ %204, %196 ], [ %175, %174 ], [ 0, %106 ]
  %208 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 11, i64 0
  %209 = tail call i32 @BrotliBuildSimpleHuffmanTable(%struct.HuffmanCode* %2, i32 8, i16* %208, i32 %207) #14
  %210 = icmp eq i32* %3, null
  br i1 %210, label %212, label %211

211:                                              ; preds = %206
  store i32 %209, i32* %3, align 4
  br label %212

212:                                              ; preds = %206, %211
  store i32 0, i32* %7, align 8
  br label %710

213:                                              ; preds = %19
  %214 = load i32, i32* %14, align 4
  %215 = load i32, i32* %13, align 8
  %216 = load i32, i32* %8, align 4
  %217 = icmp ult i32 %216, 18
  br i1 %217, label %218, label %303

218:                                              ; preds = %213
  %219 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 2, i32 0
  %220 = zext i32 %216 to i64
  %221 = load i32, i32* %9, align 8
  br label %222

222:                                              ; preds = %298, %218
  %223 = phi i32 [ %221, %218 ], [ %281, %298 ]
  %224 = phi i64 [ %220, %218 ], [ %301, %298 ]
  %225 = phi i32 [ %215, %218 ], [ %300, %298 ]
  %226 = phi i32 [ %214, %218 ], [ %299, %298 ]
  %227 = getelementptr inbounds [18 x i8], [18 x i8]* @kCodeLengthCodeOrder, i64 0, i64 %224
  %228 = load i8, i8* %227, align 1
  %229 = sub i32 64, %223
  %230 = icmp ult i32 %229, 4
  br i1 %230, label %233, label %231

231:                                              ; preds = %222
  %232 = load i64, i64* %219, align 8
  br label %249

233:                                              ; preds = %222
  %234 = load i64, i64* %11, align 8
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %258, label %236

236:                                              ; preds = %233
  %237 = load i64, i64* %219, align 8
  %238 = lshr i64 %237, 8
  store i64 %238, i64* %219, align 8
  %239 = load i8*, i8** %12, align 8
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i64
  %242 = shl nuw i64 %241, 56
  %243 = or i64 %242, %238
  store i64 %243, i64* %219, align 8
  %244 = add i32 %223, -8
  store i32 %244, i32* %9, align 8
  %245 = add i64 %234, -1
  store i64 %245, i64* %11, align 8
  %246 = getelementptr inbounds i8, i8* %239, i64 1
  store i8* %246, i8** %12, align 8
  %247 = sub i32 72, %223
  %248 = icmp ult i32 %247, 4
  br i1 %248, label %783, label %249

249:                                              ; preds = %236, %785, %231
  %250 = phi i64 [ %232, %231 ], [ %243, %236 ], [ %792, %785 ]
  %251 = phi i32 [ %223, %231 ], [ %244, %236 ], [ %793, %785 ]
  %252 = zext i32 %251 to i64
  %253 = lshr i64 %250, %252
  %254 = and i64 %253, 15
  %255 = getelementptr inbounds [16 x i8], [16 x i8]* @kCodeLengthPrefixLength, i64 0, i64 %254
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i32
  br label %275

258:                                              ; preds = %783, %233
  %259 = phi i32 [ %223, %233 ], [ %244, %783 ]
  %260 = sub i32 64, %259
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %267, label %262

262:                                              ; preds = %258
  %263 = load i64, i64* %219, align 8
  %264 = zext i32 %259 to i64
  %265 = lshr i64 %263, %264
  %266 = and i64 %265, 15
  br label %267

267:                                              ; preds = %262, %258
  %268 = phi i64 [ %266, %262 ], [ 0, %258 ]
  %269 = getelementptr inbounds [16 x i8], [16 x i8]* @kCodeLengthPrefixLength, i64 0, i64 %268
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i32
  %272 = icmp ult i32 %260, %271
  br i1 %272, label %273, label %275

273:                                              ; preds = %267
  %274 = trunc i64 %224 to i32
  store i32 %274, i32* %8, align 4
  store i32 %226, i32* %14, align 4
  store i32 %225, i32* %13, align 8
  store i32 4, i32* %7, align 8
  br label %710

275:                                              ; preds = %267, %249
  %276 = phi i32 [ %271, %267 ], [ %257, %249 ]
  %277 = phi i32 [ %259, %267 ], [ %251, %249 ]
  %278 = phi i64 [ %268, %267 ], [ %254, %249 ]
  %279 = getelementptr inbounds [16 x i8], [16 x i8]* @kCodeLengthPrefixValue, i64 0, i64 %278
  %280 = load i8, i8* %279, align 1
  %281 = add i32 %277, %276
  store i32 %281, i32* %9, align 8
  %282 = zext i8 %228 to i64
  %283 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 13, i64 %282
  store i8 %280, i8* %283, align 1
  %284 = lshr i64 61166, %278
  %285 = and i64 %284, 1
  %286 = icmp eq i64 %285, 0
  br i1 %286, label %298, label %287

287:                                              ; preds = %275
  %288 = zext i8 %280 to i32
  %289 = lshr i32 32, %288
  %290 = sub i32 %225, %289
  %291 = add i32 %226, 1
  %292 = zext i8 %280 to i64
  %293 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 14, i64 %292
  %294 = load i16, i16* %293, align 2
  %295 = add i16 %294, 1
  store i16 %295, i16* %293, align 2
  %296 = add i32 %290, -1
  %297 = icmp ugt i32 %296, 31
  br i1 %297, label %303, label %298

298:                                              ; preds = %287, %275
  %299 = phi i32 [ %291, %287 ], [ %226, %275 ]
  %300 = phi i32 [ %290, %287 ], [ %225, %275 ]
  %301 = add nuw nsw i64 %224, 1
  %302 = icmp eq i64 %301, 18
  br i1 %302, label %303, label %222

303:                                              ; preds = %298, %287, %213
  %304 = phi i32 [ %214, %213 ], [ %299, %298 ], [ %291, %287 ]
  %305 = phi i32 [ %215, %213 ], [ %300, %298 ], [ %290, %287 ]
  %306 = icmp eq i32 %304, 1
  %307 = icmp eq i32 %305, 0
  %308 = or i1 %306, %307
  br i1 %308, label %309, label %710

309:                                              ; preds = %303
  %310 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 9, i64 0
  tail call void @BrotliBuildCodeLengthsHuffmanTable(%struct.HuffmanCode* %310, i8* %17, i16* %15) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %16, i8 0, i64 32, i1 false)
  %311 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 10
  %312 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 0
  store i32 -16, i32* %312, align 4
  %313 = load i16*, i16** %311, align 8
  %314 = getelementptr inbounds i16, i16* %313, i64 -16
  store i16 -1, i16* %314, align 2
  %315 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 1
  store i32 -15, i32* %315, align 4
  %316 = load i16*, i16** %311, align 8
  %317 = getelementptr inbounds i16, i16* %316, i64 -15
  store i16 -1, i16* %317, align 2
  %318 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 2
  store i32 -14, i32* %318, align 4
  %319 = load i16*, i16** %311, align 8
  %320 = getelementptr inbounds i16, i16* %319, i64 -14
  store i16 -1, i16* %320, align 2
  %321 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 3
  store i32 -13, i32* %321, align 4
  %322 = load i16*, i16** %311, align 8
  %323 = getelementptr inbounds i16, i16* %322, i64 -13
  store i16 -1, i16* %323, align 2
  %324 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 4
  store i32 -12, i32* %324, align 4
  %325 = load i16*, i16** %311, align 8
  %326 = getelementptr inbounds i16, i16* %325, i64 -12
  store i16 -1, i16* %326, align 2
  %327 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 5
  store i32 -11, i32* %327, align 4
  %328 = load i16*, i16** %311, align 8
  %329 = getelementptr inbounds i16, i16* %328, i64 -11
  store i16 -1, i16* %329, align 2
  %330 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 6
  store i32 -10, i32* %330, align 4
  %331 = load i16*, i16** %311, align 8
  %332 = getelementptr inbounds i16, i16* %331, i64 -10
  store i16 -1, i16* %332, align 2
  %333 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 7
  store i32 -9, i32* %333, align 4
  %334 = load i16*, i16** %311, align 8
  %335 = getelementptr inbounds i16, i16* %334, i64 -9
  store i16 -1, i16* %335, align 2
  %336 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 8
  store i32 -8, i32* %336, align 4
  %337 = load i16*, i16** %311, align 8
  %338 = getelementptr inbounds i16, i16* %337, i64 -8
  store i16 -1, i16* %338, align 2
  %339 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 9
  store i32 -7, i32* %339, align 4
  %340 = load i16*, i16** %311, align 8
  %341 = getelementptr inbounds i16, i16* %340, i64 -7
  store i16 -1, i16* %341, align 2
  %342 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 10
  store i32 -6, i32* %342, align 4
  %343 = load i16*, i16** %311, align 8
  %344 = getelementptr inbounds i16, i16* %343, i64 -6
  store i16 -1, i16* %344, align 2
  %345 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 11
  store i32 -5, i32* %345, align 4
  %346 = load i16*, i16** %311, align 8
  %347 = getelementptr inbounds i16, i16* %346, i64 -5
  store i16 -1, i16* %347, align 2
  %348 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 12
  store i32 -4, i32* %348, align 4
  %349 = load i16*, i16** %311, align 8
  %350 = getelementptr inbounds i16, i16* %349, i64 -4
  store i16 -1, i16* %350, align 2
  %351 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 13
  store i32 -3, i32* %351, align 4
  %352 = load i16*, i16** %311, align 8
  %353 = getelementptr inbounds i16, i16* %352, i64 -3
  store i16 -1, i16* %353, align 2
  %354 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 14
  store i32 -2, i32* %354, align 4
  %355 = load i16*, i16** %311, align 8
  %356 = getelementptr inbounds i16, i16* %355, i64 -2
  store i16 -1, i16* %356, align 2
  %357 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 15
  store i32 -1, i32* %357, align 4
  %358 = load i16*, i16** %311, align 8
  %359 = getelementptr inbounds i16, i16* %358, i64 -1
  store i16 -1, i16* %359, align 2
  %360 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 4
  %361 = bitcast i32* %360 to <4 x i32>*
  store <4 x i32> <i32 0, i32 8, i32 0, i32 0>, <4 x i32>* %361, align 8
  store i32 32768, i32* %13, align 8
  store i32 5, i32* %7, align 8
  br label %371

362:                                              ; preds = %19
  %363 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 6
  %364 = load i32, i32* %363, align 8
  %365 = load i32, i32* %14, align 4
  %366 = load i32, i32* %13, align 8
  %367 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 5
  %368 = load i32, i32* %367, align 4
  %369 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 4
  %370 = load i32, i32* %369, align 8
  br label %371

371:                                              ; preds = %362, %309
  %372 = phi i32 [ %370, %362 ], [ 0, %309 ]
  %373 = phi i32 [ %368, %362 ], [ 8, %309 ]
  %374 = phi i32 [ %366, %362 ], [ 32768, %309 ]
  %375 = phi i32 [ %365, %362 ], [ 0, %309 ]
  %376 = phi i32 [ %364, %362 ], [ 0, %309 ]
  %377 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 6
  %378 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 5
  %379 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 4
  %380 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 10
  %381 = load i16*, i16** %380, align 8
  %382 = tail call i32 @BrotliWarmupBitReader(%struct.BrotliBitReader* %6) #14
  %383 = icmp eq i32 %382, 0
  br i1 %383, label %384, label %386

384:                                              ; preds = %371
  %385 = load i32, i32* %377, align 8
  br label %549

386:                                              ; preds = %371
  %387 = icmp ult i32 %376, %1
  %388 = icmp ne i32 %374, 0
  %389 = and i1 %387, %388
  br i1 %389, label %390, label %547

390:                                              ; preds = %386, %538
  %391 = phi i32 [ %543, %538 ], [ %372, %386 ]
  %392 = phi i32 [ %542, %538 ], [ %373, %386 ]
  %393 = phi i32 [ %541, %538 ], [ %374, %386 ]
  %394 = phi i32 [ %540, %538 ], [ %375, %386 ]
  %395 = phi i32 [ %539, %538 ], [ %376, %386 ]
  %396 = load i64, i64* %11, align 8
  %397 = icmp ult i64 %396, 4
  br i1 %397, label %398, label %399

398:                                              ; preds = %390
  store i32 %395, i32* %377, align 8
  store i32 %394, i32* %14, align 4
  store i32 %392, i32* %378, align 4
  store i32 %391, i32* %379, align 8
  store i32 %393, i32* %13, align 8
  br label %549

399:                                              ; preds = %390
  %400 = load i32, i32* %9, align 8
  %401 = icmp ugt i32 %400, 31
  %402 = load i64, i64* %10, align 8
  br i1 %401, label %403, label %414

403:                                              ; preds = %399
  %404 = lshr i64 %402, 32
  store i64 %404, i64* %10, align 8
  %405 = xor i32 %400, 32
  store i32 %405, i32* %9, align 8
  %406 = load i8*, i8** %12, align 8
  %407 = bitcast i8* %406 to i32*
  %408 = load i32, i32* %407, align 4
  %409 = zext i32 %408 to i64
  %410 = shl nuw i64 %409, 32
  %411 = or i64 %410, %404
  store i64 %411, i64* %10, align 8
  %412 = add i64 %396, -4
  store i64 %412, i64* %11, align 8
  %413 = getelementptr inbounds i8, i8* %406, i64 4
  store i8* %413, i8** %12, align 8
  br label %414

414:                                              ; preds = %403, %399
  %415 = phi i32 [ %405, %403 ], [ %400, %399 ]
  %416 = phi i64 [ %411, %403 ], [ %402, %399 ]
  %417 = zext i32 %415 to i64
  %418 = lshr i64 %416, %417
  %419 = and i64 %418, 31
  %420 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 9, i64 %419, i32 0
  %421 = load i8, i8* %420, align 2
  %422 = zext i8 %421 to i32
  %423 = add i32 %415, %422
  store i32 %423, i32* %9, align 8
  %424 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 9, i64 %419, i32 1
  %425 = load i16, i16* %424, align 2
  %426 = zext i16 %425 to i32
  %427 = icmp ult i16 %425, 16
  br i1 %427, label %428, label %446

428:                                              ; preds = %414
  %429 = icmp eq i16 %425, 0
  br i1 %429, label %442, label %430

430:                                              ; preds = %428
  %431 = trunc i32 %395 to i16
  %432 = zext i16 %425 to i64
  %433 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 %432
  %434 = load i32, i32* %433, align 4
  %435 = sext i32 %434 to i64
  %436 = getelementptr inbounds i16, i16* %381, i64 %435
  store i16 %431, i16* %436, align 2
  store i32 %395, i32* %433, align 4
  %437 = lshr i32 32768, %426
  %438 = sub i32 %393, %437
  %439 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 14, i64 %432
  %440 = load i16, i16* %439, align 2
  %441 = add i16 %440, 1
  store i16 %441, i16* %439, align 2
  br label %442

442:                                              ; preds = %430, %428
  %443 = phi i32 [ %393, %428 ], [ %438, %430 ]
  %444 = phi i32 [ %392, %428 ], [ %426, %430 ]
  %445 = add nuw i32 %395, 1
  br label %538

446:                                              ; preds = %414
  %447 = icmp eq i16 %425, 16
  %448 = select i1 %447, i32 2, i32 3
  %449 = zext i32 %423 to i64
  %450 = lshr i64 %416, %449
  %451 = trunc i64 %450 to i32
  %452 = tail call i1 @llvm.is.constant.i32(i32 %448) #14
  br i1 %452, label %453, label %456

453:                                              ; preds = %446
  %454 = shl i32 -1, %448
  %455 = xor i32 %454, -1
  br label %460

456:                                              ; preds = %446
  %457 = zext i32 %448 to i64
  %458 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %457
  %459 = load i32, i32* %458, align 4
  br label %460

460:                                              ; preds = %456, %453
  %461 = phi i32 [ %455, %453 ], [ %459, %456 ]
  %462 = and i32 %461, %451
  %463 = add i32 %448, %423
  store i32 %463, i32* %9, align 8
  %464 = select i1 %447, i32 %392, i32 0
  %465 = icmp eq i32 %391, %464
  br i1 %465, label %466, label %471

466:                                              ; preds = %460
  %467 = icmp eq i32 %394, 0
  br i1 %467, label %471, label %468

468:                                              ; preds = %466
  %469 = add i32 %394, -2
  %470 = shl i32 %469, %448
  br label %471

471:                                              ; preds = %468, %466, %460
  %472 = phi i32 [ %391, %466 ], [ %391, %468 ], [ %464, %460 ]
  %473 = phi i32 [ 0, %466 ], [ %394, %468 ], [ 0, %460 ]
  %474 = phi i32 [ 0, %466 ], [ %470, %468 ], [ 0, %460 ]
  %475 = add i32 %462, 3
  %476 = add i32 %475, %474
  %477 = sub i32 %476, %473
  %478 = add i32 %477, %395
  %479 = icmp ugt i32 %478, %1
  br i1 %479, label %547, label %480

480:                                              ; preds = %471
  %481 = icmp eq i32 %472, 0
  br i1 %481, label %538, label %482

482:                                              ; preds = %480
  %483 = zext i32 %472 to i64
  %484 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 %483
  %485 = load i32, i32* %484, align 4
  %486 = add i32 %474, 3
  %487 = add i32 %486, %462
  %488 = sub i32 %487, %473
  %489 = add i32 %474, 2
  %490 = add i32 %489, %462
  %491 = sub i32 %490, %473
  %492 = and i32 %488, 3
  %493 = icmp eq i32 %492, 0
  br i1 %493, label %504, label %494

494:                                              ; preds = %482, %494
  %495 = phi i32 [ %501, %494 ], [ %395, %482 ]
  %496 = phi i32 [ %495, %494 ], [ %485, %482 ]
  %497 = phi i32 [ %502, %494 ], [ %492, %482 ]
  %498 = trunc i32 %495 to i16
  %499 = sext i32 %496 to i64
  %500 = getelementptr inbounds i16, i16* %381, i64 %499
  store i16 %498, i16* %500, align 2
  %501 = add i32 %495, 1
  %502 = add i32 %497, -1
  %503 = icmp eq i32 %502, 0
  br i1 %503, label %504, label %494, !llvm.loop !14

504:                                              ; preds = %494, %482
  %505 = phi i32 [ undef, %482 ], [ %495, %494 ]
  %506 = phi i32 [ %395, %482 ], [ %501, %494 ]
  %507 = phi i32 [ %485, %482 ], [ %495, %494 ]
  %508 = icmp ult i32 %491, 3
  br i1 %508, label %529, label %509

509:                                              ; preds = %504, %509
  %510 = phi i32 [ %527, %509 ], [ %506, %504 ]
  %511 = phi i32 [ %523, %509 ], [ %507, %504 ]
  %512 = trunc i32 %510 to i16
  %513 = sext i32 %511 to i64
  %514 = getelementptr inbounds i16, i16* %381, i64 %513
  store i16 %512, i16* %514, align 2
  %515 = add i32 %510, 1
  %516 = trunc i32 %515 to i16
  %517 = sext i32 %510 to i64
  %518 = getelementptr inbounds i16, i16* %381, i64 %517
  store i16 %516, i16* %518, align 2
  %519 = add i32 %510, 2
  %520 = trunc i32 %519 to i16
  %521 = sext i32 %515 to i64
  %522 = getelementptr inbounds i16, i16* %381, i64 %521
  store i16 %520, i16* %522, align 2
  %523 = add i32 %510, 3
  %524 = trunc i32 %523 to i16
  %525 = sext i32 %519 to i64
  %526 = getelementptr inbounds i16, i16* %381, i64 %525
  store i16 %524, i16* %526, align 2
  %527 = add i32 %510, 4
  %528 = icmp eq i32 %527, %478
  br i1 %528, label %529, label %509

529:                                              ; preds = %509, %504
  %530 = phi i32 [ %505, %504 ], [ %523, %509 ]
  store i32 %530, i32* %484, align 4
  %531 = sub i32 15, %472
  %532 = shl i32 %477, %531
  %533 = sub i32 %393, %532
  %534 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 14, i64 %483
  %535 = load i16, i16* %534, align 2
  %536 = trunc i32 %477 to i16
  %537 = add i16 %535, %536
  store i16 %537, i16* %534, align 2
  br label %538

538:                                              ; preds = %529, %480, %442
  %539 = phi i32 [ %445, %442 ], [ %478, %529 ], [ %478, %480 ]
  %540 = phi i32 [ 0, %442 ], [ %476, %529 ], [ %476, %480 ]
  %541 = phi i32 [ %443, %442 ], [ %533, %529 ], [ %393, %480 ]
  %542 = phi i32 [ %444, %442 ], [ %392, %529 ], [ %392, %480 ]
  %543 = phi i32 [ %391, %442 ], [ %472, %529 ], [ 0, %480 ]
  %544 = icmp ult i32 %539, %1
  %545 = icmp ne i32 %541, 0
  %546 = and i1 %544, %545
  br i1 %546, label %390, label %547

547:                                              ; preds = %471, %538, %386
  %548 = phi i32 [ %374, %386 ], [ %541, %538 ], [ 1048575, %471 ]
  store i32 %548, i32* %13, align 8
  br label %701

549:                                              ; preds = %384, %398
  %550 = phi i32 [ %385, %384 ], [ %395, %398 ]
  %551 = icmp ult i32 %550, %1
  br i1 %551, label %554, label %552

552:                                              ; preds = %549
  %553 = load i32, i32* %13, align 8
  br label %701

554:                                              ; preds = %549
  %555 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 2, i32 0
  %556 = load i32, i32* %13, align 8
  br label %557

557:                                              ; preds = %696, %554
  %558 = phi i32 [ %550, %554 ], [ %697, %696 ]
  %559 = phi i32 [ %556, %554 ], [ %698, %696 ]
  %560 = phi i32 [ 0, %554 ], [ %699, %696 ]
  %561 = icmp eq i32 %559, 0
  br i1 %561, label %704, label %562

562:                                              ; preds = %557
  %563 = icmp eq i32 %560, 0
  br i1 %563, label %564, label %566

564:                                              ; preds = %562
  %565 = load i32, i32* %9, align 8
  br label %581

566:                                              ; preds = %562
  %567 = load i64, i64* %11, align 8
  %568 = icmp eq i64 %567, 0
  br i1 %568, label %710, label %569

569:                                              ; preds = %566
  %570 = load i64, i64* %555, align 8
  %571 = lshr i64 %570, 8
  store i64 %571, i64* %555, align 8
  %572 = load i8*, i8** %12, align 8
  %573 = load i8, i8* %572, align 1
  %574 = zext i8 %573 to i64
  %575 = shl nuw i64 %574, 56
  %576 = or i64 %575, %571
  store i64 %576, i64* %555, align 8
  %577 = load i32, i32* %9, align 8
  %578 = add i32 %577, -8
  store i32 %578, i32* %9, align 8
  %579 = add i64 %567, -1
  store i64 %579, i64* %11, align 8
  %580 = getelementptr inbounds i8, i8* %572, i64 1
  store i8* %580, i8** %12, align 8
  br label %581

581:                                              ; preds = %569, %564
  %582 = phi i32 [ %565, %564 ], [ %578, %569 ]
  %583 = sub i32 64, %582
  %584 = icmp eq i32 %583, 0
  br i1 %584, label %590, label %585

585:                                              ; preds = %581
  %586 = load i64, i64* %555, align 8
  %587 = zext i32 %582 to i64
  %588 = lshr i64 %586, %587
  %589 = trunc i64 %588 to i32
  br label %590

590:                                              ; preds = %585, %581
  %591 = phi i32 [ %589, %585 ], [ 0, %581 ]
  %592 = and i32 %591, 31
  %593 = zext i32 %592 to i64
  %594 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 9, i64 %593, i32 0
  %595 = load i8, i8* %594, align 2
  %596 = zext i8 %595 to i32
  %597 = icmp ult i32 %583, %596
  br i1 %597, label %696, label %598

598:                                              ; preds = %590
  %599 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 9, i64 %593, i32 1
  %600 = load i16, i16* %599, align 2
  %601 = zext i16 %600 to i32
  %602 = icmp ult i16 %600, 16
  br i1 %602, label %603, label %625

603:                                              ; preds = %598
  %604 = add i32 %582, %596
  store i32 %604, i32* %9, align 8
  %605 = load i16*, i16** %380, align 8
  store i32 0, i32* %14, align 4
  %606 = icmp eq i16 %600, 0
  br i1 %606, label %621, label %607

607:                                              ; preds = %603
  %608 = trunc i32 %558 to i16
  %609 = zext i16 %600 to i64
  %610 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 %609
  %611 = load i32, i32* %610, align 4
  %612 = sext i32 %611 to i64
  %613 = getelementptr inbounds i16, i16* %605, i64 %612
  store i16 %608, i16* %613, align 2
  %614 = load i32, i32* %377, align 4
  store i32 %614, i32* %610, align 4
  store i32 %601, i32* %378, align 4
  %615 = lshr i32 32768, %601
  %616 = load i32, i32* %13, align 4
  %617 = sub i32 %616, %615
  store i32 %617, i32* %13, align 4
  %618 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 14, i64 %609
  %619 = load i16, i16* %618, align 2
  %620 = add i16 %619, 1
  store i16 %620, i16* %618, align 2
  br label %621

621:                                              ; preds = %607, %603
  %622 = phi i32 [ %558, %603 ], [ %614, %607 ]
  %623 = phi i32 [ %559, %603 ], [ %617, %607 ]
  %624 = add i32 %622, 1
  store i32 %624, i32* %377, align 4
  br label %696

625:                                              ; preds = %598
  %626 = add nsw i32 %601, -14
  %627 = tail call i1 @llvm.is.constant.i32(i32 %626) #14
  br i1 %627, label %628, label %631

628:                                              ; preds = %625
  %629 = shl i32 -1, %626
  %630 = xor i32 %629, -1
  br label %635

631:                                              ; preds = %625
  %632 = zext i32 %626 to i64
  %633 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %632
  %634 = load i32, i32* %633, align 4
  br label %635

635:                                              ; preds = %631, %628
  %636 = phi i32 [ %630, %628 ], [ %634, %631 ]
  %637 = add nsw i32 %626, %596
  %638 = icmp ult i32 %583, %637
  br i1 %638, label %696, label %639

639:                                              ; preds = %635
  %640 = lshr i32 %591, %596
  %641 = and i32 %636, %640
  %642 = add i32 %637, %582
  store i32 %642, i32* %9, align 8
  %643 = load i16*, i16** %380, align 8
  %644 = icmp eq i16 %600, 16
  br i1 %644, label %645, label %647

645:                                              ; preds = %639
  %646 = load i32, i32* %378, align 4
  br label %647

647:                                              ; preds = %645, %639
  %648 = phi i32 [ 2, %645 ], [ 3, %639 ]
  %649 = phi i32 [ %646, %645 ], [ 0, %639 ]
  %650 = load i32, i32* %379, align 4
  %651 = icmp eq i32 %650, %649
  br i1 %651, label %653, label %652

652:                                              ; preds = %647
  store i32 0, i32* %14, align 4
  store i32 %649, i32* %379, align 4
  br label %659

653:                                              ; preds = %647
  %654 = load i32, i32* %14, align 4
  %655 = icmp eq i32 %654, 0
  br i1 %655, label %659, label %656

656:                                              ; preds = %653
  %657 = add i32 %654, -2
  %658 = shl i32 %657, %648
  store i32 %658, i32* %14, align 4
  br label %659

659:                                              ; preds = %656, %653, %652
  %660 = phi i32 [ 0, %653 ], [ %654, %656 ], [ 0, %652 ]
  %661 = phi i32 [ 0, %653 ], [ %658, %656 ], [ 0, %652 ]
  %662 = add i32 %641, 3
  %663 = add i32 %662, %661
  store i32 %663, i32* %14, align 4
  %664 = sub i32 %663, %660
  %665 = add i32 %664, %558
  %666 = icmp ugt i32 %665, %1
  br i1 %666, label %667, label %668

667:                                              ; preds = %659
  store i32 %1, i32* %377, align 4
  store i32 1048575, i32* %13, align 4
  br label %710

668:                                              ; preds = %659
  %669 = icmp eq i32 %649, 0
  br i1 %669, label %695, label %670

670:                                              ; preds = %668
  %671 = zext i32 %649 to i64
  %672 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 %671
  %673 = load i32, i32* %672, align 4
  br label %674

674:                                              ; preds = %674, %670
  %675 = phi i32 [ %558, %670 ], [ %681, %674 ]
  %676 = phi i32 [ %673, %670 ], [ %680, %674 ]
  %677 = trunc i32 %675 to i16
  %678 = sext i32 %676 to i64
  %679 = getelementptr inbounds i16, i16* %643, i64 %678
  store i16 %677, i16* %679, align 2
  %680 = load i32, i32* %377, align 4
  %681 = add i32 %680, 1
  store i32 %681, i32* %377, align 4
  %682 = icmp eq i32 %681, %665
  br i1 %682, label %683, label %674

683:                                              ; preds = %674
  %684 = load i32, i32* %379, align 4
  %685 = zext i32 %684 to i64
  %686 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 12, i64 %685
  store i32 %680, i32* %686, align 4
  %687 = sub i32 15, %684
  %688 = shl i32 %664, %687
  %689 = load i32, i32* %13, align 4
  %690 = sub i32 %689, %688
  store i32 %690, i32* %13, align 4
  %691 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %4, i64 0, i32 59, i32 0, i32 14, i64 %685
  %692 = load i16, i16* %691, align 2
  %693 = trunc i32 %664 to i16
  %694 = add i16 %692, %693
  store i16 %694, i16* %691, align 2
  br label %696

695:                                              ; preds = %668
  store i32 %665, i32* %377, align 4
  br label %696

696:                                              ; preds = %695, %683, %635, %621, %590
  %697 = phi i32 [ %558, %590 ], [ %558, %635 ], [ %624, %621 ], [ %665, %683 ], [ %665, %695 ]
  %698 = phi i32 [ %559, %590 ], [ %559, %635 ], [ %623, %621 ], [ %690, %683 ], [ %559, %695 ]
  %699 = phi i32 [ 1, %590 ], [ 1, %635 ], [ 0, %621 ], [ 0, %683 ], [ 0, %695 ]
  %700 = icmp ult i32 %697, %1
  br i1 %700, label %557, label %701

701:                                              ; preds = %696, %552, %547
  %702 = phi i32 [ %548, %547 ], [ %553, %552 ], [ %698, %696 ]
  %703 = icmp eq i32 %702, 0
  br i1 %703, label %704, label %710

704:                                              ; preds = %557, %701
  %705 = load i16*, i16** %380, align 8
  %706 = tail call i32 @BrotliBuildHuffmanTable(%struct.HuffmanCode* %2, i32 8, i16* %705, i16* %15) #14
  %707 = icmp eq i32* %3, null
  br i1 %707, label %709, label %708

708:                                              ; preds = %704
  store i32 %706, i32* %3, align 4
  br label %709

709:                                              ; preds = %704, %708
  store i32 0, i32* %7, align 8
  br label %710

710:                                              ; preds = %19, %29, %796, %566, %143, %164, %273, %303, %667, %205, %142, %709, %701, %212, %78
  %711 = phi i32 [ 2, %78 ], [ 1, %212 ], [ 2, %205 ], [ 1, %709 ], [ -7, %701 ], [ 2, %142 ], [ -7, %667 ], [ 2, %273 ], [ -6, %303 ], [ -5, %164 ], [ -4, %143 ], [ 2, %566 ], [ 2, %796 ], [ 2, %29 ], [ -31, %19 ]
  ret i32 %711

712:                                              ; preds = %120
  %713 = icmp eq i64 %129, 0
  br i1 %713, label %142, label %714

714:                                              ; preds = %712
  %715 = load i64, i64* %100, align 8
  %716 = lshr i64 %715, 8
  store i64 %716, i64* %100, align 8
  %717 = load i8*, i8** %12, align 8
  %718 = load i8, i8* %717, align 1
  %719 = zext i8 %718 to i64
  %720 = shl nuw i64 %719, 56
  %721 = or i64 %720, %716
  store i64 %721, i64* %100, align 8
  %722 = add i32 %111, -16
  store i32 %722, i32* %9, align 8
  %723 = add i64 %118, -2
  store i64 %723, i64* %11, align 8
  %724 = getelementptr inbounds i8, i8* %717, i64 1
  store i8* %724, i8** %12, align 8
  %725 = sub i32 80, %111
  %726 = icmp ult i32 %725, %94
  br i1 %726, label %727, label %133

727:                                              ; preds = %714
  %728 = icmp eq i64 %723, 0
  br i1 %728, label %142, label %729

729:                                              ; preds = %727
  %730 = load i64, i64* %100, align 8
  %731 = lshr i64 %730, 8
  store i64 %731, i64* %100, align 8
  %732 = load i8*, i8** %12, align 8
  %733 = load i8, i8* %732, align 1
  %734 = zext i8 %733 to i64
  %735 = shl nuw i64 %734, 56
  %736 = or i64 %735, %731
  store i64 %736, i64* %100, align 8
  %737 = add i32 %111, -24
  store i32 %737, i32* %9, align 8
  %738 = add i64 %118, -3
  store i64 %738, i64* %11, align 8
  %739 = getelementptr inbounds i8, i8* %732, i64 1
  store i8* %739, i8** %12, align 8
  %740 = sub i32 88, %111
  %741 = icmp ult i32 %740, %94
  br i1 %741, label %742, label %133

742:                                              ; preds = %729
  %743 = icmp eq i64 %738, 0
  br i1 %743, label %142, label %744

744:                                              ; preds = %742
  %745 = load i64, i64* %100, align 8
  %746 = lshr i64 %745, 8
  store i64 %746, i64* %100, align 8
  %747 = load i8*, i8** %12, align 8
  %748 = load i8, i8* %747, align 1
  %749 = zext i8 %748 to i64
  %750 = shl nuw i64 %749, 56
  %751 = or i64 %750, %746
  store i64 %751, i64* %100, align 8
  %752 = add i32 %111, -32
  store i32 %752, i32* %9, align 8
  %753 = add i64 %118, -4
  store i64 %753, i64* %11, align 8
  %754 = getelementptr inbounds i8, i8* %747, i64 1
  store i8* %754, i8** %12, align 8
  %755 = sub i32 96, %111
  %756 = icmp ult i32 %755, %94
  br i1 %756, label %757, label %133

757:                                              ; preds = %744
  %758 = icmp eq i64 %753, 0
  br i1 %758, label %142, label %759

759:                                              ; preds = %757
  %760 = load i64, i64* %100, align 8
  %761 = lshr i64 %760, 8
  store i64 %761, i64* %100, align 8
  %762 = load i8*, i8** %12, align 8
  %763 = load i8, i8* %762, align 1
  %764 = zext i8 %763 to i64
  %765 = shl nuw i64 %764, 56
  %766 = or i64 %765, %761
  store i64 %766, i64* %100, align 8
  %767 = add i32 %111, -40
  store i32 %767, i32* %9, align 8
  %768 = add i64 %118, -5
  store i64 %768, i64* %11, align 8
  %769 = getelementptr inbounds i8, i8* %762, i64 1
  store i8* %769, i8** %12, align 8
  br label %133

770:                                              ; preds = %65
  %771 = icmp eq i64 %74, 0
  br i1 %771, label %78, label %772

772:                                              ; preds = %770
  %773 = load i64, i64* %10, align 8
  %774 = lshr i64 %773, 8
  store i64 %774, i64* %10, align 8
  %775 = load i8*, i8** %12, align 8
  %776 = load i8, i8* %775, align 1
  %777 = zext i8 %776 to i64
  %778 = shl nuw i64 %777, 56
  %779 = or i64 %778, %774
  store i64 %779, i64* %10, align 8
  %780 = add i32 %56, -16
  store i32 %780, i32* %9, align 8
  %781 = add i64 %63, -2
  store i64 %781, i64* %11, align 8
  %782 = getelementptr inbounds i8, i8* %775, i64 1
  store i8* %782, i8** %12, align 8
  br label %79

783:                                              ; preds = %236
  %784 = icmp eq i64 %245, 0
  br i1 %784, label %258, label %785

785:                                              ; preds = %783
  %786 = load i64, i64* %219, align 8
  %787 = lshr i64 %786, 8
  store i64 %787, i64* %219, align 8
  %788 = load i8*, i8** %12, align 8
  %789 = load i8, i8* %788, align 1
  %790 = zext i8 %789 to i64
  %791 = shl nuw i64 %790, 56
  %792 = or i64 %791, %787
  store i64 %792, i64* %219, align 8
  %793 = add i32 %223, -16
  store i32 %793, i32* %9, align 8
  %794 = add i64 %234, -2
  store i64 %794, i64* %11, align 8
  %795 = getelementptr inbounds i8, i8* %788, i64 1
  store i8* %795, i8** %12, align 8
  br label %249

796:                                              ; preds = %32
  %797 = icmp eq i64 %41, 0
  br i1 %797, label %710, label %798

798:                                              ; preds = %796
  %799 = load i64, i64* %10, align 8
  %800 = lshr i64 %799, 8
  store i64 %800, i64* %10, align 8
  %801 = load i8*, i8** %12, align 8
  %802 = load i8, i8* %801, align 1
  %803 = zext i8 %802 to i64
  %804 = shl nuw i64 %803, 56
  %805 = or i64 %804, %800
  store i64 %805, i64* %10, align 8
  %806 = add i32 %24, -16
  store i32 %806, i32* %9, align 8
  %807 = add i64 %30, -2
  store i64 %807, i64* %11, align 8
  %808 = getelementptr inbounds i8, i8* %801, i64 1
  store i8* %808, i8** %12, align 8
  br label %45
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i32 @CopyUncompressedBlockToOutput(i64* nocapture, i8**, i64*, %struct.BrotliDecoderStateStruct* nocapture) unnamed_addr #7 {
  %5 = tail call fastcc i32 @BrotliEnsureRingBuffer(%struct.BrotliDecoderStateStruct* %3)
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %96, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 47
  %9 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 2, i32 3
  %10 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 2, i32 1
  %11 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 29
  %12 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 8
  %13 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 11
  %14 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 16
  %15 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 2, i32 0
  %16 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 2, i32 2
  %17 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 51
  %18 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 9
  %19 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 10
  %20 = load i32, i32* %8, align 4
  br label %21

21:                                               ; preds = %95, %7
  %22 = phi i32 [ 0, %95 ], [ %20, %7 ]
  br label %23

23:                                               ; preds = %21, %23
  switch i32 %22, label %23 [
    i32 0, label %24
    i32 1, label %85
  ]

24:                                               ; preds = %23
  %25 = load i64, i64* %9, align 8
  %26 = icmp ugt i64 %25, 1073741824
  %27 = load i32, i32* %10, align 8
  %28 = sub i32 64, %27
  %29 = lshr i32 %28, 3
  %30 = zext i32 %29 to i64
  %31 = add nuw nsw i64 %25, %30
  %32 = select i1 %26, i64 1073741824, i64 %31
  %33 = trunc i64 %32 to i32
  %34 = load i32, i32* %11, align 8
  %35 = icmp slt i32 %34, %33
  %36 = select i1 %35, i32 %34, i32 %33
  %37 = load i32, i32* %12, align 4
  %38 = add nsw i32 %36, %37
  %39 = load i32, i32* %13, align 8
  %40 = icmp sgt i32 %38, %39
  %41 = sub nsw i32 %39, %37
  %42 = select i1 %40, i32 %41, i32 %36
  %43 = load i8*, i8** %14, align 8
  %44 = sext i32 %37 to i64
  %45 = getelementptr inbounds i8, i8* %43, i64 %44
  %46 = sext i32 %42 to i64
  %47 = icmp ugt i32 %28, 7
  %48 = icmp ne i32 %42, 0
  %49 = and i1 %48, %47
  br i1 %49, label %50, label %66

50:                                               ; preds = %24, %50
  %51 = phi i32 [ %59, %50 ], [ %27, %24 ]
  %52 = phi i64 [ %61, %50 ], [ %46, %24 ]
  %53 = phi i8* [ %60, %50 ], [ %45, %24 ]
  %54 = load i64, i64* %15, align 8
  %55 = zext i32 %51 to i64
  %56 = lshr i64 %54, %55
  %57 = trunc i64 %56 to i8
  store i8 %57, i8* %53, align 1
  %58 = load i32, i32* %10, align 8
  %59 = add i32 %58, 8
  store i32 %59, i32* %10, align 8
  %60 = getelementptr inbounds i8, i8* %53, i64 1
  %61 = add i64 %52, -1
  %62 = sub i32 56, %58
  %63 = icmp ugt i32 %62, 7
  %64 = icmp ne i64 %61, 0
  %65 = and i1 %64, %63
  br i1 %65, label %50, label %66

66:                                               ; preds = %50, %24
  %67 = phi i8* [ %45, %24 ], [ %60, %50 ]
  %68 = phi i64 [ %46, %24 ], [ %61, %50 ]
  %69 = load i8*, i8** %16, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %69, i64 %68, i1 false) #14
  %70 = load i64, i64* %9, align 8
  %71 = sub i64 %70, %68
  store i64 %71, i64* %9, align 8
  %72 = load i8*, i8** %16, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 %68
  store i8* %73, i8** %16, align 8
  %74 = load i32, i32* %12, align 4
  %75 = add nsw i32 %74, %42
  store i32 %75, i32* %12, align 4
  %76 = load i32, i32* %11, align 8
  %77 = sub nsw i32 %76, %42
  store i32 %77, i32* %11, align 8
  %78 = load i32, i32* %17, align 4
  %79 = shl i32 1, %78
  %80 = icmp slt i32 %75, %79
  br i1 %80, label %82, label %81

81:                                               ; preds = %66
  store i32 1, i32* %8, align 4
  br label %85

82:                                               ; preds = %66
  %83 = icmp eq i32 %77, 0
  %84 = select i1 %83, i32 1, i32 2
  br label %96

85:                                               ; preds = %23, %81
  %86 = tail call fastcc i32 @WriteRingBuffer(%struct.BrotliDecoderStateStruct* %3, i64* %0, i8** %1, i64* %2, i32 0)
  %87 = icmp eq i32 %86, 1
  br i1 %87, label %88, label %96

88:                                               ; preds = %85
  %89 = load i32, i32* %13, align 8
  %90 = load i32, i32* %17, align 4
  %91 = shl i32 1, %90
  %92 = icmp eq i32 %89, %91
  br i1 %92, label %93, label %95

93:                                               ; preds = %88
  %94 = load i32, i32* %18, align 8
  store i32 %94, i32* %19, align 4
  br label %95

95:                                               ; preds = %88, %93
  store i32 0, i32* %8, align 4
  br label %21

96:                                               ; preds = %85, %82, %4
  %97 = phi i32 [ %84, %82 ], [ -26, %4 ], [ %86, %85 ]
  ret i32 %97
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @DecodeContextMap(i32, i32* nocapture, i8** nocapture, %struct.BrotliDecoderStateStruct*) unnamed_addr #1 {
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 2
  %7 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 59, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  switch i32 %8, label %395 [
    i32 0, label %15
    i32 1, label %34
    i32 2, label %12
    i32 3, label %9
    i32 4, label %359
  ]

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 59, i32 0, i32 19
  %11 = load i32, i32* %10, align 8
  br label %87

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 59, i32 0, i32 18
  %14 = load i32, i32* %13, align 4
  br label %78

15:                                               ; preds = %4
  %16 = tail call fastcc i32 @DecodeVarLenUint8(%struct.BrotliDecoderStateStruct* %3, %struct.BrotliBitReader* %6, i32* %1)
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %395

18:                                               ; preds = %15
  %19 = load i32, i32* %1, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* %1, align 4
  %21 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 59, i32 0, i32 17
  store i32 0, i32* %21, align 8
  %22 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 3
  %23 = load i8* (i8*, i64)*, i8* (i8*, i64)** %22, align 8
  %24 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 5
  %25 = load i8*, i8** %24, align 8
  %26 = zext i32 %0 to i64
  %27 = tail call i8* %23(i8* %25, i64 %26) #14
  store i8* %27, i8** %2, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %395, label %29

29:                                               ; preds = %18
  %30 = load i32, i32* %1, align 4
  %31 = icmp ult i32 %30, 2
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %27, i8 0, i64 %26, i1 false)
  br label %395

33:                                               ; preds = %29
  store i32 1, i32* %7, align 4
  br label %34

34:                                               ; preds = %4, %33
  %35 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 2, i32 1
  %36 = load i32, i32* %35, align 8
  %37 = sub i32 64, %36
  %38 = icmp ult i32 %37, 5
  br i1 %38, label %42, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %6, i64 0, i32 0
  %41 = load i64, i64* %40, align 8
  br label %61

42:                                               ; preds = %34
  %43 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 2, i32 3
  %44 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %6, i64 0, i32 0
  %45 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 2, i32 2
  %46 = load i64, i64* %43, align 8
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %395, label %48

48:                                               ; preds = %42
  %49 = load i64, i64* %44, align 8
  %50 = lshr i64 %49, 8
  store i64 %50, i64* %44, align 8
  %51 = load i8*, i8** %45, align 8
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i64
  %54 = shl nuw i64 %53, 56
  %55 = or i64 %54, %50
  store i64 %55, i64* %44, align 8
  %56 = add i32 %36, -8
  store i32 %56, i32* %35, align 8
  %57 = add i64 %46, -1
  store i64 %57, i64* %43, align 8
  %58 = getelementptr inbounds i8, i8* %51, i64 1
  store i8* %58, i8** %45, align 8
  %59 = sub i32 72, %36
  %60 = icmp ult i32 %59, 5
  br i1 %60, label %425, label %61

61:                                               ; preds = %48, %427, %39
  %62 = phi i64 [ %41, %39 ], [ %55, %48 ], [ %434, %427 ]
  %63 = phi i32 [ %36, %39 ], [ %56, %48 ], [ %435, %427 ]
  %64 = zext i32 %63 to i64
  %65 = lshr i64 %62, %64
  %66 = trunc i64 %65 to i32
  %67 = and i32 %66, 1
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %73, label %69

69:                                               ; preds = %61
  %70 = lshr i32 %66, 1
  %71 = and i32 %70, 15
  %72 = add nuw nsw i32 %71, 1
  br label %73

73:                                               ; preds = %61, %69
  %74 = phi i32 [ 5, %69 ], [ 1, %61 ]
  %75 = phi i32 [ %72, %69 ], [ 0, %61 ]
  %76 = add i32 %63, %74
  %77 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 59, i32 0, i32 18
  store i32 %75, i32* %77, align 4
  store i32 %76, i32* %35, align 8
  store i32 2, i32* %7, align 4
  br label %78

78:                                               ; preds = %12, %73
  %79 = phi i32 [ %14, %12 ], [ %75, %73 ]
  %80 = load i32, i32* %1, align 4
  %81 = add i32 %79, %80
  %82 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 59, i32 0, i32 20, i64 0
  %83 = tail call fastcc i32 @ReadHuffmanCode(i32 %81, i32 %81, %struct.HuffmanCode* %82, i32* null, %struct.BrotliDecoderStateStruct* %3)
  %84 = icmp eq i32 %83, 1
  br i1 %84, label %85, label %395

85:                                               ; preds = %78
  %86 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 59, i32 0, i32 19
  store i32 65535, i32* %86, align 8
  store i32 3, i32* %7, align 4
  br label %87

87:                                               ; preds = %9, %85
  %88 = phi i32 [ %11, %9 ], [ 65535, %85 ]
  %89 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 59, i32 0, i32 17
  %90 = load i32, i32* %89, align 8
  %91 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 59, i32 0, i32 18
  %92 = load i32, i32* %91, align 4
  %93 = load i8*, i8** %2, align 8
  %94 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %94) #14
  %95 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 59, i32 0, i32 19
  store i32 %88, i32* %5, align 4
  %96 = icmp ne i32 %88, 65535
  %97 = icmp ult i32 %90, %0
  %98 = or i1 %97, %96
  br i1 %98, label %99, label %358

99:                                               ; preds = %87
  %100 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 59, i32 0, i32 20, i64 0
  %101 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 2, i32 1
  %102 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %6, i64 0, i32 0
  %103 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 2, i32 3
  %104 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 2, i32 2
  br label %105

105:                                              ; preds = %99, %188
  %106 = phi i32 [ %88, %99 ], [ %189, %188 ]
  %107 = phi i1 [ %96, %99 ], [ false, %188 ]
  %108 = phi i32 [ %90, %99 ], [ %190, %188 ]
  br i1 %107, label %200, label %109

109:                                              ; preds = %105
  %110 = load i32, i32* %101, align 8
  %111 = sub i32 64, %110
  %112 = icmp ult i32 %111, 15
  br i1 %112, label %115, label %113

113:                                              ; preds = %109
  %114 = load i64, i64* %102, align 8
  br label %131

115:                                              ; preds = %109
  %116 = load i64, i64* %103, align 8
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %176, label %118

118:                                              ; preds = %115
  %119 = load i64, i64* %102, align 8
  %120 = lshr i64 %119, 8
  store i64 %120, i64* %102, align 8
  %121 = load i8*, i8** %104, align 8
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i64
  %124 = shl nuw i64 %123, 56
  %125 = or i64 %124, %120
  store i64 %125, i64* %102, align 8
  %126 = add i32 %110, -8
  store i32 %126, i32* %101, align 8
  %127 = add i64 %116, -1
  store i64 %127, i64* %103, align 8
  %128 = getelementptr inbounds i8, i8* %121, i64 1
  store i8* %128, i8** %104, align 8
  %129 = sub i32 72, %110
  %130 = icmp ult i32 %129, 15
  br i1 %130, label %397, label %131

131:                                              ; preds = %118, %399, %414, %113
  %132 = phi i64 [ %114, %113 ], [ %125, %118 ], [ %406, %399 ], [ %421, %414 ]
  %133 = phi i32 [ %110, %113 ], [ %126, %118 ], [ %407, %399 ], [ %422, %414 ]
  %134 = zext i32 %133 to i64
  %135 = lshr i64 %132, %134
  %136 = and i64 %135, 255
  %137 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 59, i32 0, i32 20, i64 %136
  %138 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %137, i64 0, i32 0
  %139 = load i8, i8* %138, align 2
  %140 = icmp ugt i8 %139, 8
  br i1 %140, label %141, label %167

141:                                              ; preds = %131
  %142 = trunc i64 %135 to i32
  %143 = zext i8 %139 to i32
  %144 = add nsw i32 %143, -8
  %145 = add i32 %133, 8
  store i32 %145, i32* %101, align 8
  %146 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 59, i32 0, i32 20, i64 %136, i32 1
  %147 = load i16, i16* %146, align 2
  %148 = zext i16 %147 to i32
  %149 = lshr i32 %142, 8
  %150 = and i32 %149, 127
  %151 = tail call i1 @llvm.is.constant.i32(i32 %144) #14
  br i1 %151, label %152, label %155

152:                                              ; preds = %141
  %153 = shl i32 -1, %144
  %154 = xor i32 %153, -1
  br label %159

155:                                              ; preds = %141
  %156 = zext i32 %144 to i64
  %157 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %156
  %158 = load i32, i32* %157, align 4
  br label %159

159:                                              ; preds = %155, %152
  %160 = phi i32 [ %154, %152 ], [ %158, %155 ]
  %161 = and i32 %150, %160
  %162 = add nuw nsw i32 %161, %148
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %137, i64 %163
  %165 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %164, i64 0, i32 0
  %166 = load i8, i8* %165, align 2
  br label %167

167:                                              ; preds = %131, %159
  %168 = phi i32 [ %145, %159 ], [ %133, %131 ]
  %169 = phi i8 [ %166, %159 ], [ %139, %131 ]
  %170 = phi %struct.HuffmanCode* [ %164, %159 ], [ %137, %131 ]
  %171 = zext i8 %169 to i32
  %172 = add i32 %168, %171
  store i32 %172, i32* %101, align 8
  %173 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %170, i64 0, i32 1
  %174 = load i16, i16* %173, align 2
  %175 = zext i16 %174 to i32
  store i32 %175, i32* %5, align 4
  br label %181

176:                                              ; preds = %412, %397, %115
  %177 = call fastcc i32 @SafeDecodeSymbol(%struct.HuffmanCode* %100, %struct.BrotliBitReader* %6, i32* nonnull %5) #14
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %354, label %179

179:                                              ; preds = %176
  %180 = load i32, i32* %5, align 4
  br label %181

181:                                              ; preds = %179, %167
  %182 = phi i32 [ %180, %179 ], [ %175, %167 ]
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %192

184:                                              ; preds = %181
  %185 = add i32 %108, 1
  %186 = zext i32 %108 to i64
  %187 = getelementptr inbounds i8, i8* %93, i64 %186
  store i8 0, i8* %187, align 1
  br label %188

188:                                              ; preds = %332, %337, %314, %184, %194
  %189 = phi i32 [ 0, %184 ], [ %182, %194 ], [ %201, %314 ], [ %201, %337 ], [ %201, %332 ]
  %190 = phi i32 [ %185, %184 ], [ %197, %194 ], [ %258, %314 ], [ %333, %332 ], [ %349, %337 ]
  %191 = icmp ult i32 %190, %0
  br i1 %191, label %105, label %358

192:                                              ; preds = %181
  %193 = icmp ugt i32 %182, %92
  br i1 %193, label %194, label %200

194:                                              ; preds = %192
  %195 = sub i32 %182, %92
  %196 = trunc i32 %195 to i8
  %197 = add i32 %108, 1
  %198 = zext i32 %108 to i64
  %199 = getelementptr inbounds i8, i8* %93, i64 %198
  store i8 %196, i8* %199, align 1
  br label %188

200:                                              ; preds = %105, %192
  %201 = phi i32 [ %106, %105 ], [ %182, %192 ]
  %202 = load i32, i32* %101, align 8
  %203 = sub i32 64, %202
  %204 = icmp ult i32 %203, %201
  br i1 %204, label %207, label %205

205:                                              ; preds = %200
  %206 = load i64, i64* %102, align 8
  br label %226

207:                                              ; preds = %200
  %208 = load i64, i64* %103, align 8
  br label %209

209:                                              ; preds = %213, %207
  %210 = phi i64 [ %208, %207 ], [ %222, %213 ]
  %211 = phi i32 [ %202, %207 ], [ %221, %213 ]
  %212 = icmp eq i64 %210, 0
  br i1 %212, label %354, label %213

213:                                              ; preds = %209
  %214 = load i64, i64* %102, align 8
  %215 = lshr i64 %214, 8
  store i64 %215, i64* %102, align 8
  %216 = load i8*, i8** %104, align 8
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i64
  %219 = shl nuw i64 %218, 56
  %220 = or i64 %219, %215
  store i64 %220, i64* %102, align 8
  %221 = add i32 %211, -8
  store i32 %221, i32* %101, align 8
  %222 = add i64 %210, -1
  store i64 %222, i64* %103, align 8
  %223 = getelementptr inbounds i8, i8* %216, i64 1
  store i8* %223, i8** %104, align 8
  %224 = sub i32 72, %211
  %225 = icmp ult i32 %224, %201
  br i1 %225, label %209, label %226

226:                                              ; preds = %213, %205
  %227 = phi i64 [ %206, %205 ], [ %220, %213 ]
  %228 = phi i32 [ %202, %205 ], [ %221, %213 ]
  %229 = zext i32 %228 to i64
  %230 = lshr i64 %227, %229
  %231 = trunc i64 %230 to i32
  %232 = tail call i1 @llvm.is.constant.i32(i32 %201) #14
  br i1 %232, label %233, label %236

233:                                              ; preds = %226
  %234 = shl i32 -1, %201
  %235 = xor i32 %234, -1
  br label %240

236:                                              ; preds = %226
  %237 = zext i32 %201 to i64
  %238 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %237
  %239 = load i32, i32* %238, align 4
  br label %240

240:                                              ; preds = %236, %233
  %241 = phi i32 [ %235, %233 ], [ %239, %236 ]
  %242 = and i32 %241, %231
  %243 = add i32 %228, %201
  store i32 %243, i32* %101, align 8
  %244 = shl i32 1, %201
  %245 = add i32 %242, %244
  %246 = add i32 %245, %108
  %247 = icmp ugt i32 %246, %0
  br i1 %247, label %356, label %248

248:                                              ; preds = %240
  %249 = icmp ult i32 %245, 32
  br i1 %249, label %316, label %250

250:                                              ; preds = %248
  %251 = add i32 %242, -1
  %252 = add i32 %251, %244
  %253 = xor i32 %108, -1
  %254 = icmp ugt i32 %252, %253
  br i1 %254, label %316, label %255

255:                                              ; preds = %250
  %256 = and i32 %245, -32
  %257 = sub i32 %245, %256
  %258 = add i32 %108, %256
  %259 = add i32 %256, -32
  %260 = lshr exact i32 %259, 5
  %261 = add nuw nsw i32 %260, 1
  %262 = and i32 %261, 3
  %263 = icmp ult i32 %259, 96
  br i1 %263, label %299, label %264

264:                                              ; preds = %255
  %265 = sub nsw i32 %261, %262
  br label %266

266:                                              ; preds = %266, %264
  %267 = phi i32 [ 0, %264 ], [ %296, %266 ]
  %268 = phi i32 [ %265, %264 ], [ %297, %266 ]
  %269 = add i32 %108, %267
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds i8, i8* %93, i64 %270
  %272 = bitcast i8* %271 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %272, align 1
  %273 = getelementptr inbounds i8, i8* %271, i64 16
  %274 = bitcast i8* %273 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %274, align 1
  %275 = or i32 %267, 32
  %276 = add i32 %108, %275
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds i8, i8* %93, i64 %277
  %279 = bitcast i8* %278 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %279, align 1
  %280 = getelementptr inbounds i8, i8* %278, i64 16
  %281 = bitcast i8* %280 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %281, align 1
  %282 = or i32 %267, 64
  %283 = add i32 %108, %282
  %284 = zext i32 %283 to i64
  %285 = getelementptr inbounds i8, i8* %93, i64 %284
  %286 = bitcast i8* %285 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %286, align 1
  %287 = getelementptr inbounds i8, i8* %285, i64 16
  %288 = bitcast i8* %287 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %288, align 1
  %289 = or i32 %267, 96
  %290 = add i32 %108, %289
  %291 = zext i32 %290 to i64
  %292 = getelementptr inbounds i8, i8* %93, i64 %291
  %293 = bitcast i8* %292 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %293, align 1
  %294 = getelementptr inbounds i8, i8* %292, i64 16
  %295 = bitcast i8* %294 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %295, align 1
  %296 = add i32 %267, 128
  %297 = add i32 %268, -4
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %299, label %266, !llvm.loop !15

299:                                              ; preds = %266, %255
  %300 = phi i32 [ 0, %255 ], [ %296, %266 ]
  %301 = icmp eq i32 %262, 0
  br i1 %301, label %314, label %302

302:                                              ; preds = %299, %302
  %303 = phi i32 [ %311, %302 ], [ %300, %299 ]
  %304 = phi i32 [ %312, %302 ], [ %262, %299 ]
  %305 = add i32 %108, %303
  %306 = zext i32 %305 to i64
  %307 = getelementptr inbounds i8, i8* %93, i64 %306
  %308 = bitcast i8* %307 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %308, align 1
  %309 = getelementptr inbounds i8, i8* %307, i64 16
  %310 = bitcast i8* %309 to <16 x i8>*
  store <16 x i8> zeroinitializer, <16 x i8>* %310, align 1
  %311 = add i32 %303, 32
  %312 = add i32 %304, -1
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %314, label %302, !llvm.loop !16

314:                                              ; preds = %302, %299
  %315 = icmp eq i32 %245, %256
  br i1 %315, label %188, label %316

316:                                              ; preds = %314, %250, %248
  %317 = phi i32 [ %245, %250 ], [ %245, %248 ], [ %257, %314 ]
  %318 = phi i32 [ %108, %250 ], [ %108, %248 ], [ %258, %314 ]
  %319 = add i32 %317, -1
  %320 = and i32 %317, 3
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %332, label %322

322:                                              ; preds = %316, %322
  %323 = phi i32 [ %329, %322 ], [ %317, %316 ]
  %324 = phi i32 [ %326, %322 ], [ %318, %316 ]
  %325 = phi i32 [ %330, %322 ], [ %320, %316 ]
  %326 = add i32 %324, 1
  %327 = zext i32 %324 to i64
  %328 = getelementptr inbounds i8, i8* %93, i64 %327
  store i8 0, i8* %328, align 1
  %329 = add i32 %323, -1
  %330 = add i32 %325, -1
  %331 = icmp eq i32 %330, 0
  br i1 %331, label %332, label %322, !llvm.loop !17

332:                                              ; preds = %322, %316
  %333 = phi i32 [ undef, %316 ], [ %326, %322 ]
  %334 = phi i32 [ %317, %316 ], [ %329, %322 ]
  %335 = phi i32 [ %318, %316 ], [ %326, %322 ]
  %336 = icmp ult i32 %319, 3
  br i1 %336, label %188, label %337

337:                                              ; preds = %332, %337
  %338 = phi i32 [ %352, %337 ], [ %334, %332 ]
  %339 = phi i32 [ %349, %337 ], [ %335, %332 ]
  %340 = add i32 %339, 1
  %341 = zext i32 %339 to i64
  %342 = getelementptr inbounds i8, i8* %93, i64 %341
  store i8 0, i8* %342, align 1
  %343 = add i32 %339, 2
  %344 = zext i32 %340 to i64
  %345 = getelementptr inbounds i8, i8* %93, i64 %344
  store i8 0, i8* %345, align 1
  %346 = add i32 %339, 3
  %347 = zext i32 %343 to i64
  %348 = getelementptr inbounds i8, i8* %93, i64 %347
  store i8 0, i8* %348, align 1
  %349 = add i32 %339, 4
  %350 = zext i32 %346 to i64
  %351 = getelementptr inbounds i8, i8* %93, i64 %350
  store i8 0, i8* %351, align 1
  %352 = add i32 %338, -4
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %188, label %337, !llvm.loop !18

354:                                              ; preds = %176, %209
  %355 = phi i32 [ %201, %209 ], [ 65535, %176 ]
  store i32 %355, i32* %95, align 8
  store i32 %108, i32* %89, align 8
  br label %356

356:                                              ; preds = %240, %354
  %357 = phi i32 [ 2, %354 ], [ -8, %240 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94) #14
  br label %395

358:                                              ; preds = %188, %87
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94) #14
  br label %359

359:                                              ; preds = %358, %4
  %360 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 2, i32 1
  %361 = load i32, i32* %360, align 8
  %362 = icmp eq i32 %361, 64
  br i1 %362, label %366, label %363

363:                                              ; preds = %359
  %364 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %6, i64 0, i32 0
  %365 = load i64, i64* %364, align 8
  br label %382

366:                                              ; preds = %359
  %367 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 2, i32 3
  %368 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %6, i64 0, i32 0
  %369 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %3, i64 0, i32 2, i32 2
  %370 = load i64, i64* %367, align 8
  %371 = icmp eq i64 %370, 0
  br i1 %371, label %392, label %372

372:                                              ; preds = %366
  %373 = load i64, i64* %368, align 8
  %374 = lshr i64 %373, 8
  store i64 %374, i64* %368, align 8
  %375 = load i8*, i8** %369, align 8
  %376 = load i8, i8* %375, align 1
  %377 = zext i8 %376 to i64
  %378 = shl nuw i64 %377, 56
  %379 = or i64 %378, %374
  store i64 %379, i64* %368, align 8
  store i32 56, i32* %360, align 8
  %380 = add i64 %370, -1
  store i64 %380, i64* %367, align 8
  %381 = getelementptr inbounds i8, i8* %375, i64 1
  store i8* %381, i8** %369, align 8
  br label %382

382:                                              ; preds = %372, %363
  %383 = phi i64 [ %365, %363 ], [ %379, %372 ]
  %384 = phi i32 [ %361, %363 ], [ 56, %372 ]
  %385 = zext i32 %384 to i64
  %386 = add i32 %384, 1
  store i32 %386, i32* %360, align 8
  %387 = shl i64 1, %385
  %388 = and i64 %387, %383
  %389 = icmp eq i64 %388, 0
  br i1 %389, label %392, label %390

390:                                              ; preds = %382
  %391 = load i8*, i8** %2, align 8
  tail call fastcc void @InverseMoveToFrontTransform(i8* %391, i32 %0, %struct.BrotliDecoderStateStruct* %3)
  br label %392

392:                                              ; preds = %366, %390, %382
  %393 = phi i32 [ 0, %382 ], [ 0, %390 ], [ 4, %366 ]
  %394 = phi i32 [ 1, %382 ], [ 1, %390 ], [ 2, %366 ]
  store i32 %393, i32* %7, align 4
  br label %395

395:                                              ; preds = %42, %425, %356, %78, %4, %18, %15, %392, %32
  %396 = phi i32 [ %394, %392 ], [ 1, %32 ], [ %16, %15 ], [ -25, %18 ], [ -31, %4 ], [ %83, %78 ], [ %357, %356 ], [ 2, %425 ], [ 2, %42 ]
  ret i32 %396

397:                                              ; preds = %118
  %398 = icmp eq i64 %127, 0
  br i1 %398, label %176, label %399

399:                                              ; preds = %397
  %400 = load i64, i64* %102, align 8
  %401 = lshr i64 %400, 8
  store i64 %401, i64* %102, align 8
  %402 = load i8*, i8** %104, align 8
  %403 = load i8, i8* %402, align 1
  %404 = zext i8 %403 to i64
  %405 = shl nuw i64 %404, 56
  %406 = or i64 %405, %401
  store i64 %406, i64* %102, align 8
  %407 = add i32 %110, -16
  store i32 %407, i32* %101, align 8
  %408 = add i64 %116, -2
  store i64 %408, i64* %103, align 8
  %409 = getelementptr inbounds i8, i8* %402, i64 1
  store i8* %409, i8** %104, align 8
  %410 = sub i32 80, %110
  %411 = icmp ult i32 %410, 15
  br i1 %411, label %412, label %131

412:                                              ; preds = %399
  %413 = icmp eq i64 %408, 0
  br i1 %413, label %176, label %414

414:                                              ; preds = %412
  %415 = load i64, i64* %102, align 8
  %416 = lshr i64 %415, 8
  store i64 %416, i64* %102, align 8
  %417 = load i8*, i8** %104, align 8
  %418 = load i8, i8* %417, align 1
  %419 = zext i8 %418 to i64
  %420 = shl nuw i64 %419, 56
  %421 = or i64 %420, %416
  store i64 %421, i64* %102, align 8
  %422 = add i32 %110, -24
  store i32 %422, i32* %101, align 8
  %423 = add i64 %116, -3
  store i64 %423, i64* %103, align 8
  %424 = getelementptr inbounds i8, i8* %417, i64 1
  store i8* %424, i8** %104, align 8
  br label %131

425:                                              ; preds = %48
  %426 = icmp eq i64 %57, 0
  br i1 %426, label %395, label %427

427:                                              ; preds = %425
  %428 = load i64, i64* %44, align 8
  %429 = lshr i64 %428, 8
  store i64 %429, i64* %44, align 8
  %430 = load i8*, i8** %45, align 8
  %431 = load i8, i8* %430, align 1
  %432 = zext i8 %431 to i64
  %433 = shl nuw i64 %432, 56
  %434 = or i64 %433, %429
  store i64 %434, i64* %44, align 8
  %435 = add i32 %36, -16
  store i32 %435, i32* %35, align 8
  %436 = add i64 %46, -2
  store i64 %436, i64* %43, align 8
  %437 = getelementptr inbounds i8, i8* %430, i64 1
  store i8* %437, i8** %45, align 8
  br label %61
}

declare hidden i32 @BrotliDecoderHuffmanTreeGroupInit(%struct.BrotliDecoderStateStruct*, %struct.HuffmanTreeGroup*, i32, i32, i32) local_unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i32 @BrotliEnsureRingBuffer(%struct.BrotliDecoderStateStruct* nocapture) unnamed_addr #7 {
  %2 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 11
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 52
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %46, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 3
  %11 = load i8* (i8*, i64)*, i8* (i8*, i64)** %10, align 8
  %12 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 5
  %13 = load i8*, i8** %12, align 8
  %14 = sext i32 %7 to i64
  %15 = add nsw i64 %14, 42
  %16 = tail call i8* %11(i8* %13, i64 %15) #14
  store i8* %16, i8** %2, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %9
  store i8* %3, i8** %2, align 8
  br label %46

19:                                               ; preds = %9
  %20 = load i32, i32* %6, align 8
  %21 = add nsw i32 %20, -2
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %16, i64 %22
  store i8 0, i8* %23, align 1
  %24 = load i8*, i8** %2, align 8
  %25 = load i32, i32* %6, align 8
  %26 = add nsw i32 %25, -1
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %24, i64 %27
  store i8 0, i8* %28, align 1
  %29 = icmp eq i8* %3, null
  br i1 %29, label %38, label %30

30:                                               ; preds = %19
  %31 = load i8*, i8** %2, align 8
  %32 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 8
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %31, i8* nonnull align 1 %3, i64 %34, i1 false)
  %35 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 4
  %36 = load void (i8*, i8*)*, void (i8*, i8*)** %35, align 8
  %37 = load i8*, i8** %12, align 8
  tail call void %36(i8* %37, i8* nonnull %3) #14
  br label %38

38:                                               ; preds = %19, %30
  %39 = load i32, i32* %6, align 8
  store i32 %39, i32* %4, align 8
  %40 = add nsw i32 %39, -1
  %41 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 12
  store i32 %40, i32* %41, align 4
  %42 = load i8*, i8** %2, align 8
  %43 = sext i32 %39 to i64
  %44 = getelementptr inbounds i8, i8* %42, i64 %43
  %45 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 17
  store i8* %44, i8** %45, align 8
  br label %46

46:                                               ; preds = %1, %38, %18
  %47 = phi i32 [ 0, %18 ], [ 1, %38 ], [ 1, %1 ]
  ret i32 %47
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i32 @ProcessCommands(%struct.BrotliDecoderStateStruct*) unnamed_addr #7 {
  %2 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 8
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2
  %7 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, 28
  br i1 %9, label %965, label %10

10:                                               ; preds = %1
  %11 = tail call i32 @BrotliWarmupBitReader(%struct.BrotliBitReader* %6) #14
  %12 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 0
  %13 = load i32, i32* %12, align 8
  switch i32 %13, label %969 [
    i32 7, label %16
    i32 8, label %267
    i32 9, label %585
    i32 10, label %14
  ]

14:                                               ; preds = %10
  %15 = sext i32 %3 to i64
  br label %927

16:                                               ; preds = %959, %921, %10
  %17 = phi i32 [ %5, %10 ], [ %806, %921 ], [ %941, %959 ]
  %18 = phi i32 [ %3, %10 ], [ %922, %921 ], [ %960, %959 ]
  %19 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 31, i64 1
  %20 = load i64, i64* %7, align 8
  %21 = icmp ult i64 %20, 28
  br i1 %21, label %25, label %22

22:                                               ; preds = %16
  %23 = load i32, i32* %19, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %29, label %32, !prof !19

25:                                               ; preds = %29, %16
  store i32 7, i32* %12, align 8
  br label %965

26:                                               ; preds = %29
  %27 = load i32, i32* %19, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %32, !prof !19

29:                                               ; preds = %22, %26
  tail call fastcc void @DecodeCommandBlockSwitch(%struct.BrotliDecoderStateStruct* %0) #14
  %30 = load i64, i64* %7, align 8
  %31 = icmp ult i64 %30, 28
  br i1 %31, label %25, label %26

32:                                               ; preds = %26, %22
  %33 = phi i64 [ %20, %22 ], [ %30, %26 ]
  %34 = phi i32 [ %23, %22 ], [ %27, %26 ]
  %35 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 18
  %36 = load %struct.HuffmanCode*, %struct.HuffmanCode** %35, align 8
  %37 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 1
  %38 = load i32, i32* %37, align 8
  %39 = icmp ugt i32 %38, 47
  %40 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %6, i64 0, i32 0
  %41 = load i64, i64* %40, align 8
  br i1 %39, label %42, label %53

42:                                               ; preds = %32
  %43 = lshr i64 %41, 48
  store i64 %43, i64* %40, align 8
  %44 = xor i32 %38, 48
  store i32 %44, i32* %37, align 8
  %45 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %46 = load i8*, i8** %45, align 8
  %47 = bitcast i8* %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = shl i64 %48, 16
  %50 = or i64 %49, %43
  store i64 %50, i64* %40, align 8
  %51 = add i64 %33, -6
  store i64 %51, i64* %7, align 8
  %52 = getelementptr inbounds i8, i8* %46, i64 6
  store i8* %52, i8** %45, align 8
  br label %53

53:                                               ; preds = %42, %32
  %54 = phi i64 [ %51, %42 ], [ %33, %32 ]
  %55 = phi i32 [ %44, %42 ], [ %38, %32 ]
  %56 = phi i64 [ %50, %42 ], [ %41, %32 ]
  %57 = zext i32 %55 to i64
  %58 = lshr i64 %56, %57
  %59 = and i64 %58, 255
  %60 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %36, i64 %59
  %61 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %60, i64 0, i32 0
  %62 = load i8, i8* %61, align 2
  %63 = icmp ugt i8 %62, 8
  br i1 %63, label %64, label %89

64:                                               ; preds = %53
  %65 = trunc i64 %58 to i32
  %66 = zext i8 %62 to i32
  %67 = add nsw i32 %66, -8
  %68 = add i32 %55, 8
  store i32 %68, i32* %37, align 8
  %69 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %36, i64 %59, i32 1
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = lshr i32 %65, 8
  %73 = tail call i1 @llvm.is.constant.i32(i32 %67) #14
  br i1 %73, label %74, label %77

74:                                               ; preds = %64
  %75 = shl i32 -1, %67
  %76 = xor i32 %75, -1
  br label %81

77:                                               ; preds = %64
  %78 = zext i32 %67 to i64
  %79 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %78
  %80 = load i32, i32* %79, align 4
  br label %81

81:                                               ; preds = %77, %74
  %82 = phi i32 [ %76, %74 ], [ %80, %77 ]
  %83 = and i32 %82, %72
  %84 = add nuw nsw i32 %83, %71
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %60, i64 %85
  %87 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %86, i64 0, i32 0
  %88 = load i8, i8* %87, align 2
  br label %89

89:                                               ; preds = %81, %53
  %90 = phi i32 [ %68, %81 ], [ %55, %53 ]
  %91 = phi i8 [ %88, %81 ], [ %62, %53 ]
  %92 = phi %struct.HuffmanCode* [ %86, %81 ], [ %60, %53 ]
  %93 = zext i8 %91 to i32
  %94 = add i32 %90, %93
  store i32 %94, i32* %37, align 8
  %95 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %92, i64 0, i32 1
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i64
  %98 = getelementptr inbounds [704 x %struct.CmdLutElement], [704 x %struct.CmdLutElement]* @kCmdLut, i64 0, i64 %97, i32 0
  %99 = load i8, i8* %98, align 8
  %100 = getelementptr inbounds [704 x %struct.CmdLutElement], [704 x %struct.CmdLutElement]* @kCmdLut, i64 0, i64 %97, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = getelementptr inbounds [704 x %struct.CmdLutElement], [704 x %struct.CmdLutElement]* @kCmdLut, i64 0, i64 %97, i32 2
  %103 = load i8, i8* %102, align 2
  %104 = getelementptr inbounds [704 x %struct.CmdLutElement], [704 x %struct.CmdLutElement]* @kCmdLut, i64 0, i64 %97, i32 3
  %105 = load i8, i8* %104, align 1
  %106 = getelementptr inbounds [704 x %struct.CmdLutElement], [704 x %struct.CmdLutElement]* @kCmdLut, i64 0, i64 %97, i32 4
  %107 = load i16, i16* %106, align 4
  %108 = getelementptr inbounds [704 x %struct.CmdLutElement], [704 x %struct.CmdLutElement]* @kCmdLut, i64 0, i64 %97, i32 5
  %109 = load i16, i16* %108, align 2
  %110 = sext i8 %103 to i32
  %111 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 41
  store i32 %110, i32* %111, align 8
  %112 = zext i8 %105 to i32
  %113 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 28
  store i32 %112, i32* %113, align 4
  %114 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 21
  %115 = load i8*, i8** %114, align 8
  %116 = zext i8 %105 to i64
  %117 = getelementptr inbounds i8, i8* %115, i64 %116
  %118 = load i8, i8* %117, align 1
  %119 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 39
  store i8 %118, i8* %119, align 8
  %120 = zext i16 %107 to i32
  %121 = icmp eq i8 %99, 0
  br i1 %121, label %188, label %122, !prof !20

122:                                              ; preds = %89
  %123 = zext i8 %99 to i32
  %124 = tail call i1 @llvm.is.constant.i32(i32 %123) #14
  %125 = icmp ult i8 %99, 9
  %126 = and i1 %125, %124
  br i1 %126, label %127, label %140

127:                                              ; preds = %122
  %128 = icmp ugt i32 %94, 55
  br i1 %128, label %129, label %170

129:                                              ; preds = %127
  %130 = lshr i64 %56, 56
  store i64 %130, i64* %40, align 8
  %131 = xor i32 %94, 56
  store i32 %131, i32* %37, align 8
  %132 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %133 = load i8*, i8** %132, align 8
  %134 = bitcast i8* %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = shl i64 %135, 8
  %137 = or i64 %136, %130
  store i64 %137, i64* %40, align 8
  %138 = add i64 %54, -7
  store i64 %138, i64* %7, align 8
  %139 = getelementptr inbounds i8, i8* %133, i64 7
  store i8* %139, i8** %132, align 8
  br label %170

140:                                              ; preds = %122
  %141 = icmp ult i8 %99, 17
  %142 = and i1 %141, %124
  br i1 %142, label %143, label %156

143:                                              ; preds = %140
  %144 = icmp ugt i32 %94, 47
  br i1 %144, label %145, label %170

145:                                              ; preds = %143
  %146 = lshr i64 %56, 48
  store i64 %146, i64* %40, align 8
  %147 = xor i32 %94, 48
  store i32 %147, i32* %37, align 8
  %148 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %149 = load i8*, i8** %148, align 8
  %150 = bitcast i8* %149 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = shl i64 %151, 16
  %153 = or i64 %152, %146
  store i64 %153, i64* %40, align 8
  %154 = add i64 %54, -6
  store i64 %154, i64* %7, align 8
  %155 = getelementptr inbounds i8, i8* %149, i64 6
  store i8* %155, i8** %148, align 8
  br label %170

156:                                              ; preds = %140
  %157 = icmp ugt i32 %94, 31
  br i1 %157, label %158, label %170

158:                                              ; preds = %156
  %159 = lshr i64 %56, 32
  store i64 %159, i64* %40, align 8
  %160 = xor i32 %94, 32
  store i32 %160, i32* %37, align 8
  %161 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %162 = load i8*, i8** %161, align 8
  %163 = bitcast i8* %162 to i32*
  %164 = load i32, i32* %163, align 4
  %165 = zext i32 %164 to i64
  %166 = shl nuw i64 %165, 32
  %167 = or i64 %166, %159
  store i64 %167, i64* %40, align 8
  %168 = add i64 %54, -4
  store i64 %168, i64* %7, align 8
  %169 = getelementptr inbounds i8, i8* %162, i64 4
  store i8* %169, i8** %161, align 8
  br label %170

170:                                              ; preds = %158, %156, %145, %143, %129, %127
  %171 = phi i64 [ %54, %127 ], [ %138, %129 ], [ %54, %143 ], [ %154, %145 ], [ %54, %156 ], [ %168, %158 ]
  %172 = phi i64 [ %56, %127 ], [ %137, %129 ], [ %56, %143 ], [ %153, %145 ], [ %56, %156 ], [ %167, %158 ]
  %173 = phi i32 [ %94, %127 ], [ %131, %129 ], [ %94, %143 ], [ %147, %145 ], [ %94, %156 ], [ %160, %158 ]
  %174 = zext i32 %173 to i64
  %175 = lshr i64 %172, %174
  %176 = trunc i64 %175 to i32
  br i1 %124, label %177, label %180

177:                                              ; preds = %170
  %178 = shl i32 -1, %123
  %179 = xor i32 %178, -1
  br label %184

180:                                              ; preds = %170
  %181 = zext i8 %99 to i64
  %182 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %181
  %183 = load i32, i32* %182, align 4
  br label %184

184:                                              ; preds = %180, %177
  %185 = phi i32 [ %179, %177 ], [ %183, %180 ]
  %186 = and i32 %185, %176
  %187 = add i32 %173, %123
  store i32 %187, i32* %37, align 8
  br label %188

188:                                              ; preds = %184, %89
  %189 = phi i64 [ %54, %89 ], [ %171, %184 ]
  %190 = phi i64 [ %56, %89 ], [ %172, %184 ]
  %191 = phi i32 [ %94, %89 ], [ %187, %184 ]
  %192 = phi i32 [ 0, %89 ], [ %186, %184 ]
  %193 = zext i8 %101 to i32
  %194 = tail call i1 @llvm.is.constant.i32(i32 %193) #14
  %195 = icmp ult i8 %101, 9
  %196 = and i1 %195, %194
  br i1 %196, label %197, label %210

197:                                              ; preds = %188
  %198 = icmp ugt i32 %191, 55
  br i1 %198, label %199, label %240

199:                                              ; preds = %197
  %200 = lshr i64 %190, 56
  store i64 %200, i64* %40, align 8
  %201 = xor i32 %191, 56
  store i32 %201, i32* %37, align 8
  %202 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %203 = load i8*, i8** %202, align 8
  %204 = bitcast i8* %203 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = shl i64 %205, 8
  %207 = or i64 %206, %200
  store i64 %207, i64* %40, align 8
  %208 = add i64 %189, -7
  store i64 %208, i64* %7, align 8
  %209 = getelementptr inbounds i8, i8* %203, i64 7
  store i8* %209, i8** %202, align 8
  br label %240

210:                                              ; preds = %188
  %211 = icmp ult i8 %101, 17
  %212 = and i1 %211, %194
  br i1 %212, label %213, label %226

213:                                              ; preds = %210
  %214 = icmp ugt i32 %191, 47
  br i1 %214, label %215, label %240

215:                                              ; preds = %213
  %216 = lshr i64 %190, 48
  store i64 %216, i64* %40, align 8
  %217 = xor i32 %191, 48
  store i32 %217, i32* %37, align 8
  %218 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %219 = load i8*, i8** %218, align 8
  %220 = bitcast i8* %219 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = shl i64 %221, 16
  %223 = or i64 %222, %216
  store i64 %223, i64* %40, align 8
  %224 = add i64 %189, -6
  store i64 %224, i64* %7, align 8
  %225 = getelementptr inbounds i8, i8* %219, i64 6
  store i8* %225, i8** %218, align 8
  br label %240

226:                                              ; preds = %210
  %227 = icmp ugt i32 %191, 31
  br i1 %227, label %228, label %240

228:                                              ; preds = %226
  %229 = lshr i64 %190, 32
  store i64 %229, i64* %40, align 8
  %230 = xor i32 %191, 32
  store i32 %230, i32* %37, align 8
  %231 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %232 = load i8*, i8** %231, align 8
  %233 = bitcast i8* %232 to i32*
  %234 = load i32, i32* %233, align 4
  %235 = zext i32 %234 to i64
  %236 = shl nuw i64 %235, 32
  %237 = or i64 %236, %229
  store i64 %237, i64* %40, align 8
  %238 = add i64 %189, -4
  store i64 %238, i64* %7, align 8
  %239 = getelementptr inbounds i8, i8* %232, i64 4
  store i8* %239, i8** %231, align 8
  br label %240

240:                                              ; preds = %228, %226, %215, %213, %199, %197
  %241 = phi i64 [ %190, %197 ], [ %207, %199 ], [ %190, %213 ], [ %223, %215 ], [ %190, %226 ], [ %237, %228 ]
  %242 = phi i32 [ %191, %197 ], [ %201, %199 ], [ %191, %213 ], [ %217, %215 ], [ %191, %226 ], [ %230, %228 ]
  %243 = zext i32 %242 to i64
  %244 = lshr i64 %241, %243
  %245 = trunc i64 %244 to i32
  br i1 %194, label %246, label %249

246:                                              ; preds = %240
  %247 = shl i32 -1, %193
  %248 = xor i32 %247, -1
  br label %253

249:                                              ; preds = %240
  %250 = zext i8 %101 to i64
  %251 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %250
  %252 = load i32, i32* %251, align 4
  br label %253

253:                                              ; preds = %249, %246
  %254 = phi i32 [ %248, %246 ], [ %252, %249 ]
  %255 = and i32 %254, %245
  %256 = add i32 %242, %193
  store i32 %256, i32* %37, align 8
  %257 = zext i16 %109 to i32
  %258 = add nsw i32 %255, %257
  %259 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 40
  store i32 %258, i32* %259, align 4
  %260 = add i32 %34, -1
  store i32 %260, i32* %19, align 4
  %261 = add nsw i32 %192, %120
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %585, label %263

263:                                              ; preds = %253
  %264 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %265 = load i32, i32* %264, align 8
  %266 = sub nsw i32 %265, %261
  store i32 %266, i32* %264, align 8
  br label %267

267:                                              ; preds = %263, %10
  %268 = phi i32 [ %5, %10 ], [ %261, %263 ]
  %269 = phi i32 [ %3, %10 ], [ %18, %263 ]
  %270 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 27
  %271 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 38
  %272 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 1
  %273 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %6, i64 0, i32 0
  %274 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %275 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 31, i64 0
  %276 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %277 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 11
  %278 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 12
  %279 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 19
  %280 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 22, i32 0
  %281 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 20
  %282 = load i32, i32* %270, align 8
  br label %283

283:                                              ; preds = %576, %267
  %284 = phi i32 [ %282, %267 ], [ %485, %576 ]
  %285 = phi i32 [ %268, %267 ], [ %474, %576 ]
  %286 = phi i32 [ %269, %267 ], [ %577, %576 ]
  %287 = icmp eq i32 %284, 0
  br i1 %287, label %456, label %290

288:                                              ; preds = %348
  %289 = trunc i64 %318 to i32
  br label %456

290:                                              ; preds = %283
  %291 = load %struct.HuffmanCode*, %struct.HuffmanCode** %271, align 8
  %292 = load i32, i32* %272, align 8
  %293 = icmp ugt i32 %292, 55
  %294 = load i64, i64* %273, align 8
  br i1 %293, label %295, label %306

295:                                              ; preds = %290
  %296 = lshr i64 %294, 56
  store i64 %296, i64* %273, align 8
  %297 = xor i32 %292, 56
  store i32 %297, i32* %272, align 8
  %298 = load i8*, i8** %274, align 8
  %299 = bitcast i8* %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = shl i64 %300, 8
  %302 = or i64 %301, %296
  store i64 %302, i64* %273, align 8
  %303 = load i64, i64* %7, align 8
  %304 = add i64 %303, -7
  store i64 %304, i64* %7, align 8
  %305 = getelementptr inbounds i8, i8* %298, i64 7
  store i8* %305, i8** %274, align 8
  br label %306

306:                                              ; preds = %295, %290
  %307 = phi i32 [ %297, %295 ], [ %292, %290 ]
  %308 = phi i64 [ %302, %295 ], [ %294, %290 ]
  %309 = zext i32 %307 to i64
  %310 = lshr i64 %308, %309
  %311 = and i64 %310, 255
  %312 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %291, i64 %311, i32 0
  %313 = load i8, i8* %312, align 2
  %314 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %291, i64 %311, i32 1
  %315 = load i16, i16* %314, align 2
  %316 = sext i32 %286 to i64
  br label %317

317:                                              ; preds = %453, %306
  %318 = phi i64 [ %447, %453 ], [ %316, %306 ]
  %319 = phi i32 [ %454, %453 ], [ %285, %306 ]
  %320 = phi i8 [ %439, %453 ], [ %313, %306 ]
  %321 = phi i16 [ %441, %453 ], [ %315, %306 ]
  %322 = load i64, i64* %7, align 8
  %323 = icmp ult i64 %322, 28
  br i1 %323, label %324, label %326

324:                                              ; preds = %317
  %325 = trunc i64 %318 to i32
  store i32 8, i32* %12, align 8
  br label %965

326:                                              ; preds = %317
  %327 = load i32, i32* %275, align 8
  %328 = icmp eq i32 %327, 0
  br i1 %328, label %332, label %329, !prof !19

329:                                              ; preds = %326
  %330 = load %struct.HuffmanCode*, %struct.HuffmanCode** %271, align 8
  %331 = load i32, i32* %272, align 8
  br label %360

332:                                              ; preds = %326
  tail call fastcc void @DecodeLiteralBlockSwitch(%struct.BrotliDecoderStateStruct* %0) #14
  %333 = load %struct.HuffmanCode*, %struct.HuffmanCode** %271, align 8
  %334 = load i32, i32* %272, align 8
  %335 = icmp ugt i32 %334, 55
  %336 = load i64, i64* %273, align 8
  br i1 %335, label %337, label %348

337:                                              ; preds = %332
  %338 = lshr i64 %336, 56
  store i64 %338, i64* %273, align 8
  %339 = xor i32 %334, 56
  store i32 %339, i32* %272, align 8
  %340 = load i8*, i8** %274, align 8
  %341 = bitcast i8* %340 to i64*
  %342 = load i64, i64* %341, align 8
  %343 = shl i64 %342, 8
  %344 = or i64 %343, %338
  store i64 %344, i64* %273, align 8
  %345 = load i64, i64* %7, align 8
  %346 = add i64 %345, -7
  store i64 %346, i64* %7, align 8
  %347 = getelementptr inbounds i8, i8* %340, i64 7
  store i8* %347, i8** %274, align 8
  br label %348

348:                                              ; preds = %337, %332
  %349 = phi i32 [ %339, %337 ], [ %334, %332 ]
  %350 = phi i64 [ %344, %337 ], [ %336, %332 ]
  %351 = zext i32 %349 to i64
  %352 = lshr i64 %350, %351
  %353 = and i64 %352, 255
  %354 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %333, i64 %353, i32 0
  %355 = load i8, i8* %354, align 2
  %356 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %333, i64 %353, i32 1
  %357 = load i16, i16* %356, align 2
  %358 = load i32, i32* %270, align 8
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %288, label %360

360:                                              ; preds = %329, %348
  %361 = phi i32 [ %349, %348 ], [ %331, %329 ]
  %362 = phi %struct.HuffmanCode* [ %333, %348 ], [ %330, %329 ]
  %363 = phi i8 [ %355, %348 ], [ %320, %329 ]
  %364 = phi i16 [ %357, %348 ], [ %321, %329 ]
  %365 = zext i8 %363 to i32
  %366 = icmp ugt i8 %363, 8
  br i1 %366, label %367, label %413, !prof !19

367:                                              ; preds = %360
  %368 = icmp ugt i32 %361, 47
  %369 = load i64, i64* %273, align 8
  br i1 %368, label %370, label %381

370:                                              ; preds = %367
  %371 = lshr i64 %369, 48
  store i64 %371, i64* %273, align 8
  %372 = xor i32 %361, 48
  store i32 %372, i32* %272, align 8
  %373 = load i8*, i8** %274, align 8
  %374 = bitcast i8* %373 to i64*
  %375 = load i64, i64* %374, align 8
  %376 = shl i64 %375, 16
  %377 = or i64 %376, %371
  store i64 %377, i64* %273, align 8
  %378 = load i64, i64* %7, align 8
  %379 = add i64 %378, -6
  store i64 %379, i64* %7, align 8
  %380 = getelementptr inbounds i8, i8* %373, i64 6
  store i8* %380, i8** %274, align 8
  br label %381

381:                                              ; preds = %370, %367
  %382 = phi i32 [ %372, %370 ], [ %361, %367 ]
  %383 = phi i64 [ %377, %370 ], [ %369, %367 ]
  %384 = zext i32 %382 to i64
  %385 = lshr i64 %383, %384
  %386 = trunc i64 %385 to i32
  %387 = and i64 %385, 255
  %388 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %362, i64 %387
  %389 = zext i16 %364 to i64
  %390 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %388, i64 %389
  %391 = add nsw i32 %365, -8
  %392 = tail call i1 @llvm.is.constant.i32(i32 %391) #14
  br i1 %392, label %393, label %396

393:                                              ; preds = %381
  %394 = shl i32 -1, %391
  %395 = xor i32 %394, -1
  br label %400

396:                                              ; preds = %381
  %397 = zext i32 %391 to i64
  %398 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %397
  %399 = load i32, i32* %398, align 4
  br label %400

400:                                              ; preds = %396, %393
  %401 = phi i32 [ %395, %393 ], [ %399, %396 ]
  %402 = add i32 %382, 8
  store i32 %402, i32* %272, align 8
  %403 = lshr i32 %386, 8
  %404 = and i32 %401, %403
  %405 = zext i32 %404 to i64
  %406 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %390, i64 %405
  %407 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %406, i64 0, i32 0
  %408 = load i8, i8* %407, align 2
  %409 = zext i8 %408 to i32
  %410 = add i32 %402, %409
  store i32 %410, i32* %272, align 8
  %411 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %406, i64 0, i32 1
  %412 = load i16, i16* %411, align 2
  br label %416

413:                                              ; preds = %360
  %414 = add i32 %361, %365
  store i32 %414, i32* %272, align 8
  %415 = load i64, i64* %273, align 8
  br label %416

416:                                              ; preds = %413, %400
  %417 = phi i64 [ %383, %400 ], [ %415, %413 ]
  %418 = phi i32 [ %410, %400 ], [ %414, %413 ]
  %419 = phi i16 [ %412, %400 ], [ %364, %413 ]
  %420 = icmp ugt i32 %418, 55
  br i1 %420, label %421, label %432

421:                                              ; preds = %416
  %422 = lshr i64 %417, 56
  store i64 %422, i64* %273, align 8
  %423 = xor i32 %418, 56
  store i32 %423, i32* %272, align 8
  %424 = load i8*, i8** %274, align 8
  %425 = bitcast i8* %424 to i64*
  %426 = load i64, i64* %425, align 8
  %427 = shl i64 %426, 8
  %428 = or i64 %427, %422
  store i64 %428, i64* %273, align 8
  %429 = load i64, i64* %7, align 8
  %430 = add i64 %429, -7
  store i64 %430, i64* %7, align 8
  %431 = getelementptr inbounds i8, i8* %424, i64 7
  store i8* %431, i8** %274, align 8
  br label %432

432:                                              ; preds = %421, %416
  %433 = phi i32 [ %423, %421 ], [ %418, %416 ]
  %434 = phi i64 [ %428, %421 ], [ %417, %416 ]
  %435 = zext i32 %433 to i64
  %436 = lshr i64 %434, %435
  %437 = and i64 %436, 255
  %438 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %362, i64 %437, i32 0
  %439 = load i8, i8* %438, align 2
  %440 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %362, i64 %437, i32 1
  %441 = load i16, i16* %440, align 2
  %442 = trunc i16 %419 to i8
  %443 = load i8*, i8** %276, align 8
  %444 = getelementptr inbounds i8, i8* %443, i64 %318
  store i8 %442, i8* %444, align 1
  %445 = load i32, i32* %275, align 8
  %446 = add i32 %445, -1
  store i32 %446, i32* %275, align 8
  %447 = add nsw i64 %318, 1
  %448 = load i32, i32* %277, align 8
  %449 = trunc i64 %447 to i32
  %450 = icmp eq i32 %448, %449
  br i1 %450, label %451, label %453, !prof !19

451:                                              ; preds = %432
  store i32 13, i32* %12, align 8
  %452 = add nsw i32 %319, -1
  br label %965

453:                                              ; preds = %432
  %454 = add nsw i32 %319, -1
  %455 = icmp eq i32 %454, 0
  br i1 %455, label %578, label %317

456:                                              ; preds = %288, %283
  %457 = phi i32 [ %319, %288 ], [ %285, %283 ]
  %458 = phi i32 [ %289, %288 ], [ %286, %283 ]
  %459 = load i8*, i8** %276, align 8
  %460 = add nsw i32 %458, -1
  %461 = load i32, i32* %278, align 4
  %462 = and i32 %461, %460
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds i8, i8* %459, i64 %463
  %465 = load i8, i8* %464, align 1
  %466 = add nsw i32 %458, -2
  %467 = and i32 %461, %466
  %468 = sext i32 %467 to i64
  %469 = getelementptr inbounds i8, i8* %459, i64 %468
  %470 = load i8, i8* %469, align 1
  %471 = sext i32 %458 to i64
  br label %472

472:                                              ; preds = %573, %456
  %473 = phi i64 [ %567, %573 ], [ %471, %456 ]
  %474 = phi i32 [ %574, %573 ], [ %457, %456 ]
  %475 = phi i8 [ %562, %573 ], [ %465, %456 ]
  %476 = phi i8 [ %475, %573 ], [ %470, %456 ]
  %477 = load i64, i64* %7, align 8
  %478 = icmp ult i64 %477, 28
  br i1 %478, label %479, label %481

479:                                              ; preds = %472
  %480 = trunc i64 %473 to i32
  store i32 8, i32* %12, align 8
  br label %965

481:                                              ; preds = %472
  %482 = load i32, i32* %275, align 8
  %483 = icmp eq i32 %482, 0
  br i1 %483, label %484, label %487, !prof !19

484:                                              ; preds = %481
  tail call fastcc void @DecodeLiteralBlockSwitch(%struct.BrotliDecoderStateStruct* %0) #14
  %485 = load i32, i32* %270, align 8
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %487, label %576

487:                                              ; preds = %484, %481
  %488 = load i8*, i8** %279, align 8
  %489 = zext i8 %475 to i64
  %490 = getelementptr inbounds i8, i8* %488, i64 %489
  %491 = load i8, i8* %490, align 1
  %492 = getelementptr inbounds i8, i8* %488, i64 256
  %493 = zext i8 %476 to i64
  %494 = getelementptr inbounds i8, i8* %492, i64 %493
  %495 = load i8, i8* %494, align 1
  %496 = or i8 %495, %491
  %497 = load %struct.HuffmanCode**, %struct.HuffmanCode*** %280, align 8
  %498 = load i8*, i8** %281, align 8
  %499 = zext i8 %496 to i64
  %500 = getelementptr inbounds i8, i8* %498, i64 %499
  %501 = load i8, i8* %500, align 1
  %502 = zext i8 %501 to i64
  %503 = getelementptr inbounds %struct.HuffmanCode*, %struct.HuffmanCode** %497, i64 %502
  %504 = load %struct.HuffmanCode*, %struct.HuffmanCode** %503, align 8
  %505 = load i32, i32* %272, align 8
  %506 = icmp ugt i32 %505, 47
  %507 = load i64, i64* %273, align 8
  br i1 %506, label %508, label %519

508:                                              ; preds = %487
  %509 = lshr i64 %507, 48
  store i64 %509, i64* %273, align 8
  %510 = xor i32 %505, 48
  store i32 %510, i32* %272, align 8
  %511 = load i8*, i8** %274, align 8
  %512 = bitcast i8* %511 to i64*
  %513 = load i64, i64* %512, align 8
  %514 = shl i64 %513, 16
  %515 = or i64 %514, %509
  store i64 %515, i64* %273, align 8
  %516 = load i64, i64* %7, align 8
  %517 = add i64 %516, -6
  store i64 %517, i64* %7, align 8
  %518 = getelementptr inbounds i8, i8* %511, i64 6
  store i8* %518, i8** %274, align 8
  br label %519

519:                                              ; preds = %508, %487
  %520 = phi i32 [ %510, %508 ], [ %505, %487 ]
  %521 = phi i64 [ %515, %508 ], [ %507, %487 ]
  %522 = zext i32 %520 to i64
  %523 = lshr i64 %521, %522
  %524 = and i64 %523, 255
  %525 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %504, i64 %524
  %526 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %525, i64 0, i32 0
  %527 = load i8, i8* %526, align 2
  %528 = icmp ugt i8 %527, 8
  br i1 %528, label %529, label %554

529:                                              ; preds = %519
  %530 = trunc i64 %523 to i32
  %531 = zext i8 %527 to i32
  %532 = add nsw i32 %531, -8
  %533 = add i32 %520, 8
  store i32 %533, i32* %272, align 8
  %534 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %504, i64 %524, i32 1
  %535 = load i16, i16* %534, align 2
  %536 = zext i16 %535 to i32
  %537 = lshr i32 %530, 8
  %538 = tail call i1 @llvm.is.constant.i32(i32 %532) #14
  br i1 %538, label %539, label %542

539:                                              ; preds = %529
  %540 = shl i32 -1, %532
  %541 = xor i32 %540, -1
  br label %546

542:                                              ; preds = %529
  %543 = zext i32 %532 to i64
  %544 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %543
  %545 = load i32, i32* %544, align 4
  br label %546

546:                                              ; preds = %542, %539
  %547 = phi i32 [ %541, %539 ], [ %545, %542 ]
  %548 = and i32 %547, %537
  %549 = add nuw nsw i32 %548, %536
  %550 = zext i32 %549 to i64
  %551 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %525, i64 %550
  %552 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %551, i64 0, i32 0
  %553 = load i8, i8* %552, align 2
  br label %554

554:                                              ; preds = %546, %519
  %555 = phi i32 [ %533, %546 ], [ %520, %519 ]
  %556 = phi i8 [ %553, %546 ], [ %527, %519 ]
  %557 = phi %struct.HuffmanCode* [ %551, %546 ], [ %525, %519 ]
  %558 = zext i8 %556 to i32
  %559 = add i32 %555, %558
  store i32 %559, i32* %272, align 8
  %560 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %557, i64 0, i32 1
  %561 = load i16, i16* %560, align 2
  %562 = trunc i16 %561 to i8
  %563 = load i8*, i8** %276, align 8
  %564 = getelementptr inbounds i8, i8* %563, i64 %473
  store i8 %562, i8* %564, align 1
  %565 = load i32, i32* %275, align 8
  %566 = add i32 %565, -1
  store i32 %566, i32* %275, align 8
  %567 = add nsw i64 %473, 1
  %568 = load i32, i32* %277, align 8
  %569 = trunc i64 %567 to i32
  %570 = icmp eq i32 %568, %569
  br i1 %570, label %571, label %573, !prof !19

571:                                              ; preds = %554
  store i32 13, i32* %12, align 8
  %572 = add nsw i32 %474, -1
  br label %965

573:                                              ; preds = %554
  %574 = add nsw i32 %474, -1
  %575 = icmp eq i32 %574, 0
  br i1 %575, label %578, label %472

576:                                              ; preds = %484
  %577 = trunc i64 %473 to i32
  br label %283

578:                                              ; preds = %453, %573
  %579 = phi i64 [ %567, %573 ], [ %447, %453 ]
  %580 = trunc i64 %579 to i32
  %581 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %582 = load i32, i32* %581, align 8
  %583 = icmp slt i32 %582, 1
  br i1 %583, label %584, label %585, !prof !19

584:                                              ; preds = %578
  store i32 14, i32* %12, align 8
  br label %965

585:                                              ; preds = %10, %253, %578
  %586 = phi i32 [ %18, %253 ], [ %580, %578 ], [ %3, %10 ]
  %587 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 41
  %588 = load i32, i32* %587, align 8
  %589 = icmp sgt i32 %588, -1
  br i1 %589, label %590, label %601

590:                                              ; preds = %585
  %591 = icmp eq i32 %588, 0
  %592 = zext i1 %591 to i32
  %593 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 28
  store i32 %592, i32* %593, align 4
  %594 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 13
  %595 = load i32, i32* %594, align 8
  %596 = add nsw i32 %595, -1
  store i32 %596, i32* %594, align 8
  %597 = and i32 %596, 3
  %598 = zext i32 %597 to i64
  %599 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 14, i64 %598
  %600 = load i32, i32* %599, align 4
  store i32 %600, i32* %587, align 8
  br label %792

601:                                              ; preds = %585
  %602 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 31, i64 2
  %603 = load i32, i32* %602, align 8
  %604 = icmp eq i32 %603, 0
  br i1 %604, label %605, label %606, !prof !19

605:                                              ; preds = %601
  tail call fastcc void @DecodeDistanceBlockSwitch(%struct.BrotliDecoderStateStruct* %0) #14
  br label %606

606:                                              ; preds = %601, %605
  %607 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59
  %608 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 24, i32 0
  %609 = load %struct.HuffmanCode**, %struct.HuffmanCode*** %608, align 8
  %610 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 39
  %611 = load i8, i8* %610, align 8
  %612 = zext i8 %611 to i64
  %613 = getelementptr inbounds %struct.HuffmanCode*, %struct.HuffmanCode** %609, i64 %612
  %614 = load %struct.HuffmanCode*, %struct.HuffmanCode** %613, align 8
  %615 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 1
  %616 = load i32, i32* %615, align 8
  %617 = icmp ugt i32 %616, 47
  %618 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %6, i64 0, i32 0
  %619 = load i64, i64* %618, align 8
  br i1 %617, label %620, label %632

620:                                              ; preds = %606
  %621 = lshr i64 %619, 48
  store i64 %621, i64* %618, align 8
  %622 = xor i32 %616, 48
  store i32 %622, i32* %615, align 8
  %623 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %624 = load i8*, i8** %623, align 8
  %625 = bitcast i8* %624 to i64*
  %626 = load i64, i64* %625, align 8
  %627 = shl i64 %626, 16
  %628 = or i64 %627, %621
  store i64 %628, i64* %618, align 8
  %629 = load i64, i64* %7, align 8
  %630 = add i64 %629, -6
  store i64 %630, i64* %7, align 8
  %631 = getelementptr inbounds i8, i8* %624, i64 6
  store i8* %631, i8** %623, align 8
  br label %632

632:                                              ; preds = %620, %606
  %633 = phi i32 [ %622, %620 ], [ %616, %606 ]
  %634 = phi i64 [ %628, %620 ], [ %619, %606 ]
  %635 = zext i32 %633 to i64
  %636 = lshr i64 %634, %635
  %637 = and i64 %636, 255
  %638 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %614, i64 %637
  %639 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %638, i64 0, i32 0
  %640 = load i8, i8* %639, align 2
  %641 = icmp ugt i8 %640, 8
  br i1 %641, label %642, label %667

642:                                              ; preds = %632
  %643 = trunc i64 %636 to i32
  %644 = zext i8 %640 to i32
  %645 = add nsw i32 %644, -8
  %646 = add i32 %633, 8
  store i32 %646, i32* %615, align 8
  %647 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %614, i64 %637, i32 1
  %648 = load i16, i16* %647, align 2
  %649 = zext i16 %648 to i32
  %650 = lshr i32 %643, 8
  %651 = tail call i1 @llvm.is.constant.i32(i32 %645) #14
  br i1 %651, label %652, label %655

652:                                              ; preds = %642
  %653 = shl i32 -1, %645
  %654 = xor i32 %653, -1
  br label %659

655:                                              ; preds = %642
  %656 = zext i32 %645 to i64
  %657 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %656
  %658 = load i32, i32* %657, align 4
  br label %659

659:                                              ; preds = %655, %652
  %660 = phi i32 [ %654, %652 ], [ %658, %655 ]
  %661 = and i32 %660, %650
  %662 = add nuw nsw i32 %661, %649
  %663 = zext i32 %662 to i64
  %664 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %638, i64 %663
  %665 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %664, i64 0, i32 0
  %666 = load i8, i8* %665, align 2
  br label %667

667:                                              ; preds = %659, %632
  %668 = phi i32 [ %646, %659 ], [ %633, %632 ]
  %669 = phi i8 [ %666, %659 ], [ %640, %632 ]
  %670 = phi %struct.HuffmanCode* [ %664, %659 ], [ %638, %632 ]
  %671 = zext i8 %669 to i32
  %672 = add i32 %668, %671
  store i32 %672, i32* %615, align 8
  %673 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %670, i64 0, i32 1
  %674 = load i16, i16* %673, align 2
  %675 = zext i16 %674 to i32
  %676 = load i32, i32* %602, align 8
  %677 = add i32 %676, -1
  store i32 %677, i32* %602, align 8
  %678 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 28
  store i32 0, i32* %678, align 4
  %679 = icmp ult i16 %674, 16
  br i1 %679, label %680, label %712

680:                                              ; preds = %667
  store i32 %675, i32* %587, align 8
  %681 = icmp ult i16 %674, 4
  br i1 %681, label %682, label %693

682:                                              ; preds = %680
  %683 = lshr i32 1, %675
  store i32 %683, i32* %678, align 4
  %684 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 13
  %685 = load i32, i32* %684, align 8
  %686 = xor i32 %675, 3
  %687 = add i32 %685, %686
  %688 = and i32 %687, 3
  %689 = zext i32 %688 to i64
  %690 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 14, i64 %689
  %691 = load i32, i32* %690, align 4
  store i32 %691, i32* %587, align 8
  %692 = sub nsw i32 %685, %683
  store i32 %692, i32* %684, align 8
  br label %792

693:                                              ; preds = %680
  %694 = icmp ult i16 %674, 10
  %695 = select i1 %694, i32 3, i32 2
  %696 = select i1 %694, i32 -4, i32 -10
  %697 = add nsw i32 %696, %675
  %698 = shl nsw i32 %697, 2
  %699 = lshr i32 6312258, %698
  %700 = and i32 %699, 15
  %701 = add nsw i32 %700, -3
  %702 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 13
  %703 = load i32, i32* %702, align 8
  %704 = add nsw i32 %703, %695
  %705 = and i32 %704, 3
  %706 = zext i32 %705 to i64
  %707 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 14, i64 %706
  %708 = load i32, i32* %707, align 4
  %709 = add nsw i32 %701, %708
  %710 = icmp slt i32 %709, 1
  %711 = select i1 %710, i32 2147483647, i32 %709
  store i32 %711, i32* %587, align 8
  br label %792

712:                                              ; preds = %667
  %713 = bitcast %union.anon.0* %607 to [544 x i8]*
  %714 = zext i16 %674 to i64
  %715 = getelementptr inbounds [544 x i8], [544 x i8]* %713, i64 0, i64 %714
  %716 = load i8, i8* %715, align 1
  %717 = zext i8 %716 to i32
  %718 = tail call i1 @llvm.is.constant.i32(i32 %717) #14
  %719 = icmp ult i8 %716, 9
  %720 = and i1 %719, %718
  br i1 %720, label %721, label %735

721:                                              ; preds = %712
  %722 = icmp ugt i32 %672, 55
  br i1 %722, label %723, label %767

723:                                              ; preds = %721
  %724 = lshr i64 %634, 56
  store i64 %724, i64* %618, align 8
  %725 = xor i32 %672, 56
  store i32 %725, i32* %615, align 8
  %726 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %727 = load i8*, i8** %726, align 8
  %728 = bitcast i8* %727 to i64*
  %729 = load i64, i64* %728, align 8
  %730 = shl i64 %729, 8
  %731 = or i64 %730, %724
  store i64 %731, i64* %618, align 8
  %732 = load i64, i64* %7, align 8
  %733 = add i64 %732, -7
  store i64 %733, i64* %7, align 8
  %734 = getelementptr inbounds i8, i8* %727, i64 7
  store i8* %734, i8** %726, align 8
  br label %767

735:                                              ; preds = %712
  %736 = icmp ult i8 %716, 17
  %737 = and i1 %736, %718
  br i1 %737, label %738, label %752

738:                                              ; preds = %735
  %739 = icmp ugt i32 %672, 47
  br i1 %739, label %740, label %767

740:                                              ; preds = %738
  %741 = lshr i64 %634, 48
  store i64 %741, i64* %618, align 8
  %742 = xor i32 %672, 48
  store i32 %742, i32* %615, align 8
  %743 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %744 = load i8*, i8** %743, align 8
  %745 = bitcast i8* %744 to i64*
  %746 = load i64, i64* %745, align 8
  %747 = shl i64 %746, 16
  %748 = or i64 %747, %741
  store i64 %748, i64* %618, align 8
  %749 = load i64, i64* %7, align 8
  %750 = add i64 %749, -6
  store i64 %750, i64* %7, align 8
  %751 = getelementptr inbounds i8, i8* %744, i64 6
  store i8* %751, i8** %743, align 8
  br label %767

752:                                              ; preds = %735
  %753 = icmp ugt i32 %672, 31
  br i1 %753, label %754, label %767

754:                                              ; preds = %752
  %755 = lshr i64 %634, 32
  store i64 %755, i64* %618, align 8
  %756 = xor i32 %672, 32
  store i32 %756, i32* %615, align 8
  %757 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %758 = load i8*, i8** %757, align 8
  %759 = bitcast i8* %758 to i32*
  %760 = load i32, i32* %759, align 4
  %761 = zext i32 %760 to i64
  %762 = shl nuw i64 %761, 32
  %763 = or i64 %762, %755
  store i64 %763, i64* %618, align 8
  %764 = load i64, i64* %7, align 8
  %765 = add i64 %764, -4
  store i64 %765, i64* %7, align 8
  %766 = getelementptr inbounds i8, i8* %758, i64 4
  store i8* %766, i8** %757, align 8
  br label %767

767:                                              ; preds = %754, %752, %740, %738, %723, %721
  %768 = phi i64 [ %634, %721 ], [ %731, %723 ], [ %634, %738 ], [ %748, %740 ], [ %634, %752 ], [ %763, %754 ]
  %769 = phi i32 [ %672, %721 ], [ %725, %723 ], [ %672, %738 ], [ %742, %740 ], [ %672, %752 ], [ %756, %754 ]
  %770 = zext i32 %769 to i64
  %771 = lshr i64 %768, %770
  %772 = trunc i64 %771 to i32
  br i1 %718, label %773, label %776

773:                                              ; preds = %767
  %774 = shl i32 -1, %717
  %775 = xor i32 %774, -1
  br label %780

776:                                              ; preds = %767
  %777 = zext i8 %716 to i64
  %778 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %777
  %779 = load i32, i32* %778, align 4
  br label %780

780:                                              ; preds = %776, %773
  %781 = phi i32 [ %775, %773 ], [ %779, %776 ]
  %782 = and i32 %781, %772
  %783 = add i32 %769, %717
  store i32 %783, i32* %615, align 8
  %784 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59, i32 0, i32 11, i64 184
  %785 = bitcast i16* %784 to [544 x i32]*
  %786 = getelementptr inbounds [544 x i32], [544 x i32]* %785, i64 0, i64 %714
  %787 = load i32, i32* %786, align 4
  %788 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 34
  %789 = load i32, i32* %788, align 8
  %790 = shl i32 %782, %789
  %791 = add i32 %790, %787
  store i32 %791, i32* %587, align 8
  br label %792

792:                                              ; preds = %780, %693, %682, %590
  %793 = phi i32 [ 0, %780 ], [ 0, %693 ], [ %683, %682 ], [ %592, %590 ]
  %794 = phi i32 [ %791, %780 ], [ %711, %693 ], [ %691, %682 ], [ %600, %590 ]
  %795 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 10
  %796 = load i32, i32* %795, align 4
  %797 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 9
  %798 = load i32, i32* %797, align 8
  %799 = icmp eq i32 %796, %798
  br i1 %799, label %803, label %800

800:                                              ; preds = %792
  %801 = icmp slt i32 %586, %798
  %802 = select i1 %801, i32 %586, i32 %798
  store i32 %802, i32* %795, align 4
  br label %803

803:                                              ; preds = %800, %792
  %804 = phi i32 [ %796, %792 ], [ %802, %800 ]
  %805 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 40
  %806 = load i32, i32* %805, align 4
  %807 = icmp sgt i32 %794, %804
  br i1 %807, label %808, label %874

808:                                              ; preds = %803
  %809 = icmp sgt i32 %794, 2147483644
  br i1 %809, label %969, label %810

810:                                              ; preds = %808
  %811 = add i32 %806, -4
  %812 = icmp ult i32 %811, 21
  br i1 %812, label %813, label %969

813:                                              ; preds = %810
  %814 = xor i32 %804, -1
  %815 = add i32 %794, %814
  %816 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 56
  %817 = load %struct.BrotliDictionary*, %struct.BrotliDictionary** %816, align 8
  %818 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 57
  %819 = load %struct.BrotliTransforms*, %struct.BrotliTransforms** %818, align 8
  %820 = sext i32 %806 to i64
  %821 = getelementptr inbounds %struct.BrotliDictionary, %struct.BrotliDictionary* %817, i64 0, i32 1, i64 %820
  %822 = load i32, i32* %821, align 4
  %823 = getelementptr inbounds %struct.BrotliDictionary, %struct.BrotliDictionary* %817, i64 0, i32 0, i64 %820
  %824 = load i8, i8* %823, align 1
  %825 = zext i8 %824 to i32
  %826 = tail call i1 @llvm.is.constant.i32(i32 %825) #14
  br i1 %826, label %827, label %830

827:                                              ; preds = %813
  %828 = shl i32 -1, %825
  %829 = xor i32 %828, -1
  br label %834

830:                                              ; preds = %813
  %831 = zext i8 %824 to i64
  %832 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %831
  %833 = load i32, i32* %832, align 4
  br label %834

834:                                              ; preds = %830, %827
  %835 = phi i32 [ %829, %827 ], [ %833, %830 ]
  %836 = and i32 %835, %815
  %837 = ashr i32 %815, %825
  %838 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 13
  %839 = load i32, i32* %838, align 8
  %840 = add nsw i32 %839, %793
  store i32 %840, i32* %838, align 8
  %841 = mul nsw i32 %836, %806
  %842 = add nsw i32 %841, %822
  %843 = getelementptr inbounds %struct.BrotliDictionary, %struct.BrotliDictionary* %817, i64 0, i32 3
  %844 = load i8*, i8** %843, align 8
  %845 = icmp eq i8* %844, null
  br i1 %845, label %969, label %846, !prof !19

846:                                              ; preds = %834
  %847 = getelementptr inbounds %struct.BrotliTransforms, %struct.BrotliTransforms* %819, i64 0, i32 3
  %848 = load i32, i32* %847, align 8
  %849 = icmp slt i32 %837, %848
  br i1 %849, label %850, label %969

850:                                              ; preds = %846
  %851 = sext i32 %842 to i64
  %852 = getelementptr inbounds i8, i8* %844, i64 %851
  %853 = getelementptr inbounds %struct.BrotliTransforms, %struct.BrotliTransforms* %819, i64 0, i32 6, i64 0
  %854 = load i16, i16* %853, align 8
  %855 = sext i16 %854 to i32
  %856 = icmp eq i32 %837, %855
  %857 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %858 = load i8*, i8** %857, align 8
  %859 = sext i32 %586 to i64
  %860 = getelementptr inbounds i8, i8* %858, i64 %859
  br i1 %856, label %861, label %862

861:                                              ; preds = %850
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %860, i8* align 1 %852, i64 %820, i1 false) #14
  br label %864

862:                                              ; preds = %850
  %863 = tail call i32 @BrotliTransformDictionaryWord(i8* %860, i8* %852, i32 %806, %struct.BrotliTransforms* %819, i32 %837) #14
  br label %864

864:                                              ; preds = %862, %861
  %865 = phi i32 [ %806, %861 ], [ %863, %862 ]
  %866 = add nsw i32 %865, %586
  %867 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %868 = load i32, i32* %867, align 8
  %869 = sub nsw i32 %868, %865
  store i32 %869, i32* %867, align 8
  %870 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 11
  %871 = load i32, i32* %870, align 8
  %872 = icmp slt i32 %866, %871
  br i1 %872, label %921, label %873

873:                                              ; preds = %864
  store i32 15, i32* %12, align 8
  br label %965

874:                                              ; preds = %803
  %875 = sub nsw i32 %586, %794
  %876 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 12
  %877 = load i32, i32* %876, align 4
  %878 = and i32 %877, %875
  %879 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %880 = load i8*, i8** %879, align 8
  %881 = sext i32 %586 to i64
  %882 = getelementptr inbounds i8, i8* %880, i64 %881
  %883 = sext i32 %878 to i64
  %884 = getelementptr inbounds i8, i8* %880, i64 %883
  %885 = add nsw i32 %806, %586
  %886 = add nsw i32 %878, %806
  %887 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 13
  %888 = load i32, i32* %887, align 8
  %889 = and i32 %888, 3
  %890 = zext i32 %889 to i64
  %891 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 14, i64 %890
  store i32 %794, i32* %891, align 4
  %892 = add nsw i32 %888, 1
  store i32 %892, i32* %887, align 8
  %893 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %894 = load i32, i32* %893, align 8
  %895 = sub nsw i32 %894, %806
  store i32 %895, i32* %893, align 8
  %896 = bitcast i8* %884 to <4 x i32>*
  %897 = load <4 x i32>, <4 x i32>* %896, align 1
  %898 = bitcast i8* %882 to <4 x i32>*
  store <4 x i32> %897, <4 x i32>* %898, align 1
  %899 = icmp sgt i32 %886, %586
  %900 = icmp sgt i32 %885, %878
  %901 = and i1 %900, %899
  br i1 %901, label %927, label %902

902:                                              ; preds = %874
  %903 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 11
  %904 = load i32, i32* %903, align 8
  %905 = icmp slt i32 %885, %904
  %906 = icmp slt i32 %886, %904
  %907 = and i1 %905, %906
  br i1 %907, label %908, label %927

908:                                              ; preds = %902
  %909 = icmp sgt i32 %806, 16
  br i1 %909, label %910, label %921

910:                                              ; preds = %908
  %911 = icmp sgt i32 %806, 32
  %912 = getelementptr inbounds i8, i8* %882, i64 16
  %913 = getelementptr inbounds i8, i8* %884, i64 16
  br i1 %911, label %914, label %917

914:                                              ; preds = %910
  %915 = add nsw i32 %806, -16
  %916 = sext i32 %915 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %912, i8* align 1 %913, i64 %916, i1 false) #14
  br label %921

917:                                              ; preds = %910
  %918 = bitcast i8* %913 to <4 x i32>*
  %919 = load <4 x i32>, <4 x i32>* %918, align 1
  %920 = bitcast i8* %912 to <4 x i32>*
  store <4 x i32> %919, <4 x i32>* %920, align 1
  br label %921

921:                                              ; preds = %917, %914, %908, %864
  %922 = phi i32 [ %866, %864 ], [ %885, %914 ], [ %885, %917 ], [ %885, %908 ]
  %923 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %924 = load i32, i32* %923, align 8
  %925 = icmp slt i32 %924, 1
  br i1 %925, label %926, label %16

926:                                              ; preds = %921
  store i32 14, i32* %12, align 8
  br label %965

927:                                              ; preds = %902, %874, %14
  %928 = phi i64 [ %15, %14 ], [ %881, %874 ], [ %881, %902 ]
  %929 = phi i32 [ %5, %14 ], [ %806, %874 ], [ %806, %902 ]
  %930 = phi i32 [ %3, %14 ], [ %586, %874 ], [ %586, %902 ]
  %931 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 11
  %932 = load i32, i32* %931, align 8
  %933 = sub nsw i32 %932, %930
  %934 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %935 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 41
  %936 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 12
  br label %937

937:                                              ; preds = %943, %927
  %938 = phi i64 [ %954, %943 ], [ %928, %927 ]
  %939 = phi i32 [ %941, %943 ], [ %929, %927 ]
  %940 = phi i32 [ %955, %943 ], [ %933, %927 ]
  %941 = add nsw i32 %939, -1
  %942 = icmp sgt i32 %939, 0
  br i1 %942, label %943, label %959

943:                                              ; preds = %937
  %944 = load i8*, i8** %934, align 8
  %945 = load i32, i32* %935, align 8
  %946 = trunc i64 %938 to i32
  %947 = sub nsw i32 %946, %945
  %948 = load i32, i32* %936, align 4
  %949 = and i32 %947, %948
  %950 = sext i32 %949 to i64
  %951 = getelementptr inbounds i8, i8* %944, i64 %950
  %952 = load i8, i8* %951, align 1
  %953 = getelementptr inbounds i8, i8* %944, i64 %938
  store i8 %952, i8* %953, align 1
  %954 = add nsw i64 %938, 1
  %955 = add nsw i32 %940, -1
  %956 = icmp eq i32 %955, 0
  br i1 %956, label %957, label %937, !prof !19

957:                                              ; preds = %943
  %958 = trunc i64 %954 to i32
  store i32 16, i32* %12, align 8
  br label %965

959:                                              ; preds = %937
  %960 = trunc i64 %938 to i32
  %961 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %962 = load i32, i32* %961, align 8
  %963 = icmp slt i32 %962, 1
  br i1 %963, label %964, label %16

964:                                              ; preds = %959
  store i32 14, i32* %12, align 8
  br label %965

965:                                              ; preds = %964, %957, %926, %873, %584, %571, %479, %451, %324, %25, %1
  %966 = phi i32 [ %5, %1 ], [ %941, %964 ], [ %17, %25 ], [ %806, %873 ], [ %806, %926 ], [ 0, %584 ], [ %941, %957 ], [ %452, %451 ], [ %319, %324 ], [ %474, %479 ], [ %572, %571 ]
  %967 = phi i32 [ 2, %1 ], [ 1, %964 ], [ 2, %25 ], [ 1, %873 ], [ 1, %926 ], [ 1, %584 ], [ 1, %957 ], [ 1, %451 ], [ 2, %324 ], [ 2, %479 ], [ 1, %571 ]
  %968 = phi i32 [ %3, %1 ], [ %960, %964 ], [ %18, %25 ], [ %866, %873 ], [ %922, %926 ], [ %580, %584 ], [ %958, %957 ], [ %448, %451 ], [ %325, %324 ], [ %480, %479 ], [ %568, %571 ]
  store i32 %968, i32* %2, align 4
  store i32 %966, i32* %4, align 4
  br label %969

969:                                              ; preds = %10, %808, %810, %834, %846, %965
  %970 = phi i32 [ %967, %965 ], [ -31, %10 ], [ -16, %808 ], [ -12, %810 ], [ -11, %846 ], [ -19, %834 ]
  ret i32 %970
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i32 @SafeProcessCommands(%struct.BrotliDecoderStateStruct*) unnamed_addr #7 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 8
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2
  %11 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  switch i32 %12, label %905 [
    i32 7, label %15
    i32 8, label %238
    i32 9, label %512
    i32 10, label %13
  ]

13:                                               ; preds = %1
  %14 = sext i32 %7 to i64
  br label %859

15:                                               ; preds = %891, %853, %1
  %16 = phi i32 [ %9, %1 ], [ %738, %853 ], [ %873, %891 ]
  %17 = phi i32 [ %7, %1 ], [ %854, %853 ], [ %892, %891 ]
  %18 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %19 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 31, i64 1
  br label %20

20:                                               ; preds = %23, %15
  store i32 7, i32* %11, align 8
  %21 = load i32, i32* %19, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %26, !prof !19

23:                                               ; preds = %20
  %24 = tail call fastcc i32 @SafeDecodeCommandBlockSwitch(%struct.BrotliDecoderStateStruct* %0) #14
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %901, label %20

26:                                               ; preds = %20
  %27 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #14
  store i32 -1431655766, i32* %2, align 4
  %28 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %10, i64 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 1
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %33 = bitcast i8** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = load i64, i64* %18, align 8
  %36 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 18
  %37 = load %struct.HuffmanCode*, %struct.HuffmanCode** %36, align 8
  %38 = sub i32 64, %31
  %39 = icmp ult i32 %38, 15
  br i1 %39, label %40, label %54

40:                                               ; preds = %26
  %41 = inttoptr i64 %34 to i8*
  %42 = icmp eq i64 %35, 0
  br i1 %42, label %99, label %43

43:                                               ; preds = %40
  %44 = lshr i64 %29, 8
  store i64 %44, i64* %28, align 8
  %45 = load i8, i8* %41, align 1
  %46 = zext i8 %45 to i64
  %47 = shl nuw i64 %46, 56
  %48 = or i64 %47, %44
  store i64 %48, i64* %28, align 8
  %49 = add i32 %31, -8
  store i32 %49, i32* %30, align 8
  %50 = add i64 %35, -1
  store i64 %50, i64* %18, align 8
  %51 = getelementptr inbounds i8, i8* %41, i64 1
  store i8* %51, i8** %32, align 8
  %52 = sub i32 72, %31
  %53 = icmp ult i32 %52, 15
  br i1 %53, label %987, label %54

54:                                               ; preds = %43, %989, %1002, %26
  %55 = phi i64 [ %29, %26 ], [ %48, %43 ], [ %994, %989 ], [ %1007, %1002 ]
  %56 = phi i32 [ %31, %26 ], [ %49, %43 ], [ %995, %989 ], [ %1008, %1002 ]
  %57 = zext i32 %56 to i64
  %58 = lshr i64 %55, %57
  %59 = and i64 %58, 255
  %60 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %37, i64 %59
  %61 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %60, i64 0, i32 0
  %62 = load i8, i8* %61, align 2
  %63 = icmp ugt i8 %62, 8
  br i1 %63, label %64, label %90

64:                                               ; preds = %54
  %65 = trunc i64 %58 to i32
  %66 = zext i8 %62 to i32
  %67 = add nsw i32 %66, -8
  %68 = add i32 %56, 8
  store i32 %68, i32* %30, align 8
  %69 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %37, i64 %59, i32 1
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = lshr i32 %65, 8
  %73 = and i32 %72, 127
  %74 = tail call i1 @llvm.is.constant.i32(i32 %67) #14
  br i1 %74, label %75, label %78

75:                                               ; preds = %64
  %76 = shl i32 -1, %67
  %77 = xor i32 %76, -1
  br label %82

78:                                               ; preds = %64
  %79 = zext i32 %67 to i64
  %80 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %79
  %81 = load i32, i32* %80, align 4
  br label %82

82:                                               ; preds = %78, %75
  %83 = phi i32 [ %77, %75 ], [ %81, %78 ]
  %84 = and i32 %73, %83
  %85 = add nuw nsw i32 %84, %71
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %60, i64 %86
  %88 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %87, i64 0, i32 0
  %89 = load i8, i8* %88, align 2
  br label %90

90:                                               ; preds = %82, %54
  %91 = phi i32 [ %68, %82 ], [ %56, %54 ]
  %92 = phi i8 [ %89, %82 ], [ %62, %54 ]
  %93 = phi %struct.HuffmanCode* [ %87, %82 ], [ %60, %54 ]
  %94 = zext i8 %92 to i32
  %95 = add i32 %91, %94
  store i32 %95, i32* %30, align 8
  %96 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %93, i64 0, i32 1
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i32
  store i32 %98, i32* %2, align 4
  br label %104

99:                                               ; preds = %1000, %987, %40
  %100 = call fastcc i32 @SafeDecodeSymbol(%struct.HuffmanCode* %37, %struct.BrotliBitReader* %10, i32* nonnull %2) #14
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %223, label %102

102:                                              ; preds = %99
  %103 = load i32, i32* %2, align 4
  br label %104

104:                                              ; preds = %102, %90
  %105 = phi i32 [ %103, %102 ], [ %98, %90 ]
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds [704 x %struct.CmdLutElement], [704 x %struct.CmdLutElement]* @kCmdLut, i64 0, i64 %106, i32 0
  %108 = load i8, i8* %107, align 8
  %109 = getelementptr inbounds [704 x %struct.CmdLutElement], [704 x %struct.CmdLutElement]* @kCmdLut, i64 0, i64 %106, i32 1
  %110 = load i8, i8* %109, align 1
  %111 = getelementptr inbounds [704 x %struct.CmdLutElement], [704 x %struct.CmdLutElement]* @kCmdLut, i64 0, i64 %106, i32 2
  %112 = load i8, i8* %111, align 2
  %113 = getelementptr inbounds [704 x %struct.CmdLutElement], [704 x %struct.CmdLutElement]* @kCmdLut, i64 0, i64 %106, i32 3
  %114 = load i8, i8* %113, align 1
  %115 = getelementptr inbounds [704 x %struct.CmdLutElement], [704 x %struct.CmdLutElement]* @kCmdLut, i64 0, i64 %106, i32 4
  %116 = load i16, i16* %115, align 4
  %117 = getelementptr inbounds [704 x %struct.CmdLutElement], [704 x %struct.CmdLutElement]* @kCmdLut, i64 0, i64 %106, i32 5
  %118 = load i16, i16* %117, align 2
  %119 = sext i8 %112 to i32
  %120 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 41
  store i32 %119, i32* %120, align 8
  %121 = zext i8 %114 to i32
  %122 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 28
  store i32 %121, i32* %122, align 4
  %123 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 21
  %124 = load i8*, i8** %123, align 8
  %125 = zext i8 %114 to i64
  %126 = getelementptr inbounds i8, i8* %124, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 39
  store i8 %127, i8* %128, align 8
  %129 = zext i16 %116 to i32
  %130 = zext i8 %108 to i32
  %131 = icmp eq i8 %108, 0
  br i1 %131, label %175, label %132

132:                                              ; preds = %104
  %133 = load i32, i32* %30, align 8
  %134 = sub i32 64, %133
  %135 = icmp ult i32 %134, %130
  br i1 %135, label %138, label %136

136:                                              ; preds = %132
  %137 = load i64, i64* %28, align 8
  br label %157

138:                                              ; preds = %132
  %139 = load i64, i64* %18, align 8
  br label %140

140:                                              ; preds = %144, %138
  %141 = phi i64 [ %139, %138 ], [ %153, %144 ]
  %142 = phi i32 [ %133, %138 ], [ %152, %144 ]
  %143 = icmp eq i64 %141, 0
  br i1 %143, label %222, label %144

144:                                              ; preds = %140
  %145 = load i64, i64* %28, align 8
  %146 = lshr i64 %145, 8
  store i64 %146, i64* %28, align 8
  %147 = load i8*, i8** %32, align 8
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i64
  %150 = shl nuw i64 %149, 56
  %151 = or i64 %150, %146
  store i64 %151, i64* %28, align 8
  %152 = add i32 %142, -8
  store i32 %152, i32* %30, align 8
  %153 = add i64 %141, -1
  store i64 %153, i64* %18, align 8
  %154 = getelementptr inbounds i8, i8* %147, i64 1
  store i8* %154, i8** %32, align 8
  %155 = sub i32 72, %142
  %156 = icmp ult i32 %155, %130
  br i1 %156, label %140, label %157

157:                                              ; preds = %144, %136
  %158 = phi i64 [ %137, %136 ], [ %151, %144 ]
  %159 = phi i32 [ %133, %136 ], [ %152, %144 ]
  %160 = zext i32 %159 to i64
  %161 = lshr i64 %158, %160
  %162 = trunc i64 %161 to i32
  %163 = tail call i1 @llvm.is.constant.i32(i32 %130) #14
  br i1 %163, label %164, label %167

164:                                              ; preds = %157
  %165 = shl i32 -1, %130
  %166 = xor i32 %165, -1
  br label %171

167:                                              ; preds = %157
  %168 = zext i8 %108 to i64
  %169 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %168
  %170 = load i32, i32* %169, align 4
  br label %171

171:                                              ; preds = %167, %164
  %172 = phi i32 [ %166, %164 ], [ %170, %167 ]
  %173 = and i32 %172, %162
  %174 = add i32 %159, %130
  store i32 %174, i32* %30, align 8
  br label %175

175:                                              ; preds = %171, %104
  %176 = phi i32 [ 0, %104 ], [ %173, %171 ]
  %177 = zext i8 %110 to i32
  %178 = icmp eq i8 %110, 0
  br i1 %178, label %225, label %179

179:                                              ; preds = %175
  %180 = load i32, i32* %30, align 8
  %181 = sub i32 64, %180
  %182 = icmp ult i32 %181, %177
  br i1 %182, label %185, label %183

183:                                              ; preds = %179
  %184 = load i64, i64* %28, align 8
  br label %204

185:                                              ; preds = %179
  %186 = load i64, i64* %18, align 8
  br label %187

187:                                              ; preds = %191, %185
  %188 = phi i64 [ %186, %185 ], [ %200, %191 ]
  %189 = phi i32 [ %180, %185 ], [ %199, %191 ]
  %190 = icmp eq i64 %188, 0
  br i1 %190, label %222, label %191

191:                                              ; preds = %187
  %192 = load i64, i64* %28, align 8
  %193 = lshr i64 %192, 8
  store i64 %193, i64* %28, align 8
  %194 = load i8*, i8** %32, align 8
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i64
  %197 = shl nuw i64 %196, 56
  %198 = or i64 %197, %193
  store i64 %198, i64* %28, align 8
  %199 = add i32 %189, -8
  store i32 %199, i32* %30, align 8
  %200 = add i64 %188, -1
  store i64 %200, i64* %18, align 8
  %201 = getelementptr inbounds i8, i8* %194, i64 1
  store i8* %201, i8** %32, align 8
  %202 = sub i32 72, %189
  %203 = icmp ult i32 %202, %177
  br i1 %203, label %187, label %204

204:                                              ; preds = %191, %183
  %205 = phi i64 [ %184, %183 ], [ %198, %191 ]
  %206 = phi i32 [ %180, %183 ], [ %199, %191 ]
  %207 = zext i32 %206 to i64
  %208 = lshr i64 %205, %207
  %209 = trunc i64 %208 to i32
  %210 = tail call i1 @llvm.is.constant.i32(i32 %177) #14
  br i1 %210, label %211, label %214

211:                                              ; preds = %204
  %212 = shl i32 -1, %177
  %213 = xor i32 %212, -1
  br label %218

214:                                              ; preds = %204
  %215 = zext i8 %110 to i64
  %216 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %215
  %217 = load i32, i32* %216, align 4
  br label %218

218:                                              ; preds = %214, %211
  %219 = phi i32 [ %213, %211 ], [ %217, %214 ]
  %220 = and i32 %219, %209
  %221 = add i32 %206, %177
  store i32 %221, i32* %30, align 8
  br label %225

222:                                              ; preds = %140, %187
  store i64 %29, i64* %28, align 8
  store i32 %31, i32* %30, align 8
  store i64 %34, i64* %33, align 8
  store i64 %35, i64* %18, align 8
  br label %223

223:                                              ; preds = %222, %99
  %224 = phi i32 [ %129, %222 ], [ %16, %99 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #14
  br label %901

225:                                              ; preds = %175, %218
  %226 = phi i32 [ 0, %175 ], [ %220, %218 ]
  %227 = zext i16 %118 to i32
  %228 = add nsw i32 %226, %227
  %229 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 40
  store i32 %228, i32* %229, align 4
  %230 = load i32, i32* %19, align 4
  %231 = add i32 %230, -1
  store i32 %231, i32* %19, align 4
  %232 = add nsw i32 %176, %129
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #14
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %512, label %234

234:                                              ; preds = %225
  %235 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %236 = load i32, i32* %235, align 8
  %237 = sub nsw i32 %236, %232
  store i32 %237, i32* %235, align 8
  br label %238

238:                                              ; preds = %234, %1
  %239 = phi i32 [ %9, %1 ], [ %232, %234 ]
  %240 = phi i32 [ %7, %1 ], [ %17, %234 ]
  %241 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 27
  %242 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 38
  %243 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 1
  %244 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %10, i64 0, i32 0
  %245 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %246 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %247 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 31, i64 0
  %248 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %249 = bitcast i32* %4 to i8*
  %250 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 11
  %251 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 12
  %252 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 19
  %253 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 22, i32 0
  %254 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 20
  %255 = bitcast i32* %5 to i8*
  %256 = load i32, i32* %241, align 8
  br label %257

257:                                              ; preds = %503, %238
  %258 = phi i32 [ %256, %238 ], [ %397, %503 ]
  %259 = phi i32 [ %239, %238 ], [ %389, %503 ]
  %260 = phi i32 [ %240, %238 ], [ %504, %503 ]
  store i32 8, i32* %11, align 8
  %261 = icmp eq i32 %258, 0
  br i1 %261, label %369, label %264

262:                                              ; preds = %275
  store i32 8, i32* %11, align 8
  %263 = trunc i64 %269 to i32
  br label %369

264:                                              ; preds = %257
  %265 = sext i32 %260 to i64
  %266 = load i32, i32* %247, align 8
  br label %267

267:                                              ; preds = %366, %264
  %268 = phi i32 [ %357, %366 ], [ %266, %264 ]
  %269 = phi i64 [ %358, %366 ], [ %265, %264 ]
  %270 = phi i32 [ %367, %366 ], [ %259, %264 ]
  %271 = icmp eq i32 %268, 0
  br i1 %271, label %272, label %278, !prof !19

272:                                              ; preds = %267
  %273 = tail call fastcc i32 @SafeDecodeLiteralBlockSwitch(%struct.BrotliDecoderStateStruct* %0) #14
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %897, label %275

275:                                              ; preds = %272
  %276 = load i32, i32* %241, align 8
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %262, label %278

278:                                              ; preds = %275, %267
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %249) #14
  store i32 -1431655766, i32* %4, align 4
  %279 = load %struct.HuffmanCode*, %struct.HuffmanCode** %242, align 8
  %280 = load i32, i32* %243, align 8
  %281 = sub i32 64, %280
  %282 = icmp ult i32 %281, 15
  br i1 %282, label %285, label %283

283:                                              ; preds = %278
  %284 = load i64, i64* %244, align 8
  br label %301

285:                                              ; preds = %278
  %286 = load i64, i64* %246, align 8
  %287 = icmp eq i64 %286, 0
  br i1 %287, label %346, label %288

288:                                              ; preds = %285
  %289 = load i64, i64* %244, align 8
  %290 = lshr i64 %289, 8
  store i64 %290, i64* %244, align 8
  %291 = load i8*, i8** %245, align 8
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i64
  %294 = shl nuw i64 %293, 56
  %295 = or i64 %294, %290
  store i64 %295, i64* %244, align 8
  %296 = add i32 %280, -8
  store i32 %296, i32* %243, align 8
  %297 = add i64 %286, -1
  store i64 %297, i64* %246, align 8
  %298 = getelementptr inbounds i8, i8* %291, i64 1
  store i8* %298, i8** %245, align 8
  %299 = sub i32 72, %280
  %300 = icmp ult i32 %299, 15
  br i1 %300, label %931, label %301

301:                                              ; preds = %288, %933, %948, %283
  %302 = phi i64 [ %284, %283 ], [ %295, %288 ], [ %940, %933 ], [ %955, %948 ]
  %303 = phi i32 [ %280, %283 ], [ %296, %288 ], [ %941, %933 ], [ %956, %948 ]
  %304 = zext i32 %303 to i64
  %305 = lshr i64 %302, %304
  %306 = and i64 %305, 255
  %307 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %279, i64 %306
  %308 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %307, i64 0, i32 0
  %309 = load i8, i8* %308, align 2
  %310 = icmp ugt i8 %309, 8
  br i1 %310, label %311, label %337

311:                                              ; preds = %301
  %312 = trunc i64 %305 to i32
  %313 = zext i8 %309 to i32
  %314 = add nsw i32 %313, -8
  %315 = add i32 %303, 8
  store i32 %315, i32* %243, align 8
  %316 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %279, i64 %306, i32 1
  %317 = load i16, i16* %316, align 2
  %318 = zext i16 %317 to i32
  %319 = lshr i32 %312, 8
  %320 = and i32 %319, 127
  %321 = tail call i1 @llvm.is.constant.i32(i32 %314) #14
  br i1 %321, label %322, label %325

322:                                              ; preds = %311
  %323 = shl i32 -1, %314
  %324 = xor i32 %323, -1
  br label %329

325:                                              ; preds = %311
  %326 = zext i32 %314 to i64
  %327 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %326
  %328 = load i32, i32* %327, align 4
  br label %329

329:                                              ; preds = %325, %322
  %330 = phi i32 [ %324, %322 ], [ %328, %325 ]
  %331 = and i32 %320, %330
  %332 = add nuw nsw i32 %331, %318
  %333 = zext i32 %332 to i64
  %334 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %307, i64 %333
  %335 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %334, i64 0, i32 0
  %336 = load i8, i8* %335, align 2
  br label %337

337:                                              ; preds = %329, %301
  %338 = phi i32 [ %315, %329 ], [ %303, %301 ]
  %339 = phi i8 [ %336, %329 ], [ %309, %301 ]
  %340 = phi %struct.HuffmanCode* [ %334, %329 ], [ %307, %301 ]
  %341 = zext i8 %339 to i32
  %342 = add i32 %338, %341
  store i32 %342, i32* %243, align 8
  %343 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %340, i64 0, i32 1
  %344 = load i16, i16* %343, align 2
  %345 = zext i16 %344 to i32
  store i32 %345, i32* %4, align 4
  br label %351

346:                                              ; preds = %946, %931, %285
  %347 = call fastcc i32 @SafeDecodeSymbol(%struct.HuffmanCode* %279, %struct.BrotliBitReader* %10, i32* nonnull %4) #14
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %362, label %349

349:                                              ; preds = %346
  %350 = load i32, i32* %4, align 4
  br label %351

351:                                              ; preds = %349, %337
  %352 = phi i32 [ %350, %349 ], [ %345, %337 ]
  %353 = trunc i32 %352 to i8
  %354 = load i8*, i8** %248, align 8
  %355 = getelementptr inbounds i8, i8* %354, i64 %269
  store i8 %353, i8* %355, align 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %249) #14
  %356 = load i32, i32* %247, align 8
  %357 = add i32 %356, -1
  store i32 %357, i32* %247, align 8
  %358 = add nsw i64 %269, 1
  %359 = load i32, i32* %250, align 8
  %360 = trunc i64 %358 to i32
  %361 = icmp eq i32 %359, %360
  br i1 %361, label %364, label %366, !prof !19

362:                                              ; preds = %346
  %363 = trunc i64 %269 to i32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %249) #14
  br label %901

364:                                              ; preds = %351
  store i32 13, i32* %11, align 8
  %365 = add nsw i32 %270, -1
  br label %901

366:                                              ; preds = %351
  %367 = add nsw i32 %270, -1
  %368 = icmp eq i32 %367, 0
  br i1 %368, label %505, label %267

369:                                              ; preds = %262, %257
  %370 = phi i32 [ %270, %262 ], [ %259, %257 ]
  %371 = phi i32 [ %263, %262 ], [ %260, %257 ]
  %372 = load i8*, i8** %248, align 8
  %373 = add nsw i32 %371, -1
  %374 = load i32, i32* %251, align 4
  %375 = and i32 %374, %373
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds i8, i8* %372, i64 %376
  %378 = load i8, i8* %377, align 1
  %379 = add nsw i32 %371, -2
  %380 = and i32 %374, %379
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds i8, i8* %372, i64 %381
  %383 = load i8, i8* %382, align 1
  %384 = sext i32 %371 to i64
  %385 = load i32, i32* %247, align 8
  br label %386

386:                                              ; preds = %500, %369
  %387 = phi i32 [ %493, %500 ], [ %385, %369 ]
  %388 = phi i64 [ %494, %500 ], [ %384, %369 ]
  %389 = phi i32 [ %501, %500 ], [ %370, %369 ]
  %390 = phi i8 [ %489, %500 ], [ %378, %369 ]
  %391 = phi i8 [ %390, %500 ], [ %383, %369 ]
  %392 = icmp eq i32 %387, 0
  br i1 %392, label %393, label %399, !prof !19

393:                                              ; preds = %386
  %394 = tail call fastcc i32 @SafeDecodeLiteralBlockSwitch(%struct.BrotliDecoderStateStruct* %0) #14
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %899, label %396

396:                                              ; preds = %393
  %397 = load i32, i32* %241, align 8
  %398 = icmp eq i32 %397, 0
  br i1 %398, label %399, label %503

399:                                              ; preds = %396, %386
  %400 = load i8*, i8** %252, align 8
  %401 = zext i8 %390 to i64
  %402 = getelementptr inbounds i8, i8* %400, i64 %401
  %403 = load i8, i8* %402, align 1
  %404 = getelementptr inbounds i8, i8* %400, i64 256
  %405 = zext i8 %391 to i64
  %406 = getelementptr inbounds i8, i8* %404, i64 %405
  %407 = load i8, i8* %406, align 1
  %408 = or i8 %407, %403
  %409 = load %struct.HuffmanCode**, %struct.HuffmanCode*** %253, align 8
  %410 = load i8*, i8** %254, align 8
  %411 = zext i8 %408 to i64
  %412 = getelementptr inbounds i8, i8* %410, i64 %411
  %413 = load i8, i8* %412, align 1
  %414 = zext i8 %413 to i64
  %415 = getelementptr inbounds %struct.HuffmanCode*, %struct.HuffmanCode** %409, i64 %414
  %416 = load %struct.HuffmanCode*, %struct.HuffmanCode** %415, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %255) #14
  store i32 -1431655766, i32* %5, align 4
  %417 = load i32, i32* %243, align 8
  %418 = sub i32 64, %417
  %419 = icmp ult i32 %418, 15
  br i1 %419, label %422, label %420

420:                                              ; preds = %399
  %421 = load i64, i64* %244, align 8
  br label %438

422:                                              ; preds = %399
  %423 = load i64, i64* %246, align 8
  %424 = icmp eq i64 %423, 0
  br i1 %424, label %483, label %425

425:                                              ; preds = %422
  %426 = load i64, i64* %244, align 8
  %427 = lshr i64 %426, 8
  store i64 %427, i64* %244, align 8
  %428 = load i8*, i8** %245, align 8
  %429 = load i8, i8* %428, align 1
  %430 = zext i8 %429 to i64
  %431 = shl nuw i64 %430, 56
  %432 = or i64 %431, %427
  store i64 %432, i64* %244, align 8
  %433 = add i32 %417, -8
  store i32 %433, i32* %243, align 8
  %434 = add i64 %423, -1
  store i64 %434, i64* %246, align 8
  %435 = getelementptr inbounds i8, i8* %428, i64 1
  store i8* %435, i8** %245, align 8
  %436 = sub i32 72, %417
  %437 = icmp ult i32 %436, 15
  br i1 %437, label %959, label %438

438:                                              ; preds = %425, %961, %976, %420
  %439 = phi i64 [ %421, %420 ], [ %432, %425 ], [ %968, %961 ], [ %983, %976 ]
  %440 = phi i32 [ %417, %420 ], [ %433, %425 ], [ %969, %961 ], [ %984, %976 ]
  %441 = zext i32 %440 to i64
  %442 = lshr i64 %439, %441
  %443 = and i64 %442, 255
  %444 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %416, i64 %443
  %445 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %444, i64 0, i32 0
  %446 = load i8, i8* %445, align 2
  %447 = icmp ugt i8 %446, 8
  br i1 %447, label %448, label %474

448:                                              ; preds = %438
  %449 = trunc i64 %442 to i32
  %450 = zext i8 %446 to i32
  %451 = add nsw i32 %450, -8
  %452 = add i32 %440, 8
  store i32 %452, i32* %243, align 8
  %453 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %416, i64 %443, i32 1
  %454 = load i16, i16* %453, align 2
  %455 = zext i16 %454 to i32
  %456 = lshr i32 %449, 8
  %457 = and i32 %456, 127
  %458 = tail call i1 @llvm.is.constant.i32(i32 %451) #14
  br i1 %458, label %459, label %462

459:                                              ; preds = %448
  %460 = shl i32 -1, %451
  %461 = xor i32 %460, -1
  br label %466

462:                                              ; preds = %448
  %463 = zext i32 %451 to i64
  %464 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %463
  %465 = load i32, i32* %464, align 4
  br label %466

466:                                              ; preds = %462, %459
  %467 = phi i32 [ %461, %459 ], [ %465, %462 ]
  %468 = and i32 %457, %467
  %469 = add nuw nsw i32 %468, %455
  %470 = zext i32 %469 to i64
  %471 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %444, i64 %470
  %472 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %471, i64 0, i32 0
  %473 = load i8, i8* %472, align 2
  br label %474

474:                                              ; preds = %466, %438
  %475 = phi i32 [ %452, %466 ], [ %440, %438 ]
  %476 = phi i8 [ %473, %466 ], [ %446, %438 ]
  %477 = phi %struct.HuffmanCode* [ %471, %466 ], [ %444, %438 ]
  %478 = zext i8 %476 to i32
  %479 = add i32 %475, %478
  store i32 %479, i32* %243, align 8
  %480 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %477, i64 0, i32 1
  %481 = load i16, i16* %480, align 2
  %482 = trunc i16 %481 to i8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %255) #14
  br label %488

483:                                              ; preds = %974, %959, %422
  %484 = call fastcc i32 @SafeDecodeSymbol(%struct.HuffmanCode* %416, %struct.BrotliBitReader* %10, i32* nonnull %5) #14
  %485 = load i32, i32* %5, align 4
  %486 = icmp eq i32 %484, 0
  %487 = trunc i32 %485 to i8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %255) #14
  br i1 %486, label %899, label %488

488:                                              ; preds = %483, %474
  %489 = phi i8 [ %487, %483 ], [ %482, %474 ]
  %490 = load i8*, i8** %248, align 8
  %491 = getelementptr inbounds i8, i8* %490, i64 %388
  store i8 %489, i8* %491, align 1
  %492 = load i32, i32* %247, align 8
  %493 = add i32 %492, -1
  store i32 %493, i32* %247, align 8
  %494 = add nsw i64 %388, 1
  %495 = load i32, i32* %250, align 8
  %496 = trunc i64 %494 to i32
  %497 = icmp eq i32 %495, %496
  br i1 %497, label %498, label %500, !prof !19

498:                                              ; preds = %488
  store i32 13, i32* %11, align 8
  %499 = add nsw i32 %389, -1
  br label %901

500:                                              ; preds = %488
  %501 = add nsw i32 %389, -1
  %502 = icmp eq i32 %501, 0
  br i1 %502, label %505, label %386

503:                                              ; preds = %396
  %504 = trunc i64 %388 to i32
  br label %257

505:                                              ; preds = %366, %500
  %506 = phi i64 [ %494, %500 ], [ %358, %366 ]
  %507 = trunc i64 %506 to i32
  %508 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %509 = load i32, i32* %508, align 8
  %510 = icmp slt i32 %509, 1
  br i1 %510, label %511, label %512, !prof !19

511:                                              ; preds = %505
  store i32 14, i32* %11, align 8
  br label %901

512:                                              ; preds = %505, %225, %1
  %513 = phi i32 [ 0, %225 ], [ 0, %505 ], [ %9, %1 ]
  %514 = phi i32 [ %17, %225 ], [ %507, %505 ], [ %7, %1 ]
  store i32 9, i32* %11, align 8
  %515 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 41
  %516 = load i32, i32* %515, align 8
  %517 = icmp sgt i32 %516, -1
  br i1 %517, label %518, label %529

518:                                              ; preds = %512
  %519 = icmp eq i32 %516, 0
  %520 = zext i1 %519 to i32
  %521 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 28
  store i32 %520, i32* %521, align 4
  %522 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 13
  %523 = load i32, i32* %522, align 8
  %524 = add nsw i32 %523, -1
  store i32 %524, i32* %522, align 8
  %525 = and i32 %524, 3
  %526 = zext i32 %525 to i64
  %527 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 14, i64 %526
  %528 = load i32, i32* %527, align 4
  store i32 %528, i32* %515, align 8
  br label %724

529:                                              ; preds = %512
  %530 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 31, i64 2
  %531 = load i32, i32* %530, align 8
  %532 = icmp eq i32 %531, 0
  br i1 %532, label %533, label %536, !prof !19

533:                                              ; preds = %529
  %534 = tail call fastcc i32 @SafeDecodeDistanceBlockSwitch(%struct.BrotliDecoderStateStruct* %0) #14
  %535 = icmp eq i32 %534, 0
  br i1 %535, label %901, label %536

536:                                              ; preds = %529, %533
  %537 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59
  %538 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %538) #14
  store i32 -1431655766, i32* %3, align 4
  %539 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 24, i32 0
  %540 = load %struct.HuffmanCode**, %struct.HuffmanCode*** %539, align 8
  %541 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 39
  %542 = load i8, i8* %541, align 8
  %543 = zext i8 %542 to i64
  %544 = getelementptr inbounds %struct.HuffmanCode*, %struct.HuffmanCode** %540, i64 %543
  %545 = load %struct.HuffmanCode*, %struct.HuffmanCode** %544, align 8
  %546 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %10, i64 0, i32 0
  %547 = load i64, i64* %546, align 8
  %548 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 1
  %549 = load i32, i32* %548, align 8
  %550 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %551 = bitcast i8** %550 to i64*
  %552 = load i64, i64* %551, align 8
  %553 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %554 = load i64, i64* %553, align 8
  %555 = sub i32 64, %549
  %556 = icmp ult i32 %555, 15
  br i1 %556, label %557, label %571

557:                                              ; preds = %536
  %558 = inttoptr i64 %552 to i8*
  %559 = icmp eq i64 %554, 0
  br i1 %559, label %616, label %560

560:                                              ; preds = %557
  %561 = lshr i64 %547, 8
  store i64 %561, i64* %546, align 8
  %562 = load i8, i8* %558, align 1
  %563 = zext i8 %562 to i64
  %564 = shl nuw i64 %563, 56
  %565 = or i64 %564, %561
  store i64 %565, i64* %546, align 8
  %566 = add i32 %549, -8
  store i32 %566, i32* %548, align 8
  %567 = add i64 %554, -1
  store i64 %567, i64* %553, align 8
  %568 = getelementptr inbounds i8, i8* %558, i64 1
  store i8* %568, i8** %550, align 8
  %569 = sub i32 72, %549
  %570 = icmp ult i32 %569, 15
  br i1 %570, label %907, label %571

571:                                              ; preds = %560, %909, %922, %536
  %572 = phi i64 [ %547, %536 ], [ %565, %560 ], [ %914, %909 ], [ %927, %922 ]
  %573 = phi i32 [ %549, %536 ], [ %566, %560 ], [ %915, %909 ], [ %928, %922 ]
  %574 = zext i32 %573 to i64
  %575 = lshr i64 %572, %574
  %576 = and i64 %575, 255
  %577 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %545, i64 %576
  %578 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %577, i64 0, i32 0
  %579 = load i8, i8* %578, align 2
  %580 = icmp ugt i8 %579, 8
  br i1 %580, label %581, label %607

581:                                              ; preds = %571
  %582 = trunc i64 %575 to i32
  %583 = zext i8 %579 to i32
  %584 = add nsw i32 %583, -8
  %585 = add i32 %573, 8
  store i32 %585, i32* %548, align 8
  %586 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %545, i64 %576, i32 1
  %587 = load i16, i16* %586, align 2
  %588 = zext i16 %587 to i32
  %589 = lshr i32 %582, 8
  %590 = and i32 %589, 127
  %591 = tail call i1 @llvm.is.constant.i32(i32 %584) #14
  br i1 %591, label %592, label %595

592:                                              ; preds = %581
  %593 = shl i32 -1, %584
  %594 = xor i32 %593, -1
  br label %599

595:                                              ; preds = %581
  %596 = zext i32 %584 to i64
  %597 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %596
  %598 = load i32, i32* %597, align 4
  br label %599

599:                                              ; preds = %595, %592
  %600 = phi i32 [ %594, %592 ], [ %598, %595 ]
  %601 = and i32 %590, %600
  %602 = add nuw nsw i32 %601, %588
  %603 = zext i32 %602 to i64
  %604 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %577, i64 %603
  %605 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %604, i64 0, i32 0
  %606 = load i8, i8* %605, align 2
  br label %607

607:                                              ; preds = %599, %571
  %608 = phi i32 [ %585, %599 ], [ %573, %571 ]
  %609 = phi i8 [ %606, %599 ], [ %579, %571 ]
  %610 = phi %struct.HuffmanCode* [ %604, %599 ], [ %577, %571 ]
  %611 = zext i8 %609 to i32
  %612 = add i32 %608, %611
  store i32 %612, i32* %548, align 8
  %613 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %610, i64 0, i32 1
  %614 = load i16, i16* %613, align 2
  %615 = zext i16 %614 to i32
  store i32 %615, i32* %3, align 4
  br label %621

616:                                              ; preds = %920, %907, %557
  %617 = call fastcc i32 @SafeDecodeSymbol(%struct.HuffmanCode* %545, %struct.BrotliBitReader* %10, i32* nonnull %3) #14
  %618 = icmp eq i32 %617, 0
  br i1 %618, label %723, label %619

619:                                              ; preds = %616
  %620 = load i32, i32* %3, align 4
  br label %621

621:                                              ; preds = %619, %607
  %622 = phi i32 [ %620, %619 ], [ %615, %607 ]
  %623 = load i32, i32* %530, align 8
  %624 = add i32 %623, -1
  store i32 %624, i32* %530, align 8
  %625 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 28
  store i32 0, i32* %625, align 4
  %626 = icmp ult i32 %622, 16
  br i1 %626, label %627, label %659

627:                                              ; preds = %621
  store i32 %622, i32* %515, align 8
  %628 = icmp slt i32 %622, 4
  br i1 %628, label %629, label %640

629:                                              ; preds = %627
  %630 = lshr i32 1, %622
  store i32 %630, i32* %625, align 4
  %631 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 13
  %632 = load i32, i32* %631, align 8
  %633 = xor i32 %622, 3
  %634 = add i32 %632, %633
  %635 = and i32 %634, 3
  %636 = zext i32 %635 to i64
  %637 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 14, i64 %636
  %638 = load i32, i32* %637, align 4
  store i32 %638, i32* %515, align 8
  %639 = sub nsw i32 %632, %630
  store i32 %639, i32* %631, align 8
  br label %720

640:                                              ; preds = %627
  %641 = icmp slt i32 %622, 10
  %642 = select i1 %641, i32 3, i32 2
  %643 = select i1 %641, i32 -4, i32 -10
  %644 = add nsw i32 %643, %622
  %645 = shl nsw i32 %644, 2
  %646 = lshr i32 6312258, %645
  %647 = and i32 %646, 15
  %648 = add nsw i32 %647, -3
  %649 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 13
  %650 = load i32, i32* %649, align 8
  %651 = add nsw i32 %650, %642
  %652 = and i32 %651, 3
  %653 = zext i32 %652 to i64
  %654 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 14, i64 %653
  %655 = load i32, i32* %654, align 4
  %656 = add nsw i32 %648, %655
  %657 = icmp slt i32 %656, 1
  %658 = select i1 %657, i32 2147483647, i32 %656
  store i32 %658, i32* %515, align 8
  br label %720

659:                                              ; preds = %621
  %660 = bitcast %union.anon.0* %537 to [544 x i8]*
  %661 = zext i32 %622 to i64
  %662 = getelementptr inbounds [544 x i8], [544 x i8]* %660, i64 0, i64 %661
  %663 = load i8, i8* %662, align 1
  %664 = zext i8 %663 to i32
  %665 = icmp eq i8 %663, 0
  br i1 %665, label %710, label %666

666:                                              ; preds = %659
  %667 = load i32, i32* %548, align 8
  %668 = sub i32 64, %667
  %669 = icmp ult i32 %668, %664
  br i1 %669, label %672, label %670

670:                                              ; preds = %666
  %671 = load i64, i64* %546, align 8
  br label %691

672:                                              ; preds = %666
  %673 = load i64, i64* %553, align 8
  br label %674

674:                                              ; preds = %678, %672
  %675 = phi i64 [ %673, %672 ], [ %687, %678 ]
  %676 = phi i32 [ %667, %672 ], [ %686, %678 ]
  %677 = icmp eq i64 %675, 0
  br i1 %677, label %709, label %678

678:                                              ; preds = %674
  %679 = load i64, i64* %546, align 8
  %680 = lshr i64 %679, 8
  store i64 %680, i64* %546, align 8
  %681 = load i8*, i8** %550, align 8
  %682 = load i8, i8* %681, align 1
  %683 = zext i8 %682 to i64
  %684 = shl nuw i64 %683, 56
  %685 = or i64 %684, %680
  store i64 %685, i64* %546, align 8
  %686 = add i32 %676, -8
  store i32 %686, i32* %548, align 8
  %687 = add i64 %675, -1
  store i64 %687, i64* %553, align 8
  %688 = getelementptr inbounds i8, i8* %681, i64 1
  store i8* %688, i8** %550, align 8
  %689 = sub i32 72, %676
  %690 = icmp ult i32 %689, %664
  br i1 %690, label %674, label %691

691:                                              ; preds = %678, %670
  %692 = phi i64 [ %671, %670 ], [ %685, %678 ]
  %693 = phi i32 [ %667, %670 ], [ %686, %678 ]
  %694 = zext i32 %693 to i64
  %695 = lshr i64 %692, %694
  %696 = trunc i64 %695 to i32
  %697 = tail call i1 @llvm.is.constant.i32(i32 %664) #14
  br i1 %697, label %698, label %701

698:                                              ; preds = %691
  %699 = shl i32 -1, %664
  %700 = xor i32 %699, -1
  br label %705

701:                                              ; preds = %691
  %702 = zext i8 %663 to i64
  %703 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %702
  %704 = load i32, i32* %703, align 4
  br label %705

705:                                              ; preds = %701, %698
  %706 = phi i32 [ %700, %698 ], [ %704, %701 ]
  %707 = and i32 %706, %696
  %708 = add i32 %693, %664
  store i32 %708, i32* %548, align 8
  br label %710

709:                                              ; preds = %674
  store i32 %623, i32* %530, align 8
  store i64 %547, i64* %546, align 8
  store i32 %549, i32* %548, align 8
  store i64 %552, i64* %551, align 8
  store i64 %554, i64* %553, align 8
  br label %723

710:                                              ; preds = %705, %659
  %711 = phi i32 [ 0, %659 ], [ %707, %705 ]
  %712 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 59, i32 0, i32 11, i64 184
  %713 = bitcast i16* %712 to [544 x i32]*
  %714 = getelementptr inbounds [544 x i32], [544 x i32]* %713, i64 0, i64 %661
  %715 = load i32, i32* %714, align 4
  %716 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 34
  %717 = load i32, i32* %716, align 8
  %718 = shl i32 %711, %717
  %719 = add i32 %718, %715
  store i32 %719, i32* %515, align 8
  br label %720

720:                                              ; preds = %710, %640, %629
  %721 = phi i32 [ 0, %710 ], [ %630, %629 ], [ 0, %640 ]
  %722 = phi i32 [ %719, %710 ], [ %638, %629 ], [ %658, %640 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %538) #14
  br label %724

723:                                              ; preds = %709, %616
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %538) #14
  br label %901

724:                                              ; preds = %720, %518
  %725 = phi i32 [ %721, %720 ], [ %520, %518 ]
  %726 = phi i32 [ %722, %720 ], [ %528, %518 ]
  %727 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 10
  %728 = load i32, i32* %727, align 4
  %729 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 9
  %730 = load i32, i32* %729, align 8
  %731 = icmp eq i32 %728, %730
  br i1 %731, label %735, label %732

732:                                              ; preds = %724
  %733 = icmp slt i32 %514, %730
  %734 = select i1 %733, i32 %514, i32 %730
  store i32 %734, i32* %727, align 4
  br label %735

735:                                              ; preds = %732, %724
  %736 = phi i32 [ %728, %724 ], [ %734, %732 ]
  %737 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 40
  %738 = load i32, i32* %737, align 4
  %739 = icmp sgt i32 %726, %736
  br i1 %739, label %740, label %806

740:                                              ; preds = %735
  %741 = icmp sgt i32 %726, 2147483644
  br i1 %741, label %905, label %742

742:                                              ; preds = %740
  %743 = add i32 %738, -4
  %744 = icmp ult i32 %743, 21
  br i1 %744, label %745, label %905

745:                                              ; preds = %742
  %746 = xor i32 %736, -1
  %747 = add i32 %726, %746
  %748 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 56
  %749 = load %struct.BrotliDictionary*, %struct.BrotliDictionary** %748, align 8
  %750 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 57
  %751 = load %struct.BrotliTransforms*, %struct.BrotliTransforms** %750, align 8
  %752 = sext i32 %738 to i64
  %753 = getelementptr inbounds %struct.BrotliDictionary, %struct.BrotliDictionary* %749, i64 0, i32 1, i64 %752
  %754 = load i32, i32* %753, align 4
  %755 = getelementptr inbounds %struct.BrotliDictionary, %struct.BrotliDictionary* %749, i64 0, i32 0, i64 %752
  %756 = load i8, i8* %755, align 1
  %757 = zext i8 %756 to i32
  %758 = tail call i1 @llvm.is.constant.i32(i32 %757) #14
  br i1 %758, label %759, label %762

759:                                              ; preds = %745
  %760 = shl i32 -1, %757
  %761 = xor i32 %760, -1
  br label %766

762:                                              ; preds = %745
  %763 = zext i8 %756 to i64
  %764 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %763
  %765 = load i32, i32* %764, align 4
  br label %766

766:                                              ; preds = %762, %759
  %767 = phi i32 [ %761, %759 ], [ %765, %762 ]
  %768 = and i32 %767, %747
  %769 = ashr i32 %747, %757
  %770 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 13
  %771 = load i32, i32* %770, align 8
  %772 = add nsw i32 %771, %725
  store i32 %772, i32* %770, align 8
  %773 = mul nsw i32 %768, %738
  %774 = add nsw i32 %773, %754
  %775 = getelementptr inbounds %struct.BrotliDictionary, %struct.BrotliDictionary* %749, i64 0, i32 3
  %776 = load i8*, i8** %775, align 8
  %777 = icmp eq i8* %776, null
  br i1 %777, label %905, label %778, !prof !19

778:                                              ; preds = %766
  %779 = getelementptr inbounds %struct.BrotliTransforms, %struct.BrotliTransforms* %751, i64 0, i32 3
  %780 = load i32, i32* %779, align 8
  %781 = icmp slt i32 %769, %780
  br i1 %781, label %782, label %905

782:                                              ; preds = %778
  %783 = sext i32 %774 to i64
  %784 = getelementptr inbounds i8, i8* %776, i64 %783
  %785 = getelementptr inbounds %struct.BrotliTransforms, %struct.BrotliTransforms* %751, i64 0, i32 6, i64 0
  %786 = load i16, i16* %785, align 8
  %787 = sext i16 %786 to i32
  %788 = icmp eq i32 %769, %787
  %789 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %790 = load i8*, i8** %789, align 8
  %791 = sext i32 %514 to i64
  %792 = getelementptr inbounds i8, i8* %790, i64 %791
  br i1 %788, label %793, label %794

793:                                              ; preds = %782
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %792, i8* align 1 %784, i64 %752, i1 false) #14
  br label %796

794:                                              ; preds = %782
  %795 = tail call i32 @BrotliTransformDictionaryWord(i8* %792, i8* %784, i32 %738, %struct.BrotliTransforms* %751, i32 %769) #14
  br label %796

796:                                              ; preds = %794, %793
  %797 = phi i32 [ %738, %793 ], [ %795, %794 ]
  %798 = add nsw i32 %797, %514
  %799 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %800 = load i32, i32* %799, align 8
  %801 = sub nsw i32 %800, %797
  store i32 %801, i32* %799, align 8
  %802 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 11
  %803 = load i32, i32* %802, align 8
  %804 = icmp slt i32 %798, %803
  br i1 %804, label %853, label %805

805:                                              ; preds = %796
  store i32 15, i32* %11, align 8
  br label %901

806:                                              ; preds = %735
  %807 = sub nsw i32 %514, %726
  %808 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 12
  %809 = load i32, i32* %808, align 4
  %810 = and i32 %809, %807
  %811 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %812 = load i8*, i8** %811, align 8
  %813 = sext i32 %514 to i64
  %814 = getelementptr inbounds i8, i8* %812, i64 %813
  %815 = sext i32 %810 to i64
  %816 = getelementptr inbounds i8, i8* %812, i64 %815
  %817 = add nsw i32 %738, %514
  %818 = add nsw i32 %810, %738
  %819 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 13
  %820 = load i32, i32* %819, align 8
  %821 = and i32 %820, 3
  %822 = zext i32 %821 to i64
  %823 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 14, i64 %822
  store i32 %726, i32* %823, align 4
  %824 = add nsw i32 %820, 1
  store i32 %824, i32* %819, align 8
  %825 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %826 = load i32, i32* %825, align 8
  %827 = sub nsw i32 %826, %738
  store i32 %827, i32* %825, align 8
  %828 = bitcast i8* %816 to <4 x i32>*
  %829 = load <4 x i32>, <4 x i32>* %828, align 1
  %830 = bitcast i8* %814 to <4 x i32>*
  store <4 x i32> %829, <4 x i32>* %830, align 1
  %831 = icmp sgt i32 %818, %514
  %832 = icmp sgt i32 %817, %810
  %833 = and i1 %832, %831
  br i1 %833, label %859, label %834

834:                                              ; preds = %806
  %835 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 11
  %836 = load i32, i32* %835, align 8
  %837 = icmp slt i32 %817, %836
  %838 = icmp slt i32 %818, %836
  %839 = and i1 %837, %838
  br i1 %839, label %840, label %859

840:                                              ; preds = %834
  %841 = icmp sgt i32 %738, 16
  br i1 %841, label %842, label %853

842:                                              ; preds = %840
  %843 = icmp sgt i32 %738, 32
  %844 = getelementptr inbounds i8, i8* %814, i64 16
  %845 = getelementptr inbounds i8, i8* %816, i64 16
  br i1 %843, label %846, label %849

846:                                              ; preds = %842
  %847 = add nsw i32 %738, -16
  %848 = sext i32 %847 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %844, i8* align 1 %845, i64 %848, i1 false) #14
  br label %853

849:                                              ; preds = %842
  %850 = bitcast i8* %845 to <4 x i32>*
  %851 = load <4 x i32>, <4 x i32>* %850, align 1
  %852 = bitcast i8* %844 to <4 x i32>*
  store <4 x i32> %851, <4 x i32>* %852, align 1
  br label %853

853:                                              ; preds = %849, %846, %840, %796
  %854 = phi i32 [ %798, %796 ], [ %817, %846 ], [ %817, %849 ], [ %817, %840 ]
  %855 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %856 = load i32, i32* %855, align 8
  %857 = icmp slt i32 %856, 1
  br i1 %857, label %858, label %15

858:                                              ; preds = %853
  store i32 14, i32* %11, align 8
  br label %901

859:                                              ; preds = %834, %806, %13
  %860 = phi i64 [ %14, %13 ], [ %813, %806 ], [ %813, %834 ]
  %861 = phi i32 [ %9, %13 ], [ %738, %806 ], [ %738, %834 ]
  %862 = phi i32 [ %7, %13 ], [ %514, %806 ], [ %514, %834 ]
  %863 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 11
  %864 = load i32, i32* %863, align 8
  %865 = sub nsw i32 %864, %862
  %866 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %867 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 41
  %868 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 12
  br label %869

869:                                              ; preds = %875, %859
  %870 = phi i64 [ %886, %875 ], [ %860, %859 ]
  %871 = phi i32 [ %873, %875 ], [ %861, %859 ]
  %872 = phi i32 [ %887, %875 ], [ %865, %859 ]
  %873 = add nsw i32 %871, -1
  %874 = icmp sgt i32 %871, 0
  br i1 %874, label %875, label %891

875:                                              ; preds = %869
  %876 = load i8*, i8** %866, align 8
  %877 = load i32, i32* %867, align 8
  %878 = trunc i64 %870 to i32
  %879 = sub nsw i32 %878, %877
  %880 = load i32, i32* %868, align 4
  %881 = and i32 %879, %880
  %882 = sext i32 %881 to i64
  %883 = getelementptr inbounds i8, i8* %876, i64 %882
  %884 = load i8, i8* %883, align 1
  %885 = getelementptr inbounds i8, i8* %876, i64 %870
  store i8 %884, i8* %885, align 1
  %886 = add nsw i64 %870, 1
  %887 = add nsw i32 %872, -1
  %888 = icmp eq i32 %887, 0
  br i1 %888, label %889, label %869, !prof !19

889:                                              ; preds = %875
  %890 = trunc i64 %886 to i32
  store i32 16, i32* %11, align 8
  br label %901

891:                                              ; preds = %869
  %892 = trunc i64 %870 to i32
  %893 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 29
  %894 = load i32, i32* %893, align 8
  %895 = icmp slt i32 %894, 1
  br i1 %895, label %896, label %15

896:                                              ; preds = %891
  store i32 14, i32* %11, align 8
  br label %901

897:                                              ; preds = %272
  %898 = trunc i64 %269 to i32
  br label %901

899:                                              ; preds = %483, %393
  %900 = trunc i64 %388 to i32
  br label %901

901:                                              ; preds = %23, %899, %897, %896, %889, %858, %805, %723, %533, %511, %498, %364, %362, %223
  %902 = phi i32 [ %873, %896 ], [ %738, %805 ], [ %738, %858 ], [ %513, %533 ], [ %513, %723 ], [ 0, %511 ], [ %873, %889 ], [ %224, %223 ], [ %270, %362 ], [ %365, %364 ], [ %499, %498 ], [ %270, %897 ], [ %389, %899 ], [ %16, %23 ]
  %903 = phi i32 [ 1, %896 ], [ 1, %805 ], [ 1, %858 ], [ 2, %533 ], [ 2, %723 ], [ 1, %511 ], [ 1, %889 ], [ 2, %223 ], [ 2, %362 ], [ 1, %364 ], [ 1, %498 ], [ 2, %897 ], [ 2, %899 ], [ 2, %23 ]
  %904 = phi i32 [ %892, %896 ], [ %798, %805 ], [ %854, %858 ], [ %514, %533 ], [ %514, %723 ], [ %507, %511 ], [ %890, %889 ], [ %17, %223 ], [ %363, %362 ], [ %359, %364 ], [ %495, %498 ], [ %898, %897 ], [ %900, %899 ], [ %17, %23 ]
  store i32 %904, i32* %6, align 4
  store i32 %902, i32* %8, align 4
  br label %905

905:                                              ; preds = %1, %740, %742, %766, %778, %901
  %906 = phi i32 [ %903, %901 ], [ -31, %1 ], [ -16, %740 ], [ -12, %742 ], [ -11, %778 ], [ -19, %766 ]
  ret i32 %906

907:                                              ; preds = %560
  %908 = icmp eq i64 %567, 0
  br i1 %908, label %616, label %909

909:                                              ; preds = %907
  %910 = lshr i64 %565, 8
  store i64 %910, i64* %546, align 8
  %911 = load i8, i8* %568, align 1
  %912 = zext i8 %911 to i64
  %913 = shl nuw i64 %912, 56
  %914 = or i64 %913, %910
  store i64 %914, i64* %546, align 8
  %915 = add i32 %549, -16
  store i32 %915, i32* %548, align 8
  %916 = add i64 %554, -2
  store i64 %916, i64* %553, align 8
  %917 = getelementptr inbounds i8, i8* %558, i64 2
  store i8* %917, i8** %550, align 8
  %918 = sub i32 80, %549
  %919 = icmp ult i32 %918, 15
  br i1 %919, label %920, label %571

920:                                              ; preds = %909
  %921 = icmp eq i64 %916, 0
  br i1 %921, label %616, label %922

922:                                              ; preds = %920
  %923 = lshr i64 %914, 8
  store i64 %923, i64* %546, align 8
  %924 = load i8, i8* %917, align 1
  %925 = zext i8 %924 to i64
  %926 = shl nuw i64 %925, 56
  %927 = or i64 %926, %923
  store i64 %927, i64* %546, align 8
  %928 = add i32 %549, -24
  store i32 %928, i32* %548, align 8
  %929 = add i64 %554, -3
  store i64 %929, i64* %553, align 8
  %930 = getelementptr inbounds i8, i8* %558, i64 3
  store i8* %930, i8** %550, align 8
  br label %571

931:                                              ; preds = %288
  %932 = icmp eq i64 %297, 0
  br i1 %932, label %346, label %933

933:                                              ; preds = %931
  %934 = load i64, i64* %244, align 8
  %935 = lshr i64 %934, 8
  store i64 %935, i64* %244, align 8
  %936 = load i8*, i8** %245, align 8
  %937 = load i8, i8* %936, align 1
  %938 = zext i8 %937 to i64
  %939 = shl nuw i64 %938, 56
  %940 = or i64 %939, %935
  store i64 %940, i64* %244, align 8
  %941 = add i32 %280, -16
  store i32 %941, i32* %243, align 8
  %942 = add i64 %286, -2
  store i64 %942, i64* %246, align 8
  %943 = getelementptr inbounds i8, i8* %936, i64 1
  store i8* %943, i8** %245, align 8
  %944 = sub i32 80, %280
  %945 = icmp ult i32 %944, 15
  br i1 %945, label %946, label %301

946:                                              ; preds = %933
  %947 = icmp eq i64 %942, 0
  br i1 %947, label %346, label %948

948:                                              ; preds = %946
  %949 = load i64, i64* %244, align 8
  %950 = lshr i64 %949, 8
  store i64 %950, i64* %244, align 8
  %951 = load i8*, i8** %245, align 8
  %952 = load i8, i8* %951, align 1
  %953 = zext i8 %952 to i64
  %954 = shl nuw i64 %953, 56
  %955 = or i64 %954, %950
  store i64 %955, i64* %244, align 8
  %956 = add i32 %280, -24
  store i32 %956, i32* %243, align 8
  %957 = add i64 %286, -3
  store i64 %957, i64* %246, align 8
  %958 = getelementptr inbounds i8, i8* %951, i64 1
  store i8* %958, i8** %245, align 8
  br label %301

959:                                              ; preds = %425
  %960 = icmp eq i64 %434, 0
  br i1 %960, label %483, label %961

961:                                              ; preds = %959
  %962 = load i64, i64* %244, align 8
  %963 = lshr i64 %962, 8
  store i64 %963, i64* %244, align 8
  %964 = load i8*, i8** %245, align 8
  %965 = load i8, i8* %964, align 1
  %966 = zext i8 %965 to i64
  %967 = shl nuw i64 %966, 56
  %968 = or i64 %967, %963
  store i64 %968, i64* %244, align 8
  %969 = add i32 %417, -16
  store i32 %969, i32* %243, align 8
  %970 = add i64 %423, -2
  store i64 %970, i64* %246, align 8
  %971 = getelementptr inbounds i8, i8* %964, i64 1
  store i8* %971, i8** %245, align 8
  %972 = sub i32 80, %417
  %973 = icmp ult i32 %972, 15
  br i1 %973, label %974, label %438

974:                                              ; preds = %961
  %975 = icmp eq i64 %970, 0
  br i1 %975, label %483, label %976

976:                                              ; preds = %974
  %977 = load i64, i64* %244, align 8
  %978 = lshr i64 %977, 8
  store i64 %978, i64* %244, align 8
  %979 = load i8*, i8** %245, align 8
  %980 = load i8, i8* %979, align 1
  %981 = zext i8 %980 to i64
  %982 = shl nuw i64 %981, 56
  %983 = or i64 %982, %978
  store i64 %983, i64* %244, align 8
  %984 = add i32 %417, -24
  store i32 %984, i32* %243, align 8
  %985 = add i64 %423, -3
  store i64 %985, i64* %246, align 8
  %986 = getelementptr inbounds i8, i8* %979, i64 1
  store i8* %986, i8** %245, align 8
  br label %438

987:                                              ; preds = %43
  %988 = icmp eq i64 %50, 0
  br i1 %988, label %99, label %989

989:                                              ; preds = %987
  %990 = lshr i64 %48, 8
  store i64 %990, i64* %28, align 8
  %991 = load i8, i8* %51, align 1
  %992 = zext i8 %991 to i64
  %993 = shl nuw i64 %992, 56
  %994 = or i64 %993, %990
  store i64 %994, i64* %28, align 8
  %995 = add i32 %31, -16
  store i32 %995, i32* %30, align 8
  %996 = add i64 %35, -2
  store i64 %996, i64* %18, align 8
  %997 = getelementptr inbounds i8, i8* %41, i64 2
  store i8* %997, i8** %32, align 8
  %998 = sub i32 80, %31
  %999 = icmp ult i32 %998, 15
  br i1 %999, label %1000, label %54

1000:                                             ; preds = %989
  %1001 = icmp eq i64 %996, 0
  br i1 %1001, label %99, label %1002

1002:                                             ; preds = %1000
  %1003 = lshr i64 %994, 8
  store i64 %1003, i64* %28, align 8
  %1004 = load i8, i8* %997, align 1
  %1005 = zext i8 %1004 to i64
  %1006 = shl nuw i64 %1005, 56
  %1007 = or i64 %1006, %1003
  store i64 %1007, i64* %28, align 8
  %1008 = add i32 %31, -24
  store i32 %1008, i32* %30, align 8
  %1009 = add i64 %35, -3
  store i64 %1009, i64* %18, align 8
  %1010 = getelementptr inbounds i8, i8* %41, i64 3
  store i8* %1010, i8** %32, align 8
  br label %54
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @WrapRingBuffer(%struct.BrotliDecoderStateStruct* nocapture) unnamed_addr #7 {
  %2 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 50
  %3 = load i16, i16* %2, align 8
  %4 = and i16 %3, 8
  %5 = icmp eq i16 %4, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 17
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 8
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %10, i64 %13, i1 false)
  %14 = load i16, i16* %2, align 8
  %15 = and i16 %14, -9
  store i16 %15, i16* %2, align 8
  br label %16

16:                                               ; preds = %1, %6
  ret void
}

declare hidden void @BrotliDecoderStateCleanupAfterMetablock(%struct.BrotliDecoderStateStruct*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @BrotliDecoderHasMoreOutput(%struct.BrotliDecoderStateStruct* nocapture readonly) local_unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 15
  %3 = load i32, i32* %2, align 4
  %4 = icmp slt i32 %3, 0
  br i1 %4, label %25, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %25, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 8
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 11
  %13 = load i32, i32* %12, align 8
  %14 = sext i32 %11 to i64
  %15 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 42
  %16 = load i64, i64* %15, align 8
  %17 = sext i32 %13 to i64
  %18 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 43
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %14, %19
  %21 = mul i64 %16, %17
  %22 = sub i64 0, %21
  %23 = icmp ne i64 %20, %22
  %24 = zext i1 %23 to i32
  br label %25

25:                                               ; preds = %9, %5, %1
  %26 = phi i32 [ 0, %1 ], [ 0, %5 ], [ %24, %9 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @BrotliDecoderTakeOutput(%struct.BrotliDecoderStateStruct* nocapture, i64* nocapture) local_unnamed_addr #1 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #14
  store i8* null, i8** %3, align 8
  %6 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #14
  %7 = load i64, i64* %1, align 8
  %8 = icmp eq i64 %7, 0
  %9 = select i1 %8, i64 16777216, i64 %7
  store i64 %9, i64* %4, align 8
  %10 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %17, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 15
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %13, %2
  store i64 0, i64* %1, align 8
  br label %31

18:                                               ; preds = %13
  tail call fastcc void @WrapRingBuffer(%struct.BrotliDecoderStateStruct* %0)
  %19 = call fastcc i32 @WriteRingBuffer(%struct.BrotliDecoderStateStruct* %0, i64* nonnull %4, i8** nonnull %3, i64* null, i32 1)
  %20 = or i32 %19, 2
  %21 = icmp eq i32 %20, 3
  br i1 %21, label %22, label %26

22:                                               ; preds = %18
  %23 = load i64, i64* %4, align 8
  %24 = sub i64 %9, %23
  store i64 %24, i64* %1, align 8
  %25 = load i8*, i8** %3, align 8
  br label %31

26:                                               ; preds = %18
  %27 = icmp slt i32 %19, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %26
  %29 = call fastcc i32 @SaveErrorCode(%struct.BrotliDecoderStateStruct* %0, i32 %19)
  br label %30

30:                                               ; preds = %28, %26
  store i64 0, i64* %1, align 8
  store i8* null, i8** %3, align 8
  br label %31

31:                                               ; preds = %22, %30, %17
  %32 = phi i8* [ null, %17 ], [ null, %30 ], [ %25, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #14
  ret i8* %32
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @BrotliDecoderIsUsed(%struct.BrotliDecoderStateStruct* nocapture readonly) local_unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp ne i32 %7, 64
  %9 = zext i1 %8 to i32
  br label %10

10:                                               ; preds = %1, %5
  %11 = phi i32 [ 1, %1 ], [ %9, %5 ]
  ret i32 %11
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @BrotliDecoderIsFinished(%struct.BrotliDecoderStateStruct* nocapture readonly) local_unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 26
  br i1 %4, label %5, label %29

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 15
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %29, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 16
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %29, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 8
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 11
  %17 = load i32, i32* %16, align 8
  %18 = sext i32 %15 to i64
  %19 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 42
  %20 = load i64, i64* %19, align 8
  %21 = sext i32 %17 to i64
  %22 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 43
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %18, %23
  %25 = mul i64 %20, %21
  %26 = sub i64 0, %25
  %27 = icmp eq i64 %24, %26
  %28 = zext i1 %27 to i32
  br label %29

29:                                               ; preds = %13, %9, %5, %1
  %30 = phi i32 [ 0, %1 ], [ 1, %5 ], [ 1, %9 ], [ %28, %13 ]
  ret i32 %30
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @BrotliDecoderGetErrorCode(%struct.BrotliDecoderStateStruct* nocapture readonly) local_unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 15
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @BrotliDecoderErrorString(i32) local_unnamed_addr #10 {
  %2 = add i32 %0, 31
  %3 = icmp ult i32 %2, 35
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [35 x i8*], [35 x i8*]* @switch.table.BrotliDecoderErrorString, i64 0, i64 %5
  %7 = load i8*, i8** %6, align 8
  ret i8* %7

8:                                                ; preds = %1
  ret i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @BrotliDecoderVersion() local_unnamed_addr #10 {
  ret i32 16777225
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare hidden i32 @BrotliBuildSimpleHuffmanTable(%struct.HuffmanCode*, i32, i16*, i32) local_unnamed_addr #4

declare hidden void @BrotliBuildCodeLengthsHuffmanTable(%struct.HuffmanCode*, i8*, i16*) local_unnamed_addr #4

declare hidden i32 @BrotliBuildHuffmanTable(%struct.HuffmanCode*, i32, i16*, i16*) local_unnamed_addr #4

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i32(i32) #11

; Function Attrs: nofree noinline nounwind ssp uwtable
define internal fastcc i32 @SafeDecodeSymbol(%struct.HuffmanCode* nocapture readonly, %struct.BrotliBitReader* nocapture, i32* nocapture) unnamed_addr #12 {
  %4 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = sub i32 64, %5
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %16

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 0, i32 0
  %10 = load i8, i8* %9, align 2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %67

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 0, i32 1
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  store i32 %15, i32* %2, align 4
  br label %67

16:                                               ; preds = %3
  %17 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %1, i64 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = zext i32 %5 to i64
  %20 = lshr i64 %18, %19
  %21 = trunc i64 %20 to i32
  %22 = and i64 %20, 255
  %23 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %22
  %24 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %23, i64 0, i32 0
  %25 = load i8, i8* %24, align 2
  %26 = zext i8 %25 to i32
  %27 = icmp ult i8 %25, 9
  br i1 %27, label %28, label %35

28:                                               ; preds = %16
  %29 = icmp ult i32 %6, %26
  br i1 %29, label %67, label %30

30:                                               ; preds = %28
  %31 = add i32 %5, %26
  store i32 %31, i32* %4, align 8
  %32 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %22, i32 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  store i32 %34, i32* %2, align 4
  br label %67

35:                                               ; preds = %16
  %36 = icmp ult i32 %6, 9
  br i1 %36, label %67, label %37

37:                                               ; preds = %35
  %38 = tail call i1 @llvm.is.constant.i32(i32 %26) #14
  br i1 %38, label %39, label %42

39:                                               ; preds = %37
  %40 = shl i32 -1, %26
  %41 = xor i32 %40, -1
  br label %46

42:                                               ; preds = %37
  %43 = zext i8 %25 to i64
  %44 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %43
  %45 = load i32, i32* %44, align 4
  br label %46

46:                                               ; preds = %39, %42
  %47 = phi i32 [ %41, %39 ], [ %45, %42 ]
  %48 = and i32 %47, %21
  %49 = lshr i32 %48, 8
  %50 = sub i32 56, %5
  %51 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %0, i64 %22, i32 1
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i32
  %54 = add nuw nsw i32 %49, %53
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %23, i64 %55
  %57 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %56, i64 0, i32 0
  %58 = load i8, i8* %57, align 2
  %59 = zext i8 %58 to i32
  %60 = icmp ult i32 %50, %59
  br i1 %60, label %67, label %61

61:                                               ; preds = %46
  %62 = add i32 %5, 8
  %63 = add i32 %62, %59
  store i32 %63, i32* %4, align 8
  %64 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %56, i64 0, i32 1
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  store i32 %66, i32* %2, align 4
  br label %67

67:                                               ; preds = %46, %35, %28, %8, %61, %30, %12
  %68 = phi i32 [ 1, %12 ], [ 1, %30 ], [ 1, %61 ], [ 0, %8 ], [ 0, %28 ], [ 0, %35 ], [ 0, %46 ]
  ret i32 %68
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc void @InverseMoveToFrontTransform(i8* nocapture, i32, %struct.BrotliDecoderStateStruct* nocapture) unnamed_addr #8 {
  %4 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %2, i64 0, i32 44
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %2, i64 0, i32 45, i64 1
  store i32 50462976, i32* %6, align 4
  br label %7

7:                                                ; preds = %7, %3
  %8 = phi i32 [ 50462976, %3 ], [ %10, %7 ]
  %9 = phi i32 [ 1, %3 ], [ %13, %7 ]
  %10 = add i32 %8, 67372036
  %11 = zext i32 %9 to i64
  %12 = getelementptr inbounds i32, i32* %6, i64 %11
  store i32 %10, i32* %12, align 4
  %13 = add i32 %9, 1
  %14 = icmp ugt i32 %13, %5
  br i1 %14, label %15, label %7

15:                                               ; preds = %7
  %16 = bitcast i32* %6 to i8*
  %17 = icmp eq i32 %1, 0
  br i1 %17, label %72, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds i8, i8* %16, i64 -1
  %20 = zext i32 %1 to i64
  br label %21

21:                                               ; preds = %66, %18
  %22 = phi i64 [ 0, %18 ], [ %68, %66 ]
  %23 = phi i32 [ 0, %18 ], [ %67, %66 ]
  %24 = getelementptr inbounds i8, i8* %0, i64 %22
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = zext i8 %25 to i64
  %28 = getelementptr inbounds i8, i8* %16, i64 %27
  %29 = load i8, i8* %28, align 1
  store i8 %29, i8* %24, align 1
  store i8 %29, i8* %19, align 1
  %30 = add i8 %25, 1
  %31 = and i8 %30, 3
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %44, label %33

33:                                               ; preds = %21
  %34 = zext i8 %31 to i64
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ %38, %35 ], [ %27, %33 ]
  %37 = phi i64 [ %42, %35 ], [ %34, %33 ]
  %38 = add nsw i64 %36, -1
  %39 = getelementptr inbounds i8, i8* %16, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = getelementptr inbounds i8, i8* %16, i64 %36
  store i8 %40, i8* %41, align 1
  %42 = add i64 %37, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %35, !llvm.loop !21

44:                                               ; preds = %35, %21
  %45 = phi i64 [ %27, %21 ], [ %38, %35 ]
  %46 = icmp ult i8 %25, 3
  br i1 %46, label %66, label %47

47:                                               ; preds = %44, %47
  %48 = phi i64 [ %61, %47 ], [ %45, %44 ]
  %49 = add nsw i64 %48, -1
  %50 = getelementptr inbounds i8, i8* %16, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr inbounds i8, i8* %16, i64 %48
  store i8 %51, i8* %52, align 1
  %53 = add nsw i64 %48, -2
  %54 = getelementptr inbounds i8, i8* %16, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = getelementptr inbounds i8, i8* %16, i64 %49
  store i8 %55, i8* %56, align 1
  %57 = add nsw i64 %48, -3
  %58 = getelementptr inbounds i8, i8* %16, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = getelementptr inbounds i8, i8* %16, i64 %53
  store i8 %59, i8* %60, align 1
  %61 = add nsw i64 %48, -4
  %62 = getelementptr inbounds i8, i8* %16, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = getelementptr inbounds i8, i8* %16, i64 %57
  store i8 %63, i8* %64, align 1
  %65 = icmp sgt i64 %57, 0
  br i1 %65, label %47, label %66

66:                                               ; preds = %47, %44
  %67 = or i32 %23, %26
  %68 = add nuw nsw i64 %22, 1
  %69 = icmp eq i64 %68, %20
  br i1 %69, label %70, label %21

70:                                               ; preds = %66
  %71 = lshr i32 %67, 2
  br label %72

72:                                               ; preds = %70, %15
  %73 = phi i32 [ 0, %15 ], [ %71, %70 ]
  store i32 %73, i32* %4, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i32 @SafeDecodeCommandBlockSwitch(%struct.BrotliDecoderStateStruct* nocapture) unnamed_addr #7 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 32, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 25
  %7 = load %struct.HuffmanCode*, %struct.HuffmanCode** %6, align 8
  %8 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %7, i64 632
  %9 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 26
  %10 = load %struct.HuffmanCode*, %struct.HuffmanCode** %9, align 8
  %11 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %10, i64 396
  %12 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2
  %13 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 2
  %14 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #14
  store i32 -1431655766, i32* %3, align 4
  %15 = icmp ult i32 %5, 2
  br i1 %15, label %240, label %16

16:                                               ; preds = %1
  %17 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %12, i64 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %22 = bitcast i8** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = sub i32 64, %20
  %27 = icmp ult i32 %26, 15
  br i1 %27, label %28, label %42

28:                                               ; preds = %16
  %29 = inttoptr i64 %23 to i8*
  %30 = icmp eq i64 %25, 0
  br i1 %30, label %87, label %31

31:                                               ; preds = %28
  %32 = lshr i64 %18, 8
  store i64 %32, i64* %17, align 8
  %33 = load i8, i8* %29, align 1
  %34 = zext i8 %33 to i64
  %35 = shl nuw i64 %34, 56
  %36 = or i64 %35, %32
  store i64 %36, i64* %17, align 8
  %37 = add i32 %20, -8
  store i32 %37, i32* %19, align 8
  %38 = add i64 %25, -1
  store i64 %38, i64* %24, align 8
  %39 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %39, i8** %21, align 8
  %40 = sub i32 72, %20
  %41 = icmp ult i32 %40, 15
  br i1 %41, label %283, label %42

42:                                               ; preds = %31, %285, %298, %16
  %43 = phi i64 [ %18, %16 ], [ %36, %31 ], [ %290, %285 ], [ %303, %298 ]
  %44 = phi i32 [ %20, %16 ], [ %37, %31 ], [ %291, %285 ], [ %304, %298 ]
  %45 = zext i32 %44 to i64
  %46 = lshr i64 %43, %45
  %47 = and i64 %46, 255
  %48 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %8, i64 %47
  %49 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %48, i64 0, i32 0
  %50 = load i8, i8* %49, align 2
  %51 = icmp ugt i8 %50, 8
  br i1 %51, label %52, label %78

52:                                               ; preds = %42
  %53 = trunc i64 %46 to i32
  %54 = zext i8 %50 to i32
  %55 = add nsw i32 %54, -8
  %56 = add i32 %44, 8
  store i32 %56, i32* %19, align 8
  %57 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %8, i64 %47, i32 1
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = lshr i32 %53, 8
  %61 = and i32 %60, 127
  %62 = tail call i1 @llvm.is.constant.i32(i32 %55) #14
  br i1 %62, label %63, label %66

63:                                               ; preds = %52
  %64 = shl i32 -1, %55
  %65 = xor i32 %64, -1
  br label %70

66:                                               ; preds = %52
  %67 = zext i32 %55 to i64
  %68 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %67
  %69 = load i32, i32* %68, align 4
  br label %70

70:                                               ; preds = %66, %63
  %71 = phi i32 [ %65, %63 ], [ %69, %66 ]
  %72 = and i32 %61, %71
  %73 = add nuw nsw i32 %72, %59
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %48, i64 %74
  %76 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %75, i64 0, i32 0
  %77 = load i8, i8* %76, align 2
  br label %78

78:                                               ; preds = %70, %42
  %79 = phi i32 [ %56, %70 ], [ %44, %42 ]
  %80 = phi i8 [ %77, %70 ], [ %50, %42 ]
  %81 = phi %struct.HuffmanCode* [ %75, %70 ], [ %48, %42 ]
  %82 = zext i8 %80 to i32
  %83 = add i32 %79, %82
  store i32 %83, i32* %19, align 8
  %84 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %81, i64 0, i32 1
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  store i32 %86, i32* %3, align 4
  br label %90

87:                                               ; preds = %296, %283, %28
  %88 = call fastcc i32 @SafeDecodeSymbol(%struct.HuffmanCode* %8, %struct.BrotliBitReader* %12, i32* nonnull %3) #14
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %240, label %90

90:                                               ; preds = %87, %78
  %91 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 31, i64 1
  %92 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %92) #14
  store i32 -1431655766, i32* %2, align 4
  %93 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 49
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %168

96:                                               ; preds = %90
  %97 = load i32, i32* %19, align 8
  %98 = sub i32 64, %97
  %99 = icmp ult i32 %98, 15
  br i1 %99, label %102, label %100

100:                                              ; preds = %96
  %101 = load i64, i64* %17, align 8
  br label %118

102:                                              ; preds = %96
  %103 = load i64, i64* %24, align 8
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %163, label %105

105:                                              ; preds = %102
  %106 = load i64, i64* %17, align 8
  %107 = lshr i64 %106, 8
  store i64 %107, i64* %17, align 8
  %108 = load i8*, i8** %21, align 8
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i64
  %111 = shl nuw i64 %110, 56
  %112 = or i64 %111, %107
  store i64 %112, i64* %17, align 8
  %113 = add i32 %97, -8
  store i32 %113, i32* %19, align 8
  %114 = add i64 %103, -1
  store i64 %114, i64* %24, align 8
  %115 = getelementptr inbounds i8, i8* %108, i64 1
  store i8* %115, i8** %21, align 8
  %116 = sub i32 72, %97
  %117 = icmp ult i32 %116, 15
  br i1 %117, label %255, label %118

118:                                              ; preds = %105, %257, %272, %100
  %119 = phi i64 [ %101, %100 ], [ %112, %105 ], [ %264, %257 ], [ %279, %272 ]
  %120 = phi i32 [ %97, %100 ], [ %113, %105 ], [ %265, %257 ], [ %280, %272 ]
  %121 = zext i32 %120 to i64
  %122 = lshr i64 %119, %121
  %123 = and i64 %122, 255
  %124 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %11, i64 %123
  %125 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %124, i64 0, i32 0
  %126 = load i8, i8* %125, align 2
  %127 = icmp ugt i8 %126, 8
  br i1 %127, label %128, label %154

128:                                              ; preds = %118
  %129 = trunc i64 %122 to i32
  %130 = zext i8 %126 to i32
  %131 = add nsw i32 %130, -8
  %132 = add i32 %120, 8
  store i32 %132, i32* %19, align 8
  %133 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %11, i64 %123, i32 1
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  %136 = lshr i32 %129, 8
  %137 = and i32 %136, 127
  %138 = tail call i1 @llvm.is.constant.i32(i32 %131) #14
  br i1 %138, label %139, label %142

139:                                              ; preds = %128
  %140 = shl i32 -1, %131
  %141 = xor i32 %140, -1
  br label %146

142:                                              ; preds = %128
  %143 = zext i32 %131 to i64
  %144 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %143
  %145 = load i32, i32* %144, align 4
  br label %146

146:                                              ; preds = %142, %139
  %147 = phi i32 [ %141, %139 ], [ %145, %142 ]
  %148 = and i32 %137, %147
  %149 = add nuw nsw i32 %148, %135
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %124, i64 %150
  %152 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %151, i64 0, i32 0
  %153 = load i8, i8* %152, align 2
  br label %154

154:                                              ; preds = %146, %118
  %155 = phi i32 [ %132, %146 ], [ %120, %118 ]
  %156 = phi i8 [ %153, %146 ], [ %126, %118 ]
  %157 = phi %struct.HuffmanCode* [ %151, %146 ], [ %124, %118 ]
  %158 = zext i8 %156 to i32
  %159 = add i32 %155, %158
  store i32 %159, i32* %19, align 8
  %160 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %157, i64 0, i32 1
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  store i32 %162, i32* %2, align 4
  br label %171

163:                                              ; preds = %270, %255, %102
  %164 = call fastcc i32 @SafeDecodeSymbol(%struct.HuffmanCode* %11, %struct.BrotliBitReader* %12, i32* nonnull %2) #14
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %219, label %166

166:                                              ; preds = %163
  %167 = load i32, i32* %2, align 4
  br label %171

168:                                              ; preds = %90
  %169 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 30
  %170 = load i32, i32* %169, align 4
  store i32 %170, i32* %2, align 4
  br label %171

171:                                              ; preds = %168, %166, %154
  %172 = phi i32 [ %167, %166 ], [ %162, %154 ], [ %170, %168 ]
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %173, i32 1
  %175 = load i8, i8* %174, align 2
  %176 = zext i8 %175 to i32
  %177 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %173, i32 0
  %178 = load i16, i16* %177, align 4
  %179 = load i32, i32* %19, align 8
  %180 = sub i32 64, %179
  %181 = icmp ult i32 %180, %176
  br i1 %181, label %184, label %182

182:                                              ; preds = %171
  %183 = load i64, i64* %17, align 8
  br label %203

184:                                              ; preds = %171
  %185 = load i64, i64* %24, align 8
  br label %186

186:                                              ; preds = %190, %184
  %187 = phi i64 [ %185, %184 ], [ %199, %190 ]
  %188 = phi i32 [ %179, %184 ], [ %198, %190 ]
  %189 = icmp eq i64 %187, 0
  br i1 %189, label %217, label %190

190:                                              ; preds = %186
  %191 = load i64, i64* %17, align 8
  %192 = lshr i64 %191, 8
  store i64 %192, i64* %17, align 8
  %193 = load i8*, i8** %21, align 8
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i64
  %196 = shl nuw i64 %195, 56
  %197 = or i64 %196, %192
  store i64 %197, i64* %17, align 8
  %198 = add i32 %188, -8
  store i32 %198, i32* %19, align 8
  %199 = add i64 %187, -1
  store i64 %199, i64* %24, align 8
  %200 = getelementptr inbounds i8, i8* %193, i64 1
  store i8* %200, i8** %21, align 8
  %201 = sub i32 72, %188
  %202 = icmp ult i32 %201, %176
  br i1 %202, label %186, label %203

203:                                              ; preds = %190, %182
  %204 = phi i64 [ %183, %182 ], [ %197, %190 ]
  %205 = phi i32 [ %179, %182 ], [ %198, %190 ]
  %206 = zext i32 %205 to i64
  %207 = lshr i64 %204, %206
  %208 = trunc i64 %207 to i32
  %209 = tail call i1 @llvm.is.constant.i32(i32 %176) #14
  br i1 %209, label %210, label %213

210:                                              ; preds = %203
  %211 = shl i32 -1, %176
  %212 = xor i32 %211, -1
  br label %220

213:                                              ; preds = %203
  %214 = zext i8 %175 to i64
  %215 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %214
  %216 = load i32, i32* %215, align 4
  br label %220

217:                                              ; preds = %186
  %218 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 30
  store i32 %172, i32* %218, align 4
  store i32 1, i32* %93, align 4
  br label %219

219:                                              ; preds = %163, %217
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #14
  store i32 0, i32* %93, align 4
  store i64 %18, i64* %17, align 8
  store i32 %20, i32* %19, align 8
  store i64 %23, i64* %22, align 8
  store i64 %25, i64* %24, align 8
  br label %240

220:                                              ; preds = %213, %210
  %221 = phi i32 [ %212, %210 ], [ %216, %213 ]
  %222 = and i32 %221, %208
  %223 = add i32 %205, %176
  store i32 %223, i32* %19, align 8
  %224 = zext i16 %178 to i32
  %225 = add i32 %222, %224
  store i32 %225, i32* %91, align 4
  store i32 0, i32* %93, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #14
  %226 = load i32, i32* %3, align 4
  switch i32 %226, label %233 [
    i32 1, label %227
    i32 0, label %231
  ]

227:                                              ; preds = %220
  %228 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 3
  %229 = load i32, i32* %228, align 4
  %230 = add i32 %229, 1
  store i32 %230, i32* %3, align 4
  br label %235

231:                                              ; preds = %220
  %232 = load i32, i32* %13, align 4
  store i32 %232, i32* %3, align 4
  br label %235

233:                                              ; preds = %220
  %234 = add i32 %226, -2
  store i32 %234, i32* %3, align 4
  br label %235

235:                                              ; preds = %233, %231, %227
  %236 = phi i32 [ %232, %231 ], [ %234, %233 ], [ %230, %227 ]
  %237 = icmp ult i32 %236, %5
  br i1 %237, label %241, label %238

238:                                              ; preds = %235
  %239 = sub i32 %236, %5
  store i32 %239, i32* %3, align 4
  br label %241

240:                                              ; preds = %219, %87, %1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #14
  br label %253

241:                                              ; preds = %238, %235
  %242 = phi i32 [ %236, %235 ], [ %239, %238 ]
  %243 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 3
  %244 = load i32, i32* %243, align 4
  store i32 %244, i32* %13, align 4
  store i32 %242, i32* %243, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #14
  %245 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 23, i32 0
  %246 = load %struct.HuffmanCode**, %struct.HuffmanCode*** %245, align 8
  %247 = zext i32 %242 to i64
  %248 = getelementptr inbounds %struct.HuffmanCode*, %struct.HuffmanCode** %246, i64 %247
  %249 = bitcast %struct.HuffmanCode** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 18
  %252 = bitcast %struct.HuffmanCode** %251 to i64*
  store i64 %250, i64* %252, align 8
  br label %253

253:                                              ; preds = %240, %241
  %254 = phi i32 [ 1, %241 ], [ 0, %240 ]
  ret i32 %254

255:                                              ; preds = %105
  %256 = icmp eq i64 %114, 0
  br i1 %256, label %163, label %257

257:                                              ; preds = %255
  %258 = load i64, i64* %17, align 8
  %259 = lshr i64 %258, 8
  store i64 %259, i64* %17, align 8
  %260 = load i8*, i8** %21, align 8
  %261 = load i8, i8* %260, align 1
  %262 = zext i8 %261 to i64
  %263 = shl nuw i64 %262, 56
  %264 = or i64 %263, %259
  store i64 %264, i64* %17, align 8
  %265 = add i32 %97, -16
  store i32 %265, i32* %19, align 8
  %266 = add i64 %103, -2
  store i64 %266, i64* %24, align 8
  %267 = getelementptr inbounds i8, i8* %260, i64 1
  store i8* %267, i8** %21, align 8
  %268 = sub i32 80, %97
  %269 = icmp ult i32 %268, 15
  br i1 %269, label %270, label %118

270:                                              ; preds = %257
  %271 = icmp eq i64 %266, 0
  br i1 %271, label %163, label %272

272:                                              ; preds = %270
  %273 = load i64, i64* %17, align 8
  %274 = lshr i64 %273, 8
  store i64 %274, i64* %17, align 8
  %275 = load i8*, i8** %21, align 8
  %276 = load i8, i8* %275, align 1
  %277 = zext i8 %276 to i64
  %278 = shl nuw i64 %277, 56
  %279 = or i64 %278, %274
  store i64 %279, i64* %17, align 8
  %280 = add i32 %97, -24
  store i32 %280, i32* %19, align 8
  %281 = add i64 %103, -3
  store i64 %281, i64* %24, align 8
  %282 = getelementptr inbounds i8, i8* %275, i64 1
  store i8* %282, i8** %21, align 8
  br label %118

283:                                              ; preds = %31
  %284 = icmp eq i64 %38, 0
  br i1 %284, label %87, label %285

285:                                              ; preds = %283
  %286 = lshr i64 %36, 8
  store i64 %286, i64* %17, align 8
  %287 = load i8, i8* %39, align 1
  %288 = zext i8 %287 to i64
  %289 = shl nuw i64 %288, 56
  %290 = or i64 %289, %286
  store i64 %290, i64* %17, align 8
  %291 = add i32 %20, -16
  store i32 %291, i32* %19, align 8
  %292 = add i64 %25, -2
  store i64 %292, i64* %24, align 8
  %293 = getelementptr inbounds i8, i8* %29, i64 2
  store i8* %293, i8** %21, align 8
  %294 = sub i32 80, %20
  %295 = icmp ult i32 %294, 15
  br i1 %295, label %296, label %42

296:                                              ; preds = %285
  %297 = icmp eq i64 %292, 0
  br i1 %297, label %87, label %298

298:                                              ; preds = %296
  %299 = lshr i64 %290, 8
  store i64 %299, i64* %17, align 8
  %300 = load i8, i8* %293, align 1
  %301 = zext i8 %300 to i64
  %302 = shl nuw i64 %301, 56
  %303 = or i64 %302, %299
  store i64 %303, i64* %17, align 8
  %304 = add i32 %20, -24
  store i32 %304, i32* %19, align 8
  %305 = add i64 %25, -3
  store i64 %305, i64* %24, align 8
  %306 = getelementptr inbounds i8, i8* %29, i64 3
  store i8* %306, i8** %21, align 8
  br label %42
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @DecodeCommandBlockSwitch(%struct.BrotliDecoderStateStruct*) unnamed_addr #7 {
  %2 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 32, i64 1
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 25
  %5 = load %struct.HuffmanCode*, %struct.HuffmanCode** %4, align 8
  %6 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %5, i64 632
  %7 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 26
  %8 = load %struct.HuffmanCode*, %struct.HuffmanCode** %7, align 8
  %9 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %8, i64 396
  %10 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 2
  %11 = icmp ult i32 %3, 2
  br i1 %11, label %233, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp ugt i32 %14, 47
  %16 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 0
  %17 = load i64, i64* %16, align 8
  br i1 %15, label %18, label %31

18:                                               ; preds = %12
  %19 = lshr i64 %17, 48
  store i64 %19, i64* %16, align 8
  %20 = xor i32 %14, 48
  store i32 %20, i32* %13, align 8
  %21 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %22 = load i8*, i8** %21, align 8
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = shl i64 %24, 16
  %26 = or i64 %25, %19
  store i64 %26, i64* %16, align 8
  %27 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %28 = load i64, i64* %27, align 8
  %29 = add i64 %28, -6
  store i64 %29, i64* %27, align 8
  %30 = getelementptr inbounds i8, i8* %22, i64 6
  store i8* %30, i8** %21, align 8
  br label %31

31:                                               ; preds = %18, %12
  %32 = phi i32 [ %20, %18 ], [ %14, %12 ]
  %33 = phi i64 [ %26, %18 ], [ %17, %12 ]
  %34 = zext i32 %32 to i64
  %35 = lshr i64 %33, %34
  %36 = and i64 %35, 255
  %37 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %6, i64 %36
  %38 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %37, i64 0, i32 0
  %39 = load i8, i8* %38, align 2
  %40 = icmp ugt i8 %39, 8
  br i1 %40, label %41, label %66

41:                                               ; preds = %31
  %42 = trunc i64 %35 to i32
  %43 = zext i8 %39 to i32
  %44 = add nsw i32 %43, -8
  %45 = add i32 %32, 8
  store i32 %45, i32* %13, align 8
  %46 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %6, i64 %36, i32 1
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = lshr i32 %42, 8
  %50 = tail call i1 @llvm.is.constant.i32(i32 %44) #14
  br i1 %50, label %51, label %54

51:                                               ; preds = %41
  %52 = shl i32 -1, %44
  %53 = xor i32 %52, -1
  br label %58

54:                                               ; preds = %41
  %55 = zext i32 %44 to i64
  %56 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %55
  %57 = load i32, i32* %56, align 4
  br label %58

58:                                               ; preds = %54, %51
  %59 = phi i32 [ %53, %51 ], [ %57, %54 ]
  %60 = and i32 %59, %49
  %61 = add nuw nsw i32 %60, %48
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %37, i64 %62
  %64 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %63, i64 0, i32 0
  %65 = load i8, i8* %64, align 2
  br label %66

66:                                               ; preds = %58, %31
  %67 = phi i32 [ %45, %58 ], [ %32, %31 ]
  %68 = phi i8 [ %65, %58 ], [ %39, %31 ]
  %69 = phi %struct.HuffmanCode* [ %63, %58 ], [ %37, %31 ]
  %70 = zext i8 %68 to i32
  %71 = add i32 %67, %70
  store i32 %71, i32* %13, align 8
  %72 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %69, i64 0, i32 1
  %73 = load i16, i16* %72, align 2
  %74 = zext i16 %73 to i32
  %75 = icmp ugt i32 %71, 47
  br i1 %75, label %76, label %89

76:                                               ; preds = %66
  %77 = lshr i64 %33, 48
  store i64 %77, i64* %16, align 8
  %78 = xor i32 %71, 48
  store i32 %78, i32* %13, align 8
  %79 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %80 = load i8*, i8** %79, align 8
  %81 = bitcast i8* %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = shl i64 %82, 16
  %84 = or i64 %83, %77
  store i64 %84, i64* %16, align 8
  %85 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %86 = load i64, i64* %85, align 8
  %87 = add i64 %86, -6
  store i64 %87, i64* %85, align 8
  %88 = getelementptr inbounds i8, i8* %80, i64 6
  store i8* %88, i8** %79, align 8
  br label %89

89:                                               ; preds = %76, %66
  %90 = phi i32 [ %78, %76 ], [ %71, %66 ]
  %91 = phi i64 [ %84, %76 ], [ %33, %66 ]
  %92 = zext i32 %90 to i64
  %93 = lshr i64 %91, %92
  %94 = and i64 %93, 255
  %95 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %9, i64 %94
  %96 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %95, i64 0, i32 0
  %97 = load i8, i8* %96, align 2
  %98 = icmp ugt i8 %97, 8
  br i1 %98, label %99, label %124

99:                                               ; preds = %89
  %100 = trunc i64 %93 to i32
  %101 = zext i8 %97 to i32
  %102 = add nsw i32 %101, -8
  %103 = add i32 %90, 8
  store i32 %103, i32* %13, align 8
  %104 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %9, i64 %94, i32 1
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = lshr i32 %100, 8
  %108 = tail call i1 @llvm.is.constant.i32(i32 %102) #14
  br i1 %108, label %109, label %112

109:                                              ; preds = %99
  %110 = shl i32 -1, %102
  %111 = xor i32 %110, -1
  br label %116

112:                                              ; preds = %99
  %113 = zext i32 %102 to i64
  %114 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %113
  %115 = load i32, i32* %114, align 4
  br label %116

116:                                              ; preds = %112, %109
  %117 = phi i32 [ %111, %109 ], [ %115, %112 ]
  %118 = and i32 %117, %107
  %119 = add nuw nsw i32 %118, %106
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %95, i64 %120
  %122 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %121, i64 0, i32 0
  %123 = load i8, i8* %122, align 2
  br label %124

124:                                              ; preds = %116, %89
  %125 = phi i32 [ %103, %116 ], [ %90, %89 ]
  %126 = phi i8 [ %123, %116 ], [ %97, %89 ]
  %127 = phi %struct.HuffmanCode* [ %121, %116 ], [ %95, %89 ]
  %128 = zext i8 %126 to i32
  %129 = add i32 %125, %128
  store i32 %129, i32* %13, align 8
  %130 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %127, i64 0, i32 1
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i64
  %133 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %132, i32 1
  %134 = load i8, i8* %133, align 2
  %135 = zext i8 %134 to i32
  %136 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %132, i32 0
  %137 = load i16, i16* %136, align 4
  %138 = zext i16 %137 to i32
  %139 = tail call i1 @llvm.is.constant.i32(i32 %135) #14
  %140 = icmp ult i8 %134, 9
  %141 = and i1 %140, %139
  br i1 %141, label %142, label %157

142:                                              ; preds = %124
  %143 = icmp ugt i32 %129, 55
  br i1 %143, label %144, label %191

144:                                              ; preds = %142
  %145 = lshr i64 %91, 56
  store i64 %145, i64* %16, align 8
  %146 = xor i32 %129, 56
  store i32 %146, i32* %13, align 8
  %147 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %148 = load i8*, i8** %147, align 8
  %149 = bitcast i8* %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = shl i64 %150, 8
  %152 = or i64 %151, %145
  store i64 %152, i64* %16, align 8
  %153 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %154 = load i64, i64* %153, align 8
  %155 = add i64 %154, -7
  store i64 %155, i64* %153, align 8
  %156 = getelementptr inbounds i8, i8* %148, i64 7
  store i8* %156, i8** %147, align 8
  br label %191

157:                                              ; preds = %124
  %158 = icmp ult i8 %134, 17
  %159 = and i1 %158, %139
  br i1 %159, label %160, label %175

160:                                              ; preds = %157
  %161 = icmp ugt i32 %129, 47
  br i1 %161, label %162, label %191

162:                                              ; preds = %160
  %163 = lshr i64 %91, 48
  store i64 %163, i64* %16, align 8
  %164 = xor i32 %129, 48
  store i32 %164, i32* %13, align 8
  %165 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %166 = load i8*, i8** %165, align 8
  %167 = bitcast i8* %166 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = shl i64 %168, 16
  %170 = or i64 %169, %163
  store i64 %170, i64* %16, align 8
  %171 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %172 = load i64, i64* %171, align 8
  %173 = add i64 %172, -6
  store i64 %173, i64* %171, align 8
  %174 = getelementptr inbounds i8, i8* %166, i64 6
  store i8* %174, i8** %165, align 8
  br label %191

175:                                              ; preds = %157
  %176 = icmp ugt i32 %129, 31
  br i1 %176, label %177, label %191

177:                                              ; preds = %175
  %178 = lshr i64 %91, 32
  store i64 %178, i64* %16, align 8
  %179 = xor i32 %129, 32
  store i32 %179, i32* %13, align 8
  %180 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %181 = load i8*, i8** %180, align 8
  %182 = bitcast i8* %181 to i32*
  %183 = load i32, i32* %182, align 4
  %184 = zext i32 %183 to i64
  %185 = shl nuw i64 %184, 32
  %186 = or i64 %185, %178
  store i64 %186, i64* %16, align 8
  %187 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %188 = load i64, i64* %187, align 8
  %189 = add i64 %188, -4
  store i64 %189, i64* %187, align 8
  %190 = getelementptr inbounds i8, i8* %181, i64 4
  store i8* %190, i8** %180, align 8
  br label %191

191:                                              ; preds = %177, %175, %162, %160, %144, %142
  %192 = phi i64 [ %91, %142 ], [ %152, %144 ], [ %91, %160 ], [ %170, %162 ], [ %91, %175 ], [ %186, %177 ]
  %193 = phi i32 [ %129, %142 ], [ %146, %144 ], [ %129, %160 ], [ %164, %162 ], [ %129, %175 ], [ %179, %177 ]
  %194 = zext i32 %193 to i64
  %195 = lshr i64 %192, %194
  %196 = trunc i64 %195 to i32
  br i1 %139, label %197, label %200

197:                                              ; preds = %191
  %198 = shl i32 -1, %135
  %199 = xor i32 %198, -1
  br label %204

200:                                              ; preds = %191
  %201 = zext i8 %134 to i64
  %202 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %201
  %203 = load i32, i32* %202, align 4
  br label %204

204:                                              ; preds = %200, %197
  %205 = phi i32 [ %199, %197 ], [ %203, %200 ]
  %206 = and i32 %205, %196
  %207 = add i32 %193, %135
  store i32 %207, i32* %13, align 8
  %208 = add i32 %206, %138
  %209 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 31, i64 1
  store i32 %208, i32* %209, align 4
  switch i16 %73, label %216 [
    i16 1, label %210
    i16 0, label %214
  ]

210:                                              ; preds = %204
  %211 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 3
  %212 = load i32, i32* %211, align 4
  %213 = add i32 %212, 1
  br label %218

214:                                              ; preds = %204
  %215 = load i32, i32* %10, align 4
  br label %218

216:                                              ; preds = %204
  %217 = add nsw i32 %74, -2
  br label %218

218:                                              ; preds = %216, %214, %210
  %219 = phi i32 [ %215, %214 ], [ %217, %216 ], [ %213, %210 ]
  %220 = icmp ult i32 %219, %3
  %221 = select i1 %220, i32 0, i32 %3
  %222 = sub i32 %219, %221
  %223 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 3
  %224 = load i32, i32* %223, align 4
  store i32 %224, i32* %10, align 4
  store i32 %222, i32* %223, align 4
  %225 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 23, i32 0
  %226 = load %struct.HuffmanCode**, %struct.HuffmanCode*** %225, align 8
  %227 = zext i32 %222 to i64
  %228 = getelementptr inbounds %struct.HuffmanCode*, %struct.HuffmanCode** %226, i64 %227
  %229 = bitcast %struct.HuffmanCode** %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 18
  %232 = bitcast %struct.HuffmanCode** %231 to i64*
  store i64 %230, i64* %232, align 8
  br label %233

233:                                              ; preds = %1, %218
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i32 @SafeDecodeLiteralBlockSwitch(%struct.BrotliDecoderStateStruct*) unnamed_addr #7 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 32, i64 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 25
  %7 = load %struct.HuffmanCode*, %struct.HuffmanCode** %6, align 8
  %8 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 26
  %9 = load %struct.HuffmanCode*, %struct.HuffmanCode** %8, align 8
  %10 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2
  %11 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 0
  %12 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #14
  store i32 -1431655766, i32* %3, align 4
  %13 = icmp ult i32 %5, 2
  br i1 %13, label %238, label %14

14:                                               ; preds = %1
  %15 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %10, i64 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %20 = bitcast i8** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %23 = load i64, i64* %22, align 8
  %24 = sub i32 64, %18
  %25 = icmp ult i32 %24, 15
  br i1 %25, label %26, label %40

26:                                               ; preds = %14
  %27 = inttoptr i64 %21 to i8*
  %28 = icmp eq i64 %23, 0
  br i1 %28, label %85, label %29

29:                                               ; preds = %26
  %30 = lshr i64 %16, 8
  store i64 %30, i64* %15, align 8
  %31 = load i8, i8* %27, align 1
  %32 = zext i8 %31 to i64
  %33 = shl nuw i64 %32, 56
  %34 = or i64 %33, %30
  store i64 %34, i64* %15, align 8
  %35 = add i32 %18, -8
  store i32 %35, i32* %17, align 8
  %36 = add i64 %23, -1
  store i64 %36, i64* %22, align 8
  %37 = getelementptr inbounds i8, i8* %27, i64 1
  store i8* %37, i8** %19, align 8
  %38 = sub i32 72, %18
  %39 = icmp ult i32 %38, 15
  br i1 %39, label %309, label %40

40:                                               ; preds = %29, %311, %324, %14
  %41 = phi i64 [ %16, %14 ], [ %34, %29 ], [ %316, %311 ], [ %329, %324 ]
  %42 = phi i32 [ %18, %14 ], [ %35, %29 ], [ %317, %311 ], [ %330, %324 ]
  %43 = zext i32 %42 to i64
  %44 = lshr i64 %41, %43
  %45 = and i64 %44, 255
  %46 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %7, i64 %45
  %47 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %46, i64 0, i32 0
  %48 = load i8, i8* %47, align 2
  %49 = icmp ugt i8 %48, 8
  br i1 %49, label %50, label %76

50:                                               ; preds = %40
  %51 = trunc i64 %44 to i32
  %52 = zext i8 %48 to i32
  %53 = add nsw i32 %52, -8
  %54 = add i32 %42, 8
  store i32 %54, i32* %17, align 8
  %55 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %7, i64 %45, i32 1
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = lshr i32 %51, 8
  %59 = and i32 %58, 127
  %60 = tail call i1 @llvm.is.constant.i32(i32 %53) #14
  br i1 %60, label %61, label %64

61:                                               ; preds = %50
  %62 = shl i32 -1, %53
  %63 = xor i32 %62, -1
  br label %68

64:                                               ; preds = %50
  %65 = zext i32 %53 to i64
  %66 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %65
  %67 = load i32, i32* %66, align 4
  br label %68

68:                                               ; preds = %64, %61
  %69 = phi i32 [ %63, %61 ], [ %67, %64 ]
  %70 = and i32 %59, %69
  %71 = add nuw nsw i32 %70, %57
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %46, i64 %72
  %74 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %73, i64 0, i32 0
  %75 = load i8, i8* %74, align 2
  br label %76

76:                                               ; preds = %68, %40
  %77 = phi i32 [ %54, %68 ], [ %42, %40 ]
  %78 = phi i8 [ %75, %68 ], [ %48, %40 ]
  %79 = phi %struct.HuffmanCode* [ %73, %68 ], [ %46, %40 ]
  %80 = zext i8 %78 to i32
  %81 = add i32 %77, %80
  store i32 %81, i32* %17, align 8
  %82 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %79, i64 0, i32 1
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  store i32 %84, i32* %3, align 4
  br label %88

85:                                               ; preds = %322, %309, %26
  %86 = call fastcc i32 @SafeDecodeSymbol(%struct.HuffmanCode* %7, %struct.BrotliBitReader* %10, i32* nonnull %3) #14
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %238, label %88

88:                                               ; preds = %85, %76
  %89 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 31, i64 0
  %90 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %90) #14
  store i32 -1431655766, i32* %2, align 4
  %91 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 49
  %92 = load i32, i32* %91, align 4
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %166

94:                                               ; preds = %88
  %95 = load i32, i32* %17, align 8
  %96 = sub i32 64, %95
  %97 = icmp ult i32 %96, 15
  br i1 %97, label %100, label %98

98:                                               ; preds = %94
  %99 = load i64, i64* %15, align 8
  br label %116

100:                                              ; preds = %94
  %101 = load i64, i64* %22, align 8
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %161, label %103

103:                                              ; preds = %100
  %104 = load i64, i64* %15, align 8
  %105 = lshr i64 %104, 8
  store i64 %105, i64* %15, align 8
  %106 = load i8*, i8** %19, align 8
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i64
  %109 = shl nuw i64 %108, 56
  %110 = or i64 %109, %105
  store i64 %110, i64* %15, align 8
  %111 = add i32 %95, -8
  store i32 %111, i32* %17, align 8
  %112 = add i64 %101, -1
  store i64 %112, i64* %22, align 8
  %113 = getelementptr inbounds i8, i8* %106, i64 1
  store i8* %113, i8** %19, align 8
  %114 = sub i32 72, %95
  %115 = icmp ult i32 %114, 15
  br i1 %115, label %281, label %116

116:                                              ; preds = %103, %283, %298, %98
  %117 = phi i64 [ %99, %98 ], [ %110, %103 ], [ %290, %283 ], [ %305, %298 ]
  %118 = phi i32 [ %95, %98 ], [ %111, %103 ], [ %291, %283 ], [ %306, %298 ]
  %119 = zext i32 %118 to i64
  %120 = lshr i64 %117, %119
  %121 = and i64 %120, 255
  %122 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %9, i64 %121
  %123 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %122, i64 0, i32 0
  %124 = load i8, i8* %123, align 2
  %125 = icmp ugt i8 %124, 8
  br i1 %125, label %126, label %152

126:                                              ; preds = %116
  %127 = trunc i64 %120 to i32
  %128 = zext i8 %124 to i32
  %129 = add nsw i32 %128, -8
  %130 = add i32 %118, 8
  store i32 %130, i32* %17, align 8
  %131 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %9, i64 %121, i32 1
  %132 = load i16, i16* %131, align 2
  %133 = zext i16 %132 to i32
  %134 = lshr i32 %127, 8
  %135 = and i32 %134, 127
  %136 = tail call i1 @llvm.is.constant.i32(i32 %129) #14
  br i1 %136, label %137, label %140

137:                                              ; preds = %126
  %138 = shl i32 -1, %129
  %139 = xor i32 %138, -1
  br label %144

140:                                              ; preds = %126
  %141 = zext i32 %129 to i64
  %142 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %141
  %143 = load i32, i32* %142, align 4
  br label %144

144:                                              ; preds = %140, %137
  %145 = phi i32 [ %139, %137 ], [ %143, %140 ]
  %146 = and i32 %135, %145
  %147 = add nuw nsw i32 %146, %133
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %122, i64 %148
  %150 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %149, i64 0, i32 0
  %151 = load i8, i8* %150, align 2
  br label %152

152:                                              ; preds = %144, %116
  %153 = phi i32 [ %130, %144 ], [ %118, %116 ]
  %154 = phi i8 [ %151, %144 ], [ %124, %116 ]
  %155 = phi %struct.HuffmanCode* [ %149, %144 ], [ %122, %116 ]
  %156 = zext i8 %154 to i32
  %157 = add i32 %153, %156
  store i32 %157, i32* %17, align 8
  %158 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %155, i64 0, i32 1
  %159 = load i16, i16* %158, align 2
  %160 = zext i16 %159 to i32
  store i32 %160, i32* %2, align 4
  br label %169

161:                                              ; preds = %296, %281, %100
  %162 = call fastcc i32 @SafeDecodeSymbol(%struct.HuffmanCode* %9, %struct.BrotliBitReader* %10, i32* nonnull %2) #14
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %217, label %164

164:                                              ; preds = %161
  %165 = load i32, i32* %2, align 4
  br label %169

166:                                              ; preds = %88
  %167 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 30
  %168 = load i32, i32* %167, align 4
  store i32 %168, i32* %2, align 4
  br label %169

169:                                              ; preds = %166, %164, %152
  %170 = phi i32 [ %165, %164 ], [ %160, %152 ], [ %168, %166 ]
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %171, i32 1
  %173 = load i8, i8* %172, align 2
  %174 = zext i8 %173 to i32
  %175 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %171, i32 0
  %176 = load i16, i16* %175, align 4
  %177 = load i32, i32* %17, align 8
  %178 = sub i32 64, %177
  %179 = icmp ult i32 %178, %174
  br i1 %179, label %182, label %180

180:                                              ; preds = %169
  %181 = load i64, i64* %15, align 8
  br label %201

182:                                              ; preds = %169
  %183 = load i64, i64* %22, align 8
  br label %184

184:                                              ; preds = %188, %182
  %185 = phi i64 [ %183, %182 ], [ %197, %188 ]
  %186 = phi i32 [ %177, %182 ], [ %196, %188 ]
  %187 = icmp eq i64 %185, 0
  br i1 %187, label %215, label %188

188:                                              ; preds = %184
  %189 = load i64, i64* %15, align 8
  %190 = lshr i64 %189, 8
  store i64 %190, i64* %15, align 8
  %191 = load i8*, i8** %19, align 8
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %192 to i64
  %194 = shl nuw i64 %193, 56
  %195 = or i64 %194, %190
  store i64 %195, i64* %15, align 8
  %196 = add i32 %186, -8
  store i32 %196, i32* %17, align 8
  %197 = add i64 %185, -1
  store i64 %197, i64* %22, align 8
  %198 = getelementptr inbounds i8, i8* %191, i64 1
  store i8* %198, i8** %19, align 8
  %199 = sub i32 72, %186
  %200 = icmp ult i32 %199, %174
  br i1 %200, label %184, label %201

201:                                              ; preds = %188, %180
  %202 = phi i64 [ %181, %180 ], [ %195, %188 ]
  %203 = phi i32 [ %177, %180 ], [ %196, %188 ]
  %204 = zext i32 %203 to i64
  %205 = lshr i64 %202, %204
  %206 = trunc i64 %205 to i32
  %207 = tail call i1 @llvm.is.constant.i32(i32 %174) #14
  br i1 %207, label %208, label %211

208:                                              ; preds = %201
  %209 = shl i32 -1, %174
  %210 = xor i32 %209, -1
  br label %218

211:                                              ; preds = %201
  %212 = zext i8 %173 to i64
  %213 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %212
  %214 = load i32, i32* %213, align 4
  br label %218

215:                                              ; preds = %184
  %216 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 30
  store i32 %170, i32* %216, align 4
  store i32 1, i32* %91, align 4
  br label %217

217:                                              ; preds = %161, %215
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %90) #14
  store i32 0, i32* %91, align 4
  store i64 %16, i64* %15, align 8
  store i32 %18, i32* %17, align 8
  store i64 %21, i64* %20, align 8
  store i64 %23, i64* %22, align 8
  br label %238

218:                                              ; preds = %211, %208
  %219 = phi i32 [ %210, %208 ], [ %214, %211 ]
  %220 = and i32 %219, %206
  %221 = add i32 %203, %174
  store i32 %221, i32* %17, align 8
  %222 = zext i16 %176 to i32
  %223 = add i32 %220, %222
  store i32 %223, i32* %89, align 4
  store i32 0, i32* %91, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %90) #14
  %224 = load i32, i32* %3, align 4
  switch i32 %224, label %231 [
    i32 1, label %225
    i32 0, label %229
  ]

225:                                              ; preds = %218
  %226 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 1
  %227 = load i32, i32* %226, align 4
  %228 = add i32 %227, 1
  store i32 %228, i32* %3, align 4
  br label %233

229:                                              ; preds = %218
  %230 = load i32, i32* %11, align 4
  store i32 %230, i32* %3, align 4
  br label %233

231:                                              ; preds = %218
  %232 = add i32 %224, -2
  store i32 %232, i32* %3, align 4
  br label %233

233:                                              ; preds = %231, %229, %225
  %234 = phi i32 [ %230, %229 ], [ %232, %231 ], [ %228, %225 ]
  %235 = icmp ult i32 %234, %5
  br i1 %235, label %239, label %236

236:                                              ; preds = %233
  %237 = sub i32 %234, %5
  store i32 %237, i32* %3, align 4
  br label %239

238:                                              ; preds = %217, %85, %1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #14
  br label %279

239:                                              ; preds = %236, %233
  %240 = phi i32 [ %234, %233 ], [ %237, %236 ]
  %241 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 1
  %242 = load i32, i32* %241, align 4
  store i32 %242, i32* %11, align 4
  store i32 %240, i32* %241, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #14
  %243 = shl i32 %240, 6
  %244 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 54
  %245 = load i8*, i8** %244, align 8
  %246 = zext i32 %243 to i64
  %247 = getelementptr inbounds i8, i8* %245, i64 %246
  %248 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 20
  store i8* %247, i8** %248, align 8
  %249 = lshr i32 %240, 5
  %250 = zext i32 %249 to i64
  %251 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 58, i64 %250
  %252 = load i32, i32* %251, align 4
  %253 = zext i32 %252 to i64
  %254 = and i32 %240, 31
  %255 = zext i32 %254 to i64
  %256 = lshr i64 %253, %255
  %257 = trunc i64 %256 to i32
  %258 = and i32 %257, 1
  %259 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 27
  store i32 %258, i32* %259, align 8
  %260 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 22, i32 0
  %261 = load %struct.HuffmanCode**, %struct.HuffmanCode*** %260, align 8
  %262 = load i8, i8* %247, align 1
  %263 = zext i8 %262 to i64
  %264 = getelementptr inbounds %struct.HuffmanCode*, %struct.HuffmanCode** %261, i64 %263
  %265 = bitcast %struct.HuffmanCode** %264 to i64*
  %266 = load i64, i64* %265, align 8
  %267 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 38
  %268 = bitcast %struct.HuffmanCode** %267 to i64*
  store i64 %266, i64* %268, align 8
  %269 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 55
  %270 = load i8*, i8** %269, align 8
  %271 = zext i32 %240 to i64
  %272 = getelementptr inbounds i8, i8* %270, i64 %271
  %273 = load i8, i8* %272, align 1
  %274 = and i8 %273, 3
  %275 = zext i8 %274 to i64
  %276 = shl nuw nsw i64 %275, 9
  %277 = getelementptr inbounds [2048 x i8], [2048 x i8]* @_kBrotliContextLookupTable, i64 0, i64 %276
  %278 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 19
  store i8* %277, i8** %278, align 8
  br label %279

279:                                              ; preds = %238, %239
  %280 = phi i32 [ 1, %239 ], [ 0, %238 ]
  ret i32 %280

281:                                              ; preds = %103
  %282 = icmp eq i64 %112, 0
  br i1 %282, label %161, label %283

283:                                              ; preds = %281
  %284 = load i64, i64* %15, align 8
  %285 = lshr i64 %284, 8
  store i64 %285, i64* %15, align 8
  %286 = load i8*, i8** %19, align 8
  %287 = load i8, i8* %286, align 1
  %288 = zext i8 %287 to i64
  %289 = shl nuw i64 %288, 56
  %290 = or i64 %289, %285
  store i64 %290, i64* %15, align 8
  %291 = add i32 %95, -16
  store i32 %291, i32* %17, align 8
  %292 = add i64 %101, -2
  store i64 %292, i64* %22, align 8
  %293 = getelementptr inbounds i8, i8* %286, i64 1
  store i8* %293, i8** %19, align 8
  %294 = sub i32 80, %95
  %295 = icmp ult i32 %294, 15
  br i1 %295, label %296, label %116

296:                                              ; preds = %283
  %297 = icmp eq i64 %292, 0
  br i1 %297, label %161, label %298

298:                                              ; preds = %296
  %299 = load i64, i64* %15, align 8
  %300 = lshr i64 %299, 8
  store i64 %300, i64* %15, align 8
  %301 = load i8*, i8** %19, align 8
  %302 = load i8, i8* %301, align 1
  %303 = zext i8 %302 to i64
  %304 = shl nuw i64 %303, 56
  %305 = or i64 %304, %300
  store i64 %305, i64* %15, align 8
  %306 = add i32 %95, -24
  store i32 %306, i32* %17, align 8
  %307 = add i64 %101, -3
  store i64 %307, i64* %22, align 8
  %308 = getelementptr inbounds i8, i8* %301, i64 1
  store i8* %308, i8** %19, align 8
  br label %116

309:                                              ; preds = %29
  %310 = icmp eq i64 %36, 0
  br i1 %310, label %85, label %311

311:                                              ; preds = %309
  %312 = lshr i64 %34, 8
  store i64 %312, i64* %15, align 8
  %313 = load i8, i8* %37, align 1
  %314 = zext i8 %313 to i64
  %315 = shl nuw i64 %314, 56
  %316 = or i64 %315, %312
  store i64 %316, i64* %15, align 8
  %317 = add i32 %18, -16
  store i32 %317, i32* %17, align 8
  %318 = add i64 %23, -2
  store i64 %318, i64* %22, align 8
  %319 = getelementptr inbounds i8, i8* %27, i64 2
  store i8* %319, i8** %19, align 8
  %320 = sub i32 80, %18
  %321 = icmp ult i32 %320, 15
  br i1 %321, label %322, label %40

322:                                              ; preds = %311
  %323 = icmp eq i64 %318, 0
  br i1 %323, label %85, label %324

324:                                              ; preds = %322
  %325 = lshr i64 %316, 8
  store i64 %325, i64* %15, align 8
  %326 = load i8, i8* %319, align 1
  %327 = zext i8 %326 to i64
  %328 = shl nuw i64 %327, 56
  %329 = or i64 %328, %325
  store i64 %329, i64* %15, align 8
  %330 = add i32 %18, -24
  store i32 %330, i32* %17, align 8
  %331 = add i64 %23, -3
  store i64 %331, i64* %22, align 8
  %332 = getelementptr inbounds i8, i8* %27, i64 3
  store i8* %332, i8** %19, align 8
  br label %40
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @DecodeLiteralBlockSwitch(%struct.BrotliDecoderStateStruct*) unnamed_addr #7 {
  %2 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 32, i64 0
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 25
  %5 = load %struct.HuffmanCode*, %struct.HuffmanCode** %4, align 8
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 26
  %7 = load %struct.HuffmanCode*, %struct.HuffmanCode** %6, align 8
  %8 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 0
  %9 = icmp ult i32 %3, 2
  br i1 %9, label %259, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp ugt i32 %12, 47
  %14 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 0
  %15 = load i64, i64* %14, align 8
  br i1 %13, label %16, label %29

16:                                               ; preds = %10
  %17 = lshr i64 %15, 48
  store i64 %17, i64* %14, align 8
  %18 = xor i32 %12, 48
  store i32 %18, i32* %11, align 8
  %19 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %20 = load i8*, i8** %19, align 8
  %21 = bitcast i8* %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = shl i64 %22, 16
  %24 = or i64 %23, %17
  store i64 %24, i64* %14, align 8
  %25 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %26, -6
  store i64 %27, i64* %25, align 8
  %28 = getelementptr inbounds i8, i8* %20, i64 6
  store i8* %28, i8** %19, align 8
  br label %29

29:                                               ; preds = %16, %10
  %30 = phi i32 [ %18, %16 ], [ %12, %10 ]
  %31 = phi i64 [ %24, %16 ], [ %15, %10 ]
  %32 = zext i32 %30 to i64
  %33 = lshr i64 %31, %32
  %34 = and i64 %33, 255
  %35 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %5, i64 %34
  %36 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %35, i64 0, i32 0
  %37 = load i8, i8* %36, align 2
  %38 = icmp ugt i8 %37, 8
  br i1 %38, label %39, label %64

39:                                               ; preds = %29
  %40 = trunc i64 %33 to i32
  %41 = zext i8 %37 to i32
  %42 = add nsw i32 %41, -8
  %43 = add i32 %30, 8
  store i32 %43, i32* %11, align 8
  %44 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %5, i64 %34, i32 1
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = lshr i32 %40, 8
  %48 = tail call i1 @llvm.is.constant.i32(i32 %42) #14
  br i1 %48, label %49, label %52

49:                                               ; preds = %39
  %50 = shl i32 -1, %42
  %51 = xor i32 %50, -1
  br label %56

52:                                               ; preds = %39
  %53 = zext i32 %42 to i64
  %54 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %53
  %55 = load i32, i32* %54, align 4
  br label %56

56:                                               ; preds = %52, %49
  %57 = phi i32 [ %51, %49 ], [ %55, %52 ]
  %58 = and i32 %57, %47
  %59 = add nuw nsw i32 %58, %46
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %35, i64 %60
  %62 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %61, i64 0, i32 0
  %63 = load i8, i8* %62, align 2
  br label %64

64:                                               ; preds = %56, %29
  %65 = phi i32 [ %43, %56 ], [ %30, %29 ]
  %66 = phi i8 [ %63, %56 ], [ %37, %29 ]
  %67 = phi %struct.HuffmanCode* [ %61, %56 ], [ %35, %29 ]
  %68 = zext i8 %66 to i32
  %69 = add i32 %65, %68
  store i32 %69, i32* %11, align 8
  %70 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %67, i64 0, i32 1
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = icmp ugt i32 %69, 47
  br i1 %73, label %74, label %87

74:                                               ; preds = %64
  %75 = lshr i64 %31, 48
  store i64 %75, i64* %14, align 8
  %76 = xor i32 %69, 48
  store i32 %76, i32* %11, align 8
  %77 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %78 = load i8*, i8** %77, align 8
  %79 = bitcast i8* %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = shl i64 %80, 16
  %82 = or i64 %81, %75
  store i64 %82, i64* %14, align 8
  %83 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %84 = load i64, i64* %83, align 8
  %85 = add i64 %84, -6
  store i64 %85, i64* %83, align 8
  %86 = getelementptr inbounds i8, i8* %78, i64 6
  store i8* %86, i8** %77, align 8
  br label %87

87:                                               ; preds = %74, %64
  %88 = phi i32 [ %76, %74 ], [ %69, %64 ]
  %89 = phi i64 [ %82, %74 ], [ %31, %64 ]
  %90 = zext i32 %88 to i64
  %91 = lshr i64 %89, %90
  %92 = and i64 %91, 255
  %93 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %7, i64 %92
  %94 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %93, i64 0, i32 0
  %95 = load i8, i8* %94, align 2
  %96 = icmp ugt i8 %95, 8
  br i1 %96, label %97, label %122

97:                                               ; preds = %87
  %98 = trunc i64 %91 to i32
  %99 = zext i8 %95 to i32
  %100 = add nsw i32 %99, -8
  %101 = add i32 %88, 8
  store i32 %101, i32* %11, align 8
  %102 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %7, i64 %92, i32 1
  %103 = load i16, i16* %102, align 2
  %104 = zext i16 %103 to i32
  %105 = lshr i32 %98, 8
  %106 = tail call i1 @llvm.is.constant.i32(i32 %100) #14
  br i1 %106, label %107, label %110

107:                                              ; preds = %97
  %108 = shl i32 -1, %100
  %109 = xor i32 %108, -1
  br label %114

110:                                              ; preds = %97
  %111 = zext i32 %100 to i64
  %112 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %111
  %113 = load i32, i32* %112, align 4
  br label %114

114:                                              ; preds = %110, %107
  %115 = phi i32 [ %109, %107 ], [ %113, %110 ]
  %116 = and i32 %115, %105
  %117 = add nuw nsw i32 %116, %104
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %93, i64 %118
  %120 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %119, i64 0, i32 0
  %121 = load i8, i8* %120, align 2
  br label %122

122:                                              ; preds = %114, %87
  %123 = phi i32 [ %101, %114 ], [ %88, %87 ]
  %124 = phi i8 [ %121, %114 ], [ %95, %87 ]
  %125 = phi %struct.HuffmanCode* [ %119, %114 ], [ %93, %87 ]
  %126 = zext i8 %124 to i32
  %127 = add i32 %123, %126
  store i32 %127, i32* %11, align 8
  %128 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %125, i64 0, i32 1
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i64
  %131 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %130, i32 1
  %132 = load i8, i8* %131, align 2
  %133 = zext i8 %132 to i32
  %134 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %130, i32 0
  %135 = load i16, i16* %134, align 4
  %136 = zext i16 %135 to i32
  %137 = tail call i1 @llvm.is.constant.i32(i32 %133) #14
  %138 = icmp ult i8 %132, 9
  %139 = and i1 %138, %137
  br i1 %139, label %140, label %155

140:                                              ; preds = %122
  %141 = icmp ugt i32 %127, 55
  br i1 %141, label %142, label %189

142:                                              ; preds = %140
  %143 = lshr i64 %89, 56
  store i64 %143, i64* %14, align 8
  %144 = xor i32 %127, 56
  store i32 %144, i32* %11, align 8
  %145 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %146 = load i8*, i8** %145, align 8
  %147 = bitcast i8* %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = shl i64 %148, 8
  %150 = or i64 %149, %143
  store i64 %150, i64* %14, align 8
  %151 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %152 = load i64, i64* %151, align 8
  %153 = add i64 %152, -7
  store i64 %153, i64* %151, align 8
  %154 = getelementptr inbounds i8, i8* %146, i64 7
  store i8* %154, i8** %145, align 8
  br label %189

155:                                              ; preds = %122
  %156 = icmp ult i8 %132, 17
  %157 = and i1 %156, %137
  br i1 %157, label %158, label %173

158:                                              ; preds = %155
  %159 = icmp ugt i32 %127, 47
  br i1 %159, label %160, label %189

160:                                              ; preds = %158
  %161 = lshr i64 %89, 48
  store i64 %161, i64* %14, align 8
  %162 = xor i32 %127, 48
  store i32 %162, i32* %11, align 8
  %163 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %164 = load i8*, i8** %163, align 8
  %165 = bitcast i8* %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = shl i64 %166, 16
  %168 = or i64 %167, %161
  store i64 %168, i64* %14, align 8
  %169 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %170 = load i64, i64* %169, align 8
  %171 = add i64 %170, -6
  store i64 %171, i64* %169, align 8
  %172 = getelementptr inbounds i8, i8* %164, i64 6
  store i8* %172, i8** %163, align 8
  br label %189

173:                                              ; preds = %155
  %174 = icmp ugt i32 %127, 31
  br i1 %174, label %175, label %189

175:                                              ; preds = %173
  %176 = lshr i64 %89, 32
  store i64 %176, i64* %14, align 8
  %177 = xor i32 %127, 32
  store i32 %177, i32* %11, align 8
  %178 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %179 = load i8*, i8** %178, align 8
  %180 = bitcast i8* %179 to i32*
  %181 = load i32, i32* %180, align 4
  %182 = zext i32 %181 to i64
  %183 = shl nuw i64 %182, 32
  %184 = or i64 %183, %176
  store i64 %184, i64* %14, align 8
  %185 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %186 = load i64, i64* %185, align 8
  %187 = add i64 %186, -4
  store i64 %187, i64* %185, align 8
  %188 = getelementptr inbounds i8, i8* %179, i64 4
  store i8* %188, i8** %178, align 8
  br label %189

189:                                              ; preds = %175, %173, %160, %158, %142, %140
  %190 = phi i64 [ %89, %140 ], [ %150, %142 ], [ %89, %158 ], [ %168, %160 ], [ %89, %173 ], [ %184, %175 ]
  %191 = phi i32 [ %127, %140 ], [ %144, %142 ], [ %127, %158 ], [ %162, %160 ], [ %127, %173 ], [ %177, %175 ]
  %192 = zext i32 %191 to i64
  %193 = lshr i64 %190, %192
  %194 = trunc i64 %193 to i32
  br i1 %137, label %195, label %198

195:                                              ; preds = %189
  %196 = shl i32 -1, %133
  %197 = xor i32 %196, -1
  br label %202

198:                                              ; preds = %189
  %199 = zext i8 %132 to i64
  %200 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %199
  %201 = load i32, i32* %200, align 4
  br label %202

202:                                              ; preds = %198, %195
  %203 = phi i32 [ %197, %195 ], [ %201, %198 ]
  %204 = and i32 %203, %194
  %205 = add i32 %191, %133
  store i32 %205, i32* %11, align 8
  %206 = add i32 %204, %136
  %207 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 31, i64 0
  store i32 %206, i32* %207, align 4
  switch i16 %71, label %214 [
    i16 1, label %208
    i16 0, label %212
  ]

208:                                              ; preds = %202
  %209 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 1
  %210 = load i32, i32* %209, align 4
  %211 = add i32 %210, 1
  br label %216

212:                                              ; preds = %202
  %213 = load i32, i32* %8, align 4
  br label %216

214:                                              ; preds = %202
  %215 = add nsw i32 %72, -2
  br label %216

216:                                              ; preds = %214, %212, %208
  %217 = phi i32 [ %213, %212 ], [ %215, %214 ], [ %211, %208 ]
  %218 = icmp ult i32 %217, %3
  %219 = select i1 %218, i32 0, i32 %3
  %220 = sub i32 %217, %219
  %221 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 1
  %222 = load i32, i32* %221, align 4
  store i32 %222, i32* %8, align 4
  store i32 %220, i32* %221, align 4
  %223 = shl i32 %220, 6
  %224 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 54
  %225 = load i8*, i8** %224, align 8
  %226 = zext i32 %223 to i64
  %227 = getelementptr inbounds i8, i8* %225, i64 %226
  %228 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 20
  store i8* %227, i8** %228, align 8
  %229 = lshr i32 %220, 5
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 58, i64 %230
  %232 = load i32, i32* %231, align 4
  %233 = zext i32 %232 to i64
  %234 = and i32 %220, 31
  %235 = zext i32 %234 to i64
  %236 = lshr i64 %233, %235
  %237 = trunc i64 %236 to i32
  %238 = and i32 %237, 1
  %239 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 27
  store i32 %238, i32* %239, align 8
  %240 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 22, i32 0
  %241 = load %struct.HuffmanCode**, %struct.HuffmanCode*** %240, align 8
  %242 = load i8, i8* %227, align 1
  %243 = zext i8 %242 to i64
  %244 = getelementptr inbounds %struct.HuffmanCode*, %struct.HuffmanCode** %241, i64 %243
  %245 = bitcast %struct.HuffmanCode** %244 to i64*
  %246 = load i64, i64* %245, align 8
  %247 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 38
  %248 = bitcast %struct.HuffmanCode** %247 to i64*
  store i64 %246, i64* %248, align 8
  %249 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 55
  %250 = load i8*, i8** %249, align 8
  %251 = zext i32 %220 to i64
  %252 = getelementptr inbounds i8, i8* %250, i64 %251
  %253 = load i8, i8* %252, align 1
  %254 = and i8 %253, 3
  %255 = zext i8 %254 to i64
  %256 = shl nuw nsw i64 %255, 9
  %257 = getelementptr inbounds [2048 x i8], [2048 x i8]* @_kBrotliContextLookupTable, i64 0, i64 %256
  %258 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 19
  store i8* %257, i8** %258, align 8
  br label %259

259:                                              ; preds = %1, %216
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc i32 @SafeDecodeDistanceBlockSwitch(%struct.BrotliDecoderStateStruct* nocapture) unnamed_addr #7 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 32, i64 2
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 25
  %7 = load %struct.HuffmanCode*, %struct.HuffmanCode** %6, align 8
  %8 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %7, i64 1264
  %9 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 26
  %10 = load %struct.HuffmanCode*, %struct.HuffmanCode** %9, align 8
  %11 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %10, i64 792
  %12 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2
  %13 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 4
  %14 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #14
  store i32 -1431655766, i32* %3, align 4
  %15 = icmp ult i32 %5, 2
  br i1 %15, label %240, label %16

16:                                               ; preds = %1
  %17 = getelementptr inbounds %struct.BrotliBitReader, %struct.BrotliBitReader* %12, i64 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %22 = bitcast i8** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %25 = load i64, i64* %24, align 8
  %26 = sub i32 64, %20
  %27 = icmp ult i32 %26, 15
  br i1 %27, label %28, label %42

28:                                               ; preds = %16
  %29 = inttoptr i64 %23 to i8*
  %30 = icmp eq i64 %25, 0
  br i1 %30, label %87, label %31

31:                                               ; preds = %28
  %32 = lshr i64 %18, 8
  store i64 %32, i64* %17, align 8
  %33 = load i8, i8* %29, align 1
  %34 = zext i8 %33 to i64
  %35 = shl nuw i64 %34, 56
  %36 = or i64 %35, %32
  store i64 %36, i64* %17, align 8
  %37 = add i32 %20, -8
  store i32 %37, i32* %19, align 8
  %38 = add i64 %25, -1
  store i64 %38, i64* %24, align 8
  %39 = getelementptr inbounds i8, i8* %29, i64 1
  store i8* %39, i8** %21, align 8
  %40 = sub i32 72, %20
  %41 = icmp ult i32 %40, 15
  br i1 %41, label %287, label %42

42:                                               ; preds = %31, %289, %302, %16
  %43 = phi i64 [ %18, %16 ], [ %36, %31 ], [ %294, %289 ], [ %307, %302 ]
  %44 = phi i32 [ %20, %16 ], [ %37, %31 ], [ %295, %289 ], [ %308, %302 ]
  %45 = zext i32 %44 to i64
  %46 = lshr i64 %43, %45
  %47 = and i64 %46, 255
  %48 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %8, i64 %47
  %49 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %48, i64 0, i32 0
  %50 = load i8, i8* %49, align 2
  %51 = icmp ugt i8 %50, 8
  br i1 %51, label %52, label %78

52:                                               ; preds = %42
  %53 = trunc i64 %46 to i32
  %54 = zext i8 %50 to i32
  %55 = add nsw i32 %54, -8
  %56 = add i32 %44, 8
  store i32 %56, i32* %19, align 8
  %57 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %8, i64 %47, i32 1
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = lshr i32 %53, 8
  %61 = and i32 %60, 127
  %62 = tail call i1 @llvm.is.constant.i32(i32 %55) #14
  br i1 %62, label %63, label %66

63:                                               ; preds = %52
  %64 = shl i32 -1, %55
  %65 = xor i32 %64, -1
  br label %70

66:                                               ; preds = %52
  %67 = zext i32 %55 to i64
  %68 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %67
  %69 = load i32, i32* %68, align 4
  br label %70

70:                                               ; preds = %66, %63
  %71 = phi i32 [ %65, %63 ], [ %69, %66 ]
  %72 = and i32 %61, %71
  %73 = add nuw nsw i32 %72, %59
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %48, i64 %74
  %76 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %75, i64 0, i32 0
  %77 = load i8, i8* %76, align 2
  br label %78

78:                                               ; preds = %70, %42
  %79 = phi i32 [ %56, %70 ], [ %44, %42 ]
  %80 = phi i8 [ %77, %70 ], [ %50, %42 ]
  %81 = phi %struct.HuffmanCode* [ %75, %70 ], [ %48, %42 ]
  %82 = zext i8 %80 to i32
  %83 = add i32 %79, %82
  store i32 %83, i32* %19, align 8
  %84 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %81, i64 0, i32 1
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i32
  store i32 %86, i32* %3, align 4
  br label %90

87:                                               ; preds = %300, %287, %28
  %88 = call fastcc i32 @SafeDecodeSymbol(%struct.HuffmanCode* %8, %struct.BrotliBitReader* %12, i32* nonnull %3) #14
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %240, label %90

90:                                               ; preds = %87, %78
  %91 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 31, i64 2
  %92 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %92) #14
  store i32 -1431655766, i32* %2, align 4
  %93 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 49
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %168

96:                                               ; preds = %90
  %97 = load i32, i32* %19, align 8
  %98 = sub i32 64, %97
  %99 = icmp ult i32 %98, 15
  br i1 %99, label %102, label %100

100:                                              ; preds = %96
  %101 = load i64, i64* %17, align 8
  br label %118

102:                                              ; preds = %96
  %103 = load i64, i64* %24, align 8
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %163, label %105

105:                                              ; preds = %102
  %106 = load i64, i64* %17, align 8
  %107 = lshr i64 %106, 8
  store i64 %107, i64* %17, align 8
  %108 = load i8*, i8** %21, align 8
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i64
  %111 = shl nuw i64 %110, 56
  %112 = or i64 %111, %107
  store i64 %112, i64* %17, align 8
  %113 = add i32 %97, -8
  store i32 %113, i32* %19, align 8
  %114 = add i64 %103, -1
  store i64 %114, i64* %24, align 8
  %115 = getelementptr inbounds i8, i8* %108, i64 1
  store i8* %115, i8** %21, align 8
  %116 = sub i32 72, %97
  %117 = icmp ult i32 %116, 15
  br i1 %117, label %259, label %118

118:                                              ; preds = %105, %261, %276, %100
  %119 = phi i64 [ %101, %100 ], [ %112, %105 ], [ %268, %261 ], [ %283, %276 ]
  %120 = phi i32 [ %97, %100 ], [ %113, %105 ], [ %269, %261 ], [ %284, %276 ]
  %121 = zext i32 %120 to i64
  %122 = lshr i64 %119, %121
  %123 = and i64 %122, 255
  %124 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %11, i64 %123
  %125 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %124, i64 0, i32 0
  %126 = load i8, i8* %125, align 2
  %127 = icmp ugt i8 %126, 8
  br i1 %127, label %128, label %154

128:                                              ; preds = %118
  %129 = trunc i64 %122 to i32
  %130 = zext i8 %126 to i32
  %131 = add nsw i32 %130, -8
  %132 = add i32 %120, 8
  store i32 %132, i32* %19, align 8
  %133 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %11, i64 %123, i32 1
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  %136 = lshr i32 %129, 8
  %137 = and i32 %136, 127
  %138 = tail call i1 @llvm.is.constant.i32(i32 %131) #14
  br i1 %138, label %139, label %142

139:                                              ; preds = %128
  %140 = shl i32 -1, %131
  %141 = xor i32 %140, -1
  br label %146

142:                                              ; preds = %128
  %143 = zext i32 %131 to i64
  %144 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %143
  %145 = load i32, i32* %144, align 4
  br label %146

146:                                              ; preds = %142, %139
  %147 = phi i32 [ %141, %139 ], [ %145, %142 ]
  %148 = and i32 %137, %147
  %149 = add nuw nsw i32 %148, %135
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %124, i64 %150
  %152 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %151, i64 0, i32 0
  %153 = load i8, i8* %152, align 2
  br label %154

154:                                              ; preds = %146, %118
  %155 = phi i32 [ %132, %146 ], [ %120, %118 ]
  %156 = phi i8 [ %153, %146 ], [ %126, %118 ]
  %157 = phi %struct.HuffmanCode* [ %151, %146 ], [ %124, %118 ]
  %158 = zext i8 %156 to i32
  %159 = add i32 %155, %158
  store i32 %159, i32* %19, align 8
  %160 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %157, i64 0, i32 1
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  store i32 %162, i32* %2, align 4
  br label %171

163:                                              ; preds = %274, %259, %102
  %164 = call fastcc i32 @SafeDecodeSymbol(%struct.HuffmanCode* %11, %struct.BrotliBitReader* %12, i32* nonnull %2) #14
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %219, label %166

166:                                              ; preds = %163
  %167 = load i32, i32* %2, align 4
  br label %171

168:                                              ; preds = %90
  %169 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 30
  %170 = load i32, i32* %169, align 4
  store i32 %170, i32* %2, align 4
  br label %171

171:                                              ; preds = %168, %166, %154
  %172 = phi i32 [ %167, %166 ], [ %162, %154 ], [ %170, %168 ]
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %173, i32 1
  %175 = load i8, i8* %174, align 2
  %176 = zext i8 %175 to i32
  %177 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %173, i32 0
  %178 = load i16, i16* %177, align 4
  %179 = load i32, i32* %19, align 8
  %180 = sub i32 64, %179
  %181 = icmp ult i32 %180, %176
  br i1 %181, label %184, label %182

182:                                              ; preds = %171
  %183 = load i64, i64* %17, align 8
  br label %203

184:                                              ; preds = %171
  %185 = load i64, i64* %24, align 8
  br label %186

186:                                              ; preds = %190, %184
  %187 = phi i64 [ %185, %184 ], [ %199, %190 ]
  %188 = phi i32 [ %179, %184 ], [ %198, %190 ]
  %189 = icmp eq i64 %187, 0
  br i1 %189, label %217, label %190

190:                                              ; preds = %186
  %191 = load i64, i64* %17, align 8
  %192 = lshr i64 %191, 8
  store i64 %192, i64* %17, align 8
  %193 = load i8*, i8** %21, align 8
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i64
  %196 = shl nuw i64 %195, 56
  %197 = or i64 %196, %192
  store i64 %197, i64* %17, align 8
  %198 = add i32 %188, -8
  store i32 %198, i32* %19, align 8
  %199 = add i64 %187, -1
  store i64 %199, i64* %24, align 8
  %200 = getelementptr inbounds i8, i8* %193, i64 1
  store i8* %200, i8** %21, align 8
  %201 = sub i32 72, %188
  %202 = icmp ult i32 %201, %176
  br i1 %202, label %186, label %203

203:                                              ; preds = %190, %182
  %204 = phi i64 [ %183, %182 ], [ %197, %190 ]
  %205 = phi i32 [ %179, %182 ], [ %198, %190 ]
  %206 = zext i32 %205 to i64
  %207 = lshr i64 %204, %206
  %208 = trunc i64 %207 to i32
  %209 = tail call i1 @llvm.is.constant.i32(i32 %176) #14
  br i1 %209, label %210, label %213

210:                                              ; preds = %203
  %211 = shl i32 -1, %176
  %212 = xor i32 %211, -1
  br label %220

213:                                              ; preds = %203
  %214 = zext i8 %175 to i64
  %215 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %214
  %216 = load i32, i32* %215, align 4
  br label %220

217:                                              ; preds = %186
  %218 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 30
  store i32 %172, i32* %218, align 4
  store i32 1, i32* %93, align 4
  br label %219

219:                                              ; preds = %163, %217
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #14
  store i32 0, i32* %93, align 4
  store i64 %18, i64* %17, align 8
  store i32 %20, i32* %19, align 8
  store i64 %23, i64* %22, align 8
  store i64 %25, i64* %24, align 8
  br label %240

220:                                              ; preds = %213, %210
  %221 = phi i32 [ %212, %210 ], [ %216, %213 ]
  %222 = and i32 %221, %208
  %223 = add i32 %205, %176
  store i32 %223, i32* %19, align 8
  %224 = zext i16 %178 to i32
  %225 = add i32 %222, %224
  store i32 %225, i32* %91, align 4
  store i32 0, i32* %93, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #14
  %226 = load i32, i32* %3, align 4
  switch i32 %226, label %233 [
    i32 1, label %227
    i32 0, label %231
  ]

227:                                              ; preds = %220
  %228 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 5
  %229 = load i32, i32* %228, align 4
  %230 = add i32 %229, 1
  store i32 %230, i32* %3, align 4
  br label %235

231:                                              ; preds = %220
  %232 = load i32, i32* %13, align 4
  store i32 %232, i32* %3, align 4
  br label %235

233:                                              ; preds = %220
  %234 = add i32 %226, -2
  store i32 %234, i32* %3, align 4
  br label %235

235:                                              ; preds = %233, %231, %227
  %236 = phi i32 [ %232, %231 ], [ %234, %233 ], [ %230, %227 ]
  %237 = icmp ult i32 %236, %5
  br i1 %237, label %241, label %238

238:                                              ; preds = %235
  %239 = sub i32 %236, %5
  store i32 %239, i32* %3, align 4
  br label %241

240:                                              ; preds = %219, %87, %1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #14
  br label %257

241:                                              ; preds = %238, %235
  %242 = phi i32 [ %236, %235 ], [ %239, %238 ]
  %243 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 5
  %244 = load i32, i32* %243, align 4
  store i32 %244, i32* %13, align 4
  store i32 %242, i32* %243, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #14
  %245 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 37
  %246 = load i8*, i8** %245, align 8
  %247 = shl i32 %242, 2
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds i8, i8* %246, i64 %248
  %250 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 21
  store i8* %249, i8** %250, align 8
  %251 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 28
  %252 = load i32, i32* %251, align 4
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds i8, i8* %249, i64 %253
  %255 = load i8, i8* %254, align 1
  %256 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 39
  store i8 %255, i8* %256, align 8
  br label %257

257:                                              ; preds = %240, %241
  %258 = phi i32 [ 1, %241 ], [ 0, %240 ]
  ret i32 %258

259:                                              ; preds = %105
  %260 = icmp eq i64 %114, 0
  br i1 %260, label %163, label %261

261:                                              ; preds = %259
  %262 = load i64, i64* %17, align 8
  %263 = lshr i64 %262, 8
  store i64 %263, i64* %17, align 8
  %264 = load i8*, i8** %21, align 8
  %265 = load i8, i8* %264, align 1
  %266 = zext i8 %265 to i64
  %267 = shl nuw i64 %266, 56
  %268 = or i64 %267, %263
  store i64 %268, i64* %17, align 8
  %269 = add i32 %97, -16
  store i32 %269, i32* %19, align 8
  %270 = add i64 %103, -2
  store i64 %270, i64* %24, align 8
  %271 = getelementptr inbounds i8, i8* %264, i64 1
  store i8* %271, i8** %21, align 8
  %272 = sub i32 80, %97
  %273 = icmp ult i32 %272, 15
  br i1 %273, label %274, label %118

274:                                              ; preds = %261
  %275 = icmp eq i64 %270, 0
  br i1 %275, label %163, label %276

276:                                              ; preds = %274
  %277 = load i64, i64* %17, align 8
  %278 = lshr i64 %277, 8
  store i64 %278, i64* %17, align 8
  %279 = load i8*, i8** %21, align 8
  %280 = load i8, i8* %279, align 1
  %281 = zext i8 %280 to i64
  %282 = shl nuw i64 %281, 56
  %283 = or i64 %282, %278
  store i64 %283, i64* %17, align 8
  %284 = add i32 %97, -24
  store i32 %284, i32* %19, align 8
  %285 = add i64 %103, -3
  store i64 %285, i64* %24, align 8
  %286 = getelementptr inbounds i8, i8* %279, i64 1
  store i8* %286, i8** %21, align 8
  br label %118

287:                                              ; preds = %31
  %288 = icmp eq i64 %38, 0
  br i1 %288, label %87, label %289

289:                                              ; preds = %287
  %290 = lshr i64 %36, 8
  store i64 %290, i64* %17, align 8
  %291 = load i8, i8* %39, align 1
  %292 = zext i8 %291 to i64
  %293 = shl nuw i64 %292, 56
  %294 = or i64 %293, %290
  store i64 %294, i64* %17, align 8
  %295 = add i32 %20, -16
  store i32 %295, i32* %19, align 8
  %296 = add i64 %25, -2
  store i64 %296, i64* %24, align 8
  %297 = getelementptr inbounds i8, i8* %29, i64 2
  store i8* %297, i8** %21, align 8
  %298 = sub i32 80, %20
  %299 = icmp ult i32 %298, 15
  br i1 %299, label %300, label %42

300:                                              ; preds = %289
  %301 = icmp eq i64 %296, 0
  br i1 %301, label %87, label %302

302:                                              ; preds = %300
  %303 = lshr i64 %294, 8
  store i64 %303, i64* %17, align 8
  %304 = load i8, i8* %297, align 1
  %305 = zext i8 %304 to i64
  %306 = shl nuw i64 %305, 56
  %307 = or i64 %306, %303
  store i64 %307, i64* %17, align 8
  %308 = add i32 %20, -24
  store i32 %308, i32* %19, align 8
  %309 = add i64 %25, -3
  store i64 %309, i64* %24, align 8
  %310 = getelementptr inbounds i8, i8* %29, i64 3
  store i8* %310, i8** %21, align 8
  br label %42
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @DecodeDistanceBlockSwitch(%struct.BrotliDecoderStateStruct*) unnamed_addr #7 {
  %2 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 32, i64 2
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 25
  %5 = load %struct.HuffmanCode*, %struct.HuffmanCode** %4, align 8
  %6 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %5, i64 1264
  %7 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 26
  %8 = load %struct.HuffmanCode*, %struct.HuffmanCode** %7, align 8
  %9 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %8, i64 792
  %10 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 4
  %11 = icmp ult i32 %3, 2
  br i1 %11, label %237, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp ugt i32 %14, 47
  %16 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 0
  %17 = load i64, i64* %16, align 8
  br i1 %15, label %18, label %31

18:                                               ; preds = %12
  %19 = lshr i64 %17, 48
  store i64 %19, i64* %16, align 8
  %20 = xor i32 %14, 48
  store i32 %20, i32* %13, align 8
  %21 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %22 = load i8*, i8** %21, align 8
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = shl i64 %24, 16
  %26 = or i64 %25, %19
  store i64 %26, i64* %16, align 8
  %27 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %28 = load i64, i64* %27, align 8
  %29 = add i64 %28, -6
  store i64 %29, i64* %27, align 8
  %30 = getelementptr inbounds i8, i8* %22, i64 6
  store i8* %30, i8** %21, align 8
  br label %31

31:                                               ; preds = %18, %12
  %32 = phi i32 [ %20, %18 ], [ %14, %12 ]
  %33 = phi i64 [ %26, %18 ], [ %17, %12 ]
  %34 = zext i32 %32 to i64
  %35 = lshr i64 %33, %34
  %36 = and i64 %35, 255
  %37 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %6, i64 %36
  %38 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %37, i64 0, i32 0
  %39 = load i8, i8* %38, align 2
  %40 = icmp ugt i8 %39, 8
  br i1 %40, label %41, label %66

41:                                               ; preds = %31
  %42 = trunc i64 %35 to i32
  %43 = zext i8 %39 to i32
  %44 = add nsw i32 %43, -8
  %45 = add i32 %32, 8
  store i32 %45, i32* %13, align 8
  %46 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %6, i64 %36, i32 1
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = lshr i32 %42, 8
  %50 = tail call i1 @llvm.is.constant.i32(i32 %44) #14
  br i1 %50, label %51, label %54

51:                                               ; preds = %41
  %52 = shl i32 -1, %44
  %53 = xor i32 %52, -1
  br label %58

54:                                               ; preds = %41
  %55 = zext i32 %44 to i64
  %56 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %55
  %57 = load i32, i32* %56, align 4
  br label %58

58:                                               ; preds = %54, %51
  %59 = phi i32 [ %53, %51 ], [ %57, %54 ]
  %60 = and i32 %59, %49
  %61 = add nuw nsw i32 %60, %48
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %37, i64 %62
  %64 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %63, i64 0, i32 0
  %65 = load i8, i8* %64, align 2
  br label %66

66:                                               ; preds = %58, %31
  %67 = phi i32 [ %45, %58 ], [ %32, %31 ]
  %68 = phi i8 [ %65, %58 ], [ %39, %31 ]
  %69 = phi %struct.HuffmanCode* [ %63, %58 ], [ %37, %31 ]
  %70 = zext i8 %68 to i32
  %71 = add i32 %67, %70
  store i32 %71, i32* %13, align 8
  %72 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %69, i64 0, i32 1
  %73 = load i16, i16* %72, align 2
  %74 = zext i16 %73 to i32
  %75 = icmp ugt i32 %71, 47
  br i1 %75, label %76, label %89

76:                                               ; preds = %66
  %77 = lshr i64 %33, 48
  store i64 %77, i64* %16, align 8
  %78 = xor i32 %71, 48
  store i32 %78, i32* %13, align 8
  %79 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %80 = load i8*, i8** %79, align 8
  %81 = bitcast i8* %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = shl i64 %82, 16
  %84 = or i64 %83, %77
  store i64 %84, i64* %16, align 8
  %85 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %86 = load i64, i64* %85, align 8
  %87 = add i64 %86, -6
  store i64 %87, i64* %85, align 8
  %88 = getelementptr inbounds i8, i8* %80, i64 6
  store i8* %88, i8** %79, align 8
  br label %89

89:                                               ; preds = %76, %66
  %90 = phi i32 [ %78, %76 ], [ %71, %66 ]
  %91 = phi i64 [ %84, %76 ], [ %33, %66 ]
  %92 = zext i32 %90 to i64
  %93 = lshr i64 %91, %92
  %94 = and i64 %93, 255
  %95 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %9, i64 %94
  %96 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %95, i64 0, i32 0
  %97 = load i8, i8* %96, align 2
  %98 = icmp ugt i8 %97, 8
  br i1 %98, label %99, label %124

99:                                               ; preds = %89
  %100 = trunc i64 %93 to i32
  %101 = zext i8 %97 to i32
  %102 = add nsw i32 %101, -8
  %103 = add i32 %90, 8
  store i32 %103, i32* %13, align 8
  %104 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %9, i64 %94, i32 1
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = lshr i32 %100, 8
  %108 = tail call i1 @llvm.is.constant.i32(i32 %102) #14
  br i1 %108, label %109, label %112

109:                                              ; preds = %99
  %110 = shl i32 -1, %102
  %111 = xor i32 %110, -1
  br label %116

112:                                              ; preds = %99
  %113 = zext i32 %102 to i64
  %114 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %113
  %115 = load i32, i32* %114, align 4
  br label %116

116:                                              ; preds = %112, %109
  %117 = phi i32 [ %111, %109 ], [ %115, %112 ]
  %118 = and i32 %117, %107
  %119 = add nuw nsw i32 %118, %106
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %95, i64 %120
  %122 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %121, i64 0, i32 0
  %123 = load i8, i8* %122, align 2
  br label %124

124:                                              ; preds = %116, %89
  %125 = phi i32 [ %103, %116 ], [ %90, %89 ]
  %126 = phi i8 [ %123, %116 ], [ %97, %89 ]
  %127 = phi %struct.HuffmanCode* [ %121, %116 ], [ %95, %89 ]
  %128 = zext i8 %126 to i32
  %129 = add i32 %125, %128
  store i32 %129, i32* %13, align 8
  %130 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %127, i64 0, i32 1
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i64
  %133 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %132, i32 1
  %134 = load i8, i8* %133, align 2
  %135 = zext i8 %134 to i32
  %136 = getelementptr inbounds [26 x %struct.BrotliPrefixCodeRange], [26 x %struct.BrotliPrefixCodeRange]* @_kBrotliPrefixCodeRanges, i64 0, i64 %132, i32 0
  %137 = load i16, i16* %136, align 4
  %138 = zext i16 %137 to i32
  %139 = tail call i1 @llvm.is.constant.i32(i32 %135) #14
  %140 = icmp ult i8 %134, 9
  %141 = and i1 %140, %139
  br i1 %141, label %142, label %157

142:                                              ; preds = %124
  %143 = icmp ugt i32 %129, 55
  br i1 %143, label %144, label %191

144:                                              ; preds = %142
  %145 = lshr i64 %91, 56
  store i64 %145, i64* %16, align 8
  %146 = xor i32 %129, 56
  store i32 %146, i32* %13, align 8
  %147 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %148 = load i8*, i8** %147, align 8
  %149 = bitcast i8* %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = shl i64 %150, 8
  %152 = or i64 %151, %145
  store i64 %152, i64* %16, align 8
  %153 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %154 = load i64, i64* %153, align 8
  %155 = add i64 %154, -7
  store i64 %155, i64* %153, align 8
  %156 = getelementptr inbounds i8, i8* %148, i64 7
  store i8* %156, i8** %147, align 8
  br label %191

157:                                              ; preds = %124
  %158 = icmp ult i8 %134, 17
  %159 = and i1 %158, %139
  br i1 %159, label %160, label %175

160:                                              ; preds = %157
  %161 = icmp ugt i32 %129, 47
  br i1 %161, label %162, label %191

162:                                              ; preds = %160
  %163 = lshr i64 %91, 48
  store i64 %163, i64* %16, align 8
  %164 = xor i32 %129, 48
  store i32 %164, i32* %13, align 8
  %165 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %166 = load i8*, i8** %165, align 8
  %167 = bitcast i8* %166 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = shl i64 %168, 16
  %170 = or i64 %169, %163
  store i64 %170, i64* %16, align 8
  %171 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %172 = load i64, i64* %171, align 8
  %173 = add i64 %172, -6
  store i64 %173, i64* %171, align 8
  %174 = getelementptr inbounds i8, i8* %166, i64 6
  store i8* %174, i8** %165, align 8
  br label %191

175:                                              ; preds = %157
  %176 = icmp ugt i32 %129, 31
  br i1 %176, label %177, label %191

177:                                              ; preds = %175
  %178 = lshr i64 %91, 32
  store i64 %178, i64* %16, align 8
  %179 = xor i32 %129, 32
  store i32 %179, i32* %13, align 8
  %180 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 2
  %181 = load i8*, i8** %180, align 8
  %182 = bitcast i8* %181 to i32*
  %183 = load i32, i32* %182, align 4
  %184 = zext i32 %183 to i64
  %185 = shl nuw i64 %184, 32
  %186 = or i64 %185, %178
  store i64 %186, i64* %16, align 8
  %187 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 2, i32 3
  %188 = load i64, i64* %187, align 8
  %189 = add i64 %188, -4
  store i64 %189, i64* %187, align 8
  %190 = getelementptr inbounds i8, i8* %181, i64 4
  store i8* %190, i8** %180, align 8
  br label %191

191:                                              ; preds = %177, %175, %162, %160, %144, %142
  %192 = phi i64 [ %91, %142 ], [ %152, %144 ], [ %91, %160 ], [ %170, %162 ], [ %91, %175 ], [ %186, %177 ]
  %193 = phi i32 [ %129, %142 ], [ %146, %144 ], [ %129, %160 ], [ %164, %162 ], [ %129, %175 ], [ %179, %177 ]
  %194 = zext i32 %193 to i64
  %195 = lshr i64 %192, %194
  %196 = trunc i64 %195 to i32
  br i1 %139, label %197, label %200

197:                                              ; preds = %191
  %198 = shl i32 -1, %135
  %199 = xor i32 %198, -1
  br label %204

200:                                              ; preds = %191
  %201 = zext i8 %134 to i64
  %202 = getelementptr inbounds [33 x i32], [33 x i32]* @kBrotliBitMask, i64 0, i64 %201
  %203 = load i32, i32* %202, align 4
  br label %204

204:                                              ; preds = %200, %197
  %205 = phi i32 [ %199, %197 ], [ %203, %200 ]
  %206 = and i32 %205, %196
  %207 = add i32 %193, %135
  store i32 %207, i32* %13, align 8
  %208 = add i32 %206, %138
  %209 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 31, i64 2
  store i32 %208, i32* %209, align 4
  switch i16 %73, label %216 [
    i16 1, label %210
    i16 0, label %214
  ]

210:                                              ; preds = %204
  %211 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 5
  %212 = load i32, i32* %211, align 4
  %213 = add i32 %212, 1
  br label %218

214:                                              ; preds = %204
  %215 = load i32, i32* %10, align 4
  br label %218

216:                                              ; preds = %204
  %217 = add nsw i32 %74, -2
  br label %218

218:                                              ; preds = %216, %214, %210
  %219 = phi i32 [ %215, %214 ], [ %217, %216 ], [ %213, %210 ]
  %220 = icmp ult i32 %219, %3
  %221 = select i1 %220, i32 0, i32 %3
  %222 = sub i32 %219, %221
  %223 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 33, i64 5
  %224 = load i32, i32* %223, align 4
  store i32 %224, i32* %10, align 4
  store i32 %222, i32* %223, align 4
  %225 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 37
  %226 = load i8*, i8** %225, align 8
  %227 = shl i32 %222, 2
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds i8, i8* %226, i64 %228
  %230 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 21
  store i8* %229, i8** %230, align 8
  %231 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 28
  %232 = load i32, i32* %231, align 4
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i8, i8* %229, i64 %233
  %235 = load i8, i8* %234, align 1
  %236 = getelementptr inbounds %struct.BrotliDecoderStateStruct, %struct.BrotliDecoderStateStruct* %0, i64 0, i32 39
  store i8 %235, i8* %236, align 8
  br label %237

237:                                              ; preds = %1, %218
  ret void
}

declare i32 @BrotliTransformDictionaryWord(i8*, i8*, i32, %struct.BrotliTransforms*, i32) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #13

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree noinline norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree noinline norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone }
attributes #12 = { nofree noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind readnone speculatable }
attributes #14 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 1, i32 33}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = !{i32 0, i32 33}
!14 = distinct !{!14, !4}
!15 = distinct !{!15, !11}
!16 = distinct !{!16, !4}
!17 = distinct !{!17, !4}
!18 = distinct !{!18, !11}
!19 = !{!"branch_weights", i32 1, i32 2000}
!20 = !{!"branch_weights", i32 2000, i32 1}
!21 = distinct !{!21, !4}
