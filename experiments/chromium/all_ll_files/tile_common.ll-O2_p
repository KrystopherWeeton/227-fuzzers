; ModuleID = '../../third_party/libaom/source/libaom/av1/common/tile_common.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/tile_common.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%union.int_mv = type { i32 }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_tile_init(%struct.TileInfo* nocapture, %struct.AV1Common* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 38, i32 16, i64 %5
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 35
  %9 = load %struct.SequenceHeader*, %struct.SequenceHeader** %8, align 16
  %10 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %9, i64 0, i32 9
  %11 = load i32, i32* %10, align 4
  %12 = shl i32 %7, %11
  %13 = add nsw i32 %2, 1
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 38, i32 16, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = shl i32 %16, %11
  %18 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 4
  store i32 %2, i32* %18, align 4
  %19 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 0
  store i32 %12, i32* %19, align 4
  %20 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 21, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = icmp slt i32 %17, %21
  %23 = select i1 %22, i32 %17, i32 %21
  %24 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 1
  store i32 %23, i32* %24, align 4
  %25 = sext i32 %3 to i64
  %26 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 38, i32 15, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = load %struct.SequenceHeader*, %struct.SequenceHeader** %8, align 16
  %29 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %28, i64 0, i32 9
  %30 = load i32, i32* %29, align 4
  %31 = shl i32 %27, %30
  %32 = add nsw i32 %3, 1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 38, i32 15, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = shl i32 %35, %30
  %37 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 5
  store i32 %3, i32* %37, align 4
  %38 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 2
  store i32 %31, i32* %38, align 4
  %39 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 21, i32 4
  %40 = load i32, i32* %39, align 16
  %41 = icmp slt i32 %36, %40
  %42 = select i1 %41, i32 %36, i32 %40
  %43 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 3
  store i32 %42, i32* %43, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_tile_set_row(%struct.TileInfo* nocapture, %struct.AV1Common* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = sext i32 %2 to i64
  %5 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 38, i32 16, i64 %4
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 35
  %8 = load %struct.SequenceHeader*, %struct.SequenceHeader** %7, align 16
  %9 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %8, i64 0, i32 9
  %10 = load i32, i32* %9, align 4
  %11 = shl i32 %6, %10
  %12 = add nsw i32 %2, 1
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 38, i32 16, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = shl i32 %15, %10
  %17 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 4
  store i32 %2, i32* %17, align 4
  %18 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 0
  store i32 %11, i32* %18, align 4
  %19 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 21, i32 3
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %16, %20
  %22 = select i1 %21, i32 %16, i32 %20
  %23 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 1
  store i32 %22, i32* %23, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_tile_set_col(%struct.TileInfo* nocapture, %struct.AV1Common* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = sext i32 %2 to i64
  %5 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 38, i32 15, i64 %4
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 35
  %8 = load %struct.SequenceHeader*, %struct.SequenceHeader** %7, align 16
  %9 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %8, i64 0, i32 9
  %10 = load i32, i32* %9, align 4
  %11 = shl i32 %6, %10
  %12 = add nsw i32 %2, 1
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 38, i32 15, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = shl i32 %15, %10
  %17 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 5
  store i32 %2, i32* %17, align 4
  %18 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 2
  store i32 %11, i32* %18, align 4
  %19 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 21, i32 4
  %20 = load i32, i32* %19, align 16
  %21 = icmp slt i32 %16, %20
  %22 = select i1 %21, i32 %16, i32 %20
  %23 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 3
  store i32 %22, i32* %23, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_get_tile_limits(%struct.AV1Common* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %3 = load %struct.SequenceHeader*, %struct.SequenceHeader** %2, align 16
  %4 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 4
  %5 = load i32, i32* %4, align 16
  %6 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %3, i64 0, i32 9
  %7 = load i32, i32* %6, align 4
  %8 = shl nsw i32 -1, %7
  %9 = xor i32 %8, -1
  %10 = add nsw i32 %5, %9
  %11 = and i32 %10, %8
  %12 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 21, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = add nsw i32 %13, %9
  %15 = ashr i32 %11, %7
  %16 = add nsw i32 %7, 2
  %17 = lshr i32 4096, %16
  %18 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 2
  store i32 %17, i32* %18, align 4
  %19 = shl nsw i32 %16, 1
  br label %20

20:                                               ; preds = %20, %1
  %21 = phi i32 [ 0, %1 ], [ %24, %20 ]
  %22 = shl i32 %17, %21
  %23 = icmp slt i32 %22, %15
  %24 = add nuw nsw i32 %21, 1
  br i1 %23, label %20, label %25

25:                                               ; preds = %20
  %26 = and i32 %14, %8
  %27 = ashr i32 %26, %7
  %28 = lshr i32 9437184, %19
  %29 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 10
  store i32 %21, i32* %29, align 4
  %30 = icmp slt i32 %15, 64
  %31 = select i1 %30, i32 %15, i32 64
  br label %32

32:                                               ; preds = %32, %25
  %33 = phi i32 [ 0, %25 ], [ %36, %32 ]
  %34 = shl i32 1, %33
  %35 = icmp slt i32 %34, %31
  %36 = add nuw nsw i32 %33, 1
  br i1 %35, label %32, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 12
  store i32 %33, i32* %38, align 4
  %39 = icmp slt i32 %27, 64
  %40 = select i1 %39, i32 %27, i32 64
  br label %41

41:                                               ; preds = %41, %37
  %42 = phi i32 [ 0, %37 ], [ %45, %41 ]
  %43 = shl i32 1, %42
  %44 = icmp slt i32 %43, %40
  %45 = add nuw nsw i32 %42, 1
  br i1 %44, label %41, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 13
  store i32 %42, i32* %47, align 4
  %48 = mul nsw i32 %15, %27
  br label %49

49:                                               ; preds = %49, %46
  %50 = phi i32 [ 0, %46 ], [ %53, %49 ]
  %51 = shl i32 %28, %50
  %52 = icmp slt i32 %51, %48
  %53 = add nuw nsw i32 %50, 1
  br i1 %52, label %49, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 14
  %56 = icmp ugt i32 %50, %21
  %57 = select i1 %56, i32 %50, i32 %21
  store i32 %57, i32* %55, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_calculate_tile_cols(%struct.SequenceHeader* nocapture readonly, i32, i32, %struct.CommonTileParams* nocapture) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %0, i64 0, i32 9
  %6 = load i32, i32* %5, align 4
  %7 = shl nsw i32 -1, %6
  %8 = xor i32 %7, -1
  %9 = add nsw i32 %8, %2
  %10 = and i32 %9, %7
  %11 = add nsw i32 %8, %1
  %12 = and i32 %11, %7
  %13 = ashr i32 %10, %6
  %14 = ashr i32 %12, %6
  %15 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 4
  store i32 -1, i32* %15, align 4
  %16 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 5
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %137, label %19

19:                                               ; preds = %4
  %20 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 6
  %21 = load i32, i32* %20, align 4
  %22 = shl nsw i32 -1, %21
  %23 = xor i32 %22, -1
  %24 = add nsw i32 %13, %23
  %25 = and i32 %24, %22
  %26 = ashr i32 %25, %21
  %27 = icmp sgt i32 %13, 0
  br i1 %27, label %28, label %117

28:                                               ; preds = %19
  %29 = add i32 %13, -1
  %30 = udiv i32 %29, %26
  %31 = zext i32 %30 to i64
  %32 = add nuw nsw i64 %31, 1
  %33 = icmp ult i64 %32, 8
  br i1 %33, label %104, label %34

34:                                               ; preds = %28
  %35 = and i64 %32, 8589934584
  %36 = trunc i64 %35 to i32
  %37 = mul i32 %26, %36
  %38 = insertelement <4 x i32> undef, i32 %26, i32 0
  %39 = shufflevector <4 x i32> %38, <4 x i32> undef, <4 x i32> zeroinitializer
  %40 = mul <4 x i32> %39, <i32 0, i32 1, i32 2, i32 3>
  %41 = shl i32 %26, 2
  %42 = insertelement <4 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = add nsw i64 %35, -8
  %45 = lshr exact i64 %44, 3
  %46 = add nuw nsw i64 %45, 1
  %47 = and i64 %46, 3
  %48 = icmp ult i64 %44, 24
  br i1 %48, label %85, label %49

49:                                               ; preds = %34
  %50 = sub nsw i64 %46, %47
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi i64 [ 0, %49 ], [ %81, %51 ]
  %53 = phi <4 x i32> [ %40, %49 ], [ %82, %51 ]
  %54 = phi i64 [ %50, %49 ], [ %83, %51 ]
  %55 = add <4 x i32> %53, %43
  %56 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 15, i64 %52
  %57 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %57, align 4
  %58 = getelementptr inbounds i32, i32* %56, i64 4
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> %55, <4 x i32>* %59, align 4
  %60 = or i64 %52, 8
  %61 = add <4 x i32> %55, %43
  %62 = add <4 x i32> %61, %43
  %63 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 15, i64 %60
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %61, <4 x i32>* %64, align 4
  %65 = getelementptr inbounds i32, i32* %63, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %62, <4 x i32>* %66, align 4
  %67 = or i64 %52, 16
  %68 = add <4 x i32> %62, %43
  %69 = add <4 x i32> %68, %43
  %70 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 15, i64 %67
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %71, align 4
  %72 = getelementptr inbounds i32, i32* %70, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %73, align 4
  %74 = or i64 %52, 24
  %75 = add <4 x i32> %69, %43
  %76 = add <4 x i32> %75, %43
  %77 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 15, i64 %74
  %78 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %78, align 4
  %79 = getelementptr inbounds i32, i32* %77, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %80, align 4
  %81 = add i64 %52, 32
  %82 = add <4 x i32> %76, %43
  %83 = add i64 %54, -4
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %51, !llvm.loop !2

85:                                               ; preds = %51, %34
  %86 = phi i64 [ 0, %34 ], [ %81, %51 ]
  %87 = phi <4 x i32> [ %40, %34 ], [ %82, %51 ]
  %88 = icmp eq i64 %47, 0
  br i1 %88, label %102, label %89

89:                                               ; preds = %85, %89
  %90 = phi i64 [ %98, %89 ], [ %86, %85 ]
  %91 = phi <4 x i32> [ %99, %89 ], [ %87, %85 ]
  %92 = phi i64 [ %100, %89 ], [ %47, %85 ]
  %93 = add <4 x i32> %91, %43
  %94 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 15, i64 %90
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %95, align 4
  %96 = getelementptr inbounds i32, i32* %94, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %97, align 4
  %98 = add i64 %90, 8
  %99 = add <4 x i32> %93, %43
  %100 = add i64 %92, -1
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %89, !llvm.loop !4

102:                                              ; preds = %89, %85
  %103 = icmp eq i64 %32, %35
  br i1 %103, label %114, label %104

104:                                              ; preds = %102, %28
  %105 = phi i64 [ 0, %28 ], [ %35, %102 ]
  %106 = phi i32 [ 0, %28 ], [ %37, %102 ]
  br label %107

107:                                              ; preds = %104, %107
  %108 = phi i64 [ %112, %107 ], [ %105, %104 ]
  %109 = phi i32 [ %111, %107 ], [ %106, %104 ]
  %110 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 15, i64 %108
  store i32 %109, i32* %110, align 4
  %111 = add nsw i32 %109, %26
  %112 = add nuw nsw i64 %108, 1
  %113 = icmp slt i32 %111, %13
  br i1 %113, label %107, label %114, !llvm.loop !6

114:                                              ; preds = %107, %102
  %115 = phi i64 [ %35, %102 ], [ %112, %107 ]
  %116 = trunc i64 %115 to i32
  br label %117

117:                                              ; preds = %114, %19
  %118 = phi i32 [ 0, %19 ], [ %116, %114 ]
  %119 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 0
  store i32 %118, i32* %119, align 4
  %120 = zext i32 %118 to i64
  %121 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 15, i64 %120
  store i32 %13, i32* %121, align 4
  %122 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 14
  %123 = load i32, i32* %122, align 4
  %124 = sub nsw i32 %123, %21
  %125 = icmp sgt i32 %124, 0
  %126 = select i1 %125, i32 %124, i32 0
  %127 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 11
  store i32 %126, i32* %127, align 4
  %128 = ashr i32 %14, %126
  %129 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 3
  store i32 %128, i32* %129, align 4
  %130 = load i32, i32* %5, align 4
  %131 = shl i32 %26, %130
  %132 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 8
  %133 = icmp slt i32 %131, %2
  %134 = select i1 %133, i32 %131, i32 %2
  store i32 %134, i32* %132, align 4
  %135 = icmp ugt i32 %118, 1
  br i1 %135, label %136, label %223

136:                                              ; preds = %117
  store i32 %134, i32* %15, align 4
  br label %223

137:                                              ; preds = %4
  %138 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 0
  %139 = load i32, i32* %138, align 4
  br label %140

140:                                              ; preds = %140, %137
  %141 = phi i32 [ 0, %137 ], [ %144, %140 ]
  %142 = shl i32 1, %141
  %143 = icmp slt i32 %142, %139
  %144 = add nuw nsw i32 %141, 1
  br i1 %143, label %140, label %145

145:                                              ; preds = %140
  %146 = mul nsw i32 %14, %13
  %147 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 6
  store i32 %141, i32* %147, align 4
  %148 = icmp sgt i32 %139, 0
  br i1 %148, label %149, label %206

149:                                              ; preds = %145
  %150 = add nsw i32 %139, -1
  %151 = sext i32 %150 to i64
  %152 = zext i32 %139 to i64
  %153 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 15, i64 0
  %154 = load i32, i32* %153, align 4
  %155 = and i64 %152, 1
  %156 = icmp eq i32 %139, 1
  br i1 %156, label %187, label %157

157:                                              ; preds = %149
  %158 = sub nsw i64 %152, %155
  br label %159

159:                                              ; preds = %159, %157
  %160 = phi i32 [ %154, %157 ], [ %177, %159 ]
  %161 = phi i64 [ 0, %157 ], [ %175, %159 ]
  %162 = phi i32 [ 65536, %157 ], [ %184, %159 ]
  %163 = phi i32 [ 1, %157 ], [ %180, %159 ]
  %164 = phi i64 [ %158, %157 ], [ %185, %159 ]
  %165 = or i64 %161, 1
  %166 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 15, i64 %165
  %167 = load i32, i32* %166, align 4
  %168 = sub nsw i32 %167, %160
  %169 = icmp sgt i32 %163, %168
  %170 = select i1 %169, i32 %163, i32 %168
  %171 = icmp slt i64 %161, %151
  %172 = icmp slt i32 %162, %168
  %173 = select i1 %172, i32 %162, i32 %168
  %174 = select i1 %171, i32 %173, i32 %162
  %175 = add nuw nsw i64 %161, 2
  %176 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 15, i64 %175
  %177 = load i32, i32* %176, align 4
  %178 = sub nsw i32 %177, %167
  %179 = icmp sgt i32 %170, %178
  %180 = select i1 %179, i32 %170, i32 %178
  %181 = icmp slt i64 %165, %151
  %182 = icmp slt i32 %174, %178
  %183 = select i1 %182, i32 %174, i32 %178
  %184 = select i1 %181, i32 %183, i32 %174
  %185 = add i64 %164, -2
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %159

187:                                              ; preds = %159, %149
  %188 = phi i32 [ undef, %149 ], [ %180, %159 ]
  %189 = phi i32 [ undef, %149 ], [ %184, %159 ]
  %190 = phi i32 [ %154, %149 ], [ %177, %159 ]
  %191 = phi i64 [ 0, %149 ], [ %175, %159 ]
  %192 = phi i32 [ 65536, %149 ], [ %184, %159 ]
  %193 = phi i32 [ 1, %149 ], [ %180, %159 ]
  %194 = icmp eq i64 %155, 0
  br i1 %194, label %206, label %195

195:                                              ; preds = %187
  %196 = add nuw nsw i64 %191, 1
  %197 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 15, i64 %196
  %198 = load i32, i32* %197, align 4
  %199 = sub nsw i32 %198, %190
  %200 = icmp slt i64 %191, %151
  %201 = icmp slt i32 %192, %199
  %202 = select i1 %201, i32 %192, i32 %199
  %203 = select i1 %200, i32 %202, i32 %192
  %204 = icmp sgt i32 %193, %199
  %205 = select i1 %204, i32 %193, i32 %199
  br label %206

206:                                              ; preds = %195, %187, %145
  %207 = phi i32 [ 1, %145 ], [ %188, %187 ], [ %205, %195 ]
  %208 = phi i32 [ 65536, %145 ], [ %189, %187 ], [ %203, %195 ]
  %209 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 14
  %210 = load i32, i32* %209, align 4
  %211 = icmp eq i32 %210, 0
  %212 = add nsw i32 %210, 1
  %213 = select i1 %211, i32 0, i32 %212
  %214 = ashr i32 %146, %213
  %215 = sdiv i32 %214, %207
  %216 = icmp sgt i32 %215, 1
  %217 = select i1 %216, i32 %215, i32 1
  %218 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %3, i64 0, i32 3
  store i32 %217, i32* %218, align 4
  %219 = icmp sgt i32 %139, 1
  br i1 %219, label %220, label %223

220:                                              ; preds = %206
  %221 = load i32, i32* %5, align 4
  %222 = shl i32 %208, %221
  store i32 %222, i32* %15, align 4
  br label %223

223:                                              ; preds = %206, %220, %117, %136
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_calculate_tile_rows(%struct.SequenceHeader* nocapture readonly, i32, %struct.CommonTileParams* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %0, i64 0, i32 9
  %5 = load i32, i32* %4, align 4
  %6 = shl nsw i32 -1, %5
  %7 = xor i32 %6, -1
  %8 = add nsw i32 %7, %1
  %9 = and i32 %8, %6
  %10 = ashr i32 %9, %5
  %11 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %2, i64 0, i32 5
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %122, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %2, i64 0, i32 7
  %16 = load i32, i32* %15, align 4
  %17 = shl nsw i32 -1, %16
  %18 = xor i32 %17, -1
  %19 = add nsw i32 %10, %18
  %20 = and i32 %19, %17
  %21 = ashr i32 %20, %16
  %22 = icmp sgt i32 %10, 0
  br i1 %22, label %23, label %112

23:                                               ; preds = %14
  %24 = add i32 %10, -1
  %25 = udiv i32 %24, %21
  %26 = zext i32 %25 to i64
  %27 = add nuw nsw i64 %26, 1
  %28 = icmp ult i64 %27, 8
  br i1 %28, label %99, label %29

29:                                               ; preds = %23
  %30 = and i64 %27, 8589934584
  %31 = trunc i64 %30 to i32
  %32 = mul i32 %21, %31
  %33 = insertelement <4 x i32> undef, i32 %21, i32 0
  %34 = shufflevector <4 x i32> %33, <4 x i32> undef, <4 x i32> zeroinitializer
  %35 = mul <4 x i32> %34, <i32 0, i32 1, i32 2, i32 3>
  %36 = shl i32 %21, 2
  %37 = insertelement <4 x i32> undef, i32 %36, i32 0
  %38 = shufflevector <4 x i32> %37, <4 x i32> undef, <4 x i32> zeroinitializer
  %39 = add nsw i64 %30, -8
  %40 = lshr exact i64 %39, 3
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 3
  %43 = icmp ult i64 %39, 24
  br i1 %43, label %80, label %44

44:                                               ; preds = %29
  %45 = sub nsw i64 %41, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %76, %46 ]
  %48 = phi <4 x i32> [ %35, %44 ], [ %77, %46 ]
  %49 = phi i64 [ %45, %44 ], [ %78, %46 ]
  %50 = add <4 x i32> %48, %38
  %51 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %2, i64 0, i32 16, i64 %47
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %52, align 4
  %53 = getelementptr inbounds i32, i32* %51, i64 4
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %54, align 4
  %55 = or i64 %47, 8
  %56 = add <4 x i32> %50, %38
  %57 = add <4 x i32> %56, %38
  %58 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %2, i64 0, i32 16, i64 %55
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> %56, <4 x i32>* %59, align 4
  %60 = getelementptr inbounds i32, i32* %58, i64 4
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> %57, <4 x i32>* %61, align 4
  %62 = or i64 %47, 16
  %63 = add <4 x i32> %57, %38
  %64 = add <4 x i32> %63, %38
  %65 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %2, i64 0, i32 16, i64 %62
  %66 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %63, <4 x i32>* %66, align 4
  %67 = getelementptr inbounds i32, i32* %65, i64 4
  %68 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> %64, <4 x i32>* %68, align 4
  %69 = or i64 %47, 24
  %70 = add <4 x i32> %64, %38
  %71 = add <4 x i32> %70, %38
  %72 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %2, i64 0, i32 16, i64 %69
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %73, align 4
  %74 = getelementptr inbounds i32, i32* %72, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %75, align 4
  %76 = add i64 %47, 32
  %77 = add <4 x i32> %71, %38
  %78 = add i64 %49, -4
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %46, !llvm.loop !8

80:                                               ; preds = %46, %29
  %81 = phi i64 [ 0, %29 ], [ %76, %46 ]
  %82 = phi <4 x i32> [ %35, %29 ], [ %77, %46 ]
  %83 = icmp eq i64 %42, 0
  br i1 %83, label %97, label %84

84:                                               ; preds = %80, %84
  %85 = phi i64 [ %93, %84 ], [ %81, %80 ]
  %86 = phi <4 x i32> [ %94, %84 ], [ %82, %80 ]
  %87 = phi i64 [ %95, %84 ], [ %42, %80 ]
  %88 = add <4 x i32> %86, %38
  %89 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %2, i64 0, i32 16, i64 %85
  %90 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> %86, <4 x i32>* %90, align 4
  %91 = getelementptr inbounds i32, i32* %89, i64 4
  %92 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> %88, <4 x i32>* %92, align 4
  %93 = add i64 %85, 8
  %94 = add <4 x i32> %88, %38
  %95 = add i64 %87, -1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %97, label %84, !llvm.loop !9

97:                                               ; preds = %84, %80
  %98 = icmp eq i64 %27, %30
  br i1 %98, label %109, label %99

99:                                               ; preds = %97, %23
  %100 = phi i64 [ 0, %23 ], [ %30, %97 ]
  %101 = phi i32 [ 0, %23 ], [ %32, %97 ]
  br label %102

102:                                              ; preds = %99, %102
  %103 = phi i64 [ %107, %102 ], [ %100, %99 ]
  %104 = phi i32 [ %106, %102 ], [ %101, %99 ]
  %105 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %2, i64 0, i32 16, i64 %103
  store i32 %104, i32* %105, align 4
  %106 = add nsw i32 %104, %21
  %107 = add nuw nsw i64 %103, 1
  %108 = icmp slt i32 %106, %10
  br i1 %108, label %102, label %109, !llvm.loop !10

109:                                              ; preds = %102, %97
  %110 = phi i64 [ %30, %97 ], [ %107, %102 ]
  %111 = trunc i64 %110 to i32
  br label %112

112:                                              ; preds = %109, %14
  %113 = phi i32 [ 0, %14 ], [ %111, %109 ]
  %114 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %2, i64 0, i32 1
  store i32 %113, i32* %114, align 4
  %115 = zext i32 %113 to i64
  %116 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %2, i64 0, i32 16, i64 %115
  store i32 %10, i32* %116, align 4
  %117 = load i32, i32* %4, align 4
  %118 = shl i32 %21, %117
  %119 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %2, i64 0, i32 9
  %120 = icmp slt i32 %118, %1
  %121 = select i1 %120, i32 %118, i32 %1
  store i32 %121, i32* %119, align 4
  br label %132

122:                                              ; preds = %3
  %123 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %2, i64 0, i32 1
  %124 = load i32, i32* %123, align 4
  br label %125

125:                                              ; preds = %125, %122
  %126 = phi i32 [ 0, %122 ], [ %129, %125 ]
  %127 = shl i32 1, %126
  %128 = icmp slt i32 %127, %124
  %129 = add nuw nsw i32 %126, 1
  br i1 %128, label %125, label %130

130:                                              ; preds = %125
  %131 = getelementptr inbounds %struct.CommonTileParams, %struct.CommonTileParams* %2, i64 0, i32 7
  store i32 %126, i32* %131, align 4
  br label %132

132:                                              ; preds = %130, %112
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av1_get_sb_rows_in_tile(%struct.AV1Common* nocapture readonly, %struct.TileInfo* nocapture readonly byval(%struct.TileInfo) align 8) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = sub i32 %4, %6
  %8 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %9 = load %struct.SequenceHeader*, %struct.SequenceHeader** %8, align 16
  %10 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %9, i64 0, i32 9
  %11 = load i32, i32* %10, align 4
  %12 = shl nsw i32 -1, %11
  %13 = xor i32 %12, -1
  %14 = add nsw i32 %7, %13
  %15 = and i32 %14, %12
  %16 = ashr i32 %15, %11
  ret i32 %16
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av1_get_sb_cols_in_tile(%struct.AV1Common* nocapture readonly, %struct.TileInfo* nocapture readonly byval(%struct.TileInfo) align 8) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %1, i64 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %1, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = sub i32 %4, %6
  %8 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %9 = load %struct.SequenceHeader*, %struct.SequenceHeader** %8, align 16
  %10 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %9, i64 0, i32 9
  %11 = load i32, i32* %10, align 4
  %12 = shl nsw i32 -1, %11
  %13 = xor i32 %12, -1
  %14 = add nsw i32 %7, %13
  %15 = and i32 %14, %12
  %16 = ashr i32 %15, %11
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @av1_get_tile_rect(%struct.TileInfo* nocapture readonly, %struct.AV1Common* nocapture readonly, i32) local_unnamed_addr #2 {
  %4 = alloca <4 x i32>, align 16
  %5 = bitcast <4 x i32>* %4 to { i64, i64 }*
  %6 = bitcast <4 x i32>* %4 to %struct.AV1PixelRect*
  %7 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 0
  %8 = getelementptr inbounds %struct.AV1PixelRect, %struct.AV1PixelRect* %6, i64 0, i32 1
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %10 = bitcast i64* %9 to i32*
  %11 = getelementptr inbounds %struct.AV1PixelRect, %struct.AV1PixelRect* %6, i64 0, i32 3
  %12 = bitcast %struct.TileInfo* %0 to <4 x i32>*
  %13 = load <4 x i32>, <4 x i32>* %12, align 4
  %14 = shl nsw <4 x i32> %13, <i32 2, i32 2, i32 2, i32 2>
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 2, i32 0, i32 3, i32 1>
  store <4 x i32> %15, <4 x i32>* %4, align 16
  %16 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 2
  %17 = load i32, i32* %16, align 16
  %18 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 6
  %19 = load i32, i32* %18, align 16
  %20 = icmp eq i32 %17, %19
  %21 = extractelement <4 x i32> %14, i32 3
  %22 = extractelement <4 x i32> %14, i32 1
  br i1 %20, label %32, label %23

23:                                               ; preds = %3
  %24 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 8
  %25 = load i8, i8* %24, align 8
  %26 = zext i8 %25 to i32
  call void @av1_calculate_unscaled_superres_size(i32* nonnull %7, i32* %8, i32 %26) #4
  %27 = load i8, i8* %24, align 8
  %28 = zext i8 %27 to i32
  call void @av1_calculate_unscaled_superres_size(i32* %10, i32* %11, i32 %28) #4
  %29 = load i32, i32* %18, align 16
  %30 = load i32, i32* %10, align 8
  %31 = load i32, i32* %11, align 4
  br label %32

32:                                               ; preds = %3, %23
  %33 = phi i32 [ %22, %3 ], [ %31, %23 ]
  %34 = phi i32 [ %21, %3 ], [ %30, %23 ]
  %35 = phi i32 [ %17, %3 ], [ %29, %23 ]
  %36 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 7
  %37 = load i32, i32* %36, align 4
  %38 = icmp slt i32 %34, %35
  %39 = select i1 %38, i32 %34, i32 %35
  store i32 %39, i32* %10, align 8
  %40 = icmp slt i32 %33, %37
  %41 = select i1 %40, i32 %33, i32 %37
  store i32 %41, i32* %11, align 4
  %42 = icmp eq i32 %2, 0
  br i1 %42, label %54, label %43

43:                                               ; preds = %32
  %44 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %1, i64 0, i32 35
  %45 = load %struct.SequenceHeader*, %struct.SequenceHeader** %44, align 16
  %46 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %45, i64 0, i32 32
  %47 = load i32, i32* %46, align 8
  %48 = icmp ne i32 %47, 0
  %49 = zext i1 %48 to i32
  %50 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %45, i64 0, i32 33
  %51 = load i32, i32* %50, align 4
  %52 = icmp ne i32 %51, 0
  %53 = zext i1 %52 to i32
  br label %54

54:                                               ; preds = %32, %43
  %55 = phi i32 [ %49, %43 ], [ 0, %32 ]
  %56 = phi i32 [ %53, %43 ], [ 0, %32 ]
  %57 = load i32, i32* %7, align 16
  %58 = shl i32 1, %55
  %59 = lshr i32 %58, 1
  %60 = add nsw i32 %57, %59
  %61 = ashr i32 %60, %55
  store i32 %61, i32* %7, align 16
  %62 = add nsw i32 %59, %39
  %63 = ashr i32 %62, %55
  store i32 %63, i32* %10, align 8
  %64 = load i32, i32* %8, align 4
  %65 = shl i32 1, %56
  %66 = lshr i32 %65, 1
  %67 = add nsw i32 %64, %66
  %68 = ashr i32 %67, %56
  store i32 %68, i32* %8, align 4
  %69 = add nsw i32 %66, %41
  %70 = ashr i32 %69, %56
  store i32 %70, i32* %11, align 4
  %71 = bitcast <4 x i32>* %4 to i64*
  %72 = load i64, i64* %71, align 16
  %73 = insertvalue { i64, i64 } undef, i64 %72, 0
  %74 = load i64, i64* %9, align 8
  %75 = insertvalue { i64, i64 } %73, i64 %74, 1
  ret { i64, i64 } %75
}

declare void @av1_calculate_unscaled_superres_size(i32*, i32*, i32) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_get_uniform_tile_size(%struct.AV1Common* nocapture readonly, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 5
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %13

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %18

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  br label %24

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 8
  %15 = load i32, i32* %14, align 4
  store i32 %15, i32* %1, align 4
  %16 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 9
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %2, align 4
  br label %54

18:                                               ; preds = %24, %7
  %19 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %54

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  br label %39

24:                                               ; preds = %11, %24
  %25 = phi i64 [ 0, %11 ], [ %26, %24 ]
  %26 = add nuw nsw i64 %25, 1
  %27 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 15, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 15, i64 %25
  %30 = load i32, i32* %29, align 4
  %31 = sub nsw i32 %28, %30
  %32 = load %struct.SequenceHeader*, %struct.SequenceHeader** %12, align 16
  %33 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %32, i64 0, i32 8
  %34 = load i32, i32* %33, align 8
  %35 = mul nsw i32 %34, %31
  store i32 %35, i32* %1, align 4
  %36 = load i32, i32* %8, align 4
  %37 = sext i32 %36 to i64
  %38 = icmp slt i64 %26, %37
  br i1 %38, label %24, label %18

39:                                               ; preds = %22, %39
  %40 = phi i64 [ 0, %22 ], [ %41, %39 ]
  %41 = add nuw nsw i64 %40, 1
  %42 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 16, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 16, i64 %40
  %45 = load i32, i32* %44, align 4
  %46 = sub nsw i32 %43, %45
  %47 = load %struct.SequenceHeader*, %struct.SequenceHeader** %23, align 16
  %48 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %47, i64 0, i32 8
  %49 = load i32, i32* %48, align 8
  %50 = mul nsw i32 %49, %46
  store i32 %50, i32* %2, align 4
  %51 = load i32, i32* %19, align 4
  %52 = sext i32 %51 to i64
  %53 = icmp slt i64 %41, %52
  br i1 %53, label %39, label %54

54:                                               ; preds = %39, %18, %13
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av1_is_min_tile_width_satisfied(%struct.AV1Common* nocapture readonly) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 38, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 2
  %9 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 16
  %11 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 6
  %12 = load i32, i32* %11, align 16
  %13 = icmp ne i32 %10, %12
  %14 = zext i1 %13 to i32
  %15 = shl i32 64, %14
  %16 = icmp sge i32 %8, %15
  %17 = zext i1 %16 to i32
  br label %18

18:                                               ; preds = %1, %5
  %19 = phi i32 [ %17, %5 ], [ 1, %1 ]
  ret i32 %19
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !7, !3}
