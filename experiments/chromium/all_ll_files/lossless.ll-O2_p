; ModuleID = '../../third_party/libwebp/src/dsp/lossless.c'
source_filename = "../../third_party/libwebp/src/dsp/lossless.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VP8LMultipliers = type { i8, i8, i8 }
%struct.VP8LTransform = type { i32, i32, i32, i32, i32* }

@VP8LMapColor8b = common hidden local_unnamed_addr global void (i8*, i32*, i8*, i32, i32, i32)* null, align 8
@VP8LAddGreenToBlueAndRed = common hidden local_unnamed_addr global void (i32*, i32, i32*)* null, align 8
@VP8LConvertBGRAToRGB = common hidden local_unnamed_addr global void (i32*, i32, i8*)* null, align 8
@VP8LConvertBGRAToRGBA = common hidden local_unnamed_addr global void (i32*, i32, i8*)* null, align 8
@WebPApplyAlphaMultiply = external local_unnamed_addr global void (i8*, i32, i32, i32, i32)*, align 8
@VP8LConvertBGRAToBGR = common hidden local_unnamed_addr global void (i32*, i32, i8*)* null, align 8
@VP8LConvertBGRAToRGBA4444 = common hidden local_unnamed_addr global void (i32*, i32, i8*)* null, align 8
@WebPApplyAlphaMultiply4444 = external local_unnamed_addr global void (i8*, i32, i32, i32)*, align 8
@VP8LConvertBGRAToRGB565 = common hidden local_unnamed_addr global void (i32*, i32, i8*)* null, align 8
@VP8LDspInit.VP8LDspInit_body_last_cpuinfo_used = internal global i32 (i32)* bitcast (i32 (i32)** @VP8LDspInit.VP8LDspInit_body_last_cpuinfo_used to i32 (i32)*), align 8
@VP8GetCPUInfo = external local_unnamed_addr global i32 (i32)*, align 8
@VP8LPredictorsAdd = common hidden local_unnamed_addr global [16 x void (i32*, i32*, i32, i32*)*] zeroinitializer, align 16
@VP8LPredictors = common hidden local_unnamed_addr global [16 x i32 (i32, i32*)*] zeroinitializer, align 16
@VP8LPredictorsAdd_C = common hidden local_unnamed_addr global [16 x void (i32*, i32*, i32, i32*)*] zeroinitializer, align 16
@VP8LTransformColorInverse = common hidden local_unnamed_addr global void (%struct.VP8LMultipliers*, i32*, i32, i32*)* null, align 8
@VP8LMapColor32b = common hidden local_unnamed_addr global void (i32*, i32*, i32*, i32, i32, i32)* null, align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @VP8LPredictor0_C(i32, i32* nocapture readnone) #0 {
  ret i32 -16777216
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @VP8LPredictor1_C(i32 returned, i32* nocapture readnone) #0 {
  ret i32 %0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8LPredictor2_C(i32, i32* nocapture readonly) #1 {
  %3 = load i32, i32* %1, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8LPredictor3_C(i32, i32* nocapture readonly) #1 {
  %3 = getelementptr inbounds i32, i32* %1, i64 1
  %4 = load i32, i32* %3, align 4
  ret i32 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8LPredictor4_C(i32, i32* nocapture readonly) #1 {
  %3 = getelementptr inbounds i32, i32* %1, i64 -1
  %4 = load i32, i32* %3, align 4
  ret i32 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8LPredictor5_C(i32, i32* nocapture readonly) #1 {
  %3 = load i32, i32* %1, align 4
  %4 = getelementptr inbounds i32, i32* %1, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = xor i32 %5, %0
  %7 = lshr i32 %6, 1
  %8 = and i32 %7, 2139062143
  %9 = and i32 %5, %0
  %10 = add i32 %8, %9
  %11 = xor i32 %10, %3
  %12 = lshr i32 %11, 1
  %13 = and i32 %12, 2139062143
  %14 = and i32 %10, %3
  %15 = add i32 %13, %14
  ret i32 %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8LPredictor6_C(i32, i32* nocapture readonly) #1 {
  %3 = getelementptr inbounds i32, i32* %1, i64 -1
  %4 = load i32, i32* %3, align 4
  %5 = xor i32 %4, %0
  %6 = lshr i32 %5, 1
  %7 = and i32 %6, 2139062143
  %8 = and i32 %4, %0
  %9 = add i32 %7, %8
  ret i32 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8LPredictor7_C(i32, i32* nocapture readonly) #1 {
  %3 = load i32, i32* %1, align 4
  %4 = xor i32 %3, %0
  %5 = lshr i32 %4, 1
  %6 = and i32 %5, 2139062143
  %7 = and i32 %3, %0
  %8 = add i32 %6, %7
  ret i32 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8LPredictor8_C(i32, i32* nocapture readonly) #1 {
  %3 = getelementptr inbounds i32, i32* %1, i64 -1
  %4 = load i32, i32* %3, align 4
  %5 = load i32, i32* %1, align 4
  %6 = xor i32 %5, %4
  %7 = lshr i32 %6, 1
  %8 = and i32 %7, 2139062143
  %9 = and i32 %5, %4
  %10 = add i32 %8, %9
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8LPredictor9_C(i32, i32* nocapture readonly) #1 {
  %3 = load i32, i32* %1, align 4
  %4 = getelementptr inbounds i32, i32* %1, i64 1
  %5 = load i32, i32* %4, align 4
  %6 = xor i32 %5, %3
  %7 = lshr i32 %6, 1
  %8 = and i32 %7, 2139062143
  %9 = and i32 %5, %3
  %10 = add i32 %8, %9
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8LPredictor10_C(i32, i32* nocapture readonly) #1 {
  %3 = getelementptr inbounds i32, i32* %1, i64 -1
  %4 = load i32, i32* %3, align 4
  %5 = load i32, i32* %1, align 4
  %6 = getelementptr inbounds i32, i32* %1, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = xor i32 %4, %0
  %9 = lshr i32 %8, 1
  %10 = and i32 %9, 2139062143
  %11 = and i32 %4, %0
  %12 = add i32 %10, %11
  %13 = xor i32 %7, %5
  %14 = lshr i32 %13, 1
  %15 = and i32 %14, 2139062143
  %16 = and i32 %7, %5
  %17 = add i32 %15, %16
  %18 = xor i32 %17, %12
  %19 = lshr i32 %18, 1
  %20 = and i32 %19, 2139062143
  %21 = and i32 %17, %12
  %22 = add i32 %20, %21
  ret i32 %22
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8LPredictor11_C(i32, i32* nocapture readonly) #1 {
  %3 = load i32, i32* %1, align 4
  %4 = getelementptr inbounds i32, i32* %1, i64 -1
  %5 = load i32, i32* %4, align 4
  %6 = lshr i32 %3, 24
  %7 = lshr i32 %0, 24
  %8 = lshr i32 %5, 24
  %9 = sub nsw i32 %7, %8
  %10 = sub nsw i32 %6, %8
  %11 = icmp slt i32 %9, 0
  %12 = sub nsw i32 0, %9
  %13 = select i1 %11, i32 %12, i32 %9
  %14 = icmp slt i32 %10, 0
  %15 = sub nsw i32 0, %10
  %16 = select i1 %14, i32 %10, i32 %15
  %17 = lshr i32 %3, 16
  %18 = and i32 %17, 255
  %19 = lshr i32 %0, 16
  %20 = and i32 %19, 255
  %21 = lshr i32 %5, 16
  %22 = and i32 %21, 255
  %23 = sub nsw i32 %20, %22
  %24 = sub nsw i32 %18, %22
  %25 = icmp slt i32 %23, 0
  %26 = sub nsw i32 0, %23
  %27 = select i1 %25, i32 %26, i32 %23
  %28 = icmp slt i32 %24, 0
  %29 = sub nsw i32 0, %24
  %30 = select i1 %28, i32 %24, i32 %29
  %31 = lshr i32 %3, 8
  %32 = and i32 %31, 255
  %33 = lshr i32 %0, 8
  %34 = and i32 %33, 255
  %35 = lshr i32 %5, 8
  %36 = and i32 %35, 255
  %37 = sub nsw i32 %34, %36
  %38 = sub nsw i32 %32, %36
  %39 = icmp slt i32 %37, 0
  %40 = sub nsw i32 0, %37
  %41 = select i1 %39, i32 %40, i32 %37
  %42 = icmp slt i32 %38, 0
  %43 = sub nsw i32 0, %38
  %44 = select i1 %42, i32 %38, i32 %43
  %45 = and i32 %3, 255
  %46 = and i32 %0, 255
  %47 = and i32 %5, 255
  %48 = sub nsw i32 %46, %47
  %49 = sub nsw i32 %45, %47
  %50 = icmp slt i32 %48, 0
  %51 = sub nsw i32 0, %48
  %52 = select i1 %50, i32 %51, i32 %48
  %53 = icmp slt i32 %49, 0
  %54 = sub nsw i32 0, %49
  %55 = select i1 %53, i32 %49, i32 %54
  %56 = add nsw i32 %52, %55
  %57 = add nsw i32 %56, %16
  %58 = add nsw i32 %57, %13
  %59 = add nsw i32 %58, %44
  %60 = add nsw i32 %59, %41
  %61 = add nsw i32 %60, %30
  %62 = add nsw i32 %61, %27
  %63 = icmp slt i32 %62, 1
  %64 = select i1 %63, i32 %3, i32 %0
  ret i32 %64
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8LPredictor12_C(i32, i32* nocapture readonly) #1 {
  %3 = load i32, i32* %1, align 4
  %4 = getelementptr inbounds i32, i32* %1, i64 -1
  %5 = load i32, i32* %4, align 4
  %6 = lshr i32 %0, 24
  %7 = lshr i32 %3, 24
  %8 = lshr i32 %5, 24
  %9 = add nuw nsw i32 %7, %6
  %10 = sub nsw i32 %9, %8
  %11 = icmp ult i32 %10, 256
  %12 = lshr i32 %10, 24
  %13 = xor i32 %12, 255
  %14 = select i1 %11, i32 %10, i32 %13
  %15 = lshr i32 %0, 16
  %16 = and i32 %15, 255
  %17 = lshr i32 %3, 16
  %18 = and i32 %17, 255
  %19 = lshr i32 %5, 16
  %20 = and i32 %19, 255
  %21 = add nuw nsw i32 %18, %16
  %22 = sub nsw i32 %21, %20
  %23 = icmp ult i32 %22, 256
  %24 = lshr i32 %22, 24
  %25 = xor i32 %24, 255
  %26 = select i1 %23, i32 %22, i32 %25
  %27 = lshr i32 %0, 8
  %28 = and i32 %27, 255
  %29 = lshr i32 %3, 8
  %30 = and i32 %29, 255
  %31 = lshr i32 %5, 8
  %32 = and i32 %31, 255
  %33 = add nuw nsw i32 %30, %28
  %34 = sub nsw i32 %33, %32
  %35 = icmp ult i32 %34, 256
  %36 = lshr i32 %34, 24
  %37 = xor i32 %36, 255
  %38 = select i1 %35, i32 %34, i32 %37
  %39 = and i32 %0, 255
  %40 = and i32 %3, 255
  %41 = and i32 %5, 255
  %42 = add nuw nsw i32 %40, %39
  %43 = sub nsw i32 %42, %41
  %44 = icmp ult i32 %43, 256
  %45 = lshr i32 %43, 24
  %46 = xor i32 %45, 255
  %47 = select i1 %44, i32 %43, i32 %46
  %48 = shl i32 %14, 24
  %49 = shl nsw i32 %26, 16
  %50 = shl nsw i32 %38, 8
  %51 = or i32 %48, %47
  %52 = or i32 %51, %49
  %53 = or i32 %52, %50
  ret i32 %53
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8LPredictor13_C(i32, i32* nocapture readonly) #1 {
  %3 = load i32, i32* %1, align 4
  %4 = getelementptr inbounds i32, i32* %1, i64 -1
  %5 = load i32, i32* %4, align 4
  %6 = xor i32 %3, %0
  %7 = lshr i32 %6, 1
  %8 = and i32 %7, 2139062143
  %9 = and i32 %3, %0
  %10 = add i32 %8, %9
  %11 = lshr i32 %10, 24
  %12 = lshr i32 %5, 24
  %13 = sub nsw i32 %11, %12
  %14 = sdiv i32 %13, 2
  %15 = add nsw i32 %14, %11
  %16 = icmp ult i32 %15, 256
  %17 = lshr i32 %15, 24
  %18 = xor i32 %17, 255
  %19 = select i1 %16, i32 %15, i32 %18
  %20 = lshr i32 %10, 16
  %21 = and i32 %20, 255
  %22 = lshr i32 %5, 16
  %23 = and i32 %22, 255
  %24 = sub nsw i32 %21, %23
  %25 = sdiv i32 %24, 2
  %26 = add nsw i32 %25, %21
  %27 = icmp ult i32 %26, 256
  %28 = lshr i32 %26, 24
  %29 = xor i32 %28, 255
  %30 = select i1 %27, i32 %26, i32 %29
  %31 = lshr i32 %10, 8
  %32 = and i32 %31, 255
  %33 = lshr i32 %5, 8
  %34 = and i32 %33, 255
  %35 = sub nsw i32 %32, %34
  %36 = sdiv i32 %35, 2
  %37 = add nsw i32 %36, %32
  %38 = icmp ult i32 %37, 256
  %39 = lshr i32 %37, 24
  %40 = xor i32 %39, 255
  %41 = select i1 %38, i32 %37, i32 %40
  %42 = and i32 %10, 255
  %43 = and i32 %5, 255
  %44 = sub nsw i32 %42, %43
  %45 = sdiv i32 %44, 2
  %46 = add nsw i32 %45, %42
  %47 = icmp ult i32 %46, 256
  %48 = lshr i32 %46, 24
  %49 = xor i32 %48, 255
  %50 = select i1 %47, i32 %46, i32 %49
  %51 = shl i32 %19, 24
  %52 = shl nsw i32 %30, 16
  %53 = shl nsw i32 %41, 8
  %54 = or i32 %51, %50
  %55 = or i32 %54, %52
  %56 = or i32 %55, %53
  ret i32 %56
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LAddGreenToBlueAndRed_C(i32* nocapture readonly, i32, i32* nocapture) #3 {
  %4 = icmp sgt i32 %1, 0
  br i1 %4, label %5, label %102

5:                                                ; preds = %3
  %6 = zext i32 %1 to i64
  %7 = icmp ult i32 %1, 8
  br i1 %7, label %50, label %8

8:                                                ; preds = %5
  %9 = getelementptr i32, i32* %2, i64 %6
  %10 = getelementptr i32, i32* %0, i64 %6
  %11 = icmp ugt i32* %10, %2
  %12 = icmp ugt i32* %9, %0
  %13 = and i1 %11, %12
  br i1 %13, label %50, label %14

14:                                               ; preds = %8
  %15 = and i64 %6, 4294967288
  br label %16

16:                                               ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %46, %16 ]
  %18 = getelementptr inbounds i32, i32* %0, i64 %17
  %19 = bitcast i32* %18 to <4 x i32>*
  %20 = load <4 x i32>, <4 x i32>* %19, align 4, !alias.scope !2
  %21 = getelementptr inbounds i32, i32* %18, i64 4
  %22 = bitcast i32* %21 to <4 x i32>*
  %23 = load <4 x i32>, <4 x i32>* %22, align 4, !alias.scope !2
  %24 = lshr <4 x i32> %20, <i32 8, i32 8, i32 8, i32 8>
  %25 = lshr <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %26 = and <4 x i32> %24, <i32 255, i32 255, i32 255, i32 255>
  %27 = and <4 x i32> %25, <i32 255, i32 255, i32 255, i32 255>
  %28 = and <4 x i32> %20, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %29 = and <4 x i32> %23, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %30 = shl nuw nsw <4 x i32> %26, <i32 16, i32 16, i32 16, i32 16>
  %31 = shl nuw nsw <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %32 = or <4 x i32> %30, %26
  %33 = or <4 x i32> %31, %27
  %34 = add nuw nsw <4 x i32> %32, %28
  %35 = add nuw nsw <4 x i32> %33, %29
  %36 = and <4 x i32> %34, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %37 = and <4 x i32> %35, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %38 = and <4 x i32> %20, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %39 = and <4 x i32> %23, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %40 = or <4 x i32> %36, %38
  %41 = or <4 x i32> %37, %39
  %42 = getelementptr inbounds i32, i32* %2, i64 %17
  %43 = bitcast i32* %42 to <4 x i32>*
  store <4 x i32> %40, <4 x i32>* %43, align 4, !alias.scope !5, !noalias !2
  %44 = getelementptr inbounds i32, i32* %42, i64 4
  %45 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %45, align 4, !alias.scope !5, !noalias !2
  %46 = add i64 %17, 8
  %47 = icmp eq i64 %46, %15
  br i1 %47, label %48, label %16, !llvm.loop !7

48:                                               ; preds = %16
  %49 = icmp eq i64 %15, %6
  br i1 %49, label %102, label %50

50:                                               ; preds = %48, %8, %5
  %51 = phi i64 [ 0, %8 ], [ 0, %5 ], [ %15, %48 ]
  %52 = xor i64 %51, -1
  %53 = and i64 %6, 1
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %69, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds i32, i32* %0, i64 %51
  %57 = load i32, i32* %56, align 4
  %58 = lshr i32 %57, 8
  %59 = and i32 %58, 255
  %60 = and i32 %57, 16711935
  %61 = shl nuw nsw i32 %59, 16
  %62 = or i32 %61, %59
  %63 = add nuw nsw i32 %62, %60
  %64 = and i32 %63, 16711935
  %65 = and i32 %57, -16711936
  %66 = or i32 %64, %65
  %67 = getelementptr inbounds i32, i32* %2, i64 %51
  store i32 %66, i32* %67, align 4
  %68 = or i64 %51, 1
  br label %69

69:                                               ; preds = %50, %55
  %70 = phi i64 [ %51, %50 ], [ %68, %55 ]
  %71 = sub nsw i64 0, %6
  %72 = icmp eq i64 %52, %71
  br i1 %72, label %102, label %73

73:                                               ; preds = %69, %73
  %74 = phi i64 [ %100, %73 ], [ %70, %69 ]
  %75 = getelementptr inbounds i32, i32* %0, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = lshr i32 %76, 8
  %78 = and i32 %77, 255
  %79 = and i32 %76, 16711935
  %80 = shl nuw nsw i32 %78, 16
  %81 = or i32 %80, %78
  %82 = add nuw nsw i32 %81, %79
  %83 = and i32 %82, 16711935
  %84 = and i32 %76, -16711936
  %85 = or i32 %83, %84
  %86 = getelementptr inbounds i32, i32* %2, i64 %74
  store i32 %85, i32* %86, align 4
  %87 = add nuw nsw i64 %74, 1
  %88 = getelementptr inbounds i32, i32* %0, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = lshr i32 %89, 8
  %91 = and i32 %90, 255
  %92 = and i32 %89, 16711935
  %93 = shl nuw nsw i32 %91, 16
  %94 = or i32 %93, %91
  %95 = add nuw nsw i32 %94, %92
  %96 = and i32 %95, 16711935
  %97 = and i32 %89, -16711936
  %98 = or i32 %96, %97
  %99 = getelementptr inbounds i32, i32* %2, i64 %87
  store i32 %98, i32* %99, align 4
  %100 = add nuw nsw i64 %74, 2
  %101 = icmp eq i64 %100, %6
  br i1 %101, label %102, label %73, !llvm.loop !9

102:                                              ; preds = %69, %73, %48, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LTransformColorInverse_C(%struct.VP8LMultipliers* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = bitcast i32* %3 to i8*
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %105

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.VP8LMultipliers, %struct.VP8LMultipliers* %0, i64 0, i32 0
  %9 = getelementptr inbounds %struct.VP8LMultipliers, %struct.VP8LMultipliers* %0, i64 0, i32 1
  %10 = getelementptr inbounds %struct.VP8LMultipliers, %struct.VP8LMultipliers* %0, i64 0, i32 2
  %11 = zext i32 %2 to i64
  %12 = icmp ult i32 %2, 4
  br i1 %12, label %70, label %13

13:                                               ; preds = %7
  %14 = getelementptr i32, i32* %3, i64 %11
  %15 = bitcast i32* %14 to i8*
  %16 = getelementptr i32, i32* %1, i64 %11
  %17 = getelementptr inbounds %struct.VP8LMultipliers, %struct.VP8LMultipliers* %0, i64 1, i32 0
  %18 = icmp ugt i32* %16, %3
  %19 = icmp ugt i32* %14, %1
  %20 = and i1 %18, %19
  %21 = icmp ugt i8* %17, %5
  %22 = icmp ult i8* %10, %15
  %23 = and i1 %21, %22
  %24 = or i1 %20, %23
  br i1 %24, label %70, label %25

25:                                               ; preds = %13
  %26 = and i64 %11, 4294967292
  %27 = load i8, i8* %8, align 1, !alias.scope !10
  %28 = insertelement <4 x i8> undef, i8 %27, i32 0
  %29 = shufflevector <4 x i8> %28, <4 x i8> undef, <4 x i32> zeroinitializer
  %30 = sext <4 x i8> %29 to <4 x i32>
  %31 = load i8, i8* %9, align 1, !alias.scope !10
  %32 = insertelement <4 x i8> undef, i8 %31, i32 0
  %33 = shufflevector <4 x i8> %32, <4 x i8> undef, <4 x i32> zeroinitializer
  %34 = sext <4 x i8> %33 to <4 x i32>
  %35 = load i8, i8* %10, align 1, !alias.scope !10
  %36 = insertelement <4 x i8> undef, i8 %35, i32 0
  %37 = shufflevector <4 x i8> %36, <4 x i8> undef, <4 x i32> zeroinitializer
  %38 = sext <4 x i8> %37 to <4 x i32>
  br label %39

39:                                               ; preds = %39, %25
  %40 = phi i64 [ 0, %25 ], [ %66, %39 ]
  %41 = getelementptr inbounds i32, i32* %1, i64 %40
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4, !alias.scope !13
  %44 = lshr <4 x i32> %43, <i32 16, i32 16, i32 16, i32 16>
  %45 = shl <4 x i32> %43, <i32 16, i32 16, i32 16, i32 16>
  %46 = ashr <4 x i32> %45, <i32 24, i32 24, i32 24, i32 24>
  %47 = mul nsw <4 x i32> %46, %30
  %48 = ashr <4 x i32> %47, <i32 5, i32 5, i32 5, i32 5>
  %49 = add nsw <4 x i32> %48, %44
  %50 = mul nsw <4 x i32> %46, %34
  %51 = lshr <4 x i32> %50, <i32 5, i32 5, i32 5, i32 5>
  %52 = add <4 x i32> %51, %43
  %53 = shl <4 x i32> %49, <i32 24, i32 24, i32 24, i32 24>
  %54 = ashr exact <4 x i32> %53, <i32 24, i32 24, i32 24, i32 24>
  %55 = mul nsw <4 x i32> %54, %38
  %56 = lshr <4 x i32> %55, <i32 5, i32 5, i32 5, i32 5>
  %57 = add <4 x i32> %52, %56
  %58 = and <4 x i32> %57, <i32 255, i32 255, i32 255, i32 255>
  %59 = and <4 x i32> %43, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %60 = shl <4 x i32> %49, <i32 16, i32 16, i32 16, i32 16>
  %61 = and <4 x i32> %60, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %62 = or <4 x i32> %61, %59
  %63 = or <4 x i32> %62, %58
  %64 = getelementptr inbounds i32, i32* %3, i64 %40
  %65 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> %63, <4 x i32>* %65, align 4, !alias.scope !15, !noalias !17
  %66 = add i64 %40, 4
  %67 = icmp eq i64 %66, %26
  br i1 %67, label %68, label %39, !llvm.loop !18

68:                                               ; preds = %39
  %69 = icmp eq i64 %26, %11
  br i1 %69, label %105, label %70

70:                                               ; preds = %68, %13, %7
  %71 = phi i64 [ 0, %13 ], [ 0, %7 ], [ %26, %68 ]
  br label %72

72:                                               ; preds = %70, %72
  %73 = phi i64 [ %103, %72 ], [ %71, %70 ]
  %74 = getelementptr inbounds i32, i32* %1, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = lshr i32 %75, 16
  %77 = load i8, i8* %8, align 1
  %78 = sext i8 %77 to i32
  %79 = shl i32 %75, 16
  %80 = ashr i32 %79, 24
  %81 = mul nsw i32 %80, %78
  %82 = ashr i32 %81, 5
  %83 = add nsw i32 %82, %76
  %84 = load i8, i8* %9, align 1
  %85 = sext i8 %84 to i32
  %86 = mul nsw i32 %80, %85
  %87 = lshr i32 %86, 5
  %88 = add i32 %87, %75
  %89 = load i8, i8* %10, align 1
  %90 = sext i8 %89 to i32
  %91 = shl i32 %83, 24
  %92 = ashr exact i32 %91, 24
  %93 = mul nsw i32 %92, %90
  %94 = lshr i32 %93, 5
  %95 = add i32 %88, %94
  %96 = and i32 %95, 255
  %97 = and i32 %75, -16711936
  %98 = shl i32 %83, 16
  %99 = and i32 %98, 16711680
  %100 = or i32 %99, %97
  %101 = or i32 %100, %96
  %102 = getelementptr inbounds i32, i32* %3, i64 %73
  store i32 %101, i32* %102, align 4
  %103 = add nuw nsw i64 %73, 1
  %104 = icmp eq i64 %103, %11
  br i1 %104, label %105, label %72, !llvm.loop !19

105:                                              ; preds = %72, %68, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LColorIndexInverseTransformAlpha(%struct.VP8LTransform* nocapture readonly, i32, i32, i8*, i8*) local_unnamed_addr #4 {
  %6 = getelementptr inbounds %struct.VP8LTransform, %struct.VP8LTransform* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = lshr i32 8, %7
  %9 = getelementptr inbounds %struct.VP8LTransform, %struct.VP8LTransform* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.VP8LTransform, %struct.VP8LTransform* %0, i64 0, i32 4
  %12 = load i32*, i32** %11, align 8
  %13 = icmp slt i32 %8, 8
  br i1 %13, label %14, label %86

14:                                               ; preds = %5
  %15 = shl nsw i32 -1, %7
  %16 = xor i32 %15, -1
  %17 = shl nsw i32 -1, %8
  %18 = xor i32 %17, -1
  %19 = icmp slt i32 %1, %2
  br i1 %19, label %20, label %88

20:                                               ; preds = %14
  %21 = icmp sgt i32 %10, 0
  %22 = and i32 %10, 1
  %23 = icmp eq i32 %10, 1
  %24 = sub i32 %10, %22
  %25 = icmp eq i32 %22, 0
  br label %26

26:                                               ; preds = %81, %20
  %27 = phi i8* [ %3, %20 ], [ %83, %81 ]
  %28 = phi i32 [ %1, %20 ], [ %84, %81 ]
  %29 = phi i8* [ %4, %20 ], [ %82, %81 ]
  br i1 %21, label %30, label %81

30:                                               ; preds = %26
  br i1 %23, label %57, label %31

31:                                               ; preds = %30, %93
  %32 = phi i32 [ %104, %93 ], [ 0, %30 ]
  %33 = phi i32 [ %103, %93 ], [ 0, %30 ]
  %34 = phi i8* [ %94, %93 ], [ %27, %30 ]
  %35 = phi i8* [ %102, %93 ], [ %29, %30 ]
  %36 = phi i32 [ %105, %93 ], [ %24, %30 ]
  %37 = and i32 %32, %16
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %43

39:                                               ; preds = %31
  %40 = getelementptr inbounds i8, i8* %34, i64 1
  %41 = load i8, i8* %34, align 1
  %42 = zext i8 %41 to i32
  br label %43

43:                                               ; preds = %39, %31
  %44 = phi i8* [ %40, %39 ], [ %34, %31 ]
  %45 = phi i32 [ %42, %39 ], [ %33, %31 ]
  %46 = and i32 %45, %18
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i32, i32* %12, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = lshr i32 %49, 8
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %35, i64 1
  store i8 %51, i8* %35, align 1
  %53 = lshr i32 %45, %8
  %54 = or i32 %32, 1
  %55 = and i32 %54, %16
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %89, label %93

57:                                               ; preds = %93, %30
  %58 = phi i8* [ undef, %30 ], [ %94, %93 ]
  %59 = phi i8* [ undef, %30 ], [ %102, %93 ]
  %60 = phi i32 [ 0, %30 ], [ %104, %93 ]
  %61 = phi i32 [ 0, %30 ], [ %103, %93 ]
  %62 = phi i8* [ %27, %30 ], [ %94, %93 ]
  %63 = phi i8* [ %29, %30 ], [ %102, %93 ]
  br i1 %25, label %81, label %64

64:                                               ; preds = %57
  %65 = and i32 %60, %16
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %71

67:                                               ; preds = %64
  %68 = getelementptr inbounds i8, i8* %62, i64 1
  %69 = load i8, i8* %62, align 1
  %70 = zext i8 %69 to i32
  br label %71

71:                                               ; preds = %67, %64
  %72 = phi i8* [ %68, %67 ], [ %62, %64 ]
  %73 = phi i32 [ %70, %67 ], [ %61, %64 ]
  %74 = and i32 %73, %18
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i32, i32* %12, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = lshr i32 %77, 8
  %79 = trunc i32 %78 to i8
  store i8 %79, i8* %63, align 1
  %80 = getelementptr inbounds i8, i8* %63, i64 1
  br label %81

81:                                               ; preds = %71, %57, %26
  %82 = phi i8* [ %29, %26 ], [ %59, %57 ], [ %80, %71 ]
  %83 = phi i8* [ %27, %26 ], [ %58, %57 ], [ %72, %71 ]
  %84 = add nsw i32 %28, 1
  %85 = icmp eq i32 %84, %2
  br i1 %85, label %88, label %26

86:                                               ; preds = %5
  %87 = load void (i8*, i32*, i8*, i32, i32, i32)*, void (i8*, i32*, i8*, i32, i32, i32)** @VP8LMapColor8b, align 8
  tail call void %87(i8* %3, i32* %12, i8* %4, i32 %1, i32 %2, i32 %10) #7
  br label %88

88:                                               ; preds = %81, %14, %86
  ret void

89:                                               ; preds = %43
  %90 = getelementptr inbounds i8, i8* %44, i64 1
  %91 = load i8, i8* %44, align 1
  %92 = zext i8 %91 to i32
  br label %93

93:                                               ; preds = %89, %43
  %94 = phi i8* [ %90, %89 ], [ %44, %43 ]
  %95 = phi i32 [ %92, %89 ], [ %53, %43 ]
  %96 = and i32 %95, %18
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds i32, i32* %12, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = lshr i32 %99, 8
  %101 = trunc i32 %100 to i8
  %102 = getelementptr inbounds i8, i8* %35, i64 2
  store i8 %101, i8* %52, align 1
  %103 = lshr i32 %95, %8
  %104 = add nuw nsw i32 %32, 2
  %105 = add i32 %36, -2
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %57, label %31
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LInverseTransform(%struct.VP8LTransform* nocapture readonly, i32, i32, i32*, i32*) local_unnamed_addr #4 {
  %6 = alloca %struct.VP8LMultipliers, align 1
  %7 = getelementptr inbounds %struct.VP8LTransform, %struct.VP8LTransform* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.VP8LTransform, %struct.VP8LTransform* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  switch i32 %10, label %422 [
    i32 2, label %11
    i32 0, label %15
    i32 1, label %172
    i32 3, label %245
  ]

11:                                               ; preds = %5
  %12 = load void (i32*, i32, i32*)*, void (i32*, i32, i32*)** @VP8LAddGreenToBlueAndRed, align 8
  %13 = sub nsw i32 %2, %1
  %14 = mul nsw i32 %8, %13
  tail call void %12(i32* %3, i32 %14, i32* %4) #7
  br label %422

15:                                               ; preds = %5
  %16 = icmp eq i32 %1, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %15
  %18 = add i32 %8, -1
  br label %86

19:                                               ; preds = %15
  %20 = load i32, i32* %3, align 4
  %21 = add i32 %20, -16777216
  %22 = and i32 %21, -16711936
  %23 = and i32 %20, 16711935
  %24 = or i32 %22, %23
  store i32 %24, i32* %4, align 4
  %25 = getelementptr inbounds i32, i32* %3, i64 1
  %26 = add i32 %8, -1
  %27 = getelementptr inbounds i32, i32* %4, i64 1
  %28 = icmp sgt i32 %26, 0
  br i1 %28, label %29, label %82

29:                                               ; preds = %19
  %30 = zext i32 %26 to i64
  %31 = and i64 %30, 1
  %32 = icmp eq i32 %26, 1
  br i1 %32, label %65, label %33

33:                                               ; preds = %29
  %34 = sub nsw i64 %30, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %62, %35 ]
  %37 = phi i32 [ %24, %33 ], [ %60, %35 ]
  %38 = phi i64 [ %34, %33 ], [ %63, %35 ]
  %39 = getelementptr inbounds i32, i32* %25, i64 %36
  %40 = load i32, i32* %39, align 4
  %41 = and i32 %40, -16711936
  %42 = and i32 %37, -16711936
  %43 = add i32 %41, %42
  %44 = and i32 %40, 16711935
  %45 = and i32 %37, 16711935
  %46 = add nuw nsw i32 %44, %45
  %47 = and i32 %43, -16711936
  %48 = and i32 %46, 16711935
  %49 = or i32 %47, %48
  %50 = getelementptr inbounds i32, i32* %27, i64 %36
  store i32 %49, i32* %50, align 4
  %51 = or i64 %36, 1
  %52 = getelementptr inbounds i32, i32* %25, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = and i32 %53, -16711936
  %55 = add i32 %54, %47
  %56 = and i32 %53, 16711935
  %57 = add nuw nsw i32 %56, %48
  %58 = and i32 %55, -16711936
  %59 = and i32 %57, 16711935
  %60 = or i32 %58, %59
  %61 = getelementptr inbounds i32, i32* %27, i64 %51
  store i32 %60, i32* %61, align 4
  %62 = add nuw nsw i64 %36, 2
  %63 = add i64 %38, -2
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %35

65:                                               ; preds = %35, %29
  %66 = phi i64 [ 0, %29 ], [ %62, %35 ]
  %67 = phi i32 [ %24, %29 ], [ %60, %35 ]
  %68 = icmp eq i64 %31, 0
  br i1 %68, label %82, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds i32, i32* %25, i64 %66
  %71 = load i32, i32* %70, align 4
  %72 = and i32 %71, -16711936
  %73 = and i32 %67, -16711936
  %74 = add i32 %72, %73
  %75 = and i32 %71, 16711935
  %76 = and i32 %67, 16711935
  %77 = add nuw nsw i32 %75, %76
  %78 = and i32 %74, -16711936
  %79 = and i32 %77, 16711935
  %80 = or i32 %78, %79
  %81 = getelementptr inbounds i32, i32* %27, i64 %66
  store i32 %80, i32* %81, align 4
  br label %82

82:                                               ; preds = %69, %65, %19
  %83 = sext i32 %8 to i64
  %84 = getelementptr inbounds i32, i32* %3, i64 %83
  %85 = getelementptr inbounds i32, i32* %4, i64 %83
  br label %86

86:                                               ; preds = %82, %17
  %87 = phi i32 [ %18, %17 ], [ %26, %82 ]
  %88 = phi i32 [ %1, %17 ], [ 1, %82 ]
  %89 = phi i32* [ %3, %17 ], [ %84, %82 ]
  %90 = phi i32* [ %4, %17 ], [ %85, %82 ]
  %91 = getelementptr inbounds %struct.VP8LTransform, %struct.VP8LTransform* %0, i64 0, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = shl i32 1, %92
  %94 = add nsw i32 %93, -1
  %95 = add i32 %93, %87
  %96 = lshr i32 %95, %92
  %97 = icmp slt i32 %88, %2
  br i1 %97, label %98, label %156

98:                                               ; preds = %86
  %99 = getelementptr inbounds %struct.VP8LTransform, %struct.VP8LTransform* %0, i64 0, i32 4
  %100 = load i32*, i32** %99, align 8
  %101 = ashr i32 %88, %92
  %102 = mul nsw i32 %96, %101
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i32, i32* %100, i64 %103
  %105 = sext i32 %8 to i64
  %106 = sub nsw i64 0, %105
  %107 = icmp sgt i32 %8, 1
  %108 = sub i32 0, %93
  %109 = sext i32 %96 to i64
  br label %110

110:                                              ; preds = %147, %98
  %111 = phi i32* [ %104, %98 ], [ %154, %147 ]
  %112 = phi i32 [ %88, %98 ], [ %150, %147 ]
  %113 = phi i32* [ %90, %98 ], [ %149, %147 ]
  %114 = phi i32* [ %89, %98 ], [ %148, %147 ]
  %115 = getelementptr inbounds i32, i32* %113, i64 %106
  %116 = load i32, i32* %115, align 4
  %117 = load i32, i32* %114, align 4
  %118 = and i32 %117, -16711936
  %119 = and i32 %116, -16711936
  %120 = add i32 %118, %119
  %121 = and i32 %117, 16711935
  %122 = and i32 %116, 16711935
  %123 = add nuw nsw i32 %121, %122
  %124 = and i32 %120, -16711936
  %125 = and i32 %123, 16711935
  %126 = or i32 %124, %125
  store i32 %126, i32* %113, align 4
  br i1 %107, label %127, label %147

127:                                              ; preds = %110, %127
  %128 = phi i32 [ %140, %127 ], [ 1, %110 ]
  %129 = phi i32* [ %130, %127 ], [ %111, %110 ]
  %130 = getelementptr inbounds i32, i32* %129, i64 1
  %131 = load i32, i32* %129, align 4
  %132 = lshr i32 %131, 8
  %133 = and i32 %132, 15
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds [16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd, i64 0, i64 %134
  %136 = load void (i32*, i32*, i32, i32*)*, void (i32*, i32*, i32, i32*)** %135, align 8
  %137 = and i32 %128, %108
  %138 = add nsw i32 %137, %93
  %139 = icmp sgt i32 %138, %8
  %140 = select i1 %139, i32 %8, i32 %138
  %141 = sext i32 %128 to i64
  %142 = getelementptr inbounds i32, i32* %114, i64 %141
  %143 = getelementptr inbounds i32, i32* %113, i64 %141
  %144 = getelementptr inbounds i32, i32* %143, i64 %106
  %145 = sub nsw i32 %140, %128
  tail call void %136(i32* %142, i32* %144, i32 %145, i32* %143) #7
  %146 = icmp sgt i32 %8, %138
  br i1 %146, label %127, label %147

147:                                              ; preds = %127, %110
  %148 = getelementptr inbounds i32, i32* %114, i64 %105
  %149 = getelementptr inbounds i32, i32* %113, i64 %105
  %150 = add nsw i32 %112, 1
  %151 = and i32 %150, %94
  %152 = icmp eq i32 %151, 0
  %153 = getelementptr inbounds i32, i32* %111, i64 %109
  %154 = select i1 %152, i32* %153, i32* %111
  %155 = icmp slt i32 %150, %2
  br i1 %155, label %110, label %156

156:                                              ; preds = %147, %86
  %157 = getelementptr inbounds %struct.VP8LTransform, %struct.VP8LTransform* %0, i64 0, i32 3
  %158 = load i32, i32* %157, align 4
  %159 = icmp eq i32 %158, %2
  br i1 %159, label %422, label %160

160:                                              ; preds = %156
  %161 = sext i32 %8 to i64
  %162 = sub nsw i64 0, %161
  %163 = getelementptr inbounds i32, i32* %4, i64 %162
  %164 = bitcast i32* %163 to i8*
  %165 = xor i32 %1, -1
  %166 = add i32 %165, %2
  %167 = mul nsw i32 %8, %166
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i32, i32* %4, i64 %168
  %170 = bitcast i32* %169 to i8*
  %171 = shl nsw i64 %161, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %164, i8* align 4 %170, i64 %171, i1 false)
  br label %422

172:                                              ; preds = %5
  %173 = getelementptr inbounds %struct.VP8LTransform, %struct.VP8LTransform* %0, i64 0, i32 1
  %174 = load i32, i32* %173, align 4
  %175 = shl i32 1, %174
  %176 = add i32 %175, -1
  %177 = sub i32 0, %175
  %178 = and i32 %8, %177
  %179 = sub nsw i32 %8, %178
  %180 = add i32 %176, %8
  %181 = lshr i32 %180, %174
  %182 = icmp sgt i32 %2, %1
  br i1 %182, label %183, label %422

183:                                              ; preds = %172
  %184 = getelementptr inbounds %struct.VP8LTransform, %struct.VP8LTransform* %0, i64 0, i32 4
  %185 = load i32*, i32** %184, align 8
  %186 = ashr i32 %1, %174
  %187 = mul nsw i32 %181, %186
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32, i32* %185, i64 %188
  %190 = getelementptr inbounds %struct.VP8LMultipliers, %struct.VP8LMultipliers* %6, i64 0, i32 0
  %191 = sext i32 %178 to i64
  %192 = sext i32 %8 to i64
  %193 = getelementptr inbounds %struct.VP8LMultipliers, %struct.VP8LMultipliers* %6, i64 0, i32 1
  %194 = getelementptr inbounds %struct.VP8LMultipliers, %struct.VP8LMultipliers* %6, i64 0, i32 2
  %195 = sext i32 %175 to i64
  %196 = sext i32 %179 to i64
  %197 = sext i32 %181 to i64
  %198 = icmp sgt i32 %178, 0
  br label %199

199:                                              ; preds = %236, %183
  %200 = phi i32* [ %189, %183 ], [ %243, %236 ]
  %201 = phi i32 [ %1, %183 ], [ %239, %236 ]
  %202 = phi i32* [ %4, %183 ], [ %238, %236 ]
  %203 = phi i32* [ %3, %183 ], [ %237, %236 ]
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %190) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %190, i8 0, i64 3, i1 false) #7
  %204 = getelementptr inbounds i32, i32* %203, i64 %191
  %205 = getelementptr inbounds i32, i32* %203, i64 %192
  br i1 %198, label %206, label %221

206:                                              ; preds = %199, %206
  %207 = phi i32* [ %210, %206 ], [ %200, %199 ]
  %208 = phi i32* [ %219, %206 ], [ %202, %199 ]
  %209 = phi i32* [ %218, %206 ], [ %203, %199 ]
  %210 = getelementptr inbounds i32, i32* %207, i64 1
  %211 = load i32, i32* %207, align 4
  %212 = trunc i32 %211 to i8
  store i8 %212, i8* %190, align 1
  %213 = lshr i32 %211, 8
  %214 = trunc i32 %213 to i8
  store i8 %214, i8* %193, align 1
  %215 = lshr i32 %211, 16
  %216 = trunc i32 %215 to i8
  store i8 %216, i8* %194, align 1
  %217 = load void (%struct.VP8LMultipliers*, i32*, i32, i32*)*, void (%struct.VP8LMultipliers*, i32*, i32, i32*)** @VP8LTransformColorInverse, align 8
  call void %217(%struct.VP8LMultipliers* nonnull %6, i32* %209, i32 %175, i32* %208) #7
  %218 = getelementptr inbounds i32, i32* %209, i64 %195
  %219 = getelementptr inbounds i32, i32* %208, i64 %195
  %220 = icmp ult i32* %218, %204
  br i1 %220, label %206, label %221

221:                                              ; preds = %206, %199
  %222 = phi i32* [ %203, %199 ], [ %218, %206 ]
  %223 = phi i32* [ %202, %199 ], [ %219, %206 ]
  %224 = phi i32* [ %200, %199 ], [ %210, %206 ]
  %225 = icmp ult i32* %222, %205
  br i1 %225, label %226, label %236

226:                                              ; preds = %221
  %227 = load i32, i32* %224, align 4
  %228 = trunc i32 %227 to i8
  store i8 %228, i8* %190, align 1
  %229 = lshr i32 %227, 8
  %230 = trunc i32 %229 to i8
  store i8 %230, i8* %193, align 1
  %231 = lshr i32 %227, 16
  %232 = trunc i32 %231 to i8
  store i8 %232, i8* %194, align 1
  %233 = load void (%struct.VP8LMultipliers*, i32*, i32, i32*)*, void (%struct.VP8LMultipliers*, i32*, i32, i32*)** @VP8LTransformColorInverse, align 8
  call void %233(%struct.VP8LMultipliers* nonnull %6, i32* %222, i32 %179, i32* %223) #7
  %234 = getelementptr inbounds i32, i32* %222, i64 %196
  %235 = getelementptr inbounds i32, i32* %223, i64 %196
  br label %236

236:                                              ; preds = %226, %221
  %237 = phi i32* [ %234, %226 ], [ %222, %221 ]
  %238 = phi i32* [ %235, %226 ], [ %223, %221 ]
  %239 = add i32 %201, 1
  %240 = and i32 %239, %176
  %241 = icmp eq i32 %240, 0
  %242 = getelementptr inbounds i32, i32* %200, i64 %197
  %243 = select i1 %241, i32* %242, i32* %200
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %190) #7
  %244 = icmp eq i32 %239, %2
  br i1 %244, label %422, label %199

245:                                              ; preds = %5
  %246 = icmp eq i32* %3, %4
  %247 = getelementptr inbounds %struct.VP8LTransform, %struct.VP8LTransform* %0, i64 0, i32 1
  %248 = load i32, i32* %247, align 4
  %249 = icmp sgt i32 %248, 0
  %250 = and i1 %246, %249
  br i1 %250, label %251, label %345

251:                                              ; preds = %245
  %252 = sub nsw i32 %2, %1
  %253 = mul nsw i32 %8, %252
  %254 = shl i32 1, %248
  %255 = add i32 %8, -1
  %256 = add i32 %255, %254
  %257 = lshr i32 %256, %248
  %258 = mul i32 %257, %252
  %259 = sext i32 %253 to i64
  %260 = getelementptr inbounds i32, i32* %3, i64 %259
  %261 = sext i32 %258 to i64
  %262 = sub nsw i64 0, %261
  %263 = getelementptr inbounds i32, i32* %260, i64 %262
  %264 = bitcast i32* %263 to i8*
  %265 = bitcast i32* %3 to i8*
  %266 = shl nsw i64 %261, 2
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %264, i8* align 4 %265, i64 %266, i1 false)
  %267 = load i32, i32* %247, align 4
  %268 = lshr i32 8, %267
  %269 = load i32, i32* %7, align 8
  %270 = getelementptr inbounds %struct.VP8LTransform, %struct.VP8LTransform* %0, i64 0, i32 4
  %271 = load i32*, i32** %270, align 8
  %272 = icmp slt i32 %268, 8
  br i1 %272, label %273, label %343

273:                                              ; preds = %251
  %274 = shl nsw i32 -1, %267
  %275 = xor i32 %274, -1
  %276 = shl nsw i32 -1, %268
  %277 = xor i32 %276, -1
  %278 = icmp sgt i32 %2, %1
  br i1 %278, label %279, label %422

279:                                              ; preds = %273
  %280 = icmp sgt i32 %269, 0
  %281 = and i32 %269, 1
  %282 = icmp eq i32 %269, 1
  %283 = sub i32 %269, %281
  %284 = icmp eq i32 %281, 0
  br label %285

285:                                              ; preds = %338, %279
  %286 = phi i32* [ %263, %279 ], [ %340, %338 ]
  %287 = phi i32 [ %1, %279 ], [ %341, %338 ]
  %288 = phi i32* [ %3, %279 ], [ %339, %338 ]
  br i1 %280, label %289, label %338

289:                                              ; preds = %285
  br i1 %282, label %315, label %290

290:                                              ; preds = %289, %428
  %291 = phi i32 [ %437, %428 ], [ 0, %289 ]
  %292 = phi i32 [ %436, %428 ], [ 0, %289 ]
  %293 = phi i32* [ %429, %428 ], [ %286, %289 ]
  %294 = phi i32* [ %435, %428 ], [ %288, %289 ]
  %295 = phi i32 [ %438, %428 ], [ %283, %289 ]
  %296 = and i32 %291, %275
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %303

298:                                              ; preds = %290
  %299 = getelementptr inbounds i32, i32* %293, i64 1
  %300 = load i32, i32* %293, align 4
  %301 = lshr i32 %300, 8
  %302 = and i32 %301, 255
  br label %303

303:                                              ; preds = %298, %290
  %304 = phi i32* [ %299, %298 ], [ %293, %290 ]
  %305 = phi i32 [ %302, %298 ], [ %292, %290 ]
  %306 = and i32 %305, %277
  %307 = zext i32 %306 to i64
  %308 = getelementptr inbounds i32, i32* %271, i64 %307
  %309 = load i32, i32* %308, align 4
  %310 = getelementptr inbounds i32, i32* %294, i64 1
  store i32 %309, i32* %294, align 4
  %311 = lshr i32 %305, %268
  %312 = or i32 %291, 1
  %313 = and i32 %312, %275
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %423, label %428

315:                                              ; preds = %428, %289
  %316 = phi i32* [ undef, %289 ], [ %429, %428 ]
  %317 = phi i32* [ undef, %289 ], [ %435, %428 ]
  %318 = phi i32 [ 0, %289 ], [ %437, %428 ]
  %319 = phi i32 [ 0, %289 ], [ %436, %428 ]
  %320 = phi i32* [ %286, %289 ], [ %429, %428 ]
  %321 = phi i32* [ %288, %289 ], [ %435, %428 ]
  br i1 %284, label %338, label %322

322:                                              ; preds = %315
  %323 = and i32 %318, %275
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %325, label %330

325:                                              ; preds = %322
  %326 = getelementptr inbounds i32, i32* %320, i64 1
  %327 = load i32, i32* %320, align 4
  %328 = lshr i32 %327, 8
  %329 = and i32 %328, 255
  br label %330

330:                                              ; preds = %325, %322
  %331 = phi i32* [ %326, %325 ], [ %320, %322 ]
  %332 = phi i32 [ %329, %325 ], [ %319, %322 ]
  %333 = and i32 %332, %277
  %334 = zext i32 %333 to i64
  %335 = getelementptr inbounds i32, i32* %271, i64 %334
  %336 = load i32, i32* %335, align 4
  store i32 %336, i32* %321, align 4
  %337 = getelementptr inbounds i32, i32* %321, i64 1
  br label %338

338:                                              ; preds = %330, %315, %285
  %339 = phi i32* [ %288, %285 ], [ %317, %315 ], [ %337, %330 ]
  %340 = phi i32* [ %286, %285 ], [ %316, %315 ], [ %331, %330 ]
  %341 = add nsw i32 %287, 1
  %342 = icmp eq i32 %341, %2
  br i1 %342, label %422, label %285

343:                                              ; preds = %251
  %344 = load void (i32*, i32*, i32*, i32, i32, i32)*, void (i32*, i32*, i32*, i32, i32, i32)** @VP8LMapColor32b, align 8
  tail call void %344(i32* %263, i32* %271, i32* %3, i32 %1, i32 %2, i32 %269) #7
  br label %422

345:                                              ; preds = %245
  %346 = lshr i32 8, %248
  %347 = getelementptr inbounds %struct.VP8LTransform, %struct.VP8LTransform* %0, i64 0, i32 4
  %348 = load i32*, i32** %347, align 8
  %349 = icmp slt i32 %346, 8
  br i1 %349, label %350, label %420

350:                                              ; preds = %345
  %351 = shl nsw i32 -1, %248
  %352 = xor i32 %351, -1
  %353 = shl nsw i32 -1, %346
  %354 = xor i32 %353, -1
  %355 = icmp sgt i32 %2, %1
  br i1 %355, label %356, label %422

356:                                              ; preds = %350
  %357 = icmp sgt i32 %8, 0
  %358 = and i32 %8, 1
  %359 = icmp eq i32 %8, 1
  %360 = sub i32 %8, %358
  %361 = icmp eq i32 %358, 0
  br label %362

362:                                              ; preds = %415, %356
  %363 = phi i32* [ %3, %356 ], [ %417, %415 ]
  %364 = phi i32 [ %1, %356 ], [ %418, %415 ]
  %365 = phi i32* [ %4, %356 ], [ %416, %415 ]
  br i1 %357, label %366, label %415

366:                                              ; preds = %362
  br i1 %359, label %392, label %367

367:                                              ; preds = %366, %445
  %368 = phi i32 [ %454, %445 ], [ 0, %366 ]
  %369 = phi i32 [ %453, %445 ], [ 0, %366 ]
  %370 = phi i32* [ %446, %445 ], [ %363, %366 ]
  %371 = phi i32* [ %452, %445 ], [ %365, %366 ]
  %372 = phi i32 [ %455, %445 ], [ %360, %366 ]
  %373 = and i32 %368, %352
  %374 = icmp eq i32 %373, 0
  br i1 %374, label %375, label %380

375:                                              ; preds = %367
  %376 = getelementptr inbounds i32, i32* %370, i64 1
  %377 = load i32, i32* %370, align 4
  %378 = lshr i32 %377, 8
  %379 = and i32 %378, 255
  br label %380

380:                                              ; preds = %375, %367
  %381 = phi i32* [ %376, %375 ], [ %370, %367 ]
  %382 = phi i32 [ %379, %375 ], [ %369, %367 ]
  %383 = and i32 %382, %354
  %384 = zext i32 %383 to i64
  %385 = getelementptr inbounds i32, i32* %348, i64 %384
  %386 = load i32, i32* %385, align 4
  %387 = getelementptr inbounds i32, i32* %371, i64 1
  store i32 %386, i32* %371, align 4
  %388 = lshr i32 %382, %346
  %389 = or i32 %368, 1
  %390 = and i32 %389, %352
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %440, label %445

392:                                              ; preds = %445, %366
  %393 = phi i32* [ undef, %366 ], [ %446, %445 ]
  %394 = phi i32* [ undef, %366 ], [ %452, %445 ]
  %395 = phi i32 [ 0, %366 ], [ %454, %445 ]
  %396 = phi i32 [ 0, %366 ], [ %453, %445 ]
  %397 = phi i32* [ %363, %366 ], [ %446, %445 ]
  %398 = phi i32* [ %365, %366 ], [ %452, %445 ]
  br i1 %361, label %415, label %399

399:                                              ; preds = %392
  %400 = and i32 %395, %352
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %402, label %407

402:                                              ; preds = %399
  %403 = getelementptr inbounds i32, i32* %397, i64 1
  %404 = load i32, i32* %397, align 4
  %405 = lshr i32 %404, 8
  %406 = and i32 %405, 255
  br label %407

407:                                              ; preds = %402, %399
  %408 = phi i32* [ %403, %402 ], [ %397, %399 ]
  %409 = phi i32 [ %406, %402 ], [ %396, %399 ]
  %410 = and i32 %409, %354
  %411 = zext i32 %410 to i64
  %412 = getelementptr inbounds i32, i32* %348, i64 %411
  %413 = load i32, i32* %412, align 4
  store i32 %413, i32* %398, align 4
  %414 = getelementptr inbounds i32, i32* %398, i64 1
  br label %415

415:                                              ; preds = %407, %392, %362
  %416 = phi i32* [ %365, %362 ], [ %394, %392 ], [ %414, %407 ]
  %417 = phi i32* [ %363, %362 ], [ %393, %392 ], [ %408, %407 ]
  %418 = add nsw i32 %364, 1
  %419 = icmp eq i32 %418, %2
  br i1 %419, label %422, label %362

420:                                              ; preds = %345
  %421 = load void (i32*, i32*, i32*, i32, i32, i32)*, void (i32*, i32*, i32*, i32, i32, i32)** @VP8LMapColor32b, align 8
  tail call void %421(i32* %3, i32* %348, i32* %4, i32 %1, i32 %2, i32 %8) #7
  br label %422

422:                                              ; preds = %415, %338, %236, %420, %350, %343, %273, %172, %156, %160, %5, %11
  ret void

423:                                              ; preds = %303
  %424 = getelementptr inbounds i32, i32* %304, i64 1
  %425 = load i32, i32* %304, align 4
  %426 = lshr i32 %425, 8
  %427 = and i32 %426, 255
  br label %428

428:                                              ; preds = %423, %303
  %429 = phi i32* [ %424, %423 ], [ %304, %303 ]
  %430 = phi i32 [ %427, %423 ], [ %311, %303 ]
  %431 = and i32 %430, %277
  %432 = zext i32 %431 to i64
  %433 = getelementptr inbounds i32, i32* %271, i64 %432
  %434 = load i32, i32* %433, align 4
  %435 = getelementptr inbounds i32, i32* %294, i64 2
  store i32 %434, i32* %310, align 4
  %436 = lshr i32 %430, %268
  %437 = add nuw nsw i32 %291, 2
  %438 = add i32 %295, -2
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %315, label %290

440:                                              ; preds = %380
  %441 = getelementptr inbounds i32, i32* %381, i64 1
  %442 = load i32, i32* %381, align 4
  %443 = lshr i32 %442, 8
  %444 = and i32 %443, 255
  br label %445

445:                                              ; preds = %440, %380
  %446 = phi i32* [ %441, %440 ], [ %381, %380 ]
  %447 = phi i32 [ %444, %440 ], [ %388, %380 ]
  %448 = and i32 %447, %354
  %449 = zext i32 %448 to i64
  %450 = getelementptr inbounds i32, i32* %348, i64 %449
  %451 = load i32, i32* %450, align 4
  %452 = getelementptr inbounds i32, i32* %371, i64 2
  store i32 %451, i32* %387, align 4
  %453 = lshr i32 %447, %346
  %454 = add nuw nsw i32 %368, 2
  %455 = add i32 %372, -2
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %392, label %367
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LConvertBGRAToRGB_C(i32* readonly, i32, i8* nocapture) #3 {
  %4 = sext i32 %1 to i64
  %5 = getelementptr inbounds i32, i32* %0, i64 %4
  %6 = icmp sgt i32 %1, 0
  br i1 %6, label %7, label %21

7:                                                ; preds = %3, %7
  %8 = phi i32* [ %10, %7 ], [ %0, %3 ]
  %9 = phi i8* [ %19, %7 ], [ %2, %3 ]
  %10 = getelementptr inbounds i32, i32* %8, i64 1
  %11 = load i32, i32* %8, align 4
  %12 = lshr i32 %11, 16
  %13 = trunc i32 %12 to i8
  %14 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %13, i8* %9, align 1
  %15 = lshr i32 %11, 8
  %16 = trunc i32 %15 to i8
  %17 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %16, i8* %14, align 1
  %18 = trunc i32 %11 to i8
  %19 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %18, i8* %17, align 1
  %20 = icmp ult i32* %10, %5
  br i1 %20, label %7, label %21

21:                                               ; preds = %7, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LConvertBGRAToRGBA_C(i32* readonly, i32, i8* nocapture) #3 {
  %4 = sext i32 %1 to i64
  %5 = getelementptr inbounds i32, i32* %0, i64 %4
  %6 = icmp sgt i32 %1, 0
  br i1 %6, label %7, label %24

7:                                                ; preds = %3, %7
  %8 = phi i32* [ %10, %7 ], [ %0, %3 ]
  %9 = phi i8* [ %22, %7 ], [ %2, %3 ]
  %10 = getelementptr inbounds i32, i32* %8, i64 1
  %11 = load i32, i32* %8, align 4
  %12 = lshr i32 %11, 16
  %13 = trunc i32 %12 to i8
  %14 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %13, i8* %9, align 1
  %15 = lshr i32 %11, 8
  %16 = trunc i32 %15 to i8
  %17 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %16, i8* %14, align 1
  %18 = trunc i32 %11 to i8
  %19 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %18, i8* %17, align 1
  %20 = lshr i32 %11, 24
  %21 = trunc i32 %20 to i8
  %22 = getelementptr inbounds i8, i8* %9, i64 4
  store i8 %21, i8* %19, align 1
  %23 = icmp ult i32* %10, %5
  br i1 %23, label %7, label %24

24:                                               ; preds = %7, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LConvertBGRAToRGBA4444_C(i32* readonly, i32, i8* nocapture) #3 {
  %4 = bitcast i32* %0 to i8*
  %5 = ptrtoint i32* %0 to i64
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i32, i32* %0, i64 %6
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %87

9:                                                ; preds = %3
  %10 = getelementptr i32, i32* %0, i64 1
  %11 = icmp ugt i32* %7, %10
  %12 = select i1 %11, i32* %7, i32* %10
  %13 = bitcast i32* %12 to i8*
  %14 = xor i64 %5, -1
  %15 = getelementptr i8, i8* %13, i64 %14
  %16 = ptrtoint i8* %15 to i64
  %17 = lshr i64 %16, 2
  %18 = add nuw nsw i64 %17, 1
  %19 = icmp ult i64 %18, 4
  br i1 %19, label %66, label %20

20:                                               ; preds = %9
  %21 = getelementptr i32, i32* %0, i64 1
  %22 = icmp ugt i32* %7, %21
  %23 = select i1 %22, i32* %7, i32* %21
  %24 = bitcast i32* %23 to i8*
  %25 = xor i64 %5, -1
  %26 = getelementptr i8, i8* %24, i64 %25
  %27 = ptrtoint i8* %26 to i64
  %28 = lshr i64 %27, 2
  %29 = shl nuw nsw i64 %28, 1
  %30 = add nuw i64 %29, 2
  %31 = getelementptr i8, i8* %2, i64 %30
  %32 = add nuw nsw i64 %28, 1
  %33 = getelementptr i32, i32* %0, i64 %32
  %34 = bitcast i32* %33 to i8*
  %35 = icmp ugt i8* %34, %2
  %36 = icmp ugt i8* %31, %4
  %37 = and i1 %35, %36
  br i1 %37, label %66, label %38

38:                                               ; preds = %20
  %39 = and i64 %18, 9223372036854775804
  %40 = getelementptr i32, i32* %0, i64 %39
  %41 = shl nuw i64 %39, 1
  %42 = getelementptr i8, i8* %2, i64 %41
  br label %43

43:                                               ; preds = %43, %38
  %44 = phi i64 [ 0, %38 ], [ %62, %43 ]
  %45 = getelementptr i32, i32* %0, i64 %44
  %46 = shl i64 %44, 1
  %47 = bitcast i32* %45 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4, !alias.scope !20
  %49 = lshr <4 x i32> %48, <i32 16, i32 16, i32 16, i32 16>
  %50 = and <4 x i32> %49, <i32 240, i32 240, i32 240, i32 240>
  %51 = lshr <4 x i32> %48, <i32 12, i32 12, i32 12, i32 12>
  %52 = and <4 x i32> %51, <i32 15, i32 15, i32 15, i32 15>
  %53 = or <4 x i32> %50, %52
  %54 = trunc <4 x i32> %53 to <4 x i8>
  %55 = and <4 x i32> %48, <i32 240, i32 240, i32 240, i32 240>
  %56 = lshr <4 x i32> %48, <i32 28, i32 28, i32 28, i32 28>
  %57 = or <4 x i32> %55, %56
  %58 = trunc <4 x i32> %57 to <4 x i8>
  %59 = getelementptr inbounds i8, i8* %2, i64 %46
  %60 = bitcast i8* %59 to <8 x i8>*
  %61 = shufflevector <4 x i8> %54, <4 x i8> %58, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i8> %61, <8 x i8>* %60, align 1
  %62 = add i64 %44, 4
  %63 = icmp eq i64 %62, %39
  br i1 %63, label %64, label %43, !llvm.loop !23

64:                                               ; preds = %43
  %65 = icmp eq i64 %18, %39
  br i1 %65, label %87, label %66

66:                                               ; preds = %64, %20, %9
  %67 = phi i32* [ %0, %20 ], [ %0, %9 ], [ %40, %64 ]
  %68 = phi i8* [ %2, %20 ], [ %2, %9 ], [ %42, %64 ]
  br label %69

69:                                               ; preds = %66, %69
  %70 = phi i32* [ %72, %69 ], [ %67, %66 ]
  %71 = phi i8* [ %85, %69 ], [ %68, %66 ]
  %72 = getelementptr inbounds i32, i32* %70, i64 1
  %73 = load i32, i32* %70, align 4
  %74 = lshr i32 %73, 16
  %75 = and i32 %74, 240
  %76 = lshr i32 %73, 12
  %77 = and i32 %76, 15
  %78 = or i32 %75, %77
  %79 = trunc i32 %78 to i8
  %80 = and i32 %73, 240
  %81 = lshr i32 %73, 28
  %82 = or i32 %80, %81
  %83 = trunc i32 %82 to i8
  %84 = getelementptr inbounds i8, i8* %71, i64 1
  store i8 %79, i8* %71, align 1
  %85 = getelementptr inbounds i8, i8* %71, i64 2
  store i8 %83, i8* %84, align 1
  %86 = icmp ult i32* %72, %7
  br i1 %86, label %69, label %87, !llvm.loop !24

87:                                               ; preds = %69, %64, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LConvertBGRAToRGB565_C(i32* readonly, i32, i8* nocapture) #3 {
  %4 = bitcast i32* %0 to i8*
  %5 = ptrtoint i32* %0 to i64
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i32, i32* %0, i64 %6
  %8 = icmp sgt i32 %1, 0
  br i1 %8, label %9, label %91

9:                                                ; preds = %3
  %10 = getelementptr i32, i32* %0, i64 1
  %11 = icmp ugt i32* %7, %10
  %12 = select i1 %11, i32* %7, i32* %10
  %13 = bitcast i32* %12 to i8*
  %14 = xor i64 %5, -1
  %15 = getelementptr i8, i8* %13, i64 %14
  %16 = ptrtoint i8* %15 to i64
  %17 = lshr i64 %16, 2
  %18 = add nuw nsw i64 %17, 1
  %19 = icmp ult i64 %18, 4
  br i1 %19, label %68, label %20

20:                                               ; preds = %9
  %21 = getelementptr i32, i32* %0, i64 1
  %22 = icmp ugt i32* %7, %21
  %23 = select i1 %22, i32* %7, i32* %21
  %24 = bitcast i32* %23 to i8*
  %25 = xor i64 %5, -1
  %26 = getelementptr i8, i8* %24, i64 %25
  %27 = ptrtoint i8* %26 to i64
  %28 = lshr i64 %27, 2
  %29 = shl nuw nsw i64 %28, 1
  %30 = add nuw i64 %29, 2
  %31 = getelementptr i8, i8* %2, i64 %30
  %32 = add nuw nsw i64 %28, 1
  %33 = getelementptr i32, i32* %0, i64 %32
  %34 = bitcast i32* %33 to i8*
  %35 = icmp ugt i8* %34, %2
  %36 = icmp ugt i8* %31, %4
  %37 = and i1 %35, %36
  br i1 %37, label %68, label %38

38:                                               ; preds = %20
  %39 = and i64 %18, 9223372036854775804
  %40 = getelementptr i32, i32* %0, i64 %39
  %41 = shl nuw i64 %39, 1
  %42 = getelementptr i8, i8* %2, i64 %41
  br label %43

43:                                               ; preds = %43, %38
  %44 = phi i64 [ 0, %38 ], [ %64, %43 ]
  %45 = getelementptr i32, i32* %0, i64 %44
  %46 = shl i64 %44, 1
  %47 = bitcast i32* %45 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4, !alias.scope !25
  %49 = lshr <4 x i32> %48, <i32 16, i32 16, i32 16, i32 16>
  %50 = and <4 x i32> %49, <i32 248, i32 248, i32 248, i32 248>
  %51 = lshr <4 x i32> %48, <i32 13, i32 13, i32 13, i32 13>
  %52 = and <4 x i32> %51, <i32 7, i32 7, i32 7, i32 7>
  %53 = or <4 x i32> %50, %52
  %54 = trunc <4 x i32> %53 to <4 x i8>
  %55 = lshr <4 x i32> %48, <i32 5, i32 5, i32 5, i32 5>
  %56 = and <4 x i32> %55, <i32 224, i32 224, i32 224, i32 224>
  %57 = lshr <4 x i32> %48, <i32 3, i32 3, i32 3, i32 3>
  %58 = and <4 x i32> %57, <i32 31, i32 31, i32 31, i32 31>
  %59 = or <4 x i32> %56, %58
  %60 = trunc <4 x i32> %59 to <4 x i8>
  %61 = getelementptr inbounds i8, i8* %2, i64 %46
  %62 = bitcast i8* %61 to <8 x i8>*
  %63 = shufflevector <4 x i8> %54, <4 x i8> %60, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i8> %63, <8 x i8>* %62, align 1
  %64 = add i64 %44, 4
  %65 = icmp eq i64 %64, %39
  br i1 %65, label %66, label %43, !llvm.loop !28

66:                                               ; preds = %43
  %67 = icmp eq i64 %18, %39
  br i1 %67, label %91, label %68

68:                                               ; preds = %66, %20, %9
  %69 = phi i32* [ %0, %20 ], [ %0, %9 ], [ %40, %66 ]
  %70 = phi i8* [ %2, %20 ], [ %2, %9 ], [ %42, %66 ]
  br label %71

71:                                               ; preds = %68, %71
  %72 = phi i32* [ %74, %71 ], [ %69, %68 ]
  %73 = phi i8* [ %89, %71 ], [ %70, %68 ]
  %74 = getelementptr inbounds i32, i32* %72, i64 1
  %75 = load i32, i32* %72, align 4
  %76 = lshr i32 %75, 16
  %77 = and i32 %76, 248
  %78 = lshr i32 %75, 13
  %79 = and i32 %78, 7
  %80 = or i32 %77, %79
  %81 = trunc i32 %80 to i8
  %82 = lshr i32 %75, 5
  %83 = and i32 %82, 224
  %84 = lshr i32 %75, 3
  %85 = and i32 %84, 31
  %86 = or i32 %83, %85
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds i8, i8* %73, i64 1
  store i8 %81, i8* %73, align 1
  %89 = getelementptr inbounds i8, i8* %73, i64 2
  store i8 %87, i8* %88, align 1
  %90 = icmp ult i32* %74, %7
  br i1 %90, label %71, label %91, !llvm.loop !29

91:                                               ; preds = %71, %66, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @VP8LConvertBGRAToBGR_C(i32* readonly, i32, i8* nocapture) #3 {
  %4 = sext i32 %1 to i64
  %5 = getelementptr inbounds i32, i32* %0, i64 %4
  %6 = icmp sgt i32 %1, 0
  br i1 %6, label %7, label %21

7:                                                ; preds = %3, %7
  %8 = phi i32* [ %10, %7 ], [ %0, %3 ]
  %9 = phi i8* [ %19, %7 ], [ %2, %3 ]
  %10 = getelementptr inbounds i32, i32* %8, i64 1
  %11 = load i32, i32* %8, align 4
  %12 = trunc i32 %11 to i8
  %13 = getelementptr inbounds i8, i8* %9, i64 1
  store i8 %12, i8* %9, align 1
  %14 = lshr i32 %11, 8
  %15 = trunc i32 %14 to i8
  %16 = getelementptr inbounds i8, i8* %9, i64 2
  store i8 %15, i8* %13, align 1
  %17 = lshr i32 %11, 16
  %18 = trunc i32 %17 to i8
  %19 = getelementptr inbounds i8, i8* %9, i64 3
  store i8 %18, i8* %16, align 1
  %20 = icmp ult i32* %10, %5
  br i1 %20, label %7, label %21

21:                                               ; preds = %7, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LConvertFromBGRA(i32*, i32, i32, i8*) local_unnamed_addr #4 {
  %5 = bitcast i32* %0 to i8*
  %6 = ptrtoint i32* %0 to i64
  switch i32 %2, label %251 [
    i32 0, label %7
    i32 1, label %9
    i32 7, label %11
    i32 2, label %14
    i32 3, label %16
    i32 8, label %20
    i32 4, label %24
    i32 9, label %133
    i32 5, label %244
    i32 10, label %246
    i32 6, label %249
  ]

7:                                                ; preds = %4
  %8 = load void (i32*, i32, i8*)*, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGB, align 8
  tail call void %8(i32* %0, i32 %1, i8* %3) #7
  br label %251

9:                                                ; preds = %4
  %10 = load void (i32*, i32, i8*)*, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGBA, align 8
  tail call void %10(i32* %0, i32 %1, i8* %3) #7
  br label %251

11:                                               ; preds = %4
  %12 = load void (i32*, i32, i8*)*, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGBA, align 8
  tail call void %12(i32* %0, i32 %1, i8* %3) #7
  %13 = load void (i8*, i32, i32, i32, i32)*, void (i8*, i32, i32, i32, i32)** @WebPApplyAlphaMultiply, align 8
  tail call void %13(i8* %3, i32 0, i32 %1, i32 1, i32 0) #7
  br label %251

14:                                               ; preds = %4
  %15 = load void (i32*, i32, i8*)*, void (i32*, i32, i8*)** @VP8LConvertBGRAToBGR, align 8
  tail call void %15(i32* %0, i32 %1, i8* %3) #7
  br label %251

16:                                               ; preds = %4
  %17 = bitcast i32* %0 to i8*
  %18 = sext i32 %1 to i64
  %19 = shl nsw i64 %18, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 4 %17, i64 %19, i1 false) #7
  br label %251

20:                                               ; preds = %4
  %21 = sext i32 %1 to i64
  %22 = shl nsw i64 %21, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 4 %5, i64 %22, i1 false) #7
  %23 = load void (i8*, i32, i32, i32, i32)*, void (i8*, i32, i32, i32, i32)** @WebPApplyAlphaMultiply, align 8
  tail call void %23(i8* %3, i32 0, i32 %1, i32 1, i32 0) #7
  br label %251

24:                                               ; preds = %4
  %25 = sext i32 %1 to i64
  %26 = getelementptr inbounds i32, i32* %0, i64 %25
  %27 = icmp sgt i32 %1, 0
  br i1 %27, label %28, label %251

28:                                               ; preds = %24
  %29 = getelementptr i32, i32* %0, i64 1
  %30 = icmp ugt i32* %26, %29
  %31 = select i1 %30, i32* %26, i32* %29
  %32 = bitcast i32* %31 to i8*
  %33 = xor i64 %6, -1
  %34 = getelementptr i8, i8* %32, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = lshr i64 %35, 2
  %37 = add nuw nsw i64 %36, 1
  %38 = icmp ult i64 %37, 8
  br i1 %38, label %121, label %39

39:                                               ; preds = %28
  %40 = getelementptr i32, i32* %0, i64 1
  %41 = icmp ugt i32* %26, %40
  %42 = select i1 %41, i32* %26, i32* %40
  %43 = bitcast i32* %42 to i8*
  %44 = xor i64 %6, -1
  %45 = getelementptr i8, i8* %43, i64 %44
  %46 = ptrtoint i8* %45 to i64
  %47 = lshr i64 %46, 2
  %48 = add i64 %46, 4
  %49 = and i64 %48, -4
  %50 = getelementptr i8, i8* %3, i64 %49
  %51 = add nuw nsw i64 %47, 1
  %52 = getelementptr i32, i32* %0, i64 %51
  %53 = bitcast i32* %52 to i8*
  %54 = icmp ugt i8* %53, %3
  %55 = icmp ugt i8* %50, %5
  %56 = and i1 %54, %55
  br i1 %56, label %121, label %57

57:                                               ; preds = %39
  %58 = and i64 %37, 9223372036854775800
  %59 = getelementptr i32, i32* %0, i64 %58
  %60 = shl i64 %58, 2
  %61 = getelementptr i8, i8* %3, i64 %60
  %62 = add nsw i64 %58, -8
  %63 = lshr exact i64 %62, 3
  %64 = add nuw nsw i64 %63, 1
  %65 = and i64 %64, 1
  %66 = icmp eq i64 %62, 0
  br i1 %66, label %102, label %67

67:                                               ; preds = %57
  %68 = sub nuw nsw i64 %64, %65
  br label %69

69:                                               ; preds = %69, %67
  %70 = phi i64 [ 0, %67 ], [ %99, %69 ]
  %71 = phi i64 [ %68, %67 ], [ %100, %69 ]
  %72 = getelementptr i32, i32* %0, i64 %70
  %73 = shl i64 %70, 2
  %74 = getelementptr i8, i8* %3, i64 %73
  %75 = bitcast i32* %72 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 4, !alias.scope !30
  %77 = getelementptr i32, i32* %72, i64 4
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4, !alias.scope !30
  %80 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %76)
  %81 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %79)
  %82 = bitcast i8* %74 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %82, align 1, !alias.scope !33, !noalias !30
  %83 = getelementptr i8, i8* %74, i64 16
  %84 = bitcast i8* %83 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %84, align 1, !alias.scope !33, !noalias !30
  %85 = or i64 %70, 8
  %86 = getelementptr i32, i32* %0, i64 %85
  %87 = shl i64 %85, 2
  %88 = getelementptr i8, i8* %3, i64 %87
  %89 = bitcast i32* %86 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4, !alias.scope !30
  %91 = getelementptr i32, i32* %86, i64 4
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !30
  %94 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %90)
  %95 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %93)
  %96 = bitcast i8* %88 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %96, align 1, !alias.scope !33, !noalias !30
  %97 = getelementptr i8, i8* %88, i64 16
  %98 = bitcast i8* %97 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %98, align 1, !alias.scope !33, !noalias !30
  %99 = add i64 %70, 16
  %100 = add i64 %71, -2
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %69, !llvm.loop !35

102:                                              ; preds = %69, %57
  %103 = phi i64 [ 0, %57 ], [ %99, %69 ]
  %104 = icmp eq i64 %65, 0
  br i1 %104, label %119, label %105

105:                                              ; preds = %102
  %106 = getelementptr i32, i32* %0, i64 %103
  %107 = shl i64 %103, 2
  %108 = getelementptr i8, i8* %3, i64 %107
  %109 = bitcast i32* %106 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !30
  %111 = getelementptr i32, i32* %106, i64 4
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4, !alias.scope !30
  %114 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %110)
  %115 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %113)
  %116 = bitcast i8* %108 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %116, align 1, !alias.scope !33, !noalias !30
  %117 = getelementptr i8, i8* %108, i64 16
  %118 = bitcast i8* %117 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %118, align 1, !alias.scope !33, !noalias !30
  br label %119

119:                                              ; preds = %102, %105
  %120 = icmp eq i64 %37, %58
  br i1 %120, label %251, label %121

121:                                              ; preds = %119, %39, %28
  %122 = phi i32* [ %0, %39 ], [ %0, %28 ], [ %59, %119 ]
  %123 = phi i8* [ %3, %39 ], [ %3, %28 ], [ %61, %119 ]
  br label %124

124:                                              ; preds = %121, %124
  %125 = phi i32* [ %127, %124 ], [ %122, %121 ]
  %126 = phi i8* [ %131, %124 ], [ %123, %121 ]
  %127 = getelementptr inbounds i32, i32* %125, i64 1
  %128 = load i32, i32* %125, align 4
  %129 = tail call i32 @llvm.bswap.i32(i32 %128) #7
  %130 = bitcast i8* %126 to i32*
  store i32 %129, i32* %130, align 1
  %131 = getelementptr inbounds i8, i8* %126, i64 4
  %132 = icmp ult i32* %127, %26
  br i1 %132, label %124, label %251, !llvm.loop !36

133:                                              ; preds = %4
  %134 = sext i32 %1 to i64
  %135 = getelementptr inbounds i32, i32* %0, i64 %134
  %136 = icmp sgt i32 %1, 0
  br i1 %136, label %137, label %242

137:                                              ; preds = %133
  %138 = getelementptr i32, i32* %0, i64 1
  %139 = icmp ugt i32* %135, %138
  %140 = select i1 %139, i32* %135, i32* %138
  %141 = bitcast i32* %140 to i8*
  %142 = xor i64 %6, -1
  %143 = getelementptr i8, i8* %141, i64 %142
  %144 = ptrtoint i8* %143 to i64
  %145 = lshr i64 %144, 2
  %146 = add nuw nsw i64 %145, 1
  %147 = icmp ult i64 %146, 8
  br i1 %147, label %230, label %148

148:                                              ; preds = %137
  %149 = getelementptr i32, i32* %0, i64 1
  %150 = icmp ugt i32* %135, %149
  %151 = select i1 %150, i32* %135, i32* %149
  %152 = bitcast i32* %151 to i8*
  %153 = xor i64 %6, -1
  %154 = getelementptr i8, i8* %152, i64 %153
  %155 = ptrtoint i8* %154 to i64
  %156 = lshr i64 %155, 2
  %157 = add i64 %155, 4
  %158 = and i64 %157, -4
  %159 = getelementptr i8, i8* %3, i64 %158
  %160 = add nuw nsw i64 %156, 1
  %161 = getelementptr i32, i32* %0, i64 %160
  %162 = bitcast i32* %161 to i8*
  %163 = icmp ugt i8* %162, %3
  %164 = icmp ugt i8* %159, %5
  %165 = and i1 %163, %164
  br i1 %165, label %230, label %166

166:                                              ; preds = %148
  %167 = and i64 %146, 9223372036854775800
  %168 = getelementptr i32, i32* %0, i64 %167
  %169 = shl i64 %167, 2
  %170 = getelementptr i8, i8* %3, i64 %169
  %171 = add nsw i64 %167, -8
  %172 = lshr exact i64 %171, 3
  %173 = add nuw nsw i64 %172, 1
  %174 = and i64 %173, 1
  %175 = icmp eq i64 %171, 0
  br i1 %175, label %211, label %176

176:                                              ; preds = %166
  %177 = sub nuw nsw i64 %173, %174
  br label %178

178:                                              ; preds = %178, %176
  %179 = phi i64 [ 0, %176 ], [ %208, %178 ]
  %180 = phi i64 [ %177, %176 ], [ %209, %178 ]
  %181 = getelementptr i32, i32* %0, i64 %179
  %182 = shl i64 %179, 2
  %183 = getelementptr i8, i8* %3, i64 %182
  %184 = bitcast i32* %181 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4, !alias.scope !37
  %186 = getelementptr i32, i32* %181, i64 4
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4, !alias.scope !37
  %189 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %185)
  %190 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %188)
  %191 = bitcast i8* %183 to <4 x i32>*
  store <4 x i32> %189, <4 x i32>* %191, align 1, !alias.scope !40, !noalias !37
  %192 = getelementptr i8, i8* %183, i64 16
  %193 = bitcast i8* %192 to <4 x i32>*
  store <4 x i32> %190, <4 x i32>* %193, align 1, !alias.scope !40, !noalias !37
  %194 = or i64 %179, 8
  %195 = getelementptr i32, i32* %0, i64 %194
  %196 = shl i64 %194, 2
  %197 = getelementptr i8, i8* %3, i64 %196
  %198 = bitcast i32* %195 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 4, !alias.scope !37
  %200 = getelementptr i32, i32* %195, i64 4
  %201 = bitcast i32* %200 to <4 x i32>*
  %202 = load <4 x i32>, <4 x i32>* %201, align 4, !alias.scope !37
  %203 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %199)
  %204 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %202)
  %205 = bitcast i8* %197 to <4 x i32>*
  store <4 x i32> %203, <4 x i32>* %205, align 1, !alias.scope !40, !noalias !37
  %206 = getelementptr i8, i8* %197, i64 16
  %207 = bitcast i8* %206 to <4 x i32>*
  store <4 x i32> %204, <4 x i32>* %207, align 1, !alias.scope !40, !noalias !37
  %208 = add i64 %179, 16
  %209 = add i64 %180, -2
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %211, label %178, !llvm.loop !42

211:                                              ; preds = %178, %166
  %212 = phi i64 [ 0, %166 ], [ %208, %178 ]
  %213 = icmp eq i64 %174, 0
  br i1 %213, label %228, label %214

214:                                              ; preds = %211
  %215 = getelementptr i32, i32* %0, i64 %212
  %216 = shl i64 %212, 2
  %217 = getelementptr i8, i8* %3, i64 %216
  %218 = bitcast i32* %215 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 4, !alias.scope !37
  %220 = getelementptr i32, i32* %215, i64 4
  %221 = bitcast i32* %220 to <4 x i32>*
  %222 = load <4 x i32>, <4 x i32>* %221, align 4, !alias.scope !37
  %223 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %219)
  %224 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %222)
  %225 = bitcast i8* %217 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %225, align 1, !alias.scope !40, !noalias !37
  %226 = getelementptr i8, i8* %217, i64 16
  %227 = bitcast i8* %226 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %227, align 1, !alias.scope !40, !noalias !37
  br label %228

228:                                              ; preds = %211, %214
  %229 = icmp eq i64 %146, %167
  br i1 %229, label %242, label %230

230:                                              ; preds = %228, %148, %137
  %231 = phi i32* [ %0, %148 ], [ %0, %137 ], [ %168, %228 ]
  %232 = phi i8* [ %3, %148 ], [ %3, %137 ], [ %170, %228 ]
  br label %233

233:                                              ; preds = %230, %233
  %234 = phi i32* [ %236, %233 ], [ %231, %230 ]
  %235 = phi i8* [ %240, %233 ], [ %232, %230 ]
  %236 = getelementptr inbounds i32, i32* %234, i64 1
  %237 = load i32, i32* %234, align 4
  %238 = tail call i32 @llvm.bswap.i32(i32 %237) #7
  %239 = bitcast i8* %235 to i32*
  store i32 %238, i32* %239, align 1
  %240 = getelementptr inbounds i8, i8* %235, i64 4
  %241 = icmp ult i32* %236, %135
  br i1 %241, label %233, label %242, !llvm.loop !43

242:                                              ; preds = %233, %228, %133
  %243 = load void (i8*, i32, i32, i32, i32)*, void (i8*, i32, i32, i32, i32)** @WebPApplyAlphaMultiply, align 8
  tail call void %243(i8* %3, i32 1, i32 %1, i32 1, i32 0) #7
  br label %251

244:                                              ; preds = %4
  %245 = load void (i32*, i32, i8*)*, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGBA4444, align 8
  tail call void %245(i32* %0, i32 %1, i8* %3) #7
  br label %251

246:                                              ; preds = %4
  %247 = load void (i32*, i32, i8*)*, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGBA4444, align 8
  tail call void %247(i32* %0, i32 %1, i8* %3) #7
  %248 = load void (i8*, i32, i32, i32)*, void (i8*, i32, i32, i32)** @WebPApplyAlphaMultiply4444, align 8
  tail call void %248(i8* %3, i32 %1, i32 1, i32 0) #7
  br label %251

249:                                              ; preds = %4
  %250 = load void (i32*, i32, i8*)*, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGB565, align 8
  tail call void %250(i32* %0, i32 %1, i8* %3) #7
  br label %251

251:                                              ; preds = %124, %119, %24, %4, %249, %246, %244, %242, %20, %16, %14, %11, %9, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LDspInit() local_unnamed_addr #4 {
  %1 = load volatile i32 (i32)*, i32 (i32)** @VP8LDspInit.VP8LDspInit_body_last_cpuinfo_used, align 8
  %2 = load i32 (i32)*, i32 (i32)** @VP8GetCPUInfo, align 8
  %3 = icmp eq i32 (i32)* %1, %2
  br i1 %3, label %12, label %4

4:                                                ; preds = %0
  store <2 x i32 (i32, i32*)*> <i32 (i32, i32*)* @VP8LPredictor0_C, i32 (i32, i32*)* @VP8LPredictor1_C>, <2 x i32 (i32, i32*)*>* bitcast ([16 x i32 (i32, i32*)*]* @VP8LPredictors to <2 x i32 (i32, i32*)*>*), align 16
  store <2 x i32 (i32, i32*)*> <i32 (i32, i32*)* @VP8LPredictor2_C, i32 (i32, i32*)* @VP8LPredictor3_C>, <2 x i32 (i32, i32*)*>* bitcast (i32 (i32, i32*)** getelementptr inbounds ([16 x i32 (i32, i32*)*], [16 x i32 (i32, i32*)*]* @VP8LPredictors, i64 0, i64 2) to <2 x i32 (i32, i32*)*>*), align 16
  store <2 x i32 (i32, i32*)*> <i32 (i32, i32*)* @VP8LPredictor4_C, i32 (i32, i32*)* @VP8LPredictor5_C>, <2 x i32 (i32, i32*)*>* bitcast (i32 (i32, i32*)** getelementptr inbounds ([16 x i32 (i32, i32*)*], [16 x i32 (i32, i32*)*]* @VP8LPredictors, i64 0, i64 4) to <2 x i32 (i32, i32*)*>*), align 16
  store <2 x i32 (i32, i32*)*> <i32 (i32, i32*)* @VP8LPredictor6_C, i32 (i32, i32*)* @VP8LPredictor7_C>, <2 x i32 (i32, i32*)*>* bitcast (i32 (i32, i32*)** getelementptr inbounds ([16 x i32 (i32, i32*)*], [16 x i32 (i32, i32*)*]* @VP8LPredictors, i64 0, i64 6) to <2 x i32 (i32, i32*)*>*), align 16
  store <2 x i32 (i32, i32*)*> <i32 (i32, i32*)* @VP8LPredictor8_C, i32 (i32, i32*)* @VP8LPredictor9_C>, <2 x i32 (i32, i32*)*>* bitcast (i32 (i32, i32*)** getelementptr inbounds ([16 x i32 (i32, i32*)*], [16 x i32 (i32, i32*)*]* @VP8LPredictors, i64 0, i64 8) to <2 x i32 (i32, i32*)*>*), align 16
  store <2 x i32 (i32, i32*)*> <i32 (i32, i32*)* @VP8LPredictor10_C, i32 (i32, i32*)* @VP8LPredictor11_C>, <2 x i32 (i32, i32*)*>* bitcast (i32 (i32, i32*)** getelementptr inbounds ([16 x i32 (i32, i32*)*], [16 x i32 (i32, i32*)*]* @VP8LPredictors, i64 0, i64 10) to <2 x i32 (i32, i32*)*>*), align 16
  store <2 x i32 (i32, i32*)*> <i32 (i32, i32*)* @VP8LPredictor12_C, i32 (i32, i32*)* @VP8LPredictor13_C>, <2 x i32 (i32, i32*)*>* bitcast (i32 (i32, i32*)** getelementptr inbounds ([16 x i32 (i32, i32*)*], [16 x i32 (i32, i32*)*]* @VP8LPredictors, i64 0, i64 12) to <2 x i32 (i32, i32*)*>*), align 16
  store <2 x i32 (i32, i32*)*> <i32 (i32, i32*)* @VP8LPredictor0_C, i32 (i32, i32*)* @VP8LPredictor0_C>, <2 x i32 (i32, i32*)*>* bitcast (i32 (i32, i32*)** getelementptr inbounds ([16 x i32 (i32, i32*)*], [16 x i32 (i32, i32*)*]* @VP8LPredictors, i64 0, i64 14) to <2 x i32 (i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd0_C, void (i32*, i32*, i32, i32*)* @PredictorAdd1_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast ([16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd2_C, void (i32*, i32*, i32, i32*)* @PredictorAdd3_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd, i64 0, i64 2) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd4_C, void (i32*, i32*, i32, i32*)* @PredictorAdd5_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd, i64 0, i64 4) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd6_C, void (i32*, i32*, i32, i32*)* @PredictorAdd7_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd, i64 0, i64 6) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd8_C, void (i32*, i32*, i32, i32*)* @PredictorAdd9_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd, i64 0, i64 8) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd10_C, void (i32*, i32*, i32, i32*)* @PredictorAdd11_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd, i64 0, i64 10) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd12_C, void (i32*, i32*, i32, i32*)* @PredictorAdd13_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd, i64 0, i64 12) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd0_C, void (i32*, i32*, i32, i32*)* @PredictorAdd0_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd, i64 0, i64 14) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd0_C, void (i32*, i32*, i32, i32*)* @PredictorAdd1_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast ([16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd2_C, void (i32*, i32*, i32, i32*)* @PredictorAdd3_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 2) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd4_C, void (i32*, i32*, i32, i32*)* @PredictorAdd5_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 4) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd6_C, void (i32*, i32*, i32, i32*)* @PredictorAdd7_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 6) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd8_C, void (i32*, i32*, i32, i32*)* @PredictorAdd9_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 8) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd10_C, void (i32*, i32*, i32, i32*)* @PredictorAdd11_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 10) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd12_C, void (i32*, i32*, i32, i32*)* @PredictorAdd13_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 12) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store <2 x void (i32*, i32*, i32, i32*)*> <void (i32*, i32*, i32, i32*)* @PredictorAdd0_C, void (i32*, i32*, i32, i32*)* @PredictorAdd0_C>, <2 x void (i32*, i32*, i32, i32*)*>* bitcast (void (i32*, i32*, i32, i32*)** getelementptr inbounds ([16 x void (i32*, i32*, i32, i32*)*], [16 x void (i32*, i32*, i32, i32*)*]* @VP8LPredictorsAdd_C, i64 0, i64 14) to <2 x void (i32*, i32*, i32, i32*)*>*), align 16
  store void (i32*, i32, i32*)* @VP8LAddGreenToBlueAndRed_C, void (i32*, i32, i32*)** @VP8LAddGreenToBlueAndRed, align 8
  store void (%struct.VP8LMultipliers*, i32*, i32, i32*)* @VP8LTransformColorInverse_C, void (%struct.VP8LMultipliers*, i32*, i32, i32*)** @VP8LTransformColorInverse, align 8
  store void (i32*, i32, i8*)* @VP8LConvertBGRAToRGBA_C, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGBA, align 8
  store void (i32*, i32, i8*)* @VP8LConvertBGRAToRGB_C, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGB, align 8
  store void (i32*, i32, i8*)* @VP8LConvertBGRAToBGR_C, void (i32*, i32, i8*)** @VP8LConvertBGRAToBGR, align 8
  store void (i32*, i32, i8*)* @VP8LConvertBGRAToRGBA4444_C, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGBA4444, align 8
  store void (i32*, i32, i8*)* @VP8LConvertBGRAToRGB565_C, void (i32*, i32, i8*)** @VP8LConvertBGRAToRGB565, align 8
  store void (i32*, i32*, i32*, i32, i32, i32)* @MapARGB_C, void (i32*, i32*, i32*, i32, i32, i32)** @VP8LMapColor32b, align 8
  store void (i8*, i32*, i8*, i32, i32, i32)* @MapAlpha_C, void (i8*, i32*, i8*, i32, i32, i32)** @VP8LMapColor8b, align 8
  %5 = icmp eq i32 (i32)* %2, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %4
  %7 = tail call i32 %2(i32 0) #7
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  tail call void @VP8LDspInitSSE2() #7
  br label %10

10:                                               ; preds = %4, %6, %9
  %11 = load i64, i64* bitcast (i32 (i32)** @VP8GetCPUInfo to i64*), align 8
  store volatile i64 %11, i64* bitcast (i32 (i32)** @VP8LDspInit.VP8LDspInit_body_last_cpuinfo_used to i64*), align 8
  br label %12

12:                                               ; preds = %0, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PredictorAdd0_C(i32* nocapture readonly, i32* nocapture readnone, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %128

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 8
  br i1 %8, label %91, label %9

9:                                                ; preds = %6
  %10 = getelementptr i32, i32* %3, i64 %7
  %11 = getelementptr i32, i32* %0, i64 %7
  %12 = icmp ugt i32* %11, %3
  %13 = icmp ugt i32* %10, %0
  %14 = and i1 %12, %13
  br i1 %14, label %91, label %15

15:                                               ; preds = %9
  %16 = and i64 %7, 4294967288
  %17 = add nsw i64 %16, -8
  %18 = lshr exact i64 %17, 3
  %19 = add nuw nsw i64 %18, 1
  %20 = and i64 %19, 1
  %21 = icmp eq i64 %17, 0
  br i1 %21, label %67, label %22

22:                                               ; preds = %15
  %23 = sub nuw nsw i64 %19, %20
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %64, %24 ]
  %26 = phi i64 [ %23, %22 ], [ %65, %24 ]
  %27 = getelementptr inbounds i32, i32* %0, i64 %25
  %28 = bitcast i32* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 4, !alias.scope !44
  %30 = getelementptr inbounds i32, i32* %27, i64 4
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4, !alias.scope !44
  %33 = add <4 x i32> %29, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %34 = add <4 x i32> %32, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %35 = and <4 x i32> %33, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %36 = and <4 x i32> %34, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %37 = and <4 x i32> %29, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %38 = and <4 x i32> %32, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %39 = or <4 x i32> %35, %37
  %40 = or <4 x i32> %36, %38
  %41 = getelementptr inbounds i32, i32* %3, i64 %25
  %42 = bitcast i32* %41 to <4 x i32>*
  store <4 x i32> %39, <4 x i32>* %42, align 4, !alias.scope !47, !noalias !44
  %43 = getelementptr inbounds i32, i32* %41, i64 4
  %44 = bitcast i32* %43 to <4 x i32>*
  store <4 x i32> %40, <4 x i32>* %44, align 4, !alias.scope !47, !noalias !44
  %45 = or i64 %25, 8
  %46 = getelementptr inbounds i32, i32* %0, i64 %45
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4, !alias.scope !44
  %49 = getelementptr inbounds i32, i32* %46, i64 4
  %50 = bitcast i32* %49 to <4 x i32>*
  %51 = load <4 x i32>, <4 x i32>* %50, align 4, !alias.scope !44
  %52 = add <4 x i32> %48, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %53 = add <4 x i32> %51, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %54 = and <4 x i32> %52, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %55 = and <4 x i32> %53, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %56 = and <4 x i32> %48, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %57 = and <4 x i32> %51, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %58 = or <4 x i32> %54, %56
  %59 = or <4 x i32> %55, %57
  %60 = getelementptr inbounds i32, i32* %3, i64 %45
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %61, align 4, !alias.scope !47, !noalias !44
  %62 = getelementptr inbounds i32, i32* %60, i64 4
  %63 = bitcast i32* %62 to <4 x i32>*
  store <4 x i32> %59, <4 x i32>* %63, align 4, !alias.scope !47, !noalias !44
  %64 = add i64 %25, 16
  %65 = add i64 %26, -2
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %24, !llvm.loop !49

67:                                               ; preds = %24, %15
  %68 = phi i64 [ 0, %15 ], [ %64, %24 ]
  %69 = icmp eq i64 %20, 0
  br i1 %69, label %89, label %70

70:                                               ; preds = %67
  %71 = getelementptr inbounds i32, i32* %0, i64 %68
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4, !alias.scope !44
  %74 = getelementptr inbounds i32, i32* %71, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 4, !alias.scope !44
  %77 = add <4 x i32> %73, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %78 = add <4 x i32> %76, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %79 = and <4 x i32> %77, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %80 = and <4 x i32> %78, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %81 = and <4 x i32> %73, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %82 = and <4 x i32> %76, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %83 = or <4 x i32> %79, %81
  %84 = or <4 x i32> %80, %82
  %85 = getelementptr inbounds i32, i32* %3, i64 %68
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %83, <4 x i32>* %86, align 4, !alias.scope !47, !noalias !44
  %87 = getelementptr inbounds i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %84, <4 x i32>* %88, align 4, !alias.scope !47, !noalias !44
  br label %89

89:                                               ; preds = %67, %70
  %90 = icmp eq i64 %16, %7
  br i1 %90, label %128, label %91

91:                                               ; preds = %89, %9, %6
  %92 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %16, %89 ]
  %93 = xor i64 %92, -1
  %94 = and i64 %7, 1
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %105, label %96

96:                                               ; preds = %91
  %97 = getelementptr inbounds i32, i32* %0, i64 %92
  %98 = load i32, i32* %97, align 4
  %99 = add i32 %98, -16777216
  %100 = and i32 %99, -16711936
  %101 = and i32 %98, 16711935
  %102 = or i32 %100, %101
  %103 = getelementptr inbounds i32, i32* %3, i64 %92
  store i32 %102, i32* %103, align 4
  %104 = or i64 %92, 1
  br label %105

105:                                              ; preds = %91, %96
  %106 = phi i64 [ %92, %91 ], [ %104, %96 ]
  %107 = sub nsw i64 0, %7
  %108 = icmp eq i64 %93, %107
  br i1 %108, label %128, label %109

109:                                              ; preds = %105, %109
  %110 = phi i64 [ %126, %109 ], [ %106, %105 ]
  %111 = getelementptr inbounds i32, i32* %0, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = add i32 %112, -16777216
  %114 = and i32 %113, -16711936
  %115 = and i32 %112, 16711935
  %116 = or i32 %114, %115
  %117 = getelementptr inbounds i32, i32* %3, i64 %110
  store i32 %116, i32* %117, align 4
  %118 = add nuw nsw i64 %110, 1
  %119 = getelementptr inbounds i32, i32* %0, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = add i32 %120, -16777216
  %122 = and i32 %121, -16711936
  %123 = and i32 %120, 16711935
  %124 = or i32 %122, %123
  %125 = getelementptr inbounds i32, i32* %3, i64 %118
  store i32 %124, i32* %125, align 4
  %126 = add nuw nsw i64 %110, 2
  %127 = icmp eq i64 %126, %7
  br i1 %127, label %128, label %109, !llvm.loop !50

128:                                              ; preds = %105, %109, %89, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PredictorAdd1_C(i32* nocapture readonly, i32* nocapture readnone, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %61

6:                                                ; preds = %4
  %7 = getelementptr inbounds i32, i32* %3, i64 -1
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %2 to i64
  %10 = and i64 %9, 1
  %11 = icmp eq i32 %2, 1
  br i1 %11, label %44, label %12

12:                                               ; preds = %6
  %13 = sub nsw i64 %9, %10
  br label %14

14:                                               ; preds = %14, %12
  %15 = phi i64 [ 0, %12 ], [ %41, %14 ]
  %16 = phi i32 [ %8, %12 ], [ %39, %14 ]
  %17 = phi i64 [ %13, %12 ], [ %42, %14 ]
  %18 = getelementptr inbounds i32, i32* %0, i64 %15
  %19 = load i32, i32* %18, align 4
  %20 = and i32 %19, -16711936
  %21 = and i32 %16, -16711936
  %22 = add i32 %20, %21
  %23 = and i32 %19, 16711935
  %24 = and i32 %16, 16711935
  %25 = add nuw nsw i32 %23, %24
  %26 = and i32 %22, -16711936
  %27 = and i32 %25, 16711935
  %28 = or i32 %26, %27
  %29 = getelementptr inbounds i32, i32* %3, i64 %15
  store i32 %28, i32* %29, align 4
  %30 = or i64 %15, 1
  %31 = getelementptr inbounds i32, i32* %0, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = and i32 %32, -16711936
  %34 = add i32 %33, %26
  %35 = and i32 %32, 16711935
  %36 = add nuw nsw i32 %35, %27
  %37 = and i32 %34, -16711936
  %38 = and i32 %36, 16711935
  %39 = or i32 %37, %38
  %40 = getelementptr inbounds i32, i32* %3, i64 %30
  store i32 %39, i32* %40, align 4
  %41 = add nuw nsw i64 %15, 2
  %42 = add i64 %17, -2
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %14

44:                                               ; preds = %14, %6
  %45 = phi i64 [ 0, %6 ], [ %41, %14 ]
  %46 = phi i32 [ %8, %6 ], [ %39, %14 ]
  %47 = icmp eq i64 %10, 0
  br i1 %47, label %61, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds i32, i32* %0, i64 %45
  %50 = load i32, i32* %49, align 4
  %51 = and i32 %50, -16711936
  %52 = and i32 %46, -16711936
  %53 = add i32 %51, %52
  %54 = and i32 %50, 16711935
  %55 = and i32 %46, 16711935
  %56 = add nuw nsw i32 %54, %55
  %57 = and i32 %53, -16711936
  %58 = and i32 %56, 16711935
  %59 = or i32 %57, %58
  %60 = getelementptr inbounds i32, i32* %3, i64 %45
  store i32 %59, i32* %60, align 4
  br label %61

61:                                               ; preds = %48, %44, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PredictorAdd2_C(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %82

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 8
  br i1 %8, label %62, label %9

9:                                                ; preds = %6
  %10 = getelementptr i32, i32* %3, i64 %7
  %11 = getelementptr i32, i32* %1, i64 %7
  %12 = getelementptr i32, i32* %0, i64 %7
  %13 = icmp ugt i32* %11, %3
  %14 = icmp ugt i32* %10, %1
  %15 = and i1 %13, %14
  %16 = icmp ugt i32* %12, %3
  %17 = icmp ugt i32* %10, %0
  %18 = and i1 %16, %17
  %19 = or i1 %15, %18
  br i1 %19, label %62, label %20

20:                                               ; preds = %9
  %21 = and i64 %7, 4294967288
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %58, %22 ]
  %24 = getelementptr inbounds i32, i32* %1, i64 %23
  %25 = bitcast i32* %24 to <4 x i32>*
  %26 = load <4 x i32>, <4 x i32>* %25, align 4, !alias.scope !51
  %27 = getelementptr inbounds i32, i32* %24, i64 4
  %28 = bitcast i32* %27 to <4 x i32>*
  %29 = load <4 x i32>, <4 x i32>* %28, align 4, !alias.scope !51
  %30 = getelementptr inbounds i32, i32* %0, i64 %23
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4, !alias.scope !54
  %33 = getelementptr inbounds i32, i32* %30, i64 4
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4, !alias.scope !54
  %36 = and <4 x i32> %32, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %37 = and <4 x i32> %35, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %38 = and <4 x i32> %26, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %39 = and <4 x i32> %29, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %40 = add <4 x i32> %36, %38
  %41 = add <4 x i32> %37, %39
  %42 = and <4 x i32> %32, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %43 = and <4 x i32> %35, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %44 = and <4 x i32> %26, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %45 = and <4 x i32> %29, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %46 = add nuw nsw <4 x i32> %42, %44
  %47 = add nuw nsw <4 x i32> %43, %45
  %48 = and <4 x i32> %40, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %49 = and <4 x i32> %41, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %50 = and <4 x i32> %46, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %51 = and <4 x i32> %47, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %52 = or <4 x i32> %48, %50
  %53 = or <4 x i32> %49, %51
  %54 = getelementptr inbounds i32, i32* %3, i64 %23
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> %52, <4 x i32>* %55, align 4, !alias.scope !56, !noalias !58
  %56 = getelementptr inbounds i32, i32* %54, i64 4
  %57 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %57, align 4, !alias.scope !56, !noalias !58
  %58 = add i64 %23, 8
  %59 = icmp eq i64 %58, %21
  br i1 %59, label %60, label %22, !llvm.loop !59

60:                                               ; preds = %22
  %61 = icmp eq i64 %21, %7
  br i1 %61, label %82, label %62

62:                                               ; preds = %60, %9, %6
  %63 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %21, %60 ]
  br label %64

64:                                               ; preds = %62, %64
  %65 = phi i64 [ %80, %64 ], [ %63, %62 ]
  %66 = getelementptr inbounds i32, i32* %1, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds i32, i32* %0, i64 %65
  %69 = load i32, i32* %68, align 4
  %70 = and i32 %69, -16711936
  %71 = and i32 %67, -16711936
  %72 = add i32 %70, %71
  %73 = and i32 %69, 16711935
  %74 = and i32 %67, 16711935
  %75 = add nuw nsw i32 %73, %74
  %76 = and i32 %72, -16711936
  %77 = and i32 %75, 16711935
  %78 = or i32 %76, %77
  %79 = getelementptr inbounds i32, i32* %3, i64 %65
  store i32 %78, i32* %79, align 4
  %80 = add nuw nsw i64 %65, 1
  %81 = icmp eq i64 %80, %7
  br i1 %81, label %82, label %64, !llvm.loop !60

82:                                               ; preds = %64, %60, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #5

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PredictorAdd3_C(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %84

6:                                                ; preds = %4
  %7 = getelementptr inbounds i32, i32* %1, i64 1
  %8 = zext i32 %2 to i64
  %9 = icmp ult i32 %2, 8
  br i1 %9, label %64, label %10

10:                                               ; preds = %6
  %11 = getelementptr i32, i32* %3, i64 %8
  %12 = add nuw nsw i64 %8, 1
  %13 = getelementptr i32, i32* %1, i64 %12
  %14 = getelementptr i32, i32* %0, i64 %8
  %15 = icmp ugt i32* %13, %3
  %16 = icmp ult i32* %7, %11
  %17 = and i1 %15, %16
  %18 = icmp ugt i32* %14, %3
  %19 = icmp ugt i32* %11, %0
  %20 = and i1 %18, %19
  %21 = or i1 %17, %20
  br i1 %21, label %64, label %22

22:                                               ; preds = %10
  %23 = and i64 %8, 4294967288
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %60, %24 ]
  %26 = getelementptr inbounds i32, i32* %7, i64 %25
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4, !alias.scope !61
  %29 = getelementptr inbounds i32, i32* %26, i64 4
  %30 = bitcast i32* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 4, !alias.scope !61
  %32 = getelementptr inbounds i32, i32* %0, i64 %25
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 4, !alias.scope !64
  %35 = getelementptr inbounds i32, i32* %32, i64 4
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 4, !alias.scope !64
  %38 = and <4 x i32> %34, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %39 = and <4 x i32> %37, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %40 = and <4 x i32> %28, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %41 = and <4 x i32> %31, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %42 = add <4 x i32> %38, %40
  %43 = add <4 x i32> %39, %41
  %44 = and <4 x i32> %34, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %45 = and <4 x i32> %37, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %46 = and <4 x i32> %28, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %47 = and <4 x i32> %31, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %48 = add nuw nsw <4 x i32> %44, %46
  %49 = add nuw nsw <4 x i32> %45, %47
  %50 = and <4 x i32> %42, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %51 = and <4 x i32> %43, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %52 = and <4 x i32> %48, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %53 = and <4 x i32> %49, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %54 = or <4 x i32> %50, %52
  %55 = or <4 x i32> %51, %53
  %56 = getelementptr inbounds i32, i32* %3, i64 %25
  %57 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %57, align 4, !alias.scope !66, !noalias !68
  %58 = getelementptr inbounds i32, i32* %56, i64 4
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> %55, <4 x i32>* %59, align 4, !alias.scope !66, !noalias !68
  %60 = add i64 %25, 8
  %61 = icmp eq i64 %60, %23
  br i1 %61, label %62, label %24, !llvm.loop !69

62:                                               ; preds = %24
  %63 = icmp eq i64 %23, %8
  br i1 %63, label %84, label %64

64:                                               ; preds = %62, %10, %6
  %65 = phi i64 [ 0, %10 ], [ 0, %6 ], [ %23, %62 ]
  br label %66

66:                                               ; preds = %64, %66
  %67 = phi i64 [ %82, %66 ], [ %65, %64 ]
  %68 = getelementptr inbounds i32, i32* %7, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds i32, i32* %0, i64 %67
  %71 = load i32, i32* %70, align 4
  %72 = and i32 %71, -16711936
  %73 = and i32 %69, -16711936
  %74 = add i32 %72, %73
  %75 = and i32 %71, 16711935
  %76 = and i32 %69, 16711935
  %77 = add nuw nsw i32 %75, %76
  %78 = and i32 %74, -16711936
  %79 = and i32 %77, 16711935
  %80 = or i32 %78, %79
  %81 = getelementptr inbounds i32, i32* %3, i64 %67
  store i32 %80, i32* %81, align 4
  %82 = add nuw nsw i64 %67, 1
  %83 = icmp eq i64 %82, %8
  br i1 %83, label %84, label %66, !llvm.loop !70

84:                                               ; preds = %66, %62, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PredictorAdd4_C(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %84

6:                                                ; preds = %4
  %7 = getelementptr inbounds i32, i32* %1, i64 -1
  %8 = zext i32 %2 to i64
  %9 = icmp ult i32 %2, 8
  br i1 %9, label %64, label %10

10:                                               ; preds = %6
  %11 = getelementptr i32, i32* %3, i64 %8
  %12 = add nsw i64 %8, -1
  %13 = getelementptr i32, i32* %1, i64 %12
  %14 = getelementptr i32, i32* %0, i64 %8
  %15 = icmp ugt i32* %13, %3
  %16 = icmp ult i32* %7, %11
  %17 = and i1 %15, %16
  %18 = icmp ugt i32* %14, %3
  %19 = icmp ugt i32* %11, %0
  %20 = and i1 %18, %19
  %21 = or i1 %17, %20
  br i1 %21, label %64, label %22

22:                                               ; preds = %10
  %23 = and i64 %8, 4294967288
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %60, %24 ]
  %26 = getelementptr inbounds i32, i32* %7, i64 %25
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4, !alias.scope !71
  %29 = getelementptr inbounds i32, i32* %26, i64 4
  %30 = bitcast i32* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 4, !alias.scope !71
  %32 = getelementptr inbounds i32, i32* %0, i64 %25
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 4, !alias.scope !74
  %35 = getelementptr inbounds i32, i32* %32, i64 4
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 4, !alias.scope !74
  %38 = and <4 x i32> %34, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %39 = and <4 x i32> %37, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %40 = and <4 x i32> %28, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %41 = and <4 x i32> %31, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %42 = add <4 x i32> %38, %40
  %43 = add <4 x i32> %39, %41
  %44 = and <4 x i32> %34, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %45 = and <4 x i32> %37, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %46 = and <4 x i32> %28, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %47 = and <4 x i32> %31, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %48 = add nuw nsw <4 x i32> %44, %46
  %49 = add nuw nsw <4 x i32> %45, %47
  %50 = and <4 x i32> %42, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %51 = and <4 x i32> %43, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %52 = and <4 x i32> %48, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %53 = and <4 x i32> %49, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %54 = or <4 x i32> %50, %52
  %55 = or <4 x i32> %51, %53
  %56 = getelementptr inbounds i32, i32* %3, i64 %25
  %57 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %57, align 4, !alias.scope !76, !noalias !78
  %58 = getelementptr inbounds i32, i32* %56, i64 4
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> %55, <4 x i32>* %59, align 4, !alias.scope !76, !noalias !78
  %60 = add i64 %25, 8
  %61 = icmp eq i64 %60, %23
  br i1 %61, label %62, label %24, !llvm.loop !79

62:                                               ; preds = %24
  %63 = icmp eq i64 %23, %8
  br i1 %63, label %84, label %64

64:                                               ; preds = %62, %10, %6
  %65 = phi i64 [ 0, %10 ], [ 0, %6 ], [ %23, %62 ]
  br label %66

66:                                               ; preds = %64, %66
  %67 = phi i64 [ %82, %66 ], [ %65, %64 ]
  %68 = getelementptr inbounds i32, i32* %7, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds i32, i32* %0, i64 %67
  %71 = load i32, i32* %70, align 4
  %72 = and i32 %71, -16711936
  %73 = and i32 %69, -16711936
  %74 = add i32 %72, %73
  %75 = and i32 %71, 16711935
  %76 = and i32 %69, 16711935
  %77 = add nuw nsw i32 %75, %76
  %78 = and i32 %74, -16711936
  %79 = and i32 %77, 16711935
  %80 = or i32 %78, %79
  %81 = getelementptr inbounds i32, i32* %3, i64 %67
  store i32 %80, i32* %81, align 4
  %82 = add nuw nsw i64 %67, 1
  %83 = icmp eq i64 %82, %8
  br i1 %83, label %84, label %66, !llvm.loop !80

84:                                               ; preds = %66, %62, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PredictorAdd5_C(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %41

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = getelementptr inbounds i32, i32* %3, i64 -1
  %9 = load i32, i32* %8, align 4
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi i32 [ %9, %6 ], [ %37, %10 ]
  %12 = phi i64 [ 0, %6 ], [ %39, %10 ]
  %13 = getelementptr inbounds i32, i32* %1, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds i32, i32* %13, i64 1
  %16 = load i32, i32* %15, align 4
  %17 = xor i32 %16, %11
  %18 = lshr i32 %17, 1
  %19 = and i32 %18, 2139062143
  %20 = and i32 %16, %11
  %21 = add i32 %19, %20
  %22 = xor i32 %21, %14
  %23 = lshr i32 %22, 1
  %24 = and i32 %23, 2139062143
  %25 = and i32 %21, %14
  %26 = add i32 %24, %25
  %27 = getelementptr inbounds i32, i32* %0, i64 %12
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %28, -16711936
  %30 = and i32 %26, -16711936
  %31 = add i32 %30, %29
  %32 = and i32 %28, 16711935
  %33 = and i32 %26, 16711935
  %34 = add nuw nsw i32 %33, %32
  %35 = and i32 %31, -16711936
  %36 = and i32 %34, 16711935
  %37 = or i32 %35, %36
  %38 = getelementptr inbounds i32, i32* %3, i64 %12
  store i32 %37, i32* %38, align 4
  %39 = add nuw nsw i64 %12, 1
  %40 = icmp eq i64 %39, %7
  br i1 %40, label %41, label %10

41:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PredictorAdd6_C(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %35

6:                                                ; preds = %4
  %7 = getelementptr inbounds i32, i32* %1, i64 -1
  %8 = zext i32 %2 to i64
  %9 = getelementptr inbounds i32, i32* %3, i64 -1
  %10 = load i32, i32* %9, align 4
  br label %11

11:                                               ; preds = %11, %6
  %12 = phi i32 [ %10, %6 ], [ %31, %11 ]
  %13 = phi i64 [ 0, %6 ], [ %33, %11 ]
  %14 = getelementptr inbounds i32, i32* %7, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = xor i32 %15, %12
  %17 = lshr i32 %16, 1
  %18 = and i32 %17, 2139062143
  %19 = and i32 %15, %12
  %20 = add i32 %18, %19
  %21 = getelementptr inbounds i32, i32* %0, i64 %13
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, -16711936
  %24 = and i32 %20, -16711936
  %25 = add i32 %24, %23
  %26 = and i32 %22, 16711935
  %27 = and i32 %20, 16711935
  %28 = add nuw nsw i32 %27, %26
  %29 = and i32 %25, -16711936
  %30 = and i32 %28, 16711935
  %31 = or i32 %29, %30
  %32 = getelementptr inbounds i32, i32* %3, i64 %13
  store i32 %31, i32* %32, align 4
  %33 = add nuw nsw i64 %13, 1
  %34 = icmp eq i64 %33, %8
  br i1 %34, label %35, label %11

35:                                               ; preds = %11, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PredictorAdd7_C(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %34

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = getelementptr inbounds i32, i32* %3, i64 -1
  %9 = load i32, i32* %8, align 4
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi i32 [ %9, %6 ], [ %30, %10 ]
  %12 = phi i64 [ 0, %6 ], [ %32, %10 ]
  %13 = getelementptr inbounds i32, i32* %1, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = xor i32 %14, %11
  %16 = lshr i32 %15, 1
  %17 = and i32 %16, 2139062143
  %18 = and i32 %14, %11
  %19 = add i32 %17, %18
  %20 = getelementptr inbounds i32, i32* %0, i64 %12
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, -16711936
  %23 = and i32 %19, -16711936
  %24 = add i32 %23, %22
  %25 = and i32 %21, 16711935
  %26 = and i32 %19, 16711935
  %27 = add nuw nsw i32 %26, %25
  %28 = and i32 %24, -16711936
  %29 = and i32 %27, 16711935
  %30 = or i32 %28, %29
  %31 = getelementptr inbounds i32, i32* %3, i64 %12
  store i32 %30, i32* %31, align 4
  %32 = add nuw nsw i64 %12, 1
  %33 = icmp eq i64 %32, %7
  br i1 %33, label %34, label %10

34:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PredictorAdd8_C(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %81

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 4
  br i1 %8, label %54, label %9

9:                                                ; preds = %6
  %10 = getelementptr i32, i32* %3, i64 %7
  %11 = getelementptr i32, i32* %1, i64 -1
  %12 = getelementptr i32, i32* %1, i64 %7
  %13 = getelementptr i32, i32* %0, i64 %7
  %14 = icmp ugt i32* %12, %3
  %15 = icmp ult i32* %11, %10
  %16 = and i1 %14, %15
  %17 = icmp ugt i32* %13, %3
  %18 = icmp ugt i32* %10, %0
  %19 = and i1 %17, %18
  %20 = or i1 %16, %19
  br i1 %20, label %54, label %21

21:                                               ; preds = %9
  %22 = and i64 %7, 4294967292
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi i64 [ 0, %21 ], [ %50, %23 ]
  %25 = getelementptr inbounds i32, i32* %1, i64 %24
  %26 = getelementptr inbounds i32, i32* %25, i64 -1
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 4, !alias.scope !81
  %29 = bitcast i32* %25 to <4 x i32>*
  %30 = load <4 x i32>, <4 x i32>* %29, align 4, !alias.scope !81
  %31 = xor <4 x i32> %30, %28
  %32 = lshr <4 x i32> %31, <i32 1, i32 1, i32 1, i32 1>
  %33 = and <4 x i32> %32, <i32 2139062143, i32 2139062143, i32 2139062143, i32 2139062143>
  %34 = and <4 x i32> %30, %28
  %35 = add <4 x i32> %33, %34
  %36 = getelementptr inbounds i32, i32* %0, i64 %24
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4, !alias.scope !84
  %39 = and <4 x i32> %38, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %40 = and <4 x i32> %35, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %41 = add <4 x i32> %40, %39
  %42 = and <4 x i32> %38, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %43 = and <4 x i32> %35, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %44 = add nuw nsw <4 x i32> %43, %42
  %45 = and <4 x i32> %41, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %46 = and <4 x i32> %44, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %47 = or <4 x i32> %45, %46
  %48 = getelementptr inbounds i32, i32* %3, i64 %24
  %49 = bitcast i32* %48 to <4 x i32>*
  store <4 x i32> %47, <4 x i32>* %49, align 4, !alias.scope !86, !noalias !88
  %50 = add i64 %24, 4
  %51 = icmp eq i64 %50, %22
  br i1 %51, label %52, label %23, !llvm.loop !89

52:                                               ; preds = %23
  %53 = icmp eq i64 %22, %7
  br i1 %53, label %81, label %54

54:                                               ; preds = %52, %9, %6
  %55 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %22, %52 ]
  br label %56

56:                                               ; preds = %54, %56
  %57 = phi i64 [ %79, %56 ], [ %55, %54 ]
  %58 = getelementptr inbounds i32, i32* %1, i64 %57
  %59 = getelementptr inbounds i32, i32* %58, i64 -1
  %60 = load i32, i32* %59, align 4
  %61 = load i32, i32* %58, align 4
  %62 = xor i32 %61, %60
  %63 = lshr i32 %62, 1
  %64 = and i32 %63, 2139062143
  %65 = and i32 %61, %60
  %66 = add i32 %64, %65
  %67 = getelementptr inbounds i32, i32* %0, i64 %57
  %68 = load i32, i32* %67, align 4
  %69 = and i32 %68, -16711936
  %70 = and i32 %66, -16711936
  %71 = add i32 %70, %69
  %72 = and i32 %68, 16711935
  %73 = and i32 %66, 16711935
  %74 = add nuw nsw i32 %73, %72
  %75 = and i32 %71, -16711936
  %76 = and i32 %74, 16711935
  %77 = or i32 %75, %76
  %78 = getelementptr inbounds i32, i32* %3, i64 %57
  store i32 %77, i32* %78, align 4
  %79 = add nuw nsw i64 %57, 1
  %80 = icmp eq i64 %79, %7
  br i1 %80, label %81, label %56, !llvm.loop !90

81:                                               ; preds = %56, %52, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PredictorAdd9_C(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %81

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = icmp ult i32 %2, 4
  br i1 %8, label %54, label %9

9:                                                ; preds = %6
  %10 = getelementptr i32, i32* %3, i64 %7
  %11 = add nuw nsw i64 %7, 1
  %12 = getelementptr i32, i32* %1, i64 %11
  %13 = getelementptr i32, i32* %0, i64 %7
  %14 = icmp ugt i32* %12, %3
  %15 = icmp ugt i32* %10, %1
  %16 = and i1 %14, %15
  %17 = icmp ugt i32* %13, %3
  %18 = icmp ugt i32* %10, %0
  %19 = and i1 %17, %18
  %20 = or i1 %16, %19
  br i1 %20, label %54, label %21

21:                                               ; preds = %9
  %22 = and i64 %7, 4294967292
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi i64 [ 0, %21 ], [ %50, %23 ]
  %25 = getelementptr inbounds i32, i32* %1, i64 %24
  %26 = bitcast i32* %25 to <4 x i32>*
  %27 = load <4 x i32>, <4 x i32>* %26, align 4, !alias.scope !91
  %28 = getelementptr inbounds i32, i32* %25, i64 1
  %29 = bitcast i32* %28 to <4 x i32>*
  %30 = load <4 x i32>, <4 x i32>* %29, align 4, !alias.scope !91
  %31 = xor <4 x i32> %30, %27
  %32 = lshr <4 x i32> %31, <i32 1, i32 1, i32 1, i32 1>
  %33 = and <4 x i32> %32, <i32 2139062143, i32 2139062143, i32 2139062143, i32 2139062143>
  %34 = and <4 x i32> %30, %27
  %35 = add <4 x i32> %33, %34
  %36 = getelementptr inbounds i32, i32* %0, i64 %24
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4, !alias.scope !94
  %39 = and <4 x i32> %38, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %40 = and <4 x i32> %35, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %41 = add <4 x i32> %40, %39
  %42 = and <4 x i32> %38, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %43 = and <4 x i32> %35, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %44 = add nuw nsw <4 x i32> %43, %42
  %45 = and <4 x i32> %41, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %46 = and <4 x i32> %44, <i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %47 = or <4 x i32> %45, %46
  %48 = getelementptr inbounds i32, i32* %3, i64 %24
  %49 = bitcast i32* %48 to <4 x i32>*
  store <4 x i32> %47, <4 x i32>* %49, align 4, !alias.scope !96, !noalias !98
  %50 = add i64 %24, 4
  %51 = icmp eq i64 %50, %22
  br i1 %51, label %52, label %23, !llvm.loop !99

52:                                               ; preds = %23
  %53 = icmp eq i64 %22, %7
  br i1 %53, label %81, label %54

54:                                               ; preds = %52, %9, %6
  %55 = phi i64 [ 0, %9 ], [ 0, %6 ], [ %22, %52 ]
  br label %56

56:                                               ; preds = %54, %56
  %57 = phi i64 [ %79, %56 ], [ %55, %54 ]
  %58 = getelementptr inbounds i32, i32* %1, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds i32, i32* %58, i64 1
  %61 = load i32, i32* %60, align 4
  %62 = xor i32 %61, %59
  %63 = lshr i32 %62, 1
  %64 = and i32 %63, 2139062143
  %65 = and i32 %61, %59
  %66 = add i32 %64, %65
  %67 = getelementptr inbounds i32, i32* %0, i64 %57
  %68 = load i32, i32* %67, align 4
  %69 = and i32 %68, -16711936
  %70 = and i32 %66, -16711936
  %71 = add i32 %70, %69
  %72 = and i32 %68, 16711935
  %73 = and i32 %66, 16711935
  %74 = add nuw nsw i32 %73, %72
  %75 = and i32 %71, -16711936
  %76 = and i32 %74, 16711935
  %77 = or i32 %75, %76
  %78 = getelementptr inbounds i32, i32* %3, i64 %57
  store i32 %77, i32* %78, align 4
  %79 = add nuw nsw i64 %57, 1
  %80 = icmp eq i64 %79, %7
  br i1 %80, label %81, label %56, !llvm.loop !100

81:                                               ; preds = %56, %52, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PredictorAdd10_C(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %48

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = getelementptr inbounds i32, i32* %3, i64 -1
  %9 = load i32, i32* %8, align 4
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi i32 [ %9, %6 ], [ %44, %10 ]
  %12 = phi i64 [ 0, %6 ], [ %46, %10 ]
  %13 = getelementptr inbounds i32, i32* %1, i64 %12
  %14 = getelementptr inbounds i32, i32* %13, i64 -1
  %15 = load i32, i32* %14, align 4
  %16 = load i32, i32* %13, align 4
  %17 = getelementptr inbounds i32, i32* %13, i64 1
  %18 = load i32, i32* %17, align 4
  %19 = xor i32 %15, %11
  %20 = lshr i32 %19, 1
  %21 = and i32 %20, 2139062143
  %22 = and i32 %15, %11
  %23 = add i32 %21, %22
  %24 = xor i32 %18, %16
  %25 = lshr i32 %24, 1
  %26 = and i32 %25, 2139062143
  %27 = and i32 %18, %16
  %28 = add i32 %26, %27
  %29 = xor i32 %28, %23
  %30 = lshr i32 %29, 1
  %31 = and i32 %30, 2139062143
  %32 = and i32 %28, %23
  %33 = add i32 %31, %32
  %34 = getelementptr inbounds i32, i32* %0, i64 %12
  %35 = load i32, i32* %34, align 4
  %36 = and i32 %35, -16711936
  %37 = and i32 %33, -16711936
  %38 = add i32 %37, %36
  %39 = and i32 %35, 16711935
  %40 = and i32 %33, 16711935
  %41 = add nuw nsw i32 %40, %39
  %42 = and i32 %38, -16711936
  %43 = and i32 %41, 16711935
  %44 = or i32 %42, %43
  %45 = getelementptr inbounds i32, i32* %3, i64 %12
  store i32 %44, i32* %45, align 4
  %46 = add nuw nsw i64 %12, 1
  %47 = icmp eq i64 %46, %7
  br i1 %47, label %48, label %10

48:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PredictorAdd11_C(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %90

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = getelementptr inbounds i32, i32* %3, i64 -1
  %9 = load i32, i32* %8, align 4
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi i32 [ %9, %6 ], [ %86, %10 ]
  %12 = phi i64 [ 0, %6 ], [ %88, %10 ]
  %13 = getelementptr inbounds i32, i32* %1, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds i32, i32* %13, i64 -1
  %16 = load i32, i32* %15, align 4
  %17 = lshr i32 %14, 24
  %18 = lshr i32 %11, 24
  %19 = lshr i32 %16, 24
  %20 = sub nsw i32 %18, %19
  %21 = sub nsw i32 %17, %19
  %22 = icmp slt i32 %20, 0
  %23 = sub nsw i32 0, %20
  %24 = select i1 %22, i32 %23, i32 %20
  %25 = icmp slt i32 %21, 0
  %26 = sub nsw i32 0, %21
  %27 = select i1 %25, i32 %21, i32 %26
  %28 = lshr i32 %14, 16
  %29 = and i32 %28, 255
  %30 = lshr i32 %11, 16
  %31 = and i32 %30, 255
  %32 = lshr i32 %16, 16
  %33 = and i32 %32, 255
  %34 = sub nsw i32 %31, %33
  %35 = sub nsw i32 %29, %33
  %36 = icmp slt i32 %34, 0
  %37 = sub nsw i32 0, %34
  %38 = select i1 %36, i32 %37, i32 %34
  %39 = icmp slt i32 %35, 0
  %40 = sub nsw i32 0, %35
  %41 = select i1 %39, i32 %35, i32 %40
  %42 = lshr i32 %14, 8
  %43 = and i32 %42, 255
  %44 = lshr i32 %11, 8
  %45 = and i32 %44, 255
  %46 = lshr i32 %16, 8
  %47 = and i32 %46, 255
  %48 = sub nsw i32 %45, %47
  %49 = sub nsw i32 %43, %47
  %50 = icmp slt i32 %48, 0
  %51 = sub nsw i32 0, %48
  %52 = select i1 %50, i32 %51, i32 %48
  %53 = icmp slt i32 %49, 0
  %54 = sub nsw i32 0, %49
  %55 = select i1 %53, i32 %49, i32 %54
  %56 = and i32 %14, 255
  %57 = and i32 %11, 255
  %58 = and i32 %16, 255
  %59 = sub nsw i32 %57, %58
  %60 = sub nsw i32 %56, %58
  %61 = icmp slt i32 %59, 0
  %62 = sub nsw i32 0, %59
  %63 = select i1 %61, i32 %62, i32 %59
  %64 = icmp slt i32 %60, 0
  %65 = sub nsw i32 0, %60
  %66 = select i1 %64, i32 %60, i32 %65
  %67 = add nsw i32 %63, %66
  %68 = add nsw i32 %67, %27
  %69 = add nsw i32 %68, %24
  %70 = add nsw i32 %69, %55
  %71 = add nsw i32 %70, %52
  %72 = add nsw i32 %71, %41
  %73 = add nsw i32 %72, %38
  %74 = icmp slt i32 %73, 1
  %75 = select i1 %74, i32 %14, i32 %11
  %76 = getelementptr inbounds i32, i32* %0, i64 %12
  %77 = load i32, i32* %76, align 4
  %78 = and i32 %77, -16711936
  %79 = and i32 %75, -16711936
  %80 = add i32 %79, %78
  %81 = and i32 %77, 16711935
  %82 = and i32 %75, 16711935
  %83 = add nuw nsw i32 %82, %81
  %84 = and i32 %80, -16711936
  %85 = and i32 %83, 16711935
  %86 = or i32 %84, %85
  %87 = getelementptr inbounds i32, i32* %3, i64 %12
  store i32 %86, i32* %87, align 4
  %88 = add nuw nsw i64 %12, 1
  %89 = icmp eq i64 %88, %7
  br i1 %89, label %90, label %10

90:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PredictorAdd12_C(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %79

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = getelementptr inbounds i32, i32* %3, i64 -1
  %9 = load i32, i32* %8, align 4
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi i32 [ %9, %6 ], [ %75, %10 ]
  %12 = phi i64 [ 0, %6 ], [ %77, %10 ]
  %13 = getelementptr inbounds i32, i32* %1, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds i32, i32* %13, i64 -1
  %16 = load i32, i32* %15, align 4
  %17 = lshr i32 %11, 24
  %18 = lshr i32 %14, 24
  %19 = lshr i32 %16, 24
  %20 = add nuw nsw i32 %18, %17
  %21 = sub nsw i32 %20, %19
  %22 = icmp ult i32 %21, 256
  %23 = lshr i32 %21, 24
  %24 = xor i32 %23, 255
  %25 = select i1 %22, i32 %21, i32 %24
  %26 = lshr i32 %11, 16
  %27 = and i32 %26, 255
  %28 = lshr i32 %14, 16
  %29 = and i32 %28, 255
  %30 = lshr i32 %16, 16
  %31 = and i32 %30, 255
  %32 = add nuw nsw i32 %29, %27
  %33 = sub nsw i32 %32, %31
  %34 = icmp ult i32 %33, 256
  %35 = lshr i32 %33, 24
  %36 = xor i32 %35, 255
  %37 = select i1 %34, i32 %33, i32 %36
  %38 = lshr i32 %11, 8
  %39 = and i32 %38, 255
  %40 = lshr i32 %14, 8
  %41 = and i32 %40, 255
  %42 = lshr i32 %16, 8
  %43 = and i32 %42, 255
  %44 = add nuw nsw i32 %41, %39
  %45 = sub nsw i32 %44, %43
  %46 = icmp ult i32 %45, 256
  %47 = lshr i32 %45, 24
  %48 = xor i32 %47, 255
  %49 = select i1 %46, i32 %45, i32 %48
  %50 = and i32 %11, 255
  %51 = and i32 %14, 255
  %52 = and i32 %16, 255
  %53 = add nuw nsw i32 %51, %50
  %54 = sub nsw i32 %53, %52
  %55 = icmp ult i32 %54, 256
  %56 = lshr i32 %54, 24
  %57 = xor i32 %56, 255
  %58 = select i1 %55, i32 %54, i32 %57
  %59 = shl i32 %25, 24
  %60 = shl nsw i32 %37, 16
  %61 = shl nsw i32 %49, 8
  %62 = or i32 %59, %58
  %63 = or i32 %62, %60
  %64 = or i32 %63, %61
  %65 = getelementptr inbounds i32, i32* %0, i64 %12
  %66 = load i32, i32* %65, align 4
  %67 = and i32 %66, -16711936
  %68 = and i32 %64, -16711936
  %69 = add i32 %68, %67
  %70 = and i32 %66, 16711935
  %71 = and i32 %64, 16711935
  %72 = add nuw nsw i32 %71, %70
  %73 = and i32 %69, -16711936
  %74 = and i32 %72, 16711935
  %75 = or i32 %73, %74
  %76 = getelementptr inbounds i32, i32* %3, i64 %12
  store i32 %75, i32* %76, align 4
  %77 = add nuw nsw i64 %12, 1
  %78 = icmp eq i64 %77, %7
  br i1 %78, label %79, label %10

79:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @PredictorAdd13_C(i32* nocapture readonly, i32* nocapture readonly, i32, i32* nocapture) #3 {
  %5 = icmp sgt i32 %2, 0
  br i1 %5, label %6, label %82

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = getelementptr inbounds i32, i32* %3, i64 -1
  %9 = load i32, i32* %8, align 4
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi i32 [ %9, %6 ], [ %78, %10 ]
  %12 = phi i64 [ 0, %6 ], [ %80, %10 ]
  %13 = getelementptr inbounds i32, i32* %1, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds i32, i32* %13, i64 -1
  %16 = load i32, i32* %15, align 4
  %17 = xor i32 %14, %11
  %18 = lshr i32 %17, 1
  %19 = and i32 %18, 2139062143
  %20 = and i32 %14, %11
  %21 = add i32 %19, %20
  %22 = lshr i32 %21, 24
  %23 = lshr i32 %16, 24
  %24 = sub nsw i32 %22, %23
  %25 = sdiv i32 %24, 2
  %26 = add nsw i32 %25, %22
  %27 = icmp ult i32 %26, 256
  %28 = lshr i32 %26, 24
  %29 = xor i32 %28, 255
  %30 = select i1 %27, i32 %26, i32 %29
  %31 = lshr i32 %21, 16
  %32 = and i32 %31, 255
  %33 = lshr i32 %16, 16
  %34 = and i32 %33, 255
  %35 = sub nsw i32 %32, %34
  %36 = sdiv i32 %35, 2
  %37 = add nsw i32 %36, %32
  %38 = icmp ult i32 %37, 256
  %39 = lshr i32 %37, 24
  %40 = xor i32 %39, 255
  %41 = select i1 %38, i32 %37, i32 %40
  %42 = lshr i32 %21, 8
  %43 = and i32 %42, 255
  %44 = lshr i32 %16, 8
  %45 = and i32 %44, 255
  %46 = sub nsw i32 %43, %45
  %47 = sdiv i32 %46, 2
  %48 = add nsw i32 %47, %43
  %49 = icmp ult i32 %48, 256
  %50 = lshr i32 %48, 24
  %51 = xor i32 %50, 255
  %52 = select i1 %49, i32 %48, i32 %51
  %53 = and i32 %21, 255
  %54 = and i32 %16, 255
  %55 = sub nsw i32 %53, %54
  %56 = sdiv i32 %55, 2
  %57 = add nsw i32 %56, %53
  %58 = icmp ult i32 %57, 256
  %59 = lshr i32 %57, 24
  %60 = xor i32 %59, 255
  %61 = select i1 %58, i32 %57, i32 %60
  %62 = shl i32 %30, 24
  %63 = shl nsw i32 %41, 16
  %64 = shl nsw i32 %52, 8
  %65 = or i32 %62, %61
  %66 = or i32 %65, %63
  %67 = or i32 %66, %64
  %68 = getelementptr inbounds i32, i32* %0, i64 %12
  %69 = load i32, i32* %68, align 4
  %70 = and i32 %69, -16711936
  %71 = and i32 %67, -16711936
  %72 = add i32 %71, %70
  %73 = and i32 %69, 16711935
  %74 = and i32 %67, 16711935
  %75 = add nuw nsw i32 %74, %73
  %76 = and i32 %72, -16711936
  %77 = and i32 %75, 16711935
  %78 = or i32 %76, %77
  %79 = getelementptr inbounds i32, i32* %3, i64 %12
  store i32 %78, i32* %79, align 4
  %80 = add nuw nsw i64 %12, 1
  %81 = icmp eq i64 %80, %7
  br i1 %81, label %82, label %10

82:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @MapARGB_C(i32* nocapture readonly, i32* nocapture readonly, i32* nocapture, i32, i32, i32) #3 {
  %7 = icmp slt i32 %3, %4
  br i1 %7, label %8, label %82

8:                                                ; preds = %6
  %9 = icmp sgt i32 %5, 0
  %10 = add i32 %5, -1
  %11 = and i32 %5, 3
  %12 = icmp ult i32 %10, 3
  %13 = sub i32 %5, %11
  %14 = icmp eq i32 %11, 0
  br label %15

15:                                               ; preds = %77, %8
  %16 = phi i32 [ %3, %8 ], [ %80, %77 ]
  %17 = phi i32* [ %0, %8 ], [ %79, %77 ]
  %18 = phi i32* [ %2, %8 ], [ %78, %77 ]
  br i1 %9, label %19, label %77

19:                                               ; preds = %15
  br i1 %12, label %58, label %20

20:                                               ; preds = %19, %20
  %21 = phi i32* [ %48, %20 ], [ %17, %19 ]
  %22 = phi i32* [ %55, %20 ], [ %18, %19 ]
  %23 = phi i32 [ %56, %20 ], [ %13, %19 ]
  %24 = getelementptr inbounds i32, i32* %21, i64 1
  %25 = load i32, i32* %21, align 4
  %26 = lshr i32 %25, 8
  %27 = and i32 %26, 255
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds i32, i32* %1, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds i32, i32* %22, i64 1
  store i32 %30, i32* %22, align 4
  %32 = getelementptr inbounds i32, i32* %21, i64 2
  %33 = load i32, i32* %24, align 4
  %34 = lshr i32 %33, 8
  %35 = and i32 %34, 255
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %1, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds i32, i32* %22, i64 2
  store i32 %38, i32* %31, align 4
  %40 = getelementptr inbounds i32, i32* %21, i64 3
  %41 = load i32, i32* %32, align 4
  %42 = lshr i32 %41, 8
  %43 = and i32 %42, 255
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i32, i32* %1, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds i32, i32* %22, i64 3
  store i32 %46, i32* %39, align 4
  %48 = getelementptr inbounds i32, i32* %21, i64 4
  %49 = load i32, i32* %40, align 4
  %50 = lshr i32 %49, 8
  %51 = and i32 %50, 255
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds i32, i32* %1, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds i32, i32* %22, i64 4
  store i32 %54, i32* %47, align 4
  %56 = add i32 %23, -4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %20

58:                                               ; preds = %20, %19
  %59 = phi i32* [ undef, %19 ], [ %48, %20 ]
  %60 = phi i32* [ undef, %19 ], [ %55, %20 ]
  %61 = phi i32* [ %17, %19 ], [ %48, %20 ]
  %62 = phi i32* [ %18, %19 ], [ %55, %20 ]
  br i1 %14, label %77, label %63

63:                                               ; preds = %58, %63
  %64 = phi i32* [ %67, %63 ], [ %61, %58 ]
  %65 = phi i32* [ %74, %63 ], [ %62, %58 ]
  %66 = phi i32 [ %75, %63 ], [ %11, %58 ]
  %67 = getelementptr inbounds i32, i32* %64, i64 1
  %68 = load i32, i32* %64, align 4
  %69 = lshr i32 %68, 8
  %70 = and i32 %69, 255
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds i32, i32* %1, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds i32, i32* %65, i64 1
  store i32 %73, i32* %65, align 4
  %75 = add i32 %66, -1
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %63, !llvm.loop !101

77:                                               ; preds = %58, %63, %15
  %78 = phi i32* [ %18, %15 ], [ %60, %58 ], [ %74, %63 ]
  %79 = phi i32* [ %17, %15 ], [ %59, %58 ], [ %67, %63 ]
  %80 = add nsw i32 %16, 1
  %81 = icmp eq i32 %80, %4
  br i1 %81, label %82, label %15

82:                                               ; preds = %77, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @MapAlpha_C(i8* nocapture readonly, i32* nocapture readonly, i8* nocapture, i32, i32, i32) #3 {
  %7 = icmp slt i32 %3, %4
  br i1 %7, label %8, label %82

8:                                                ; preds = %6
  %9 = icmp sgt i32 %5, 0
  %10 = add i32 %5, -1
  %11 = and i32 %5, 3
  %12 = icmp ult i32 %10, 3
  %13 = sub i32 %5, %11
  %14 = icmp eq i32 %11, 0
  br label %15

15:                                               ; preds = %77, %8
  %16 = phi i32 [ %3, %8 ], [ %80, %77 ]
  %17 = phi i8* [ %0, %8 ], [ %79, %77 ]
  %18 = phi i8* [ %2, %8 ], [ %78, %77 ]
  br i1 %9, label %19, label %77

19:                                               ; preds = %15
  br i1 %12, label %58, label %20

20:                                               ; preds = %19, %20
  %21 = phi i8* [ %48, %20 ], [ %17, %19 ]
  %22 = phi i8* [ %55, %20 ], [ %18, %19 ]
  %23 = phi i32 [ %56, %20 ], [ %13, %19 ]
  %24 = getelementptr inbounds i8, i8* %21, i64 1
  %25 = load i8, i8* %21, align 1
  %26 = zext i8 %25 to i64
  %27 = getelementptr inbounds i32, i32* %1, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = lshr i32 %28, 8
  %30 = trunc i32 %29 to i8
  %31 = getelementptr inbounds i8, i8* %22, i64 1
  store i8 %30, i8* %22, align 1
  %32 = getelementptr inbounds i8, i8* %21, i64 2
  %33 = load i8, i8* %24, align 1
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds i32, i32* %1, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = lshr i32 %36, 8
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds i8, i8* %22, i64 2
  store i8 %38, i8* %31, align 1
  %40 = getelementptr inbounds i8, i8* %21, i64 3
  %41 = load i8, i8* %32, align 1
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds i32, i32* %1, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = lshr i32 %44, 8
  %46 = trunc i32 %45 to i8
  %47 = getelementptr inbounds i8, i8* %22, i64 3
  store i8 %46, i8* %39, align 1
  %48 = getelementptr inbounds i8, i8* %21, i64 4
  %49 = load i8, i8* %40, align 1
  %50 = zext i8 %49 to i64
  %51 = getelementptr inbounds i32, i32* %1, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = lshr i32 %52, 8
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds i8, i8* %22, i64 4
  store i8 %54, i8* %47, align 1
  %56 = add i32 %23, -4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %20

58:                                               ; preds = %20, %19
  %59 = phi i8* [ undef, %19 ], [ %48, %20 ]
  %60 = phi i8* [ undef, %19 ], [ %55, %20 ]
  %61 = phi i8* [ %17, %19 ], [ %48, %20 ]
  %62 = phi i8* [ %18, %19 ], [ %55, %20 ]
  br i1 %14, label %77, label %63

63:                                               ; preds = %58, %63
  %64 = phi i8* [ %67, %63 ], [ %61, %58 ]
  %65 = phi i8* [ %74, %63 ], [ %62, %58 ]
  %66 = phi i32 [ %75, %63 ], [ %11, %58 ]
  %67 = getelementptr inbounds i8, i8* %64, i64 1
  %68 = load i8, i8* %64, align 1
  %69 = zext i8 %68 to i64
  %70 = getelementptr inbounds i32, i32* %1, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = lshr i32 %71, 8
  %73 = trunc i32 %72 to i8
  %74 = getelementptr inbounds i8, i8* %65, i64 1
  store i8 %73, i8* %65, align 1
  %75 = add i32 %66, -1
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %63, !llvm.loop !103

77:                                               ; preds = %58, %63, %15
  %78 = phi i8* [ %18, %15 ], [ %60, %58 ], [ %74, %63 ]
  %79 = phi i8* [ %17, %15 ], [ %59, %58 ], [ %67, %63 ]
  %80 = add nsw i32 %16, 1
  %81 = icmp eq i32 %80, %4
  br i1 %81, label %82, label %15

82:                                               ; preds = %77, %6
  ret void
}

declare void @VP8LDspInitSSE2() local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare <4 x i32> @llvm.bswap.v4i32(<4 x i32>) #5

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = !{!16}
!16 = distinct !{!16, !12}
!17 = !{!14, !11}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !8}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = distinct !{!23, !8}
!24 = distinct !{!24, !8}
!25 = !{!26}
!26 = distinct !{!26, !27}
!27 = distinct !{!27, !"LVerDomain"}
!28 = distinct !{!28, !8}
!29 = distinct !{!29, !8}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !8}
!36 = distinct !{!36, !8}
!37 = !{!38}
!38 = distinct !{!38, !39}
!39 = distinct !{!39, !"LVerDomain"}
!40 = !{!41}
!41 = distinct !{!41, !39}
!42 = distinct !{!42, !8}
!43 = distinct !{!43, !8}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !8}
!50 = distinct !{!50, !8}
!51 = !{!52}
!52 = distinct !{!52, !53}
!53 = distinct !{!53, !"LVerDomain"}
!54 = !{!55}
!55 = distinct !{!55, !53}
!56 = !{!57}
!57 = distinct !{!57, !53}
!58 = !{!52, !55}
!59 = distinct !{!59, !8}
!60 = distinct !{!60, !8}
!61 = !{!62}
!62 = distinct !{!62, !63}
!63 = distinct !{!63, !"LVerDomain"}
!64 = !{!65}
!65 = distinct !{!65, !63}
!66 = !{!67}
!67 = distinct !{!67, !63}
!68 = !{!62, !65}
!69 = distinct !{!69, !8}
!70 = distinct !{!70, !8}
!71 = !{!72}
!72 = distinct !{!72, !73}
!73 = distinct !{!73, !"LVerDomain"}
!74 = !{!75}
!75 = distinct !{!75, !73}
!76 = !{!77}
!77 = distinct !{!77, !73}
!78 = !{!72, !75}
!79 = distinct !{!79, !8}
!80 = distinct !{!80, !8}
!81 = !{!82}
!82 = distinct !{!82, !83}
!83 = distinct !{!83, !"LVerDomain"}
!84 = !{!85}
!85 = distinct !{!85, !83}
!86 = !{!87}
!87 = distinct !{!87, !83}
!88 = !{!82, !85}
!89 = distinct !{!89, !8}
!90 = distinct !{!90, !8}
!91 = !{!92}
!92 = distinct !{!92, !93}
!93 = distinct !{!93, !"LVerDomain"}
!94 = !{!95}
!95 = distinct !{!95, !93}
!96 = !{!97}
!97 = distinct !{!97, !93}
!98 = !{!92, !95}
!99 = distinct !{!99, !8}
!100 = distinct !{!100, !8}
!101 = distinct !{!101, !102}
!102 = !{!"llvm.loop.unroll.disable"}
!103 = distinct !{!103, !102}
