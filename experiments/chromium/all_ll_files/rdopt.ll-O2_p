; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/rdopt.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/rdopt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.vp8_token_struct = type { i32, i32 }
%struct.TOKENVALUE = type { i16, i16 }
%struct.VP8_COMP = type { [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], %struct.macroblock, %struct.VP8Common, [9 x %struct.BOOL_CODER], %struct.VP8_CONFIG, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.TOKENEXTRA*, i32, i32, i32, i32, i32, i32, [20 x i32], [20 x i32], i32, i32, %struct.CODING_CONTEXT, i64, i64, i32, i32, [2 x i32], double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, [5 x i32], i32, i32, i32, i32, double, i64, i64, i64, i32, i32, i32, i32, i64, i32, double, double, i64, i64, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x [2 x i32]]]]], i32, i32, i32, i32, %struct.vpx_codec_pkt_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [4 x i32], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i8*, i8*, [2 x [4 x i8]], [4 x i32], i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_atomic_int*, i32, %struct.vpx_atomic_int, i32, i32, i64*, i64, %struct.MB_ROW_COMP*, %struct.ENCODETHREAD_DATA*, %struct.LPFTHREAD_DATA, %union.sem_t*, %union.sem_t*, %union.sem_t, %union.sem_t, %struct.TOKENLIST*, [9 x i32], [9 x i8*], [9 x i8*], i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, [5 x %struct.variance_vtable], i64, i64, i64, i64, [128 x i32], %struct.frame_contexts, %struct.frame_contexts, %struct.frame_contexts, %struct.twopass_rc, i32, i32, i32*, i8*, i32, i32, %union.int_mv*, i32*, i32*, i32, i32, i32, i32, %struct.vp8_denoiser, i32, [5 x %struct.LAYER_CONTEXT], [5 x i64], [5 x i64], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], i32, i8, [4 x i32], i32, %struct.rd_costs_struct, i32, i32, [12 x i8] }
%struct.macroblock = type { [400 x i16], [400 x i16], [256 x i8], i8*, [25 x %struct.block], %struct.yv12_buffer_config, %struct.macroblockd, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, [4 x i32], %struct.search_site*, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, [2 x i32*], [2 x i32*], [10 x i32]*, [10 x i32]*, [10 x [10 x i32]]*, i32*, [8 x [3 x [12 x i32]]]*, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.mv_context*, i32, i32, i32, i32, i32, i32, %union.int_mv, i32, i32, i8, i32, [4 x [8 x [3 x [12 x i32]]]], [2 x [2047 x i32]], [5 x i32], [4 x i32], i64, i64, [4 x i32], [20 x i32], [20 x i32], i32, [20 x i32], i32, i32, i32, i32, i32, [1024 x i32], void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (%struct.block*, %struct.blockd*)*, i32, i32, [8 x i8] }
%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.PARTITION_INFO = type { i32, [16 x %struct.anon] }
%struct.anon = type { i32, %union.int_mv }
%struct.search_site = type { %struct.MV, i32 }
%struct.MV = type { i16, i16 }
%struct.mv_context = type { [19 x i8] }
%union.int_mv = type { i32 }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_CODER = type { i32, i32, i32, i32, i8*, i8*, %struct.vpx_internal_error_info* }
%struct.VP8_CONFIG = type { i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_codec_pkt_list*, i32, i32, [16 x i32], [16 x i32], i32, [16 x i32], i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_rational = type { i32, i32 }
%struct.lookahead_ctx = type opaque
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TOKENEXTRA = type { i8*, i16, i8, i8 }
%struct.CODING_CONTEXT = type { i32, i32, i32, i32, i32, [4 x i32], [2 x %struct.mv_context], [2 x [2048 x i32]], [4 x i8], [3 x i8], [4 x i8], [3 x i8], [5 x i32], [4 x i32], [4 x i32], i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon }
%union.anon = type { %struct.anon.0, [40 x i8] }
%struct.anon.0 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, i32, i32 }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_COMP = type { %struct.macroblock, [4 x i32], i32, [12 x i8] }
%struct.ENCODETHREAD_DATA = type { i32, i8*, i8* }
%struct.LPFTHREAD_DATA = type { i32, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA* }
%struct.variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32)* }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.twopass_rc = type { i32, double, i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS, i32, i64, i64, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, double }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vp8_denoiser = type { [4 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, %struct.yv12_buffer_config, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.denoise_params }
%struct.denoise_params = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { double, i32, i64, i64, i64, i64, i64, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, i32, i32, i64, i32, i32, i32, i32, [4 x i32], [2 x i32] }
%struct.rd_costs_struct = type { [2 x [2048 x i32]], [2 x [512 x i32]], [2 x [10 x i32]], [2 x [10 x i32]], [10 x [10 x [10 x i32]]], [14 x i32], [4 x [8 x [3 x [12 x i32]]]] }
%struct.BEST_SEG_INFO = type { %union.int_mv*, %union.int_mv, i32, i32, i32, i32, i32, [16 x i32], [16 x %union.int_mv], [16 x i8], i32, i32*, [4 x %union.int_mv], [2 x i32] }
%struct.best_mode_struct = type { i32, i32, i32, %struct.MB_MODE_INFO, [16 x %union.b_mode_info], %struct.PARTITION_INFO }
%struct.rate_distortion_struct = type { i32, i32, i32, i32, i32 }

@vp8_mode_order = hidden local_unnamed_addr constant [20 x i32] [i32 7, i32 0, i32 5, i32 6, i32 7, i32 5, i32 7, i32 5, i32 6, i32 6, i32 1, i32 2, i32 3, i32 8, i32 8, i32 8, i32 9, i32 9, i32 9, i32 4], align 16
@vp8_ref_frame_order = hidden local_unnamed_addr constant [20 x i32] [i32 1, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 2, i32 3, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 0], align 16
@sad_per_bit16lut = internal unnamed_addr constant [128 x i32] [i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 13, i32 13, i32 13, i32 13, i32 14, i32 14], align 16
@sad_per_bit4lut = internal unnamed_addr constant [128 x i32] [i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 8, i32 8, i32 8, i32 8, i32 8, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 14, i32 14, i32 14, i32 14, i32 14, i32 15, i32 15, i32 15, i32 15, i32 16, i32 16, i32 16, i32 16, i32 17, i32 17, i32 17, i32 18, i32 18, i32 18, i32 19, i32 19, i32 19, i32 20, i32 20, i32 20], align 16
@auto_speed_thresh = internal unnamed_addr constant [17 x i32] [i32 1000, i32 200, i32 150, i32 130, i32 150, i32 125, i32 120, i32 115, i32 115, i32 115, i32 115, i32 115, i32 115, i32 115, i32 115, i32 115, i32 105], align 16
@vpx_sub_pixel_variance8x8 = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, align 8
@vp8_mv_ref_tree = external local_unnamed_addr constant [0 x i8], align 1
@vp8_mv_ref_encoding_array = external local_unnamed_addr constant [5 x %struct.vp8_token_struct], align 16
@__const.vp8_rd_pick_inter_mode.near_sadidx = private unnamed_addr constant [8 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7], align 16
@rd_iifactor = internal unnamed_addr constant <{ i32, i32, i32, i32, i32, [27 x i32] }> <{ i32 4, i32 4, i32 3, i32 2, i32 1, [27 x i32] zeroinitializer }>, align 16
@vp8_coef_tree = external constant [0 x i8], align 1
@vp8_prob_cost = external local_unnamed_addr constant [256 x i32], align 16
@vp8_block2above = external local_unnamed_addr constant [25 x i8], align 16
@vp8_block2left = external local_unnamed_addr constant [25 x i8], align 16
@vp8_default_zig_zag1d = external local_unnamed_addr constant [16 x i32], align 16
@vp8_dct_value_tokens_ptr = external local_unnamed_addr constant %struct.TOKENVALUE*, align 8
@vp8_coef_bands = external local_unnamed_addr constant [16 x i8], align 16
@vp8_dct_value_cost_ptr = external local_unnamed_addr constant i16*, align 8
@vp8_prev_token_class = external local_unnamed_addr constant [12 x i8], align 16
@vp8_mbsplit_count = external local_unnamed_addr constant [4 x i32], align 16
@vp8_mbsplit_offset = external local_unnamed_addr constant [4 x [16 x i8]], align 16
@vp8_mbsplits = external constant [4 x [16 x i32]], align 16
@vp8_mbsplit_tree = external local_unnamed_addr constant [0 x i8], align 1
@vp8_mbsplit_probs = external local_unnamed_addr constant [3 x i8], align 1
@vp8_mbsplit_encodings = external local_unnamed_addr constant [4 x %struct.vp8_token_struct], align 16
@segmentation_to_sseshift = internal unnamed_addr constant [4 x i32] [i32 3, i32 3, i32 2, i32 0], align 16
@vpx_variance16x16 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @vp8cx_initialize_me_consts(%struct.VP8_COMP* nocapture, i32) local_unnamed_addr #0 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds [128 x i32], [128 x i32]* @sad_per_bit16lut, i64 0, i64 %3
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 15
  store i32 %5, i32* %6, align 4
  %7 = getelementptr inbounds [128 x i32], [128 x i32]* @sad_per_bit4lut, i64 0, i64 %3
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 16
  store i32 %8, i32* %9, align 32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_initialize_rd_consts(%struct.VP8_COMP*, %struct.macroblock* nocapture, i32) local_unnamed_addr #1 {
  %4 = sitofp i32 %2 to double
  %5 = icmp slt i32 %2, 160
  %6 = select i1 %5, i32 %2, i32 160
  %7 = sitofp i32 %6 to double
  tail call void @vpx_clear_system_state() #8
  %8 = fmul double %7, %7
  %9 = fmul double %8, 2.800000e+00
  %10 = fptosi double %9 to i32
  %11 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 47
  store i32 %10, i32* %11, align 32
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 65
  %13 = load i32, i32* %12, align 4
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %25

15:                                               ; preds = %3
  %16 = sitofp i32 %13 to double
  %17 = fmul double %16, 1.562500e-03
  %18 = fadd double %17, 1.000000e+00
  %19 = fmul double %18, %7
  %20 = fptosi double %19 to i32
  %21 = sitofp i32 %20 to double
  %22 = fmul double %21, %21
  %23 = fmul double %22, 2.800000e+00
  %24 = fptosi double %23 to i32
  store i32 %24, i32* %11, align 32
  br label %25

25:                                               ; preds = %15, %3
  %26 = phi i32 [ %24, %15 ], [ %10, %3 ]
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 2
  br i1 %29, label %30, label %45

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 23
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %45, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 186, i32 2
  %36 = load i32, i32* %35, align 16
  %37 = icmp ugt i32 %36, 31
  br i1 %37, label %45, label %38

38:                                               ; preds = %34
  %39 = zext i32 %36 to i64
  %40 = getelementptr inbounds [32 x i32], [32 x i32]* bitcast (<{ i32, i32, i32, i32, i32, [27 x i32] }>* @rd_iifactor to [32 x i32]*), i64 0, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = mul nsw i32 %41, %26
  %43 = ashr i32 %42, 4
  %44 = add nsw i32 %43, %26
  store i32 %44, i32* %11, align 32
  br label %45

45:                                               ; preds = %34, %30, %38, %25
  %46 = phi i32 [ %26, %34 ], [ %26, %30 ], [ %44, %38 ], [ %26, %25 ]
  %47 = sdiv i32 %46, 110
  %48 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 14
  %49 = add i32 %46, 109
  %50 = icmp ult i32 %49, 219
  %51 = zext i1 %50 to i32
  %52 = add nsw i32 %47, %51
  store i32 %52, i32* %48, align 8
  tail call void @vp8_set_speed_features(%struct.VP8_COMP* %0) #8
  %53 = getelementptr %struct.macroblock, %struct.macroblock* %1, i64 0, i32 60, i64 0
  %54 = bitcast i32* %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %54, i8 0, i64 80, i1 false)
  %55 = tail call double @pow(double %4, double 1.250000e+00) #8
  %56 = fptosi double %55 to i32
  %57 = icmp sgt i32 %56, 8
  %58 = select i1 %57, i32 %56, i32 8
  %59 = load i32, i32* %11, align 32
  %60 = icmp sgt i32 %59, 1000
  %61 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 48
  br i1 %60, label %62, label %78

62:                                               ; preds = %45
  store i32 1, i32* %61, align 4
  %63 = udiv i32 %59, 100
  store i32 %63, i32* %11, align 32
  br label %64

64:                                               ; preds = %72, %62
  %65 = phi i64 [ 0, %62 ], [ %76, %72 ]
  %66 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 2147483647
  br i1 %68, label %72, label %69

69:                                               ; preds = %64
  %70 = mul nsw i32 %67, %58
  %71 = sdiv i32 %70, 100
  br label %72

72:                                               ; preds = %64, %69
  %73 = phi i32 [ %71, %69 ], [ 2147483647, %64 ]
  %74 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 %65
  store i32 %73, i32* %74, align 4
  %75 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 %65
  store i32 %73, i32* %75, align 4
  %76 = add nuw nsw i64 %65, 1
  %77 = icmp eq i64 %76, 20
  br i1 %77, label %161, label %64

78:                                               ; preds = %45
  store i32 100, i32* %61, align 4
  %79 = udiv i32 2147483647, %58
  %80 = getelementptr %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 0
  %81 = getelementptr %struct.macroblock, %struct.macroblock* %1, i64 0, i32 59
  %82 = getelementptr %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 0
  %83 = getelementptr %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 10
  %84 = icmp ult i32* %80, %83
  %85 = icmp ult i32* %82, %81
  %86 = and i1 %84, %85
  br i1 %86, label %142, label %87

87:                                               ; preds = %78
  %88 = insertelement <4 x i32> undef, i32 %79, i32 0
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> zeroinitializer
  %90 = insertelement <4 x i32> undef, i32 %58, i32 0
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> zeroinitializer
  %92 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 0
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4, !alias.scope !2
  %95 = icmp slt <4 x i32> %94, %89
  %96 = mul nsw <4 x i32> %94, %91
  %97 = select <4 x i1> %95, <4 x i32> %96, <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %98 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 0
  %99 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %99, align 4, !alias.scope !5, !noalias !2
  %100 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 0
  %101 = bitcast i32* %100 to <4 x i32>*
  store <4 x i32> %97, <4 x i32>* %101, align 4, !alias.scope !2
  %102 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 4
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !2
  %105 = icmp slt <4 x i32> %104, %89
  %106 = mul nsw <4 x i32> %104, %91
  %107 = select <4 x i1> %105, <4 x i32> %106, <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %108 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 4
  %109 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %109, align 4, !alias.scope !5, !noalias !2
  %110 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 4
  %111 = bitcast i32* %110 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %111, align 4, !alias.scope !2
  %112 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 8
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4, !alias.scope !2
  %115 = icmp slt <4 x i32> %114, %89
  %116 = mul nsw <4 x i32> %114, %91
  %117 = select <4 x i1> %115, <4 x i32> %116, <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %118 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 8
  %119 = bitcast i32* %118 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %119, align 4, !alias.scope !5, !noalias !2
  %120 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 8
  %121 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %121, align 4, !alias.scope !2
  %122 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 12
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 4, !alias.scope !2
  %125 = icmp slt <4 x i32> %124, %89
  %126 = mul nsw <4 x i32> %124, %91
  %127 = select <4 x i1> %125, <4 x i32> %126, <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %128 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 12
  %129 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %127, <4 x i32>* %129, align 4, !alias.scope !5, !noalias !2
  %130 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 12
  %131 = bitcast i32* %130 to <4 x i32>*
  store <4 x i32> %127, <4 x i32>* %131, align 4, !alias.scope !2
  %132 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 16
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4, !alias.scope !2
  %135 = icmp slt <4 x i32> %134, %89
  %136 = mul nsw <4 x i32> %134, %91
  %137 = select <4 x i1> %135, <4 x i32> %136, <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %138 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 16
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %137, <4 x i32>* %139, align 4, !alias.scope !5, !noalias !2
  %140 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 16
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> %137, <4 x i32>* %141, align 4, !alias.scope !2
  br label %161

142:                                              ; preds = %78, %142
  %143 = phi i64 [ %159, %142 ], [ 0, %78 ]
  %144 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 %143
  %145 = load i32, i32* %144, align 4
  %146 = icmp slt i32 %145, %79
  %147 = mul nsw i32 %145, %58
  %148 = select i1 %146, i32 %147, i32 2147483647
  %149 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 %143
  store i32 %148, i32* %149, align 4
  %150 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 %143
  store i32 %148, i32* %150, align 4
  %151 = or i64 %143, 1
  %152 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 9, i64 %151
  %153 = load i32, i32* %152, align 4
  %154 = icmp slt i32 %153, %79
  %155 = mul nsw i32 %153, %58
  %156 = select i1 %154, i32 %155, i32 2147483647
  %157 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 %151
  store i32 %156, i32* %157, align 4
  %158 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 %151
  store i32 %156, i32* %158, align 4
  %159 = add nuw nsw i64 %143, 2
  %160 = icmp eq i64 %159, 20
  br i1 %160, label %161, label %142, !llvm.loop !7

161:                                              ; preds = %142, %72, %87
  %162 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %163 = load i32, i32* %162, align 4
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %167, label %165

165:                                              ; preds = %161
  %166 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 184
  br label %174

167:                                              ; preds = %161
  %168 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 183
  %169 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %170 = load i32, i32* %169, align 16
  %171 = icmp eq i32 %170, 0
  %172 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 185
  %173 = select i1 %171, %struct.frame_contexts* %168, %struct.frame_contexts* %172
  br label %174

174:                                              ; preds = %167, %165
  %175 = phi %struct.frame_contexts* [ %166, %165 ], [ %173, %167 ]
  %176 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 29
  %177 = load [8 x [3 x [12 x i32]]]*, [8 x [3 x [12 x i32]]]** %176, align 8
  %178 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 0, i64 0, i64 0, i64 0
  %179 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 0, i64 0, i64 0, i64 0
  tail call void @vp8_cost_tokens(i32* %179, i8* %178, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  %180 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 0, i64 0, i64 1, i64 0
  %181 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 0, i64 0, i64 1, i64 0
  tail call void @vp8_cost_tokens(i32* %180, i8* %181, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  %182 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 0, i64 0, i64 2, i64 0
  %183 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 0, i64 0, i64 2, i64 0
  tail call void @vp8_cost_tokens(i32* %182, i8* %183, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  %184 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 0, i64 1, i64 0, i64 0
  %185 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 0, i64 1, i64 0, i64 0
  tail call void @vp8_cost_tokens(i32* %185, i8* %184, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  %186 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 0, i64 1, i64 1, i64 0
  %187 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 0, i64 1, i64 1, i64 0
  tail call void @vp8_cost_tokens(i32* %186, i8* %187, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  %188 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 0, i64 1, i64 2, i64 0
  %189 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 0, i64 1, i64 2, i64 0
  tail call void @vp8_cost_tokens(i32* %188, i8* %189, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  br label %190

190:                                              ; preds = %190, %174
  %191 = phi i64 [ 2, %174 ], [ %198, %190 ]
  %192 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 0, i64 %191, i64 0, i64 0
  %193 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 0, i64 %191, i64 0, i64 0
  tail call void @vp8_cost_tokens2(i32* %193, i8* %192, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0), i32 2) #8
  %194 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 0, i64 %191, i64 1, i64 0
  %195 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 0, i64 %191, i64 1, i64 0
  tail call void @vp8_cost_tokens(i32* %194, i8* %195, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  %196 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 0, i64 %191, i64 2, i64 0
  %197 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 0, i64 %191, i64 2, i64 0
  tail call void @vp8_cost_tokens(i32* %196, i8* %197, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  %198 = add nuw nsw i64 %191, 1
  %199 = icmp eq i64 %198, 8
  br i1 %199, label %200, label %190, !llvm.loop !9

200:                                              ; preds = %190, %207
  %201 = phi i64 [ %212, %207 ], [ 0, %190 ]
  %202 = icmp eq i64 %201, 0
  %203 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 1, i64 %201, i64 0, i64 0
  %204 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 1, i64 %201, i64 0, i64 0
  br i1 %202, label %205, label %206

205:                                              ; preds = %200
  tail call void @vp8_cost_tokens(i32* %203, i8* %204, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  br label %207

206:                                              ; preds = %200
  tail call void @vp8_cost_tokens2(i32* %203, i8* %204, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0), i32 2) #8
  br label %207

207:                                              ; preds = %206, %205
  %208 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 1, i64 %201, i64 1, i64 0
  %209 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 1, i64 %201, i64 1, i64 0
  tail call void @vp8_cost_tokens(i32* %208, i8* %209, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  %210 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 1, i64 %201, i64 2, i64 0
  %211 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 1, i64 %201, i64 2, i64 0
  tail call void @vp8_cost_tokens(i32* %210, i8* %211, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  %212 = add nuw nsw i64 %201, 1
  %213 = icmp eq i64 %212, 8
  br i1 %213, label %214, label %200

214:                                              ; preds = %207, %221
  %215 = phi i64 [ %226, %221 ], [ 0, %207 ]
  %216 = icmp eq i64 %215, 0
  %217 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 2, i64 %215, i64 0, i64 0
  %218 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 2, i64 %215, i64 0, i64 0
  br i1 %216, label %219, label %220

219:                                              ; preds = %214
  tail call void @vp8_cost_tokens(i32* %217, i8* %218, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  br label %221

220:                                              ; preds = %214
  tail call void @vp8_cost_tokens2(i32* %217, i8* %218, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0), i32 2) #8
  br label %221

221:                                              ; preds = %220, %219
  %222 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 2, i64 %215, i64 1, i64 0
  %223 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 2, i64 %215, i64 1, i64 0
  tail call void @vp8_cost_tokens(i32* %222, i8* %223, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  %224 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 2, i64 %215, i64 2, i64 0
  %225 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 2, i64 %215, i64 2, i64 0
  tail call void @vp8_cost_tokens(i32* %224, i8* %225, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  %226 = add nuw nsw i64 %215, 1
  %227 = icmp eq i64 %226, 8
  br i1 %227, label %228, label %214

228:                                              ; preds = %221, %235
  %229 = phi i64 [ %240, %235 ], [ 0, %221 ]
  %230 = icmp eq i64 %229, 0
  %231 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 3, i64 %229, i64 0, i64 0
  %232 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 3, i64 %229, i64 0, i64 0
  br i1 %230, label %233, label %234

233:                                              ; preds = %228
  tail call void @vp8_cost_tokens(i32* %231, i8* %232, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  br label %235

234:                                              ; preds = %228
  tail call void @vp8_cost_tokens2(i32* %231, i8* %232, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0), i32 2) #8
  br label %235

235:                                              ; preds = %234, %233
  %236 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 3, i64 %229, i64 1, i64 0
  %237 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 3, i64 %229, i64 1, i64 0
  tail call void @vp8_cost_tokens(i32* %236, i8* %237, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  %238 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %177, i64 3, i64 %229, i64 2, i64 0
  %239 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %175, i64 0, i32 4, i64 3, i64 %229, i64 2, i64 0
  tail call void @vp8_cost_tokens(i32* %238, i8* %239, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @vp8_coef_tree, i64 0, i64 0)) #8
  %240 = add nuw nsw i64 %229, 1
  %241 = icmp eq i64 %240, 8
  br i1 %241, label %242, label %228

242:                                              ; preds = %235
  tail call void @vp8_init_mode_costs(%struct.VP8_COMP* %0) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @vpx_clear_system_state() local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @vp8_set_speed_features(%struct.VP8_COMP*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #4

declare void @vp8_init_mode_costs(%struct.VP8_COMP*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_auto_select_speed(%struct.VP8_COMP* nocapture) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 84
  %3 = load double, double* %2, align 16
  %4 = fdiv double 1.000000e+06, %3
  %5 = fptosi double %4 to i32
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 7
  %7 = load i32, i32* %6, align 8
  %8 = sub nsw i32 16, %7
  %9 = mul nsw i32 %8, %5
  %10 = sdiv i32 %9, 16
  %11 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 112
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, %10
  br i1 %13, label %14, label %46

14:                                               ; preds = %1
  %15 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 111
  %16 = load i32, i32* %15, align 8
  %17 = sub nsw i32 %16, %12
  %18 = icmp slt i32 %17, %10
  br i1 %18, label %19, label %46

19:                                               ; preds = %14
  %20 = icmp eq i32 %12, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 113
  store i32 4, i32* %22, align 16
  br label %53

23:                                               ; preds = %19
  %24 = mul nsw i32 %10, 100
  %25 = mul nsw i32 %16, 95
  %26 = icmp slt i32 %24, %25
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 113
  %28 = load i32, i32* %27, align 16
  br i1 %26, label %29, label %33

29:                                               ; preds = %23
  %30 = add nsw i32 %28, 2
  store i32 %30, i32* %27, align 16
  store i32 0, i32* %11, align 4
  store i32 0, i32* %15, align 8
  %31 = icmp sgt i32 %30, 16
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  store i32 16, i32* %27, align 16
  br label %33

33:                                               ; preds = %23, %29, %32
  %34 = phi i32 [ %30, %29 ], [ 16, %32 ], [ %28, %23 ]
  %35 = phi i32 [ 0, %29 ], [ 0, %32 ], [ %16, %23 ]
  %36 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 113
  %37 = sext i32 %34 to i64
  %38 = getelementptr inbounds [17 x i32], [17 x i32]* @auto_speed_thresh, i64 0, i64 %37
  %39 = load i32, i32* %38, align 4
  %40 = mul nsw i32 %39, %35
  %41 = icmp sgt i32 %24, %40
  br i1 %41, label %42, label %53

42:                                               ; preds = %33
  %43 = add nsw i32 %34, -1
  store i32 %43, i32* %36, align 16
  store i32 0, i32* %11, align 4
  store i32 0, i32* %15, align 8
  %44 = icmp slt i32 %34, 5
  br i1 %44, label %45, label %53

45:                                               ; preds = %42
  store i32 4, i32* %36, align 16
  br label %53

46:                                               ; preds = %14, %1
  %47 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 113
  %48 = load i32, i32* %47, align 16
  %49 = icmp slt i32 %48, 12
  %50 = select i1 %49, i32 %48, i32 12
  %51 = add nsw i32 %50, 4
  store i32 %51, i32* %47, align 16
  store i32 0, i32* %11, align 4
  %52 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 111
  store i32 0, i32* %52, align 8
  br label %53

53:                                               ; preds = %21, %42, %45, %33, %46
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vp8_block_error_c(i16* nocapture readonly, i16* nocapture readonly) local_unnamed_addr #6 {
  %3 = bitcast i16* %0 to <16 x i16>*
  %4 = load <16 x i16>, <16 x i16>* %3, align 2
  %5 = sext <16 x i16> %4 to <16 x i32>
  %6 = bitcast i16* %1 to <16 x i16>*
  %7 = load <16 x i16>, <16 x i16>* %6, align 2
  %8 = sext <16 x i16> %7 to <16 x i32>
  %9 = sub nsw <16 x i32> %5, %8
  %10 = mul nsw <16 x i32> %9, %9
  %11 = shufflevector <16 x i32> %10, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12 = add nuw nsw <16 x i32> %10, %11
  %13 = shufflevector <16 x i32> %12, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %14 = add nuw nsw <16 x i32> %12, %13
  %15 = shufflevector <16 x i32> %14, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %16 = add nuw nsw <16 x i32> %14, %15
  %17 = shufflevector <16 x i32> %16, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %18 = add nuw nsw <16 x i32> %16, %17
  %19 = extractelement <16 x i32> %18, i32 0
  ret i32 %19
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vp8_mbblock_error_c(%struct.macroblock* nocapture readonly, i32) local_unnamed_addr #6 {
  %3 = icmp slt i32 %1, 16
  %4 = sext i32 %1 to i64
  %5 = sub nsw i64 16, %4
  %6 = icmp ult i64 %5, 8
  %7 = and i64 %5, -8
  %8 = add nsw i64 %7, %4
  %9 = icmp eq i64 %5, %7
  br label %10

10:                                               ; preds = %71, %2
  %11 = phi i64 [ 0, %2 ], [ %74, %71 ]
  %12 = phi i32 [ 0, %2 ], [ %73, %71 ]
  br i1 %3, label %13, label %71

13:                                               ; preds = %10
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 %11, i32 1
  %15 = load i16*, i16** %14, align 8
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %11, i32 1
  %17 = load i16*, i16** %16, align 8
  br i1 %6, label %54, label %18

18:                                               ; preds = %13, %18
  %19 = phi i64 [ %45, %18 ], [ 0, %13 ]
  %20 = phi <4 x i32> [ %43, %18 ], [ zeroinitializer, %13 ]
  %21 = phi <4 x i32> [ %44, %18 ], [ zeroinitializer, %13 ]
  %22 = add i64 %19, %4
  %23 = getelementptr inbounds i16, i16* %15, i64 %22
  %24 = bitcast i16* %23 to <4 x i16>*
  %25 = load <4 x i16>, <4 x i16>* %24, align 2
  %26 = getelementptr inbounds i16, i16* %23, i64 4
  %27 = bitcast i16* %26 to <4 x i16>*
  %28 = load <4 x i16>, <4 x i16>* %27, align 2
  %29 = sext <4 x i16> %25 to <4 x i32>
  %30 = sext <4 x i16> %28 to <4 x i32>
  %31 = getelementptr inbounds i16, i16* %17, i64 %22
  %32 = bitcast i16* %31 to <4 x i16>*
  %33 = load <4 x i16>, <4 x i16>* %32, align 2
  %34 = getelementptr inbounds i16, i16* %31, i64 4
  %35 = bitcast i16* %34 to <4 x i16>*
  %36 = load <4 x i16>, <4 x i16>* %35, align 2
  %37 = sext <4 x i16> %33 to <4 x i32>
  %38 = sext <4 x i16> %36 to <4 x i32>
  %39 = sub nsw <4 x i32> %29, %37
  %40 = sub nsw <4 x i32> %30, %38
  %41 = mul nsw <4 x i32> %39, %39
  %42 = mul nsw <4 x i32> %40, %40
  %43 = add nuw nsw <4 x i32> %41, %20
  %44 = add nuw nsw <4 x i32> %42, %21
  %45 = add i64 %19, 8
  %46 = icmp eq i64 %45, %7
  br i1 %46, label %47, label %18, !llvm.loop !11

47:                                               ; preds = %18
  %48 = add nuw <4 x i32> %44, %43
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %50 = add <4 x i32> %48, %49
  %51 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %52 = add <4 x i32> %50, %51
  %53 = extractelement <4 x i32> %52, i32 0
  br i1 %9, label %71, label %54

54:                                               ; preds = %47, %13
  %55 = phi i64 [ %4, %13 ], [ %8, %47 ]
  %56 = phi i32 [ 0, %13 ], [ %53, %47 ]
  br label %57

57:                                               ; preds = %54, %57
  %58 = phi i64 [ %69, %57 ], [ %55, %54 ]
  %59 = phi i32 [ %68, %57 ], [ %56, %54 ]
  %60 = getelementptr inbounds i16, i16* %15, i64 %58
  %61 = load i16, i16* %60, align 2
  %62 = sext i16 %61 to i32
  %63 = getelementptr inbounds i16, i16* %17, i64 %58
  %64 = load i16, i16* %63, align 2
  %65 = sext i16 %64 to i32
  %66 = sub nsw i32 %62, %65
  %67 = mul nsw i32 %66, %66
  %68 = add nuw nsw i32 %67, %59
  %69 = add nsw i64 %58, 1
  %70 = icmp eq i64 %69, 16
  br i1 %70, label %71, label %57, !llvm.loop !12

71:                                               ; preds = %57, %47, %10
  %72 = phi i32 [ 0, %10 ], [ %53, %47 ], [ %68, %57 ]
  %73 = add nuw nsw i32 %72, %12
  %74 = add nuw nsw i64 %11, 1
  %75 = icmp eq i64 %74, 16
  br i1 %75, label %76, label %10

76:                                               ; preds = %71
  ret i32 %73
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vp8_mbuverror_c(%struct.macroblock* nocapture readonly) local_unnamed_addr #6 {
  %2 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 16, i32 1
  %3 = load i16*, i16** %2, align 8
  %4 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 16, i32 1
  %5 = load i16*, i16** %4, align 8
  %6 = tail call i32 @vp8_block_error_c(i16* %3, i16* %5)
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 17, i32 1
  %8 = load i16*, i16** %7, align 8
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 17, i32 1
  %10 = load i16*, i16** %9, align 8
  %11 = tail call i32 @vp8_block_error_c(i16* %8, i16* %10)
  %12 = add nsw i32 %11, %6
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 18, i32 1
  %14 = load i16*, i16** %13, align 8
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 18, i32 1
  %16 = load i16*, i16** %15, align 8
  %17 = tail call i32 @vp8_block_error_c(i16* %14, i16* %16)
  %18 = add nsw i32 %17, %12
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 19, i32 1
  %20 = load i16*, i16** %19, align 8
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 19, i32 1
  %22 = load i16*, i16** %21, align 8
  %23 = tail call i32 @vp8_block_error_c(i16* %20, i16* %22)
  %24 = add nsw i32 %23, %18
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 20, i32 1
  %26 = load i16*, i16** %25, align 8
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 20, i32 1
  %28 = load i16*, i16** %27, align 8
  %29 = tail call i32 @vp8_block_error_c(i16* %26, i16* %28)
  %30 = add nsw i32 %29, %24
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 21, i32 1
  %32 = load i16*, i16** %31, align 8
  %33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 21, i32 1
  %34 = load i16*, i16** %33, align 8
  %35 = tail call i32 @vp8_block_error_c(i16* %32, i16* %34)
  %36 = add nsw i32 %35, %30
  %37 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 22, i32 1
  %38 = load i16*, i16** %37, align 8
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 22, i32 1
  %40 = load i16*, i16** %39, align 8
  %41 = tail call i32 @vp8_block_error_c(i16* %38, i16* %40)
  %42 = add nsw i32 %41, %36
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 23, i32 1
  %44 = load i16*, i16** %43, align 8
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 23, i32 1
  %46 = load i16*, i16** %45, align 8
  %47 = tail call i32 @vp8_block_error_c(i16* %44, i16* %46)
  %48 = add nsw i32 %47, %42
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8_UVSSE(%struct.macroblock* nocapture readonly) local_unnamed_addr #1 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 16, i32 9
  %5 = load i8**, i8*** %4, align 8
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 16, i32 10
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i8, i8* %6, i64 %9
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 20, i32 9
  %12 = load i8**, i8*** %11, align 8
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 20, i32 10
  %15 = load i32, i32* %14, align 8
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %13, i64 %16
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 16, i32 11
  %19 = load i32, i32* %18, align 4
  %20 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #8
  store i32 0, i32* %2, align 4
  %21 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #8
  store i32 0, i32* %3, align 4
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 13
  %23 = load %struct.modeinfo*, %struct.modeinfo** %22, align 32
  %24 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %23, i64 0, i32 0, i32 4
  %25 = bitcast %union.int_mv* %24 to %struct.MV*
  %26 = bitcast %union.int_mv* %24 to i16*
  %27 = load i16, i16* %26, align 4
  %28 = sext i16 %27 to i32
  %29 = getelementptr inbounds %struct.MV, %struct.MV* %25, i64 0, i32 1
  %30 = load i16, i16* %29, align 2
  %31 = sext i16 %30 to i32
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 11, i32 9
  %33 = load i32, i32* %32, align 4
  %34 = icmp slt i16 %27, 0
  %35 = select i1 %34, i32 -1, i32 1
  %36 = add nsw i32 %35, %28
  %37 = icmp slt i16 %30, 0
  %38 = select i1 %37, i32 -1, i32 1
  %39 = add nsw i32 %38, %31
  %40 = sdiv i32 %36, 2
  %41 = sdiv i32 %39, 2
  %42 = ashr i32 %40, 3
  %43 = mul nsw i32 %42, %33
  %44 = ashr i32 %41, 3
  %45 = add nsw i32 %43, %44
  %46 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 11, i32 14
  %47 = load i8*, i8** %46, align 32
  %48 = sext i32 %45 to i64
  %49 = getelementptr inbounds i8, i8* %47, i64 %48
  %50 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 11, i32 15
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 %48
  %53 = or i32 %41, %40
  %54 = and i32 %53, 7
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %66, label %56

56:                                               ; preds = %1
  %57 = load i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @vpx_sub_pixel_variance8x8, align 8
  %58 = and i32 %41, 7
  %59 = and i32 %40, 7
  %60 = call i32 %57(i8* %49, i32 %33, i32 %58, i32 %59, i8* %10, i32 %19, i32* nonnull %3) #8
  %61 = load i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)** @vpx_sub_pixel_variance8x8, align 8
  %62 = call i32 %61(i8* %52, i32 %33, i32 %58, i32 %59, i8* %17, i32 %19, i32* nonnull %2) #8
  %63 = load i32, i32* %2, align 4
  %64 = load i32, i32* %3, align 4
  %65 = add i32 %64, %63
  br label %72

66:                                               ; preds = %1
  %67 = call i32 @vpx_variance8x8_sse2(i8* %49, i32 %33, i8* %10, i32 %19, i32* nonnull %3) #8
  %68 = call i32 @vpx_variance8x8_sse2(i8* %52, i32 %33, i8* %17, i32 %19, i32* nonnull %2) #8
  %69 = load i32, i32* %2, align 4
  %70 = load i32, i32* %3, align 4
  %71 = add i32 %70, %69
  br label %72

72:                                               ; preds = %66, %56
  %73 = phi i32 [ %71, %66 ], [ %65, %56 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #8
  ret i32 %73
}

declare i32 @vpx_variance8x8_sse2(i8*, i32, i8*, i32, i32*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_cost_mv_ref(i32, i32*) local_unnamed_addr #1 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to [4 x i8]*
  %5 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #8
  store i32 -1431655766, i32* %3, align 4
  %6 = call i8* @vp8_mv_ref_probs(i8* nonnull %5, i32* %1) #8
  %7 = add i32 %0, -5
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [5 x %struct.vp8_token_struct], [5 x %struct.vp8_token_struct]* @vp8_mv_ref_encoding_array, i64 0, i64 %8, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds [5 x %struct.vp8_token_struct], [5 x %struct.vp8_token_struct]* @vp8_mv_ref_encoding_array, i64 0, i64 %8, i32 1
  %12 = load i32, i32* %11, align 4
  br label %13

13:                                               ; preds = %13, %2
  %14 = phi i32 [ 0, %2 ], [ %32, %13 ]
  %15 = phi i8 [ 0, %2 ], [ %36, %13 ]
  %16 = phi i32 [ %12, %2 ], [ %17, %13 ]
  %17 = add nsw i32 %16, -1
  %18 = lshr i32 %10, %17
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  %21 = sext i8 %15 to i32
  %22 = ashr i32 %21, 1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = xor i32 %26, 255
  %28 = select i1 %20, i32 %26, i32 %27
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = add i32 %31, %14
  %33 = add nsw i32 %19, %21
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_mv_ref_tree, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i32 %17, 0
  br i1 %37, label %38, label %13

38:                                               ; preds = %13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #8
  ret i32 %32
}

declare i8* @vp8_mv_ref_probs(i8*, i32*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_set_mbmode_and_mvs(%struct.macroblock* nocapture readonly, i32, %union.int_mv* nocapture readonly) local_unnamed_addr #5 {
  %4 = trunc i32 %1 to i8
  %5 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 13
  %6 = load %struct.modeinfo*, %struct.modeinfo** %5, align 32
  %7 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %6, i64 0, i32 0, i32 0
  store i8 %4, i8* %7, align 4
  %8 = getelementptr inbounds %union.int_mv, %union.int_mv* %2, i64 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = load %struct.modeinfo*, %struct.modeinfo** %5, align 32
  %11 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %10, i64 0, i32 0, i32 4, i32 0
  store i32 %9, i32* %11, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_mv_pred(%struct.VP8_COMP* nocapture readonly, %struct.macroblockd* nocapture readonly, %struct.modeinfo* nocapture readonly, %union.int_mv* nocapture, i32, i32* nocapture readonly, i32* nocapture, i32* nocapture readonly) local_unnamed_addr #1 {
  %9 = alloca [8 x %union.int_mv], align 16
  %10 = alloca [8 x i32], align 16
  %11 = alloca [8 x i32], align 16
  %12 = alloca [8 x i32], align 16
  %13 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 14
  %14 = load i32, i32* %13, align 8
  %15 = sext i32 %14 to i64
  %16 = sub nsw i64 0, %15
  %17 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2, i64 %16
  %18 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %17, i64 -1
  %19 = bitcast [8 x %union.int_mv]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #8
  %20 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 0, i32 0
  %21 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 1
  %22 = getelementptr inbounds %union.int_mv, %union.int_mv* %21, i64 0, i32 0
  %23 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 2
  %24 = getelementptr inbounds %union.int_mv, %union.int_mv* %23, i64 0, i32 0
  %25 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 3
  %26 = getelementptr inbounds %union.int_mv, %union.int_mv* %25, i64 0, i32 0
  %27 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 4
  %28 = getelementptr inbounds %union.int_mv, %union.int_mv* %27, i64 0, i32 0
  %29 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 5
  %30 = getelementptr inbounds %union.int_mv, %union.int_mv* %29, i64 0, i32 0
  %31 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 6
  %32 = getelementptr inbounds %union.int_mv, %union.int_mv* %31, i64 0, i32 0
  %33 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 7
  %34 = getelementptr inbounds %union.int_mv, %union.int_mv* %33, i64 0, i32 0
  %35 = bitcast [8 x i32]* %10 to i8*
  %36 = bitcast [8 x %union.int_mv]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #8
  %37 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 0
  %38 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 1
  %39 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 2
  %40 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 3
  %41 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 4
  %42 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 5
  %43 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 6
  %44 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 7
  %45 = bitcast [8 x i32]* %11 to i8*
  %46 = bitcast [8 x i32]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %45) #8
  %47 = bitcast [8 x i32]* %12 to i8*
  %48 = bitcast [8 x i32]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %48, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %47) #8
  %49 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2, i64 0, i32 0, i32 2
  %50 = bitcast [8 x i32]* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %50, i8 -86, i64 32, i1 false)
  %51 = load i8, i8* %49, align 2
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %432, label %53

53:                                               ; preds = %8
  %54 = bitcast [8 x %union.int_mv]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %54, i8 0, i64 32, i1 false)
  %55 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2, i64 %16, i32 0, i32 2
  %56 = bitcast [8 x i32]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %56, i8 0, i64 32, i1 false)
  %57 = load i8, i8* %55, align 2
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %80, label %59

59:                                               ; preds = %53
  %60 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2, i64 %16, i32 0, i32 4, i32 0
  %61 = load i32, i32* %60, align 4
  store i32 %61, i32* %20, align 16
  %62 = zext i8 %57 to i64
  %63 = getelementptr inbounds i32, i32* %5, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = sext i32 %4 to i64
  %66 = getelementptr inbounds i32, i32* %5, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, %64
  br i1 %68, label %78, label %69

69:                                               ; preds = %59
  %70 = lshr i32 %61, 16
  %71 = trunc i32 %70 to i16
  %72 = trunc i32 %61 to i16
  %73 = bitcast [8 x %union.int_mv]* %9 to %struct.MV*
  %74 = bitcast [8 x %union.int_mv]* %9 to i16*
  %75 = sub i16 0, %72
  store i16 %75, i16* %74, align 16
  %76 = getelementptr inbounds %struct.MV, %struct.MV* %73, i64 0, i32 1
  %77 = sub i16 0, %71
  store i16 %77, i16* %76, align 2
  br label %78

78:                                               ; preds = %59, %69
  %79 = zext i8 %57 to i32
  store i32 %79, i32* %37, align 16
  br label %80

80:                                               ; preds = %53, %78
  %81 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2, i64 -1, i32 0, i32 2
  %82 = load i8, i8* %81, align 2
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %105, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %2, i64 -1, i32 0, i32 4, i32 0
  %86 = load i32, i32* %85, align 4
  store i32 %86, i32* %22, align 4
  %87 = zext i8 %82 to i64
  %88 = getelementptr inbounds i32, i32* %5, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = sext i32 %4 to i64
  %91 = getelementptr inbounds i32, i32* %5, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = icmp eq i32 %92, %89
  br i1 %93, label %103, label %94

94:                                               ; preds = %84
  %95 = lshr i32 %86, 16
  %96 = trunc i32 %95 to i16
  %97 = trunc i32 %86 to i16
  %98 = bitcast %union.int_mv* %21 to %struct.MV*
  %99 = bitcast %union.int_mv* %21 to i16*
  %100 = sub i16 0, %97
  store i16 %100, i16* %99, align 4
  %101 = getelementptr inbounds %struct.MV, %struct.MV* %98, i64 0, i32 1
  %102 = sub i16 0, %96
  store i16 %102, i16* %101, align 2
  br label %103

103:                                              ; preds = %84, %94
  %104 = zext i8 %82 to i32
  store i32 %104, i32* %38, align 4
  br label %105

105:                                              ; preds = %80, %103
  %106 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %18, i64 0, i32 0
  %107 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %106, i64 0, i32 2
  %108 = load i8, i8* %107, align 2
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %131, label %110

110:                                              ; preds = %105
  %111 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %106, i64 0, i32 4, i32 0
  %112 = load i32, i32* %111, align 4
  store i32 %112, i32* %24, align 8
  %113 = zext i8 %108 to i64
  %114 = getelementptr inbounds i32, i32* %5, i64 %113
  %115 = load i32, i32* %114, align 4
  %116 = sext i32 %4 to i64
  %117 = getelementptr inbounds i32, i32* %5, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = icmp eq i32 %118, %115
  br i1 %119, label %129, label %120

120:                                              ; preds = %110
  %121 = lshr i32 %112, 16
  %122 = trunc i32 %121 to i16
  %123 = trunc i32 %112 to i16
  %124 = bitcast %union.int_mv* %23 to %struct.MV*
  %125 = bitcast %union.int_mv* %23 to i16*
  %126 = sub i16 0, %123
  store i16 %126, i16* %125, align 8
  %127 = getelementptr inbounds %struct.MV, %struct.MV* %124, i64 0, i32 1
  %128 = sub i16 0, %122
  store i16 %128, i16* %127, align 2
  br label %129

129:                                              ; preds = %110, %120
  %130 = zext i8 %108 to i32
  store i32 %130, i32* %39, align 8
  br label %131

131:                                              ; preds = %105, %129
  %132 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 22
  %133 = load i32, i32* %132, align 32
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %291, label %135

135:                                              ; preds = %131
  %136 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 37
  %137 = load i32, i32* %136, align 4
  %138 = sdiv i32 %137, -128
  %139 = add nsw i32 %138, 1
  %140 = add i32 %14, 1
  %141 = mul nsw i32 %139, %140
  %142 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 35
  %143 = load i32, i32* %142, align 4
  %144 = sdiv i32 %143, -128
  %145 = add i32 %141, %144
  %146 = add i32 %145, 1
  %147 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 195
  %148 = load i32*, i32** %147, align 16
  %149 = sext i32 %146 to i64
  %150 = getelementptr inbounds i32, i32* %148, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %176, label %153

153:                                              ; preds = %135
  %154 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 193
  %155 = load %union.int_mv*, %union.int_mv** %154, align 32
  %156 = getelementptr inbounds %union.int_mv, %union.int_mv* %155, i64 %149, i32 0
  %157 = load i32, i32* %156, align 4
  store i32 %157, i32* %26, align 4
  %158 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 194
  %159 = load i32*, i32** %158, align 8
  %160 = getelementptr inbounds i32, i32* %159, i64 %149
  %161 = load i32, i32* %160, align 4
  %162 = sext i32 %4 to i64
  %163 = getelementptr inbounds i32, i32* %5, i64 %162
  %164 = load i32, i32* %163, align 4
  %165 = icmp eq i32 %164, %161
  br i1 %165, label %175, label %166

166:                                              ; preds = %153
  %167 = lshr i32 %157, 16
  %168 = trunc i32 %167 to i16
  %169 = trunc i32 %157 to i16
  %170 = bitcast %union.int_mv* %25 to %struct.MV*
  %171 = bitcast %union.int_mv* %25 to i16*
  %172 = sub i16 0, %169
  store i16 %172, i16* %171, align 4
  %173 = getelementptr inbounds %struct.MV, %struct.MV* %170, i64 0, i32 1
  %174 = sub i16 0, %168
  store i16 %174, i16* %173, align 2
  br label %175

175:                                              ; preds = %153, %166
  store i32 %151, i32* %40, align 4
  br label %176

176:                                              ; preds = %135, %175
  %177 = sub i32 %145, %14
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i32, i32* %148, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %205, label %182

182:                                              ; preds = %176
  %183 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 193
  %184 = load %union.int_mv*, %union.int_mv** %183, align 32
  %185 = getelementptr inbounds %union.int_mv, %union.int_mv* %184, i64 %178, i32 0
  %186 = load i32, i32* %185, align 4
  store i32 %186, i32* %28, align 16
  %187 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 194
  %188 = load i32*, i32** %187, align 8
  %189 = getelementptr inbounds i32, i32* %188, i64 %178
  %190 = load i32, i32* %189, align 4
  %191 = sext i32 %4 to i64
  %192 = getelementptr inbounds i32, i32* %5, i64 %191
  %193 = load i32, i32* %192, align 4
  %194 = icmp eq i32 %193, %190
  br i1 %194, label %204, label %195

195:                                              ; preds = %182
  %196 = lshr i32 %186, 16
  %197 = trunc i32 %196 to i16
  %198 = trunc i32 %186 to i16
  %199 = bitcast %union.int_mv* %27 to %struct.MV*
  %200 = bitcast %union.int_mv* %27 to i16*
  %201 = sub i16 0, %198
  store i16 %201, i16* %200, align 16
  %202 = getelementptr inbounds %struct.MV, %struct.MV* %199, i64 0, i32 1
  %203 = sub i16 0, %197
  store i16 %203, i16* %202, align 2
  br label %204

204:                                              ; preds = %182, %195
  store i32 %180, i32* %41, align 16
  br label %205

205:                                              ; preds = %176, %204
  %206 = sext i32 %145 to i64
  %207 = getelementptr inbounds i32, i32* %148, i64 %206
  %208 = load i32, i32* %207, align 4
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %233, label %210

210:                                              ; preds = %205
  %211 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 193
  %212 = load %union.int_mv*, %union.int_mv** %211, align 32
  %213 = getelementptr inbounds %union.int_mv, %union.int_mv* %212, i64 %206, i32 0
  %214 = load i32, i32* %213, align 4
  store i32 %214, i32* %30, align 4
  %215 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 194
  %216 = load i32*, i32** %215, align 8
  %217 = getelementptr inbounds i32, i32* %216, i64 %206
  %218 = load i32, i32* %217, align 4
  %219 = sext i32 %4 to i64
  %220 = getelementptr inbounds i32, i32* %5, i64 %219
  %221 = load i32, i32* %220, align 4
  %222 = icmp eq i32 %221, %218
  br i1 %222, label %232, label %223

223:                                              ; preds = %210
  %224 = lshr i32 %214, 16
  %225 = trunc i32 %224 to i16
  %226 = trunc i32 %214 to i16
  %227 = bitcast %union.int_mv* %29 to %struct.MV*
  %228 = bitcast %union.int_mv* %29 to i16*
  %229 = sub i16 0, %226
  store i16 %229, i16* %228, align 4
  %230 = getelementptr inbounds %struct.MV, %struct.MV* %227, i64 0, i32 1
  %231 = sub i16 0, %225
  store i16 %231, i16* %230, align 2
  br label %232

232:                                              ; preds = %210, %223
  store i32 %208, i32* %42, align 4
  br label %233

233:                                              ; preds = %205, %232
  %234 = add i32 %145, 2
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds i32, i32* %148, i64 %235
  %237 = load i32, i32* %236, align 4
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %262, label %239

239:                                              ; preds = %233
  %240 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 193
  %241 = load %union.int_mv*, %union.int_mv** %240, align 32
  %242 = getelementptr inbounds %union.int_mv, %union.int_mv* %241, i64 %235, i32 0
  %243 = load i32, i32* %242, align 4
  store i32 %243, i32* %32, align 8
  %244 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 194
  %245 = load i32*, i32** %244, align 8
  %246 = getelementptr inbounds i32, i32* %245, i64 %235
  %247 = load i32, i32* %246, align 4
  %248 = sext i32 %4 to i64
  %249 = getelementptr inbounds i32, i32* %5, i64 %248
  %250 = load i32, i32* %249, align 4
  %251 = icmp eq i32 %250, %247
  br i1 %251, label %261, label %252

252:                                              ; preds = %239
  %253 = lshr i32 %243, 16
  %254 = trunc i32 %253 to i16
  %255 = trunc i32 %243 to i16
  %256 = bitcast %union.int_mv* %31 to %struct.MV*
  %257 = bitcast %union.int_mv* %31 to i16*
  %258 = sub i16 0, %255
  store i16 %258, i16* %257, align 8
  %259 = getelementptr inbounds %struct.MV, %struct.MV* %256, i64 0, i32 1
  %260 = sub i16 0, %254
  store i16 %260, i16* %259, align 2
  br label %261

261:                                              ; preds = %239, %252
  store i32 %237, i32* %43, align 8
  br label %262

262:                                              ; preds = %233, %261
  %263 = add i32 %140, %146
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds i32, i32* %148, i64 %264
  %266 = load i32, i32* %265, align 4
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %291, label %268

268:                                              ; preds = %262
  %269 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 193
  %270 = load %union.int_mv*, %union.int_mv** %269, align 32
  %271 = getelementptr inbounds %union.int_mv, %union.int_mv* %270, i64 %264, i32 0
  %272 = load i32, i32* %271, align 4
  store i32 %272, i32* %34, align 4
  %273 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 194
  %274 = load i32*, i32** %273, align 8
  %275 = getelementptr inbounds i32, i32* %274, i64 %264
  %276 = load i32, i32* %275, align 4
  %277 = sext i32 %4 to i64
  %278 = getelementptr inbounds i32, i32* %5, i64 %277
  %279 = load i32, i32* %278, align 4
  %280 = icmp eq i32 %279, %276
  br i1 %280, label %290, label %281

281:                                              ; preds = %268
  %282 = lshr i32 %272, 16
  %283 = trunc i32 %282 to i16
  %284 = trunc i32 %272 to i16
  %285 = bitcast %union.int_mv* %33 to %struct.MV*
  %286 = bitcast %union.int_mv* %33 to i16*
  %287 = sub i16 0, %284
  store i16 %287, i16* %286, align 4
  %288 = getelementptr inbounds %struct.MV, %struct.MV* %285, i64 0, i32 1
  %289 = sub i16 0, %283
  store i16 %289, i16* %288, align 2
  br label %290

290:                                              ; preds = %268, %281
  store i32 %266, i32* %44, align 4
  br label %291

291:                                              ; preds = %290, %262, %131
  %292 = phi i32 [ 3, %131 ], [ 8, %262 ], [ 8, %290 ]
  %293 = zext i32 %292 to i64
  %294 = zext i8 %51 to i32
  %295 = load i32, i32* %7, align 4
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 %296
  %298 = load i32, i32* %297, align 4
  %299 = icmp ne i32 %298, 0
  %300 = icmp eq i32 %298, %294
  %301 = and i1 %299, %300
  br i1 %301, label %302, label %557

302:                                              ; preds = %613, %604, %595, %586, %577, %566, %557, %291
  %303 = phi i32 [ 3, %291 ], [ 3, %557 ], [ 3, %566 ], [ 2, %577 ], [ 2, %586 ], [ 2, %595 ], [ 2, %604 ], [ 2, %613 ]
  %304 = phi i32 [ %295, %291 ], [ %559, %557 ], [ %568, %566 ], [ %579, %577 ], [ %588, %586 ], [ %597, %595 ], [ %606, %604 ], [ %615, %613 ]
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 %305, i32 0
  %307 = load i32, i32* %306, align 4
  %308 = lshr i32 %307, 16
  br label %428

309:                                              ; preds = %613, %575
  %310 = bitcast [8 x %union.int_mv]* %9 to %struct.MV*
  %311 = bitcast [8 x %union.int_mv]* %9 to i16*
  %312 = load i16, i16* %311, align 16
  %313 = sext i16 %312 to i32
  %314 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 0
  store i32 %313, i32* %314, align 16
  %315 = getelementptr inbounds %struct.MV, %struct.MV* %310, i64 0, i32 1
  %316 = load i16, i16* %315, align 2
  %317 = sext i16 %316 to i32
  %318 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 0
  store i32 %317, i32* %318, align 16
  %319 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 1
  %320 = bitcast %union.int_mv* %319 to %struct.MV*
  %321 = bitcast %union.int_mv* %319 to i16*
  %322 = load i16, i16* %321, align 4
  %323 = sext i16 %322 to i32
  %324 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 1
  store i32 %323, i32* %324, align 4
  %325 = getelementptr inbounds %struct.MV, %struct.MV* %320, i64 0, i32 1
  %326 = load i16, i16* %325, align 2
  %327 = sext i16 %326 to i32
  %328 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 1
  store i32 %327, i32* %328, align 4
  %329 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 2
  %330 = bitcast %union.int_mv* %329 to %struct.MV*
  %331 = bitcast %union.int_mv* %329 to i16*
  %332 = load i16, i16* %331, align 8
  %333 = sext i16 %332 to i32
  %334 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 2
  store i32 %333, i32* %334, align 8
  %335 = getelementptr inbounds %struct.MV, %struct.MV* %330, i64 0, i32 1
  %336 = load i16, i16* %335, align 2
  %337 = sext i16 %336 to i32
  %338 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 2
  store i32 %337, i32* %338, align 8
  %339 = icmp eq i32 %292, 3
  br i1 %339, label %340, label %506

340:                                              ; preds = %506, %309
  br label %341

341:                                              ; preds = %340, %378
  %342 = phi i64 [ %379, %378 ], [ 1, %340 ]
  %343 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %342
  %344 = add nsw i64 %342, -1
  %345 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %344
  %346 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %342
  %347 = add nsw i64 %342, -2
  %348 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %347
  %349 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %344
  %350 = add nsw i64 %342, -3
  %351 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %350
  %352 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %347
  %353 = add nsw i64 %342, -4
  %354 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %353
  %355 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %350
  %356 = add nsw i64 %342, -5
  %357 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %356
  %358 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %353
  %359 = add nsw i64 %342, -6
  %360 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %359
  %361 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %356
  %362 = add nsw i64 %342, -7
  %363 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %362
  %364 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %359
  br label %365

365:                                              ; preds = %375, %341
  %366 = phi i64 [ 0, %341 ], [ %376, %375 ]
  %367 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %366
  %368 = load i32, i32* %367, align 4
  %369 = load i32, i32* %343, align 4
  %370 = icmp sgt i32 %368, %369
  br i1 %370, label %371, label %375

371:                                              ; preds = %365
  %372 = load i32, i32* %345, align 4
  store i32 %372, i32* %346, align 4
  %373 = icmp sgt i64 %344, %366
  br i1 %373, label %489, label %374

374:                                              ; preds = %504, %501, %498, %495, %492, %489, %371
  store i32 %369, i32* %367, align 4
  br label %375

375:                                              ; preds = %374, %365
  %376 = add nuw nsw i64 %366, 1
  %377 = icmp eq i64 %376, %342
  br i1 %377, label %378, label %365

378:                                              ; preds = %375
  %379 = add nuw nsw i64 %342, 1
  %380 = icmp eq i64 %379, %293
  br i1 %380, label %381, label %341

381:                                              ; preds = %378, %418
  %382 = phi i64 [ %419, %418 ], [ 1, %378 ]
  %383 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %382
  %384 = add nsw i64 %382, -1
  %385 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %384
  %386 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %382
  %387 = add nsw i64 %382, -2
  %388 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %387
  %389 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %384
  %390 = add nsw i64 %382, -3
  %391 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %390
  %392 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %387
  %393 = add nsw i64 %382, -4
  %394 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %393
  %395 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %390
  %396 = add nsw i64 %382, -5
  %397 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %396
  %398 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %393
  %399 = add nsw i64 %382, -6
  %400 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %399
  %401 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %396
  %402 = add nsw i64 %382, -7
  %403 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %402
  %404 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %399
  br label %405

405:                                              ; preds = %415, %381
  %406 = phi i64 [ 0, %381 ], [ %416, %415 ]
  %407 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %406
  %408 = load i32, i32* %407, align 4
  %409 = load i32, i32* %383, align 4
  %410 = icmp sgt i32 %408, %409
  br i1 %410, label %411, label %415

411:                                              ; preds = %405
  %412 = load i32, i32* %385, align 4
  store i32 %412, i32* %386, align 4
  %413 = icmp sgt i64 %384, %406
  br i1 %413, label %472, label %414

414:                                              ; preds = %487, %484, %481, %478, %475, %472, %411
  store i32 %409, i32* %407, align 4
  br label %415

415:                                              ; preds = %414, %405
  %416 = add nuw nsw i64 %406, 1
  %417 = icmp eq i64 %416, %382
  br i1 %417, label %418, label %405

418:                                              ; preds = %415
  %419 = add nuw nsw i64 %382, 1
  %420 = icmp eq i64 %419, %293
  br i1 %420, label %421, label %381

421:                                              ; preds = %418
  %422 = lshr i32 %292, 1
  %423 = zext i32 %422 to i64
  %424 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 %423
  %425 = load i32, i32* %424, align 4
  %426 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 %423
  %427 = load i32, i32* %426, align 4
  br label %428

428:                                              ; preds = %302, %421
  %429 = phi i32 [ 0, %421 ], [ %303, %302 ]
  %430 = phi i32 [ %427, %421 ], [ %308, %302 ]
  %431 = phi i32 [ %425, %421 ], [ %307, %302 ]
  store i32 %429, i32* %6, align 4
  br label %432

432:                                              ; preds = %428, %8
  %433 = phi i32 [ 0, %8 ], [ %430, %428 ]
  %434 = phi i32 [ 0, %8 ], [ %431, %428 ]
  %435 = shl i32 %433, 16
  %436 = and i32 %434, 65535
  %437 = or i32 %436, %435
  %438 = getelementptr inbounds %union.int_mv, %union.int_mv* %3, i64 0, i32 0
  store i32 %437, i32* %438, align 4
  %439 = bitcast %union.int_mv* %3 to %struct.MV*
  %440 = getelementptr inbounds %struct.MV, %struct.MV* %439, i64 0, i32 1
  %441 = shl i32 %433, 16
  %442 = ashr exact i32 %441, 16
  %443 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 35
  %444 = load i32, i32* %443, align 4
  %445 = add nsw i32 %444, -128
  %446 = icmp sgt i32 %445, %442
  br i1 %446, label %452, label %447

447:                                              ; preds = %432
  %448 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 36
  %449 = load i32, i32* %448, align 8
  %450 = add nsw i32 %449, 128
  %451 = icmp slt i32 %450, %442
  br i1 %451, label %452, label %455

452:                                              ; preds = %447, %432
  %453 = phi i32 [ %445, %432 ], [ %450, %447 ]
  %454 = trunc i32 %453 to i16
  store i16 %454, i16* %440, align 2
  br label %455

455:                                              ; preds = %452, %447
  %456 = bitcast %union.int_mv* %3 to i16*
  %457 = shl i32 %434, 16
  %458 = ashr exact i32 %457, 16
  %459 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 37
  %460 = load i32, i32* %459, align 4
  %461 = add nsw i32 %460, -128
  %462 = icmp sgt i32 %461, %458
  br i1 %462, label %468, label %463

463:                                              ; preds = %455
  %464 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 38
  %465 = load i32, i32* %464, align 16
  %466 = add nsw i32 %465, 128
  %467 = icmp slt i32 %466, %458
  br i1 %467, label %468, label %471

468:                                              ; preds = %463, %455
  %469 = phi i32 [ %461, %455 ], [ %466, %463 ]
  %470 = trunc i32 %469 to i16
  store i16 %470, i16* %456, align 4
  br label %471

471:                                              ; preds = %468, %463
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %47) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %45) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #8
  ret void

472:                                              ; preds = %411
  %473 = load i32, i32* %388, align 4
  store i32 %473, i32* %389, align 4
  %474 = icmp sgt i64 %387, %406
  br i1 %474, label %475, label %414

475:                                              ; preds = %472
  %476 = load i32, i32* %391, align 4
  store i32 %476, i32* %392, align 4
  %477 = icmp sgt i64 %390, %406
  br i1 %477, label %478, label %414

478:                                              ; preds = %475
  %479 = load i32, i32* %394, align 4
  store i32 %479, i32* %395, align 4
  %480 = icmp sgt i64 %393, %406
  br i1 %480, label %481, label %414

481:                                              ; preds = %478
  %482 = load i32, i32* %397, align 4
  store i32 %482, i32* %398, align 4
  %483 = icmp sgt i64 %396, %406
  br i1 %483, label %484, label %414

484:                                              ; preds = %481
  %485 = load i32, i32* %400, align 4
  store i32 %485, i32* %401, align 4
  %486 = icmp sgt i64 %399, %406
  br i1 %486, label %487, label %414

487:                                              ; preds = %484
  %488 = load i32, i32* %403, align 4
  store i32 %488, i32* %404, align 4
  br label %414

489:                                              ; preds = %371
  %490 = load i32, i32* %348, align 4
  store i32 %490, i32* %349, align 4
  %491 = icmp sgt i64 %347, %366
  br i1 %491, label %492, label %374

492:                                              ; preds = %489
  %493 = load i32, i32* %351, align 4
  store i32 %493, i32* %352, align 4
  %494 = icmp sgt i64 %350, %366
  br i1 %494, label %495, label %374

495:                                              ; preds = %492
  %496 = load i32, i32* %354, align 4
  store i32 %496, i32* %355, align 4
  %497 = icmp sgt i64 %353, %366
  br i1 %497, label %498, label %374

498:                                              ; preds = %495
  %499 = load i32, i32* %357, align 4
  store i32 %499, i32* %358, align 4
  %500 = icmp sgt i64 %356, %366
  br i1 %500, label %501, label %374

501:                                              ; preds = %498
  %502 = load i32, i32* %360, align 4
  store i32 %502, i32* %361, align 4
  %503 = icmp sgt i64 %359, %366
  br i1 %503, label %504, label %374

504:                                              ; preds = %501
  %505 = load i32, i32* %363, align 4
  store i32 %505, i32* %364, align 4
  br label %374

506:                                              ; preds = %309
  %507 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 3
  %508 = bitcast %union.int_mv* %507 to %struct.MV*
  %509 = bitcast %union.int_mv* %507 to i16*
  %510 = load i16, i16* %509, align 4
  %511 = sext i16 %510 to i32
  %512 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 3
  store i32 %511, i32* %512, align 4
  %513 = getelementptr inbounds %struct.MV, %struct.MV* %508, i64 0, i32 1
  %514 = load i16, i16* %513, align 2
  %515 = sext i16 %514 to i32
  %516 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 3
  store i32 %515, i32* %516, align 4
  %517 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 4
  %518 = bitcast %union.int_mv* %517 to %struct.MV*
  %519 = bitcast %union.int_mv* %517 to i16*
  %520 = load i16, i16* %519, align 16
  %521 = sext i16 %520 to i32
  %522 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 4
  store i32 %521, i32* %522, align 16
  %523 = getelementptr inbounds %struct.MV, %struct.MV* %518, i64 0, i32 1
  %524 = load i16, i16* %523, align 2
  %525 = sext i16 %524 to i32
  %526 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 4
  store i32 %525, i32* %526, align 16
  %527 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 5
  %528 = bitcast %union.int_mv* %527 to %struct.MV*
  %529 = bitcast %union.int_mv* %527 to i16*
  %530 = load i16, i16* %529, align 4
  %531 = sext i16 %530 to i32
  %532 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 5
  store i32 %531, i32* %532, align 4
  %533 = getelementptr inbounds %struct.MV, %struct.MV* %528, i64 0, i32 1
  %534 = load i16, i16* %533, align 2
  %535 = sext i16 %534 to i32
  %536 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 5
  store i32 %535, i32* %536, align 4
  %537 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 6
  %538 = bitcast %union.int_mv* %537 to %struct.MV*
  %539 = bitcast %union.int_mv* %537 to i16*
  %540 = load i16, i16* %539, align 8
  %541 = sext i16 %540 to i32
  %542 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 6
  store i32 %541, i32* %542, align 8
  %543 = getelementptr inbounds %struct.MV, %struct.MV* %538, i64 0, i32 1
  %544 = load i16, i16* %543, align 2
  %545 = sext i16 %544 to i32
  %546 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 6
  store i32 %545, i32* %546, align 8
  %547 = getelementptr inbounds [8 x %union.int_mv], [8 x %union.int_mv]* %9, i64 0, i64 7
  %548 = bitcast %union.int_mv* %547 to %struct.MV*
  %549 = bitcast %union.int_mv* %547 to i16*
  %550 = load i16, i16* %549, align 4
  %551 = sext i16 %550 to i32
  %552 = getelementptr inbounds [8 x i32], [8 x i32]* %11, i64 0, i64 7
  store i32 %551, i32* %552, align 4
  %553 = getelementptr inbounds %struct.MV, %struct.MV* %548, i64 0, i32 1
  %554 = load i16, i16* %553, align 2
  %555 = sext i16 %554 to i32
  %556 = getelementptr inbounds [8 x i32], [8 x i32]* %12, i64 0, i64 7
  store i32 %555, i32* %556, align 4
  br label %340

557:                                              ; preds = %291
  %558 = getelementptr inbounds i32, i32* %7, i64 1
  %559 = load i32, i32* %558, align 4
  %560 = sext i32 %559 to i64
  %561 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 %560
  %562 = load i32, i32* %561, align 4
  %563 = icmp ne i32 %562, 0
  %564 = icmp eq i32 %562, %294
  %565 = and i1 %563, %564
  br i1 %565, label %302, label %566

566:                                              ; preds = %557
  %567 = getelementptr inbounds i32, i32* %7, i64 2
  %568 = load i32, i32* %567, align 4
  %569 = sext i32 %568 to i64
  %570 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 %569
  %571 = load i32, i32* %570, align 4
  %572 = icmp ne i32 %571, 0
  %573 = icmp eq i32 %571, %294
  %574 = and i1 %572, %573
  br i1 %574, label %302, label %575

575:                                              ; preds = %566
  %576 = icmp eq i32 %292, 3
  br i1 %576, label %309, label %577

577:                                              ; preds = %575
  %578 = getelementptr inbounds i32, i32* %7, i64 3
  %579 = load i32, i32* %578, align 4
  %580 = sext i32 %579 to i64
  %581 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 %580
  %582 = load i32, i32* %581, align 4
  %583 = icmp ne i32 %582, 0
  %584 = icmp eq i32 %582, %294
  %585 = and i1 %583, %584
  br i1 %585, label %302, label %586

586:                                              ; preds = %577
  %587 = getelementptr inbounds i32, i32* %7, i64 4
  %588 = load i32, i32* %587, align 4
  %589 = sext i32 %588 to i64
  %590 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 %589
  %591 = load i32, i32* %590, align 4
  %592 = icmp ne i32 %591, 0
  %593 = icmp eq i32 %591, %294
  %594 = and i1 %592, %593
  br i1 %594, label %302, label %595

595:                                              ; preds = %586
  %596 = getelementptr inbounds i32, i32* %7, i64 5
  %597 = load i32, i32* %596, align 4
  %598 = sext i32 %597 to i64
  %599 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 %598
  %600 = load i32, i32* %599, align 4
  %601 = icmp ne i32 %600, 0
  %602 = icmp eq i32 %600, %294
  %603 = and i1 %601, %602
  br i1 %603, label %302, label %604

604:                                              ; preds = %595
  %605 = getelementptr inbounds i32, i32* %7, i64 6
  %606 = load i32, i32* %605, align 4
  %607 = sext i32 %606 to i64
  %608 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 %607
  %609 = load i32, i32* %608, align 4
  %610 = icmp ne i32 %609, 0
  %611 = icmp eq i32 %609, %294
  %612 = and i1 %610, %611
  br i1 %612, label %302, label %613

613:                                              ; preds = %604
  %614 = getelementptr inbounds i32, i32* %7, i64 7
  %615 = load i32, i32* %614, align 4
  %616 = sext i32 %615 to i64
  %617 = getelementptr inbounds [8 x i32], [8 x i32]* %10, i64 0, i64 %616
  %618 = load i32, i32* %617, align 4
  %619 = icmp ne i32 %618, 0
  %620 = icmp eq i32 %618, %294
  %621 = and i1 %619, %620
  br i1 %621, label %302, label %309
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_cal_sad(%struct.VP8_COMP* nocapture readonly, %struct.macroblockd* nocapture readonly, %struct.macroblock* nocapture readonly, i32, i32* nocapture) local_unnamed_addr #1 {
  %6 = alloca [8 x i32], align 16
  %7 = bitcast [8 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 32, i1 false)
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 4, i64 0, i32 9
  %9 = load i8**, i8*** %8, align 8
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 37
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 35
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %13, label %17, label %35

17:                                               ; preds = %5
  %18 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 2
  store i32 2147483647, i32* %18, align 8
  br i1 %16, label %19, label %22

19:                                               ; preds = %17
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 1
  store i32 2147483647, i32* %20, align 4
  %21 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 0
  store i32 2147483647, i32* %21, align 16
  br label %86

22:                                               ; preds = %17
  %23 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 0
  store i32 2147483647, i32* %23, align 16
  %24 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 177, i64 4, i32 0
  %25 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %24, align 8
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 4, i64 0, i32 11
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 12, i32 13
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 -16
  %31 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 12, i32 4
  %32 = load i32, i32* %31, align 16
  %33 = tail call i32 %25(i8* %10, i32 %27, i8* %30, i32 %32) #8
  %34 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 1
  store i32 %33, i32* %34, align 4
  br label %86

35:                                               ; preds = %5
  br i1 %16, label %36, label %53

36:                                               ; preds = %35
  %37 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 2
  store i32 2147483647, i32* %37, align 8
  %38 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 1
  store i32 2147483647, i32* %38, align 4
  %39 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 177, i64 4, i32 0
  %40 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %39, align 8
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 4, i64 0, i32 11
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 12, i32 13
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 12, i32 4
  %46 = load i32, i32* %45, align 16
  %47 = shl nsw i32 %46, 4
  %48 = sext i32 %47 to i64
  %49 = sub nsw i64 0, %48
  %50 = getelementptr inbounds i8, i8* %44, i64 %49
  %51 = tail call i32 %40(i8* %10, i32 %42, i8* %50, i32 %46) #8
  %52 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 0
  store i32 %51, i32* %52, align 16
  br label %86

53:                                               ; preds = %35
  %54 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 177, i64 4, i32 0
  %55 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %54, align 8
  %56 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 4, i64 0, i32 11
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 12, i32 13
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 12, i32 4
  %61 = load i32, i32* %60, align 16
  %62 = shl nsw i32 %61, 4
  %63 = sext i32 %62 to i64
  %64 = sub nsw i64 0, %63
  %65 = getelementptr inbounds i8, i8* %59, i64 %64
  %66 = tail call i32 %55(i8* %10, i32 %57, i8* %65, i32 %61) #8
  %67 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 0
  store i32 %66, i32* %67, align 16
  %68 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %54, align 8
  %69 = load i32, i32* %56, align 4
  %70 = load i8*, i8** %58, align 8
  %71 = getelementptr inbounds i8, i8* %70, i64 -16
  %72 = load i32, i32* %60, align 16
  %73 = tail call i32 %68(i8* %10, i32 %69, i8* %71, i32 %72) #8
  %74 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 1
  store i32 %73, i32* %74, align 4
  %75 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %54, align 8
  %76 = load i32, i32* %56, align 4
  %77 = load i8*, i8** %58, align 8
  %78 = load i32, i32* %60, align 16
  %79 = shl nsw i32 %78, 4
  %80 = sext i32 %79 to i64
  %81 = sub nsw i64 0, %80
  %82 = getelementptr inbounds i8, i8* %77, i64 %81
  %83 = getelementptr inbounds i8, i8* %82, i64 -16
  %84 = tail call i32 %75(i8* %10, i32 %76, i8* %83, i32 %78) #8
  %85 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 2
  store i32 %84, i32* %85, align 8
  br label %86

86:                                               ; preds = %22, %53, %36, %19
  %87 = phi i32 [ %33, %22 ], [ %73, %53 ], [ 2147483647, %36 ], [ 2147483647, %19 ]
  %88 = phi i32 [ 2147483647, %22 ], [ %66, %53 ], [ %51, %36 ], [ 2147483647, %19 ]
  %89 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 22
  %90 = load i32, i32* %89, align 32
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %235, label %92

92:                                               ; preds = %86
  %93 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 14
  %94 = load i32, i32* %93, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %95, i32 13
  %97 = load i8*, i8** %96, align 8
  %98 = sext i32 %3 to i64
  %99 = getelementptr inbounds i8, i8* %97, i64 %98
  %100 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %95, i32 4
  %101 = load i32, i32* %100, align 16
  %102 = load i32, i32* %11, align 4
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %106

104:                                              ; preds = %92
  %105 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 4
  store i32 2147483647, i32* %105, align 16
  br label %106

106:                                              ; preds = %104, %92
  %107 = phi i32 [ 2147483647, %104 ], [ 0, %92 ]
  %108 = load i32, i32* %14, align 4
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %112

110:                                              ; preds = %106
  %111 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 5
  store i32 2147483647, i32* %111, align 4
  br label %112

112:                                              ; preds = %110, %106
  %113 = phi i32 [ 2147483647, %110 ], [ 0, %106 ]
  %114 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 36
  %115 = load i32, i32* %114, align 8
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %119

117:                                              ; preds = %112
  %118 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 6
  store i32 2147483647, i32* %118, align 8
  br label %119

119:                                              ; preds = %117, %112
  %120 = phi i32 [ 2147483647, %117 ], [ 0, %112 ]
  %121 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 38
  %122 = load i32, i32* %121, align 16
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %126

124:                                              ; preds = %119
  %125 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 7
  store i32 2147483647, i32* %125, align 4
  br label %126

126:                                              ; preds = %124, %119
  %127 = phi i32 [ 2147483647, %124 ], [ 0, %119 ]
  %128 = icmp eq i32 %107, 2147483647
  br i1 %128, label %140, label %129

129:                                              ; preds = %126
  %130 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 4
  %131 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 177, i64 4, i32 0
  %132 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %131, align 8
  %133 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 4, i64 0, i32 11
  %134 = load i32, i32* %133, align 4
  %135 = shl nsw i32 %101, 4
  %136 = sext i32 %135 to i64
  %137 = sub nsw i64 0, %136
  %138 = getelementptr inbounds i8, i8* %99, i64 %137
  %139 = tail call i32 %132(i8* %10, i32 %134, i8* %138, i32 %101) #8
  store i32 %139, i32* %130, align 16
  br label %140

140:                                              ; preds = %126, %129
  %141 = icmp eq i32 %113, 2147483647
  br i1 %141, label %150, label %142

142:                                              ; preds = %140
  %143 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 5
  %144 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 177, i64 4, i32 0
  %145 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %144, align 8
  %146 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 4, i64 0, i32 11
  %147 = load i32, i32* %146, align 4
  %148 = getelementptr inbounds i8, i8* %99, i64 -16
  %149 = tail call i32 %145(i8* %10, i32 %147, i8* %148, i32 %101) #8
  store i32 %149, i32* %143, align 4
  br label %150

150:                                              ; preds = %140, %142
  %151 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 177, i64 4, i32 0
  %152 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %151, align 8
  %153 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %2, i64 0, i32 4, i64 0, i32 11
  %154 = load i32, i32* %153, align 4
  %155 = tail call i32 %152(i8* %10, i32 %154, i8* %99, i32 %101) #8
  %156 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 3
  store i32 %155, i32* %156, align 4
  %157 = icmp eq i32 %120, 2147483647
  br i1 %157, label %164, label %158

158:                                              ; preds = %150
  %159 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 6
  %160 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %151, align 8
  %161 = load i32, i32* %153, align 4
  %162 = getelementptr inbounds i8, i8* %99, i64 16
  %163 = tail call i32 %160(i8* %10, i32 %161, i8* %162, i32 %101) #8
  store i32 %163, i32* %159, align 8
  br label %164

164:                                              ; preds = %150, %158
  %165 = icmp eq i32 %127, 2147483647
  br i1 %165, label %174, label %166

166:                                              ; preds = %164
  %167 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 7
  %168 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %151, align 8
  %169 = load i32, i32* %153, align 4
  %170 = shl nsw i32 %101, 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i8, i8* %99, i64 %171
  %173 = tail call i32 %168(i8* %10, i32 %169, i8* %172, i32 %101) #8
  store i32 %173, i32* %167, align 4
  br label %174

174:                                              ; preds = %166, %164
  %175 = load i32, i32* %89, align 32
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %235, label %177

177:                                              ; preds = %174, %232
  %178 = phi i64 [ %233, %232 ], [ 1, %174 ]
  %179 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %178
  %180 = getelementptr inbounds i32, i32* %4, i64 %178
  %181 = add nsw i64 %178, -1
  %182 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %181
  %183 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %178
  %184 = getelementptr inbounds i32, i32* %4, i64 %181
  %185 = getelementptr inbounds i32, i32* %4, i64 %178
  %186 = add nsw i64 %178, -2
  %187 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %186
  %188 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %181
  %189 = getelementptr inbounds i32, i32* %4, i64 %186
  %190 = getelementptr inbounds i32, i32* %4, i64 %181
  %191 = add nsw i64 %178, -3
  %192 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %191
  %193 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %186
  %194 = getelementptr inbounds i32, i32* %4, i64 %191
  %195 = getelementptr inbounds i32, i32* %4, i64 %186
  %196 = add nsw i64 %178, -4
  %197 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %196
  %198 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %191
  %199 = getelementptr inbounds i32, i32* %4, i64 %196
  %200 = getelementptr inbounds i32, i32* %4, i64 %191
  %201 = add nsw i64 %178, -5
  %202 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %201
  %203 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %196
  %204 = getelementptr inbounds i32, i32* %4, i64 %201
  %205 = getelementptr inbounds i32, i32* %4, i64 %196
  %206 = add nsw i64 %178, -6
  %207 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %206
  %208 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %201
  %209 = getelementptr inbounds i32, i32* %4, i64 %206
  %210 = getelementptr inbounds i32, i32* %4, i64 %201
  %211 = add nsw i64 %178, -7
  %212 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %211
  %213 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %206
  %214 = getelementptr inbounds i32, i32* %4, i64 %211
  %215 = getelementptr inbounds i32, i32* %4, i64 %206
  br label %216

216:                                              ; preds = %229, %177
  %217 = phi i64 [ 0, %177 ], [ %230, %229 ]
  %218 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 %217
  %219 = load i32, i32* %218, align 4
  %220 = load i32, i32* %179, align 4
  %221 = icmp sgt i32 %219, %220
  br i1 %221, label %222, label %229

222:                                              ; preds = %216
  %223 = load i32, i32* %180, align 4
  %224 = load i32, i32* %182, align 4
  store i32 %224, i32* %183, align 4
  %225 = load i32, i32* %184, align 4
  store i32 %225, i32* %185, align 4
  %226 = icmp sgt i64 %181, %217
  br i1 %226, label %281, label %227

227:                                              ; preds = %301, %297, %293, %289, %285, %281, %222
  store i32 %220, i32* %218, align 4
  %228 = getelementptr inbounds i32, i32* %4, i64 %217
  store i32 %223, i32* %228, align 4
  br label %229

229:                                              ; preds = %227, %216
  %230 = add nuw nsw i64 %217, 1
  %231 = icmp eq i64 %230, %178
  br i1 %231, label %232, label %216

232:                                              ; preds = %229
  %233 = add nuw nsw i64 %178, 1
  %234 = icmp eq i64 %233, 8
  br i1 %234, label %253, label %177

235:                                              ; preds = %174, %86
  %236 = icmp sgt i32 %88, %87
  br i1 %236, label %237, label %246

237:                                              ; preds = %235
  %238 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 0
  %239 = getelementptr inbounds i32, i32* %4, i64 1
  %240 = load i32, i32* %239, align 4
  %241 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 0
  %242 = load i32, i32* %241, align 16
  %243 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 1
  store i32 %242, i32* %243, align 4
  %244 = load i32, i32* %4, align 4
  %245 = getelementptr inbounds i32, i32* %4, i64 1
  store i32 %244, i32* %245, align 4
  store i32 %87, i32* %238, align 16
  store i32 %240, i32* %4, align 4
  br label %246

246:                                              ; preds = %235, %237
  %247 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 2
  %248 = getelementptr inbounds i32, i32* %4, i64 2
  %249 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 0
  %250 = load i32, i32* %249, align 16
  %251 = load i32, i32* %247, align 8
  %252 = icmp sgt i32 %250, %251
  br i1 %252, label %254, label %267

253:                                              ; preds = %267, %272, %232
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  ret void

254:                                              ; preds = %246
  %255 = load i32, i32* %248, align 4
  %256 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 1
  %257 = load i32, i32* %256, align 4
  %258 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 2
  store i32 %257, i32* %258, align 8
  %259 = getelementptr inbounds i32, i32* %4, i64 1
  %260 = load i32, i32* %259, align 4
  %261 = getelementptr inbounds i32, i32* %4, i64 2
  store i32 %260, i32* %261, align 4
  %262 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 0
  %263 = load i32, i32* %262, align 16
  %264 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 1
  store i32 %263, i32* %264, align 4
  %265 = load i32, i32* %4, align 4
  %266 = getelementptr inbounds i32, i32* %4, i64 1
  store i32 %265, i32* %266, align 4
  store i32 %251, i32* %249, align 16
  store i32 %255, i32* %4, align 4
  br label %267

267:                                              ; preds = %254, %246
  %268 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 1
  %269 = load i32, i32* %268, align 4
  %270 = load i32, i32* %247, align 8
  %271 = icmp sgt i32 %269, %270
  br i1 %271, label %272, label %253

272:                                              ; preds = %267
  %273 = load i32, i32* %248, align 4
  %274 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 1
  %275 = load i32, i32* %274, align 4
  %276 = getelementptr inbounds [8 x i32], [8 x i32]* %6, i64 0, i64 2
  store i32 %275, i32* %276, align 8
  %277 = getelementptr inbounds i32, i32* %4, i64 1
  %278 = load i32, i32* %277, align 4
  %279 = getelementptr inbounds i32, i32* %4, i64 2
  store i32 %278, i32* %279, align 4
  store i32 %270, i32* %268, align 4
  %280 = getelementptr inbounds i32, i32* %4, i64 1
  store i32 %273, i32* %280, align 4
  br label %253

281:                                              ; preds = %222
  %282 = load i32, i32* %187, align 4
  store i32 %282, i32* %188, align 4
  %283 = load i32, i32* %189, align 4
  store i32 %283, i32* %190, align 4
  %284 = icmp sgt i64 %186, %217
  br i1 %284, label %285, label %227

285:                                              ; preds = %281
  %286 = load i32, i32* %192, align 4
  store i32 %286, i32* %193, align 4
  %287 = load i32, i32* %194, align 4
  store i32 %287, i32* %195, align 4
  %288 = icmp sgt i64 %191, %217
  br i1 %288, label %289, label %227

289:                                              ; preds = %285
  %290 = load i32, i32* %197, align 4
  store i32 %290, i32* %198, align 4
  %291 = load i32, i32* %199, align 4
  store i32 %291, i32* %200, align 4
  %292 = icmp sgt i64 %196, %217
  br i1 %292, label %293, label %227

293:                                              ; preds = %289
  %294 = load i32, i32* %202, align 4
  store i32 %294, i32* %203, align 4
  %295 = load i32, i32* %204, align 4
  store i32 %295, i32* %205, align 4
  %296 = icmp sgt i64 %201, %217
  br i1 %296, label %297, label %227

297:                                              ; preds = %293
  %298 = load i32, i32* %207, align 4
  store i32 %298, i32* %208, align 4
  %299 = load i32, i32* %209, align 4
  store i32 %299, i32* %210, align 4
  %300 = icmp sgt i64 %206, %217
  br i1 %300, label %301, label %227

301:                                              ; preds = %297
  %302 = load i32, i32* %212, align 4
  store i32 %302, i32* %213, align 4
  %303 = load i32, i32* %214, align 4
  store i32 %303, i32* %215, align 4
  br label %227
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_rd_pick_inter_mode(%struct.VP8_COMP*, %struct.macroblock*, i32, i32, i32* nocapture, i32* nocapture, i32* nocapture, i32, i32) local_unnamed_addr #1 {
  %10 = alloca i32, align 4
  %11 = alloca %struct.BEST_SEG_INFO, align 8
  %12 = alloca [2 x %union.int_mv], align 4
  %13 = alloca [2 x [10 x %union.int_mv]], align 16
  %14 = alloca %union.int_mv, align 4
  %15 = alloca i32, align 4
  %16 = alloca %struct.best_mode_struct, align 4
  %17 = alloca [4 x i32], align 16
  %18 = alloca i32, align 4
  %19 = alloca %struct.rate_distortion_struct, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca %union.int_mv, align 4
  %24 = alloca [8 x i32], align 16
  %25 = alloca i32, align 4
  %26 = alloca [4 x [3 x i8*]], align 16
  %27 = alloca [4 x i32], align 16
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca %union.int_mv, align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 0
  %40 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 0
  %42 = bitcast [2 x %union.int_mv]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #8
  %43 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %12, i64 0, i64 0, i32 0
  store i32 -1431655766, i32* %43, align 4
  %44 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %12, i64 0, i64 1, i32 0
  store i32 -1431655766, i32* %44, align 4
  %45 = bitcast [2 x [10 x %union.int_mv]]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %45) #8
  %46 = bitcast %union.int_mv* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %46) #8
  %47 = getelementptr inbounds %union.int_mv, %union.int_mv* %14, i64 0, i32 0
  %48 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %48) #8
  store i32 -1431655766, i32* %15, align 4
  %49 = bitcast %struct.best_mode_struct* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 220, i8* nonnull %49) #8
  %50 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 5
  %51 = bitcast %struct.PARTITION_INFO* %50 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %51, i8 -86, i64 132, i1 false)
  %52 = bitcast [4 x i32]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #8
  %53 = getelementptr inbounds [4 x i32], [4 x i32]* %17, i64 0, i64 0
  %54 = bitcast i32* %18 to i8*
  %55 = bitcast [4 x i32]* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %54) #8
  store i32 -1431655766, i32* %18, align 4
  %56 = bitcast %struct.rate_distortion_struct* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %56) #8
  %57 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %19, i64 0, i32 0
  %58 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %19, i64 0, i32 1
  %59 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %19, i64 0, i32 2
  %60 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %19, i64 0, i32 3
  %61 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %19, i64 0, i32 4
  %62 = bitcast i32* %20 to i8*
  %63 = bitcast %struct.rate_distortion_struct* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %63, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %62) #8
  store i32 -1431655766, i32* %20, align 4
  %64 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %64) #8
  store i32 -1431655766, i32* %21, align 4
  %65 = bitcast i32* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %65) #8
  store i32 -1431655766, i32* %22, align 4
  %66 = bitcast %union.int_mv* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %66) #8
  %67 = getelementptr inbounds %union.int_mv, %union.int_mv* %23, i64 0, i32 0
  store i32 -1431655766, i32* %67, align 4
  %68 = bitcast [8 x i32]* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %68) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %68, i8* align 16 bitcast ([8 x i32]* @__const.vp8_rd_pick_inter_mode.near_sadidx to i8*), i64 32, i1 false)
  %69 = bitcast i32* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %69) #8
  store i32 0, i32* %25, align 4
  %70 = bitcast [4 x [3 x i8*]]* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %70) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %70, i8 0, i64 96, i1 false)
  %71 = bitcast [4 x i32]* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %71) #8
  %72 = getelementptr inbounds [4 x i32], [4 x i32]* %27, i64 0, i64 0
  %73 = getelementptr inbounds [4 x i32], [4 x i32]* %27, i64 0, i64 1
  %74 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 34
  %75 = bitcast [4 x i32]* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %75, i8 -86, i64 16, i1 false)
  %76 = load i32, i32* %74, align 16
  %77 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 35
  %78 = load i32, i32* %77, align 4
  %79 = tail call i32 @vp8_dc_quant(i32 %76, i32 %78) #8
  %80 = mul nsw i32 %79, 10
  %81 = bitcast i32* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %81) #8
  store i32 -1, i32* %28, align 4
  store i32 0, i32* %59, align 4
  store i32 0, i32* %61, align 4
  %82 = getelementptr inbounds [2 x [10 x %union.int_mv]], [2 x [10 x %union.int_mv]]* %13, i64 0, i64 0, i64 0
  store i32 0, i32* %47, align 4
  %83 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 1
  store i32 2147483647, i32* %83, align 4
  %84 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 0
  store i32 2147483647, i32* %84, align 4
  %85 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 2
  store i32 2147483647, i32* %85, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %45, i8 0, i64 80, i1 false)
  %86 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 3, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %86, i8 0, i64 76, i1 false)
  store i32 0, i32* %72, align 16
  %87 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 129
  %88 = load i32, i32* %87, align 4
  %89 = and i32 %88, 1
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %92, label %91

91:                                               ; preds = %9
  store i32 1, i32* %73, align 4
  br label %92

92:                                               ; preds = %91, %9
  %93 = phi i32 [ 2, %91 ], [ 1, %9 ]
  %94 = and i32 %88, 2
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %100, label %96

96:                                               ; preds = %92
  %97 = add nuw nsw i32 %93, 1
  %98 = zext i32 %93 to i64
  %99 = getelementptr inbounds [4 x i32], [4 x i32]* %27, i64 0, i64 %98
  store i32 2, i32* %99, align 4
  br label %100

100:                                              ; preds = %96, %92
  %101 = phi i32 [ %97, %96 ], [ %93, %92 ]
  %102 = and i32 %88, 4
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %109, label %104

104:                                              ; preds = %100
  %105 = add nuw nsw i32 %101, 1
  %106 = sext i32 %101 to i64
  %107 = getelementptr inbounds [4 x i32], [4 x i32]* %27, i64 0, i64 %106
  store i32 3, i32* %107, align 4
  %108 = icmp slt i32 %105, 4
  br i1 %108, label %109, label %118

109:                                              ; preds = %104, %100
  %110 = phi i32 [ %105, %104 ], [ %101, %100 ]
  %111 = zext i32 %110 to i64
  %112 = getelementptr [4 x i32], [4 x i32]* %27, i64 0, i64 %111
  %113 = bitcast i32* %112 to i8*
  %114 = sub nuw nsw i32 3, %110
  %115 = zext i32 %114 to i64
  %116 = shl nuw nsw i64 %115, 2
  %117 = add nuw nsw i64 %116, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %113, i8 -1, i64 %117, i1 false) #8
  br label %118

118:                                              ; preds = %104, %109
  %119 = load i32, i32* %73, align 4
  %120 = icmp sgt i32 %119, 0
  br i1 %120, label %121, label %134

121:                                              ; preds = %118
  %122 = getelementptr inbounds [2 x [10 x %union.int_mv]], [2 x [10 x %union.int_mv]]* %13, i64 0, i64 0
  %123 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %12, i64 0, i64 0
  %124 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 13
  %125 = load %struct.modeinfo*, %struct.modeinfo** %124, align 32
  %126 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 0
  %127 = call i32 @vp8_find_near_mvs_bias(%struct.macroblockd* %40, %struct.modeinfo* %125, [10 x %union.int_mv]* nonnull %122, %union.int_mv* nonnull %123, i32* nonnull %53, i32 %119, i32* %126) #8
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds [2 x [10 x %union.int_mv]], [2 x [10 x %union.int_mv]]* %13, i64 0, i64 %128, i64 0
  %130 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %12, i64 0, i64 %128, i32 0
  %131 = load i32, i32* %130, align 4
  store i32 %131, i32* %47, align 4
  %132 = load i32, i32* %87, align 4
  %133 = and i32 %132, 1
  br label %134

134:                                              ; preds = %121, %118
  %135 = phi i32 [ %133, %121 ], [ %89, %118 ]
  %136 = phi i32 [ %132, %121 ], [ %88, %118 ]
  %137 = phi %union.int_mv* [ %129, %121 ], [ %82, %118 ]
  %138 = phi i32 [ %127, %121 ], [ 0, %118 ]
  %139 = icmp eq i32 %135, 0
  br i1 %139, label %158, label %140

140:                                              ; preds = %134
  %141 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 14
  %142 = load i32, i32* %141, align 4
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %26, i64 0, i64 1, i64 0
  %145 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %143, i32 13
  %146 = load i8*, i8** %145, align 8
  %147 = zext i32 %2 to i64
  %148 = getelementptr inbounds i8, i8* %146, i64 %147
  store i8* %148, i8** %144, align 8
  %149 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %143, i32 14
  %150 = load i8*, i8** %149, align 8
  %151 = zext i32 %3 to i64
  %152 = getelementptr inbounds i8, i8* %150, i64 %151
  %153 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %26, i64 0, i64 1, i64 1
  store i8* %152, i8** %153, align 8
  %154 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %143, i32 15
  %155 = load i8*, i8** %154, align 8
  %156 = getelementptr inbounds i8, i8* %155, i64 %151
  %157 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %26, i64 0, i64 1, i64 2
  store i8* %156, i8** %157, align 8
  br label %158

158:                                              ; preds = %140, %134
  %159 = and i32 %136, 2
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %179, label %161

161:                                              ; preds = %158
  %162 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 15
  %163 = load i32, i32* %162, align 8
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %26, i64 0, i64 2, i64 0
  %166 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %164, i32 13
  %167 = load i8*, i8** %166, align 8
  %168 = zext i32 %2 to i64
  %169 = getelementptr inbounds i8, i8* %167, i64 %168
  store i8* %169, i8** %165, align 16
  %170 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %164, i32 14
  %171 = load i8*, i8** %170, align 8
  %172 = zext i32 %3 to i64
  %173 = getelementptr inbounds i8, i8* %171, i64 %172
  %174 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %26, i64 0, i64 2, i64 1
  store i8* %173, i8** %174, align 8
  %175 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %164, i32 15
  %176 = load i8*, i8** %175, align 8
  %177 = getelementptr inbounds i8, i8* %176, i64 %172
  %178 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %26, i64 0, i64 2, i64 2
  store i8* %177, i8** %178, align 16
  br label %179

179:                                              ; preds = %161, %158
  %180 = and i32 %136, 4
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %200, label %182

182:                                              ; preds = %179
  %183 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 16
  %184 = load i32, i32* %183, align 4
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %26, i64 0, i64 3, i64 0
  %187 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %185, i32 13
  %188 = load i8*, i8** %187, align 8
  %189 = zext i32 %2 to i64
  %190 = getelementptr inbounds i8, i8* %188, i64 %189
  store i8* %190, i8** %186, align 8
  %191 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %185, i32 14
  %192 = load i8*, i8** %191, align 8
  %193 = zext i32 %3 to i64
  %194 = getelementptr inbounds i8, i8* %192, i64 %193
  %195 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %26, i64 0, i64 3, i64 1
  store i8* %194, i8** %195, align 8
  %196 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %185, i32 15
  %197 = load i8*, i8** %196, align 8
  %198 = getelementptr inbounds i8, i8* %197, i64 %193
  %199 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %26, i64 0, i64 3, i64 2
  store i8* %198, i8** %199, align 8
  br label %200

200:                                              ; preds = %179, %182
  store i32 2147483647, i32* %6, align 4
  %201 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 59
  %202 = load i32, i32* %201, align 8
  %203 = add i32 %202, 1
  store i32 %203, i32* %201, align 8
  %204 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 34
  store i32 0, i32* %204, align 32
  %205 = bitcast i32* %29 to i8*
  %206 = bitcast i32* %30 to i8*
  %207 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 13
  %208 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 33
  %209 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 46
  %210 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 11, i32 13
  %211 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 11, i32 15
  %212 = bitcast i8** %211 to i64*
  %213 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61
  %214 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 62
  %215 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 11
  %216 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 15
  %217 = bitcast %union.int_mv* %33 to i8*
  %218 = getelementptr inbounds %union.int_mv, %union.int_mv* %33, i64 0, i32 0
  %219 = bitcast %union.int_mv* %14 to %struct.MV*
  %220 = getelementptr inbounds %struct.MV, %struct.MV* %219, i64 0, i32 1
  %221 = bitcast %union.int_mv* %14 to i16*
  %222 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 30
  %223 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 31
  %224 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 32
  %225 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 33
  %226 = getelementptr inbounds [8 x i32], [8 x i32]* %24, i64 0, i64 0
  %227 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 0
  %228 = bitcast %union.int_mv* %23 to %struct.MV*
  %229 = getelementptr inbounds %struct.MV, %struct.MV* %228, i64 0, i32 1
  %230 = bitcast %union.int_mv* %33 to %struct.MV*
  %231 = getelementptr inbounds %struct.MV, %struct.MV* %230, i64 0, i32 1
  %232 = bitcast %union.int_mv* %23 to i16*
  %233 = bitcast %union.int_mv* %33 to i16*
  %234 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 176
  %235 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 0, i32 6
  %236 = bitcast %union.b_mode_info* %235 to %union.int_mv*
  %237 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 177, i64 4
  %238 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i64 0
  %239 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %235, i64 0, i32 0
  %240 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 10
  %241 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 175
  %242 = bitcast i32* %34 to i8*
  %243 = bitcast i32* %35 to i8*
  %244 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 173
  %245 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 14
  %246 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 35
  %247 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 36
  %248 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 37
  %249 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 38
  %250 = bitcast i32* %32 to i8*
  %251 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 13
  %252 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 4
  %253 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %40, i64 0, i32 0, i64 0
  %254 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 25
  %255 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 15
  %256 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 13
  %257 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 15
  %258 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 14
  %259 = bitcast %struct.BEST_SEG_INFO* %11 to i8*
  %260 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 3
  %261 = bitcast i32* %260 to i8*
  %262 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 2
  %263 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 0
  %264 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 1, i32 0
  %265 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 10
  %266 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 11
  %267 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 7, i64 0
  %268 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 7, i64 4
  %269 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 7, i64 8
  %270 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 7, i64 9
  %271 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 7, i64 10
  %272 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 7, i64 11
  %273 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 7, i64 15
  %274 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 114
  %275 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 0, i32 0
  %276 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 12
  %277 = getelementptr inbounds [4 x %union.int_mv], [4 x %union.int_mv]* %276, i64 0, i64 0, i32 0
  %278 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 2, i32 0
  %279 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 12, i64 1
  %280 = getelementptr inbounds %union.int_mv, %union.int_mv* %279, i64 0, i32 0
  %281 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 8, i32 0
  %282 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 12, i64 2
  %283 = getelementptr inbounds %union.int_mv, %union.int_mv* %282, i64 0, i32 0
  %284 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 10, i32 0
  %285 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 12, i64 3
  %286 = getelementptr inbounds %union.int_mv, %union.int_mv* %285, i64 0, i32 0
  %287 = bitcast [4 x %union.int_mv]* %276 to %struct.MV*
  %288 = bitcast [4 x %union.int_mv]* %276 to i16*
  %289 = bitcast %union.int_mv* %282 to %struct.MV*
  %290 = bitcast %union.int_mv* %282 to i16*
  %291 = getelementptr inbounds %struct.MV, %struct.MV* %287, i64 0, i32 1
  %292 = getelementptr inbounds %struct.MV, %struct.MV* %289, i64 0, i32 1
  %293 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 13, i64 0
  %294 = bitcast %union.int_mv* %279 to %struct.MV*
  %295 = bitcast %union.int_mv* %279 to i16*
  %296 = bitcast %union.int_mv* %285 to %struct.MV*
  %297 = bitcast %union.int_mv* %285 to i16*
  %298 = getelementptr inbounds %struct.MV, %struct.MV* %294, i64 0, i32 1
  %299 = getelementptr inbounds %struct.MV, %struct.MV* %296, i64 0, i32 1
  %300 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 13, i64 1
  %301 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 14
  %302 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 0, i32 6, i32 0
  %303 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 0
  %304 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 0, i32 5
  %305 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 1, i32 0
  %306 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 1, i32 6, i32 0
  %307 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 1
  %308 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 1, i32 5
  %309 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 2, i32 6, i32 0
  %310 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 2
  %311 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 2, i32 5
  %312 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 3, i32 0
  %313 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 3, i32 6, i32 0
  %314 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 3
  %315 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 3, i32 5
  %316 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 4, i32 0
  %317 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 4, i32 6, i32 0
  %318 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 4
  %319 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 4, i32 5
  %320 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 5, i32 0
  %321 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 5, i32 6, i32 0
  %322 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 5
  %323 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 5, i32 5
  %324 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 6, i32 0
  %325 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 6, i32 6, i32 0
  %326 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 6
  %327 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 6, i32 5
  %328 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 7, i32 0
  %329 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 7, i32 6, i32 0
  %330 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 7
  %331 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 7, i32 5
  %332 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 8, i32 6, i32 0
  %333 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 8
  %334 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 8, i32 5
  %335 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 9, i32 0
  %336 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 9, i32 6, i32 0
  %337 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 9
  %338 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 9, i32 5
  %339 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 10, i32 6, i32 0
  %340 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 10
  %341 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 10, i32 5
  %342 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 11, i32 0
  %343 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 11, i32 6, i32 0
  %344 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 11
  %345 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 11, i32 5
  %346 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 12, i32 0
  %347 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 12, i32 6, i32 0
  %348 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 12
  %349 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 12, i32 5
  %350 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 13, i32 0
  %351 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 13, i32 6, i32 0
  %352 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 13
  %353 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 13, i32 5
  %354 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 14, i32 0
  %355 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 14, i32 6, i32 0
  %356 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 14
  %357 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 14, i32 5
  %358 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 15, i32 0
  %359 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 15, i32 6, i32 0
  %360 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 9, i64 15
  %361 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 15, i32 5
  %362 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 4
  %363 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 5
  %364 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 6
  %365 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 7
  %366 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0
  %367 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 5, i32 14
  %368 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 5, i32 15
  %369 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 5, i32 9
  %370 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 0, i64 256
  %371 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 0, i64 320
  %372 = bitcast i32* %31 to i8*
  %373 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 5
  %374 = bitcast i32* %36 to i8*
  %375 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 47
  %376 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 44
  %377 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 45, i32 0
  %378 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 48
  %379 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 46
  %380 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 18
  %381 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %382 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 5
  %383 = bitcast %struct.PARTITION_INFO* %382 to i8*
  %384 = bitcast %struct.PARTITION_INFO** %365 to i8**
  %385 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 0, i32 0
  %386 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 1, i32 0
  %387 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 2, i32 0
  %388 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 3, i32 0
  %389 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 4, i32 0
  %390 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 5, i32 0
  %391 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 6, i32 0
  %392 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 7, i32 0
  %393 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 8, i32 0
  %394 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 9, i32 0
  %395 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 10, i32 0
  %396 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 11, i32 0
  %397 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 12, i32 0
  %398 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 13, i32 0
  %399 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 14, i32 0
  %400 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 4, i64 15, i32 0
  %401 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 16
  %402 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 17
  %403 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 18
  %404 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 19
  %405 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 20
  %406 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 21
  %407 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 22
  %408 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 23
  %409 = bitcast i8** %210 to <2 x i64>*
  %410 = bitcast i32* %222 to <4 x i32>*
  %411 = bitcast i32* %222 to <4 x i32>*
  %412 = bitcast i32* %222 to <4 x i32>*
  %413 = bitcast i32* %267 to <4 x i32>*
  %414 = bitcast i32* %268 to <4 x i32>*
  %415 = bitcast i32* %272 to <4 x i32>*
  %416 = bitcast i32* %222 to <4 x i32>*
  %417 = bitcast i32* %222 to <4 x i32>*
  br label %418

418:                                              ; preds = %1226, %200
  %419 = phi i64 [ 0, %200 ], [ %1236, %1226 ]
  %420 = phi i32 [ -1, %200 ], [ %1227, %1226 ]
  %421 = phi i32 [ -1, %200 ], [ %1228, %1226 ]
  %422 = phi i32 [ %138, %200 ], [ %1229, %1226 ]
  %423 = phi i32 [ 0, %200 ], [ %1230, %1226 ]
  %424 = phi i32 [ 0, %200 ], [ %1231, %1226 ]
  %425 = phi i32 [ 0, %200 ], [ %1232, %1226 ]
  %426 = phi i32 [ 0, %200 ], [ %1233, %1226 ]
  %427 = phi i32 [ 0, %200 ], [ %1234, %1226 ]
  %428 = phi %union.int_mv* [ %137, %200 ], [ %1235, %1226 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %205) #8
  store i32 0, i32* %29, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %206) #8
  store i32 0, i32* %30, align 4
  %429 = getelementptr inbounds [20 x i32], [20 x i32]* @vp8_ref_frame_order, i64 0, i64 %419
  %430 = load i32, i32* %429, align 4
  %431 = sext i32 %430 to i64
  %432 = getelementptr inbounds [4 x i32], [4 x i32]* %27, i64 0, i64 %431
  %433 = load i32, i32* %432, align 4
  %434 = load i32, i32* %83, align 4
  %435 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 %419
  %436 = load i32, i32* %435, align 4
  %437 = icmp sle i32 %434, %436
  %438 = icmp slt i32 %433, 0
  %439 = or i1 %438, %437
  br i1 %439, label %1210, label %440

440:                                              ; preds = %418
  store i32 0, i32* %57, align 4
  store i32 0, i32* %60, align 4
  %441 = getelementptr inbounds [20 x i32], [20 x i32]* @vp8_mode_order, i64 0, i64 %419
  %442 = load i32, i32* %441, align 4
  %443 = trunc i32 %442 to i8
  %444 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %445 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %444, i64 0, i32 0, i32 0
  store i8 %443, i8* %445, align 4
  %446 = trunc i32 %433 to i8
  %447 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %448 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %447, i64 0, i32 0, i32 2
  store i8 %446, i8* %448, align 2
  %449 = load i32, i32* %208, align 4
  %450 = icmp eq i32 %449, 0
  br i1 %450, label %463, label %451

451:                                              ; preds = %440
  %452 = load i32, i32* %209, align 4
  %453 = icmp eq i32 %452, 0
  br i1 %453, label %454, label %463

454:                                              ; preds = %451
  %455 = lshr i64 1048494, %419
  %456 = and i64 %455, 1
  %457 = icmp eq i64 %456, 0
  br i1 %457, label %458, label %1210

458:                                              ; preds = %454
  %459 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %460 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %459, i64 0, i32 0, i32 2
  %461 = load i8, i8* %460, align 2
  %462 = icmp eq i8 %461, 3
  br i1 %462, label %463, label %1210

463:                                              ; preds = %458, %440, %451
  %464 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %465 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %464, i64 0, i32 0, i32 2
  %466 = load i8, i8* %465, align 2
  %467 = icmp eq i8 %466, 0
  br i1 %467, label %484, label %468

468:                                              ; preds = %463
  %469 = sext i32 %433 to i64
  %470 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %26, i64 0, i64 %469
  %471 = bitcast [3 x i8*]* %470 to <2 x i64>*
  %472 = load <2 x i64>, <2 x i64>* %471, align 8
  store <2 x i64> %472, <2 x i64>* %409, align 8
  %473 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %26, i64 0, i64 %469, i64 2
  %474 = bitcast i8** %473 to i64*
  %475 = load i64, i64* %474, align 8
  store i64 %475, i64* %212, align 8
  %476 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %469
  %477 = load i32, i32* %476, align 4
  %478 = icmp eq i32 %422, %477
  br i1 %478, label %484, label %479

479:                                              ; preds = %468
  %480 = sext i32 %477 to i64
  %481 = getelementptr inbounds [2 x [10 x %union.int_mv]], [2 x [10 x %union.int_mv]]* %13, i64 0, i64 %480, i64 0
  %482 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %12, i64 0, i64 %480, i32 0
  %483 = load i32, i32* %482, align 4
  store i32 %483, i32* %47, align 4
  br label %484

484:                                              ; preds = %468, %463, %479
  %485 = phi %union.int_mv* [ %481, %479 ], [ %428, %468 ], [ %428, %463 ]
  %486 = phi i32 [ %477, %479 ], [ %422, %468 ], [ %422, %463 ]
  %487 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 60, i64 %419
  %488 = load i32, i32* %487, align 4
  %489 = icmp eq i32 %488, 0
  br i1 %489, label %508, label %490

490:                                              ; preds = %484
  %491 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 45, i64 %419
  %492 = load i32, i32* %491, align 4
  %493 = icmp ugt i32 %492, 1
  br i1 %493, label %494, label %508

494:                                              ; preds = %490
  %495 = load i32, i32* %201, align 8
  %496 = mul i32 %492, %488
  %497 = icmp ugt i32 %495, %496
  br i1 %497, label %508, label %498

498:                                              ; preds = %494
  %499 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i64 %419
  %500 = load i32, i32* %499, align 4
  %501 = icmp slt i32 %500, 508
  %502 = select i1 %501, i32 %500, i32 508
  %503 = add nsw i32 %502, 4
  store i32 %503, i32* %499, align 4
  %504 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 %419
  %505 = load i32, i32* %504, align 4
  %506 = ashr i32 %505, 7
  %507 = mul nsw i32 %506, %503
  store i32 %507, i32* %435, align 4
  br label %1210

508:                                              ; preds = %494, %484, %490
  %509 = add i32 %488, 1
  store i32 %509, i32* %487, align 4
  %510 = load i32, i32* %213, align 4
  %511 = icmp eq i32 %510, 0
  br i1 %511, label %527, label %512

512:                                              ; preds = %508
  %513 = icmp eq i32 %433, 0
  br i1 %513, label %525, label %514

514:                                              ; preds = %512
  %515 = lshr i64 81, %419
  %516 = and i64 %515, 1
  %517 = icmp eq i64 %516, 0
  br i1 %517, label %521, label %518

518:                                              ; preds = %514
  %519 = icmp eq i32 %433, 1
  %520 = select i1 %519, i32 6, i32 12
  br label %525

521:                                              ; preds = %514
  %522 = add nsw i64 %419, -16
  %523 = icmp ult i64 %522, 3
  %524 = select i1 %523, i32 0, i32 4
  br label %525

525:                                              ; preds = %521, %518, %512
  %526 = phi i32 [ 0, %512 ], [ %520, %518 ], [ %524, %521 ]
  store i32 %526, i32* %214, align 32
  call void @vp8_update_zbin_extra(%struct.VP8_COMP* %0, %struct.macroblock* %1) #8
  br label %527

527:                                              ; preds = %508, %525
  %528 = or i32 %433, %425
  %529 = icmp eq i32 %528, 0
  br i1 %529, label %530, label %559

530:                                              ; preds = %527
  call fastcc void @rd_pick_intra_mbuv_mode(%struct.macroblock* %1, i32* nonnull %20, i32* nonnull %22, i32* nonnull %21)
  %531 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %532 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %531, i64 0, i32 0, i32 1
  %533 = load i8, i8* %532, align 1
  %534 = load i8, i8* %401, align 1
  %535 = sext i8 %534 to i32
  %536 = add nsw i32 %426, %535
  %537 = load i8, i8* %402, align 1
  %538 = sext i8 %537 to i32
  %539 = add nsw i32 %536, %538
  %540 = load i8, i8* %403, align 1
  %541 = sext i8 %540 to i32
  %542 = add nsw i32 %539, %541
  %543 = load i8, i8* %404, align 1
  %544 = sext i8 %543 to i32
  %545 = add nsw i32 %542, %544
  %546 = load i8, i8* %405, align 1
  %547 = sext i8 %546 to i32
  %548 = add nsw i32 %545, %547
  %549 = load i8, i8* %406, align 1
  %550 = sext i8 %549 to i32
  %551 = add nsw i32 %548, %550
  %552 = load i8, i8* %407, align 1
  %553 = sext i8 %552 to i32
  %554 = add nsw i32 %551, %553
  %555 = load i8, i8* %408, align 1
  %556 = sext i8 %555 to i32
  %557 = add nsw i32 %554, %556
  %558 = zext i8 %533 to i32
  br label %559

559:                                              ; preds = %530, %527
  %560 = phi i32 [ %426, %527 ], [ %557, %530 ]
  %561 = phi i32 [ %425, %527 ], [ 1, %530 ]
  %562 = phi i32 [ %424, %527 ], [ %558, %530 ]
  switch i32 %442, label %1080 [
    i32 4, label %567
    i32 9, label %586
    i32 0, label %860
    i32 1, label %860
    i32 2, label %860
    i32 3, label %860
    i32 8, label %890
    i32 5, label %1004
    i32 6, label %1004
    i32 7, label %563
  ]

563:                                              ; preds = %559
  %564 = getelementptr inbounds %union.int_mv, %union.int_mv* %485, i64 7
  %565 = bitcast %union.int_mv* %564 to i16*
  %566 = load i16, i16* %565, align 4
  br label %1049

567:                                              ; preds = %559
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %372) #8
  store i32 -1431655766, i32* %31, align 4
  %568 = load i32, i32* %84, align 4
  %569 = call fastcc i32 @rd_pick_intra4x4mby_modes(%struct.macroblock* %1, i32* nonnull %18, i32* %58, i32* nonnull %31, i32 %568)
  %570 = load i32, i32* %18, align 4
  %571 = load i32, i32* %57, align 4
  %572 = add nsw i32 %571, %570
  store i32 %572, i32* %57, align 4
  %573 = load i32, i32* %31, align 4
  %574 = load i32, i32* %60, align 4
  %575 = add nsw i32 %574, %573
  store i32 %575, i32* %60, align 4
  %576 = load i32, i32* %84, align 4
  %577 = icmp slt i32 %569, %576
  br i1 %577, label %578, label %584

578:                                              ; preds = %567
  %579 = load i32, i32* %20, align 4
  %580 = add nsw i32 %579, %572
  store i32 %580, i32* %57, align 4
  %581 = load i32, i32* %22, align 4
  store i32 %581, i32* %59, align 4
  %582 = load i32, i32* %21, align 4
  %583 = add nsw i32 %582, %575
  store i32 %583, i32* %60, align 4
  store i32 %582, i32* %61, align 4
  br label %585

584:                                              ; preds = %567
  store i32 1, i32* %29, align 4
  br label %585

585:                                              ; preds = %584, %578
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %372) #8
  br label %1080

586:                                              ; preds = %559
  %587 = lshr i64 73741, %419
  %588 = and i64 %587, 1
  %589 = icmp eq i64 %588, 0
  %590 = select i1 %589, i32* %257, i32* %256
  %591 = lshr i64 147760, %419
  %592 = and i64 %591, 1
  %593 = icmp eq i64 %592, 0
  %594 = select i1 %593, i32* %590, i32* %258
  %595 = load i32, i32* %594, align 4
  %596 = load i32, i32* %84, align 4
  call void @llvm.lifetime.start.p0i8(i64 216, i8* nonnull %259) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %261, i8 0, i64 200, i1 false) #8
  store i32 %596, i32* %262, align 4
  store %union.int_mv* %14, %union.int_mv** %263, align 8
  %597 = load i32, i32* %47, align 4
  store i32 %597, i32* %264, align 8
  store i32 %595, i32* %265, align 8
  store i32* %53, i32** %266, align 8
  store <4 x i32> <i32 12, i32 12, i32 12, i32 12>, <4 x i32>* %413, align 8
  store <4 x i32> <i32 12, i32 12, i32 12, i32 12>, <4 x i32>* %414, align 8
  store i32 12, i32* %269, align 8
  store i32 12, i32* %270, align 4
  store i32 12, i32* %271, align 8
  store <4 x i32> <i32 12, i32 12, i32 12, i32 12>, <4 x i32>* %415, align 4
  store i32 12, i32* %273, align 4
  %598 = load i32, i32* %274, align 4
  %599 = icmp eq i32 %598, 0
  br i1 %599, label %600, label %601

600:                                              ; preds = %586
  call fastcc void @rd_check_segment(%struct.VP8_COMP* %0, %struct.macroblock* %1, %struct.BEST_SEG_INFO* nonnull %11, i32 0) #8
  call fastcc void @rd_check_segment(%struct.VP8_COMP* %0, %struct.macroblock* %1, %struct.BEST_SEG_INFO* nonnull %11, i32 1) #8
  call fastcc void @rd_check_segment(%struct.VP8_COMP* %0, %struct.macroblock* %1, %struct.BEST_SEG_INFO* nonnull %11, i32 2) #8
  call fastcc void @rd_check_segment(%struct.VP8_COMP* %0, %struct.macroblock* %1, %struct.BEST_SEG_INFO* nonnull %11, i32 3) #8
  br label %752

601:                                              ; preds = %586
  call fastcc void @rd_check_segment(%struct.VP8_COMP* %0, %struct.macroblock* %1, %struct.BEST_SEG_INFO* nonnull %11, i32 2) #8
  %602 = load i32, i32* %262, align 4
  %603 = icmp slt i32 %602, %596
  br i1 %603, label %604, label %752

604:                                              ; preds = %601
  %605 = load i16, i16* %220, align 2
  %606 = sext i16 %605 to i32
  %607 = add nsw i32 %606, 7
  %608 = ashr i32 %607, 3
  %609 = add nsw i32 %608, -255
  %610 = load i16, i16* %221, align 4
  %611 = sext i16 %610 to i32
  %612 = add nsw i32 %611, 7
  %613 = ashr i32 %612, 3
  %614 = add nsw i32 %613, -255
  %615 = ashr i32 %606, 3
  %616 = add nsw i32 %615, 255
  %617 = ashr i32 %611, 3
  %618 = add nsw i32 %617, 255
  %619 = load <4 x i32>, <4 x i32>* %416, align 16
  %620 = extractelement <4 x i32> %619, i32 0
  %621 = icmp slt i32 %620, %609
  br i1 %621, label %622, label %623

622:                                              ; preds = %604
  store i32 %609, i32* %222, align 16
  br label %623

623:                                              ; preds = %622, %604
  %624 = extractelement <4 x i32> %619, i32 1
  %625 = icmp sgt i32 %624, %616
  br i1 %625, label %626, label %627

626:                                              ; preds = %623
  store i32 %616, i32* %223, align 4
  br label %627

627:                                              ; preds = %626, %623
  %628 = extractelement <4 x i32> %619, i32 2
  %629 = icmp slt i32 %628, %614
  br i1 %629, label %630, label %631

630:                                              ; preds = %627
  store i32 %614, i32* %224, align 8
  br label %631

631:                                              ; preds = %630, %627
  %632 = extractelement <4 x i32> %619, i32 3
  %633 = icmp sgt i32 %632, %618
  br i1 %633, label %634, label %635

634:                                              ; preds = %631
  store i32 %618, i32* %225, align 4
  br label %635

635:                                              ; preds = %634, %631
  %636 = load i32, i32* %275, align 8
  store i32 %636, i32* %277, align 8
  %637 = load i32, i32* %278, align 8
  store i32 %637, i32* %280, align 4
  %638 = load i32, i32* %281, align 8
  store i32 %638, i32* %283, align 8
  %639 = load i32, i32* %284, align 8
  store i32 %639, i32* %286, align 4
  %640 = shl i32 %636, 16
  %641 = ashr exact i32 %640, 16
  %642 = shl i32 %638, 16
  %643 = ashr exact i32 %642, 16
  %644 = sub nsw i32 %641, %643
  %645 = icmp slt i32 %644, 0
  %646 = sub nsw i32 0, %644
  %647 = select i1 %645, i32 %646, i32 %644
  %648 = lshr i32 %647, 3
  %649 = ashr i32 %636, 16
  %650 = ashr i32 %638, 16
  %651 = sub nsw i32 %649, %650
  %652 = icmp slt i32 %651, 0
  %653 = sub nsw i32 0, %651
  %654 = select i1 %652, i32 %653, i32 %651
  %655 = lshr i32 %654, 3
  %656 = icmp ugt i32 %648, %655
  %657 = select i1 %656, i32 %648, i32 %655
  %658 = icmp sgt i32 %657, 1
  %659 = select i1 %658, i32 %657, i32 1
  %660 = icmp slt i32 %659, 128
  %661 = select i1 %660, i32 %659, i32 128
  %662 = lshr i32 %661, 1
  %663 = call i32 @llvm.ctlz.i32(i32 %662, i1 false) #8, !range !14
  %664 = add nsw i32 %663, -25
  store i32 %664, i32* %293, align 8
  %665 = shl i32 %637, 16
  %666 = ashr exact i32 %665, 16
  %667 = shl i32 %639, 16
  %668 = ashr exact i32 %667, 16
  %669 = sub nsw i32 %666, %668
  %670 = icmp slt i32 %669, 0
  %671 = sub nsw i32 0, %669
  %672 = select i1 %670, i32 %671, i32 %669
  %673 = lshr i32 %672, 3
  %674 = ashr i32 %637, 16
  %675 = ashr i32 %639, 16
  %676 = sub nsw i32 %674, %675
  %677 = icmp slt i32 %676, 0
  %678 = sub nsw i32 0, %676
  %679 = select i1 %677, i32 %678, i32 %676
  %680 = lshr i32 %679, 3
  %681 = icmp ugt i32 %673, %680
  %682 = select i1 %681, i32 %673, i32 %680
  %683 = icmp sgt i32 %682, 1
  %684 = select i1 %683, i32 %682, i32 1
  %685 = icmp slt i32 %684, 128
  %686 = select i1 %685, i32 %684, i32 128
  %687 = lshr i32 %686, 1
  %688 = call i32 @llvm.ctlz.i32(i32 %687, i1 false) #8, !range !14
  %689 = add nsw i32 %688, -25
  store i32 %689, i32* %300, align 4
  call fastcc void @rd_check_segment(%struct.VP8_COMP* %0, %struct.macroblock* %1, %struct.BEST_SEG_INFO* nonnull %11, i32 1) #8
  %690 = load i16, i16* %288, align 8
  %691 = sext i16 %690 to i32
  %692 = load i16, i16* %295, align 4
  %693 = sext i16 %692 to i32
  %694 = sub nsw i32 %691, %693
  %695 = icmp slt i32 %694, 0
  %696 = sub nsw i32 0, %694
  %697 = select i1 %695, i32 %696, i32 %694
  %698 = lshr i32 %697, 3
  %699 = load i16, i16* %291, align 2
  %700 = sext i16 %699 to i32
  %701 = load i16, i16* %298, align 2
  %702 = sext i16 %701 to i32
  %703 = sub nsw i32 %700, %702
  %704 = icmp slt i32 %703, 0
  %705 = sub nsw i32 0, %703
  %706 = select i1 %704, i32 %705, i32 %703
  %707 = lshr i32 %706, 3
  %708 = icmp ugt i32 %698, %707
  %709 = select i1 %708, i32 %698, i32 %707
  %710 = icmp sgt i32 %709, 1
  %711 = select i1 %710, i32 %709, i32 1
  %712 = icmp slt i32 %711, 128
  %713 = select i1 %712, i32 %711, i32 128
  %714 = lshr i32 %713, 1
  %715 = call i32 @llvm.ctlz.i32(i32 %714, i1 false) #8, !range !14
  %716 = add nsw i32 %715, -25
  store i32 %716, i32* %293, align 8
  %717 = load i16, i16* %290, align 8
  %718 = sext i16 %717 to i32
  %719 = load i16, i16* %297, align 4
  %720 = sext i16 %719 to i32
  %721 = sub nsw i32 %718, %720
  %722 = icmp slt i32 %721, 0
  %723 = sub nsw i32 0, %721
  %724 = select i1 %722, i32 %723, i32 %721
  %725 = lshr i32 %724, 3
  %726 = load i16, i16* %292, align 2
  %727 = sext i16 %726 to i32
  %728 = load i16, i16* %299, align 2
  %729 = sext i16 %728 to i32
  %730 = sub nsw i32 %727, %729
  %731 = icmp slt i32 %730, 0
  %732 = sub nsw i32 0, %730
  %733 = select i1 %731, i32 %732, i32 %730
  %734 = lshr i32 %733, 3
  %735 = icmp ugt i32 %725, %734
  %736 = select i1 %735, i32 %725, i32 %734
  %737 = icmp sgt i32 %736, 1
  %738 = select i1 %737, i32 %736, i32 1
  %739 = icmp slt i32 %738, 128
  %740 = select i1 %739, i32 %738, i32 128
  %741 = lshr i32 %740, 1
  %742 = call i32 @llvm.ctlz.i32(i32 %741, i1 false) #8, !range !14
  %743 = add nsw i32 %742, -25
  store i32 %743, i32* %300, align 4
  call fastcc void @rd_check_segment(%struct.VP8_COMP* %0, %struct.macroblock* %1, %struct.BEST_SEG_INFO* nonnull %11, i32 0) #8
  %744 = load i32, i32* %301, align 4
  %745 = icmp ne i32 %744, 0
  %746 = load i32, i32* %260, align 8
  %747 = icmp eq i32 %746, 2
  %748 = or i1 %745, %747
  br i1 %748, label %749, label %751

749:                                              ; preds = %635
  %750 = load i32, i32* %277, align 8
  store i32 %750, i32* %264, align 8
  call fastcc void @rd_check_segment(%struct.VP8_COMP* %0, %struct.macroblock* %1, %struct.BEST_SEG_INFO* nonnull %11, i32 3) #8
  br label %751

751:                                              ; preds = %635, %749
  store <4 x i32> %619, <4 x i32>* %417, align 16
  br label %752

752:                                              ; preds = %751, %601, %600
  %753 = load i32, i32* %275, align 8
  store i32 %753, i32* %302, align 8
  %754 = load i8, i8* %303, align 8
  %755 = load i8*, i8** %304, align 8
  store i8 %754, i8* %755, align 1
  %756 = load i32, i32* %305, align 4
  store i32 %756, i32* %306, align 8
  %757 = load i8, i8* %307, align 1
  %758 = load i8*, i8** %308, align 8
  store i8 %757, i8* %758, align 1
  %759 = load i32, i32* %278, align 8
  store i32 %759, i32* %309, align 8
  %760 = load i8, i8* %310, align 2
  %761 = load i8*, i8** %311, align 8
  store i8 %760, i8* %761, align 1
  %762 = load i32, i32* %312, align 4
  store i32 %762, i32* %313, align 8
  %763 = load i8, i8* %314, align 1
  %764 = load i8*, i8** %315, align 8
  store i8 %763, i8* %764, align 1
  %765 = load i32, i32* %316, align 8
  store i32 %765, i32* %317, align 8
  %766 = load i8, i8* %318, align 4
  %767 = load i8*, i8** %319, align 8
  store i8 %766, i8* %767, align 1
  %768 = load i32, i32* %320, align 4
  store i32 %768, i32* %321, align 8
  %769 = load i8, i8* %322, align 1
  %770 = load i8*, i8** %323, align 8
  store i8 %769, i8* %770, align 1
  %771 = load i32, i32* %324, align 8
  store i32 %771, i32* %325, align 8
  %772 = load i8, i8* %326, align 2
  %773 = load i8*, i8** %327, align 8
  store i8 %772, i8* %773, align 1
  %774 = load i32, i32* %328, align 4
  store i32 %774, i32* %329, align 8
  %775 = load i8, i8* %330, align 1
  %776 = load i8*, i8** %331, align 8
  store i8 %775, i8* %776, align 1
  %777 = load i32, i32* %281, align 8
  store i32 %777, i32* %332, align 8
  %778 = load i8, i8* %333, align 8
  %779 = load i8*, i8** %334, align 8
  store i8 %778, i8* %779, align 1
  %780 = load i32, i32* %335, align 4
  store i32 %780, i32* %336, align 8
  %781 = load i8, i8* %337, align 1
  %782 = load i8*, i8** %338, align 8
  store i8 %781, i8* %782, align 1
  %783 = load i32, i32* %284, align 8
  store i32 %783, i32* %339, align 8
  %784 = load i8, i8* %340, align 2
  %785 = load i8*, i8** %341, align 8
  store i8 %784, i8* %785, align 1
  %786 = load i32, i32* %342, align 4
  store i32 %786, i32* %343, align 8
  %787 = load i8, i8* %344, align 1
  %788 = load i8*, i8** %345, align 8
  store i8 %787, i8* %788, align 1
  %789 = load i32, i32* %346, align 8
  store i32 %789, i32* %347, align 8
  %790 = load i8, i8* %348, align 4
  %791 = load i8*, i8** %349, align 8
  store i8 %790, i8* %791, align 1
  %792 = load i32, i32* %350, align 4
  store i32 %792, i32* %351, align 8
  %793 = load i8, i8* %352, align 1
  %794 = load i8*, i8** %353, align 8
  store i8 %793, i8* %794, align 1
  %795 = load i32, i32* %354, align 8
  store i32 %795, i32* %355, align 8
  %796 = load i8, i8* %356, align 2
  %797 = load i8*, i8** %357, align 8
  store i8 %796, i8* %797, align 1
  %798 = load i32, i32* %358, align 4
  store i32 %798, i32* %359, align 8
  %799 = load i8, i8* %360, align 1
  %800 = load i8*, i8** %361, align 8
  store i8 %799, i8* %800, align 1
  %801 = load i32, i32* %362, align 4
  store i32 %801, i32* %18, align 4
  %802 = load i32, i32* %363, align 8
  %803 = load i32, i32* %364, align 4
  store i32 %803, i32* %58, align 4
  %804 = load i32, i32* %260, align 8
  %805 = trunc i32 %804 to i8
  %806 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %807 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %806, i64 0, i32 0, i32 5
  store i8 %805, i8* %807, align 4
  %808 = load i32, i32* %260, align 8
  %809 = sext i32 %808 to i64
  %810 = getelementptr inbounds [4 x i32], [4 x i32]* @vp8_mbsplit_count, i64 0, i64 %809
  %811 = load i32, i32* %810, align 4
  %812 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %365, align 32
  %813 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %812, i64 0, i32 0
  store i32 %811, i32* %813, align 4
  %814 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %365, align 32
  %815 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %814, i64 0, i32 0
  %816 = load i32, i32* %815, align 4
  %817 = icmp sgt i32 %816, 0
  br i1 %817, label %818, label %839

818:                                              ; preds = %752, %818
  %819 = phi i64 [ %833, %818 ], [ 0, %752 ]
  %820 = phi %struct.PARTITION_INFO* [ %834, %818 ], [ %814, %752 ]
  %821 = load i32, i32* %260, align 8
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* @vp8_mbsplit_offset, i64 0, i64 %822, i64 %819
  %824 = load i8, i8* %823, align 1
  %825 = zext i8 %824 to i64
  %826 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 7, i64 %825
  %827 = load i32, i32* %826, align 4
  %828 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %820, i64 0, i32 1, i64 %819, i32 0
  store i32 %827, i32* %828, align 4
  %829 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %365, align 32
  %830 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %11, i64 0, i32 8, i64 %825, i32 0
  %831 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %829, i64 0, i32 1, i64 %819, i32 1, i32 0
  %832 = load i32, i32* %830, align 4
  store i32 %832, i32* %831, align 4
  %833 = add nuw nsw i64 %819, 1
  %834 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %365, align 32
  %835 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %834, i64 0, i32 0
  %836 = load i32, i32* %835, align 4
  %837 = sext i32 %836 to i64
  %838 = icmp slt i64 %833, %837
  br i1 %838, label %818, label %839

839:                                              ; preds = %818, %752
  %840 = phi %struct.PARTITION_INFO* [ %814, %752 ], [ %834, %818 ]
  %841 = load i32, i32* %358, align 4
  %842 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %840, i64 0, i32 1, i64 15, i32 1, i32 0
  store i32 %841, i32* %842, align 4
  %843 = load i32, i32* %262, align 4
  call void @llvm.lifetime.end.p0i8(i64 216, i8* nonnull %259) #8
  %844 = load i32, i32* %57, align 4
  %845 = add nsw i32 %844, %801
  store i32 %845, i32* %57, align 4
  %846 = load i32, i32* %60, align 4
  %847 = add nsw i32 %846, %802
  store i32 %847, i32* %60, align 4
  %848 = load i32, i32* %84, align 4
  %849 = icmp slt i32 %843, %848
  br i1 %849, label %850, label %859

850:                                              ; preds = %839
  call void @vp8_build_inter4x4_predictors_mbuv(%struct.macroblockd* %40) #8
  %851 = load i8*, i8** %367, align 32
  %852 = load i8*, i8** %368, align 8
  %853 = load i32, i32* %369, align 4
  call void @vp8_subtract_mbuv(i16* %366, i8* %851, i8* %852, i32 %853, i8* %370, i8* %371, i32 8) #8
  call void @vp8_transform_mbuv(%struct.macroblock* %1) #8
  call void @vp8_quantize_mbuv(%struct.macroblock* %1) #8
  %854 = call fastcc i32 @rd_cost_mbuv(%struct.macroblock* %1) #8
  store i32 %854, i32* %59, align 4
  %855 = call i32 @vp8_mbuverror_sse2(%struct.macroblock* %1) #8
  %856 = sdiv i32 %855, 4
  store i32 %856, i32* %61, align 4
  %857 = add nsw i32 %854, %845
  store i32 %857, i32* %57, align 4
  %858 = add nsw i32 %856, %847
  store i32 %858, i32* %60, align 4
  br label %1080

859:                                              ; preds = %839
  store i32 1, i32* %29, align 4
  br label %1080

860:                                              ; preds = %559, %559, %559, %559
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %250) #8
  store i32 -1431655766, i32* %32, align 4
  %861 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %862 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %861, i64 0, i32 0, i32 2
  store i8 0, i8* %862, align 2
  %863 = load i8*, i8** %251, align 8
  %864 = load i32, i32* %252, align 16
  %865 = sext i32 %864 to i64
  %866 = sub nsw i64 0, %865
  %867 = getelementptr inbounds i8, i8* %863, i64 %866
  %868 = getelementptr inbounds i8, i8* %863, i64 -1
  call void @vp8_build_intra_predictors_mby_s(%struct.macroblockd* %40, i8* %867, i8* %868, i32 %864, i8* %253, i32 16) #8
  call fastcc void @macro_block_yrd(%struct.macroblock* %1, i32* %58, i32* nonnull %32)
  %869 = load i32, i32* %58, align 4
  %870 = load i32, i32* %57, align 4
  %871 = add nsw i32 %870, %869
  %872 = load i32, i32* %32, align 4
  %873 = load i32, i32* %60, align 4
  %874 = add nsw i32 %873, %872
  %875 = load [10 x i32]*, [10 x i32]** %254, align 8
  %876 = load i32, i32* %255, align 4
  %877 = zext i32 %876 to i64
  %878 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %879 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %878, i64 0, i32 0, i32 0
  %880 = load i8, i8* %879, align 4
  %881 = zext i8 %880 to i64
  %882 = getelementptr inbounds [10 x i32], [10 x i32]* %875, i64 %877, i64 %881
  %883 = load i32, i32* %882, align 4
  %884 = add nsw i32 %883, %871
  %885 = load i32, i32* %20, align 4
  %886 = add nsw i32 %885, %884
  store i32 %886, i32* %57, align 4
  %887 = load i32, i32* %22, align 4
  store i32 %887, i32* %59, align 4
  %888 = load i32, i32* %21, align 4
  %889 = add nsw i32 %888, %874
  store i32 %889, i32* %60, align 4
  store i32 %888, i32* %61, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %250) #8
  br label %1080

890:                                              ; preds = %559
  %891 = load i32, i32* %215, align 8
  %892 = load i32, i32* %216, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %217) #8
  store i32 -1431655766, i32* %218, align 4
  %893 = load i16, i16* %220, align 2
  %894 = sext i16 %893 to i32
  %895 = add nsw i32 %894, 7
  %896 = ashr i32 %895, 3
  %897 = add nsw i32 %896, -255
  %898 = load i16, i16* %221, align 4
  %899 = sext i16 %898 to i32
  %900 = add nsw i32 %899, 7
  %901 = ashr i32 %900, 3
  %902 = add nsw i32 %901, -255
  %903 = ashr i32 %894, 3
  %904 = add nsw i32 %903, 255
  %905 = ashr i32 %899, 3
  %906 = add nsw i32 %905, 255
  %907 = load <4 x i32>, <4 x i32>* %410, align 16
  %908 = icmp eq i32 %423, 0
  br i1 %908, label %909, label %910

909:                                              ; preds = %890
  call void @vp8_cal_sad(%struct.VP8_COMP* %0, %struct.macroblockd* %40, %struct.macroblock* %1, i32 %2, i32* nonnull %226)
  br label %910

910:                                              ; preds = %890, %909
  %911 = phi i32 [ %423, %890 ], [ 1, %909 ]
  %912 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %913 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %912, i64 0, i32 0, i32 2
  %914 = load i8, i8* %913, align 2
  %915 = zext i8 %914 to i32
  call void @vp8_mv_pred(%struct.VP8_COMP* %0, %struct.macroblockd* %40, %struct.modeinfo* %912, %union.int_mv* nonnull %23, i32 %915, i32* %227, i32* nonnull %25, i32* nonnull %226)
  %916 = load i16, i16* %229, align 2
  %917 = ashr i16 %916, 3
  store i16 %917, i16* %231, align 2
  %918 = load i16, i16* %232, align 4
  %919 = ashr i16 %918, 3
  store i16 %919, i16* %233, align 4
  %920 = load i32, i32* %222, align 16
  %921 = icmp slt i32 %920, %897
  br i1 %921, label %922, label %923

922:                                              ; preds = %910
  store i32 %897, i32* %222, align 16
  br label %923

923:                                              ; preds = %922, %910
  %924 = load i32, i32* %223, align 4
  %925 = icmp sgt i32 %924, %904
  br i1 %925, label %926, label %927

926:                                              ; preds = %923
  store i32 %904, i32* %223, align 4
  br label %927

927:                                              ; preds = %926, %923
  %928 = load i32, i32* %224, align 8
  %929 = icmp slt i32 %928, %902
  br i1 %929, label %930, label %931

930:                                              ; preds = %927
  store i32 %902, i32* %224, align 8
  br label %931

931:                                              ; preds = %930, %927
  %932 = load i32, i32* %225, align 4
  %933 = icmp sgt i32 %932, %906
  br i1 %933, label %934, label %935

934:                                              ; preds = %931
  store i32 %906, i32* %225, align 4
  br label %935

935:                                              ; preds = %934, %931
  %936 = load i32, i32* %25, align 4
  %937 = icmp sgt i32 %936, %891
  %938 = select i1 %937, i32 %936, i32 %891
  %939 = load i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)** %234, align 32
  %940 = call i32 %939(%struct.macroblock* %1, %struct.block* %39, %struct.blockd* %41, %union.int_mv* nonnull %33, %union.int_mv* %236, i32 %938, i32 %892, i32* nonnull %15, %struct.variance_vtable* %237, i32** %238, %union.int_mv* nonnull %14) #8
  %941 = load i32, i32* %239, align 8
  %942 = getelementptr inbounds %union.int_mv, %union.int_mv* %485, i64 8
  %943 = getelementptr inbounds %union.int_mv, %union.int_mv* %942, i64 0, i32 0
  store i32 %941, i32* %943, align 4
  %944 = load i32, i32* %240, align 4
  %945 = xor i32 %938, -1
  %946 = add i32 %944, %945
  %947 = load i32, i32* %15, align 4
  store i32 0, i32* %15, align 4
  %948 = icmp sle i32 %947, %946
  %949 = zext i1 %948 to i32
  %950 = icmp slt i32 %947, %946
  br i1 %950, label %951, label %980

951:                                              ; preds = %935, %974
  %952 = phi i32 [ %975, %974 ], [ %941, %935 ]
  %953 = phi i32 [ %976, %974 ], [ 0, %935 ]
  %954 = phi i32 [ %978, %974 ], [ %949, %935 ]
  %955 = phi i32 [ %957, %974 ], [ %947, %935 ]
  %956 = phi i32 [ %977, %974 ], [ %940, %935 ]
  %957 = add nsw i32 %955, 1
  %958 = icmp eq i32 %953, 0
  br i1 %958, label %961, label %959

959:                                              ; preds = %951
  %960 = add nsw i32 %953, -1
  store i32 %960, i32* %15, align 4
  br label %974

961:                                              ; preds = %951
  %962 = load i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)** %234, align 32
  %963 = add nsw i32 %957, %938
  %964 = call i32 %962(%struct.macroblock* %1, %struct.block* %39, %struct.blockd* %41, %union.int_mv* nonnull %33, %union.int_mv* %236, i32 %963, i32 %892, i32* nonnull %15, %struct.variance_vtable* %237, i32** %238, %union.int_mv* nonnull %14) #8
  %965 = load i32, i32* %15, align 4
  %966 = sub nsw i32 %946, %957
  %967 = icmp sgt i32 %965, %966
  %968 = select i1 %967, i32 0, i32 %954
  %969 = icmp slt i32 %964, %956
  br i1 %969, label %970, label %972

970:                                              ; preds = %961
  %971 = load i32, i32* %239, align 8
  store i32 %971, i32* %943, align 4
  br label %974

972:                                              ; preds = %961
  %973 = load i32, i32* %943, align 4
  store i32 %973, i32* %239, align 8
  br label %974

974:                                              ; preds = %970, %972, %959
  %975 = phi i32 [ %952, %959 ], [ %971, %970 ], [ %973, %972 ]
  %976 = phi i32 [ %960, %959 ], [ %965, %970 ], [ %965, %972 ]
  %977 = phi i32 [ %956, %959 ], [ %964, %970 ], [ %956, %972 ]
  %978 = phi i32 [ %954, %959 ], [ %968, %970 ], [ %968, %972 ]
  %979 = icmp sgt i32 %946, %957
  br i1 %979, label %951, label %980

980:                                              ; preds = %974, %935
  %981 = phi i32 [ %941, %935 ], [ %975, %974 ]
  %982 = phi i32 [ %940, %935 ], [ %977, %974 ]
  %983 = phi i32 [ %949, %935 ], [ %978, %974 ]
  %984 = icmp eq i32 %983, 1
  br i1 %984, label %985, label %993

985:                                              ; preds = %980
  %986 = load i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)** %241, align 8
  %987 = call i32 %986(%struct.macroblock* %1, %struct.block* %39, %struct.blockd* %41, %union.int_mv* %236, i32 %892, i32 8, %struct.variance_vtable* %237, i32** %238, %union.int_mv* nonnull %14) #8
  %988 = icmp slt i32 %987, %982
  br i1 %988, label %989, label %991

989:                                              ; preds = %985
  %990 = load i32, i32* %239, align 8
  store i32 %990, i32* %943, align 4
  store <4 x i32> %907, <4 x i32>* %412, align 16
  br label %996

991:                                              ; preds = %985
  %992 = load i32, i32* %943, align 4
  store i32 %992, i32* %239, align 8
  br label %993

993:                                              ; preds = %991, %980
  %994 = phi i32 [ %992, %991 ], [ %981, %980 ]
  store <4 x i32> %907, <4 x i32>* %411, align 16
  %995 = icmp eq i32 %982, 2147483647
  br i1 %995, label %1001, label %996

996:                                              ; preds = %989, %993
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %242) #8
  store i32 -1431655766, i32* %34, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %243) #8
  store i32 -1431655766, i32* %35, align 4
  %997 = load i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)** %244, align 8
  %998 = load i32, i32* %245, align 8
  %999 = call i32 %997(%struct.macroblock* %1, %struct.block* %39, %struct.blockd* %41, %union.int_mv* %236, %union.int_mv* nonnull %14, i32 %998, %struct.variance_vtable* %237, i32** %238, i32* nonnull %34, i32* nonnull %35) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %243) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %242) #8
  %1000 = load i32, i32* %239, align 8
  br label %1001

1001:                                             ; preds = %993, %996
  %1002 = phi i32 [ %994, %993 ], [ %1000, %996 ]
  store i32 %1002, i32* %943, align 4
  %1003 = call i32 @vp8_mv_bit_cost(%union.int_mv* %942, %union.int_mv* nonnull %14, i32** %238, i32 96) #8
  store i32 %1003, i32* %57, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %217) #8
  br label %1004

1004:                                             ; preds = %559, %559, %1001
  %1005 = phi i32 [ %423, %559 ], [ %423, %559 ], [ %911, %1001 ]
  %1006 = zext i32 %442 to i64
  %1007 = getelementptr inbounds %union.int_mv, %union.int_mv* %485, i64 %1006
  %1008 = bitcast %union.int_mv* %1007 to %struct.MV*
  %1009 = getelementptr inbounds %struct.MV, %struct.MV* %1008, i64 0, i32 1
  %1010 = load i16, i16* %1009, align 2
  %1011 = sext i16 %1010 to i32
  %1012 = load i32, i32* %246, align 4
  %1013 = add nsw i32 %1012, -128
  %1014 = icmp sgt i32 %1013, %1011
  br i1 %1014, label %1019, label %1015

1015:                                             ; preds = %1004
  %1016 = load i32, i32* %247, align 8
  %1017 = add nsw i32 %1016, 128
  %1018 = icmp slt i32 %1017, %1011
  br i1 %1018, label %1019, label %1022

1019:                                             ; preds = %1015, %1004
  %1020 = phi i32 [ %1013, %1004 ], [ %1017, %1015 ]
  %1021 = trunc i32 %1020 to i16
  store i16 %1021, i16* %1009, align 2
  br label %1022

1022:                                             ; preds = %1019, %1015
  %1023 = bitcast %union.int_mv* %1007 to i16*
  %1024 = load i16, i16* %1023, align 4
  %1025 = sext i16 %1024 to i32
  %1026 = load i32, i32* %248, align 4
  %1027 = add nsw i32 %1026, -128
  %1028 = icmp sgt i32 %1027, %1025
  br i1 %1028, label %1029, label %1031

1029:                                             ; preds = %1022
  %1030 = trunc i32 %1027 to i16
  br label %1037

1031:                                             ; preds = %1022
  %1032 = load i32, i32* %249, align 16
  %1033 = add nsw i32 %1032, 128
  %1034 = icmp slt i32 %1033, %1025
  br i1 %1034, label %1035, label %1039

1035:                                             ; preds = %1031
  %1036 = trunc i32 %1033 to i16
  br label %1037

1037:                                             ; preds = %1035, %1029
  %1038 = phi i16 [ %1030, %1029 ], [ %1036, %1035 ]
  store i16 %1038, i16* %1023, align 4
  br label %1039

1039:                                             ; preds = %1037, %1031
  %1040 = phi i16 [ %1024, %1031 ], [ %1038, %1037 ]
  %1041 = lshr i64 940, %419
  %1042 = and i64 %1041, 1
  %1043 = icmp eq i64 %1042, 0
  br i1 %1043, label %1049, label %1044

1044:                                             ; preds = %1039
  %1045 = getelementptr inbounds %union.int_mv, %union.int_mv* %1007, i64 0, i32 0
  %1046 = load i32, i32* %1045, align 4
  %1047 = icmp eq i32 %1046, 0
  %1048 = trunc i32 %1046 to i16
  br i1 %1047, label %1210, label %1049

1049:                                             ; preds = %563, %1039, %1044
  %1050 = phi i64 [ 7, %563 ], [ %1006, %1039 ], [ %1006, %1044 ]
  %1051 = phi i16 [ %566, %563 ], [ %1040, %1039 ], [ %1048, %1044 ]
  %1052 = phi i32 [ %423, %563 ], [ %1005, %1039 ], [ %1005, %1044 ]
  %1053 = getelementptr inbounds %union.int_mv, %union.int_mv* %485, i64 %1050
  %1054 = bitcast %union.int_mv* %1053 to %struct.MV*
  %1055 = ashr i16 %1051, 3
  %1056 = sext i16 %1055 to i32
  %1057 = load i32, i32* %224, align 8
  %1058 = icmp sgt i32 %1057, %1056
  br i1 %1058, label %1210, label %1059

1059:                                             ; preds = %1049
  %1060 = load i32, i32* %225, align 4
  %1061 = icmp slt i32 %1060, %1056
  br i1 %1061, label %1210, label %1062

1062:                                             ; preds = %1059
  %1063 = getelementptr inbounds %struct.MV, %struct.MV* %1054, i64 0, i32 1
  %1064 = load i16, i16* %1063, align 2
  %1065 = ashr i16 %1064, 3
  %1066 = sext i16 %1065 to i32
  %1067 = load i32, i32* %222, align 16
  %1068 = icmp sgt i32 %1067, %1066
  br i1 %1068, label %1210, label %1069

1069:                                             ; preds = %1062
  %1070 = load i32, i32* %223, align 4
  %1071 = icmp slt i32 %1070, %1066
  br i1 %1071, label %1210, label %1072

1072:                                             ; preds = %1069
  %1073 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1074 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1073, i64 0, i32 0, i32 0
  store i8 %443, i8* %1074, align 4
  %1075 = getelementptr inbounds %union.int_mv, %union.int_mv* %1053, i64 0, i32 0
  %1076 = load i32, i32* %1075, align 4
  %1077 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1078 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1077, i64 0, i32 0, i32 4, i32 0
  store i32 %1076, i32* %1078, align 4
  %1079 = call fastcc i32 @evaluate_inter_mode_rd(i32* nonnull %53, %struct.rate_distortion_struct* nonnull %19, i32* nonnull %29, %struct.VP8_COMP* %0, %struct.macroblock* %1)
  br label %1080

1080:                                             ; preds = %850, %859, %559, %1072, %860, %585
  %1081 = phi i32 [ %423, %559 ], [ %1052, %1072 ], [ %423, %860 ], [ %423, %585 ], [ %423, %859 ], [ %423, %850 ]
  %1082 = phi i32 [ 2147483647, %559 ], [ %1079, %1072 ], [ 2147483647, %860 ], [ 2147483647, %585 ], [ 2147483647, %859 ], [ 2147483647, %850 ]
  %1083 = load i32, i32* %29, align 4
  %1084 = call fastcc i32 @calculate_final_rd_costs(i32 %1082, %struct.rate_distortion_struct* nonnull %19, i32* nonnull %30, i32 %1083, i32 %560, i32 %80, %struct.VP8_COMP* %0, %struct.macroblock* %1)
  %1085 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1086 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1085, i64 0, i32 0, i32 2
  %1087 = load i8, i8* %1086, align 2
  %1088 = icmp eq i8 %1087, 0
  %1089 = load i32, i32* %85, align 4
  %1090 = icmp slt i32 %1084, %1089
  %1091 = and i1 %1088, %1090
  br i1 %1091, label %1092, label %1094

1092:                                             ; preds = %1080
  store i32 %1084, i32* %85, align 4
  %1093 = load i32, i32* %60, align 4
  store i32 %1093, i32* %6, align 4
  br label %1094

1094:                                             ; preds = %1092, %1080
  %1095 = load i32, i32* %373, align 8
  %1096 = icmp eq i32 %1095, 0
  br i1 %1096, label %1135, label %1097

1097:                                             ; preds = %1094
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %374) #8
  store i32 -1431655766, i32* %36, align 4
  %1098 = zext i32 %442 to i64
  %1099 = getelementptr inbounds %union.int_mv, %union.int_mv* %485, i64 %1098, i32 0
  %1100 = load i32, i32* %1099, align 4
  %1101 = call i32 @vp8_get_inter_mbpred_error(%struct.macroblock* %1, %struct.variance_vtable* %237, i32* nonnull %36, i32 %1100) #8
  %1102 = load i32, i32* %36, align 4
  %1103 = icmp ult i32 %1102, %420
  %1104 = select i1 %1103, i32 %1102, i32 %420
  %1105 = lshr i64 81, %419
  %1106 = and i64 %1105, 1
  %1107 = icmp ne i64 %1106, 0
  %1108 = icmp ult i32 %1102, %421
  %1109 = and i1 %1107, %1108
  %1110 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  br i1 %1109, label %1111, label %1115

1111:                                             ; preds = %1097
  %1112 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1110, i64 0, i32 0, i32 2
  %1113 = load i8, i8* %1112, align 2
  %1114 = zext i8 %1113 to i32
  store i32 %1114, i32* %375, align 32
  br label %1115

1115:                                             ; preds = %1097, %1111
  %1116 = phi i32 [ %1102, %1111 ], [ %421, %1097 ]
  %1117 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1110, i64 0, i32 0, i32 0
  %1118 = load i8, i8* %1117, align 4
  %1119 = icmp eq i8 %1118, 8
  %1120 = load i32, i32* %28, align 4
  %1121 = icmp ult i32 %1102, %1120
  %1122 = and i1 %1119, %1121
  br i1 %1122, label %1123, label %1134

1123:                                             ; preds = %1115
  store i32 %1102, i32* %28, align 4
  %1124 = load i32, i32* %1099, align 4
  %1125 = call i32 @vp8_get_inter_mbpred_error(%struct.macroblock* %1, %struct.variance_vtable* %237, i32* nonnull %28, i32 %1124) #8
  store i32 8, i32* %376, align 4
  %1126 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1127 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1126, i64 0, i32 0, i32 4, i32 0
  %1128 = load i32, i32* %1127, align 4
  store i32 %1128, i32* %377, align 8
  %1129 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1126, i64 0, i32 0, i32 7
  %1130 = load i8, i8* %1129, align 2
  store i8 %1130, i8* %378, align 4
  %1131 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1126, i64 0, i32 0, i32 2
  %1132 = load i8, i8* %1131, align 2
  %1133 = zext i8 %1132 to i32
  store i32 %1133, i32* %379, align 4
  br label %1134

1134:                                             ; preds = %1123, %1115
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %374) #8
  br label %1135

1135:                                             ; preds = %1094, %1134
  %1136 = phi i32 [ %1116, %1134 ], [ %421, %1094 ]
  %1137 = phi i32 [ %1104, %1134 ], [ %420, %1094 ]
  %1138 = load i32, i32* %83, align 4
  %1139 = icmp slt i32 %1084, %1138
  br i1 %1139, label %1143, label %1140

1140:                                             ; preds = %1135
  %1141 = load i32, i32* %204, align 32
  %1142 = icmp eq i32 %1141, 0
  br i1 %1142, label %1204, label %1143

1143:                                             ; preds = %1140, %1135
  %1144 = load i32, i32* %57, align 4
  store i32 %1144, i32* %4, align 4
  %1145 = load i32, i32* %60, align 4
  store i32 %1145, i32* %5, align 4
  %1146 = lshr i64 531458, %419
  %1147 = and i64 %1146, 1
  %1148 = icmp eq i64 %1147, 0
  br i1 %1148, label %1155, label %1149

1149:                                             ; preds = %1143
  %1150 = trunc i32 %562 to i8
  %1151 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1152 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1151, i64 0, i32 0, i32 1
  store i8 %1150, i8* %1152, align 1
  %1153 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1154 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1153, i64 0, i32 0, i32 4, i32 0
  store i32 0, i32* %1154, align 4
  br label %1155

1155:                                             ; preds = %1143, %1149
  %1156 = load i32, i32* %30, align 4
  %1157 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1158 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1157, i64 0, i32 0, i32 0
  %1159 = load i8, i8* %1158, align 4
  %1160 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1157, i64 0, i32 0, i32 2
  %1161 = load i8, i8* %1160, align 2
  %1162 = zext i8 %1161 to i64
  %1163 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 10, i64 %1162
  %1164 = load i32, i32* %1163, align 4
  %1165 = load i32, i32* %59, align 4
  %1166 = sub i32 %1144, %1156
  %1167 = sub i32 %1166, %1164
  %1168 = sub i32 %1167, %1165
  %1169 = load i32, i32* %380, align 8
  %1170 = mul nsw i32 %1168, %1169
  %1171 = add nsw i32 %1170, 128
  %1172 = ashr i32 %1171, 8
  %1173 = load i32, i32* %381, align 4
  %1174 = load i32, i32* %61, align 4
  %1175 = sub nsw i32 %1145, %1174
  %1176 = mul nsw i32 %1175, %1173
  %1177 = add nsw i32 %1176, %1172
  store i32 %1177, i32* %84, align 4
  store i32 %1084, i32* %83, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %86, i8* align 4 %1158, i64 12, i1 false) #8
  %1178 = load i8*, i8** %384, align 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %383, i8* align 4 %1178, i64 132, i1 false) #8
  switch i8 %1159, label %1196 [
    i8 9, label %1179
    i8 4, label %1179
  ]

1179:                                             ; preds = %1155, %1155
  %1180 = load i32, i32* %302, align 8
  store i32 %1180, i32* %385, align 4
  %1181 = load i32, i32* %306, align 8
  store i32 %1181, i32* %386, align 4
  %1182 = load i32, i32* %309, align 8
  store i32 %1182, i32* %387, align 4
  %1183 = load i32, i32* %313, align 8
  store i32 %1183, i32* %388, align 4
  %1184 = load i32, i32* %317, align 8
  store i32 %1184, i32* %389, align 4
  %1185 = load i32, i32* %321, align 8
  store i32 %1185, i32* %390, align 4
  %1186 = load i32, i32* %325, align 8
  store i32 %1186, i32* %391, align 4
  %1187 = load i32, i32* %329, align 8
  store i32 %1187, i32* %392, align 4
  %1188 = load i32, i32* %332, align 8
  store i32 %1188, i32* %393, align 4
  %1189 = load i32, i32* %336, align 8
  store i32 %1189, i32* %394, align 4
  %1190 = load i32, i32* %339, align 8
  store i32 %1190, i32* %395, align 4
  %1191 = load i32, i32* %343, align 8
  store i32 %1191, i32* %396, align 4
  %1192 = load i32, i32* %347, align 8
  store i32 %1192, i32* %397, align 4
  %1193 = load i32, i32* %351, align 8
  store i32 %1193, i32* %398, align 4
  %1194 = load i32, i32* %355, align 8
  store i32 %1194, i32* %399, align 4
  %1195 = load i32, i32* %359, align 8
  store i32 %1195, i32* %400, align 4
  br label %1196

1196:                                             ; preds = %1155, %1179
  %1197 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i64 %419
  %1198 = load i32, i32* %1197, align 4
  %1199 = icmp sgt i32 %1198, 33
  %1200 = add nsw i32 %1198, -2
  %1201 = select i1 %1199, i32 %1200, i32 32
  store i32 %1201, i32* %1197, align 4
  %1202 = trunc i64 %419 to i32
  %1203 = load i32, i32* %204, align 32
  br label %1217

1204:                                             ; preds = %1140
  %1205 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i64 %419
  %1206 = load i32, i32* %1205, align 4
  %1207 = icmp slt i32 %1206, 508
  %1208 = select i1 %1207, i32 %1206, i32 508
  %1209 = add nsw i32 %1208, 4
  store i32 %1209, i32* %1205, align 4
  br label %1217

1210:                                             ; preds = %498, %418, %458, %454, %1044, %1069, %1062, %1059, %1049
  %1211 = phi %union.int_mv* [ %485, %1049 ], [ %485, %1059 ], [ %485, %1062 ], [ %485, %1069 ], [ %485, %1044 ], [ %428, %454 ], [ %428, %458 ], [ %428, %418 ], [ %485, %498 ]
  %1212 = phi i32 [ %560, %1049 ], [ %560, %1059 ], [ %560, %1062 ], [ %560, %1069 ], [ %560, %1044 ], [ %426, %454 ], [ %426, %458 ], [ %426, %418 ], [ %426, %498 ]
  %1213 = phi i32 [ %561, %1049 ], [ %561, %1059 ], [ %561, %1062 ], [ %561, %1069 ], [ %561, %1044 ], [ %425, %454 ], [ %425, %458 ], [ %425, %418 ], [ %425, %498 ]
  %1214 = phi i32 [ %562, %1049 ], [ %562, %1059 ], [ %562, %1062 ], [ %562, %1069 ], [ %562, %1044 ], [ %424, %454 ], [ %424, %458 ], [ %424, %418 ], [ %424, %498 ]
  %1215 = phi i32 [ %1052, %1049 ], [ %1052, %1059 ], [ %1052, %1062 ], [ %1052, %1069 ], [ %1005, %1044 ], [ %423, %454 ], [ %423, %458 ], [ %423, %418 ], [ %423, %498 ]
  %1216 = phi i32 [ %486, %1049 ], [ %486, %1059 ], [ %486, %1062 ], [ %486, %1069 ], [ %486, %1044 ], [ %422, %454 ], [ %422, %458 ], [ %422, %418 ], [ %486, %498 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %206) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %205) #8
  br label %1226

1217:                                             ; preds = %1196, %1204
  %1218 = phi i32 [ %1203, %1196 ], [ 0, %1204 ]
  %1219 = phi i32 [ %1201, %1196 ], [ %1209, %1204 ]
  %1220 = phi i32 [ %1202, %1196 ], [ %427, %1204 ]
  %1221 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 %419
  %1222 = load i32, i32* %1221, align 4
  %1223 = ashr i32 %1222, 7
  %1224 = mul nsw i32 %1223, %1219
  store i32 %1224, i32* %435, align 4
  %1225 = icmp eq i32 %1218, 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %206) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %205) #8
  br i1 %1225, label %1226, label %1238

1226:                                             ; preds = %1217, %1210
  %1227 = phi i32 [ %420, %1210 ], [ %1137, %1217 ]
  %1228 = phi i32 [ %421, %1210 ], [ %1136, %1217 ]
  %1229 = phi i32 [ %1216, %1210 ], [ %486, %1217 ]
  %1230 = phi i32 [ %1215, %1210 ], [ %1081, %1217 ]
  %1231 = phi i32 [ %1214, %1210 ], [ %562, %1217 ]
  %1232 = phi i32 [ %1213, %1210 ], [ %561, %1217 ]
  %1233 = phi i32 [ %1212, %1210 ], [ %560, %1217 ]
  %1234 = phi i32 [ %427, %1210 ], [ %1220, %1217 ]
  %1235 = phi %union.int_mv* [ %1211, %1210 ], [ %485, %1217 ]
  %1236 = add nuw nsw i64 %419, 1
  %1237 = icmp eq i64 %1236, 20
  br i1 %1237, label %1238, label %418

1238:                                             ; preds = %1226, %1217
  %1239 = phi i32 [ %1220, %1217 ], [ %1234, %1226 ]
  %1240 = phi i32 [ %560, %1217 ], [ %1233, %1226 ]
  %1241 = phi i32 [ %486, %1217 ], [ %1229, %1226 ]
  %1242 = phi i32 [ %1136, %1217 ], [ %1228, %1226 ]
  %1243 = phi i32 [ %1137, %1217 ], [ %1227, %1226 ]
  %1244 = sext i32 %1239 to i64
  %1245 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 46, i64 %1244
  %1246 = load i32, i32* %1245, align 4
  %1247 = add i32 %1246, -1
  %1248 = icmp ult i32 %1247, 536870910
  br i1 %1248, label %1249, label %1261

1249:                                             ; preds = %1238
  %1250 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 57, i64 %1244
  %1251 = load i32, i32* %1250, align 4
  %1252 = ashr i32 %1251, 2
  %1253 = add nsw i32 %1252, 32
  %1254 = icmp slt i32 %1251, %1253
  %1255 = sub nsw i32 %1251, %1252
  %1256 = select i1 %1254, i32 32, i32 %1255
  store i32 %1256, i32* %1250, align 4
  %1257 = load i32, i32* %1245, align 4
  %1258 = ashr i32 %1257, 7
  %1259 = mul nsw i32 %1256, %1258
  %1260 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 58, i64 %1244
  store i32 %1259, i32* %1260, align 4
  br label %1261

1261:                                             ; preds = %1249, %1238
  %1262 = load i32, i32* %373, align 8
  %1263 = icmp eq i32 %1262, 0
  br i1 %1263, label %1399, label %1264

1264:                                             ; preds = %1261
  %1265 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %1266 = load i32, i32* %1265, align 8
  %1267 = mul nsw i32 %1266, %7
  %1268 = add nsw i32 %1267, %8
  %1269 = load i32, i32* %376, align 4
  %1270 = icmp eq i32 %1269, 0
  br i1 %1270, label %1273, label %1271

1271:                                             ; preds = %1264
  %1272 = load i32, i32* %28, align 4
  br label %1283

1273:                                             ; preds = %1264
  %1274 = load i8, i8* %86, align 4
  %1275 = zext i8 %1274 to i32
  store i32 %1275, i32* %376, align 4
  %1276 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 3, i32 4, i32 0
  %1277 = load i32, i32* %1276, align 4
  store i32 %1277, i32* %377, align 8
  %1278 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 3, i32 7
  %1279 = load i8, i8* %1278, align 2
  store i8 %1279, i8* %378, align 4
  %1280 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 3, i32 2
  %1281 = load i8, i8* %1280, align 2
  %1282 = zext i8 %1281 to i32
  store i32 %1282, i32* %379, align 4
  store i32 %1243, i32* %28, align 4
  br label %1283

1283:                                             ; preds = %1271, %1273
  %1284 = phi i32 [ %1272, %1271 ], [ %1243, %1273 ]
  %1285 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 200
  %1286 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 45
  call void @vp8_denoiser_denoise_mb(%struct.vp8_denoiser* %1285, %struct.macroblock* %1, i32 %1284, i32 %1242, i32 %2, i32 %3, %struct.loop_filter_info_n* %1286, i32 %7, i32 %8, i32 %1268, i32 0) #8
  %1287 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 3, i32 2
  %1288 = load i8, i8* %1287, align 2
  %1289 = icmp eq i8 %1288, 0
  br i1 %1289, label %1290, label %1399

1290:                                             ; preds = %1283
  %1291 = load i32, i32* %375, align 32
  %1292 = icmp eq i32 %1291, 0
  br i1 %1292, label %1399, label %1293

1293:                                             ; preds = %1290
  %1294 = bitcast i32* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1294) #8
  store i32 0, i32* %37, align 4
  %1295 = bitcast i32* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1295) #8
  store i32 0, i32* %38, align 4
  %1296 = sext i32 %1291 to i64
  %1297 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 10, i64 %1296
  %1298 = load i32, i32* %1297, align 4
  %1299 = bitcast i32* %10 to [4 x i8]*
  %1300 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1300) #8
  store i32 -1431655766, i32* %10, align 4
  %1301 = call i8* @vp8_mv_ref_probs(i8* nonnull %1300, i32* nonnull %53) #8
  %1302 = load i32, i32* getelementptr inbounds ([5 x %struct.vp8_token_struct], [5 x %struct.vp8_token_struct]* @vp8_mv_ref_encoding_array, i64 0, i64 2, i32 0), align 16
  %1303 = load i32, i32* getelementptr inbounds ([5 x %struct.vp8_token_struct], [5 x %struct.vp8_token_struct]* @vp8_mv_ref_encoding_array, i64 0, i64 2, i32 1), align 4
  br label %1304

1304:                                             ; preds = %1304, %1293
  %1305 = phi i32 [ 0, %1293 ], [ %1323, %1304 ]
  %1306 = phi i8 [ 0, %1293 ], [ %1327, %1304 ]
  %1307 = phi i32 [ %1303, %1293 ], [ %1308, %1304 ]
  %1308 = add nsw i32 %1307, -1
  %1309 = lshr i32 %1302, %1308
  %1310 = and i32 %1309, 1
  %1311 = icmp eq i32 %1310, 0
  %1312 = sext i8 %1306 to i32
  %1313 = ashr i32 %1312, 1
  %1314 = sext i32 %1313 to i64
  %1315 = getelementptr inbounds [4 x i8], [4 x i8]* %1299, i64 0, i64 %1314
  %1316 = load i8, i8* %1315, align 1
  %1317 = zext i8 %1316 to i32
  %1318 = xor i32 %1317, 255
  %1319 = select i1 %1311, i32 %1317, i32 %1318
  %1320 = zext i32 %1319 to i64
  %1321 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %1320
  %1322 = load i32, i32* %1321, align 4
  %1323 = add i32 %1322, %1305
  %1324 = add nsw i32 %1310, %1312
  %1325 = sext i32 %1324 to i64
  %1326 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_mv_ref_tree, i64 0, i64 %1325
  %1327 = load i8, i8* %1326, align 1
  %1328 = icmp eq i32 %1308, 0
  br i1 %1328, label %1329, label %1304

1329:                                             ; preds = %1304
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1300) #8
  %1330 = add nsw i32 %1323, %1298
  store i32 %1330, i32* %57, align 4
  store i32 0, i32* %60, align 4
  %1331 = trunc i32 %1291 to i8
  %1332 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1333 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1332, i64 0, i32 0, i32 2
  store i8 %1331, i8* %1333, align 2
  %1334 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %26, i64 0, i64 %1296
  %1335 = bitcast [3 x i8*]* %1334 to <2 x i64>*
  %1336 = load <2 x i64>, <2 x i64>* %1335, align 8
  %1337 = bitcast i8** %210 to <2 x i64>*
  store <2 x i64> %1336, <2 x i64>* %1337, align 8
  %1338 = getelementptr inbounds [4 x [3 x i8*]], [4 x [3 x i8*]]* %26, i64 0, i64 %1296, i64 2
  %1339 = bitcast i8** %1338 to i64*
  %1340 = load i64, i64* %1339, align 8
  store i64 %1340, i64* %212, align 8
  %1341 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1342 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1341, i64 0, i32 0, i32 0
  store i8 7, i8* %1342, align 4
  %1343 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1344 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1343, i64 0, i32 0, i32 1
  store i8 0, i8* %1344, align 1
  %1345 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1346 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1345, i64 0, i32 0, i32 4, i32 0
  store i32 0, i32* %1346, align 4
  %1347 = call fastcc i32 @evaluate_inter_mode_rd(i32* nonnull %53, %struct.rate_distortion_struct* nonnull %19, i32* nonnull %37, %struct.VP8_COMP* %0, %struct.macroblock* %1)
  %1348 = load i32, i32* %37, align 4
  %1349 = call fastcc i32 @calculate_final_rd_costs(i32 %1347, %struct.rate_distortion_struct* nonnull %19, i32* nonnull %38, i32 %1348, i32 %1240, i32 %80, %struct.VP8_COMP* %0, %struct.macroblock* %1)
  %1350 = load i32, i32* %83, align 4
  %1351 = icmp slt i32 %1349, %1350
  br i1 %1351, label %1355, label %1352

1352:                                             ; preds = %1329
  %1353 = load i32, i32* %204, align 32
  %1354 = icmp eq i32 %1353, 0
  br i1 %1354, label %1398, label %1355

1355:                                             ; preds = %1352, %1329
  %1356 = load i32, i32* %57, align 4
  store i32 %1356, i32* %4, align 4
  %1357 = load i32, i32* %60, align 4
  store i32 %1357, i32* %5, align 4
  %1358 = load i32, i32* %38, align 4
  %1359 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1360 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1359, i64 0, i32 0, i32 0
  %1361 = load i8, i8* %1360, align 4
  %1362 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1359, i64 0, i32 0, i32 2
  %1363 = load i8, i8* %1362, align 2
  %1364 = zext i8 %1363 to i64
  %1365 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 10, i64 %1364
  %1366 = load i32, i32* %1365, align 4
  %1367 = load i32, i32* %59, align 4
  %1368 = sub i32 %1356, %1358
  %1369 = sub i32 %1368, %1366
  %1370 = sub i32 %1369, %1367
  %1371 = load i32, i32* %380, align 8
  %1372 = mul nsw i32 %1370, %1371
  %1373 = add nsw i32 %1372, 128
  %1374 = ashr i32 %1373, 8
  %1375 = load i32, i32* %381, align 4
  %1376 = load i32, i32* %61, align 4
  %1377 = sub nsw i32 %1357, %1376
  %1378 = mul nsw i32 %1377, %1375
  %1379 = add nsw i32 %1378, %1374
  store i32 %1379, i32* %84, align 4
  store i32 %1349, i32* %83, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %86, i8* align 4 %1360, i64 12, i1 false) #8
  %1380 = load i8*, i8** %384, align 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %383, i8* align 4 %1380, i64 132, i1 false) #8
  switch i8 %1361, label %1398 [
    i8 9, label %1381
    i8 4, label %1381
  ]

1381:                                             ; preds = %1355, %1355
  %1382 = load i32, i32* %302, align 8
  store i32 %1382, i32* %385, align 4
  %1383 = load i32, i32* %306, align 8
  store i32 %1383, i32* %386, align 4
  %1384 = load i32, i32* %309, align 8
  store i32 %1384, i32* %387, align 4
  %1385 = load i32, i32* %313, align 8
  store i32 %1385, i32* %388, align 4
  %1386 = load i32, i32* %317, align 8
  store i32 %1386, i32* %389, align 4
  %1387 = load i32, i32* %321, align 8
  store i32 %1387, i32* %390, align 4
  %1388 = load i32, i32* %325, align 8
  store i32 %1388, i32* %391, align 4
  %1389 = load i32, i32* %329, align 8
  store i32 %1389, i32* %392, align 4
  %1390 = load i32, i32* %332, align 8
  store i32 %1390, i32* %393, align 4
  %1391 = load i32, i32* %336, align 8
  store i32 %1391, i32* %394, align 4
  %1392 = load i32, i32* %339, align 8
  store i32 %1392, i32* %395, align 4
  %1393 = load i32, i32* %343, align 8
  store i32 %1393, i32* %396, align 4
  %1394 = load i32, i32* %347, align 8
  store i32 %1394, i32* %397, align 4
  %1395 = load i32, i32* %351, align 8
  store i32 %1395, i32* %398, align 4
  %1396 = load i32, i32* %355, align 8
  store i32 %1396, i32* %399, align 4
  %1397 = load i32, i32* %359, align 8
  store i32 %1397, i32* %400, align 4
  br label %1398

1398:                                             ; preds = %1381, %1355, %1352
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1295) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1294) #8
  br label %1399

1399:                                             ; preds = %1283, %1398, %1290, %1261
  %1400 = load i32, i32* %208, align 4
  %1401 = icmp eq i32 %1400, 0
  %1402 = load i8, i8* %86, align 4
  br i1 %1401, label %1428, label %1403

1403:                                             ; preds = %1399
  %1404 = icmp eq i8 %1402, 7
  br i1 %1404, label %1405, label %1412

1405:                                             ; preds = %1403
  %1406 = getelementptr inbounds %struct.best_mode_struct, %struct.best_mode_struct* %16, i64 0, i32 3, i32 2
  %1407 = load i8, i8* %1406, align 2
  %1408 = icmp eq i8 %1407, 3
  br i1 %1408, label %1409, label %1412

1409:                                             ; preds = %1405
  %1410 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1411 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1410, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1411, i8* align 4 %86, i64 12, i1 false)
  br label %1540

1412:                                             ; preds = %1405, %1403
  %1413 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1414 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1413, i64 0, i32 0, i32 0
  store i8 7, i8* %1414, align 4
  %1415 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1416 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1415, i64 0, i32 0, i32 2
  store i8 3, i8* %1416, align 2
  %1417 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1418 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1417, i64 0, i32 0, i32 4, i32 0
  store i32 0, i32* %1418, align 4
  %1419 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1420 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1419, i64 0, i32 0, i32 1
  store i8 0, i8* %1420, align 1
  %1421 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 30
  %1422 = load i32, i32* %1421, align 32
  %1423 = trunc i32 %1422 to i8
  %1424 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1425 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1424, i64 0, i32 0, i32 6
  store i8 %1423, i8* %1425, align 1
  %1426 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1427 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1426, i64 0, i32 0, i32 5
  store i8 0, i8* %1427, align 4
  br label %1633

1428:                                             ; preds = %1399
  %1429 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1430 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1429, i64 0, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1430, i8* align 4 %86, i64 12, i1 false)
  %1431 = icmp eq i8 %1402, 4
  br i1 %1431, label %1432, label %1482

1432:                                             ; preds = %1428
  %1433 = load i32, i32* %385, align 4
  %1434 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1435 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1434, i64 0, i32 1, i64 0, i32 0
  store i32 %1433, i32* %1435, align 4
  %1436 = load i32, i32* %386, align 4
  %1437 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1438 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1437, i64 0, i32 1, i64 1, i32 0
  store i32 %1436, i32* %1438, align 4
  %1439 = load i32, i32* %387, align 4
  %1440 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1441 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1440, i64 0, i32 1, i64 2, i32 0
  store i32 %1439, i32* %1441, align 4
  %1442 = load i32, i32* %388, align 4
  %1443 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1444 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1443, i64 0, i32 1, i64 3, i32 0
  store i32 %1442, i32* %1444, align 4
  %1445 = load i32, i32* %389, align 4
  %1446 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1447 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1446, i64 0, i32 1, i64 4, i32 0
  store i32 %1445, i32* %1447, align 4
  %1448 = load i32, i32* %390, align 4
  %1449 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1450 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1449, i64 0, i32 1, i64 5, i32 0
  store i32 %1448, i32* %1450, align 4
  %1451 = load i32, i32* %391, align 4
  %1452 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1453 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1452, i64 0, i32 1, i64 6, i32 0
  store i32 %1451, i32* %1453, align 4
  %1454 = load i32, i32* %392, align 4
  %1455 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1456 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1455, i64 0, i32 1, i64 7, i32 0
  store i32 %1454, i32* %1456, align 4
  %1457 = load i32, i32* %393, align 4
  %1458 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1459 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1458, i64 0, i32 1, i64 8, i32 0
  store i32 %1457, i32* %1459, align 4
  %1460 = load i32, i32* %394, align 4
  %1461 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1462 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1461, i64 0, i32 1, i64 9, i32 0
  store i32 %1460, i32* %1462, align 4
  %1463 = load i32, i32* %395, align 4
  %1464 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1465 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1464, i64 0, i32 1, i64 10, i32 0
  store i32 %1463, i32* %1465, align 4
  %1466 = load i32, i32* %396, align 4
  %1467 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1468 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1467, i64 0, i32 1, i64 11, i32 0
  store i32 %1466, i32* %1468, align 4
  %1469 = load i32, i32* %397, align 4
  %1470 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1471 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1470, i64 0, i32 1, i64 12, i32 0
  store i32 %1469, i32* %1471, align 4
  %1472 = load i32, i32* %398, align 4
  %1473 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1474 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1473, i64 0, i32 1, i64 13, i32 0
  store i32 %1472, i32* %1474, align 4
  %1475 = load i32, i32* %399, align 4
  %1476 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1477 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1476, i64 0, i32 1, i64 14, i32 0
  store i32 %1475, i32* %1477, align 4
  %1478 = load i32, i32* %400, align 4
  %1479 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1480 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1479, i64 0, i32 1, i64 15, i32 0
  store i32 %1478, i32* %1480, align 4
  %1481 = load i8, i8* %86, align 4
  br label %1482

1482:                                             ; preds = %1432, %1428
  %1483 = phi i8 [ %1481, %1432 ], [ %1402, %1428 ]
  %1484 = icmp eq i8 %1483, 9
  br i1 %1484, label %1485, label %1540

1485:                                             ; preds = %1482
  %1486 = load i32, i32* %385, align 4
  %1487 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1488 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1487, i64 0, i32 1, i64 0, i32 0
  store i32 %1486, i32* %1488, align 4
  %1489 = load i32, i32* %386, align 4
  %1490 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1491 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1490, i64 0, i32 1, i64 1, i32 0
  store i32 %1489, i32* %1491, align 4
  %1492 = load i32, i32* %387, align 4
  %1493 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1494 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1493, i64 0, i32 1, i64 2, i32 0
  store i32 %1492, i32* %1494, align 4
  %1495 = load i32, i32* %388, align 4
  %1496 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1497 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1496, i64 0, i32 1, i64 3, i32 0
  store i32 %1495, i32* %1497, align 4
  %1498 = load i32, i32* %389, align 4
  %1499 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1500 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1499, i64 0, i32 1, i64 4, i32 0
  store i32 %1498, i32* %1500, align 4
  %1501 = load i32, i32* %390, align 4
  %1502 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1503 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1502, i64 0, i32 1, i64 5, i32 0
  store i32 %1501, i32* %1503, align 4
  %1504 = load i32, i32* %391, align 4
  %1505 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1506 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1505, i64 0, i32 1, i64 6, i32 0
  store i32 %1504, i32* %1506, align 4
  %1507 = load i32, i32* %392, align 4
  %1508 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1509 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1508, i64 0, i32 1, i64 7, i32 0
  store i32 %1507, i32* %1509, align 4
  %1510 = load i32, i32* %393, align 4
  %1511 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1512 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1511, i64 0, i32 1, i64 8, i32 0
  store i32 %1510, i32* %1512, align 4
  %1513 = load i32, i32* %394, align 4
  %1514 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1515 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1514, i64 0, i32 1, i64 9, i32 0
  store i32 %1513, i32* %1515, align 4
  %1516 = load i32, i32* %395, align 4
  %1517 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1518 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1517, i64 0, i32 1, i64 10, i32 0
  store i32 %1516, i32* %1518, align 4
  %1519 = load i32, i32* %396, align 4
  %1520 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1521 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1520, i64 0, i32 1, i64 11, i32 0
  store i32 %1519, i32* %1521, align 4
  %1522 = load i32, i32* %397, align 4
  %1523 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1524 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1523, i64 0, i32 1, i64 12, i32 0
  store i32 %1522, i32* %1524, align 4
  %1525 = load i32, i32* %398, align 4
  %1526 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1527 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1526, i64 0, i32 1, i64 13, i32 0
  store i32 %1525, i32* %1527, align 4
  %1528 = load i32, i32* %399, align 4
  %1529 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1530 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1529, i64 0, i32 1, i64 14, i32 0
  store i32 %1528, i32* %1530, align 4
  %1531 = load i32, i32* %400, align 4
  %1532 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1533 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1532, i64 0, i32 1, i64 15, i32 0
  store i32 %1531, i32* %1533, align 4
  %1534 = load i8*, i8** %384, align 32
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1534, i8* align 4 %383, i64 132, i1 false)
  %1535 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %365, align 32
  %1536 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %1535, i64 0, i32 1, i64 15, i32 1, i32 0
  %1537 = load i32, i32* %1536, align 4
  %1538 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1539 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1538, i64 0, i32 0, i32 4, i32 0
  store i32 %1537, i32* %1539, align 4
  br label %1540

1540:                                             ; preds = %1409, %1485, %1482
  %1541 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1542 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1541, i64 0, i32 0, i32 2
  %1543 = load i8, i8* %1542, align 2
  %1544 = zext i8 %1543 to i64
  %1545 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 55, i64 %1544
  %1546 = load i32, i32* %1545, align 4
  %1547 = icmp eq i32 %1241, %1546
  br i1 %1547, label %1553, label %1548

1548:                                             ; preds = %1540
  %1549 = icmp eq i32 %1241, 0
  %1550 = zext i1 %1549 to i64
  %1551 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %12, i64 0, i64 %1550, i32 0
  %1552 = load i32, i32* %1551, align 4
  store i32 %1552, i32* %47, align 4
  br label %1553

1553:                                             ; preds = %1540, %1548
  %1554 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1541, i64 0, i32 0, i32 0
  %1555 = load i8, i8* %1554, align 4
  switch i8 %1555, label %1633 [
    i8 9, label %1556
    i8 8, label %1604
  ]

1556:                                             ; preds = %1553
  %1557 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %365, align 32
  %1558 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %1557, i64 0, i32 0
  %1559 = load i32, i32* %1558, align 4
  %1560 = icmp sgt i32 %1559, 0
  br i1 %1560, label %1561, label %1633

1561:                                             ; preds = %1556, %1597
  %1562 = phi %struct.PARTITION_INFO* [ %1598, %1597 ], [ %1557, %1556 ]
  %1563 = phi i64 [ %1599, %1597 ], [ 0, %1556 ]
  %1564 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %1562, i64 0, i32 1, i64 %1563, i32 0
  %1565 = load i32, i32* %1564, align 4
  %1566 = icmp eq i32 %1565, 13
  br i1 %1566, label %1567, label %1597

1567:                                             ; preds = %1561
  %1568 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %1562, i64 0, i32 1, i64 %1563, i32 1
  %1569 = bitcast %union.int_mv* %1568 to i16*
  %1570 = load i16, i16* %1569, align 4
  %1571 = sext i16 %1570 to i32
  %1572 = load i16, i16* %221, align 4
  %1573 = sext i16 %1572 to i32
  %1574 = sub nsw i32 %1571, %1573
  %1575 = ashr i32 %1574, 1
  %1576 = add nsw i32 %1575, 1023
  %1577 = sext i32 %1576 to i64
  %1578 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 51, i64 0, i64 %1577
  %1579 = load i32, i32* %1578, align 4
  %1580 = add i32 %1579, 1
  store i32 %1580, i32* %1578, align 4
  %1581 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %365, align 32
  %1582 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %1581, i64 0, i32 1, i64 %1563, i32 1
  %1583 = bitcast %union.int_mv* %1582 to %struct.MV*
  %1584 = getelementptr inbounds %struct.MV, %struct.MV* %1583, i64 0, i32 1
  %1585 = load i16, i16* %1584, align 2
  %1586 = sext i16 %1585 to i32
  %1587 = load i16, i16* %220, align 2
  %1588 = sext i16 %1587 to i32
  %1589 = sub nsw i32 %1586, %1588
  %1590 = ashr i32 %1589, 1
  %1591 = add nsw i32 %1590, 1023
  %1592 = sext i32 %1591 to i64
  %1593 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 51, i64 1, i64 %1592
  %1594 = load i32, i32* %1593, align 4
  %1595 = add i32 %1594, 1
  store i32 %1595, i32* %1593, align 4
  %1596 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %365, align 32
  br label %1597

1597:                                             ; preds = %1567, %1561
  %1598 = phi %struct.PARTITION_INFO* [ %1562, %1561 ], [ %1596, %1567 ]
  %1599 = add nuw nsw i64 %1563, 1
  %1600 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %1598, i64 0, i32 0
  %1601 = load i32, i32* %1600, align 4
  %1602 = sext i32 %1601 to i64
  %1603 = icmp slt i64 %1599, %1602
  br i1 %1603, label %1561, label %1633

1604:                                             ; preds = %1553
  %1605 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1541, i64 0, i32 0, i32 4
  %1606 = bitcast %union.int_mv* %1605 to i16*
  %1607 = load i16, i16* %1606, align 4
  %1608 = sext i16 %1607 to i32
  %1609 = load i16, i16* %221, align 4
  %1610 = sext i16 %1609 to i32
  %1611 = sub nsw i32 %1608, %1610
  %1612 = ashr i32 %1611, 1
  %1613 = add nsw i32 %1612, 1023
  %1614 = sext i32 %1613 to i64
  %1615 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 51, i64 0, i64 %1614
  %1616 = load i32, i32* %1615, align 4
  %1617 = add i32 %1616, 1
  store i32 %1617, i32* %1615, align 4
  %1618 = load %struct.modeinfo*, %struct.modeinfo** %207, align 32
  %1619 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %1618, i64 0, i32 0, i32 4
  %1620 = bitcast %union.int_mv* %1619 to %struct.MV*
  %1621 = getelementptr inbounds %struct.MV, %struct.MV* %1620, i64 0, i32 1
  %1622 = load i16, i16* %1621, align 2
  %1623 = sext i16 %1622 to i32
  %1624 = load i16, i16* %220, align 2
  %1625 = sext i16 %1624 to i32
  %1626 = sub nsw i32 %1623, %1625
  %1627 = ashr i32 %1626, 1
  %1628 = add nsw i32 %1627, 1023
  %1629 = sext i32 %1628 to i64
  %1630 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 51, i64 1, i64 %1629
  %1631 = load i32, i32* %1630, align 4
  %1632 = add i32 %1631, 1
  store i32 %1632, i32* %1630, align 4
  br label %1633

1633:                                             ; preds = %1597, %1604, %1556, %1553, %1412
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %81) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %71) #8
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %70) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %69) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %68) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %66) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %65) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %64) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %62) #8
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %56) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %54) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #8
  call void @llvm.lifetime.end.p0i8(i64 220, i8* nonnull %49) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %48) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %46) #8
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %45) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare i32 @vp8_dc_quant(i32, i32) local_unnamed_addr #3

declare i32 @vp8_find_near_mvs_bias(%struct.macroblockd*, %struct.modeinfo*, [10 x %union.int_mv]*, %union.int_mv*, i32*, i32, i32*) local_unnamed_addr #3

declare void @vp8_update_zbin_extra(%struct.VP8_COMP*, %struct.macroblock*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @rd_pick_intra_mbuv_mode(%struct.macroblock*, i32* nocapture, i32* nocapture, i32* nocapture) unnamed_addr #1 {
  %5 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6
  %6 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 13
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 14
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 9
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 15
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 0, i64 256
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 0, i64 320
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 5, i32 14
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 5, i32 15
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 5, i32 9
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 26
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 15
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 18
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 17
  br label %20

20:                                               ; preds = %63, %4
  %21 = phi i32 [ 0, %4 ], [ %67, %63 ]
  %22 = phi i32 [ 0, %4 ], [ %66, %63 ]
  %23 = phi i32 [ 2147483647, %4 ], [ %65, %63 ]
  %24 = phi i32 [ 10, %4 ], [ %64, %63 ]
  %25 = phi i32 [ 0, %4 ], [ %68, %63 ]
  %26 = trunc i32 %25 to i8
  %27 = load %struct.modeinfo*, %struct.modeinfo** %6, align 32
  %28 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %27, i64 0, i32 0, i32 1
  store i8 %26, i8* %28, align 1
  %29 = load i8*, i8** %7, align 32
  %30 = load i32, i32* %8, align 4
  %31 = sext i32 %30 to i64
  %32 = sub nsw i64 0, %31
  %33 = getelementptr inbounds i8, i8* %29, i64 %32
  %34 = load i8*, i8** %9, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 %32
  %36 = getelementptr inbounds i8, i8* %29, i64 -1
  %37 = getelementptr inbounds i8, i8* %34, i64 -1
  tail call void @vp8_build_intra_predictors_mbuv_s(%struct.macroblockd* %5, i8* %33, i8* %35, i8* %36, i8* %37, i32 %30, i8* %10, i8* %11, i32 8) #8
  %38 = load i8*, i8** %13, align 32
  %39 = load i8*, i8** %14, align 8
  %40 = load i32, i32* %15, align 4
  tail call void @vp8_subtract_mbuv(i16* %12, i8* %38, i8* %39, i32 %40, i8* %10, i8* %11, i32 8) #8
  tail call void @vp8_transform_mbuv(%struct.macroblock* %0) #8
  tail call void @vp8_quantize_mbuv(%struct.macroblock* %0) #8
  %41 = tail call fastcc i32 @rd_cost_mbuv(%struct.macroblock* %0)
  %42 = load [10 x i32]*, [10 x i32]** %16, align 16
  %43 = load i32, i32* %17, align 4
  %44 = zext i32 %43 to i64
  %45 = load %struct.modeinfo*, %struct.modeinfo** %6, align 32
  %46 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %45, i64 0, i32 0, i32 1
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i64
  %49 = getelementptr inbounds [10 x i32], [10 x i32]* %42, i64 %44, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = add nsw i32 %50, %41
  %52 = tail call i32 @vp8_mbuverror_sse2(%struct.macroblock* %0) #8
  %53 = sdiv i32 %52, 4
  %54 = load i32, i32* %18, align 8
  %55 = mul nsw i32 %54, %51
  %56 = add nsw i32 %55, 128
  %57 = ashr i32 %56, 8
  %58 = load i32, i32* %19, align 4
  %59 = mul nsw i32 %58, %53
  %60 = add nsw i32 %57, %59
  %61 = icmp slt i32 %60, %23
  br i1 %61, label %62, label %63

62:                                               ; preds = %20
  store i32 %41, i32* %2, align 4
  br label %63

63:                                               ; preds = %62, %20
  %64 = phi i32 [ %25, %62 ], [ %24, %20 ]
  %65 = phi i32 [ %60, %62 ], [ %23, %20 ]
  %66 = phi i32 [ %53, %62 ], [ %22, %20 ]
  %67 = phi i32 [ %51, %62 ], [ %21, %20 ]
  %68 = add nuw nsw i32 %25, 1
  %69 = icmp eq i32 %68, 4
  br i1 %69, label %70, label %20

70:                                               ; preds = %63
  store i32 %67, i32* %1, align 4
  store i32 %66, i32* %3, align 4
  %71 = trunc i32 %64 to i8
  %72 = load %struct.modeinfo*, %struct.modeinfo** %6, align 32
  %73 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %72, i64 0, i32 0, i32 1
  store i8 %71, i8* %73, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @rd_pick_intra4x4mby_modes(%struct.macroblock*, i32* nocapture, i32* nocapture, i32* nocapture, i32) unnamed_addr #1 {
  %6 = alloca [64 x i8], align 16
  %7 = alloca [16 x i16], align 16
  %8 = alloca %struct.ENTROPY_CONTEXT_PLANES, align 1
  %9 = alloca %struct.ENTROPY_CONTEXT_PLANES, align 1
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 25
  %11 = load [10 x i32]*, [10 x i32]** %10, align 8
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 15
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds [10 x i32], [10 x i32]* %11, i64 %14, i64 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %8, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %17) #8
  %18 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %9, i64 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %17, i8 -86, i64 9, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %18) #8
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 21
  %20 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %19 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %18, i8 -86, i64 9, i1 false)
  %21 = load i8*, i8** %20, align 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %17, i8* align 1 %21, i64 9, i1 false)
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 22
  %23 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %22 to i8**
  %24 = load i8*, i8** %23, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %18, i8* align 1 %24, i64 9, i1 false)
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 13
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 4
  %28 = load i32, i32* %27, align 16
  %29 = sext i32 %28 to i64
  %30 = sub nsw i64 0, %29
  %31 = getelementptr inbounds i8, i8* %26, i64 %30
  %32 = getelementptr inbounds i8, i8* %31, i64 16
  %33 = bitcast i8* %32 to i32*
  %34 = shl nsw i32 %28, 2
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %32, i64 %35
  %37 = bitcast i8* %36 to i32*
  %38 = shl nsw i32 %28, 3
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %32, i64 %39
  %41 = bitcast i8* %40 to i32*
  %42 = mul nsw i32 %28, 12
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %32, i64 %43
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %33, align 4
  store i32 %46, i32* %37, align 4
  %47 = load i32, i32* %33, align 4
  store i32 %47, i32* %41, align 4
  %48 = load i32, i32* %33, align 4
  store i32 %48, i32* %45, align 4
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 28
  %50 = load i32*, i32** %49, align 32
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 13
  %52 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 14
  %53 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 27
  %54 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 0
  %55 = bitcast [16 x i16]* %7 to i8*
  %56 = getelementptr inbounds [16 x i16], [16 x i16]* %7, i64 0, i64 0
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 67
  %58 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 70
  %59 = load %struct.TOKENVALUE*, %struct.TOKENVALUE** @vp8_dct_value_tokens_ptr, align 8
  %60 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 29
  %61 = load i16*, i16** @vp8_dct_value_cost_ptr, align 8
  %62 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 18
  %63 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 17
  %64 = bitcast [64 x i8]* %6 to i32*
  %65 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 16
  %66 = bitcast i8* %65 to i32*
  %67 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 32
  %68 = bitcast i8* %67 to i32*
  %69 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 48
  %70 = bitcast i8* %69 to i32*
  %71 = sext i32 %4 to i64
  br label %72

72:                                               ; preds = %268, %5
  %73 = phi i64 [ %277, %268 ], [ 0, %5 ]
  %74 = phi i32* [ %126, %268 ], [ %50, %5 ]
  %75 = phi i64 [ %271, %268 ], [ 0, %5 ]
  %76 = phi i32 [ %274, %268 ], [ 0, %5 ]
  %77 = phi i32 [ %273, %268 ], [ 0, %5 ]
  %78 = phi i32 [ %272, %268 ], [ %16, %5 ]
  %79 = load %struct.modeinfo*, %struct.modeinfo** %51, align 32
  %80 = load i32, i32* %52, align 8
  %81 = load i32, i32* %12, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %125

83:                                               ; preds = %72
  %84 = icmp ugt i64 %73, 3
  br i1 %84, label %97, label %85

85:                                               ; preds = %83
  %86 = sext i32 %80 to i64
  %87 = sub nsw i64 0, %86
  %88 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %79, i64 %87, i32 0, i32 0
  %89 = load i8, i8* %88, align 4
  switch i8 %89, label %101 [
    i8 4, label %90
    i8 3, label %96
    i8 1, label %94
    i8 2, label %95
  ]

90:                                               ; preds = %85
  %91 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %79, i64 %87, i32 1, i64 %73
  %92 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %91, i64 12, i32 0
  %93 = load i32, i32* %92, align 4
  br label %101

94:                                               ; preds = %85
  br label %101

95:                                               ; preds = %85
  br label %101

96:                                               ; preds = %85
  br label %101

97:                                               ; preds = %83
  %98 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %79, i64 0, i32 1, i64 %73
  %99 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %98, i64 -4, i32 0
  %100 = load i32, i32* %99, align 4
  br label %101

101:                                              ; preds = %85, %90, %94, %95, %96, %97
  %102 = phi i32 [ %100, %97 ], [ 1, %96 ], [ 3, %95 ], [ 2, %94 ], [ %93, %90 ], [ 0, %85 ]
  %103 = and i64 %73, 3
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %115

105:                                              ; preds = %101
  %106 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %79, i64 -1, i32 0, i32 0
  %107 = load i8, i8* %106, align 4
  switch i8 %107, label %119 [
    i8 4, label %108
    i8 3, label %114
    i8 1, label %112
    i8 2, label %113
  ]

108:                                              ; preds = %105
  %109 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %79, i64 -1, i32 1, i64 %73
  %110 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %109, i64 3, i32 0
  %111 = load i32, i32* %110, align 4
  br label %119

112:                                              ; preds = %105
  br label %119

113:                                              ; preds = %105
  br label %119

114:                                              ; preds = %105
  br label %119

115:                                              ; preds = %101
  %116 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %79, i64 0, i32 1, i64 %73
  %117 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %116, i64 -1, i32 0
  %118 = load i32, i32* %117, align 4
  br label %119

119:                                              ; preds = %105, %108, %112, %113, %114, %115
  %120 = phi i32 [ %118, %115 ], [ 1, %114 ], [ 3, %113 ], [ 2, %112 ], [ %111, %108 ], [ 0, %105 ]
  %121 = load [10 x [10 x i32]]*, [10 x [10 x i32]]** %53, align 8
  %122 = zext i32 %102 to i64
  %123 = zext i32 %120 to i64
  %124 = getelementptr inbounds [10 x [10 x i32]], [10 x [10 x i32]]* %121, i64 %122, i64 %123, i64 0
  br label %125

125:                                              ; preds = %119, %72
  %126 = phi i32* [ %124, %119 ], [ %74, %72 ]
  %127 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 %73
  %128 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %73
  %129 = getelementptr inbounds [25 x i8], [25 x i8]* @vp8_block2above, i64 0, i64 %73
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i64
  %132 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %8, i64 0, i32 0, i64 %131
  %133 = getelementptr inbounds [25 x i8], [25 x i8]* @vp8_block2left, i64 0, i64 %73
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i64
  %136 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %9, i64 0, i32 0, i64 %135
  %137 = load i8, i8* %132, align 1
  %138 = load i8, i8* %136, align 1
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %54) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %54, i8 -86, i64 64, i1 false) #8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %55) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 -86, i64 32, i1 false) #8
  %139 = load i32, i32* %27, align 16
  %140 = load i8*, i8** %25, align 8
  %141 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %73, i32 4
  %142 = load i32, i32* %141, align 8
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %140, i64 %143
  %145 = sext i32 %139 to i64
  %146 = sub nsw i64 0, %145
  %147 = getelementptr inbounds i8, i8* %144, i64 %146
  %148 = getelementptr inbounds i8, i8* %144, i64 -1
  %149 = getelementptr inbounds i8, i8* %147, i64 -1
  %150 = load i8, i8* %149, align 1
  %151 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %73, i32 2
  %152 = getelementptr inbounds %struct.block, %struct.block* %127, i64 0, i32 0
  %153 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 %73, i32 1
  %154 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %73, i32 5
  %155 = getelementptr inbounds %struct.blockd, %struct.blockd* %128, i64 0, i32 0
  %156 = sext i8 %137 to i32
  %157 = sext i8 %138 to i32
  %158 = add nsw i32 %157, %156
  %159 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %73, i32 1
  %160 = bitcast i16** %159 to i8**
  br label %161

161:                                              ; preds = %260, %125
  %162 = phi i32 [ 14, %125 ], [ %261, %260 ]
  %163 = phi i32 [ 0, %125 ], [ %262, %260 ]
  %164 = phi i32 [ 0, %125 ], [ %263, %260 ]
  %165 = phi i32 [ 0, %125 ], [ %264, %260 ]
  %166 = phi i64 [ 0, %125 ], [ %266, %260 ]
  %167 = phi i32 [ 2147483647, %125 ], [ %265, %260 ]
  %168 = getelementptr inbounds i32, i32* %126, i64 %166
  %169 = load i32, i32* %168, align 4
  %170 = load i8*, i8** %151, align 8
  %171 = trunc i64 %166 to i32
  call void @vp8_intra4x4_predict(i8* %147, i8* %148, i32 %139, i32 %171, i8* %170, i32 16, i8 zeroext %150) #8
  call void @vp8_subtract_b(%struct.block* %127, %struct.blockd* %128, i32 16) #8
  %172 = load void (i16*, i16*, i32)*, void (i16*, i16*, i32)** %57, align 16
  %173 = load i16*, i16** %152, align 8
  %174 = load i16*, i16** %153, align 8
  call void %172(i16* %173, i16* %174, i32 32) #8
  %175 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %58, align 8
  call void %175(%struct.block* %127, %struct.blockd* %128) #8
  %176 = load i8*, i8** %154, align 8
  %177 = load i8, i8* %176, align 1
  %178 = sext i8 %177 to i32
  %179 = load i16*, i16** %155, align 8
  %180 = icmp sgt i8 %177, 0
  %181 = load [8 x [3 x [12 x i32]]]*, [8 x [3 x [12 x i32]]]** %60, align 8
  br i1 %180, label %182, label %216

182:                                              ; preds = %161
  %183 = zext i32 %178 to i64
  br label %184

184:                                              ; preds = %184, %182
  %185 = phi i64 [ 0, %182 ], [ %211, %184 ]
  %186 = phi i32 [ 0, %182 ], [ %207, %184 ]
  %187 = phi i32 [ %158, %182 ], [ %210, %184 ]
  %188 = getelementptr inbounds [16 x i32], [16 x i32]* @vp8_default_zig_zag1d, i64 0, i64 %185
  %189 = load i32, i32* %188, align 4
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i16, i16* %179, i64 %190
  %192 = load i16, i16* %191, align 2
  %193 = sext i16 %192 to i64
  %194 = getelementptr inbounds %struct.TOKENVALUE, %struct.TOKENVALUE* %59, i64 %193, i32 0
  %195 = load i16, i16* %194, align 2
  %196 = getelementptr inbounds [16 x i8], [16 x i8]* @vp8_coef_bands, i64 0, i64 %185
  %197 = load i8, i8* %196, align 1
  %198 = zext i8 %197 to i64
  %199 = sext i32 %187 to i64
  %200 = sext i16 %195 to i64
  %201 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %181, i64 3, i64 %198, i64 %199, i64 %200
  %202 = load i32, i32* %201, align 4
  %203 = add nsw i32 %202, %186
  %204 = getelementptr inbounds i16, i16* %61, i64 %193
  %205 = load i16, i16* %204, align 2
  %206 = sext i16 %205 to i32
  %207 = add nsw i32 %203, %206
  %208 = getelementptr inbounds [12 x i8], [12 x i8]* @vp8_prev_token_class, i64 0, i64 %200
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i32
  %211 = add nuw nsw i64 %185, 1
  %212 = icmp eq i64 %211, %183
  br i1 %212, label %213, label %184

213:                                              ; preds = %184
  %214 = zext i8 %209 to i32
  %215 = icmp ult i8 %177, 16
  br i1 %215, label %216, label %228

216:                                              ; preds = %161, %213
  %217 = phi i32 [ %178, %213 ], [ 0, %161 ]
  %218 = phi i32 [ %207, %213 ], [ 0, %161 ]
  %219 = phi i32 [ %214, %213 ], [ %158, %161 ]
  %220 = zext i32 %217 to i64
  %221 = getelementptr inbounds [16 x i8], [16 x i8]* @vp8_coef_bands, i64 0, i64 %220
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i64
  %224 = sext i32 %219 to i64
  %225 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %181, i64 3, i64 %223, i64 %224, i64 11
  %226 = load i32, i32* %225, align 4
  %227 = add nsw i32 %226, %218
  br label %228

228:                                              ; preds = %216, %213
  %229 = phi i32 [ %217, %216 ], [ %178, %213 ]
  %230 = phi i32 [ %227, %216 ], [ %207, %213 ]
  %231 = icmp ne i32 %229, 0
  %232 = zext i1 %231 to i8
  %233 = add nsw i32 %230, %169
  %234 = load i16*, i16** %153, align 8
  %235 = load i16*, i16** %159, align 8
  %236 = call i32 @vp8_block_error_sse2(i16* %234, i16* %235) #8
  %237 = ashr i32 %236, 2
  %238 = load i32, i32* %62, align 8
  %239 = mul nsw i32 %238, %233
  %240 = add nsw i32 %239, 128
  %241 = ashr i32 %240, 8
  %242 = load i32, i32* %63, align 4
  %243 = mul nsw i32 %242, %237
  %244 = add nsw i32 %241, %243
  %245 = icmp slt i32 %244, %167
  br i1 %245, label %246, label %260

246:                                              ; preds = %228
  store i8 %232, i8* %132, align 1
  store i8 %232, i8* %136, align 1
  %247 = load i8*, i8** %151, align 8
  %248 = bitcast i8* %247 to i32*
  %249 = load i32, i32* %248, align 4
  store i32 %249, i32* %64, align 16
  %250 = getelementptr inbounds i8, i8* %247, i64 16
  %251 = bitcast i8* %250 to i32*
  %252 = load i32, i32* %251, align 4
  store i32 %252, i32* %66, align 16
  %253 = getelementptr inbounds i8, i8* %247, i64 32
  %254 = bitcast i8* %253 to i32*
  %255 = load i32, i32* %254, align 4
  store i32 %255, i32* %68, align 16
  %256 = getelementptr inbounds i8, i8* %247, i64 48
  %257 = bitcast i8* %256 to i32*
  %258 = load i32, i32* %257, align 4
  store i32 %258, i32* %70, align 16
  %259 = load i8*, i8** %160, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %55, i8* align 2 %259, i64 32, i1 false) #8
  br label %260

260:                                              ; preds = %246, %228
  %261 = phi i32 [ %171, %246 ], [ %162, %228 ]
  %262 = phi i32 [ %233, %246 ], [ %163, %228 ]
  %263 = phi i32 [ %230, %246 ], [ %164, %228 ]
  %264 = phi i32 [ %237, %246 ], [ %165, %228 ]
  %265 = phi i32 [ %244, %246 ], [ %167, %228 ]
  %266 = add nuw nsw i64 %166, 1
  %267 = icmp eq i64 %266, 10
  br i1 %267, label %268, label %161

268:                                              ; preds = %260
  %269 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %73, i32 6, i32 0
  store i32 %261, i32* %269, align 8
  call void @vp8_short_idct4x4llm_mmx(i16* nonnull %56, i8* nonnull %54, i32 16, i8* %144, i32 %139) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %55) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %54) #8
  %270 = sext i32 %265 to i64
  %271 = add nsw i64 %75, %270
  %272 = add nsw i32 %262, %78
  %273 = add nsw i32 %264, %77
  %274 = add nsw i32 %263, %76
  %275 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %79, i64 0, i32 1, i64 %73, i32 0
  store i32 %261, i32* %275, align 4
  %276 = icmp slt i64 %271, %71
  %277 = add nuw nsw i64 %73, 1
  %278 = icmp ult i64 %277, 16
  %279 = and i1 %276, %278
  br i1 %279, label %72, label %280

280:                                              ; preds = %268
  br i1 %276, label %281, label %289

281:                                              ; preds = %280
  store i32 %272, i32* %1, align 4
  store i32 %274, i32* %2, align 4
  store i32 %273, i32* %3, align 4
  %282 = load i32, i32* %62, align 8
  %283 = mul nsw i32 %282, %272
  %284 = add nsw i32 %283, 128
  %285 = ashr i32 %284, 8
  %286 = load i32, i32* %63, align 4
  %287 = mul nsw i32 %286, %273
  %288 = add nsw i32 %285, %287
  br label %289

289:                                              ; preds = %280, %281
  %290 = phi i32 [ %288, %281 ], [ 2147483647, %280 ]
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %18) #8
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %17) #8
  ret i32 %290
}

declare void @vp8_build_intra_predictors_mby_s(%struct.macroblockd*, i8*, i8*, i32, i8*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @macro_block_yrd(%struct.macroblock*, i32* nocapture, i32* nocapture) unnamed_addr #1 {
  %4 = alloca %struct.ENTROPY_CONTEXT_PLANES, align 1
  %5 = alloca %struct.ENTROPY_CONTEXT_PLANES, align 1
  %6 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 24
  %8 = getelementptr inbounds %struct.block, %struct.block* %7, i64 0, i32 0
  %9 = load i16*, i16** %8, align 8
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0, i32 9
  %12 = load i8**, i8*** %11, align 8
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0, i32 11
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 0, i64 0
  tail call void @vp8_subtract_mby(i16* %10, i8* %13, i32 %15, i8* %16, i32 16) #8
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 16
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 68
  br label %19

19:                                               ; preds = %3, %19
  %20 = phi %struct.block* [ %6, %3 ], [ %34, %19 ]
  %21 = phi i16* [ %9, %3 ], [ %33, %19 ]
  %22 = load void (i16*, i16*, i32)*, void (i16*, i16*, i32)** %18, align 8
  %23 = getelementptr inbounds %struct.block, %struct.block* %20, i64 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = getelementptr inbounds %struct.block, %struct.block* %20, i64 0, i32 1
  %26 = load i16*, i16** %25, align 8
  tail call void %22(i16* %24, i16* %26, i32 32) #8
  %27 = load i16*, i16** %25, align 8
  %28 = load i16, i16* %27, align 2
  %29 = getelementptr inbounds i16, i16* %21, i64 1
  store i16 %28, i16* %21, align 2
  %30 = load i16*, i16** %25, align 8
  %31 = getelementptr inbounds i16, i16* %30, i64 16
  %32 = load i16, i16* %31, align 2
  %33 = getelementptr inbounds i16, i16* %21, i64 2
  store i16 %32, i16* %29, align 2
  %34 = getelementptr inbounds %struct.block, %struct.block* %20, i64 2
  %35 = icmp ult %struct.block* %34, %17
  br i1 %35, label %19, label %36

36:                                               ; preds = %19
  %37 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 24
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 69
  %39 = load void (i16*, i16*, i32)*, void (i16*, i16*, i32)** %38, align 32
  %40 = load i16*, i16** %8, align 8
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 24, i32 1
  %42 = load i16*, i16** %41, align 8
  tail call void %39(i16* %40, i16* %42, i32 8) #8
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 70
  %44 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 0
  tail call void %44(%struct.block* %6, %struct.blockd* %45) #8
  %46 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 1
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 1
  tail call void %46(%struct.block* %47, %struct.blockd* %48) #8
  %49 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %50 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 2
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 2
  tail call void %49(%struct.block* %50, %struct.blockd* %51) #8
  %52 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %53 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 3
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 3
  tail call void %52(%struct.block* %53, %struct.blockd* %54) #8
  %55 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %56 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 4
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 4
  tail call void %55(%struct.block* %56, %struct.blockd* %57) #8
  %58 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %59 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 5
  %60 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 5
  tail call void %58(%struct.block* %59, %struct.blockd* %60) #8
  %61 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %62 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 6
  %63 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 6
  tail call void %61(%struct.block* %62, %struct.blockd* %63) #8
  %64 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 7
  %66 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 7
  tail call void %64(%struct.block* %65, %struct.blockd* %66) #8
  %67 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %68 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 8
  %69 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 8
  tail call void %67(%struct.block* %68, %struct.blockd* %69) #8
  %70 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %71 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 9
  %72 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 9
  tail call void %70(%struct.block* %71, %struct.blockd* %72) #8
  %73 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %74 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 10
  %75 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 10
  tail call void %73(%struct.block* %74, %struct.blockd* %75) #8
  %76 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %77 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 11
  %78 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 11
  tail call void %76(%struct.block* %77, %struct.blockd* %78) #8
  %79 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %80 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 12
  %81 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 12
  tail call void %79(%struct.block* %80, %struct.blockd* %81) #8
  %82 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %83 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 13
  %84 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 13
  tail call void %82(%struct.block* %83, %struct.blockd* %84) #8
  %85 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %86 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 14
  %87 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 14
  tail call void %85(%struct.block* %86, %struct.blockd* %87) #8
  %88 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  %89 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 15
  %90 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 15
  tail call void %88(%struct.block* %89, %struct.blockd* %90) #8
  %91 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %43, align 8
  tail call void %91(%struct.block* %7, %struct.blockd* %37) #8
  %92 = tail call i32 @vp8_mbblock_error_sse2(%struct.macroblock* %0, i32 1) #8
  %93 = shl i32 %92, 2
  %94 = load i16*, i16** %41, align 8
  %95 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 24, i32 1
  %96 = load i16*, i16** %95, align 8
  %97 = tail call i32 @vp8_block_error_sse2(i16* %94, i16* %96) #8
  %98 = add nsw i32 %97, %93
  %99 = ashr i32 %98, 4
  store i32 %99, i32* %2, align 4
  %100 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %4, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %100) #8
  %101 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %5, i64 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %100, i8 -86, i64 9, i1 false) #8
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %101) #8
  %102 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 21
  %103 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %102 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %101, i8 -86, i64 9, i1 false) #8
  %104 = load i8*, i8** %103, align 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %100, i8* align 1 %104, i64 9, i1 false) #8
  %105 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 22
  %106 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %105 to i8**
  %107 = load i8*, i8** %106, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %101, i8* align 1 %107, i64 9, i1 false) #8
  %108 = load %struct.TOKENVALUE*, %struct.TOKENVALUE** @vp8_dct_value_tokens_ptr, align 8
  %109 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 29
  %110 = load i16*, i16** @vp8_dct_value_cost_ptr, align 8
  %111 = load [8 x [3 x [12 x i32]]]*, [8 x [3 x [12 x i32]]]** %109, align 8
  br label %112

112:                                              ; preds = %181, %36
  %113 = phi i64 [ 0, %36 ], [ %187, %181 ]
  %114 = phi i32 [ 0, %36 ], [ %186, %181 ]
  %115 = getelementptr inbounds [25 x i8], [25 x i8]* @vp8_block2above, i64 0, i64 %113
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i64
  %118 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %4, i64 0, i32 0, i64 %117
  %119 = getelementptr inbounds [25 x i8], [25 x i8]* @vp8_block2left, i64 0, i64 %113
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i64
  %122 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %5, i64 0, i32 0, i64 %121
  %123 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %113, i32 5
  %124 = load i8*, i8** %123, align 8
  %125 = load i8, i8* %124, align 1
  %126 = sext i8 %125 to i32
  %127 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %113, i32 0
  %128 = load i16*, i16** %127, align 8
  %129 = load i8, i8* %118, align 1
  %130 = sext i8 %129 to i32
  %131 = load i8, i8* %122, align 1
  %132 = sext i8 %131 to i32
  %133 = add nsw i32 %132, %130
  %134 = icmp sgt i8 %125, 1
  br i1 %134, label %135, label %169

135:                                              ; preds = %112
  %136 = zext i32 %126 to i64
  br label %137

137:                                              ; preds = %137, %135
  %138 = phi i64 [ 1, %135 ], [ %164, %137 ]
  %139 = phi i32 [ 0, %135 ], [ %160, %137 ]
  %140 = phi i32 [ %133, %135 ], [ %163, %137 ]
  %141 = getelementptr inbounds [16 x i32], [16 x i32]* @vp8_default_zig_zag1d, i64 0, i64 %138
  %142 = load i32, i32* %141, align 4
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i16, i16* %128, i64 %143
  %145 = load i16, i16* %144, align 2
  %146 = sext i16 %145 to i64
  %147 = getelementptr inbounds %struct.TOKENVALUE, %struct.TOKENVALUE* %108, i64 %146, i32 0
  %148 = load i16, i16* %147, align 2
  %149 = getelementptr inbounds [16 x i8], [16 x i8]* @vp8_coef_bands, i64 0, i64 %138
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i64
  %152 = sext i32 %140 to i64
  %153 = sext i16 %148 to i64
  %154 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %111, i64 0, i64 %151, i64 %152, i64 %153
  %155 = load i32, i32* %154, align 4
  %156 = add nsw i32 %155, %139
  %157 = getelementptr inbounds i16, i16* %110, i64 %146
  %158 = load i16, i16* %157, align 2
  %159 = sext i16 %158 to i32
  %160 = add nsw i32 %156, %159
  %161 = getelementptr inbounds [12 x i8], [12 x i8]* @vp8_prev_token_class, i64 0, i64 %153
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = add nuw nsw i64 %138, 1
  %165 = icmp eq i64 %164, %136
  br i1 %165, label %166, label %137

166:                                              ; preds = %137
  %167 = zext i8 %162 to i32
  %168 = icmp ult i8 %125, 16
  br i1 %168, label %169, label %181

169:                                              ; preds = %112, %166
  %170 = phi i32 [ %126, %166 ], [ 1, %112 ]
  %171 = phi i32 [ %160, %166 ], [ 0, %112 ]
  %172 = phi i32 [ %167, %166 ], [ %133, %112 ]
  %173 = zext i32 %170 to i64
  %174 = getelementptr inbounds [16 x i8], [16 x i8]* @vp8_coef_bands, i64 0, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i64
  %177 = sext i32 %172 to i64
  %178 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %111, i64 0, i64 %176, i64 %177, i64 11
  %179 = load i32, i32* %178, align 4
  %180 = add nsw i32 %179, %171
  br label %181

181:                                              ; preds = %169, %166
  %182 = phi i32 [ %170, %169 ], [ %126, %166 ]
  %183 = phi i32 [ %180, %169 ], [ %160, %166 ]
  %184 = icmp ne i32 %182, 1
  %185 = zext i1 %184 to i8
  store i8 %185, i8* %122, align 1
  store i8 %185, i8* %118, align 1
  %186 = add nsw i32 %183, %114
  %187 = add nuw nsw i64 %113, 1
  %188 = icmp eq i64 %187, 16
  br i1 %188, label %189, label %112

189:                                              ; preds = %181
  %190 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2above, i64 0, i64 24), align 8
  %191 = zext i8 %190 to i64
  %192 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %4, i64 0, i32 0, i64 %191
  %193 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2left, i64 0, i64 24), align 8
  %194 = zext i8 %193 to i64
  %195 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %5, i64 0, i32 0, i64 %194
  %196 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 24, i32 5
  %197 = load i8*, i8** %196, align 8
  %198 = load i8, i8* %197, align 1
  %199 = sext i8 %198 to i32
  %200 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 24, i32 0
  %201 = load i16*, i16** %200, align 8
  %202 = load i8, i8* %192, align 1
  %203 = sext i8 %202 to i32
  %204 = load i8, i8* %195, align 1
  %205 = sext i8 %204 to i32
  %206 = add nsw i32 %205, %203
  %207 = icmp sgt i8 %198, 0
  br i1 %207, label %208, label %242

208:                                              ; preds = %189
  %209 = zext i32 %199 to i64
  br label %210

210:                                              ; preds = %210, %208
  %211 = phi i64 [ 0, %208 ], [ %237, %210 ]
  %212 = phi i32 [ 0, %208 ], [ %233, %210 ]
  %213 = phi i32 [ %206, %208 ], [ %236, %210 ]
  %214 = getelementptr inbounds [16 x i32], [16 x i32]* @vp8_default_zig_zag1d, i64 0, i64 %211
  %215 = load i32, i32* %214, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds i16, i16* %201, i64 %216
  %218 = load i16, i16* %217, align 2
  %219 = sext i16 %218 to i64
  %220 = getelementptr inbounds %struct.TOKENVALUE, %struct.TOKENVALUE* %108, i64 %219, i32 0
  %221 = load i16, i16* %220, align 2
  %222 = getelementptr inbounds [16 x i8], [16 x i8]* @vp8_coef_bands, i64 0, i64 %211
  %223 = load i8, i8* %222, align 1
  %224 = zext i8 %223 to i64
  %225 = sext i32 %213 to i64
  %226 = sext i16 %221 to i64
  %227 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %111, i64 1, i64 %224, i64 %225, i64 %226
  %228 = load i32, i32* %227, align 4
  %229 = add nsw i32 %228, %212
  %230 = getelementptr inbounds i16, i16* %110, i64 %219
  %231 = load i16, i16* %230, align 2
  %232 = sext i16 %231 to i32
  %233 = add nsw i32 %229, %232
  %234 = getelementptr inbounds [12 x i8], [12 x i8]* @vp8_prev_token_class, i64 0, i64 %226
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i32
  %237 = add nuw nsw i64 %211, 1
  %238 = icmp eq i64 %237, %209
  br i1 %238, label %239, label %210

239:                                              ; preds = %210
  %240 = zext i8 %235 to i32
  %241 = icmp ult i8 %198, 16
  br i1 %241, label %242, label %254

242:                                              ; preds = %189, %239
  %243 = phi i32 [ %199, %239 ], [ 0, %189 ]
  %244 = phi i32 [ %233, %239 ], [ 0, %189 ]
  %245 = phi i32 [ %240, %239 ], [ %206, %189 ]
  %246 = zext i32 %243 to i64
  %247 = getelementptr inbounds [16 x i8], [16 x i8]* @vp8_coef_bands, i64 0, i64 %246
  %248 = load i8, i8* %247, align 1
  %249 = zext i8 %248 to i64
  %250 = sext i32 %245 to i64
  %251 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %111, i64 1, i64 %249, i64 %250, i64 11
  %252 = load i32, i32* %251, align 4
  %253 = add nsw i32 %252, %244
  br label %254

254:                                              ; preds = %239, %242
  %255 = phi i32 [ %253, %242 ], [ %233, %239 ]
  %256 = add nsw i32 %255, %186
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %101) #8
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %100) #8
  store i32 %256, i32* %1, align 4
  ret void
}

declare i32 @vp8_mv_bit_cost(%union.int_mv*, %union.int_mv*, i32**, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @evaluate_inter_mode_rd(i32*, %struct.rate_distortion_struct* nocapture, i32* nocapture, %struct.VP8_COMP* nocapture readonly, %struct.macroblock*) unnamed_addr #1 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 6
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 6, i32 13
  %11 = load %struct.modeinfo*, %struct.modeinfo** %10, align 32
  %12 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %11, i64 0, i32 0, i32 0
  %13 = load i8, i8* %12, align 4
  %14 = zext i8 %13 to i64
  %15 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #8
  store i32 -1431655766, i32* %7, align 4
  %16 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %9, i64 0, i32 0, i64 0
  tail call void @vp8_build_inter16x16_predictors_mby(%struct.macroblockd* %9, i8* %16, i32 16) #8
  %17 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %3, i64 0, i32 138
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %27, label %20

20:                                               ; preds = %5
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 37
  %22 = load i8*, i8** %21, align 16
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 34
  store i32 1, i32* %26, align 32
  br label %89

27:                                               ; preds = %5, %20
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 35
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %89, label %31

31:                                               ; preds = %27
  %32 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #8
  store i32 -1431655766, i32* %8, align 4
  %33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 6, i32 9, i64 0, i32 3
  %34 = load i16*, i16** %33, align 8
  %35 = getelementptr inbounds i16, i16* %34, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = mul nsw i32 %37, %37
  %39 = lshr i32 %38, 4
  %40 = icmp ult i32 %39, %29
  %41 = select i1 %40, i32 %29, i32 %39
  %42 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_variance16x16, align 8
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 4, i64 0, i32 9
  %44 = load i8**, i8*** %43, align 8
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 4, i64 0, i32 11
  %47 = load i32, i32* %46, align 4
  %48 = call i32 %42(i8* %45, i32 %47, i8* %16, i32 16, i32* nonnull %8) #8
  %49 = load i32, i32* %8, align 4
  %50 = icmp ult i32 %49, %41
  br i1 %50, label %51, label %69

51:                                               ; preds = %31
  %52 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 6, i32 9, i64 24, i32 3
  %53 = load i16*, i16** %52, align 8
  %54 = load i16, i16* %53, align 2
  %55 = sext i16 %54 to i32
  %56 = sub i32 %49, %48
  %57 = mul nsw i32 %55, %55
  %58 = lshr i32 %57, 4
  %59 = icmp ult i32 %56, %58
  br i1 %59, label %65, label %60

60:                                               ; preds = %51
  %61 = lshr i32 %49, 1
  %62 = icmp ugt i32 %61, %48
  %63 = icmp ult i32 %56, 64
  %64 = and i1 %62, %63
  br i1 %64, label %65, label %69

65:                                               ; preds = %60, %51
  %66 = call i32 @VP8_UVSSE(%struct.macroblock* %4)
  %67 = shl i32 %66, 1
  %68 = icmp ult i32 %67, %41
  br i1 %68, label %70, label %69

69:                                               ; preds = %31, %60, %65
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #8
  br label %89

70:                                               ; preds = %65
  %71 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 34
  store i32 1, i32* %71, align 32
  %72 = load i32, i32* %8, align 4
  %73 = add i32 %72, %66
  %74 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 3
  store i32 %73, i32* %74, align 4
  %75 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 0
  store i32 500, i32* %75, align 4
  %76 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 2
  store i32 0, i32* %76, align 4
  %77 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 4
  store i32 %66, i32* %77, align 4
  store i32 1, i32* %2, align 4
  %78 = load i32, i32* %75, align 4
  %79 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 18
  %80 = load i32, i32* %79, align 8
  %81 = mul nsw i32 %80, %78
  %82 = add nsw i32 %81, 128
  %83 = ashr i32 %82, 8
  %84 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 17
  %85 = load i32, i32* %84, align 4
  %86 = load i32, i32* %74, align 4
  %87 = mul nsw i32 %86, %85
  %88 = add nsw i32 %83, %87
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #8
  br label %155

89:                                               ; preds = %69, %27, %25
  %90 = bitcast i32* %6 to [4 x i8]*
  %91 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %91) #8
  store i32 -1431655766, i32* %6, align 4
  %92 = call i8* @vp8_mv_ref_probs(i8* nonnull %91, i32* %0) #8
  %93 = add nuw nsw i64 %14, 4294967291
  %94 = and i64 %93, 4294967295
  %95 = getelementptr inbounds [5 x %struct.vp8_token_struct], [5 x %struct.vp8_token_struct]* @vp8_mv_ref_encoding_array, i64 0, i64 %94, i32 0
  %96 = load i32, i32* %95, align 8
  %97 = getelementptr inbounds [5 x %struct.vp8_token_struct], [5 x %struct.vp8_token_struct]* @vp8_mv_ref_encoding_array, i64 0, i64 %94, i32 1
  %98 = load i32, i32* %97, align 4
  br label %99

99:                                               ; preds = %99, %89
  %100 = phi i32 [ 0, %89 ], [ %118, %99 ]
  %101 = phi i8 [ 0, %89 ], [ %122, %99 ]
  %102 = phi i32 [ %98, %89 ], [ %103, %99 ]
  %103 = add nsw i32 %102, -1
  %104 = lshr i32 %96, %103
  %105 = and i32 %104, 1
  %106 = icmp eq i32 %105, 0
  %107 = sext i8 %101 to i32
  %108 = ashr i32 %107, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [4 x i8], [4 x i8]* %90, i64 0, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = xor i32 %112, 255
  %114 = select i1 %106, i32 %112, i32 %113
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = add i32 %117, %100
  %119 = add nsw i32 %105, %107
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_mv_ref_tree, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = icmp eq i32 %103, 0
  br i1 %123, label %124, label %99

124:                                              ; preds = %99
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %91) #8
  %125 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 0
  %126 = load i32, i32* %125, align 4
  %127 = add nsw i32 %126, %118
  store i32 %127, i32* %125, align 4
  %128 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 1
  call fastcc void @macro_block_yrd(%struct.macroblock* %4, i32* %128, i32* nonnull %7)
  %129 = load i32, i32* %128, align 4
  %130 = load i32, i32* %125, align 4
  %131 = add nsw i32 %130, %129
  store i32 %131, i32* %125, align 4
  %132 = load i32, i32* %7, align 4
  %133 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 3
  %134 = load i32, i32* %133, align 4
  %135 = add nsw i32 %134, %132
  store i32 %135, i32* %133, align 4
  %136 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 2
  %137 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 4
  call void @vp8_build_inter16x16_predictors_mbuv(%struct.macroblockd* %9) #8
  %138 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 0, i64 0
  %139 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 5, i32 14
  %140 = load i8*, i8** %139, align 32
  %141 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 5, i32 15
  %142 = load i8*, i8** %141, align 8
  %143 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 5, i32 9
  %144 = load i32, i32* %143, align 4
  %145 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 6, i32 0, i64 256
  %146 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %4, i64 0, i32 6, i32 0, i64 320
  call void @vp8_subtract_mbuv(i16* %138, i8* %140, i8* %142, i32 %144, i8* %145, i8* %146, i32 8) #8
  call void @vp8_transform_mbuv(%struct.macroblock* %4) #8
  call void @vp8_quantize_mbuv(%struct.macroblock* %4) #8
  %147 = call fastcc i32 @rd_cost_mbuv(%struct.macroblock* %4) #8
  store i32 %147, i32* %136, align 4
  %148 = call i32 @vp8_mbuverror_sse2(%struct.macroblock* %4) #8
  %149 = sdiv i32 %148, 4
  store i32 %149, i32* %137, align 4
  %150 = load i32, i32* %136, align 4
  %151 = load i32, i32* %125, align 4
  %152 = add nsw i32 %151, %150
  store i32 %152, i32* %125, align 4
  %153 = load i32, i32* %133, align 4
  %154 = add nsw i32 %153, %149
  store i32 %154, i32* %133, align 4
  br label %155

155:                                              ; preds = %70, %124
  %156 = phi i32 [ 2147483647, %124 ], [ %88, %70 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #8
  ret i32 %156
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @calculate_final_rd_costs(i32, %struct.rate_distortion_struct* nocapture, i32* nocapture, i32, i32, i32, %struct.VP8_COMP* nocapture readonly, %struct.macroblock* nocapture readonly) unnamed_addr #5 {
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 13
  %10 = load %struct.modeinfo*, %struct.modeinfo** %9, align 32
  %11 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %10, i64 0, i32 0, i32 0
  %12 = load i8, i8* %11, align 4
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %6, i64 0, i32 19, i32 30
  %14 = load i32, i32* %13, align 32
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  br label %31

19:                                               ; preds = %8
  %20 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %6, i64 0, i32 123
  %21 = load i32, i32* %20, align 8
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = load i32, i32* %2, align 4
  %26 = add i32 %25, %24
  store i32 %26, i32* %2, align 4
  %27 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, %26
  store i32 %29, i32* %27, align 4
  %30 = load %struct.modeinfo*, %struct.modeinfo** %9, align 32
  br label %31

31:                                               ; preds = %16, %19
  %32 = phi i32 [ %18, %16 ], [ %29, %19 ]
  %33 = phi %struct.modeinfo* [ %10, %16 ], [ %30, %19 ]
  %34 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %33, i64 0, i32 0, i32 2
  %35 = load i8, i8* %34, align 2
  %36 = zext i8 %35 to i64
  %37 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 10, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 0
  %40 = add nsw i32 %32, %38
  store i32 %40, i32* %39, align 4
  %41 = icmp eq i32 %3, 0
  br i1 %41, label %42, label %237

42:                                               ; preds = %31
  %43 = load i32, i32* %13, align 32
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %216, label %45

45:                                               ; preds = %42
  %46 = icmp ne i8 %12, 9
  %47 = icmp ne i8 %12, 4
  %48 = and i1 %46, %47
  %49 = zext i1 %48 to i32
  switch i8 %12, label %50 [
    i8 9, label %54
    i8 4, label %54
  ]

50:                                               ; preds = %45
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 24
  %52 = load i8, i8* %51, align 8
  %53 = sext i8 %52 to i32
  br label %54

54:                                               ; preds = %45, %45, %50
  %55 = phi i32 [ %53, %50 ], [ 0, %45 ], [ 0, %45 ]
  %56 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 0
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i32
  %59 = icmp sgt i32 %58, %49
  %60 = zext i1 %59 to i32
  %61 = add nsw i32 %55, %60
  %62 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 1
  %63 = load i8, i8* %62, align 1
  %64 = sext i8 %63 to i32
  %65 = icmp sgt i32 %64, %49
  %66 = zext i1 %65 to i32
  %67 = add nsw i32 %61, %66
  %68 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 2
  %69 = load i8, i8* %68, align 1
  %70 = sext i8 %69 to i32
  %71 = icmp sgt i32 %70, %49
  %72 = zext i1 %71 to i32
  %73 = add nsw i32 %67, %72
  %74 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 3
  %75 = load i8, i8* %74, align 1
  %76 = sext i8 %75 to i32
  %77 = icmp sgt i32 %76, %49
  %78 = zext i1 %77 to i32
  %79 = add nsw i32 %73, %78
  %80 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 4
  %81 = load i8, i8* %80, align 1
  %82 = sext i8 %81 to i32
  %83 = icmp sgt i32 %82, %49
  %84 = zext i1 %83 to i32
  %85 = add nsw i32 %79, %84
  %86 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 5
  %87 = load i8, i8* %86, align 1
  %88 = sext i8 %87 to i32
  %89 = icmp sgt i32 %88, %49
  %90 = zext i1 %89 to i32
  %91 = add nsw i32 %85, %90
  %92 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 6
  %93 = load i8, i8* %92, align 1
  %94 = sext i8 %93 to i32
  %95 = icmp sgt i32 %94, %49
  %96 = zext i1 %95 to i32
  %97 = add nsw i32 %91, %96
  %98 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 7
  %99 = load i8, i8* %98, align 1
  %100 = sext i8 %99 to i32
  %101 = icmp sgt i32 %100, %49
  %102 = zext i1 %101 to i32
  %103 = add nsw i32 %97, %102
  %104 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 8
  %105 = load i8, i8* %104, align 1
  %106 = sext i8 %105 to i32
  %107 = icmp sgt i32 %106, %49
  %108 = zext i1 %107 to i32
  %109 = add nsw i32 %103, %108
  %110 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 9
  %111 = load i8, i8* %110, align 1
  %112 = sext i8 %111 to i32
  %113 = icmp sgt i32 %112, %49
  %114 = zext i1 %113 to i32
  %115 = add nsw i32 %109, %114
  %116 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 10
  %117 = load i8, i8* %116, align 1
  %118 = sext i8 %117 to i32
  %119 = icmp sgt i32 %118, %49
  %120 = zext i1 %119 to i32
  %121 = add nsw i32 %115, %120
  %122 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 11
  %123 = load i8, i8* %122, align 1
  %124 = sext i8 %123 to i32
  %125 = icmp sgt i32 %124, %49
  %126 = zext i1 %125 to i32
  %127 = add nsw i32 %121, %126
  %128 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 12
  %129 = load i8, i8* %128, align 1
  %130 = sext i8 %129 to i32
  %131 = icmp sgt i32 %130, %49
  %132 = zext i1 %131 to i32
  %133 = add nsw i32 %127, %132
  %134 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 13
  %135 = load i8, i8* %134, align 1
  %136 = sext i8 %135 to i32
  %137 = icmp sgt i32 %136, %49
  %138 = zext i1 %137 to i32
  %139 = add nsw i32 %133, %138
  %140 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 14
  %141 = load i8, i8* %140, align 1
  %142 = sext i8 %141 to i32
  %143 = icmp sgt i32 %142, %49
  %144 = zext i1 %143 to i32
  %145 = add nsw i32 %139, %144
  %146 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 15
  %147 = load i8, i8* %146, align 1
  %148 = sext i8 %147 to i32
  %149 = icmp sgt i32 %148, %49
  %150 = zext i1 %149 to i32
  %151 = add nsw i32 %145, %150
  %152 = load %struct.modeinfo*, %struct.modeinfo** %9, align 32
  %153 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %152, i64 0, i32 0, i32 2
  %154 = load i8, i8* %153, align 2
  %155 = icmp eq i8 %154, 0
  br i1 %155, label %189, label %156

156:                                              ; preds = %54
  %157 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 16
  %158 = load i8, i8* %157, align 1
  %159 = sext i8 %158 to i32
  %160 = add nsw i32 %151, %159
  %161 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 17
  %162 = load i8, i8* %161, align 1
  %163 = sext i8 %162 to i32
  %164 = add nsw i32 %160, %163
  %165 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 18
  %166 = load i8, i8* %165, align 1
  %167 = sext i8 %166 to i32
  %168 = add nsw i32 %164, %167
  %169 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 19
  %170 = load i8, i8* %169, align 1
  %171 = sext i8 %170 to i32
  %172 = add nsw i32 %168, %171
  %173 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 20
  %174 = load i8, i8* %173, align 1
  %175 = sext i8 %174 to i32
  %176 = add nsw i32 %172, %175
  %177 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 21
  %178 = load i8, i8* %177, align 1
  %179 = sext i8 %178 to i32
  %180 = add nsw i32 %176, %179
  %181 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 22
  %182 = load i8, i8* %181, align 1
  %183 = sext i8 %182 to i32
  %184 = add nsw i32 %180, %183
  %185 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 6, i32 3, i64 23
  %186 = load i8, i8* %185, align 1
  %187 = sext i8 %186 to i32
  %188 = add nsw i32 %184, %187
  br label %191

189:                                              ; preds = %54
  %190 = add nsw i32 %151, %4
  br label %191

191:                                              ; preds = %156, %189
  %192 = phi i32 [ %190, %189 ], [ %188, %156 ]
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %194, label %216

194:                                              ; preds = %191
  %195 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 1
  %196 = load i32, i32* %195, align 4
  %197 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 2
  %198 = load i32, i32* %197, align 4
  %199 = sub i32 %40, %196
  %200 = sub i32 %199, %198
  store i32 %200, i32* %39, align 4
  store i32 0, i32* %197, align 4
  %201 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %6, i64 0, i32 123
  %202 = load i32, i32* %201, align 8
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %216, label %204

204:                                              ; preds = %194
  %205 = sub nsw i32 255, %202
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %206
  %208 = load i32, i32* %207, align 4
  %209 = sext i32 %202 to i64
  %210 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = sub nsw i32 %208, %211
  %213 = add nsw i32 %212, %200
  store i32 %213, i32* %39, align 4
  %214 = load i32, i32* %2, align 4
  %215 = add nsw i32 %214, %212
  store i32 %215, i32* %2, align 4
  br label %216

216:                                              ; preds = %191, %204, %194, %42
  %217 = load i32, i32* %39, align 4
  %218 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 18
  %219 = load i32, i32* %218, align 8
  %220 = mul nsw i32 %219, %217
  %221 = add nsw i32 %220, 128
  %222 = ashr i32 %221, 8
  %223 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %7, i64 0, i32 17
  %224 = load i32, i32* %223, align 4
  %225 = getelementptr inbounds %struct.rate_distortion_struct, %struct.rate_distortion_struct* %1, i64 0, i32 3
  %226 = load i32, i32* %225, align 4
  %227 = mul nsw i32 %226, %224
  %228 = add nsw i32 %222, %227
  %229 = icmp eq i32 %228, 2147483647
  br i1 %229, label %237, label %230

230:                                              ; preds = %216
  %231 = load %struct.modeinfo*, %struct.modeinfo** %9, align 32
  %232 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %231, i64 0, i32 0, i32 2
  %233 = load i8, i8* %232, align 2
  %234 = icmp eq i8 %233, 0
  %235 = select i1 %234, i32 %5, i32 0
  %236 = add nsw i32 %235, %228
  ret i32 %236

237:                                              ; preds = %216, %31
  %238 = phi i32 [ %0, %31 ], [ 2147483647, %216 ]
  ret i32 %238
}

declare i32 @vp8_get_inter_mbpred_error(%struct.macroblock*, %struct.variance_vtable*, i32*, i32) local_unnamed_addr #3

declare void @vp8_denoiser_denoise_mb(%struct.vp8_denoiser*, %struct.macroblock*, i32, i32, i32, i32, %struct.loop_filter_info_n*, i32, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_rd_pick_intra_mode(%struct.macroblock*, i32* nocapture) local_unnamed_addr #1 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #8
  store i32 -1431655766, i32* %5, align 4
  %12 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #8
  store i32 -1431655766, i32* %6, align 4
  %13 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #8
  store i32 -1431655766, i32* %7, align 4
  %14 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #8
  store i32 -1431655766, i32* %8, align 4
  %15 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #8
  store i32 0, i32* %9, align 4
  %16 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #8
  store i32 0, i32* %10, align 4
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 13
  %18 = load %struct.modeinfo*, %struct.modeinfo** %17, align 32
  %19 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %18, i64 0, i32 0, i32 2
  store i8 0, i8* %19, align 2
  call fastcc void @rd_pick_intra_mbuv_mode(%struct.macroblock* %0, i32* nonnull %6, i32* nonnull %10, i32* nonnull %8)
  %20 = load i32, i32* %6, align 4
  %21 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #8
  store i32 -1431655766, i32* %3, align 4
  %22 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #8
  store i32 -1431655766, i32* %4, align 4
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 13
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 12, i32 4
  %26 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %23, i64 0, i32 0, i64 0
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 25
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 15
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 18
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 17
  %31 = load %struct.modeinfo*, %struct.modeinfo** %17, align 32
  %32 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %31, i64 0, i32 0, i32 0
  store i8 0, i8* %32, align 4
  %33 = load i8*, i8** %24, align 8
  %34 = load i32, i32* %25, align 16
  %35 = sext i32 %34 to i64
  %36 = sub nsw i64 0, %35
  %37 = getelementptr inbounds i8, i8* %33, i64 %36
  %38 = getelementptr inbounds i8, i8* %33, i64 -1
  tail call void @vp8_build_intra_predictors_mby_s(%struct.macroblockd* %23, i8* %37, i8* %38, i32 %34, i8* %26, i32 16) #8
  call fastcc void @macro_block_yrd(%struct.macroblock* %0, i32* nonnull %3, i32* nonnull %4) #8
  %39 = load i32, i32* %3, align 4
  %40 = load [10 x i32]*, [10 x i32]** %27, align 8
  %41 = load i32, i32* %28, align 4
  %42 = zext i32 %41 to i64
  %43 = load %struct.modeinfo*, %struct.modeinfo** %17, align 32
  %44 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %43, i64 0, i32 0, i32 0
  %45 = load i8, i8* %44, align 4
  %46 = zext i8 %45 to i64
  %47 = getelementptr inbounds [10 x i32], [10 x i32]* %40, i64 %42, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = add nsw i32 %48, %39
  %50 = load i32, i32* %29, align 8
  %51 = mul nsw i32 %49, %50
  %52 = add nsw i32 %51, 128
  %53 = ashr i32 %52, 8
  %54 = load i32, i32* %30, align 4
  %55 = load i32, i32* %4, align 4
  %56 = mul nsw i32 %55, %54
  %57 = add nsw i32 %53, %56
  %58 = icmp ne i32 %57, 2147483647
  %59 = select i1 %58, i32 %49, i32 0
  %60 = select i1 %58, i8 0, i8 10
  %61 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %43, i64 0, i32 0, i32 0
  store i8 1, i8* %61, align 4
  %62 = load i8*, i8** %24, align 8
  %63 = load i32, i32* %25, align 16
  %64 = sext i32 %63 to i64
  %65 = sub nsw i64 0, %64
  %66 = getelementptr inbounds i8, i8* %62, i64 %65
  %67 = getelementptr inbounds i8, i8* %62, i64 -1
  tail call void @vp8_build_intra_predictors_mby_s(%struct.macroblockd* %23, i8* %66, i8* %67, i32 %63, i8* %26, i32 16) #8
  call fastcc void @macro_block_yrd(%struct.macroblock* %0, i32* nonnull %3, i32* nonnull %4) #8
  %68 = load i32, i32* %3, align 4
  %69 = load [10 x i32]*, [10 x i32]** %27, align 8
  %70 = load i32, i32* %28, align 4
  %71 = zext i32 %70 to i64
  %72 = load %struct.modeinfo*, %struct.modeinfo** %17, align 32
  %73 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %72, i64 0, i32 0, i32 0
  %74 = load i8, i8* %73, align 4
  %75 = zext i8 %74 to i64
  %76 = getelementptr inbounds [10 x i32], [10 x i32]* %69, i64 %71, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = add nsw i32 %77, %68
  %79 = load i32, i32* %29, align 8
  %80 = mul nsw i32 %78, %79
  %81 = add nsw i32 %80, 128
  %82 = ashr i32 %81, 8
  %83 = load i32, i32* %30, align 4
  %84 = load i32, i32* %4, align 4
  %85 = mul nsw i32 %84, %83
  %86 = add nsw i32 %82, %85
  %87 = icmp slt i32 %86, %57
  %88 = select i1 %87, i32 %78, i32 %59
  %89 = select i1 %87, i8 1, i8 %60
  %90 = select i1 %87, i32 %86, i32 %57
  %91 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %72, i64 0, i32 0, i32 0
  store i8 2, i8* %91, align 4
  %92 = load i8*, i8** %24, align 8
  %93 = load i32, i32* %25, align 16
  %94 = sext i32 %93 to i64
  %95 = sub nsw i64 0, %94
  %96 = getelementptr inbounds i8, i8* %92, i64 %95
  %97 = getelementptr inbounds i8, i8* %92, i64 -1
  tail call void @vp8_build_intra_predictors_mby_s(%struct.macroblockd* %23, i8* %96, i8* %97, i32 %93, i8* %26, i32 16) #8
  call fastcc void @macro_block_yrd(%struct.macroblock* %0, i32* nonnull %3, i32* nonnull %4) #8
  %98 = load i32, i32* %3, align 4
  %99 = load [10 x i32]*, [10 x i32]** %27, align 8
  %100 = load i32, i32* %28, align 4
  %101 = zext i32 %100 to i64
  %102 = load %struct.modeinfo*, %struct.modeinfo** %17, align 32
  %103 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %102, i64 0, i32 0, i32 0
  %104 = load i8, i8* %103, align 4
  %105 = zext i8 %104 to i64
  %106 = getelementptr inbounds [10 x i32], [10 x i32]* %99, i64 %101, i64 %105
  %107 = load i32, i32* %106, align 4
  %108 = add nsw i32 %107, %98
  %109 = load i32, i32* %29, align 8
  %110 = mul nsw i32 %108, %109
  %111 = add nsw i32 %110, 128
  %112 = ashr i32 %111, 8
  %113 = load i32, i32* %30, align 4
  %114 = load i32, i32* %4, align 4
  %115 = mul nsw i32 %114, %113
  %116 = add nsw i32 %112, %115
  %117 = icmp slt i32 %116, %90
  %118 = select i1 %117, i32 %108, i32 %88
  %119 = select i1 %117, i8 2, i8 %89
  %120 = select i1 %117, i32 %116, i32 %90
  %121 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %102, i64 0, i32 0, i32 0
  store i8 3, i8* %121, align 4
  %122 = load i8*, i8** %24, align 8
  %123 = load i32, i32* %25, align 16
  %124 = sext i32 %123 to i64
  %125 = sub nsw i64 0, %124
  %126 = getelementptr inbounds i8, i8* %122, i64 %125
  %127 = getelementptr inbounds i8, i8* %122, i64 -1
  tail call void @vp8_build_intra_predictors_mby_s(%struct.macroblockd* %23, i8* %126, i8* %127, i32 %123, i8* %26, i32 16) #8
  call fastcc void @macro_block_yrd(%struct.macroblock* %0, i32* nonnull %3, i32* nonnull %4) #8
  %128 = load i32, i32* %3, align 4
  %129 = load [10 x i32]*, [10 x i32]** %27, align 8
  %130 = load i32, i32* %28, align 4
  %131 = zext i32 %130 to i64
  %132 = load %struct.modeinfo*, %struct.modeinfo** %17, align 32
  %133 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %132, i64 0, i32 0, i32 0
  %134 = load i8, i8* %133, align 4
  %135 = zext i8 %134 to i64
  %136 = getelementptr inbounds [10 x i32], [10 x i32]* %129, i64 %131, i64 %135
  %137 = load i32, i32* %136, align 4
  %138 = add nsw i32 %137, %128
  %139 = load i32, i32* %29, align 8
  %140 = mul nsw i32 %138, %139
  %141 = add nsw i32 %140, 128
  %142 = ashr i32 %141, 8
  %143 = load i32, i32* %30, align 4
  %144 = load i32, i32* %4, align 4
  %145 = mul nsw i32 %144, %143
  %146 = add nsw i32 %142, %145
  %147 = icmp slt i32 %146, %120
  %148 = select i1 %147, i32 %138, i32 %118
  %149 = select i1 %147, i8 3, i8 %119
  %150 = select i1 %147, i32 %146, i32 %120
  %151 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %132, i64 0, i32 0, i32 0
  store i8 %149, i8* %151, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #8
  %152 = call fastcc i32 @rd_pick_intra4x4mby_modes(%struct.macroblock* %0, i32* nonnull %5, i32* nonnull %9, i32* nonnull %7, i32 %150)
  %153 = icmp slt i32 %152, %150
  br i1 %153, label %154, label %158

154:                                              ; preds = %2
  %155 = load %struct.modeinfo*, %struct.modeinfo** %17, align 32
  %156 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %155, i64 0, i32 0, i32 0
  store i8 4, i8* %156, align 4
  %157 = load i32, i32* %5, align 4
  br label %158

158:                                              ; preds = %2, %154
  %159 = phi i32 [ %157, %154 ], [ %148, %2 ]
  %160 = add nsw i32 %159, %20
  store i32 %160, i32* %1, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #8
  ret void
}

declare void @vp8_cost_tokens2(i32*, i8*, i8*, i32) local_unnamed_addr #3

declare void @vp8_cost_tokens(i32*, i8*, i8*) local_unnamed_addr #3

declare void @vp8_build_intra_predictors_mbuv_s(%struct.macroblockd*, i8*, i8*, i8*, i8*, i32, i8*, i8*, i32) local_unnamed_addr #3

declare void @vp8_subtract_mbuv(i16*, i8*, i8*, i32, i8*, i8*, i32) local_unnamed_addr #3

declare void @vp8_transform_mbuv(%struct.macroblock*) local_unnamed_addr #3

declare void @vp8_quantize_mbuv(%struct.macroblock*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @rd_cost_mbuv(%struct.macroblock* nocapture readonly) unnamed_addr #1 {
  %2 = alloca %struct.ENTROPY_CONTEXT_PLANES, align 1
  %3 = alloca %struct.ENTROPY_CONTEXT_PLANES, align 1
  %4 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %2, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %3, i64 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %4, i8 -86, i64 9, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %5) #8
  %6 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 21
  %7 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %6 to i8**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %5, i8 -86, i64 9, i1 false)
  %8 = load i8*, i8** %7, align 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %4, i8* align 1 %8, i64 9, i1 false)
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 22
  %10 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %9 to i8**
  %11 = load i8*, i8** %10, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %5, i8* align 1 %11, i64 9, i1 false)
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 16
  %13 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2above, i64 0, i64 16), align 16
  %14 = zext i8 %13 to i64
  %15 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %2, i64 0, i32 0, i64 %14
  %16 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2left, i64 0, i64 16), align 16
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %3, i64 0, i32 0, i64 %17
  %19 = call fastcc i32 @cost_coeffs(%struct.macroblock* %0, %struct.blockd* %12, i32 2, i8* %15, i8* %18)
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 17
  %21 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2above, i64 0, i64 17), align 1
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %2, i64 0, i32 0, i64 %22
  %24 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2left, i64 0, i64 17), align 1
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %3, i64 0, i32 0, i64 %25
  %27 = call fastcc i32 @cost_coeffs(%struct.macroblock* %0, %struct.blockd* %20, i32 2, i8* %23, i8* %26)
  %28 = add nsw i32 %27, %19
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 18
  %30 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2above, i64 0, i64 18), align 2
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %2, i64 0, i32 0, i64 %31
  %33 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2left, i64 0, i64 18), align 2
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %3, i64 0, i32 0, i64 %34
  %36 = call fastcc i32 @cost_coeffs(%struct.macroblock* %0, %struct.blockd* %29, i32 2, i8* %32, i8* %35)
  %37 = add nsw i32 %36, %28
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 19
  %39 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2above, i64 0, i64 19), align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %2, i64 0, i32 0, i64 %40
  %42 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2left, i64 0, i64 19), align 1
  %43 = zext i8 %42 to i64
  %44 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %3, i64 0, i32 0, i64 %43
  %45 = call fastcc i32 @cost_coeffs(%struct.macroblock* %0, %struct.blockd* %38, i32 2, i8* %41, i8* %44)
  %46 = add nsw i32 %45, %37
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 20
  %48 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2above, i64 0, i64 20), align 4
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %2, i64 0, i32 0, i64 %49
  %51 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2left, i64 0, i64 20), align 4
  %52 = zext i8 %51 to i64
  %53 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %3, i64 0, i32 0, i64 %52
  %54 = call fastcc i32 @cost_coeffs(%struct.macroblock* %0, %struct.blockd* %47, i32 2, i8* %50, i8* %53)
  %55 = add nsw i32 %54, %46
  %56 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 21
  %57 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2above, i64 0, i64 21), align 1
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %2, i64 0, i32 0, i64 %58
  %60 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2left, i64 0, i64 21), align 1
  %61 = zext i8 %60 to i64
  %62 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %3, i64 0, i32 0, i64 %61
  %63 = call fastcc i32 @cost_coeffs(%struct.macroblock* %0, %struct.blockd* %56, i32 2, i8* %59, i8* %62)
  %64 = add nsw i32 %63, %55
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 22
  %66 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2above, i64 0, i64 22), align 2
  %67 = zext i8 %66 to i64
  %68 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %2, i64 0, i32 0, i64 %67
  %69 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2left, i64 0, i64 22), align 2
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %3, i64 0, i32 0, i64 %70
  %72 = call fastcc i32 @cost_coeffs(%struct.macroblock* %0, %struct.blockd* %65, i32 2, i8* %68, i8* %71)
  %73 = add nsw i32 %72, %64
  %74 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 23
  %75 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2above, i64 0, i64 23), align 1
  %76 = zext i8 %75 to i64
  %77 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %2, i64 0, i32 0, i64 %76
  %78 = load i8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @vp8_block2left, i64 0, i64 23), align 1
  %79 = zext i8 %78 to i64
  %80 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %3, i64 0, i32 0, i64 %79
  %81 = call fastcc i32 @cost_coeffs(%struct.macroblock* %0, %struct.blockd* %74, i32 2, i8* %77, i8* %80)
  %82 = add nsw i32 %81, %73
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %4) #8
  ret i32 %82
}

declare i32 @vp8_mbuverror_sse2(%struct.macroblock*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @cost_coeffs(%struct.macroblock* nocapture readonly, %struct.blockd* nocapture readonly, i32, i8* nocapture, i8* nocapture) unnamed_addr #5 {
  %6 = icmp eq i32 %2, 0
  %7 = zext i1 %6 to i32
  %8 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 5
  %9 = load i8*, i8** %8, align 8
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i32
  %12 = getelementptr inbounds %struct.blockd, %struct.blockd* %1, i64 0, i32 0
  %13 = load i16*, i16** %12, align 8
  %14 = load i8, i8* %3, align 1
  %15 = sext i8 %14 to i32
  %16 = load i8, i8* %4, align 1
  %17 = sext i8 %16 to i32
  %18 = add nsw i32 %17, %15
  %19 = icmp slt i32 %7, %11
  br i1 %19, label %20, label %65

20:                                               ; preds = %5
  %21 = load %struct.TOKENVALUE*, %struct.TOKENVALUE** @vp8_dct_value_tokens_ptr, align 8
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 29
  %23 = load [8 x [3 x [12 x i32]]]*, [8 x [3 x [12 x i32]]]** %22, align 8
  %24 = sext i32 %2 to i64
  %25 = load i16*, i16** @vp8_dct_value_cost_ptr, align 8
  %26 = zext i1 %6 to i64
  %27 = xor i32 %7, -1
  %28 = add nsw i32 %27, %11
  %29 = zext i32 %11 to i64
  br label %30

30:                                               ; preds = %30, %20
  %31 = phi i64 [ %26, %20 ], [ %57, %30 ]
  %32 = phi i32 [ 0, %20 ], [ %53, %30 ]
  %33 = phi i32 [ %18, %20 ], [ %56, %30 ]
  %34 = getelementptr inbounds [16 x i32], [16 x i32]* @vp8_default_zig_zag1d, i64 0, i64 %31
  %35 = load i32, i32* %34, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i16, i16* %13, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = sext i16 %38 to i64
  %40 = getelementptr inbounds %struct.TOKENVALUE, %struct.TOKENVALUE* %21, i64 %39, i32 0
  %41 = load i16, i16* %40, align 2
  %42 = getelementptr inbounds [16 x i8], [16 x i8]* @vp8_coef_bands, i64 0, i64 %31
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i64
  %45 = sext i32 %33 to i64
  %46 = sext i16 %41 to i64
  %47 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %23, i64 %24, i64 %44, i64 %45, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = add nsw i32 %48, %32
  %50 = getelementptr inbounds i16, i16* %25, i64 %39
  %51 = load i16, i16* %50, align 2
  %52 = sext i16 %51 to i32
  %53 = add nsw i32 %49, %52
  %54 = getelementptr inbounds [12 x i8], [12 x i8]* @vp8_prev_token_class, i64 0, i64 %46
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = add nuw nsw i64 %31, 1
  %58 = icmp eq i64 %57, %29
  br i1 %58, label %59, label %30

59:                                               ; preds = %30
  %60 = zext i8 %55 to i32
  %61 = zext i1 %6 to i32
  %62 = add nsw i32 %28, %61
  %63 = add nsw i32 %62, 1
  %64 = icmp ult i32 %63, 16
  br i1 %64, label %65, label %80

65:                                               ; preds = %5, %59
  %66 = phi i32 [ %63, %59 ], [ %7, %5 ]
  %67 = phi i32 [ %53, %59 ], [ 0, %5 ]
  %68 = phi i32 [ %60, %59 ], [ %18, %5 ]
  %69 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 29
  %70 = load [8 x [3 x [12 x i32]]]*, [8 x [3 x [12 x i32]]]** %69, align 8
  %71 = sext i32 %2 to i64
  %72 = zext i32 %66 to i64
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* @vp8_coef_bands, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i64
  %76 = sext i32 %68 to i64
  %77 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %70, i64 %71, i64 %75, i64 %76, i64 11
  %78 = load i32, i32* %77, align 4
  %79 = add nsw i32 %78, %67
  br label %80

80:                                               ; preds = %65, %59
  %81 = phi i32 [ %66, %65 ], [ %63, %59 ]
  %82 = phi i32 [ %79, %65 ], [ %53, %59 ]
  %83 = icmp ne i32 %81, %7
  %84 = zext i1 %83 to i8
  store i8 %84, i8* %4, align 1
  store i8 %84, i8* %3, align 1
  ret i32 %82
}

declare void @vp8_intra4x4_predict(i8*, i8*, i32, i32, i8*, i32, i8 zeroext) local_unnamed_addr #3

declare void @vp8_subtract_b(%struct.block*, %struct.blockd*, i32) local_unnamed_addr #3

declare i32 @vp8_block_error_sse2(i16*, i16*) local_unnamed_addr #3

declare void @vp8_short_idct4x4llm_mmx(i16*, i8*, i32, i8*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @rd_check_segment(%struct.VP8_COMP*, %struct.macroblock*, %struct.BEST_SEG_INFO* nocapture, i32) unnamed_addr #1 {
  %5 = alloca i32, align 4
  %6 = alloca [14 x %union.int_mv], align 16
  %7 = alloca %struct.ENTROPY_CONTEXT_PLANES, align 1
  %8 = alloca %struct.ENTROPY_CONTEXT_PLANES, align 1
  %9 = alloca i32, align 4
  %10 = alloca %union.int_mv, align 4
  %11 = alloca %union.int_mv, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 21
  %15 = load %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES** %14, align 16
  %16 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %15, i64 0, i32 0, i64 0
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %15, i64 0, i32 0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %15, i64 0, i32 0, i64 2
  %21 = load i8, i8* %20, align 1
  %22 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %15, i64 0, i32 0, i64 3
  %23 = load i8, i8* %22, align 1
  %24 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %15, i64 0, i32 1, i64 0
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %15, i64 0, i32 1, i64 1
  %27 = load i8, i8* %26, align 1
  %28 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %15, i64 0, i32 2, i64 0
  %29 = load i8, i8* %28, align 1
  %30 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %15, i64 0, i32 2, i64 1
  %31 = load i8, i8* %30, align 1
  %32 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %15, i64 0, i32 3
  %33 = load i8, i8* %32, align 1
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 22
  %35 = load %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES** %34, align 8
  %36 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %35, i64 0, i32 0, i64 0
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %35, i64 0, i32 0, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %35, i64 0, i32 0, i64 2
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %35, i64 0, i32 0, i64 3
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %35, i64 0, i32 1, i64 0
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %35, i64 0, i32 1, i64 1
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %35, i64 0, i32 2, i64 0
  %49 = load i8, i8* %48, align 1
  %50 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %35, i64 0, i32 2, i64 1
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %35, i64 0, i32 3
  %53 = load i8, i8* %52, align 1
  %54 = zext i32 %3 to i64
  %55 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 177, i64 %54
  %56 = getelementptr inbounds [4 x i32], [4 x i32]* @vp8_mbsplit_count, i64 0, i64 %54
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 10
  %59 = load i32, i32* %58, align 8
  %60 = getelementptr inbounds [4 x %struct.vp8_token_struct], [4 x %struct.vp8_token_struct]* @vp8_mbsplit_encodings, i64 0, i64 %54, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = getelementptr inbounds [4 x %struct.vp8_token_struct], [4 x %struct.vp8_token_struct]* @vp8_mbsplit_encodings, i64 0, i64 %54, i32 1
  %63 = load i32, i32* %62, align 4
  br label %64

64:                                               ; preds = %64, %4
  %65 = phi i32 [ 0, %4 ], [ %83, %64 ]
  %66 = phi i8 [ 0, %4 ], [ %87, %64 ]
  %67 = phi i32 [ %63, %4 ], [ %68, %64 ]
  %68 = add nsw i32 %67, -1
  %69 = lshr i32 %61, %68
  %70 = and i32 %69, 1
  %71 = icmp eq i32 %70, 0
  %72 = sext i8 %66 to i32
  %73 = ashr i32 %72, 1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [3 x i8], [3 x i8]* @vp8_mbsplit_probs, i64 0, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = xor i32 %77, 255
  %79 = select i1 %71, i32 %77, i32 %78
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = add i32 %82, %65
  %84 = add nsw i32 %70, %72
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_mbsplit_tree, i64 0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = icmp eq i32 %68, 0
  br i1 %88, label %89, label %64

89:                                               ; preds = %64
  %90 = getelementptr inbounds [4 x [16 x i32]], [4 x [16 x i32]]* @vp8_mbsplits, i64 0, i64 %54, i64 0
  %91 = sdiv i32 %59, %57
  %92 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 11
  %93 = load i32*, i32** %92, align 8
  %94 = bitcast i32* %5 to [4 x i8]*
  %95 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %95) #8
  store i32 -1431655766, i32* %5, align 4
  %96 = call i8* @vp8_mv_ref_probs(i8* nonnull %95, i32* %93) #8
  %97 = load i32, i32* getelementptr inbounds ([5 x %struct.vp8_token_struct], [5 x %struct.vp8_token_struct]* @vp8_mv_ref_encoding_array, i64 0, i64 4, i32 0), align 16
  %98 = load i32, i32* getelementptr inbounds ([5 x %struct.vp8_token_struct], [5 x %struct.vp8_token_struct]* @vp8_mv_ref_encoding_array, i64 0, i64 4, i32 1), align 4
  br label %99

99:                                               ; preds = %99, %89
  %100 = phi i32 [ 0, %89 ], [ %118, %99 ]
  %101 = phi i8 [ 0, %89 ], [ %122, %99 ]
  %102 = phi i32 [ %98, %89 ], [ %103, %99 ]
  %103 = add nsw i32 %102, -1
  %104 = lshr i32 %97, %103
  %105 = and i32 %104, 1
  %106 = icmp eq i32 %105, 0
  %107 = sext i8 %101 to i32
  %108 = ashr i32 %107, 1
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [4 x i8], [4 x i8]* %94, i64 0, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = xor i32 %112, 255
  %114 = select i1 %106, i32 %112, i32 %113
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds [256 x i32], [256 x i32]* @vp8_prob_cost, i64 0, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = add i32 %117, %100
  %119 = add nsw i32 %105, %107
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [0 x i8], [0 x i8]* @vp8_mv_ref_tree, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = icmp eq i32 %103, 0
  br i1 %123, label %124, label %99

124:                                              ; preds = %99
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %95) #8
  %125 = add nsw i32 %118, %83
  %126 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 18
  %127 = load i32, i32* %126, align 8
  %128 = mul nsw i32 %127, %125
  %129 = add nsw i32 %128, 128
  %130 = ashr i32 %129, 8
  %131 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %132 = icmp sgt i32 %57, 0
  br i1 %132, label %136, label %133

133:                                              ; preds = %124
  %134 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 2
  %135 = load i32, i32* %134, align 4
  br label %620

136:                                              ; preds = %124
  %137 = bitcast [14 x %union.int_mv]* %6 to i8*
  %138 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %7, i64 0, i32 0, i64 0
  %139 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %7, i64 0, i32 0, i64 1
  %140 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %7, i64 0, i32 0, i64 2
  %141 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %7, i64 0, i32 0, i64 3
  %142 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %7, i64 0, i32 1, i64 0
  %143 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %7, i64 0, i32 1, i64 1
  %144 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %7, i64 0, i32 2, i64 0
  %145 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %7, i64 0, i32 2, i64 1
  %146 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %7, i64 0, i32 3
  %147 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %8, i64 0, i32 0, i64 0
  %148 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %8, i64 0, i32 0, i64 1
  %149 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %8, i64 0, i32 0, i64 2
  %150 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %8, i64 0, i32 0, i64 3
  %151 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %8, i64 0, i32 1, i64 0
  %152 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %8, i64 0, i32 1, i64 1
  %153 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %8, i64 0, i32 2, i64 0
  %154 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %8, i64 0, i32 2, i64 1
  %155 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %8, i64 0, i32 3
  %156 = bitcast i32* %9 to i8*
  %157 = bitcast %union.int_mv* %10 to i8*
  %158 = getelementptr inbounds %union.int_mv, %union.int_mv* %10, i64 0, i32 0
  %159 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 114
  %160 = icmp ult i32 %3, 2
  %161 = icmp eq i32 %3, 3
  %162 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 1, i32 0
  %163 = icmp eq i32 %3, 0
  %164 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 12, i64 2, i32 0
  %165 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 16
  %166 = bitcast %union.int_mv* %11 to i8*
  %167 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 1
  %168 = bitcast %union.int_mv* %167 to %struct.MV*
  %169 = bitcast %union.int_mv* %167 to i16*
  %170 = bitcast %union.int_mv* %11 to %struct.MV*
  %171 = bitcast %union.int_mv* %11 to i16*
  %172 = getelementptr inbounds %struct.MV, %struct.MV* %168, i64 0, i32 1
  %173 = getelementptr inbounds %struct.MV, %struct.MV* %170, i64 0, i32 1
  %174 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 176
  %175 = getelementptr inbounds [14 x %union.int_mv], [14 x %union.int_mv]* %6, i64 0, i64 13
  %176 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 23, i64 0
  %177 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 0
  %178 = getelementptr inbounds %union.int_mv, %union.int_mv* %175, i64 0, i32 0
  %179 = getelementptr inbounds [4 x i32], [4 x i32]* @segmentation_to_sseshift, i64 0, i64 %54
  %180 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 30
  %181 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 31
  %182 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 32
  %183 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 33
  %184 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 174
  %185 = bitcast i32* %12 to i8*
  %186 = bitcast i32* %13 to i8*
  %187 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 173
  %188 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 14
  %189 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 11, i32 4
  %190 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 11, i32 13
  %191 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 39
  %192 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 67
  %193 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 70
  %194 = load %struct.TOKENVALUE*, %struct.TOKENVALUE** @vp8_dct_value_tokens_ptr, align 8
  %195 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 29
  %196 = load i16*, i16** @vp8_dct_value_cost_ptr, align 8
  %197 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 2
  %198 = sext i32 %57 to i64
  br label %199

199:                                              ; preds = %582, %136
  %200 = phi i64 [ %617, %582 ], [ 0, %136 ]
  %201 = phi i8 [ %602, %582 ], [ 0, %136 ]
  %202 = phi i8 [ %601, %582 ], [ 0, %136 ]
  %203 = phi i8 [ %600, %582 ], [ 0, %136 ]
  %204 = phi i8 [ %599, %582 ], [ 0, %136 ]
  %205 = phi i8 [ %598, %582 ], [ 0, %136 ]
  %206 = phi i8 [ %597, %582 ], [ 0, %136 ]
  %207 = phi i8 [ %596, %582 ], [ 0, %136 ]
  %208 = phi i8 [ %595, %582 ], [ 0, %136 ]
  %209 = phi i8 [ %594, %582 ], [ 0, %136 ]
  %210 = phi i8 [ %593, %582 ], [ 0, %136 ]
  %211 = phi i8 [ %592, %582 ], [ 0, %136 ]
  %212 = phi i8 [ %591, %582 ], [ 0, %136 ]
  %213 = phi i8 [ %590, %582 ], [ 0, %136 ]
  %214 = phi i8 [ %589, %582 ], [ 0, %136 ]
  %215 = phi i8 [ %588, %582 ], [ 0, %136 ]
  %216 = phi i8 [ %587, %582 ], [ 0, %136 ]
  %217 = phi i8 [ %586, %582 ], [ 0, %136 ]
  %218 = phi i8 [ %585, %582 ], [ 0, %136 ]
  %219 = phi i8 [ %594, %582 ], [ %37, %136 ]
  %220 = phi i8 [ %595, %582 ], [ %39, %136 ]
  %221 = phi i8 [ %596, %582 ], [ %41, %136 ]
  %222 = phi i8 [ %597, %582 ], [ %43, %136 ]
  %223 = phi i8 [ %598, %582 ], [ %45, %136 ]
  %224 = phi i8 [ %599, %582 ], [ %47, %136 ]
  %225 = phi i8 [ %600, %582 ], [ %49, %136 ]
  %226 = phi i8 [ %601, %582 ], [ %51, %136 ]
  %227 = phi i8 [ %602, %582 ], [ %53, %136 ]
  %228 = phi i8 [ %585, %582 ], [ %17, %136 ]
  %229 = phi i8 [ %586, %582 ], [ %19, %136 ]
  %230 = phi i8 [ %587, %582 ], [ %21, %136 ]
  %231 = phi i8 [ %588, %582 ], [ %23, %136 ]
  %232 = phi i8 [ %589, %582 ], [ %25, %136 ]
  %233 = phi i8 [ %590, %582 ], [ %27, %136 ]
  %234 = phi i8 [ %591, %582 ], [ %29, %136 ]
  %235 = phi i8 [ %592, %582 ], [ %31, %136 ]
  %236 = phi i8 [ %593, %582 ], [ %33, %136 ]
  %237 = phi i32 [ %613, %582 ], [ 0, %136 ]
  %238 = phi i32 [ %584, %582 ], [ 0, %136 ]
  %239 = phi i32 [ %583, %582 ], [ 0, %136 ]
  %240 = phi i32 [ %614, %582 ], [ %130, %136 ]
  %241 = phi i32 [ %612, %582 ], [ 0, %136 ]
  %242 = phi i32 [ %611, %582 ], [ %125, %136 ]
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %137) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %137, i8 0, i64 56, i1 false)
  %243 = icmp ne i64 %200, 0
  %244 = and i1 %161, %243
  %245 = add nsw i64 %200, -1
  %246 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 %245, i32 6, i32 0
  %247 = add nsw i64 %200, -4
  %248 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 %247, i32 6, i32 0
  %249 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 12, i64 %200, i32 0
  %250 = icmp eq i64 %200, 1
  %251 = and i1 %163, %250
  %252 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 13, i64 %200
  %253 = getelementptr inbounds [4 x [16 x i8]], [4 x [16 x i8]]* @vp8_mbsplit_offset, i64 0, i64 %54, i64 %200
  %254 = trunc i64 %200 to i32
  %255 = trunc i64 %200 to i32
  br label %256

256:                                              ; preds = %556, %199
  %257 = phi i64 [ 10, %199 ], [ %580, %556 ]
  %258 = phi i32 [ 0, %199 ], [ %579, %556 ]
  %259 = phi i32 [ 12, %199 ], [ %578, %556 ]
  %260 = phi i32 [ 2147483647, %199 ], [ %577, %556 ]
  %261 = phi i8 [ %201, %199 ], [ %576, %556 ]
  %262 = phi i8 [ %202, %199 ], [ %575, %556 ]
  %263 = phi i8 [ %203, %199 ], [ %574, %556 ]
  %264 = phi i8 [ %204, %199 ], [ %573, %556 ]
  %265 = phi i8 [ %205, %199 ], [ %572, %556 ]
  %266 = phi i8 [ %206, %199 ], [ %571, %556 ]
  %267 = phi i8 [ %207, %199 ], [ %570, %556 ]
  %268 = phi i8 [ %208, %199 ], [ %569, %556 ]
  %269 = phi i8 [ %209, %199 ], [ %568, %556 ]
  %270 = phi i8 [ %210, %199 ], [ %567, %556 ]
  %271 = phi i8 [ %211, %199 ], [ %566, %556 ]
  %272 = phi i8 [ %212, %199 ], [ %565, %556 ]
  %273 = phi i8 [ %213, %199 ], [ %564, %556 ]
  %274 = phi i8 [ %214, %199 ], [ %563, %556 ]
  %275 = phi i8 [ %215, %199 ], [ %562, %556 ]
  %276 = phi i8 [ %216, %199 ], [ %561, %556 ]
  %277 = phi i8 [ %217, %199 ], [ %560, %556 ]
  %278 = phi i8 [ %218, %199 ], [ %559, %556 ]
  %279 = phi i32 [ %238, %199 ], [ %558, %556 ]
  %280 = phi i32 [ %239, %199 ], [ %557, %556 ]
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %138) #8
  call void @llvm.lifetime.start.p0i8(i64 9, i8* nonnull %147) #8
  store i8 %228, i8* %138, align 1
  store i8 %229, i8* %139, align 1
  store i8 %230, i8* %140, align 1
  store i8 %231, i8* %141, align 1
  store i8 %232, i8* %142, align 1
  store i8 %233, i8* %143, align 1
  store i8 %234, i8* %144, align 1
  store i8 %235, i8* %145, align 1
  store i8 %236, i8* %146, align 1
  store i8 %219, i8* %147, align 1
  store i8 %220, i8* %148, align 1
  store i8 %221, i8* %149, align 1
  store i8 %222, i8* %150, align 1
  store i8 %223, i8* %151, align 1
  store i8 %224, i8* %152, align 1
  store i8 %225, i8* %153, align 1
  store i8 %226, i8* %154, align 1
  store i8 %227, i8* %155, align 1
  %281 = icmp eq i64 %257, 13
  br i1 %281, label %282, label %386

282:                                              ; preds = %256
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %156) #8
  store i32 -1431655766, i32* %9, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %157) #8
  store i32 -1431655766, i32* %158, align 4
  %283 = icmp slt i32 %260, %91
  br i1 %283, label %555, label %284

284:                                              ; preds = %282
  %285 = load i32, i32* %159, align 4
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %299, label %287

287:                                              ; preds = %284
  br i1 %160, label %288, label %294

288:                                              ; preds = %287
  %289 = load i32, i32* %249, align 4
  store i32 %289, i32* %162, align 8
  br i1 %251, label %290, label %292

290:                                              ; preds = %288
  %291 = load i32, i32* %164, align 8
  store i32 %291, i32* %162, align 8
  br label %292

292:                                              ; preds = %288, %290
  %293 = load i32, i32* %252, align 4
  br label %299

294:                                              ; preds = %287
  br i1 %244, label %295, label %299

295:                                              ; preds = %294
  %296 = load i32, i32* %246, align 8
  store i32 %296, i32* %162, align 8
  switch i32 %254, label %299 [
    i32 12, label %297
    i32 8, label %297
    i32 4, label %297
  ]

297:                                              ; preds = %295, %295, %295
  %298 = load i32, i32* %248, align 8
  store i32 %298, i32* %162, align 8
  br label %299

299:                                              ; preds = %292, %297, %295, %284, %294
  %300 = phi i32 [ 0, %294 ], [ 0, %284 ], [ 2, %295 ], [ 2, %297 ], [ %293, %292 ]
  %301 = sub i32 7, %300
  %302 = load i32, i32* %165, align 32
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %166) #8
  %303 = load i16, i16* %169, align 8
  %304 = ashr i16 %303, 3
  store i16 %304, i16* %171, align 4
  %305 = load i16, i16* %172, align 2
  %306 = ashr i16 %305, 3
  store i16 %306, i16* %173, align 2
  %307 = load i8, i8* %253, align 1
  %308 = zext i8 %307 to i64
  %309 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %308
  %310 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 %308
  %311 = load i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)** %174, align 32
  %312 = load %union.int_mv*, %union.int_mv** %177, align 8
  %313 = call i32 %311(%struct.macroblock* %1, %struct.block* %309, %struct.blockd* %310, %union.int_mv* nonnull %11, %union.int_mv* %175, i32 %300, i32 %302, i32* nonnull %9, %struct.variance_vtable* %55, i32** %176, %union.int_mv* %312) #8
  %314 = load i32, i32* %9, align 4
  store i32 0, i32* %9, align 4
  %315 = icmp slt i32 %314, %301
  br i1 %315, label %316, label %337

316:                                              ; preds = %299, %335
  %317 = phi i32 [ %336, %335 ], [ 0, %299 ]
  %318 = phi i32 [ %333, %335 ], [ %313, %299 ]
  %319 = phi i32 [ %320, %335 ], [ %314, %299 ]
  %320 = add i32 %319, 1
  %321 = icmp eq i32 %317, 0
  br i1 %321, label %324, label %322

322:                                              ; preds = %316
  %323 = add nsw i32 %317, -1
  store i32 %323, i32* %9, align 4
  br label %332

324:                                              ; preds = %316
  %325 = load i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)** %174, align 32
  %326 = add nsw i32 %320, %300
  %327 = load %union.int_mv*, %union.int_mv** %177, align 8
  %328 = call i32 %325(%struct.macroblock* %1, %struct.block* %309, %struct.blockd* %310, %union.int_mv* nonnull %11, %union.int_mv* nonnull %10, i32 %326, i32 %302, i32* nonnull %9, %struct.variance_vtable* %55, i32** %176, %union.int_mv* %327) #8
  %329 = icmp slt i32 %328, %318
  br i1 %329, label %330, label %332

330:                                              ; preds = %324
  %331 = load i32, i32* %158, align 4
  store i32 %331, i32* %178, align 4
  br label %332

332:                                              ; preds = %324, %330, %322
  %333 = phi i32 [ %318, %322 ], [ %328, %330 ], [ %318, %324 ]
  %334 = icmp eq i32 %320, %301
  br i1 %334, label %337, label %335

335:                                              ; preds = %332
  %336 = load i32, i32* %9, align 4
  br label %316

337:                                              ; preds = %332, %299
  %338 = phi i32 [ %313, %299 ], [ %333, %332 ]
  %339 = load i32, i32* %159, align 4
  %340 = icmp eq i32 %339, 0
  br i1 %340, label %341, label %378

341:                                              ; preds = %337
  %342 = load i32, i32* %179, align 4
  %343 = ashr i32 %338, %342
  %344 = icmp sgt i32 %343, 4000
  br i1 %344, label %345, label %378

345:                                              ; preds = %341
  %346 = load i32, i32* %180, align 16
  %347 = load i32, i32* %181, align 4
  %348 = load i32, i32* %182, align 8
  %349 = load i32, i32* %183, align 4
  %350 = load i16, i16* %173, align 2
  %351 = sext i16 %350 to i32
  %352 = icmp sgt i32 %346, %351
  %353 = select i1 %352, i32 %346, i32 %351
  %354 = shl i32 %353, 16
  %355 = ashr exact i32 %354, 16
  %356 = icmp sgt i32 %355, %347
  %357 = select i1 %356, i32 %347, i32 %355
  %358 = trunc i32 %357 to i16
  store i16 %358, i16* %173, align 2
  %359 = load i16, i16* %171, align 4
  %360 = sext i16 %359 to i32
  %361 = icmp sgt i32 %348, %360
  %362 = select i1 %361, i32 %348, i32 %360
  %363 = shl i32 %362, 16
  %364 = ashr exact i32 %363, 16
  %365 = icmp sgt i32 %364, %349
  %366 = select i1 %365, i32 %349, i32 %364
  %367 = trunc i32 %366 to i16
  store i16 %367, i16* %171, align 4
  %368 = load i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)** %184, align 16
  %369 = load %union.int_mv*, %union.int_mv** %177, align 8
  %370 = call i32 %368(%struct.macroblock* %1, %struct.block* %309, %struct.blockd* %310, %union.int_mv* nonnull %11, i32 %302, i32 16, %struct.variance_vtable* %55, i32** %176, %union.int_mv* %369) #8
  %371 = icmp slt i32 %370, %338
  br i1 %371, label %372, label %375

372:                                              ; preds = %345
  %373 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 %308, i32 6, i32 0
  %374 = load i32, i32* %373, align 8
  store i32 %374, i32* %178, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %166) #8
  br label %380

375:                                              ; preds = %345
  %376 = load i32, i32* %178, align 4
  %377 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 %308, i32 6, i32 0
  store i32 %376, i32* %377, align 8
  br label %378

378:                                              ; preds = %375, %341, %337
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %166) #8
  %379 = icmp eq i32 %338, 2147483647
  br i1 %379, label %385, label %380

380:                                              ; preds = %372, %378
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %185) #8
  store i32 -1431655766, i32* %12, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %186) #8
  store i32 -1431655766, i32* %13, align 4
  %381 = load i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)** %187, align 8
  %382 = load %union.int_mv*, %union.int_mv** %177, align 8
  %383 = load i32, i32* %188, align 8
  %384 = call i32 %381(%struct.macroblock* %1, %struct.block* %309, %struct.blockd* %310, %union.int_mv* %175, %union.int_mv* %382, i32 %383, %struct.variance_vtable* %55, i32** %176, i32* nonnull %12, i32* nonnull %13) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %186) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %185) #8
  br label %385

385:                                              ; preds = %378, %380
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %157) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %156) #8
  br label %386

386:                                              ; preds = %385, %256
  %387 = getelementptr inbounds [14 x %union.int_mv], [14 x %union.int_mv]* %6, i64 0, i64 %257
  %388 = load %union.int_mv*, %union.int_mv** %177, align 8
  %389 = trunc i64 %257 to i32
  %390 = call fastcc i32 @labels2mode(%struct.macroblock* %1, i32* %90, i32 %255, i32 %389, %union.int_mv* %387, %union.int_mv* %388, i32** %176)
  %391 = bitcast %union.int_mv* %387 to %struct.MV*
  %392 = bitcast %union.int_mv* %387 to i16*
  %393 = load i16, i16* %392, align 4
  %394 = ashr i16 %393, 3
  %395 = sext i16 %394 to i32
  %396 = load i32, i32* %182, align 8
  %397 = icmp sgt i32 %396, %395
  br i1 %397, label %556, label %398

398:                                              ; preds = %386
  %399 = load i32, i32* %183, align 4
  %400 = icmp slt i32 %399, %395
  br i1 %400, label %556, label %401

401:                                              ; preds = %398
  %402 = getelementptr inbounds %struct.MV, %struct.MV* %391, i64 0, i32 1
  %403 = load i16, i16* %402, align 2
  %404 = ashr i16 %403, 3
  %405 = sext i16 %404 to i32
  %406 = load i32, i32* %180, align 16
  %407 = icmp sgt i32 %406, %405
  br i1 %407, label %556, label %408

408:                                              ; preds = %401
  %409 = load i32, i32* %181, align 4
  %410 = icmp slt i32 %409, %405
  br i1 %410, label %556, label %411

411:                                              ; preds = %408
  %412 = load i32, i32* %189, align 16
  %413 = load i8*, i8** %190, align 8
  br label %414

414:                                              ; preds = %436, %411
  %415 = phi i64 [ 0, %411 ], [ %438, %436 ]
  %416 = phi i32 [ 0, %411 ], [ %437, %436 ]
  %417 = getelementptr inbounds [4 x [16 x i32]], [4 x [16 x i32]]* @vp8_mbsplits, i64 0, i64 %54, i64 %415
  %418 = load i32, i32* %417, align 4
  %419 = zext i32 %418 to i64
  %420 = icmp eq i64 %200, %419
  br i1 %420, label %421, label %436

421:                                              ; preds = %414
  %422 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 %415
  %423 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %415
  %424 = load void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)** %191, align 8
  call void @vp8_build_inter_predictors_b(%struct.blockd* %422, i32 16, i8* %413, i32 %412, void (i8*, i32, i32, i32, i8*, i32)* %424) #8
  call void @vp8_subtract_b(%struct.block* %423, %struct.blockd* %422, i32 16) #8
  %425 = load void (i16*, i16*, i32)*, void (i16*, i16*, i32)** %192, align 16
  %426 = getelementptr inbounds %struct.block, %struct.block* %423, i64 0, i32 0
  %427 = load i16*, i16** %426, align 8
  %428 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 4, i64 %415, i32 1
  %429 = load i16*, i16** %428, align 8
  call void %425(i16* %427, i16* %429, i32 32) #8
  %430 = load void (%struct.block*, %struct.blockd*)*, void (%struct.block*, %struct.blockd*)** %193, align 8
  call void %430(%struct.block* %423, %struct.blockd* %422) #8
  %431 = load i16*, i16** %428, align 8
  %432 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 %415, i32 1
  %433 = load i16*, i16** %432, align 8
  %434 = call i32 @vp8_block_error_sse2(i16* %431, i16* %433) #8
  %435 = add i32 %434, %416
  br label %436

436:                                              ; preds = %421, %414
  %437 = phi i32 [ %435, %421 ], [ %416, %414 ]
  %438 = add nuw nsw i64 %415, 1
  %439 = icmp eq i64 %438, 16
  br i1 %439, label %440, label %414

440:                                              ; preds = %436, %521
  %441 = phi i64 [ %523, %521 ], [ 0, %436 ]
  %442 = phi i32 [ %522, %521 ], [ 0, %436 ]
  %443 = getelementptr inbounds [4 x [16 x i32]], [4 x [16 x i32]]* @vp8_mbsplits, i64 0, i64 %54, i64 %441
  %444 = load i32, i32* %443, align 4
  %445 = zext i32 %444 to i64
  %446 = icmp eq i64 %200, %445
  br i1 %446, label %447, label %521

447:                                              ; preds = %440
  %448 = getelementptr inbounds [25 x i8], [25 x i8]* @vp8_block2above, i64 0, i64 %441
  %449 = load i8, i8* %448, align 1
  %450 = zext i8 %449 to i64
  %451 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %7, i64 0, i32 0, i64 %450
  %452 = getelementptr inbounds [25 x i8], [25 x i8]* @vp8_block2left, i64 0, i64 %441
  %453 = load i8, i8* %452, align 1
  %454 = zext i8 %453 to i64
  %455 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %8, i64 0, i32 0, i64 %454
  %456 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 %441, i32 5
  %457 = load i8*, i8** %456, align 8
  %458 = load i8, i8* %457, align 1
  %459 = sext i8 %458 to i32
  %460 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 %441, i32 0
  %461 = load i16*, i16** %460, align 8
  %462 = load i8, i8* %451, align 1
  %463 = sext i8 %462 to i32
  %464 = load i8, i8* %455, align 1
  %465 = sext i8 %464 to i32
  %466 = add nsw i32 %465, %463
  %467 = icmp sgt i8 %458, 0
  %468 = load [8 x [3 x [12 x i32]]]*, [8 x [3 x [12 x i32]]]** %195, align 8
  br i1 %467, label %469, label %503

469:                                              ; preds = %447
  %470 = zext i32 %459 to i64
  br label %471

471:                                              ; preds = %471, %469
  %472 = phi i64 [ 0, %469 ], [ %498, %471 ]
  %473 = phi i32 [ 0, %469 ], [ %494, %471 ]
  %474 = phi i32 [ %466, %469 ], [ %497, %471 ]
  %475 = getelementptr inbounds [16 x i32], [16 x i32]* @vp8_default_zig_zag1d, i64 0, i64 %472
  %476 = load i32, i32* %475, align 4
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds i16, i16* %461, i64 %477
  %479 = load i16, i16* %478, align 2
  %480 = sext i16 %479 to i64
  %481 = getelementptr inbounds %struct.TOKENVALUE, %struct.TOKENVALUE* %194, i64 %480, i32 0
  %482 = load i16, i16* %481, align 2
  %483 = getelementptr inbounds [16 x i8], [16 x i8]* @vp8_coef_bands, i64 0, i64 %472
  %484 = load i8, i8* %483, align 1
  %485 = zext i8 %484 to i64
  %486 = sext i32 %474 to i64
  %487 = sext i16 %482 to i64
  %488 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %468, i64 3, i64 %485, i64 %486, i64 %487
  %489 = load i32, i32* %488, align 4
  %490 = add nsw i32 %489, %473
  %491 = getelementptr inbounds i16, i16* %196, i64 %480
  %492 = load i16, i16* %491, align 2
  %493 = sext i16 %492 to i32
  %494 = add nsw i32 %490, %493
  %495 = getelementptr inbounds [12 x i8], [12 x i8]* @vp8_prev_token_class, i64 0, i64 %487
  %496 = load i8, i8* %495, align 1
  %497 = zext i8 %496 to i32
  %498 = add nuw nsw i64 %472, 1
  %499 = icmp eq i64 %498, %470
  br i1 %499, label %500, label %471

500:                                              ; preds = %471
  %501 = zext i8 %496 to i32
  %502 = icmp ult i8 %458, 16
  br i1 %502, label %503, label %515

503:                                              ; preds = %447, %500
  %504 = phi i32 [ %459, %500 ], [ 0, %447 ]
  %505 = phi i32 [ %494, %500 ], [ 0, %447 ]
  %506 = phi i32 [ %501, %500 ], [ %466, %447 ]
  %507 = zext i32 %504 to i64
  %508 = getelementptr inbounds [16 x i8], [16 x i8]* @vp8_coef_bands, i64 0, i64 %507
  %509 = load i8, i8* %508, align 1
  %510 = zext i8 %509 to i64
  %511 = sext i32 %506 to i64
  %512 = getelementptr inbounds [8 x [3 x [12 x i32]]], [8 x [3 x [12 x i32]]]* %468, i64 3, i64 %510, i64 %511, i64 11
  %513 = load i32, i32* %512, align 4
  %514 = add nsw i32 %513, %505
  br label %515

515:                                              ; preds = %503, %500
  %516 = phi i32 [ %504, %503 ], [ %459, %500 ]
  %517 = phi i32 [ %514, %503 ], [ %494, %500 ]
  %518 = icmp ne i32 %516, 0
  %519 = zext i1 %518 to i8
  store i8 %519, i8* %455, align 1
  store i8 %519, i8* %451, align 1
  %520 = add nsw i32 %517, %442
  br label %521

521:                                              ; preds = %515, %440
  %522 = phi i32 [ %520, %515 ], [ %442, %440 ]
  %523 = add nuw nsw i64 %441, 1
  %524 = icmp eq i64 %523, 16
  br i1 %524, label %525, label %440

525:                                              ; preds = %521
  %526 = lshr i32 %437, 2
  %527 = add nsw i32 %522, %390
  %528 = load i32, i32* %126, align 8
  %529 = mul nsw i32 %528, %527
  %530 = add nsw i32 %529, 128
  %531 = ashr i32 %530, 8
  %532 = load i32, i32* %131, align 4
  %533 = mul nsw i32 %532, %526
  %534 = add nsw i32 %531, %533
  %535 = icmp slt i32 %534, %260
  br i1 %535, label %536, label %556

536:                                              ; preds = %525
  %537 = load i8, i8* %138, align 1
  %538 = load i8, i8* %139, align 1
  %539 = load i8, i8* %140, align 1
  %540 = load i8, i8* %141, align 1
  %541 = load i8, i8* %142, align 1
  %542 = load i8, i8* %143, align 1
  %543 = load i8, i8* %144, align 1
  %544 = load i8, i8* %145, align 1
  %545 = load i8, i8* %146, align 1
  %546 = load i8, i8* %147, align 1
  %547 = load i8, i8* %148, align 1
  %548 = load i8, i8* %149, align 1
  %549 = load i8, i8* %150, align 1
  %550 = load i8, i8* %151, align 1
  %551 = load i8, i8* %152, align 1
  %552 = load i8, i8* %153, align 1
  %553 = load i8, i8* %154, align 1
  %554 = load i8, i8* %155, align 1
  br label %556

555:                                              ; preds = %282
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %157) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %156) #8
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %147) #8
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %138) #8
  br label %582

556:                                              ; preds = %408, %401, %398, %386, %536, %525
  %557 = phi i32 [ %280, %525 ], [ %527, %536 ], [ %280, %386 ], [ %280, %398 ], [ %280, %401 ], [ %280, %408 ]
  %558 = phi i32 [ %279, %525 ], [ %526, %536 ], [ %279, %386 ], [ %279, %398 ], [ %279, %401 ], [ %279, %408 ]
  %559 = phi i8 [ %278, %525 ], [ %537, %536 ], [ %278, %386 ], [ %278, %398 ], [ %278, %401 ], [ %278, %408 ]
  %560 = phi i8 [ %277, %525 ], [ %538, %536 ], [ %277, %386 ], [ %277, %398 ], [ %277, %401 ], [ %277, %408 ]
  %561 = phi i8 [ %276, %525 ], [ %539, %536 ], [ %276, %386 ], [ %276, %398 ], [ %276, %401 ], [ %276, %408 ]
  %562 = phi i8 [ %275, %525 ], [ %540, %536 ], [ %275, %386 ], [ %275, %398 ], [ %275, %401 ], [ %275, %408 ]
  %563 = phi i8 [ %274, %525 ], [ %541, %536 ], [ %274, %386 ], [ %274, %398 ], [ %274, %401 ], [ %274, %408 ]
  %564 = phi i8 [ %273, %525 ], [ %542, %536 ], [ %273, %386 ], [ %273, %398 ], [ %273, %401 ], [ %273, %408 ]
  %565 = phi i8 [ %272, %525 ], [ %543, %536 ], [ %272, %386 ], [ %272, %398 ], [ %272, %401 ], [ %272, %408 ]
  %566 = phi i8 [ %271, %525 ], [ %544, %536 ], [ %271, %386 ], [ %271, %398 ], [ %271, %401 ], [ %271, %408 ]
  %567 = phi i8 [ %270, %525 ], [ %545, %536 ], [ %270, %386 ], [ %270, %398 ], [ %270, %401 ], [ %270, %408 ]
  %568 = phi i8 [ %269, %525 ], [ %546, %536 ], [ %269, %386 ], [ %269, %398 ], [ %269, %401 ], [ %269, %408 ]
  %569 = phi i8 [ %268, %525 ], [ %547, %536 ], [ %268, %386 ], [ %268, %398 ], [ %268, %401 ], [ %268, %408 ]
  %570 = phi i8 [ %267, %525 ], [ %548, %536 ], [ %267, %386 ], [ %267, %398 ], [ %267, %401 ], [ %267, %408 ]
  %571 = phi i8 [ %266, %525 ], [ %549, %536 ], [ %266, %386 ], [ %266, %398 ], [ %266, %401 ], [ %266, %408 ]
  %572 = phi i8 [ %265, %525 ], [ %550, %536 ], [ %265, %386 ], [ %265, %398 ], [ %265, %401 ], [ %265, %408 ]
  %573 = phi i8 [ %264, %525 ], [ %551, %536 ], [ %264, %386 ], [ %264, %398 ], [ %264, %401 ], [ %264, %408 ]
  %574 = phi i8 [ %263, %525 ], [ %552, %536 ], [ %263, %386 ], [ %263, %398 ], [ %263, %401 ], [ %263, %408 ]
  %575 = phi i8 [ %262, %525 ], [ %553, %536 ], [ %262, %386 ], [ %262, %398 ], [ %262, %401 ], [ %262, %408 ]
  %576 = phi i8 [ %261, %525 ], [ %554, %536 ], [ %261, %386 ], [ %261, %398 ], [ %261, %401 ], [ %261, %408 ]
  %577 = phi i32 [ %260, %525 ], [ %534, %536 ], [ %260, %386 ], [ %260, %398 ], [ %260, %401 ], [ %260, %408 ]
  %578 = phi i32 [ %259, %525 ], [ %389, %536 ], [ %259, %386 ], [ %259, %398 ], [ %259, %401 ], [ %259, %408 ]
  %579 = phi i32 [ %258, %525 ], [ %522, %536 ], [ %258, %386 ], [ %258, %398 ], [ %258, %401 ], [ %258, %408 ]
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %147) #8
  call void @llvm.lifetime.end.p0i8(i64 9, i8* nonnull %138) #8
  %580 = add nuw nsw i64 %257, 1
  %581 = icmp eq i64 %580, 14
  br i1 %581, label %582, label %256

582:                                              ; preds = %556, %555
  %583 = phi i32 [ %280, %555 ], [ %557, %556 ]
  %584 = phi i32 [ %279, %555 ], [ %558, %556 ]
  %585 = phi i8 [ %278, %555 ], [ %559, %556 ]
  %586 = phi i8 [ %277, %555 ], [ %560, %556 ]
  %587 = phi i8 [ %276, %555 ], [ %561, %556 ]
  %588 = phi i8 [ %275, %555 ], [ %562, %556 ]
  %589 = phi i8 [ %274, %555 ], [ %563, %556 ]
  %590 = phi i8 [ %273, %555 ], [ %564, %556 ]
  %591 = phi i8 [ %272, %555 ], [ %565, %556 ]
  %592 = phi i8 [ %271, %555 ], [ %566, %556 ]
  %593 = phi i8 [ %270, %555 ], [ %567, %556 ]
  %594 = phi i8 [ %269, %555 ], [ %568, %556 ]
  %595 = phi i8 [ %268, %555 ], [ %569, %556 ]
  %596 = phi i8 [ %267, %555 ], [ %570, %556 ]
  %597 = phi i8 [ %266, %555 ], [ %571, %556 ]
  %598 = phi i8 [ %265, %555 ], [ %572, %556 ]
  %599 = phi i8 [ %264, %555 ], [ %573, %556 ]
  %600 = phi i8 [ %263, %555 ], [ %574, %556 ]
  %601 = phi i8 [ %262, %555 ], [ %575, %556 ]
  %602 = phi i8 [ %261, %555 ], [ %576, %556 ]
  %603 = phi i32 [ %260, %555 ], [ %577, %556 ]
  %604 = phi i32 [ %259, %555 ], [ %578, %556 ]
  %605 = phi i32 [ %258, %555 ], [ %579, %556 ]
  %606 = trunc i64 %200 to i32
  %607 = zext i32 %604 to i64
  %608 = getelementptr inbounds [14 x %union.int_mv], [14 x %union.int_mv]* %6, i64 0, i64 %607
  %609 = load %union.int_mv*, %union.int_mv** %177, align 8
  %610 = call fastcc i32 @labels2mode(%struct.macroblock* %1, i32* %90, i32 %606, i32 %604, %union.int_mv* %608, %union.int_mv* %609, i32** %176)
  %611 = add nsw i32 %583, %242
  %612 = add nsw i32 %584, %241
  %613 = add nsw i32 %605, %237
  %614 = add nsw i32 %603, %240
  %615 = load i32, i32* %197, align 4
  %616 = icmp slt i32 %614, %615
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %137) #8
  %617 = add nuw nsw i64 %200, 1
  %618 = icmp slt i64 %617, %198
  %619 = and i1 %616, %618
  br i1 %619, label %199, label %620

620:                                              ; preds = %582, %133
  %621 = phi i32 [ %135, %133 ], [ %615, %582 ]
  %622 = phi i32 [ %125, %133 ], [ %611, %582 ]
  %623 = phi i32 [ 0, %133 ], [ %612, %582 ]
  %624 = phi i32 [ %130, %133 ], [ %614, %582 ]
  %625 = phi i32 [ 0, %133 ], [ %613, %582 ]
  %626 = icmp slt i32 %624, %621
  br i1 %626, label %627, label %661

627:                                              ; preds = %620
  %628 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 2
  %629 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 4
  store i32 %622, i32* %629, align 4
  %630 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 5
  store i32 %623, i32* %630, align 8
  %631 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 6
  store i32 %625, i32* %631, align 4
  store i32 %624, i32* %628, align 4
  %632 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 3
  store i32 %3, i32* %632, align 8
  %633 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 7
  br label %634

634:                                              ; preds = %634, %627
  %635 = phi i64 [ 0, %627 ], [ %659, %634 ]
  %636 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %633, align 32
  %637 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %636, i64 0, i32 1, i64 %635, i32 1, i32 0
  %638 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 8, i64 %635, i32 0
  %639 = load i32, i32* %637, align 4
  store i32 %639, i32* %638, align 4
  %640 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %633, align 32
  %641 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %640, i64 0, i32 1, i64 %635, i32 0
  %642 = load i32, i32* %641, align 4
  %643 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 7, i64 %635
  store i32 %642, i32* %643, align 4
  %644 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 %635
  %645 = load i8, i8* %644, align 1
  %646 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 9, i64 %635
  store i8 %645, i8* %646, align 1
  %647 = or i64 %635, 1
  %648 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %633, align 32
  %649 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %648, i64 0, i32 1, i64 %647, i32 1, i32 0
  %650 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 8, i64 %647, i32 0
  %651 = load i32, i32* %649, align 4
  store i32 %651, i32* %650, align 4
  %652 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %633, align 32
  %653 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %652, i64 0, i32 1, i64 %647, i32 0
  %654 = load i32, i32* %653, align 4
  %655 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 7, i64 %647
  store i32 %654, i32* %655, align 4
  %656 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 %647
  %657 = load i8, i8* %656, align 1
  %658 = getelementptr inbounds %struct.BEST_SEG_INFO, %struct.BEST_SEG_INFO* %2, i64 0, i32 9, i64 %647
  store i8 %657, i8* %658, align 1
  %659 = add nuw nsw i64 %635, 2
  %660 = icmp eq i64 %659, 16
  br i1 %660, label %661, label %634

661:                                              ; preds = %634, %620
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @labels2mode(%struct.macroblock* nocapture, i32* nocapture readonly, i32, i32, %union.int_mv*, %union.int_mv*, i32**) unnamed_addr #1 {
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 13
  %9 = load %struct.modeinfo*, %struct.modeinfo** %8, align 32
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 14
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 0, i32 0
  %13 = sext i32 %11 to i64
  %14 = sub nsw i64 0, %13
  %15 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %9, i64 %14
  %16 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %15, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %9, i64 %14, i32 0, i32 4, i32 0
  %18 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %9, i64 -1, i32 0, i32 0
  %19 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %9, i64 -1, i32 0, i32 4, i32 0
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 28
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 7
  br label %22

22:                                               ; preds = %116, %7
  %23 = phi i64 [ %119, %116 ], [ 0, %7 ]
  %24 = phi i32 [ %117, %116 ], [ 0, %7 ]
  %25 = phi i32 [ %118, %116 ], [ 0, %7 ]
  %26 = phi i32 [ %120, %116 ], [ 0, %7 ]
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %23
  %28 = getelementptr inbounds i32, i32* %1, i64 %23
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, %2
  br i1 %30, label %31, label %116

31:                                               ; preds = %22
  %32 = trunc i64 %23 to i32
  %33 = and i32 %32, 3
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %40

35:                                               ; preds = %31
  %36 = add nsw i64 %23, -1
  %37 = getelementptr inbounds i32, i32* %1, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, %2
  br i1 %39, label %105, label %40

40:                                               ; preds = %35, %31
  %41 = and i32 %32, 2147483644
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %48

43:                                               ; preds = %40
  %44 = add nsw i64 %23, -4
  %45 = getelementptr inbounds i32, i32* %1, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, %2
  br i1 %47, label %105, label %48

48:                                               ; preds = %43, %40
  switch i32 %3, label %98 [
    i32 13, label %49
    i32 10, label %51
    i32 11, label %64
    i32 12, label %80
  ]

49:                                               ; preds = %48
  %50 = tail call i32 @vp8_mv_bit_cost(%union.int_mv* %4, %union.int_mv* %5, i32** %6, i32 102) #8
  br label %98

51:                                               ; preds = %48
  br i1 %34, label %52, label %54

52:                                               ; preds = %51
  %53 = getelementptr inbounds %struct.blockd, %struct.blockd* %27, i64 -1, i32 6, i32 0
  br label %61

54:                                               ; preds = %51
  %55 = load i8, i8* %18, align 4
  %56 = icmp eq i8 %55, 9
  %57 = add nuw nsw i64 %23, 4
  %58 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %9, i64 -1, i32 1, i64 %57
  %59 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %58, i64 -1, i32 0
  %60 = select i1 %56, i32* %59, i32* %19
  br label %61

61:                                               ; preds = %54, %52
  %62 = phi i32* [ %53, %52 ], [ %60, %54 ]
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %12, align 4
  br label %98

64:                                               ; preds = %48
  br i1 %42, label %65, label %67

65:                                               ; preds = %64
  %66 = getelementptr inbounds %struct.blockd, %struct.blockd* %27, i64 -4, i32 6, i32 0
  br label %81

67:                                               ; preds = %64
  %68 = icmp ugt i64 %23, 3
  br i1 %68, label %74, label %69

69:                                               ; preds = %67
  %70 = load i8, i8* %16, align 4
  %71 = icmp eq i8 %70, 9
  br i1 %71, label %72, label %81

72:                                               ; preds = %69
  %73 = add nuw nsw i32 %26, 16
  br label %74

74:                                               ; preds = %72, %67
  %75 = phi %struct.modeinfo* [ %9, %67 ], [ %15, %72 ]
  %76 = phi i32 [ %32, %67 ], [ %73, %72 ]
  %77 = add nsw i32 %76, -4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %75, i64 0, i32 1, i64 %78, i32 0
  br label %81

80:                                               ; preds = %48
  store i32 0, i32* %12, align 4
  br label %98

81:                                               ; preds = %69, %74, %65
  %82 = phi i32* [ %66, %65 ], [ %79, %74 ], [ %17, %69 ]
  %83 = load i32, i32* %82, align 4
  store i32 %83, i32* %12, align 4
  br i1 %34, label %84, label %86

84:                                               ; preds = %81
  %85 = getelementptr inbounds %struct.blockd, %struct.blockd* %27, i64 -1, i32 6, i32 0
  br label %93

86:                                               ; preds = %81
  %87 = load i8, i8* %18, align 4
  %88 = icmp eq i8 %87, 9
  %89 = add nuw nsw i64 %23, 4
  %90 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %9, i64 -1, i32 1, i64 %89
  %91 = getelementptr inbounds %union.b_mode_info, %union.b_mode_info* %90, i64 -1, i32 0
  %92 = select i1 %88, i32* %91, i32* %19
  br label %93

93:                                               ; preds = %86, %84
  %94 = phi i32* [ %85, %84 ], [ %92, %86 ]
  %95 = load i32, i32* %94, align 4
  %96 = icmp eq i32 %95, %83
  %97 = select i1 %96, i32 10, i32 11
  br label %98

98:                                               ; preds = %49, %61, %80, %48, %93
  %99 = phi i32 [ %25, %93 ], [ %50, %49 ], [ %25, %61 ], [ %25, %80 ], [ %25, %48 ]
  %100 = phi i32 [ %97, %93 ], [ 13, %49 ], [ 10, %61 ], [ 12, %80 ], [ %3, %48 ]
  %101 = load i32*, i32** %20, align 32
  %102 = zext i32 %100 to i64
  %103 = getelementptr inbounds i32, i32* %101, i64 %102
  %104 = load i32, i32* %103, align 4
  br label %105

105:                                              ; preds = %43, %35, %98
  %106 = phi i32 [ %104, %98 ], [ %24, %35 ], [ %24, %43 ]
  %107 = phi i32 [ %99, %98 ], [ %25, %35 ], [ %25, %43 ]
  %108 = phi i32 [ %100, %98 ], [ 10, %35 ], [ 11, %43 ]
  %109 = load i32, i32* %12, align 4
  %110 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6, i32 9, i64 %23, i32 6, i32 0
  store i32 %109, i32* %110, align 8
  %111 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %21, align 32
  %112 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %111, i64 0, i32 1, i64 %23, i32 0
  store i32 %108, i32* %112, align 4
  %113 = load i32, i32* %12, align 4
  %114 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %21, align 32
  %115 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %114, i64 0, i32 1, i64 %23, i32 1, i32 0
  store i32 %113, i32* %115, align 4
  br label %116

116:                                              ; preds = %22, %105
  %117 = phi i32 [ %106, %105 ], [ %24, %22 ]
  %118 = phi i32 [ %107, %105 ], [ %25, %22 ]
  %119 = add nuw nsw i64 %23, 1
  %120 = add nuw nsw i32 %26, 1
  %121 = icmp eq i64 %119, 16
  br i1 %121, label %122, label %22

122:                                              ; preds = %116
  %123 = add nsw i32 %118, %117
  ret i32 %123
}

declare void @vp8_build_inter_predictors_b(%struct.blockd*, i32, i8*, i32, void (i8*, i32, i32, i32, i8*, i32)*) local_unnamed_addr #3

declare void @vp8_build_inter4x4_predictors_mbuv(%struct.macroblockd*) local_unnamed_addr #3

declare void @vp8_subtract_mby(i16*, i8*, i32, i8*, i32) local_unnamed_addr #3

declare i32 @vp8_mbblock_error_sse2(%struct.macroblock*, i32) local_unnamed_addr #3

declare void @vp8_build_inter16x16_predictors_mby(%struct.macroblockd*, i8*, i32) local_unnamed_addr #3

declare void @vp8_build_inter16x16_predictors_mbuv(%struct.macroblockd*) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !13, !8}
!13 = !{!"llvm.loop.unroll.runtime.disable"}
!14 = !{i32 25, i32 33}
