; ModuleID = '../../third_party/libxml/src/chvalid.c'
source_filename = "../../third_party/libxml/src/chvalid.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._xmlChSRange = type { i16, i16 }
%struct._xmlChRangeGroup = type { i32, i32, %struct._xmlChSRange*, %struct._xmlChLRange* }
%struct._xmlChLRange = type { i32, i32 }

@xmlIsPubidChar_tab = hidden local_unnamed_addr constant <{ [123 x i8], [133 x i8] }> <{ [123 x i8] c"\00\00\00\00\00\00\00\00\00\00\01\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\00\01\01\01\00\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\00\01\00\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\00\00\00\00\01\00\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01", [133 x i8] zeroinitializer }>, align 16
@xmlIsBaseChar_srng = internal constant [197 x %struct._xmlChSRange] [%struct._xmlChSRange { i16 256, i16 305 }, %struct._xmlChSRange { i16 308, i16 318 }, %struct._xmlChSRange { i16 321, i16 328 }, %struct._xmlChSRange { i16 330, i16 382 }, %struct._xmlChSRange { i16 384, i16 451 }, %struct._xmlChSRange { i16 461, i16 496 }, %struct._xmlChSRange { i16 500, i16 501 }, %struct._xmlChSRange { i16 506, i16 535 }, %struct._xmlChSRange { i16 592, i16 680 }, %struct._xmlChSRange { i16 699, i16 705 }, %struct._xmlChSRange { i16 902, i16 902 }, %struct._xmlChSRange { i16 904, i16 906 }, %struct._xmlChSRange { i16 908, i16 908 }, %struct._xmlChSRange { i16 910, i16 929 }, %struct._xmlChSRange { i16 931, i16 974 }, %struct._xmlChSRange { i16 976, i16 982 }, %struct._xmlChSRange { i16 986, i16 986 }, %struct._xmlChSRange { i16 988, i16 988 }, %struct._xmlChSRange { i16 990, i16 990 }, %struct._xmlChSRange { i16 992, i16 992 }, %struct._xmlChSRange { i16 994, i16 1011 }, %struct._xmlChSRange { i16 1025, i16 1036 }, %struct._xmlChSRange { i16 1038, i16 1103 }, %struct._xmlChSRange { i16 1105, i16 1116 }, %struct._xmlChSRange { i16 1118, i16 1153 }, %struct._xmlChSRange { i16 1168, i16 1220 }, %struct._xmlChSRange { i16 1223, i16 1224 }, %struct._xmlChSRange { i16 1227, i16 1228 }, %struct._xmlChSRange { i16 1232, i16 1259 }, %struct._xmlChSRange { i16 1262, i16 1269 }, %struct._xmlChSRange { i16 1272, i16 1273 }, %struct._xmlChSRange { i16 1329, i16 1366 }, %struct._xmlChSRange { i16 1369, i16 1369 }, %struct._xmlChSRange { i16 1377, i16 1414 }, %struct._xmlChSRange { i16 1488, i16 1514 }, %struct._xmlChSRange { i16 1520, i16 1522 }, %struct._xmlChSRange { i16 1569, i16 1594 }, %struct._xmlChSRange { i16 1601, i16 1610 }, %struct._xmlChSRange { i16 1649, i16 1719 }, %struct._xmlChSRange { i16 1722, i16 1726 }, %struct._xmlChSRange { i16 1728, i16 1742 }, %struct._xmlChSRange { i16 1744, i16 1747 }, %struct._xmlChSRange { i16 1749, i16 1749 }, %struct._xmlChSRange { i16 1765, i16 1766 }, %struct._xmlChSRange { i16 2309, i16 2361 }, %struct._xmlChSRange { i16 2365, i16 2365 }, %struct._xmlChSRange { i16 2392, i16 2401 }, %struct._xmlChSRange { i16 2437, i16 2444 }, %struct._xmlChSRange { i16 2447, i16 2448 }, %struct._xmlChSRange { i16 2451, i16 2472 }, %struct._xmlChSRange { i16 2474, i16 2480 }, %struct._xmlChSRange { i16 2482, i16 2482 }, %struct._xmlChSRange { i16 2486, i16 2489 }, %struct._xmlChSRange { i16 2524, i16 2525 }, %struct._xmlChSRange { i16 2527, i16 2529 }, %struct._xmlChSRange { i16 2544, i16 2545 }, %struct._xmlChSRange { i16 2565, i16 2570 }, %struct._xmlChSRange { i16 2575, i16 2576 }, %struct._xmlChSRange { i16 2579, i16 2600 }, %struct._xmlChSRange { i16 2602, i16 2608 }, %struct._xmlChSRange { i16 2610, i16 2611 }, %struct._xmlChSRange { i16 2613, i16 2614 }, %struct._xmlChSRange { i16 2616, i16 2617 }, %struct._xmlChSRange { i16 2649, i16 2652 }, %struct._xmlChSRange { i16 2654, i16 2654 }, %struct._xmlChSRange { i16 2674, i16 2676 }, %struct._xmlChSRange { i16 2693, i16 2699 }, %struct._xmlChSRange { i16 2701, i16 2701 }, %struct._xmlChSRange { i16 2703, i16 2705 }, %struct._xmlChSRange { i16 2707, i16 2728 }, %struct._xmlChSRange { i16 2730, i16 2736 }, %struct._xmlChSRange { i16 2738, i16 2739 }, %struct._xmlChSRange { i16 2741, i16 2745 }, %struct._xmlChSRange { i16 2749, i16 2749 }, %struct._xmlChSRange { i16 2784, i16 2784 }, %struct._xmlChSRange { i16 2821, i16 2828 }, %struct._xmlChSRange { i16 2831, i16 2832 }, %struct._xmlChSRange { i16 2835, i16 2856 }, %struct._xmlChSRange { i16 2858, i16 2864 }, %struct._xmlChSRange { i16 2866, i16 2867 }, %struct._xmlChSRange { i16 2870, i16 2873 }, %struct._xmlChSRange { i16 2877, i16 2877 }, %struct._xmlChSRange { i16 2908, i16 2909 }, %struct._xmlChSRange { i16 2911, i16 2913 }, %struct._xmlChSRange { i16 2949, i16 2954 }, %struct._xmlChSRange { i16 2958, i16 2960 }, %struct._xmlChSRange { i16 2962, i16 2965 }, %struct._xmlChSRange { i16 2969, i16 2970 }, %struct._xmlChSRange { i16 2972, i16 2972 }, %struct._xmlChSRange { i16 2974, i16 2975 }, %struct._xmlChSRange { i16 2979, i16 2980 }, %struct._xmlChSRange { i16 2984, i16 2986 }, %struct._xmlChSRange { i16 2990, i16 2997 }, %struct._xmlChSRange { i16 2999, i16 3001 }, %struct._xmlChSRange { i16 3077, i16 3084 }, %struct._xmlChSRange { i16 3086, i16 3088 }, %struct._xmlChSRange { i16 3090, i16 3112 }, %struct._xmlChSRange { i16 3114, i16 3123 }, %struct._xmlChSRange { i16 3125, i16 3129 }, %struct._xmlChSRange { i16 3168, i16 3169 }, %struct._xmlChSRange { i16 3205, i16 3212 }, %struct._xmlChSRange { i16 3214, i16 3216 }, %struct._xmlChSRange { i16 3218, i16 3240 }, %struct._xmlChSRange { i16 3242, i16 3251 }, %struct._xmlChSRange { i16 3253, i16 3257 }, %struct._xmlChSRange { i16 3294, i16 3294 }, %struct._xmlChSRange { i16 3296, i16 3297 }, %struct._xmlChSRange { i16 3333, i16 3340 }, %struct._xmlChSRange { i16 3342, i16 3344 }, %struct._xmlChSRange { i16 3346, i16 3368 }, %struct._xmlChSRange { i16 3370, i16 3385 }, %struct._xmlChSRange { i16 3424, i16 3425 }, %struct._xmlChSRange { i16 3585, i16 3630 }, %struct._xmlChSRange { i16 3632, i16 3632 }, %struct._xmlChSRange { i16 3634, i16 3635 }, %struct._xmlChSRange { i16 3648, i16 3653 }, %struct._xmlChSRange { i16 3713, i16 3714 }, %struct._xmlChSRange { i16 3716, i16 3716 }, %struct._xmlChSRange { i16 3719, i16 3720 }, %struct._xmlChSRange { i16 3722, i16 3722 }, %struct._xmlChSRange { i16 3725, i16 3725 }, %struct._xmlChSRange { i16 3732, i16 3735 }, %struct._xmlChSRange { i16 3737, i16 3743 }, %struct._xmlChSRange { i16 3745, i16 3747 }, %struct._xmlChSRange { i16 3749, i16 3749 }, %struct._xmlChSRange { i16 3751, i16 3751 }, %struct._xmlChSRange { i16 3754, i16 3755 }, %struct._xmlChSRange { i16 3757, i16 3758 }, %struct._xmlChSRange { i16 3760, i16 3760 }, %struct._xmlChSRange { i16 3762, i16 3763 }, %struct._xmlChSRange { i16 3773, i16 3773 }, %struct._xmlChSRange { i16 3776, i16 3780 }, %struct._xmlChSRange { i16 3904, i16 3911 }, %struct._xmlChSRange { i16 3913, i16 3945 }, %struct._xmlChSRange { i16 4256, i16 4293 }, %struct._xmlChSRange { i16 4304, i16 4342 }, %struct._xmlChSRange { i16 4352, i16 4352 }, %struct._xmlChSRange { i16 4354, i16 4355 }, %struct._xmlChSRange { i16 4357, i16 4359 }, %struct._xmlChSRange { i16 4361, i16 4361 }, %struct._xmlChSRange { i16 4363, i16 4364 }, %struct._xmlChSRange { i16 4366, i16 4370 }, %struct._xmlChSRange { i16 4412, i16 4412 }, %struct._xmlChSRange { i16 4414, i16 4414 }, %struct._xmlChSRange { i16 4416, i16 4416 }, %struct._xmlChSRange { i16 4428, i16 4428 }, %struct._xmlChSRange { i16 4430, i16 4430 }, %struct._xmlChSRange { i16 4432, i16 4432 }, %struct._xmlChSRange { i16 4436, i16 4437 }, %struct._xmlChSRange { i16 4441, i16 4441 }, %struct._xmlChSRange { i16 4447, i16 4449 }, %struct._xmlChSRange { i16 4451, i16 4451 }, %struct._xmlChSRange { i16 4453, i16 4453 }, %struct._xmlChSRange { i16 4455, i16 4455 }, %struct._xmlChSRange { i16 4457, i16 4457 }, %struct._xmlChSRange { i16 4461, i16 4462 }, %struct._xmlChSRange { i16 4466, i16 4467 }, %struct._xmlChSRange { i16 4469, i16 4469 }, %struct._xmlChSRange { i16 4510, i16 4510 }, %struct._xmlChSRange { i16 4520, i16 4520 }, %struct._xmlChSRange { i16 4523, i16 4523 }, %struct._xmlChSRange { i16 4526, i16 4527 }, %struct._xmlChSRange { i16 4535, i16 4536 }, %struct._xmlChSRange { i16 4538, i16 4538 }, %struct._xmlChSRange { i16 4540, i16 4546 }, %struct._xmlChSRange { i16 4587, i16 4587 }, %struct._xmlChSRange { i16 4592, i16 4592 }, %struct._xmlChSRange { i16 4601, i16 4601 }, %struct._xmlChSRange { i16 7680, i16 7835 }, %struct._xmlChSRange { i16 7840, i16 7929 }, %struct._xmlChSRange { i16 7936, i16 7957 }, %struct._xmlChSRange { i16 7960, i16 7965 }, %struct._xmlChSRange { i16 7968, i16 8005 }, %struct._xmlChSRange { i16 8008, i16 8013 }, %struct._xmlChSRange { i16 8016, i16 8023 }, %struct._xmlChSRange { i16 8025, i16 8025 }, %struct._xmlChSRange { i16 8027, i16 8027 }, %struct._xmlChSRange { i16 8029, i16 8029 }, %struct._xmlChSRange { i16 8031, i16 8061 }, %struct._xmlChSRange { i16 8064, i16 8116 }, %struct._xmlChSRange { i16 8118, i16 8124 }, %struct._xmlChSRange { i16 8126, i16 8126 }, %struct._xmlChSRange { i16 8130, i16 8132 }, %struct._xmlChSRange { i16 8134, i16 8140 }, %struct._xmlChSRange { i16 8144, i16 8147 }, %struct._xmlChSRange { i16 8150, i16 8155 }, %struct._xmlChSRange { i16 8160, i16 8172 }, %struct._xmlChSRange { i16 8178, i16 8180 }, %struct._xmlChSRange { i16 8182, i16 8188 }, %struct._xmlChSRange { i16 8486, i16 8486 }, %struct._xmlChSRange { i16 8490, i16 8491 }, %struct._xmlChSRange { i16 8494, i16 8494 }, %struct._xmlChSRange { i16 8576, i16 8578 }, %struct._xmlChSRange { i16 12353, i16 12436 }, %struct._xmlChSRange { i16 12449, i16 12538 }, %struct._xmlChSRange { i16 12549, i16 12588 }, %struct._xmlChSRange { i16 -21504, i16 -10333 }], align 16
@xmlIsBaseCharGroup = hidden local_unnamed_addr constant %struct._xmlChRangeGroup { i32 197, i32 0, %struct._xmlChSRange* getelementptr inbounds ([197 x %struct._xmlChSRange], [197 x %struct._xmlChSRange]* @xmlIsBaseChar_srng, i32 0, i32 0), %struct._xmlChLRange* null }, align 8
@xmlIsChar_srng = internal constant [2 x %struct._xmlChSRange] [%struct._xmlChSRange { i16 256, i16 -10241 }, %struct._xmlChSRange { i16 -8192, i16 -3 }], align 2
@xmlIsChar_lrng = internal constant [1 x %struct._xmlChLRange] [%struct._xmlChLRange { i32 65536, i32 1114111 }], align 4
@xmlIsCharGroup = hidden local_unnamed_addr constant %struct._xmlChRangeGroup { i32 2, i32 1, %struct._xmlChSRange* getelementptr inbounds ([2 x %struct._xmlChSRange], [2 x %struct._xmlChSRange]* @xmlIsChar_srng, i32 0, i32 0), %struct._xmlChLRange* getelementptr inbounds ([1 x %struct._xmlChLRange], [1 x %struct._xmlChLRange]* @xmlIsChar_lrng, i32 0, i32 0) }, align 8
@xmlIsCombining_srng = internal constant [95 x %struct._xmlChSRange] [%struct._xmlChSRange { i16 768, i16 837 }, %struct._xmlChSRange { i16 864, i16 865 }, %struct._xmlChSRange { i16 1155, i16 1158 }, %struct._xmlChSRange { i16 1425, i16 1441 }, %struct._xmlChSRange { i16 1443, i16 1465 }, %struct._xmlChSRange { i16 1467, i16 1469 }, %struct._xmlChSRange { i16 1471, i16 1471 }, %struct._xmlChSRange { i16 1473, i16 1474 }, %struct._xmlChSRange { i16 1476, i16 1476 }, %struct._xmlChSRange { i16 1611, i16 1618 }, %struct._xmlChSRange { i16 1648, i16 1648 }, %struct._xmlChSRange { i16 1750, i16 1756 }, %struct._xmlChSRange { i16 1757, i16 1759 }, %struct._xmlChSRange { i16 1760, i16 1764 }, %struct._xmlChSRange { i16 1767, i16 1768 }, %struct._xmlChSRange { i16 1770, i16 1773 }, %struct._xmlChSRange { i16 2305, i16 2307 }, %struct._xmlChSRange { i16 2364, i16 2364 }, %struct._xmlChSRange { i16 2366, i16 2380 }, %struct._xmlChSRange { i16 2381, i16 2381 }, %struct._xmlChSRange { i16 2385, i16 2388 }, %struct._xmlChSRange { i16 2402, i16 2403 }, %struct._xmlChSRange { i16 2433, i16 2435 }, %struct._xmlChSRange { i16 2492, i16 2492 }, %struct._xmlChSRange { i16 2494, i16 2494 }, %struct._xmlChSRange { i16 2495, i16 2495 }, %struct._xmlChSRange { i16 2496, i16 2500 }, %struct._xmlChSRange { i16 2503, i16 2504 }, %struct._xmlChSRange { i16 2507, i16 2509 }, %struct._xmlChSRange { i16 2519, i16 2519 }, %struct._xmlChSRange { i16 2530, i16 2531 }, %struct._xmlChSRange { i16 2562, i16 2562 }, %struct._xmlChSRange { i16 2620, i16 2620 }, %struct._xmlChSRange { i16 2622, i16 2622 }, %struct._xmlChSRange { i16 2623, i16 2623 }, %struct._xmlChSRange { i16 2624, i16 2626 }, %struct._xmlChSRange { i16 2631, i16 2632 }, %struct._xmlChSRange { i16 2635, i16 2637 }, %struct._xmlChSRange { i16 2672, i16 2673 }, %struct._xmlChSRange { i16 2689, i16 2691 }, %struct._xmlChSRange { i16 2748, i16 2748 }, %struct._xmlChSRange { i16 2750, i16 2757 }, %struct._xmlChSRange { i16 2759, i16 2761 }, %struct._xmlChSRange { i16 2763, i16 2765 }, %struct._xmlChSRange { i16 2817, i16 2819 }, %struct._xmlChSRange { i16 2876, i16 2876 }, %struct._xmlChSRange { i16 2878, i16 2883 }, %struct._xmlChSRange { i16 2887, i16 2888 }, %struct._xmlChSRange { i16 2891, i16 2893 }, %struct._xmlChSRange { i16 2902, i16 2903 }, %struct._xmlChSRange { i16 2946, i16 2947 }, %struct._xmlChSRange { i16 3006, i16 3010 }, %struct._xmlChSRange { i16 3014, i16 3016 }, %struct._xmlChSRange { i16 3018, i16 3021 }, %struct._xmlChSRange { i16 3031, i16 3031 }, %struct._xmlChSRange { i16 3073, i16 3075 }, %struct._xmlChSRange { i16 3134, i16 3140 }, %struct._xmlChSRange { i16 3142, i16 3144 }, %struct._xmlChSRange { i16 3146, i16 3149 }, %struct._xmlChSRange { i16 3157, i16 3158 }, %struct._xmlChSRange { i16 3202, i16 3203 }, %struct._xmlChSRange { i16 3262, i16 3268 }, %struct._xmlChSRange { i16 3270, i16 3272 }, %struct._xmlChSRange { i16 3274, i16 3277 }, %struct._xmlChSRange { i16 3285, i16 3286 }, %struct._xmlChSRange { i16 3330, i16 3331 }, %struct._xmlChSRange { i16 3390, i16 3395 }, %struct._xmlChSRange { i16 3398, i16 3400 }, %struct._xmlChSRange { i16 3402, i16 3405 }, %struct._xmlChSRange { i16 3415, i16 3415 }, %struct._xmlChSRange { i16 3633, i16 3633 }, %struct._xmlChSRange { i16 3636, i16 3642 }, %struct._xmlChSRange { i16 3655, i16 3662 }, %struct._xmlChSRange { i16 3761, i16 3761 }, %struct._xmlChSRange { i16 3764, i16 3769 }, %struct._xmlChSRange { i16 3771, i16 3772 }, %struct._xmlChSRange { i16 3784, i16 3789 }, %struct._xmlChSRange { i16 3864, i16 3865 }, %struct._xmlChSRange { i16 3893, i16 3893 }, %struct._xmlChSRange { i16 3895, i16 3895 }, %struct._xmlChSRange { i16 3897, i16 3897 }, %struct._xmlChSRange { i16 3902, i16 3902 }, %struct._xmlChSRange { i16 3903, i16 3903 }, %struct._xmlChSRange { i16 3953, i16 3972 }, %struct._xmlChSRange { i16 3974, i16 3979 }, %struct._xmlChSRange { i16 3984, i16 3989 }, %struct._xmlChSRange { i16 3991, i16 3991 }, %struct._xmlChSRange { i16 3993, i16 4013 }, %struct._xmlChSRange { i16 4017, i16 4023 }, %struct._xmlChSRange { i16 4025, i16 4025 }, %struct._xmlChSRange { i16 8400, i16 8412 }, %struct._xmlChSRange { i16 8417, i16 8417 }, %struct._xmlChSRange { i16 12330, i16 12335 }, %struct._xmlChSRange { i16 12441, i16 12441 }, %struct._xmlChSRange { i16 12442, i16 12442 }], align 16
@xmlIsCombiningGroup = hidden local_unnamed_addr constant %struct._xmlChRangeGroup { i32 95, i32 0, %struct._xmlChSRange* getelementptr inbounds ([95 x %struct._xmlChSRange], [95 x %struct._xmlChSRange]* @xmlIsCombining_srng, i32 0, i32 0), %struct._xmlChLRange* null }, align 8
@xmlIsDigit_srng = internal constant [14 x %struct._xmlChSRange] [%struct._xmlChSRange { i16 1632, i16 1641 }, %struct._xmlChSRange { i16 1776, i16 1785 }, %struct._xmlChSRange { i16 2406, i16 2415 }, %struct._xmlChSRange { i16 2534, i16 2543 }, %struct._xmlChSRange { i16 2662, i16 2671 }, %struct._xmlChSRange { i16 2790, i16 2799 }, %struct._xmlChSRange { i16 2918, i16 2927 }, %struct._xmlChSRange { i16 3047, i16 3055 }, %struct._xmlChSRange { i16 3174, i16 3183 }, %struct._xmlChSRange { i16 3302, i16 3311 }, %struct._xmlChSRange { i16 3430, i16 3439 }, %struct._xmlChSRange { i16 3664, i16 3673 }, %struct._xmlChSRange { i16 3792, i16 3801 }, %struct._xmlChSRange { i16 3872, i16 3881 }], align 16
@xmlIsDigitGroup = hidden local_unnamed_addr constant %struct._xmlChRangeGroup { i32 14, i32 0, %struct._xmlChSRange* getelementptr inbounds ([14 x %struct._xmlChSRange], [14 x %struct._xmlChSRange]* @xmlIsDigit_srng, i32 0, i32 0), %struct._xmlChLRange* null }, align 8
@xmlIsExtender_srng = internal constant [10 x %struct._xmlChSRange] [%struct._xmlChSRange { i16 720, i16 720 }, %struct._xmlChSRange { i16 721, i16 721 }, %struct._xmlChSRange { i16 903, i16 903 }, %struct._xmlChSRange { i16 1600, i16 1600 }, %struct._xmlChSRange { i16 3654, i16 3654 }, %struct._xmlChSRange { i16 3782, i16 3782 }, %struct._xmlChSRange { i16 12293, i16 12293 }, %struct._xmlChSRange { i16 12337, i16 12341 }, %struct._xmlChSRange { i16 12445, i16 12446 }, %struct._xmlChSRange { i16 12540, i16 12542 }], align 16
@xmlIsExtenderGroup = hidden local_unnamed_addr constant %struct._xmlChRangeGroup { i32 10, i32 0, %struct._xmlChSRange* getelementptr inbounds ([10 x %struct._xmlChSRange], [10 x %struct._xmlChSRange]* @xmlIsExtender_srng, i32 0, i32 0), %struct._xmlChLRange* null }, align 8
@xmlIsIdeographic_srng = internal constant [3 x %struct._xmlChSRange] [%struct._xmlChSRange { i16 12295, i16 12295 }, %struct._xmlChSRange { i16 12321, i16 12329 }, %struct._xmlChSRange { i16 19968, i16 -24667 }], align 2
@xmlIsIdeographicGroup = hidden local_unnamed_addr constant %struct._xmlChRangeGroup { i32 3, i32 0, %struct._xmlChSRange* getelementptr inbounds ([3 x %struct._xmlChSRange], [3 x %struct._xmlChSRange]* @xmlIsIdeographic_srng, i32 0, i32 0), %struct._xmlChLRange* null }, align 8

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @xmlCharInRange(i32, %struct._xmlChRangeGroup* readonly) local_unnamed_addr #0 {
  %3 = icmp eq %struct._xmlChRangeGroup* %1, null
  br i1 %3, label %71, label %4

4:                                                ; preds = %2
  %5 = icmp ult i32 %0, 65536
  br i1 %5, label %6, label %40

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct._xmlChRangeGroup, %struct._xmlChRangeGroup* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %71, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct._xmlChRangeGroup, %struct._xmlChRangeGroup* %1, i64 0, i32 2
  %12 = load %struct._xmlChSRange*, %struct._xmlChSRange** %11, align 8
  %13 = icmp slt i32 %8, 1
  br i1 %13, label %71, label %14

14:                                               ; preds = %10
  %15 = add nsw i32 %8, -1
  %16 = and i32 %0, 65535
  br label %17

17:                                               ; preds = %14, %36
  %18 = phi i32 [ %15, %14 ], [ %38, %36 ]
  %19 = phi i32 [ 0, %14 ], [ %37, %36 ]
  %20 = add nsw i32 %18, %19
  %21 = sdiv i32 %20, 2
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %struct._xmlChSRange, %struct._xmlChSRange* %12, i64 %22, i32 0
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = icmp ult i32 %16, %25
  br i1 %26, label %27, label %29

27:                                               ; preds = %17
  %28 = add nsw i32 %21, -1
  br label %36

29:                                               ; preds = %17
  %30 = getelementptr inbounds %struct._xmlChSRange, %struct._xmlChSRange* %12, i64 %22, i32 1
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = icmp ugt i32 %16, %32
  br i1 %33, label %34, label %71

34:                                               ; preds = %29
  %35 = add nsw i32 %21, 1
  br label %36

36:                                               ; preds = %34, %27
  %37 = phi i32 [ %19, %27 ], [ %35, %34 ]
  %38 = phi i32 [ %28, %27 ], [ %18, %34 ]
  %39 = icmp sgt i32 %37, %38
  br i1 %39, label %71, label %17

40:                                               ; preds = %4
  %41 = getelementptr inbounds %struct._xmlChRangeGroup, %struct._xmlChRangeGroup* %1, i64 0, i32 1
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %71, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct._xmlChRangeGroup, %struct._xmlChRangeGroup* %1, i64 0, i32 3
  %46 = load %struct._xmlChLRange*, %struct._xmlChLRange** %45, align 8
  %47 = icmp slt i32 %42, 1
  br i1 %47, label %71, label %48

48:                                               ; preds = %44
  %49 = add nsw i32 %42, -1
  br label %50

50:                                               ; preds = %48, %67
  %51 = phi i32 [ %69, %67 ], [ %49, %48 ]
  %52 = phi i32 [ %68, %67 ], [ 0, %48 ]
  %53 = add nsw i32 %51, %52
  %54 = sdiv i32 %53, 2
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds %struct._xmlChLRange, %struct._xmlChLRange* %46, i64 %55, i32 0
  %57 = load i32, i32* %56, align 4
  %58 = icmp ugt i32 %57, %0
  br i1 %58, label %59, label %61

59:                                               ; preds = %50
  %60 = add nsw i32 %54, -1
  br label %67

61:                                               ; preds = %50
  %62 = getelementptr inbounds %struct._xmlChLRange, %struct._xmlChLRange* %46, i64 %55, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = icmp ult i32 %63, %0
  br i1 %64, label %65, label %71

65:                                               ; preds = %61
  %66 = add nsw i32 %54, 1
  br label %67

67:                                               ; preds = %65, %59
  %68 = phi i32 [ %52, %59 ], [ %66, %65 ]
  %69 = phi i32 [ %60, %59 ], [ %51, %65 ]
  %70 = icmp sgt i32 %68, %69
  br i1 %70, label %71, label %50

71:                                               ; preds = %61, %67, %29, %36, %44, %10, %40, %6, %2
  %72 = phi i32 [ 0, %2 ], [ 0, %6 ], [ 0, %40 ], [ 0, %10 ], [ 0, %44 ], [ 1, %29 ], [ 0, %36 ], [ 1, %61 ], [ 0, %67 ]
  ret i32 %72
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @xmlIsBaseChar(i32) local_unnamed_addr #1 {
  %2 = icmp ult i32 %0, 256
  br i1 %2, label %3, label %16

3:                                                ; preds = %1
  %4 = and i32 %0, -33
  %5 = add nsw i32 %4, -65
  %6 = icmp ult i32 %5, 26
  %7 = add nsw i32 %0, -192
  %8 = icmp ult i32 %7, 23
  %9 = or i1 %8, %6
  %10 = add nsw i32 %0, -216
  %11 = icmp ult i32 %10, 31
  %12 = or i1 %11, %9
  %13 = icmp ugt i32 %0, 247
  %14 = or i1 %13, %12
  %15 = zext i1 %14 to i32
  br label %43

16:                                               ; preds = %1
  %17 = icmp ult i32 %0, 65536
  br i1 %17, label %18, label %43

18:                                               ; preds = %16
  %19 = and i32 %0, 65535
  br label %20

20:                                               ; preds = %39, %18
  %21 = phi i32 [ 196, %18 ], [ %41, %39 ]
  %22 = phi i32 [ 0, %18 ], [ %40, %39 ]
  %23 = add nsw i32 %22, %21
  %24 = sdiv i32 %23, 2
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [197 x %struct._xmlChSRange], [197 x %struct._xmlChSRange]* @xmlIsBaseChar_srng, i64 0, i64 %25, i32 0
  %27 = load i16, i16* %26, align 4
  %28 = zext i16 %27 to i32
  %29 = icmp ult i32 %19, %28
  br i1 %29, label %30, label %32

30:                                               ; preds = %20
  %31 = add nsw i32 %24, -1
  br label %39

32:                                               ; preds = %20
  %33 = getelementptr inbounds [197 x %struct._xmlChSRange], [197 x %struct._xmlChSRange]* @xmlIsBaseChar_srng, i64 0, i64 %25, i32 1
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = icmp ugt i32 %19, %35
  br i1 %36, label %37, label %43

37:                                               ; preds = %32
  %38 = add nsw i32 %24, 1
  br label %39

39:                                               ; preds = %37, %30
  %40 = phi i32 [ %22, %30 ], [ %38, %37 ]
  %41 = phi i32 [ %31, %30 ], [ %21, %37 ]
  %42 = icmp sgt i32 %40, %41
  br i1 %42, label %43, label %20

43:                                               ; preds = %39, %32, %16, %3
  %44 = phi i32 [ %15, %3 ], [ 0, %16 ], [ 0, %39 ], [ 1, %32 ]
  ret i32 %44
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @xmlIsBlank(i32) local_unnamed_addr #1 {
  %2 = icmp ult i32 %0, 256
  br i1 %2, label %3, label %11

3:                                                ; preds = %1
  %4 = icmp eq i32 %0, 32
  %5 = add nsw i32 %0, -9
  %6 = icmp ult i32 %5, 2
  %7 = or i1 %4, %6
  %8 = icmp eq i32 %0, 13
  %9 = or i1 %8, %7
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %3, %1
  %12 = phi i32 [ 0, %1 ], [ %10, %3 ]
  ret i32 %12
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @xmlIsChar(i32) local_unnamed_addr #1 {
  %2 = icmp ult i32 %0, 256
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  switch i32 %0, label %4 [
    i32 13, label %14
    i32 10, label %14
    i32 9, label %14
  ]

4:                                                ; preds = %3
  %5 = icmp ugt i32 %0, 31
  br label %14

6:                                                ; preds = %1
  %7 = icmp ult i32 %0, 55296
  %8 = add i32 %0, -57344
  %9 = icmp ult i32 %8, 8190
  %10 = or i1 %7, %9
  br i1 %10, label %14, label %11

11:                                               ; preds = %6
  %12 = add i32 %0, -65536
  %13 = icmp ult i32 %12, 1048576
  br label %14

14:                                               ; preds = %6, %11, %4, %3, %3, %3
  %15 = phi i1 [ %5, %4 ], [ true, %3 ], [ true, %3 ], [ true, %3 ], [ true, %6 ], [ %13, %11 ]
  %16 = zext i1 %15 to i32
  ret i32 %16
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @xmlIsCombining(i32) local_unnamed_addr #1 {
  %2 = add i32 %0, -256
  %3 = icmp ult i32 %2, 65280
  br i1 %3, label %4, label %29

4:                                                ; preds = %1
  %5 = and i32 %0, 65535
  br label %6

6:                                                ; preds = %25, %4
  %7 = phi i32 [ 94, %4 ], [ %27, %25 ]
  %8 = phi i32 [ 0, %4 ], [ %26, %25 ]
  %9 = add nsw i32 %8, %7
  %10 = sdiv i32 %9, 2
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [95 x %struct._xmlChSRange], [95 x %struct._xmlChSRange]* @xmlIsCombining_srng, i64 0, i64 %11, i32 0
  %13 = load i16, i16* %12, align 4
  %14 = zext i16 %13 to i32
  %15 = icmp ult i32 %5, %14
  br i1 %15, label %16, label %18

16:                                               ; preds = %6
  %17 = add nsw i32 %10, -1
  br label %25

18:                                               ; preds = %6
  %19 = getelementptr inbounds [95 x %struct._xmlChSRange], [95 x %struct._xmlChSRange]* @xmlIsCombining_srng, i64 0, i64 %11, i32 1
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i32
  %22 = icmp ugt i32 %5, %21
  br i1 %22, label %23, label %29

23:                                               ; preds = %18
  %24 = add nsw i32 %10, 1
  br label %25

25:                                               ; preds = %23, %16
  %26 = phi i32 [ %8, %16 ], [ %24, %23 ]
  %27 = phi i32 [ %17, %16 ], [ %7, %23 ]
  %28 = icmp sgt i32 %26, %27
  br i1 %28, label %29, label %6

29:                                               ; preds = %25, %18, %1
  %30 = phi i32 [ 0, %1 ], [ 0, %25 ], [ 1, %18 ]
  ret i32 %30
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @xmlIsDigit(i32) local_unnamed_addr #1 {
  %2 = icmp ult i32 %0, 256
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = add nsw i32 %0, -48
  %5 = icmp ult i32 %4, 10
  %6 = zext i1 %5 to i32
  br label %34

7:                                                ; preds = %1
  %8 = icmp ult i32 %0, 65536
  br i1 %8, label %9, label %34

9:                                                ; preds = %7
  %10 = and i32 %0, 65535
  br label %11

11:                                               ; preds = %30, %9
  %12 = phi i32 [ 13, %9 ], [ %32, %30 ]
  %13 = phi i32 [ 0, %9 ], [ %31, %30 ]
  %14 = add nsw i32 %13, %12
  %15 = sdiv i32 %14, 2
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [14 x %struct._xmlChSRange], [14 x %struct._xmlChSRange]* @xmlIsDigit_srng, i64 0, i64 %16, i32 0
  %18 = load i16, i16* %17, align 4
  %19 = zext i16 %18 to i32
  %20 = icmp ult i32 %10, %19
  br i1 %20, label %21, label %23

21:                                               ; preds = %11
  %22 = add nsw i32 %15, -1
  br label %30

23:                                               ; preds = %11
  %24 = getelementptr inbounds [14 x %struct._xmlChSRange], [14 x %struct._xmlChSRange]* @xmlIsDigit_srng, i64 0, i64 %16, i32 1
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = icmp ugt i32 %10, %26
  br i1 %27, label %28, label %34

28:                                               ; preds = %23
  %29 = add nsw i32 %15, 1
  br label %30

30:                                               ; preds = %28, %21
  %31 = phi i32 [ %13, %21 ], [ %29, %28 ]
  %32 = phi i32 [ %22, %21 ], [ %12, %28 ]
  %33 = icmp sgt i32 %31, %32
  br i1 %33, label %34, label %11

34:                                               ; preds = %30, %23, %7, %3
  %35 = phi i32 [ %6, %3 ], [ 0, %7 ], [ 0, %30 ], [ 1, %23 ]
  ret i32 %35
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @xmlIsExtender(i32) local_unnamed_addr #1 {
  %2 = icmp ult i32 %0, 256
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = icmp eq i32 %0, 183
  %5 = zext i1 %4 to i32
  br label %33

6:                                                ; preds = %1
  %7 = icmp ult i32 %0, 65536
  br i1 %7, label %8, label %33

8:                                                ; preds = %6
  %9 = and i32 %0, 65535
  br label %10

10:                                               ; preds = %29, %8
  %11 = phi i32 [ 9, %8 ], [ %31, %29 ]
  %12 = phi i32 [ 0, %8 ], [ %30, %29 ]
  %13 = add nsw i32 %12, %11
  %14 = sdiv i32 %13, 2
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [10 x %struct._xmlChSRange], [10 x %struct._xmlChSRange]* @xmlIsExtender_srng, i64 0, i64 %15, i32 0
  %17 = load i16, i16* %16, align 4
  %18 = zext i16 %17 to i32
  %19 = icmp ult i32 %9, %18
  br i1 %19, label %20, label %22

20:                                               ; preds = %10
  %21 = add nsw i32 %14, -1
  br label %29

22:                                               ; preds = %10
  %23 = getelementptr inbounds [10 x %struct._xmlChSRange], [10 x %struct._xmlChSRange]* @xmlIsExtender_srng, i64 0, i64 %15, i32 1
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = icmp ugt i32 %9, %25
  br i1 %26, label %27, label %33

27:                                               ; preds = %22
  %28 = add nsw i32 %14, 1
  br label %29

29:                                               ; preds = %27, %20
  %30 = phi i32 [ %12, %20 ], [ %28, %27 ]
  %31 = phi i32 [ %21, %20 ], [ %11, %27 ]
  %32 = icmp sgt i32 %30, %31
  br i1 %32, label %33, label %10

33:                                               ; preds = %29, %22, %6, %3
  %34 = phi i32 [ %5, %3 ], [ 0, %6 ], [ 0, %29 ], [ 1, %22 ]
  ret i32 %34
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @xmlIsIdeographic(i32) local_unnamed_addr #1 {
  %2 = icmp ult i32 %0, 256
  br i1 %2, label %12, label %3

3:                                                ; preds = %1
  %4 = add i32 %0, -19968
  %5 = icmp ult i32 %4, 20902
  %6 = icmp eq i32 %0, 12295
  %7 = or i1 %6, %5
  br i1 %7, label %12, label %8

8:                                                ; preds = %3
  %9 = add i32 %0, -12321
  %10 = icmp ult i32 %9, 9
  %11 = zext i1 %10 to i32
  br label %12

12:                                               ; preds = %3, %8, %1
  %13 = phi i32 [ 0, %1 ], [ 1, %3 ], [ %11, %8 ]
  ret i32 %13
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @xmlIsPubidChar(i32) local_unnamed_addr #1 {
  %2 = icmp ult i32 %0, 256
  br i1 %2, label %3, label %8

3:                                                ; preds = %1
  %4 = zext i32 %0 to i64
  %5 = getelementptr inbounds [256 x i8], [256 x i8]* bitcast (<{ [123 x i8], [133 x i8] }>* @xmlIsPubidChar_tab to [256 x i8]*), i64 0, i64 %4
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  br label %8

8:                                                ; preds = %1, %3
  %9 = phi i32 [ %7, %3 ], [ 0, %1 ]
  ret i32 %9
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
