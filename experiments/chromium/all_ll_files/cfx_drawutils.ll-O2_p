; ModuleID = '../../third_party/pdfium/core/fxge/cfx_drawutils.cpp'
source_filename = "../../third_party/pdfium/core/fxge/cfx_drawutils.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { float*, float*, %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { float* }
%class.CFX_RenderDevice = type { i32 (...)**, %"class.fxcrt::RetainPtr", i32, i32, i32, i32, i8, %struct.FX_RECT, %"class.std::__1::unique_ptr.1" }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type opaque
%struct.FX_RECT = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.RenderDeviceDriverIface* }
%class.RenderDeviceDriverIface = type { i32 (...)** }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%class.CFX_FloatRect = type { float, float, float, float }
%class.CFX_PathData = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.FX_PATHPOINT*, %class.FX_PATHPOINT*, %"class.std::__1::__compressed_pair.5" }
%class.FX_PATHPOINT = type <{ %class.CFX_PTemplate, i8, i8, [2 x i8] }>
%class.CFX_PTemplate = type { float, float }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %class.FX_PATHPOINT* }
%class.CFX_GraphStateData = type { i8, i8, float, float, float, %"class.std::__1::vector.8" }
%struct.CFX_FillRenderOptions = type { i8, i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIfNS_9allocatorIfEEE6assignIPKfEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_ = comdat any

@__const._ZN13CFX_DrawUtils13DrawFocusRectEP16CFX_RenderDeviceRK10CFX_MatrixRK13CFX_FloatRect.graph_state_data = private unnamed_addr constant { i8, i8, [2 x i8], float, float, float, %"class.std::__1::vector.8" } { i8 -86, i8 -86, [2 x i8] c"\AA\AA", float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %"class.std::__1::vector.8" { %"class.std::__1::__vector_base.9" { float* inttoptr (i64 -6148914691236517206 to float*), float* inttoptr (i64 -6148914691236517206 to float*), %"class.std::__1::__compressed_pair.10" { %"struct.std::__1::__compressed_pair_elem.11" { float* inttoptr (i64 -6148914691236517206 to float*) } } } } }, align 8
@.ref.tmp = private constant [1 x float] [float 1.000000e+00], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFX_DrawUtils13DrawFocusRectEP16CFX_RenderDeviceRK10CFX_MatrixRK13CFX_FloatRect(%class.CFX_RenderDevice*, %class.CFX_Matrix* dereferenceable(24), %class.CFX_FloatRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.CFX_PathData, align 8
  %5 = alloca %class.CFX_PTemplate, align 4
  %6 = alloca %class.CFX_PTemplate, align 4
  %7 = alloca %class.CFX_PTemplate, align 4
  %8 = alloca %class.CFX_PTemplate, align 4
  %9 = alloca %class.CFX_PTemplate, align 4
  %10 = alloca %class.CFX_GraphStateData, align 8
  %11 = alloca i16, align 2
  %12 = bitcast i16* %11 to %struct.CFX_FillRenderOptions*
  %13 = bitcast %class.CFX_PathData* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #7
  %14 = bitcast %class.CFX_PathData* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 24, i1 false)
  call void @_ZN12CFX_PathDataC1Ev(%class.CFX_PathData* nonnull %4) #7
  %15 = bitcast %class.CFX_PTemplate* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #7
  %16 = bitcast %class.CFX_FloatRect* %2 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %2, i64 0, i32 3
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = bitcast %class.CFX_PTemplate* %5 to i32*
  store i32 %17, i32* %21, align 4
  %22 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %5, i64 0, i32 1
  %23 = bitcast float* %22 to i32*
  store i32 %20, i32* %23, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* nonnull %4, %class.CFX_PTemplate* nonnull dereferenceable(8) %5, i8 zeroext 2) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #7
  %24 = bitcast %class.CFX_PTemplate* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #7
  %25 = load i32, i32* %16, align 4
  %26 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %2, i64 0, i32 1
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = bitcast %class.CFX_PTemplate* %6 to i32*
  store i32 %25, i32* %29, align 4
  %30 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %6, i64 0, i32 1
  %31 = bitcast float* %30 to i32*
  store i32 %28, i32* %31, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* nonnull %4, %class.CFX_PTemplate* nonnull dereferenceable(8) %6, i8 zeroext 0) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #7
  %32 = bitcast %class.CFX_PTemplate* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #7
  %33 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %2, i64 0, i32 2
  %34 = bitcast float* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = load i32, i32* %27, align 4
  %37 = bitcast %class.CFX_PTemplate* %7 to i32*
  store i32 %35, i32* %37, align 4
  %38 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %7, i64 0, i32 1
  %39 = bitcast float* %38 to i32*
  store i32 %36, i32* %39, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* nonnull %4, %class.CFX_PTemplate* nonnull dereferenceable(8) %7, i8 zeroext 0) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #7
  %40 = bitcast %class.CFX_PTemplate* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #7
  %41 = load i32, i32* %34, align 4
  %42 = load i32, i32* %19, align 4
  %43 = bitcast %class.CFX_PTemplate* %8 to i32*
  store i32 %41, i32* %43, align 4
  %44 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %8, i64 0, i32 1
  %45 = bitcast float* %44 to i32*
  store i32 %42, i32* %45, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* nonnull %4, %class.CFX_PTemplate* nonnull dereferenceable(8) %8, i8 zeroext 0) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #7
  %46 = bitcast %class.CFX_PTemplate* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #7
  %47 = load i32, i32* %16, align 4
  %48 = load i32, i32* %19, align 4
  %49 = bitcast %class.CFX_PTemplate* %9 to i32*
  store i32 %47, i32* %49, align 4
  %50 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %9, i64 0, i32 1
  %51 = bitcast float* %50 to i32*
  store i32 %48, i32* %51, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* nonnull %4, %class.CFX_PTemplate* nonnull dereferenceable(8) %9, i8 zeroext 0) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #7
  %52 = getelementptr inbounds %class.CFX_GraphStateData, %class.CFX_GraphStateData* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %52) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %52, i8* align 8 getelementptr inbounds ({ i8, i8, [2 x i8], float, float, float, %"class.std::__1::vector.8" }, { i8, i8, [2 x i8], float, float, float, %"class.std::__1::vector.8" }* @__const._ZN13CFX_DrawUtils13DrawFocusRectEP16CFX_RenderDeviceRK10CFX_MatrixRK13CFX_FloatRect.graph_state_data, i64 0, i32 0), i64 40, i1 false)
  call void @_ZN18CFX_GraphStateDataC1Ev(%class.CFX_GraphStateData* nonnull %10) #7
  %53 = getelementptr inbounds %class.CFX_GraphStateData, %class.CFX_GraphStateData* %10, i64 0, i32 5
  call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE6assignIPKfEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(%"class.std::__1::vector.8"* %53, float* getelementptr inbounds ([1 x float], [1 x float]* @.ref.tmp, i64 0, i64 0), float* getelementptr inbounds ([1 x float], [1 x float]* @.ref.tmp, i64 1, i64 0)) #7
  %54 = getelementptr inbounds %class.CFX_GraphStateData, %class.CFX_GraphStateData* %10, i64 0, i32 2
  store float 0.000000e+00, float* %54, align 4
  %55 = getelementptr inbounds %class.CFX_GraphStateData, %class.CFX_GraphStateData* %10, i64 0, i32 4
  store float 1.000000e+00, float* %55, align 4
  %56 = bitcast i16* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %56) #7
  store i16 1, i16* %11, align 2
  %57 = call zeroext i1 @_ZN16CFX_RenderDevice8DrawPathEPK12CFX_PathDataPK10CFX_MatrixPK18CFX_GraphStateDatajjRK21CFX_FillRenderOptions(%class.CFX_RenderDevice* %0, %class.CFX_PathData* nonnull %4, %class.CFX_Matrix* %1, %class.CFX_GraphStateData* nonnull %10, i32 0, i32 -16777216, %struct.CFX_FillRenderOptions* nonnull dereferenceable(2) %12) #7
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %56) #7
  call void @_ZN18CFX_GraphStateDataD1Ev(%class.CFX_GraphStateData* nonnull %10) #7
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %52) #7
  call void @_ZN12CFX_PathDataD1Ev(%class.CFX_PathData* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN12CFX_PathDataC1Ev(%class.CFX_PathData*) unnamed_addr #2

declare void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData*, %class.CFX_PTemplate* dereferenceable(8), i8 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN18CFX_GraphStateDataC1Ev(%class.CFX_GraphStateData*) unnamed_addr #2

declare zeroext i1 @_ZN16CFX_RenderDevice8DrawPathEPK12CFX_PathDataPK10CFX_MatrixPK18CFX_GraphStateDatajjRK21CFX_FillRenderOptions(%class.CFX_RenderDevice*, %class.CFX_PathData*, %class.CFX_Matrix*, %class.CFX_GraphStateData*, i32, i32, %struct.CFX_FillRenderOptions* dereferenceable(2)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN18CFX_GraphStateDataD1Ev(%class.CFX_GraphStateData*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN12CFX_PathDataD1Ev(%class.CFX_PathData*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE6assignIPKfEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(%"class.std::__1::vector.8"*, float*, float*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint float* %2 to i64
  %5 = ptrtoint float* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast float** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to float*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %19 = bitcast float** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds float, float* %1, i64 %22
  %25 = select i1 %23, float* %24, float* %2
  %26 = ptrtoint float* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast float* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #7
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 2
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast float* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #7
  %42 = inttoptr i64 %35 to float*
  %43 = getelementptr inbounds float, float* %42, i64 %39
  %44 = ptrtoint float* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds float, float* %16, i64 %28
  store float* %48, float** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %53 = bitcast float** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #8
  %55 = bitcast %"class.std::__1::vector.8"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #7
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #9
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 2
  %63 = icmp ult i64 %62, 2305843009213693951
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 1
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #9
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 4611686018427387903, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 2
  %74 = tail call i8* @_Znwm(i64 %73) #8
  %75 = bitcast i8* %74 to float*
  %76 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %77 = bitcast float** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector.8"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds float, float* %75, i64 %72
  store float* %79, float** %8, align 8
  %80 = bitcast float** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 2
  %85 = bitcast float* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #7
  %86 = getelementptr inbounds float, float* %75, i64 %84
  %87 = ptrtoint float* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
