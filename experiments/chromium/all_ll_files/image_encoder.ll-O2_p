; ModuleID = '../../third_party/blink/renderer/platform/image-encoders/image_encoder.cc'
source_filename = "../../third_party/blink/renderer/platform/image-encoders/image_encoder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%"struct.SkJpegEncoder::Options" = type { i32, i32, i32 }
%"class.blink::VectorWStream" = type { %class.SkWStream, %"class.WTF::Vector"* }
%class.SkWStream = type { i32 (...)** }
%"struct.SkPngEncoder::Options" = type { i32, i32, %class.sk_sp.6 }
%class.sk_sp.6 = type { %class.SkDataTable* }
%class.SkDataTable = type { %class.SkRefCnt.base, i32, i64, %union.anon, void (i8*)*, i8* }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%union.anon = type { %"struct.SkDataTable::Dir"* }
%"struct.SkDataTable::Dir" = type { i8*, i64 }
%"struct.SkWebpEncoder::Options" = type { i32, float }
%"class.blink::ImageEncoder" = type { %"class.blink::VectorWStream", %"class.std::__1::unique_ptr.7" }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %class.SkEncoder* }
%class.SkEncoder = type { i32 (...)**, %class.SkPixmap*, i32, %class.SkAutoTMalloc }
%class.SkAutoTMalloc = type { %"class.std::__1::unique_ptr.10" }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i8* }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.20 }
%union.anon.20 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink13VectorWStreamD0Ev = comdat any

$_ZN5blink13VectorWStream5writeEPKvm = comdat any

$_ZNK5blink13VectorWStream12bytesWrittenEv = comdat any

$_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZTVN5blink13VectorWStreamE = comdat any

@_ZTVN5blink13VectorWStreamE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkWStream*)* @_ZN9SkWStreamD2Ev to i8*), i8* bitcast (void (%"class.blink::VectorWStream"*)* @_ZN5blink13VectorWStreamD0Ev to i8*), i8* bitcast (i1 (%"class.blink::VectorWStream"*, i8*, i64)* @_ZN5blink13VectorWStream5writeEPKvm to i8*), i8* bitcast (void (%class.SkWStream*)* @_ZN9SkWStream5flushEv to i8*), i8* bitcast (i64 (%"class.blink::VectorWStream"*)* @_ZNK5blink13VectorWStream12bytesWrittenEv to i8*)] }, comdat, align 8
@.str = private unnamed_addr constant [18 x i8] c"new_size >= size_\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@switch.table._ZN5blink12ImageEncoder12MaxDimensionENS_21ImageEncodingMimeTypeE = private unnamed_addr constant [3 x i32] [i32 65535, i32 65500, i32 16383], align 4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12ImageEncoder6EncodeEPN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEERK8SkPixmapRKN13SkJpegEncoder7OptionsE(%"class.WTF::Vector"*, %class.SkPixmap* dereferenceable(40), %"struct.SkJpegEncoder::Options"* dereferenceable(12)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::VectorWStream", align 8
  %5 = bitcast %"class.blink::VectorWStream"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.blink::VectorWStream", %"class.blink::VectorWStream"* %4, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.blink::VectorWStream", %"class.blink::VectorWStream"* %4, i64 0, i32 1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5blink13VectorWStreamE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  store %"class.WTF::Vector"* %0, %"class.WTF::Vector"** %7, align 8
  %8 = getelementptr inbounds %"class.blink::VectorWStream", %"class.blink::VectorWStream"* %4, i64 0, i32 0
  %9 = call zeroext i1 @_ZN13SkJpegEncoder6EncodeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream* nonnull %8, %class.SkPixmap* dereferenceable(40) %1, %"struct.SkJpegEncoder::Options"* dereferenceable(12) %2) #8
  call void @_ZN9SkWStreamD2Ev(%class.SkWStream* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8
  ret i1 %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN13SkJpegEncoder6EncodeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream*, %class.SkPixmap* dereferenceable(40), %"struct.SkJpegEncoder::Options"* dereferenceable(12)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN9SkWStreamD2Ev(%class.SkWStream*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12ImageEncoder6EncodeEPN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEERK8SkPixmapRKN12SkPngEncoder7OptionsE(%"class.WTF::Vector"*, %class.SkPixmap* dereferenceable(40), %"struct.SkPngEncoder::Options"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::VectorWStream", align 8
  %5 = bitcast %"class.blink::VectorWStream"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.blink::VectorWStream", %"class.blink::VectorWStream"* %4, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.blink::VectorWStream", %"class.blink::VectorWStream"* %4, i64 0, i32 1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5blink13VectorWStreamE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  store %"class.WTF::Vector"* %0, %"class.WTF::Vector"** %7, align 8
  %8 = getelementptr inbounds %"class.blink::VectorWStream", %"class.blink::VectorWStream"* %4, i64 0, i32 0
  %9 = call zeroext i1 @_ZN12SkPngEncoder6EncodeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream* nonnull %8, %class.SkPixmap* dereferenceable(40) %1, %"struct.SkPngEncoder::Options"* dereferenceable(16) %2) #8
  call void @_ZN9SkWStreamD2Ev(%class.SkWStream* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8
  ret i1 %9
}

declare zeroext i1 @_ZN12SkPngEncoder6EncodeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream*, %class.SkPixmap* dereferenceable(40), %"struct.SkPngEncoder::Options"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink12ImageEncoder6EncodeEPN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEERK8SkPixmapRKN13SkWebpEncoder7OptionsE(%"class.WTF::Vector"*, %class.SkPixmap* dereferenceable(40), %"struct.SkWebpEncoder::Options"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::VectorWStream", align 8
  %5 = bitcast %"class.blink::VectorWStream"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.blink::VectorWStream", %"class.blink::VectorWStream"* %4, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.blink::VectorWStream", %"class.blink::VectorWStream"* %4, i64 0, i32 1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5blink13VectorWStreamE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  store %"class.WTF::Vector"* %0, %"class.WTF::Vector"** %7, align 8
  %8 = getelementptr inbounds %"class.blink::VectorWStream", %"class.blink::VectorWStream"* %4, i64 0, i32 0
  %9 = call zeroext i1 @_ZN13SkWebpEncoder6EncodeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream* nonnull %8, %class.SkPixmap* dereferenceable(40) %1, %"struct.SkWebpEncoder::Options"* dereferenceable(8) %2) #8
  call void @_ZN9SkWStreamD2Ev(%class.SkWStream* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8
  ret i1 %9
}

declare zeroext i1 @_ZN13SkWebpEncoder6EncodeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream*, %class.SkPixmap* dereferenceable(40), %"struct.SkWebpEncoder::Options"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ImageEncoder"* @_ZN5blink12ImageEncoder6CreateEPN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEERK8SkPixmapRKN13SkJpegEncoder7OptionsE(%"class.WTF::Vector"*, %class.SkPixmap* dereferenceable(40), %"struct.SkJpegEncoder::Options"* dereferenceable(12)) local_unnamed_addr #0 align 2 {
  %4 = tail call noalias i8* @malloc(i64 24) #8
  %5 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5blink13VectorWStreamE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = bitcast i8* %6 to %"class.WTF::Vector"**
  store %"class.WTF::Vector"* %0, %"class.WTF::Vector"** %7, align 8
  %8 = getelementptr inbounds i8, i8* %4, i64 16
  %9 = bitcast i8* %8 to i64*
  store i64 0, i64* %9, align 8
  %10 = ptrtoint i8* %4 to i64
  %11 = bitcast i8* %4 to %class.SkWStream*
  %12 = tail call %class.SkEncoder* @_ZN13SkJpegEncoder4MakeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream* %11, %class.SkPixmap* dereferenceable(40) %1, %"struct.SkJpegEncoder::Options"* dereferenceable(12) %2) #8
  %13 = ptrtoint %class.SkEncoder* %12 to i64
  %14 = bitcast i8* %8 to %class.SkEncoder**
  %15 = load %class.SkEncoder*, %class.SkEncoder** %14, align 8
  store i64 %13, i64* %9, align 8
  %16 = icmp eq %class.SkEncoder* %15, null
  br i1 %16, label %23, label %17

17:                                               ; preds = %3
  %18 = bitcast %class.SkEncoder* %15 to void (%class.SkEncoder*)***
  %19 = load void (%class.SkEncoder*)**, void (%class.SkEncoder*)*** %18, align 8
  %20 = getelementptr inbounds void (%class.SkEncoder*)*, void (%class.SkEncoder*)** %19, i64 1
  %21 = load void (%class.SkEncoder*)*, void (%class.SkEncoder*)** %20, align 8
  tail call void %21(%class.SkEncoder* nonnull %15) #8
  %22 = load %class.SkEncoder*, %class.SkEncoder** %14, align 8
  br label %23

23:                                               ; preds = %17, %3
  %24 = phi %class.SkEncoder* [ %22, %17 ], [ %12, %3 ]
  %25 = icmp eq %class.SkEncoder* %24, null
  br i1 %25, label %26, label %36

26:                                               ; preds = %23
  %27 = icmp eq i8* %4, null
  br i1 %27, label %36, label %28

28:                                               ; preds = %26
  store %class.SkEncoder* null, %class.SkEncoder** %14, align 8
  %29 = icmp eq %class.SkEncoder* %24, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %28
  %31 = bitcast %class.SkEncoder* %24 to void (%class.SkEncoder*)***
  %32 = load void (%class.SkEncoder*)**, void (%class.SkEncoder*)*** %31, align 8
  %33 = getelementptr inbounds void (%class.SkEncoder*)*, void (%class.SkEncoder*)** %32, i64 1
  %34 = load void (%class.SkEncoder*)*, void (%class.SkEncoder*)** %33, align 8
  tail call void %34(%class.SkEncoder* nonnull %24) #8
  br label %35

35:                                               ; preds = %30, %28
  tail call void @_ZN9SkWStreamD2Ev(%class.SkWStream* nonnull %11) #8
  tail call void @free(i8* nonnull %4) #8
  br label %36

36:                                               ; preds = %23, %26, %35
  %37 = phi i64 [ 0, %26 ], [ 0, %35 ], [ %10, %23 ]
  %38 = inttoptr i64 %37 to %"class.blink::ImageEncoder"*
  ret %"class.blink::ImageEncoder"* %38
}

declare %class.SkEncoder* @_ZN13SkJpegEncoder4MakeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream*, %class.SkPixmap* dereferenceable(40), %"struct.SkJpegEncoder::Options"* dereferenceable(12)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ImageEncoder"* @_ZN5blink12ImageEncoder6CreateEPN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEERK8SkPixmapRKN12SkPngEncoder7OptionsE(%"class.WTF::Vector"*, %class.SkPixmap* dereferenceable(40), %"struct.SkPngEncoder::Options"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %4 = tail call noalias i8* @malloc(i64 24) #8
  %5 = bitcast i8* %4 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5blink13VectorWStreamE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = bitcast i8* %6 to %"class.WTF::Vector"**
  store %"class.WTF::Vector"* %0, %"class.WTF::Vector"** %7, align 8
  %8 = getelementptr inbounds i8, i8* %4, i64 16
  %9 = bitcast i8* %8 to i64*
  store i64 0, i64* %9, align 8
  %10 = ptrtoint i8* %4 to i64
  %11 = bitcast i8* %4 to %class.SkWStream*
  %12 = tail call %class.SkEncoder* @_ZN12SkPngEncoder4MakeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream* %11, %class.SkPixmap* dereferenceable(40) %1, %"struct.SkPngEncoder::Options"* dereferenceable(16) %2) #8
  %13 = ptrtoint %class.SkEncoder* %12 to i64
  %14 = bitcast i8* %8 to %class.SkEncoder**
  %15 = load %class.SkEncoder*, %class.SkEncoder** %14, align 8
  store i64 %13, i64* %9, align 8
  %16 = icmp eq %class.SkEncoder* %15, null
  br i1 %16, label %23, label %17

17:                                               ; preds = %3
  %18 = bitcast %class.SkEncoder* %15 to void (%class.SkEncoder*)***
  %19 = load void (%class.SkEncoder*)**, void (%class.SkEncoder*)*** %18, align 8
  %20 = getelementptr inbounds void (%class.SkEncoder*)*, void (%class.SkEncoder*)** %19, i64 1
  %21 = load void (%class.SkEncoder*)*, void (%class.SkEncoder*)** %20, align 8
  tail call void %21(%class.SkEncoder* nonnull %15) #8
  %22 = load %class.SkEncoder*, %class.SkEncoder** %14, align 8
  br label %23

23:                                               ; preds = %17, %3
  %24 = phi %class.SkEncoder* [ %22, %17 ], [ %12, %3 ]
  %25 = icmp eq %class.SkEncoder* %24, null
  br i1 %25, label %26, label %36

26:                                               ; preds = %23
  %27 = icmp eq i8* %4, null
  br i1 %27, label %36, label %28

28:                                               ; preds = %26
  store %class.SkEncoder* null, %class.SkEncoder** %14, align 8
  %29 = icmp eq %class.SkEncoder* %24, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %28
  %31 = bitcast %class.SkEncoder* %24 to void (%class.SkEncoder*)***
  %32 = load void (%class.SkEncoder*)**, void (%class.SkEncoder*)*** %31, align 8
  %33 = getelementptr inbounds void (%class.SkEncoder*)*, void (%class.SkEncoder*)** %32, i64 1
  %34 = load void (%class.SkEncoder*)*, void (%class.SkEncoder*)** %33, align 8
  tail call void %34(%class.SkEncoder* nonnull %24) #8
  br label %35

35:                                               ; preds = %30, %28
  tail call void @_ZN9SkWStreamD2Ev(%class.SkWStream* nonnull %11) #8
  tail call void @free(i8* nonnull %4) #8
  br label %36

36:                                               ; preds = %23, %26, %35
  %37 = phi i64 [ 0, %26 ], [ 0, %35 ], [ %10, %23 ]
  %38 = inttoptr i64 %37 to %"class.blink::ImageEncoder"*
  ret %"class.blink::ImageEncoder"* %38
}

declare %class.SkEncoder* @_ZN12SkPngEncoder4MakeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream*, %class.SkPixmap* dereferenceable(40), %"struct.SkPngEncoder::Options"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN5blink12ImageEncoder12MaxDimensionENS_21ImageEncodingMimeTypeE(i32) local_unnamed_addr #4 align 2 {
  %2 = icmp ult i32 %0, 3
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN5blink12ImageEncoder12MaxDimensionENS_21ImageEncodingMimeTypeE, i64 0, i64 %4
  %6 = load i32, i32* %5, align 4
  ret i32 %6

7:                                                ; preds = %1
  ret i32 -1
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN5blink12ImageEncoder18ComputeJpegQualityEd(double) local_unnamed_addr #4 align 2 {
  %2 = fcmp oge double %0, 0.000000e+00
  %3 = fcmp ole double %0, 1.000000e+00
  %4 = and i1 %2, %3
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = fmul double %0, 1.000000e+02
  %7 = fadd double %6, 5.000000e-01
  %8 = fptosi double %7 to i32
  br label %9

9:                                                ; preds = %5, %1
  %10 = phi i32 [ %8, %5 ], [ 92, %1 ]
  ret i32 %10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN5blink12ImageEncoder18ComputeWebpOptionsEd(double) local_unnamed_addr #4 align 2 {
  %2 = fcmp oeq double %0, 1.000000e+00
  br i1 %2, label %13, label %3

3:                                                ; preds = %1
  %4 = fcmp oge double %0, 0.000000e+00
  %5 = fcmp ole double %0, 1.000000e+00
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %13

7:                                                ; preds = %3
  %8 = fmul double %0, 1.000000e+02
  %9 = fptrunc double %8 to float
  %10 = bitcast float %9 to i32
  %11 = zext i32 %10 to i64
  %12 = shl nuw i64 %11, 32
  br label %13

13:                                               ; preds = %1, %3, %7
  %14 = phi i64 [ %12, %7 ], [ 4800837202776948736, %3 ], [ 4798022453009842176, %1 ]
  %15 = phi i64 [ 0, %7 ], [ 0, %3 ], [ 1, %1 ]
  %16 = or i64 %15, %14
  ret i64 %16
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13VectorWStreamD0Ev(%"class.blink::VectorWStream"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::VectorWStream", %"class.blink::VectorWStream"* %0, i64 0, i32 0
  tail call void @_ZN9SkWStreamD2Ev(%class.SkWStream* %2) #8
  %3 = bitcast %"class.blink::VectorWStream"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink13VectorWStream5writeEPKvm(%"class.blink::VectorWStream"*, i8*, i64) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.blink::VectorWStream", %"class.blink::VectorWStream"* %0, i64 0, i32 1
  %5 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %4, align 8
  %6 = trunc i64 %2 to i32
  tail call void @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector"* %5, i8* %1, i32 %6)
  ret i1 true
}

declare void @_ZN9SkWStream5flushEv(%class.SkWStream*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK5blink13VectorWStream12bytesWrittenEv(%"class.blink::VectorWStream"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::VectorWStream", %"class.blink::VectorWStream"* %0, i64 0, i32 1
  %3 = load %"class.WTF::Vector"*, %"class.WTF::Vector"** %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %3, i64 0, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  ret i64 %6
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj0ENS_18PartitionAllocatorEE6AppendIhEEvPKT_j(%"class.WTF::Vector"*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %87

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ugt i8* %15, %1
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = zext i32 %8 to i64
  %19 = getelementptr inbounds i8, i8* %15, i64 %18
  %20 = icmp ugt i8* %19, %1
  br i1 %20, label %52, label %21

21:                                               ; preds = %17, %13
  %22 = lshr i32 %11, 2
  %23 = add nuw i32 %11, 1
  %24 = add i32 %23, %22
  %25 = icmp ugt i32 %24, 4
  %26 = select i1 %25, i32 %24, i32 4
  %27 = icmp ugt i32 %26, %9
  %28 = select i1 %27, i32 %26, i32 %9
  %29 = icmp ult i32 %11, %28
  br i1 %29, label %30, label %87, !prof !2

30:                                               ; preds = %21
  %31 = icmp eq i8* %15, null
  %32 = zext i32 %28 to i64
  %33 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %32) #8
  %34 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %33, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #8
  %35 = ptrtoint i8* %34 to i64
  br i1 %31, label %36, label %39

36:                                               ; preds = %30
  %37 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %35, i64* %37 monotonic, align 8
  %38 = trunc i64 %33 to i32
  store i32 %38, i32* %10, align 8
  br label %87

39:                                               ; preds = %30
  %40 = load i8*, i8** %14, align 8
  %41 = icmp ne i8* %34, null
  %42 = icmp ne i8* %40, null
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %48, !prof !2

44:                                               ; preds = %39
  %45 = load i32, i32* %7, align 4
  %46 = zext i32 %45 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %34, i8* nonnull align 1 %40, i64 %46, i1 false) #8
  %47 = load i8*, i8** %14, align 8
  br label %48

48:                                               ; preds = %44, %39
  %49 = phi i8* [ %40, %39 ], [ %47, %44 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %49) #8
  %50 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %35, i64* %50 monotonic, align 8
  %51 = trunc i64 %33 to i32
  store i32 %51, i32* %10, align 8
  br label %87

52:                                               ; preds = %17
  %53 = ptrtoint i8* %1 to i64
  %54 = ptrtoint i8* %15 to i64
  %55 = sub i64 %53, %54
  %56 = lshr i32 %11, 2
  %57 = add nuw i32 %11, 1
  %58 = add i32 %57, %56
  %59 = icmp ugt i32 %58, 4
  %60 = select i1 %59, i32 %58, i32 4
  %61 = icmp ugt i32 %60, %9
  %62 = select i1 %61, i32 %60, i32 %9
  %63 = icmp ult i32 %11, %62
  br i1 %63, label %64, label %84, !prof !2

64:                                               ; preds = %52
  %65 = icmp eq i8* %15, null
  %66 = zext i32 %62 to i64
  %67 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %66) #8
  %68 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %67, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #8
  %69 = ptrtoint i8* %68 to i64
  br i1 %65, label %81, label %70

70:                                               ; preds = %64
  %71 = load i8*, i8** %14, align 8
  %72 = icmp ne i8* %68, null
  %73 = icmp ne i8* %71, null
  %74 = and i1 %72, %73
  br i1 %74, label %75, label %79, !prof !2

75:                                               ; preds = %70
  %76 = load i32, i32* %7, align 4
  %77 = zext i32 %76 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %68, i8* nonnull align 1 %71, i64 %77, i1 false) #8
  %78 = load i8*, i8** %14, align 8
  br label %79

79:                                               ; preds = %75, %70
  %80 = phi i8* [ %71, %70 ], [ %78, %75 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %80) #8
  br label %81

81:                                               ; preds = %64, %79
  %82 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %69, i64* %82 monotonic, align 8
  %83 = trunc i64 %67 to i32
  store i32 %83, i32* %10, align 8
  br label %84

84:                                               ; preds = %81, %52
  %85 = phi i8* [ %15, %52 ], [ %68, %81 ]
  %86 = getelementptr inbounds i8, i8* %85, i64 %55
  br label %87

87:                                               ; preds = %84, %21, %36, %48, %3
  %88 = phi i8* [ %1, %3 ], [ %86, %84 ], [ %1, %21 ], [ %1, %36 ], [ %1, %48 ]
  %89 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #8
  %90 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %90, align 8
  %91 = load i32, i32* %7, align 4
  %92 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92)
  %93 = icmp ult i32 %9, %91
  br i1 %93, label %95, label %94

94:                                               ; preds = %87
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92)
  store i8* null, i8** %90, align 8
  br label %104

95:                                               ; preds = %87
  %96 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  %97 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %91) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* %96, i8* %97) #8
  %98 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %99 = load i8*, i8** %98, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92)
  store i8* %99, i8** %90, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %104, label %101

101:                                              ; preds = %95
  %102 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #8
  %103 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #8
  br label %104

104:                                              ; preds = %94, %95, %101
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #8
  %105 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  %107 = load i32, i32* %7, align 4
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %106, i64 %108
  %110 = icmp ne i8* %109, null
  %111 = icmp ne i8* %88, null
  %112 = and i1 %111, %110
  br i1 %112, label %113, label %115, !prof !2

113:                                              ; preds = %104
  %114 = zext i32 %2 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %109, i8* nonnull align 1 %88, i64 %114, i1 false) #8
  br label %115

115:                                              ; preds = %104, %113
  store i32 %9, i32* %7, align 4
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #8
  ret i64 %20
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
