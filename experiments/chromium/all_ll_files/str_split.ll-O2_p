; ModuleID = '../../third_party/abseil-cpp/absl/strings/str_split.cc'
source_filename = "../../third_party/abseil-cpp/absl/strings/str_split.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.absl::ByString" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::ByAnyChar" = type { %"class.std::__1::basic_string" }
%"class.absl::ByLength" = type { i64 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.absl::string_view" = type { i8*, i64 }
%"class.absl::ByChar" = type { i8 }

@.str = private unnamed_addr constant [55 x i8] c"../../third_party/abseil-cpp/absl/strings/str_split.cc\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"Check %s failed: %s\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"length > 0\00", align 1
@.str.3 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"absl::string_view::substr\00", align 1

@_ZN4absl8ByStringC1ENS_11string_viewE = hidden unnamed_addr alias void (%"class.absl::ByString"*, i8*, i64), void (%"class.absl::ByString"*, i8*, i64)* @_ZN4absl8ByStringC2ENS_11string_viewE
@_ZN4absl9ByAnyCharC1ENS_11string_viewE = hidden unnamed_addr alias void (%"class.absl::ByAnyChar"*, i8*, i64), void (%"class.absl::ByAnyChar"*, i8*, i64)* @_ZN4absl9ByAnyCharC2ENS_11string_viewE
@_ZN4absl8ByLengthC1El = hidden unnamed_addr alias void (%"class.absl::ByLength"*, i64), void (%"class.absl::ByLength"*, i64)* @_ZN4absl8ByLengthC2El

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl8ByStringC2ENS_11string_viewE(%"class.absl::ByString"*, i8*, i64) unnamed_addr #0 align 2 {
  %4 = icmp eq i8* %1, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = bitcast %"class.absl::ByString"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #7, !alias.scope !2
  br label %32

7:                                                ; preds = %3
  %8 = icmp ugt i64 %2, -17
  br i1 %8, label %9, label %11

9:                                                ; preds = %7
  %10 = bitcast %"class.absl::ByString"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %10) #8
  unreachable

11:                                               ; preds = %7
  %12 = icmp ult i64 %2, 23
  br i1 %12, label %21, label %13

13:                                               ; preds = %11
  %14 = add nuw i64 %2, 16
  %15 = and i64 %14, -16
  %16 = tail call i8* @_Znwm(i64 %15) #9
  %17 = getelementptr inbounds %"class.absl::ByString", %"class.absl::ByString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %16, i8** %17, align 8, !alias.scope !2
  %18 = or i64 %15, -9223372036854775808
  %19 = getelementptr inbounds %"class.absl::ByString", %"class.absl::ByString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %18, i64* %19, align 8, !alias.scope !2
  %20 = getelementptr inbounds %"class.absl::ByString", %"class.absl::ByString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %2, i64* %20, align 8, !alias.scope !2
  br label %27

21:                                               ; preds = %11
  %22 = trunc i64 %2 to i8
  %23 = bitcast %"class.absl::ByString"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  store i8 %22, i8* %24, align 1, !alias.scope !2
  %25 = bitcast %"class.absl::ByString"* %0 to i8*
  %26 = icmp eq i64 %2, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %21, %13
  %28 = phi i8* [ %16, %13 ], [ %25, %21 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* nonnull align 1 %1, i64 %2, i1 false) #7
  br label %29

29:                                               ; preds = %27, %21
  %30 = phi i8* [ %25, %21 ], [ %28, %27 ]
  %31 = getelementptr inbounds i8, i8* %30, i64 %2
  store i8 0, i8* %31, align 1
  br label %32

32:                                               ; preds = %5, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZNK4absl8ByString4FindENS_11string_viewEm(%"class.absl::ByString"*, i8*, i64, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.absl::string_view", align 8
  %6 = alloca %"class.absl::string_view", align 8
  %7 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %6, i64 0, i32 0
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %6, i64 0, i32 1
  store i64 %2, i64* %8, align 8
  %9 = bitcast %"class.absl::ByString"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.absl::ByString", %"class.absl::ByString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  br label %18

16:                                               ; preds = %4
  %17 = zext i8 %11 to i64
  br label %18

18:                                               ; preds = %13, %16
  %19 = phi i64 [ %15, %13 ], [ %17, %16 ]
  %20 = icmp eq i64 %19, 1
  br i1 %20, label %21, label %45

21:                                               ; preds = %18
  br i1 %12, label %22, label %25

22:                                               ; preds = %21
  %23 = getelementptr inbounds %"class.absl::ByString", %"class.absl::ByString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  br label %27

25:                                               ; preds = %21
  %26 = bitcast %"class.absl::ByString"* %0 to i8*
  br label %27

27:                                               ; preds = %22, %25
  %28 = phi i8* [ %24, %22 ], [ %26, %25 ]
  %29 = load i8, i8* %28, align 1
  %30 = call i64 @_ZNK4absl11string_view4findEcm(%"class.absl::string_view"* nonnull %6, i8 signext %29, i64 %3) #7
  %31 = icmp eq i64 %30, -1
  br i1 %31, label %32, label %36

32:                                               ; preds = %27
  %33 = load i8*, i8** %7, align 8
  %34 = load i64, i64* %8, align 8
  %35 = getelementptr inbounds i8, i8* %33, i64 %34
  br label %75

36:                                               ; preds = %27
  %37 = load i64, i64* %8, align 8
  %38 = icmp ult i64 %37, %30
  br i1 %38, label %39, label %40, !prof !5

39:                                               ; preds = %36
  call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0)) #8
  unreachable

40:                                               ; preds = %36
  %41 = icmp ne i64 %37, %30
  %42 = zext i1 %41 to i64
  %43 = load i8*, i8** %7, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 %30
  br label %75

45:                                               ; preds = %18
  br i1 %12, label %49, label %46

46:                                               ; preds = %45
  %47 = zext i8 %11 to i64
  %48 = ptrtoint %"class.absl::ByString"* %0 to i64
  br label %56

49:                                               ; preds = %45
  %50 = bitcast %"class.absl::ByString"* %0 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %"class.absl::ByString", %"class.absl::ByString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = icmp sgt i64 %53, -1
  br i1 %54, label %56, label %55, !prof !6

55:                                               ; preds = %49
  tail call void @llvm.trap() #7
  unreachable

56:                                               ; preds = %46, %49
  %57 = phi i64 [ %51, %49 ], [ %48, %46 ]
  %58 = phi i64 [ %53, %49 ], [ %47, %46 ]
  %59 = icmp ne i64 %58, 0
  %60 = icmp eq i64 %2, 0
  %61 = or i1 %60, %59
  br i1 %61, label %65, label %62

62:                                               ; preds = %56
  %63 = getelementptr inbounds i8, i8* %1, i64 %3
  %64 = getelementptr inbounds i8, i8* %63, i64 1
  br label %75

65:                                               ; preds = %56
  %66 = inttoptr i64 %57 to i8*
  %67 = bitcast %"class.absl::string_view"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %67) #7
  %68 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  store i8* %1, i8** %68, align 8
  %69 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  store i64 %2, i64* %69, align 8
  %70 = call i64 @_ZNK4absl11string_view4findES0_m(%"class.absl::string_view"* nonnull %5, i8* %66, i64 %58, i64 %3) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #7
  %71 = icmp eq i64 %70, -1
  %72 = select i1 %71, i64 %2, i64 %70
  %73 = getelementptr inbounds i8, i8* %1, i64 %72
  %74 = select i1 %71, i64 0, i64 %58
  br label %75

75:                                               ; preds = %62, %65, %32, %40
  %76 = phi i8* [ %35, %32 ], [ %44, %40 ], [ %64, %62 ], [ %73, %65 ]
  %77 = phi i64 [ 0, %32 ], [ %42, %40 ], [ 0, %62 ], [ %74, %65 ]
  %78 = insertvalue { i8*, i64 } undef, i8* %76, 0
  %79 = insertvalue { i8*, i64 } %78, i64 %77, 1
  ret { i8*, i64 } %79
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare i64 @_ZNK4absl11string_view4findEcm(%"class.absl::string_view"*, i8 signext, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZNK4absl6ByChar4FindENS_11string_viewEm(%"class.absl::ByChar"* nocapture readonly, i8*, i64, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.absl::string_view", align 8
  %6 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  store i8* %1, i8** %6, align 8
  %7 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  store i64 %2, i64* %7, align 8
  %8 = getelementptr inbounds %"class.absl::ByChar", %"class.absl::ByChar"* %0, i64 0, i32 0
  %9 = load i8, i8* %8, align 1
  %10 = call i64 @_ZNK4absl11string_view4findEcm(%"class.absl::string_view"* nonnull %5, i8 signext %9, i64 %3) #7
  %11 = icmp eq i64 %10, -1
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = load i8*, i8** %6, align 8
  %14 = load i64, i64* %7, align 8
  %15 = getelementptr inbounds i8, i8* %13, i64 %14
  br label %25

16:                                               ; preds = %4
  %17 = load i64, i64* %7, align 8
  %18 = icmp ult i64 %17, %10
  br i1 %18, label %19, label %20, !prof !5

19:                                               ; preds = %16
  call void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0)) #8
  unreachable

20:                                               ; preds = %16
  %21 = icmp ne i64 %17, %10
  %22 = zext i1 %21 to i64
  %23 = load i8*, i8** %6, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 %10
  br label %25

25:                                               ; preds = %20, %12
  %26 = phi i64 [ 0, %12 ], [ %22, %20 ]
  %27 = phi i8* [ %15, %12 ], [ %24, %20 ]
  %28 = insertvalue { i8*, i64 } undef, i8* %27, 0
  %29 = insertvalue { i8*, i64 } %28, i64 %26, 1
  ret { i8*, i64 } %29
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl9ByAnyCharC2ENS_11string_viewE(%"class.absl::ByAnyChar"*, i8*, i64) unnamed_addr #0 align 2 {
  %4 = icmp eq i8* %1, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = bitcast %"class.absl::ByAnyChar"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #7, !alias.scope !7
  br label %32

7:                                                ; preds = %3
  %8 = icmp ugt i64 %2, -17
  br i1 %8, label %9, label %11

9:                                                ; preds = %7
  %10 = bitcast %"class.absl::ByAnyChar"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %10) #8
  unreachable

11:                                               ; preds = %7
  %12 = icmp ult i64 %2, 23
  br i1 %12, label %21, label %13

13:                                               ; preds = %11
  %14 = add nuw i64 %2, 16
  %15 = and i64 %14, -16
  %16 = tail call i8* @_Znwm(i64 %15) #9
  %17 = getelementptr inbounds %"class.absl::ByAnyChar", %"class.absl::ByAnyChar"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %16, i8** %17, align 8, !alias.scope !7
  %18 = or i64 %15, -9223372036854775808
  %19 = getelementptr inbounds %"class.absl::ByAnyChar", %"class.absl::ByAnyChar"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %18, i64* %19, align 8, !alias.scope !7
  %20 = getelementptr inbounds %"class.absl::ByAnyChar", %"class.absl::ByAnyChar"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %2, i64* %20, align 8, !alias.scope !7
  br label %27

21:                                               ; preds = %11
  %22 = trunc i64 %2 to i8
  %23 = bitcast %"class.absl::ByAnyChar"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  store i8 %22, i8* %24, align 1, !alias.scope !7
  %25 = bitcast %"class.absl::ByAnyChar"* %0 to i8*
  %26 = icmp eq i64 %2, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %21, %13
  %28 = phi i8* [ %16, %13 ], [ %25, %21 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* nonnull align 1 %1, i64 %2, i1 false) #7
  br label %29

29:                                               ; preds = %27, %21
  %30 = phi i8* [ %25, %21 ], [ %28, %27 ]
  %31 = getelementptr inbounds i8, i8* %30, i64 %2
  store i8 0, i8* %31, align 1
  br label %32

32:                                               ; preds = %5, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZNK4absl9ByAnyChar4FindENS_11string_viewEm(%"class.absl::ByAnyChar"*, i8*, i64, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.absl::string_view", align 8
  %6 = bitcast %"class.absl::ByAnyChar"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %4
  %11 = zext i8 %8 to i64
  %12 = ptrtoint %"class.absl::ByAnyChar"* %0 to i64
  br label %20

13:                                               ; preds = %4
  %14 = bitcast %"class.absl::ByAnyChar"* %0 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.absl::ByAnyChar", %"class.absl::ByAnyChar"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp sgt i64 %17, -1
  br i1 %18, label %20, label %19, !prof !6

19:                                               ; preds = %13
  tail call void @llvm.trap() #7
  unreachable

20:                                               ; preds = %10, %13
  %21 = phi i64 [ %15, %13 ], [ %12, %10 ]
  %22 = phi i64 [ %17, %13 ], [ %11, %10 ]
  %23 = icmp ne i64 %22, 0
  %24 = icmp eq i64 %2, 0
  %25 = or i1 %24, %23
  br i1 %25, label %29, label %26

26:                                               ; preds = %20
  %27 = getelementptr inbounds i8, i8* %1, i64 %3
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  br label %40

29:                                               ; preds = %20
  %30 = inttoptr i64 %21 to i8*
  %31 = bitcast %"class.absl::string_view"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #7
  %32 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  store i8* %1, i8** %32, align 8
  %33 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  store i64 %2, i64* %33, align 8
  %34 = call i64 @_ZNK4absl11string_view13find_first_ofES0_m(%"class.absl::string_view"* nonnull %5, i8* %30, i64 %22, i64 %3) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #7
  %35 = icmp eq i64 %34, -1
  %36 = select i1 %35, i64 %2, i64 %34
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  %38 = xor i1 %35, true
  %39 = zext i1 %38 to i64
  br label %40

40:                                               ; preds = %26, %29
  %41 = phi i8* [ %28, %26 ], [ %37, %29 ]
  %42 = phi i64 [ 0, %26 ], [ %39, %29 ]
  %43 = insertvalue { i8*, i64 } undef, i8* %41, 0
  %44 = insertvalue { i8*, i64 } %43, i64 %42, 1
  ret { i8*, i64 } %44
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4absl8ByLengthC2El(%"class.absl::ByLength"* nocapture, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.absl::ByLength", %"class.absl::ByLength"* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  %4 = icmp slt i64 %1, 1
  br i1 %4, label %5, label %6, !prof !5

5:                                                ; preds = %2
  tail call void (i32, i8*, i32, i8*, ...) @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32 3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 42), i32 123, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0)) #7
  br label %6

6:                                                ; preds = %2, %5
  ret void
}

declare void @_ZN4absl20raw_logging_internal6RawLogENS_11LogSeverityEPKciS3_z(i32, i8*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZNK4absl8ByLength4FindENS_11string_viewEm(%"class.absl::ByLength"* nocapture readonly, i8*, i64, i64) local_unnamed_addr #0 align 2 {
  %5 = icmp ult i64 %2, %3
  %6 = select i1 %5, i64 %2, i64 %3
  %7 = sub i64 %2, %6
  %8 = icmp sgt i64 %7, -1
  br i1 %8, label %10, label %9, !prof !6

9:                                                ; preds = %4
  tail call void @llvm.trap() #7
  unreachable

10:                                               ; preds = %4
  %11 = getelementptr inbounds i8, i8* %1, i64 %6
  %12 = getelementptr inbounds %"class.absl::ByLength", %"class.absl::ByLength"* %0, i64 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = icmp ugt i64 %7, %13
  %15 = getelementptr inbounds i8, i8* %11, i64 %13
  %16 = getelementptr inbounds i8, i8* %1, i64 %2
  %17 = select i1 %14, i8* %15, i8* %16
  %18 = insertvalue { i8*, i64 } undef, i8* %17, 0
  %19 = insertvalue { i8*, i64 } %18, i64 0, 1
  ret { i8*, i64 } %19
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

; Function Attrs: noreturn
declare void @_ZN4absl13base_internal18ThrowStdOutOfRangeEPKc(i8*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind
declare i64 @_ZNK4absl11string_view4findES0_m(%"class.absl::string_view"*, i8*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare i64 @_ZNK4absl11string_view13find_first_ofES0_m(%"class.absl::string_view"*, i8*, i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv"}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{!"branch_weights", i32 2000, i32 1}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv: argument 0"}
!9 = distinct !{!9, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv"}
