; ModuleID = '../../base/task/thread_pool/job_task_source.cc'
source_filename = "../../base/task/thread_pool/job_task_source.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::trace_event::TraceCategory" = type { i8, i32, i8* }
%"class.base::internal::JobTaskSource::State" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::internal::JobTaskSource::JoinFlag" = type { %"struct.std::__1::atomic" }
%"class.base::internal::JobTaskSource" = type { %"class.base::internal::TaskSource.base", %"class.base::internal::CheckedLock", %"class.base::internal::JobTaskSource::State", %"class.base::internal::JobTaskSource::JoinFlag", %"class.std::__1::unique_ptr", %"struct.std::__1::atomic", %"class.base::Location", %"class.base::RepeatingCallback", %"class.base::RepeatingCallback.15", %"class.base::RepeatingCallback.16", %"class.base::TimeTicks", %"class.base::internal::PooledTaskRunnerDelegate"* }
%"class.base::internal::TaskSource.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", %"class.base::TaskTraits", %"struct.std::__1::atomic.6", [4 x i8], %"class.base::internal::CheckedLock", %"class.base::HeapHandle", %"class.base::TaskRunner"*, i32 }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i32 }
%"class.base::TaskTraits" = type { %"struct.base::TaskTraitsExtensionStorage", i8, i8, i8, i8, i8, i8 }
%"struct.base::TaskTraitsExtensionStorage" = type { i8, %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [8 x i8] }
%"struct.std::__1::atomic.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i8 }
%"class.base::HeapHandle" = type { i64 }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.10", [4 x i8] }>
%"class.base::RefCountedThreadSafe.10" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::internal::CheckedLock" = type { %"class.base::Lock" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::ConditionVariable"* }
%"class.base::ConditionVariable" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t*, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.11, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.11 = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.14", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.14" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::RepeatingCallback.15" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::RepeatingCallback.16" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::internal::PooledTaskRunnerDelegate" = type { i32 (...)** }
%"class.base::internal::TaskSource" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", %"class.base::TaskTraits", %"struct.std::__1::atomic.6", [4 x i8], %"class.base::internal::CheckedLock", %"class.base::HeapHandle", %"class.base::TaskRunner"*, i32, [4 x i8] }>
%"class.base::internal::SequenceLocalStorageMap" = type { %"class.base::flat_map" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.17" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.std::__1::pair"* }
%"class.base::trace_event::TraceArguments" = type { i8, [2 x i8], [2 x i8*], [2 x %"union.base::trace_event::TraceValue"] }
%"union.base::trace_event::TraceValue" = type { i64 }
%"class.base::JobDelegate" = type <{ %"class.base::internal::JobTaskSource"*, %"class.base::internal::PooledTaskRunnerDelegate"*, i8, [7 x i8] }>
%"class.base::internal::TaskSource::Transaction" = type { %"class.base::internal::TaskSource"* }
%"struct.base::internal::Task" = type { %"struct.base::PendingTask.base", [3 x i8] }
%"struct.base::PendingTask.base" = type <{ %"class.base::OnceCallback", %"class.base::Location", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.std::__1::array.21", i32, [4 x i8], i8*, i32, i8 }>
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"struct.std::__1::array.21" = type { [4 x i8*] }
%"class.base::internal::TaskSourceSortKey" = type { i8, i8, %"class.base::TimeTicks" }

$_ZN4base8internal7InvokerINS0_9BindStateIZNS_9DoNothing4OnceIJEEENS_12OnceCallbackIFvDpT_EEEvEUlvE_JEEEFvvEE7RunOnceEPNS0_13BindStateBaseE = comdat any

$_ZN4base8internal9BindStateIZNS_9DoNothing4OnceIJEEENS_12OnceCallbackIFvDpT_EEEvEUlvE_JEE7DestroyEPKNS0_13BindStateBaseE = comdat any

@_ZTVN4base8internal13JobTaskSourceE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast ({ i32, %"class.base::internal::SequenceLocalStorageMap"* } (%"class.base::internal::JobTaskSource"*)* @_ZN4base8internal13JobTaskSource23GetExecutionEnvironmentEv to i8*), i8* bitcast (i64 (%"class.base::internal::JobTaskSource"*)* @_ZNK4base8internal13JobTaskSource23GetRemainingConcurrencyEv to i8*), i8* bitcast ({ i64, i64 } (%"class.base::internal::JobTaskSource"*, i1)* @_ZNK4base8internal13JobTaskSource10GetSortKeyEb to i8*), i8* bitcast (void (%"class.base::internal::JobTaskSource"*)* @_ZN4base8internal13JobTaskSourceD2Ev to i8*), i8* bitcast (void (%"class.base::internal::JobTaskSource"*)* @_ZN4base8internal13JobTaskSourceD0Ev to i8*), i8* bitcast (i32 (%"class.base::internal::JobTaskSource"*)* @_ZN4base8internal13JobTaskSource11WillRunTaskEv to i8*), i8* bitcast (void (%"struct.base::internal::Task"*, %"class.base::internal::JobTaskSource"*, %"class.base::internal::TaskSource::Transaction"*)* @_ZN4base8internal13JobTaskSource8TakeTaskEPNS0_10TaskSource11TransactionE to i8*), i8* bitcast (i1 (%"class.base::internal::JobTaskSource"*, %"class.base::internal::TaskSource::Transaction"*)* @_ZN4base8internal13JobTaskSource14DidProcessTaskEPNS0_10TaskSource11TransactionE to i8*), i8* bitcast (void (%"struct.base::internal::Task"*, %"class.base::internal::JobTaskSource"*, %"class.base::internal::TaskSource::Transaction"*)* @_ZN4base8internal13JobTaskSource5ClearEPNS0_10TaskSource11TransactionE to i8*)] }, align 8
@_ZN4base11trace_event16CategoryRegistry11categories_E = external global [300 x %"struct.base::trace_event::TraceCategory"], align 16
@.str = private unnamed_addr constant [36 x i8] c"Job.WaitForParticipationOpportunity\00", align 1

@_ZN4base8internal13JobTaskSource5StateC1Ev = hidden unnamed_addr alias void (%"class.base::internal::JobTaskSource::State"*), void (%"class.base::internal::JobTaskSource::State"*)* @_ZN4base8internal13JobTaskSource5StateC2Ev
@_ZN4base8internal13JobTaskSource5StateD1Ev = hidden unnamed_addr alias void (%"class.base::internal::JobTaskSource::State"*), void (%"class.base::internal::JobTaskSource::State"*)* @_ZN4base8internal13JobTaskSource5StateD2Ev
@_ZN4base8internal13JobTaskSource8JoinFlagC1Ev = hidden unnamed_addr alias void (%"class.base::internal::JobTaskSource::JoinFlag"*), void (%"class.base::internal::JobTaskSource::JoinFlag"*)* @_ZN4base8internal13JobTaskSource8JoinFlagC2Ev
@_ZN4base8internal13JobTaskSource8JoinFlagD1Ev = hidden unnamed_addr alias void (%"class.base::internal::JobTaskSource::JoinFlag"*), void (%"class.base::internal::JobTaskSource::JoinFlag"*)* @_ZN4base8internal13JobTaskSource8JoinFlagD2Ev
@_ZN4base8internal13JobTaskSourceC1ERKNS_8LocationERKNS_10TaskTraitsENS_17RepeatingCallbackIFvPNS_11JobDelegateEEEENS8_IFmmEEEPNS0_24PooledTaskRunnerDelegateE = hidden unnamed_addr alias void (%"class.base::internal::JobTaskSource"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::RepeatingCallback.15"*, %"class.base::RepeatingCallback"*, %"class.base::internal::PooledTaskRunnerDelegate"*), void (%"class.base::internal::JobTaskSource"*, %"class.base::Location"*, %"class.base::TaskTraits"*, %"class.base::RepeatingCallback.15"*, %"class.base::RepeatingCallback"*, %"class.base::internal::PooledTaskRunnerDelegate"*)* @_ZN4base8internal13JobTaskSourceC2ERKNS_8LocationERKNS_10TaskTraitsENS_17RepeatingCallbackIFvPNS_11JobDelegateEEEENS8_IFmmEEEPNS0_24PooledTaskRunnerDelegateE
@_ZN4base8internal13JobTaskSourceD1Ev = hidden unnamed_addr alias void (%"class.base::internal::JobTaskSource"*), void (%"class.base::internal::JobTaskSource"*)* @_ZN4base8internal13JobTaskSourceD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base8internal13JobTaskSource5StateC2Ev(%"class.base::internal::JobTaskSource::State"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource::State", %"class.base::internal::JobTaskSource::State"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %2, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4base8internal13JobTaskSource5StateD2Ev(%"class.base::internal::JobTaskSource::State"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN4base8internal13JobTaskSource5State6CancelEv(%"class.base::internal::JobTaskSource::State"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource::State", %"class.base::internal::JobTaskSource::State"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = atomicrmw or i32* %2, i32 1 monotonic
  ret i32 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN4base8internal13JobTaskSource5State20DecrementWorkerCountEv(%"class.base::internal::JobTaskSource::State"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource::State", %"class.base::internal::JobTaskSource::State"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = atomicrmw sub i32* %2, i32 2 monotonic
  ret i32 %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN4base8internal13JobTaskSource5State20IncrementWorkerCountEv(%"class.base::internal::JobTaskSource::State"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource::State", %"class.base::internal::JobTaskSource::State"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = atomicrmw add i32* %2, i32 2 monotonic
  ret i32 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZNK4base8internal13JobTaskSource5State4LoadEv(%"class.base::internal::JobTaskSource::State"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource::State", %"class.base::internal::JobTaskSource::State"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i32, i32* %2 monotonic, align 4
  ret i32 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN4base8internal13JobTaskSource8JoinFlagC2Ev(%"class.base::internal::JobTaskSource::JoinFlag"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource::JoinFlag", %"class.base::internal::JobTaskSource::JoinFlag"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %2, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN4base8internal13JobTaskSource8JoinFlagD2Ev(%"class.base::internal::JobTaskSource::JoinFlag"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base8internal13JobTaskSource8JoinFlag5ResetEv(%"class.base::internal::JobTaskSource::JoinFlag"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource::JoinFlag", %"class.base::internal::JobTaskSource::JoinFlag"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 0, i32* %2 monotonic, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base8internal13JobTaskSource8JoinFlag10SetWaitingEv(%"class.base::internal::JobTaskSource::JoinFlag"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource::JoinFlag", %"class.base::internal::JobTaskSource::JoinFlag"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 3, i32* %2 monotonic, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base8internal13JobTaskSource8JoinFlag17ShouldWorkerYieldEv(%"class.base::internal::JobTaskSource::JoinFlag"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource::JoinFlag", %"class.base::internal::JobTaskSource::JoinFlag"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = atomicrmw and i32* %2, i32 1 monotonic
  %4 = icmp eq i32 %3, 3
  ret i1 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base8internal13JobTaskSource8JoinFlag18ShouldWorkerSignalEv(%"class.base::internal::JobTaskSource::JoinFlag"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource::JoinFlag", %"class.base::internal::JobTaskSource::JoinFlag"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = atomicrmw xchg i32* %2, i32 0 monotonic
  %4 = icmp ne i32 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal13JobTaskSourceC2ERKNS_8LocationERKNS_10TaskTraitsENS_17RepeatingCallbackIFvPNS_11JobDelegateEEEENS8_IFmmEEEPNS0_24PooledTaskRunnerDelegateE(%"class.base::internal::JobTaskSource"*, %"class.base::Location"* dereferenceable(32), %"class.base::TaskTraits"* dereferenceable(15), %"class.base::RepeatingCallback.15"* nocapture, %"class.base::RepeatingCallback"* nocapture, %"class.base::internal::PooledTaskRunnerDelegate"*) unnamed_addr #4 align 2 {
  %7 = bitcast %"class.base::internal::JobTaskSource"* %0 to %"class.base::internal::TaskSource"*
  tail call void @_ZN4base8internal10TaskSourceC2ERKNS_10TaskTraitsEPNS_10TaskRunnerENS0_23TaskSourceExecutionModeE(%"class.base::internal::TaskSource"* %7, %"class.base::TaskTraits"* dereferenceable(15) %2, %"class.base::TaskRunner"* null, i32 3) #10
  %8 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN4base8internal13JobTaskSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  %9 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %9) #10
  %10 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 6
  %12 = bitcast i32* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 20, i1 false)
  tail call void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"* %11, %"class.base::Location"* dereferenceable(32) %1) #10
  %13 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 7
  %14 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.base::RepeatingCallback"* %4 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.base::RepeatingCallback"* %13 to i64*
  store i64 %16, i64* %17, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %14, align 8
  %18 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 8
  %19 = getelementptr inbounds %"class.base::RepeatingCallback.15", %"class.base::RepeatingCallback.15"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = bitcast %"class.base::RepeatingCallback.15"* %3 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.base::RepeatingCallback.15"* %18 to i64*
  store i64 %21, i64* %22, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %19, align 8
  %23 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 9
  %24 = ptrtoint %"class.base::internal::JobTaskSource"* %0 to i64
  %25 = tail call i8* @_Znwm(i64 48) #11, !noalias !2
  %26 = bitcast i8* %25 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %26, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @"_ZN4base8internal7InvokerINS0_9BindStateIZNS0_13JobTaskSourceC1ERKNS_8LocationERKNS_10TaskTraitsENS_17RepeatingCallbackIFvPNS_11JobDelegateEEEENSA_IFmmEEEPNS0_24PooledTaskRunnerDelegateEE3$_0JNS0_17UnretainedWrapperIS3_EEEEEFvvEE3RunEPNS0_13BindStateBaseE" to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @"_ZN4base8internal9BindStateIZNS0_13JobTaskSourceC1ERKNS_8LocationERKNS_10TaskTraitsENS_17RepeatingCallbackIFvPNS_11JobDelegateEEEENS9_IFmmEEEPNS0_24PooledTaskRunnerDelegateEE3$_0JNS0_17UnretainedWrapperIS2_EEEE7DestroyEPKNS0_13BindStateBaseE") #10, !noalias !2
  %27 = getelementptr inbounds i8, i8* %25, i64 40
  %28 = bitcast i8* %27 to i64*
  store i64 %24, i64* %28, align 8, !noalias !2
  %29 = bitcast %"class.base::RepeatingCallback.16"* %23 to i8**
  store i8* %25, i8** %29, align 8, !alias.scope !2
  %30 = tail call i64 @_ZN4base9TimeTicks3NowEv() #10
  %31 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 10, i32 0, i32 0
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 11
  store %"class.base::internal::PooledTaskRunnerDelegate"* %5, %"class.base::internal::PooledTaskRunnerDelegate"** %32, align 8
  ret void
}

declare void @_ZN4base8internal10TaskSourceC2ERKNS_10TaskTraitsEPNS_10TaskRunnerENS0_23TaskSourceExecutionModeE(%"class.base::internal::TaskSource"*, %"class.base::TaskTraits"* dereferenceable(15), %"class.base::TaskRunner"*, i32) unnamed_addr #5

declare void @_ZN4base8LocationC1ERKS0_(%"class.base::Location"*, %"class.base::Location"* dereferenceable(32)) unnamed_addr #5

declare i64 @_ZN4base9TimeTicks3NowEv() local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal13JobTaskSourceD2Ev(%"class.base::internal::JobTaskSource"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN4base8internal13JobTaskSourceE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 9, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #10
  %4 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 8, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %4) #10
  %5 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 7, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %5) #10
  %6 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %7 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %6, align 8
  store %"class.base::ConditionVariable"* null, %"class.base::ConditionVariable"** %6, align 8
  %8 = icmp eq %"class.base::ConditionVariable"* %7, null
  br i1 %8, label %11, label %9

9:                                                ; preds = %1
  tail call void @_ZN4base17ConditionVariableD1Ev(%"class.base::ConditionVariable"* nonnull %7) #10
  %10 = bitcast %"class.base::ConditionVariable"* %7 to i8*
  tail call void @_ZdlPv(i8* %10) #11
  br label %11

11:                                               ; preds = %1, %9
  %12 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %12) #10
  %13 = bitcast %"class.base::internal::JobTaskSource"* %0 to %"class.base::internal::TaskSource"*
  tail call void @_ZN4base8internal10TaskSourceD2Ev(%"class.base::internal::TaskSource"* %13) #10
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN4base8internal10TaskSourceD2Ev(%"class.base::internal::TaskSource"*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal13JobTaskSourceD0Ev(%"class.base::internal::JobTaskSource"*) unnamed_addr #4 align 2 {
  tail call void @_ZN4base8internal13JobTaskSourceD2Ev(%"class.base::internal::JobTaskSource"* %0) #10
  %2 = bitcast %"class.base::internal::JobTaskSource"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden { i32, %"class.base::internal::SequenceLocalStorageMap"* } @_ZN4base8internal13JobTaskSource23GetExecutionEnvironmentEv(%"class.base::internal::JobTaskSource"* nocapture readnone) unnamed_addr #4 align 2 {
  %2 = tail call i32 @_ZN4base13SequenceToken6CreateEv() #10
  %3 = insertvalue { i32, %"class.base::internal::SequenceLocalStorageMap"* } undef, i32 %2, 0
  %4 = insertvalue { i32, %"class.base::internal::SequenceLocalStorageMap"* } %3, %"class.base::internal::SequenceLocalStorageMap"* null, 1
  ret { i32, %"class.base::internal::SequenceLocalStorageMap"* } %4
}

declare i32 @_ZN4base13SequenceToken6CreateEv() local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base8internal13JobTaskSource8WillJoinEv(%"class.base::internal::JobTaskSource"*) local_unnamed_addr #4 align 2 {
  %2 = alloca %"class.base::TimeTicks", align 8
  %3 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 8, i32 0), align 16
  %4 = and i8 %3, 25
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %12, label %6, !prof !7

6:                                                ; preds = %1
  %7 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #10
  %8 = bitcast %"class.base::TimeTicks"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #10
  %9 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 0, i32 0, i32 0
  %10 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #10
  store i64 %10, i64* %9, align 8
  %11 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 8, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), i8* null, i64 0, i64 0, i32 %7, %"class.base::TimeTicks"* nonnull dereferenceable(8) %2, %"class.base::trace_event::TraceArguments"* null, i32 0) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #10
  br label %12

12:                                               ; preds = %1, %6
  %13 = phi i64 [ -6148914691236517206, %1 ], [ %11, %6 ]
  %14 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %1 ], [ getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), %6 ]
  %15 = phi i8* [ null, %1 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 8, i32 0), %6 ]
  %16 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 1
  %17 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %16, i64 0, i32 0, i32 0, i32 0
  %18 = call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %17) #10
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %22, label %20, !prof !7

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %16, i64 0, i32 0, i32 0
  call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %21) #10
  br label %22

22:                                               ; preds = %12, %20
  %23 = call i8* @_Znwm(i64 64) #11
  %24 = bitcast i8* %23 to %"class.base::ConditionVariable"*
  %25 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %16, i64 0, i32 0
  call void @_ZN4base17ConditionVariableC1EPNS_4LockE(%"class.base::ConditionVariable"* nonnull %24, %"class.base::Lock"* %25) #10
  %26 = ptrtoint i8* %23 to i64
  %27 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 4
  %28 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %27, i64 0, i32 0, i32 0, i32 0
  %29 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %28, align 8
  %30 = bitcast %"class.std::__1::unique_ptr"* %27 to i64*
  store i64 %26, i64* %30, align 8
  %31 = icmp eq %"class.base::ConditionVariable"* %29, null
  %32 = bitcast i8* %23 to %"class.base::ConditionVariable"*
  br i1 %31, label %36, label %33

33:                                               ; preds = %22
  call void @_ZN4base17ConditionVariableD1Ev(%"class.base::ConditionVariable"* nonnull %29) #10
  %34 = bitcast %"class.base::ConditionVariable"* %29 to i8*
  call void @_ZdlPv(i8* %34) #11
  %35 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %28, align 8
  br label %36

36:                                               ; preds = %33, %22
  %37 = phi %"class.base::ConditionVariable"* [ %35, %33 ], [ %32, %22 ]
  %38 = getelementptr inbounds %"class.base::ConditionVariable", %"class.base::ConditionVariable"* %37, i64 0, i32 2
  store i8 0, i8* %38, align 8
  %39 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = atomicrmw add i32* %39, i32 2 monotonic
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %55

43:                                               ; preds = %36
  %44 = lshr i32 %40, 1
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %47 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %46, align 8
  %48 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %47, i64 0, i32 1
  %49 = bitcast void ()** %48 to i64 (%"class.base::internal::BindStateBase"*, i64)**
  %50 = load i64 (%"class.base::internal::BindStateBase"*, i64)*, i64 (%"class.base::internal::BindStateBase"*, i64)** %49, align 8
  %51 = call i64 %50(%"class.base::internal::BindStateBase"* %47, i64 %45) #10
  %52 = icmp ult i64 %51, 32
  %53 = select i1 %52, i64 %51, i64 32
  %54 = icmp ugt i64 %53, %45
  br i1 %54, label %108, label %55

55:                                               ; preds = %36, %43
  %56 = load atomic i32, i32* %39 monotonic, align 4
  %57 = lshr i32 %56, 1
  %58 = zext i32 %57 to i64
  %59 = add nsw i64 %58, -1
  %60 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %61 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %60, align 8
  %62 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %61, i64 0, i32 1
  %63 = bitcast void ()** %62 to i64 (%"class.base::internal::BindStateBase"*, i64)**
  %64 = load i64 (%"class.base::internal::BindStateBase"*, i64)*, i64 (%"class.base::internal::BindStateBase"*, i64)** %63, align 8
  %65 = call i64 %64(%"class.base::internal::BindStateBase"* %61, i64 %59) #10
  %66 = icmp ult i64 %65, 32
  %67 = select i1 %66, i64 %65, i64 32
  %68 = icmp ult i64 %67, %58
  %69 = and i32 %56, 1
  %70 = icmp ne i32 %69, 0
  %71 = or i1 %70, %68
  br i1 %71, label %72, label %76

72:                                               ; preds = %55
  %73 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %75 = icmp eq i32 %57, 1
  br i1 %75, label %98, label %81

76:                                               ; preds = %81, %55
  %77 = phi i32 [ %56, %55 ], [ %83, %81 ]
  %78 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 0, i32* %78 monotonic, align 4
  br label %101

79:                                               ; preds = %81
  %80 = icmp eq i32 %84, 1
  br i1 %80, label %98, label %81

81:                                               ; preds = %72, %79
  store atomic i32 3, i32* %73 monotonic, align 4
  %82 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %74, align 8
  notail call void @_ZN4base17ConditionVariable4WaitEv(%"class.base::ConditionVariable"* %82) #10
  %83 = load atomic i32, i32* %39 monotonic, align 4
  %84 = lshr i32 %83, 1
  %85 = zext i32 %84 to i64
  %86 = add nsw i64 %85, -1
  %87 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %60, align 8
  %88 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %87, i64 0, i32 1
  %89 = bitcast void ()** %88 to i64 (%"class.base::internal::BindStateBase"*, i64)**
  %90 = load i64 (%"class.base::internal::BindStateBase"*, i64)*, i64 (%"class.base::internal::BindStateBase"*, i64)** %89, align 8
  %91 = call i64 %90(%"class.base::internal::BindStateBase"* %87, i64 %86) #10
  %92 = icmp ult i64 %91, 32
  %93 = select i1 %92, i64 %91, i64 32
  %94 = icmp ult i64 %93, %85
  %95 = and i32 %83, 1
  %96 = icmp ne i32 %95, 0
  %97 = or i1 %96, %94
  br i1 %97, label %79, label %76

98:                                               ; preds = %79, %72
  %99 = phi i1 [ %68, %72 ], [ %94, %79 ]
  %100 = phi i32 [ %56, %72 ], [ %83, %79 ]
  store atomic i32 0, i32* %73 monotonic, align 4
  br i1 %99, label %105, label %101

101:                                              ; preds = %98, %76
  %102 = phi i32 [ %77, %76 ], [ %100, %98 ]
  %103 = and i32 %102, 1
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %108, label %105

105:                                              ; preds = %101, %98
  %106 = atomicrmw sub i32* %39, i32 2 monotonic
  %107 = atomicrmw or i32* %39, i32 1 monotonic
  br label %108

108:                                              ; preds = %105, %101, %43
  %109 = phi i1 [ true, %43 ], [ false, %105 ], [ true, %101 ]
  %110 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %17) #10
  %111 = icmp eq i8* %15, null
  br i1 %111, label %116, label %112

112:                                              ; preds = %108
  %113 = load i8, i8* %15, align 1
  %114 = icmp eq i8 %113, 0
  br i1 %114, label %116, label %115

115:                                              ; preds = %112
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %15, i8* %14, i64 %13) #10
  br label %116

116:                                              ; preds = %108, %112, %115
  ret i1 %109
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4base8internal13JobTaskSource17GetMaxConcurrencyEm(%"class.base::internal::JobTaskSource"* nocapture readonly, i64) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %4, i64 0, i32 1
  %6 = bitcast void ()** %5 to i64 (%"class.base::internal::BindStateBase"*, i64)**
  %7 = load i64 (%"class.base::internal::BindStateBase"*, i64)*, i64 (%"class.base::internal::BindStateBase"*, i64)** %6, align 8
  %8 = tail call i64 %7(%"class.base::internal::BindStateBase"* %4, i64 %1) #10
  %9 = icmp ult i64 %8, 32
  %10 = select i1 %9, i64 %8, i64 32
  ret i64 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base8internal13JobTaskSource31WaitForParticipationOpportunityEv(%"class.base::internal::JobTaskSource"* nocapture) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i32, i32* %2 monotonic, align 4
  %4 = lshr i32 %3, 1
  %5 = zext i32 %4 to i64
  %6 = add nsw i64 %5, -1
  %7 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %7, align 8
  %9 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %8, i64 0, i32 1
  %10 = bitcast void ()** %9 to i64 (%"class.base::internal::BindStateBase"*, i64)**
  %11 = load i64 (%"class.base::internal::BindStateBase"*, i64)*, i64 (%"class.base::internal::BindStateBase"*, i64)** %10, align 8
  %12 = tail call i64 %11(%"class.base::internal::BindStateBase"* %8, i64 %6) #10
  %13 = icmp ult i64 %12, 32
  %14 = select i1 %13, i64 %12, i64 32
  %15 = icmp ult i64 %14, %5
  %16 = and i32 %3, 1
  %17 = icmp ne i32 %16, 0
  %18 = or i1 %17, %15
  br i1 %18, label %19, label %23

19:                                               ; preds = %1
  %20 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %22 = icmp eq i32 %4, 1
  br i1 %22, label %45, label %28

23:                                               ; preds = %28, %1
  %24 = phi i32 [ %3, %1 ], [ %30, %28 ]
  %25 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 0, i32* %25 monotonic, align 4
  br label %48

26:                                               ; preds = %28
  %27 = icmp eq i32 %31, 1
  br i1 %27, label %45, label %28

28:                                               ; preds = %19, %26
  store atomic i32 3, i32* %20 monotonic, align 4
  %29 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %21, align 8
  notail call void @_ZN4base17ConditionVariable4WaitEv(%"class.base::ConditionVariable"* %29) #10
  %30 = load atomic i32, i32* %2 monotonic, align 4
  %31 = lshr i32 %30, 1
  %32 = zext i32 %31 to i64
  %33 = add nsw i64 %32, -1
  %34 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %7, align 8
  %35 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %34, i64 0, i32 1
  %36 = bitcast void ()** %35 to i64 (%"class.base::internal::BindStateBase"*, i64)**
  %37 = load i64 (%"class.base::internal::BindStateBase"*, i64)*, i64 (%"class.base::internal::BindStateBase"*, i64)** %36, align 8
  %38 = tail call i64 %37(%"class.base::internal::BindStateBase"* %34, i64 %33) #10
  %39 = icmp ult i64 %38, 32
  %40 = select i1 %39, i64 %38, i64 32
  %41 = icmp ult i64 %40, %32
  %42 = and i32 %30, 1
  %43 = icmp ne i32 %42, 0
  %44 = or i1 %43, %41
  br i1 %44, label %26, label %23

45:                                               ; preds = %26, %19
  %46 = phi i1 [ %15, %19 ], [ %41, %26 ]
  %47 = phi i32 [ %3, %19 ], [ %30, %26 ]
  store atomic i32 0, i32* %20 monotonic, align 4
  br i1 %46, label %52, label %48

48:                                               ; preds = %23, %45
  %49 = phi i32 [ %24, %23 ], [ %47, %45 ]
  %50 = and i32 %49, 1
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %55, label %52

52:                                               ; preds = %48, %45
  %53 = atomicrmw sub i32* %2, i32 2 monotonic
  %54 = atomicrmw or i32* %2, i32 1 monotonic
  br label %55

55:                                               ; preds = %48, %52
  %56 = phi i1 [ false, %52 ], [ true, %48 ]
  ret i1 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base8internal13JobTaskSource11RunJoinTaskEv(%"class.base::internal::JobTaskSource"*) local_unnamed_addr #4 align 2 {
  %2 = alloca %"class.base::TimeTicks", align 8
  %3 = alloca %"class.base::JobDelegate", align 8
  %4 = bitcast %"class.base::JobDelegate"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #10
  %5 = bitcast %"class.base::JobDelegate"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 24, i1 false)
  call void @_ZN4base11JobDelegateC1EPNS_8internal13JobTaskSourceEPNS1_24PooledTaskRunnerDelegateE(%"class.base::JobDelegate"* nonnull %3, %"class.base::internal::JobTaskSource"* %0, %"class.base::internal::PooledTaskRunnerDelegate"* null) #10
  %6 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0
  %7 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %6, align 8
  %8 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %7, i64 0, i32 1
  %9 = bitcast void ()** %8 to void (%"class.base::internal::BindStateBase"*, %"class.base::JobDelegate"*)**
  %10 = load void (%"class.base::internal::BindStateBase"*, %"class.base::JobDelegate"*)*, void (%"class.base::internal::BindStateBase"*, %"class.base::JobDelegate"*)** %9, align 8
  call void %10(%"class.base::internal::BindStateBase"* %7, %"class.base::JobDelegate"* nonnull %3) #10
  %11 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %28

15:                                               ; preds = %1
  %16 = lshr i32 %12, 1
  %17 = zext i32 %16 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %20 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %19, align 8
  %21 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %20, i64 0, i32 1
  %22 = bitcast void ()** %21 to i64 (%"class.base::internal::BindStateBase"*, i64)**
  %23 = load i64 (%"class.base::internal::BindStateBase"*, i64)*, i64 (%"class.base::internal::BindStateBase"*, i64)** %22, align 8
  %24 = call i64 %23(%"class.base::internal::BindStateBase"* %20, i64 %18) #10
  %25 = icmp ult i64 %24, 32
  %26 = select i1 %25, i64 %24, i64 32
  %27 = icmp ult i64 %26, %17
  br i1 %27, label %28, label %109

28:                                               ; preds = %1, %15
  %29 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 8, i32 0), align 16
  %30 = and i8 %29, 25
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %38, label %32, !prof !7

32:                                               ; preds = %28
  %33 = call i32 @_ZN4base14PlatformThread9CurrentIdEv() #10
  %34 = bitcast %"class.base::TimeTicks"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #10
  %35 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %2, i64 0, i32 0, i32 0
  %36 = call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #10
  store i64 %36, i64* %35, align 8
  %37 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 8, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), i8* null, i64 0, i64 0, i32 %33, %"class.base::TimeTicks"* nonnull dereferenceable(8) %2, %"class.base::trace_event::TraceArguments"* null, i32 0) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #10
  br label %38

38:                                               ; preds = %28, %32
  %39 = phi i64 [ -6148914691236517206, %28 ], [ %37, %32 ]
  %40 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %28 ], [ getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), %32 ]
  %41 = phi i8* [ null, %28 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 8, i32 0), %32 ]
  %42 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 1
  %43 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %42, i64 0, i32 0, i32 0, i32 0
  %44 = call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %43) #10
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %48, label %46, !prof !7

46:                                               ; preds = %38
  %47 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %42, i64 0, i32 0, i32 0
  call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %47) #10
  br label %48

48:                                               ; preds = %38, %46
  %49 = load atomic i32, i32* %11 monotonic, align 4
  %50 = lshr i32 %49, 1
  %51 = zext i32 %50 to i64
  %52 = add nsw i64 %51, -1
  %53 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %54 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %53, align 8
  %55 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %54, i64 0, i32 1
  %56 = bitcast void ()** %55 to i64 (%"class.base::internal::BindStateBase"*, i64)**
  %57 = load i64 (%"class.base::internal::BindStateBase"*, i64)*, i64 (%"class.base::internal::BindStateBase"*, i64)** %56, align 8
  %58 = call i64 %57(%"class.base::internal::BindStateBase"* %54, i64 %52) #10
  %59 = icmp ult i64 %58, 32
  %60 = select i1 %59, i64 %58, i64 32
  %61 = icmp ult i64 %60, %51
  %62 = and i32 %49, 1
  %63 = icmp ne i32 %62, 0
  %64 = or i1 %63, %61
  br i1 %64, label %65, label %69

65:                                               ; preds = %48
  %66 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %68 = icmp eq i32 %50, 1
  br i1 %68, label %91, label %74

69:                                               ; preds = %74, %48
  %70 = phi i32 [ %49, %48 ], [ %76, %74 ]
  %71 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store atomic i32 0, i32* %71 monotonic, align 4
  br label %94

72:                                               ; preds = %74
  %73 = icmp eq i32 %77, 1
  br i1 %73, label %91, label %74

74:                                               ; preds = %65, %72
  store atomic i32 3, i32* %66 monotonic, align 4
  %75 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %67, align 8
  notail call void @_ZN4base17ConditionVariable4WaitEv(%"class.base::ConditionVariable"* %75) #10
  %76 = load atomic i32, i32* %11 monotonic, align 4
  %77 = lshr i32 %76, 1
  %78 = zext i32 %77 to i64
  %79 = add nsw i64 %78, -1
  %80 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %53, align 8
  %81 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %80, i64 0, i32 1
  %82 = bitcast void ()** %81 to i64 (%"class.base::internal::BindStateBase"*, i64)**
  %83 = load i64 (%"class.base::internal::BindStateBase"*, i64)*, i64 (%"class.base::internal::BindStateBase"*, i64)** %82, align 8
  %84 = call i64 %83(%"class.base::internal::BindStateBase"* %80, i64 %79) #10
  %85 = icmp ult i64 %84, 32
  %86 = select i1 %85, i64 %84, i64 32
  %87 = icmp ult i64 %86, %78
  %88 = and i32 %76, 1
  %89 = icmp ne i32 %88, 0
  %90 = or i1 %89, %87
  br i1 %90, label %72, label %69

91:                                               ; preds = %72, %65
  %92 = phi i1 [ %61, %65 ], [ %87, %72 ]
  %93 = phi i32 [ %49, %65 ], [ %76, %72 ]
  store atomic i32 0, i32* %66 monotonic, align 4
  br i1 %92, label %98, label %94

94:                                               ; preds = %91, %69
  %95 = phi i32 [ %70, %69 ], [ %93, %91 ]
  %96 = and i32 %95, 1
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %101, label %98

98:                                               ; preds = %94, %91
  %99 = atomicrmw sub i32* %11, i32 2 monotonic
  %100 = atomicrmw or i32* %11, i32 1 monotonic
  br label %101

101:                                              ; preds = %94, %98
  %102 = phi i1 [ false, %98 ], [ true, %94 ]
  %103 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %43) #10
  %104 = icmp eq i8* %41, null
  br i1 %104, label %109, label %105

105:                                              ; preds = %101
  %106 = load i8, i8* %41, align 1
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %109, label %108

108:                                              ; preds = %105
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %41, i8* %40, i64 %39) #10
  br label %109

109:                                              ; preds = %108, %105, %101, %15
  %110 = phi i1 [ true, %15 ], [ %102, %101 ], [ %102, %105 ], [ %102, %108 ]
  call void @_ZN4base11JobDelegateD1Ev(%"class.base::JobDelegate"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #10
  ret i1 %110
}

declare void @_ZN4base11JobDelegateC1EPNS_8internal13JobTaskSourceEPNS1_24PooledTaskRunnerDelegateE(%"class.base::JobDelegate"*, %"class.base::internal::JobTaskSource"*, %"class.base::internal::PooledTaskRunnerDelegate"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4base11JobDelegateD1Ev(%"class.base::JobDelegate"*) unnamed_addr #6

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base8internal13JobTaskSource6CancelEPNS0_10TaskSource11TransactionE(%"class.base::internal::JobTaskSource"* nocapture, %"class.base::internal::TaskSource::Transaction"* nocapture readnone) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = atomicrmw or i32* %3, i32 1 monotonic
  ret void
}

declare void @_ZN4base17ConditionVariable4WaitEv(%"class.base::ConditionVariable"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4base8internal13JobTaskSource11WillRunTaskEv(%"class.base::internal::JobTaskSource"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #10
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !7

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %36

13:                                               ; preds = %8
  %14 = lshr i32 %10, 1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %17 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %16, align 8
  %18 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %17, i64 0, i32 1
  %19 = bitcast void ()** %18 to i64 (%"class.base::internal::BindStateBase"*, i64)**
  %20 = load i64 (%"class.base::internal::BindStateBase"*, i64)*, i64 (%"class.base::internal::BindStateBase"*, i64)** %19, align 8
  %21 = tail call i64 %20(%"class.base::internal::BindStateBase"* %17, i64 %15) #10
  %22 = icmp ult i64 %21, 32
  %23 = select i1 %22, i64 %21, i64 32
  %24 = icmp ugt i64 %23, %15
  br i1 %24, label %25, label %29

25:                                               ; preds = %13
  %26 = atomicrmw add i32* %9, i32 2 monotonic
  %27 = lshr i32 %26, 1
  %28 = zext i32 %27 to i64
  br label %29

29:                                               ; preds = %25, %13
  %30 = phi i64 [ %28, %25 ], [ %15, %13 ]
  %31 = icmp ugt i64 %23, %30
  br i1 %31, label %32, label %36

32:                                               ; preds = %29
  %33 = add nuw nsw i64 %30, 1
  %34 = icmp eq i64 %23, %33
  %35 = select i1 %34, i32 2, i32 1
  br label %36

36:                                               ; preds = %8, %32, %29
  %37 = phi i32 [ 0, %8 ], [ %35, %32 ], [ 0, %29 ]
  %38 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #10
  ret i32 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4base8internal13JobTaskSource23GetRemainingConcurrencyEv(%"class.base::internal::JobTaskSource"* nocapture readonly) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i32, i32* %2 monotonic, align 4
  %4 = and i32 %3, 1
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %18

6:                                                ; preds = %1
  %7 = lshr i32 %3, 1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %9, align 8
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %10, i64 0, i32 1
  %12 = bitcast void ()** %11 to i64 (%"class.base::internal::BindStateBase"*, i64)**
  %13 = load i64 (%"class.base::internal::BindStateBase"*, i64)*, i64 (%"class.base::internal::BindStateBase"*, i64)** %12, align 8
  %14 = tail call i64 %13(%"class.base::internal::BindStateBase"* %10, i64 %8) #10
  %15 = icmp ult i64 %14, 32
  %16 = select i1 %15, i64 %14, i64 32
  %17 = tail call i64 @llvm.usub.sat.i64(i64 %16, i64 %8)
  ret i64 %17

18:                                               ; preds = %1
  ret i64 0
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK4base8internal13JobTaskSource8IsActiveEv(%"class.base::internal::JobTaskSource"*) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #10
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !7

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #10
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = lshr i32 %10, 1
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %14 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %13, align 8
  %15 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %14, i64 0, i32 1
  %16 = bitcast void ()** %15 to i64 (%"class.base::internal::BindStateBase"*, i64)**
  %17 = load i64 (%"class.base::internal::BindStateBase"*, i64)*, i64 (%"class.base::internal::BindStateBase"*, i64)** %16, align 8
  %18 = tail call i64 %17(%"class.base::internal::BindStateBase"* %14, i64 %12) #10
  %19 = icmp ne i64 %18, 0
  %20 = icmp ne i32 %11, 0
  %21 = or i1 %20, %19
  %22 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #10
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4base8internal13JobTaskSource14GetWorkerCountEv(%"class.base::internal::JobTaskSource"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i32, i32* %2 monotonic, align 4
  %4 = lshr i32 %3, 1
  %5 = zext i32 %4 to i64
  ret i64 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal13JobTaskSource25NotifyConcurrencyIncreaseEv(%"class.base::internal::JobTaskSource"*) local_unnamed_addr #4 align 2 {
  %2 = bitcast %"class.base::internal::JobTaskSource"* %0 to i64 (%"class.base::internal::JobTaskSource"*)***
  %3 = load i64 (%"class.base::internal::JobTaskSource"*)**, i64 (%"class.base::internal::JobTaskSource"*)*** %2, align 8
  %4 = getelementptr inbounds i64 (%"class.base::internal::JobTaskSource"*)*, i64 (%"class.base::internal::JobTaskSource"*)** %3, i64 1
  %5 = load i64 (%"class.base::internal::JobTaskSource"*)*, i64 (%"class.base::internal::JobTaskSource"*)** %4, align 8
  %6 = tail call i64 %5(%"class.base::internal::JobTaskSource"* %0) #10
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %36, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %9, i64 0, i32 0, i32 0, i32 0
  %11 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %10) #10
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %15, label %13, !prof !7

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %9, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %14) #10
  br label %15

15:                                               ; preds = %8, %13
  %16 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw xchg i32* %16, i32 0 monotonic
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %21 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %20, align 8
  tail call void @_ZN4base17ConditionVariable6SignalEv(%"class.base::ConditionVariable"* %21) #10
  br label %22

22:                                               ; preds = %15, %19
  %23 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %10) #10
  %24 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 11
  %25 = load %"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::PooledTaskRunnerDelegate"** %24, align 8
  %26 = icmp eq %"class.base::internal::JobTaskSource"* %0, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = atomicrmw add i32* %28, i32 1 monotonic
  br label %30

30:                                               ; preds = %22, %27
  %31 = bitcast %"class.base::internal::PooledTaskRunnerDelegate"* %25 to i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)***
  %32 = load i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)**, i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)*** %31, align 8
  %33 = getelementptr inbounds i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)*, i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)** %32, i64 4
  %34 = load i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)*, i1 (%"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::JobTaskSource"*)** %33, align 8
  %35 = tail call zeroext i1 %34(%"class.base::internal::PooledTaskRunnerDelegate"* %25, %"class.base::internal::JobTaskSource"* %0) #10
  br label %36

36:                                               ; preds = %1, %30
  ret void
}

declare void @_ZN4base17ConditionVariable6SignalEv(%"class.base::ConditionVariable"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4base8internal13JobTaskSource17GetMaxConcurrencyEv(%"class.base::internal::JobTaskSource"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i32, i32* %2 monotonic, align 4
  %4 = lshr i32 %3, 1
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %7 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %6, align 8
  %8 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %7, i64 0, i32 1
  %9 = bitcast void ()** %8 to i64 (%"class.base::internal::BindStateBase"*, i64)**
  %10 = load i64 (%"class.base::internal::BindStateBase"*, i64)*, i64 (%"class.base::internal::BindStateBase"*, i64)** %9, align 8
  %11 = tail call i64 %10(%"class.base::internal::BindStateBase"* %7, i64 %5) #10
  %12 = icmp ult i64 %11, 32
  %13 = select i1 %12, i64 %11, i64 32
  ret i64 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN4base8internal13JobTaskSource13AcquireTaskIdEv(%"class.base::internal::JobTaskSource"* nocapture) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i32, i32* %2 monotonic, align 4
  %4 = xor i32 %3, -1
  %5 = tail call i32 @llvm.cttz.i32(i32 %4, i1 false) #10, !range !8
  %6 = shl i32 1, %5
  %7 = or i32 %6, %3
  %8 = cmpxchg weak i32* %2, i32 %3, i32 %7 acquire monotonic
  %9 = extractvalue { i32, i1 } %8, 1
  br i1 %9, label %19, label %10

10:                                               ; preds = %1, %10
  %11 = phi { i32, i1 } [ %17, %10 ], [ %8, %1 ]
  %12 = extractvalue { i32, i1 } %11, 0
  %13 = xor i32 %12, -1
  %14 = tail call i32 @llvm.cttz.i32(i32 %13, i1 false) #10, !range !8
  %15 = shl i32 1, %14
  %16 = or i32 %15, %12
  %17 = cmpxchg weak i32* %2, i32 %12, i32 %16 acquire monotonic
  %18 = extractvalue { i32, i1 } %17, 1
  br i1 %18, label %19, label %10

19:                                               ; preds = %10, %1
  %20 = phi i32 [ %5, %1 ], [ %14, %10 ]
  %21 = trunc i32 %20 to i8
  ret i8 %21
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN4base8internal13JobTaskSource13ReleaseTaskIdEh(%"class.base::internal::JobTaskSource"* nocapture, i8 zeroext) local_unnamed_addr #2 align 2 {
  %3 = zext i8 %1 to i32
  %4 = shl i32 1, %3
  %5 = xor i32 %4, -1
  %6 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw and i32* %6, i32 %5 release
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base8internal13JobTaskSource11ShouldYieldEv(%"class.base::internal::JobTaskSource"* nocapture) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = atomicrmw and i32* %2, i32 1 monotonic
  %4 = icmp eq i32 %3, 3
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 1
  %9 = icmp ne i32 %8, 0
  br label %10

10:                                               ; preds = %5, %1
  %11 = phi i1 [ true, %1 ], [ %9, %5 ]
  ret i1 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal13JobTaskSource8TakeTaskEPNS0_10TaskSource11TransactionE(%"struct.base::internal::Task"* noalias sret, %"class.base::internal::JobTaskSource"*, %"class.base::internal::TaskSource::Transaction"* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = alloca %"class.base::RepeatingCallback.16", align 8
  %6 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %1, i64 0, i32 6
  %7 = getelementptr inbounds %"class.base::RepeatingCallback.16", %"class.base::RepeatingCallback.16"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %1, i64 0, i32 9, i32 0
  call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* nonnull %7, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %8) #10
  %9 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseC2EONS0_20CallbackBaseCopyableE(%"class.base::internal::CallbackBase"* nonnull %9, %"class.base::internal::CallbackBaseCopyable"* nonnull dereferenceable(8) %7) #10
  call void @_ZN4base8internal4TaskC1ERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeTicksENS_9TimeDeltaE(%"struct.base::internal::Task"* %0, %"class.base::Location"* dereferenceable(32) %6, %"class.base::OnceCallback"* nonnull %4, i64 0, i64 0) #10
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %9) #10
  %10 = getelementptr inbounds %"class.base::RepeatingCallback.16", %"class.base::RepeatingCallback.16"* %5, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %10) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZN4base8internal4TaskC1ERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeTicksENS_9TimeDeltaE(%"struct.base::internal::Task"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"*, i64, i64) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base8internal13JobTaskSource14DidProcessTaskEPNS0_10TaskSource11TransactionE(%"class.base::internal::JobTaskSource"*, %"class.base::internal::TaskSource::Transaction"* nocapture readnone) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 1
  %4 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %4) #10
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7, !prof !7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %3, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %8) #10
  br label %9

9:                                                ; preds = %2, %7
  %10 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw sub i32* %10, i32 2 monotonic
  %12 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = atomicrmw xchg i32* %12, i32 0 monotonic
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %17 = load %"class.base::ConditionVariable"*, %"class.base::ConditionVariable"** %16, align 8
  tail call void @_ZN4base17ConditionVariable6SignalEv(%"class.base::ConditionVariable"* %17) #10
  br label %18

18:                                               ; preds = %9, %15
  %19 = and i32 %11, 1
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %34

21:                                               ; preds = %18
  %22 = lshr i32 %11, 1
  %23 = zext i32 %22 to i64
  %24 = add nsw i64 %23, -1
  %25 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %26 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %25, align 8
  %27 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %26, i64 0, i32 1
  %28 = bitcast void ()** %27 to i64 (%"class.base::internal::BindStateBase"*, i64)**
  %29 = load i64 (%"class.base::internal::BindStateBase"*, i64)*, i64 (%"class.base::internal::BindStateBase"*, i64)** %28, align 8
  %30 = tail call i64 %29(%"class.base::internal::BindStateBase"* %26, i64 %24) #10
  %31 = icmp ult i64 %30, 32
  %32 = select i1 %31, i64 %30, i64 32
  %33 = icmp uge i64 %32, %23
  br label %34

34:                                               ; preds = %18, %21
  %35 = phi i1 [ %33, %21 ], [ false, %18 ]
  %36 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %4) #10
  ret i1 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK4base8internal13JobTaskSource10GetSortKeyEb(%"class.base::internal::JobTaskSource"* nocapture readonly, i1 zeroext) unnamed_addr #4 align 2 {
  %3 = alloca %"class.base::internal::TaskSourceSortKey", align 8
  %4 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i8, i8* %4 monotonic, align 1
  %6 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 10, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  br i1 %1, label %13, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = lshr i32 %10, 1
  %12 = trunc i32 %11 to i8
  br label %13

13:                                               ; preds = %2, %8
  %14 = phi i8 [ %12, %8 ], [ 0, %2 ]
  call void @_ZN4base8internal17TaskSourceSortKeyC1ENS_12TaskPriorityENS_9TimeTicksEh(%"class.base::internal::TaskSourceSortKey"* nonnull %3, i8 zeroext %5, i64 %7, i8 zeroext %14) #10
  %15 = bitcast %"class.base::internal::TaskSourceSortKey"* %3 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = insertvalue { i64, i64 } undef, i64 %16, 0
  %18 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %3, i64 0, i32 2, i32 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = insertvalue { i64, i64 } %17, i64 %19, 1
  ret { i64, i64 } %20
}

declare void @_ZN4base8internal17TaskSourceSortKeyC1ENS_12TaskPriorityENS_9TimeTicksEh(%"class.base::internal::TaskSourceSortKey"*, i8 zeroext, i64, i8 zeroext) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal13JobTaskSource5ClearEPNS0_10TaskSource11TransactionE(%"struct.base::internal::Task"* noalias sret, %"class.base::internal::JobTaskSource"*, %"class.base::internal::TaskSource::Transaction"* nocapture readnone) unnamed_addr #4 align 2 {
  %4 = alloca %"class.base::OnceCallback", align 8
  %5 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = atomicrmw or i32* %5, i32 1 monotonic
  %7 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %1, i64 0, i32 6
  %8 = tail call i8* @_Znwm(i64 40) #11, !noalias !9
  %9 = bitcast i8* %8 to %"class.base::internal::BindStateBase"*
  tail call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %9, void ()* bitcast (void (%"class.base::internal::BindStateBase"*)* @_ZN4base8internal7InvokerINS0_9BindStateIZNS_9DoNothing4OnceIJEEENS_12OnceCallbackIFvDpT_EEEvEUlvE_JEEEFvvEE7RunOnceEPNS0_13BindStateBaseE to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateIZNS_9DoNothing4OnceIJEEENS_12OnceCallbackIFvDpT_EEEvEUlvE_JEE7DestroyEPKNS0_13BindStateBaseE) #10, !noalias !9
  %10 = bitcast %"class.base::OnceCallback"* %4 to i8**
  store i8* %8, i8** %10, align 8, !alias.scope !9
  call void @_ZN4base8internal4TaskC1ERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeTicksENS_9TimeDeltaE(%"struct.base::internal::Task"* %0, %"class.base::Location"* dereferenceable(32) %7, %"class.base::OnceCallback"* nonnull %4, i64 0, i64 0) #10
  %11 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %4, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %11) #10
  ret void
}

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #6

declare i32 @_ZN4base14PlatformThread9CurrentIdEv() local_unnamed_addr #5

declare i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() local_unnamed_addr #5

declare i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext, i8*, i8*, i8*, i64, i64, i32, %"class.base::TimeTicks"* dereferenceable(8), %"class.base::trace_event::TraceArguments"*, i32) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZN4base17ConditionVariableC1EPNS_4LockE(%"class.base::ConditionVariable"*, %"class.base::Lock"*) unnamed_addr #5

declare void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8*, i8*, i64) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #9

declare void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN4base17ConditionVariableD1Ev(%"class.base::ConditionVariable"*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal7InvokerINS0_9BindStateIZNS0_13JobTaskSourceC1ERKNS_8LocationERKNS_10TaskTraitsENS_17RepeatingCallbackIFvPNS_11JobDelegateEEEENSA_IFmmEEEPNS0_24PooledTaskRunnerDelegateEE3$_0JNS0_17UnretainedWrapperIS3_EEEEEFvvEE3RunEPNS0_13BindStateBaseE"(%"class.base::internal::BindStateBase"* nocapture readonly) #4 align 2 {
  %2 = alloca %"class.base::JobDelegate", align 8
  %3 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %4 = bitcast void ()** %3 to %"class.base::internal::JobTaskSource"**
  %5 = load %"class.base::internal::JobTaskSource"*, %"class.base::internal::JobTaskSource"** %4, align 8
  %6 = bitcast %"class.base::JobDelegate"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %5, i64 0, i32 11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 24, i1 false) #10
  %8 = load %"class.base::internal::PooledTaskRunnerDelegate"*, %"class.base::internal::PooledTaskRunnerDelegate"** %7, align 8
  call void @_ZN4base11JobDelegateC1EPNS_8internal13JobTaskSourceEPNS1_24PooledTaskRunnerDelegateE(%"class.base::JobDelegate"* nonnull %2, %"class.base::internal::JobTaskSource"* %5, %"class.base::internal::PooledTaskRunnerDelegate"* %8) #10
  %9 = getelementptr inbounds %"class.base::internal::JobTaskSource", %"class.base::internal::JobTaskSource"* %5, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %9, align 8
  %11 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %10, i64 0, i32 1
  %12 = bitcast void ()** %11 to void (%"class.base::internal::BindStateBase"*, %"class.base::JobDelegate"*)**
  %13 = load void (%"class.base::internal::BindStateBase"*, %"class.base::JobDelegate"*)*, void (%"class.base::internal::BindStateBase"*, %"class.base::JobDelegate"*)** %12, align 8
  call void %13(%"class.base::internal::BindStateBase"* %10, %"class.base::JobDelegate"* nonnull %2) #10
  call void @_ZN4base11JobDelegateD1Ev(%"class.base::JobDelegate"* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN4base8internal9BindStateIZNS0_13JobTaskSourceC1ERKNS_8LocationERKNS_10TaskTraitsENS_17RepeatingCallbackIFvPNS_11JobDelegateEEEENS9_IFmmEEEPNS0_24PooledTaskRunnerDelegateEE3$_0JNS0_17UnretainedWrapperIS2_EEEE7DestroyEPKNS0_13BindStateBaseE"(%"class.base::internal::BindStateBase"*) #4 align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #11
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #5

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #5

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseC2EONS0_20CallbackBaseCopyableE(%"class.base::internal::CallbackBase"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal7InvokerINS0_9BindStateIZNS_9DoNothing4OnceIJEEENS_12OnceCallbackIFvDpT_EEEvEUlvE_JEEEFvvEE7RunOnceEPNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #4 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal9BindStateIZNS_9DoNothing4OnceIJEEENS_12OnceCallbackIFvDpT_EEEvEUlvE_JEE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #4 comdat align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %4) #11
  br label %5

5:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #9

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEZNS0_13JobTaskSourceC1ERKNS_8LocationERKNS_10TaskTraitsENS2_IFvPNS_11JobDelegateEEEENS2_IFmmEEEPNS0_24PooledTaskRunnerDelegateEE3$_0JNS0_17UnretainedWrapperIS3_EEEEEDcOT0_DpOT1_: argument 0"}
!4 = distinct !{!4, !"_ZN4base8internal8BindImplINS_17RepeatingCallbackEZNS0_13JobTaskSourceC1ERKNS_8LocationERKNS_10TaskTraitsENS2_IFvPNS_11JobDelegateEEEENS2_IFmmEEEPNS0_24PooledTaskRunnerDelegateEE3$_0JNS0_17UnretainedWrapperIS3_EEEEEDcOT0_DpOT1_"}
!5 = distinct !{!5, !6, !"_ZN4base13BindRepeatingIZNS_8internal13JobTaskSourceC1ERKNS_8LocationERKNS_10TaskTraitsENS_17RepeatingCallbackIFvPNS_11JobDelegateEEEENS9_IFmmEEEPNS1_24PooledTaskRunnerDelegateEE3$_0JNS1_17UnretainedWrapperIS2_EEEEENS9_INS1_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSM_DpOSN_: argument 0"}
!6 = distinct !{!6, !"_ZN4base13BindRepeatingIZNS_8internal13JobTaskSourceC1ERKNS_8LocationERKNS_10TaskTraitsENS_17RepeatingCallbackIFvPNS_11JobDelegateEEEENS9_IFmmEEEPNS1_24PooledTaskRunnerDelegateEE3$_0JNS1_17UnretainedWrapperIS2_EEEEENS9_INS1_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSM_DpOSN_"}
!7 = !{!"branch_weights", i32 2000, i32 1}
!8 = !{i32 0, i32 33}
!9 = !{!10, !12, !14, !16}
!10 = distinct !{!10, !11, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZNS_9DoNothing4OnceIJEEENS2_IFvDpT_EEEvEUlvE_JEEEDcOT0_DpOT1_: argument 0"}
!11 = distinct !{!11, !"_ZN4base8internal8BindImplINS_12OnceCallbackEZNS_9DoNothing4OnceIJEEENS2_IFvDpT_EEEvEUlvE_JEEEDcOT0_DpOT1_"}
!12 = distinct !{!12, !13, !"_ZN4base8BindOnceIZNS_9DoNothing4OnceIJEEENS_12OnceCallbackIFvDpT_EEEvEUlvE_JEEENS3_INS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_: argument 0"}
!13 = distinct !{!13, !"_ZN4base8BindOnceIZNS_9DoNothing4OnceIJEEENS_12OnceCallbackIFvDpT_EEEvEUlvE_JEEENS3_INS_8internal14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSB_DpOSC_"}
!14 = distinct !{!14, !15, !"_ZN4base9DoNothing4OnceIJEEENS_12OnceCallbackIFvDpT_EEEv: argument 0"}
!15 = distinct !{!15, !"_ZN4base9DoNothing4OnceIJEEENS_12OnceCallbackIFvDpT_EEEv"}
!16 = distinct !{!16, !17, !"_ZNK4base9DoNothingcvNS_12OnceCallbackIFvDpT_EEEIJEEEv: argument 0"}
!17 = distinct !{!17, !"_ZNK4base9DoNothingcvNS_12OnceCallbackIFvDpT_EEEIJEEEv"}
