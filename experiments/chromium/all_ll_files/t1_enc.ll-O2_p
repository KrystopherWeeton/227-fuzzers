; ModuleID = '../../third_party/boringssl/src/ssl/t1_enc.cc'
source_filename = "../../third_party/boringssl/src/ssl/t1_enc.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.env_md_st = type opaque
%"class.bssl::Span.1" = type { i8*, i64 }
%"class.bssl::Span.0" = type { i8*, i64 }
%struct.ssl_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"class.std::__1::unique_ptr.4", i16, i16, [4 x i8], %"class.std::__1::unique_ptr.93", %"class.std::__1::unique_ptr.93", i32 (%"struct.bssl::SSL_HANDSHAKE"*)*, %"struct.bssl::SSL3_STATE"*, %"struct.bssl::DTLS1_STATE"*, void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], %"class.std::__1::unique_ptr.60", void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.108", %struct.crypto_ex_data_st, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.31", %struct.ssl_quic_method_st*, i32, i8, [3 x i8] }>
%"struct.bssl::SSL_PROTOCOL_METHOD" = type { i8, i1 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %"struct.bssl::SSLMessage"*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, %"class.bssl::Span"*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* }
%"struct.bssl::SSLMessage" = type { i8, i8, %struct.cbs_st, %struct.cbs_st }
%struct.cbs_st = type { i8*, i64 }
%"class.bssl::Span" = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"class.bssl::SSLAEADContext" = type <{ %struct.ssl_cipher_st*, %"class.bssl::internal::StackAllocated", [12 x i8], i8, i8, i16, i8, i8, [6 x i8] }>
%struct.ssl_cipher_st = type { i8*, i8*, i32, i32, i32, i32, i32, i32 }
%"class.bssl::internal::StackAllocated" = type { %struct.evp_aead_ctx_st }
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%struct.evp_aead_st = type opaque
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.bssl::SSL_CONFIG"* }
%"struct.bssl::SSL_CONFIG" = type <{ %struct.ssl_st*, i16, i16, [4 x i8], %struct.X509_VERIFY_PARAM_st*, %"class.std::__1::unique_ptr.7", %"class.std::__1::unique_ptr.17", i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.ssl_st*, i8*)*, %"class.std::__1::unique_ptr.31", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, %"class.std::__1::unique_ptr.25", %struct.stack_st_X509_NAME*, %"class.bssl::Array.58", %"class.std::__1::unique_ptr.20", %"class.bssl::Array", %"class.bssl::GrowableArray.84", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.58", %"class.std::__1::unique_ptr.86", i8, i16, [5 x i8] }>
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type opaque
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.bssl::SSLCipherPreferenceList"* }
%"struct.bssl::SSLCipherPreferenceList" = type { %"class.std::__1::unique_ptr.10", i8* }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %struct.stack_st_SSL_CIPHER* }
%struct.stack_st_SSL_CIPHER = type opaque
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.bssl::CERT"* }
%"struct.bssl::CERT" = type { %"class.std::__1::unique_ptr.20", %"class.std::__1::unique_ptr.25", %struct.stack_st_X509*, %struct.x509_st*, %struct.x509_st*, %struct.ssl_private_key_method_st*, %"struct.bssl::SSL_X509_METHOD"*, %"class.bssl::Array.58", i32 (%struct.ssl_st*, i8*)*, i8*, %struct.x509_store_st*, %"class.std::__1::unique_ptr.36", %"class.std::__1::unique_ptr.36", i8, [32 x i8], %"class.std::__1::unique_ptr.77", %"class.std::__1::unique_ptr.20", %struct.ssl_private_key_method_st* }
%struct.stack_st_X509 = type opaque
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon.30 }
%union.anon.30 = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%"struct.bssl::SSL_X509_METHOD" = type { i1 (%struct.stack_st_CRYPTO_BUFFER*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, i1 (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %struct.ssl_session_st*)*, void (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %"struct.bssl::SSL_HANDSHAKE"*, i8*)*, void (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)* }
%struct.stack_st_CRYPTO_BUFFER = type opaque
%"struct.bssl::SSL_HANDSHAKE" = type <{ %struct.ssl_st*, %"struct.bssl::SSL_CONFIG"*, i32, i32, i32, i16, i16, i64, [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], %union.anon.41, i16, [2 x i8], %"class.std::__1::unique_ptr.42", [2 x %"class.std::__1::unique_ptr.47"], %"class.bssl::SSLTranscript", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.58", %"class.bssl::Array.58", %"class.bssl::Array.58", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::internal::StackAllocated.59", %"class.bssl::Array", %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.25", %struct.stack_st_X509_NAME*, %"class.bssl::Array", %"class.std::__1::unique_ptr.20", %"class.std::__1::unique_ptr.20", %"class.std::__1::unique_ptr.60", %"class.std::__1::unique_ptr.60", %"class.std::__1::unique_ptr.65", %struct.ssl_cipher_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.72", i32, i16, i16, i16, i8, [32 x i8], i8, [6 x i8], [6 x i8] }>
%union.anon.41 = type { i32 }
%"class.std::__1::unique_ptr.42" = type { %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { %struct.err_save_state_st* }
%struct.err_save_state_st = type opaque
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.bssl::SSLKeyShare"* }
%"class.bssl::SSLKeyShare" = type { i32 (...)** }
%"class.bssl::SSLTranscript" = type { %"class.std::__1::unique_ptr.52", %"class.bssl::internal::StackAllocated.57" }
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %struct.buf_mem_st* }
%"class.bssl::internal::StackAllocated.57" = type { %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%"class.bssl::internal::StackAllocated.59" = type { %struct.evp_hpke_ctx_st }
%struct.evp_hpke_ctx_st = type { %struct.evp_hpke_aead_st*, %struct.evp_hpke_kdf_st*, %struct.evp_aead_ctx_st, [24 x i8], [64 x i8], i64, i32 }
%struct.evp_hpke_aead_st = type opaque
%struct.evp_hpke_kdf_st = type opaque
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %struct.ssl_ech_server_config_list_st* }
%struct.ssl_ech_server_config_list_st = type <{ %"class.bssl::GrowableArray", i32, [4 x i8] }>
%"class.bssl::GrowableArray" = type { i64, %"class.bssl::Array.68" }
%"class.bssl::Array.68" = type { %"class.std::__1::unique_ptr.69"*, i64 }
%"class.std::__1::unique_ptr.69" = type opaque
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"struct.bssl::SSL_HANDSHAKE_HINTS"* }
%"struct.bssl::SSL_HANDSHAKE_HINTS" = type <{ %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, [7 x i8] }>
%struct.ssl_ctx_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_X509_METHOD"*, %union.crypto_mutex_st, i16, i16, [4 x i8], %struct.ssl_quic_method_st*, %"class.std::__1::unique_ptr.7", %struct.x509_store_st*, %struct.lhash_st_SSL_SESSION*, i64, %struct.ssl_session_st*, %struct.ssl_session_st*, i32, i32, i32, i32, i32 (%struct.ssl_st*, %struct.ssl_session_st*)*, void (%struct.ssl_ctx_st*, %struct.ssl_session_st*)*, %struct.ssl_session_st* (%struct.ssl_st*, i8*, i32, i32*)*, i32, [4 x i8], i32 (%struct.x509_store_ctx_st*, i8*)*, i8*, i32 (%struct.ssl_st*, i8*)*, i32 (i8*, i32, i32, i8*)*, i8*, i32 (%struct.ssl_st*, %struct.x509_st**, %struct.evp_pkey_st**)*, void (%struct.ssl_st*, %struct.evp_pkey_st**)*, %struct.crypto_ex_data_st, void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.25", %struct.stack_st_X509_NAME*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.17", void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], i32 (i32, %struct.x509_store_ctx_st*)*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.ssl_early_callback_ctx*)*, i32 (%struct.ssl_early_callback_ctx*)*, i8, i8, i16, [4 x i8], i32 (%struct.ssl_st*, i32*, i8*)*, i8*, %"class.std::__1::unique_ptr.111", %"class.std::__1::unique_ptr.111", i32 (%struct.ssl_st*, i8*, i8*, %struct.evp_cipher_ctx_st*, %struct.hmac_ctx_st*, i32)*, %"class.std::__1::unique_ptr.31", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*, i8**, i32*, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, %"class.bssl::Array", %"class.std::__1::unique_ptr.86", %"class.bssl::GrowableArray.116", %"class.bssl::Array.58", %"class.std::__1::unique_ptr.20", %"class.std::__1::unique_ptr.65", void (%struct.ssl_st*, i8*)*, void (%struct.ssl_st*, %struct.timeval*)*, %struct.crypto_buffer_pool_st*, %struct.ssl_ticket_aead_method_st*, i32 (%struct.ssl_st*, i8*)*, i8*, %"class.bssl::Array.58", i16, [6 x i8] }>
%struct.lhash_st_SSL_SESSION = type opaque
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, {}*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, {}*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, {}*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, {}*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.stack_st_X509_CRL = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.ssl_early_callback_ctx = type { %struct.ssl_st*, i8*, i64, i16, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"struct.bssl::TicketKey"* }
%"struct.bssl::TicketKey" = type { [16 x i8], [16 x i8], [16 x i8], i64 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%"class.bssl::GrowableArray.116" = type { i64, %"class.bssl::Array.117" }
%"class.bssl::Array.117" = type { %"struct.bssl::CertCompressionAlg"*, i64 }
%"struct.bssl::CertCompressionAlg" = type <{ i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)*, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)*, i16, [6 x i8] }>
%struct.timeval = type { i64, i64 }
%struct.crypto_buffer_pool_st = type opaque
%struct.ssl_ticket_aead_method_st = type { i64 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)* }
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%struct.stack_st_X509_LOOKUP = type opaque
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %struct.crypto_buffer_st* }
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"struct.bssl::DC"* }
%"struct.bssl::DC" = type { %"class.std::__1::unique_ptr.36", i16, %"class.std::__1::unique_ptr.20" }
%struct.ssl_private_key_method_st = type { i32 (%struct.ssl_st*, i8*, i64*, i64, i16, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64)* }
%"class.std::__1::unique_ptr.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %struct.stack_st_CRYPTO_BUFFER* }
%struct.stack_st_X509_NAME = type opaque
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %struct.evp_pkey_st* }
%"class.bssl::GrowableArray.84" = type { i64, %"class.bssl::Array.85" }
%"class.bssl::Array.85" = type { %"struct.bssl::ALPSConfig"*, i64 }
%"struct.bssl::ALPSConfig" = type { %"class.bssl::Array", %"class.bssl::Array" }
%"class.bssl::Array" = type { i8*, i64 }
%"class.bssl::Array.58" = type { i16*, i64 }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %struct.stack_st_SRTP_PROTECTION_PROFILE* }
%struct.stack_st_SRTP_PROTECTION_PROFILE = type opaque
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %struct.bio_st* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%"struct.bssl::SSL3_STATE" = type <{ [8 x i8], [8 x i8], [32 x i8], [32 x i8], %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer", %"class.bssl::Span", i32, i32, i32, i32, i8*, i32, i32, %"class.std::__1::unique_ptr.42", i32, i32, i32, i32, i16, i8, i8, i8, i16, i8, %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52", i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.98", [48 x i8], [48 x i8], [48 x i8], i8, i8, i8, [12 x i8], i8, i8, [12 x i8], [2 x i8], i8, %"class.std::__1::unique_ptr.60", %"class.bssl::Array", %"class.bssl::Array", %"class.std::__1::unique_ptr.31", [64 x i8], %"class.bssl::Array", %struct.srtp_protection_profile_st* }>
%"class.bssl::SSLBuffer" = type <{ i8*, i16, i16, i16, [5 x i8], i8, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.bssl::SSLAEADContext"* }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"struct.bssl::SSL_HANDSHAKE"* }
%struct.srtp_protection_profile_st = type { i8*, i64 }
%"struct.bssl::DTLS1_STATE" = type <{ i8, [256 x i8], [7 x i8], i64, i16, i16, [4 x i8], %"struct.bssl::DTLS1_BITMAP", i16, i16, [8 x i8], [4 x i8], %"class.std::__1::unique_ptr", [7 x %"class.std::__1::unique_ptr.103"], [7 x %"struct.bssl::DTLS_OUTGOING_MESSAGE"], i8, i8, [2 x i8], i32, i32, i32, %"struct.bssl::OPENSSL_timeval", i32, [4 x i8] }>
%"struct.bssl::DTLS1_BITMAP" = type { i64, i64 }
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"struct.bssl::hm_fragment"* }
%"struct.bssl::hm_fragment" = type { i8, i16, i32, i8*, i8* }
%"struct.bssl::DTLS_OUTGOING_MESSAGE" = type <{ i8*, i32, i16, i8, i8 }>
%"struct.bssl::OPENSSL_timeval" = type { i64, i32 }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %struct.ssl_session_st* }
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %struct.ssl_ctx_st* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { i8* }
%struct.ssl_quic_method_st = type { i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, i8*, i64)*, i32 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i32, i8)* }
%struct.ssl_session_st = type { i32, i16, i16, i16, i32, [48 x i8], i32, [32 x i8], i8, [32 x i8], %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.25", %"struct.bssl::SSL_X509_METHOD"*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509*, i64, i32, i32, i64, %struct.ssl_cipher_st*, %struct.crypto_ex_data_st, %struct.ssl_session_st*, %struct.ssl_session_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.36", %"class.std::__1::unique_ptr.36", [32 x i8], [64 x i8], i8, i32, i32, i32, %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, %"class.bssl::Array" }

@_ZZN4bssl27tls1_generate_master_secretEPNS_13SSL_HANDSHAKEEPhNS_4SpanIKhEEE18kMasterSecretLabel = internal constant [14 x i8] c"master secret\00", align 1
@_ZZN4bssl27tls1_generate_master_secretEPNS_13SSL_HANDSHAKEEPhNS_4SpanIKhEEE26kExtendedMasterSecretLabel = internal constant [23 x i8] c"extended master secret\00", align 16
@.str = private unnamed_addr constant [46 x i8] c"../../third_party/boringssl/src/ssl/t1_enc.cc\00", align 1
@_ZZN4bsslL18generate_key_blockEPK6ssl_stNS_4SpanIhEEPK14ssl_session_stE6kLabel = internal constant [14 x i8] c"key expansion\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"../../third_party/boringssl/src/ssl/internal.h\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl8tls1_prfEPK9env_md_stNS_4SpanIhEENS3_IKhEENS3_IKcEES6_S6_(%struct.env_md_st*, i8*, i64, i8*, i64, %"class.bssl::Span.1"* nocapture readonly byval(%"class.bssl::Span.1") align 8, %"class.bssl::Span.0"* nocapture readonly byval(%"class.bssl::Span.0") align 8, %"class.bssl::Span.0"* nocapture readonly byval(%"class.bssl::Span.0") align 8) local_unnamed_addr #0 {
  %9 = getelementptr inbounds %"class.bssl::Span.1", %"class.bssl::Span.1"* %5, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %"class.bssl::Span.1", %"class.bssl::Span.1"* %5, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.bssl::Span.0", %"class.bssl::Span.0"* %6, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %"class.bssl::Span.0", %"class.bssl::Span.0"* %6, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.bssl::Span.0", %"class.bssl::Span.0"* %7, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %"class.bssl::Span.0", %"class.bssl::Span.0"* %7, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = tail call i32 @CRYPTO_tls1_prf(%struct.env_md_st* %0, i8* %1, i64 %2, i8* %3, i64 %4, i8* %10, i64 %12, i8* %14, i64 %16, i8* %18, i64 %20) #4
  %22 = icmp eq i32 %21, 1
  ret i1 %22
}

declare i32 @CRYPTO_tls1_prf(%struct.env_md_st*, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl19tls1_configure_aeadEP6ssl_st20evp_aead_direction_tPNS_5ArrayIhEEPK14ssl_session_stNS_4SpanIKhEE(%struct.ssl_st*, i32, %"class.bssl::Array"* nocapture, %struct.ssl_session_st*, i8*, i64) local_unnamed_addr #0 {
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca %"class.bssl::Span.0", align 8
  %11 = alloca %"class.bssl::Span.0", align 8
  %12 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #4
  store i64 -6148914691236517206, i64* %7, align 8
  %13 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #4
  store i64 -6148914691236517206, i64* %8, align 8
  %14 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #4
  store i64 -6148914691236517206, i64* %9, align 8
  %15 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %3, i64 0, i32 20
  %16 = load %struct.ssl_cipher_st*, %struct.ssl_cipher_st** %15, align 8
  %17 = call fastcc zeroext i1 @_ZN4bsslL21get_key_block_lengthsEPK6ssl_stPmS3_S3_PK13ssl_cipher_st(%struct.ssl_st* %0, i64* nonnull %7, i64* nonnull %8, i64* nonnull %9, %struct.ssl_cipher_st* %16)
  br i1 %17, label %18, label %152

18:                                               ; preds = %6
  %19 = load i64, i64* %8, align 8
  %20 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %2, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %53

23:                                               ; preds = %18
  %24 = load i64, i64* %9, align 8
  %25 = load i64, i64* %7, align 8
  %26 = add i64 %24, %19
  %27 = add i64 %26, %25
  %28 = shl i64 %27, 1
  %29 = getelementptr inbounds %"class.bssl::Array", %"class.bssl::Array"* %2, i64 0, i32 0
  %30 = load i8*, i8** %29, align 8
  call void @OPENSSL_free(i8* %30) #4
  %31 = bitcast %"class.bssl::Array"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 16, i1 false) #4
  %32 = icmp eq i64 %28, 0
  br i1 %32, label %38, label %33

33:                                               ; preds = %23
  %34 = call i8* @OPENSSL_malloc(i64 %28) #4
  store i8* %34, i8** %29, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %37, label %36

36:                                               ; preds = %33
  store i64 %28, i64* %20, align 8
  br label %38

37:                                               ; preds = %33
  call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 324) #4
  br label %152

38:                                               ; preds = %23, %36
  %39 = phi i8* [ null, %23 ], [ %34, %36 ]
  %40 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %3, i64 0, i32 5, i64 0
  %41 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %3, i64 0, i32 4
  %42 = load i32, i32* %41, align 4
  %43 = sext i32 %42 to i64
  %44 = call %struct.env_md_st* @_ZN4bssl22ssl_session_get_digestEPK14ssl_session_st(%struct.ssl_session_st* %3) #4
  %45 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %46 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %45, align 8
  %47 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %46, i64 0, i32 2, i64 0
  %48 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %46, i64 0, i32 3, i64 0
  %49 = call i32 @CRYPTO_tls1_prf(%struct.env_md_st* %44, i8* %39, i64 %28, i8* %40, i64 %43, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @_ZZN4bsslL18generate_key_blockEPK6ssl_stNS_4SpanIhEEPK14ssl_session_stE6kLabel, i64 0, i64 0), i64 13, i8* %47, i64 32, i8* %48, i64 32) #4
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %152

51:                                               ; preds = %38
  %52 = load i64, i64* %20, align 8
  br label %53

53:                                               ; preds = %51, %18
  %54 = phi i64 [ %52, %51 ], [ %21, %18 ]
  %55 = bitcast %"class.bssl::Array"* %2 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 26
  %58 = load i8, i8* %57, align 4
  %59 = and i8 %58, 1
  %60 = xor i8 %59, 1
  %61 = zext i8 %60 to i32
  %62 = icmp eq i32 %61, %1
  %63 = load i64, i64* %7, align 8
  br i1 %62, label %64, label %86

64:                                               ; preds = %53
  %65 = inttoptr i64 %56 to i8*
  %66 = icmp ugt i64 %54, %63
  %67 = select i1 %66, i64 %63, i64 %54
  %68 = shl i64 %63, 1
  %69 = icmp ult i64 %54, %68
  br i1 %69, label %70, label %71

70:                                               ; preds = %64
  call void @abort() #5
  unreachable

71:                                               ; preds = %64
  %72 = sub i64 %54, %68
  %73 = add i64 %63, %19
  %74 = shl i64 %73, 1
  %75 = load i64, i64* %9, align 8
  %76 = icmp ult i64 %54, %74
  br i1 %76, label %77, label %78

77:                                               ; preds = %71
  call void @abort() #5
  unreachable

78:                                               ; preds = %71
  %79 = getelementptr inbounds i8, i8* %65, i64 %68
  %80 = icmp ugt i64 %72, %19
  %81 = select i1 %80, i64 %19, i64 %72
  %82 = getelementptr inbounds i8, i8* %65, i64 %74
  %83 = sub i64 %54, %74
  %84 = icmp ugt i64 %83, %75
  %85 = select i1 %84, i64 %75, i64 %83
  br label %115

86:                                               ; preds = %53
  %87 = icmp ult i64 %54, %63
  br i1 %87, label %88, label %89

88:                                               ; preds = %86
  call void @abort() #5
  unreachable

89:                                               ; preds = %86
  %90 = inttoptr i64 %56 to i8*
  %91 = getelementptr inbounds i8, i8* %90, i64 %63
  %92 = sub i64 %54, %63
  %93 = icmp ugt i64 %92, %63
  %94 = select i1 %93, i64 %63, i64 %92
  %95 = shl i64 %63, 1
  %96 = add i64 %95, %19
  %97 = icmp ult i64 %54, %96
  br i1 %97, label %98, label %99

98:                                               ; preds = %89
  call void @abort() #5
  unreachable

99:                                               ; preds = %89
  %100 = sub i64 %54, %96
  %101 = add i64 %63, %19
  %102 = shl i64 %101, 1
  %103 = load i64, i64* %9, align 8
  %104 = add i64 %103, %102
  %105 = icmp ult i64 %54, %104
  br i1 %105, label %106, label %107

106:                                              ; preds = %99
  call void @abort() #5
  unreachable

107:                                              ; preds = %99
  %108 = getelementptr inbounds i8, i8* %90, i64 %96
  %109 = icmp ugt i64 %100, %19
  %110 = select i1 %109, i64 %19, i64 %100
  %111 = getelementptr inbounds i8, i8* %90, i64 %104
  %112 = sub i64 %54, %104
  %113 = icmp ugt i64 %112, %103
  %114 = select i1 %113, i64 %103, i64 %112
  br label %115

115:                                              ; preds = %107, %78
  %116 = phi i64 [ %75, %78 ], [ %103, %107 ]
  %117 = phi i8* [ %82, %78 ], [ %111, %107 ]
  %118 = phi i64 [ %85, %78 ], [ %114, %107 ]
  %119 = phi i64 [ %81, %78 ], [ %110, %107 ]
  %120 = phi i8* [ %79, %78 ], [ %108, %107 ]
  %121 = phi i64 [ %67, %78 ], [ %94, %107 ]
  %122 = phi i8* [ %65, %78 ], [ %91, %107 ]
  %123 = icmp eq i64 %5, 0
  br i1 %123, label %126, label %124

124:                                              ; preds = %115
  %125 = icmp eq i64 %116, %5
  br i1 %125, label %126, label %152

126:                                              ; preds = %124, %115
  %127 = phi i8* [ %117, %115 ], [ %4, %124 ]
  %128 = phi i64 [ %118, %115 ], [ %5, %124 ]
  %129 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 2
  %130 = load i16, i16* %129, align 8
  %131 = call i32 @SSL_is_dtls(%struct.ssl_st* %0) #4
  %132 = icmp ne i32 %131, 0
  %133 = load %struct.ssl_cipher_st*, %struct.ssl_cipher_st** %15, align 8
  %134 = getelementptr inbounds %"class.bssl::Span.0", %"class.bssl::Span.0"* %10, i64 0, i32 0
  store i8* %122, i8** %134, align 8
  %135 = getelementptr inbounds %"class.bssl::Span.0", %"class.bssl::Span.0"* %10, i64 0, i32 1
  store i64 %121, i64* %135, align 8
  %136 = getelementptr inbounds %"class.bssl::Span.0", %"class.bssl::Span.0"* %11, i64 0, i32 0
  store i8* %127, i8** %136, align 8
  %137 = getelementptr inbounds %"class.bssl::Span.0", %"class.bssl::Span.0"* %11, i64 0, i32 1
  store i64 %128, i64* %137, align 8
  %138 = call %"class.bssl::SSLAEADContext"* @_ZN4bssl14SSLAEADContext6CreateE20evp_aead_direction_ttbPK13ssl_cipher_stNS_4SpanIKhEES7_S7_(i32 %1, i16 zeroext %130, i1 zeroext %132, %struct.ssl_cipher_st* %133, i8* %120, i64 %119, %"class.bssl::Span.0"* nonnull byval(%"class.bssl::Span.0") align 8 %10, %"class.bssl::Span.0"* nonnull byval(%"class.bssl::Span.0") align 8 %11) #4
  %139 = icmp eq %"class.bssl::SSLAEADContext"* %138, null
  br i1 %139, label %152, label %140

140:                                              ; preds = %126
  %141 = icmp eq i32 %1, 0
  %142 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 0
  %143 = load %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_PROTOCOL_METHOD"** %142, align 8
  br i1 %141, label %144, label %148

144:                                              ; preds = %140
  %145 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %143, i64 0, i32 17
  %146 = load i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)** %145, align 8
  %147 = call zeroext i1 %146(%struct.ssl_st* %0, i32 3, %"class.bssl::SSLAEADContext"* nonnull %138, i8* null, i64 0) #4
  br label %152

148:                                              ; preds = %140
  %149 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %143, i64 0, i32 18
  %150 = load i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)** %149, align 8
  %151 = call zeroext i1 %150(%struct.ssl_st* %0, i32 3, %"class.bssl::SSLAEADContext"* nonnull %138, i8* null, i64 0) #4
  br label %152

152:                                              ; preds = %126, %148, %144, %124, %37, %38, %6
  %153 = phi i1 [ false, %6 ], [ false, %38 ], [ false, %37 ], [ false, %124 ], [ %151, %148 ], [ %147, %144 ], [ false, %126 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #4
  ret i1 %153
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN4bsslL21get_key_block_lengthsEPK6ssl_stPmS3_S3_PK13ssl_cipher_st(%struct.ssl_st*, i64*, i64* nocapture, i64*, %struct.ssl_cipher_st*) unnamed_addr #0 {
  %6 = alloca %struct.evp_aead_st*, align 8
  %7 = bitcast %struct.evp_aead_st** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #4
  store %struct.evp_aead_st* null, %struct.evp_aead_st** %6, align 8
  %8 = tail call zeroext i16 @_ZN4bssl20ssl_protocol_versionEPK6ssl_st(%struct.ssl_st* %0) #4
  %9 = tail call i32 @SSL_is_dtls(%struct.ssl_st* %0) #4
  %10 = icmp ne i32 %9, 0
  %11 = call zeroext i1 @_ZN4bssl23ssl_cipher_get_evp_aeadEPPK11evp_aead_stPmS4_PK13ssl_cipher_sttb(%struct.evp_aead_st** nonnull %6, i64* %1, i64* %3, %struct.ssl_cipher_st* %4, i16 zeroext %8, i1 zeroext %10) #4
  br i1 %11, label %13, label %12

12:                                               ; preds = %5
  call void @ERR_put_error(i32 16, i32 0, i32 130, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i32 173) #4
  br label %25

13:                                               ; preds = %5
  %14 = load %struct.evp_aead_st*, %struct.evp_aead_st** %6, align 8
  %15 = call i64 @EVP_AEAD_key_length(%struct.evp_aead_st* %14) #4
  store i64 %15, i64* %2, align 8
  %16 = load i64, i64* %1, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %25, label %18

18:                                               ; preds = %13
  %19 = load i64, i64* %3, align 8
  %20 = add i64 %19, %16
  %21 = icmp ult i64 %15, %20
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i32 183) #4
  br label %25

23:                                               ; preds = %18
  %24 = sub i64 %15, %20
  store i64 %24, i64* %2, align 8
  br label %25

25:                                               ; preds = %23, %13, %22, %12
  %26 = phi i1 [ false, %22 ], [ false, %12 ], [ true, %13 ], [ true, %23 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #4
  ret i1 %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare %"class.bssl::SSLAEADContext"* @_ZN4bssl14SSLAEADContext6CreateE20evp_aead_direction_ttbPK13ssl_cipher_stNS_4SpanIKhEES7_S7_(i32, i16 zeroext, i1 zeroext, %struct.ssl_cipher_st*, i8*, i64, %"class.bssl::Span.0"* byval(%"class.bssl::Span.0") align 8, %"class.bssl::Span.0"* byval(%"class.bssl::Span.0") align 8) local_unnamed_addr #1

declare i32 @SSL_is_dtls(%struct.ssl_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl24tls1_change_cipher_stateEPNS_13SSL_HANDSHAKEE20evp_aead_direction_t(%"struct.bssl::SSL_HANDSHAKE"*, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 0
  %4 = load %struct.ssl_st*, %struct.ssl_st** %3, align 8
  %5 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 44
  %6 = tail call %struct.ssl_session_st* @_ZN4bssl21ssl_handshake_sessionEPKNS_13SSL_HANDSHAKEE(%"struct.bssl::SSL_HANDSHAKE"* %0) #4
  %7 = tail call zeroext i1 @_ZN4bssl19tls1_configure_aeadEP6ssl_st20evp_aead_direction_tPNS_5ArrayIhEEPK14ssl_session_stNS_4SpanIKhEE(%struct.ssl_st* %4, i32 %1, %"class.bssl::Array"* %5, %struct.ssl_session_st* %6, i8* null, i64 0)
  ret i1 %7
}

declare %struct.ssl_session_st* @_ZN4bssl21ssl_handshake_sessionEPKNS_13SSL_HANDSHAKEE(%"struct.bssl::SSL_HANDSHAKE"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4bssl27tls1_generate_master_secretEPNS_13SSL_HANDSHAKEEPhNS_4SpanIKhEE(%"struct.bssl::SSL_HANDSHAKE"*, i8*, i8*, i64) local_unnamed_addr #0 {
  %5 = alloca [64 x i8], align 16
  %6 = alloca i64, align 8
  %7 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 46
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 524288
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %23, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 64, i1 false)
  %13 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #4
  store i64 -6148914691236517206, i64* %6, align 8
  %14 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 20
  %15 = call zeroext i1 @_ZN4bssl13SSLTranscript7GetHashEPhPm(%"class.bssl::SSLTranscript"* %14, i8* nonnull %12, i64* nonnull %6) #4
  br i1 %15, label %16, label %22

16:                                               ; preds = %11
  %17 = call %struct.env_md_st* @_ZNK4bssl13SSLTranscript6DigestEv(%"class.bssl::SSLTranscript"* %14) #4
  %18 = load i64, i64* %6, align 8
  %19 = call i32 @CRYPTO_tls1_prf(%struct.env_md_st* %17, i8* %1, i64 48, i8* %2, i64 %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @_ZZN4bssl27tls1_generate_master_secretEPNS_13SSL_HANDSHAKEEPhNS_4SpanIKhEEE26kExtendedMasterSecretLabel, i64 0, i64 0), i64 22, i8* nonnull %12, i64 %18, i8* null, i64 0) #4
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %12) #4
  br label %34

22:                                               ; preds = %11, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %12) #4
  br label %35

23:                                               ; preds = %4
  %24 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 0
  %25 = load %struct.ssl_st*, %struct.ssl_st** %24, align 8
  %26 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 20
  %27 = tail call %struct.env_md_st* @_ZNK4bssl13SSLTranscript6DigestEv(%"class.bssl::SSLTranscript"* %26) #4
  %28 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %25, i64 0, i32 8
  %29 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %28, align 8
  %30 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %29, i64 0, i32 3, i64 0
  %31 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %29, i64 0, i32 2, i64 0
  %32 = tail call i32 @CRYPTO_tls1_prf(%struct.env_md_st* %27, i8* %1, i64 48, i8* %2, i64 %3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @_ZZN4bssl27tls1_generate_master_secretEPNS_13SSL_HANDSHAKEEPhNS_4SpanIKhEEE18kMasterSecretLabel, i64 0, i64 0), i64 13, i8* %30, i64 32, i8* %31, i64 32) #4
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %35

34:                                               ; preds = %21, %23
  br label %35

35:                                               ; preds = %22, %23, %34
  %36 = phi i32 [ 48, %34 ], [ 0, %22 ], [ 0, %23 ]
  ret i32 %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare zeroext i1 @_ZN4bssl13SSLTranscript7GetHashEPhPm(%"class.bssl::SSLTranscript"*, i8*, i64*) local_unnamed_addr #1

declare %struct.env_md_st* @_ZNK4bssl13SSLTranscript6DigestEv(%"class.bssl::SSLTranscript"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @SSL_get_key_block_len(%struct.ssl_st*) local_unnamed_addr #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = tail call i32 @SSL_in_init(%struct.ssl_st* %0) #4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %23

7:                                                ; preds = %1
  %8 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #4
  store i64 -6148914691236517206, i64* %2, align 8
  %9 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #4
  store i64 -6148914691236517206, i64* %3, align 8
  %10 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #4
  store i64 -6148914691236517206, i64* %4, align 8
  %11 = tail call %struct.ssl_cipher_st* @SSL_get_current_cipher(%struct.ssl_st* %0) #4
  %12 = call fastcc zeroext i1 @_ZN4bsslL21get_key_block_lengthsEPK6ssl_stPmS3_S3_PK13ssl_cipher_st(%struct.ssl_st* %0, i64* nonnull %2, i64* nonnull %3, i64* nonnull %4, %struct.ssl_cipher_st* %11)
  br i1 %12, label %14, label %13

13:                                               ; preds = %7
  call void @ERR_clear_error() #4
  br label %21

14:                                               ; preds = %7
  %15 = load i64, i64* %2, align 8
  %16 = load i64, i64* %3, align 8
  %17 = add i64 %16, %15
  %18 = load i64, i64* %4, align 8
  %19 = add i64 %17, %18
  %20 = shl i64 %19, 1
  br label %21

21:                                               ; preds = %14, %13
  %22 = phi i64 [ %20, %14 ], [ 0, %13 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #4
  br label %23

23:                                               ; preds = %1, %21
  %24 = phi i64 [ %22, %21 ], [ 0, %1 ]
  ret i64 %24
}

declare i32 @SSL_in_init(%struct.ssl_st*) local_unnamed_addr #1

declare %struct.ssl_cipher_st* @SSL_get_current_cipher(%struct.ssl_st*) local_unnamed_addr #1

declare void @ERR_clear_error() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_generate_key_block(%struct.ssl_st*, i8*, i64) local_unnamed_addr #0 {
  %4 = tail call i32 @SSL_in_init(%struct.ssl_st* %0) #4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @ERR_put_error(i32 16, i32 0, i32 66, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i32 325) #4
  br label %21

7:                                                ; preds = %3
  %8 = tail call %struct.ssl_session_st* @SSL_get_session(%struct.ssl_st* %0) #4
  %9 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %8, i64 0, i32 5, i64 0
  %10 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %8, i64 0, i32 4
  %11 = load i32, i32* %10, align 4
  %12 = sext i32 %11 to i64
  %13 = tail call %struct.env_md_st* @_ZN4bssl22ssl_session_get_digestEPK14ssl_session_st(%struct.ssl_session_st* %8) #4
  %14 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %15 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %14, align 8
  %16 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %15, i64 0, i32 2, i64 0
  %17 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %15, i64 0, i32 3, i64 0
  %18 = tail call i32 @CRYPTO_tls1_prf(%struct.env_md_st* %13, i8* %1, i64 %2, i8* %9, i64 %12, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @_ZZN4bsslL18generate_key_blockEPK6ssl_stNS_4SpanIhEEPK14ssl_session_stE6kLabel, i64 0, i64 0), i64 13, i8* %16, i64 32, i8* %17, i64 32) #4
  %19 = icmp eq i32 %18, 1
  %20 = zext i1 %19 to i32
  br label %21

21:                                               ; preds = %7, %6
  %22 = phi i32 [ 0, %6 ], [ %20, %7 ]
  ret i32 %22
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare %struct.ssl_session_st* @SSL_get_session(%struct.ssl_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_export_keying_material(%struct.ssl_st*, i8*, i64, i8*, i64, i8*, i64, i32) local_unnamed_addr #0 {
  %9 = alloca %"class.bssl::Span.1", align 8
  %10 = alloca %"class.bssl::Span.0", align 8
  %11 = tail call i32 @SSL_in_init(%struct.ssl_st* %0) #4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %23, label %13

13:                                               ; preds = %8
  %14 = tail call i32 @SSL_in_false_start(%struct.ssl_st* %0) #4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %23

16:                                               ; preds = %13
  %17 = tail call i32 @SSL_is_server(%struct.ssl_st* %0) #4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %16
  %20 = tail call i32 @SSL_in_early_data(%struct.ssl_st* %0) #4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19, %16
  tail call void @ERR_put_error(i32 16, i32 0, i32 284, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i32 341) #4
  br label %82

23:                                               ; preds = %19, %13, %8
  %24 = tail call zeroext i16 @_ZN4bssl20ssl_protocol_versionEPK6ssl_st(%struct.ssl_st* %0) #4
  %25 = icmp ugt i16 %24, 771
  br i1 %25, label %26, label %42

26:                                               ; preds = %23
  %27 = icmp eq i32 %7, 0
  %28 = select i1 %27, i64 0, i64 %6
  %29 = select i1 %27, i8* null, i8* %5
  %30 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %31 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %30, align 8
  %32 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %31, i64 0, i32 37, i64 0
  %33 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %31, i64 0, i32 40
  %34 = load i8, i8* %33, align 2
  %35 = zext i8 %34 to i64
  %36 = getelementptr inbounds %"class.bssl::Span.1", %"class.bssl::Span.1"* %9, i64 0, i32 0
  store i8* %3, i8** %36, align 8
  %37 = getelementptr inbounds %"class.bssl::Span.1", %"class.bssl::Span.1"* %9, i64 0, i32 1
  store i64 %4, i64* %37, align 8
  %38 = getelementptr inbounds %"class.bssl::Span.0", %"class.bssl::Span.0"* %10, i64 0, i32 0
  store i8* %29, i8** %38, align 8
  %39 = getelementptr inbounds %"class.bssl::Span.0", %"class.bssl::Span.0"* %10, i64 0, i32 1
  store i64 %28, i64* %39, align 8
  %40 = tail call zeroext i1 @_ZN4bssl28tls13_export_keying_materialEP6ssl_stNS_4SpanIhEENS2_IKhEENS2_IKcEES5_(%struct.ssl_st* %0, i8* %1, i64 %2, i8* %32, i64 %35, %"class.bssl::Span.1"* nonnull byval(%"class.bssl::Span.1") align 8 %9, %"class.bssl::Span.0"* nonnull byval(%"class.bssl::Span.0") align 8 %10) #4
  %41 = zext i1 %40 to i32
  br label %82

42:                                               ; preds = %23
  %43 = icmp ne i32 %7, 0
  br i1 %43, label %44, label %49

44:                                               ; preds = %42
  %45 = icmp ugt i64 %6, 65535
  br i1 %45, label %46, label %47

46:                                               ; preds = %44
  tail call void @ERR_put_error(i32 16, i32 0, i32 69, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i32 359) #4
  br label %82

47:                                               ; preds = %44
  %48 = add nuw nsw i64 %6, 66
  br label %49

49:                                               ; preds = %42, %47
  %50 = phi i64 [ %48, %47 ], [ 64, %42 ]
  tail call void @OPENSSL_free(i8* null) #4
  %51 = tail call i8* @OPENSSL_malloc(i64 %50) #4
  %52 = icmp eq i8* %51, null
  br i1 %52, label %53, label %54

53:                                               ; preds = %49
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i32 324) #4
  tail call void @ERR_put_error(i32 16, i32 0, i32 65, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i32 366) #4
  br label %80

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %56 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %55, align 8
  %57 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %56, i64 0, i32 3, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %51, i8* align 1 %57, i64 32, i1 false) #4
  %58 = getelementptr inbounds i8, i8* %51, i64 32
  %59 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %55, align 8
  %60 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %59, i64 0, i32 2, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %60, i64 32, i1 false) #4
  br i1 %43, label %61, label %70

61:                                               ; preds = %54
  %62 = lshr i64 %6, 8
  %63 = trunc i64 %62 to i8
  %64 = getelementptr inbounds i8, i8* %51, i64 64
  store i8 %63, i8* %64, align 1
  %65 = trunc i64 %6 to i8
  %66 = getelementptr inbounds i8, i8* %51, i64 65
  store i8 %65, i8* %66, align 1
  %67 = icmp eq i64 %6, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %61
  %69 = getelementptr inbounds i8, i8* %51, i64 66
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %69, i8* align 1 %5, i64 %6, i1 false) #4
  br label %70

70:                                               ; preds = %68, %61, %54
  %71 = tail call %struct.ssl_session_st* @SSL_get_session(%struct.ssl_st* %0) #4
  %72 = tail call %struct.env_md_st* @_ZN4bssl22ssl_session_get_digestEPK14ssl_session_st(%struct.ssl_session_st* %71) #4
  %73 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %71, i64 0, i32 5, i64 0
  %74 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %71, i64 0, i32 4
  %75 = load i32, i32* %74, align 4
  %76 = sext i32 %75 to i64
  %77 = tail call i32 @CRYPTO_tls1_prf(%struct.env_md_st* %72, i8* %1, i64 %2, i8* %73, i64 %76, i8* %3, i64 %4, i8* nonnull %51, i64 %50, i8* null, i64 0) #4
  %78 = icmp eq i32 %77, 1
  %79 = zext i1 %78 to i32
  br label %80

80:                                               ; preds = %70, %53
  %81 = phi i32 [ %79, %70 ], [ 0, %53 ]
  tail call void @OPENSSL_free(i8* %51) #4
  br label %82

82:                                               ; preds = %46, %80, %26, %22
  %83 = phi i32 [ %41, %26 ], [ 0, %22 ], [ 0, %46 ], [ %81, %80 ]
  ret i32 %83
}

declare i32 @SSL_in_false_start(%struct.ssl_st*) local_unnamed_addr #1

declare i32 @SSL_is_server(%struct.ssl_st*) local_unnamed_addr #1

declare i32 @SSL_in_early_data(%struct.ssl_st*) local_unnamed_addr #1

declare zeroext i16 @_ZN4bssl20ssl_protocol_versionEPK6ssl_st(%struct.ssl_st*) local_unnamed_addr #1

declare zeroext i1 @_ZN4bssl28tls13_export_keying_materialEP6ssl_stNS_4SpanIhEENS2_IKhEENS2_IKcEES5_(%struct.ssl_st*, i8*, i64, i8*, i64, %"class.bssl::Span.1"* byval(%"class.bssl::Span.1") align 8, %"class.bssl::Span.0"* byval(%"class.bssl::Span.0") align 8) local_unnamed_addr #1

declare %struct.env_md_st* @_ZN4bssl22ssl_session_get_digestEPK14ssl_session_st(%struct.ssl_session_st*) local_unnamed_addr #1

declare zeroext i1 @_ZN4bssl23ssl_cipher_get_evp_aeadEPPK11evp_aead_stPmS4_PK13ssl_cipher_sttb(%struct.evp_aead_st**, i64*, i64*, %struct.ssl_cipher_st*, i16 zeroext, i1 zeroext) local_unnamed_addr #1

declare i64 @EVP_AEAD_key_length(%struct.evp_aead_st*) local_unnamed_addr #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
