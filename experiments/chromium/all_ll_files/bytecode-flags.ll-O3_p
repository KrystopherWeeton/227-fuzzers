; ModuleID = '../../v8/src/interpreter/bytecode-flags.cc'
source_filename = "../../v8/src/interpreter/bytecode-flags.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::AstStringConstants" = type { %"class.v8::internal::Zone", %"class.v8::base::TemplateHashMapImpl", i64, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.11" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.std::__1::set.11" = type { %"class.std::__1::__tree.12" }
%"class.std::__1::__tree.12" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<const v8::internal::AstRawString *, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<const v8::internal::AstRawString *, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy>::Impl" = type { %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"struct.v8::base::TemplateHashMapEntry" = type <{ %union.anon.19, i32, [4 x i8] }>
%union.anon.19 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::AstRawString" = type <{ %union.anon, %"class.v8::internal::Vector", i32, i8, [3 x i8] }>
%union.anon = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::Vector" = type { i8*, i64 }
%"class.v8::internal::Literal" = type { %"class.v8::internal::Expression", %union.anon.18 }
%"class.v8::internal::Expression" = type { %"class.v8::internal::AstNode" }
%"class.v8::internal::AstNode" = type { i32, i32 }
%union.anon.18 = type { %"class.v8::internal::AstRawString"* }

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN2v88internal11interpreter23CreateArrayLiteralFlags6EncodeEbi(i1 zeroext, i32) local_unnamed_addr #0 align 2 {
  %3 = trunc i32 %1 to i8
  %4 = zext i1 %0 to i8
  %5 = shl nuw nsw i8 %4, 5
  %6 = or i8 %5, %3
  ret i8 %6
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN2v88internal11interpreter24CreateObjectLiteralFlags6EncodeEib(i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = trunc i32 %0 to i8
  %4 = zext i1 %1 to i8
  %5 = shl nuw nsw i8 %4, 5
  %6 = or i8 %5, %3
  ret i8 %6
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN2v88internal11interpreter18CreateClosureFlags6EncodeEbbb(i1 zeroext, i1 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = zext i1 %0 to i8
  %5 = or i1 %0, %2
  %6 = xor i1 %1, true
  %7 = or i1 %5, %6
  %8 = or i8 %4, 2
  %9 = select i1 %7, i8 %4, i8 %8
  ret i8 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZN2v88internal11interpreter15TestTypeOfFlags17GetFlagForLiteralEPKNS0_18AstStringConstantsEPNS0_7LiteralE(%"class.v8::internal::AstStringConstants"* nocapture readonly, %"class.v8::internal::Literal"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Literal", %"class.v8::internal::Literal"* %1, i64 0, i32 1, i32 0
  %4 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::AstStringConstants", %"class.v8::internal::AstStringConstants"* %0, i64 0, i32 40
  %6 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %5, align 8
  %7 = icmp eq %"class.v8::internal::AstRawString"* %4, %6
  br i1 %7, label %37, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.v8::internal::AstStringConstants", %"class.v8::internal::AstStringConstants"* %0, i64 0, i32 49
  %10 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %9, align 8
  %11 = icmp eq %"class.v8::internal::AstRawString"* %4, %10
  br i1 %11, label %37, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.v8::internal::AstStringConstants", %"class.v8::internal::AstStringConstants"* %0, i64 0, i32 50
  %14 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %13, align 8
  %15 = icmp eq %"class.v8::internal::AstRawString"* %4, %14
  br i1 %15, label %37, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.v8::internal::AstStringConstants", %"class.v8::internal::AstStringConstants"* %0, i64 0, i32 11
  %18 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %17, align 8
  %19 = icmp eq %"class.v8::internal::AstRawString"* %4, %18
  br i1 %19, label %37, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.v8::internal::AstStringConstants", %"class.v8::internal::AstStringConstants"* %0, i64 0, i32 10
  %22 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %21, align 8
  %23 = icmp eq %"class.v8::internal::AstRawString"* %4, %22
  br i1 %23, label %37, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"class.v8::internal::AstStringConstants", %"class.v8::internal::AstStringConstants"* %0, i64 0, i32 55
  %26 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %25, align 8
  %27 = icmp eq %"class.v8::internal::AstRawString"* %4, %26
  br i1 %27, label %37, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.v8::internal::AstStringConstants", %"class.v8::internal::AstStringConstants"* %0, i64 0, i32 30
  %30 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %29, align 8
  %31 = icmp eq %"class.v8::internal::AstRawString"* %4, %30
  br i1 %31, label %37, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"class.v8::internal::AstStringConstants", %"class.v8::internal::AstStringConstants"* %0, i64 0, i32 41
  %34 = load %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"** %33, align 8
  %35 = icmp eq %"class.v8::internal::AstRawString"* %4, %34
  %36 = select i1 %35, i8 7, i8 8
  br label %37

37:                                               ; preds = %32, %28, %24, %20, %16, %12, %8, %2
  %38 = phi i8 [ 0, %2 ], [ 1, %8 ], [ 2, %12 ], [ 3, %16 ], [ 4, %20 ], [ 5, %24 ], [ 6, %28 ], [ %36, %32 ]
  ret i8 %38
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN2v88internal11interpreter15TestTypeOfFlags6EncodeENS2_11LiteralFlagE(i8 returned zeroext) local_unnamed_addr #0 align 2 {
  ret i8 %0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN2v88internal11interpreter15TestTypeOfFlags6DecodeEh(i8 returned zeroext) local_unnamed_addr #0 align 2 {
  ret i8 %0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN2v88internal11interpreter20StoreLookupSlotFlags6EncodeENS0_12LanguageModeENS0_18LookupHoistingModeE(i1 zeroext, i32) local_unnamed_addr #0 align 2 {
  %3 = zext i1 %0 to i8
  %4 = icmp ne i32 %1, 0
  %5 = zext i1 %4 to i8
  %6 = shl nuw nsw i8 %5, 1
  %7 = or i8 %6, %3
  ret i8 %7
}

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
