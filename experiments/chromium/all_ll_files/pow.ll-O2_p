; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/pow.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/pow.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, {}*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"struct.tflite::ops::builtin::pow::(anonymous namespace)::OpData" = type { i8 }
%"struct.tflite::ArithmeticParams" = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }
%"struct.tflite::NdArrayDesc" = type { [4 x i32], [4 x i32] }

$_ZN6tflite13optimized_ops18IntegerExponentPowIiEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_iS7_PS8_ = comdat any

$_ZN6tflite13reference_ops18BroadcastPow4DSlowIiEEvRKNS_12RuntimeShapeEPKT_S4_S7_S4_PS5_ = comdat any

$_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_ = comdat any

$_ZN6tflite13optimized_ops18IntegerExponentPowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_iS7_PS8_ = comdat any

$_ZN6tflite13reference_ops18BroadcastPow4DSlowIfEEvRKNS_12RuntimeShapeEPKT_S4_S7_S4_PS5_ = comdat any

@_ZZN6tflite3ops7builtin12Register_POWEvE1r = internal global %struct.TfLiteRegistration { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin3pow12_GLOBAL__N_14InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin3pow12_GLOBAL__N_14FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin3pow12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin3pow12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.4 = private unnamed_addr constant [60 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/pow.cc\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.9 = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%s != %s)\00", align 1
@.str.10 = private unnamed_addr constant [13 x i8] c"input1->type\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"input2->type\00", align 1
@.str.12 = private unnamed_addr constant [26 x i8] c"Unsupported data type %s.\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"Unsupported data type: %d\00", align 1
@.str.14 = private unnamed_addr constant [47 x i8] c"POW does not support negative value for int32.\00", align 1
@__const._ZN6tflite13optimized_ops14BroadcastPow4DIfEEvRKNS_12RuntimeShapeEPKT_S4_S7_S4_PS5_.params = private unnamed_addr constant { i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] } { i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, [5 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766] }, align 4
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin12Register_POWEv() local_unnamed_addr #0 {
  ret %struct.TfLiteRegistration* @_ZZN6tflite3ops7builtin12Register_POWEvE1r
}

; Function Attrs: nofree nounwind ssp uwtable
define internal noalias nonnull i8* @_ZN6tflite3ops7builtin3pow12_GLOBAL__N_14InitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8* nocapture readnone, i64) #1 {
  %4 = tail call i8* @_Znwm(i64 1) #11
  store i8 0, i8* %4, align 1
  ret i8* %4
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN6tflite3ops7builtin3pow12_GLOBAL__N_14FreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #2 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #11
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN6tflite3ops7builtin3pow12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #2 {
  %3 = alloca %struct.TfLiteIntArray*, align 8
  %4 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %5 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 2
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %11 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %10, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %11(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.4, i64 0, i64 0), i32 52, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i32 %7, i32 2) #12
  br label %98

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %14 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %13, align 8
  %15 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %14, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %21, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %20 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %19, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %20(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.4, i64 0, i64 0), i32 53, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i32 %16, i32 1) #12
  br label %98

21:                                               ; preds = %12
  %22 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %23 = bitcast i8** %22 to %"struct.tflite::ops::builtin::pow::(anonymous namespace)::OpData"**
  %24 = load %"struct.tflite::ops::builtin::pow::(anonymous namespace)::OpData"*, %"struct.tflite::ops::builtin::pow::(anonymous namespace)::OpData"** %23, align 8
  %25 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %5, i64 0, i32 1, i64 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %21
  %29 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %30 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %29, align 8
  %31 = sext i32 %26 to i64
  %32 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %31
  br label %33

33:                                               ; preds = %21, %28
  %34 = phi %struct.TfLiteTensor* [ %32, %28 ], [ null, %21 ]
  %35 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %5, i64 0, i32 1, i64 1
  %36 = load i32, i32* %35, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %43, label %38

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %40 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %39, align 8
  %41 = sext i32 %36 to i64
  %42 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 %41
  br label %43

43:                                               ; preds = %33, %38
  %44 = phi %struct.TfLiteTensor* [ %42, %38 ], [ null, %33 ]
  %45 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %14, i64 0, i32 1, i64 0
  %46 = load i32, i32* %45, align 4
  %47 = icmp slt i32 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %50 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %49, align 8
  %51 = sext i32 %46 to i64
  %52 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %50, i64 %51
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi %struct.TfLiteTensor* [ %52, %48 ], [ null, %43 ]
  %55 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 0
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %44, i64 0, i32 0
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %56, %58
  br i1 %59, label %66, label %60

60:                                               ; preds = %53
  %61 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %62 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %61, align 8
  %63 = tail call i8* @TfLiteTypeGetName(i32 %56) #12
  %64 = load i32, i32* %57, align 8
  %65 = tail call i8* @TfLiteTypeGetName(i32 %64) #12
  tail call void (%struct.TfLiteContext*, i8*, ...) %62(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.4, i64 0, i64 0), i32 61, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i8* %63, i8* %65) #12
  br label %98

66:                                               ; preds = %53
  %67 = add i32 %56, -1
  %68 = icmp ugt i32 %67, 1
  br i1 %68, label %69, label %73

69:                                               ; preds = %66
  %70 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %71 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %70, align 8
  %72 = tail call i8* @TfLiteTypeGetName(i32 %56) #12
  tail call void (%struct.TfLiteContext*, i8*, ...) %71(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.12, i64 0, i64 0), i8* %72) #12
  br label %98

73:                                               ; preds = %66
  %74 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %54, i64 0, i32 0
  store i32 %56, i32* %74, align 8
  %75 = tail call zeroext i1 @_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_(%struct.TfLiteTensor* %34, %struct.TfLiteTensor* %44) #12
  %76 = xor i1 %75, true
  %77 = getelementptr inbounds %"struct.tflite::ops::builtin::pow::(anonymous namespace)::OpData", %"struct.tflite::ops::builtin::pow::(anonymous namespace)::OpData"* %24, i64 0, i32 0
  %78 = zext i1 %76 to i8
  store i8 %78, i8* %77, align 1
  %79 = bitcast %struct.TfLiteIntArray** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %79) #12
  store %struct.TfLiteIntArray* null, %struct.TfLiteIntArray** %3, align 8
  %80 = load i8, i8* %77, align 1, !range !2
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %87, label %82

82:                                               ; preds = %73
  %83 = call i32 @_ZN6tflite26CalculateShapeForBroadcastEP13TfLiteContextPK12TfLiteTensorS4_PP14TfLiteIntArray(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %34, %struct.TfLiteTensor* %44, %struct.TfLiteIntArray** nonnull %3) #12
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %96

85:                                               ; preds = %82
  %86 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  br label %91

87:                                               ; preds = %73
  %88 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %34, i64 0, i32 2
  %89 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %88, align 8
  %90 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %89) #12
  store %struct.TfLiteIntArray* %90, %struct.TfLiteIntArray** %3, align 8
  br label %91

91:                                               ; preds = %85, %87
  %92 = phi %struct.TfLiteIntArray* [ %86, %85 ], [ %90, %87 ]
  %93 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %94 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %93, align 8
  %95 = call i32 %94(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %54, %struct.TfLiteIntArray* %92) #12
  br label %96

96:                                               ; preds = %82, %91
  %97 = phi i32 [ %95, %91 ], [ %83, %82 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %79) #12
  br label %98

98:                                               ; preds = %60, %96, %69, %18, %9
  %99 = phi i32 [ 1, %9 ], [ 1, %18 ], [ 1, %60 ], [ 1, %69 ], [ %97, %96 ]
  ret i32 %99
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN6tflite3ops7builtin3pow12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #2 {
  %3 = alloca %"struct.tflite::ArithmeticParams", align 4
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"class.tflite::RuntimeShape", align 8
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"struct.tflite::ArithmeticParams", align 4
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = alloca %"class.tflite::RuntimeShape", align 8
  %14 = alloca %"class.tflite::RuntimeShape", align 8
  %15 = alloca %"class.tflite::RuntimeShape", align 8
  %16 = alloca %"class.tflite::RuntimeShape", align 8
  %17 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %18 = bitcast i8** %17 to %"struct.tflite::ops::builtin::pow::(anonymous namespace)::OpData"**
  %19 = load %"struct.tflite::ops::builtin::pow::(anonymous namespace)::OpData"*, %"struct.tflite::ops::builtin::pow::(anonymous namespace)::OpData"** %18, align 8
  %20 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %21 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %20, align 8
  %22 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %21, i64 0, i32 1, i64 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %2
  %26 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %27 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %26, align 8
  %28 = sext i32 %23 to i64
  %29 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %27, i64 %28
  br label %30

30:                                               ; preds = %2, %25
  %31 = phi %struct.TfLiteTensor* [ %29, %25 ], [ null, %2 ]
  %32 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %21, i64 0, i32 1, i64 1
  %33 = load i32, i32* %32, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %40, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %37 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %36, align 8
  %38 = sext i32 %33 to i64
  %39 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %37, i64 %38
  br label %40

40:                                               ; preds = %30, %35
  %41 = phi %struct.TfLiteTensor* [ %39, %35 ], [ null, %30 ]
  %42 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %43 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %42, align 8
  %44 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %43, i64 0, i32 1, i64 0
  %45 = load i32, i32* %44, align 4
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %40
  %48 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %49 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %48, align 8
  %50 = sext i32 %45 to i64
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %49, i64 %50
  br label %52

52:                                               ; preds = %40, %47
  %53 = phi %struct.TfLiteTensor* [ %51, %47 ], [ null, %40 ]
  %54 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 0
  %55 = load i32, i32* %54, align 8
  switch i32 %55, label %1247 [
    i32 2, label %56
    i32 1, label %685
  ]

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %41, i64 0, i32 2
  %58 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %57, align 8
  %59 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %58, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = icmp sgt i32 %60, 0
  br i1 %61, label %62, label %131

62:                                               ; preds = %56
  %63 = sext i32 %60 to i64
  %64 = add nsw i64 %63, -1
  %65 = and i64 %63, 7
  %66 = icmp ult i64 %64, 7
  br i1 %66, label %115, label %67

67:                                               ; preds = %62
  %68 = sub nsw i64 %63, %65
  br label %69

69:                                               ; preds = %69, %67
  %70 = phi i64 [ 0, %67 ], [ %112, %69 ]
  %71 = phi i64 [ 1, %67 ], [ %111, %69 ]
  %72 = phi i64 [ %68, %67 ], [ %113, %69 ]
  %73 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %58, i64 0, i32 1, i64 %70
  %74 = load i32, i32* %73, align 4
  %75 = sext i32 %74 to i64
  %76 = mul nsw i64 %71, %75
  %77 = or i64 %70, 1
  %78 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %58, i64 0, i32 1, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = sext i32 %79 to i64
  %81 = mul nsw i64 %76, %80
  %82 = or i64 %70, 2
  %83 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %58, i64 0, i32 1, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = sext i32 %84 to i64
  %86 = mul nsw i64 %81, %85
  %87 = or i64 %70, 3
  %88 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %58, i64 0, i32 1, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = sext i32 %89 to i64
  %91 = mul nsw i64 %86, %90
  %92 = or i64 %70, 4
  %93 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %58, i64 0, i32 1, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = sext i32 %94 to i64
  %96 = mul nsw i64 %91, %95
  %97 = or i64 %70, 5
  %98 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %58, i64 0, i32 1, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = sext i32 %99 to i64
  %101 = mul nsw i64 %96, %100
  %102 = or i64 %70, 6
  %103 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %58, i64 0, i32 1, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = sext i32 %104 to i64
  %106 = mul nsw i64 %101, %105
  %107 = or i64 %70, 7
  %108 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %58, i64 0, i32 1, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = sext i32 %109 to i64
  %111 = mul nsw i64 %106, %110
  %112 = add nuw nsw i64 %70, 8
  %113 = add i64 %72, -8
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %69

115:                                              ; preds = %69, %62
  %116 = phi i64 [ undef, %62 ], [ %111, %69 ]
  %117 = phi i64 [ 0, %62 ], [ %112, %69 ]
  %118 = phi i64 [ 1, %62 ], [ %111, %69 ]
  %119 = icmp eq i64 %65, 0
  br i1 %119, label %131, label %120

120:                                              ; preds = %115, %120
  %121 = phi i64 [ %128, %120 ], [ %117, %115 ]
  %122 = phi i64 [ %127, %120 ], [ %118, %115 ]
  %123 = phi i64 [ %129, %120 ], [ %65, %115 ]
  %124 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %58, i64 0, i32 1, i64 %121
  %125 = load i32, i32* %124, align 4
  %126 = sext i32 %125 to i64
  %127 = mul nsw i64 %122, %126
  %128 = add nuw nsw i64 %121, 1
  %129 = add i64 %123, -1
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %120, !llvm.loop !3

131:                                              ; preds = %115, %120, %56
  %132 = phi i64 [ 1, %56 ], [ %116, %115 ], [ %127, %120 ]
  %133 = icmp eq %struct.TfLiteTensor* %41, null
  br i1 %133, label %137, label %134

134:                                              ; preds = %131
  %135 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %41, i64 0, i32 1, i32 0
  %136 = load i32*, i32** %135, align 8
  br label %137

137:                                              ; preds = %134, %131
  %138 = phi i32* [ %136, %134 ], [ null, %131 ]
  %139 = icmp sgt i64 %132, 0
  br i1 %139, label %142, label %151

140:                                              ; preds = %142
  %141 = icmp eq i64 %147, %132
  br i1 %141, label %151, label %142

142:                                              ; preds = %137, %140
  %143 = phi i64 [ %147, %140 ], [ 0, %137 ]
  %144 = getelementptr inbounds i32, i32* %138, i64 %143
  %145 = load i32, i32* %144, align 4
  %146 = icmp slt i32 %145, 0
  %147 = add nuw nsw i64 %143, 1
  br i1 %146, label %148, label %140

148:                                              ; preds = %142
  %149 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %150 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %149, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %150(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.14, i64 0, i64 0)) #12
  br label %1250

151:                                              ; preds = %140, %137
  %152 = getelementptr inbounds %"struct.tflite::ops::builtin::pow::(anonymous namespace)::OpData", %"struct.tflite::ops::builtin::pow::(anonymous namespace)::OpData"* %19, i64 0, i32 0
  %153 = load i8, i8* %152, align 1, !range !2
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %404, label %155

155:                                              ; preds = %151
  %156 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %156) #12
  %157 = icmp eq %struct.TfLiteTensor* %31, null
  br i1 %157, label %158, label %160

158:                                              ; preds = %155
  %159 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %159, align 8, !alias.scope !5
  br label %187

160:                                              ; preds = %155
  %161 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 2
  %162 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %161, align 8, !noalias !5
  %163 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %162, i64 0, i32 0
  %164 = load i32, i32* %163, align 4, !noalias !5
  %165 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %162, i64 0, i32 1, i64 0
  %166 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %164, i32* %166, align 8, !alias.scope !5
  %167 = icmp sgt i32 %164, 5
  br i1 %167, label %168, label %175

168:                                              ; preds = %160
  %169 = sext i32 %164 to i64
  %170 = shl nsw i64 %169, 2
  %171 = tail call i8* @_Znam(i64 %170) #11, !noalias !5
  %172 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %173 = bitcast i32** %172 to i8**
  store i8* %171, i8** %173, align 8, !alias.scope !5
  %174 = bitcast i8* %171 to i32*
  br label %180

175:                                              ; preds = %160
  %176 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %177 = bitcast %union.anon* %176 to i32*
  %178 = sext i32 %164 to i64
  %179 = shl nsw i64 %178, 2
  br label %180

180:                                              ; preds = %175, %168
  %181 = phi i64 [ %170, %168 ], [ %179, %175 ]
  %182 = phi i32* [ %174, %168 ], [ %177, %175 ]
  %183 = bitcast i32* %182 to i8*
  %184 = bitcast i32* %165 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %183, i8* align 4 %184, i64 %181, i1 false) #12
  %185 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1, i32 0
  %186 = load i32*, i32** %185, align 8
  br label %187

187:                                              ; preds = %180, %158
  %188 = phi i32* [ %186, %180 ], [ null, %158 ]
  %189 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %189) #12
  br i1 %133, label %190, label %192

190:                                              ; preds = %187
  %191 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %191, align 8, !alias.scope !8
  br label %218

192:                                              ; preds = %187
  %193 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %57, align 8, !noalias !8
  %194 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %193, i64 0, i32 0
  %195 = load i32, i32* %194, align 4, !noalias !8
  %196 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %193, i64 0, i32 1, i64 0
  %197 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 %195, i32* %197, align 8, !alias.scope !8
  %198 = icmp sgt i32 %195, 5
  br i1 %198, label %199, label %206

199:                                              ; preds = %192
  %200 = sext i32 %195 to i64
  %201 = shl nsw i64 %200, 2
  %202 = tail call i8* @_Znam(i64 %201) #11, !noalias !8
  %203 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %204 = bitcast i32** %203 to i8**
  store i8* %202, i8** %204, align 8, !alias.scope !8
  %205 = bitcast i8* %202 to i32*
  br label %211

206:                                              ; preds = %192
  %207 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %208 = bitcast %union.anon* %207 to i32*
  %209 = sext i32 %195 to i64
  %210 = shl nsw i64 %209, 2
  br label %211

211:                                              ; preds = %206, %199
  %212 = phi i64 [ %201, %199 ], [ %210, %206 ]
  %213 = phi i32* [ %205, %199 ], [ %208, %206 ]
  %214 = bitcast i32* %213 to i8*
  %215 = bitcast i32* %196 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %214, i8* align 4 %215, i64 %212, i1 false) #12
  %216 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %41, i64 0, i32 1, i32 0
  %217 = load i32*, i32** %216, align 8
  br label %218

218:                                              ; preds = %211, %190
  %219 = phi i32 [ %195, %211 ], [ 0, %190 ]
  %220 = phi i32* [ %217, %211 ], [ null, %190 ]
  %221 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %221) #12
  %222 = icmp eq %struct.TfLiteTensor* %53, null
  br i1 %222, label %223, label %225

223:                                              ; preds = %218
  %224 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %224, align 8, !alias.scope !11
  br label %252

225:                                              ; preds = %218
  %226 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 2
  %227 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %226, align 8, !noalias !11
  %228 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %227, i64 0, i32 0
  %229 = load i32, i32* %228, align 4, !noalias !11
  %230 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %227, i64 0, i32 1, i64 0
  %231 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 %229, i32* %231, align 8, !alias.scope !11
  %232 = icmp sgt i32 %229, 5
  br i1 %232, label %233, label %240

233:                                              ; preds = %225
  %234 = sext i32 %229 to i64
  %235 = shl nsw i64 %234, 2
  %236 = tail call i8* @_Znam(i64 %235) #11, !noalias !11
  %237 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %238 = bitcast i32** %237 to i8**
  store i8* %236, i8** %238, align 8, !alias.scope !11
  %239 = bitcast i8* %236 to i32*
  br label %245

240:                                              ; preds = %225
  %241 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %242 = bitcast %union.anon* %241 to i32*
  %243 = sext i32 %229 to i64
  %244 = shl nsw i64 %243, 2
  br label %245

245:                                              ; preds = %240, %233
  %246 = phi i64 [ %235, %233 ], [ %244, %240 ]
  %247 = phi i32* [ %239, %233 ], [ %242, %240 ]
  %248 = bitcast i32* %247 to i8*
  %249 = bitcast i32* %230 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %248, i8* align 4 %249, i64 %246, i1 false) #12
  %250 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 1, i32 0
  %251 = load i32*, i32** %250, align 8
  br label %252

252:                                              ; preds = %245, %223
  %253 = phi i32* [ %251, %245 ], [ null, %223 ]
  %254 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %255 = icmp sgt i32 %219, 5
  %256 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  br i1 %255, label %257, label %260

257:                                              ; preds = %252
  %258 = getelementptr inbounds %union.anon, %union.anon* %256, i64 0, i32 0
  %259 = load i32*, i32** %258, align 8
  br label %263

260:                                              ; preds = %252
  %261 = bitcast %union.anon* %256 to i32*
  %262 = icmp sgt i32 %219, 0
  br i1 %262, label %263, label %366

263:                                              ; preds = %260, %257
  %264 = phi i32* [ %259, %257 ], [ %261, %260 ]
  %265 = zext i32 %219 to i64
  %266 = icmp ult i32 %219, 8
  br i1 %266, label %352, label %267

267:                                              ; preds = %263
  %268 = and i64 %265, 4294967288
  %269 = add nsw i64 %268, -8
  %270 = lshr exact i64 %269, 3
  %271 = add nuw nsw i64 %270, 1
  %272 = and i64 %271, 3
  %273 = icmp ult i64 %269, 24
  br i1 %273, label %319, label %274

274:                                              ; preds = %267
  %275 = sub nsw i64 %271, %272
  br label %276

276:                                              ; preds = %276, %274
  %277 = phi i64 [ 0, %274 ], [ %316, %276 ]
  %278 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %274 ], [ %314, %276 ]
  %279 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %274 ], [ %315, %276 ]
  %280 = phi i64 [ %275, %274 ], [ %317, %276 ]
  %281 = getelementptr inbounds i32, i32* %264, i64 %277
  %282 = bitcast i32* %281 to <4 x i32>*
  %283 = load <4 x i32>, <4 x i32>* %282, align 4
  %284 = getelementptr inbounds i32, i32* %281, i64 4
  %285 = bitcast i32* %284 to <4 x i32>*
  %286 = load <4 x i32>, <4 x i32>* %285, align 4
  %287 = mul nsw <4 x i32> %283, %278
  %288 = mul nsw <4 x i32> %286, %279
  %289 = or i64 %277, 8
  %290 = getelementptr inbounds i32, i32* %264, i64 %289
  %291 = bitcast i32* %290 to <4 x i32>*
  %292 = load <4 x i32>, <4 x i32>* %291, align 4
  %293 = getelementptr inbounds i32, i32* %290, i64 4
  %294 = bitcast i32* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 4
  %296 = mul nsw <4 x i32> %292, %287
  %297 = mul nsw <4 x i32> %295, %288
  %298 = or i64 %277, 16
  %299 = getelementptr inbounds i32, i32* %264, i64 %298
  %300 = bitcast i32* %299 to <4 x i32>*
  %301 = load <4 x i32>, <4 x i32>* %300, align 4
  %302 = getelementptr inbounds i32, i32* %299, i64 4
  %303 = bitcast i32* %302 to <4 x i32>*
  %304 = load <4 x i32>, <4 x i32>* %303, align 4
  %305 = mul nsw <4 x i32> %301, %296
  %306 = mul nsw <4 x i32> %304, %297
  %307 = or i64 %277, 24
  %308 = getelementptr inbounds i32, i32* %264, i64 %307
  %309 = bitcast i32* %308 to <4 x i32>*
  %310 = load <4 x i32>, <4 x i32>* %309, align 4
  %311 = getelementptr inbounds i32, i32* %308, i64 4
  %312 = bitcast i32* %311 to <4 x i32>*
  %313 = load <4 x i32>, <4 x i32>* %312, align 4
  %314 = mul nsw <4 x i32> %310, %305
  %315 = mul nsw <4 x i32> %313, %306
  %316 = add i64 %277, 32
  %317 = add i64 %280, -4
  %318 = icmp eq i64 %317, 0
  br i1 %318, label %319, label %276, !llvm.loop !14

319:                                              ; preds = %276, %267
  %320 = phi <4 x i32> [ undef, %267 ], [ %314, %276 ]
  %321 = phi <4 x i32> [ undef, %267 ], [ %315, %276 ]
  %322 = phi i64 [ 0, %267 ], [ %316, %276 ]
  %323 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %267 ], [ %314, %276 ]
  %324 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %267 ], [ %315, %276 ]
  %325 = icmp eq i64 %272, 0
  br i1 %325, label %342, label %326

326:                                              ; preds = %319, %326
  %327 = phi i64 [ %339, %326 ], [ %322, %319 ]
  %328 = phi <4 x i32> [ %337, %326 ], [ %323, %319 ]
  %329 = phi <4 x i32> [ %338, %326 ], [ %324, %319 ]
  %330 = phi i64 [ %340, %326 ], [ %272, %319 ]
  %331 = getelementptr inbounds i32, i32* %264, i64 %327
  %332 = bitcast i32* %331 to <4 x i32>*
  %333 = load <4 x i32>, <4 x i32>* %332, align 4
  %334 = getelementptr inbounds i32, i32* %331, i64 4
  %335 = bitcast i32* %334 to <4 x i32>*
  %336 = load <4 x i32>, <4 x i32>* %335, align 4
  %337 = mul nsw <4 x i32> %333, %328
  %338 = mul nsw <4 x i32> %336, %329
  %339 = add i64 %327, 8
  %340 = add i64 %330, -1
  %341 = icmp eq i64 %340, 0
  br i1 %341, label %342, label %326, !llvm.loop !16

342:                                              ; preds = %326, %319
  %343 = phi <4 x i32> [ %320, %319 ], [ %337, %326 ]
  %344 = phi <4 x i32> [ %321, %319 ], [ %338, %326 ]
  %345 = mul <4 x i32> %344, %343
  %346 = shufflevector <4 x i32> %345, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %347 = mul <4 x i32> %345, %346
  %348 = shufflevector <4 x i32> %347, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %349 = mul <4 x i32> %347, %348
  %350 = extractelement <4 x i32> %349, i32 0
  %351 = icmp eq i64 %268, %265
  br i1 %351, label %363, label %352

352:                                              ; preds = %342, %263
  %353 = phi i64 [ 0, %263 ], [ %268, %342 ]
  %354 = phi i32 [ 1, %263 ], [ %350, %342 ]
  br label %355

355:                                              ; preds = %352, %355
  %356 = phi i64 [ %361, %355 ], [ %353, %352 ]
  %357 = phi i32 [ %360, %355 ], [ %354, %352 ]
  %358 = getelementptr inbounds i32, i32* %264, i64 %356
  %359 = load i32, i32* %358, align 4
  %360 = mul nsw i32 %359, %357
  %361 = add nuw nsw i64 %356, 1
  %362 = icmp eq i64 %361, %265
  br i1 %362, label %363, label %355, !llvm.loop !17

363:                                              ; preds = %355, %342
  %364 = phi i32 [ %350, %342 ], [ %360, %355 ]
  %365 = icmp eq i32 %364, 1
  br i1 %365, label %366, label %373

366:                                              ; preds = %363, %260
  %367 = load i32, i32* %220, align 4
  %368 = icmp sgt i32 %367, 0
  br i1 %368, label %369, label %373

369:                                              ; preds = %366
  %370 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %3, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %370) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %370, i8* align 4 getelementptr inbounds ({ i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }, { i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }* @__const._ZN6tflite13optimized_ops14BroadcastPow4DIfEEvRKNS_12RuntimeShapeEPKT_S4_S7_S4_PS5_.params, i64 0, i32 0), i64 80, i1 false) #12
  %371 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %3, i64 0, i32 12
  store i32 2147483647, i32* %371, align 4
  %372 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %3, i64 0, i32 11
  store i32 -2147483648, i32* %372, align 4
  call void @_ZN6tflite13optimized_ops18IntegerExponentPowIiEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_iS7_PS8_(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %3, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %4, i32* %188, i32 %367, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, i32* %253) #12
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %370) #12
  br label %374

373:                                              ; preds = %366, %363
  call void @_ZN6tflite13reference_ops18BroadcastPow4DSlowIiEEvRKNS_12RuntimeShapeEPKT_S4_S7_S4_PS5_(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %4, i32* %188, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %5, i32* %220, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %6, i32* %253) #12
  br label %374

374:                                              ; preds = %373, %369
  %375 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  %376 = load i32, i32* %375, align 8
  %377 = icmp sgt i32 %376, 5
  br i1 %377, label %378, label %384

378:                                              ; preds = %374
  %379 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %380 = load i32*, i32** %379, align 8
  %381 = icmp eq i32* %380, null
  br i1 %381, label %384, label %382

382:                                              ; preds = %378
  %383 = bitcast i32* %380 to i8*
  call void @_ZdaPv(i8* %383) #11
  br label %384

384:                                              ; preds = %382, %378, %374
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %221) #12
  %385 = load i32, i32* %254, align 8
  %386 = icmp sgt i32 %385, 5
  br i1 %386, label %387, label %393

387:                                              ; preds = %384
  %388 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %389 = load i32*, i32** %388, align 8
  %390 = icmp eq i32* %389, null
  br i1 %390, label %393, label %391

391:                                              ; preds = %387
  %392 = bitcast i32* %389 to i8*
  call void @_ZdaPv(i8* %392) #11
  br label %393

393:                                              ; preds = %391, %387, %384
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %189) #12
  %394 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %395 = load i32, i32* %394, align 8
  %396 = icmp sgt i32 %395, 5
  br i1 %396, label %397, label %403

397:                                              ; preds = %393
  %398 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %399 = load i32*, i32** %398, align 8
  %400 = icmp eq i32* %399, null
  br i1 %400, label %403, label %401

401:                                              ; preds = %397
  %402 = bitcast i32* %399 to i8*
  call void @_ZdaPv(i8* %402) #11
  br label %403

403:                                              ; preds = %401, %397, %393
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %156) #12
  br label %1250

404:                                              ; preds = %151
  %405 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %405) #12
  %406 = icmp eq %struct.TfLiteTensor* %31, null
  br i1 %406, label %407, label %409

407:                                              ; preds = %404
  %408 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %408, align 8, !alias.scope !19
  br label %436

409:                                              ; preds = %404
  %410 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 2
  %411 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %410, align 8, !noalias !19
  %412 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %411, i64 0, i32 0
  %413 = load i32, i32* %412, align 4, !noalias !19
  %414 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %411, i64 0, i32 1, i64 0
  %415 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 %413, i32* %415, align 8, !alias.scope !19
  %416 = icmp sgt i32 %413, 5
  br i1 %416, label %417, label %424

417:                                              ; preds = %409
  %418 = sext i32 %413 to i64
  %419 = shl nsw i64 %418, 2
  %420 = tail call i8* @_Znam(i64 %419) #11, !noalias !19
  %421 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %422 = bitcast i32** %421 to i8**
  store i8* %420, i8** %422, align 8, !alias.scope !19
  %423 = bitcast i8* %420 to i32*
  br label %429

424:                                              ; preds = %409
  %425 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %426 = bitcast %union.anon* %425 to i32*
  %427 = sext i32 %413 to i64
  %428 = shl nsw i64 %427, 2
  br label %429

429:                                              ; preds = %424, %417
  %430 = phi i64 [ %419, %417 ], [ %428, %424 ]
  %431 = phi i32* [ %423, %417 ], [ %426, %424 ]
  %432 = bitcast i32* %431 to i8*
  %433 = bitcast i32* %414 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %432, i8* align 4 %433, i64 %430, i1 false) #12
  %434 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1, i32 0
  %435 = load i32*, i32** %434, align 8
  br label %436

436:                                              ; preds = %429, %407
  %437 = phi i32 [ %413, %429 ], [ 0, %407 ]
  %438 = phi i32* [ %435, %429 ], [ null, %407 ]
  %439 = bitcast %"class.tflite::RuntimeShape"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %439) #12
  br i1 %133, label %440, label %442

440:                                              ; preds = %436
  %441 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 0, i32* %441, align 8, !alias.scope !22
  br label %468

442:                                              ; preds = %436
  %443 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %57, align 8, !noalias !22
  %444 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %443, i64 0, i32 0
  %445 = load i32, i32* %444, align 4, !noalias !22
  %446 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %443, i64 0, i32 1, i64 0
  %447 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 0
  store i32 %445, i32* %447, align 8, !alias.scope !22
  %448 = icmp sgt i32 %445, 5
  br i1 %448, label %449, label %456

449:                                              ; preds = %442
  %450 = sext i32 %445 to i64
  %451 = shl nsw i64 %450, 2
  %452 = tail call i8* @_Znam(i64 %451) #11, !noalias !22
  %453 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %454 = bitcast i32** %453 to i8**
  store i8* %452, i8** %454, align 8, !alias.scope !22
  %455 = bitcast i8* %452 to i32*
  br label %461

456:                                              ; preds = %442
  %457 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1
  %458 = bitcast %union.anon* %457 to i32*
  %459 = sext i32 %445 to i64
  %460 = shl nsw i64 %459, 2
  br label %461

461:                                              ; preds = %456, %449
  %462 = phi i64 [ %451, %449 ], [ %460, %456 ]
  %463 = phi i32* [ %455, %449 ], [ %458, %456 ]
  %464 = bitcast i32* %463 to i8*
  %465 = bitcast i32* %446 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %464, i8* align 4 %465, i64 %462, i1 false) #12
  %466 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %41, i64 0, i32 1, i32 0
  %467 = load i32*, i32** %466, align 8
  br label %468

468:                                              ; preds = %461, %440
  %469 = phi i32 [ %445, %461 ], [ 0, %440 ]
  %470 = phi i32* [ %467, %461 ], [ null, %440 ]
  %471 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %471) #12
  %472 = icmp eq %struct.TfLiteTensor* %53, null
  br i1 %472, label %473, label %475

473:                                              ; preds = %468
  %474 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %474, align 8, !alias.scope !25
  br label %502

475:                                              ; preds = %468
  %476 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 2
  %477 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %476, align 8, !noalias !25
  %478 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %477, i64 0, i32 0
  %479 = load i32, i32* %478, align 4, !noalias !25
  %480 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %477, i64 0, i32 1, i64 0
  %481 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %479, i32* %481, align 8, !alias.scope !25
  %482 = icmp sgt i32 %479, 5
  br i1 %482, label %483, label %490

483:                                              ; preds = %475
  %484 = sext i32 %479 to i64
  %485 = shl nsw i64 %484, 2
  %486 = tail call i8* @_Znam(i64 %485) #11, !noalias !25
  %487 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %488 = bitcast i32** %487 to i8**
  store i8* %486, i8** %488, align 8, !alias.scope !25
  %489 = bitcast i8* %486 to i32*
  br label %495

490:                                              ; preds = %475
  %491 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %492 = bitcast %union.anon* %491 to i32*
  %493 = sext i32 %479 to i64
  %494 = shl nsw i64 %493, 2
  br label %495

495:                                              ; preds = %490, %483
  %496 = phi i64 [ %485, %483 ], [ %494, %490 ]
  %497 = phi i32* [ %489, %483 ], [ %492, %490 ]
  %498 = bitcast i32* %497 to i8*
  %499 = bitcast i32* %480 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %498, i8* align 4 %499, i64 %496, i1 false) #12
  %500 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 1, i32 0
  %501 = load i32*, i32** %500, align 8
  br label %502

502:                                              ; preds = %495, %473
  %503 = phi i32 [ %479, %495 ], [ 0, %473 ]
  %504 = phi i32* [ %501, %495 ], [ null, %473 ]
  %505 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  %506 = icmp sgt i32 %437, 5
  br i1 %506, label %507, label %510

507:                                              ; preds = %502
  %508 = getelementptr inbounds %union.anon, %union.anon* %505, i64 0, i32 0
  %509 = load i32*, i32** %508, align 8
  br label %513

510:                                              ; preds = %502
  %511 = bitcast %union.anon* %505 to i32*
  %512 = icmp sgt i32 %437, 0
  br i1 %512, label %513, label %616

513:                                              ; preds = %510, %507
  %514 = phi i32* [ %509, %507 ], [ %511, %510 ]
  %515 = zext i32 %437 to i64
  %516 = icmp ult i32 %437, 8
  br i1 %516, label %602, label %517

517:                                              ; preds = %513
  %518 = and i64 %515, 4294967288
  %519 = add nsw i64 %518, -8
  %520 = lshr exact i64 %519, 3
  %521 = add nuw nsw i64 %520, 1
  %522 = and i64 %521, 3
  %523 = icmp ult i64 %519, 24
  br i1 %523, label %569, label %524

524:                                              ; preds = %517
  %525 = sub nsw i64 %521, %522
  br label %526

526:                                              ; preds = %526, %524
  %527 = phi i64 [ 0, %524 ], [ %566, %526 ]
  %528 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %524 ], [ %564, %526 ]
  %529 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %524 ], [ %565, %526 ]
  %530 = phi i64 [ %525, %524 ], [ %567, %526 ]
  %531 = getelementptr inbounds i32, i32* %514, i64 %527
  %532 = bitcast i32* %531 to <4 x i32>*
  %533 = load <4 x i32>, <4 x i32>* %532, align 4
  %534 = getelementptr inbounds i32, i32* %531, i64 4
  %535 = bitcast i32* %534 to <4 x i32>*
  %536 = load <4 x i32>, <4 x i32>* %535, align 4
  %537 = mul nsw <4 x i32> %533, %528
  %538 = mul nsw <4 x i32> %536, %529
  %539 = or i64 %527, 8
  %540 = getelementptr inbounds i32, i32* %514, i64 %539
  %541 = bitcast i32* %540 to <4 x i32>*
  %542 = load <4 x i32>, <4 x i32>* %541, align 4
  %543 = getelementptr inbounds i32, i32* %540, i64 4
  %544 = bitcast i32* %543 to <4 x i32>*
  %545 = load <4 x i32>, <4 x i32>* %544, align 4
  %546 = mul nsw <4 x i32> %542, %537
  %547 = mul nsw <4 x i32> %545, %538
  %548 = or i64 %527, 16
  %549 = getelementptr inbounds i32, i32* %514, i64 %548
  %550 = bitcast i32* %549 to <4 x i32>*
  %551 = load <4 x i32>, <4 x i32>* %550, align 4
  %552 = getelementptr inbounds i32, i32* %549, i64 4
  %553 = bitcast i32* %552 to <4 x i32>*
  %554 = load <4 x i32>, <4 x i32>* %553, align 4
  %555 = mul nsw <4 x i32> %551, %546
  %556 = mul nsw <4 x i32> %554, %547
  %557 = or i64 %527, 24
  %558 = getelementptr inbounds i32, i32* %514, i64 %557
  %559 = bitcast i32* %558 to <4 x i32>*
  %560 = load <4 x i32>, <4 x i32>* %559, align 4
  %561 = getelementptr inbounds i32, i32* %558, i64 4
  %562 = bitcast i32* %561 to <4 x i32>*
  %563 = load <4 x i32>, <4 x i32>* %562, align 4
  %564 = mul nsw <4 x i32> %560, %555
  %565 = mul nsw <4 x i32> %563, %556
  %566 = add i64 %527, 32
  %567 = add i64 %530, -4
  %568 = icmp eq i64 %567, 0
  br i1 %568, label %569, label %526, !llvm.loop !28

569:                                              ; preds = %526, %517
  %570 = phi <4 x i32> [ undef, %517 ], [ %564, %526 ]
  %571 = phi <4 x i32> [ undef, %517 ], [ %565, %526 ]
  %572 = phi i64 [ 0, %517 ], [ %566, %526 ]
  %573 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %517 ], [ %564, %526 ]
  %574 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %517 ], [ %565, %526 ]
  %575 = icmp eq i64 %522, 0
  br i1 %575, label %592, label %576

576:                                              ; preds = %569, %576
  %577 = phi i64 [ %589, %576 ], [ %572, %569 ]
  %578 = phi <4 x i32> [ %587, %576 ], [ %573, %569 ]
  %579 = phi <4 x i32> [ %588, %576 ], [ %574, %569 ]
  %580 = phi i64 [ %590, %576 ], [ %522, %569 ]
  %581 = getelementptr inbounds i32, i32* %514, i64 %577
  %582 = bitcast i32* %581 to <4 x i32>*
  %583 = load <4 x i32>, <4 x i32>* %582, align 4
  %584 = getelementptr inbounds i32, i32* %581, i64 4
  %585 = bitcast i32* %584 to <4 x i32>*
  %586 = load <4 x i32>, <4 x i32>* %585, align 4
  %587 = mul nsw <4 x i32> %583, %578
  %588 = mul nsw <4 x i32> %586, %579
  %589 = add i64 %577, 8
  %590 = add i64 %580, -1
  %591 = icmp eq i64 %590, 0
  br i1 %591, label %592, label %576, !llvm.loop !29

592:                                              ; preds = %576, %569
  %593 = phi <4 x i32> [ %570, %569 ], [ %587, %576 ]
  %594 = phi <4 x i32> [ %571, %569 ], [ %588, %576 ]
  %595 = mul <4 x i32> %594, %593
  %596 = shufflevector <4 x i32> %595, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %597 = mul <4 x i32> %595, %596
  %598 = shufflevector <4 x i32> %597, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %599 = mul <4 x i32> %597, %598
  %600 = extractelement <4 x i32> %599, i32 0
  %601 = icmp eq i64 %518, %515
  br i1 %601, label %613, label %602

602:                                              ; preds = %592, %513
  %603 = phi i64 [ 0, %513 ], [ %518, %592 ]
  %604 = phi i32 [ 1, %513 ], [ %600, %592 ]
  br label %605

605:                                              ; preds = %602, %605
  %606 = phi i64 [ %611, %605 ], [ %603, %602 ]
  %607 = phi i32 [ %610, %605 ], [ %604, %602 ]
  %608 = getelementptr inbounds i32, i32* %514, i64 %606
  %609 = load i32, i32* %608, align 4
  %610 = mul nsw i32 %609, %607
  %611 = add nuw nsw i64 %606, 1
  %612 = icmp eq i64 %611, %515
  br i1 %612, label %613, label %605, !llvm.loop !30

613:                                              ; preds = %605, %592
  %614 = phi i32 [ %600, %592 ], [ %610, %605 ]
  %615 = icmp sgt i32 %614, 0
  br i1 %615, label %616, label %661

616:                                              ; preds = %613, %510
  %617 = phi i32 [ %614, %613 ], [ 1, %510 ]
  %618 = zext i32 %617 to i64
  %619 = and i64 %618, 1
  %620 = icmp eq i32 %617, 1
  br i1 %620, label %648, label %621

621:                                              ; preds = %616
  %622 = sub nsw i64 %618, %619
  br label %623

623:                                              ; preds = %623, %621
  %624 = phi i64 [ 0, %621 ], [ %645, %623 ]
  %625 = phi i64 [ %622, %621 ], [ %646, %623 ]
  %626 = getelementptr inbounds i32, i32* %438, i64 %624
  %627 = load i32, i32* %626, align 4
  %628 = getelementptr inbounds i32, i32* %470, i64 %624
  %629 = load i32, i32* %628, align 4
  %630 = sitofp i32 %627 to double
  %631 = sitofp i32 %629 to double
  %632 = tail call double @pow(double %630, double %631) #12
  %633 = fptosi double %632 to i32
  %634 = getelementptr inbounds i32, i32* %504, i64 %624
  store i32 %633, i32* %634, align 4
  %635 = or i64 %624, 1
  %636 = getelementptr inbounds i32, i32* %438, i64 %635
  %637 = load i32, i32* %636, align 4
  %638 = getelementptr inbounds i32, i32* %470, i64 %635
  %639 = load i32, i32* %638, align 4
  %640 = sitofp i32 %637 to double
  %641 = sitofp i32 %639 to double
  %642 = tail call double @pow(double %640, double %641) #12
  %643 = fptosi double %642 to i32
  %644 = getelementptr inbounds i32, i32* %504, i64 %635
  store i32 %643, i32* %644, align 4
  %645 = add nuw nsw i64 %624, 2
  %646 = add i64 %625, -2
  %647 = icmp eq i64 %646, 0
  br i1 %647, label %648, label %623

648:                                              ; preds = %623, %616
  %649 = phi i64 [ 0, %616 ], [ %645, %623 ]
  %650 = icmp eq i64 %619, 0
  br i1 %650, label %661, label %651

651:                                              ; preds = %648
  %652 = getelementptr inbounds i32, i32* %438, i64 %649
  %653 = load i32, i32* %652, align 4
  %654 = getelementptr inbounds i32, i32* %470, i64 %649
  %655 = load i32, i32* %654, align 4
  %656 = sitofp i32 %653 to double
  %657 = sitofp i32 %655 to double
  %658 = tail call double @pow(double %656, double %657) #12
  %659 = fptosi double %658 to i32
  %660 = getelementptr inbounds i32, i32* %504, i64 %649
  store i32 %659, i32* %660, align 4
  br label %661

661:                                              ; preds = %651, %648, %613
  %662 = icmp sgt i32 %503, 5
  br i1 %662, label %663, label %669

663:                                              ; preds = %661
  %664 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %665 = load i32*, i32** %664, align 8
  %666 = icmp eq i32* %665, null
  br i1 %666, label %669, label %667

667:                                              ; preds = %663
  %668 = bitcast i32* %665 to i8*
  tail call void @_ZdaPv(i8* %668) #11
  br label %669

669:                                              ; preds = %667, %663, %661
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %471) #12
  %670 = icmp sgt i32 %469, 5
  br i1 %670, label %671, label %677

671:                                              ; preds = %669
  %672 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %8, i64 0, i32 1, i32 0
  %673 = load i32*, i32** %672, align 8
  %674 = icmp eq i32* %673, null
  br i1 %674, label %677, label %675

675:                                              ; preds = %671
  %676 = bitcast i32* %673 to i8*
  tail call void @_ZdaPv(i8* %676) #11
  br label %677

677:                                              ; preds = %675, %671, %669
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %439) #12
  br i1 %506, label %678, label %684

678:                                              ; preds = %677
  %679 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 0
  %680 = load i32*, i32** %679, align 8
  %681 = icmp eq i32* %680, null
  br i1 %681, label %684, label %682

682:                                              ; preds = %678
  %683 = bitcast i32* %680 to i8*
  tail call void @_ZdaPv(i8* %683) #11
  br label %684

684:                                              ; preds = %682, %678, %677
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %405) #12
  br label %1250

685:                                              ; preds = %52
  %686 = getelementptr inbounds %"struct.tflite::ops::builtin::pow::(anonymous namespace)::OpData", %"struct.tflite::ops::builtin::pow::(anonymous namespace)::OpData"* %19, i64 0, i32 0
  %687 = load i8, i8* %686, align 1, !range !2
  %688 = icmp eq i8 %687, 0
  br i1 %688, label %950, label %689

689:                                              ; preds = %685
  %690 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %690) #12
  %691 = icmp eq %struct.TfLiteTensor* %31, null
  br i1 %691, label %692, label %694

692:                                              ; preds = %689
  %693 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %693, align 8, !alias.scope !31
  br label %722

694:                                              ; preds = %689
  %695 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 2
  %696 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %695, align 8, !noalias !31
  %697 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %696, i64 0, i32 0
  %698 = load i32, i32* %697, align 4, !noalias !31
  %699 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %696, i64 0, i32 1, i64 0
  %700 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %698, i32* %700, align 8, !alias.scope !31
  %701 = icmp sgt i32 %698, 5
  br i1 %701, label %702, label %709

702:                                              ; preds = %694
  %703 = sext i32 %698 to i64
  %704 = shl nsw i64 %703, 2
  %705 = tail call i8* @_Znam(i64 %704) #11, !noalias !31
  %706 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %707 = bitcast i32** %706 to i8**
  store i8* %705, i8** %707, align 8, !alias.scope !31
  %708 = bitcast i8* %705 to i32*
  br label %714

709:                                              ; preds = %694
  %710 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %711 = bitcast %union.anon* %710 to i32*
  %712 = sext i32 %698 to i64
  %713 = shl nsw i64 %712, 2
  br label %714

714:                                              ; preds = %709, %702
  %715 = phi i64 [ %704, %702 ], [ %713, %709 ]
  %716 = phi i32* [ %708, %702 ], [ %711, %709 ]
  %717 = bitcast i32* %716 to i8*
  %718 = bitcast i32* %699 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %717, i8* align 4 %718, i64 %715, i1 false) #12
  %719 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %720 = bitcast %union.TfLitePtrUnion* %719 to float**
  %721 = load float*, float** %720, align 8
  br label %722

722:                                              ; preds = %714, %692
  %723 = phi float* [ %721, %714 ], [ null, %692 ]
  %724 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %724) #12
  %725 = icmp eq %struct.TfLiteTensor* %41, null
  br i1 %725, label %726, label %728

726:                                              ; preds = %722
  %727 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %727, align 8, !alias.scope !34
  br label %756

728:                                              ; preds = %722
  %729 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %41, i64 0, i32 2
  %730 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %729, align 8, !noalias !34
  %731 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %730, i64 0, i32 0
  %732 = load i32, i32* %731, align 4, !noalias !34
  %733 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %730, i64 0, i32 1, i64 0
  %734 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %732, i32* %734, align 8, !alias.scope !34
  %735 = icmp sgt i32 %732, 5
  br i1 %735, label %736, label %743

736:                                              ; preds = %728
  %737 = sext i32 %732 to i64
  %738 = shl nsw i64 %737, 2
  %739 = tail call i8* @_Znam(i64 %738) #11, !noalias !34
  %740 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %741 = bitcast i32** %740 to i8**
  store i8* %739, i8** %741, align 8, !alias.scope !34
  %742 = bitcast i8* %739 to i32*
  br label %748

743:                                              ; preds = %728
  %744 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %745 = bitcast %union.anon* %744 to i32*
  %746 = sext i32 %732 to i64
  %747 = shl nsw i64 %746, 2
  br label %748

748:                                              ; preds = %743, %736
  %749 = phi i64 [ %738, %736 ], [ %747, %743 ]
  %750 = phi i32* [ %742, %736 ], [ %745, %743 ]
  %751 = bitcast i32* %750 to i8*
  %752 = bitcast i32* %733 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %751, i8* align 4 %752, i64 %749, i1 false) #12
  %753 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %41, i64 0, i32 1
  %754 = bitcast %union.TfLitePtrUnion* %753 to float**
  %755 = load float*, float** %754, align 8
  br label %756

756:                                              ; preds = %748, %726
  %757 = phi i32 [ %732, %748 ], [ 0, %726 ]
  %758 = phi float* [ %755, %748 ], [ null, %726 ]
  %759 = bitcast %"class.tflite::RuntimeShape"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %759) #12
  %760 = icmp eq %struct.TfLiteTensor* %53, null
  br i1 %760, label %761, label %763

761:                                              ; preds = %756
  %762 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 0, i32* %762, align 8, !alias.scope !37
  br label %791

763:                                              ; preds = %756
  %764 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 2
  %765 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %764, align 8, !noalias !37
  %766 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %765, i64 0, i32 0
  %767 = load i32, i32* %766, align 4, !noalias !37
  %768 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %765, i64 0, i32 1, i64 0
  %769 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 %767, i32* %769, align 8, !alias.scope !37
  %770 = icmp sgt i32 %767, 5
  br i1 %770, label %771, label %778

771:                                              ; preds = %763
  %772 = sext i32 %767 to i64
  %773 = shl nsw i64 %772, 2
  %774 = tail call i8* @_Znam(i64 %773) #11, !noalias !37
  %775 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %776 = bitcast i32** %775 to i8**
  store i8* %774, i8** %776, align 8, !alias.scope !37
  %777 = bitcast i8* %774 to i32*
  br label %783

778:                                              ; preds = %763
  %779 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1
  %780 = bitcast %union.anon* %779 to i32*
  %781 = sext i32 %767 to i64
  %782 = shl nsw i64 %781, 2
  br label %783

783:                                              ; preds = %778, %771
  %784 = phi i64 [ %773, %771 ], [ %782, %778 ]
  %785 = phi i32* [ %777, %771 ], [ %780, %778 ]
  %786 = bitcast i32* %785 to i8*
  %787 = bitcast i32* %768 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %786, i8* align 4 %787, i64 %784, i1 false) #12
  %788 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 1
  %789 = bitcast %union.TfLitePtrUnion* %788 to float**
  %790 = load float*, float** %789, align 8
  br label %791

791:                                              ; preds = %783, %761
  %792 = phi float* [ %790, %783 ], [ null, %761 ]
  %793 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  %794 = icmp sgt i32 %757, 5
  %795 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  br i1 %794, label %796, label %799

796:                                              ; preds = %791
  %797 = getelementptr inbounds %union.anon, %union.anon* %795, i64 0, i32 0
  %798 = load i32*, i32** %797, align 8
  br label %802

799:                                              ; preds = %791
  %800 = bitcast %union.anon* %795 to i32*
  %801 = icmp sgt i32 %757, 0
  br i1 %801, label %802, label %905

802:                                              ; preds = %799, %796
  %803 = phi i32* [ %798, %796 ], [ %800, %799 ]
  %804 = zext i32 %757 to i64
  %805 = icmp ult i32 %757, 8
  br i1 %805, label %891, label %806

806:                                              ; preds = %802
  %807 = and i64 %804, 4294967288
  %808 = add nsw i64 %807, -8
  %809 = lshr exact i64 %808, 3
  %810 = add nuw nsw i64 %809, 1
  %811 = and i64 %810, 3
  %812 = icmp ult i64 %808, 24
  br i1 %812, label %858, label %813

813:                                              ; preds = %806
  %814 = sub nsw i64 %810, %811
  br label %815

815:                                              ; preds = %815, %813
  %816 = phi i64 [ 0, %813 ], [ %855, %815 ]
  %817 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %813 ], [ %853, %815 ]
  %818 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %813 ], [ %854, %815 ]
  %819 = phi i64 [ %814, %813 ], [ %856, %815 ]
  %820 = getelementptr inbounds i32, i32* %803, i64 %816
  %821 = bitcast i32* %820 to <4 x i32>*
  %822 = load <4 x i32>, <4 x i32>* %821, align 4
  %823 = getelementptr inbounds i32, i32* %820, i64 4
  %824 = bitcast i32* %823 to <4 x i32>*
  %825 = load <4 x i32>, <4 x i32>* %824, align 4
  %826 = mul nsw <4 x i32> %822, %817
  %827 = mul nsw <4 x i32> %825, %818
  %828 = or i64 %816, 8
  %829 = getelementptr inbounds i32, i32* %803, i64 %828
  %830 = bitcast i32* %829 to <4 x i32>*
  %831 = load <4 x i32>, <4 x i32>* %830, align 4
  %832 = getelementptr inbounds i32, i32* %829, i64 4
  %833 = bitcast i32* %832 to <4 x i32>*
  %834 = load <4 x i32>, <4 x i32>* %833, align 4
  %835 = mul nsw <4 x i32> %831, %826
  %836 = mul nsw <4 x i32> %834, %827
  %837 = or i64 %816, 16
  %838 = getelementptr inbounds i32, i32* %803, i64 %837
  %839 = bitcast i32* %838 to <4 x i32>*
  %840 = load <4 x i32>, <4 x i32>* %839, align 4
  %841 = getelementptr inbounds i32, i32* %838, i64 4
  %842 = bitcast i32* %841 to <4 x i32>*
  %843 = load <4 x i32>, <4 x i32>* %842, align 4
  %844 = mul nsw <4 x i32> %840, %835
  %845 = mul nsw <4 x i32> %843, %836
  %846 = or i64 %816, 24
  %847 = getelementptr inbounds i32, i32* %803, i64 %846
  %848 = bitcast i32* %847 to <4 x i32>*
  %849 = load <4 x i32>, <4 x i32>* %848, align 4
  %850 = getelementptr inbounds i32, i32* %847, i64 4
  %851 = bitcast i32* %850 to <4 x i32>*
  %852 = load <4 x i32>, <4 x i32>* %851, align 4
  %853 = mul nsw <4 x i32> %849, %844
  %854 = mul nsw <4 x i32> %852, %845
  %855 = add i64 %816, 32
  %856 = add i64 %819, -4
  %857 = icmp eq i64 %856, 0
  br i1 %857, label %858, label %815, !llvm.loop !40

858:                                              ; preds = %815, %806
  %859 = phi <4 x i32> [ undef, %806 ], [ %853, %815 ]
  %860 = phi <4 x i32> [ undef, %806 ], [ %854, %815 ]
  %861 = phi i64 [ 0, %806 ], [ %855, %815 ]
  %862 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %806 ], [ %853, %815 ]
  %863 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %806 ], [ %854, %815 ]
  %864 = icmp eq i64 %811, 0
  br i1 %864, label %881, label %865

865:                                              ; preds = %858, %865
  %866 = phi i64 [ %878, %865 ], [ %861, %858 ]
  %867 = phi <4 x i32> [ %876, %865 ], [ %862, %858 ]
  %868 = phi <4 x i32> [ %877, %865 ], [ %863, %858 ]
  %869 = phi i64 [ %879, %865 ], [ %811, %858 ]
  %870 = getelementptr inbounds i32, i32* %803, i64 %866
  %871 = bitcast i32* %870 to <4 x i32>*
  %872 = load <4 x i32>, <4 x i32>* %871, align 4
  %873 = getelementptr inbounds i32, i32* %870, i64 4
  %874 = bitcast i32* %873 to <4 x i32>*
  %875 = load <4 x i32>, <4 x i32>* %874, align 4
  %876 = mul nsw <4 x i32> %872, %867
  %877 = mul nsw <4 x i32> %875, %868
  %878 = add i64 %866, 8
  %879 = add i64 %869, -1
  %880 = icmp eq i64 %879, 0
  br i1 %880, label %881, label %865, !llvm.loop !41

881:                                              ; preds = %865, %858
  %882 = phi <4 x i32> [ %859, %858 ], [ %876, %865 ]
  %883 = phi <4 x i32> [ %860, %858 ], [ %877, %865 ]
  %884 = mul <4 x i32> %883, %882
  %885 = shufflevector <4 x i32> %884, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %886 = mul <4 x i32> %884, %885
  %887 = shufflevector <4 x i32> %886, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %888 = mul <4 x i32> %886, %887
  %889 = extractelement <4 x i32> %888, i32 0
  %890 = icmp eq i64 %807, %804
  br i1 %890, label %902, label %891

891:                                              ; preds = %881, %802
  %892 = phi i64 [ 0, %802 ], [ %807, %881 ]
  %893 = phi i32 [ 1, %802 ], [ %889, %881 ]
  br label %894

894:                                              ; preds = %891, %894
  %895 = phi i64 [ %900, %894 ], [ %892, %891 ]
  %896 = phi i32 [ %899, %894 ], [ %893, %891 ]
  %897 = getelementptr inbounds i32, i32* %803, i64 %895
  %898 = load i32, i32* %897, align 4
  %899 = mul nsw i32 %898, %896
  %900 = add nuw nsw i64 %895, 1
  %901 = icmp eq i64 %900, %804
  br i1 %901, label %902, label %894, !llvm.loop !42

902:                                              ; preds = %894, %881
  %903 = phi i32 [ %889, %881 ], [ %899, %894 ]
  %904 = icmp eq i32 %903, 1
  br i1 %904, label %905, label %919

905:                                              ; preds = %902, %799
  %906 = load float, float* %758, align 4
  %907 = tail call float @llvm.round.f32(float %906) #12
  %908 = fptosi float %907 to i32
  %909 = sitofp i32 %908 to float
  %910 = fsub float %906, %909
  %911 = tail call float @llvm.fabs.f32(float %910) #12
  %912 = fcmp olt float %911, 0x3EE4F8B580000000
  %913 = icmp sgt i32 %908, 0
  %914 = and i1 %913, %912
  br i1 %914, label %915, label %919

915:                                              ; preds = %905
  %916 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %916) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %916, i8* align 4 getelementptr inbounds ({ i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }, { i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }* @__const._ZN6tflite13optimized_ops14BroadcastPow4DIfEEvRKNS_12RuntimeShapeEPKT_S4_S7_S4_PS5_.params, i64 0, i32 0), i64 80, i1 false) #12
  %917 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 14
  store float 0x47EFFFFFE0000000, float* %917, align 4
  %918 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 13
  store float 0xC7EFFFFFE0000000, float* %918, align 4
  call void @_ZN6tflite13optimized_ops18IntegerExponentPowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_iS7_PS8_(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %10, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, float* %723, i32 %908, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %13, float* %792) #12
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %916) #12
  br label %920

919:                                              ; preds = %905, %902
  call void @_ZN6tflite13reference_ops18BroadcastPow4DSlowIfEEvRKNS_12RuntimeShapeEPKT_S4_S7_S4_PS5_(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, float* %723, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %12, float* %758, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %13, float* %792) #12
  br label %920

920:                                              ; preds = %919, %915
  %921 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  %922 = load i32, i32* %921, align 8
  %923 = icmp sgt i32 %922, 5
  br i1 %923, label %924, label %930

924:                                              ; preds = %920
  %925 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %926 = load i32*, i32** %925, align 8
  %927 = icmp eq i32* %926, null
  br i1 %927, label %930, label %928

928:                                              ; preds = %924
  %929 = bitcast i32* %926 to i8*
  call void @_ZdaPv(i8* %929) #11
  br label %930

930:                                              ; preds = %928, %924, %920
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %759) #12
  %931 = load i32, i32* %793, align 8
  %932 = icmp sgt i32 %931, 5
  br i1 %932, label %933, label %939

933:                                              ; preds = %930
  %934 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %935 = load i32*, i32** %934, align 8
  %936 = icmp eq i32* %935, null
  br i1 %936, label %939, label %937

937:                                              ; preds = %933
  %938 = bitcast i32* %935 to i8*
  call void @_ZdaPv(i8* %938) #11
  br label %939

939:                                              ; preds = %937, %933, %930
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %724) #12
  %940 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %941 = load i32, i32* %940, align 8
  %942 = icmp sgt i32 %941, 5
  br i1 %942, label %943, label %949

943:                                              ; preds = %939
  %944 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %945 = load i32*, i32** %944, align 8
  %946 = icmp eq i32* %945, null
  br i1 %946, label %949, label %947

947:                                              ; preds = %943
  %948 = bitcast i32* %945 to i8*
  call void @_ZdaPv(i8* %948) #11
  br label %949

949:                                              ; preds = %947, %943, %939
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %690) #12
  br label %1250

950:                                              ; preds = %685
  %951 = bitcast %"class.tflite::RuntimeShape"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %951) #12
  %952 = icmp eq %struct.TfLiteTensor* %31, null
  br i1 %952, label %953, label %955

953:                                              ; preds = %950
  %954 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 0, i32* %954, align 8, !alias.scope !43
  br label %983

955:                                              ; preds = %950
  %956 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 2
  %957 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %956, align 8, !noalias !43
  %958 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %957, i64 0, i32 0
  %959 = load i32, i32* %958, align 4, !noalias !43
  %960 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %957, i64 0, i32 1, i64 0
  %961 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 %959, i32* %961, align 8, !alias.scope !43
  %962 = icmp sgt i32 %959, 5
  br i1 %962, label %963, label %970

963:                                              ; preds = %955
  %964 = sext i32 %959 to i64
  %965 = shl nsw i64 %964, 2
  %966 = tail call i8* @_Znam(i64 %965) #11, !noalias !43
  %967 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %968 = bitcast i32** %967 to i8**
  store i8* %966, i8** %968, align 8, !alias.scope !43
  %969 = bitcast i8* %966 to i32*
  br label %975

970:                                              ; preds = %955
  %971 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  %972 = bitcast %union.anon* %971 to i32*
  %973 = sext i32 %959 to i64
  %974 = shl nsw i64 %973, 2
  br label %975

975:                                              ; preds = %970, %963
  %976 = phi i64 [ %965, %963 ], [ %974, %970 ]
  %977 = phi i32* [ %969, %963 ], [ %972, %970 ]
  %978 = bitcast i32* %977 to i8*
  %979 = bitcast i32* %960 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %978, i8* align 4 %979, i64 %976, i1 false) #12
  %980 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %31, i64 0, i32 1
  %981 = bitcast %union.TfLitePtrUnion* %980 to float**
  %982 = load float*, float** %981, align 8
  br label %983

983:                                              ; preds = %975, %953
  %984 = phi i32 [ %959, %975 ], [ 0, %953 ]
  %985 = phi float* [ %982, %975 ], [ null, %953 ]
  %986 = bitcast %"class.tflite::RuntimeShape"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %986) #12
  %987 = icmp eq %struct.TfLiteTensor* %41, null
  br i1 %987, label %988, label %990

988:                                              ; preds = %983
  %989 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 0, i32* %989, align 8, !alias.scope !46
  br label %1018

990:                                              ; preds = %983
  %991 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %41, i64 0, i32 2
  %992 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %991, align 8, !noalias !46
  %993 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %992, i64 0, i32 0
  %994 = load i32, i32* %993, align 4, !noalias !46
  %995 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %992, i64 0, i32 1, i64 0
  %996 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 %994, i32* %996, align 8, !alias.scope !46
  %997 = icmp sgt i32 %994, 5
  br i1 %997, label %998, label %1005

998:                                              ; preds = %990
  %999 = sext i32 %994 to i64
  %1000 = shl nsw i64 %999, 2
  %1001 = tail call i8* @_Znam(i64 %1000) #11, !noalias !46
  %1002 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %1003 = bitcast i32** %1002 to i8**
  store i8* %1001, i8** %1003, align 8, !alias.scope !46
  %1004 = bitcast i8* %1001 to i32*
  br label %1010

1005:                                             ; preds = %990
  %1006 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1
  %1007 = bitcast %union.anon* %1006 to i32*
  %1008 = sext i32 %994 to i64
  %1009 = shl nsw i64 %1008, 2
  br label %1010

1010:                                             ; preds = %1005, %998
  %1011 = phi i64 [ %1000, %998 ], [ %1009, %1005 ]
  %1012 = phi i32* [ %1004, %998 ], [ %1007, %1005 ]
  %1013 = bitcast i32* %1012 to i8*
  %1014 = bitcast i32* %995 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1013, i8* align 4 %1014, i64 %1011, i1 false) #12
  %1015 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %41, i64 0, i32 1
  %1016 = bitcast %union.TfLitePtrUnion* %1015 to float**
  %1017 = load float*, float** %1016, align 8
  br label %1018

1018:                                             ; preds = %1010, %988
  %1019 = phi i32 [ %994, %1010 ], [ 0, %988 ]
  %1020 = phi float* [ %1017, %1010 ], [ null, %988 ]
  %1021 = bitcast %"class.tflite::RuntimeShape"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1021) #12
  %1022 = icmp eq %struct.TfLiteTensor* %53, null
  br i1 %1022, label %1023, label %1025

1023:                                             ; preds = %1018
  %1024 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 0, i32* %1024, align 8, !alias.scope !49
  br label %1053

1025:                                             ; preds = %1018
  %1026 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 2
  %1027 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1026, align 8, !noalias !49
  %1028 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1027, i64 0, i32 0
  %1029 = load i32, i32* %1028, align 4, !noalias !49
  %1030 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1027, i64 0, i32 1, i64 0
  %1031 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 %1029, i32* %1031, align 8, !alias.scope !49
  %1032 = icmp sgt i32 %1029, 5
  br i1 %1032, label %1033, label %1040

1033:                                             ; preds = %1025
  %1034 = sext i32 %1029 to i64
  %1035 = shl nsw i64 %1034, 2
  %1036 = tail call i8* @_Znam(i64 %1035) #11, !noalias !49
  %1037 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %1038 = bitcast i32** %1037 to i8**
  store i8* %1036, i8** %1038, align 8, !alias.scope !49
  %1039 = bitcast i8* %1036 to i32*
  br label %1045

1040:                                             ; preds = %1025
  %1041 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1
  %1042 = bitcast %union.anon* %1041 to i32*
  %1043 = sext i32 %1029 to i64
  %1044 = shl nsw i64 %1043, 2
  br label %1045

1045:                                             ; preds = %1040, %1033
  %1046 = phi i64 [ %1035, %1033 ], [ %1044, %1040 ]
  %1047 = phi i32* [ %1039, %1033 ], [ %1042, %1040 ]
  %1048 = bitcast i32* %1047 to i8*
  %1049 = bitcast i32* %1030 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1048, i8* align 4 %1049, i64 %1046, i1 false) #12
  %1050 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %53, i64 0, i32 1
  %1051 = bitcast %union.TfLitePtrUnion* %1050 to float**
  %1052 = load float*, float** %1051, align 8
  br label %1053

1053:                                             ; preds = %1045, %1023
  %1054 = phi i32 [ %1029, %1045 ], [ 0, %1023 ]
  %1055 = phi float* [ %1052, %1045 ], [ null, %1023 ]
  %1056 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  %1057 = icmp sgt i32 %984, 5
  br i1 %1057, label %1058, label %1061

1058:                                             ; preds = %1053
  %1059 = getelementptr inbounds %union.anon, %union.anon* %1056, i64 0, i32 0
  %1060 = load i32*, i32** %1059, align 8
  br label %1064

1061:                                             ; preds = %1053
  %1062 = bitcast %union.anon* %1056 to i32*
  %1063 = icmp sgt i32 %984, 0
  br i1 %1063, label %1064, label %1167

1064:                                             ; preds = %1061, %1058
  %1065 = phi i32* [ %1060, %1058 ], [ %1062, %1061 ]
  %1066 = zext i32 %984 to i64
  %1067 = icmp ult i32 %984, 8
  br i1 %1067, label %1153, label %1068

1068:                                             ; preds = %1064
  %1069 = and i64 %1066, 4294967288
  %1070 = add nsw i64 %1069, -8
  %1071 = lshr exact i64 %1070, 3
  %1072 = add nuw nsw i64 %1071, 1
  %1073 = and i64 %1072, 3
  %1074 = icmp ult i64 %1070, 24
  br i1 %1074, label %1120, label %1075

1075:                                             ; preds = %1068
  %1076 = sub nsw i64 %1072, %1073
  br label %1077

1077:                                             ; preds = %1077, %1075
  %1078 = phi i64 [ 0, %1075 ], [ %1117, %1077 ]
  %1079 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1075 ], [ %1115, %1077 ]
  %1080 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1075 ], [ %1116, %1077 ]
  %1081 = phi i64 [ %1076, %1075 ], [ %1118, %1077 ]
  %1082 = getelementptr inbounds i32, i32* %1065, i64 %1078
  %1083 = bitcast i32* %1082 to <4 x i32>*
  %1084 = load <4 x i32>, <4 x i32>* %1083, align 4
  %1085 = getelementptr inbounds i32, i32* %1082, i64 4
  %1086 = bitcast i32* %1085 to <4 x i32>*
  %1087 = load <4 x i32>, <4 x i32>* %1086, align 4
  %1088 = mul nsw <4 x i32> %1084, %1079
  %1089 = mul nsw <4 x i32> %1087, %1080
  %1090 = or i64 %1078, 8
  %1091 = getelementptr inbounds i32, i32* %1065, i64 %1090
  %1092 = bitcast i32* %1091 to <4 x i32>*
  %1093 = load <4 x i32>, <4 x i32>* %1092, align 4
  %1094 = getelementptr inbounds i32, i32* %1091, i64 4
  %1095 = bitcast i32* %1094 to <4 x i32>*
  %1096 = load <4 x i32>, <4 x i32>* %1095, align 4
  %1097 = mul nsw <4 x i32> %1093, %1088
  %1098 = mul nsw <4 x i32> %1096, %1089
  %1099 = or i64 %1078, 16
  %1100 = getelementptr inbounds i32, i32* %1065, i64 %1099
  %1101 = bitcast i32* %1100 to <4 x i32>*
  %1102 = load <4 x i32>, <4 x i32>* %1101, align 4
  %1103 = getelementptr inbounds i32, i32* %1100, i64 4
  %1104 = bitcast i32* %1103 to <4 x i32>*
  %1105 = load <4 x i32>, <4 x i32>* %1104, align 4
  %1106 = mul nsw <4 x i32> %1102, %1097
  %1107 = mul nsw <4 x i32> %1105, %1098
  %1108 = or i64 %1078, 24
  %1109 = getelementptr inbounds i32, i32* %1065, i64 %1108
  %1110 = bitcast i32* %1109 to <4 x i32>*
  %1111 = load <4 x i32>, <4 x i32>* %1110, align 4
  %1112 = getelementptr inbounds i32, i32* %1109, i64 4
  %1113 = bitcast i32* %1112 to <4 x i32>*
  %1114 = load <4 x i32>, <4 x i32>* %1113, align 4
  %1115 = mul nsw <4 x i32> %1111, %1106
  %1116 = mul nsw <4 x i32> %1114, %1107
  %1117 = add i64 %1078, 32
  %1118 = add i64 %1081, -4
  %1119 = icmp eq i64 %1118, 0
  br i1 %1119, label %1120, label %1077, !llvm.loop !52

1120:                                             ; preds = %1077, %1068
  %1121 = phi <4 x i32> [ undef, %1068 ], [ %1115, %1077 ]
  %1122 = phi <4 x i32> [ undef, %1068 ], [ %1116, %1077 ]
  %1123 = phi i64 [ 0, %1068 ], [ %1117, %1077 ]
  %1124 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1068 ], [ %1115, %1077 ]
  %1125 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1068 ], [ %1116, %1077 ]
  %1126 = icmp eq i64 %1073, 0
  br i1 %1126, label %1143, label %1127

1127:                                             ; preds = %1120, %1127
  %1128 = phi i64 [ %1140, %1127 ], [ %1123, %1120 ]
  %1129 = phi <4 x i32> [ %1138, %1127 ], [ %1124, %1120 ]
  %1130 = phi <4 x i32> [ %1139, %1127 ], [ %1125, %1120 ]
  %1131 = phi i64 [ %1141, %1127 ], [ %1073, %1120 ]
  %1132 = getelementptr inbounds i32, i32* %1065, i64 %1128
  %1133 = bitcast i32* %1132 to <4 x i32>*
  %1134 = load <4 x i32>, <4 x i32>* %1133, align 4
  %1135 = getelementptr inbounds i32, i32* %1132, i64 4
  %1136 = bitcast i32* %1135 to <4 x i32>*
  %1137 = load <4 x i32>, <4 x i32>* %1136, align 4
  %1138 = mul nsw <4 x i32> %1134, %1129
  %1139 = mul nsw <4 x i32> %1137, %1130
  %1140 = add i64 %1128, 8
  %1141 = add i64 %1131, -1
  %1142 = icmp eq i64 %1141, 0
  br i1 %1142, label %1143, label %1127, !llvm.loop !53

1143:                                             ; preds = %1127, %1120
  %1144 = phi <4 x i32> [ %1121, %1120 ], [ %1138, %1127 ]
  %1145 = phi <4 x i32> [ %1122, %1120 ], [ %1139, %1127 ]
  %1146 = mul <4 x i32> %1145, %1144
  %1147 = shufflevector <4 x i32> %1146, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1148 = mul <4 x i32> %1146, %1147
  %1149 = shufflevector <4 x i32> %1148, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1150 = mul <4 x i32> %1148, %1149
  %1151 = extractelement <4 x i32> %1150, i32 0
  %1152 = icmp eq i64 %1069, %1066
  br i1 %1152, label %1164, label %1153

1153:                                             ; preds = %1143, %1064
  %1154 = phi i64 [ 0, %1064 ], [ %1069, %1143 ]
  %1155 = phi i32 [ 1, %1064 ], [ %1151, %1143 ]
  br label %1156

1156:                                             ; preds = %1153, %1156
  %1157 = phi i64 [ %1162, %1156 ], [ %1154, %1153 ]
  %1158 = phi i32 [ %1161, %1156 ], [ %1155, %1153 ]
  %1159 = getelementptr inbounds i32, i32* %1065, i64 %1157
  %1160 = load i32, i32* %1159, align 4
  %1161 = mul nsw i32 %1160, %1158
  %1162 = add nuw nsw i64 %1157, 1
  %1163 = icmp eq i64 %1162, %1066
  br i1 %1163, label %1164, label %1156, !llvm.loop !54

1164:                                             ; preds = %1156, %1143
  %1165 = phi i32 [ %1151, %1143 ], [ %1161, %1156 ]
  %1166 = icmp sgt i32 %1165, 0
  br i1 %1166, label %1167, label %1223

1167:                                             ; preds = %1164, %1061
  %1168 = phi i32 [ %1165, %1164 ], [ 1, %1061 ]
  %1169 = zext i32 %1168 to i64
  %1170 = add nsw i64 %1169, -1
  %1171 = and i64 %1169, 3
  %1172 = icmp ult i64 %1170, 3
  br i1 %1172, label %1208, label %1173

1173:                                             ; preds = %1167
  %1174 = sub nsw i64 %1169, %1171
  br label %1175

1175:                                             ; preds = %1175, %1173
  %1176 = phi i64 [ 0, %1173 ], [ %1205, %1175 ]
  %1177 = phi i64 [ %1174, %1173 ], [ %1206, %1175 ]
  %1178 = getelementptr inbounds float, float* %985, i64 %1176
  %1179 = load float, float* %1178, align 4
  %1180 = getelementptr inbounds float, float* %1020, i64 %1176
  %1181 = load float, float* %1180, align 4
  %1182 = tail call float @powf(float %1179, float %1181) #12
  %1183 = getelementptr inbounds float, float* %1055, i64 %1176
  store float %1182, float* %1183, align 4
  %1184 = or i64 %1176, 1
  %1185 = getelementptr inbounds float, float* %985, i64 %1184
  %1186 = load float, float* %1185, align 4
  %1187 = getelementptr inbounds float, float* %1020, i64 %1184
  %1188 = load float, float* %1187, align 4
  %1189 = tail call float @powf(float %1186, float %1188) #12
  %1190 = getelementptr inbounds float, float* %1055, i64 %1184
  store float %1189, float* %1190, align 4
  %1191 = or i64 %1176, 2
  %1192 = getelementptr inbounds float, float* %985, i64 %1191
  %1193 = load float, float* %1192, align 4
  %1194 = getelementptr inbounds float, float* %1020, i64 %1191
  %1195 = load float, float* %1194, align 4
  %1196 = tail call float @powf(float %1193, float %1195) #12
  %1197 = getelementptr inbounds float, float* %1055, i64 %1191
  store float %1196, float* %1197, align 4
  %1198 = or i64 %1176, 3
  %1199 = getelementptr inbounds float, float* %985, i64 %1198
  %1200 = load float, float* %1199, align 4
  %1201 = getelementptr inbounds float, float* %1020, i64 %1198
  %1202 = load float, float* %1201, align 4
  %1203 = tail call float @powf(float %1200, float %1202) #12
  %1204 = getelementptr inbounds float, float* %1055, i64 %1198
  store float %1203, float* %1204, align 4
  %1205 = add nuw nsw i64 %1176, 4
  %1206 = add i64 %1177, -4
  %1207 = icmp eq i64 %1206, 0
  br i1 %1207, label %1208, label %1175

1208:                                             ; preds = %1175, %1167
  %1209 = phi i64 [ 0, %1167 ], [ %1205, %1175 ]
  %1210 = icmp eq i64 %1171, 0
  br i1 %1210, label %1223, label %1211

1211:                                             ; preds = %1208, %1211
  %1212 = phi i64 [ %1220, %1211 ], [ %1209, %1208 ]
  %1213 = phi i64 [ %1221, %1211 ], [ %1171, %1208 ]
  %1214 = getelementptr inbounds float, float* %985, i64 %1212
  %1215 = load float, float* %1214, align 4
  %1216 = getelementptr inbounds float, float* %1020, i64 %1212
  %1217 = load float, float* %1216, align 4
  %1218 = tail call float @powf(float %1215, float %1217) #12
  %1219 = getelementptr inbounds float, float* %1055, i64 %1212
  store float %1218, float* %1219, align 4
  %1220 = add nuw nsw i64 %1212, 1
  %1221 = add i64 %1213, -1
  %1222 = icmp eq i64 %1221, 0
  br i1 %1222, label %1223, label %1211, !llvm.loop !55

1223:                                             ; preds = %1208, %1211, %1164
  %1224 = icmp sgt i32 %1054, 5
  br i1 %1224, label %1225, label %1231

1225:                                             ; preds = %1223
  %1226 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %1227 = load i32*, i32** %1226, align 8
  %1228 = icmp eq i32* %1227, null
  br i1 %1228, label %1231, label %1229

1229:                                             ; preds = %1225
  %1230 = bitcast i32* %1227 to i8*
  tail call void @_ZdaPv(i8* %1230) #11
  br label %1231

1231:                                             ; preds = %1229, %1225, %1223
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1021) #12
  %1232 = icmp sgt i32 %1019, 5
  br i1 %1232, label %1233, label %1239

1233:                                             ; preds = %1231
  %1234 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %1235 = load i32*, i32** %1234, align 8
  %1236 = icmp eq i32* %1235, null
  br i1 %1236, label %1239, label %1237

1237:                                             ; preds = %1233
  %1238 = bitcast i32* %1235 to i8*
  tail call void @_ZdaPv(i8* %1238) #11
  br label %1239

1239:                                             ; preds = %1237, %1233, %1231
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %986) #12
  br i1 %1057, label %1240, label %1246

1240:                                             ; preds = %1239
  %1241 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %1242 = load i32*, i32** %1241, align 8
  %1243 = icmp eq i32* %1242, null
  br i1 %1243, label %1246, label %1244

1244:                                             ; preds = %1240
  %1245 = bitcast i32* %1242 to i8*
  tail call void @_ZdaPv(i8* %1245) #11
  br label %1246

1246:                                             ; preds = %1244, %1240, %1239
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %951) #12
  br label %1250

1247:                                             ; preds = %52
  %1248 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %1249 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %1248, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %1249(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i64 0, i64 0), i32 %55) #12
  br label %1250

1250:                                             ; preds = %1246, %949, %684, %403, %148, %1247
  %1251 = phi i32 [ 1, %1247 ], [ 1, %148 ], [ 0, %403 ], [ 0, %684 ], [ 0, %949 ], [ 0, %1246 ]
  ret i32 %1251
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #6

declare zeroext i1 @_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_(%struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #6

declare i32 @_ZN6tflite26CalculateShapeForBroadcastEP13TfLiteContextPK12TfLiteTensorS4_PP14TfLiteIntArray(%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteIntArray**) local_unnamed_addr #6

declare %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops18IntegerExponentPowIiEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_iS7_PS8_(%"struct.tflite::ArithmeticParams"* dereferenceable(80), %"class.tflite::RuntimeShape"* dereferenceable(32), i32*, i32, %"class.tflite::RuntimeShape"* dereferenceable(32), i32*) local_unnamed_addr #7 comdat {
  %7 = bitcast i32* %5 to i8*
  %8 = bitcast i32* %2 to i8*
  %9 = icmp eq i32 %3, 1
  br i1 %9, label %10, label %127

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp sgt i32 %12, 5
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  br i1 %13, label %15, label %18

15:                                               ; preds = %10
  %16 = getelementptr inbounds %union.anon, %union.anon* %14, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  br label %21

18:                                               ; preds = %10
  %19 = bitcast %union.anon* %14 to i32*
  %20 = icmp sgt i32 %12, 0
  br i1 %20, label %21, label %125

21:                                               ; preds = %18, %15
  %22 = phi i32* [ %17, %15 ], [ %19, %18 ]
  %23 = zext i32 %12 to i64
  %24 = icmp ult i32 %12, 8
  br i1 %24, label %110, label %25

25:                                               ; preds = %21
  %26 = and i64 %23, 4294967288
  %27 = add nsw i64 %26, -8
  %28 = lshr exact i64 %27, 3
  %29 = add nuw nsw i64 %28, 1
  %30 = and i64 %29, 3
  %31 = icmp ult i64 %27, 24
  br i1 %31, label %77, label %32

32:                                               ; preds = %25
  %33 = sub nsw i64 %29, %30
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ 0, %32 ], [ %74, %34 ]
  %36 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %32 ], [ %72, %34 ]
  %37 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %32 ], [ %73, %34 ]
  %38 = phi i64 [ %33, %32 ], [ %75, %34 ]
  %39 = getelementptr inbounds i32, i32* %22, i64 %35
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  %42 = getelementptr inbounds i32, i32* %39, i64 4
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 4
  %45 = mul nsw <4 x i32> %41, %36
  %46 = mul nsw <4 x i32> %44, %37
  %47 = or i64 %35, 8
  %48 = getelementptr inbounds i32, i32* %22, i64 %47
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = getelementptr inbounds i32, i32* %48, i64 4
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4
  %54 = mul nsw <4 x i32> %50, %45
  %55 = mul nsw <4 x i32> %53, %46
  %56 = or i64 %35, 16
  %57 = getelementptr inbounds i32, i32* %22, i64 %56
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 4
  %60 = getelementptr inbounds i32, i32* %57, i64 4
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 4
  %63 = mul nsw <4 x i32> %59, %54
  %64 = mul nsw <4 x i32> %62, %55
  %65 = or i64 %35, 24
  %66 = getelementptr inbounds i32, i32* %22, i64 %65
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4
  %69 = getelementptr inbounds i32, i32* %66, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4
  %72 = mul nsw <4 x i32> %68, %63
  %73 = mul nsw <4 x i32> %71, %64
  %74 = add i64 %35, 32
  %75 = add i64 %38, -4
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %34, !llvm.loop !56

77:                                               ; preds = %34, %25
  %78 = phi <4 x i32> [ undef, %25 ], [ %72, %34 ]
  %79 = phi <4 x i32> [ undef, %25 ], [ %73, %34 ]
  %80 = phi i64 [ 0, %25 ], [ %74, %34 ]
  %81 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %25 ], [ %72, %34 ]
  %82 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %25 ], [ %73, %34 ]
  %83 = icmp eq i64 %30, 0
  br i1 %83, label %100, label %84

84:                                               ; preds = %77, %84
  %85 = phi i64 [ %97, %84 ], [ %80, %77 ]
  %86 = phi <4 x i32> [ %95, %84 ], [ %81, %77 ]
  %87 = phi <4 x i32> [ %96, %84 ], [ %82, %77 ]
  %88 = phi i64 [ %98, %84 ], [ %30, %77 ]
  %89 = getelementptr inbounds i32, i32* %22, i64 %85
  %90 = bitcast i32* %89 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4
  %92 = getelementptr inbounds i32, i32* %89, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4
  %95 = mul nsw <4 x i32> %91, %86
  %96 = mul nsw <4 x i32> %94, %87
  %97 = add i64 %85, 8
  %98 = add i64 %88, -1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %84, !llvm.loop !57

100:                                              ; preds = %84, %77
  %101 = phi <4 x i32> [ %78, %77 ], [ %95, %84 ]
  %102 = phi <4 x i32> [ %79, %77 ], [ %96, %84 ]
  %103 = mul <4 x i32> %102, %101
  %104 = shufflevector <4 x i32> %103, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %105 = mul <4 x i32> %103, %104
  %106 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %107 = mul <4 x i32> %105, %106
  %108 = extractelement <4 x i32> %107, i32 0
  %109 = icmp eq i64 %26, %23
  br i1 %109, label %121, label %110

110:                                              ; preds = %100, %21
  %111 = phi i64 [ 0, %21 ], [ %26, %100 ]
  %112 = phi i32 [ 1, %21 ], [ %108, %100 ]
  br label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %119, %113 ], [ %111, %110 ]
  %115 = phi i32 [ %118, %113 ], [ %112, %110 ]
  %116 = getelementptr inbounds i32, i32* %22, i64 %114
  %117 = load i32, i32* %116, align 4
  %118 = mul nsw i32 %117, %115
  %119 = add nuw nsw i64 %114, 1
  %120 = icmp eq i64 %119, %23
  br i1 %120, label %121, label %113, !llvm.loop !58

121:                                              ; preds = %113, %100
  %122 = phi i32 [ %108, %100 ], [ %118, %113 ]
  %123 = sext i32 %122 to i64
  %124 = shl nsw i64 %123, 2
  br label %125

125:                                              ; preds = %121, %18
  %126 = phi i64 [ 4, %18 ], [ %124, %121 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 %126, i1 false)
  br label %1022

127:                                              ; preds = %6
  %128 = sdiv i32 %3, 2
  %129 = srem i32 %3, 2
  tail call void @_ZN6tflite13optimized_ops18IntegerExponentPowIiEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_iS7_PS8_(%"struct.tflite::ArithmeticParams"* dereferenceable(80) %0, %"class.tflite::RuntimeShape"* dereferenceable(32) %1, i32* %2, i32 %128, %"class.tflite::RuntimeShape"* dereferenceable(32) %4, i32* %5)
  %130 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %131 = load i32, i32* %130, align 8
  %132 = icmp sgt i32 %131, 5
  %133 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  br i1 %132, label %134, label %137

134:                                              ; preds = %127
  %135 = getelementptr inbounds %union.anon, %union.anon* %133, i64 0, i32 0
  %136 = load i32*, i32** %135, align 8
  br label %140

137:                                              ; preds = %127
  %138 = bitcast %union.anon* %133 to i32*
  %139 = icmp sgt i32 %131, 0
  br i1 %139, label %140, label %347

140:                                              ; preds = %137, %134
  %141 = phi i32* [ %136, %134 ], [ %138, %137 ]
  %142 = zext i32 %131 to i64
  %143 = icmp ult i32 %131, 8
  br i1 %143, label %229, label %144

144:                                              ; preds = %140
  %145 = and i64 %142, 4294967288
  %146 = add nsw i64 %145, -8
  %147 = lshr exact i64 %146, 3
  %148 = add nuw nsw i64 %147, 1
  %149 = and i64 %148, 3
  %150 = icmp ult i64 %146, 24
  br i1 %150, label %196, label %151

151:                                              ; preds = %144
  %152 = sub nsw i64 %148, %149
  br label %153

153:                                              ; preds = %153, %151
  %154 = phi i64 [ 0, %151 ], [ %193, %153 ]
  %155 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %151 ], [ %191, %153 ]
  %156 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %151 ], [ %192, %153 ]
  %157 = phi i64 [ %152, %151 ], [ %194, %153 ]
  %158 = getelementptr inbounds i32, i32* %141, i64 %154
  %159 = bitcast i32* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 4
  %161 = getelementptr inbounds i32, i32* %158, i64 4
  %162 = bitcast i32* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 4
  %164 = mul nsw <4 x i32> %160, %155
  %165 = mul nsw <4 x i32> %163, %156
  %166 = or i64 %154, 8
  %167 = getelementptr inbounds i32, i32* %141, i64 %166
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 4
  %170 = getelementptr inbounds i32, i32* %167, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  %172 = load <4 x i32>, <4 x i32>* %171, align 4
  %173 = mul nsw <4 x i32> %169, %164
  %174 = mul nsw <4 x i32> %172, %165
  %175 = or i64 %154, 16
  %176 = getelementptr inbounds i32, i32* %141, i64 %175
  %177 = bitcast i32* %176 to <4 x i32>*
  %178 = load <4 x i32>, <4 x i32>* %177, align 4
  %179 = getelementptr inbounds i32, i32* %176, i64 4
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 4
  %182 = mul nsw <4 x i32> %178, %173
  %183 = mul nsw <4 x i32> %181, %174
  %184 = or i64 %154, 24
  %185 = getelementptr inbounds i32, i32* %141, i64 %184
  %186 = bitcast i32* %185 to <4 x i32>*
  %187 = load <4 x i32>, <4 x i32>* %186, align 4
  %188 = getelementptr inbounds i32, i32* %185, i64 4
  %189 = bitcast i32* %188 to <4 x i32>*
  %190 = load <4 x i32>, <4 x i32>* %189, align 4
  %191 = mul nsw <4 x i32> %187, %182
  %192 = mul nsw <4 x i32> %190, %183
  %193 = add i64 %154, 32
  %194 = add i64 %157, -4
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %196, label %153, !llvm.loop !59

196:                                              ; preds = %153, %144
  %197 = phi <4 x i32> [ undef, %144 ], [ %191, %153 ]
  %198 = phi <4 x i32> [ undef, %144 ], [ %192, %153 ]
  %199 = phi i64 [ 0, %144 ], [ %193, %153 ]
  %200 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %144 ], [ %191, %153 ]
  %201 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %144 ], [ %192, %153 ]
  %202 = icmp eq i64 %149, 0
  br i1 %202, label %219, label %203

203:                                              ; preds = %196, %203
  %204 = phi i64 [ %216, %203 ], [ %199, %196 ]
  %205 = phi <4 x i32> [ %214, %203 ], [ %200, %196 ]
  %206 = phi <4 x i32> [ %215, %203 ], [ %201, %196 ]
  %207 = phi i64 [ %217, %203 ], [ %149, %196 ]
  %208 = getelementptr inbounds i32, i32* %141, i64 %204
  %209 = bitcast i32* %208 to <4 x i32>*
  %210 = load <4 x i32>, <4 x i32>* %209, align 4
  %211 = getelementptr inbounds i32, i32* %208, i64 4
  %212 = bitcast i32* %211 to <4 x i32>*
  %213 = load <4 x i32>, <4 x i32>* %212, align 4
  %214 = mul nsw <4 x i32> %210, %205
  %215 = mul nsw <4 x i32> %213, %206
  %216 = add i64 %204, 8
  %217 = add i64 %207, -1
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %219, label %203, !llvm.loop !60

219:                                              ; preds = %203, %196
  %220 = phi <4 x i32> [ %197, %196 ], [ %214, %203 ]
  %221 = phi <4 x i32> [ %198, %196 ], [ %215, %203 ]
  %222 = mul <4 x i32> %221, %220
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %224 = mul <4 x i32> %222, %223
  %225 = shufflevector <4 x i32> %224, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %226 = mul <4 x i32> %224, %225
  %227 = extractelement <4 x i32> %226, i32 0
  %228 = icmp eq i64 %145, %142
  br i1 %228, label %240, label %229

229:                                              ; preds = %219, %140
  %230 = phi i64 [ 0, %140 ], [ %145, %219 ]
  %231 = phi i32 [ 1, %140 ], [ %227, %219 ]
  br label %232

232:                                              ; preds = %229, %232
  %233 = phi i64 [ %238, %232 ], [ %230, %229 ]
  %234 = phi i32 [ %237, %232 ], [ %231, %229 ]
  %235 = getelementptr inbounds i32, i32* %141, i64 %233
  %236 = load i32, i32* %235, align 4
  %237 = mul nsw i32 %236, %234
  %238 = add nuw nsw i64 %233, 1
  %239 = icmp eq i64 %238, %142
  br i1 %239, label %240, label %232, !llvm.loop !61

240:                                              ; preds = %232, %219
  %241 = phi i32 [ %227, %219 ], [ %237, %232 ]
  br i1 %132, label %242, label %245

242:                                              ; preds = %240
  %243 = getelementptr inbounds %union.anon, %union.anon* %133, i64 0, i32 0
  %244 = load i32*, i32** %243, align 8
  br label %248

245:                                              ; preds = %240
  %246 = bitcast %union.anon* %133 to i32*
  %247 = icmp sgt i32 %131, 0
  br i1 %247, label %248, label %347

248:                                              ; preds = %245, %242
  %249 = phi i32* [ %244, %242 ], [ %246, %245 ]
  %250 = icmp ult i32 %131, 8
  br i1 %250, label %336, label %251

251:                                              ; preds = %248
  %252 = and i64 %142, 4294967288
  %253 = add nsw i64 %252, -8
  %254 = lshr exact i64 %253, 3
  %255 = add nuw nsw i64 %254, 1
  %256 = and i64 %255, 3
  %257 = icmp ult i64 %253, 24
  br i1 %257, label %303, label %258

258:                                              ; preds = %251
  %259 = sub nsw i64 %255, %256
  br label %260

260:                                              ; preds = %260, %258
  %261 = phi i64 [ 0, %258 ], [ %300, %260 ]
  %262 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %258 ], [ %298, %260 ]
  %263 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %258 ], [ %299, %260 ]
  %264 = phi i64 [ %259, %258 ], [ %301, %260 ]
  %265 = getelementptr inbounds i32, i32* %249, i64 %261
  %266 = bitcast i32* %265 to <4 x i32>*
  %267 = load <4 x i32>, <4 x i32>* %266, align 4
  %268 = getelementptr inbounds i32, i32* %265, i64 4
  %269 = bitcast i32* %268 to <4 x i32>*
  %270 = load <4 x i32>, <4 x i32>* %269, align 4
  %271 = mul nsw <4 x i32> %267, %262
  %272 = mul nsw <4 x i32> %270, %263
  %273 = or i64 %261, 8
  %274 = getelementptr inbounds i32, i32* %249, i64 %273
  %275 = bitcast i32* %274 to <4 x i32>*
  %276 = load <4 x i32>, <4 x i32>* %275, align 4
  %277 = getelementptr inbounds i32, i32* %274, i64 4
  %278 = bitcast i32* %277 to <4 x i32>*
  %279 = load <4 x i32>, <4 x i32>* %278, align 4
  %280 = mul nsw <4 x i32> %276, %271
  %281 = mul nsw <4 x i32> %279, %272
  %282 = or i64 %261, 16
  %283 = getelementptr inbounds i32, i32* %249, i64 %282
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 4
  %286 = getelementptr inbounds i32, i32* %283, i64 4
  %287 = bitcast i32* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 4
  %289 = mul nsw <4 x i32> %285, %280
  %290 = mul nsw <4 x i32> %288, %281
  %291 = or i64 %261, 24
  %292 = getelementptr inbounds i32, i32* %249, i64 %291
  %293 = bitcast i32* %292 to <4 x i32>*
  %294 = load <4 x i32>, <4 x i32>* %293, align 4
  %295 = getelementptr inbounds i32, i32* %292, i64 4
  %296 = bitcast i32* %295 to <4 x i32>*
  %297 = load <4 x i32>, <4 x i32>* %296, align 4
  %298 = mul nsw <4 x i32> %294, %289
  %299 = mul nsw <4 x i32> %297, %290
  %300 = add i64 %261, 32
  %301 = add i64 %264, -4
  %302 = icmp eq i64 %301, 0
  br i1 %302, label %303, label %260, !llvm.loop !62

303:                                              ; preds = %260, %251
  %304 = phi <4 x i32> [ undef, %251 ], [ %298, %260 ]
  %305 = phi <4 x i32> [ undef, %251 ], [ %299, %260 ]
  %306 = phi i64 [ 0, %251 ], [ %300, %260 ]
  %307 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %251 ], [ %298, %260 ]
  %308 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %251 ], [ %299, %260 ]
  %309 = icmp eq i64 %256, 0
  br i1 %309, label %326, label %310

310:                                              ; preds = %303, %310
  %311 = phi i64 [ %323, %310 ], [ %306, %303 ]
  %312 = phi <4 x i32> [ %321, %310 ], [ %307, %303 ]
  %313 = phi <4 x i32> [ %322, %310 ], [ %308, %303 ]
  %314 = phi i64 [ %324, %310 ], [ %256, %303 ]
  %315 = getelementptr inbounds i32, i32* %249, i64 %311
  %316 = bitcast i32* %315 to <4 x i32>*
  %317 = load <4 x i32>, <4 x i32>* %316, align 4
  %318 = getelementptr inbounds i32, i32* %315, i64 4
  %319 = bitcast i32* %318 to <4 x i32>*
  %320 = load <4 x i32>, <4 x i32>* %319, align 4
  %321 = mul nsw <4 x i32> %317, %312
  %322 = mul nsw <4 x i32> %320, %313
  %323 = add i64 %311, 8
  %324 = add i64 %314, -1
  %325 = icmp eq i64 %324, 0
  br i1 %325, label %326, label %310, !llvm.loop !63

326:                                              ; preds = %310, %303
  %327 = phi <4 x i32> [ %304, %303 ], [ %321, %310 ]
  %328 = phi <4 x i32> [ %305, %303 ], [ %322, %310 ]
  %329 = mul <4 x i32> %328, %327
  %330 = shufflevector <4 x i32> %329, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %331 = mul <4 x i32> %329, %330
  %332 = shufflevector <4 x i32> %331, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %333 = mul <4 x i32> %331, %332
  %334 = extractelement <4 x i32> %333, i32 0
  %335 = icmp eq i64 %252, %142
  br i1 %335, label %347, label %336

336:                                              ; preds = %326, %248
  %337 = phi i64 [ 0, %248 ], [ %252, %326 ]
  %338 = phi i32 [ 1, %248 ], [ %334, %326 ]
  br label %339

339:                                              ; preds = %336, %339
  %340 = phi i64 [ %345, %339 ], [ %337, %336 ]
  %341 = phi i32 [ %344, %339 ], [ %338, %336 ]
  %342 = getelementptr inbounds i32, i32* %249, i64 %340
  %343 = load i32, i32* %342, align 4
  %344 = mul nsw i32 %343, %341
  %345 = add nuw nsw i64 %340, 1
  %346 = icmp eq i64 %345, %142
  br i1 %346, label %347, label %339, !llvm.loop !64

347:                                              ; preds = %339, %326, %137, %245
  %348 = phi i32 [ %241, %245 ], [ 1, %137 ], [ %241, %326 ], [ %241, %339 ]
  %349 = phi i32 [ 1, %245 ], [ 1, %137 ], [ %334, %326 ], [ %344, %339 ]
  %350 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %351 = load i32, i32* %350, align 8
  %352 = icmp sgt i32 %351, 5
  %353 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  br i1 %352, label %354, label %357

354:                                              ; preds = %347
  %355 = getelementptr inbounds %union.anon, %union.anon* %353, i64 0, i32 0
  %356 = load i32*, i32** %355, align 8
  br label %360

357:                                              ; preds = %347
  %358 = bitcast %union.anon* %353 to i32*
  %359 = icmp sgt i32 %351, 0
  br i1 %359, label %360, label %460

360:                                              ; preds = %357, %354
  %361 = phi i32* [ %356, %354 ], [ %358, %357 ]
  %362 = zext i32 %351 to i64
  %363 = icmp ult i32 %351, 8
  br i1 %363, label %449, label %364

364:                                              ; preds = %360
  %365 = and i64 %362, 4294967288
  %366 = add nsw i64 %365, -8
  %367 = lshr exact i64 %366, 3
  %368 = add nuw nsw i64 %367, 1
  %369 = and i64 %368, 3
  %370 = icmp ult i64 %366, 24
  br i1 %370, label %416, label %371

371:                                              ; preds = %364
  %372 = sub nsw i64 %368, %369
  br label %373

373:                                              ; preds = %373, %371
  %374 = phi i64 [ 0, %371 ], [ %413, %373 ]
  %375 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %371 ], [ %411, %373 ]
  %376 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %371 ], [ %412, %373 ]
  %377 = phi i64 [ %372, %371 ], [ %414, %373 ]
  %378 = getelementptr inbounds i32, i32* %361, i64 %374
  %379 = bitcast i32* %378 to <4 x i32>*
  %380 = load <4 x i32>, <4 x i32>* %379, align 4
  %381 = getelementptr inbounds i32, i32* %378, i64 4
  %382 = bitcast i32* %381 to <4 x i32>*
  %383 = load <4 x i32>, <4 x i32>* %382, align 4
  %384 = mul nsw <4 x i32> %380, %375
  %385 = mul nsw <4 x i32> %383, %376
  %386 = or i64 %374, 8
  %387 = getelementptr inbounds i32, i32* %361, i64 %386
  %388 = bitcast i32* %387 to <4 x i32>*
  %389 = load <4 x i32>, <4 x i32>* %388, align 4
  %390 = getelementptr inbounds i32, i32* %387, i64 4
  %391 = bitcast i32* %390 to <4 x i32>*
  %392 = load <4 x i32>, <4 x i32>* %391, align 4
  %393 = mul nsw <4 x i32> %389, %384
  %394 = mul nsw <4 x i32> %392, %385
  %395 = or i64 %374, 16
  %396 = getelementptr inbounds i32, i32* %361, i64 %395
  %397 = bitcast i32* %396 to <4 x i32>*
  %398 = load <4 x i32>, <4 x i32>* %397, align 4
  %399 = getelementptr inbounds i32, i32* %396, i64 4
  %400 = bitcast i32* %399 to <4 x i32>*
  %401 = load <4 x i32>, <4 x i32>* %400, align 4
  %402 = mul nsw <4 x i32> %398, %393
  %403 = mul nsw <4 x i32> %401, %394
  %404 = or i64 %374, 24
  %405 = getelementptr inbounds i32, i32* %361, i64 %404
  %406 = bitcast i32* %405 to <4 x i32>*
  %407 = load <4 x i32>, <4 x i32>* %406, align 4
  %408 = getelementptr inbounds i32, i32* %405, i64 4
  %409 = bitcast i32* %408 to <4 x i32>*
  %410 = load <4 x i32>, <4 x i32>* %409, align 4
  %411 = mul nsw <4 x i32> %407, %402
  %412 = mul nsw <4 x i32> %410, %403
  %413 = add i64 %374, 32
  %414 = add i64 %377, -4
  %415 = icmp eq i64 %414, 0
  br i1 %415, label %416, label %373, !llvm.loop !65

416:                                              ; preds = %373, %364
  %417 = phi <4 x i32> [ undef, %364 ], [ %411, %373 ]
  %418 = phi <4 x i32> [ undef, %364 ], [ %412, %373 ]
  %419 = phi i64 [ 0, %364 ], [ %413, %373 ]
  %420 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %364 ], [ %411, %373 ]
  %421 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %364 ], [ %412, %373 ]
  %422 = icmp eq i64 %369, 0
  br i1 %422, label %439, label %423

423:                                              ; preds = %416, %423
  %424 = phi i64 [ %436, %423 ], [ %419, %416 ]
  %425 = phi <4 x i32> [ %434, %423 ], [ %420, %416 ]
  %426 = phi <4 x i32> [ %435, %423 ], [ %421, %416 ]
  %427 = phi i64 [ %437, %423 ], [ %369, %416 ]
  %428 = getelementptr inbounds i32, i32* %361, i64 %424
  %429 = bitcast i32* %428 to <4 x i32>*
  %430 = load <4 x i32>, <4 x i32>* %429, align 4
  %431 = getelementptr inbounds i32, i32* %428, i64 4
  %432 = bitcast i32* %431 to <4 x i32>*
  %433 = load <4 x i32>, <4 x i32>* %432, align 4
  %434 = mul nsw <4 x i32> %430, %425
  %435 = mul nsw <4 x i32> %433, %426
  %436 = add i64 %424, 8
  %437 = add i64 %427, -1
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %439, label %423, !llvm.loop !66

439:                                              ; preds = %423, %416
  %440 = phi <4 x i32> [ %417, %416 ], [ %434, %423 ]
  %441 = phi <4 x i32> [ %418, %416 ], [ %435, %423 ]
  %442 = mul <4 x i32> %441, %440
  %443 = shufflevector <4 x i32> %442, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %444 = mul <4 x i32> %442, %443
  %445 = shufflevector <4 x i32> %444, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %446 = mul <4 x i32> %444, %445
  %447 = extractelement <4 x i32> %446, i32 0
  %448 = icmp eq i64 %365, %362
  br i1 %448, label %460, label %449

449:                                              ; preds = %439, %360
  %450 = phi i64 [ 0, %360 ], [ %365, %439 ]
  %451 = phi i32 [ 1, %360 ], [ %447, %439 ]
  br label %452

452:                                              ; preds = %449, %452
  %453 = phi i64 [ %458, %452 ], [ %450, %449 ]
  %454 = phi i32 [ %457, %452 ], [ %451, %449 ]
  %455 = getelementptr inbounds i32, i32* %361, i64 %453
  %456 = load i32, i32* %455, align 4
  %457 = mul nsw i32 %456, %454
  %458 = add nuw nsw i64 %453, 1
  %459 = icmp eq i64 %458, %362
  br i1 %459, label %460, label %452, !llvm.loop !67

460:                                              ; preds = %452, %439, %357
  %461 = phi i32 [ 1, %357 ], [ %447, %439 ], [ %457, %452 ]
  %462 = icmp eq i32 %348, %349
  br i1 %462, label %464, label %463

463:                                              ; preds = %460
  tail call void @abort() #13
  unreachable

464:                                              ; preds = %460
  %465 = icmp eq i32 %348, %461
  br i1 %465, label %467, label %466

466:                                              ; preds = %464
  tail call void @abort() #13
  unreachable

467:                                              ; preds = %464
  %468 = icmp sgt i32 %348, 0
  br i1 %468, label %469, label %552

469:                                              ; preds = %467
  %470 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 12
  %471 = load i32, i32* %470, align 4
  %472 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 11
  %473 = load i32, i32* %472, align 4
  %474 = sitofp i32 %473 to float
  %475 = sitofp i32 %471 to float
  %476 = zext i32 %348 to i64
  %477 = icmp ult i32 %348, 4
  br i1 %477, label %537, label %478

478:                                              ; preds = %469
  %479 = and i64 %476, 4294967292
  %480 = insertelement <4 x float> undef, float %474, i32 0
  %481 = shufflevector <4 x float> %480, <4 x float> undef, <4 x i32> zeroinitializer
  %482 = insertelement <4 x float> undef, float %475, i32 0
  %483 = shufflevector <4 x float> %482, <4 x float> undef, <4 x i32> zeroinitializer
  %484 = add nsw i64 %479, -4
  %485 = lshr exact i64 %484, 2
  %486 = add nuw nsw i64 %485, 1
  %487 = and i64 %486, 1
  %488 = icmp eq i64 %484, 0
  br i1 %488, label %520, label %489

489:                                              ; preds = %478
  %490 = sub nuw nsw i64 %486, %487
  br label %491

491:                                              ; preds = %491, %489
  %492 = phi i64 [ 0, %489 ], [ %517, %491 ]
  %493 = phi i64 [ %490, %489 ], [ %518, %491 ]
  %494 = getelementptr inbounds i32, i32* %5, i64 %492
  %495 = bitcast i32* %494 to <4 x i32>*
  %496 = load <4 x i32>, <4 x i32>* %495, align 4
  %497 = mul nsw <4 x i32> %496, %496
  %498 = sitofp <4 x i32> %497 to <4 x float>
  %499 = fcmp ogt <4 x float> %481, %498
  %500 = select <4 x i1> %499, <4 x float> %481, <4 x float> %498
  %501 = fcmp ogt <4 x float> %500, %483
  %502 = select <4 x i1> %501, <4 x float> %483, <4 x float> %500
  %503 = fptosi <4 x float> %502 to <4 x i32>
  %504 = bitcast i32* %494 to <4 x i32>*
  store <4 x i32> %503, <4 x i32>* %504, align 4
  %505 = or i64 %492, 4
  %506 = getelementptr inbounds i32, i32* %5, i64 %505
  %507 = bitcast i32* %506 to <4 x i32>*
  %508 = load <4 x i32>, <4 x i32>* %507, align 4
  %509 = mul nsw <4 x i32> %508, %508
  %510 = sitofp <4 x i32> %509 to <4 x float>
  %511 = fcmp ogt <4 x float> %481, %510
  %512 = select <4 x i1> %511, <4 x float> %481, <4 x float> %510
  %513 = fcmp ogt <4 x float> %512, %483
  %514 = select <4 x i1> %513, <4 x float> %483, <4 x float> %512
  %515 = fptosi <4 x float> %514 to <4 x i32>
  %516 = bitcast i32* %506 to <4 x i32>*
  store <4 x i32> %515, <4 x i32>* %516, align 4
  %517 = add i64 %492, 8
  %518 = add i64 %493, -2
  %519 = icmp eq i64 %518, 0
  br i1 %519, label %520, label %491, !llvm.loop !68

520:                                              ; preds = %491, %478
  %521 = phi i64 [ 0, %478 ], [ %517, %491 ]
  %522 = icmp eq i64 %487, 0
  br i1 %522, label %535, label %523

523:                                              ; preds = %520
  %524 = getelementptr inbounds i32, i32* %5, i64 %521
  %525 = bitcast i32* %524 to <4 x i32>*
  %526 = load <4 x i32>, <4 x i32>* %525, align 4
  %527 = mul nsw <4 x i32> %526, %526
  %528 = sitofp <4 x i32> %527 to <4 x float>
  %529 = fcmp ogt <4 x float> %481, %528
  %530 = select <4 x i1> %529, <4 x float> %481, <4 x float> %528
  %531 = fcmp ogt <4 x float> %530, %483
  %532 = select <4 x i1> %531, <4 x float> %483, <4 x float> %530
  %533 = fptosi <4 x float> %532 to <4 x i32>
  %534 = bitcast i32* %524 to <4 x i32>*
  store <4 x i32> %533, <4 x i32>* %534, align 4
  br label %535

535:                                              ; preds = %520, %523
  %536 = icmp eq i64 %479, %476
  br i1 %536, label %552, label %537

537:                                              ; preds = %535, %469
  %538 = phi i64 [ 0, %469 ], [ %479, %535 ]
  br label %539

539:                                              ; preds = %537, %539
  %540 = phi i64 [ %550, %539 ], [ %538, %537 ]
  %541 = getelementptr inbounds i32, i32* %5, i64 %540
  %542 = load i32, i32* %541, align 4
  %543 = mul nsw i32 %542, %542
  %544 = sitofp i32 %543 to float
  %545 = fcmp olt float %544, %474
  %546 = select i1 %545, float %474, float %544
  %547 = fcmp ogt float %546, %475
  %548 = select i1 %547, float %475, float %546
  %549 = fptosi float %548 to i32
  store i32 %549, i32* %541, align 4
  %550 = add nuw nsw i64 %540, 1
  %551 = icmp eq i64 %550, %476
  br i1 %551, label %552, label %539, !llvm.loop !69

552:                                              ; preds = %539, %535, %467
  %553 = icmp eq i32 %129, 1
  br i1 %553, label %554, label %1022

554:                                              ; preds = %552
  %555 = load i32, i32* %130, align 8
  %556 = icmp sgt i32 %555, 5
  br i1 %556, label %557, label %560

557:                                              ; preds = %554
  %558 = getelementptr inbounds %union.anon, %union.anon* %133, i64 0, i32 0
  %559 = load i32*, i32** %558, align 8
  br label %563

560:                                              ; preds = %554
  %561 = bitcast %union.anon* %133 to i32*
  %562 = icmp sgt i32 %555, 0
  br i1 %562, label %563, label %770

563:                                              ; preds = %560, %557
  %564 = phi i32* [ %559, %557 ], [ %561, %560 ]
  %565 = zext i32 %555 to i64
  %566 = icmp ult i32 %555, 8
  br i1 %566, label %652, label %567

567:                                              ; preds = %563
  %568 = and i64 %565, 4294967288
  %569 = add nsw i64 %568, -8
  %570 = lshr exact i64 %569, 3
  %571 = add nuw nsw i64 %570, 1
  %572 = and i64 %571, 3
  %573 = icmp ult i64 %569, 24
  br i1 %573, label %619, label %574

574:                                              ; preds = %567
  %575 = sub nsw i64 %571, %572
  br label %576

576:                                              ; preds = %576, %574
  %577 = phi i64 [ 0, %574 ], [ %616, %576 ]
  %578 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %574 ], [ %614, %576 ]
  %579 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %574 ], [ %615, %576 ]
  %580 = phi i64 [ %575, %574 ], [ %617, %576 ]
  %581 = getelementptr inbounds i32, i32* %564, i64 %577
  %582 = bitcast i32* %581 to <4 x i32>*
  %583 = load <4 x i32>, <4 x i32>* %582, align 4
  %584 = getelementptr inbounds i32, i32* %581, i64 4
  %585 = bitcast i32* %584 to <4 x i32>*
  %586 = load <4 x i32>, <4 x i32>* %585, align 4
  %587 = mul nsw <4 x i32> %583, %578
  %588 = mul nsw <4 x i32> %586, %579
  %589 = or i64 %577, 8
  %590 = getelementptr inbounds i32, i32* %564, i64 %589
  %591 = bitcast i32* %590 to <4 x i32>*
  %592 = load <4 x i32>, <4 x i32>* %591, align 4
  %593 = getelementptr inbounds i32, i32* %590, i64 4
  %594 = bitcast i32* %593 to <4 x i32>*
  %595 = load <4 x i32>, <4 x i32>* %594, align 4
  %596 = mul nsw <4 x i32> %592, %587
  %597 = mul nsw <4 x i32> %595, %588
  %598 = or i64 %577, 16
  %599 = getelementptr inbounds i32, i32* %564, i64 %598
  %600 = bitcast i32* %599 to <4 x i32>*
  %601 = load <4 x i32>, <4 x i32>* %600, align 4
  %602 = getelementptr inbounds i32, i32* %599, i64 4
  %603 = bitcast i32* %602 to <4 x i32>*
  %604 = load <4 x i32>, <4 x i32>* %603, align 4
  %605 = mul nsw <4 x i32> %601, %596
  %606 = mul nsw <4 x i32> %604, %597
  %607 = or i64 %577, 24
  %608 = getelementptr inbounds i32, i32* %564, i64 %607
  %609 = bitcast i32* %608 to <4 x i32>*
  %610 = load <4 x i32>, <4 x i32>* %609, align 4
  %611 = getelementptr inbounds i32, i32* %608, i64 4
  %612 = bitcast i32* %611 to <4 x i32>*
  %613 = load <4 x i32>, <4 x i32>* %612, align 4
  %614 = mul nsw <4 x i32> %610, %605
  %615 = mul nsw <4 x i32> %613, %606
  %616 = add i64 %577, 32
  %617 = add i64 %580, -4
  %618 = icmp eq i64 %617, 0
  br i1 %618, label %619, label %576, !llvm.loop !70

619:                                              ; preds = %576, %567
  %620 = phi <4 x i32> [ undef, %567 ], [ %614, %576 ]
  %621 = phi <4 x i32> [ undef, %567 ], [ %615, %576 ]
  %622 = phi i64 [ 0, %567 ], [ %616, %576 ]
  %623 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %567 ], [ %614, %576 ]
  %624 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %567 ], [ %615, %576 ]
  %625 = icmp eq i64 %572, 0
  br i1 %625, label %642, label %626

626:                                              ; preds = %619, %626
  %627 = phi i64 [ %639, %626 ], [ %622, %619 ]
  %628 = phi <4 x i32> [ %637, %626 ], [ %623, %619 ]
  %629 = phi <4 x i32> [ %638, %626 ], [ %624, %619 ]
  %630 = phi i64 [ %640, %626 ], [ %572, %619 ]
  %631 = getelementptr inbounds i32, i32* %564, i64 %627
  %632 = bitcast i32* %631 to <4 x i32>*
  %633 = load <4 x i32>, <4 x i32>* %632, align 4
  %634 = getelementptr inbounds i32, i32* %631, i64 4
  %635 = bitcast i32* %634 to <4 x i32>*
  %636 = load <4 x i32>, <4 x i32>* %635, align 4
  %637 = mul nsw <4 x i32> %633, %628
  %638 = mul nsw <4 x i32> %636, %629
  %639 = add i64 %627, 8
  %640 = add i64 %630, -1
  %641 = icmp eq i64 %640, 0
  br i1 %641, label %642, label %626, !llvm.loop !71

642:                                              ; preds = %626, %619
  %643 = phi <4 x i32> [ %620, %619 ], [ %637, %626 ]
  %644 = phi <4 x i32> [ %621, %619 ], [ %638, %626 ]
  %645 = mul <4 x i32> %644, %643
  %646 = shufflevector <4 x i32> %645, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %647 = mul <4 x i32> %645, %646
  %648 = shufflevector <4 x i32> %647, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %649 = mul <4 x i32> %647, %648
  %650 = extractelement <4 x i32> %649, i32 0
  %651 = icmp eq i64 %568, %565
  br i1 %651, label %663, label %652

652:                                              ; preds = %642, %563
  %653 = phi i64 [ 0, %563 ], [ %568, %642 ]
  %654 = phi i32 [ 1, %563 ], [ %650, %642 ]
  br label %655

655:                                              ; preds = %652, %655
  %656 = phi i64 [ %661, %655 ], [ %653, %652 ]
  %657 = phi i32 [ %660, %655 ], [ %654, %652 ]
  %658 = getelementptr inbounds i32, i32* %564, i64 %656
  %659 = load i32, i32* %658, align 4
  %660 = mul nsw i32 %659, %657
  %661 = add nuw nsw i64 %656, 1
  %662 = icmp eq i64 %661, %565
  br i1 %662, label %663, label %655, !llvm.loop !72

663:                                              ; preds = %655, %642
  %664 = phi i32 [ %650, %642 ], [ %660, %655 ]
  br i1 %556, label %665, label %668

665:                                              ; preds = %663
  %666 = getelementptr inbounds %union.anon, %union.anon* %133, i64 0, i32 0
  %667 = load i32*, i32** %666, align 8
  br label %671

668:                                              ; preds = %663
  %669 = bitcast %union.anon* %133 to i32*
  %670 = icmp sgt i32 %555, 0
  br i1 %670, label %671, label %770

671:                                              ; preds = %668, %665
  %672 = phi i32* [ %667, %665 ], [ %669, %668 ]
  %673 = icmp ult i32 %555, 8
  br i1 %673, label %759, label %674

674:                                              ; preds = %671
  %675 = and i64 %565, 4294967288
  %676 = add nsw i64 %675, -8
  %677 = lshr exact i64 %676, 3
  %678 = add nuw nsw i64 %677, 1
  %679 = and i64 %678, 3
  %680 = icmp ult i64 %676, 24
  br i1 %680, label %726, label %681

681:                                              ; preds = %674
  %682 = sub nsw i64 %678, %679
  br label %683

683:                                              ; preds = %683, %681
  %684 = phi i64 [ 0, %681 ], [ %723, %683 ]
  %685 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %681 ], [ %721, %683 ]
  %686 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %681 ], [ %722, %683 ]
  %687 = phi i64 [ %682, %681 ], [ %724, %683 ]
  %688 = getelementptr inbounds i32, i32* %672, i64 %684
  %689 = bitcast i32* %688 to <4 x i32>*
  %690 = load <4 x i32>, <4 x i32>* %689, align 4
  %691 = getelementptr inbounds i32, i32* %688, i64 4
  %692 = bitcast i32* %691 to <4 x i32>*
  %693 = load <4 x i32>, <4 x i32>* %692, align 4
  %694 = mul nsw <4 x i32> %690, %685
  %695 = mul nsw <4 x i32> %693, %686
  %696 = or i64 %684, 8
  %697 = getelementptr inbounds i32, i32* %672, i64 %696
  %698 = bitcast i32* %697 to <4 x i32>*
  %699 = load <4 x i32>, <4 x i32>* %698, align 4
  %700 = getelementptr inbounds i32, i32* %697, i64 4
  %701 = bitcast i32* %700 to <4 x i32>*
  %702 = load <4 x i32>, <4 x i32>* %701, align 4
  %703 = mul nsw <4 x i32> %699, %694
  %704 = mul nsw <4 x i32> %702, %695
  %705 = or i64 %684, 16
  %706 = getelementptr inbounds i32, i32* %672, i64 %705
  %707 = bitcast i32* %706 to <4 x i32>*
  %708 = load <4 x i32>, <4 x i32>* %707, align 4
  %709 = getelementptr inbounds i32, i32* %706, i64 4
  %710 = bitcast i32* %709 to <4 x i32>*
  %711 = load <4 x i32>, <4 x i32>* %710, align 4
  %712 = mul nsw <4 x i32> %708, %703
  %713 = mul nsw <4 x i32> %711, %704
  %714 = or i64 %684, 24
  %715 = getelementptr inbounds i32, i32* %672, i64 %714
  %716 = bitcast i32* %715 to <4 x i32>*
  %717 = load <4 x i32>, <4 x i32>* %716, align 4
  %718 = getelementptr inbounds i32, i32* %715, i64 4
  %719 = bitcast i32* %718 to <4 x i32>*
  %720 = load <4 x i32>, <4 x i32>* %719, align 4
  %721 = mul nsw <4 x i32> %717, %712
  %722 = mul nsw <4 x i32> %720, %713
  %723 = add i64 %684, 32
  %724 = add i64 %687, -4
  %725 = icmp eq i64 %724, 0
  br i1 %725, label %726, label %683, !llvm.loop !73

726:                                              ; preds = %683, %674
  %727 = phi <4 x i32> [ undef, %674 ], [ %721, %683 ]
  %728 = phi <4 x i32> [ undef, %674 ], [ %722, %683 ]
  %729 = phi i64 [ 0, %674 ], [ %723, %683 ]
  %730 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %674 ], [ %721, %683 ]
  %731 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %674 ], [ %722, %683 ]
  %732 = icmp eq i64 %679, 0
  br i1 %732, label %749, label %733

733:                                              ; preds = %726, %733
  %734 = phi i64 [ %746, %733 ], [ %729, %726 ]
  %735 = phi <4 x i32> [ %744, %733 ], [ %730, %726 ]
  %736 = phi <4 x i32> [ %745, %733 ], [ %731, %726 ]
  %737 = phi i64 [ %747, %733 ], [ %679, %726 ]
  %738 = getelementptr inbounds i32, i32* %672, i64 %734
  %739 = bitcast i32* %738 to <4 x i32>*
  %740 = load <4 x i32>, <4 x i32>* %739, align 4
  %741 = getelementptr inbounds i32, i32* %738, i64 4
  %742 = bitcast i32* %741 to <4 x i32>*
  %743 = load <4 x i32>, <4 x i32>* %742, align 4
  %744 = mul nsw <4 x i32> %740, %735
  %745 = mul nsw <4 x i32> %743, %736
  %746 = add i64 %734, 8
  %747 = add i64 %737, -1
  %748 = icmp eq i64 %747, 0
  br i1 %748, label %749, label %733, !llvm.loop !74

749:                                              ; preds = %733, %726
  %750 = phi <4 x i32> [ %727, %726 ], [ %744, %733 ]
  %751 = phi <4 x i32> [ %728, %726 ], [ %745, %733 ]
  %752 = mul <4 x i32> %751, %750
  %753 = shufflevector <4 x i32> %752, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %754 = mul <4 x i32> %752, %753
  %755 = shufflevector <4 x i32> %754, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %756 = mul <4 x i32> %754, %755
  %757 = extractelement <4 x i32> %756, i32 0
  %758 = icmp eq i64 %675, %565
  br i1 %758, label %770, label %759

759:                                              ; preds = %749, %671
  %760 = phi i64 [ 0, %671 ], [ %675, %749 ]
  %761 = phi i32 [ 1, %671 ], [ %757, %749 ]
  br label %762

762:                                              ; preds = %759, %762
  %763 = phi i64 [ %768, %762 ], [ %760, %759 ]
  %764 = phi i32 [ %767, %762 ], [ %761, %759 ]
  %765 = getelementptr inbounds i32, i32* %672, i64 %763
  %766 = load i32, i32* %765, align 4
  %767 = mul nsw i32 %766, %764
  %768 = add nuw nsw i64 %763, 1
  %769 = icmp eq i64 %768, %565
  br i1 %769, label %770, label %762, !llvm.loop !75

770:                                              ; preds = %762, %749, %560, %668
  %771 = phi i32 [ %664, %668 ], [ 1, %560 ], [ %664, %749 ], [ %664, %762 ]
  %772 = phi i32 [ 1, %668 ], [ 1, %560 ], [ %757, %749 ], [ %767, %762 ]
  %773 = load i32, i32* %350, align 8
  %774 = icmp sgt i32 %773, 5
  br i1 %774, label %775, label %778

775:                                              ; preds = %770
  %776 = getelementptr inbounds %union.anon, %union.anon* %353, i64 0, i32 0
  %777 = load i32*, i32** %776, align 8
  br label %781

778:                                              ; preds = %770
  %779 = bitcast %union.anon* %353 to i32*
  %780 = icmp sgt i32 %773, 0
  br i1 %780, label %781, label %881

781:                                              ; preds = %778, %775
  %782 = phi i32* [ %777, %775 ], [ %779, %778 ]
  %783 = zext i32 %773 to i64
  %784 = icmp ult i32 %773, 8
  br i1 %784, label %870, label %785

785:                                              ; preds = %781
  %786 = and i64 %783, 4294967288
  %787 = add nsw i64 %786, -8
  %788 = lshr exact i64 %787, 3
  %789 = add nuw nsw i64 %788, 1
  %790 = and i64 %789, 3
  %791 = icmp ult i64 %787, 24
  br i1 %791, label %837, label %792

792:                                              ; preds = %785
  %793 = sub nsw i64 %789, %790
  br label %794

794:                                              ; preds = %794, %792
  %795 = phi i64 [ 0, %792 ], [ %834, %794 ]
  %796 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %792 ], [ %832, %794 ]
  %797 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %792 ], [ %833, %794 ]
  %798 = phi i64 [ %793, %792 ], [ %835, %794 ]
  %799 = getelementptr inbounds i32, i32* %782, i64 %795
  %800 = bitcast i32* %799 to <4 x i32>*
  %801 = load <4 x i32>, <4 x i32>* %800, align 4
  %802 = getelementptr inbounds i32, i32* %799, i64 4
  %803 = bitcast i32* %802 to <4 x i32>*
  %804 = load <4 x i32>, <4 x i32>* %803, align 4
  %805 = mul nsw <4 x i32> %801, %796
  %806 = mul nsw <4 x i32> %804, %797
  %807 = or i64 %795, 8
  %808 = getelementptr inbounds i32, i32* %782, i64 %807
  %809 = bitcast i32* %808 to <4 x i32>*
  %810 = load <4 x i32>, <4 x i32>* %809, align 4
  %811 = getelementptr inbounds i32, i32* %808, i64 4
  %812 = bitcast i32* %811 to <4 x i32>*
  %813 = load <4 x i32>, <4 x i32>* %812, align 4
  %814 = mul nsw <4 x i32> %810, %805
  %815 = mul nsw <4 x i32> %813, %806
  %816 = or i64 %795, 16
  %817 = getelementptr inbounds i32, i32* %782, i64 %816
  %818 = bitcast i32* %817 to <4 x i32>*
  %819 = load <4 x i32>, <4 x i32>* %818, align 4
  %820 = getelementptr inbounds i32, i32* %817, i64 4
  %821 = bitcast i32* %820 to <4 x i32>*
  %822 = load <4 x i32>, <4 x i32>* %821, align 4
  %823 = mul nsw <4 x i32> %819, %814
  %824 = mul nsw <4 x i32> %822, %815
  %825 = or i64 %795, 24
  %826 = getelementptr inbounds i32, i32* %782, i64 %825
  %827 = bitcast i32* %826 to <4 x i32>*
  %828 = load <4 x i32>, <4 x i32>* %827, align 4
  %829 = getelementptr inbounds i32, i32* %826, i64 4
  %830 = bitcast i32* %829 to <4 x i32>*
  %831 = load <4 x i32>, <4 x i32>* %830, align 4
  %832 = mul nsw <4 x i32> %828, %823
  %833 = mul nsw <4 x i32> %831, %824
  %834 = add i64 %795, 32
  %835 = add i64 %798, -4
  %836 = icmp eq i64 %835, 0
  br i1 %836, label %837, label %794, !llvm.loop !76

837:                                              ; preds = %794, %785
  %838 = phi <4 x i32> [ undef, %785 ], [ %832, %794 ]
  %839 = phi <4 x i32> [ undef, %785 ], [ %833, %794 ]
  %840 = phi i64 [ 0, %785 ], [ %834, %794 ]
  %841 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %785 ], [ %832, %794 ]
  %842 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %785 ], [ %833, %794 ]
  %843 = icmp eq i64 %790, 0
  br i1 %843, label %860, label %844

844:                                              ; preds = %837, %844
  %845 = phi i64 [ %857, %844 ], [ %840, %837 ]
  %846 = phi <4 x i32> [ %855, %844 ], [ %841, %837 ]
  %847 = phi <4 x i32> [ %856, %844 ], [ %842, %837 ]
  %848 = phi i64 [ %858, %844 ], [ %790, %837 ]
  %849 = getelementptr inbounds i32, i32* %782, i64 %845
  %850 = bitcast i32* %849 to <4 x i32>*
  %851 = load <4 x i32>, <4 x i32>* %850, align 4
  %852 = getelementptr inbounds i32, i32* %849, i64 4
  %853 = bitcast i32* %852 to <4 x i32>*
  %854 = load <4 x i32>, <4 x i32>* %853, align 4
  %855 = mul nsw <4 x i32> %851, %846
  %856 = mul nsw <4 x i32> %854, %847
  %857 = add i64 %845, 8
  %858 = add i64 %848, -1
  %859 = icmp eq i64 %858, 0
  br i1 %859, label %860, label %844, !llvm.loop !77

860:                                              ; preds = %844, %837
  %861 = phi <4 x i32> [ %838, %837 ], [ %855, %844 ]
  %862 = phi <4 x i32> [ %839, %837 ], [ %856, %844 ]
  %863 = mul <4 x i32> %862, %861
  %864 = shufflevector <4 x i32> %863, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %865 = mul <4 x i32> %863, %864
  %866 = shufflevector <4 x i32> %865, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %867 = mul <4 x i32> %865, %866
  %868 = extractelement <4 x i32> %867, i32 0
  %869 = icmp eq i64 %786, %783
  br i1 %869, label %881, label %870

870:                                              ; preds = %860, %781
  %871 = phi i64 [ 0, %781 ], [ %786, %860 ]
  %872 = phi i32 [ 1, %781 ], [ %868, %860 ]
  br label %873

873:                                              ; preds = %870, %873
  %874 = phi i64 [ %879, %873 ], [ %871, %870 ]
  %875 = phi i32 [ %878, %873 ], [ %872, %870 ]
  %876 = getelementptr inbounds i32, i32* %782, i64 %874
  %877 = load i32, i32* %876, align 4
  %878 = mul nsw i32 %877, %875
  %879 = add nuw nsw i64 %874, 1
  %880 = icmp eq i64 %879, %783
  br i1 %880, label %881, label %873, !llvm.loop !78

881:                                              ; preds = %873, %860, %778
  %882 = phi i32 [ 1, %778 ], [ %868, %860 ], [ %878, %873 ]
  %883 = icmp eq i32 %771, %772
  br i1 %883, label %885, label %884

884:                                              ; preds = %881
  tail call void @abort() #13
  unreachable

885:                                              ; preds = %881
  %886 = icmp eq i32 %771, %882
  br i1 %886, label %888, label %887

887:                                              ; preds = %885
  tail call void @abort() #13
  unreachable

888:                                              ; preds = %885
  %889 = icmp sgt i32 %771, 0
  br i1 %889, label %890, label %1022

890:                                              ; preds = %888
  %891 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 12
  %892 = load i32, i32* %891, align 4
  %893 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 11
  %894 = load i32, i32* %893, align 4
  %895 = sitofp i32 %894 to float
  %896 = sitofp i32 %892 to float
  %897 = zext i32 %771 to i64
  %898 = icmp ult i32 %771, 4
  br i1 %898, label %973, label %899

899:                                              ; preds = %890
  %900 = getelementptr i32, i32* %5, i64 %897
  %901 = getelementptr i32, i32* %2, i64 %897
  %902 = icmp ugt i32* %901, %5
  %903 = icmp ugt i32* %900, %2
  %904 = and i1 %902, %903
  br i1 %904, label %973, label %905

905:                                              ; preds = %899
  %906 = and i64 %897, 4294967292
  %907 = insertelement <4 x float> undef, float %895, i32 0
  %908 = shufflevector <4 x float> %907, <4 x float> undef, <4 x i32> zeroinitializer
  %909 = insertelement <4 x float> undef, float %896, i32 0
  %910 = shufflevector <4 x float> %909, <4 x float> undef, <4 x i32> zeroinitializer
  %911 = add nsw i64 %906, -4
  %912 = lshr exact i64 %911, 2
  %913 = add nuw nsw i64 %912, 1
  %914 = and i64 %913, 1
  %915 = icmp eq i64 %911, 0
  br i1 %915, label %953, label %916

916:                                              ; preds = %905
  %917 = sub nuw nsw i64 %913, %914
  br label %918

918:                                              ; preds = %918, %916
  %919 = phi i64 [ 0, %916 ], [ %950, %918 ]
  %920 = phi i64 [ %917, %916 ], [ %951, %918 ]
  %921 = getelementptr inbounds i32, i32* %2, i64 %919
  %922 = bitcast i32* %921 to <4 x i32>*
  %923 = load <4 x i32>, <4 x i32>* %922, align 4, !alias.scope !79
  %924 = getelementptr inbounds i32, i32* %5, i64 %919
  %925 = bitcast i32* %924 to <4 x i32>*
  %926 = load <4 x i32>, <4 x i32>* %925, align 4, !alias.scope !82, !noalias !79
  %927 = mul nsw <4 x i32> %926, %923
  %928 = sitofp <4 x i32> %927 to <4 x float>
  %929 = fcmp ogt <4 x float> %908, %928
  %930 = select <4 x i1> %929, <4 x float> %908, <4 x float> %928
  %931 = fcmp ogt <4 x float> %930, %910
  %932 = select <4 x i1> %931, <4 x float> %910, <4 x float> %930
  %933 = fptosi <4 x float> %932 to <4 x i32>
  %934 = bitcast i32* %924 to <4 x i32>*
  store <4 x i32> %933, <4 x i32>* %934, align 4, !alias.scope !82, !noalias !79
  %935 = or i64 %919, 4
  %936 = getelementptr inbounds i32, i32* %2, i64 %935
  %937 = bitcast i32* %936 to <4 x i32>*
  %938 = load <4 x i32>, <4 x i32>* %937, align 4, !alias.scope !79
  %939 = getelementptr inbounds i32, i32* %5, i64 %935
  %940 = bitcast i32* %939 to <4 x i32>*
  %941 = load <4 x i32>, <4 x i32>* %940, align 4, !alias.scope !82, !noalias !79
  %942 = mul nsw <4 x i32> %941, %938
  %943 = sitofp <4 x i32> %942 to <4 x float>
  %944 = fcmp ogt <4 x float> %908, %943
  %945 = select <4 x i1> %944, <4 x float> %908, <4 x float> %943
  %946 = fcmp ogt <4 x float> %945, %910
  %947 = select <4 x i1> %946, <4 x float> %910, <4 x float> %945
  %948 = fptosi <4 x float> %947 to <4 x i32>
  %949 = bitcast i32* %939 to <4 x i32>*
  store <4 x i32> %948, <4 x i32>* %949, align 4, !alias.scope !82, !noalias !79
  %950 = add i64 %919, 8
  %951 = add i64 %920, -2
  %952 = icmp eq i64 %951, 0
  br i1 %952, label %953, label %918, !llvm.loop !84

953:                                              ; preds = %918, %905
  %954 = phi i64 [ 0, %905 ], [ %950, %918 ]
  %955 = icmp eq i64 %914, 0
  br i1 %955, label %971, label %956

956:                                              ; preds = %953
  %957 = getelementptr inbounds i32, i32* %2, i64 %954
  %958 = bitcast i32* %957 to <4 x i32>*
  %959 = load <4 x i32>, <4 x i32>* %958, align 4, !alias.scope !79
  %960 = getelementptr inbounds i32, i32* %5, i64 %954
  %961 = bitcast i32* %960 to <4 x i32>*
  %962 = load <4 x i32>, <4 x i32>* %961, align 4, !alias.scope !82, !noalias !79
  %963 = mul nsw <4 x i32> %962, %959
  %964 = sitofp <4 x i32> %963 to <4 x float>
  %965 = fcmp ogt <4 x float> %908, %964
  %966 = select <4 x i1> %965, <4 x float> %908, <4 x float> %964
  %967 = fcmp ogt <4 x float> %966, %910
  %968 = select <4 x i1> %967, <4 x float> %910, <4 x float> %966
  %969 = fptosi <4 x float> %968 to <4 x i32>
  %970 = bitcast i32* %960 to <4 x i32>*
  store <4 x i32> %969, <4 x i32>* %970, align 4, !alias.scope !82, !noalias !79
  br label %971

971:                                              ; preds = %953, %956
  %972 = icmp eq i64 %906, %897
  br i1 %972, label %1022, label %973

973:                                              ; preds = %971, %899, %890
  %974 = phi i64 [ 0, %899 ], [ 0, %890 ], [ %906, %971 ]
  %975 = xor i64 %974, -1
  %976 = and i64 %897, 1
  %977 = icmp eq i64 %976, 0
  br i1 %977, label %991, label %978

978:                                              ; preds = %973
  %979 = getelementptr inbounds i32, i32* %2, i64 %974
  %980 = load i32, i32* %979, align 4
  %981 = getelementptr inbounds i32, i32* %5, i64 %974
  %982 = load i32, i32* %981, align 4
  %983 = mul nsw i32 %982, %980
  %984 = sitofp i32 %983 to float
  %985 = fcmp olt float %984, %895
  %986 = select i1 %985, float %895, float %984
  %987 = fcmp ogt float %986, %896
  %988 = select i1 %987, float %896, float %986
  %989 = fptosi float %988 to i32
  store i32 %989, i32* %981, align 4
  %990 = or i64 %974, 1
  br label %991

991:                                              ; preds = %973, %978
  %992 = phi i64 [ %974, %973 ], [ %990, %978 ]
  %993 = sub nsw i64 0, %897
  %994 = icmp eq i64 %975, %993
  br i1 %994, label %1022, label %995

995:                                              ; preds = %991, %995
  %996 = phi i64 [ %1020, %995 ], [ %992, %991 ]
  %997 = getelementptr inbounds i32, i32* %2, i64 %996
  %998 = load i32, i32* %997, align 4
  %999 = getelementptr inbounds i32, i32* %5, i64 %996
  %1000 = load i32, i32* %999, align 4
  %1001 = mul nsw i32 %1000, %998
  %1002 = sitofp i32 %1001 to float
  %1003 = fcmp olt float %1002, %895
  %1004 = select i1 %1003, float %895, float %1002
  %1005 = fcmp ogt float %1004, %896
  %1006 = select i1 %1005, float %896, float %1004
  %1007 = fptosi float %1006 to i32
  store i32 %1007, i32* %999, align 4
  %1008 = add nuw nsw i64 %996, 1
  %1009 = getelementptr inbounds i32, i32* %2, i64 %1008
  %1010 = load i32, i32* %1009, align 4
  %1011 = getelementptr inbounds i32, i32* %5, i64 %1008
  %1012 = load i32, i32* %1011, align 4
  %1013 = mul nsw i32 %1012, %1010
  %1014 = sitofp i32 %1013 to float
  %1015 = fcmp olt float %1014, %895
  %1016 = select i1 %1015, float %895, float %1014
  %1017 = fcmp ogt float %1016, %896
  %1018 = select i1 %1017, float %896, float %1016
  %1019 = fptosi float %1018 to i32
  store i32 %1019, i32* %1011, align 4
  %1020 = add nuw nsw i64 %996, 2
  %1021 = icmp eq i64 %1020, %897
  br i1 %1021, label %1022, label %995, !llvm.loop !85

1022:                                             ; preds = %991, %995, %971, %888, %552, %125
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops18BroadcastPow4DSlowIiEEvRKNS_12RuntimeShapeEPKT_S4_S7_S4_PS5_(%"class.tflite::RuntimeShape"* dereferenceable(32), i32*, %"class.tflite::RuntimeShape"* dereferenceable(32), i32*, %"class.tflite::RuntimeShape"* dereferenceable(32), i32*) local_unnamed_addr #7 comdat {
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"struct.tflite::NdArrayDesc", align 4
  %9 = alloca %"struct.tflite::NdArrayDesc", align 4
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %11 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 32, i1 false)
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %12, align 8, !alias.scope !86
  %13 = load i32, i32* %10, align 8, !noalias !86
  %14 = icmp sgt i32 %13, 4
  br i1 %14, label %15, label %16

15:                                               ; preds = %6
  tail call void @abort() #13, !noalias !86
  unreachable

16:                                               ; preds = %6
  store i32 4, i32* %12, align 8, !alias.scope !86
  %17 = sub i32 4, %13
  %18 = icmp sgt i32 %17, 0
  %19 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  br i1 %18, label %20, label %100

20:                                               ; preds = %16
  %21 = bitcast %union.anon* %19 to [5 x i32]*
  %22 = zext i32 %17 to i64
  %23 = icmp ult i32 %17, 8
  br i1 %23, label %93, label %24

24:                                               ; preds = %20
  %25 = and i64 %22, 4294967288
  %26 = add nsw i64 %25, -8
  %27 = lshr exact i64 %26, 3
  %28 = add nuw nsw i64 %27, 1
  %29 = and i64 %28, 7
  %30 = icmp ult i64 %26, 56
  br i1 %30, label %78, label %31

31:                                               ; preds = %24
  %32 = sub nsw i64 %28, %29
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i64 [ 0, %31 ], [ %75, %33 ]
  %35 = phi i64 [ %32, %31 ], [ %76, %33 ]
  %36 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %34
  %37 = bitcast i32* %36 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %37, align 8, !alias.scope !86
  %38 = getelementptr inbounds i32, i32* %36, i64 4
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %39, align 8, !alias.scope !86
  %40 = or i64 %34, 8
  %41 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %40
  %42 = bitcast i32* %41 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %42, align 8, !alias.scope !86
  %43 = getelementptr inbounds i32, i32* %41, i64 4
  %44 = bitcast i32* %43 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %44, align 8, !alias.scope !86
  %45 = or i64 %34, 16
  %46 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %45
  %47 = bitcast i32* %46 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %47, align 8, !alias.scope !86
  %48 = getelementptr inbounds i32, i32* %46, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %49, align 8, !alias.scope !86
  %50 = or i64 %34, 24
  %51 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %50
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %52, align 8, !alias.scope !86
  %53 = getelementptr inbounds i32, i32* %51, i64 4
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %54, align 8, !alias.scope !86
  %55 = or i64 %34, 32
  %56 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %55
  %57 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %57, align 8, !alias.scope !86
  %58 = getelementptr inbounds i32, i32* %56, i64 4
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %59, align 8, !alias.scope !86
  %60 = or i64 %34, 40
  %61 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %60
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %62, align 8, !alias.scope !86
  %63 = getelementptr inbounds i32, i32* %61, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %64, align 8, !alias.scope !86
  %65 = or i64 %34, 48
  %66 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %65
  %67 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %67, align 8, !alias.scope !86
  %68 = getelementptr inbounds i32, i32* %66, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %69, align 8, !alias.scope !86
  %70 = or i64 %34, 56
  %71 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %70
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %72, align 8, !alias.scope !86
  %73 = getelementptr inbounds i32, i32* %71, i64 4
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %74, align 8, !alias.scope !86
  %75 = add i64 %34, 64
  %76 = add i64 %35, -8
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %33, !llvm.loop !89

78:                                               ; preds = %33, %24
  %79 = phi i64 [ 0, %24 ], [ %75, %33 ]
  %80 = icmp eq i64 %29, 0
  br i1 %80, label %91, label %81

81:                                               ; preds = %78, %81
  %82 = phi i64 [ %88, %81 ], [ %79, %78 ]
  %83 = phi i64 [ %89, %81 ], [ %29, %78 ]
  %84 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %82
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %85, align 8, !alias.scope !86
  %86 = getelementptr inbounds i32, i32* %84, i64 4
  %87 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %87, align 8, !alias.scope !86
  %88 = add i64 %82, 8
  %89 = add i64 %83, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %81, !llvm.loop !90

91:                                               ; preds = %81, %78
  %92 = icmp eq i64 %25, %22
  br i1 %92, label %100, label %93

93:                                               ; preds = %91, %20
  %94 = phi i64 [ 0, %20 ], [ %25, %91 ]
  br label %95

95:                                               ; preds = %93, %95
  %96 = phi i64 [ %98, %95 ], [ %94, %93 ]
  %97 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %96
  store i32 1, i32* %97, align 4, !alias.scope !86
  %98 = add nuw nsw i64 %96, 1
  %99 = icmp eq i64 %98, %22
  br i1 %99, label %100, label %95, !llvm.loop !91

100:                                              ; preds = %95, %91, %16
  %101 = getelementptr inbounds %union.anon, %union.anon* %19, i64 0, i32 0
  %102 = bitcast %union.anon* %19 to i32*
  %103 = sext i32 %17 to i64
  %104 = getelementptr inbounds i32, i32* %102, i64 %103
  %105 = bitcast i32* %104 to i8*
  %106 = icmp sgt i32 %13, 5
  %107 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %108 = getelementptr inbounds %union.anon, %union.anon* %107, i64 0, i32 0
  %109 = load i32*, i32** %108, align 8, !noalias !86
  %110 = bitcast %union.anon* %107 to i32*
  %111 = select i1 %106, i32* %109, i32* %110
  %112 = bitcast i32* %111 to i8*
  %113 = sext i32 %13 to i64
  %114 = shl nsw i64 %113, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %105, i8* align 4 %112, i64 %114, i1 false) #12
  %115 = bitcast %"struct.tflite::NdArrayDesc"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %115) #12
  %116 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 0
  %117 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 1
  %118 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 2
  %119 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 3
  %120 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  %121 = bitcast %"struct.tflite::NdArrayDesc"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %121, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %120) #12
  %122 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 0
  %123 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 1
  %124 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 2
  %125 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 3
  %126 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %126, i8 -86, i64 32, i1 false)
  call void @_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_(%"class.tflite::RuntimeShape"* dereferenceable(32) %0, %"class.tflite::RuntimeShape"* dereferenceable(32) %2, %"struct.tflite::NdArrayDesc"* nonnull %8, %"struct.tflite::NdArrayDesc"* nonnull %9)
  %127 = load i32, i32* %12, align 8
  %128 = icmp sgt i32 %127, 5
  %129 = load i32*, i32** %101, align 8
  %130 = select i1 %128, i32* %129, i32* %102
  %131 = load i32, i32* %130, align 4
  %132 = icmp sgt i32 %131, 0
  br i1 %132, label %133, label %152

133:                                              ; preds = %100
  %134 = bitcast %union.anon* %19 to [5 x i32]*
  %135 = getelementptr inbounds [5 x i32], [5 x i32]* %134, i64 0, i64 1
  %136 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 1
  %137 = bitcast [16 x i8]* %136 to i32*
  %138 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 1, i64 4
  %139 = bitcast i8* %138 to i32*
  %140 = getelementptr inbounds i32, i32* %102, i64 1
  %141 = getelementptr inbounds i32, i32* %129, i64 1
  %142 = select i1 %128, i32* %141, i32* %135
  %143 = getelementptr inbounds i32, i32* %129, i64 2
  %144 = select i1 %128, i32* %143, i32* %137
  %145 = getelementptr inbounds i32, i32* %129, i64 3
  %146 = select i1 %128, i32* %145, i32* %139
  br label %147

147:                                              ; preds = %133, %171
  %148 = phi i32 [ %131, %133 ], [ %172, %171 ]
  %149 = phi i32 [ 0, %133 ], [ %173, %171 ]
  %150 = load i32, i32* %142, align 4
  %151 = icmp sgt i32 %150, 0
  br i1 %151, label %159, label %171

152:                                              ; preds = %171, %100
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %120) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %115) #12
  %153 = xor i1 %128, true
  %154 = icmp eq i32* %129, null
  %155 = or i1 %154, %153
  br i1 %155, label %158, label %156

156:                                              ; preds = %152
  %157 = bitcast i32* %129 to i8*
  call void @_ZdaPv(i8* %157) #11
  br label %158

158:                                              ; preds = %152, %156
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #12
  ret void

159:                                              ; preds = %147, %188
  %160 = phi i32 [ %189, %188 ], [ %150, %147 ]
  %161 = phi i32 [ %190, %188 ], [ 0, %147 ]
  %162 = load i32, i32* %144, align 4
  %163 = icmp sgt i32 %162, 0
  br i1 %163, label %164, label %188

164:                                              ; preds = %159
  %165 = load i32, i32* %140, align 4
  %166 = mul nsw i32 %165, %149
  %167 = add nsw i32 %166, %161
  %168 = load i32, i32* %146, align 4
  br label %175

169:                                              ; preds = %188
  %170 = load i32, i32* %130, align 4
  br label %171

171:                                              ; preds = %169, %147
  %172 = phi i32 [ %170, %169 ], [ %148, %147 ]
  %173 = add nuw nsw i32 %149, 1
  %174 = icmp slt i32 %173, %172
  br i1 %174, label %147, label %152

175:                                              ; preds = %164, %194
  %176 = phi i32 [ %162, %164 ], [ %195, %194 ]
  %177 = phi i32 [ %168, %164 ], [ %196, %194 ]
  %178 = phi i32 [ 0, %164 ], [ %197, %194 ]
  %179 = icmp sgt i32 %177, 0
  br i1 %179, label %180, label %194

180:                                              ; preds = %175
  %181 = load i32, i32* %137, align 8
  %182 = mul nsw i32 %167, %181
  %183 = add nsw i32 %182, %178
  %184 = load i32, i32* %139, align 4
  %185 = mul nsw i32 %183, %184
  br label %199

186:                                              ; preds = %194
  %187 = load i32, i32* %142, align 4
  br label %188

188:                                              ; preds = %186, %159
  %189 = phi i32 [ %187, %186 ], [ %160, %159 ]
  %190 = add nuw nsw i32 %161, 1
  %191 = icmp slt i32 %190, %189
  br i1 %191, label %159, label %169

192:                                              ; preds = %199
  %193 = load i32, i32* %144, align 4
  br label %194

194:                                              ; preds = %192, %175
  %195 = phi i32 [ %193, %192 ], [ %176, %175 ]
  %196 = phi i32 [ %237, %192 ], [ %177, %175 ]
  %197 = add nuw nsw i32 %178, 1
  %198 = icmp slt i32 %197, %195
  br i1 %198, label %175, label %186

199:                                              ; preds = %180, %199
  %200 = phi i32 [ 0, %180 ], [ %236, %199 ]
  %201 = add nsw i32 %185, %200
  %202 = load i32, i32* %116, align 4
  %203 = mul nsw i32 %202, %149
  %204 = load i32, i32* %117, align 4
  %205 = mul nsw i32 %204, %161
  %206 = add nsw i32 %205, %203
  %207 = load i32, i32* %118, align 4
  %208 = mul nsw i32 %207, %178
  %209 = add nsw i32 %206, %208
  %210 = load i32, i32* %119, align 4
  %211 = mul nsw i32 %210, %200
  %212 = add nsw i32 %209, %211
  %213 = load i32, i32* %122, align 4
  %214 = mul nsw i32 %213, %149
  %215 = load i32, i32* %123, align 4
  %216 = mul nsw i32 %215, %161
  %217 = add nsw i32 %216, %214
  %218 = load i32, i32* %124, align 4
  %219 = mul nsw i32 %218, %178
  %220 = add nsw i32 %217, %219
  %221 = load i32, i32* %125, align 4
  %222 = mul nsw i32 %221, %200
  %223 = add nsw i32 %220, %222
  %224 = sext i32 %212 to i64
  %225 = getelementptr inbounds i32, i32* %1, i64 %224
  %226 = load i32, i32* %225, align 4
  %227 = sext i32 %223 to i64
  %228 = getelementptr inbounds i32, i32* %3, i64 %227
  %229 = load i32, i32* %228, align 4
  %230 = sitofp i32 %226 to double
  %231 = sitofp i32 %229 to double
  %232 = call double @pow(double %230, double %231) #12
  %233 = fptosi double %232 to i32
  %234 = sext i32 %201 to i64
  %235 = getelementptr inbounds i32, i32* %5, i64 %234
  store i32 %233, i32* %235, align 4
  %236 = add nuw nsw i32 %200, 1
  %237 = load i32, i32* %146, align 4
  %238 = icmp slt i32 %236, %237
  br i1 %238, label %199, label %192
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_(%"class.tflite::RuntimeShape"* dereferenceable(32), %"class.tflite::RuntimeShape"* dereferenceable(32), %"struct.tflite::NdArrayDesc"*, %"struct.tflite::NdArrayDesc"*) local_unnamed_addr #7 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 32, i1 false)
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %8, align 8, !alias.scope !92
  %9 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8, !noalias !92
  %11 = icmp sgt i32 %10, 4
  br i1 %11, label %12, label %13

12:                                               ; preds = %4
  tail call void @abort() #13, !noalias !92
  unreachable

13:                                               ; preds = %4
  store i32 4, i32* %8, align 8, !alias.scope !92
  %14 = sub i32 4, %10
  %15 = icmp sgt i32 %14, 0
  %16 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  br i1 %15, label %17, label %97

17:                                               ; preds = %13
  %18 = bitcast %union.anon* %16 to [5 x i32]*
  %19 = zext i32 %14 to i64
  %20 = icmp ult i32 %14, 8
  br i1 %20, label %90, label %21

21:                                               ; preds = %17
  %22 = and i64 %19, 4294967288
  %23 = add nsw i64 %22, -8
  %24 = lshr exact i64 %23, 3
  %25 = add nuw nsw i64 %24, 1
  %26 = and i64 %25, 7
  %27 = icmp ult i64 %23, 56
  br i1 %27, label %75, label %28

28:                                               ; preds = %21
  %29 = sub nsw i64 %25, %26
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %72, %30 ]
  %32 = phi i64 [ %29, %28 ], [ %73, %30 ]
  %33 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %31
  %34 = bitcast i32* %33 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %34, align 8, !alias.scope !92
  %35 = getelementptr inbounds i32, i32* %33, i64 4
  %36 = bitcast i32* %35 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %36, align 8, !alias.scope !92
  %37 = or i64 %31, 8
  %38 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %37
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %39, align 8, !alias.scope !92
  %40 = getelementptr inbounds i32, i32* %38, i64 4
  %41 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %41, align 8, !alias.scope !92
  %42 = or i64 %31, 16
  %43 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %42
  %44 = bitcast i32* %43 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %44, align 8, !alias.scope !92
  %45 = getelementptr inbounds i32, i32* %43, i64 4
  %46 = bitcast i32* %45 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %46, align 8, !alias.scope !92
  %47 = or i64 %31, 24
  %48 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %47
  %49 = bitcast i32* %48 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %49, align 8, !alias.scope !92
  %50 = getelementptr inbounds i32, i32* %48, i64 4
  %51 = bitcast i32* %50 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 8, !alias.scope !92
  %52 = or i64 %31, 32
  %53 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %52
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %54, align 8, !alias.scope !92
  %55 = getelementptr inbounds i32, i32* %53, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %56, align 8, !alias.scope !92
  %57 = or i64 %31, 40
  %58 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %57
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %59, align 8, !alias.scope !92
  %60 = getelementptr inbounds i32, i32* %58, i64 4
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %61, align 8, !alias.scope !92
  %62 = or i64 %31, 48
  %63 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %62
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %64, align 8, !alias.scope !92
  %65 = getelementptr inbounds i32, i32* %63, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %66, align 8, !alias.scope !92
  %67 = or i64 %31, 56
  %68 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %67
  %69 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %69, align 8, !alias.scope !92
  %70 = getelementptr inbounds i32, i32* %68, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %71, align 8, !alias.scope !92
  %72 = add i64 %31, 64
  %73 = add i64 %32, -8
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %30, !llvm.loop !95

75:                                               ; preds = %30, %21
  %76 = phi i64 [ 0, %21 ], [ %72, %30 ]
  %77 = icmp eq i64 %26, 0
  br i1 %77, label %88, label %78

78:                                               ; preds = %75, %78
  %79 = phi i64 [ %85, %78 ], [ %76, %75 ]
  %80 = phi i64 [ %86, %78 ], [ %26, %75 ]
  %81 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %79
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %82, align 8, !alias.scope !92
  %83 = getelementptr inbounds i32, i32* %81, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %84, align 8, !alias.scope !92
  %85 = add i64 %79, 8
  %86 = add i64 %80, -1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %78, !llvm.loop !96

88:                                               ; preds = %78, %75
  %89 = icmp eq i64 %22, %19
  br i1 %89, label %97, label %90

90:                                               ; preds = %88, %17
  %91 = phi i64 [ 0, %17 ], [ %22, %88 ]
  br label %92

92:                                               ; preds = %90, %92
  %93 = phi i64 [ %95, %92 ], [ %91, %90 ]
  %94 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %93
  store i32 1, i32* %94, align 4, !alias.scope !92
  %95 = add nuw nsw i64 %93, 1
  %96 = icmp eq i64 %95, %19
  br i1 %96, label %97, label %92, !llvm.loop !97

97:                                               ; preds = %92, %88, %13
  %98 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
  %99 = bitcast %union.anon* %16 to i32*
  %100 = sext i32 %14 to i64
  %101 = getelementptr inbounds i32, i32* %99, i64 %100
  %102 = bitcast i32* %101 to i8*
  %103 = icmp sgt i32 %10, 5
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 1
  %105 = getelementptr inbounds %union.anon, %union.anon* %104, i64 0, i32 0
  %106 = load i32*, i32** %105, align 8, !noalias !92
  %107 = bitcast %union.anon* %104 to i32*
  %108 = select i1 %103, i32* %106, i32* %107
  %109 = bitcast i32* %108 to i8*
  %110 = sext i32 %10 to i64
  %111 = shl nsw i64 %110, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %102, i8* align 4 %109, i64 %111, i1 false) #12
  %112 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %112) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %112, i8 -86, i64 32, i1 false)
  %113 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %113, align 8, !alias.scope !98
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %115 = load i32, i32* %114, align 8, !noalias !98
  %116 = icmp sgt i32 %115, 4
  br i1 %116, label %117, label %118

117:                                              ; preds = %97
  tail call void @abort() #13, !noalias !98
  unreachable

118:                                              ; preds = %97
  store i32 4, i32* %113, align 8, !alias.scope !98
  %119 = sub i32 4, %115
  %120 = icmp sgt i32 %119, 0
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %122 = bitcast %union.anon* %121 to [5 x i32]*
  br i1 %120, label %123, label %202

123:                                              ; preds = %118
  %124 = zext i32 %119 to i64
  %125 = icmp ult i32 %119, 8
  br i1 %125, label %195, label %126

126:                                              ; preds = %123
  %127 = and i64 %124, 4294967288
  %128 = add nsw i64 %127, -8
  %129 = lshr exact i64 %128, 3
  %130 = add nuw nsw i64 %129, 1
  %131 = and i64 %130, 7
  %132 = icmp ult i64 %128, 56
  br i1 %132, label %180, label %133

133:                                              ; preds = %126
  %134 = sub nsw i64 %130, %131
  br label %135

135:                                              ; preds = %135, %133
  %136 = phi i64 [ 0, %133 ], [ %177, %135 ]
  %137 = phi i64 [ %134, %133 ], [ %178, %135 ]
  %138 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %136
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %139, align 8, !alias.scope !98
  %140 = getelementptr inbounds i32, i32* %138, i64 4
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %141, align 8, !alias.scope !98
  %142 = or i64 %136, 8
  %143 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %142
  %144 = bitcast i32* %143 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %144, align 8, !alias.scope !98
  %145 = getelementptr inbounds i32, i32* %143, i64 4
  %146 = bitcast i32* %145 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %146, align 8, !alias.scope !98
  %147 = or i64 %136, 16
  %148 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %147
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %149, align 8, !alias.scope !98
  %150 = getelementptr inbounds i32, i32* %148, i64 4
  %151 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %151, align 8, !alias.scope !98
  %152 = or i64 %136, 24
  %153 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %152
  %154 = bitcast i32* %153 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %154, align 8, !alias.scope !98
  %155 = getelementptr inbounds i32, i32* %153, i64 4
  %156 = bitcast i32* %155 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %156, align 8, !alias.scope !98
  %157 = or i64 %136, 32
  %158 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %157
  %159 = bitcast i32* %158 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %159, align 8, !alias.scope !98
  %160 = getelementptr inbounds i32, i32* %158, i64 4
  %161 = bitcast i32* %160 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %161, align 8, !alias.scope !98
  %162 = or i64 %136, 40
  %163 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %162
  %164 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %164, align 8, !alias.scope !98
  %165 = getelementptr inbounds i32, i32* %163, i64 4
  %166 = bitcast i32* %165 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %166, align 8, !alias.scope !98
  %167 = or i64 %136, 48
  %168 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %167
  %169 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %169, align 8, !alias.scope !98
  %170 = getelementptr inbounds i32, i32* %168, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %171, align 8, !alias.scope !98
  %172 = or i64 %136, 56
  %173 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %172
  %174 = bitcast i32* %173 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %174, align 8, !alias.scope !98
  %175 = getelementptr inbounds i32, i32* %173, i64 4
  %176 = bitcast i32* %175 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %176, align 8, !alias.scope !98
  %177 = add i64 %136, 64
  %178 = add i64 %137, -8
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %135, !llvm.loop !101

180:                                              ; preds = %135, %126
  %181 = phi i64 [ 0, %126 ], [ %177, %135 ]
  %182 = icmp eq i64 %131, 0
  br i1 %182, label %193, label %183

183:                                              ; preds = %180, %183
  %184 = phi i64 [ %190, %183 ], [ %181, %180 ]
  %185 = phi i64 [ %191, %183 ], [ %131, %180 ]
  %186 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %184
  %187 = bitcast i32* %186 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %187, align 8, !alias.scope !98
  %188 = getelementptr inbounds i32, i32* %186, i64 4
  %189 = bitcast i32* %188 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %189, align 8, !alias.scope !98
  %190 = add i64 %184, 8
  %191 = add i64 %185, -1
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %183, !llvm.loop !102

193:                                              ; preds = %183, %180
  %194 = icmp eq i64 %127, %124
  br i1 %194, label %202, label %195

195:                                              ; preds = %193, %123
  %196 = phi i64 [ 0, %123 ], [ %127, %193 ]
  br label %197

197:                                              ; preds = %195, %197
  %198 = phi i64 [ %200, %197 ], [ %196, %195 ]
  %199 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %198
  store i32 1, i32* %199, align 4, !alias.scope !98
  %200 = add nuw nsw i64 %198, 1
  %201 = icmp eq i64 %200, %124
  br i1 %201, label %202, label %197, !llvm.loop !103

202:                                              ; preds = %197, %193, %118
  %203 = getelementptr inbounds %union.anon, %union.anon* %121, i64 0, i32 0
  %204 = bitcast %union.anon* %121 to i32*
  %205 = sext i32 %119 to i64
  %206 = getelementptr inbounds i32, i32* %204, i64 %205
  %207 = bitcast i32* %206 to i8*
  %208 = icmp sgt i32 %115, 5
  %209 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %210 = getelementptr inbounds %union.anon, %union.anon* %209, i64 0, i32 0
  %211 = load i32*, i32** %210, align 8, !noalias !98
  %212 = bitcast %union.anon* %209 to i32*
  %213 = select i1 %208, i32* %211, i32* %212
  %214 = bitcast i32* %213 to i8*
  %215 = sext i32 %115 to i64
  %216 = shl nsw i64 %215, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %207, i8* align 4 %214, i64 %216, i1 false) #12
  %217 = bitcast %union.anon* %16 to [5 x i32]*
  %218 = load i32, i32* %8, align 8
  %219 = icmp sgt i32 %218, 5
  %220 = load i32*, i32** %98, align 8
  %221 = getelementptr inbounds i32, i32* %220, i64 3
  %222 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 1, i64 4
  %223 = bitcast i8* %222 to i32*
  %224 = select i1 %219, i32* %221, i32* %223
  %225 = load i32, i32* %224, align 4
  %226 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 0, i64 3
  store i32 %225, i32* %226, align 4
  %227 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 1, i64 3
  store i32 1, i32* %227, align 4
  %228 = load i32, i32* %224, align 4
  %229 = getelementptr inbounds i32, i32* %220, i64 2
  %230 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 1
  %231 = bitcast [16 x i8]* %230 to i32*
  %232 = select i1 %219, i32* %229, i32* %231
  %233 = load i32, i32* %232, align 4
  %234 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 0, i64 2
  store i32 %233, i32* %234, align 4
  %235 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 1, i64 2
  store i32 %228, i32* %235, align 4
  %236 = load i32, i32* %232, align 4
  %237 = mul nsw i32 %236, %228
  %238 = getelementptr inbounds i32, i32* %220, i64 1
  %239 = getelementptr inbounds [5 x i32], [5 x i32]* %217, i64 0, i64 1
  %240 = select i1 %219, i32* %238, i32* %239
  %241 = load i32, i32* %240, align 4
  %242 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 0, i64 1
  store i32 %241, i32* %242, align 4
  %243 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 1, i64 1
  store i32 %237, i32* %243, align 4
  %244 = load i32, i32* %240, align 4
  %245 = mul nsw i32 %244, %237
  %246 = select i1 %219, i32* %220, i32* %99
  %247 = load i32, i32* %246, align 4
  %248 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 0, i64 0
  store i32 %247, i32* %248, align 4
  %249 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 1, i64 0
  store i32 %245, i32* %249, align 4
  %250 = load i32, i32* %113, align 8
  %251 = icmp sgt i32 %250, 5
  %252 = load i32*, i32** %203, align 8
  %253 = getelementptr inbounds i32, i32* %252, i64 3
  %254 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 1, i64 4
  %255 = bitcast i8* %254 to i32*
  %256 = select i1 %251, i32* %253, i32* %255
  %257 = load i32, i32* %256, align 4
  %258 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 0, i64 3
  store i32 %257, i32* %258, align 4
  %259 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 1, i64 3
  store i32 1, i32* %259, align 4
  %260 = load i32, i32* %256, align 4
  %261 = getelementptr inbounds i32, i32* %252, i64 2
  %262 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 1
  %263 = bitcast [16 x i8]* %262 to i32*
  %264 = select i1 %251, i32* %261, i32* %263
  %265 = load i32, i32* %264, align 4
  %266 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 0, i64 2
  store i32 %265, i32* %266, align 4
  %267 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 1, i64 2
  store i32 %260, i32* %267, align 4
  %268 = load i32, i32* %264, align 4
  %269 = mul nsw i32 %268, %260
  %270 = getelementptr inbounds i32, i32* %252, i64 1
  %271 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 1
  %272 = select i1 %251, i32* %270, i32* %271
  %273 = load i32, i32* %272, align 4
  %274 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 0, i64 1
  store i32 %273, i32* %274, align 4
  %275 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 1, i64 1
  store i32 %269, i32* %275, align 4
  %276 = load i32, i32* %272, align 4
  %277 = mul nsw i32 %276, %269
  %278 = select i1 %251, i32* %252, i32* %204
  %279 = load i32, i32* %278, align 4
  %280 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 0, i64 0
  store i32 %279, i32* %280, align 4
  %281 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 1, i64 0
  store i32 %277, i32* %281, align 4
  %282 = bitcast %union.anon* %16 to i32*
  %283 = select i1 %219, i32* %220, i32* %282
  %284 = load i32, i32* %283, align 4
  %285 = bitcast %union.anon* %121 to i32*
  %286 = select i1 %251, i32* %252, i32* %285
  %287 = load i32, i32* %286, align 4
  %288 = icmp eq i32 %284, %287
  br i1 %288, label %302, label %298

289:                                              ; preds = %338
  %290 = bitcast i32* %252 to i8*
  tail call void @_ZdaPv(i8* %290) #11
  br label %291

291:                                              ; preds = %338, %289
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %112) #12
  %292 = xor i1 %219, true
  %293 = icmp eq i32* %220, null
  %294 = or i1 %293, %292
  br i1 %294, label %297, label %295

295:                                              ; preds = %291
  %296 = bitcast i32* %220 to i8*
  tail call void @_ZdaPv(i8* %296) #11
  br label %297

297:                                              ; preds = %291, %295
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #12
  ret void

298:                                              ; preds = %202
  %299 = icmp eq i32 %284, 1
  br i1 %299, label %300, label %301

300:                                              ; preds = %298
  store i32 0, i32* %249, align 4
  store i32 %287, i32* %248, align 4
  br label %302

301:                                              ; preds = %298
  store i32 0, i32* %281, align 4
  store i32 %284, i32* %280, align 4
  br label %302

302:                                              ; preds = %202, %300, %301
  %303 = load i32, i32* %240, align 4
  %304 = load i32, i32* %272, align 4
  %305 = icmp eq i32 %303, %304
  br i1 %305, label %310, label %306

306:                                              ; preds = %302
  %307 = icmp eq i32 %303, 1
  br i1 %307, label %309, label %308

308:                                              ; preds = %306
  store i32 0, i32* %275, align 4
  store i32 %303, i32* %274, align 4
  br label %310

309:                                              ; preds = %306
  store i32 0, i32* %243, align 4
  store i32 %304, i32* %242, align 4
  br label %310

310:                                              ; preds = %309, %308, %302
  %311 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 1
  %312 = bitcast [16 x i8]* %311 to i32*
  %313 = select i1 %219, i32* %229, i32* %312
  %314 = load i32, i32* %313, align 4
  %315 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 1
  %316 = bitcast [16 x i8]* %315 to i32*
  %317 = select i1 %251, i32* %261, i32* %316
  %318 = load i32, i32* %317, align 4
  %319 = icmp eq i32 %314, %318
  br i1 %319, label %324, label %320

320:                                              ; preds = %310
  %321 = icmp eq i32 %314, 1
  br i1 %321, label %323, label %322

322:                                              ; preds = %320
  store i32 0, i32* %267, align 4
  store i32 %314, i32* %266, align 4
  br label %324

323:                                              ; preds = %320
  store i32 0, i32* %235, align 4
  store i32 %318, i32* %234, align 4
  br label %324

324:                                              ; preds = %323, %322, %310
  %325 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 1, i64 4
  %326 = bitcast i8* %325 to i32*
  %327 = select i1 %219, i32* %221, i32* %326
  %328 = load i32, i32* %327, align 4
  %329 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 1, i64 4
  %330 = bitcast i8* %329 to i32*
  %331 = select i1 %251, i32* %253, i32* %330
  %332 = load i32, i32* %331, align 4
  %333 = icmp eq i32 %328, %332
  br i1 %333, label %338, label %334

334:                                              ; preds = %324
  %335 = icmp eq i32 %328, 1
  br i1 %335, label %337, label %336

336:                                              ; preds = %334
  store i32 0, i32* %259, align 4
  store i32 %328, i32* %258, align 4
  br label %338

337:                                              ; preds = %334
  store i32 0, i32* %227, align 4
  store i32 %332, i32* %226, align 4
  br label %338

338:                                              ; preds = %337, %336, %324
  %339 = xor i1 %251, true
  %340 = icmp eq i32* %252, null
  %341 = or i1 %340, %339
  br i1 %341, label %291, label %289
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #9

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops18IntegerExponentPowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_iS7_PS8_(%"struct.tflite::ArithmeticParams"* dereferenceable(80), %"class.tflite::RuntimeShape"* dereferenceable(32), float*, i32, %"class.tflite::RuntimeShape"* dereferenceable(32), float*) local_unnamed_addr #7 comdat {
  %7 = bitcast float* %5 to i8*
  %8 = bitcast float* %2 to i8*
  %9 = icmp eq i32 %3, 1
  br i1 %9, label %10, label %127

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp sgt i32 %12, 5
  %14 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  br i1 %13, label %15, label %18

15:                                               ; preds = %10
  %16 = getelementptr inbounds %union.anon, %union.anon* %14, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  br label %21

18:                                               ; preds = %10
  %19 = bitcast %union.anon* %14 to i32*
  %20 = icmp sgt i32 %12, 0
  br i1 %20, label %21, label %125

21:                                               ; preds = %18, %15
  %22 = phi i32* [ %17, %15 ], [ %19, %18 ]
  %23 = zext i32 %12 to i64
  %24 = icmp ult i32 %12, 8
  br i1 %24, label %110, label %25

25:                                               ; preds = %21
  %26 = and i64 %23, 4294967288
  %27 = add nsw i64 %26, -8
  %28 = lshr exact i64 %27, 3
  %29 = add nuw nsw i64 %28, 1
  %30 = and i64 %29, 3
  %31 = icmp ult i64 %27, 24
  br i1 %31, label %77, label %32

32:                                               ; preds = %25
  %33 = sub nsw i64 %29, %30
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ 0, %32 ], [ %74, %34 ]
  %36 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %32 ], [ %72, %34 ]
  %37 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %32 ], [ %73, %34 ]
  %38 = phi i64 [ %33, %32 ], [ %75, %34 ]
  %39 = getelementptr inbounds i32, i32* %22, i64 %35
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4
  %42 = getelementptr inbounds i32, i32* %39, i64 4
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 4
  %45 = mul nsw <4 x i32> %41, %36
  %46 = mul nsw <4 x i32> %44, %37
  %47 = or i64 %35, 8
  %48 = getelementptr inbounds i32, i32* %22, i64 %47
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = getelementptr inbounds i32, i32* %48, i64 4
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4
  %54 = mul nsw <4 x i32> %50, %45
  %55 = mul nsw <4 x i32> %53, %46
  %56 = or i64 %35, 16
  %57 = getelementptr inbounds i32, i32* %22, i64 %56
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 4
  %60 = getelementptr inbounds i32, i32* %57, i64 4
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 4
  %63 = mul nsw <4 x i32> %59, %54
  %64 = mul nsw <4 x i32> %62, %55
  %65 = or i64 %35, 24
  %66 = getelementptr inbounds i32, i32* %22, i64 %65
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4
  %69 = getelementptr inbounds i32, i32* %66, i64 4
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4
  %72 = mul nsw <4 x i32> %68, %63
  %73 = mul nsw <4 x i32> %71, %64
  %74 = add i64 %35, 32
  %75 = add i64 %38, -4
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %77, label %34, !llvm.loop !104

77:                                               ; preds = %34, %25
  %78 = phi <4 x i32> [ undef, %25 ], [ %72, %34 ]
  %79 = phi <4 x i32> [ undef, %25 ], [ %73, %34 ]
  %80 = phi i64 [ 0, %25 ], [ %74, %34 ]
  %81 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %25 ], [ %72, %34 ]
  %82 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %25 ], [ %73, %34 ]
  %83 = icmp eq i64 %30, 0
  br i1 %83, label %100, label %84

84:                                               ; preds = %77, %84
  %85 = phi i64 [ %97, %84 ], [ %80, %77 ]
  %86 = phi <4 x i32> [ %95, %84 ], [ %81, %77 ]
  %87 = phi <4 x i32> [ %96, %84 ], [ %82, %77 ]
  %88 = phi i64 [ %98, %84 ], [ %30, %77 ]
  %89 = getelementptr inbounds i32, i32* %22, i64 %85
  %90 = bitcast i32* %89 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4
  %92 = getelementptr inbounds i32, i32* %89, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4
  %95 = mul nsw <4 x i32> %91, %86
  %96 = mul nsw <4 x i32> %94, %87
  %97 = add i64 %85, 8
  %98 = add i64 %88, -1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %84, !llvm.loop !105

100:                                              ; preds = %84, %77
  %101 = phi <4 x i32> [ %78, %77 ], [ %95, %84 ]
  %102 = phi <4 x i32> [ %79, %77 ], [ %96, %84 ]
  %103 = mul <4 x i32> %102, %101
  %104 = shufflevector <4 x i32> %103, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %105 = mul <4 x i32> %103, %104
  %106 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %107 = mul <4 x i32> %105, %106
  %108 = extractelement <4 x i32> %107, i32 0
  %109 = icmp eq i64 %26, %23
  br i1 %109, label %121, label %110

110:                                              ; preds = %100, %21
  %111 = phi i64 [ 0, %21 ], [ %26, %100 ]
  %112 = phi i32 [ 1, %21 ], [ %108, %100 ]
  br label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %119, %113 ], [ %111, %110 ]
  %115 = phi i32 [ %118, %113 ], [ %112, %110 ]
  %116 = getelementptr inbounds i32, i32* %22, i64 %114
  %117 = load i32, i32* %116, align 4
  %118 = mul nsw i32 %117, %115
  %119 = add nuw nsw i64 %114, 1
  %120 = icmp eq i64 %119, %23
  br i1 %120, label %121, label %113, !llvm.loop !106

121:                                              ; preds = %113, %100
  %122 = phi i32 [ %108, %100 ], [ %118, %113 ]
  %123 = sext i32 %122 to i64
  %124 = shl nsw i64 %123, 2
  br label %125

125:                                              ; preds = %121, %18
  %126 = phi i64 [ 4, %18 ], [ %124, %121 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 %126, i1 false)
  br label %955

127:                                              ; preds = %6
  %128 = sdiv i32 %3, 2
  %129 = srem i32 %3, 2
  tail call void @_ZN6tflite13optimized_ops18IntegerExponentPowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_iS7_PS8_(%"struct.tflite::ArithmeticParams"* dereferenceable(80) %0, %"class.tflite::RuntimeShape"* dereferenceable(32) %1, float* %2, i32 %128, %"class.tflite::RuntimeShape"* dereferenceable(32) %4, float* %5)
  %130 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %131 = load i32, i32* %130, align 8
  %132 = icmp sgt i32 %131, 5
  %133 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  br i1 %132, label %134, label %137

134:                                              ; preds = %127
  %135 = getelementptr inbounds %union.anon, %union.anon* %133, i64 0, i32 0
  %136 = load i32*, i32** %135, align 8
  br label %140

137:                                              ; preds = %127
  %138 = bitcast %union.anon* %133 to i32*
  %139 = icmp sgt i32 %131, 0
  br i1 %139, label %140, label %347

140:                                              ; preds = %137, %134
  %141 = phi i32* [ %136, %134 ], [ %138, %137 ]
  %142 = zext i32 %131 to i64
  %143 = icmp ult i32 %131, 8
  br i1 %143, label %229, label %144

144:                                              ; preds = %140
  %145 = and i64 %142, 4294967288
  %146 = add nsw i64 %145, -8
  %147 = lshr exact i64 %146, 3
  %148 = add nuw nsw i64 %147, 1
  %149 = and i64 %148, 3
  %150 = icmp ult i64 %146, 24
  br i1 %150, label %196, label %151

151:                                              ; preds = %144
  %152 = sub nsw i64 %148, %149
  br label %153

153:                                              ; preds = %153, %151
  %154 = phi i64 [ 0, %151 ], [ %193, %153 ]
  %155 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %151 ], [ %191, %153 ]
  %156 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %151 ], [ %192, %153 ]
  %157 = phi i64 [ %152, %151 ], [ %194, %153 ]
  %158 = getelementptr inbounds i32, i32* %141, i64 %154
  %159 = bitcast i32* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 4
  %161 = getelementptr inbounds i32, i32* %158, i64 4
  %162 = bitcast i32* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 4
  %164 = mul nsw <4 x i32> %160, %155
  %165 = mul nsw <4 x i32> %163, %156
  %166 = or i64 %154, 8
  %167 = getelementptr inbounds i32, i32* %141, i64 %166
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 4
  %170 = getelementptr inbounds i32, i32* %167, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  %172 = load <4 x i32>, <4 x i32>* %171, align 4
  %173 = mul nsw <4 x i32> %169, %164
  %174 = mul nsw <4 x i32> %172, %165
  %175 = or i64 %154, 16
  %176 = getelementptr inbounds i32, i32* %141, i64 %175
  %177 = bitcast i32* %176 to <4 x i32>*
  %178 = load <4 x i32>, <4 x i32>* %177, align 4
  %179 = getelementptr inbounds i32, i32* %176, i64 4
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 4
  %182 = mul nsw <4 x i32> %178, %173
  %183 = mul nsw <4 x i32> %181, %174
  %184 = or i64 %154, 24
  %185 = getelementptr inbounds i32, i32* %141, i64 %184
  %186 = bitcast i32* %185 to <4 x i32>*
  %187 = load <4 x i32>, <4 x i32>* %186, align 4
  %188 = getelementptr inbounds i32, i32* %185, i64 4
  %189 = bitcast i32* %188 to <4 x i32>*
  %190 = load <4 x i32>, <4 x i32>* %189, align 4
  %191 = mul nsw <4 x i32> %187, %182
  %192 = mul nsw <4 x i32> %190, %183
  %193 = add i64 %154, 32
  %194 = add i64 %157, -4
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %196, label %153, !llvm.loop !107

196:                                              ; preds = %153, %144
  %197 = phi <4 x i32> [ undef, %144 ], [ %191, %153 ]
  %198 = phi <4 x i32> [ undef, %144 ], [ %192, %153 ]
  %199 = phi i64 [ 0, %144 ], [ %193, %153 ]
  %200 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %144 ], [ %191, %153 ]
  %201 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %144 ], [ %192, %153 ]
  %202 = icmp eq i64 %149, 0
  br i1 %202, label %219, label %203

203:                                              ; preds = %196, %203
  %204 = phi i64 [ %216, %203 ], [ %199, %196 ]
  %205 = phi <4 x i32> [ %214, %203 ], [ %200, %196 ]
  %206 = phi <4 x i32> [ %215, %203 ], [ %201, %196 ]
  %207 = phi i64 [ %217, %203 ], [ %149, %196 ]
  %208 = getelementptr inbounds i32, i32* %141, i64 %204
  %209 = bitcast i32* %208 to <4 x i32>*
  %210 = load <4 x i32>, <4 x i32>* %209, align 4
  %211 = getelementptr inbounds i32, i32* %208, i64 4
  %212 = bitcast i32* %211 to <4 x i32>*
  %213 = load <4 x i32>, <4 x i32>* %212, align 4
  %214 = mul nsw <4 x i32> %210, %205
  %215 = mul nsw <4 x i32> %213, %206
  %216 = add i64 %204, 8
  %217 = add i64 %207, -1
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %219, label %203, !llvm.loop !108

219:                                              ; preds = %203, %196
  %220 = phi <4 x i32> [ %197, %196 ], [ %214, %203 ]
  %221 = phi <4 x i32> [ %198, %196 ], [ %215, %203 ]
  %222 = mul <4 x i32> %221, %220
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %224 = mul <4 x i32> %222, %223
  %225 = shufflevector <4 x i32> %224, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %226 = mul <4 x i32> %224, %225
  %227 = extractelement <4 x i32> %226, i32 0
  %228 = icmp eq i64 %145, %142
  br i1 %228, label %240, label %229

229:                                              ; preds = %219, %140
  %230 = phi i64 [ 0, %140 ], [ %145, %219 ]
  %231 = phi i32 [ 1, %140 ], [ %227, %219 ]
  br label %232

232:                                              ; preds = %229, %232
  %233 = phi i64 [ %238, %232 ], [ %230, %229 ]
  %234 = phi i32 [ %237, %232 ], [ %231, %229 ]
  %235 = getelementptr inbounds i32, i32* %141, i64 %233
  %236 = load i32, i32* %235, align 4
  %237 = mul nsw i32 %236, %234
  %238 = add nuw nsw i64 %233, 1
  %239 = icmp eq i64 %238, %142
  br i1 %239, label %240, label %232, !llvm.loop !109

240:                                              ; preds = %232, %219
  %241 = phi i32 [ %227, %219 ], [ %237, %232 ]
  br i1 %132, label %242, label %245

242:                                              ; preds = %240
  %243 = getelementptr inbounds %union.anon, %union.anon* %133, i64 0, i32 0
  %244 = load i32*, i32** %243, align 8
  br label %248

245:                                              ; preds = %240
  %246 = bitcast %union.anon* %133 to i32*
  %247 = icmp sgt i32 %131, 0
  br i1 %247, label %248, label %347

248:                                              ; preds = %245, %242
  %249 = phi i32* [ %244, %242 ], [ %246, %245 ]
  %250 = icmp ult i32 %131, 8
  br i1 %250, label %336, label %251

251:                                              ; preds = %248
  %252 = and i64 %142, 4294967288
  %253 = add nsw i64 %252, -8
  %254 = lshr exact i64 %253, 3
  %255 = add nuw nsw i64 %254, 1
  %256 = and i64 %255, 3
  %257 = icmp ult i64 %253, 24
  br i1 %257, label %303, label %258

258:                                              ; preds = %251
  %259 = sub nsw i64 %255, %256
  br label %260

260:                                              ; preds = %260, %258
  %261 = phi i64 [ 0, %258 ], [ %300, %260 ]
  %262 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %258 ], [ %298, %260 ]
  %263 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %258 ], [ %299, %260 ]
  %264 = phi i64 [ %259, %258 ], [ %301, %260 ]
  %265 = getelementptr inbounds i32, i32* %249, i64 %261
  %266 = bitcast i32* %265 to <4 x i32>*
  %267 = load <4 x i32>, <4 x i32>* %266, align 4
  %268 = getelementptr inbounds i32, i32* %265, i64 4
  %269 = bitcast i32* %268 to <4 x i32>*
  %270 = load <4 x i32>, <4 x i32>* %269, align 4
  %271 = mul nsw <4 x i32> %267, %262
  %272 = mul nsw <4 x i32> %270, %263
  %273 = or i64 %261, 8
  %274 = getelementptr inbounds i32, i32* %249, i64 %273
  %275 = bitcast i32* %274 to <4 x i32>*
  %276 = load <4 x i32>, <4 x i32>* %275, align 4
  %277 = getelementptr inbounds i32, i32* %274, i64 4
  %278 = bitcast i32* %277 to <4 x i32>*
  %279 = load <4 x i32>, <4 x i32>* %278, align 4
  %280 = mul nsw <4 x i32> %276, %271
  %281 = mul nsw <4 x i32> %279, %272
  %282 = or i64 %261, 16
  %283 = getelementptr inbounds i32, i32* %249, i64 %282
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 4
  %286 = getelementptr inbounds i32, i32* %283, i64 4
  %287 = bitcast i32* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 4
  %289 = mul nsw <4 x i32> %285, %280
  %290 = mul nsw <4 x i32> %288, %281
  %291 = or i64 %261, 24
  %292 = getelementptr inbounds i32, i32* %249, i64 %291
  %293 = bitcast i32* %292 to <4 x i32>*
  %294 = load <4 x i32>, <4 x i32>* %293, align 4
  %295 = getelementptr inbounds i32, i32* %292, i64 4
  %296 = bitcast i32* %295 to <4 x i32>*
  %297 = load <4 x i32>, <4 x i32>* %296, align 4
  %298 = mul nsw <4 x i32> %294, %289
  %299 = mul nsw <4 x i32> %297, %290
  %300 = add i64 %261, 32
  %301 = add i64 %264, -4
  %302 = icmp eq i64 %301, 0
  br i1 %302, label %303, label %260, !llvm.loop !110

303:                                              ; preds = %260, %251
  %304 = phi <4 x i32> [ undef, %251 ], [ %298, %260 ]
  %305 = phi <4 x i32> [ undef, %251 ], [ %299, %260 ]
  %306 = phi i64 [ 0, %251 ], [ %300, %260 ]
  %307 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %251 ], [ %298, %260 ]
  %308 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %251 ], [ %299, %260 ]
  %309 = icmp eq i64 %256, 0
  br i1 %309, label %326, label %310

310:                                              ; preds = %303, %310
  %311 = phi i64 [ %323, %310 ], [ %306, %303 ]
  %312 = phi <4 x i32> [ %321, %310 ], [ %307, %303 ]
  %313 = phi <4 x i32> [ %322, %310 ], [ %308, %303 ]
  %314 = phi i64 [ %324, %310 ], [ %256, %303 ]
  %315 = getelementptr inbounds i32, i32* %249, i64 %311
  %316 = bitcast i32* %315 to <4 x i32>*
  %317 = load <4 x i32>, <4 x i32>* %316, align 4
  %318 = getelementptr inbounds i32, i32* %315, i64 4
  %319 = bitcast i32* %318 to <4 x i32>*
  %320 = load <4 x i32>, <4 x i32>* %319, align 4
  %321 = mul nsw <4 x i32> %317, %312
  %322 = mul nsw <4 x i32> %320, %313
  %323 = add i64 %311, 8
  %324 = add i64 %314, -1
  %325 = icmp eq i64 %324, 0
  br i1 %325, label %326, label %310, !llvm.loop !111

326:                                              ; preds = %310, %303
  %327 = phi <4 x i32> [ %304, %303 ], [ %321, %310 ]
  %328 = phi <4 x i32> [ %305, %303 ], [ %322, %310 ]
  %329 = mul <4 x i32> %328, %327
  %330 = shufflevector <4 x i32> %329, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %331 = mul <4 x i32> %329, %330
  %332 = shufflevector <4 x i32> %331, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %333 = mul <4 x i32> %331, %332
  %334 = extractelement <4 x i32> %333, i32 0
  %335 = icmp eq i64 %252, %142
  br i1 %335, label %347, label %336

336:                                              ; preds = %326, %248
  %337 = phi i64 [ 0, %248 ], [ %252, %326 ]
  %338 = phi i32 [ 1, %248 ], [ %334, %326 ]
  br label %339

339:                                              ; preds = %336, %339
  %340 = phi i64 [ %345, %339 ], [ %337, %336 ]
  %341 = phi i32 [ %344, %339 ], [ %338, %336 ]
  %342 = getelementptr inbounds i32, i32* %249, i64 %340
  %343 = load i32, i32* %342, align 4
  %344 = mul nsw i32 %343, %341
  %345 = add nuw nsw i64 %340, 1
  %346 = icmp eq i64 %345, %142
  br i1 %346, label %347, label %339, !llvm.loop !112

347:                                              ; preds = %339, %326, %137, %245
  %348 = phi i32 [ %241, %245 ], [ 1, %137 ], [ %241, %326 ], [ %241, %339 ]
  %349 = phi i32 [ 1, %245 ], [ 1, %137 ], [ %334, %326 ], [ %344, %339 ]
  %350 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %351 = load i32, i32* %350, align 8
  %352 = icmp sgt i32 %351, 5
  %353 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  br i1 %352, label %354, label %357

354:                                              ; preds = %347
  %355 = getelementptr inbounds %union.anon, %union.anon* %353, i64 0, i32 0
  %356 = load i32*, i32** %355, align 8
  br label %360

357:                                              ; preds = %347
  %358 = bitcast %union.anon* %353 to i32*
  %359 = icmp sgt i32 %351, 0
  br i1 %359, label %360, label %460

360:                                              ; preds = %357, %354
  %361 = phi i32* [ %356, %354 ], [ %358, %357 ]
  %362 = zext i32 %351 to i64
  %363 = icmp ult i32 %351, 8
  br i1 %363, label %449, label %364

364:                                              ; preds = %360
  %365 = and i64 %362, 4294967288
  %366 = add nsw i64 %365, -8
  %367 = lshr exact i64 %366, 3
  %368 = add nuw nsw i64 %367, 1
  %369 = and i64 %368, 3
  %370 = icmp ult i64 %366, 24
  br i1 %370, label %416, label %371

371:                                              ; preds = %364
  %372 = sub nsw i64 %368, %369
  br label %373

373:                                              ; preds = %373, %371
  %374 = phi i64 [ 0, %371 ], [ %413, %373 ]
  %375 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %371 ], [ %411, %373 ]
  %376 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %371 ], [ %412, %373 ]
  %377 = phi i64 [ %372, %371 ], [ %414, %373 ]
  %378 = getelementptr inbounds i32, i32* %361, i64 %374
  %379 = bitcast i32* %378 to <4 x i32>*
  %380 = load <4 x i32>, <4 x i32>* %379, align 4
  %381 = getelementptr inbounds i32, i32* %378, i64 4
  %382 = bitcast i32* %381 to <4 x i32>*
  %383 = load <4 x i32>, <4 x i32>* %382, align 4
  %384 = mul nsw <4 x i32> %380, %375
  %385 = mul nsw <4 x i32> %383, %376
  %386 = or i64 %374, 8
  %387 = getelementptr inbounds i32, i32* %361, i64 %386
  %388 = bitcast i32* %387 to <4 x i32>*
  %389 = load <4 x i32>, <4 x i32>* %388, align 4
  %390 = getelementptr inbounds i32, i32* %387, i64 4
  %391 = bitcast i32* %390 to <4 x i32>*
  %392 = load <4 x i32>, <4 x i32>* %391, align 4
  %393 = mul nsw <4 x i32> %389, %384
  %394 = mul nsw <4 x i32> %392, %385
  %395 = or i64 %374, 16
  %396 = getelementptr inbounds i32, i32* %361, i64 %395
  %397 = bitcast i32* %396 to <4 x i32>*
  %398 = load <4 x i32>, <4 x i32>* %397, align 4
  %399 = getelementptr inbounds i32, i32* %396, i64 4
  %400 = bitcast i32* %399 to <4 x i32>*
  %401 = load <4 x i32>, <4 x i32>* %400, align 4
  %402 = mul nsw <4 x i32> %398, %393
  %403 = mul nsw <4 x i32> %401, %394
  %404 = or i64 %374, 24
  %405 = getelementptr inbounds i32, i32* %361, i64 %404
  %406 = bitcast i32* %405 to <4 x i32>*
  %407 = load <4 x i32>, <4 x i32>* %406, align 4
  %408 = getelementptr inbounds i32, i32* %405, i64 4
  %409 = bitcast i32* %408 to <4 x i32>*
  %410 = load <4 x i32>, <4 x i32>* %409, align 4
  %411 = mul nsw <4 x i32> %407, %402
  %412 = mul nsw <4 x i32> %410, %403
  %413 = add i64 %374, 32
  %414 = add i64 %377, -4
  %415 = icmp eq i64 %414, 0
  br i1 %415, label %416, label %373, !llvm.loop !113

416:                                              ; preds = %373, %364
  %417 = phi <4 x i32> [ undef, %364 ], [ %411, %373 ]
  %418 = phi <4 x i32> [ undef, %364 ], [ %412, %373 ]
  %419 = phi i64 [ 0, %364 ], [ %413, %373 ]
  %420 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %364 ], [ %411, %373 ]
  %421 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %364 ], [ %412, %373 ]
  %422 = icmp eq i64 %369, 0
  br i1 %422, label %439, label %423

423:                                              ; preds = %416, %423
  %424 = phi i64 [ %436, %423 ], [ %419, %416 ]
  %425 = phi <4 x i32> [ %434, %423 ], [ %420, %416 ]
  %426 = phi <4 x i32> [ %435, %423 ], [ %421, %416 ]
  %427 = phi i64 [ %437, %423 ], [ %369, %416 ]
  %428 = getelementptr inbounds i32, i32* %361, i64 %424
  %429 = bitcast i32* %428 to <4 x i32>*
  %430 = load <4 x i32>, <4 x i32>* %429, align 4
  %431 = getelementptr inbounds i32, i32* %428, i64 4
  %432 = bitcast i32* %431 to <4 x i32>*
  %433 = load <4 x i32>, <4 x i32>* %432, align 4
  %434 = mul nsw <4 x i32> %430, %425
  %435 = mul nsw <4 x i32> %433, %426
  %436 = add i64 %424, 8
  %437 = add i64 %427, -1
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %439, label %423, !llvm.loop !114

439:                                              ; preds = %423, %416
  %440 = phi <4 x i32> [ %417, %416 ], [ %434, %423 ]
  %441 = phi <4 x i32> [ %418, %416 ], [ %435, %423 ]
  %442 = mul <4 x i32> %441, %440
  %443 = shufflevector <4 x i32> %442, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %444 = mul <4 x i32> %442, %443
  %445 = shufflevector <4 x i32> %444, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %446 = mul <4 x i32> %444, %445
  %447 = extractelement <4 x i32> %446, i32 0
  %448 = icmp eq i64 %365, %362
  br i1 %448, label %460, label %449

449:                                              ; preds = %439, %360
  %450 = phi i64 [ 0, %360 ], [ %365, %439 ]
  %451 = phi i32 [ 1, %360 ], [ %447, %439 ]
  br label %452

452:                                              ; preds = %449, %452
  %453 = phi i64 [ %458, %452 ], [ %450, %449 ]
  %454 = phi i32 [ %457, %452 ], [ %451, %449 ]
  %455 = getelementptr inbounds i32, i32* %361, i64 %453
  %456 = load i32, i32* %455, align 4
  %457 = mul nsw i32 %456, %454
  %458 = add nuw nsw i64 %453, 1
  %459 = icmp eq i64 %458, %362
  br i1 %459, label %460, label %452, !llvm.loop !115

460:                                              ; preds = %452, %439, %357
  %461 = phi i32 [ 1, %357 ], [ %447, %439 ], [ %457, %452 ]
  %462 = icmp eq i32 %348, %349
  br i1 %462, label %464, label %463

463:                                              ; preds = %460
  tail call void @abort() #13
  unreachable

464:                                              ; preds = %460
  %465 = icmp eq i32 %348, %461
  br i1 %465, label %467, label %466

466:                                              ; preds = %464
  tail call void @abort() #13
  unreachable

467:                                              ; preds = %464
  %468 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 13
  %469 = load float, float* %468, align 4
  %470 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 14
  %471 = load float, float* %470, align 4
  %472 = icmp sgt i32 %348, 0
  br i1 %472, label %473, label %523

473:                                              ; preds = %467
  %474 = zext i32 %348 to i64
  %475 = icmp ult i32 %348, 8
  br i1 %475, label %510, label %476

476:                                              ; preds = %473
  %477 = and i64 %474, 4294967288
  %478 = insertelement <4 x float> undef, float %469, i32 0
  %479 = shufflevector <4 x float> %478, <4 x float> undef, <4 x i32> zeroinitializer
  %480 = insertelement <4 x float> undef, float %469, i32 0
  %481 = shufflevector <4 x float> %480, <4 x float> undef, <4 x i32> zeroinitializer
  %482 = insertelement <4 x float> undef, float %471, i32 0
  %483 = shufflevector <4 x float> %482, <4 x float> undef, <4 x i32> zeroinitializer
  %484 = insertelement <4 x float> undef, float %471, i32 0
  %485 = shufflevector <4 x float> %484, <4 x float> undef, <4 x i32> zeroinitializer
  br label %486

486:                                              ; preds = %486, %476
  %487 = phi i64 [ 0, %476 ], [ %506, %486 ]
  %488 = getelementptr inbounds float, float* %5, i64 %487
  %489 = bitcast float* %488 to <4 x float>*
  %490 = load <4 x float>, <4 x float>* %489, align 4
  %491 = getelementptr inbounds float, float* %488, i64 4
  %492 = bitcast float* %491 to <4 x float>*
  %493 = load <4 x float>, <4 x float>* %492, align 4
  %494 = fmul <4 x float> %490, %490
  %495 = fmul <4 x float> %493, %493
  %496 = fcmp olt <4 x float> %494, %479
  %497 = fcmp olt <4 x float> %495, %481
  %498 = select <4 x i1> %496, <4 x float> %479, <4 x float> %494
  %499 = select <4 x i1> %497, <4 x float> %481, <4 x float> %495
  %500 = fcmp ogt <4 x float> %498, %483
  %501 = fcmp ogt <4 x float> %499, %485
  %502 = select <4 x i1> %500, <4 x float> %483, <4 x float> %498
  %503 = select <4 x i1> %501, <4 x float> %485, <4 x float> %499
  %504 = bitcast float* %488 to <4 x float>*
  store <4 x float> %502, <4 x float>* %504, align 4
  %505 = bitcast float* %491 to <4 x float>*
  store <4 x float> %503, <4 x float>* %505, align 4
  %506 = add i64 %487, 8
  %507 = icmp eq i64 %506, %477
  br i1 %507, label %508, label %486, !llvm.loop !116

508:                                              ; preds = %486
  %509 = icmp eq i64 %477, %474
  br i1 %509, label %523, label %510

510:                                              ; preds = %508, %473
  %511 = phi i64 [ 0, %473 ], [ %477, %508 ]
  br label %512

512:                                              ; preds = %510, %512
  %513 = phi i64 [ %521, %512 ], [ %511, %510 ]
  %514 = getelementptr inbounds float, float* %5, i64 %513
  %515 = load float, float* %514, align 4
  %516 = fmul float %515, %515
  %517 = fcmp olt float %516, %469
  %518 = select i1 %517, float %469, float %516
  %519 = fcmp ogt float %518, %471
  %520 = select i1 %519, float %471, float %518
  store float %520, float* %514, align 4
  %521 = add nuw nsw i64 %513, 1
  %522 = icmp eq i64 %521, %474
  br i1 %522, label %523, label %512, !llvm.loop !117

523:                                              ; preds = %512, %508, %467
  %524 = icmp eq i32 %129, 1
  br i1 %524, label %525, label %955

525:                                              ; preds = %523
  %526 = load i32, i32* %130, align 8
  %527 = icmp sgt i32 %526, 5
  br i1 %527, label %528, label %531

528:                                              ; preds = %525
  %529 = getelementptr inbounds %union.anon, %union.anon* %133, i64 0, i32 0
  %530 = load i32*, i32** %529, align 8
  br label %534

531:                                              ; preds = %525
  %532 = bitcast %union.anon* %133 to i32*
  %533 = icmp sgt i32 %526, 0
  br i1 %533, label %534, label %741

534:                                              ; preds = %531, %528
  %535 = phi i32* [ %530, %528 ], [ %532, %531 ]
  %536 = zext i32 %526 to i64
  %537 = icmp ult i32 %526, 8
  br i1 %537, label %623, label %538

538:                                              ; preds = %534
  %539 = and i64 %536, 4294967288
  %540 = add nsw i64 %539, -8
  %541 = lshr exact i64 %540, 3
  %542 = add nuw nsw i64 %541, 1
  %543 = and i64 %542, 3
  %544 = icmp ult i64 %540, 24
  br i1 %544, label %590, label %545

545:                                              ; preds = %538
  %546 = sub nsw i64 %542, %543
  br label %547

547:                                              ; preds = %547, %545
  %548 = phi i64 [ 0, %545 ], [ %587, %547 ]
  %549 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %545 ], [ %585, %547 ]
  %550 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %545 ], [ %586, %547 ]
  %551 = phi i64 [ %546, %545 ], [ %588, %547 ]
  %552 = getelementptr inbounds i32, i32* %535, i64 %548
  %553 = bitcast i32* %552 to <4 x i32>*
  %554 = load <4 x i32>, <4 x i32>* %553, align 4
  %555 = getelementptr inbounds i32, i32* %552, i64 4
  %556 = bitcast i32* %555 to <4 x i32>*
  %557 = load <4 x i32>, <4 x i32>* %556, align 4
  %558 = mul nsw <4 x i32> %554, %549
  %559 = mul nsw <4 x i32> %557, %550
  %560 = or i64 %548, 8
  %561 = getelementptr inbounds i32, i32* %535, i64 %560
  %562 = bitcast i32* %561 to <4 x i32>*
  %563 = load <4 x i32>, <4 x i32>* %562, align 4
  %564 = getelementptr inbounds i32, i32* %561, i64 4
  %565 = bitcast i32* %564 to <4 x i32>*
  %566 = load <4 x i32>, <4 x i32>* %565, align 4
  %567 = mul nsw <4 x i32> %563, %558
  %568 = mul nsw <4 x i32> %566, %559
  %569 = or i64 %548, 16
  %570 = getelementptr inbounds i32, i32* %535, i64 %569
  %571 = bitcast i32* %570 to <4 x i32>*
  %572 = load <4 x i32>, <4 x i32>* %571, align 4
  %573 = getelementptr inbounds i32, i32* %570, i64 4
  %574 = bitcast i32* %573 to <4 x i32>*
  %575 = load <4 x i32>, <4 x i32>* %574, align 4
  %576 = mul nsw <4 x i32> %572, %567
  %577 = mul nsw <4 x i32> %575, %568
  %578 = or i64 %548, 24
  %579 = getelementptr inbounds i32, i32* %535, i64 %578
  %580 = bitcast i32* %579 to <4 x i32>*
  %581 = load <4 x i32>, <4 x i32>* %580, align 4
  %582 = getelementptr inbounds i32, i32* %579, i64 4
  %583 = bitcast i32* %582 to <4 x i32>*
  %584 = load <4 x i32>, <4 x i32>* %583, align 4
  %585 = mul nsw <4 x i32> %581, %576
  %586 = mul nsw <4 x i32> %584, %577
  %587 = add i64 %548, 32
  %588 = add i64 %551, -4
  %589 = icmp eq i64 %588, 0
  br i1 %589, label %590, label %547, !llvm.loop !118

590:                                              ; preds = %547, %538
  %591 = phi <4 x i32> [ undef, %538 ], [ %585, %547 ]
  %592 = phi <4 x i32> [ undef, %538 ], [ %586, %547 ]
  %593 = phi i64 [ 0, %538 ], [ %587, %547 ]
  %594 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %538 ], [ %585, %547 ]
  %595 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %538 ], [ %586, %547 ]
  %596 = icmp eq i64 %543, 0
  br i1 %596, label %613, label %597

597:                                              ; preds = %590, %597
  %598 = phi i64 [ %610, %597 ], [ %593, %590 ]
  %599 = phi <4 x i32> [ %608, %597 ], [ %594, %590 ]
  %600 = phi <4 x i32> [ %609, %597 ], [ %595, %590 ]
  %601 = phi i64 [ %611, %597 ], [ %543, %590 ]
  %602 = getelementptr inbounds i32, i32* %535, i64 %598
  %603 = bitcast i32* %602 to <4 x i32>*
  %604 = load <4 x i32>, <4 x i32>* %603, align 4
  %605 = getelementptr inbounds i32, i32* %602, i64 4
  %606 = bitcast i32* %605 to <4 x i32>*
  %607 = load <4 x i32>, <4 x i32>* %606, align 4
  %608 = mul nsw <4 x i32> %604, %599
  %609 = mul nsw <4 x i32> %607, %600
  %610 = add i64 %598, 8
  %611 = add i64 %601, -1
  %612 = icmp eq i64 %611, 0
  br i1 %612, label %613, label %597, !llvm.loop !119

613:                                              ; preds = %597, %590
  %614 = phi <4 x i32> [ %591, %590 ], [ %608, %597 ]
  %615 = phi <4 x i32> [ %592, %590 ], [ %609, %597 ]
  %616 = mul <4 x i32> %615, %614
  %617 = shufflevector <4 x i32> %616, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %618 = mul <4 x i32> %616, %617
  %619 = shufflevector <4 x i32> %618, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %620 = mul <4 x i32> %618, %619
  %621 = extractelement <4 x i32> %620, i32 0
  %622 = icmp eq i64 %539, %536
  br i1 %622, label %634, label %623

623:                                              ; preds = %613, %534
  %624 = phi i64 [ 0, %534 ], [ %539, %613 ]
  %625 = phi i32 [ 1, %534 ], [ %621, %613 ]
  br label %626

626:                                              ; preds = %623, %626
  %627 = phi i64 [ %632, %626 ], [ %624, %623 ]
  %628 = phi i32 [ %631, %626 ], [ %625, %623 ]
  %629 = getelementptr inbounds i32, i32* %535, i64 %627
  %630 = load i32, i32* %629, align 4
  %631 = mul nsw i32 %630, %628
  %632 = add nuw nsw i64 %627, 1
  %633 = icmp eq i64 %632, %536
  br i1 %633, label %634, label %626, !llvm.loop !120

634:                                              ; preds = %626, %613
  %635 = phi i32 [ %621, %613 ], [ %631, %626 ]
  br i1 %527, label %636, label %639

636:                                              ; preds = %634
  %637 = getelementptr inbounds %union.anon, %union.anon* %133, i64 0, i32 0
  %638 = load i32*, i32** %637, align 8
  br label %642

639:                                              ; preds = %634
  %640 = bitcast %union.anon* %133 to i32*
  %641 = icmp sgt i32 %526, 0
  br i1 %641, label %642, label %741

642:                                              ; preds = %639, %636
  %643 = phi i32* [ %638, %636 ], [ %640, %639 ]
  %644 = icmp ult i32 %526, 8
  br i1 %644, label %730, label %645

645:                                              ; preds = %642
  %646 = and i64 %536, 4294967288
  %647 = add nsw i64 %646, -8
  %648 = lshr exact i64 %647, 3
  %649 = add nuw nsw i64 %648, 1
  %650 = and i64 %649, 3
  %651 = icmp ult i64 %647, 24
  br i1 %651, label %697, label %652

652:                                              ; preds = %645
  %653 = sub nsw i64 %649, %650
  br label %654

654:                                              ; preds = %654, %652
  %655 = phi i64 [ 0, %652 ], [ %694, %654 ]
  %656 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %652 ], [ %692, %654 ]
  %657 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %652 ], [ %693, %654 ]
  %658 = phi i64 [ %653, %652 ], [ %695, %654 ]
  %659 = getelementptr inbounds i32, i32* %643, i64 %655
  %660 = bitcast i32* %659 to <4 x i32>*
  %661 = load <4 x i32>, <4 x i32>* %660, align 4
  %662 = getelementptr inbounds i32, i32* %659, i64 4
  %663 = bitcast i32* %662 to <4 x i32>*
  %664 = load <4 x i32>, <4 x i32>* %663, align 4
  %665 = mul nsw <4 x i32> %661, %656
  %666 = mul nsw <4 x i32> %664, %657
  %667 = or i64 %655, 8
  %668 = getelementptr inbounds i32, i32* %643, i64 %667
  %669 = bitcast i32* %668 to <4 x i32>*
  %670 = load <4 x i32>, <4 x i32>* %669, align 4
  %671 = getelementptr inbounds i32, i32* %668, i64 4
  %672 = bitcast i32* %671 to <4 x i32>*
  %673 = load <4 x i32>, <4 x i32>* %672, align 4
  %674 = mul nsw <4 x i32> %670, %665
  %675 = mul nsw <4 x i32> %673, %666
  %676 = or i64 %655, 16
  %677 = getelementptr inbounds i32, i32* %643, i64 %676
  %678 = bitcast i32* %677 to <4 x i32>*
  %679 = load <4 x i32>, <4 x i32>* %678, align 4
  %680 = getelementptr inbounds i32, i32* %677, i64 4
  %681 = bitcast i32* %680 to <4 x i32>*
  %682 = load <4 x i32>, <4 x i32>* %681, align 4
  %683 = mul nsw <4 x i32> %679, %674
  %684 = mul nsw <4 x i32> %682, %675
  %685 = or i64 %655, 24
  %686 = getelementptr inbounds i32, i32* %643, i64 %685
  %687 = bitcast i32* %686 to <4 x i32>*
  %688 = load <4 x i32>, <4 x i32>* %687, align 4
  %689 = getelementptr inbounds i32, i32* %686, i64 4
  %690 = bitcast i32* %689 to <4 x i32>*
  %691 = load <4 x i32>, <4 x i32>* %690, align 4
  %692 = mul nsw <4 x i32> %688, %683
  %693 = mul nsw <4 x i32> %691, %684
  %694 = add i64 %655, 32
  %695 = add i64 %658, -4
  %696 = icmp eq i64 %695, 0
  br i1 %696, label %697, label %654, !llvm.loop !121

697:                                              ; preds = %654, %645
  %698 = phi <4 x i32> [ undef, %645 ], [ %692, %654 ]
  %699 = phi <4 x i32> [ undef, %645 ], [ %693, %654 ]
  %700 = phi i64 [ 0, %645 ], [ %694, %654 ]
  %701 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %645 ], [ %692, %654 ]
  %702 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %645 ], [ %693, %654 ]
  %703 = icmp eq i64 %650, 0
  br i1 %703, label %720, label %704

704:                                              ; preds = %697, %704
  %705 = phi i64 [ %717, %704 ], [ %700, %697 ]
  %706 = phi <4 x i32> [ %715, %704 ], [ %701, %697 ]
  %707 = phi <4 x i32> [ %716, %704 ], [ %702, %697 ]
  %708 = phi i64 [ %718, %704 ], [ %650, %697 ]
  %709 = getelementptr inbounds i32, i32* %643, i64 %705
  %710 = bitcast i32* %709 to <4 x i32>*
  %711 = load <4 x i32>, <4 x i32>* %710, align 4
  %712 = getelementptr inbounds i32, i32* %709, i64 4
  %713 = bitcast i32* %712 to <4 x i32>*
  %714 = load <4 x i32>, <4 x i32>* %713, align 4
  %715 = mul nsw <4 x i32> %711, %706
  %716 = mul nsw <4 x i32> %714, %707
  %717 = add i64 %705, 8
  %718 = add i64 %708, -1
  %719 = icmp eq i64 %718, 0
  br i1 %719, label %720, label %704, !llvm.loop !122

720:                                              ; preds = %704, %697
  %721 = phi <4 x i32> [ %698, %697 ], [ %715, %704 ]
  %722 = phi <4 x i32> [ %699, %697 ], [ %716, %704 ]
  %723 = mul <4 x i32> %722, %721
  %724 = shufflevector <4 x i32> %723, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %725 = mul <4 x i32> %723, %724
  %726 = shufflevector <4 x i32> %725, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %727 = mul <4 x i32> %725, %726
  %728 = extractelement <4 x i32> %727, i32 0
  %729 = icmp eq i64 %646, %536
  br i1 %729, label %741, label %730

730:                                              ; preds = %720, %642
  %731 = phi i64 [ 0, %642 ], [ %646, %720 ]
  %732 = phi i32 [ 1, %642 ], [ %728, %720 ]
  br label %733

733:                                              ; preds = %730, %733
  %734 = phi i64 [ %739, %733 ], [ %731, %730 ]
  %735 = phi i32 [ %738, %733 ], [ %732, %730 ]
  %736 = getelementptr inbounds i32, i32* %643, i64 %734
  %737 = load i32, i32* %736, align 4
  %738 = mul nsw i32 %737, %735
  %739 = add nuw nsw i64 %734, 1
  %740 = icmp eq i64 %739, %536
  br i1 %740, label %741, label %733, !llvm.loop !123

741:                                              ; preds = %733, %720, %531, %639
  %742 = phi i32 [ %635, %639 ], [ 1, %531 ], [ %635, %720 ], [ %635, %733 ]
  %743 = phi i32 [ 1, %639 ], [ 1, %531 ], [ %728, %720 ], [ %738, %733 ]
  %744 = load i32, i32* %350, align 8
  %745 = icmp sgt i32 %744, 5
  br i1 %745, label %746, label %749

746:                                              ; preds = %741
  %747 = getelementptr inbounds %union.anon, %union.anon* %353, i64 0, i32 0
  %748 = load i32*, i32** %747, align 8
  br label %752

749:                                              ; preds = %741
  %750 = bitcast %union.anon* %353 to i32*
  %751 = icmp sgt i32 %744, 0
  br i1 %751, label %752, label %852

752:                                              ; preds = %749, %746
  %753 = phi i32* [ %748, %746 ], [ %750, %749 ]
  %754 = zext i32 %744 to i64
  %755 = icmp ult i32 %744, 8
  br i1 %755, label %841, label %756

756:                                              ; preds = %752
  %757 = and i64 %754, 4294967288
  %758 = add nsw i64 %757, -8
  %759 = lshr exact i64 %758, 3
  %760 = add nuw nsw i64 %759, 1
  %761 = and i64 %760, 3
  %762 = icmp ult i64 %758, 24
  br i1 %762, label %808, label %763

763:                                              ; preds = %756
  %764 = sub nsw i64 %760, %761
  br label %765

765:                                              ; preds = %765, %763
  %766 = phi i64 [ 0, %763 ], [ %805, %765 ]
  %767 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %763 ], [ %803, %765 ]
  %768 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %763 ], [ %804, %765 ]
  %769 = phi i64 [ %764, %763 ], [ %806, %765 ]
  %770 = getelementptr inbounds i32, i32* %753, i64 %766
  %771 = bitcast i32* %770 to <4 x i32>*
  %772 = load <4 x i32>, <4 x i32>* %771, align 4
  %773 = getelementptr inbounds i32, i32* %770, i64 4
  %774 = bitcast i32* %773 to <4 x i32>*
  %775 = load <4 x i32>, <4 x i32>* %774, align 4
  %776 = mul nsw <4 x i32> %772, %767
  %777 = mul nsw <4 x i32> %775, %768
  %778 = or i64 %766, 8
  %779 = getelementptr inbounds i32, i32* %753, i64 %778
  %780 = bitcast i32* %779 to <4 x i32>*
  %781 = load <4 x i32>, <4 x i32>* %780, align 4
  %782 = getelementptr inbounds i32, i32* %779, i64 4
  %783 = bitcast i32* %782 to <4 x i32>*
  %784 = load <4 x i32>, <4 x i32>* %783, align 4
  %785 = mul nsw <4 x i32> %781, %776
  %786 = mul nsw <4 x i32> %784, %777
  %787 = or i64 %766, 16
  %788 = getelementptr inbounds i32, i32* %753, i64 %787
  %789 = bitcast i32* %788 to <4 x i32>*
  %790 = load <4 x i32>, <4 x i32>* %789, align 4
  %791 = getelementptr inbounds i32, i32* %788, i64 4
  %792 = bitcast i32* %791 to <4 x i32>*
  %793 = load <4 x i32>, <4 x i32>* %792, align 4
  %794 = mul nsw <4 x i32> %790, %785
  %795 = mul nsw <4 x i32> %793, %786
  %796 = or i64 %766, 24
  %797 = getelementptr inbounds i32, i32* %753, i64 %796
  %798 = bitcast i32* %797 to <4 x i32>*
  %799 = load <4 x i32>, <4 x i32>* %798, align 4
  %800 = getelementptr inbounds i32, i32* %797, i64 4
  %801 = bitcast i32* %800 to <4 x i32>*
  %802 = load <4 x i32>, <4 x i32>* %801, align 4
  %803 = mul nsw <4 x i32> %799, %794
  %804 = mul nsw <4 x i32> %802, %795
  %805 = add i64 %766, 32
  %806 = add i64 %769, -4
  %807 = icmp eq i64 %806, 0
  br i1 %807, label %808, label %765, !llvm.loop !124

808:                                              ; preds = %765, %756
  %809 = phi <4 x i32> [ undef, %756 ], [ %803, %765 ]
  %810 = phi <4 x i32> [ undef, %756 ], [ %804, %765 ]
  %811 = phi i64 [ 0, %756 ], [ %805, %765 ]
  %812 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %756 ], [ %803, %765 ]
  %813 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %756 ], [ %804, %765 ]
  %814 = icmp eq i64 %761, 0
  br i1 %814, label %831, label %815

815:                                              ; preds = %808, %815
  %816 = phi i64 [ %828, %815 ], [ %811, %808 ]
  %817 = phi <4 x i32> [ %826, %815 ], [ %812, %808 ]
  %818 = phi <4 x i32> [ %827, %815 ], [ %813, %808 ]
  %819 = phi i64 [ %829, %815 ], [ %761, %808 ]
  %820 = getelementptr inbounds i32, i32* %753, i64 %816
  %821 = bitcast i32* %820 to <4 x i32>*
  %822 = load <4 x i32>, <4 x i32>* %821, align 4
  %823 = getelementptr inbounds i32, i32* %820, i64 4
  %824 = bitcast i32* %823 to <4 x i32>*
  %825 = load <4 x i32>, <4 x i32>* %824, align 4
  %826 = mul nsw <4 x i32> %822, %817
  %827 = mul nsw <4 x i32> %825, %818
  %828 = add i64 %816, 8
  %829 = add i64 %819, -1
  %830 = icmp eq i64 %829, 0
  br i1 %830, label %831, label %815, !llvm.loop !125

831:                                              ; preds = %815, %808
  %832 = phi <4 x i32> [ %809, %808 ], [ %826, %815 ]
  %833 = phi <4 x i32> [ %810, %808 ], [ %827, %815 ]
  %834 = mul <4 x i32> %833, %832
  %835 = shufflevector <4 x i32> %834, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %836 = mul <4 x i32> %834, %835
  %837 = shufflevector <4 x i32> %836, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %838 = mul <4 x i32> %836, %837
  %839 = extractelement <4 x i32> %838, i32 0
  %840 = icmp eq i64 %757, %754
  br i1 %840, label %852, label %841

841:                                              ; preds = %831, %752
  %842 = phi i64 [ 0, %752 ], [ %757, %831 ]
  %843 = phi i32 [ 1, %752 ], [ %839, %831 ]
  br label %844

844:                                              ; preds = %841, %844
  %845 = phi i64 [ %850, %844 ], [ %842, %841 ]
  %846 = phi i32 [ %849, %844 ], [ %843, %841 ]
  %847 = getelementptr inbounds i32, i32* %753, i64 %845
  %848 = load i32, i32* %847, align 4
  %849 = mul nsw i32 %848, %846
  %850 = add nuw nsw i64 %845, 1
  %851 = icmp eq i64 %850, %754
  br i1 %851, label %852, label %844, !llvm.loop !126

852:                                              ; preds = %844, %831, %749
  %853 = phi i32 [ 1, %749 ], [ %839, %831 ], [ %849, %844 ]
  %854 = icmp eq i32 %742, %743
  br i1 %854, label %856, label %855

855:                                              ; preds = %852
  tail call void @abort() #13
  unreachable

856:                                              ; preds = %852
  %857 = icmp eq i32 %742, %853
  br i1 %857, label %859, label %858

858:                                              ; preds = %856
  tail call void @abort() #13
  unreachable

859:                                              ; preds = %856
  %860 = load float, float* %468, align 4
  %861 = load float, float* %470, align 4
  %862 = icmp sgt i32 %742, 0
  br i1 %862, label %863, label %955

863:                                              ; preds = %859
  %864 = zext i32 %742 to i64
  %865 = icmp ult i32 %742, 8
  br i1 %865, label %912, label %866

866:                                              ; preds = %863
  %867 = getelementptr float, float* %5, i64 %864
  %868 = getelementptr float, float* %2, i64 %864
  %869 = icmp ugt float* %868, %5
  %870 = icmp ugt float* %867, %2
  %871 = and i1 %869, %870
  br i1 %871, label %912, label %872

872:                                              ; preds = %866
  %873 = and i64 %864, 4294967288
  %874 = insertelement <4 x float> undef, float %860, i32 0
  %875 = shufflevector <4 x float> %874, <4 x float> undef, <4 x i32> zeroinitializer
  %876 = insertelement <4 x float> undef, float %860, i32 0
  %877 = shufflevector <4 x float> %876, <4 x float> undef, <4 x i32> zeroinitializer
  %878 = insertelement <4 x float> undef, float %861, i32 0
  %879 = shufflevector <4 x float> %878, <4 x float> undef, <4 x i32> zeroinitializer
  %880 = insertelement <4 x float> undef, float %861, i32 0
  %881 = shufflevector <4 x float> %880, <4 x float> undef, <4 x i32> zeroinitializer
  br label %882

882:                                              ; preds = %882, %872
  %883 = phi i64 [ 0, %872 ], [ %908, %882 ]
  %884 = getelementptr inbounds float, float* %2, i64 %883
  %885 = bitcast float* %884 to <4 x float>*
  %886 = load <4 x float>, <4 x float>* %885, align 4, !alias.scope !127
  %887 = getelementptr inbounds float, float* %884, i64 4
  %888 = bitcast float* %887 to <4 x float>*
  %889 = load <4 x float>, <4 x float>* %888, align 4, !alias.scope !127
  %890 = getelementptr inbounds float, float* %5, i64 %883
  %891 = bitcast float* %890 to <4 x float>*
  %892 = load <4 x float>, <4 x float>* %891, align 4, !alias.scope !130, !noalias !127
  %893 = getelementptr inbounds float, float* %890, i64 4
  %894 = bitcast float* %893 to <4 x float>*
  %895 = load <4 x float>, <4 x float>* %894, align 4, !alias.scope !130, !noalias !127
  %896 = fmul <4 x float> %886, %892
  %897 = fmul <4 x float> %889, %895
  %898 = fcmp olt <4 x float> %896, %875
  %899 = fcmp olt <4 x float> %897, %877
  %900 = select <4 x i1> %898, <4 x float> %875, <4 x float> %896
  %901 = select <4 x i1> %899, <4 x float> %877, <4 x float> %897
  %902 = fcmp ogt <4 x float> %900, %879
  %903 = fcmp ogt <4 x float> %901, %881
  %904 = select <4 x i1> %902, <4 x float> %879, <4 x float> %900
  %905 = select <4 x i1> %903, <4 x float> %881, <4 x float> %901
  %906 = bitcast float* %890 to <4 x float>*
  store <4 x float> %904, <4 x float>* %906, align 4, !alias.scope !130, !noalias !127
  %907 = bitcast float* %893 to <4 x float>*
  store <4 x float> %905, <4 x float>* %907, align 4, !alias.scope !130, !noalias !127
  %908 = add i64 %883, 8
  %909 = icmp eq i64 %908, %873
  br i1 %909, label %910, label %882, !llvm.loop !132

910:                                              ; preds = %882
  %911 = icmp eq i64 %873, %864
  br i1 %911, label %955, label %912

912:                                              ; preds = %910, %866, %863
  %913 = phi i64 [ 0, %866 ], [ 0, %863 ], [ %873, %910 ]
  %914 = xor i64 %913, -1
  %915 = and i64 %864, 1
  %916 = icmp eq i64 %915, 0
  br i1 %916, label %928, label %917

917:                                              ; preds = %912
  %918 = getelementptr inbounds float, float* %2, i64 %913
  %919 = load float, float* %918, align 4
  %920 = getelementptr inbounds float, float* %5, i64 %913
  %921 = load float, float* %920, align 4
  %922 = fmul float %919, %921
  %923 = fcmp olt float %922, %860
  %924 = select i1 %923, float %860, float %922
  %925 = fcmp ogt float %924, %861
  %926 = select i1 %925, float %861, float %924
  store float %926, float* %920, align 4
  %927 = or i64 %913, 1
  br label %928

928:                                              ; preds = %912, %917
  %929 = phi i64 [ %913, %912 ], [ %927, %917 ]
  %930 = sub nsw i64 0, %864
  %931 = icmp eq i64 %914, %930
  br i1 %931, label %955, label %932

932:                                              ; preds = %928, %932
  %933 = phi i64 [ %953, %932 ], [ %929, %928 ]
  %934 = getelementptr inbounds float, float* %2, i64 %933
  %935 = load float, float* %934, align 4
  %936 = getelementptr inbounds float, float* %5, i64 %933
  %937 = load float, float* %936, align 4
  %938 = fmul float %935, %937
  %939 = fcmp olt float %938, %860
  %940 = select i1 %939, float %860, float %938
  %941 = fcmp ogt float %940, %861
  %942 = select i1 %941, float %861, float %940
  store float %942, float* %936, align 4
  %943 = add nuw nsw i64 %933, 1
  %944 = getelementptr inbounds float, float* %2, i64 %943
  %945 = load float, float* %944, align 4
  %946 = getelementptr inbounds float, float* %5, i64 %943
  %947 = load float, float* %946, align 4
  %948 = fmul float %945, %947
  %949 = fcmp olt float %948, %860
  %950 = select i1 %949, float %860, float %948
  %951 = fcmp ogt float %950, %861
  %952 = select i1 %951, float %861, float %950
  store float %952, float* %946, align 4
  %953 = add nuw nsw i64 %933, 2
  %954 = icmp eq i64 %953, %864
  br i1 %954, label %955, label %932, !llvm.loop !133

955:                                              ; preds = %928, %932, %910, %859, %523, %125
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops18BroadcastPow4DSlowIfEEvRKNS_12RuntimeShapeEPKT_S4_S7_S4_PS5_(%"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*) local_unnamed_addr #7 comdat {
  %7 = alloca %"class.tflite::RuntimeShape", align 8
  %8 = alloca %"struct.tflite::NdArrayDesc", align 4
  %9 = alloca %"struct.tflite::NdArrayDesc", align 4
  %10 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  %11 = bitcast %"class.tflite::RuntimeShape"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 32, i1 false)
  %12 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 0
  store i32 0, i32* %12, align 8, !alias.scope !134
  %13 = load i32, i32* %10, align 8, !noalias !134
  %14 = icmp sgt i32 %13, 4
  br i1 %14, label %15, label %16

15:                                               ; preds = %6
  tail call void @abort() #13, !noalias !134
  unreachable

16:                                               ; preds = %6
  store i32 4, i32* %12, align 8, !alias.scope !134
  %17 = sub i32 4, %13
  %18 = icmp sgt i32 %17, 0
  %19 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1
  br i1 %18, label %20, label %100

20:                                               ; preds = %16
  %21 = bitcast %union.anon* %19 to [5 x i32]*
  %22 = zext i32 %17 to i64
  %23 = icmp ult i32 %17, 8
  br i1 %23, label %93, label %24

24:                                               ; preds = %20
  %25 = and i64 %22, 4294967288
  %26 = add nsw i64 %25, -8
  %27 = lshr exact i64 %26, 3
  %28 = add nuw nsw i64 %27, 1
  %29 = and i64 %28, 7
  %30 = icmp ult i64 %26, 56
  br i1 %30, label %78, label %31

31:                                               ; preds = %24
  %32 = sub nsw i64 %28, %29
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i64 [ 0, %31 ], [ %75, %33 ]
  %35 = phi i64 [ %32, %31 ], [ %76, %33 ]
  %36 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %34
  %37 = bitcast i32* %36 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %37, align 8, !alias.scope !134
  %38 = getelementptr inbounds i32, i32* %36, i64 4
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %39, align 8, !alias.scope !134
  %40 = or i64 %34, 8
  %41 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %40
  %42 = bitcast i32* %41 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %42, align 8, !alias.scope !134
  %43 = getelementptr inbounds i32, i32* %41, i64 4
  %44 = bitcast i32* %43 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %44, align 8, !alias.scope !134
  %45 = or i64 %34, 16
  %46 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %45
  %47 = bitcast i32* %46 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %47, align 8, !alias.scope !134
  %48 = getelementptr inbounds i32, i32* %46, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %49, align 8, !alias.scope !134
  %50 = or i64 %34, 24
  %51 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %50
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %52, align 8, !alias.scope !134
  %53 = getelementptr inbounds i32, i32* %51, i64 4
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %54, align 8, !alias.scope !134
  %55 = or i64 %34, 32
  %56 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %55
  %57 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %57, align 8, !alias.scope !134
  %58 = getelementptr inbounds i32, i32* %56, i64 4
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %59, align 8, !alias.scope !134
  %60 = or i64 %34, 40
  %61 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %60
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %62, align 8, !alias.scope !134
  %63 = getelementptr inbounds i32, i32* %61, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %64, align 8, !alias.scope !134
  %65 = or i64 %34, 48
  %66 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %65
  %67 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %67, align 8, !alias.scope !134
  %68 = getelementptr inbounds i32, i32* %66, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %69, align 8, !alias.scope !134
  %70 = or i64 %34, 56
  %71 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %70
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %72, align 8, !alias.scope !134
  %73 = getelementptr inbounds i32, i32* %71, i64 4
  %74 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %74, align 8, !alias.scope !134
  %75 = add i64 %34, 64
  %76 = add i64 %35, -8
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %33, !llvm.loop !137

78:                                               ; preds = %33, %24
  %79 = phi i64 [ 0, %24 ], [ %75, %33 ]
  %80 = icmp eq i64 %29, 0
  br i1 %80, label %91, label %81

81:                                               ; preds = %78, %81
  %82 = phi i64 [ %88, %81 ], [ %79, %78 ]
  %83 = phi i64 [ %89, %81 ], [ %29, %78 ]
  %84 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %82
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %85, align 8, !alias.scope !134
  %86 = getelementptr inbounds i32, i32* %84, i64 4
  %87 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %87, align 8, !alias.scope !134
  %88 = add i64 %82, 8
  %89 = add i64 %83, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %81, !llvm.loop !138

91:                                               ; preds = %81, %78
  %92 = icmp eq i64 %25, %22
  br i1 %92, label %100, label %93

93:                                               ; preds = %91, %20
  %94 = phi i64 [ 0, %20 ], [ %25, %91 ]
  br label %95

95:                                               ; preds = %93, %95
  %96 = phi i64 [ %98, %95 ], [ %94, %93 ]
  %97 = getelementptr inbounds [5 x i32], [5 x i32]* %21, i64 0, i64 %96
  store i32 1, i32* %97, align 4, !alias.scope !134
  %98 = add nuw nsw i64 %96, 1
  %99 = icmp eq i64 %98, %22
  br i1 %99, label %100, label %95, !llvm.loop !139

100:                                              ; preds = %95, %91, %16
  %101 = getelementptr inbounds %union.anon, %union.anon* %19, i64 0, i32 0
  %102 = bitcast %union.anon* %19 to i32*
  %103 = sext i32 %17 to i64
  %104 = getelementptr inbounds i32, i32* %102, i64 %103
  %105 = bitcast i32* %104 to i8*
  %106 = icmp sgt i32 %13, 5
  %107 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %108 = getelementptr inbounds %union.anon, %union.anon* %107, i64 0, i32 0
  %109 = load i32*, i32** %108, align 8, !noalias !134
  %110 = bitcast %union.anon* %107 to i32*
  %111 = select i1 %106, i32* %109, i32* %110
  %112 = bitcast i32* %111 to i8*
  %113 = sext i32 %13 to i64
  %114 = shl nsw i64 %113, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %105, i8* align 4 %112, i64 %114, i1 false) #12
  %115 = bitcast %"struct.tflite::NdArrayDesc"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %115) #12
  %116 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 0
  %117 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 1
  %118 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 2
  %119 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 3
  %120 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  %121 = bitcast %"struct.tflite::NdArrayDesc"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %121, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %120) #12
  %122 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 0
  %123 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 1
  %124 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 2
  %125 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 3
  %126 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %126, i8 -86, i64 32, i1 false)
  call void @_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_(%"class.tflite::RuntimeShape"* dereferenceable(32) %0, %"class.tflite::RuntimeShape"* dereferenceable(32) %2, %"struct.tflite::NdArrayDesc"* nonnull %8, %"struct.tflite::NdArrayDesc"* nonnull %9)
  %127 = load i32, i32* %12, align 8
  %128 = icmp sgt i32 %127, 5
  %129 = load i32*, i32** %101, align 8
  %130 = select i1 %128, i32* %129, i32* %102
  %131 = load i32, i32* %130, align 4
  %132 = icmp sgt i32 %131, 0
  br i1 %132, label %133, label %152

133:                                              ; preds = %100
  %134 = bitcast %union.anon* %19 to [5 x i32]*
  %135 = getelementptr inbounds [5 x i32], [5 x i32]* %134, i64 0, i64 1
  %136 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 1
  %137 = bitcast [16 x i8]* %136 to i32*
  %138 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %7, i64 0, i32 1, i32 1, i64 4
  %139 = bitcast i8* %138 to i32*
  %140 = getelementptr inbounds i32, i32* %102, i64 1
  %141 = getelementptr inbounds i32, i32* %129, i64 1
  %142 = select i1 %128, i32* %141, i32* %135
  %143 = getelementptr inbounds i32, i32* %129, i64 2
  %144 = select i1 %128, i32* %143, i32* %137
  %145 = getelementptr inbounds i32, i32* %129, i64 3
  %146 = select i1 %128, i32* %145, i32* %139
  br label %147

147:                                              ; preds = %133, %171
  %148 = phi i32 [ %131, %133 ], [ %172, %171 ]
  %149 = phi i32 [ 0, %133 ], [ %173, %171 ]
  %150 = load i32, i32* %142, align 4
  %151 = icmp sgt i32 %150, 0
  br i1 %151, label %159, label %171

152:                                              ; preds = %171, %100
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %120) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %115) #12
  %153 = xor i1 %128, true
  %154 = icmp eq i32* %129, null
  %155 = or i1 %154, %153
  br i1 %155, label %158, label %156

156:                                              ; preds = %152
  %157 = bitcast i32* %129 to i8*
  call void @_ZdaPv(i8* %157) #11
  br label %158

158:                                              ; preds = %152, %156
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #12
  ret void

159:                                              ; preds = %147, %188
  %160 = phi i32 [ %189, %188 ], [ %150, %147 ]
  %161 = phi i32 [ %190, %188 ], [ 0, %147 ]
  %162 = load i32, i32* %144, align 4
  %163 = icmp sgt i32 %162, 0
  br i1 %163, label %164, label %188

164:                                              ; preds = %159
  %165 = load i32, i32* %140, align 4
  %166 = mul nsw i32 %165, %149
  %167 = add nsw i32 %166, %161
  %168 = load i32, i32* %146, align 4
  br label %175

169:                                              ; preds = %188
  %170 = load i32, i32* %130, align 4
  br label %171

171:                                              ; preds = %169, %147
  %172 = phi i32 [ %170, %169 ], [ %148, %147 ]
  %173 = add nuw nsw i32 %149, 1
  %174 = icmp slt i32 %173, %172
  br i1 %174, label %147, label %152

175:                                              ; preds = %164, %194
  %176 = phi i32 [ %162, %164 ], [ %195, %194 ]
  %177 = phi i32 [ %168, %164 ], [ %196, %194 ]
  %178 = phi i32 [ 0, %164 ], [ %197, %194 ]
  %179 = icmp sgt i32 %177, 0
  br i1 %179, label %180, label %194

180:                                              ; preds = %175
  %181 = load i32, i32* %137, align 8
  %182 = mul nsw i32 %167, %181
  %183 = add nsw i32 %182, %178
  %184 = load i32, i32* %139, align 4
  %185 = mul nsw i32 %183, %184
  br label %199

186:                                              ; preds = %194
  %187 = load i32, i32* %142, align 4
  br label %188

188:                                              ; preds = %186, %159
  %189 = phi i32 [ %187, %186 ], [ %160, %159 ]
  %190 = add nuw nsw i32 %161, 1
  %191 = icmp slt i32 %190, %189
  br i1 %191, label %159, label %169

192:                                              ; preds = %199
  %193 = load i32, i32* %144, align 4
  br label %194

194:                                              ; preds = %192, %175
  %195 = phi i32 [ %193, %192 ], [ %176, %175 ]
  %196 = phi i32 [ %234, %192 ], [ %177, %175 ]
  %197 = add nuw nsw i32 %178, 1
  %198 = icmp slt i32 %197, %195
  br i1 %198, label %175, label %186

199:                                              ; preds = %180, %199
  %200 = phi i32 [ 0, %180 ], [ %233, %199 ]
  %201 = add nsw i32 %185, %200
  %202 = load i32, i32* %116, align 4
  %203 = mul nsw i32 %202, %149
  %204 = load i32, i32* %117, align 4
  %205 = mul nsw i32 %204, %161
  %206 = add nsw i32 %205, %203
  %207 = load i32, i32* %118, align 4
  %208 = mul nsw i32 %207, %178
  %209 = add nsw i32 %206, %208
  %210 = load i32, i32* %119, align 4
  %211 = mul nsw i32 %210, %200
  %212 = add nsw i32 %209, %211
  %213 = load i32, i32* %122, align 4
  %214 = mul nsw i32 %213, %149
  %215 = load i32, i32* %123, align 4
  %216 = mul nsw i32 %215, %161
  %217 = add nsw i32 %216, %214
  %218 = load i32, i32* %124, align 4
  %219 = mul nsw i32 %218, %178
  %220 = add nsw i32 %217, %219
  %221 = load i32, i32* %125, align 4
  %222 = mul nsw i32 %221, %200
  %223 = add nsw i32 %220, %222
  %224 = sext i32 %212 to i64
  %225 = getelementptr inbounds float, float* %1, i64 %224
  %226 = load float, float* %225, align 4
  %227 = sext i32 %223 to i64
  %228 = getelementptr inbounds float, float* %3, i64 %227
  %229 = load float, float* %228, align 4
  %230 = call float @powf(float %226, float %229) #12
  %231 = sext i32 %201 to i64
  %232 = getelementptr inbounds float, float* %5, i64 %231
  store float %230, float* %232, align 4
  %233 = add nuw nsw i32 %200, 1
  %234 = load i32, i32* %146, align 4
  %235 = icmp slt i32 %233, %234
  br i1 %235, label %199, label %192
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.round.f32(float) #10

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #10

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!7 = distinct !{!7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!10 = distinct !{!10, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!13 = distinct !{!13, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !4}
!17 = distinct !{!17, !18, !15}
!18 = !{!"llvm.loop.unroll.runtime.disable"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!21 = distinct !{!21, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!24 = distinct !{!24, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!27 = distinct !{!27, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!28 = distinct !{!28, !15}
!29 = distinct !{!29, !4}
!30 = distinct !{!30, !18, !15}
!31 = !{!32}
!32 = distinct !{!32, !33, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!33 = distinct !{!33, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!36 = distinct !{!36, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!39 = distinct !{!39, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!40 = distinct !{!40, !15}
!41 = distinct !{!41, !4}
!42 = distinct !{!42, !18, !15}
!43 = !{!44}
!44 = distinct !{!44, !45, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!45 = distinct !{!45, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!46 = !{!47}
!47 = distinct !{!47, !48, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!48 = distinct !{!48, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!49 = !{!50}
!50 = distinct !{!50, !51, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!51 = distinct !{!51, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!52 = distinct !{!52, !15}
!53 = distinct !{!53, !4}
!54 = distinct !{!54, !18, !15}
!55 = distinct !{!55, !4}
!56 = distinct !{!56, !15}
!57 = distinct !{!57, !4}
!58 = distinct !{!58, !18, !15}
!59 = distinct !{!59, !15}
!60 = distinct !{!60, !4}
!61 = distinct !{!61, !18, !15}
!62 = distinct !{!62, !15}
!63 = distinct !{!63, !4}
!64 = distinct !{!64, !18, !15}
!65 = distinct !{!65, !15}
!66 = distinct !{!66, !4}
!67 = distinct !{!67, !18, !15}
!68 = distinct !{!68, !15}
!69 = distinct !{!69, !18, !15}
!70 = distinct !{!70, !15}
!71 = distinct !{!71, !4}
!72 = distinct !{!72, !18, !15}
!73 = distinct !{!73, !15}
!74 = distinct !{!74, !4}
!75 = distinct !{!75, !18, !15}
!76 = distinct !{!76, !15}
!77 = distinct !{!77, !4}
!78 = distinct !{!78, !18, !15}
!79 = !{!80}
!80 = distinct !{!80, !81}
!81 = distinct !{!81, !"LVerDomain"}
!82 = !{!83}
!83 = distinct !{!83, !81}
!84 = distinct !{!84, !15}
!85 = distinct !{!85, !15}
!86 = !{!87}
!87 = distinct !{!87, !88, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!88 = distinct !{!88, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!89 = distinct !{!89, !15}
!90 = distinct !{!90, !4}
!91 = distinct !{!91, !18, !15}
!92 = !{!93}
!93 = distinct !{!93, !94, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!94 = distinct !{!94, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!95 = distinct !{!95, !15}
!96 = distinct !{!96, !4}
!97 = distinct !{!97, !18, !15}
!98 = !{!99}
!99 = distinct !{!99, !100, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!100 = distinct !{!100, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!101 = distinct !{!101, !15}
!102 = distinct !{!102, !4}
!103 = distinct !{!103, !18, !15}
!104 = distinct !{!104, !15}
!105 = distinct !{!105, !4}
!106 = distinct !{!106, !18, !15}
!107 = distinct !{!107, !15}
!108 = distinct !{!108, !4}
!109 = distinct !{!109, !18, !15}
!110 = distinct !{!110, !15}
!111 = distinct !{!111, !4}
!112 = distinct !{!112, !18, !15}
!113 = distinct !{!113, !15}
!114 = distinct !{!114, !4}
!115 = distinct !{!115, !18, !15}
!116 = distinct !{!116, !15}
!117 = distinct !{!117, !18, !15}
!118 = distinct !{!118, !15}
!119 = distinct !{!119, !4}
!120 = distinct !{!120, !18, !15}
!121 = distinct !{!121, !15}
!122 = distinct !{!122, !4}
!123 = distinct !{!123, !18, !15}
!124 = distinct !{!124, !15}
!125 = distinct !{!125, !4}
!126 = distinct !{!126, !18, !15}
!127 = !{!128}
!128 = distinct !{!128, !129}
!129 = distinct !{!129, !"LVerDomain"}
!130 = !{!131}
!131 = distinct !{!131, !129}
!132 = distinct !{!132, !15}
!133 = distinct !{!133, !15}
!134 = !{!135}
!135 = distinct !{!135, !136, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!136 = distinct !{!136, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!137 = distinct !{!137, !15}
!138 = distinct !{!138, !4}
!139 = distinct !{!139, !18, !15}
