; ModuleID = '../../base/trace_event/memory_dump_provider_info.cc'
source_filename = "../../base/trace_event/memory_dump_provider_info.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::trace_event::MemoryDumpProviderInfo" = type <{ %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::trace_event::MemoryDumpProvider"*, %"struct.base::trace_event::MemoryDumpProvider::Options", [7 x i8], i8*, %class.scoped_refptr, i8, [7 x i8], %"class.std::__1::unique_ptr", i32, i8, [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.base::trace_event::MemoryDumpProvider::Options" = type { i8 }
%class.scoped_refptr = type { %"class.base::SequencedTaskRunner"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::trace_event::MemoryDumpProvider"* }
%"class.base::trace_event::MemoryDumpProvider" = type { i32 (...)** }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1" }>
%"class.base::RefCountedThreadSafe.1" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.1", [4 x i8] }>
%"struct.base::trace_event::MemoryDumpProviderInfo::Comparator" = type { i8 }
%class.scoped_refptr.3 = type { %"struct.base::trace_event::MemoryDumpProviderInfo"* }

@_ZN4base11trace_event22MemoryDumpProviderInfoC1EPNS0_18MemoryDumpProviderEPKc13scoped_refptrINS_19SequencedTaskRunnerEERKNS2_7OptionsEb = hidden unnamed_addr alias void (%"struct.base::trace_event::MemoryDumpProviderInfo"*, %"class.base::trace_event::MemoryDumpProvider"*, i8*, %"class.base::SequencedTaskRunner"*, %"struct.base::trace_event::MemoryDumpProvider::Options"*, i1), void (%"struct.base::trace_event::MemoryDumpProviderInfo"*, %"class.base::trace_event::MemoryDumpProvider"*, i8*, %"class.base::SequencedTaskRunner"*, %"struct.base::trace_event::MemoryDumpProvider::Options"*, i1)* @_ZN4base11trace_event22MemoryDumpProviderInfoC2EPNS0_18MemoryDumpProviderEPKc13scoped_refptrINS_19SequencedTaskRunnerEERKNS2_7OptionsEb
@_ZN4base11trace_event22MemoryDumpProviderInfoD1Ev = hidden unnamed_addr alias void (%"struct.base::trace_event::MemoryDumpProviderInfo"*), void (%"struct.base::trace_event::MemoryDumpProviderInfo"*)* @_ZN4base11trace_event22MemoryDumpProviderInfoD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base11trace_event22MemoryDumpProviderInfoC2EPNS0_18MemoryDumpProviderEPKc13scoped_refptrINS_19SequencedTaskRunnerEERKNS2_7OptionsEb(%"struct.base::trace_event::MemoryDumpProviderInfo"* nocapture, %"class.base::trace_event::MemoryDumpProvider"*, i8*, %"class.base::SequencedTaskRunner"*, %"struct.base::trace_event::MemoryDumpProvider::Options"* nocapture readonly dereferenceable(1), i1 zeroext) unnamed_addr #0 align 2 {
  %7 = ptrtoint %"class.base::SequencedTaskRunner"* %3 to i64
  %8 = zext i1 %5 to i8
  %9 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %0, i64 0, i32 2
  store %"class.base::trace_event::MemoryDumpProvider"* %1, %"class.base::trace_event::MemoryDumpProvider"** %10, align 8
  %11 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %0, i64 0, i32 3, i32 0
  %12 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProvider::Options", %"struct.base::trace_event::MemoryDumpProvider::Options"* %4, i64 0, i32 0
  %13 = load i8, i8* %12, align 1
  store i8 %13, i8* %11, align 8
  %14 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %0, i64 0, i32 5
  store i8* %2, i8** %14, align 8
  %15 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %0, i64 0, i32 6
  %16 = bitcast %class.scoped_refptr* %15 to i64*
  store i64 %7, i64* %16, align 8
  %17 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %0, i64 0, i32 7
  store i8 %8, i8* %17, align 8
  %18 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %0, i64 0, i32 9
  %19 = bitcast %"class.std::__1::unique_ptr"* %18 to i64*
  store i64 0, i64* %19, align 8
  %20 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %0, i64 0, i32 10
  store i32 0, i32* %20, align 8
  %21 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %0, i64 0, i32 11
  store i8 0, i8* %21, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base11trace_event22MemoryDumpProviderInfoD2Ev(%"struct.base::trace_event::MemoryDumpProviderInfo"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %0, i64 0, i32 9, i32 0, i32 0, i32 0
  %3 = load %"class.base::trace_event::MemoryDumpProvider"*, %"class.base::trace_event::MemoryDumpProvider"** %2, align 8
  store %"class.base::trace_event::MemoryDumpProvider"* null, %"class.base::trace_event::MemoryDumpProvider"** %2, align 8
  %4 = icmp eq %"class.base::trace_event::MemoryDumpProvider"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.base::trace_event::MemoryDumpProvider"* %3 to void (%"class.base::trace_event::MemoryDumpProvider"*)***
  %7 = load void (%"class.base::trace_event::MemoryDumpProvider"*)**, void (%"class.base::trace_event::MemoryDumpProvider"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.base::trace_event::MemoryDumpProvider"*)*, void (%"class.base::trace_event::MemoryDumpProvider"*)** %7, i64 1
  %9 = load void (%"class.base::trace_event::MemoryDumpProvider"*)*, void (%"class.base::trace_event::MemoryDumpProvider"*)** %8, align 8
  tail call void %9(%"class.base::trace_event::MemoryDumpProvider"* nonnull %3) #3
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %0, i64 0, i32 6, i32 0
  %12 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %11, align 8
  %13 = icmp eq %"class.base::SequencedTaskRunner"* %12, null
  br i1 %13, label %22, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %12, i64 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = atomicrmw sub i32* %16, i32 1 acq_rel
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %22

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.base::RefCountedThreadSafe.1", %"class.base::RefCountedThreadSafe.1"* %15, i64 -2
  %21 = bitcast %"class.base::RefCountedThreadSafe.1"* %20 to %"class.base::TaskRunner"*
  tail call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %21) #3
  br label %22

22:                                               ; preds = %10, %14, %19
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK4base11trace_event22MemoryDumpProviderInfo10ComparatorclERK13scoped_refptrIS1_ES6_(%"struct.base::trace_event::MemoryDumpProviderInfo::Comparator"* nocapture readnone, %class.scoped_refptr.3* nocapture readonly dereferenceable(8), %class.scoped_refptr.3* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %class.scoped_refptr.3, %class.scoped_refptr.3* %1, i64 0, i32 0
  %5 = load %"struct.base::trace_event::MemoryDumpProviderInfo"*, %"struct.base::trace_event::MemoryDumpProviderInfo"** %4, align 8
  %6 = icmp eq %"struct.base::trace_event::MemoryDumpProviderInfo"* %5, null
  %7 = getelementptr inbounds %class.scoped_refptr.3, %class.scoped_refptr.3* %2, i64 0, i32 0
  %8 = load %"struct.base::trace_event::MemoryDumpProviderInfo"*, %"struct.base::trace_event::MemoryDumpProviderInfo"** %7, align 8
  br i1 %6, label %11, label %9

9:                                                ; preds = %3
  %10 = icmp eq %"struct.base::trace_event::MemoryDumpProviderInfo"* %8, null
  br i1 %10, label %11, label %14

11:                                               ; preds = %3, %9
  %12 = phi %"struct.base::trace_event::MemoryDumpProviderInfo"* [ null, %9 ], [ %8, %3 ]
  %13 = icmp ult %"struct.base::trace_event::MemoryDumpProviderInfo"* %5, %12
  br label %28

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %5, i64 0, i32 2
  %16 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %8, i64 0, i32 2
  %17 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %8, i64 0, i32 6, i32 0
  %18 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %17, align 8
  %19 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpProviderInfo", %"struct.base::trace_event::MemoryDumpProviderInfo"* %5, i64 0, i32 6, i32 0
  %20 = load %"class.base::SequencedTaskRunner"*, %"class.base::SequencedTaskRunner"** %19, align 8
  %21 = icmp ult %"class.base::SequencedTaskRunner"* %18, %20
  br i1 %21, label %28, label %22

22:                                               ; preds = %14
  %23 = icmp ult %"class.base::SequencedTaskRunner"* %20, %18
  br i1 %23, label %28, label %24

24:                                               ; preds = %22
  %25 = load %"class.base::trace_event::MemoryDumpProvider"*, %"class.base::trace_event::MemoryDumpProvider"** %16, align 8
  %26 = load %"class.base::trace_event::MemoryDumpProvider"*, %"class.base::trace_event::MemoryDumpProvider"** %15, align 8
  %27 = icmp ult %"class.base::trace_event::MemoryDumpProvider"* %25, %26
  br label %28

28:                                               ; preds = %24, %22, %14, %11
  %29 = phi i1 [ %13, %11 ], [ %27, %24 ], [ true, %14 ], [ false, %22 ]
  ret i1 %29
}

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
