; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/matrix_diag.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/matrix_diag.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, {}*, {}*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [68 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/matrix_diag.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"input_dims_size >= 1\00", align 1
@_ZZN6tflite3ops7builtin20Register_MATRIX_DIAGEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11matrix_diag7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin11matrix_diag4EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11matrix_diag7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %10 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %9, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %10(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 33, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %6, i32 1) #4
  br label %192

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %19 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %18, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %19(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %15, i32 1) #4
  br label %192

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %20, %24
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %20 ]
  %31 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 2
  %32 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %31, align 8
  %33 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %38 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %37, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %38(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i32 38, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0)) #4
  br label %192

39:                                               ; preds = %29
  %40 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %45 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %44, align 8
  %46 = sext i32 %41 to i64
  %47 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %45, i64 %46
  br label %48

48:                                               ; preds = %43, %39
  %49 = phi %struct.TfLiteTensor* [ %47, %43 ], [ null, %39 ]
  %50 = add nuw nsw i32 %34, 1
  %51 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 %50) #4
  %52 = zext i32 %34 to i64
  %53 = icmp ult i32 %34, 8
  br i1 %53, label %54, label %72

54:                                               ; preds = %158, %72, %48
  %55 = phi i64 [ 0, %72 ], [ 0, %48 ], [ %82, %158 ]
  %56 = xor i64 %55, -1
  %57 = add nsw i64 %56, %52
  %58 = and i64 %52, 3
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %69, label %60

60:                                               ; preds = %54, %60
  %61 = phi i64 [ %66, %60 ], [ %55, %54 ]
  %62 = phi i64 [ %67, %60 ], [ %58, %54 ]
  %63 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 %61
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 1, i64 %61
  store i32 %64, i32* %65, align 4
  %66 = add nuw nsw i64 %61, 1
  %67 = add i64 %62, -1
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %60, !llvm.loop !2

69:                                               ; preds = %60, %54
  %70 = phi i64 [ %55, %54 ], [ %66, %60 ]
  %71 = icmp ult i64 %57, 3
  br i1 %71, label %160, label %173

72:                                               ; preds = %48
  %73 = getelementptr %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 1
  %74 = add nuw nsw i64 %52, 1
  %75 = getelementptr %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 %74
  %76 = getelementptr %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 1
  %77 = getelementptr %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 %74
  %78 = icmp ult %struct.TfLiteIntArray* %73, %77
  %79 = icmp ult %struct.TfLiteIntArray* %76, %75
  %80 = and i1 %78, %79
  br i1 %80, label %54, label %81

81:                                               ; preds = %72
  %82 = and i64 %52, 4294967288
  %83 = add nsw i64 %82, -8
  %84 = lshr exact i64 %83, 3
  %85 = add nuw nsw i64 %84, 1
  %86 = and i64 %85, 3
  %87 = icmp ult i64 %83, 24
  br i1 %87, label %139, label %88

88:                                               ; preds = %81
  %89 = sub nsw i64 %85, %86
  br label %90

90:                                               ; preds = %90, %88
  %91 = phi i64 [ 0, %88 ], [ %136, %90 ]
  %92 = phi i64 [ %89, %88 ], [ %137, %90 ]
  %93 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 %91
  %94 = bitcast i32* %93 to <4 x i32>*
  %95 = load <4 x i32>, <4 x i32>* %94, align 4, !alias.scope !4
  %96 = getelementptr inbounds i32, i32* %93, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 4, !alias.scope !4
  %99 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 1, i64 %91
  %100 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %100, align 4, !alias.scope !7, !noalias !4
  %101 = getelementptr inbounds i32, i32* %99, i64 4
  %102 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> %98, <4 x i32>* %102, align 4, !alias.scope !7, !noalias !4
  %103 = or i64 %91, 8
  %104 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 %103
  %105 = bitcast i32* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 4, !alias.scope !4
  %107 = getelementptr inbounds i32, i32* %104, i64 4
  %108 = bitcast i32* %107 to <4 x i32>*
  %109 = load <4 x i32>, <4 x i32>* %108, align 4, !alias.scope !4
  %110 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 1, i64 %103
  %111 = bitcast i32* %110 to <4 x i32>*
  store <4 x i32> %106, <4 x i32>* %111, align 4, !alias.scope !7, !noalias !4
  %112 = getelementptr inbounds i32, i32* %110, i64 4
  %113 = bitcast i32* %112 to <4 x i32>*
  store <4 x i32> %109, <4 x i32>* %113, align 4, !alias.scope !7, !noalias !4
  %114 = or i64 %91, 16
  %115 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 %114
  %116 = bitcast i32* %115 to <4 x i32>*
  %117 = load <4 x i32>, <4 x i32>* %116, align 4, !alias.scope !4
  %118 = getelementptr inbounds i32, i32* %115, i64 4
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4, !alias.scope !4
  %121 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 1, i64 %114
  %122 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> %117, <4 x i32>* %122, align 4, !alias.scope !7, !noalias !4
  %123 = getelementptr inbounds i32, i32* %121, i64 4
  %124 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> %120, <4 x i32>* %124, align 4, !alias.scope !7, !noalias !4
  %125 = or i64 %91, 24
  %126 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 %125
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 4, !alias.scope !4
  %129 = getelementptr inbounds i32, i32* %126, i64 4
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4, !alias.scope !4
  %132 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 1, i64 %125
  %133 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %128, <4 x i32>* %133, align 4, !alias.scope !7, !noalias !4
  %134 = getelementptr inbounds i32, i32* %132, i64 4
  %135 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %135, align 4, !alias.scope !7, !noalias !4
  %136 = add i64 %91, 32
  %137 = add i64 %92, -4
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %90, !llvm.loop !9

139:                                              ; preds = %90, %81
  %140 = phi i64 [ 0, %81 ], [ %136, %90 ]
  %141 = icmp eq i64 %86, 0
  br i1 %141, label %158, label %142

142:                                              ; preds = %139, %142
  %143 = phi i64 [ %155, %142 ], [ %140, %139 ]
  %144 = phi i64 [ %156, %142 ], [ %86, %139 ]
  %145 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 %143
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4, !alias.scope !4
  %148 = getelementptr inbounds i32, i32* %145, i64 4
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4, !alias.scope !4
  %151 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 1, i64 %143
  %152 = bitcast i32* %151 to <4 x i32>*
  store <4 x i32> %147, <4 x i32>* %152, align 4, !alias.scope !7, !noalias !4
  %153 = getelementptr inbounds i32, i32* %151, i64 4
  %154 = bitcast i32* %153 to <4 x i32>*
  store <4 x i32> %150, <4 x i32>* %154, align 4, !alias.scope !7, !noalias !4
  %155 = add i64 %143, 8
  %156 = add i64 %144, -1
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %158, label %142, !llvm.loop !11

158:                                              ; preds = %142, %139
  %159 = icmp eq i64 %82, %52
  br i1 %159, label %160, label %54

160:                                              ; preds = %69, %173, %158
  %161 = add nsw i32 %34, -1
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 %162
  %164 = load i32, i32* %163, align 4
  %165 = sext i32 %34 to i64
  %166 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 1, i64 %165
  store i32 %164, i32* %166, align 4
  %167 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 0
  %168 = load i32, i32* %167, align 8
  %169 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %49, i64 0, i32 0
  store i32 %168, i32* %169, align 8
  %170 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %171 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %170, align 8
  %172 = tail call i32 %171(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %49, %struct.TfLiteIntArray* %51) #4
  br label %192

173:                                              ; preds = %69, %173
  %174 = phi i64 [ %190, %173 ], [ %70, %69 ]
  %175 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 1, i64 %174
  store i32 %176, i32* %177, align 4
  %178 = add nuw nsw i64 %174, 1
  %179 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 1, i64 %178
  store i32 %180, i32* %181, align 4
  %182 = add nuw nsw i64 %174, 2
  %183 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 %182
  %184 = load i32, i32* %183, align 4
  %185 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 1, i64 %182
  store i32 %184, i32* %185, align 4
  %186 = add nuw nsw i64 %174, 3
  %187 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %51, i64 0, i32 1, i64 %186
  store i32 %188, i32* %189, align 4
  %190 = add nuw nsw i64 %174, 4
  %191 = icmp eq i64 %190, %52
  br i1 %191, label %160, label %173, !llvm.loop !12

192:                                              ; preds = %36, %160, %17, %8
  %193 = phi i32 [ 1, %8 ], [ 1, %17 ], [ 1, %36 ], [ %172, %160 ]
  ret i32 %193
}

declare %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6tflite3ops7builtin11matrix_diag14FillDiagHelperEPK12TfLiteTensorPS3_(%struct.TfLiteTensor* readonly, %struct.TfLiteTensor* readonly) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = add i32 %6, -2
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %100

9:                                                ; preds = %2
  %10 = zext i32 %7 to i64
  %11 = icmp ult i32 %7, 8
  br i1 %11, label %12, label %15

12:                                               ; preds = %90, %9
  %13 = phi i64 [ 0, %9 ], [ %16, %90 ]
  %14 = phi i32 [ 1, %9 ], [ %98, %90 ]
  br label %111

15:                                               ; preds = %9
  %16 = and i64 %10, 4294967288
  %17 = add nsw i64 %16, -8
  %18 = lshr exact i64 %17, 3
  %19 = add nuw nsw i64 %18, 1
  %20 = and i64 %19, 3
  %21 = icmp ult i64 %17, 24
  br i1 %21, label %67, label %22

22:                                               ; preds = %15
  %23 = sub nsw i64 %19, %20
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %64, %24 ]
  %26 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %22 ], [ %62, %24 ]
  %27 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %22 ], [ %63, %24 ]
  %28 = phi i64 [ %23, %22 ], [ %65, %24 ]
  %29 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 %25
  %30 = bitcast i32* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 4
  %32 = getelementptr inbounds i32, i32* %29, i64 4
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 4
  %35 = mul nsw <4 x i32> %31, %26
  %36 = mul nsw <4 x i32> %34, %27
  %37 = or i64 %25, 8
  %38 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 %37
  %39 = bitcast i32* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 4
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = mul nsw <4 x i32> %40, %35
  %45 = mul nsw <4 x i32> %43, %36
  %46 = or i64 %25, 16
  %47 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 %46
  %48 = bitcast i32* %47 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 4
  %50 = getelementptr inbounds i32, i32* %47, i64 4
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 4
  %53 = mul nsw <4 x i32> %49, %44
  %54 = mul nsw <4 x i32> %52, %45
  %55 = or i64 %25, 24
  %56 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 %55
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4
  %59 = getelementptr inbounds i32, i32* %56, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4
  %62 = mul nsw <4 x i32> %58, %53
  %63 = mul nsw <4 x i32> %61, %54
  %64 = add i64 %25, 32
  %65 = add i64 %28, -4
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %24, !llvm.loop !13

67:                                               ; preds = %24, %15
  %68 = phi <4 x i32> [ undef, %15 ], [ %62, %24 ]
  %69 = phi <4 x i32> [ undef, %15 ], [ %63, %24 ]
  %70 = phi i64 [ 0, %15 ], [ %64, %24 ]
  %71 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %15 ], [ %62, %24 ]
  %72 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %15 ], [ %63, %24 ]
  %73 = icmp eq i64 %20, 0
  br i1 %73, label %90, label %74

74:                                               ; preds = %67, %74
  %75 = phi i64 [ %87, %74 ], [ %70, %67 ]
  %76 = phi <4 x i32> [ %85, %74 ], [ %71, %67 ]
  %77 = phi <4 x i32> [ %86, %74 ], [ %72, %67 ]
  %78 = phi i64 [ %88, %74 ], [ %20, %67 ]
  %79 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 %75
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4
  %82 = getelementptr inbounds i32, i32* %79, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 4
  %85 = mul nsw <4 x i32> %81, %76
  %86 = mul nsw <4 x i32> %84, %77
  %87 = add i64 %75, 8
  %88 = add i64 %78, -1
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %74, !llvm.loop !14

90:                                               ; preds = %74, %67
  %91 = phi <4 x i32> [ %68, %67 ], [ %85, %74 ]
  %92 = phi <4 x i32> [ %69, %67 ], [ %86, %74 ]
  %93 = mul <4 x i32> %92, %91
  %94 = shufflevector <4 x i32> %93, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %95 = mul <4 x i32> %93, %94
  %96 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %97 = mul <4 x i32> %95, %96
  %98 = extractelement <4 x i32> %97, i32 0
  %99 = icmp eq i64 %16, %10
  br i1 %99, label %100, label %12

100:                                              ; preds = %111, %90, %2
  %101 = phi i32 [ 1, %2 ], [ %98, %90 ], [ %116, %111 ]
  %102 = sext i32 %7 to i64
  %103 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = add nsw i32 %6, -1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 %106
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 0
  %110 = load i32, i32* %109, align 8
  switch i32 %110, label %512 [
    i32 4, label %119
    i32 2, label %198
    i32 7, label %275
    i32 9, label %354
    i32 3, label %433
  ]

111:                                              ; preds = %12, %111
  %112 = phi i64 [ %117, %111 ], [ %13, %12 ]
  %113 = phi i32 [ %116, %111 ], [ %14, %12 ]
  %114 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 %112
  %115 = load i32, i32* %114, align 4
  %116 = mul nsw i32 %115, %113
  %117 = add nuw nsw i64 %112, 1
  %118 = icmp eq i64 %117, %10
  br i1 %118, label %100, label %111, !llvm.loop !15

119:                                              ; preds = %100
  %120 = icmp eq %struct.TfLiteTensor* %0, null
  br i1 %120, label %125, label %121

121:                                              ; preds = %119
  %122 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1
  %123 = bitcast %union.TfLitePtrUnion* %122 to i64**
  %124 = load i64*, i64** %123, align 8
  br label %125

125:                                              ; preds = %121, %119
  %126 = phi i64* [ %124, %121 ], [ null, %119 ]
  %127 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %127, label %132, label %128

128:                                              ; preds = %125
  %129 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %130 = bitcast %union.TfLitePtrUnion* %129 to i64**
  %131 = load i64*, i64** %130, align 8
  br label %132

132:                                              ; preds = %128, %125
  %133 = phi i64* [ %131, %128 ], [ null, %125 ]
  %134 = icmp sgt i32 %101, 0
  br i1 %134, label %135, label %594

135:                                              ; preds = %132
  %136 = icmp sgt i32 %104, 0
  %137 = icmp sgt i32 %108, 0
  %138 = mul nsw i32 %108, %104
  %139 = sext i32 %138 to i64
  %140 = sext i32 %108 to i64
  %141 = zext i32 %104 to i64
  %142 = zext i32 %108 to i64
  %143 = and i64 %142, 1
  %144 = icmp eq i32 %108, 1
  %145 = sub nsw i64 %142, %143
  %146 = icmp eq i64 %143, 0
  br label %147

147:                                              ; preds = %158, %135
  %148 = phi i32 [ 0, %135 ], [ %161, %158 ]
  %149 = phi i32 [ 0, %135 ], [ %159, %158 ]
  %150 = phi i64* [ %133, %135 ], [ %160, %158 ]
  br i1 %136, label %151, label %158

151:                                              ; preds = %147, %177
  %152 = phi i64 [ %179, %177 ], [ 0, %147 ]
  %153 = phi i32 [ %178, %177 ], [ %149, %147 ]
  br i1 %137, label %154, label %177

154:                                              ; preds = %151
  %155 = mul nsw i64 %152, %140
  %156 = add nsw i64 %155, %152
  %157 = getelementptr inbounds i64, i64* %150, i64 %156
  br i1 %144, label %163, label %181

158:                                              ; preds = %177, %147
  %159 = phi i32 [ %149, %147 ], [ %178, %177 ]
  %160 = getelementptr inbounds i64, i64* %150, i64 %139
  %161 = add nuw nsw i32 %148, 1
  %162 = icmp eq i32 %161, %101
  br i1 %162, label %594, label %147

163:                                              ; preds = %617, %154
  %164 = phi i32 [ undef, %154 ], [ %618, %617 ]
  %165 = phi i64 [ 0, %154 ], [ %619, %617 ]
  %166 = phi i32 [ %153, %154 ], [ %618, %617 ]
  br i1 %146, label %177, label %167

167:                                              ; preds = %163
  %168 = icmp eq i64 %152, %165
  br i1 %168, label %172, label %169

169:                                              ; preds = %167
  %170 = add nsw i64 %165, %155
  %171 = getelementptr inbounds i64, i64* %150, i64 %170
  store i64 0, i64* %171, align 8
  br label %177

172:                                              ; preds = %167
  %173 = sext i32 %166 to i64
  %174 = getelementptr inbounds i64, i64* %126, i64 %173
  %175 = load i64, i64* %174, align 8
  store i64 %175, i64* %157, align 8
  %176 = add nsw i32 %166, 1
  br label %177

177:                                              ; preds = %163, %169, %172, %151
  %178 = phi i32 [ %153, %151 ], [ %164, %163 ], [ %176, %172 ], [ %166, %169 ]
  %179 = add nuw nsw i64 %152, 1
  %180 = icmp eq i64 %179, %141
  br i1 %180, label %158, label %151

181:                                              ; preds = %154, %617
  %182 = phi i64 [ %619, %617 ], [ 0, %154 ]
  %183 = phi i32 [ %618, %617 ], [ %153, %154 ]
  %184 = phi i64 [ %620, %617 ], [ %145, %154 ]
  %185 = icmp eq i64 %152, %182
  br i1 %185, label %186, label %191

186:                                              ; preds = %181
  %187 = sext i32 %183 to i64
  %188 = getelementptr inbounds i64, i64* %126, i64 %187
  %189 = load i64, i64* %188, align 8
  store i64 %189, i64* %157, align 8
  %190 = add nsw i32 %183, 1
  br label %194

191:                                              ; preds = %181
  %192 = add nsw i64 %182, %155
  %193 = getelementptr inbounds i64, i64* %150, i64 %192
  store i64 0, i64* %193, align 8
  br label %194

194:                                              ; preds = %191, %186
  %195 = phi i32 [ %190, %186 ], [ %183, %191 ]
  %196 = or i64 %182, 1
  %197 = icmp eq i64 %152, %196
  br i1 %197, label %612, label %609

198:                                              ; preds = %100
  %199 = icmp eq %struct.TfLiteTensor* %0, null
  br i1 %199, label %203, label %200

200:                                              ; preds = %198
  %201 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1, i32 0
  %202 = load i32*, i32** %201, align 8
  br label %203

203:                                              ; preds = %200, %198
  %204 = phi i32* [ %202, %200 ], [ null, %198 ]
  %205 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %205, label %209, label %206

206:                                              ; preds = %203
  %207 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1, i32 0
  %208 = load i32*, i32** %207, align 8
  br label %209

209:                                              ; preds = %206, %203
  %210 = phi i32* [ %208, %206 ], [ null, %203 ]
  %211 = icmp sgt i32 %101, 0
  br i1 %211, label %212, label %594

212:                                              ; preds = %209
  %213 = icmp sgt i32 %104, 0
  %214 = icmp sgt i32 %108, 0
  %215 = mul nsw i32 %108, %104
  %216 = sext i32 %215 to i64
  %217 = sext i32 %108 to i64
  %218 = zext i32 %104 to i64
  %219 = zext i32 %108 to i64
  %220 = and i64 %219, 1
  %221 = icmp eq i32 %108, 1
  %222 = sub nsw i64 %219, %220
  %223 = icmp eq i64 %220, 0
  br label %224

224:                                              ; preds = %235, %212
  %225 = phi i32 [ 0, %212 ], [ %238, %235 ]
  %226 = phi i32 [ 0, %212 ], [ %236, %235 ]
  %227 = phi i32* [ %210, %212 ], [ %237, %235 ]
  br i1 %213, label %228, label %235

228:                                              ; preds = %224, %254
  %229 = phi i64 [ %256, %254 ], [ 0, %224 ]
  %230 = phi i32 [ %255, %254 ], [ %226, %224 ]
  br i1 %214, label %231, label %254

231:                                              ; preds = %228
  %232 = mul nsw i64 %229, %217
  %233 = add nsw i64 %232, %229
  %234 = getelementptr inbounds i32, i32* %227, i64 %233
  br i1 %221, label %240, label %258

235:                                              ; preds = %254, %224
  %236 = phi i32 [ %226, %224 ], [ %255, %254 ]
  %237 = getelementptr inbounds i32, i32* %227, i64 %216
  %238 = add nuw nsw i32 %225, 1
  %239 = icmp eq i32 %238, %101
  br i1 %239, label %594, label %224

240:                                              ; preds = %630, %231
  %241 = phi i32 [ undef, %231 ], [ %631, %630 ]
  %242 = phi i64 [ 0, %231 ], [ %632, %630 ]
  %243 = phi i32 [ %230, %231 ], [ %631, %630 ]
  br i1 %223, label %254, label %244

244:                                              ; preds = %240
  %245 = icmp eq i64 %229, %242
  br i1 %245, label %249, label %246

246:                                              ; preds = %244
  %247 = add nsw i64 %242, %232
  %248 = getelementptr inbounds i32, i32* %227, i64 %247
  store i32 0, i32* %248, align 4
  br label %254

249:                                              ; preds = %244
  %250 = sext i32 %243 to i64
  %251 = getelementptr inbounds i32, i32* %204, i64 %250
  %252 = load i32, i32* %251, align 4
  store i32 %252, i32* %234, align 4
  %253 = add nsw i32 %243, 1
  br label %254

254:                                              ; preds = %240, %246, %249, %228
  %255 = phi i32 [ %230, %228 ], [ %241, %240 ], [ %253, %249 ], [ %243, %246 ]
  %256 = add nuw nsw i64 %229, 1
  %257 = icmp eq i64 %256, %218
  br i1 %257, label %235, label %228

258:                                              ; preds = %231, %630
  %259 = phi i64 [ %632, %630 ], [ 0, %231 ]
  %260 = phi i32 [ %631, %630 ], [ %230, %231 ]
  %261 = phi i64 [ %633, %630 ], [ %222, %231 ]
  %262 = icmp eq i64 %229, %259
  br i1 %262, label %263, label %268

263:                                              ; preds = %258
  %264 = sext i32 %260 to i64
  %265 = getelementptr inbounds i32, i32* %204, i64 %264
  %266 = load i32, i32* %265, align 4
  store i32 %266, i32* %234, align 4
  %267 = add nsw i32 %260, 1
  br label %271

268:                                              ; preds = %258
  %269 = add nsw i64 %259, %232
  %270 = getelementptr inbounds i32, i32* %227, i64 %269
  store i32 0, i32* %270, align 4
  br label %271

271:                                              ; preds = %268, %263
  %272 = phi i32 [ %267, %263 ], [ %260, %268 ]
  %273 = or i64 %259, 1
  %274 = icmp eq i64 %229, %273
  br i1 %274, label %625, label %622

275:                                              ; preds = %100
  %276 = icmp eq %struct.TfLiteTensor* %0, null
  br i1 %276, label %281, label %277

277:                                              ; preds = %275
  %278 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1
  %279 = bitcast %union.TfLitePtrUnion* %278 to i16**
  %280 = load i16*, i16** %279, align 8
  br label %281

281:                                              ; preds = %277, %275
  %282 = phi i16* [ %280, %277 ], [ null, %275 ]
  %283 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %283, label %288, label %284

284:                                              ; preds = %281
  %285 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %286 = bitcast %union.TfLitePtrUnion* %285 to i16**
  %287 = load i16*, i16** %286, align 8
  br label %288

288:                                              ; preds = %284, %281
  %289 = phi i16* [ %287, %284 ], [ null, %281 ]
  %290 = icmp sgt i32 %101, 0
  br i1 %290, label %291, label %594

291:                                              ; preds = %288
  %292 = icmp sgt i32 %104, 0
  %293 = icmp sgt i32 %108, 0
  %294 = mul nsw i32 %108, %104
  %295 = sext i32 %294 to i64
  %296 = sext i32 %108 to i64
  %297 = zext i32 %104 to i64
  %298 = zext i32 %108 to i64
  %299 = and i64 %298, 1
  %300 = icmp eq i32 %108, 1
  %301 = sub nsw i64 %298, %299
  %302 = icmp eq i64 %299, 0
  br label %303

303:                                              ; preds = %314, %291
  %304 = phi i32 [ 0, %291 ], [ %317, %314 ]
  %305 = phi i32 [ 0, %291 ], [ %315, %314 ]
  %306 = phi i16* [ %289, %291 ], [ %316, %314 ]
  br i1 %292, label %307, label %314

307:                                              ; preds = %303, %333
  %308 = phi i64 [ %335, %333 ], [ 0, %303 ]
  %309 = phi i32 [ %334, %333 ], [ %305, %303 ]
  br i1 %293, label %310, label %333

310:                                              ; preds = %307
  %311 = mul nsw i64 %308, %296
  %312 = add nsw i64 %311, %308
  %313 = getelementptr inbounds i16, i16* %306, i64 %312
  br i1 %300, label %319, label %337

314:                                              ; preds = %333, %303
  %315 = phi i32 [ %305, %303 ], [ %334, %333 ]
  %316 = getelementptr inbounds i16, i16* %306, i64 %295
  %317 = add nuw nsw i32 %304, 1
  %318 = icmp eq i32 %317, %101
  br i1 %318, label %594, label %303

319:                                              ; preds = %643, %310
  %320 = phi i32 [ undef, %310 ], [ %644, %643 ]
  %321 = phi i64 [ 0, %310 ], [ %645, %643 ]
  %322 = phi i32 [ %309, %310 ], [ %644, %643 ]
  br i1 %302, label %333, label %323

323:                                              ; preds = %319
  %324 = icmp eq i64 %308, %321
  br i1 %324, label %328, label %325

325:                                              ; preds = %323
  %326 = add nsw i64 %321, %311
  %327 = getelementptr inbounds i16, i16* %306, i64 %326
  store i16 0, i16* %327, align 2
  br label %333

328:                                              ; preds = %323
  %329 = sext i32 %322 to i64
  %330 = getelementptr inbounds i16, i16* %282, i64 %329
  %331 = load i16, i16* %330, align 2
  store i16 %331, i16* %313, align 2
  %332 = add nsw i32 %322, 1
  br label %333

333:                                              ; preds = %319, %325, %328, %307
  %334 = phi i32 [ %309, %307 ], [ %320, %319 ], [ %332, %328 ], [ %322, %325 ]
  %335 = add nuw nsw i64 %308, 1
  %336 = icmp eq i64 %335, %297
  br i1 %336, label %314, label %307

337:                                              ; preds = %310, %643
  %338 = phi i64 [ %645, %643 ], [ 0, %310 ]
  %339 = phi i32 [ %644, %643 ], [ %309, %310 ]
  %340 = phi i64 [ %646, %643 ], [ %301, %310 ]
  %341 = icmp eq i64 %308, %338
  br i1 %341, label %342, label %347

342:                                              ; preds = %337
  %343 = sext i32 %339 to i64
  %344 = getelementptr inbounds i16, i16* %282, i64 %343
  %345 = load i16, i16* %344, align 2
  store i16 %345, i16* %313, align 2
  %346 = add nsw i32 %339, 1
  br label %350

347:                                              ; preds = %337
  %348 = add nsw i64 %338, %311
  %349 = getelementptr inbounds i16, i16* %306, i64 %348
  store i16 0, i16* %349, align 2
  br label %350

350:                                              ; preds = %347, %342
  %351 = phi i32 [ %346, %342 ], [ %339, %347 ]
  %352 = or i64 %338, 1
  %353 = icmp eq i64 %308, %352
  br i1 %353, label %638, label %635

354:                                              ; preds = %100
  %355 = icmp eq %struct.TfLiteTensor* %0, null
  br i1 %355, label %360, label %356

356:                                              ; preds = %354
  %357 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1
  %358 = bitcast %union.TfLitePtrUnion* %357 to i8**
  %359 = load i8*, i8** %358, align 8
  br label %360

360:                                              ; preds = %356, %354
  %361 = phi i8* [ %359, %356 ], [ null, %354 ]
  %362 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %362, label %367, label %363

363:                                              ; preds = %360
  %364 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %365 = bitcast %union.TfLitePtrUnion* %364 to i8**
  %366 = load i8*, i8** %365, align 8
  br label %367

367:                                              ; preds = %363, %360
  %368 = phi i8* [ %366, %363 ], [ null, %360 ]
  %369 = icmp sgt i32 %101, 0
  br i1 %369, label %370, label %594

370:                                              ; preds = %367
  %371 = icmp sgt i32 %104, 0
  %372 = icmp sgt i32 %108, 0
  %373 = mul nsw i32 %108, %104
  %374 = sext i32 %373 to i64
  %375 = sext i32 %108 to i64
  %376 = zext i32 %104 to i64
  %377 = zext i32 %108 to i64
  %378 = and i64 %377, 1
  %379 = icmp eq i32 %108, 1
  %380 = sub nsw i64 %377, %378
  %381 = icmp eq i64 %378, 0
  br label %382

382:                                              ; preds = %393, %370
  %383 = phi i32 [ 0, %370 ], [ %396, %393 ]
  %384 = phi i32 [ 0, %370 ], [ %394, %393 ]
  %385 = phi i8* [ %368, %370 ], [ %395, %393 ]
  br i1 %371, label %386, label %393

386:                                              ; preds = %382, %412
  %387 = phi i64 [ %414, %412 ], [ 0, %382 ]
  %388 = phi i32 [ %413, %412 ], [ %384, %382 ]
  br i1 %372, label %389, label %412

389:                                              ; preds = %386
  %390 = mul nsw i64 %387, %375
  %391 = add nsw i64 %390, %387
  %392 = getelementptr inbounds i8, i8* %385, i64 %391
  br i1 %379, label %398, label %416

393:                                              ; preds = %412, %382
  %394 = phi i32 [ %384, %382 ], [ %413, %412 ]
  %395 = getelementptr inbounds i8, i8* %385, i64 %374
  %396 = add nuw nsw i32 %383, 1
  %397 = icmp eq i32 %396, %101
  br i1 %397, label %594, label %382

398:                                              ; preds = %656, %389
  %399 = phi i32 [ undef, %389 ], [ %657, %656 ]
  %400 = phi i64 [ 0, %389 ], [ %658, %656 ]
  %401 = phi i32 [ %388, %389 ], [ %657, %656 ]
  br i1 %381, label %412, label %402

402:                                              ; preds = %398
  %403 = icmp eq i64 %387, %400
  br i1 %403, label %407, label %404

404:                                              ; preds = %402
  %405 = add nsw i64 %400, %390
  %406 = getelementptr inbounds i8, i8* %385, i64 %405
  store i8 0, i8* %406, align 1
  br label %412

407:                                              ; preds = %402
  %408 = sext i32 %401 to i64
  %409 = getelementptr inbounds i8, i8* %361, i64 %408
  %410 = load i8, i8* %409, align 1
  store i8 %410, i8* %392, align 1
  %411 = add nsw i32 %401, 1
  br label %412

412:                                              ; preds = %398, %404, %407, %386
  %413 = phi i32 [ %388, %386 ], [ %399, %398 ], [ %411, %407 ], [ %401, %404 ]
  %414 = add nuw nsw i64 %387, 1
  %415 = icmp eq i64 %414, %376
  br i1 %415, label %393, label %386

416:                                              ; preds = %389, %656
  %417 = phi i64 [ %658, %656 ], [ 0, %389 ]
  %418 = phi i32 [ %657, %656 ], [ %388, %389 ]
  %419 = phi i64 [ %659, %656 ], [ %380, %389 ]
  %420 = icmp eq i64 %387, %417
  br i1 %420, label %421, label %426

421:                                              ; preds = %416
  %422 = sext i32 %418 to i64
  %423 = getelementptr inbounds i8, i8* %361, i64 %422
  %424 = load i8, i8* %423, align 1
  store i8 %424, i8* %392, align 1
  %425 = add nsw i32 %418, 1
  br label %429

426:                                              ; preds = %416
  %427 = add nsw i64 %417, %390
  %428 = getelementptr inbounds i8, i8* %385, i64 %427
  store i8 0, i8* %428, align 1
  br label %429

429:                                              ; preds = %426, %421
  %430 = phi i32 [ %425, %421 ], [ %418, %426 ]
  %431 = or i64 %417, 1
  %432 = icmp eq i64 %387, %431
  br i1 %432, label %651, label %648

433:                                              ; preds = %100
  %434 = icmp eq %struct.TfLiteTensor* %0, null
  br i1 %434, label %439, label %435

435:                                              ; preds = %433
  %436 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1
  %437 = bitcast %union.TfLitePtrUnion* %436 to i8**
  %438 = load i8*, i8** %437, align 8
  br label %439

439:                                              ; preds = %435, %433
  %440 = phi i8* [ %438, %435 ], [ null, %433 ]
  %441 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %441, label %446, label %442

442:                                              ; preds = %439
  %443 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %444 = bitcast %union.TfLitePtrUnion* %443 to i8**
  %445 = load i8*, i8** %444, align 8
  br label %446

446:                                              ; preds = %442, %439
  %447 = phi i8* [ %445, %442 ], [ null, %439 ]
  %448 = icmp sgt i32 %101, 0
  br i1 %448, label %449, label %594

449:                                              ; preds = %446
  %450 = icmp sgt i32 %104, 0
  %451 = icmp sgt i32 %108, 0
  %452 = mul nsw i32 %108, %104
  %453 = sext i32 %452 to i64
  %454 = sext i32 %108 to i64
  %455 = zext i32 %104 to i64
  %456 = zext i32 %108 to i64
  %457 = and i64 %456, 1
  %458 = icmp eq i32 %108, 1
  %459 = sub nsw i64 %456, %457
  %460 = icmp eq i64 %457, 0
  br label %461

461:                                              ; preds = %472, %449
  %462 = phi i32 [ 0, %449 ], [ %475, %472 ]
  %463 = phi i32 [ 0, %449 ], [ %473, %472 ]
  %464 = phi i8* [ %447, %449 ], [ %474, %472 ]
  br i1 %450, label %465, label %472

465:                                              ; preds = %461, %491
  %466 = phi i64 [ %493, %491 ], [ 0, %461 ]
  %467 = phi i32 [ %492, %491 ], [ %463, %461 ]
  br i1 %451, label %468, label %491

468:                                              ; preds = %465
  %469 = mul nsw i64 %466, %454
  %470 = add nsw i64 %469, %466
  %471 = getelementptr inbounds i8, i8* %464, i64 %470
  br i1 %458, label %477, label %495

472:                                              ; preds = %491, %461
  %473 = phi i32 [ %463, %461 ], [ %492, %491 ]
  %474 = getelementptr inbounds i8, i8* %464, i64 %453
  %475 = add nuw nsw i32 %462, 1
  %476 = icmp eq i32 %475, %101
  br i1 %476, label %594, label %461

477:                                              ; preds = %669, %468
  %478 = phi i32 [ undef, %468 ], [ %670, %669 ]
  %479 = phi i64 [ 0, %468 ], [ %671, %669 ]
  %480 = phi i32 [ %467, %468 ], [ %670, %669 ]
  br i1 %460, label %491, label %481

481:                                              ; preds = %477
  %482 = icmp eq i64 %466, %479
  br i1 %482, label %486, label %483

483:                                              ; preds = %481
  %484 = add nsw i64 %479, %469
  %485 = getelementptr inbounds i8, i8* %464, i64 %484
  store i8 0, i8* %485, align 1
  br label %491

486:                                              ; preds = %481
  %487 = sext i32 %480 to i64
  %488 = getelementptr inbounds i8, i8* %440, i64 %487
  %489 = load i8, i8* %488, align 1
  store i8 %489, i8* %471, align 1
  %490 = add nsw i32 %480, 1
  br label %491

491:                                              ; preds = %477, %483, %486, %465
  %492 = phi i32 [ %467, %465 ], [ %478, %477 ], [ %490, %486 ], [ %480, %483 ]
  %493 = add nuw nsw i64 %466, 1
  %494 = icmp eq i64 %493, %455
  br i1 %494, label %472, label %465

495:                                              ; preds = %468, %669
  %496 = phi i64 [ %671, %669 ], [ 0, %468 ]
  %497 = phi i32 [ %670, %669 ], [ %467, %468 ]
  %498 = phi i64 [ %672, %669 ], [ %459, %468 ]
  %499 = icmp eq i64 %466, %496
  br i1 %499, label %500, label %505

500:                                              ; preds = %495
  %501 = sext i32 %497 to i64
  %502 = getelementptr inbounds i8, i8* %440, i64 %501
  %503 = load i8, i8* %502, align 1
  store i8 %503, i8* %471, align 1
  %504 = add nsw i32 %497, 1
  br label %508

505:                                              ; preds = %495
  %506 = add nsw i64 %496, %469
  %507 = getelementptr inbounds i8, i8* %464, i64 %506
  store i8 0, i8* %507, align 1
  br label %508

508:                                              ; preds = %505, %500
  %509 = phi i32 [ %504, %500 ], [ %497, %505 ]
  %510 = or i64 %496, 1
  %511 = icmp eq i64 %466, %510
  br i1 %511, label %664, label %661

512:                                              ; preds = %100
  %513 = icmp eq %struct.TfLiteTensor* %0, null
  br i1 %513, label %518, label %514

514:                                              ; preds = %512
  %515 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %0, i64 0, i32 1
  %516 = bitcast %union.TfLitePtrUnion* %515 to float**
  %517 = load float*, float** %516, align 8
  br label %518

518:                                              ; preds = %514, %512
  %519 = phi float* [ %517, %514 ], [ null, %512 ]
  %520 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %520, label %525, label %521

521:                                              ; preds = %518
  %522 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %523 = bitcast %union.TfLitePtrUnion* %522 to float**
  %524 = load float*, float** %523, align 8
  br label %525

525:                                              ; preds = %521, %518
  %526 = phi float* [ %524, %521 ], [ null, %518 ]
  %527 = icmp sgt i32 %101, 0
  br i1 %527, label %528, label %594

528:                                              ; preds = %525
  %529 = icmp sgt i32 %104, 0
  %530 = icmp sgt i32 %108, 0
  %531 = mul nsw i32 %108, %104
  %532 = sext i32 %531 to i64
  %533 = sext i32 %108 to i64
  %534 = zext i32 %104 to i64
  %535 = zext i32 %108 to i64
  %536 = and i64 %535, 1
  %537 = icmp eq i32 %108, 1
  %538 = sub nsw i64 %535, %536
  %539 = icmp eq i64 %536, 0
  br label %540

540:                                              ; preds = %552, %528
  %541 = phi i32 [ 0, %528 ], [ %555, %552 ]
  %542 = phi i32 [ 0, %528 ], [ %553, %552 ]
  %543 = phi float* [ %526, %528 ], [ %554, %552 ]
  br i1 %529, label %544, label %552

544:                                              ; preds = %540, %572
  %545 = phi i64 [ %574, %572 ], [ 0, %540 ]
  %546 = phi i32 [ %573, %572 ], [ %542, %540 ]
  br i1 %530, label %547, label %572

547:                                              ; preds = %544
  %548 = mul nsw i64 %545, %533
  %549 = add nsw i64 %548, %545
  %550 = getelementptr inbounds float, float* %543, i64 %549
  %551 = bitcast float* %550 to i32*
  br i1 %537, label %557, label %576

552:                                              ; preds = %572, %540
  %553 = phi i32 [ %542, %540 ], [ %573, %572 ]
  %554 = getelementptr inbounds float, float* %543, i64 %532
  %555 = add nuw nsw i32 %541, 1
  %556 = icmp eq i32 %555, %101
  br i1 %556, label %594, label %540

557:                                              ; preds = %604, %547
  %558 = phi i32 [ undef, %547 ], [ %605, %604 ]
  %559 = phi i64 [ 0, %547 ], [ %606, %604 ]
  %560 = phi i32 [ %546, %547 ], [ %605, %604 ]
  br i1 %539, label %572, label %561

561:                                              ; preds = %557
  %562 = icmp eq i64 %545, %559
  br i1 %562, label %566, label %563

563:                                              ; preds = %561
  %564 = add nsw i64 %559, %548
  %565 = getelementptr inbounds float, float* %543, i64 %564
  store float 0.000000e+00, float* %565, align 4
  br label %572

566:                                              ; preds = %561
  %567 = sext i32 %560 to i64
  %568 = getelementptr inbounds float, float* %519, i64 %567
  %569 = bitcast float* %568 to i32*
  %570 = load i32, i32* %569, align 4
  store i32 %570, i32* %551, align 4
  %571 = add nsw i32 %560, 1
  br label %572

572:                                              ; preds = %557, %563, %566, %544
  %573 = phi i32 [ %546, %544 ], [ %558, %557 ], [ %571, %566 ], [ %560, %563 ]
  %574 = add nuw nsw i64 %545, 1
  %575 = icmp eq i64 %574, %534
  br i1 %575, label %552, label %544

576:                                              ; preds = %547, %604
  %577 = phi i64 [ %606, %604 ], [ 0, %547 ]
  %578 = phi i32 [ %605, %604 ], [ %546, %547 ]
  %579 = phi i64 [ %607, %604 ], [ %538, %547 ]
  %580 = icmp eq i64 %545, %577
  br i1 %580, label %581, label %587

581:                                              ; preds = %576
  %582 = sext i32 %578 to i64
  %583 = getelementptr inbounds float, float* %519, i64 %582
  %584 = bitcast float* %583 to i32*
  %585 = load i32, i32* %584, align 4
  store i32 %585, i32* %551, align 4
  %586 = add nsw i32 %578, 1
  br label %590

587:                                              ; preds = %576
  %588 = add nsw i64 %577, %548
  %589 = getelementptr inbounds float, float* %543, i64 %588
  store float 0.000000e+00, float* %589, align 4
  br label %590

590:                                              ; preds = %587, %581
  %591 = phi i32 [ %586, %581 ], [ %578, %587 ]
  %592 = or i64 %577, 1
  %593 = icmp eq i64 %545, %592
  br i1 %593, label %598, label %595

594:                                              ; preds = %472, %393, %314, %235, %158, %552, %525, %446, %367, %288, %209, %132
  ret void

595:                                              ; preds = %590
  %596 = add nsw i64 %592, %548
  %597 = getelementptr inbounds float, float* %543, i64 %596
  store float 0.000000e+00, float* %597, align 4
  br label %604

598:                                              ; preds = %590
  %599 = sext i32 %591 to i64
  %600 = getelementptr inbounds float, float* %519, i64 %599
  %601 = bitcast float* %600 to i32*
  %602 = load i32, i32* %601, align 4
  store i32 %602, i32* %551, align 4
  %603 = add nsw i32 %591, 1
  br label %604

604:                                              ; preds = %598, %595
  %605 = phi i32 [ %603, %598 ], [ %591, %595 ]
  %606 = add nuw nsw i64 %577, 2
  %607 = add i64 %579, -2
  %608 = icmp eq i64 %607, 0
  br i1 %608, label %557, label %576

609:                                              ; preds = %194
  %610 = add nsw i64 %196, %155
  %611 = getelementptr inbounds i64, i64* %150, i64 %610
  store i64 0, i64* %611, align 8
  br label %617

612:                                              ; preds = %194
  %613 = sext i32 %195 to i64
  %614 = getelementptr inbounds i64, i64* %126, i64 %613
  %615 = load i64, i64* %614, align 8
  store i64 %615, i64* %157, align 8
  %616 = add nsw i32 %195, 1
  br label %617

617:                                              ; preds = %612, %609
  %618 = phi i32 [ %616, %612 ], [ %195, %609 ]
  %619 = add nuw nsw i64 %182, 2
  %620 = add i64 %184, -2
  %621 = icmp eq i64 %620, 0
  br i1 %621, label %163, label %181

622:                                              ; preds = %271
  %623 = add nsw i64 %273, %232
  %624 = getelementptr inbounds i32, i32* %227, i64 %623
  store i32 0, i32* %624, align 4
  br label %630

625:                                              ; preds = %271
  %626 = sext i32 %272 to i64
  %627 = getelementptr inbounds i32, i32* %204, i64 %626
  %628 = load i32, i32* %627, align 4
  store i32 %628, i32* %234, align 4
  %629 = add nsw i32 %272, 1
  br label %630

630:                                              ; preds = %625, %622
  %631 = phi i32 [ %629, %625 ], [ %272, %622 ]
  %632 = add nuw nsw i64 %259, 2
  %633 = add i64 %261, -2
  %634 = icmp eq i64 %633, 0
  br i1 %634, label %240, label %258

635:                                              ; preds = %350
  %636 = add nsw i64 %352, %311
  %637 = getelementptr inbounds i16, i16* %306, i64 %636
  store i16 0, i16* %637, align 2
  br label %643

638:                                              ; preds = %350
  %639 = sext i32 %351 to i64
  %640 = getelementptr inbounds i16, i16* %282, i64 %639
  %641 = load i16, i16* %640, align 2
  store i16 %641, i16* %313, align 2
  %642 = add nsw i32 %351, 1
  br label %643

643:                                              ; preds = %638, %635
  %644 = phi i32 [ %642, %638 ], [ %351, %635 ]
  %645 = add nuw nsw i64 %338, 2
  %646 = add i64 %340, -2
  %647 = icmp eq i64 %646, 0
  br i1 %647, label %319, label %337

648:                                              ; preds = %429
  %649 = add nsw i64 %431, %390
  %650 = getelementptr inbounds i8, i8* %385, i64 %649
  store i8 0, i8* %650, align 1
  br label %656

651:                                              ; preds = %429
  %652 = sext i32 %430 to i64
  %653 = getelementptr inbounds i8, i8* %361, i64 %652
  %654 = load i8, i8* %653, align 1
  store i8 %654, i8* %392, align 1
  %655 = add nsw i32 %430, 1
  br label %656

656:                                              ; preds = %651, %648
  %657 = phi i32 [ %655, %651 ], [ %430, %648 ]
  %658 = add nuw nsw i64 %417, 2
  %659 = add i64 %419, -2
  %660 = icmp eq i64 %659, 0
  br i1 %660, label %398, label %416

661:                                              ; preds = %508
  %662 = add nsw i64 %510, %469
  %663 = getelementptr inbounds i8, i8* %464, i64 %662
  store i8 0, i8* %663, align 1
  br label %669

664:                                              ; preds = %508
  %665 = sext i32 %509 to i64
  %666 = getelementptr inbounds i8, i8* %440, i64 %665
  %667 = load i8, i8* %666, align 1
  store i8 %667, i8* %471, align 1
  %668 = add nsw i32 %509, 1
  br label %669

669:                                              ; preds = %664, %661
  %670 = phi i32 [ %668, %664 ], [ %509, %661 ]
  %671 = add nuw nsw i64 %496, 2
  %672 = add i64 %498, -2
  %673 = icmp eq i64 %672, 0
  br i1 %673, label %477, label %495
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin11matrix_diag4EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext* nocapture readonly, %struct.TfLiteNode* nocapture readonly) #2 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %10 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 %11
  br label %13

13:                                               ; preds = %2, %8
  %14 = phi %struct.TfLiteTensor* [ %12, %8 ], [ null, %2 ]
  %15 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %16 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %15, align 8
  %17 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 1, i64 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %22 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %21, align 8
  %23 = sext i32 %18 to i64
  %24 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 %23
  br label %25

25:                                               ; preds = %13, %20
  %26 = phi %struct.TfLiteTensor* [ %24, %20 ], [ null, %13 ]
  tail call void @_ZN6tflite3ops7builtin11matrix_diag14FillDiagHelperEPK12TfLiteTensorPS3_(%struct.TfLiteTensor* %26, %struct.TfLiteTensor* %14)
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin20Register_MATRIX_DIAGEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin20Register_MATRIX_DIAGEvE1r to %struct.TfLiteRegistration*)
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !10}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !16, !10}
!16 = !{!"llvm.loop.unroll.runtime.disable"}
