; ModuleID = '../../third_party/skia/src/utils/SkTextUtils.cpp'
source_filename = "../../third_party/skia/src/utils/SkTextUtils.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp, [384 x i64], %class.sk_sp.0, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.2" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.0 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%class.SkFont = type <{ %class.sk_sp.8, float, float, float, i8, i8, i8, i8 }>
%class.sk_sp.8 = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkFontStyle = type { i32 }
%class.SkOnce = type { %"struct.std::__1::atomic.10" }
%"struct.std::__1::atomic.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i8 }
%class.SkPaint = type <{ %class.sk_sp.15, %class.sk_sp.16, %class.sk_sp.17, %class.sk_sp.18, %class.sk_sp.19, %struct.SkRGBA4f, float, float, %union.anon, [4 x i8] }>
%class.sk_sp.15 = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.16 = type { %class.SkShader* }
%class.SkShader = type opaque
%class.sk_sp.17 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type opaque
%class.sk_sp.18 = type { %class.SkColorFilter* }
%class.SkColorFilter = type opaque
%class.sk_sp.19 = type { %class.SkImageFilter* }
%class.SkImageFilter = type opaque
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon = type { %struct.anon }
%struct.anon = type { i32 }
%class.sk_sp.20 = type { %class.SkTextBlob* }
%class.SkTextBlob = type { %class.SkNVRefCnt, %struct.SkRect, i32, %"struct.std::__1::atomic.21" }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic.21" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__atomic_base.23" }
%"struct.std::__1::__atomic_base.23" = type { %"struct.std::__1::__cxx_atomic_impl.24" }
%"struct.std::__1::__cxx_atomic_impl.24" = type { %"struct.std::__1::__cxx_atomic_base_impl.25" }
%"struct.std::__1::__cxx_atomic_base_impl.25" = type { i32 }
%class.SkPath = type <{ %class.sk_sp.26, i32, %"struct.std::__1::atomic.10", %"struct.std::__1::atomic.10", i8, i8 }>
%class.sk_sp.26 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt.27, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.28, %class.SkTDArray.29, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt.27 = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.28 = type { i8*, i32, i32 }
%class.SkTDArray.29 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.30 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.30 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.31", [3 x i8] }
%"struct.std::__1::atomic.31" = type { %"struct.std::__1::__atomic_base.32" }
%"struct.std::__1::__atomic_base.32" = type { %"struct.std::__1::__cxx_atomic_impl.33" }
%"struct.std::__1::__cxx_atomic_impl.33" = type { %"struct.std::__1::__cxx_atomic_base_impl.34" }
%"struct.std::__1::__cxx_atomic_base_impl.34" = type { i8 }
%class.SkAutoToGlyphs = type <{ %class.SkAutoSTArray, i16*, i32, [4 x i8] }>
%class.SkAutoSTArray = type { i32, i16*, [64 x i8] }
%struct.Rec = type { %class.SkPath*, %struct.SkPoint* }
%class.SkMatrix = type { [9 x float], i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkTextUtils4DrawEP8SkCanvasPKvm14SkTextEncodingffRK6SkFontRK7SkPaintNS_5AlignE(%class.SkCanvas*, i8*, i64, i32, float, float, %class.SkFont* dereferenceable(24), %class.SkPaint* dereferenceable(72), i32) local_unnamed_addr #0 align 2 {
  %10 = alloca %class.sk_sp.20, align 8
  %11 = icmp eq i32 %8, 0
  br i1 %11, label %18, label %12

12:                                               ; preds = %9
  %13 = tail call float @_ZNK6SkFont11measureTextEPKvm14SkTextEncodingP6SkRectPK7SkPaint(%class.SkFont* %6, i8* %1, i64 %2, i32 %3, %struct.SkRect* null, %class.SkPaint* null) #9
  %14 = icmp eq i32 %8, 1
  %15 = fmul float %13, 5.000000e-01
  %16 = select i1 %14, float %15, float %13
  %17 = fsub float %4, %16
  br label %18

18:                                               ; preds = %9, %12
  %19 = phi float [ %17, %12 ], [ %4, %9 ]
  %20 = bitcast %class.sk_sp.20* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN10SkTextBlob12MakeFromTextEPKvmRK6SkFont14SkTextEncoding(%class.sk_sp.20* nonnull sret %10, i8* %1, i64 %2, %class.SkFont* dereferenceable(24) %6, i32 %3) #9
  %21 = getelementptr inbounds %class.sk_sp.20, %class.sk_sp.20* %10, i64 0, i32 0
  %22 = load %class.SkTextBlob*, %class.SkTextBlob** %21, align 8
  call void @_ZN8SkCanvas12drawTextBlobEPK10SkTextBlobffRK7SkPaint(%class.SkCanvas* %0, %class.SkTextBlob* %22, float %19, float %5, %class.SkPaint* dereferenceable(72) %7) #9
  %23 = load %class.SkTextBlob*, %class.SkTextBlob** %21, align 8
  %24 = icmp eq %class.SkTextBlob* %23, null
  br i1 %24, label %31, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %class.SkTextBlob, %class.SkTextBlob* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = atomicrmw add i32* %26, i32 -1 acq_rel
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %31

29:                                               ; preds = %25
  call void @_ZN10SkTextBlobD1Ev(%class.SkTextBlob* nonnull %23) #9
  %30 = bitcast %class.SkTextBlob* %23 to i8*
  call void @_ZN10SkTextBlobdlEPv(i8* nonnull %30) #9
  br label %31

31:                                               ; preds = %18, %25, %29
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN10SkTextBlob12MakeFromTextEPKvmRK6SkFont14SkTextEncoding(%class.sk_sp.20* sret, i8*, i64, %class.SkFont* dereferenceable(24), i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11SkTextUtils7GetPathEPKvm14SkTextEncodingffRK6SkFontP6SkPath(i8*, i64, i32, float, float, %class.SkFont* dereferenceable(24), %class.SkPath*) local_unnamed_addr #3 align 2 {
  %8 = alloca %class.SkAutoToGlyphs, align 8
  %9 = alloca %struct.Rec, align 8
  %10 = bitcast %class.SkAutoToGlyphs* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %10) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 96, i1 false)
  %11 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %8, i64 0, i32 0, i32 1
  store i16* null, i16** %11, align 8
  %12 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %8, i64 0, i32 0, i32 0
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %2, 3
  %14 = icmp eq i64 %1, 0
  %15 = or i1 %14, %13
  br i1 %15, label %16, label %23

16:                                               ; preds = %7
  %17 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %8, i64 0, i32 1
  %18 = bitcast i16** %17 to i8**
  store i8* %0, i8** %18, align 8
  %19 = lshr i64 %1, 1
  %20 = trunc i64 %19 to i32
  %21 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %8, i64 0, i32 2
  store i32 %20, i32* %21, align 8
  %22 = bitcast i8* %0 to i16*
  br label %50

23:                                               ; preds = %7
  %24 = tail call i32 @_ZNK6SkFont12textToGlyphsEPKvm14SkTextEncodingPti(%class.SkFont* %5, i8* %0, i64 %1, i32 %2, i16* null, i32 0) #9
  %25 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %8, i64 0, i32 2
  %26 = icmp sgt i32 %24, 0
  %27 = select i1 %26, i32 %24, i32 0
  store i32 %27, i32* %25, align 8
  %28 = icmp slt i32 %24, 1
  br i1 %28, label %40, label %29

29:                                               ; preds = %23
  %30 = icmp sgt i32 %27, 32
  br i1 %30, label %31, label %34

31:                                               ; preds = %29
  %32 = zext i32 %27 to i64
  %33 = tail call i8* @_Z15sk_malloc_throwmm(i64 %32, i64 2) #9
  br label %36

34:                                               ; preds = %29
  %35 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %8, i64 0, i32 0, i32 2, i64 0
  br label %36

36:                                               ; preds = %34, %31
  %37 = phi i8* [ %35, %34 ], [ %33, %31 ]
  %38 = bitcast i16** %11 to i8**
  store i8* %37, i8** %38, align 8
  %39 = bitcast i8* %37 to i16*
  store i32 %27, i32* %12, align 8
  br label %40

40:                                               ; preds = %36, %23
  %41 = phi i32 [ 0, %23 ], [ %27, %36 ]
  %42 = phi i16* [ null, %23 ], [ %39, %36 ]
  %43 = call i32 @_ZNK6SkFont12textToGlyphsEPKvm14SkTextEncodingPti(%class.SkFont* %5, i8* %0, i64 %1, i32 %2, i16* %42, i32 %41) #9
  %44 = bitcast i16** %11 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %8, i64 0, i32 1
  %47 = bitcast i16** %46 to i64*
  store i64 %45, i64* %47, align 8
  %48 = load i32, i32* %25, align 8
  %49 = inttoptr i64 %45 to i16*
  br label %50

50:                                               ; preds = %16, %40
  %51 = phi i16* [ %22, %16 ], [ %49, %40 ]
  %52 = phi i32 [ %20, %16 ], [ %48, %40 ]
  %53 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %8, i64 0, i32 2
  %54 = icmp eq i32 %52, 0
  br i1 %54, label %63, label %55

55:                                               ; preds = %50
  %56 = sext i32 %52 to i64
  %57 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %56, i64 8) #9
  %58 = extractvalue { i64, i1 } %57, 1
  %59 = extractvalue { i64, i1 } %57, 0
  %60 = select i1 %58, i64 -1, i64 %59
  %61 = call i8* @_Znam(i64 %60) #10
  %62 = bitcast i8* %61 to %struct.SkPoint*
  br label %63

63:                                               ; preds = %50, %55
  %64 = phi i8* [ null, %50 ], [ %61, %55 ]
  %65 = phi %struct.SkPoint* [ null, %50 ], [ %62, %55 ]
  %66 = getelementptr inbounds %class.SkAutoToGlyphs, %class.SkAutoToGlyphs* %8, i64 0, i32 1
  %67 = insertelement <2 x float> undef, float %3, i32 0
  %68 = insertelement <2 x float> %67, float %4, i32 1
  call void @_ZNK6SkFont6getPosEPKtiP7SkPointS2_(%class.SkFont* %5, i16* %51, i32 %52, %struct.SkPoint* %65, <2 x float> %68) #9
  %69 = bitcast %struct.Rec* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %69) #9
  %70 = getelementptr inbounds %struct.Rec, %struct.Rec* %9, i64 0, i32 0
  %71 = getelementptr inbounds %struct.Rec, %struct.Rec* %9, i64 0, i32 1
  store %class.SkPath* %6, %class.SkPath** %70, align 8
  %72 = bitcast %struct.SkPoint** %71 to i8**
  store i8* %64, i8** %72, align 8
  %73 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %6) #9
  %74 = load i16*, i16** %66, align 8
  %75 = load i32, i32* %53, align 8
  call void @_ZNK6SkFont8getPathsEPKtiPFvPK6SkPathRK8SkMatrixPvES8_(%class.SkFont* %5, i16* %74, i32 %75, void (%class.SkPath*, %class.SkMatrix*, i8*)* nonnull @"_ZZN11SkTextUtils7GetPathEPKvm14SkTextEncodingffRK6SkFontP6SkPathEN3$_08__invokeEPKS6_RK8SkMatrixPv", i8* nonnull %69) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %69) #9
  %76 = icmp eq %struct.SkPoint* %65, null
  br i1 %76, label %78, label %77

77:                                               ; preds = %63
  call void @_ZdaPv(i8* %64) #10
  br label %78

78:                                               ; preds = %63, %77
  %79 = load i16*, i16** %11, align 8
  %80 = load i32, i32* %12, align 8
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i16, i16* %79, i64 %81
  br label %83

83:                                               ; preds = %83, %78
  %84 = phi i16* [ %82, %78 ], [ %86, %83 ]
  %85 = icmp ugt i16* %84, %79
  %86 = getelementptr inbounds i16, i16* %84, i64 -1
  br i1 %85, label %83, label %87

87:                                               ; preds = %83
  %88 = bitcast i16* %79 to i8*
  %89 = icmp eq i32 %80, 0
  br i1 %89, label %94, label %90

90:                                               ; preds = %87
  %91 = icmp sgt i32 %80, 32
  br i1 %91, label %92, label %93

92:                                               ; preds = %90
  call void @_Z7sk_freePv(i8* %88) #9
  br label %93

93:                                               ; preds = %92, %90
  store i16* null, i16** %11, align 8
  store i32 0, i32* %12, align 8
  br label %94

94:                                               ; preds = %87, %93
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %10) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZNK6SkFont6getPosEPKtiP7SkPointS2_(%class.SkFont*, i16*, i32, %struct.SkPoint*, <2 x float>) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath*) local_unnamed_addr #2

declare void @_ZNK6SkFont8getPathsEPKtiPFvPK6SkPathRK8SkMatrixPvES8_(%class.SkFont*, i16*, i32, void (%class.SkPath*, %class.SkMatrix*, i8*)*, i8*) local_unnamed_addr #2

declare float @_ZNK6SkFont11measureTextEPKvm14SkTextEncodingP6SkRectPK7SkPaint(%class.SkFont*, i8*, i64, i32, %struct.SkRect*, %class.SkPaint*) local_unnamed_addr #2

declare void @_ZN8SkCanvas12drawTextBlobEPK10SkTextBlobffRK7SkPaint(%class.SkCanvas*, %class.SkTextBlob*, float, float, %class.SkPaint* dereferenceable(72)) local_unnamed_addr #2

declare i32 @_ZNK6SkFont12textToGlyphsEPKvm14SkTextEncodingPti(%class.SkFont*, i8*, i64, i32, i16*, i32) local_unnamed_addr #2

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @"_ZZN11SkTextUtils7GetPathEPKvm14SkTextEncodingffRK6SkFontP6SkPathEN3$_08__invokeEPKS6_RK8SkMatrixPv"(%class.SkPath*, %class.SkMatrix* nocapture readonly dereferenceable(40), i8* nocapture) #4 align 2 {
  %4 = alloca %class.SkMatrix, align 4
  %5 = icmp eq %class.SkPath* %0, null
  br i1 %5, label %20, label %6

6:                                                ; preds = %3
  %7 = bitcast %class.SkMatrix* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #9
  %8 = bitcast %class.SkMatrix* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %7, i8* align 4 %8, i64 40, i1 false) #9
  %9 = getelementptr inbounds i8, i8* %2, i64 8
  %10 = bitcast i8* %9 to %struct.SkPoint**
  %11 = load %struct.SkPoint*, %struct.SkPoint** %10, align 8
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %11, i64 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %11, i64 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix13postTranslateEff(%class.SkMatrix* nonnull %4, float %13, float %15) #9
  %17 = bitcast i8* %2 to %class.SkPath**
  %18 = load %class.SkPath*, %class.SkPath** %17, align 8
  %19 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath7addPathERKS_RK8SkMatrixNS_11AddPathModeE(%class.SkPath* %18, %class.SkPath* nonnull dereferenceable(16) %0, %class.SkMatrix* nonnull dereferenceable(40) %4, i32 0) #9
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #9
  br label %20

20:                                               ; preds = %3, %6
  %21 = getelementptr inbounds i8, i8* %2, i64 8
  %22 = bitcast i8* %21 to %struct.SkPoint**
  %23 = load %struct.SkPoint*, %struct.SkPoint** %22, align 8
  %24 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %23, i64 1
  store %struct.SkPoint* %24, %struct.SkPoint** %22, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix13postTranslateEff(%class.SkMatrix*, float, float) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath7addPathERKS_RK8SkMatrixNS_11AddPathModeE(%class.SkPath*, %class.SkPath* dereferenceable(16), %class.SkMatrix* dereferenceable(40), i32) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN10SkTextBlobD1Ev(%class.SkTextBlob*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN10SkTextBlobdlEPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
