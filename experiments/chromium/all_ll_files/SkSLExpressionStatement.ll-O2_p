; ModuleID = '../../third_party/skia/src/sksl/ir/SkSLExpressionStatement.cpp'
source_filename = "../../third_party/skia/src/sksl/ir/SkSLExpressionStatement.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.SkSL::Statement" = type { %"class.SkSL::IRNode" }
%"class.SkSL::IRNode" = type { i32 (...)**, i32, i32 }
%"class.SkSL::Context" = type { %"class.SkSL::BuiltinTypes", %"class.SkSL::ErrorReporter"*, %class.GrShaderCaps*, %"class.SkSL::ModifiersPool"*, %"struct.SkSL::ProgramConfig"* }
%"class.SkSL::BuiltinTypes" = type { %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1", %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.SkSL::Type"* }
%"class.SkSL::Type" = type { %"class.SkSL::Symbol", i8*, %"class.SkSL::String", i32, i32, i32, %"class.SkSL::Type"*, %"class.std::__1::vector", i32, i32, %"class.std::__1::vector.12", i32, i8, i8, i8, i8, i8, %"class.SkSL::Type"*, %"class.SkSL::Type"* }
%"class.SkSL::Symbol" = type { %"class.SkSL::IRNode", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::StringFragment" = type { i8*, i64 }
%"class.SkSL::String" = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.SkSL::Type"**, %"class.SkSL::Type"**, %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.SkSL::Type"** }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"struct.SkSL::Type::Field"*, %"struct.SkSL::Type::Field"*, %"class.std::__1::__compressed_pair.14" }
%"struct.SkSL::Type::Field" = type { %"struct.SkSL::Modifiers", %"struct.SkSL::StringFragment", %"class.SkSL::Type"* }
%"struct.SkSL::Modifiers" = type { %"struct.SkSL::Layout", i32, [4 x i8] }
%"struct.SkSL::Layout" = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.SkSL::StringFragment", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.SkSL::Type::Field"* }
%"class.SkSL::ErrorReporter" = type { i32 (...)** }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.SkSL::ModifiersPool" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.23", %"class.std::__1::__compressed_pair.32", %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.39", [4 x i8] }>
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25", %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { i64 }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { float }
%"struct.SkSL::ProgramConfig" = type { i8, %"struct.SkSL::ProgramSettings" }
%"struct.SkSL::ProgramSettings" = type { i8, i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, %"class.std::__1::vector.42"* }
%"class.std::__1::vector.42" = type opaque
%"class.SkSL::Expression" = type { %"class.SkSL::IRNode", %"class.SkSL::Type"* }
%"class.SkSL::Nop" = type { %"class.SkSL::Statement" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.SkSL::ExpressionStatement" = type { %"class.SkSL::Statement", %"class.std::__1::unique_ptr.43" }
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.SkSL::Expression"* }

$_ZN4SkSL3NopD0Ev = comdat any

$_ZNK4SkSL3Nop11descriptionEv = comdat any

$_ZNK4SkSL3Nop7isEmptyEv = comdat any

$_ZNK4SkSL3Nop5cloneEv = comdat any

$_ZNK4SkSL9Statement7isEmptyEv = comdat any

$_ZN4SkSL6IRNodeD2Ev = comdat any

$_ZN4SkSL19ExpressionStatementD2Ev = comdat any

$_ZN4SkSL19ExpressionStatementD0Ev = comdat any

$_ZNK4SkSL19ExpressionStatement11descriptionEv = comdat any

$_ZNK4SkSL19ExpressionStatement5cloneEv = comdat any

$_ZTVN4SkSL3NopE = comdat any

$_ZTVN4SkSL19ExpressionStatementE = comdat any

@_ZTVN4SkSL3NopE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::IRNode"*)* @_ZN4SkSL6IRNodeD2Ev to i8*), i8* bitcast (void (%"class.SkSL::Nop"*)* @_ZN4SkSL3NopD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::Nop"*)* @_ZNK4SkSL3Nop11descriptionEv to i8*), i8* bitcast (i1 (%"class.SkSL::Nop"*)* @_ZNK4SkSL3Nop7isEmptyEv to i8*), i8* bitcast (%"class.SkSL::Statement"* (%"class.SkSL::Nop"*)* @_ZNK4SkSL3Nop5cloneEv to i8*)] }, comdat, align 8
@.str = private unnamed_addr constant [2 x i8] c";\00", align 1
@_ZTVN4SkSL19ExpressionStatementE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkSL::ExpressionStatement"*)* @_ZN4SkSL19ExpressionStatementD2Ev to i8*), i8* bitcast (void (%"class.SkSL::ExpressionStatement"*)* @_ZN4SkSL19ExpressionStatementD0Ev to i8*), i8* bitcast (void (%"class.SkSL::String"*, %"class.SkSL::ExpressionStatement"*)* @_ZNK4SkSL19ExpressionStatement11descriptionEv to i8*), i8* bitcast (i1 (%"class.SkSL::Statement"*)* @_ZNK4SkSL9Statement7isEmptyEv to i8*), i8* bitcast (%"class.SkSL::Statement"* (%"class.SkSL::ExpressionStatement"*)* @_ZNK4SkSL19ExpressionStatement5cloneEv to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.SkSL::Statement"* @_ZN4SkSL19ExpressionStatement4MakeERKNS_7ContextENSt3__110unique_ptrINS_10ExpressionENS4_14default_deleteIS6_EEEE(%"class.SkSL::Context"* nocapture readonly dereferenceable(744), %"class.SkSL::Expression"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.SkSL::Expression"* %1 to i64
  %4 = getelementptr inbounds %"class.SkSL::Context", %"class.SkSL::Context"* %0, i64 0, i32 4
  %5 = load %"struct.SkSL::ProgramConfig"*, %"struct.SkSL::ProgramConfig"** %4, align 8
  %6 = getelementptr inbounds %"struct.SkSL::ProgramConfig", %"struct.SkSL::ProgramConfig"* %5, i64 0, i32 1, i32 10
  %7 = load i8, i8* %6, align 4, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %15, label %9

9:                                                ; preds = %2
  %10 = bitcast %"class.SkSL::Expression"* %1 to i1 (%"class.SkSL::Expression"*, i32)***
  %11 = load i1 (%"class.SkSL::Expression"*, i32)**, i1 (%"class.SkSL::Expression"*, i32)*** %10, align 8
  %12 = getelementptr inbounds i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %11, i64 7
  %13 = load i1 (%"class.SkSL::Expression"*, i32)*, i1 (%"class.SkSL::Expression"*, i32)** %12, align 8
  %14 = tail call zeroext i1 %13(%"class.SkSL::Expression"* %1, i32 0) #5
  br i1 %14, label %15, label %27

15:                                               ; preds = %2, %9
  %16 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 24) #5
  %17 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %1, i64 0, i32 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds i8, i8* %16, i64 8
  %20 = bitcast i8* %19 to i32*
  store i32 %18, i32* %20, align 8
  %21 = getelementptr inbounds i8, i8* %16, i64 12
  %22 = bitcast i8* %21 to i32*
  store i32 21, i32* %22, align 4
  %23 = bitcast i8* %16 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL19ExpressionStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %23, align 8
  %24 = getelementptr inbounds i8, i8* %16, i64 16
  %25 = bitcast i8* %24 to i64*
  store i64 %3, i64* %25, align 8
  %26 = ptrtoint i8* %16 to i64
  br label %41

27:                                               ; preds = %9
  %28 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 16) #5
  %29 = getelementptr inbounds i8, i8* %28, i64 8
  %30 = bitcast i8* %29 to i32*
  store i32 -1, i32* %30, align 8
  %31 = getelementptr inbounds i8, i8* %28, i64 12
  %32 = bitcast i8* %31 to i32*
  store i32 25, i32* %32, align 4
  %33 = bitcast i8* %28 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL3NopE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %33, align 8
  %34 = ptrtoint i8* %28 to i64
  %35 = icmp eq %"class.SkSL::Expression"* %1, null
  br i1 %35, label %41, label %36

36:                                               ; preds = %27
  %37 = bitcast %"class.SkSL::Expression"* %1 to void (%"class.SkSL::Expression"*)***
  %38 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %37, align 8
  %39 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %38, i64 1
  %40 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %39, align 8
  tail call void %40(%"class.SkSL::Expression"* nonnull %1) #5
  br label %41

41:                                               ; preds = %15, %27, %36
  %42 = phi i64 [ %26, %15 ], [ %34, %27 ], [ %34, %36 ]
  %43 = inttoptr i64 %42 to %"class.SkSL::Statement"*
  ret %"class.SkSL::Statement"* %43
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL3NopD0Ev(%"class.SkSL::Nop"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.SkSL::Nop"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL3Nop11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::Nop"*) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.SkSL::String"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  store i8 1, i8* %4, align 1
  %5 = bitcast %"class.SkSL::String"* %0 to i8*
  store i8 59, i8* %5, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 1
  store i8 0, i8* %6, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL3Nop7isEmptyEv(%"class.SkSL::Nop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Statement"* @_ZNK4SkSL3Nop5cloneEv(%"class.SkSL::Nop"*) unnamed_addr #0 comdat align 2 {
  %2 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 16) #5
  %3 = getelementptr inbounds i8, i8* %2, i64 8
  %4 = bitcast i8* %3 to i32*
  store i32 -1, i32* %4, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 12
  %6 = bitcast i8* %5 to i32*
  store i32 25, i32* %6, align 4
  %7 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL3NopE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = bitcast i8* %2 to %"class.SkSL::Statement"*
  ret %"class.SkSL::Statement"* %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4SkSL9Statement7isEmptyEv(%"class.SkSL::Statement"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL6IRNodeD2Ev(%"class.SkSL::IRNode"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN4SkSL4Pool10FreeMemoryEPv(i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL19ExpressionStatementD2Ev(%"class.SkSL::ExpressionStatement"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ExpressionStatement", %"class.SkSL::ExpressionStatement"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL19ExpressionStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::ExpressionStatement", %"class.SkSL::ExpressionStatement"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #5
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4SkSL19ExpressionStatementD0Ev(%"class.SkSL::ExpressionStatement"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ExpressionStatement", %"class.SkSL::ExpressionStatement"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL19ExpressionStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkSL::ExpressionStatement", %"class.SkSL::ExpressionStatement"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %3, align 8
  store %"class.SkSL::Expression"* null, %"class.SkSL::Expression"** %3, align 8
  %5 = icmp eq %"class.SkSL::Expression"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.SkSL::Expression"* %4 to void (%"class.SkSL::Expression"*)***
  %8 = load void (%"class.SkSL::Expression"*)**, void (%"class.SkSL::Expression"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %8, i64 1
  %10 = load void (%"class.SkSL::Expression"*)*, void (%"class.SkSL::Expression"*)** %9, align 8
  tail call void %10(%"class.SkSL::Expression"* nonnull %4) #5
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.SkSL::ExpressionStatement"* %0 to i8*
  tail call void @_ZN4SkSL4Pool10FreeMemoryEPv(i8* %12) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4SkSL19ExpressionStatement11descriptionEv(%"class.SkSL::String"* noalias sret, %"class.SkSL::ExpressionStatement"*) unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.SkSL::String", align 8
  %4 = bitcast %"class.SkSL::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #5
  %5 = getelementptr inbounds %"class.SkSL::ExpressionStatement", %"class.SkSL::ExpressionStatement"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %6 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %5, align 8
  %7 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %6, i64 0, i32 0
  %8 = bitcast %"class.SkSL::Expression"* %6 to void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)***
  %9 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)**, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %9, i64 2
  %11 = load void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)*, void (%"class.SkSL::String"*, %"class.SkSL::IRNode"*)** %10, align 8
  call void %11(%"class.SkSL::String"* nonnull sret %3, %"class.SkSL::IRNode"* %7) #5
  call void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret %0, %"class.SkSL::String"* nonnull %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)) #5
  %12 = bitcast %"class.SkSL::String"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.SkSL::String", %"class.SkSL::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @_ZdlPv(i8* %18) #6
  br label %19

19:                                               ; preds = %2, %16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.SkSL::Statement"* @_ZNK4SkSL19ExpressionStatement5cloneEv(%"class.SkSL::ExpressionStatement"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkSL::ExpressionStatement", %"class.SkSL::ExpressionStatement"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.SkSL::Expression"*, %"class.SkSL::Expression"** %2, align 8
  %4 = bitcast %"class.SkSL::Expression"* %3 to %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)***
  %5 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)**, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %5, i64 10
  %7 = load %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)*, %"class.SkSL::Expression"* (%"class.SkSL::Expression"*)** %6, align 8
  %8 = tail call %"class.SkSL::Expression"* %7(%"class.SkSL::Expression"* %3) #5
  %9 = ptrtoint %"class.SkSL::Expression"* %8 to i64
  %10 = tail call i8* @_ZN4SkSL4Pool11AllocMemoryEm(i64 24) #5
  %11 = getelementptr inbounds %"class.SkSL::Expression", %"class.SkSL::Expression"* %8, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds i8, i8* %10, i64 8
  %14 = bitcast i8* %13 to i32*
  store i32 %12, i32* %14, align 8
  %15 = getelementptr inbounds i8, i8* %10, i64 12
  %16 = bitcast i8* %15 to i32*
  store i32 21, i32* %16, align 4
  %17 = bitcast i8* %10 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4SkSL19ExpressionStatementE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %17, align 8
  %18 = getelementptr inbounds i8, i8* %10, i64 16
  %19 = bitcast i8* %18 to i64*
  store i64 %9, i64* %19, align 8
  %20 = bitcast i8* %10 to %"class.SkSL::Statement"*
  ret %"class.SkSL::Statement"* %20
}

declare void @_ZNK4SkSL6StringplEPKc(%"class.SkSL::String"* sret, %"class.SkSL::String"*, i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
