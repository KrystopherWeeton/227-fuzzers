; ModuleID = '../../third_party/boringssl/src/crypto/bytestring/cbb.c'
source_filename = "../../third_party/boringssl/src/crypto/bytestring/cbb.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%union.anon = type { i64 }
%struct.cbs_st = type { i8*, i64 }

; Function Attrs: nounwind ssp uwtable
define hidden void @CBB_zero(%struct.cbb_st* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.cbb_st* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 32, i1 false) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_init(%struct.cbb_st* nocapture, i64) local_unnamed_addr #0 {
  %3 = bitcast %struct.cbb_st* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 0, i64 32, i1 false) #8
  %4 = tail call i8* @OPENSSL_malloc(i64 %1) #8
  %5 = icmp ne i64 %1, 0
  %6 = icmp eq i8* %4, null
  %7 = and i1 %5, %6
  br i1 %7, label %22, label %8

8:                                                ; preds = %2
  %9 = tail call i8* @OPENSSL_malloc(i64 32) #8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %21, label %11

11:                                               ; preds = %8
  %12 = bitcast i8* %9 to i8**
  store i8* %4, i8** %12, align 8
  %13 = getelementptr inbounds i8, i8* %9, i64 8
  %14 = bitcast i8* %13 to i64*
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds i8, i8* %9, i64 16
  %16 = bitcast i8* %15 to i64*
  store i64 %1, i64* %16, align 8
  %17 = getelementptr inbounds i8, i8* %9, i64 24
  store i8 1, i8* %17, align 8
  %18 = getelementptr inbounds i8, i8* %9, i64 25
  store i8 0, i8* %18, align 1
  %19 = bitcast %struct.cbb_st* %0 to i8**
  store i8* %9, i8** %19, align 8
  %20 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 5
  store i8 0, i8* %20, align 2
  br label %22

21:                                               ; preds = %8
  tail call void @OPENSSL_free(i8* %4) #8
  br label %22

22:                                               ; preds = %11, %2, %21
  %23 = phi i32 [ 0, %21 ], [ 0, %2 ], [ 1, %11 ]
  ret i32 %23
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #2

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_init_fixed(%struct.cbb_st* nocapture, i8*, i64) local_unnamed_addr #0 {
  %4 = bitcast %struct.cbb_st* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 0, i64 32, i1 false) #8
  %5 = tail call i8* @OPENSSL_malloc(i64 32) #8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %17, label %7

7:                                                ; preds = %3
  %8 = bitcast i8* %5 to i8**
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds i8, i8* %5, i64 8
  %10 = bitcast i8* %9 to i64*
  store i64 0, i64* %10, align 8
  %11 = getelementptr inbounds i8, i8* %5, i64 16
  %12 = bitcast i8* %11 to i64*
  store i64 %2, i64* %12, align 8
  %13 = getelementptr inbounds i8, i8* %5, i64 24
  %14 = getelementptr inbounds i8, i8* %5, i64 25
  store i8 0, i8* %14, align 1
  %15 = bitcast %struct.cbb_st* %0 to i8**
  store i8* %5, i8** %15, align 8
  %16 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 5
  store i8 0, i8* %16, align 2
  store i8 0, i8* %13, align 8
  br label %17

17:                                               ; preds = %3, %7
  %18 = phi i32 [ 1, %7 ], [ 0, %3 ]
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden void @CBB_cleanup(%struct.cbb_st* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 5
  %3 = load i8, i8* %2, align 2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %22

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %7 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %6, align 8
  %8 = icmp eq %struct.cbb_buffer_st* %7, null
  br i1 %8, label %21, label %9

9:                                                ; preds = %5
  %10 = bitcast %struct.cbb_buffer_st* %7 to i8*
  %11 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 3
  %12 = load i8, i8* %11, align 8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  tail call void @OPENSSL_free(i8* %16) #8
  %17 = bitcast %struct.cbb_st* %0 to i8**
  %18 = load i8*, i8** %17, align 8
  br label %19

19:                                               ; preds = %9, %14
  %20 = phi i8* [ %18, %14 ], [ %10, %9 ]
  tail call void @OPENSSL_free(i8* %20) #8
  br label %21

21:                                               ; preds = %5, %19
  store %struct.cbb_buffer_st* null, %struct.cbb_buffer_st** %6, align 8
  br label %22

22:                                               ; preds = %1, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_finish(%struct.cbb_st* nocapture, i8**, i64*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 5
  %5 = load i8, i8* %4, align 2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %52

7:                                                ; preds = %3
  %8 = tail call i32 @CBB_flush(%struct.cbb_st* %0)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %52, label %10

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %12 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %11, align 8
  %13 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %12, i64 0, i32 3
  %14 = load i8, i8* %13, align 8
  %15 = icmp eq i8 %14, 0
  %16 = icmp eq i8** %1, null
  %17 = bitcast %struct.cbb_buffer_st* %12 to i64*
  br i1 %15, label %21, label %18

18:                                               ; preds = %10
  %19 = icmp eq i64* %2, null
  %20 = or i1 %16, %19
  br i1 %20, label %52, label %22

21:                                               ; preds = %10
  br i1 %16, label %25, label %22

22:                                               ; preds = %18, %21
  %23 = load i64, i64* %17, align 8
  %24 = bitcast i8** %1 to i64*
  store i64 %23, i64* %24, align 8
  br label %25

25:                                               ; preds = %21, %22
  %26 = icmp eq i64* %2, null
  br i1 %26, label %31, label %27

27:                                               ; preds = %25
  %28 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %11, align 8
  %29 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %28, i64 0, i32 1
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %2, align 8
  br label %31

31:                                               ; preds = %25, %27
  %32 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %11, align 8
  %33 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %32, i64 0, i32 0
  store i8* null, i8** %33, align 8
  %34 = load i8, i8* %4, align 2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %52

36:                                               ; preds = %31
  %37 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %11, align 8
  %38 = icmp eq %struct.cbb_buffer_st* %37, null
  br i1 %38, label %51, label %39

39:                                               ; preds = %36
  %40 = bitcast %struct.cbb_buffer_st* %37 to i8*
  %41 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %37, i64 0, i32 3
  %42 = load i8, i8* %41, align 8
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %37, i64 0, i32 0
  %46 = load i8*, i8** %45, align 8
  tail call void @OPENSSL_free(i8* %46) #8
  %47 = bitcast %struct.cbb_st* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %44, %39
  %50 = phi i8* [ %48, %44 ], [ %40, %39 ]
  tail call void @OPENSSL_free(i8* %50) #8
  br label %51

51:                                               ; preds = %49, %36
  store %struct.cbb_buffer_st* null, %struct.cbb_buffer_st** %11, align 8
  br label %52

52:                                               ; preds = %51, %31, %18, %7, %3
  %53 = phi i32 [ 0, %3 ], [ 0, %7 ], [ 0, %18 ], [ 1, %31 ], [ 1, %51 ]
  ret i32 %53
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_flush(%struct.cbb_st* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %3 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %2, align 8
  %4 = icmp eq %struct.cbb_buffer_st* %3, null
  br i1 %4, label %147, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %3, i64 0, i32 4
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %147

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 1
  %11 = load %struct.cbb_st*, %struct.cbb_st** %10, align 8
  %12 = icmp eq %struct.cbb_st* %11, null
  br i1 %12, label %147, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %11, i64 0, i32 3
  %15 = load i8, i8* %14, align 8
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %147, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %11, i64 0, i32 2
  %19 = load i64, i64* %18, align 8
  %20 = zext i8 %15 to i64
  %21 = add i64 %19, %20
  %22 = tail call i32 @CBB_flush(%struct.cbb_st* nonnull %11)
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %144, label %24

24:                                               ; preds = %17
  %25 = load %struct.cbb_st*, %struct.cbb_st** %10, align 8
  %26 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %25, i64 0, i32 2
  %27 = load i64, i64* %26, align 8
  %28 = icmp ult i64 %21, %27
  br i1 %28, label %144, label %29

29:                                               ; preds = %24
  %30 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %2, align 8
  %31 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %30, i64 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = icmp ult i64 %32, %21
  br i1 %33, label %144, label %34

34:                                               ; preds = %29
  %35 = sub i64 %32, %21
  %36 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %25, i64 0, i32 4
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %110, label %39

39:                                               ; preds = %34
  %40 = icmp ugt i64 %35, 4294967294
  br i1 %40, label %144, label %41

41:                                               ; preds = %39
  %42 = icmp ugt i64 %35, 16777215
  br i1 %42, label %50, label %43

43:                                               ; preds = %41
  %44 = icmp ugt i64 %35, 65535
  br i1 %44, label %50, label %45

45:                                               ; preds = %43
  %46 = icmp ugt i64 %35, 255
  br i1 %46, label %50, label %47

47:                                               ; preds = %45
  %48 = icmp ugt i64 %35, 127
  %49 = trunc i64 %35 to i8
  br i1 %48, label %50, label %93

50:                                               ; preds = %47, %41, %43, %45
  %51 = phi i32 [ 3, %45 ], [ 4, %43 ], [ 5, %41 ], [ 2, %47 ]
  %52 = phi i8 [ -126, %45 ], [ -125, %43 ], [ -124, %41 ], [ -127, %47 ]
  %53 = add nsw i32 %51, -1
  %54 = sext i32 %53 to i64
  %55 = icmp eq %struct.cbb_buffer_st* %30, null
  br i1 %55, label %144, label %56

56:                                               ; preds = %50
  %57 = add i64 %32, %54
  %58 = icmp ult i64 %57, %32
  br i1 %58, label %80, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %30, i64 0, i32 2
  %61 = load i64, i64* %60, align 8
  %62 = icmp ugt i64 %57, %61
  br i1 %62, label %63, label %82

63:                                               ; preds = %59
  %64 = shl i64 %61, 1
  %65 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %30, i64 0, i32 3
  %66 = load i8, i8* %65, align 8
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %80, label %68

68:                                               ; preds = %63
  %69 = icmp ult i64 %64, %61
  %70 = icmp ult i64 %64, %57
  %71 = or i1 %69, %70
  %72 = select i1 %71, i64 %57, i64 %64
  %73 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %30, i64 0, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = tail call i8* @OPENSSL_realloc(i8* %74, i64 %72) #8
  %76 = icmp eq i8* %75, null
  br i1 %76, label %80, label %77

77:                                               ; preds = %68
  store i8* %75, i8** %73, align 8
  store i64 %72, i64* %60, align 8
  %78 = load i64, i64* %31, align 8
  %79 = add i64 %78, %54
  br label %82

80:                                               ; preds = %68, %63, %56
  %81 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %30, i64 0, i32 4
  store i8 1, i8* %81, align 1
  br label %144

82:                                               ; preds = %77, %59
  %83 = phi i64 [ %79, %77 ], [ %57, %59 ]
  store i64 %83, i64* %31, align 8
  %84 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %2, align 8
  %85 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %84, i64 0, i32 0
  %86 = load i8*, i8** %85, align 8
  %87 = getelementptr inbounds i8, i8* %86, i64 %21
  %88 = getelementptr inbounds i8, i8* %87, i64 %54
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %88, i8* align 1 %87, i64 %35, i1 false) #8
  %89 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %2, align 8
  %90 = load %struct.cbb_st*, %struct.cbb_st** %10, align 8
  %91 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %90, i64 0, i32 2
  %92 = load i64, i64* %91, align 8
  br label %93

93:                                               ; preds = %82, %47
  %94 = phi i64 [ %27, %47 ], [ %92, %82 ]
  %95 = phi %struct.cbb_st* [ %25, %47 ], [ %90, %82 ]
  %96 = phi %struct.cbb_buffer_st* [ %30, %47 ], [ %89, %82 ]
  %97 = phi i8 [ %49, %47 ], [ %52, %82 ]
  %98 = phi i32 [ 1, %47 ], [ %51, %82 ]
  %99 = phi i64 [ 0, %47 ], [ %35, %82 ]
  %100 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %96, i64 0, i32 0
  %101 = load i8*, i8** %100, align 8
  %102 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %95, i64 0, i32 2
  %103 = add i64 %94, 1
  store i64 %103, i64* %102, align 8
  %104 = getelementptr inbounds i8, i8* %101, i64 %94
  store i8 %97, i8* %104, align 1
  %105 = trunc i32 %98 to i8
  %106 = add nsw i8 %105, -1
  %107 = load %struct.cbb_st*, %struct.cbb_st** %10, align 8
  %108 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %107, i64 0, i32 3
  store i8 %106, i8* %108, align 8
  %109 = load %struct.cbb_st*, %struct.cbb_st** %10, align 8
  br label %110

110:                                              ; preds = %93, %34
  %111 = phi %struct.cbb_st* [ %109, %93 ], [ %25, %34 ]
  %112 = phi i64 [ %99, %93 ], [ %35, %34 ]
  %113 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %111, i64 0, i32 3
  %114 = load i8, i8* %113, align 8
  %115 = icmp eq i8 %114, 0
  br i1 %115, label %138, label %116

116:                                              ; preds = %110
  %117 = zext i8 %114 to i64
  %118 = add nsw i64 %117, -1
  br label %119

119:                                              ; preds = %116, %119
  %120 = phi %struct.cbb_st* [ %133, %119 ], [ %111, %116 ]
  %121 = phi i64 [ %132, %119 ], [ %118, %116 ]
  %122 = phi i64 [ %131, %119 ], [ %112, %116 ]
  %123 = trunc i64 %122 to i8
  %124 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %2, align 8
  %125 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %124, i64 0, i32 0
  %126 = load i8*, i8** %125, align 8
  %127 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %120, i64 0, i32 2
  %128 = load i64, i64* %127, align 8
  %129 = add i64 %128, %121
  %130 = getelementptr inbounds i8, i8* %126, i64 %129
  store i8 %123, i8* %130, align 1
  %131 = lshr i64 %122, 8
  %132 = add i64 %121, -1
  %133 = load %struct.cbb_st*, %struct.cbb_st** %10, align 8
  %134 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %133, i64 0, i32 3
  %135 = load i8, i8* %134, align 8
  %136 = zext i8 %135 to i64
  %137 = icmp ult i64 %132, %136
  br i1 %137, label %119, label %138

138:                                              ; preds = %119, %110
  %139 = phi i64 [ %112, %110 ], [ %131, %119 ]
  %140 = phi %struct.cbb_st* [ %111, %110 ], [ %133, %119 ]
  %141 = icmp eq i64 %139, 0
  br i1 %141, label %142, label %144

142:                                              ; preds = %138
  %143 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %140, i64 0, i32 0
  store %struct.cbb_buffer_st* null, %struct.cbb_buffer_st** %143, align 8
  store %struct.cbb_st* null, %struct.cbb_st** %10, align 8
  br label %147

144:                                              ; preds = %50, %80, %39, %138, %17, %24, %29
  %145 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %2, align 8
  %146 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %145, i64 0, i32 4
  store i8 1, i8* %146, align 1
  br label %147

147:                                              ; preds = %9, %13, %1, %5, %144, %142
  %148 = phi i32 [ 0, %144 ], [ 1, %142 ], [ 0, %5 ], [ 0, %1 ], [ 1, %13 ], [ 1, %9 ]
  ret i32 %148
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @CBB_data(%struct.cbb_st* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %3 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %2, align 8
  %4 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %3, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds i8, i8* %5, i64 %7
  %9 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 3
  %10 = load i8, i8* %9, align 8
  %11 = zext i8 %10 to i64
  %12 = getelementptr inbounds i8, i8* %8, i64 %11
  ret i8* %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @CBB_len(%struct.cbb_st* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %3 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %2, align 8
  %4 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %3, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 3
  %10 = load i8, i8* %9, align 8
  %11 = zext i8 %10 to i64
  %12 = sub i64 %8, %11
  ret i64 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_u8_length_prefixed(%struct.cbb_st* nocapture, %struct.cbb_st*) local_unnamed_addr #0 {
  %3 = tail call i32 @CBB_flush(%struct.cbb_st* %0) #8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %56, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %7 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %6, align 8
  %8 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq %struct.cbb_buffer_st* %7, null
  br i1 %10, label %56, label %11

11:                                               ; preds = %5
  %12 = add i64 %9, 1
  %13 = icmp eq i64 %9, -1
  br i1 %13, label %38, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %12, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  br label %40

21:                                               ; preds = %14
  %22 = shl i64 %16, 1
  %23 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 3
  %24 = load i8, i8* %23, align 8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %21
  %27 = icmp ult i64 %22, %16
  %28 = icmp ult i64 %22, %12
  %29 = or i1 %27, %28
  %30 = select i1 %29, i64 %12, i64 %22
  %31 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* @OPENSSL_realloc(i8* %32, i64 %30) #8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %26
  store i8* %33, i8** %31, align 8
  store i64 %30, i64* %15, align 8
  %36 = load i64, i64* %8, align 8
  %37 = add i64 %36, 1
  br label %40

38:                                               ; preds = %26, %21, %11
  %39 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 4
  store i8 1, i8* %39, align 1
  br label %56

40:                                               ; preds = %18, %35
  %41 = phi i64 [ %12, %18 ], [ %37, %35 ]
  %42 = phi i64 [ %9, %18 ], [ %36, %35 ]
  %43 = phi i8* [ %20, %18 ], [ %33, %35 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %42
  store i64 %41, i64* %8, align 8
  store i8 0, i8* %44, align 1
  %45 = bitcast %struct.cbb_st* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 0, i64 32, i1 false) #8
  %46 = bitcast %struct.cbb_st* %0 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %struct.cbb_st* %1 to i64*
  store i64 %47, i64* %48, align 8
  %49 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %1, i64 0, i32 5
  store i8 1, i8* %49, align 2
  %50 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 1
  store %struct.cbb_st* %1, %struct.cbb_st** %50, align 8
  %51 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %1, i64 0, i32 2
  store i64 %9, i64* %51, align 8
  %52 = load %struct.cbb_st*, %struct.cbb_st** %50, align 8
  %53 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %52, i64 0, i32 3
  store i8 1, i8* %53, align 8
  %54 = load %struct.cbb_st*, %struct.cbb_st** %50, align 8
  %55 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %54, i64 0, i32 4
  store i8 0, i8* %55, align 1
  br label %56

56:                                               ; preds = %5, %38, %2, %40
  %57 = phi i32 [ 0, %2 ], [ 1, %40 ], [ 0, %38 ], [ 0, %5 ]
  ret i32 %57
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_u16_length_prefixed(%struct.cbb_st* nocapture, %struct.cbb_st*) local_unnamed_addr #0 {
  %3 = tail call i32 @CBB_flush(%struct.cbb_st* %0) #8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %57, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %7 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %6, align 8
  %8 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq %struct.cbb_buffer_st* %7, null
  br i1 %10, label %57, label %11

11:                                               ; preds = %5
  %12 = add i64 %9, 2
  %13 = icmp ugt i64 %9, -3
  br i1 %13, label %38, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %12, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  br label %40

21:                                               ; preds = %14
  %22 = shl i64 %16, 1
  %23 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 3
  %24 = load i8, i8* %23, align 8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %21
  %27 = icmp ult i64 %22, %16
  %28 = icmp ult i64 %22, %12
  %29 = or i1 %27, %28
  %30 = select i1 %29, i64 %12, i64 %22
  %31 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* @OPENSSL_realloc(i8* %32, i64 %30) #8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %26
  store i8* %33, i8** %31, align 8
  store i64 %30, i64* %15, align 8
  %36 = load i64, i64* %8, align 8
  %37 = add i64 %36, 2
  br label %40

38:                                               ; preds = %26, %21, %11
  %39 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 4
  store i8 1, i8* %39, align 1
  br label %57

40:                                               ; preds = %18, %35
  %41 = phi i64 [ %12, %18 ], [ %37, %35 ]
  %42 = phi i64 [ %9, %18 ], [ %36, %35 ]
  %43 = phi i8* [ %20, %18 ], [ %33, %35 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %42
  store i64 %41, i64* %8, align 8
  %45 = bitcast i8* %44 to i16*
  store i16 0, i16* %45, align 1
  %46 = bitcast %struct.cbb_st* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %46, i8 0, i64 32, i1 false) #8
  %47 = bitcast %struct.cbb_st* %0 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast %struct.cbb_st* %1 to i64*
  store i64 %48, i64* %49, align 8
  %50 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %1, i64 0, i32 5
  store i8 1, i8* %50, align 2
  %51 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 1
  store %struct.cbb_st* %1, %struct.cbb_st** %51, align 8
  %52 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %1, i64 0, i32 2
  store i64 %9, i64* %52, align 8
  %53 = load %struct.cbb_st*, %struct.cbb_st** %51, align 8
  %54 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %53, i64 0, i32 3
  store i8 2, i8* %54, align 8
  %55 = load %struct.cbb_st*, %struct.cbb_st** %51, align 8
  %56 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %55, i64 0, i32 4
  store i8 0, i8* %56, align 1
  br label %57

57:                                               ; preds = %5, %38, %2, %40
  %58 = phi i32 [ 0, %2 ], [ 1, %40 ], [ 0, %38 ], [ 0, %5 ]
  ret i32 %58
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_u24_length_prefixed(%struct.cbb_st* nocapture, %struct.cbb_st*) local_unnamed_addr #0 {
  %3 = tail call i32 @CBB_flush(%struct.cbb_st* %0) #8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %56, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %7 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %6, align 8
  %8 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq %struct.cbb_buffer_st* %7, null
  br i1 %10, label %56, label %11

11:                                               ; preds = %5
  %12 = add i64 %9, 3
  %13 = icmp ugt i64 %9, -4
  br i1 %13, label %38, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %12, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  br label %40

21:                                               ; preds = %14
  %22 = shl i64 %16, 1
  %23 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 3
  %24 = load i8, i8* %23, align 8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %21
  %27 = icmp ult i64 %22, %16
  %28 = icmp ult i64 %22, %12
  %29 = or i1 %27, %28
  %30 = select i1 %29, i64 %12, i64 %22
  %31 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* @OPENSSL_realloc(i8* %32, i64 %30) #8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %26
  store i8* %33, i8** %31, align 8
  store i64 %30, i64* %15, align 8
  %36 = load i64, i64* %8, align 8
  %37 = add i64 %36, 3
  br label %40

38:                                               ; preds = %26, %21, %11
  %39 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 4
  store i8 1, i8* %39, align 1
  br label %56

40:                                               ; preds = %18, %35
  %41 = phi i64 [ %12, %18 ], [ %37, %35 ]
  %42 = phi i64 [ %9, %18 ], [ %36, %35 ]
  %43 = phi i8* [ %20, %18 ], [ %33, %35 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %42
  store i64 %41, i64* %8, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 3, i1 false) #8
  %45 = bitcast %struct.cbb_st* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 0, i64 32, i1 false) #8
  %46 = bitcast %struct.cbb_st* %0 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = bitcast %struct.cbb_st* %1 to i64*
  store i64 %47, i64* %48, align 8
  %49 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %1, i64 0, i32 5
  store i8 1, i8* %49, align 2
  %50 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 1
  store %struct.cbb_st* %1, %struct.cbb_st** %50, align 8
  %51 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %1, i64 0, i32 2
  store i64 %9, i64* %51, align 8
  %52 = load %struct.cbb_st*, %struct.cbb_st** %50, align 8
  %53 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %52, i64 0, i32 3
  store i8 3, i8* %53, align 8
  %54 = load %struct.cbb_st*, %struct.cbb_st** %50, align 8
  %55 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %54, i64 0, i32 4
  store i8 0, i8* %55, align 1
  br label %56

56:                                               ; preds = %5, %38, %2, %40
  %57 = phi i32 [ 0, %2 ], [ 1, %40 ], [ 0, %38 ], [ 0, %5 ]
  ret i32 %57
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_asn1(%struct.cbb_st* nocapture, %struct.cbb_st*, i32) local_unnamed_addr #0 {
  %4 = tail call i32 @CBB_flush(%struct.cbb_st* %0)
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %218, label %6

6:                                                ; preds = %3
  %7 = lshr i32 %2, 24
  %8 = and i32 %2, 536870911
  %9 = icmp ugt i32 %8, 30
  br i1 %9, label %10, label %115

10:                                               ; preds = %6
  %11 = trunc i32 %7 to i8
  %12 = or i8 %11, 31
  %13 = tail call i32 @CBB_flush(%struct.cbb_st* %0) #8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %218, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %17 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %16, align 8
  %18 = icmp eq %struct.cbb_buffer_st* %17, null
  br i1 %18, label %218, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %17, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, 1
  %23 = icmp eq i64 %21, -1
  br i1 %23, label %48, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %17, i64 0, i32 2
  %26 = load i64, i64* %25, align 8
  %27 = icmp ugt i64 %22, %26
  br i1 %27, label %31, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %17, i64 0, i32 0
  %30 = load i8*, i8** %29, align 8
  br label %50

31:                                               ; preds = %24
  %32 = shl i64 %26, 1
  %33 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %17, i64 0, i32 3
  %34 = load i8, i8* %33, align 8
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %48, label %36

36:                                               ; preds = %31
  %37 = icmp ult i64 %32, %26
  %38 = icmp ult i64 %32, %22
  %39 = or i1 %37, %38
  %40 = select i1 %39, i64 %22, i64 %32
  %41 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %17, i64 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = tail call i8* @OPENSSL_realloc(i8* %42, i64 %40) #8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %36
  store i8* %43, i8** %41, align 8
  store i64 %40, i64* %25, align 8
  %46 = load i64, i64* %20, align 8
  %47 = add i64 %46, 1
  br label %50

48:                                               ; preds = %36, %31, %19
  %49 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %17, i64 0, i32 4
  store i8 1, i8* %49, align 1
  br label %218

50:                                               ; preds = %28, %45
  %51 = phi i64 [ %22, %28 ], [ %47, %45 ]
  %52 = phi i64 [ %21, %28 ], [ %46, %45 ]
  %53 = phi i8* [ %30, %28 ], [ %43, %45 ]
  %54 = getelementptr inbounds i8, i8* %53, i64 %52
  store i64 %51, i64* %20, align 8
  store i8 %12, i8* %54, align 1
  %55 = zext i32 %8 to i64
  br label %56

56:                                               ; preds = %50, %56
  %57 = phi i64 [ %60, %56 ], [ %55, %50 ]
  %58 = phi i32 [ %59, %56 ], [ 0, %50 ]
  %59 = add nuw nsw i32 %58, 1
  %60 = lshr i64 %57, 7
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %56

62:                                               ; preds = %56, %108
  %63 = phi i32 [ %113, %108 ], [ %58, %56 ]
  %64 = mul i32 %63, 7
  %65 = zext i32 %64 to i64
  %66 = lshr i64 %55, %65
  %67 = trunc i64 %66 to i8
  %68 = and i8 %67, 127
  %69 = icmp eq i32 %63, 0
  %70 = or i8 %67, -128
  %71 = select i1 %69, i8 %68, i8 %70
  %72 = tail call i32 @CBB_flush(%struct.cbb_st* %0) #8
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %218, label %74

74:                                               ; preds = %62
  %75 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %16, align 8
  %76 = icmp eq %struct.cbb_buffer_st* %75, null
  br i1 %76, label %218, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %75, i64 0, i32 1
  %79 = load i64, i64* %78, align 8
  %80 = add i64 %79, 1
  %81 = icmp eq i64 %79, -1
  br i1 %81, label %106, label %82

82:                                               ; preds = %77
  %83 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %75, i64 0, i32 2
  %84 = load i64, i64* %83, align 8
  %85 = icmp ugt i64 %80, %84
  br i1 %85, label %89, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %75, i64 0, i32 0
  %88 = load i8*, i8** %87, align 8
  br label %108

89:                                               ; preds = %82
  %90 = shl i64 %84, 1
  %91 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %75, i64 0, i32 3
  %92 = load i8, i8* %91, align 8
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %106, label %94

94:                                               ; preds = %89
  %95 = icmp ult i64 %90, %84
  %96 = icmp ult i64 %90, %80
  %97 = or i1 %95, %96
  %98 = select i1 %97, i64 %80, i64 %90
  %99 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %75, i64 0, i32 0
  %100 = load i8*, i8** %99, align 8
  %101 = tail call i8* @OPENSSL_realloc(i8* %100, i64 %98) #8
  %102 = icmp eq i8* %101, null
  br i1 %102, label %106, label %103

103:                                              ; preds = %94
  store i8* %101, i8** %99, align 8
  store i64 %98, i64* %83, align 8
  %104 = load i64, i64* %78, align 8
  %105 = add i64 %104, 1
  br label %108

106:                                              ; preds = %94, %89, %77
  %107 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %75, i64 0, i32 4
  store i8 1, i8* %107, align 1
  br label %218

108:                                              ; preds = %86, %103
  %109 = phi i64 [ %80, %86 ], [ %105, %103 ]
  %110 = phi i64 [ %79, %86 ], [ %104, %103 ]
  %111 = phi i8* [ %88, %86 ], [ %101, %103 ]
  %112 = getelementptr inbounds i8, i8* %111, i64 %110
  store i64 %109, i64* %78, align 8
  store i8 %71, i8* %112, align 1
  %113 = add i32 %63, -1
  %114 = icmp ugt i32 %113, %58
  br i1 %114, label %161, label %62

115:                                              ; preds = %6
  %116 = and i32 %7, 224
  %117 = or i32 %116, %2
  %118 = trunc i32 %117 to i8
  %119 = tail call i32 @CBB_flush(%struct.cbb_st* %0) #8
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %218, label %121

121:                                              ; preds = %115
  %122 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %123 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %122, align 8
  %124 = icmp eq %struct.cbb_buffer_st* %123, null
  br i1 %124, label %218, label %125

125:                                              ; preds = %121
  %126 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %123, i64 0, i32 1
  %127 = load i64, i64* %126, align 8
  %128 = add i64 %127, 1
  %129 = icmp eq i64 %127, -1
  br i1 %129, label %154, label %130

130:                                              ; preds = %125
  %131 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %123, i64 0, i32 2
  %132 = load i64, i64* %131, align 8
  %133 = icmp ugt i64 %128, %132
  br i1 %133, label %137, label %134

134:                                              ; preds = %130
  %135 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %123, i64 0, i32 0
  %136 = load i8*, i8** %135, align 8
  br label %156

137:                                              ; preds = %130
  %138 = shl i64 %132, 1
  %139 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %123, i64 0, i32 3
  %140 = load i8, i8* %139, align 8
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %154, label %142

142:                                              ; preds = %137
  %143 = icmp ult i64 %138, %132
  %144 = icmp ult i64 %138, %128
  %145 = or i1 %143, %144
  %146 = select i1 %145, i64 %128, i64 %138
  %147 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %123, i64 0, i32 0
  %148 = load i8*, i8** %147, align 8
  %149 = tail call i8* @OPENSSL_realloc(i8* %148, i64 %146) #8
  %150 = icmp eq i8* %149, null
  br i1 %150, label %154, label %151

151:                                              ; preds = %142
  store i8* %149, i8** %147, align 8
  store i64 %146, i64* %131, align 8
  %152 = load i64, i64* %126, align 8
  %153 = add i64 %152, 1
  br label %156

154:                                              ; preds = %142, %137, %125
  %155 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %123, i64 0, i32 4
  store i8 1, i8* %155, align 1
  br label %218

156:                                              ; preds = %134, %151
  %157 = phi i64 [ %128, %134 ], [ %153, %151 ]
  %158 = phi i64 [ %127, %134 ], [ %152, %151 ]
  %159 = phi i8* [ %136, %134 ], [ %149, %151 ]
  %160 = getelementptr inbounds i8, i8* %159, i64 %158
  store i64 %157, i64* %126, align 8
  store i8 %118, i8* %160, align 1
  br label %161

161:                                              ; preds = %108, %156
  %162 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %163 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %162, align 8
  %164 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %163, i64 0, i32 1
  %165 = load i64, i64* %164, align 8
  %166 = tail call i32 @CBB_flush(%struct.cbb_st* %0) #8
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %218, label %168

168:                                              ; preds = %161
  %169 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %162, align 8
  %170 = icmp eq %struct.cbb_buffer_st* %169, null
  br i1 %170, label %218, label %171

171:                                              ; preds = %168
  %172 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %169, i64 0, i32 1
  %173 = load i64, i64* %172, align 8
  %174 = add i64 %173, 1
  %175 = icmp eq i64 %173, -1
  br i1 %175, label %200, label %176

176:                                              ; preds = %171
  %177 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %169, i64 0, i32 2
  %178 = load i64, i64* %177, align 8
  %179 = icmp ugt i64 %174, %178
  br i1 %179, label %183, label %180

180:                                              ; preds = %176
  %181 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %169, i64 0, i32 0
  %182 = load i8*, i8** %181, align 8
  br label %202

183:                                              ; preds = %176
  %184 = shl i64 %178, 1
  %185 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %169, i64 0, i32 3
  %186 = load i8, i8* %185, align 8
  %187 = icmp eq i8 %186, 0
  br i1 %187, label %200, label %188

188:                                              ; preds = %183
  %189 = icmp ult i64 %184, %178
  %190 = icmp ult i64 %184, %174
  %191 = or i1 %189, %190
  %192 = select i1 %191, i64 %174, i64 %184
  %193 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %169, i64 0, i32 0
  %194 = load i8*, i8** %193, align 8
  %195 = tail call i8* @OPENSSL_realloc(i8* %194, i64 %192) #8
  %196 = icmp eq i8* %195, null
  br i1 %196, label %200, label %197

197:                                              ; preds = %188
  store i8* %195, i8** %193, align 8
  store i64 %192, i64* %177, align 8
  %198 = load i64, i64* %172, align 8
  %199 = add i64 %198, 1
  br label %202

200:                                              ; preds = %188, %183, %171
  %201 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %169, i64 0, i32 4
  store i8 1, i8* %201, align 1
  br label %218

202:                                              ; preds = %197, %180
  %203 = phi i64 [ %174, %180 ], [ %199, %197 ]
  %204 = phi i64 [ %173, %180 ], [ %198, %197 ]
  %205 = phi i8* [ %182, %180 ], [ %195, %197 ]
  %206 = getelementptr inbounds i8, i8* %205, i64 %204
  store i64 %203, i64* %172, align 8
  store i8 0, i8* %206, align 1
  %207 = bitcast %struct.cbb_st* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %207, i8 0, i64 32, i1 false) #8
  %208 = bitcast %struct.cbb_st* %0 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = bitcast %struct.cbb_st* %1 to i64*
  store i64 %209, i64* %210, align 8
  %211 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %1, i64 0, i32 5
  store i8 1, i8* %211, align 2
  %212 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 1
  store %struct.cbb_st* %1, %struct.cbb_st** %212, align 8
  %213 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %1, i64 0, i32 2
  store i64 %165, i64* %213, align 8
  %214 = load %struct.cbb_st*, %struct.cbb_st** %212, align 8
  %215 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %214, i64 0, i32 3
  store i8 1, i8* %215, align 8
  %216 = load %struct.cbb_st*, %struct.cbb_st** %212, align 8
  %217 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %216, i64 0, i32 4
  store i8 1, i8* %217, align 1
  br label %218

218:                                              ; preds = %62, %74, %168, %200, %161, %121, %154, %115, %106, %15, %48, %10, %202, %3
  %219 = phi i32 [ 0, %3 ], [ 1, %202 ], [ 0, %10 ], [ 0, %48 ], [ 0, %15 ], [ 0, %106 ], [ 0, %115 ], [ 0, %154 ], [ 0, %121 ], [ 0, %161 ], [ 0, %200 ], [ 0, %168 ], [ 0, %74 ], [ 0, %62 ]
  ret i32 %219
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_u8(%struct.cbb_st* nocapture, i8 zeroext) local_unnamed_addr #0 {
  %3 = tail call i32 @CBB_flush(%struct.cbb_st* %0)
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %45, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %7 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %6, align 8
  %8 = icmp eq %struct.cbb_buffer_st* %7, null
  br i1 %8, label %45, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, 1
  %13 = icmp eq i64 %11, -1
  br i1 %13, label %38, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %12, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  br label %40

21:                                               ; preds = %14
  %22 = shl i64 %16, 1
  %23 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 3
  %24 = load i8, i8* %23, align 8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %21
  %27 = icmp ult i64 %22, %16
  %28 = icmp ult i64 %22, %12
  %29 = or i1 %27, %28
  %30 = select i1 %29, i64 %12, i64 %22
  %31 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* @OPENSSL_realloc(i8* %32, i64 %30) #8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %26
  store i8* %33, i8** %31, align 8
  store i64 %30, i64* %15, align 8
  %36 = load i64, i64* %10, align 8
  %37 = add i64 %36, 1
  br label %40

38:                                               ; preds = %26, %21, %9
  %39 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 4
  store i8 1, i8* %39, align 1
  br label %45

40:                                               ; preds = %35, %18
  %41 = phi i64 [ %12, %18 ], [ %37, %35 ]
  %42 = phi i64 [ %11, %18 ], [ %36, %35 ]
  %43 = phi i8* [ %20, %18 ], [ %33, %35 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %42
  store i64 %41, i64* %10, align 8
  store i8 %1, i8* %44, align 1
  br label %45

45:                                               ; preds = %40, %38, %5, %2
  %46 = phi i32 [ 0, %2 ], [ 1, %40 ], [ 0, %38 ], [ 0, %5 ]
  ret i32 %46
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_bytes(%struct.cbb_st* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %4 = tail call i32 @CBB_flush(%struct.cbb_st* %0)
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %48, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %8 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %7, align 8
  %9 = icmp eq %struct.cbb_buffer_st* %8, null
  br i1 %9, label %48, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, %2
  %14 = icmp ult i64 %13, %12
  br i1 %14, label %39, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %13, %17
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  br label %41

22:                                               ; preds = %15
  %23 = shl i64 %17, 1
  %24 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 3
  %25 = load i8, i8* %24, align 8
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %39, label %27

27:                                               ; preds = %22
  %28 = icmp ult i64 %23, %17
  %29 = icmp ult i64 %23, %13
  %30 = or i1 %28, %29
  %31 = select i1 %30, i64 %13, i64 %23
  %32 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = tail call i8* @OPENSSL_realloc(i8* %33, i64 %31) #8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %27
  store i8* %34, i8** %32, align 8
  store i64 %31, i64* %16, align 8
  %37 = load i64, i64* %11, align 8
  %38 = add i64 %37, %2
  br label %41

39:                                               ; preds = %27, %22, %10
  %40 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 4
  store i8 1, i8* %40, align 1
  br label %48

41:                                               ; preds = %19, %36
  %42 = phi i64 [ %13, %19 ], [ %38, %36 ]
  %43 = phi i64 [ %12, %19 ], [ %37, %36 ]
  %44 = phi i8* [ %21, %19 ], [ %34, %36 ]
  store i64 %42, i64* %11, align 8
  %45 = icmp eq i64 %2, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds i8, i8* %44, i64 %43
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 1 %1, i64 %2, i1 false) #8
  br label %48

48:                                               ; preds = %6, %39, %46, %41, %3
  %49 = phi i32 [ 0, %3 ], [ 1, %41 ], [ 1, %46 ], [ 0, %39 ], [ 0, %6 ]
  ret i32 %49
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_space(%struct.cbb_st* nocapture, i8**, i64) local_unnamed_addr #0 {
  %4 = tail call i32 @CBB_flush(%struct.cbb_st* %0)
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %46, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %8 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %7, align 8
  %9 = icmp eq %struct.cbb_buffer_st* %8, null
  br i1 %9, label %46, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, %2
  %14 = icmp ult i64 %13, %12
  br i1 %14, label %41, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %13, %17
  br i1 %18, label %19, label %34

19:                                               ; preds = %15
  %20 = shl i64 %17, 1
  %21 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 3
  %22 = load i8, i8* %21, align 8
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %41, label %24

24:                                               ; preds = %19
  %25 = icmp ult i64 %20, %17
  %26 = icmp ult i64 %20, %13
  %27 = or i1 %25, %26
  %28 = select i1 %27, i64 %13, i64 %20
  %29 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = tail call i8* @OPENSSL_realloc(i8* %30, i64 %28) #8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %41, label %33

33:                                               ; preds = %24
  store i8* %31, i8** %29, align 8
  store i64 %28, i64* %16, align 8
  br label %34

34:                                               ; preds = %33, %15
  %35 = icmp eq i8** %1, null
  br i1 %35, label %43, label %36

36:                                               ; preds = %34
  %37 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = load i64, i64* %11, align 8
  %40 = getelementptr inbounds i8, i8* %38, i64 %39
  store i8* %40, i8** %1, align 8
  br label %43

41:                                               ; preds = %24, %19, %10
  %42 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 4
  store i8 1, i8* %42, align 1
  br label %46

43:                                               ; preds = %34, %36
  %44 = load i64, i64* %11, align 8
  %45 = add i64 %44, %2
  store i64 %45, i64* %11, align 8
  br label %46

46:                                               ; preds = %3, %6, %41, %43
  %47 = phi i32 [ 1, %43 ], [ 0, %41 ], [ 0, %6 ], [ 0, %3 ]
  ret i32 %47
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_reserve(%struct.cbb_st* nocapture, i8**, i64) local_unnamed_addr #0 {
  %4 = tail call i32 @CBB_flush(%struct.cbb_st* %0)
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %43, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %8 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %7, align 8
  %9 = icmp eq %struct.cbb_buffer_st* %8, null
  br i1 %9, label %43, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, %2
  %14 = icmp ult i64 %13, %12
  br i1 %14, label %41, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %13, %17
  br i1 %18, label %19, label %34

19:                                               ; preds = %15
  %20 = shl i64 %17, 1
  %21 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 3
  %22 = load i8, i8* %21, align 8
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %41, label %24

24:                                               ; preds = %19
  %25 = icmp ult i64 %20, %17
  %26 = icmp ult i64 %20, %13
  %27 = or i1 %25, %26
  %28 = select i1 %27, i64 %13, i64 %20
  %29 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = tail call i8* @OPENSSL_realloc(i8* %30, i64 %28) #8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %41, label %33

33:                                               ; preds = %24
  store i8* %31, i8** %29, align 8
  store i64 %28, i64* %16, align 8
  br label %34

34:                                               ; preds = %33, %15
  %35 = icmp eq i8** %1, null
  br i1 %35, label %43, label %36

36:                                               ; preds = %34
  %37 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = load i64, i64* %11, align 8
  %40 = getelementptr inbounds i8, i8* %38, i64 %39
  store i8* %40, i8** %1, align 8
  br label %43

41:                                               ; preds = %24, %19, %10
  %42 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 4
  store i8 1, i8* %42, align 1
  br label %43

43:                                               ; preds = %3, %6, %41, %36, %34
  %44 = phi i32 [ 1, %34 ], [ 1, %36 ], [ 0, %41 ], [ 0, %6 ], [ 0, %3 ]
  ret i32 %44
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @CBB_did_write(%struct.cbb_st* nocapture readonly, i64) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %4 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %3, align 8
  %5 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %4, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %1
  %8 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 1
  %9 = load %struct.cbb_st*, %struct.cbb_st** %8, align 8
  %10 = icmp ne %struct.cbb_st* %9, null
  %11 = icmp ult i64 %7, %6
  %12 = or i1 %10, %11
  br i1 %12, label %18, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %4, i64 0, i32 2
  %15 = load i64, i64* %14, align 8
  %16 = icmp ugt i64 %7, %15
  br i1 %16, label %18, label %17

17:                                               ; preds = %13
  store i64 %7, i64* %5, align 8
  br label %18

18:                                               ; preds = %13, %2, %17
  %19 = phi i32 [ 1, %17 ], [ 0, %2 ], [ 0, %13 ]
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_u16(%struct.cbb_st* nocapture, i16 zeroext) local_unnamed_addr #0 {
  %3 = tail call i32 @CBB_flush(%struct.cbb_st* %0)
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %49, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %7 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %6, align 8
  %8 = icmp eq %struct.cbb_buffer_st* %7, null
  br i1 %8, label %49, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, 2
  %13 = icmp ugt i64 %11, -3
  br i1 %13, label %38, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %12, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  br label %40

21:                                               ; preds = %14
  %22 = shl i64 %16, 1
  %23 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 3
  %24 = load i8, i8* %23, align 8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %21
  %27 = icmp ult i64 %22, %16
  %28 = icmp ult i64 %22, %12
  %29 = or i1 %27, %28
  %30 = select i1 %29, i64 %12, i64 %22
  %31 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* @OPENSSL_realloc(i8* %32, i64 %30) #8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %26
  store i8* %33, i8** %31, align 8
  store i64 %30, i64* %15, align 8
  %36 = load i64, i64* %10, align 8
  %37 = add i64 %36, 2
  br label %40

38:                                               ; preds = %26, %21, %9
  %39 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 4
  store i8 1, i8* %39, align 1
  br label %49

40:                                               ; preds = %35, %18
  %41 = phi i64 [ %12, %18 ], [ %37, %35 ]
  %42 = phi i64 [ %11, %18 ], [ %36, %35 ]
  %43 = phi i8* [ %20, %18 ], [ %33, %35 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %42
  store i64 %41, i64* %10, align 8
  %45 = trunc i16 %1 to i8
  %46 = getelementptr inbounds i8, i8* %44, i64 1
  store i8 %45, i8* %46, align 1
  %47 = lshr i16 %1, 8
  %48 = trunc i16 %47 to i8
  store i8 %48, i8* %44, align 1
  br label %49

49:                                               ; preds = %40, %38, %5, %2
  %50 = phi i32 [ 0, %2 ], [ 1, %40 ], [ 0, %38 ], [ 0, %5 ]
  ret i32 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_u16le(%struct.cbb_st* nocapture, i16 zeroext) local_unnamed_addr #0 {
  %3 = tail call i16 @llvm.bswap.i16(i16 %1) #8
  %4 = tail call i32 @CBB_flush(%struct.cbb_st* %0) #8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %50, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %8 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %7, align 8
  %9 = icmp eq %struct.cbb_buffer_st* %8, null
  br i1 %9, label %50, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, 2
  %14 = icmp ugt i64 %12, -3
  br i1 %14, label %39, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %13, %17
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  br label %41

22:                                               ; preds = %15
  %23 = shl i64 %17, 1
  %24 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 3
  %25 = load i8, i8* %24, align 8
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %39, label %27

27:                                               ; preds = %22
  %28 = icmp ult i64 %23, %17
  %29 = icmp ult i64 %23, %13
  %30 = or i1 %28, %29
  %31 = select i1 %30, i64 %13, i64 %23
  %32 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = tail call i8* @OPENSSL_realloc(i8* %33, i64 %31) #8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %27
  store i8* %34, i8** %32, align 8
  store i64 %31, i64* %16, align 8
  %37 = load i64, i64* %11, align 8
  %38 = add i64 %37, 2
  br label %41

39:                                               ; preds = %27, %22, %10
  %40 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 4
  store i8 1, i8* %40, align 1
  br label %50

41:                                               ; preds = %36, %19
  %42 = phi i64 [ %13, %19 ], [ %38, %36 ]
  %43 = phi i64 [ %12, %19 ], [ %37, %36 ]
  %44 = phi i8* [ %21, %19 ], [ %34, %36 ]
  %45 = getelementptr inbounds i8, i8* %44, i64 %43
  store i64 %42, i64* %11, align 8
  %46 = trunc i16 %3 to i8
  %47 = getelementptr inbounds i8, i8* %45, i64 1
  store i8 %46, i8* %47, align 1
  %48 = lshr i16 %3, 8
  %49 = trunc i16 %48 to i8
  store i8 %49, i8* %45, align 1
  br label %50

50:                                               ; preds = %2, %6, %39, %41
  %51 = phi i32 [ 0, %2 ], [ 1, %41 ], [ 0, %39 ], [ 0, %6 ]
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_u24(%struct.cbb_st* nocapture, i32) local_unnamed_addr #0 {
  %3 = tail call i32 @CBB_flush(%struct.cbb_st* %0)
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %55, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %7 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %6, align 8
  %8 = icmp eq %struct.cbb_buffer_st* %7, null
  br i1 %8, label %55, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, 3
  %13 = icmp ugt i64 %11, -4
  br i1 %13, label %38, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %12, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  br label %40

21:                                               ; preds = %14
  %22 = shl i64 %16, 1
  %23 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 3
  %24 = load i8, i8* %23, align 8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %21
  %27 = icmp ult i64 %22, %16
  %28 = icmp ult i64 %22, %12
  %29 = or i1 %27, %28
  %30 = select i1 %29, i64 %12, i64 %22
  %31 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* @OPENSSL_realloc(i8* %32, i64 %30) #8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %26
  store i8* %33, i8** %31, align 8
  store i64 %30, i64* %15, align 8
  %36 = load i64, i64* %10, align 8
  %37 = add i64 %36, 3
  br label %40

38:                                               ; preds = %26, %21, %9
  %39 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 4
  store i8 1, i8* %39, align 1
  br label %55

40:                                               ; preds = %35, %18
  %41 = phi i64 [ %12, %18 ], [ %37, %35 ]
  %42 = phi i64 [ %11, %18 ], [ %36, %35 ]
  %43 = phi i8* [ %20, %18 ], [ %33, %35 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %42
  store i64 %41, i64* %10, align 8
  %45 = trunc i32 %1 to i8
  %46 = getelementptr inbounds i8, i8* %44, i64 2
  store i8 %45, i8* %46, align 1
  %47 = lshr i32 %1, 8
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %44, i64 1
  store i8 %48, i8* %49, align 1
  %50 = lshr i32 %1, 16
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %44, align 1
  %52 = icmp ult i32 %1, 16777216
  br i1 %52, label %55, label %53

53:                                               ; preds = %40
  %54 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 4
  store i8 1, i8* %54, align 1
  br label %55

55:                                               ; preds = %53, %40, %38, %5, %2
  %56 = phi i32 [ 0, %2 ], [ 0, %53 ], [ 1, %40 ], [ 0, %38 ], [ 0, %5 ]
  ret i32 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_u32(%struct.cbb_st* nocapture, i32) local_unnamed_addr #0 {
  %3 = tail call i32 @CBB_flush(%struct.cbb_st* %0)
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %55, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %7 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %6, align 8
  %8 = icmp eq %struct.cbb_buffer_st* %7, null
  br i1 %8, label %55, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, 4
  %13 = icmp ugt i64 %11, -5
  br i1 %13, label %38, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %12, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  br label %40

21:                                               ; preds = %14
  %22 = shl i64 %16, 1
  %23 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 3
  %24 = load i8, i8* %23, align 8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %21
  %27 = icmp ult i64 %22, %16
  %28 = icmp ult i64 %22, %12
  %29 = or i1 %27, %28
  %30 = select i1 %29, i64 %12, i64 %22
  %31 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* @OPENSSL_realloc(i8* %32, i64 %30) #8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %26
  store i8* %33, i8** %31, align 8
  store i64 %30, i64* %15, align 8
  %36 = load i64, i64* %10, align 8
  %37 = add i64 %36, 4
  br label %40

38:                                               ; preds = %26, %21, %9
  %39 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 4
  store i8 1, i8* %39, align 1
  br label %55

40:                                               ; preds = %35, %18
  %41 = phi i64 [ %12, %18 ], [ %37, %35 ]
  %42 = phi i64 [ %11, %18 ], [ %36, %35 ]
  %43 = phi i8* [ %20, %18 ], [ %33, %35 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %42
  store i64 %41, i64* %10, align 8
  %45 = trunc i32 %1 to i8
  %46 = getelementptr inbounds i8, i8* %44, i64 3
  store i8 %45, i8* %46, align 1
  %47 = lshr i32 %1, 8
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %44, i64 2
  store i8 %48, i8* %49, align 1
  %50 = lshr i32 %1, 16
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %44, i64 1
  store i8 %51, i8* %52, align 1
  %53 = lshr i32 %1, 24
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %44, align 1
  br label %55

55:                                               ; preds = %40, %38, %5, %2
  %56 = phi i32 [ 0, %2 ], [ 1, %40 ], [ 0, %38 ], [ 0, %5 ]
  ret i32 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_u32le(%struct.cbb_st* nocapture, i32) local_unnamed_addr #0 {
  %3 = tail call i32 @llvm.bswap.i32(i32 %1) #8
  %4 = tail call i32 @CBB_flush(%struct.cbb_st* %0) #8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %56, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %8 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %7, align 8
  %9 = icmp eq %struct.cbb_buffer_st* %8, null
  br i1 %9, label %56, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, 4
  %14 = icmp ugt i64 %12, -5
  br i1 %14, label %39, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %13, %17
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  br label %41

22:                                               ; preds = %15
  %23 = shl i64 %17, 1
  %24 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 3
  %25 = load i8, i8* %24, align 8
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %39, label %27

27:                                               ; preds = %22
  %28 = icmp ult i64 %23, %17
  %29 = icmp ult i64 %23, %13
  %30 = or i1 %28, %29
  %31 = select i1 %30, i64 %13, i64 %23
  %32 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = tail call i8* @OPENSSL_realloc(i8* %33, i64 %31) #8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %27
  store i8* %34, i8** %32, align 8
  store i64 %31, i64* %16, align 8
  %37 = load i64, i64* %11, align 8
  %38 = add i64 %37, 4
  br label %41

39:                                               ; preds = %27, %22, %10
  %40 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %8, i64 0, i32 4
  store i8 1, i8* %40, align 1
  br label %56

41:                                               ; preds = %36, %19
  %42 = phi i64 [ %13, %19 ], [ %38, %36 ]
  %43 = phi i64 [ %12, %19 ], [ %37, %36 ]
  %44 = phi i8* [ %21, %19 ], [ %34, %36 ]
  %45 = getelementptr inbounds i8, i8* %44, i64 %43
  store i64 %42, i64* %11, align 8
  %46 = trunc i32 %3 to i8
  %47 = getelementptr inbounds i8, i8* %45, i64 3
  store i8 %46, i8* %47, align 1
  %48 = lshr i32 %3, 8
  %49 = trunc i32 %48 to i8
  %50 = getelementptr inbounds i8, i8* %45, i64 2
  store i8 %49, i8* %50, align 1
  %51 = lshr i32 %3, 16
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds i8, i8* %45, i64 1
  store i8 %52, i8* %53, align 1
  %54 = lshr i32 %3, 24
  %55 = trunc i32 %54 to i8
  store i8 %55, i8* %45, align 1
  br label %56

56:                                               ; preds = %2, %6, %39, %41
  %57 = phi i32 [ 0, %2 ], [ 1, %41 ], [ 0, %39 ], [ 0, %6 ]
  ret i32 %57
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_u64(%struct.cbb_st* nocapture, i64) local_unnamed_addr #0 {
  %3 = tail call i32 @CBB_flush(%struct.cbb_st* %0)
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %67, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %7 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %6, align 8
  %8 = icmp eq %struct.cbb_buffer_st* %7, null
  br i1 %8, label %67, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, 8
  %13 = icmp ugt i64 %11, -9
  br i1 %13, label %38, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = icmp ugt i64 %12, %16
  br i1 %17, label %21, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  br label %40

21:                                               ; preds = %14
  %22 = shl i64 %16, 1
  %23 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 3
  %24 = load i8, i8* %23, align 8
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %21
  %27 = icmp ult i64 %22, %16
  %28 = icmp ult i64 %22, %12
  %29 = or i1 %27, %28
  %30 = select i1 %29, i64 %12, i64 %22
  %31 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = tail call i8* @OPENSSL_realloc(i8* %32, i64 %30) #8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %26
  store i8* %33, i8** %31, align 8
  store i64 %30, i64* %15, align 8
  %36 = load i64, i64* %10, align 8
  %37 = add i64 %36, 8
  br label %40

38:                                               ; preds = %26, %21, %9
  %39 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %7, i64 0, i32 4
  store i8 1, i8* %39, align 1
  br label %67

40:                                               ; preds = %35, %18
  %41 = phi i64 [ %12, %18 ], [ %37, %35 ]
  %42 = phi i64 [ %11, %18 ], [ %36, %35 ]
  %43 = phi i8* [ %20, %18 ], [ %33, %35 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %42
  store i64 %41, i64* %10, align 8
  %45 = trunc i64 %1 to i8
  %46 = getelementptr inbounds i8, i8* %44, i64 7
  store i8 %45, i8* %46, align 1
  %47 = lshr i64 %1, 8
  %48 = trunc i64 %47 to i8
  %49 = getelementptr inbounds i8, i8* %44, i64 6
  store i8 %48, i8* %49, align 1
  %50 = lshr i64 %1, 16
  %51 = trunc i64 %50 to i8
  %52 = getelementptr inbounds i8, i8* %44, i64 5
  store i8 %51, i8* %52, align 1
  %53 = lshr i64 %1, 24
  %54 = trunc i64 %53 to i8
  %55 = getelementptr inbounds i8, i8* %44, i64 4
  store i8 %54, i8* %55, align 1
  %56 = lshr i64 %1, 32
  %57 = trunc i64 %56 to i8
  %58 = getelementptr inbounds i8, i8* %44, i64 3
  store i8 %57, i8* %58, align 1
  %59 = lshr i64 %1, 40
  %60 = trunc i64 %59 to i8
  %61 = getelementptr inbounds i8, i8* %44, i64 2
  store i8 %60, i8* %61, align 1
  %62 = lshr i64 %1, 48
  %63 = trunc i64 %62 to i8
  %64 = getelementptr inbounds i8, i8* %44, i64 1
  store i8 %63, i8* %64, align 1
  %65 = lshr i64 %1, 56
  %66 = trunc i64 %65 to i8
  store i8 %66, i8* %44, align 1
  br label %67

67:                                               ; preds = %40, %38, %5, %2
  %68 = phi i32 [ 0, %2 ], [ 1, %40 ], [ 0, %38 ], [ 0, %5 ]
  ret i32 %68
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_u64le(%struct.cbb_st* nocapture, i64) local_unnamed_addr #0 {
  %3 = tail call i64 @llvm.bswap.i64(i64 %1) #8
  %4 = tail call i32 @CBB_add_u64(%struct.cbb_st* %0, i64 %3)
  ret i32 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @CBB_discard_child(%struct.cbb_st* nocapture) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 1
  %3 = load %struct.cbb_st*, %struct.cbb_st** %2, align 8
  %4 = icmp eq %struct.cbb_st* %3, null
  br i1 %4, label %13, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %3, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %9 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %8, align 8
  %10 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %9, i64 0, i32 1
  store i64 %7, i64* %10, align 8
  %11 = load %struct.cbb_st*, %struct.cbb_st** %2, align 8
  %12 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %11, i64 0, i32 0
  store %struct.cbb_buffer_st* null, %struct.cbb_buffer_st** %12, align 8
  store %struct.cbb_st* null, %struct.cbb_st** %2, align 8
  br label %13

13:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_asn1_uint64(%struct.cbb_st* nocapture, i64) local_unnamed_addr #0 {
  %3 = alloca %struct.cbb_st, align 8
  %4 = bitcast %struct.cbb_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 32, i1 false)
  %5 = call i32 @CBB_add_asn1(%struct.cbb_st* %0, %struct.cbb_st* nonnull %3, i32 2)
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %157, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %3, i64 0, i32 0
  br label %9

9:                                                ; preds = %107, %7
  %10 = phi i64 [ 0, %7 ], [ %109, %107 ]
  %11 = phi i32 [ 0, %7 ], [ %108, %107 ]
  %12 = shl i64 %10, 3
  %13 = sub nuw nsw i64 56, %12
  %14 = lshr i64 %1, %13
  %15 = trunc i64 %14 to i8
  %16 = icmp eq i32 %11, 0
  br i1 %16, label %17, label %64

17:                                               ; preds = %9
  %18 = and i64 %14, 255
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %107, label %20

20:                                               ; preds = %17
  %21 = icmp slt i8 %15, 0
  br i1 %21, label %22, label %64

22:                                               ; preds = %20
  %23 = call i32 @CBB_flush(%struct.cbb_st* nonnull %3) #8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %157, label %25

25:                                               ; preds = %22
  %26 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %8, align 8
  %27 = icmp eq %struct.cbb_buffer_st* %26, null
  br i1 %27, label %157, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %26, i64 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %30, 1
  %32 = icmp eq i64 %30, -1
  br i1 %32, label %57, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %26, i64 0, i32 2
  %35 = load i64, i64* %34, align 8
  %36 = icmp ugt i64 %31, %35
  br i1 %36, label %40, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %26, i64 0, i32 0
  %39 = load i8*, i8** %38, align 8
  br label %59

40:                                               ; preds = %33
  %41 = shl i64 %35, 1
  %42 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %26, i64 0, i32 3
  %43 = load i8, i8* %42, align 8
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %57, label %45

45:                                               ; preds = %40
  %46 = icmp ult i64 %41, %35
  %47 = icmp ult i64 %41, %31
  %48 = or i1 %46, %47
  %49 = select i1 %48, i64 %31, i64 %41
  %50 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %26, i64 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = call i8* @OPENSSL_realloc(i8* %51, i64 %49) #8
  %53 = icmp eq i8* %52, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %45
  store i8* %52, i8** %50, align 8
  store i64 %49, i64* %34, align 8
  %55 = load i64, i64* %29, align 8
  %56 = add i64 %55, 1
  br label %59

57:                                               ; preds = %45, %40, %28
  %58 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %26, i64 0, i32 4
  store i8 1, i8* %58, align 1
  br label %157

59:                                               ; preds = %37, %54
  %60 = phi i64 [ %31, %37 ], [ %56, %54 ]
  %61 = phi i64 [ %30, %37 ], [ %55, %54 ]
  %62 = phi i8* [ %39, %37 ], [ %52, %54 ]
  %63 = getelementptr inbounds i8, i8* %62, i64 %61
  store i64 %60, i64* %29, align 8
  store i8 0, i8* %63, align 1
  br label %64

64:                                               ; preds = %59, %20, %9
  %65 = phi i32 [ %11, %9 ], [ 1, %59 ], [ 1, %20 ]
  %66 = call i32 @CBB_flush(%struct.cbb_st* nonnull %3) #8
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %157, label %68

68:                                               ; preds = %64
  %69 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %8, align 8
  %70 = icmp eq %struct.cbb_buffer_st* %69, null
  br i1 %70, label %157, label %71

71:                                               ; preds = %68
  %72 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %69, i64 0, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = add i64 %73, 1
  %75 = icmp eq i64 %73, -1
  br i1 %75, label %100, label %76

76:                                               ; preds = %71
  %77 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %69, i64 0, i32 2
  %78 = load i64, i64* %77, align 8
  %79 = icmp ugt i64 %74, %78
  br i1 %79, label %83, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %69, i64 0, i32 0
  %82 = load i8*, i8** %81, align 8
  br label %102

83:                                               ; preds = %76
  %84 = shl i64 %78, 1
  %85 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %69, i64 0, i32 3
  %86 = load i8, i8* %85, align 8
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %100, label %88

88:                                               ; preds = %83
  %89 = icmp ult i64 %84, %78
  %90 = icmp ult i64 %84, %74
  %91 = or i1 %89, %90
  %92 = select i1 %91, i64 %74, i64 %84
  %93 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %69, i64 0, i32 0
  %94 = load i8*, i8** %93, align 8
  %95 = call i8* @OPENSSL_realloc(i8* %94, i64 %92) #8
  %96 = icmp eq i8* %95, null
  br i1 %96, label %100, label %97

97:                                               ; preds = %88
  store i8* %95, i8** %93, align 8
  store i64 %92, i64* %77, align 8
  %98 = load i64, i64* %72, align 8
  %99 = add i64 %98, 1
  br label %102

100:                                              ; preds = %88, %83, %71
  %101 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %69, i64 0, i32 4
  store i8 1, i8* %101, align 1
  br label %157

102:                                              ; preds = %80, %97
  %103 = phi i64 [ %74, %80 ], [ %99, %97 ]
  %104 = phi i64 [ %73, %80 ], [ %98, %97 ]
  %105 = phi i8* [ %82, %80 ], [ %95, %97 ]
  %106 = getelementptr inbounds i8, i8* %105, i64 %104
  store i64 %103, i64* %72, align 8
  store i8 %15, i8* %106, align 1
  br label %107

107:                                              ; preds = %17, %102
  %108 = phi i32 [ 0, %17 ], [ %65, %102 ]
  %109 = add nuw nsw i64 %10, 1
  %110 = icmp eq i64 %109, 8
  br i1 %110, label %111, label %9

111:                                              ; preds = %107
  %112 = icmp eq i32 %108, 0
  br i1 %112, label %113, label %155

113:                                              ; preds = %111
  %114 = call i32 @CBB_flush(%struct.cbb_st* nonnull %3) #8
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %157, label %116

116:                                              ; preds = %113
  %117 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %8, align 8
  %118 = icmp eq %struct.cbb_buffer_st* %117, null
  br i1 %118, label %157, label %119

119:                                              ; preds = %116
  %120 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %117, i64 0, i32 1
  %121 = load i64, i64* %120, align 8
  %122 = add i64 %121, 1
  %123 = icmp eq i64 %121, -1
  br i1 %123, label %148, label %124

124:                                              ; preds = %119
  %125 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %117, i64 0, i32 2
  %126 = load i64, i64* %125, align 8
  %127 = icmp ugt i64 %122, %126
  br i1 %127, label %131, label %128

128:                                              ; preds = %124
  %129 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %117, i64 0, i32 0
  %130 = load i8*, i8** %129, align 8
  br label %150

131:                                              ; preds = %124
  %132 = shl i64 %126, 1
  %133 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %117, i64 0, i32 3
  %134 = load i8, i8* %133, align 8
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %148, label %136

136:                                              ; preds = %131
  %137 = icmp ult i64 %132, %126
  %138 = icmp ult i64 %132, %122
  %139 = or i1 %137, %138
  %140 = select i1 %139, i64 %122, i64 %132
  %141 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %117, i64 0, i32 0
  %142 = load i8*, i8** %141, align 8
  %143 = call i8* @OPENSSL_realloc(i8* %142, i64 %140) #8
  %144 = icmp eq i8* %143, null
  br i1 %144, label %148, label %145

145:                                              ; preds = %136
  store i8* %143, i8** %141, align 8
  store i64 %140, i64* %125, align 8
  %146 = load i64, i64* %120, align 8
  %147 = add i64 %146, 1
  br label %150

148:                                              ; preds = %136, %131, %119
  %149 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %117, i64 0, i32 4
  store i8 1, i8* %149, align 1
  br label %157

150:                                              ; preds = %128, %145
  %151 = phi i64 [ %122, %128 ], [ %147, %145 ]
  %152 = phi i64 [ %121, %128 ], [ %146, %145 ]
  %153 = phi i8* [ %130, %128 ], [ %143, %145 ]
  %154 = getelementptr inbounds i8, i8* %153, i64 %152
  store i64 %151, i64* %120, align 8
  store i8 0, i8* %154, align 1
  br label %155

155:                                              ; preds = %150, %111
  %156 = call i32 @CBB_flush(%struct.cbb_st* %0)
  br label %157

157:                                              ; preds = %25, %22, %68, %64, %116, %148, %113, %57, %100, %2, %155
  %158 = phi i32 [ %156, %155 ], [ 0, %2 ], [ 0, %100 ], [ 0, %57 ], [ 0, %113 ], [ 0, %148 ], [ 0, %116 ], [ 0, %64 ], [ 0, %68 ], [ 0, %22 ], [ 0, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #8
  ret i32 %158
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_asn1_int64(%struct.cbb_st* nocapture, i64) local_unnamed_addr #0 {
  %3 = alloca %union.anon, align 8
  %4 = alloca %struct.cbb_st, align 8
  %5 = icmp sgt i64 %1, -1
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = tail call i32 @CBB_add_asn1_uint64(%struct.cbb_st* %0, i64 %1)
  br label %77

8:                                                ; preds = %2
  %9 = bitcast %union.anon* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #8
  %10 = getelementptr inbounds %union.anon, %union.anon* %3, i64 0, i32 0
  store i64 %1, i64* %10, align 8
  %11 = bitcast %union.anon* %3 to [8 x i8]*
  %12 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 7
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, -1
  br i1 %14, label %15, label %19

15:                                               ; preds = %8
  %16 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 6
  %17 = load i8, i8* %16, align 2
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %79, label %19

19:                                               ; preds = %123, %119, %115, %111, %107, %103, %99, %95, %91, %87, %83, %79, %8, %15
  %20 = phi i64 [ 7, %8 ], [ 7, %15 ], [ 6, %79 ], [ 6, %83 ], [ 5, %87 ], [ 5, %91 ], [ 4, %95 ], [ 4, %99 ], [ 3, %103 ], [ 3, %107 ], [ 2, %111 ], [ 2, %115 ], [ 1, %119 ], [ %127, %123 ]
  %21 = bitcast %struct.cbb_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 32, i1 false)
  %22 = call i32 @CBB_add_asn1(%struct.cbb_st* %0, %struct.cbb_st* nonnull %4, i32 2)
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %75, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %4, i64 0, i32 0
  br label %26

26:                                               ; preds = %24, %66
  %27 = phi i64 [ %20, %24 ], [ %71, %66 ]
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = call i32 @CBB_flush(%struct.cbb_st* nonnull %4) #8
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %75, label %32

32:                                               ; preds = %26
  %33 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %25, align 8
  %34 = icmp eq %struct.cbb_buffer_st* %33, null
  br i1 %34, label %75, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %33, i64 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %37, 1
  %39 = icmp eq i64 %37, -1
  br i1 %39, label %64, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %33, i64 0, i32 2
  %42 = load i64, i64* %41, align 8
  %43 = icmp ugt i64 %38, %42
  br i1 %43, label %47, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %33, i64 0, i32 0
  %46 = load i8*, i8** %45, align 8
  br label %66

47:                                               ; preds = %40
  %48 = shl i64 %42, 1
  %49 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %33, i64 0, i32 3
  %50 = load i8, i8* %49, align 8
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %64, label %52

52:                                               ; preds = %47
  %53 = icmp ult i64 %48, %42
  %54 = icmp ult i64 %48, %38
  %55 = or i1 %53, %54
  %56 = select i1 %55, i64 %38, i64 %48
  %57 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %33, i64 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = call i8* @OPENSSL_realloc(i8* %58, i64 %56) #8
  %60 = icmp eq i8* %59, null
  br i1 %60, label %64, label %61

61:                                               ; preds = %52
  store i8* %59, i8** %57, align 8
  store i64 %56, i64* %41, align 8
  %62 = load i64, i64* %36, align 8
  %63 = add i64 %62, 1
  br label %66

64:                                               ; preds = %52, %47, %35
  %65 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %33, i64 0, i32 4
  store i8 1, i8* %65, align 1
  br label %75

66:                                               ; preds = %61, %44
  %67 = phi i64 [ %38, %44 ], [ %63, %61 ]
  %68 = phi i64 [ %37, %44 ], [ %62, %61 ]
  %69 = phi i8* [ %46, %44 ], [ %59, %61 ]
  %70 = getelementptr inbounds i8, i8* %69, i64 %68
  store i64 %67, i64* %36, align 8
  store i8 %29, i8* %70, align 1
  %71 = add nsw i64 %27, -1
  %72 = icmp sgt i64 %27, 0
  br i1 %72, label %26, label %73

73:                                               ; preds = %66
  %74 = call i32 @CBB_flush(%struct.cbb_st* %0)
  br label %75

75:                                               ; preds = %32, %26, %64, %19, %73
  %76 = phi i32 [ %74, %73 ], [ 0, %19 ], [ 0, %64 ], [ 0, %26 ], [ 0, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #8
  br label %77

77:                                               ; preds = %75, %6
  %78 = phi i32 [ %7, %6 ], [ %76, %75 ]
  ret i32 %78

79:                                               ; preds = %15
  %80 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 6
  %81 = load i8, i8* %80, align 2
  %82 = icmp eq i8 %81, -1
  br i1 %82, label %83, label %19

83:                                               ; preds = %79
  %84 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 5
  %85 = load i8, i8* %84, align 1
  %86 = icmp slt i8 %85, 0
  br i1 %86, label %87, label %19

87:                                               ; preds = %83
  %88 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 5
  %89 = load i8, i8* %88, align 1
  %90 = icmp eq i8 %89, -1
  br i1 %90, label %91, label %19

91:                                               ; preds = %87
  %92 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 4
  %93 = load i8, i8* %92, align 4
  %94 = icmp slt i8 %93, 0
  br i1 %94, label %95, label %19

95:                                               ; preds = %91
  %96 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 4
  %97 = load i8, i8* %96, align 4
  %98 = icmp eq i8 %97, -1
  br i1 %98, label %99, label %19

99:                                               ; preds = %95
  %100 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 3
  %101 = load i8, i8* %100, align 1
  %102 = icmp slt i8 %101, 0
  br i1 %102, label %103, label %19

103:                                              ; preds = %99
  %104 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 3
  %105 = load i8, i8* %104, align 1
  %106 = icmp eq i8 %105, -1
  br i1 %106, label %107, label %19

107:                                              ; preds = %103
  %108 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 2
  %109 = load i8, i8* %108, align 2
  %110 = icmp slt i8 %109, 0
  br i1 %110, label %111, label %19

111:                                              ; preds = %107
  %112 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 2
  %113 = load i8, i8* %112, align 2
  %114 = icmp eq i8 %113, -1
  br i1 %114, label %115, label %19

115:                                              ; preds = %111
  %116 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 1
  %117 = load i8, i8* %116, align 1
  %118 = icmp slt i8 %117, 0
  br i1 %118, label %119, label %19

119:                                              ; preds = %115
  %120 = getelementptr inbounds [8 x i8], [8 x i8]* %11, i64 0, i64 1
  %121 = load i8, i8* %120, align 1
  %122 = icmp eq i8 %121, -1
  br i1 %122, label %123, label %19

123:                                              ; preds = %119
  %124 = bitcast %union.anon* %3 to i8*
  %125 = load i8, i8* %124, align 8
  %126 = icmp slt i8 %125, 0
  %127 = select i1 %126, i64 0, i64 1
  br label %19
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_asn1_octet_string(%struct.cbb_st* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %4 = alloca %struct.cbb_st, align 8
  %5 = bitcast %struct.cbb_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 32, i1 false)
  %6 = call i32 @CBB_add_asn1(%struct.cbb_st* %0, %struct.cbb_st* nonnull %4, i32 4)
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %57, label %8

8:                                                ; preds = %3
  %9 = call i32 @CBB_flush(%struct.cbb_st* nonnull %4) #8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %57, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %4, i64 0, i32 0
  %13 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %12, align 8
  %14 = icmp eq %struct.cbb_buffer_st* %13, null
  br i1 %14, label %57, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %13, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, %2
  %19 = icmp ult i64 %18, %17
  br i1 %19, label %44, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %13, i64 0, i32 2
  %22 = load i64, i64* %21, align 8
  %23 = icmp ugt i64 %18, %22
  br i1 %23, label %27, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %13, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  br label %46

27:                                               ; preds = %20
  %28 = shl i64 %22, 1
  %29 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %13, i64 0, i32 3
  %30 = load i8, i8* %29, align 8
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %44, label %32

32:                                               ; preds = %27
  %33 = icmp ult i64 %28, %22
  %34 = icmp ult i64 %28, %18
  %35 = or i1 %33, %34
  %36 = select i1 %35, i64 %18, i64 %28
  %37 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %13, i64 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = call i8* @OPENSSL_realloc(i8* %38, i64 %36) #8
  %40 = icmp eq i8* %39, null
  br i1 %40, label %44, label %41

41:                                               ; preds = %32
  store i8* %39, i8** %37, align 8
  store i64 %36, i64* %21, align 8
  %42 = load i64, i64* %16, align 8
  %43 = add i64 %42, %2
  br label %46

44:                                               ; preds = %32, %27, %15
  %45 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %13, i64 0, i32 4
  store i8 1, i8* %45, align 1
  br label %57

46:                                               ; preds = %41, %24
  %47 = phi i64 [ %18, %24 ], [ %43, %41 ]
  %48 = phi i64 [ %17, %24 ], [ %42, %41 ]
  %49 = phi i8* [ %26, %24 ], [ %39, %41 ]
  store i64 %47, i64* %16, align 8
  %50 = icmp eq i64 %2, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds i8, i8* %49, i64 %48
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %1, i64 %2, i1 false) #8
  br label %53

53:                                               ; preds = %51, %46
  %54 = call i32 @CBB_flush(%struct.cbb_st* %0)
  %55 = icmp ne i32 %54, 0
  %56 = zext i1 %55 to i32
  br label %57

57:                                               ; preds = %11, %44, %8, %53, %3
  %58 = phi i32 [ 0, %3 ], [ %56, %53 ], [ 0, %8 ], [ 0, %44 ], [ 0, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #8
  ret i32 %58
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_asn1_bool(%struct.cbb_st* nocapture, i32) local_unnamed_addr #0 {
  %3 = alloca %struct.cbb_st, align 8
  %4 = bitcast %struct.cbb_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 32, i1 false)
  %5 = call i32 @CBB_add_asn1(%struct.cbb_st* %0, %struct.cbb_st* nonnull %3, i32 1)
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %55, label %7

7:                                                ; preds = %2
  %8 = icmp ne i32 %1, 0
  %9 = sext i1 %8 to i8
  %10 = call i32 @CBB_flush(%struct.cbb_st* nonnull %3) #8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %55, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %3, i64 0, i32 0
  %14 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %13, align 8
  %15 = icmp eq %struct.cbb_buffer_st* %14, null
  br i1 %15, label %55, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %14, i64 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, 1
  %20 = icmp eq i64 %18, -1
  br i1 %20, label %45, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %14, i64 0, i32 2
  %23 = load i64, i64* %22, align 8
  %24 = icmp ugt i64 %19, %23
  br i1 %24, label %28, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %14, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  br label %47

28:                                               ; preds = %21
  %29 = shl i64 %23, 1
  %30 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %14, i64 0, i32 3
  %31 = load i8, i8* %30, align 8
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %45, label %33

33:                                               ; preds = %28
  %34 = icmp ult i64 %29, %23
  %35 = icmp ult i64 %29, %19
  %36 = or i1 %34, %35
  %37 = select i1 %36, i64 %19, i64 %29
  %38 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %14, i64 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = call i8* @OPENSSL_realloc(i8* %39, i64 %37) #8
  %41 = icmp eq i8* %40, null
  br i1 %41, label %45, label %42

42:                                               ; preds = %33
  store i8* %40, i8** %38, align 8
  store i64 %37, i64* %22, align 8
  %43 = load i64, i64* %17, align 8
  %44 = add i64 %43, 1
  br label %47

45:                                               ; preds = %33, %28, %16
  %46 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %14, i64 0, i32 4
  store i8 1, i8* %46, align 1
  br label %55

47:                                               ; preds = %42, %25
  %48 = phi i64 [ %19, %25 ], [ %44, %42 ]
  %49 = phi i64 [ %18, %25 ], [ %43, %42 ]
  %50 = phi i8* [ %27, %25 ], [ %40, %42 ]
  %51 = getelementptr inbounds i8, i8* %50, i64 %49
  store i64 %48, i64* %17, align 8
  store i8 %9, i8* %51, align 1
  %52 = call i32 @CBB_flush(%struct.cbb_st* %0)
  %53 = icmp ne i32 %52, 0
  %54 = zext i1 %53 to i32
  br label %55

55:                                               ; preds = %12, %45, %7, %47, %2
  %56 = phi i32 [ 0, %2 ], [ %54, %47 ], [ 0, %7 ], [ 0, %45 ], [ 0, %12 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #8
  ret i32 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_add_asn1_oid_from_text(%struct.cbb_st* nocapture, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca %struct.cbs_st, align 8
  %8 = tail call i32 @CBB_flush(%struct.cbb_st* %0)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %278, label %10

10:                                               ; preds = %3
  %11 = bitcast %struct.cbs_st* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #8
  %12 = bitcast %struct.cbs_st* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false)
  call void @CBS_init(%struct.cbs_st* nonnull %7, i8* %1, i64 %2) #8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #8
  store i8 -86, i8* %6, align 1
  %13 = call i32 @CBS_get_u8(%struct.cbs_st* nonnull %7, i8* nonnull %6) #8
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #8
  br label %276

16:                                               ; preds = %10, %42
  %17 = phi i64 [ %44, %42 ], [ 0, %10 ]
  %18 = phi i32 [ 1, %42 ], [ 0, %10 ]
  %19 = load i8, i8* %6, align 1
  %20 = icmp eq i8 %19, 46
  br i1 %20, label %21, label %26

21:                                               ; preds = %16
  %22 = call i64 @CBS_len(%struct.cbs_st* nonnull %7) #8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %48

24:                                               ; preds = %21
  %25 = load i8, i8* %6, align 1
  br label %26

26:                                               ; preds = %24, %16
  %27 = phi i8 [ %25, %24 ], [ %19, %16 ]
  %28 = add i8 %27, -48
  %29 = icmp ugt i8 %28, 9
  br i1 %29, label %41, label %30

30:                                               ; preds = %26
  %31 = icmp ne i32 %18, 0
  %32 = icmp eq i64 %17, 0
  %33 = and i1 %32, %31
  %34 = icmp ugt i64 %17, 1844674407370955161
  %35 = or i1 %34, %33
  br i1 %35, label %41, label %36

36:                                               ; preds = %30
  %37 = mul i64 %17, 10
  %38 = zext i8 %27 to i64
  %39 = sub nsw i64 47, %38
  %40 = icmp ugt i64 %37, %39
  br i1 %40, label %41, label %42

41:                                               ; preds = %26, %30, %36
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #8
  br label %276

42:                                               ; preds = %36
  %43 = add i64 %37, -48
  %44 = add i64 %43, %38
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #8
  store i8 -86, i8* %6, align 1
  %45 = call i32 @CBS_get_u8(%struct.cbs_st* nonnull %7, i8* nonnull %6) #8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %16

47:                                               ; preds = %42
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #8
  br label %50

48:                                               ; preds = %21
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #8
  %49 = icmp eq i32 %18, 0
  br i1 %49, label %276, label %50

50:                                               ; preds = %47, %48
  %51 = phi i64 [ %44, %47 ], [ %17, %48 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #8
  store i8 -86, i8* %5, align 1
  %52 = call i32 @CBS_get_u8(%struct.cbs_st* nonnull %7, i8* nonnull %5) #8
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %50
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #8
  br label %276

55:                                               ; preds = %50, %81
  %56 = phi i64 [ %83, %81 ], [ 0, %50 ]
  %57 = phi i32 [ 1, %81 ], [ 0, %50 ]
  %58 = load i8, i8* %5, align 1
  %59 = icmp eq i8 %58, 46
  br i1 %59, label %60, label %65

60:                                               ; preds = %55
  %61 = call i64 @CBS_len(%struct.cbs_st* nonnull %7) #8
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %87

63:                                               ; preds = %60
  %64 = load i8, i8* %5, align 1
  br label %65

65:                                               ; preds = %63, %55
  %66 = phi i8 [ %64, %63 ], [ %58, %55 ]
  %67 = add i8 %66, -48
  %68 = icmp ugt i8 %67, 9
  br i1 %68, label %80, label %69

69:                                               ; preds = %65
  %70 = icmp ne i32 %57, 0
  %71 = icmp eq i64 %56, 0
  %72 = and i1 %71, %70
  %73 = icmp ugt i64 %56, 1844674407370955161
  %74 = or i1 %73, %72
  br i1 %74, label %80, label %75

75:                                               ; preds = %69
  %76 = mul i64 %56, 10
  %77 = zext i8 %66 to i64
  %78 = sub nsw i64 47, %77
  %79 = icmp ugt i64 %76, %78
  br i1 %79, label %80, label %81

80:                                               ; preds = %65, %69, %75
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #8
  br label %276

81:                                               ; preds = %75
  %82 = add i64 %76, -48
  %83 = add i64 %82, %77
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %5) #8
  store i8 -86, i8* %5, align 1
  %84 = call i32 @CBS_get_u8(%struct.cbs_st* nonnull %7, i8* nonnull %5) #8
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %55

86:                                               ; preds = %81
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #8
  br label %89

87:                                               ; preds = %60
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %5) #8
  %88 = icmp eq i32 %57, 0
  br i1 %88, label %276, label %89

89:                                               ; preds = %86, %87
  %90 = phi i64 [ %83, %86 ], [ %56, %87 ]
  %91 = icmp ugt i64 %51, 2
  br i1 %91, label %276, label %92

92:                                               ; preds = %89
  %93 = icmp ne i64 %51, 2
  %94 = icmp ugt i64 %90, 39
  %95 = and i1 %93, %94
  %96 = icmp ugt i64 %90, -81
  %97 = or i1 %96, %95
  br i1 %97, label %276, label %98

98:                                               ; preds = %92
  %99 = mul i64 %51, 40
  %100 = add nuw i64 %90, %99
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %108, label %102

102:                                              ; preds = %98, %102
  %103 = phi i64 [ %106, %102 ], [ %100, %98 ]
  %104 = phi i32 [ %105, %102 ], [ 0, %98 ]
  %105 = add nuw nsw i32 %104, 1
  %106 = lshr i64 %103, 7
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %102

108:                                              ; preds = %102, %98
  %109 = phi i32 [ 1, %98 ], [ %105, %102 ]
  %110 = add i32 %109, -1
  %111 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  br label %117

112:                                              ; preds = %163
  %113 = call i64 @CBS_len(%struct.cbs_st* nonnull %7) #8
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %276, label %115

115:                                              ; preds = %112
  %116 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  br label %173

117:                                              ; preds = %108, %163
  %118 = phi i32 [ %110, %108 ], [ %168, %163 ]
  %119 = mul i32 %118, 7
  %120 = zext i32 %119 to i64
  %121 = lshr i64 %100, %120
  %122 = trunc i64 %121 to i8
  %123 = and i8 %122, 127
  %124 = icmp eq i32 %118, 0
  %125 = or i8 %122, -128
  %126 = select i1 %124, i8 %123, i8 %125
  %127 = call i32 @CBB_flush(%struct.cbb_st* %0) #8
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %276, label %129

129:                                              ; preds = %117
  %130 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %111, align 8
  %131 = icmp eq %struct.cbb_buffer_st* %130, null
  br i1 %131, label %276, label %132

132:                                              ; preds = %129
  %133 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %130, i64 0, i32 1
  %134 = load i64, i64* %133, align 8
  %135 = add i64 %134, 1
  %136 = icmp eq i64 %134, -1
  br i1 %136, label %161, label %137

137:                                              ; preds = %132
  %138 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %130, i64 0, i32 2
  %139 = load i64, i64* %138, align 8
  %140 = icmp ugt i64 %135, %139
  br i1 %140, label %144, label %141

141:                                              ; preds = %137
  %142 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %130, i64 0, i32 0
  %143 = load i8*, i8** %142, align 8
  br label %163

144:                                              ; preds = %137
  %145 = shl i64 %139, 1
  %146 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %130, i64 0, i32 3
  %147 = load i8, i8* %146, align 8
  %148 = icmp eq i8 %147, 0
  br i1 %148, label %161, label %149

149:                                              ; preds = %144
  %150 = icmp ult i64 %145, %139
  %151 = icmp ult i64 %145, %135
  %152 = or i1 %150, %151
  %153 = select i1 %152, i64 %135, i64 %145
  %154 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %130, i64 0, i32 0
  %155 = load i8*, i8** %154, align 8
  %156 = call i8* @OPENSSL_realloc(i8* %155, i64 %153) #8
  %157 = icmp eq i8* %156, null
  br i1 %157, label %161, label %158

158:                                              ; preds = %149
  store i8* %156, i8** %154, align 8
  store i64 %153, i64* %138, align 8
  %159 = load i64, i64* %133, align 8
  %160 = add i64 %159, 1
  br label %163

161:                                              ; preds = %149, %144, %132
  %162 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %130, i64 0, i32 4
  store i8 1, i8* %162, align 1
  br label %276

163:                                              ; preds = %141, %158
  %164 = phi i64 [ %135, %141 ], [ %160, %158 ]
  %165 = phi i64 [ %134, %141 ], [ %159, %158 ]
  %166 = phi i8* [ %143, %141 ], [ %156, %158 ]
  %167 = getelementptr inbounds i8, i8* %166, i64 %165
  store i64 %164, i64* %133, align 8
  store i8 %126, i8* %167, align 1
  %168 = add i32 %118, -1
  %169 = icmp ult i32 %168, %109
  br i1 %169, label %117, label %112

170:                                              ; preds = %269
  %171 = call i64 @CBS_len(%struct.cbs_st* nonnull %7) #8
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %276, label %173

173:                                              ; preds = %115, %170
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #8
  store i8 -86, i8* %4, align 1
  %174 = call i32 @CBS_get_u8(%struct.cbs_st* nonnull %7, i8* nonnull %4) #8
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %177

176:                                              ; preds = %173
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #8
  br label %276

177:                                              ; preds = %173, %203
  %178 = phi i64 [ %205, %203 ], [ 0, %173 ]
  %179 = phi i32 [ 1, %203 ], [ 0, %173 ]
  %180 = load i8, i8* %4, align 1
  %181 = icmp eq i8 %180, 46
  br i1 %181, label %182, label %187

182:                                              ; preds = %177
  %183 = call i64 @CBS_len(%struct.cbs_st* nonnull %7) #8
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %185, label %209

185:                                              ; preds = %182
  %186 = load i8, i8* %4, align 1
  br label %187

187:                                              ; preds = %185, %177
  %188 = phi i8 [ %186, %185 ], [ %180, %177 ]
  %189 = add i8 %188, -48
  %190 = icmp ugt i8 %189, 9
  br i1 %190, label %202, label %191

191:                                              ; preds = %187
  %192 = icmp ne i32 %179, 0
  %193 = icmp eq i64 %178, 0
  %194 = and i1 %193, %192
  %195 = icmp ugt i64 %178, 1844674407370955161
  %196 = or i1 %195, %194
  br i1 %196, label %202, label %197

197:                                              ; preds = %191
  %198 = mul i64 %178, 10
  %199 = zext i8 %188 to i64
  %200 = sub nsw i64 47, %199
  %201 = icmp ugt i64 %198, %200
  br i1 %201, label %202, label %203

202:                                              ; preds = %187, %191, %197
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #8
  br label %276

203:                                              ; preds = %197
  %204 = add i64 %198, -48
  %205 = add i64 %204, %199
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #8
  store i8 -86, i8* %4, align 1
  %206 = call i32 @CBS_get_u8(%struct.cbs_st* nonnull %7, i8* nonnull %4) #8
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %208, label %177

208:                                              ; preds = %203
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #8
  br label %211

209:                                              ; preds = %182
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #8
  %210 = icmp eq i32 %179, 0
  br i1 %210, label %276, label %211

211:                                              ; preds = %208, %209
  %212 = phi i64 [ %205, %208 ], [ %178, %209 ]
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %220, label %214

214:                                              ; preds = %211, %214
  %215 = phi i64 [ %218, %214 ], [ %212, %211 ]
  %216 = phi i32 [ %217, %214 ], [ 0, %211 ]
  %217 = add nuw nsw i32 %216, 1
  %218 = lshr i64 %215, 7
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %220, label %214

220:                                              ; preds = %214, %211
  %221 = phi i32 [ 1, %211 ], [ %217, %214 ]
  %222 = add i32 %221, -1
  br label %223

223:                                              ; preds = %220, %269
  %224 = phi i32 [ %274, %269 ], [ %222, %220 ]
  %225 = mul i32 %224, 7
  %226 = zext i32 %225 to i64
  %227 = lshr i64 %212, %226
  %228 = trunc i64 %227 to i8
  %229 = and i8 %228, 127
  %230 = icmp eq i32 %224, 0
  %231 = or i8 %228, -128
  %232 = select i1 %230, i8 %229, i8 %231
  %233 = call i32 @CBB_flush(%struct.cbb_st* %0) #8
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %276, label %235

235:                                              ; preds = %223
  %236 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %116, align 8
  %237 = icmp eq %struct.cbb_buffer_st* %236, null
  br i1 %237, label %276, label %238

238:                                              ; preds = %235
  %239 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %236, i64 0, i32 1
  %240 = load i64, i64* %239, align 8
  %241 = add i64 %240, 1
  %242 = icmp eq i64 %240, -1
  br i1 %242, label %267, label %243

243:                                              ; preds = %238
  %244 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %236, i64 0, i32 2
  %245 = load i64, i64* %244, align 8
  %246 = icmp ugt i64 %241, %245
  br i1 %246, label %250, label %247

247:                                              ; preds = %243
  %248 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %236, i64 0, i32 0
  %249 = load i8*, i8** %248, align 8
  br label %269

250:                                              ; preds = %243
  %251 = shl i64 %245, 1
  %252 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %236, i64 0, i32 3
  %253 = load i8, i8* %252, align 8
  %254 = icmp eq i8 %253, 0
  br i1 %254, label %267, label %255

255:                                              ; preds = %250
  %256 = icmp ult i64 %251, %245
  %257 = icmp ult i64 %251, %241
  %258 = or i1 %256, %257
  %259 = select i1 %258, i64 %241, i64 %251
  %260 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %236, i64 0, i32 0
  %261 = load i8*, i8** %260, align 8
  %262 = call i8* @OPENSSL_realloc(i8* %261, i64 %259) #8
  %263 = icmp eq i8* %262, null
  br i1 %263, label %267, label %264

264:                                              ; preds = %255
  store i8* %262, i8** %260, align 8
  store i64 %259, i64* %244, align 8
  %265 = load i64, i64* %239, align 8
  %266 = add i64 %265, 1
  br label %269

267:                                              ; preds = %255, %250, %238
  %268 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %236, i64 0, i32 4
  store i8 1, i8* %268, align 1
  br label %276

269:                                              ; preds = %247, %264
  %270 = phi i64 [ %241, %247 ], [ %266, %264 ]
  %271 = phi i64 [ %240, %247 ], [ %265, %264 ]
  %272 = phi i8* [ %249, %247 ], [ %262, %264 ]
  %273 = getelementptr inbounds i8, i8* %272, i64 %271
  store i64 %270, i64* %239, align 8
  store i8 %232, i8* %273, align 1
  %274 = add i32 %224, -1
  %275 = icmp ult i32 %274, %221
  br i1 %275, label %223, label %170

276:                                              ; preds = %117, %129, %209, %170, %223, %235, %112, %267, %161, %176, %202, %54, %80, %15, %41, %89, %92, %48, %87
  %277 = phi i32 [ 0, %87 ], [ 0, %48 ], [ 0, %92 ], [ 0, %89 ], [ 0, %41 ], [ 0, %15 ], [ 0, %80 ], [ 0, %54 ], [ 0, %202 ], [ 0, %176 ], [ 0, %161 ], [ 0, %267 ], [ 1, %112 ], [ 0, %235 ], [ 0, %223 ], [ 0, %209 ], [ 1, %170 ], [ 0, %129 ], [ 0, %117 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #8
  br label %278

278:                                              ; preds = %3, %276
  %279 = phi i32 [ %277, %276 ], [ 0, %3 ]
  ret i32 %279
}

declare void @CBS_init(%struct.cbs_st*, i8*, i64) local_unnamed_addr #2

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CBB_flush_asn1_set_of(%struct.cbb_st* nocapture) local_unnamed_addr #0 {
  %2 = alloca %struct.cbs_st, align 8
  %3 = tail call i32 @CBB_flush(%struct.cbb_st* %0)
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %128, label %5

5:                                                ; preds = %1
  %6 = bitcast %struct.cbs_st* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8
  %7 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 0
  %8 = bitcast %struct.cbs_st* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %7, align 8
  %10 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %9, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 2
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i8, i8* %11, i64 %13
  %15 = getelementptr inbounds %struct.cbb_st, %struct.cbb_st* %0, i64 0, i32 3
  %16 = load i8, i8* %15, align 8
  %17 = zext i8 %16 to i64
  %18 = getelementptr inbounds i8, i8* %14, i64 %17
  %19 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %9, i64 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %13
  %22 = sub i64 %21, %17
  call void @CBS_init(%struct.cbs_st* nonnull %2, i8* %18, i64 %22) #8
  %23 = call i64 @CBS_len(%struct.cbs_st* nonnull %2) #8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %126, label %25

25:                                               ; preds = %5, %29
  %26 = phi i64 [ %30, %29 ], [ 0, %5 ]
  %27 = call i32 @CBS_get_any_asn1_element(%struct.cbs_st* nonnull %2, %struct.cbs_st* null, i32* null, i64* null) #8
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %126, label %29

29:                                               ; preds = %25
  %30 = add i64 %26, 1
  %31 = call i64 @CBS_len(%struct.cbs_st* nonnull %2) #8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %25

33:                                               ; preds = %29
  %34 = icmp ult i64 %30, 2
  br i1 %34, label %126, label %35

35:                                               ; preds = %33
  %36 = icmp ugt i64 %30, 1152921504606846975
  br i1 %36, label %126, label %37

37:                                               ; preds = %35
  %38 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %7, align 8
  %39 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %38, i64 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = load i64, i64* %12, align 8
  %42 = sub i64 %40, %41
  %43 = load i8, i8* %15, align 8
  %44 = zext i8 %43 to i64
  %45 = sub i64 %42, %44
  %46 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %38, i64 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 %41
  %49 = getelementptr inbounds i8, i8* %48, i64 %44
  %50 = call i8* @OPENSSL_memdup(i8* %49, i64 %45) #8
  %51 = shl i64 %30, 4
  %52 = call i8* @OPENSSL_malloc(i64 %51) #8
  %53 = bitcast i8* %52 to %struct.cbs_st*
  %54 = icmp eq i8* %50, null
  %55 = icmp eq i8* %52, null
  %56 = or i1 %54, %55
  br i1 %56, label %124, label %57

57:                                               ; preds = %37
  call void @CBS_init(%struct.cbs_st* nonnull %2, i8* nonnull %50, i64 %45) #8
  br label %60

58:                                               ; preds = %60
  %59 = icmp eq i64 %65, %30
  br i1 %59, label %66, label %60

60:                                               ; preds = %58, %57
  %61 = phi i64 [ %65, %58 ], [ 0, %57 ]
  %62 = getelementptr inbounds %struct.cbs_st, %struct.cbs_st* %53, i64 %61
  %63 = call i32 @CBS_get_any_asn1_element(%struct.cbs_st* nonnull %2, %struct.cbs_st* %62, i32* null, i64* null) #8
  %64 = icmp eq i32 %63, 0
  %65 = add nuw i64 %61, 1
  br i1 %64, label %124, label %58

66:                                               ; preds = %58
  call void @qsort(i8* %52, i64 %30, i64 16, i32 (i8*, i8*)* nonnull @compare_set_of_element) #8
  %67 = load i64, i64* %12, align 8
  %68 = load i8, i8* %15, align 8
  %69 = zext i8 %68 to i64
  %70 = add i64 %67, %69
  %71 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %7, align 8
  %72 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %71, i64 0, i32 1
  store i64 %70, i64* %72, align 8
  br label %73

73:                                               ; preds = %121, %66
  %74 = phi i64 [ %122, %121 ], [ 0, %66 ]
  %75 = getelementptr inbounds %struct.cbs_st, %struct.cbs_st* %53, i64 %74
  %76 = call i8* @CBS_data(%struct.cbs_st* %75) #8
  %77 = call i64 @CBS_len(%struct.cbs_st* %75) #8
  %78 = call i32 @CBB_flush(%struct.cbb_st* %0) #8
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %124, label %80

80:                                               ; preds = %73
  %81 = load %struct.cbb_buffer_st*, %struct.cbb_buffer_st** %7, align 8
  %82 = icmp eq %struct.cbb_buffer_st* %81, null
  br i1 %82, label %124, label %83

83:                                               ; preds = %80
  %84 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %81, i64 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = add i64 %85, %77
  %87 = icmp ult i64 %86, %85
  br i1 %87, label %112, label %88

88:                                               ; preds = %83
  %89 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %81, i64 0, i32 2
  %90 = load i64, i64* %89, align 8
  %91 = icmp ugt i64 %86, %90
  br i1 %91, label %95, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %81, i64 0, i32 0
  %94 = load i8*, i8** %93, align 8
  br label %114

95:                                               ; preds = %88
  %96 = shl i64 %90, 1
  %97 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %81, i64 0, i32 3
  %98 = load i8, i8* %97, align 8
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %112, label %100

100:                                              ; preds = %95
  %101 = icmp ult i64 %96, %90
  %102 = icmp ult i64 %96, %86
  %103 = or i1 %101, %102
  %104 = select i1 %103, i64 %86, i64 %96
  %105 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %81, i64 0, i32 0
  %106 = load i8*, i8** %105, align 8
  %107 = call i8* @OPENSSL_realloc(i8* %106, i64 %104) #8
  %108 = icmp eq i8* %107, null
  br i1 %108, label %112, label %109

109:                                              ; preds = %100
  store i8* %107, i8** %105, align 8
  store i64 %104, i64* %89, align 8
  %110 = load i64, i64* %84, align 8
  %111 = add i64 %110, %77
  br label %114

112:                                              ; preds = %100, %95, %83
  %113 = getelementptr inbounds %struct.cbb_buffer_st, %struct.cbb_buffer_st* %81, i64 0, i32 4
  store i8 1, i8* %113, align 1
  br label %124

114:                                              ; preds = %109, %92
  %115 = phi i64 [ %86, %92 ], [ %111, %109 ]
  %116 = phi i64 [ %85, %92 ], [ %110, %109 ]
  %117 = phi i8* [ %94, %92 ], [ %107, %109 ]
  store i64 %115, i64* %84, align 8
  %118 = icmp eq i64 %77, 0
  br i1 %118, label %121, label %119

119:                                              ; preds = %114
  %120 = getelementptr inbounds i8, i8* %117, i64 %116
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %120, i8* align 1 %76, i64 %77, i1 false) #8
  br label %121

121:                                              ; preds = %119, %114
  %122 = add nuw i64 %74, 1
  %123 = icmp eq i64 %122, %30
  br i1 %123, label %124, label %73

124:                                              ; preds = %60, %73, %80, %121, %112, %37
  %125 = phi i32 [ 0, %37 ], [ 0, %112 ], [ 0, %73 ], [ 0, %80 ], [ 1, %121 ], [ 0, %60 ]
  call void @OPENSSL_free(i8* %50) #8
  call void @OPENSSL_free(i8* %52) #8
  br label %126

126:                                              ; preds = %25, %5, %124, %35, %33
  %127 = phi i32 [ 1, %33 ], [ 0, %35 ], [ %125, %124 ], [ 1, %5 ], [ 0, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8
  br label %128

128:                                              ; preds = %1, %126
  %129 = phi i32 [ %127, %126 ], [ 0, %1 ]
  ret i32 %129
}

declare i32 @CBS_get_any_asn1_element(%struct.cbs_st*, %struct.cbs_st*, i32*, i64*) local_unnamed_addr #2

declare i8* @OPENSSL_memdup(i8*, i64) local_unnamed_addr #2

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal i32 @compare_set_of_element(i8*, i8*) #0 {
  %3 = bitcast i8* %0 to %struct.cbs_st*
  %4 = bitcast i8* %1 to %struct.cbs_st*
  %5 = tail call i64 @CBS_len(%struct.cbs_st* %3) #8
  %6 = tail call i64 @CBS_len(%struct.cbs_st* %4) #8
  %7 = icmp ult i64 %5, %6
  %8 = select i1 %7, i64 %5, i64 %6
  %9 = tail call i8* @CBS_data(%struct.cbs_st* %3) #8
  %10 = tail call i8* @CBS_data(%struct.cbs_st* %4) #8
  %11 = icmp eq i64 %8, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %2
  %13 = tail call i32 @memcmp(i8* %9, i8* %10, i64 %8) #9
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %2, %12
  %16 = icmp eq i64 %5, %6
  %17 = select i1 %7, i32 -1, i32 1
  %18 = select i1 %16, i32 0, i32 %17
  ret i32 %18

19:                                               ; preds = %12
  ret i32 %13
}

declare i8* @CBS_data(%struct.cbs_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare i8* @OPENSSL_realloc(i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #6

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #6

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #6

declare i32 @CBS_get_u8(%struct.cbs_st*, i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
