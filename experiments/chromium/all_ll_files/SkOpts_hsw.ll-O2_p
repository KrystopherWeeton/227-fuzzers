; ModuleID = '../../third_party/skia/src/opts/SkOpts_hsw.cpp'
source_filename = "../../third_party/skia/src/opts/SkOpts_hsw.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkBitmapProcState = type { %class.SkImage_Base*, %class.SkPixmap, %class.SkMatrix, i8, i32, i32, i8, void (%class.SkMatrix*, float, float, %struct.SkPoint*)*, i64, i64, i32, i32, i16, [6 x i8], %class.SkSTArenaAlloc, void (i8*, i32, i32, i32*, i32)*, void (%struct.SkBitmapProcState*, i32*, i32, i32, i32)*, {}* }
%class.SkImage_Base = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkPoint = type { float, float }
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [136 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.SkFibBlockSizes = type { i32 }
%"struct.skvm::InterpreterInstruction" = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.SkRasterPipeline_CallbackCtx = type { void (%struct.SkRasterPipeline_CallbackCtx*, i32)*, [64 x float], float* }
%union.Slot = type { %"struct.skvx::Vec.51" }
%"struct.skvx::Vec.51" = type { %"struct.skvx::Vec.52", %"struct.skvx::Vec.52" }
%"struct.skvx::Vec.52" = type { %"struct.skvx::Vec.53", %"struct.skvx::Vec.53" }
%"struct.skvx::Vec.53" = type { %"struct.skvx::Vec.54", %"struct.skvx::Vec.54" }
%"struct.skvx::Vec.54" = type { %"struct.skvx::Vec.55", %"struct.skvx::Vec.55" }
%"struct.skvx::Vec.55" = type { %"struct.skvx::Vec.56", %"struct.skvx::Vec.56" }
%"struct.skvx::Vec.56" = type { float }

$_ZN3hsw16blit_row_color32EPjPKjij = comdat any

$_ZN3hsw20blit_row_s32a_opaqueEPjPKjij = comdat any

$_ZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPj = comdat any

$_ZN3hsw12cubic_solverEffff = comdat any

$_ZN3hsw12RGBA_to_BGRAEPjPKji = comdat any

$_ZN3hsw12RGBA_to_rgbAEPjPKji = comdat any

$_ZN3hsw12RGBA_to_bgrAEPjPKji = comdat any

$_ZN3hsw12gray_to_RGB1EPjPKhi = comdat any

$_ZN3hsw13grayA_to_RGBAEPjPKhi = comdat any

$_ZN3hsw13grayA_to_rgbAEPjPKhi = comdat any

$_ZN3hsw21inverted_CMYK_to_RGB1EPjPKji = comdat any

$_ZN3hsw21inverted_CMYK_to_BGR1EPjPKji = comdat any

$_ZN3hsw14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPv = comdat any

@_ZN6SkOpts16blit_row_color32E = external local_unnamed_addr global void (i32*, i32*, i32, i32)*, align 8
@_ZN6SkOpts20blit_row_s32a_opaqueE = external local_unnamed_addr global void (i32*, i32*, i32, i32)*, align 8
@_ZN6SkOpts23S32_alpha_D32_filter_DXE = external local_unnamed_addr global void (%struct.SkBitmapProcState*, i32*, i32, i32*)*, align 8
@_ZN6SkOpts12cubic_solverE = external local_unnamed_addr global float (float, float, float, float)*, align 8
@_ZN6SkOpts12RGBA_to_BGRAE = external local_unnamed_addr global void (i32*, i32*, i32)*, align 8
@_ZN6SkOpts12RGBA_to_rgbAE = external local_unnamed_addr global void (i32*, i32*, i32)*, align 8
@_ZN6SkOpts12RGBA_to_bgrAE = external local_unnamed_addr global void (i32*, i32*, i32)*, align 8
@_ZN6SkOpts12gray_to_RGB1E = external local_unnamed_addr global void (i32*, i8*, i32)*, align 8
@_ZN6SkOpts13grayA_to_RGBAE = external local_unnamed_addr global void (i32*, i8*, i32)*, align 8
@_ZN6SkOpts13grayA_to_rgbAE = external local_unnamed_addr global void (i32*, i8*, i32)*, align 8
@_ZN6SkOpts21inverted_CMYK_to_RGB1E = external local_unnamed_addr global void (i32*, i32*, i32)*, align 8
@_ZN6SkOpts21inverted_CMYK_to_BGR1E = external local_unnamed_addr global void (i32*, i32*, i32)*, align 8
@_ZN6SkOpts12stages_highpE = external local_unnamed_addr global [187 x void ()*], align 16
@_ZN6SkOpts17just_return_highpE = external local_unnamed_addr global void ()*, align 8
@_ZN6SkOpts20start_pipeline_highpE = external local_unnamed_addr global void (i64, i64, i64, i64, i8**)*, align 8
@_ZN6SkOpts11stages_lowpE = external local_unnamed_addr global [187 x void ()*], align 16
@_ZN6SkOpts16just_return_lowpE = external local_unnamed_addr global void ()*, align 8
@_ZN6SkOpts19start_pipeline_lowpE = external local_unnamed_addr global void (i64, i64, i64, i64, i8**)*, align 8
@_ZN6SkOpts14interpret_skvmE = external local_unnamed_addr global void (%"struct.skvm::InterpreterInstruction"*, i32, i32, i32, i32*, i32, i32, i8**)*, align 8
@_ZZN3hsw4lowpL13seed_shader_kEN3Ctx4NoneEmmmRDv16_fS4_E4iota = internal unnamed_addr constant [16 x float] [float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00, float 8.500000e+00, float 9.500000e+00, float 1.050000e+01, float 1.150000e+01, float 1.250000e+01, float 1.350000e+01, float 1.450000e+01, float 1.550000e+01], align 64
@_ZZN3hsw14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvE4iota = internal unnamed_addr constant [64 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63], align 128

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6SkOpts8Init_hswEv() local_unnamed_addr #0 {
  store void (i32*, i32*, i32, i32)* @_ZN3hsw16blit_row_color32EPjPKjij, void (i32*, i32*, i32, i32)** @_ZN6SkOpts16blit_row_color32E, align 8
  store void (i32*, i32*, i32, i32)* @_ZN3hsw20blit_row_s32a_opaqueEPjPKjij, void (i32*, i32*, i32, i32)** @_ZN6SkOpts20blit_row_s32a_opaqueE, align 8
  store void (%struct.SkBitmapProcState*, i32*, i32, i32*)* @_ZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPj, void (%struct.SkBitmapProcState*, i32*, i32, i32*)** @_ZN6SkOpts23S32_alpha_D32_filter_DXE, align 8
  store float (float, float, float, float)* @_ZN3hsw12cubic_solverEffff, float (float, float, float, float)** @_ZN6SkOpts12cubic_solverE, align 8
  store void (i32*, i32*, i32)* @_ZN3hsw12RGBA_to_BGRAEPjPKji, void (i32*, i32*, i32)** @_ZN6SkOpts12RGBA_to_BGRAE, align 8
  store void (i32*, i32*, i32)* @_ZN3hsw12RGBA_to_rgbAEPjPKji, void (i32*, i32*, i32)** @_ZN6SkOpts12RGBA_to_rgbAE, align 8
  store void (i32*, i32*, i32)* @_ZN3hsw12RGBA_to_bgrAEPjPKji, void (i32*, i32*, i32)** @_ZN6SkOpts12RGBA_to_bgrAE, align 8
  store void (i32*, i8*, i32)* @_ZN3hsw12gray_to_RGB1EPjPKhi, void (i32*, i8*, i32)** @_ZN6SkOpts12gray_to_RGB1E, align 8
  store void (i32*, i8*, i32)* @_ZN3hsw13grayA_to_RGBAEPjPKhi, void (i32*, i8*, i32)** @_ZN6SkOpts13grayA_to_RGBAE, align 8
  store void (i32*, i8*, i32)* @_ZN3hsw13grayA_to_rgbAEPjPKhi, void (i32*, i8*, i32)** @_ZN6SkOpts13grayA_to_rgbAE, align 8
  store void (i32*, i32*, i32)* @_ZN3hsw21inverted_CMYK_to_RGB1EPjPKji, void (i32*, i32*, i32)** @_ZN6SkOpts21inverted_CMYK_to_RGB1E, align 8
  store void (i32*, i32*, i32)* @_ZN3hsw21inverted_CMYK_to_BGR1EPjPKji, void (i32*, i32*, i32)** @_ZN6SkOpts21inverted_CMYK_to_BGR1E, align 8
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8callbackEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL12move_src_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL12move_dst_srcEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7clamp_0EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast ([187 x void ()*]* @_ZN6SkOpts12stages_highpE to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7clamp_1EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7clamp_aEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11clamp_gamutEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8unpremulEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 4) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL6premulEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10premul_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL12force_opaqueEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL16force_opaque_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 8) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7set_rgbEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL17unbounded_set_rgbEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7swap_rbEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11swap_rb_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 12) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11black_colorEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11white_colorEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL13uniform_colorEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL23unbounded_uniform_colorEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 16) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL17uniform_color_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11seed_shaderEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL6ditherEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7load_a8EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 20) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11load_a8_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8store_a8EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9gather_a8EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8load_565EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 24) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL12load_565_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9store_565EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10gather_565EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9load_4444EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 28) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL13load_4444_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10store_4444EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11gather_4444EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8load_f16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 32) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL12load_f16_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9store_f16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10gather_f16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9load_af16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 36) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL13load_af16_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10store_af16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11gather_af16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10load_rgf16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 40) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL14load_rgf16_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11store_rgf16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL12gather_rgf16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8load_f32EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 44) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL12load_f32_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9store_f32EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10gather_f32EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10load_rgf32EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 48) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11store_rgf32EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9load_8888EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL13load_8888_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10store_8888EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 52) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11gather_8888EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9load_rg88EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL13load_rg88_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10store_rg88EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 56) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11gather_rg88EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8load_a16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL12load_a16_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9store_a16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 60) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10gather_a16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11load_rg1616EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL15load_rg1616_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL12store_rg1616EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 64) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL13gather_rg1616EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL13load_16161616EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL17load_16161616_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL14store_16161616EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 68) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL15gather_16161616EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL12load_1010102EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL16load_1010102_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL13store_1010102EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 72) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL14gather_1010102EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL13alpha_to_grayEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL17alpha_to_gray_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL32bt709_luminance_or_luma_to_alphaEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 76) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL30bt709_luminance_or_luma_to_rgbEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL17bilerp_clamp_8888EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL18bicubic_clamp_8888EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL12store_u16_beEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 80) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8load_srcEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9store_srcEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11store_src_aEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8load_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 84) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9store_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8scale_u8EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9scale_565EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL13scale_1_floatEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 88) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL12scale_nativeEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7lerp_u8EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8lerp_565EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL12lerp_1_floatEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 92) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11lerp_nativeEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7dstatopEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL5dstinEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL6dstoutEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 96) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7dstoverEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7srcatopEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL5srcinEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL6srcoutEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 100) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7srcoverEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL5clearEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8modulateEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8multiplyEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 104) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL5plus_EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL6screenEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL4xor_EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9colorburnEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 108) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10colordodgeEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL6darkenEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10differenceEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9exclusionEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 112) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9hardlightEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7lightenEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7overlayEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9softlightEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 116) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL3hueEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10saturationEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL5colorEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10luminosityEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 120) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL17srcover_rgba_8888EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL16matrix_translateEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL22matrix_scale_translateEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10matrix_2x3EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 124) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10matrix_3x3EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10matrix_3x4EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10matrix_4x5EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10matrix_4x3EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 128) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL18matrix_perspectiveEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10parametricEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL6gamma_EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL5PQishEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 132) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL6HLGishEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9HLGinvishEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8mirror_xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8repeat_xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 136) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8mirror_yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8repeat_yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7decal_xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7decal_yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 140) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL13decal_x_and_yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL16check_decal_maskEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8negate_xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8bilinearEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 144) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7bicubicEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11bilinear_nxEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11bilinear_pxEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11bilinear_nyEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 148) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11bilinear_pyEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11bicubic_n3xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11bicubic_n1xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11bicubic_p1xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 152) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11bicubic_p3xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11bicubic_n3yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11bicubic_n1yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11bicubic_p1yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 156) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11bicubic_p3yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7save_xyEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10accumulateEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL9clamp_x_1EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 160) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10mirror_x_1EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10repeat_x_1EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL22evenly_spaced_gradientEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL8gradientEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 164) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL29evenly_spaced_2_stop_gradientEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL16xy_to_unit_angleEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL12xy_to_radiusEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL23xy_to_2pt_conical_stripEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 168) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL33xy_to_2pt_conical_focal_on_circleEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL30xy_to_2pt_conical_well_behavedEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL25xy_to_2pt_conical_smallerEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL25xy_to_2pt_conical_greaterEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 172) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL34alter_2pt_conical_compensate_focalEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL24alter_2pt_conical_unswapEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL20mask_2pt_conical_nanEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL28mask_2pt_conical_degeneratesEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 176) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL17apply_vector_maskEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11byte_tablesEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10rgb_to_hslEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL10hsl_to_rgbEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 180) to <4 x void ()*>*), align 16
  store void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL15gauss_a_to_rgbaEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 184), align 16
  store void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL6embossEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 185), align 8
  store void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL7swizzleEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts12stages_highpE, i64 0, i64 186), align 16
  store void ()* bitcast (void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)* @_ZN3hswL11just_returnEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_ to void ()*), void ()** @_ZN6SkOpts17just_return_highpE, align 8
  store void (i64, i64, i64, i64, i8**)* @_ZN3hswL14start_pipelineEmmmmPPv, void (i64, i64, i64, i64, i8**)** @_ZN6SkOpts20start_pipeline_highpE, align 8
  store <4 x void ()*> <void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL12move_src_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL12move_dst_srcEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7clamp_0EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast ([187 x void ()*]* @_ZN6SkOpts11stages_lowpE to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7clamp_1EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7clamp_aEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL11clamp_gamutEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 4) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL6premulEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL10premul_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL12force_opaqueEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL16force_opaque_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 8) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7set_rgbEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7swap_rbEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL11swap_rb_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 12) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL11black_colorEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL11white_colorEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL13uniform_colorEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 16) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL17uniform_color_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL11seed_shaderEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* null, void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7load_a8EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 20) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL11load_a8_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL8store_a8EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL9gather_a8EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL8load_565EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 24) to <4 x void ()*>*), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL12load_565_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL9store_565EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL10gather_565EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL9load_4444EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 28) to <4 x void ()*>*), align 16
  store <2 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL13load_4444_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL10store_4444EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <2 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 32) to <2 x void ()*>*), align 16
  store void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL11gather_4444EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 34), align 16
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 35) to i8*), i8 0, i64 144, i1 false)
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL9load_8888EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL13load_8888_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL10store_8888EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL11gather_8888EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 53) to <4 x void ()*>*), align 8
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL9load_rg88EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL13load_rg88_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL10store_rg88EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL11gather_rg88EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 57) to <4 x void ()*>*), align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 61) to i8*), i8 0, i64 128, i1 false)
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL13alpha_to_grayEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL17alpha_to_gray_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL32bt709_luminance_or_luma_to_alphaEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL30bt709_luminance_or_luma_to_rgbEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 77) to <4 x void ()*>*), align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 81) to i8*), i8 0, i64 24, i1 false)
  store void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL8load_srcEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 84), align 16
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL9store_srcEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL11store_src_aEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL8load_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL9store_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 85) to <4 x void ()*>*), align 8
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL8scale_u8EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL9scale_565EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL13scale_1_floatEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL12scale_nativeEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 89) to <4 x void ()*>*), align 8
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7lerp_u8EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL8lerp_565EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL12lerp_1_floatEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL11lerp_nativeEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 93) to <4 x void ()*>*), align 8
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7dstatopEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL5dstinEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL6dstoutEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7dstoverEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 97) to <4 x void ()*>*), align 8
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7srcatopEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL5srcinEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL6srcoutEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7srcoverEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 101) to <4 x void ()*>*), align 8
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL5clearEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL8modulateEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL8multiplyEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL5plus_EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 105) to <4 x void ()*>*), align 8
  store void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL6screenEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 109), align 8
  store void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL4xor_EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 110), align 16
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 111) to i8*), i8 0, i64 16, i1 false)
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL6darkenEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL10differenceEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL9exclusionEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL9hardlightEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 113) to <4 x void ()*>*), align 8
  store void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7lightenEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 117), align 8
  store void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7overlayEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 118), align 16
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 119) to i8*), i8 0, i64 40, i1 false)
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL17srcover_rgba_8888EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL16matrix_translateEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL22matrix_scale_translateEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL10matrix_2x3EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 124) to <4 x void ()*>*), align 16
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 128) to i8*), i8 0, i64 32, i1 false)
  store void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL18matrix_perspectiveEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 132), align 16
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 133) to i8*), i8 0, i64 72, i1 false)
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7decal_xEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7decal_yEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL13decal_x_and_yEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL16check_decal_maskEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 142) to <4 x void ()*>*), align 16
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 146) to i8*), i8 0, i64 136, i1 false)
  store <4 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL9clamp_x_1EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL10mirror_x_1EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL10repeat_x_1EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL22evenly_spaced_gradientEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <4 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 163) to <4 x void ()*>*), align 8
  store void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL8gradientEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 167), align 8
  store void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL29evenly_spaced_2_stop_gradientEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 168), align 16
  store void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL16xy_to_unit_angleEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 169), align 8
  store void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL12xy_to_radiusEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 170), align 16
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 171) to i8*), i8 0, i64 112, i1 false)
  store <2 x void ()*> <void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL6embossEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL7swizzleEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*)>, <2 x void ()*>* bitcast (void ()** getelementptr inbounds ([187 x void ()*], [187 x void ()*]* @_ZN6SkOpts11stages_lowpE, i64 0, i64 185) to <2 x void ()*>*), align 8
  store void ()* bitcast (void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)* @_ZN3hsw4lowpL11just_returnEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_ to void ()*), void ()** @_ZN6SkOpts16just_return_lowpE, align 8
  store void (i64, i64, i64, i64, i8**)* @_ZN3hsw4lowpL14start_pipelineEmmmmPPv, void (i64, i64, i64, i64, i8**)** @_ZN6SkOpts19start_pipeline_lowpE, align 8
  store void (%"struct.skvm::InterpreterInstruction"*, i32, i32, i32, i32*, i32, i32, i8**)* @_ZN3hsw14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPv, void (%"struct.skvm::InterpreterInstruction"*, i32, i32, i32, i32*, i32, i32, i8**)** @_ZN6SkOpts14interpret_skvmE, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3hsw16blit_row_color32EPjPKjij(i32*, i32*, i32, i32) #1 comdat {
  %5 = icmp sgt i32 %2, 3
  br i1 %5, label %6, label %57

6:                                                ; preds = %4
  %7 = lshr i32 %3, 24
  %8 = xor i32 %7, 255
  %9 = lshr i32 %8, 7
  %10 = add nuw nsw i32 %9, %8
  %11 = trunc i32 %10 to i8
  %12 = insertelement <16 x i8> undef, i8 %11, i32 0
  %13 = shufflevector <16 x i8> %12, <16 x i8> undef, <16 x i32> zeroinitializer
  %14 = zext i32 %3 to i64
  %15 = shl nuw i64 %14, 32
  %16 = or i64 %15, %14
  %17 = bitcast i64 %16 to <8 x i8>
  %18 = shufflevector <8 x i8> %17, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = shufflevector <8 x i8> %17, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20 = shufflevector <16 x i8> %18, <16 x i8> %19, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21 = zext <16 x i8> %20 to <16 x i16>
  %22 = zext <16 x i8> %13 to <16 x i16>
  %23 = shl nuw <16 x i16> %21, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %24 = or <16 x i16> %23, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %25 = add nsw i32 %2, -4
  %26 = and i32 %25, 4
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %46

28:                                               ; preds = %6
  %29 = bitcast i32* %1 to <8 x i8>*
  %30 = load <8 x i8>, <8 x i8>* %29, align 1
  %31 = getelementptr inbounds i32, i32* %1, i64 2
  %32 = bitcast i32* %31 to <8 x i8>*
  %33 = load <8 x i8>, <8 x i8>* %32, align 1
  %34 = shufflevector <8 x i8> %30, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %35 = shufflevector <8 x i8> %33, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %36 = shufflevector <16 x i8> %34, <16 x i8> %35, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37 = zext <16 x i8> %36 to <16 x i16>
  %38 = mul nuw <16 x i16> %37, %22
  %39 = add <16 x i16> %38, %24
  %40 = lshr <16 x i16> %39, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %41 = trunc <16 x i16> %40 to <16 x i8>
  %42 = bitcast i32* %0 to <16 x i8>*
  store <16 x i8> %41, <16 x i8>* %42, align 1
  %43 = getelementptr inbounds i32, i32* %1, i64 4
  %44 = getelementptr inbounds i32, i32* %0, i64 4
  %45 = add nsw i32 %2, -4
  br label %46

46:                                               ; preds = %28, %6
  %47 = phi i32* [ %0, %6 ], [ %44, %28 ]
  %48 = phi i32* [ %1, %6 ], [ %43, %28 ]
  %49 = phi i32 [ %2, %6 ], [ %45, %28 ]
  %50 = phi i32* [ undef, %6 ], [ %43, %28 ]
  %51 = phi i32* [ undef, %6 ], [ %44, %28 ]
  %52 = icmp ult i32 %25, 4
  br i1 %52, label %53, label %105

53:                                               ; preds = %105, %46
  %54 = phi i32* [ %50, %46 ], [ %139, %105 ]
  %55 = phi i32* [ %51, %46 ], [ %140, %105 ]
  %56 = and i32 %2, 3
  br label %57

57:                                               ; preds = %53, %4
  %58 = phi i32 [ %2, %4 ], [ %56, %53 ]
  %59 = phi i32* [ %1, %4 ], [ %54, %53 ]
  %60 = phi i32* [ %0, %4 ], [ %55, %53 ]
  %61 = icmp sgt i32 %58, 0
  br i1 %61, label %62, label %179

62:                                               ; preds = %57
  %63 = lshr i32 %3, 24
  %64 = xor i32 %63, 255
  %65 = lshr i32 %64, 7
  %66 = add nuw nsw i32 %65, %64
  %67 = trunc i32 %66 to i8
  %68 = insertelement <16 x i8> undef, i8 %67, i32 0
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> zeroinitializer
  %70 = zext i32 %3 to i64
  %71 = shl nuw i64 %70, 32
  %72 = or i64 %71, %70
  %73 = bitcast i64 %72 to <8 x i8>
  %74 = shufflevector <8 x i8> %73, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %75 = shufflevector <8 x i8> %73, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %76 = shufflevector <16 x i8> %74, <16 x i8> %75, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %77 = zext <16 x i8> %76 to <16 x i16>
  %78 = zext <16 x i8> %69 to <16 x i16>
  %79 = shl nuw <16 x i16> %77, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %80 = or <16 x i16> %79, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %81 = and i32 %58, 1
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %100, label %83

83:                                               ; preds = %62
  %84 = add nsw i32 %58, -1
  %85 = getelementptr inbounds i32, i32* %59, i64 1
  %86 = load i32, i32* %59, align 4
  %87 = zext i32 %86 to i64
  %88 = bitcast i64 %87 to <8 x i8>
  %89 = shufflevector <8 x i8> %88, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %90 = shufflevector <16 x i8> %89, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %91 = zext <16 x i8> %90 to <16 x i16>
  %92 = mul nuw <16 x i16> %91, %78
  %93 = add <16 x i16> %92, %80
  %94 = lshr <16 x i16> %93, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %95 = trunc <16 x i16> %94 to <16 x i8>
  %96 = bitcast <16 x i8> %95 to <2 x i64>
  %97 = extractelement <2 x i64> %96, i32 0
  %98 = trunc i64 %97 to i32
  %99 = getelementptr inbounds i32, i32* %60, i64 1
  store i32 %98, i32* %60, align 4
  br label %100

100:                                              ; preds = %62, %83
  %101 = phi i32* [ %60, %62 ], [ %99, %83 ]
  %102 = phi i32* [ %59, %62 ], [ %85, %83 ]
  %103 = phi i32 [ %58, %62 ], [ %84, %83 ]
  %104 = icmp eq i32 %58, 1
  br i1 %104, label %179, label %143

105:                                              ; preds = %46, %105
  %106 = phi i32* [ %140, %105 ], [ %47, %46 ]
  %107 = phi i32* [ %139, %105 ], [ %48, %46 ]
  %108 = phi i32 [ %141, %105 ], [ %49, %46 ]
  %109 = bitcast i32* %107 to <8 x i8>*
  %110 = load <8 x i8>, <8 x i8>* %109, align 1
  %111 = getelementptr inbounds i32, i32* %107, i64 2
  %112 = bitcast i32* %111 to <8 x i8>*
  %113 = load <8 x i8>, <8 x i8>* %112, align 1
  %114 = shufflevector <8 x i8> %110, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %115 = shufflevector <8 x i8> %113, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %116 = shufflevector <16 x i8> %114, <16 x i8> %115, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %117 = zext <16 x i8> %116 to <16 x i16>
  %118 = mul nuw <16 x i16> %117, %22
  %119 = add <16 x i16> %118, %24
  %120 = lshr <16 x i16> %119, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %121 = trunc <16 x i16> %120 to <16 x i8>
  %122 = bitcast i32* %106 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %122, align 1
  %123 = getelementptr inbounds i32, i32* %107, i64 4
  %124 = getelementptr inbounds i32, i32* %106, i64 4
  %125 = bitcast i32* %123 to <8 x i8>*
  %126 = load <8 x i8>, <8 x i8>* %125, align 1
  %127 = getelementptr inbounds i32, i32* %107, i64 6
  %128 = bitcast i32* %127 to <8 x i8>*
  %129 = load <8 x i8>, <8 x i8>* %128, align 1
  %130 = shufflevector <8 x i8> %126, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %131 = shufflevector <8 x i8> %129, <8 x i8> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %132 = shufflevector <16 x i8> %130, <16 x i8> %131, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %133 = zext <16 x i8> %132 to <16 x i16>
  %134 = mul nuw <16 x i16> %133, %22
  %135 = add <16 x i16> %134, %24
  %136 = lshr <16 x i16> %135, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %137 = trunc <16 x i16> %136 to <16 x i8>
  %138 = bitcast i32* %124 to <16 x i8>*
  store <16 x i8> %137, <16 x i8>* %138, align 1
  %139 = getelementptr inbounds i32, i32* %107, i64 8
  %140 = getelementptr inbounds i32, i32* %106, i64 8
  %141 = add nsw i32 %108, -8
  %142 = icmp sgt i32 %141, 3
  br i1 %142, label %105, label %53

143:                                              ; preds = %100, %143
  %144 = phi i32* [ %177, %143 ], [ %101, %100 ]
  %145 = phi i32* [ %163, %143 ], [ %102, %100 ]
  %146 = phi i32 [ %162, %143 ], [ %103, %100 ]
  %147 = getelementptr inbounds i32, i32* %145, i64 1
  %148 = load i32, i32* %145, align 4
  %149 = zext i32 %148 to i64
  %150 = bitcast i64 %149 to <8 x i8>
  %151 = shufflevector <8 x i8> %150, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %152 = shufflevector <16 x i8> %151, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %153 = zext <16 x i8> %152 to <16 x i16>
  %154 = mul nuw <16 x i16> %153, %78
  %155 = add <16 x i16> %154, %80
  %156 = lshr <16 x i16> %155, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %157 = trunc <16 x i16> %156 to <16 x i8>
  %158 = bitcast <16 x i8> %157 to <2 x i64>
  %159 = extractelement <2 x i64> %158, i32 0
  %160 = trunc i64 %159 to i32
  %161 = getelementptr inbounds i32, i32* %144, i64 1
  store i32 %160, i32* %144, align 4
  %162 = add nsw i32 %146, -2
  %163 = getelementptr inbounds i32, i32* %145, i64 2
  %164 = load i32, i32* %147, align 4
  %165 = zext i32 %164 to i64
  %166 = bitcast i64 %165 to <8 x i8>
  %167 = shufflevector <8 x i8> %166, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %168 = shufflevector <16 x i8> %167, <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %169 = zext <16 x i8> %168 to <16 x i16>
  %170 = mul nuw <16 x i16> %169, %78
  %171 = add <16 x i16> %170, %80
  %172 = lshr <16 x i16> %171, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %173 = trunc <16 x i16> %172 to <16 x i8>
  %174 = bitcast <16 x i8> %173 to <2 x i64>
  %175 = extractelement <2 x i64> %174, i32 0
  %176 = trunc i64 %175 to i32
  %177 = getelementptr inbounds i32, i32* %144, i64 2
  store i32 %176, i32* %161, align 4
  %178 = icmp sgt i32 %162, 0
  br i1 %178, label %143, label %179

179:                                              ; preds = %100, %143, %57
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3hsw20blit_row_s32a_opaqueEPjPKjij(i32*, i32*, i32, i32) #1 comdat {
  %5 = icmp sgt i32 %2, 7
  br i1 %5, label %13, label %8

6:                                                ; preds = %13
  %7 = and i32 %2, 7
  br label %8

8:                                                ; preds = %6, %4
  %9 = phi i32* [ %1, %4 ], [ %38, %6 ]
  %10 = phi i32 [ %2, %4 ], [ %7, %6 ]
  %11 = phi i32* [ %0, %4 ], [ %39, %6 ]
  %12 = icmp sgt i32 %10, 3
  br i1 %12, label %117, label %44

13:                                               ; preds = %4, %13
  %14 = phi i32* [ %39, %13 ], [ %0, %4 ]
  %15 = phi i32 [ %40, %13 ], [ %2, %4 ]
  %16 = phi i32* [ %38, %13 ], [ %1, %4 ]
  %17 = bitcast i32* %16 to <4 x i64>*
  %18 = load <4 x i64>, <4 x i64>* %17, align 1
  %19 = bitcast i32* %14 to <16 x i16>*
  %20 = load <16 x i16>, <16 x i16>* %19, align 1
  %21 = bitcast <4 x i64> %18 to <32 x i8>
  %22 = shufflevector <32 x i8> %21, <32 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 3, i32 32, i32 3, i32 32, i32 7, i32 32, i32 7, i32 32, i32 11, i32 32, i32 11, i32 32, i32 15, i32 32, i32 15, i32 32, i32 19, i32 48, i32 19, i32 48, i32 23, i32 48, i32 23, i32 48, i32 27, i32 48, i32 27, i32 48, i32 31, i32 48, i32 31, i32 48>
  %23 = bitcast <32 x i8> %22 to <16 x i16>
  %24 = sub <16 x i16> <i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256, i16 256>, %23
  %25 = and <16 x i16> %20, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %26 = mul <16 x i16> %24, %25
  %27 = lshr <16 x i16> %26, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %28 = bitcast <16 x i16> %27 to <4 x i64>
  %29 = lshr <16 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %30 = mul <16 x i16> %24, %29
  %31 = bitcast <16 x i16> %30 to <4 x i64>
  %32 = and <4 x i64> %31, <i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696, i64 -71777214294589696>
  %33 = or <4 x i64> %32, %28
  %34 = bitcast <4 x i64> %18 to <8 x i32>
  %35 = bitcast <4 x i64> %33 to <8 x i32>
  %36 = add <8 x i32> %35, %34
  %37 = bitcast i32* %14 to <8 x i32>*
  store <8 x i32> %36, <8 x i32>* %37, align 1
  %38 = getelementptr inbounds i32, i32* %16, i64 8
  %39 = getelementptr inbounds i32, i32* %14, i64 8
  %40 = add nsw i32 %15, -8
  %41 = icmp sgt i32 %40, 7
  br i1 %41, label %13, label %6

42:                                               ; preds = %117
  %43 = and i32 %10, 3
  br label %44

44:                                               ; preds = %42, %8
  %45 = phi i32* [ %9, %8 ], [ %142, %42 ]
  %46 = phi i32 [ %10, %8 ], [ %43, %42 ]
  %47 = phi i32* [ %11, %8 ], [ %143, %42 ]
  %48 = icmp sgt i32 %46, 0
  br i1 %48, label %49, label %168

49:                                               ; preds = %44
  %50 = add nsw i32 %46, -1
  %51 = zext i32 %50 to i64
  %52 = add nuw nsw i64 %51, 1
  %53 = icmp ult i64 %52, 16
  br i1 %53, label %54, label %58

54:                                               ; preds = %115, %58, %49
  %55 = phi i32* [ %47, %58 ], [ %47, %49 ], [ %69, %115 ]
  %56 = phi i32 [ %46, %58 ], [ %46, %49 ], [ %71, %115 ]
  %57 = phi i32* [ %45, %58 ], [ %45, %49 ], [ %72, %115 ]
  br label %146

58:                                               ; preds = %49
  %59 = add nsw i32 %46, -1
  %60 = zext i32 %59 to i64
  %61 = add nuw nsw i64 %60, 1
  %62 = getelementptr i32, i32* %47, i64 %61
  %63 = getelementptr i32, i32* %45, i64 %61
  %64 = icmp ult i32* %47, %63
  %65 = icmp ult i32* %45, %62
  %66 = and i1 %64, %65
  br i1 %66, label %54, label %67

67:                                               ; preds = %58
  %68 = and i64 %52, 8589934576
  %69 = getelementptr i32, i32* %47, i64 %68
  %70 = trunc i64 %68 to i32
  %71 = sub i32 %46, %70
  %72 = getelementptr i32, i32* %45, i64 %68
  br label %73

73:                                               ; preds = %73, %67
  %74 = phi i64 [ 0, %67 ], [ %113, %73 ]
  %75 = getelementptr i32, i32* %47, i64 %74
  %76 = getelementptr i32, i32* %45, i64 %74
  %77 = bitcast i32* %76 to <8 x i32>*
  %78 = load <8 x i32>, <8 x i32>* %77, align 4, !alias.scope !2
  %79 = getelementptr i32, i32* %76, i64 8
  %80 = bitcast i32* %79 to <8 x i32>*
  %81 = load <8 x i32>, <8 x i32>* %80, align 4, !alias.scope !2
  %82 = bitcast i32* %75 to <8 x i32>*
  %83 = load <8 x i32>, <8 x i32>* %82, align 4, !alias.scope !5, !noalias !2
  %84 = getelementptr i32, i32* %75, i64 8
  %85 = bitcast i32* %84 to <8 x i32>*
  %86 = load <8 x i32>, <8 x i32>* %85, align 4, !alias.scope !5, !noalias !2
  %87 = lshr <8 x i32> %78, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %88 = lshr <8 x i32> %81, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %89 = sub nuw nsw <8 x i32> <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>, %87
  %90 = sub nuw nsw <8 x i32> <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>, %88
  %91 = and <8 x i32> %83, <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %92 = and <8 x i32> %86, <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %93 = mul <8 x i32> %91, %89
  %94 = mul <8 x i32> %92, %90
  %95 = lshr <8 x i32> %93, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %96 = lshr <8 x i32> %94, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %97 = lshr <8 x i32> %83, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %98 = lshr <8 x i32> %86, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %99 = and <8 x i32> %97, <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %100 = and <8 x i32> %98, <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %101 = mul <8 x i32> %99, %89
  %102 = mul <8 x i32> %100, %90
  %103 = and <8 x i32> %95, <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %104 = and <8 x i32> %96, <i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935, i32 16711935>
  %105 = and <8 x i32> %101, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %106 = and <8 x i32> %102, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %107 = or <8 x i32> %103, %105
  %108 = or <8 x i32> %104, %106
  %109 = add <8 x i32> %107, %78
  %110 = add <8 x i32> %108, %81
  %111 = bitcast i32* %75 to <8 x i32>*
  store <8 x i32> %109, <8 x i32>* %111, align 4, !alias.scope !5, !noalias !2
  %112 = bitcast i32* %84 to <8 x i32>*
  store <8 x i32> %110, <8 x i32>* %112, align 4, !alias.scope !5, !noalias !2
  %113 = add i64 %74, 16
  %114 = icmp eq i64 %113, %68
  br i1 %114, label %115, label %73, !llvm.loop !7

115:                                              ; preds = %73
  %116 = icmp eq i64 %52, %68
  br i1 %116, label %168, label %54

117:                                              ; preds = %8, %117
  %118 = phi i32* [ %143, %117 ], [ %11, %8 ]
  %119 = phi i32 [ %144, %117 ], [ %10, %8 ]
  %120 = phi i32* [ %142, %117 ], [ %9, %8 ]
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 1
  %123 = bitcast i32* %118 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 1
  %125 = lshr <4 x i32> %122, <i32 24, i32 24, i32 24, i32 24>
  %126 = sub nuw nsw <4 x i32> <i32 256, i32 256, i32 256, i32 256>, %125
  %127 = shl nuw nsw <4 x i32> %126, <i32 16, i32 16, i32 16, i32 16>
  %128 = or <4 x i32> %127, %126
  %129 = and <8 x i16> %124, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %130 = bitcast <4 x i32> %128 to <8 x i16>
  %131 = mul <8 x i16> %129, %130
  %132 = lshr <8 x i16> %131, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %133 = bitcast <8 x i16> %132 to <2 x i64>
  %134 = lshr <8 x i16> %124, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %135 = mul <8 x i16> %134, %130
  %136 = bitcast <8 x i16> %135 to <2 x i64>
  %137 = and <2 x i64> %136, <i64 -71777214294589696, i64 -71777214294589696>
  %138 = or <2 x i64> %137, %133
  %139 = bitcast <2 x i64> %138 to <4 x i32>
  %140 = add <4 x i32> %122, %139
  %141 = bitcast i32* %118 to <4 x i32>*
  store <4 x i32> %140, <4 x i32>* %141, align 1
  %142 = getelementptr inbounds i32, i32* %120, i64 4
  %143 = getelementptr inbounds i32, i32* %118, i64 4
  %144 = add nsw i32 %119, -4
  %145 = icmp sgt i32 %144, 3
  br i1 %145, label %117, label %42

146:                                              ; preds = %54, %146
  %147 = phi i32* [ %166, %146 ], [ %55, %54 ]
  %148 = phi i32 [ %150, %146 ], [ %56, %54 ]
  %149 = phi i32* [ %165, %146 ], [ %57, %54 ]
  %150 = add nsw i32 %148, -1
  %151 = load i32, i32* %149, align 4
  %152 = load i32, i32* %147, align 4
  %153 = lshr i32 %151, 24
  %154 = sub nuw nsw i32 256, %153
  %155 = and i32 %152, 16711935
  %156 = mul i32 %155, %154
  %157 = lshr i32 %156, 8
  %158 = lshr i32 %152, 8
  %159 = and i32 %158, 16711935
  %160 = mul i32 %159, %154
  %161 = and i32 %157, 16711935
  %162 = and i32 %160, -16711936
  %163 = or i32 %161, %162
  %164 = add i32 %163, %151
  store i32 %164, i32* %147, align 4
  %165 = getelementptr inbounds i32, i32* %149, i64 1
  %166 = getelementptr inbounds i32, i32* %147, i64 1
  %167 = icmp sgt i32 %150, 0
  br i1 %167, label %146, label %168, !llvm.loop !9

168:                                              ; preds = %146, %115, %44
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPj(%struct.SkBitmapProcState* dereferenceable(336), i32*, i32, i32*) #2 comdat {
  %5 = getelementptr inbounds i32, i32* %1, i64 1
  %6 = load i32, i32* %1, align 4
  %7 = lshr i32 %6, 18
  %8 = and i32 %6, 16383
  %9 = lshr i32 %6, 14
  %10 = and i32 %9, 15
  %11 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = zext i32 %7 to i64
  %14 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 1, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = mul i64 %15, %13
  %17 = getelementptr inbounds i8, i8* %12, i64 %16
  %18 = zext i32 %8 to i64
  %19 = mul i64 %15, %18
  %20 = getelementptr inbounds i8, i8* %12, i64 %19
  %21 = icmp sgt i32 %2, 7
  br i1 %21, label %22, label %103

22:                                               ; preds = %4
  %23 = trunc i32 %10 to i16
  %24 = insertelement <32 x i16> undef, i16 %23, i32 0
  %25 = shufflevector <32 x i16> %24, <32 x i16> undef, <32 x i32> zeroinitializer
  %26 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 12
  br label %27

27:                                               ; preds = %22, %93
  %28 = phi i32* [ %5, %22 ], [ %97, %93 ]
  %29 = phi i32 [ %2, %22 ], [ %99, %93 ]
  %30 = phi i32* [ %3, %22 ], [ %98, %93 ]
  %31 = bitcast i32* %28 to <8 x i32>*
  %32 = load <8 x i32>, <8 x i32>* %31, align 1
  %33 = lshr <8 x i32> %32, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %34 = and <8 x i32> %32, <i32 16383, i32 16383, i32 16383, i32 16383, i32 16383, i32 16383, i32 16383, i32 16383>
  %35 = lshr <8 x i32> %32, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %36 = and <8 x i32> %35, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %37 = shl nuw nsw <8 x i32> %36, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %38 = or <8 x i32> %37, %36
  %39 = shl nuw nsw <8 x i32> %36, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %40 = or <8 x i32> %38, %39
  %41 = shl nuw nsw <8 x i32> %36, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %42 = or <8 x i32> %40, %41
  %43 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %17, <8 x i32> %33, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13, !noalias !10
  %44 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %17, <8 x i32> %34, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13, !noalias !15
  %45 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %20, <8 x i32> %33, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13, !noalias !18
  %46 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %20, <8 x i32> %34, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13, !noalias !21
  %47 = bitcast <8 x i32> %43 to <32 x i8>
  %48 = bitcast <8 x i32> %44 to <32 x i8>
  %49 = bitcast <8 x i32> %42 to <32 x i8>
  %50 = sub <32 x i8> <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>, %49
  %51 = shufflevector <32 x i8> %47, <32 x i8> %48, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %52 = shufflevector <32 x i8> %50, <32 x i8> %49, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %53 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %51, <32 x i8> %52) #13
  %54 = bitcast <16 x i16> %53 to <4 x i64>
  %55 = shufflevector <32 x i8> %47, <32 x i8> %48, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %56 = shufflevector <32 x i8> %50, <32 x i8> %49, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %57 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %55, <32 x i8> %56) #13
  %58 = bitcast <16 x i16> %57 to <4 x i64>
  %59 = shufflevector <4 x i64> %54, <4 x i64> %58, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %60 = shufflevector <4 x i64> %54, <4 x i64> %58, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %61 = bitcast <4 x i64> %59 to <16 x i16>
  %62 = shufflevector <16 x i16> %61, <16 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %63 = bitcast <4 x i64> %60 to <16 x i16>
  %64 = shufflevector <16 x i16> %63, <16 x i16> undef, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %65 = shufflevector <32 x i16> %62, <32 x i16> %64, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %66 = bitcast <8 x i32> %45 to <32 x i8>
  %67 = bitcast <8 x i32> %46 to <32 x i8>
  %68 = shufflevector <32 x i8> %66, <32 x i8> %67, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %69 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %68, <32 x i8> %52) #13
  %70 = bitcast <16 x i16> %69 to <4 x i64>
  %71 = shufflevector <32 x i8> %66, <32 x i8> %67, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %72 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %71, <32 x i8> %56) #13
  %73 = bitcast <16 x i16> %72 to <4 x i64>
  %74 = shufflevector <4 x i64> %70, <4 x i64> %73, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %75 = shufflevector <4 x i64> %70, <4 x i64> %73, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %76 = bitcast <4 x i64> %74 to <16 x i16>
  %77 = shufflevector <16 x i16> %76, <16 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %78 = bitcast <4 x i64> %75 to <16 x i16>
  %79 = shufflevector <16 x i16> %78, <16 x i16> undef, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %80 = shufflevector <32 x i16> %77, <32 x i16> %79, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %81 = shl <32 x i16> %65, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %82 = sub <32 x i16> %80, %65
  %83 = mul <32 x i16> %82, %25
  %84 = add <32 x i16> %83, %81
  %85 = lshr <32 x i16> %84, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %86 = load i16, i16* %26, align 8, !noalias !24
  %87 = icmp ult i16 %86, 256
  br i1 %87, label %88, label %93

88:                                               ; preds = %27
  %89 = insertelement <32 x i16> undef, i16 %86, i32 0
  %90 = shufflevector <32 x i16> %89, <32 x i16> undef, <32 x i32> zeroinitializer
  %91 = mul <32 x i16> %85, %90
  %92 = lshr <32 x i16> %91, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  br label %93

93:                                               ; preds = %27, %88
  %94 = phi <32 x i16> [ %92, %88 ], [ %85, %27 ]
  %95 = trunc <32 x i16> %94 to <32 x i8>
  %96 = bitcast i32* %30 to <32 x i8>*
  store <32 x i8> %95, <32 x i8>* %96, align 1
  %97 = getelementptr inbounds i32, i32* %28, i64 8
  %98 = getelementptr inbounds i32, i32* %30, i64 8
  %99 = add nsw i32 %29, -8
  %100 = icmp sgt i32 %99, 7
  br i1 %100, label %27, label %101

101:                                              ; preds = %93
  %102 = and i32 %2, 7
  br label %103

103:                                              ; preds = %101, %4
  %104 = phi i32* [ %3, %4 ], [ %98, %101 ]
  %105 = phi i32 [ %2, %4 ], [ %102, %101 ]
  %106 = phi i32* [ %5, %4 ], [ %97, %101 ]
  %107 = icmp sgt i32 %105, 0
  br i1 %107, label %108, label %184

108:                                              ; preds = %103
  %109 = insertelement <8 x i32> undef, i32 %105, i32 0
  %110 = shufflevector <8 x i32> %109, <8 x i32> undef, <8 x i32> zeroinitializer
  %111 = icmp sgt <8 x i32> %110, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %112 = sext <8 x i1> %111 to <8 x i32>
  %113 = bitcast i32* %106 to i8*
  %114 = tail call <8 x i32> @llvm.x86.avx2.maskload.d.256(i8* %113, <8 x i32> %112) #13
  %115 = lshr <8 x i32> %114, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %116 = and <8 x i32> %114, <i32 16383, i32 16383, i32 16383, i32 16383, i32 16383, i32 16383, i32 16383, i32 16383>
  %117 = lshr <8 x i32> %114, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %118 = and <8 x i32> %117, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %119 = shl nuw nsw <8 x i32> %118, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %120 = or <8 x i32> %119, %118
  %121 = shl nuw nsw <8 x i32> %118, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %122 = or <8 x i32> %120, %121
  %123 = shl nuw nsw <8 x i32> %118, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %124 = or <8 x i32> %122, %123
  %125 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %17, <8 x i32> %115, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13, !noalias !25
  %126 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %17, <8 x i32> %116, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13, !noalias !30
  %127 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %20, <8 x i32> %115, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13, !noalias !33
  %128 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %20, <8 x i32> %116, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13, !noalias !36
  %129 = bitcast <8 x i32> %125 to <32 x i8>
  %130 = bitcast <8 x i32> %126 to <32 x i8>
  %131 = bitcast <8 x i32> %124 to <32 x i8>
  %132 = sub <32 x i8> <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>, %131
  %133 = shufflevector <32 x i8> %129, <32 x i8> %130, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %134 = shufflevector <32 x i8> %132, <32 x i8> %131, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %135 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %133, <32 x i8> %134) #13
  %136 = bitcast <16 x i16> %135 to <4 x i64>
  %137 = shufflevector <32 x i8> %129, <32 x i8> %130, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %138 = shufflevector <32 x i8> %132, <32 x i8> %131, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %139 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %137, <32 x i8> %138) #13
  %140 = bitcast <16 x i16> %139 to <4 x i64>
  %141 = shufflevector <4 x i64> %136, <4 x i64> %140, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %142 = shufflevector <4 x i64> %136, <4 x i64> %140, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %143 = bitcast <4 x i64> %141 to <16 x i16>
  %144 = shufflevector <16 x i16> %143, <16 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %145 = bitcast <4 x i64> %142 to <16 x i16>
  %146 = shufflevector <16 x i16> %145, <16 x i16> undef, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %147 = shufflevector <32 x i16> %144, <32 x i16> %146, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %148 = bitcast <8 x i32> %127 to <32 x i8>
  %149 = bitcast <8 x i32> %128 to <32 x i8>
  %150 = shufflevector <32 x i8> %148, <32 x i8> %149, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %151 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %150, <32 x i8> %134) #13
  %152 = bitcast <16 x i16> %151 to <4 x i64>
  %153 = shufflevector <32 x i8> %148, <32 x i8> %149, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %154 = tail call <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8> %153, <32 x i8> %138) #13
  %155 = bitcast <16 x i16> %154 to <4 x i64>
  %156 = shufflevector <4 x i64> %152, <4 x i64> %155, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %157 = shufflevector <4 x i64> %152, <4 x i64> %155, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %158 = bitcast <4 x i64> %156 to <16 x i16>
  %159 = shufflevector <16 x i16> %158, <16 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %160 = bitcast <4 x i64> %157 to <16 x i16>
  %161 = shufflevector <16 x i16> %160, <16 x i16> undef, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %162 = shufflevector <32 x i16> %159, <32 x i16> %161, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %163 = shl <32 x i16> %147, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %164 = sub <32 x i16> %162, %147
  %165 = trunc i32 %10 to i16
  %166 = insertelement <32 x i16> undef, i16 %165, i32 0
  %167 = shufflevector <32 x i16> %166, <32 x i16> undef, <32 x i32> zeroinitializer
  %168 = mul <32 x i16> %164, %167
  %169 = add <32 x i16> %168, %163
  %170 = lshr <32 x i16> %169, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %171 = getelementptr inbounds %struct.SkBitmapProcState, %struct.SkBitmapProcState* %0, i64 0, i32 12
  %172 = load i16, i16* %171, align 8, !noalias !39
  %173 = icmp ult i16 %172, 256
  br i1 %173, label %174, label %179

174:                                              ; preds = %108
  %175 = insertelement <32 x i16> undef, i16 %172, i32 0
  %176 = shufflevector <32 x i16> %175, <32 x i16> undef, <32 x i32> zeroinitializer
  %177 = mul <32 x i16> %170, %176
  %178 = lshr <32 x i16> %177, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  br label %179

179:                                              ; preds = %108, %174
  %180 = phi <32 x i16> [ %178, %174 ], [ %170, %108 ]
  %181 = trunc <32 x i16> %180 to <32 x i8>
  %182 = bitcast i32* %104 to i8*
  %183 = bitcast <32 x i8> %181 to <8 x i32>
  tail call void @llvm.x86.avx2.maskstore.d.256(i8* %182, <8 x i32> %112, <8 x i32> %183) #13
  br label %184

184:                                              ; preds = %179, %103
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden float @_ZN3hsw12cubic_solverEffff(float, float, float, float) #3 comdat {
  %5 = fsub float -0.000000e+00, %3
  %6 = fmul float %0, 3.000000e+00
  %7 = fmul float %1, 2.000000e+00
  %8 = fadd float %6, %6
  br label %9

9:                                                ; preds = %20, %4
  %10 = phi float [ %5, %4 ], [ %33, %20 ]
  %11 = phi i32 [ 0, %4 ], [ %34, %20 ]
  %12 = fmul float %10, %0
  %13 = fadd float %12, %1
  %14 = fmul float %10, %13
  %15 = fadd float %14, %2
  %16 = fmul float %10, %15
  %17 = fadd float %16, %3
  %18 = tail call float @llvm.fabs.f32(float %17)
  %19 = fcmp ugt float %18, 0x3F0A36E2E0000000
  br i1 %19, label %20, label %36

20:                                               ; preds = %9
  %21 = fmul float %6, %10
  %22 = fadd float %7, %21
  %23 = fmul float %10, %22
  %24 = fadd float %23, %2
  %25 = fmul float %8, %10
  %26 = fadd float %7, %25
  %27 = fmul float %24, 2.000000e+00
  %28 = fmul float %27, %17
  %29 = fmul float %26, %17
  %30 = fmul float %24, %27
  %31 = fsub float %30, %29
  %32 = fdiv float %28, %31
  %33 = fsub float %10, %32
  %34 = add nuw nsw i32 %11, 1
  %35 = icmp eq i32 %34, 8
  br i1 %35, label %36, label %9

36:                                               ; preds = %20, %9
  %37 = phi float [ %10, %9 ], [ %33, %20 ]
  ret float %37
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3hsw12RGBA_to_BGRAEPjPKji(i32*, i32*, i32) #1 comdat {
  %4 = icmp sgt i32 %2, 7
  br i1 %4, label %5, label %66

5:                                                ; preds = %3
  %6 = add nsw i32 %2, -8
  %7 = lshr i32 %6, 3
  %8 = add nuw nsw i32 %7, 1
  %9 = and i32 %8, 3
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %25, label %11

11:                                               ; preds = %5, %11
  %12 = phi i32* [ %21, %11 ], [ %0, %5 ]
  %13 = phi i32* [ %20, %11 ], [ %1, %5 ]
  %14 = phi i32 [ %22, %11 ], [ %2, %5 ]
  %15 = phi i32 [ %23, %11 ], [ %9, %5 ]
  %16 = bitcast i32* %13 to <32 x i8>*
  %17 = load <32 x i8>, <32 x i8>* %16, align 1
  %18 = shufflevector <32 x i8> %17, <32 x i8> undef, <32 x i32> <i32 2, i32 1, i32 0, i32 3, i32 6, i32 5, i32 4, i32 7, i32 10, i32 9, i32 8, i32 11, i32 14, i32 13, i32 12, i32 15, i32 18, i32 17, i32 16, i32 19, i32 22, i32 21, i32 20, i32 23, i32 26, i32 25, i32 24, i32 27, i32 30, i32 29, i32 28, i32 31>
  %19 = bitcast i32* %12 to <32 x i8>*
  store <32 x i8> %18, <32 x i8>* %19, align 1
  %20 = getelementptr inbounds i32, i32* %13, i64 8
  %21 = getelementptr inbounds i32, i32* %12, i64 8
  %22 = add nsw i32 %14, -8
  %23 = add i32 %15, -1
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %11, !llvm.loop !40

25:                                               ; preds = %11, %5
  %26 = phi i32* [ %0, %5 ], [ %21, %11 ]
  %27 = phi i32* [ %1, %5 ], [ %20, %11 ]
  %28 = phi i32 [ %2, %5 ], [ %22, %11 ]
  %29 = phi i32* [ undef, %5 ], [ %20, %11 ]
  %30 = phi i32* [ undef, %5 ], [ %21, %11 ]
  %31 = icmp ult i32 %6, 24
  br i1 %31, label %62, label %32

32:                                               ; preds = %25, %32
  %33 = phi i32* [ %59, %32 ], [ %26, %25 ]
  %34 = phi i32* [ %58, %32 ], [ %27, %25 ]
  %35 = phi i32 [ %60, %32 ], [ %28, %25 ]
  %36 = bitcast i32* %34 to <32 x i8>*
  %37 = load <32 x i8>, <32 x i8>* %36, align 1
  %38 = shufflevector <32 x i8> %37, <32 x i8> undef, <32 x i32> <i32 2, i32 1, i32 0, i32 3, i32 6, i32 5, i32 4, i32 7, i32 10, i32 9, i32 8, i32 11, i32 14, i32 13, i32 12, i32 15, i32 18, i32 17, i32 16, i32 19, i32 22, i32 21, i32 20, i32 23, i32 26, i32 25, i32 24, i32 27, i32 30, i32 29, i32 28, i32 31>
  %39 = bitcast i32* %33 to <32 x i8>*
  store <32 x i8> %38, <32 x i8>* %39, align 1
  %40 = getelementptr inbounds i32, i32* %34, i64 8
  %41 = getelementptr inbounds i32, i32* %33, i64 8
  %42 = bitcast i32* %40 to <32 x i8>*
  %43 = load <32 x i8>, <32 x i8>* %42, align 1
  %44 = shufflevector <32 x i8> %43, <32 x i8> undef, <32 x i32> <i32 2, i32 1, i32 0, i32 3, i32 6, i32 5, i32 4, i32 7, i32 10, i32 9, i32 8, i32 11, i32 14, i32 13, i32 12, i32 15, i32 18, i32 17, i32 16, i32 19, i32 22, i32 21, i32 20, i32 23, i32 26, i32 25, i32 24, i32 27, i32 30, i32 29, i32 28, i32 31>
  %45 = bitcast i32* %41 to <32 x i8>*
  store <32 x i8> %44, <32 x i8>* %45, align 1
  %46 = getelementptr inbounds i32, i32* %34, i64 16
  %47 = getelementptr inbounds i32, i32* %33, i64 16
  %48 = bitcast i32* %46 to <32 x i8>*
  %49 = load <32 x i8>, <32 x i8>* %48, align 1
  %50 = shufflevector <32 x i8> %49, <32 x i8> undef, <32 x i32> <i32 2, i32 1, i32 0, i32 3, i32 6, i32 5, i32 4, i32 7, i32 10, i32 9, i32 8, i32 11, i32 14, i32 13, i32 12, i32 15, i32 18, i32 17, i32 16, i32 19, i32 22, i32 21, i32 20, i32 23, i32 26, i32 25, i32 24, i32 27, i32 30, i32 29, i32 28, i32 31>
  %51 = bitcast i32* %47 to <32 x i8>*
  store <32 x i8> %50, <32 x i8>* %51, align 1
  %52 = getelementptr inbounds i32, i32* %34, i64 24
  %53 = getelementptr inbounds i32, i32* %33, i64 24
  %54 = bitcast i32* %52 to <32 x i8>*
  %55 = load <32 x i8>, <32 x i8>* %54, align 1
  %56 = shufflevector <32 x i8> %55, <32 x i8> undef, <32 x i32> <i32 2, i32 1, i32 0, i32 3, i32 6, i32 5, i32 4, i32 7, i32 10, i32 9, i32 8, i32 11, i32 14, i32 13, i32 12, i32 15, i32 18, i32 17, i32 16, i32 19, i32 22, i32 21, i32 20, i32 23, i32 26, i32 25, i32 24, i32 27, i32 30, i32 29, i32 28, i32 31>
  %57 = bitcast i32* %53 to <32 x i8>*
  store <32 x i8> %56, <32 x i8>* %57, align 1
  %58 = getelementptr inbounds i32, i32* %34, i64 32
  %59 = getelementptr inbounds i32, i32* %33, i64 32
  %60 = add nsw i32 %35, -32
  %61 = icmp sgt i32 %60, 7
  br i1 %61, label %32, label %62

62:                                               ; preds = %32, %25
  %63 = phi i32* [ %29, %25 ], [ %58, %32 ]
  %64 = phi i32* [ %30, %25 ], [ %59, %32 ]
  %65 = and i32 %2, 7
  br label %66

66:                                               ; preds = %62, %3
  %67 = phi i32 [ %2, %3 ], [ %65, %62 ]
  %68 = phi i32* [ %1, %3 ], [ %63, %62 ]
  %69 = phi i32* [ %0, %3 ], [ %64, %62 ]
  %70 = icmp sgt i32 %67, 0
  br i1 %70, label %71, label %182

71:                                               ; preds = %66
  %72 = zext i32 %67 to i64
  %73 = icmp ult i32 %67, 32
  br i1 %73, label %136, label %74

74:                                               ; preds = %71
  %75 = getelementptr i32, i32* %69, i64 %72
  %76 = getelementptr i32, i32* %68, i64 %72
  %77 = icmp ult i32* %69, %76
  %78 = icmp ult i32* %68, %75
  %79 = and i1 %77, %78
  br i1 %79, label %136, label %80

80:                                               ; preds = %74
  %81 = and i64 %72, 4294967264
  br label %82

82:                                               ; preds = %82, %80
  %83 = phi i64 [ 0, %80 ], [ %132, %82 ]
  %84 = getelementptr inbounds i32, i32* %68, i64 %83
  %85 = bitcast i32* %84 to <8 x i32>*
  %86 = load <8 x i32>, <8 x i32>* %85, align 4, !alias.scope !42
  %87 = getelementptr inbounds i32, i32* %84, i64 8
  %88 = bitcast i32* %87 to <8 x i32>*
  %89 = load <8 x i32>, <8 x i32>* %88, align 4, !alias.scope !42
  %90 = getelementptr inbounds i32, i32* %84, i64 16
  %91 = bitcast i32* %90 to <8 x i32>*
  %92 = load <8 x i32>, <8 x i32>* %91, align 4, !alias.scope !42
  %93 = getelementptr inbounds i32, i32* %84, i64 24
  %94 = bitcast i32* %93 to <8 x i32>*
  %95 = load <8 x i32>, <8 x i32>* %94, align 4, !alias.scope !42
  %96 = lshr <8 x i32> %86, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %97 = lshr <8 x i32> %89, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %98 = lshr <8 x i32> %92, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %99 = lshr <8 x i32> %95, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %100 = shl <8 x i32> %86, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %101 = shl <8 x i32> %89, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %102 = shl <8 x i32> %92, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %103 = shl <8 x i32> %95, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %104 = and <8 x i32> %100, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %105 = and <8 x i32> %101, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %106 = and <8 x i32> %102, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %107 = and <8 x i32> %103, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %108 = and <8 x i32> %96, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %109 = and <8 x i32> %97, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %110 = and <8 x i32> %98, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %111 = and <8 x i32> %99, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %112 = and <8 x i32> %86, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %113 = and <8 x i32> %89, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %114 = and <8 x i32> %92, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %115 = and <8 x i32> %95, <i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936, i32 -16711936>
  %116 = or <8 x i32> %104, %112
  %117 = or <8 x i32> %105, %113
  %118 = or <8 x i32> %106, %114
  %119 = or <8 x i32> %107, %115
  %120 = or <8 x i32> %116, %108
  %121 = or <8 x i32> %117, %109
  %122 = or <8 x i32> %118, %110
  %123 = or <8 x i32> %119, %111
  %124 = getelementptr inbounds i32, i32* %69, i64 %83
  %125 = bitcast i32* %124 to <8 x i32>*
  store <8 x i32> %120, <8 x i32>* %125, align 4, !alias.scope !45, !noalias !42
  %126 = getelementptr inbounds i32, i32* %124, i64 8
  %127 = bitcast i32* %126 to <8 x i32>*
  store <8 x i32> %121, <8 x i32>* %127, align 4, !alias.scope !45, !noalias !42
  %128 = getelementptr inbounds i32, i32* %124, i64 16
  %129 = bitcast i32* %128 to <8 x i32>*
  store <8 x i32> %122, <8 x i32>* %129, align 4, !alias.scope !45, !noalias !42
  %130 = getelementptr inbounds i32, i32* %124, i64 24
  %131 = bitcast i32* %130 to <8 x i32>*
  store <8 x i32> %123, <8 x i32>* %131, align 4, !alias.scope !45, !noalias !42
  %132 = add i64 %83, 32
  %133 = icmp eq i64 %132, %81
  br i1 %133, label %134, label %82, !llvm.loop !47

134:                                              ; preds = %82
  %135 = icmp eq i64 %81, %72
  br i1 %135, label %182, label %136

136:                                              ; preds = %134, %74, %71
  %137 = phi i64 [ 0, %74 ], [ 0, %71 ], [ %81, %134 ]
  %138 = xor i64 %137, -1
  %139 = and i64 %72, 1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %153, label %141

141:                                              ; preds = %136
  %142 = getelementptr inbounds i32, i32* %68, i64 %137
  %143 = load i32, i32* %142, align 4
  %144 = lshr i32 %143, 16
  %145 = shl i32 %143, 16
  %146 = and i32 %145, 16711680
  %147 = and i32 %144, 255
  %148 = and i32 %143, -16711936
  %149 = or i32 %146, %148
  %150 = or i32 %149, %147
  %151 = getelementptr inbounds i32, i32* %69, i64 %137
  store i32 %150, i32* %151, align 4
  %152 = or i64 %137, 1
  br label %153

153:                                              ; preds = %136, %141
  %154 = phi i64 [ %137, %136 ], [ %152, %141 ]
  %155 = sub nsw i64 0, %72
  %156 = icmp eq i64 %138, %155
  br i1 %156, label %182, label %157

157:                                              ; preds = %153, %157
  %158 = phi i64 [ %180, %157 ], [ %154, %153 ]
  %159 = getelementptr inbounds i32, i32* %68, i64 %158
  %160 = load i32, i32* %159, align 4
  %161 = lshr i32 %160, 16
  %162 = shl i32 %160, 16
  %163 = and i32 %162, 16711680
  %164 = and i32 %161, 255
  %165 = and i32 %160, -16711936
  %166 = or i32 %163, %165
  %167 = or i32 %166, %164
  %168 = getelementptr inbounds i32, i32* %69, i64 %158
  store i32 %167, i32* %168, align 4
  %169 = add nuw nsw i64 %158, 1
  %170 = getelementptr inbounds i32, i32* %68, i64 %169
  %171 = load i32, i32* %170, align 4
  %172 = lshr i32 %171, 16
  %173 = shl i32 %171, 16
  %174 = and i32 %173, 16711680
  %175 = and i32 %172, 255
  %176 = and i32 %171, -16711936
  %177 = or i32 %174, %176
  %178 = or i32 %177, %175
  %179 = getelementptr inbounds i32, i32* %69, i64 %169
  store i32 %178, i32* %179, align 4
  %180 = add nuw nsw i64 %158, 2
  %181 = icmp eq i64 %180, %72
  br i1 %181, label %182, label %157, !llvm.loop !48

182:                                              ; preds = %153, %157, %134, %66
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3hsw12RGBA_to_rgbAEPjPKji(i32*, i32*, i32) #1 comdat {
  %4 = icmp sgt i32 %2, 15
  br i1 %4, label %5, label %54

5:                                                ; preds = %3, %5
  %6 = phi i32* [ %49, %5 ], [ %0, %3 ]
  %7 = phi i32 [ %50, %5 ], [ %2, %3 ]
  %8 = phi i32* [ %48, %5 ], [ %1, %3 ]
  %9 = bitcast i32* %8 to <32 x i8>*
  %10 = load <32 x i8>, <32 x i8>* %9, align 1
  %11 = getelementptr inbounds i32, i32* %8, i64 8
  %12 = bitcast i32* %11 to <32 x i8>*
  %13 = load <32 x i8>, <32 x i8>* %12, align 1
  %14 = shufflevector <32 x i8> %10, <32 x i8> undef, <32 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15, i32 16, i32 20, i32 24, i32 28, i32 17, i32 21, i32 25, i32 29, i32 18, i32 22, i32 26, i32 30, i32 19, i32 23, i32 27, i32 31>
  %15 = shufflevector <32 x i8> %13, <32 x i8> undef, <32 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15, i32 16, i32 20, i32 24, i32 28, i32 17, i32 21, i32 25, i32 29, i32 18, i32 22, i32 26, i32 30, i32 19, i32 23, i32 27, i32 31>
  %16 = bitcast <32 x i8> %14 to <8 x i32>
  %17 = bitcast <32 x i8> %15 to <8 x i32>
  %18 = shufflevector <8 x i32> %16, <8 x i32> %17, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %19 = shufflevector <8 x i32> %16, <8 x i32> %17, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %20 = bitcast <8 x i32> %18 to <32 x i8>
  %21 = shufflevector <32 x i8> %20, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %22 = shufflevector <32 x i8> %20, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %23 = bitcast <8 x i32> %19 to <32 x i8>
  %24 = shufflevector <32 x i8> %23, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %25 = shufflevector <32 x i8> %23, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %26 = bitcast <32 x i8> %21 to <16 x i16>
  %27 = bitcast <32 x i8> %25 to <16 x i16>
  %28 = mul <16 x i16> %27, %26
  %29 = add <16 x i16> %28, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %30 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %31 = bitcast <32 x i8> %22 to <16 x i16>
  %32 = mul <16 x i16> %27, %31
  %33 = add <16 x i16> %32, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %34 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %35 = bitcast <32 x i8> %24 to <16 x i16>
  %36 = mul <16 x i16> %27, %35
  %37 = add <16 x i16> %36, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %38 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %39 = shl <16 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %40 = or <16 x i16> %39, %30
  %41 = shl <16 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %42 = or <16 x i16> %41, %38
  %43 = shufflevector <16 x i16> %40, <16 x i16> %42, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %44 = shufflevector <16 x i16> %40, <16 x i16> %42, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %45 = bitcast i32* %6 to <16 x i16>*
  store <16 x i16> %43, <16 x i16>* %45, align 1
  %46 = getelementptr inbounds i32, i32* %6, i64 8
  %47 = bitcast i32* %46 to <16 x i16>*
  store <16 x i16> %44, <16 x i16>* %47, align 1
  %48 = getelementptr inbounds i32, i32* %8, i64 16
  %49 = getelementptr inbounds i32, i32* %6, i64 16
  %50 = add nsw i32 %7, -16
  %51 = icmp sgt i32 %50, 15
  br i1 %51, label %5, label %52

52:                                               ; preds = %5
  %53 = and i32 %2, 15
  br label %54

54:                                               ; preds = %52, %3
  %55 = phi i32* [ %1, %3 ], [ %48, %52 ]
  %56 = phi i32 [ %2, %3 ], [ %53, %52 ]
  %57 = phi i32* [ %0, %3 ], [ %49, %52 ]
  %58 = icmp sgt i32 %56, 7
  br i1 %58, label %59, label %94

59:                                               ; preds = %54
  %60 = bitcast i32* %55 to <32 x i8>*
  %61 = load <32 x i8>, <32 x i8>* %60, align 1
  %62 = shufflevector <32 x i8> %61, <32 x i8> undef, <32 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15, i32 16, i32 20, i32 24, i32 28, i32 17, i32 21, i32 25, i32 29, i32 18, i32 22, i32 26, i32 30, i32 19, i32 23, i32 27, i32 31>
  %63 = bitcast <32 x i8> %62 to <8 x i32>
  %64 = shufflevector <8 x i32> %63, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %65 = shufflevector <8 x i32> %63, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %66 = bitcast <8 x i32> %64 to <32 x i8>
  %67 = shufflevector <32 x i8> %66, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %68 = shufflevector <32 x i8> %66, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %69 = bitcast <8 x i32> %65 to <32 x i8>
  %70 = shufflevector <32 x i8> %69, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %71 = shufflevector <32 x i8> %69, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %72 = bitcast <32 x i8> %67 to <16 x i16>
  %73 = bitcast <32 x i8> %71 to <16 x i16>
  %74 = mul <16 x i16> %73, %72
  %75 = add <16 x i16> %74, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %76 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %75, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %77 = bitcast <32 x i8> %68 to <16 x i16>
  %78 = mul <16 x i16> %73, %77
  %79 = add <16 x i16> %78, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %80 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %79, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %81 = bitcast <32 x i8> %70 to <16 x i16>
  %82 = mul <16 x i16> %73, %81
  %83 = add <16 x i16> %82, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %84 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %83, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %85 = shl <16 x i16> %80, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %86 = or <16 x i16> %85, %76
  %87 = shl <16 x i16> %73, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %88 = or <16 x i16> %87, %84
  %89 = shufflevector <16 x i16> %86, <16 x i16> %88, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %90 = bitcast i32* %57 to <16 x i16>*
  store <16 x i16> %89, <16 x i16>* %90, align 1
  %91 = getelementptr inbounds i32, i32* %55, i64 8
  %92 = getelementptr inbounds i32, i32* %57, i64 8
  %93 = add nsw i32 %56, -8
  br label %94

94:                                               ; preds = %54, %59
  %95 = phi i32* [ %91, %59 ], [ %55, %54 ]
  %96 = phi i32 [ %93, %59 ], [ %56, %54 ]
  %97 = phi i32* [ %92, %59 ], [ %57, %54 ]
  %98 = icmp sgt i32 %96, 0
  br i1 %98, label %99, label %190

99:                                               ; preds = %94
  %100 = zext i32 %96 to i64
  %101 = icmp ult i32 %96, 8
  br i1 %101, label %151, label %102

102:                                              ; preds = %99
  %103 = getelementptr i32, i32* %97, i64 %100
  %104 = getelementptr i32, i32* %95, i64 %100
  %105 = icmp ult i32* %97, %104
  %106 = icmp ult i32* %95, %103
  %107 = and i1 %105, %106
  br i1 %107, label %151, label %108

108:                                              ; preds = %102
  %109 = and i64 %100, 4294967288
  br label %110

110:                                              ; preds = %110, %108
  %111 = phi i64 [ 0, %108 ], [ %147, %110 ]
  %112 = getelementptr inbounds i32, i32* %95, i64 %111
  %113 = bitcast i32* %112 to <8 x i32>*
  %114 = load <8 x i32>, <8 x i32>* %113, align 4, !alias.scope !49
  %115 = lshr <8 x i32> %114, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %116 = lshr <8 x i32> %114, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %117 = lshr <8 x i32> %114, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %118 = and <8 x i32> %116, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %119 = mul nuw nsw <8 x i32> %118, %115
  %120 = trunc <8 x i32> %119 to <8 x i16>
  %121 = add nuw <8 x i16> %120, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %122 = udiv <8 x i16> %121, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %123 = zext <8 x i16> %122 to <8 x i32>
  %124 = and <8 x i32> %117, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %125 = mul nuw nsw <8 x i32> %124, %115
  %126 = trunc <8 x i32> %125 to <8 x i16>
  %127 = add nuw <8 x i16> %126, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %128 = udiv <8 x i16> %127, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %129 = zext <8 x i16> %128 to <8 x i32>
  %130 = and <8 x i32> %114, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %131 = mul nuw nsw <8 x i32> %130, %115
  %132 = trunc <8 x i32> %131 to <8 x i16>
  %133 = add nuw <8 x i16> %132, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %134 = udiv <8 x i16> %133, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %135 = and <8 x i32> %114, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %136 = shl nuw nsw <8 x i32> %123, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %137 = and <8 x i32> %136, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %138 = shl nuw nsw <8 x i32> %129, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %139 = and <8 x i32> %138, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %140 = and <8 x i16> %134, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %141 = zext <8 x i16> %140 to <8 x i32>
  %142 = or <8 x i32> %135, %141
  %143 = or <8 x i32> %142, %137
  %144 = or <8 x i32> %143, %139
  %145 = getelementptr inbounds i32, i32* %97, i64 %111
  %146 = bitcast i32* %145 to <8 x i32>*
  store <8 x i32> %144, <8 x i32>* %146, align 4, !alias.scope !52, !noalias !49
  %147 = add i64 %111, 8
  %148 = icmp eq i64 %147, %109
  br i1 %148, label %149, label %110, !llvm.loop !54

149:                                              ; preds = %110
  %150 = icmp eq i64 %109, %100
  br i1 %150, label %190, label %151

151:                                              ; preds = %149, %102, %99
  %152 = phi i64 [ 0, %102 ], [ 0, %99 ], [ %109, %149 ]
  br label %153

153:                                              ; preds = %151, %153
  %154 = phi i64 [ %188, %153 ], [ %152, %151 ]
  %155 = getelementptr inbounds i32, i32* %95, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = lshr i32 %156, 24
  %158 = lshr i32 %156, 16
  %159 = lshr i32 %156, 8
  %160 = and i32 %158, 255
  %161 = mul nuw nsw i32 %160, %157
  %162 = trunc i32 %161 to i16
  %163 = add nuw i16 %162, 127
  %164 = udiv i16 %163, 255
  %165 = zext i16 %164 to i32
  %166 = and i32 %159, 255
  %167 = mul nuw nsw i32 %166, %157
  %168 = trunc i32 %167 to i16
  %169 = add nuw i16 %168, 127
  %170 = udiv i16 %169, 255
  %171 = zext i16 %170 to i32
  %172 = and i32 %156, 255
  %173 = mul nuw nsw i32 %172, %157
  %174 = trunc i32 %173 to i16
  %175 = add nuw i16 %174, 127
  %176 = udiv i16 %175, 255
  %177 = and i32 %156, -16777216
  %178 = shl nuw nsw i32 %165, 16
  %179 = and i32 %178, 16711680
  %180 = shl nuw nsw i32 %171, 8
  %181 = and i32 %180, 65280
  %182 = and i16 %176, 255
  %183 = zext i16 %182 to i32
  %184 = or i32 %177, %183
  %185 = or i32 %184, %179
  %186 = or i32 %185, %181
  %187 = getelementptr inbounds i32, i32* %97, i64 %154
  store i32 %186, i32* %187, align 4
  %188 = add nuw nsw i64 %154, 1
  %189 = icmp eq i64 %188, %100
  br i1 %189, label %190, label %153, !llvm.loop !55

190:                                              ; preds = %153, %149, %94
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3hsw12RGBA_to_bgrAEPjPKji(i32*, i32*, i32) #1 comdat {
  %4 = icmp sgt i32 %2, 15
  br i1 %4, label %5, label %54

5:                                                ; preds = %3, %5
  %6 = phi i32* [ %49, %5 ], [ %0, %3 ]
  %7 = phi i32 [ %50, %5 ], [ %2, %3 ]
  %8 = phi i32* [ %48, %5 ], [ %1, %3 ]
  %9 = bitcast i32* %8 to <32 x i8>*
  %10 = load <32 x i8>, <32 x i8>* %9, align 1
  %11 = getelementptr inbounds i32, i32* %8, i64 8
  %12 = bitcast i32* %11 to <32 x i8>*
  %13 = load <32 x i8>, <32 x i8>* %12, align 1
  %14 = shufflevector <32 x i8> %10, <32 x i8> undef, <32 x i32> <i32 2, i32 6, i32 10, i32 14, i32 1, i32 5, i32 9, i32 13, i32 0, i32 4, i32 8, i32 12, i32 3, i32 7, i32 11, i32 15, i32 18, i32 22, i32 26, i32 30, i32 17, i32 21, i32 25, i32 29, i32 16, i32 20, i32 24, i32 28, i32 19, i32 23, i32 27, i32 31>
  %15 = shufflevector <32 x i8> %13, <32 x i8> undef, <32 x i32> <i32 2, i32 6, i32 10, i32 14, i32 1, i32 5, i32 9, i32 13, i32 0, i32 4, i32 8, i32 12, i32 3, i32 7, i32 11, i32 15, i32 18, i32 22, i32 26, i32 30, i32 17, i32 21, i32 25, i32 29, i32 16, i32 20, i32 24, i32 28, i32 19, i32 23, i32 27, i32 31>
  %16 = bitcast <32 x i8> %14 to <8 x i32>
  %17 = bitcast <32 x i8> %15 to <8 x i32>
  %18 = shufflevector <8 x i32> %16, <8 x i32> %17, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %19 = shufflevector <8 x i32> %16, <8 x i32> %17, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %20 = bitcast <8 x i32> %18 to <32 x i8>
  %21 = shufflevector <32 x i8> %20, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %22 = shufflevector <32 x i8> %20, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %23 = bitcast <8 x i32> %19 to <32 x i8>
  %24 = shufflevector <32 x i8> %23, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %25 = shufflevector <32 x i8> %23, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %26 = bitcast <32 x i8> %21 to <16 x i16>
  %27 = bitcast <32 x i8> %25 to <16 x i16>
  %28 = mul <16 x i16> %27, %26
  %29 = add <16 x i16> %28, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %30 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %31 = bitcast <32 x i8> %22 to <16 x i16>
  %32 = mul <16 x i16> %27, %31
  %33 = add <16 x i16> %32, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %34 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %35 = bitcast <32 x i8> %24 to <16 x i16>
  %36 = mul <16 x i16> %27, %35
  %37 = add <16 x i16> %36, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %38 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %39 = shl <16 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %40 = or <16 x i16> %39, %30
  %41 = shl <16 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %42 = or <16 x i16> %41, %38
  %43 = shufflevector <16 x i16> %40, <16 x i16> %42, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %44 = shufflevector <16 x i16> %40, <16 x i16> %42, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %45 = bitcast i32* %6 to <16 x i16>*
  store <16 x i16> %43, <16 x i16>* %45, align 1
  %46 = getelementptr inbounds i32, i32* %6, i64 8
  %47 = bitcast i32* %46 to <16 x i16>*
  store <16 x i16> %44, <16 x i16>* %47, align 1
  %48 = getelementptr inbounds i32, i32* %8, i64 16
  %49 = getelementptr inbounds i32, i32* %6, i64 16
  %50 = add nsw i32 %7, -16
  %51 = icmp sgt i32 %50, 15
  br i1 %51, label %5, label %52

52:                                               ; preds = %5
  %53 = and i32 %2, 15
  br label %54

54:                                               ; preds = %52, %3
  %55 = phi i32* [ %1, %3 ], [ %48, %52 ]
  %56 = phi i32 [ %2, %3 ], [ %53, %52 ]
  %57 = phi i32* [ %0, %3 ], [ %49, %52 ]
  %58 = icmp sgt i32 %56, 7
  br i1 %58, label %59, label %94

59:                                               ; preds = %54
  %60 = bitcast i32* %55 to <32 x i8>*
  %61 = load <32 x i8>, <32 x i8>* %60, align 1
  %62 = shufflevector <32 x i8> %61, <32 x i8> undef, <32 x i32> <i32 2, i32 6, i32 10, i32 14, i32 1, i32 5, i32 9, i32 13, i32 0, i32 4, i32 8, i32 12, i32 3, i32 7, i32 11, i32 15, i32 18, i32 22, i32 26, i32 30, i32 17, i32 21, i32 25, i32 29, i32 16, i32 20, i32 24, i32 28, i32 19, i32 23, i32 27, i32 31>
  %63 = bitcast <32 x i8> %62 to <8 x i32>
  %64 = shufflevector <8 x i32> %63, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %65 = shufflevector <8 x i32> %63, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %66 = bitcast <8 x i32> %64 to <32 x i8>
  %67 = shufflevector <32 x i8> %66, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %68 = shufflevector <32 x i8> %66, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %69 = bitcast <8 x i32> %65 to <32 x i8>
  %70 = shufflevector <32 x i8> %69, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %71 = shufflevector <32 x i8> %69, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %72 = bitcast <32 x i8> %67 to <16 x i16>
  %73 = bitcast <32 x i8> %71 to <16 x i16>
  %74 = mul <16 x i16> %73, %72
  %75 = add <16 x i16> %74, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %76 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %75, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %77 = bitcast <32 x i8> %68 to <16 x i16>
  %78 = mul <16 x i16> %73, %77
  %79 = add <16 x i16> %78, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %80 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %79, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %81 = bitcast <32 x i8> %70 to <16 x i16>
  %82 = mul <16 x i16> %73, %81
  %83 = add <16 x i16> %82, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %84 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %83, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %85 = shl <16 x i16> %80, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %86 = or <16 x i16> %85, %76
  %87 = shl <16 x i16> %73, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %88 = or <16 x i16> %87, %84
  %89 = shufflevector <16 x i16> %86, <16 x i16> %88, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %90 = bitcast i32* %57 to <16 x i16>*
  store <16 x i16> %89, <16 x i16>* %90, align 1
  %91 = getelementptr inbounds i32, i32* %55, i64 8
  %92 = getelementptr inbounds i32, i32* %57, i64 8
  %93 = add nsw i32 %56, -8
  br label %94

94:                                               ; preds = %54, %59
  %95 = phi i32* [ %91, %59 ], [ %55, %54 ]
  %96 = phi i32 [ %93, %59 ], [ %56, %54 ]
  %97 = phi i32* [ %92, %59 ], [ %57, %54 ]
  %98 = icmp sgt i32 %96, 0
  br i1 %98, label %99, label %190

99:                                               ; preds = %94
  %100 = zext i32 %96 to i64
  %101 = icmp ult i32 %96, 8
  br i1 %101, label %151, label %102

102:                                              ; preds = %99
  %103 = getelementptr i32, i32* %97, i64 %100
  %104 = getelementptr i32, i32* %95, i64 %100
  %105 = icmp ult i32* %97, %104
  %106 = icmp ult i32* %95, %103
  %107 = and i1 %105, %106
  br i1 %107, label %151, label %108

108:                                              ; preds = %102
  %109 = and i64 %100, 4294967288
  br label %110

110:                                              ; preds = %110, %108
  %111 = phi i64 [ 0, %108 ], [ %147, %110 ]
  %112 = getelementptr inbounds i32, i32* %95, i64 %111
  %113 = bitcast i32* %112 to <8 x i32>*
  %114 = load <8 x i32>, <8 x i32>* %113, align 4, !alias.scope !56
  %115 = lshr <8 x i32> %114, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %116 = lshr <8 x i32> %114, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %117 = lshr <8 x i32> %114, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %118 = and <8 x i32> %116, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %119 = mul nuw nsw <8 x i32> %118, %115
  %120 = trunc <8 x i32> %119 to <8 x i16>
  %121 = add nuw <8 x i16> %120, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %122 = udiv <8 x i16> %121, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %123 = and <8 x i32> %117, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %124 = mul nuw nsw <8 x i32> %123, %115
  %125 = trunc <8 x i32> %124 to <8 x i16>
  %126 = add nuw <8 x i16> %125, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %127 = udiv <8 x i16> %126, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %128 = zext <8 x i16> %127 to <8 x i32>
  %129 = and <8 x i32> %114, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %130 = mul nuw nsw <8 x i32> %129, %115
  %131 = trunc <8 x i32> %130 to <8 x i16>
  %132 = add nuw <8 x i16> %131, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %133 = udiv <8 x i16> %132, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %134 = zext <8 x i16> %133 to <8 x i32>
  %135 = and <8 x i32> %114, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %136 = shl nuw nsw <8 x i32> %134, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %137 = and <8 x i32> %136, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %138 = or <8 x i32> %137, %135
  %139 = shl nuw nsw <8 x i32> %128, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %140 = and <8 x i32> %139, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %141 = and <8 x i16> %122, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %142 = zext <8 x i16> %141 to <8 x i32>
  %143 = or <8 x i32> %138, %142
  %144 = or <8 x i32> %143, %140
  %145 = getelementptr inbounds i32, i32* %97, i64 %111
  %146 = bitcast i32* %145 to <8 x i32>*
  store <8 x i32> %144, <8 x i32>* %146, align 4, !alias.scope !59, !noalias !56
  %147 = add i64 %111, 8
  %148 = icmp eq i64 %147, %109
  br i1 %148, label %149, label %110, !llvm.loop !61

149:                                              ; preds = %110
  %150 = icmp eq i64 %109, %100
  br i1 %150, label %190, label %151

151:                                              ; preds = %149, %102, %99
  %152 = phi i64 [ 0, %102 ], [ 0, %99 ], [ %109, %149 ]
  br label %153

153:                                              ; preds = %151, %153
  %154 = phi i64 [ %188, %153 ], [ %152, %151 ]
  %155 = getelementptr inbounds i32, i32* %95, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = lshr i32 %156, 24
  %158 = lshr i32 %156, 16
  %159 = lshr i32 %156, 8
  %160 = and i32 %158, 255
  %161 = mul nuw nsw i32 %160, %157
  %162 = trunc i32 %161 to i16
  %163 = add nuw i16 %162, 127
  %164 = udiv i16 %163, 255
  %165 = and i32 %159, 255
  %166 = mul nuw nsw i32 %165, %157
  %167 = trunc i32 %166 to i16
  %168 = add nuw i16 %167, 127
  %169 = udiv i16 %168, 255
  %170 = zext i16 %169 to i32
  %171 = and i32 %156, 255
  %172 = mul nuw nsw i32 %171, %157
  %173 = trunc i32 %172 to i16
  %174 = add nuw i16 %173, 127
  %175 = udiv i16 %174, 255
  %176 = zext i16 %175 to i32
  %177 = and i32 %156, -16777216
  %178 = shl nuw nsw i32 %176, 16
  %179 = and i32 %178, 16711680
  %180 = or i32 %179, %177
  %181 = shl nuw nsw i32 %170, 8
  %182 = and i32 %181, 65280
  %183 = and i16 %164, 255
  %184 = zext i16 %183 to i32
  %185 = or i32 %180, %184
  %186 = or i32 %185, %182
  %187 = getelementptr inbounds i32, i32* %97, i64 %154
  store i32 %186, i32* %187, align 4
  %188 = add nuw nsw i64 %154, 1
  %189 = icmp eq i64 %188, %100
  br i1 %189, label %190, label %153, !llvm.loop !62

190:                                              ; preds = %153, %149, %94
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3hsw12gray_to_RGB1EPjPKhi(i32*, i8*, i32) #1 comdat {
  %4 = icmp sgt i32 %2, 31
  br i1 %4, label %5, label %44

5:                                                ; preds = %3, %5
  %6 = phi i32* [ %39, %5 ], [ %0, %3 ]
  %7 = phi i8* [ %38, %5 ], [ %1, %3 ]
  %8 = phi i32 [ %40, %5 ], [ %2, %3 ]
  %9 = bitcast i8* %7 to <32 x i8>*
  %10 = load <32 x i8>, <32 x i8>* %9, align 1
  %11 = shufflevector <32 x i8> %10, <32 x i8> undef, <32 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 16, i32 16, i32 17, i32 17, i32 18, i32 18, i32 19, i32 19, i32 20, i32 20, i32 21, i32 21, i32 22, i32 22, i32 23, i32 23>
  %12 = shufflevector <32 x i8> %10, <32 x i8> undef, <32 x i32> <i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14, i32 14, i32 15, i32 15, i32 24, i32 24, i32 25, i32 25, i32 26, i32 26, i32 27, i32 27, i32 28, i32 28, i32 29, i32 29, i32 30, i32 30, i32 31, i32 31>
  %13 = shufflevector <32 x i8> %10, <32 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %14 = shufflevector <32 x i8> %10, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %15 = bitcast <32 x i8> %11 to <16 x i16>
  %16 = bitcast <32 x i8> %13 to <16 x i16>
  %17 = shufflevector <16 x i16> %15, <16 x i16> %16, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %18 = bitcast <16 x i16> %17 to <4 x i64>
  %19 = shufflevector <16 x i16> %15, <16 x i16> %16, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %20 = bitcast <16 x i16> %19 to <4 x i64>
  %21 = bitcast <32 x i8> %12 to <16 x i16>
  %22 = bitcast <32 x i8> %14 to <16 x i16>
  %23 = shufflevector <16 x i16> %21, <16 x i16> %22, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %24 = bitcast <16 x i16> %23 to <4 x i64>
  %25 = shufflevector <16 x i16> %21, <16 x i16> %22, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %26 = bitcast <16 x i16> %25 to <4 x i64>
  %27 = shufflevector <4 x i64> %18, <4 x i64> %20, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %28 = shufflevector <4 x i64> %24, <4 x i64> %26, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %29 = shufflevector <4 x i64> %18, <4 x i64> %20, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %30 = shufflevector <4 x i64> %24, <4 x i64> %26, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %31 = bitcast i32* %6 to <4 x i64>*
  store <4 x i64> %27, <4 x i64>* %31, align 1
  %32 = getelementptr inbounds i32, i32* %6, i64 8
  %33 = bitcast i32* %32 to <4 x i64>*
  store <4 x i64> %28, <4 x i64>* %33, align 1
  %34 = getelementptr inbounds i32, i32* %6, i64 16
  %35 = bitcast i32* %34 to <4 x i64>*
  store <4 x i64> %29, <4 x i64>* %35, align 1
  %36 = getelementptr inbounds i32, i32* %6, i64 24
  %37 = bitcast i32* %36 to <4 x i64>*
  store <4 x i64> %30, <4 x i64>* %37, align 1
  %38 = getelementptr inbounds i8, i8* %7, i64 32
  %39 = getelementptr inbounds i32, i32* %6, i64 32
  %40 = add nsw i32 %8, -32
  %41 = icmp sgt i32 %40, 31
  br i1 %41, label %5, label %42

42:                                               ; preds = %5
  %43 = and i32 %2, 31
  br label %44

44:                                               ; preds = %42, %3
  %45 = phi i32 [ %2, %3 ], [ %43, %42 ]
  %46 = phi i8* [ %1, %3 ], [ %38, %42 ]
  %47 = phi i32* [ %0, %3 ], [ %39, %42 ]
  %48 = bitcast i32* %47 to i8*
  %49 = icmp sgt i32 %45, 0
  br i1 %49, label %50, label %155

50:                                               ; preds = %44
  %51 = zext i32 %45 to i64
  %52 = icmp ult i32 %45, 32
  br i1 %52, label %112, label %53

53:                                               ; preds = %50
  %54 = getelementptr i32, i32* %47, i64 %51
  %55 = bitcast i32* %54 to i8*
  %56 = getelementptr i8, i8* %46, i64 %51
  %57 = icmp ugt i8* %56, %48
  %58 = icmp ult i8* %46, %55
  %59 = and i1 %57, %58
  br i1 %59, label %112, label %60

60:                                               ; preds = %53
  %61 = and i64 %51, 4294967264
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %108, %62 ]
  %64 = getelementptr inbounds i8, i8* %46, i64 %63
  %65 = bitcast i8* %64 to <8 x i8>*
  %66 = load <8 x i8>, <8 x i8>* %65, align 1, !alias.scope !63
  %67 = getelementptr inbounds i8, i8* %64, i64 8
  %68 = bitcast i8* %67 to <8 x i8>*
  %69 = load <8 x i8>, <8 x i8>* %68, align 1, !alias.scope !63
  %70 = getelementptr inbounds i8, i8* %64, i64 16
  %71 = bitcast i8* %70 to <8 x i8>*
  %72 = load <8 x i8>, <8 x i8>* %71, align 1, !alias.scope !63
  %73 = getelementptr inbounds i8, i8* %64, i64 24
  %74 = bitcast i8* %73 to <8 x i8>*
  %75 = load <8 x i8>, <8 x i8>* %74, align 1, !alias.scope !63
  %76 = zext <8 x i8> %66 to <8 x i32>
  %77 = zext <8 x i8> %69 to <8 x i32>
  %78 = zext <8 x i8> %72 to <8 x i32>
  %79 = zext <8 x i8> %75 to <8 x i32>
  %80 = shl nuw nsw <8 x i32> %76, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %81 = shl nuw nsw <8 x i32> %77, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %82 = shl nuw nsw <8 x i32> %78, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %83 = shl nuw nsw <8 x i32> %79, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %84 = shl nuw nsw <8 x i32> %76, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %85 = shl nuw nsw <8 x i32> %77, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %86 = shl nuw nsw <8 x i32> %78, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %87 = shl nuw nsw <8 x i32> %79, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %88 = or <8 x i32> %84, %76
  %89 = or <8 x i32> %85, %77
  %90 = or <8 x i32> %86, %78
  %91 = or <8 x i32> %87, %79
  %92 = or <8 x i32> %88, %80
  %93 = or <8 x i32> %89, %81
  %94 = or <8 x i32> %90, %82
  %95 = or <8 x i32> %91, %83
  %96 = or <8 x i32> %92, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %97 = or <8 x i32> %93, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %98 = or <8 x i32> %94, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %99 = or <8 x i32> %95, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %100 = getelementptr inbounds i32, i32* %47, i64 %63
  %101 = bitcast i32* %100 to <8 x i32>*
  store <8 x i32> %96, <8 x i32>* %101, align 4, !alias.scope !66, !noalias !63
  %102 = getelementptr inbounds i32, i32* %100, i64 8
  %103 = bitcast i32* %102 to <8 x i32>*
  store <8 x i32> %97, <8 x i32>* %103, align 4, !alias.scope !66, !noalias !63
  %104 = getelementptr inbounds i32, i32* %100, i64 16
  %105 = bitcast i32* %104 to <8 x i32>*
  store <8 x i32> %98, <8 x i32>* %105, align 4, !alias.scope !66, !noalias !63
  %106 = getelementptr inbounds i32, i32* %100, i64 24
  %107 = bitcast i32* %106 to <8 x i32>*
  store <8 x i32> %99, <8 x i32>* %107, align 4, !alias.scope !66, !noalias !63
  %108 = add i64 %63, 32
  %109 = icmp eq i64 %108, %61
  br i1 %109, label %110, label %62, !llvm.loop !68

110:                                              ; preds = %62
  %111 = icmp eq i64 %61, %51
  br i1 %111, label %155, label %112

112:                                              ; preds = %110, %53, %50
  %113 = phi i64 [ 0, %53 ], [ 0, %50 ], [ %61, %110 ]
  %114 = xor i64 %113, -1
  %115 = and i64 %51, 1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %128, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds i8, i8* %46, i64 %113
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = shl nuw nsw i32 %120, 16
  %122 = shl nuw nsw i32 %120, 8
  %123 = or i32 %122, %120
  %124 = or i32 %123, %121
  %125 = or i32 %124, -16777216
  %126 = getelementptr inbounds i32, i32* %47, i64 %113
  store i32 %125, i32* %126, align 4
  %127 = or i64 %113, 1
  br label %128

128:                                              ; preds = %112, %117
  %129 = phi i64 [ %113, %112 ], [ %127, %117 ]
  %130 = sub nsw i64 0, %51
  %131 = icmp eq i64 %114, %130
  br i1 %131, label %155, label %132

132:                                              ; preds = %128, %132
  %133 = phi i64 [ %153, %132 ], [ %129, %128 ]
  %134 = getelementptr inbounds i8, i8* %46, i64 %133
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = shl nuw nsw i32 %136, 16
  %138 = shl nuw nsw i32 %136, 8
  %139 = or i32 %138, %136
  %140 = or i32 %139, %137
  %141 = or i32 %140, -16777216
  %142 = getelementptr inbounds i32, i32* %47, i64 %133
  store i32 %141, i32* %142, align 4
  %143 = add nuw nsw i64 %133, 1
  %144 = getelementptr inbounds i8, i8* %46, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = shl nuw nsw i32 %146, 16
  %148 = shl nuw nsw i32 %146, 8
  %149 = or i32 %148, %146
  %150 = or i32 %149, %147
  %151 = or i32 %150, -16777216
  %152 = getelementptr inbounds i32, i32* %47, i64 %143
  store i32 %151, i32* %152, align 4
  %153 = add nuw nsw i64 %133, 2
  %154 = icmp eq i64 %153, %51
  br i1 %154, label %155, label %132, !llvm.loop !69

155:                                              ; preds = %128, %132, %110, %44
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3hsw13grayA_to_RGBAEPjPKhi(i32*, i8*, i32) #1 comdat {
  %4 = icmp sgt i32 %2, 15
  br i1 %4, label %5, label %76

5:                                                ; preds = %3
  %6 = add nsw i32 %2, -16
  %7 = and i32 %6, 16
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %27

9:                                                ; preds = %5
  %10 = bitcast i8* %1 to <16 x i16>*
  %11 = load <16 x i16>, <16 x i16>* %10, align 1
  %12 = shl <16 x i16> %11, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %13 = and <16 x i16> %11, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %14 = or <16 x i16> %12, %13
  %15 = shufflevector <16 x i16> %14, <16 x i16> %11, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %16 = bitcast <16 x i16> %15 to <4 x i64>
  %17 = shufflevector <16 x i16> %14, <16 x i16> %11, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %18 = bitcast <16 x i16> %17 to <4 x i64>
  %19 = shufflevector <4 x i64> %16, <4 x i64> %18, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %20 = shufflevector <4 x i64> %16, <4 x i64> %18, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %21 = bitcast i32* %0 to <4 x i64>*
  store <4 x i64> %19, <4 x i64>* %21, align 1
  %22 = getelementptr inbounds i32, i32* %0, i64 8
  %23 = bitcast i32* %22 to <4 x i64>*
  store <4 x i64> %20, <4 x i64>* %23, align 1
  %24 = getelementptr inbounds i8, i8* %1, i64 32
  %25 = getelementptr inbounds i32, i32* %0, i64 16
  %26 = add nsw i32 %2, -16
  br label %27

27:                                               ; preds = %9, %5
  %28 = phi i32* [ %0, %5 ], [ %25, %9 ]
  %29 = phi i8* [ %1, %5 ], [ %24, %9 ]
  %30 = phi i32 [ %2, %5 ], [ %26, %9 ]
  %31 = phi i8* [ undef, %5 ], [ %24, %9 ]
  %32 = phi i32* [ undef, %5 ], [ %25, %9 ]
  %33 = icmp ult i32 %6, 16
  br i1 %33, label %72, label %34

34:                                               ; preds = %27, %34
  %35 = phi i32* [ %69, %34 ], [ %28, %27 ]
  %36 = phi i8* [ %68, %34 ], [ %29, %27 ]
  %37 = phi i32 [ %70, %34 ], [ %30, %27 ]
  %38 = bitcast i8* %36 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 1
  %40 = shl <16 x i16> %39, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %41 = and <16 x i16> %39, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %42 = or <16 x i16> %40, %41
  %43 = shufflevector <16 x i16> %42, <16 x i16> %39, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %44 = bitcast <16 x i16> %43 to <4 x i64>
  %45 = shufflevector <16 x i16> %42, <16 x i16> %39, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %46 = bitcast <16 x i16> %45 to <4 x i64>
  %47 = shufflevector <4 x i64> %44, <4 x i64> %46, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %48 = shufflevector <4 x i64> %44, <4 x i64> %46, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %49 = bitcast i32* %35 to <4 x i64>*
  store <4 x i64> %47, <4 x i64>* %49, align 1
  %50 = getelementptr inbounds i32, i32* %35, i64 8
  %51 = bitcast i32* %50 to <4 x i64>*
  store <4 x i64> %48, <4 x i64>* %51, align 1
  %52 = getelementptr inbounds i8, i8* %36, i64 32
  %53 = getelementptr inbounds i32, i32* %35, i64 16
  %54 = bitcast i8* %52 to <16 x i16>*
  %55 = load <16 x i16>, <16 x i16>* %54, align 1
  %56 = shl <16 x i16> %55, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %57 = and <16 x i16> %55, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %58 = or <16 x i16> %56, %57
  %59 = shufflevector <16 x i16> %58, <16 x i16> %55, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %60 = bitcast <16 x i16> %59 to <4 x i64>
  %61 = shufflevector <16 x i16> %58, <16 x i16> %55, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = bitcast <16 x i16> %61 to <4 x i64>
  %63 = shufflevector <4 x i64> %60, <4 x i64> %62, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %64 = shufflevector <4 x i64> %60, <4 x i64> %62, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %65 = bitcast i32* %53 to <4 x i64>*
  store <4 x i64> %63, <4 x i64>* %65, align 1
  %66 = getelementptr inbounds i32, i32* %35, i64 24
  %67 = bitcast i32* %66 to <4 x i64>*
  store <4 x i64> %64, <4 x i64>* %67, align 1
  %68 = getelementptr inbounds i8, i8* %36, i64 64
  %69 = getelementptr inbounds i32, i32* %35, i64 32
  %70 = add nsw i32 %37, -32
  %71 = icmp sgt i32 %70, 15
  br i1 %71, label %34, label %72

72:                                               ; preds = %34, %27
  %73 = phi i8* [ %31, %27 ], [ %68, %34 ]
  %74 = phi i32* [ %32, %27 ], [ %69, %34 ]
  %75 = and i32 %2, 15
  br label %76

76:                                               ; preds = %72, %3
  %77 = phi i32 [ %2, %3 ], [ %75, %72 ]
  %78 = phi i8* [ %1, %3 ], [ %73, %72 ]
  %79 = phi i32* [ %0, %3 ], [ %74, %72 ]
  %80 = bitcast i32* %79 to i8*
  %81 = icmp sgt i32 %77, 0
  br i1 %81, label %82, label %177

82:                                               ; preds = %76
  %83 = zext i32 %77 to i64
  %84 = icmp ult i32 %77, 8
  br i1 %84, label %119, label %85

85:                                               ; preds = %82
  %86 = getelementptr i32, i32* %79, i64 %83
  %87 = bitcast i32* %86 to i8*
  %88 = shl nuw nsw i64 %83, 1
  %89 = getelementptr i8, i8* %78, i64 %88
  %90 = icmp ugt i8* %89, %80
  %91 = icmp ult i8* %78, %87
  %92 = and i1 %90, %91
  br i1 %92, label %119, label %93

93:                                               ; preds = %85
  %94 = and i64 %83, 4294967288
  %95 = shl nuw nsw i64 %94, 1
  %96 = getelementptr i8, i8* %78, i64 %95
  br label %97

97:                                               ; preds = %97, %93
  %98 = phi i64 [ 0, %93 ], [ %115, %97 ]
  %99 = shl i64 %98, 1
  %100 = getelementptr i8, i8* %78, i64 %99
  %101 = bitcast i8* %100 to <16 x i8>*
  %102 = load <16 x i8>, <16 x i8>* %101, align 1
  %103 = shufflevector <16 x i8> %102, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %104 = shufflevector <16 x i8> %102, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %105 = zext <8 x i8> %104 to <8 x i32>
  %106 = shl nuw <8 x i32> %105, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %107 = zext <8 x i8> %103 to <8 x i32>
  %108 = shl nuw nsw <8 x i32> %107, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %109 = shl nuw nsw <8 x i32> %107, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %110 = or <8 x i32> %108, %107
  %111 = or <8 x i32> %110, %109
  %112 = or <8 x i32> %111, %106
  %113 = getelementptr inbounds i32, i32* %79, i64 %98
  %114 = bitcast i32* %113 to <8 x i32>*
  store <8 x i32> %112, <8 x i32>* %114, align 4, !alias.scope !70, !noalias !73
  %115 = add i64 %98, 8
  %116 = icmp eq i64 %115, %94
  br i1 %116, label %117, label %97, !llvm.loop !75

117:                                              ; preds = %97
  %118 = icmp eq i64 %94, %83
  br i1 %118, label %177, label %119

119:                                              ; preds = %117, %85, %82
  %120 = phi i64 [ 0, %85 ], [ 0, %82 ], [ %94, %117 ]
  %121 = phi i8* [ %78, %85 ], [ %78, %82 ], [ %96, %117 ]
  %122 = xor i64 %120, -1
  %123 = and i64 %83, 1
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %140, label %125

125:                                              ; preds = %119
  %126 = load i8, i8* %121, align 1
  %127 = getelementptr inbounds i8, i8* %121, i64 1
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %121, i64 2
  %130 = zext i8 %128 to i32
  %131 = shl nuw i32 %130, 24
  %132 = zext i8 %126 to i32
  %133 = shl nuw nsw i32 %132, 16
  %134 = shl nuw nsw i32 %132, 8
  %135 = or i32 %133, %132
  %136 = or i32 %135, %134
  %137 = or i32 %136, %131
  %138 = getelementptr inbounds i32, i32* %79, i64 %120
  store i32 %137, i32* %138, align 4
  %139 = or i64 %120, 1
  br label %140

140:                                              ; preds = %119, %125
  %141 = phi i64 [ %120, %119 ], [ %139, %125 ]
  %142 = phi i8* [ %121, %119 ], [ %129, %125 ]
  %143 = sub nsw i64 0, %83
  %144 = icmp eq i64 %122, %143
  br i1 %144, label %177, label %145

145:                                              ; preds = %140, %145
  %146 = phi i64 [ %175, %145 ], [ %141, %140 ]
  %147 = phi i8* [ %165, %145 ], [ %142, %140 ]
  %148 = load i8, i8* %147, align 1
  %149 = getelementptr inbounds i8, i8* %147, i64 1
  %150 = load i8, i8* %149, align 1
  %151 = getelementptr inbounds i8, i8* %147, i64 2
  %152 = zext i8 %150 to i32
  %153 = shl nuw i32 %152, 24
  %154 = zext i8 %148 to i32
  %155 = shl nuw nsw i32 %154, 16
  %156 = shl nuw nsw i32 %154, 8
  %157 = or i32 %155, %154
  %158 = or i32 %157, %156
  %159 = or i32 %158, %153
  %160 = getelementptr inbounds i32, i32* %79, i64 %146
  store i32 %159, i32* %160, align 4
  %161 = add nuw nsw i64 %146, 1
  %162 = load i8, i8* %151, align 1
  %163 = getelementptr inbounds i8, i8* %147, i64 3
  %164 = load i8, i8* %163, align 1
  %165 = getelementptr inbounds i8, i8* %147, i64 4
  %166 = zext i8 %164 to i32
  %167 = shl nuw i32 %166, 24
  %168 = zext i8 %162 to i32
  %169 = shl nuw nsw i32 %168, 16
  %170 = shl nuw nsw i32 %168, 8
  %171 = or i32 %169, %168
  %172 = or i32 %171, %170
  %173 = or i32 %172, %167
  %174 = getelementptr inbounds i32, i32* %79, i64 %161
  store i32 %173, i32* %174, align 4
  %175 = add nuw nsw i64 %146, 2
  %176 = icmp eq i64 %175, %83
  br i1 %176, label %177, label %145, !llvm.loop !76

177:                                              ; preds = %140, %145, %117, %76
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3hsw13grayA_to_rgbAEPjPKhi(i32*, i8*, i32) #1 comdat {
  %4 = icmp sgt i32 %2, 15
  br i1 %4, label %5, label %35

5:                                                ; preds = %3, %5
  %6 = phi i32* [ %30, %5 ], [ %0, %3 ]
  %7 = phi i8* [ %29, %5 ], [ %1, %3 ]
  %8 = phi i32 [ %31, %5 ], [ %2, %3 ]
  %9 = bitcast i8* %7 to <16 x i16>*
  %10 = load <16 x i16>, <16 x i16>* %9, align 1
  %11 = lshr <16 x i16> %10, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %12 = and <16 x i16> %10, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %13 = mul nuw <16 x i16> %11, %12
  %14 = add <16 x i16> %13, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %15 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %16 = shl <16 x i16> %15, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = or <16 x i16> %16, %15
  %18 = and <16 x i16> %10, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %19 = or <16 x i16> %18, %15
  %20 = shufflevector <16 x i16> %17, <16 x i16> %19, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %21 = bitcast <16 x i16> %20 to <4 x i64>
  %22 = shufflevector <16 x i16> %17, <16 x i16> %19, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %23 = bitcast <16 x i16> %22 to <4 x i64>
  %24 = shufflevector <4 x i64> %21, <4 x i64> %23, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %25 = shufflevector <4 x i64> %21, <4 x i64> %23, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %26 = bitcast i32* %6 to <4 x i64>*
  store <4 x i64> %24, <4 x i64>* %26, align 1
  %27 = getelementptr inbounds i32, i32* %6, i64 8
  %28 = bitcast i32* %27 to <4 x i64>*
  store <4 x i64> %25, <4 x i64>* %28, align 1
  %29 = getelementptr inbounds i8, i8* %7, i64 32
  %30 = getelementptr inbounds i32, i32* %6, i64 16
  %31 = add nsw i32 %8, -16
  %32 = icmp sgt i32 %31, 15
  br i1 %32, label %5, label %33

33:                                               ; preds = %5
  %34 = and i32 %2, 15
  br label %35

35:                                               ; preds = %33, %3
  %36 = phi i32 [ %2, %3 ], [ %34, %33 ]
  %37 = phi i8* [ %1, %3 ], [ %29, %33 ]
  %38 = phi i32* [ %0, %3 ], [ %30, %33 ]
  %39 = bitcast i32* %38 to i8*
  %40 = icmp sgt i32 %36, 0
  br i1 %40, label %41, label %113

41:                                               ; preds = %35
  %42 = zext i32 %36 to i64
  %43 = icmp ult i32 %36, 8
  br i1 %43, label %85, label %44

44:                                               ; preds = %41
  %45 = getelementptr i32, i32* %38, i64 %42
  %46 = bitcast i32* %45 to i8*
  %47 = shl nuw nsw i64 %42, 1
  %48 = getelementptr i8, i8* %37, i64 %47
  %49 = icmp ugt i8* %48, %39
  %50 = icmp ult i8* %37, %46
  %51 = and i1 %49, %50
  br i1 %51, label %85, label %52

52:                                               ; preds = %44
  %53 = and i64 %42, 4294967288
  %54 = shl nuw nsw i64 %53, 1
  %55 = getelementptr i8, i8* %37, i64 %54
  br label %56

56:                                               ; preds = %56, %52
  %57 = phi i64 [ 0, %52 ], [ %81, %56 ]
  %58 = shl i64 %57, 1
  %59 = getelementptr i8, i8* %37, i64 %58
  %60 = bitcast i8* %59 to <16 x i8>*
  %61 = load <16 x i8>, <16 x i8>* %60, align 1
  %62 = shufflevector <16 x i8> %61, <16 x i8> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %63 = shufflevector <16 x i8> %61, <16 x i8> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %64 = zext <8 x i8> %62 to <8 x i32>
  %65 = zext <8 x i8> %63 to <8 x i32>
  %66 = mul nuw nsw <8 x i32> %65, %64
  %67 = trunc <8 x i32> %66 to <8 x i16>
  %68 = add nuw <8 x i16> %67, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %69 = udiv <8 x i16> %68, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %70 = shl nuw <8 x i32> %65, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %71 = and <8 x i16> %69, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %72 = zext <8 x i16> %71 to <8 x i32>
  %73 = shl nuw nsw <8 x i32> %72, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %74 = shl <8 x i16> %69, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %75 = zext <8 x i16> %74 to <8 x i32>
  %76 = or <8 x i32> %70, %75
  %77 = or <8 x i32> %76, %72
  %78 = or <8 x i32> %77, %73
  %79 = getelementptr inbounds i32, i32* %38, i64 %57
  %80 = bitcast i32* %79 to <8 x i32>*
  store <8 x i32> %78, <8 x i32>* %80, align 4, !alias.scope !77, !noalias !80
  %81 = add i64 %57, 8
  %82 = icmp eq i64 %81, %53
  br i1 %82, label %83, label %56, !llvm.loop !82

83:                                               ; preds = %56
  %84 = icmp eq i64 %53, %42
  br i1 %84, label %113, label %85

85:                                               ; preds = %83, %44, %41
  %86 = phi i64 [ 0, %44 ], [ 0, %41 ], [ %53, %83 ]
  %87 = phi i8* [ %37, %44 ], [ %37, %41 ], [ %55, %83 ]
  br label %88

88:                                               ; preds = %85, %88
  %89 = phi i64 [ %111, %88 ], [ %86, %85 ]
  %90 = phi i8* [ %94, %88 ], [ %87, %85 ]
  %91 = load i8, i8* %90, align 1
  %92 = getelementptr inbounds i8, i8* %90, i64 1
  %93 = load i8, i8* %92, align 1
  %94 = getelementptr inbounds i8, i8* %90, i64 2
  %95 = zext i8 %91 to i32
  %96 = zext i8 %93 to i32
  %97 = mul nuw nsw i32 %96, %95
  %98 = trunc i32 %97 to i16
  %99 = add nuw i16 %98, 127
  %100 = udiv i16 %99, 255
  %101 = shl nuw i32 %96, 24
  %102 = and i16 %100, 255
  %103 = zext i16 %102 to i32
  %104 = shl nuw nsw i32 %103, 16
  %105 = shl i16 %100, 8
  %106 = zext i16 %105 to i32
  %107 = or i32 %101, %106
  %108 = or i32 %107, %103
  %109 = or i32 %108, %104
  %110 = getelementptr inbounds i32, i32* %38, i64 %89
  store i32 %109, i32* %110, align 4
  %111 = add nuw nsw i64 %89, 1
  %112 = icmp eq i64 %111, %42
  br i1 %112, label %113, label %88, !llvm.loop !83

113:                                              ; preds = %88, %83, %35
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3hsw21inverted_CMYK_to_RGB1EPjPKji(i32*, i32*, i32) #1 comdat {
  %4 = icmp sgt i32 %2, 15
  br i1 %4, label %5, label %53

5:                                                ; preds = %3, %5
  %6 = phi i32* [ %48, %5 ], [ %0, %3 ]
  %7 = phi i32 [ %49, %5 ], [ %2, %3 ]
  %8 = phi i32* [ %47, %5 ], [ %1, %3 ]
  %9 = bitcast i32* %8 to <32 x i8>*
  %10 = load <32 x i8>, <32 x i8>* %9, align 1
  %11 = getelementptr inbounds i32, i32* %8, i64 8
  %12 = bitcast i32* %11 to <32 x i8>*
  %13 = load <32 x i8>, <32 x i8>* %12, align 1
  %14 = shufflevector <32 x i8> %10, <32 x i8> undef, <32 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15, i32 16, i32 20, i32 24, i32 28, i32 17, i32 21, i32 25, i32 29, i32 18, i32 22, i32 26, i32 30, i32 19, i32 23, i32 27, i32 31>
  %15 = shufflevector <32 x i8> %13, <32 x i8> undef, <32 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15, i32 16, i32 20, i32 24, i32 28, i32 17, i32 21, i32 25, i32 29, i32 18, i32 22, i32 26, i32 30, i32 19, i32 23, i32 27, i32 31>
  %16 = bitcast <32 x i8> %14 to <8 x i32>
  %17 = bitcast <32 x i8> %15 to <8 x i32>
  %18 = shufflevector <8 x i32> %16, <8 x i32> %17, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %19 = shufflevector <8 x i32> %16, <8 x i32> %17, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %20 = bitcast <8 x i32> %18 to <32 x i8>
  %21 = shufflevector <32 x i8> %20, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %22 = shufflevector <32 x i8> %20, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %23 = bitcast <8 x i32> %19 to <32 x i8>
  %24 = shufflevector <32 x i8> %23, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %25 = shufflevector <32 x i8> %23, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %26 = bitcast <32 x i8> %21 to <16 x i16>
  %27 = bitcast <32 x i8> %25 to <16 x i16>
  %28 = mul <16 x i16> %27, %26
  %29 = add <16 x i16> %28, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %30 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %31 = bitcast <32 x i8> %22 to <16 x i16>
  %32 = mul <16 x i16> %27, %31
  %33 = add <16 x i16> %32, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %34 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %35 = bitcast <32 x i8> %24 to <16 x i16>
  %36 = mul <16 x i16> %27, %35
  %37 = add <16 x i16> %36, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %38 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %39 = shl <16 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %40 = or <16 x i16> %39, %30
  %41 = or <16 x i16> %38, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %42 = shufflevector <16 x i16> %40, <16 x i16> %41, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %43 = shufflevector <16 x i16> %40, <16 x i16> %41, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %44 = bitcast i32* %6 to <16 x i16>*
  store <16 x i16> %42, <16 x i16>* %44, align 1
  %45 = getelementptr inbounds i32, i32* %6, i64 8
  %46 = bitcast i32* %45 to <16 x i16>*
  store <16 x i16> %43, <16 x i16>* %46, align 1
  %47 = getelementptr inbounds i32, i32* %8, i64 16
  %48 = getelementptr inbounds i32, i32* %6, i64 16
  %49 = add nsw i32 %7, -16
  %50 = icmp sgt i32 %49, 15
  br i1 %50, label %5, label %51

51:                                               ; preds = %5
  %52 = and i32 %2, 15
  br label %53

53:                                               ; preds = %51, %3
  %54 = phi i32* [ %1, %3 ], [ %47, %51 ]
  %55 = phi i32 [ %2, %3 ], [ %52, %51 ]
  %56 = phi i32* [ %0, %3 ], [ %48, %51 ]
  %57 = icmp sgt i32 %55, 7
  br i1 %57, label %58, label %92

58:                                               ; preds = %53
  %59 = bitcast i32* %54 to <32 x i8>*
  %60 = load <32 x i8>, <32 x i8>* %59, align 1
  %61 = shufflevector <32 x i8> %60, <32 x i8> undef, <32 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15, i32 16, i32 20, i32 24, i32 28, i32 17, i32 21, i32 25, i32 29, i32 18, i32 22, i32 26, i32 30, i32 19, i32 23, i32 27, i32 31>
  %62 = bitcast <32 x i8> %61 to <8 x i32>
  %63 = shufflevector <8 x i32> %62, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %64 = shufflevector <8 x i32> %62, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %65 = bitcast <8 x i32> %63 to <32 x i8>
  %66 = shufflevector <32 x i8> %65, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %67 = shufflevector <32 x i8> %65, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %68 = bitcast <8 x i32> %64 to <32 x i8>
  %69 = shufflevector <32 x i8> %68, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %70 = shufflevector <32 x i8> %68, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %71 = bitcast <32 x i8> %66 to <16 x i16>
  %72 = bitcast <32 x i8> %70 to <16 x i16>
  %73 = mul <16 x i16> %72, %71
  %74 = add <16 x i16> %73, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %75 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %74, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %76 = bitcast <32 x i8> %67 to <16 x i16>
  %77 = mul <16 x i16> %72, %76
  %78 = add <16 x i16> %77, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %79 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %78, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %80 = bitcast <32 x i8> %69 to <16 x i16>
  %81 = mul <16 x i16> %72, %80
  %82 = add <16 x i16> %81, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %83 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %82, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %84 = shl <16 x i16> %79, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %85 = or <16 x i16> %84, %75
  %86 = or <16 x i16> %83, <i16 -256, i16 -256, i16 -256, i16 -256, i16 undef, i16 undef, i16 undef, i16 undef, i16 -256, i16 -256, i16 -256, i16 -256, i16 undef, i16 undef, i16 undef, i16 undef>
  %87 = shufflevector <16 x i16> %85, <16 x i16> %86, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %88 = bitcast i32* %56 to <16 x i16>*
  store <16 x i16> %87, <16 x i16>* %88, align 1
  %89 = getelementptr inbounds i32, i32* %54, i64 8
  %90 = getelementptr inbounds i32, i32* %56, i64 8
  %91 = add nsw i32 %55, -8
  br label %92

92:                                               ; preds = %53, %58
  %93 = phi i32* [ %89, %58 ], [ %54, %53 ]
  %94 = phi i32 [ %91, %58 ], [ %55, %53 ]
  %95 = phi i32* [ %90, %58 ], [ %56, %53 ]
  %96 = icmp sgt i32 %94, 0
  br i1 %96, label %97, label %184

97:                                               ; preds = %92
  %98 = zext i32 %94 to i64
  %99 = icmp ult i32 %94, 8
  br i1 %99, label %147, label %100

100:                                              ; preds = %97
  %101 = getelementptr i32, i32* %95, i64 %98
  %102 = getelementptr i32, i32* %93, i64 %98
  %103 = icmp ult i32* %95, %102
  %104 = icmp ult i32* %93, %101
  %105 = and i1 %103, %104
  br i1 %105, label %147, label %106

106:                                              ; preds = %100
  %107 = and i64 %98, 4294967288
  br label %108

108:                                              ; preds = %108, %106
  %109 = phi i64 [ 0, %106 ], [ %143, %108 ]
  %110 = getelementptr inbounds i32, i32* %93, i64 %109
  %111 = bitcast i32* %110 to <8 x i32>*
  %112 = load <8 x i32>, <8 x i32>* %111, align 4, !alias.scope !84
  %113 = lshr <8 x i32> %112, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %114 = lshr <8 x i32> %112, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %115 = lshr <8 x i32> %112, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %116 = and <8 x i32> %114, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %117 = mul nuw nsw <8 x i32> %116, %113
  %118 = trunc <8 x i32> %117 to <8 x i16>
  %119 = add nuw <8 x i16> %118, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %120 = udiv <8 x i16> %119, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %121 = zext <8 x i16> %120 to <8 x i32>
  %122 = and <8 x i32> %115, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %123 = mul nuw nsw <8 x i32> %122, %113
  %124 = trunc <8 x i32> %123 to <8 x i16>
  %125 = add nuw <8 x i16> %124, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %126 = udiv <8 x i16> %125, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %127 = zext <8 x i16> %126 to <8 x i32>
  %128 = and <8 x i32> %112, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %129 = mul nuw nsw <8 x i32> %128, %113
  %130 = trunc <8 x i32> %129 to <8 x i16>
  %131 = add nuw <8 x i16> %130, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %132 = udiv <8 x i16> %131, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %133 = shl nuw nsw <8 x i32> %121, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %134 = shl nuw nsw <8 x i32> %127, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %135 = and <8 x i32> %134, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %136 = and <8 x i16> %132, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %137 = zext <8 x i16> %136 to <8 x i32>
  %138 = or <8 x i32> %133, %137
  %139 = or <8 x i32> %138, %135
  %140 = or <8 x i32> %139, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %141 = getelementptr inbounds i32, i32* %95, i64 %109
  %142 = bitcast i32* %141 to <8 x i32>*
  store <8 x i32> %140, <8 x i32>* %142, align 4, !alias.scope !87, !noalias !84
  %143 = add i64 %109, 8
  %144 = icmp eq i64 %143, %107
  br i1 %144, label %145, label %108, !llvm.loop !89

145:                                              ; preds = %108
  %146 = icmp eq i64 %107, %98
  br i1 %146, label %184, label %147

147:                                              ; preds = %145, %100, %97
  %148 = phi i64 [ 0, %100 ], [ 0, %97 ], [ %107, %145 ]
  br label %149

149:                                              ; preds = %147, %149
  %150 = phi i64 [ %182, %149 ], [ %148, %147 ]
  %151 = getelementptr inbounds i32, i32* %93, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = lshr i32 %152, 24
  %154 = lshr i32 %152, 16
  %155 = lshr i32 %152, 8
  %156 = and i32 %154, 255
  %157 = mul nuw nsw i32 %156, %153
  %158 = trunc i32 %157 to i16
  %159 = add nuw i16 %158, 127
  %160 = udiv i16 %159, 255
  %161 = zext i16 %160 to i32
  %162 = and i32 %155, 255
  %163 = mul nuw nsw i32 %162, %153
  %164 = trunc i32 %163 to i16
  %165 = add nuw i16 %164, 127
  %166 = udiv i16 %165, 255
  %167 = zext i16 %166 to i32
  %168 = and i32 %152, 255
  %169 = mul nuw nsw i32 %168, %153
  %170 = trunc i32 %169 to i16
  %171 = add nuw i16 %170, 127
  %172 = udiv i16 %171, 255
  %173 = shl nuw nsw i32 %161, 16
  %174 = shl nuw nsw i32 %167, 8
  %175 = and i32 %174, 65280
  %176 = and i16 %172, 255
  %177 = zext i16 %176 to i32
  %178 = or i32 %173, %177
  %179 = or i32 %178, %175
  %180 = or i32 %179, -16777216
  %181 = getelementptr inbounds i32, i32* %95, i64 %150
  store i32 %180, i32* %181, align 4
  %182 = add nuw nsw i64 %150, 1
  %183 = icmp eq i64 %182, %98
  br i1 %183, label %184, label %149, !llvm.loop !90

184:                                              ; preds = %149, %145, %92
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3hsw21inverted_CMYK_to_BGR1EPjPKji(i32*, i32*, i32) #1 comdat {
  %4 = icmp sgt i32 %2, 15
  br i1 %4, label %5, label %53

5:                                                ; preds = %3, %5
  %6 = phi i32* [ %48, %5 ], [ %0, %3 ]
  %7 = phi i32 [ %49, %5 ], [ %2, %3 ]
  %8 = phi i32* [ %47, %5 ], [ %1, %3 ]
  %9 = bitcast i32* %8 to <32 x i8>*
  %10 = load <32 x i8>, <32 x i8>* %9, align 1
  %11 = getelementptr inbounds i32, i32* %8, i64 8
  %12 = bitcast i32* %11 to <32 x i8>*
  %13 = load <32 x i8>, <32 x i8>* %12, align 1
  %14 = shufflevector <32 x i8> %10, <32 x i8> undef, <32 x i32> <i32 2, i32 6, i32 10, i32 14, i32 1, i32 5, i32 9, i32 13, i32 0, i32 4, i32 8, i32 12, i32 3, i32 7, i32 11, i32 15, i32 18, i32 22, i32 26, i32 30, i32 17, i32 21, i32 25, i32 29, i32 16, i32 20, i32 24, i32 28, i32 19, i32 23, i32 27, i32 31>
  %15 = shufflevector <32 x i8> %13, <32 x i8> undef, <32 x i32> <i32 2, i32 6, i32 10, i32 14, i32 1, i32 5, i32 9, i32 13, i32 0, i32 4, i32 8, i32 12, i32 3, i32 7, i32 11, i32 15, i32 18, i32 22, i32 26, i32 30, i32 17, i32 21, i32 25, i32 29, i32 16, i32 20, i32 24, i32 28, i32 19, i32 23, i32 27, i32 31>
  %16 = bitcast <32 x i8> %14 to <8 x i32>
  %17 = bitcast <32 x i8> %15 to <8 x i32>
  %18 = shufflevector <8 x i32> %16, <8 x i32> %17, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %19 = shufflevector <8 x i32> %16, <8 x i32> %17, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %20 = bitcast <8 x i32> %18 to <32 x i8>
  %21 = shufflevector <32 x i8> %20, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %22 = shufflevector <32 x i8> %20, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %23 = bitcast <8 x i32> %19 to <32 x i8>
  %24 = shufflevector <32 x i8> %23, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %25 = shufflevector <32 x i8> %23, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %26 = bitcast <32 x i8> %21 to <16 x i16>
  %27 = bitcast <32 x i8> %25 to <16 x i16>
  %28 = mul <16 x i16> %27, %26
  %29 = add <16 x i16> %28, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %30 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %31 = bitcast <32 x i8> %22 to <16 x i16>
  %32 = mul <16 x i16> %27, %31
  %33 = add <16 x i16> %32, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %34 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %35 = bitcast <32 x i8> %24 to <16 x i16>
  %36 = mul <16 x i16> %27, %35
  %37 = add <16 x i16> %36, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %38 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %39 = shl <16 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %40 = or <16 x i16> %39, %30
  %41 = or <16 x i16> %38, <i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256, i16 -256>
  %42 = shufflevector <16 x i16> %40, <16 x i16> %41, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %43 = shufflevector <16 x i16> %40, <16 x i16> %41, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %44 = bitcast i32* %6 to <16 x i16>*
  store <16 x i16> %42, <16 x i16>* %44, align 1
  %45 = getelementptr inbounds i32, i32* %6, i64 8
  %46 = bitcast i32* %45 to <16 x i16>*
  store <16 x i16> %43, <16 x i16>* %46, align 1
  %47 = getelementptr inbounds i32, i32* %8, i64 16
  %48 = getelementptr inbounds i32, i32* %6, i64 16
  %49 = add nsw i32 %7, -16
  %50 = icmp sgt i32 %49, 15
  br i1 %50, label %5, label %51

51:                                               ; preds = %5
  %52 = and i32 %2, 15
  br label %53

53:                                               ; preds = %51, %3
  %54 = phi i32* [ %1, %3 ], [ %47, %51 ]
  %55 = phi i32 [ %2, %3 ], [ %52, %51 ]
  %56 = phi i32* [ %0, %3 ], [ %48, %51 ]
  %57 = icmp sgt i32 %55, 7
  br i1 %57, label %58, label %92

58:                                               ; preds = %53
  %59 = bitcast i32* %54 to <32 x i8>*
  %60 = load <32 x i8>, <32 x i8>* %59, align 1
  %61 = shufflevector <32 x i8> %60, <32 x i8> undef, <32 x i32> <i32 2, i32 6, i32 10, i32 14, i32 1, i32 5, i32 9, i32 13, i32 0, i32 4, i32 8, i32 12, i32 3, i32 7, i32 11, i32 15, i32 18, i32 22, i32 26, i32 30, i32 17, i32 21, i32 25, i32 29, i32 16, i32 20, i32 24, i32 28, i32 19, i32 23, i32 27, i32 31>
  %62 = bitcast <32 x i8> %61 to <8 x i32>
  %63 = shufflevector <8 x i32> %62, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %64 = shufflevector <8 x i32> %62, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %65 = bitcast <8 x i32> %63 to <32 x i8>
  %66 = shufflevector <32 x i8> %65, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %67 = shufflevector <32 x i8> %65, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %68 = bitcast <8 x i32> %64 to <32 x i8>
  %69 = shufflevector <32 x i8> %68, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %70 = shufflevector <32 x i8> %68, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %71 = bitcast <32 x i8> %66 to <16 x i16>
  %72 = bitcast <32 x i8> %70 to <16 x i16>
  %73 = mul <16 x i16> %72, %71
  %74 = add <16 x i16> %73, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %75 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %74, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %76 = bitcast <32 x i8> %67 to <16 x i16>
  %77 = mul <16 x i16> %72, %76
  %78 = add <16 x i16> %77, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %79 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %78, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %80 = bitcast <32 x i8> %69 to <16 x i16>
  %81 = mul <16 x i16> %72, %80
  %82 = add <16 x i16> %81, <i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128>
  %83 = tail call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %82, <16 x i16> <i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257, i16 257>) #13
  %84 = shl <16 x i16> %79, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %85 = or <16 x i16> %84, %75
  %86 = or <16 x i16> %83, <i16 -256, i16 -256, i16 -256, i16 -256, i16 undef, i16 undef, i16 undef, i16 undef, i16 -256, i16 -256, i16 -256, i16 -256, i16 undef, i16 undef, i16 undef, i16 undef>
  %87 = shufflevector <16 x i16> %85, <16 x i16> %86, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %88 = bitcast i32* %56 to <16 x i16>*
  store <16 x i16> %87, <16 x i16>* %88, align 1
  %89 = getelementptr inbounds i32, i32* %54, i64 8
  %90 = getelementptr inbounds i32, i32* %56, i64 8
  %91 = add nsw i32 %55, -8
  br label %92

92:                                               ; preds = %53, %58
  %93 = phi i32* [ %89, %58 ], [ %54, %53 ]
  %94 = phi i32 [ %91, %58 ], [ %55, %53 ]
  %95 = phi i32* [ %90, %58 ], [ %56, %53 ]
  %96 = icmp sgt i32 %94, 0
  br i1 %96, label %97, label %184

97:                                               ; preds = %92
  %98 = zext i32 %94 to i64
  %99 = icmp ult i32 %94, 8
  br i1 %99, label %147, label %100

100:                                              ; preds = %97
  %101 = getelementptr i32, i32* %95, i64 %98
  %102 = getelementptr i32, i32* %93, i64 %98
  %103 = icmp ult i32* %95, %102
  %104 = icmp ult i32* %93, %101
  %105 = and i1 %103, %104
  br i1 %105, label %147, label %106

106:                                              ; preds = %100
  %107 = and i64 %98, 4294967288
  br label %108

108:                                              ; preds = %108, %106
  %109 = phi i64 [ 0, %106 ], [ %143, %108 ]
  %110 = getelementptr inbounds i32, i32* %93, i64 %109
  %111 = bitcast i32* %110 to <8 x i32>*
  %112 = load <8 x i32>, <8 x i32>* %111, align 4, !alias.scope !91
  %113 = lshr <8 x i32> %112, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %114 = lshr <8 x i32> %112, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %115 = lshr <8 x i32> %112, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %116 = and <8 x i32> %114, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %117 = mul nuw nsw <8 x i32> %116, %113
  %118 = trunc <8 x i32> %117 to <8 x i16>
  %119 = add nuw <8 x i16> %118, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %120 = udiv <8 x i16> %119, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %121 = and <8 x i32> %115, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %122 = mul nuw nsw <8 x i32> %121, %113
  %123 = trunc <8 x i32> %122 to <8 x i16>
  %124 = add nuw <8 x i16> %123, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %125 = udiv <8 x i16> %124, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %126 = zext <8 x i16> %125 to <8 x i32>
  %127 = and <8 x i32> %112, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %128 = mul nuw nsw <8 x i32> %127, %113
  %129 = trunc <8 x i32> %128 to <8 x i16>
  %130 = add nuw <8 x i16> %129, <i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127, i16 127>
  %131 = udiv <8 x i16> %130, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %132 = zext <8 x i16> %131 to <8 x i32>
  %133 = shl nuw nsw <8 x i32> %132, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %134 = shl nuw nsw <8 x i32> %126, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %135 = and <8 x i32> %134, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %136 = and <8 x i16> %120, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %137 = zext <8 x i16> %136 to <8 x i32>
  %138 = or <8 x i32> %133, %137
  %139 = or <8 x i32> %138, %135
  %140 = or <8 x i32> %139, <i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216, i32 -16777216>
  %141 = getelementptr inbounds i32, i32* %95, i64 %109
  %142 = bitcast i32* %141 to <8 x i32>*
  store <8 x i32> %140, <8 x i32>* %142, align 4, !alias.scope !94, !noalias !91
  %143 = add i64 %109, 8
  %144 = icmp eq i64 %143, %107
  br i1 %144, label %145, label %108, !llvm.loop !96

145:                                              ; preds = %108
  %146 = icmp eq i64 %107, %98
  br i1 %146, label %184, label %147

147:                                              ; preds = %145, %100, %97
  %148 = phi i64 [ 0, %100 ], [ 0, %97 ], [ %107, %145 ]
  br label %149

149:                                              ; preds = %147, %149
  %150 = phi i64 [ %182, %149 ], [ %148, %147 ]
  %151 = getelementptr inbounds i32, i32* %93, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = lshr i32 %152, 24
  %154 = lshr i32 %152, 16
  %155 = lshr i32 %152, 8
  %156 = and i32 %154, 255
  %157 = mul nuw nsw i32 %156, %153
  %158 = trunc i32 %157 to i16
  %159 = add nuw i16 %158, 127
  %160 = udiv i16 %159, 255
  %161 = and i32 %155, 255
  %162 = mul nuw nsw i32 %161, %153
  %163 = trunc i32 %162 to i16
  %164 = add nuw i16 %163, 127
  %165 = udiv i16 %164, 255
  %166 = zext i16 %165 to i32
  %167 = and i32 %152, 255
  %168 = mul nuw nsw i32 %167, %153
  %169 = trunc i32 %168 to i16
  %170 = add nuw i16 %169, 127
  %171 = udiv i16 %170, 255
  %172 = zext i16 %171 to i32
  %173 = shl nuw nsw i32 %172, 16
  %174 = shl nuw nsw i32 %166, 8
  %175 = and i32 %174, 65280
  %176 = and i16 %160, 255
  %177 = zext i16 %176 to i32
  %178 = or i32 %173, %177
  %179 = or i32 %178, %175
  %180 = or i32 %179, -16777216
  %181 = getelementptr inbounds i32, i32* %95, i64 %150
  store i32 %180, i32* %181, align 4
  %182 = add nuw nsw i64 %150, 1
  %183 = icmp eq i64 %182, %98
  br i1 %183, label %184, label %149, !llvm.loop !97

184:                                              ; preds = %149, %145, %92
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8callbackEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to %struct.SkRasterPipeline_CallbackCtx*
  %17 = getelementptr inbounds i8, i8* %14, i64 8
  %18 = shufflevector <8 x float> %4, <8 x float> %5, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %19 = shufflevector <8 x float> %4, <8 x float> %5, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %20 = shufflevector <8 x float> %6, <8 x float> %7, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %21 = shufflevector <8 x float> %6, <8 x float> %7, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %22 = bitcast <8 x float> %18 to <4 x double>
  %23 = bitcast <8 x float> %20 to <4 x double>
  %24 = shufflevector <4 x double> %22, <4 x double> %23, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %25 = bitcast <4 x double> %24 to <8 x float>
  %26 = shufflevector <4 x double> %22, <4 x double> %23, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %27 = bitcast <4 x double> %26 to <8 x float>
  %28 = bitcast <8 x float> %19 to <4 x double>
  %29 = bitcast <8 x float> %21 to <4 x double>
  %30 = shufflevector <4 x double> %28, <4 x double> %29, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %31 = bitcast <4 x double> %30 to <8 x float>
  %32 = shufflevector <4 x double> %28, <4 x double> %29, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %33 = bitcast <4 x double> %32 to <8 x float>
  %34 = shufflevector <8 x float> %25, <8 x float> %27, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %35 = shufflevector <8 x float> %31, <8 x float> %33, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %36 = shufflevector <8 x float> %25, <8 x float> %27, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %37 = shufflevector <8 x float> %31, <8 x float> %33, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %38 = bitcast i8* %17 to <8 x float>*
  store <8 x float> %34, <8 x float>* %38, align 1
  %39 = getelementptr inbounds i8, i8* %14, i64 40
  %40 = bitcast i8* %39 to <8 x float>*
  store <8 x float> %35, <8 x float>* %40, align 1
  %41 = getelementptr inbounds i8, i8* %14, i64 72
  %42 = bitcast i8* %41 to <8 x float>*
  store <8 x float> %36, <8 x float>* %42, align 1
  %43 = getelementptr inbounds i8, i8* %14, i64 104
  %44 = bitcast i8* %43 to <8 x float>*
  store <8 x float> %37, <8 x float>* %44, align 1
  %45 = bitcast i8* %14 to void (%struct.SkRasterPipeline_CallbackCtx*, i32)**
  %46 = load void (%struct.SkRasterPipeline_CallbackCtx*, i32)*, void (%struct.SkRasterPipeline_CallbackCtx*, i32)** %45, align 8
  %47 = icmp eq i64 %0, 0
  %48 = select i1 %47, i64 8, i64 %0
  %49 = trunc i64 %48 to i32
  tail call void %46(%struct.SkRasterPipeline_CallbackCtx* %16, i32 %49) #13
  %50 = getelementptr inbounds i8, i8* %14, i64 264
  %51 = bitcast i8* %50 to float**
  %52 = load float*, float** %51, align 8
  %53 = getelementptr inbounds float, float* %52, i64 28
  %54 = bitcast float* %53 to <4 x float>*
  %55 = load <4 x float>, <4 x float>* %54, align 1
  %56 = shufflevector <4 x float> %55, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %57 = getelementptr inbounds float, float* %52, i64 24
  %58 = bitcast float* %57 to <4 x float>*
  %59 = load <4 x float>, <4 x float>* %58, align 1
  %60 = shufflevector <4 x float> %59, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %61 = getelementptr inbounds float, float* %52, i64 20
  %62 = bitcast float* %61 to <4 x float>*
  %63 = load <4 x float>, <4 x float>* %62, align 1
  %64 = shufflevector <4 x float> %63, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %65 = getelementptr inbounds float, float* %52, i64 16
  %66 = bitcast float* %65 to <4 x float>*
  %67 = load <4 x float>, <4 x float>* %66, align 1
  %68 = shufflevector <4 x float> %67, <4 x float> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %69 = getelementptr inbounds float, float* %52, i64 12
  %70 = bitcast float* %69 to <4 x float>*
  %71 = load <4 x float>, <4 x float>* %70, align 1
  %72 = shufflevector <4 x float> %71, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %73 = shufflevector <8 x float> %72, <8 x float> %56, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %74 = getelementptr inbounds float, float* %52, i64 8
  %75 = bitcast float* %74 to <4 x float>*
  %76 = load <4 x float>, <4 x float>* %75, align 1
  %77 = shufflevector <4 x float> %76, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %78 = shufflevector <8 x float> %77, <8 x float> %60, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %79 = getelementptr inbounds float, float* %52, i64 4
  %80 = bitcast float* %79 to <4 x float>*
  %81 = load <4 x float>, <4 x float>* %80, align 1
  %82 = shufflevector <4 x float> %81, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %83 = shufflevector <8 x float> %82, <8 x float> %64, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %84 = bitcast float* %52 to <4 x float>*
  %85 = load <4 x float>, <4 x float>* %84, align 1
  %86 = shufflevector <4 x float> %85, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %87 = shufflevector <8 x float> %86, <8 x float> %68, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %88 = shufflevector <8 x float> %87, <8 x float> %83, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %89 = shufflevector <8 x float> %87, <8 x float> %83, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %90 = shufflevector <8 x float> %78, <8 x float> %73, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %91 = shufflevector <8 x float> %78, <8 x float> %73, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %92 = bitcast <8 x float> %88 to <4 x double>
  %93 = bitcast <8 x float> %90 to <4 x double>
  %94 = shufflevector <4 x double> %92, <4 x double> %93, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %95 = bitcast <4 x double> %94 to <8 x float>
  %96 = shufflevector <4 x double> %92, <4 x double> %93, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %97 = bitcast <4 x double> %96 to <8 x float>
  %98 = bitcast <8 x float> %89 to <4 x double>
  %99 = bitcast <8 x float> %91 to <4 x double>
  %100 = shufflevector <4 x double> %98, <4 x double> %99, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %101 = bitcast <4 x double> %100 to <8 x float>
  %102 = shufflevector <4 x double> %98, <4 x double> %99, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %103 = bitcast <4 x double> %102 to <8 x float>
  %104 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %105 = extractvalue { i8*, i8** } %104, 0
  %106 = extractvalue { i8*, i8** } %104, 1
  %107 = bitcast i8* %105 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %107(i64 %0, i8** %106, i64 %2, i64 %3, <8 x float> %95, <8 x float> %97, <8 x float> %101, <8 x float> %103, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL12move_src_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL12move_dst_srcEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7clamp_0EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %4, <8 x float> zeroinitializer) #13
  %14 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> zeroinitializer) #13
  %15 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %6, <8 x float> zeroinitializer) #13
  %16 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %7, <8 x float> zeroinitializer) #13
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <8 x float> %13, <8 x float> %14, <8 x float> %15, <8 x float> %16, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7clamp_1EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %4, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %14 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %15 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %6, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %16 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %7, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <8 x float> %13, <8 x float> %14, <8 x float> %15, <8 x float> %16, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7clamp_aEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %7, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %14 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %4, <8 x float> %13) #13
  %15 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> %13) #13
  %16 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %6, <8 x float> %13) #13
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <8 x float> %14, <8 x float> %15, <8 x float> %16, <8 x float> %13, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11clamp_gamutEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %7, <8 x float> zeroinitializer) #13
  %14 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %13, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %15 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %4, <8 x float> zeroinitializer) #13
  %16 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %15, <8 x float> %14) #13
  %17 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> zeroinitializer) #13
  %18 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %17, <8 x float> %14) #13
  %19 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %6, <8 x float> zeroinitializer) #13
  %20 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %19, <8 x float> %14) #13
  %21 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %22 = extractvalue { i8*, i8** } %21, 0
  %23 = extractvalue { i8*, i8** } %21, 1
  %24 = bitcast i8* %22 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %24(i64 %0, i8** %23, i64 %2, i64 %3, <8 x float> %16, <8 x float> %18, <8 x float> %20, <8 x float> %14, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8unpremulEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %14 = fcmp olt <8 x float> %13, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %15 = select <8 x i1> %14, <8 x float> %13, <8 x float> zeroinitializer
  %16 = fmul <8 x float> %15, %4
  %17 = fmul <8 x float> %15, %5
  %18 = fmul <8 x float> %15, %6
  %19 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %20 = extractvalue { i8*, i8** } %19, 0
  %21 = extractvalue { i8*, i8** } %19, 1
  %22 = bitcast i8* %20 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %22(i64 %0, i8** %21, i64 %2, i64 %3, <8 x float> %16, <8 x float> %17, <8 x float> %18, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL6premulEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %4, %7
  %14 = fmul <8 x float> %5, %7
  %15 = fmul <8 x float> %6, %7
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = bitcast i8* %17 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %19(i64 %0, i8** %18, i64 %2, i64 %3, <8 x float> %13, <8 x float> %14, <8 x float> %15, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10premul_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %8, %11
  %14 = fmul <8 x float> %9, %11
  %15 = fmul <8 x float> %10, %11
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = bitcast i8* %17 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %19(i64 %0, i8** %18, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %13, <8 x float> %14, <8 x float> %15, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL12force_opaqueEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL16force_opaque_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7set_rgbEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <8 x float> %19, <8 x float> %24, <8 x float> %29, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL17unbounded_set_rgbEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <8 x float> %19, <8 x float> %24, <8 x float> %29, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7swap_rbEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x float> %6, <8 x float> %5, <8 x float> %4, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11swap_rb_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %10, <8 x float> %9, <8 x float> %8, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11black_colorEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11white_colorEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL13uniform_colorEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %14, i64 12
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <8 x float> undef, float %32, i32 0
  %34 = shufflevector <8 x float> %33, <8 x float> undef, <8 x i32> zeroinitializer
  %35 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %36 = extractvalue { i8*, i8** } %35, 0
  %37 = extractvalue { i8*, i8** } %35, 1
  %38 = bitcast i8* %36 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %38(i64 %0, i8** %37, i64 %2, i64 %3, <8 x float> %19, <8 x float> %24, <8 x float> %29, <8 x float> %34, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL23unbounded_uniform_colorEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %14, i64 12
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <8 x float> undef, float %32, i32 0
  %34 = shufflevector <8 x float> %33, <8 x float> undef, <8 x i32> zeroinitializer
  %35 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %36 = extractvalue { i8*, i8** } %35, 0
  %37 = extractvalue { i8*, i8** } %35, 1
  %38 = bitcast i8* %36 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %38(i64 %0, i8** %37, i64 %2, i64 %3, <8 x float> %19, <8 x float> %24, <8 x float> %29, <8 x float> %34, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL17uniform_color_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %14, i64 12
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <8 x float> undef, float %32, i32 0
  %34 = shufflevector <8 x float> %33, <8 x float> undef, <8 x i32> zeroinitializer
  %35 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %36 = extractvalue { i8*, i8** } %35, 0
  %37 = extractvalue { i8*, i8** } %35, 1
  %38 = bitcast i8* %36 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %38(i64 %0, i8** %37, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %19, <8 x float> %24, <8 x float> %29, <8 x float> %34) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11seed_shaderEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = trunc i64 %2 to i32
  %14 = insertelement <8 x i32> undef, i32 %13, i32 0
  %15 = shufflevector <8 x i32> %14, <8 x i32> undef, <8 x i32> zeroinitializer
  %16 = sitofp <8 x i32> %15 to <8 x float>
  %17 = fadd <8 x float> %16, <float 5.000000e-01, float 1.500000e+00, float 2.500000e+00, float 3.500000e+00, float 4.500000e+00, float 5.500000e+00, float 6.500000e+00, float 7.500000e+00>
  %18 = trunc i64 %3 to i32
  %19 = insertelement <8 x i32> undef, i32 %18, i32 0
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> zeroinitializer
  %21 = sitofp <8 x i32> %20 to <8 x float>
  %22 = fadd <8 x float> %21, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %26(i64 %0, i8** %25, i64 %2, i64 %3, <8 x float> %17, <8 x float> %22, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL6ditherEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = trunc i64 %2 to i32
  %18 = insertelement <8 x i32> undef, i32 %17, i32 0
  %19 = shufflevector <8 x i32> %18, <8 x i32> undef, <8 x i32> zeroinitializer
  %20 = add <8 x i32> %19, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = trunc i64 %3 to i32
  %22 = insertelement <8 x i32> undef, i32 %21, i32 0
  %23 = shufflevector <8 x i32> %22, <8 x i32> undef, <8 x i32> zeroinitializer
  %24 = xor <8 x i32> %23, %20
  %25 = shl <8 x i32> %24, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %26 = and <8 x i32> %25, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %27 = shl <8 x i32> %20, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %28 = and <8 x i32> %27, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %29 = shl <8 x i32> %24, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %30 = and <8 x i32> %29, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %31 = shl <8 x i32> %20, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %32 = and <8 x i32> %31, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %33 = lshr <8 x i32> %24, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %34 = and <8 x i32> %33, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %35 = lshr <8 x i32> %20, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %36 = and <8 x i32> %35, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %37 = or <8 x i32> %32, %28
  %38 = or <8 x i32> %37, %36
  %39 = or <8 x i32> %38, %26
  %40 = or <8 x i32> %39, %30
  %41 = or <8 x i32> %40, %34
  %42 = sitofp <8 x i32> %41 to <8 x float>
  %43 = fmul <8 x float> %42, <float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02, float 1.562500e-02>
  %44 = fadd <8 x float> %43, <float 0xBFDF800000000000, float 0xBFDF800000000000, float 0xBFDF800000000000, float 0xBFDF800000000000, float 0xBFDF800000000000, float 0xBFDF800000000000, float 0xBFDF800000000000, float 0xBFDF800000000000>
  %45 = load float, float* %16, align 4
  %46 = insertelement <8 x float> undef, float %45, i32 0
  %47 = shufflevector <8 x float> %46, <8 x float> undef, <8 x i32> zeroinitializer
  %48 = fmul <8 x float> %44, %47
  %49 = fadd <8 x float> %48, %4
  %50 = fadd <8 x float> %48, %5
  %51 = fadd <8 x float> %48, %6
  %52 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %49, <8 x float> %7) #13
  %53 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %52) #13
  %54 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %50, <8 x float> %7) #13
  %55 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %54) #13
  %56 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %51, <8 x float> %7) #13
  %57 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %56) #13
  %58 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %59 = extractvalue { i8*, i8** } %58, 0
  %60 = extractvalue { i8*, i8** } %58, 1
  %61 = bitcast i8* %59 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %61(i64 %0, i8** %60, i64 %2, i64 %3, <8 x float> %53, <8 x float> %55, <8 x float> %57, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7load_a8EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i8, i8* %24, i64 6
  %28 = load i8, i8* %27, align 1
  %29 = insertelement <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i8> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i8, i8* %24, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = insertelement <8 x i8> %31, i8 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i8> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i8, i8* %24, i64 4
  %38 = load i8, i8* %37, align 1
  %39 = insertelement <8 x i8> %36, i8 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i8> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i8* %24 to <4 x i8>*
  %43 = load <4 x i8>, <4 x i8>* %42, align 1
  %44 = shufflevector <4 x i8> %43, <4 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i8> %44, <8 x i8> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i8, i8* %24, i64 2
  %48 = load i8, i8* %47, align 1
  %49 = insertelement <8 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i8> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i8* %24 to <2 x i8>*
  %53 = load <2 x i8>, <2 x i8>* %52, align 1
  %54 = shufflevector <2 x i8> %53, <2 x i8> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i8> %54, <8 x i8> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i8, i8* %24, align 1
  %58 = insertelement <8 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i8* %24 to <8 x i8>*
  %61 = load <8 x i8>, <8 x i8>* %60, align 1
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i8> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = uitofp <8 x i8> %64 to <8 x float>
  %66 = fmul <8 x float> %65, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %67 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %68 = extractvalue { i8*, i8** } %67, 0
  %69 = extractvalue { i8*, i8** } %67, 1
  %70 = bitcast i8* %68 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %70(i64 %0, i8** %69, i64 %2, i64 %3, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> %66, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11load_a8_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i8, i8* %24, i64 6
  %28 = load i8, i8* %27, align 1
  %29 = insertelement <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i8> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i8, i8* %24, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = insertelement <8 x i8> %31, i8 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i8> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i8, i8* %24, i64 4
  %38 = load i8, i8* %37, align 1
  %39 = insertelement <8 x i8> %36, i8 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i8> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i8* %24 to <4 x i8>*
  %43 = load <4 x i8>, <4 x i8>* %42, align 1
  %44 = shufflevector <4 x i8> %43, <4 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i8> %44, <8 x i8> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i8, i8* %24, i64 2
  %48 = load i8, i8* %47, align 1
  %49 = insertelement <8 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i8> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i8* %24 to <2 x i8>*
  %53 = load <2 x i8>, <2 x i8>* %52, align 1
  %54 = shufflevector <2 x i8> %53, <2 x i8> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i8> %54, <8 x i8> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i8, i8* %24, align 1
  %58 = insertelement <8 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i8* %24 to <8 x i8>*
  %61 = load <8 x i8>, <8 x i8>* %60, align 1
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i8> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = uitofp <8 x i8> %64 to <8 x float>
  %66 = fmul <8 x float> %65, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %67 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %68 = extractvalue { i8*, i8** } %67, 0
  %69 = extractvalue { i8*, i8** } %67, 1
  %70 = bitcast i8* %68 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %70(i64 %0, i8** %69, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> %66) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8store_a8EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %7) #13
  %26 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %25, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %27 = fmul <8 x float> %26, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %28 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %27) #13
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %30 = shufflevector <8 x i32> %28, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %31 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %29, <4 x i32> %30) #13
  %32 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %31, <8 x i16> undef) #13
  %33 = bitcast <16 x i8> %32 to <2 x double>
  %34 = extractelement <2 x double> %33, i32 0
  %35 = bitcast double %34 to <8 x i8>
  %36 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %36) #13
  switch i64 %0, label %59 [
    i64 0, label %57
    i64 7, label %37
    i64 6, label %40
    i64 5, label %43
    i64 4, label %46
    i64 3, label %49
    i64 2, label %52
    i64 1, label %55
  ], !prof !99

37:                                               ; preds = %12
  %38 = extractelement <8 x i8> %35, i32 6
  %39 = getelementptr inbounds i8, i8* %24, i64 6
  store i8 %38, i8* %39, align 1
  br label %40

40:                                               ; preds = %37, %12
  %41 = extractelement <8 x i8> %35, i32 5
  %42 = getelementptr inbounds i8, i8* %24, i64 5
  store i8 %41, i8* %42, align 1
  br label %43

43:                                               ; preds = %40, %12
  %44 = extractelement <8 x i8> %35, i32 4
  %45 = getelementptr inbounds i8, i8* %24, i64 4
  store i8 %44, i8* %45, align 1
  br label %46

46:                                               ; preds = %43, %12
  %47 = bitcast i8* %24 to <4 x i8>*
  %48 = shufflevector <8 x i8> %35, <8 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %48, <4 x i8>* %47, align 1
  br label %60

49:                                               ; preds = %12
  %50 = extractelement <8 x i8> %35, i32 2
  %51 = getelementptr inbounds i8, i8* %24, i64 2
  store i8 %50, i8* %51, align 1
  br label %52

52:                                               ; preds = %49, %12
  %53 = bitcast i8* %24 to <2 x i8>*
  %54 = shufflevector <8 x i8> %35, <8 x i8> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i8> %54, <2 x i8>* %53, align 1
  br label %60

55:                                               ; preds = %12
  %56 = extractelement <8 x i8> %35, i32 0
  store i8 %56, i8* %24, align 1
  br label %60

57:                                               ; preds = %12
  %58 = bitcast i8* %24 to double*
  store double %34, double* %58, align 1
  br label %60

59:                                               ; preds = %12
  unreachable

60:                                               ; preds = %46, %52, %55, %57
  %61 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %62 = extractvalue { i8*, i8** } %61, 0
  %63 = extractvalue { i8*, i8** } %61, 1
  %64 = bitcast i8* %62 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %64(i64 %0, i8** %63, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9gather_a8EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = bitcast <8 x float> %20 to <8 x i32>
  %22 = add <8 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %25 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> %23) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %35 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %34, <8 x float> %33) #13
  %36 = bitcast i8* %14 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = fptosi <8 x float> %35 to <8 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <8 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = mul <8 x i32> %43, %38
  %45 = fptosi <8 x float> %25 to <8 x i32>
  %46 = add <8 x i32> %44, %45
  %47 = extractelement <8 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %37, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = insertelement <8 x i8> undef, i8 %50, i32 0
  %52 = extractelement <8 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %37, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = insertelement <8 x i8> %51, i8 %55, i32 1
  %57 = extractelement <8 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %37, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = insertelement <8 x i8> %56, i8 %60, i32 2
  %62 = extractelement <8 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %37, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = insertelement <8 x i8> %61, i8 %65, i32 3
  %67 = extractelement <8 x i32> %46, i32 4
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %37, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = insertelement <8 x i8> %66, i8 %70, i32 4
  %72 = extractelement <8 x i32> %46, i32 5
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %37, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = insertelement <8 x i8> %71, i8 %75, i32 5
  %77 = extractelement <8 x i32> %46, i32 6
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %37, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = insertelement <8 x i8> %76, i8 %80, i32 6
  %82 = extractelement <8 x i32> %46, i32 7
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %37, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = insertelement <8 x i8> %81, i8 %85, i32 7
  %87 = uitofp <8 x i8> %86 to <8 x float>
  %88 = fmul <8 x float> %87, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %89 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %90 = extractvalue { i8*, i8** } %89, 0
  %91 = extractvalue { i8*, i8** } %89, 1
  %92 = bitcast i8* %90 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %92(i64 %0, i8** %91, i64 %2, i64 %3, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> %88, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8load_565EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 6
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i16, i16* %24, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <8 x i16> %31, i16 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i16> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i16, i16* %24, i64 4
  %38 = load i16, i16* %37, align 2
  %39 = insertelement <8 x i16> %36, i16 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i16> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i16* %24 to <4 x i16>*
  %43 = load <4 x i16>, <4 x i16>* %42, align 2
  %44 = shufflevector <4 x i16> %43, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i16> %44, <8 x i16> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i16, i16* %24, i64 2
  %48 = load i16, i16* %47, align 2
  %49 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i16> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i16* %24 to <2 x i16>*
  %53 = load <2 x i16>, <2 x i16>* %52, align 2
  %54 = shufflevector <2 x i16> %53, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i16> %54, <8 x i16> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i16, i16* %24, align 2
  %58 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i16* %24 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = zext <8 x i16> %64 to <8 x i32>
  %66 = and <8 x i32> %65, <i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488>
  %67 = sitofp <8 x i32> %66 to <8 x float>
  %68 = fmul <8 x float> %67, <float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000>
  %69 = and <8 x i32> %65, <i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016>
  %70 = sitofp <8 x i32> %69 to <8 x float>
  %71 = fmul <8 x float> %70, <float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000>
  %72 = and <8 x i32> %65, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %73 = sitofp <8 x i32> %72 to <8 x float>
  %74 = fmul <8 x float> %73, <float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000>
  %75 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %76 = extractvalue { i8*, i8** } %75, 0
  %77 = extractvalue { i8*, i8** } %75, 1
  %78 = bitcast i8* %76 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %78(i64 %0, i8** %77, i64 %2, i64 %3, <8 x float> %68, <8 x float> %71, <8 x float> %74, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL12load_565_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 6
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i16, i16* %24, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <8 x i16> %31, i16 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i16> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i16, i16* %24, i64 4
  %38 = load i16, i16* %37, align 2
  %39 = insertelement <8 x i16> %36, i16 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i16> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i16* %24 to <4 x i16>*
  %43 = load <4 x i16>, <4 x i16>* %42, align 2
  %44 = shufflevector <4 x i16> %43, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i16> %44, <8 x i16> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i16, i16* %24, i64 2
  %48 = load i16, i16* %47, align 2
  %49 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i16> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i16* %24 to <2 x i16>*
  %53 = load <2 x i16>, <2 x i16>* %52, align 2
  %54 = shufflevector <2 x i16> %53, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i16> %54, <8 x i16> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i16, i16* %24, align 2
  %58 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i16* %24 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = zext <8 x i16> %64 to <8 x i32>
  %66 = and <8 x i32> %65, <i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488>
  %67 = sitofp <8 x i32> %66 to <8 x float>
  %68 = fmul <8 x float> %67, <float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000>
  %69 = and <8 x i32> %65, <i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016>
  %70 = sitofp <8 x i32> %69 to <8 x float>
  %71 = fmul <8 x float> %70, <float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000>
  %72 = and <8 x i32> %65, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %73 = sitofp <8 x i32> %72 to <8 x float>
  %74 = fmul <8 x float> %73, <float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000>
  %75 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %76 = extractvalue { i8*, i8** } %75, 0
  %77 = extractvalue { i8*, i8** } %75, 1
  %78 = bitcast i8* %76 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %78(i64 %0, i8** %77, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %68, <8 x float> %71, <8 x float> %74, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9store_565EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %26 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %25, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %27 = fmul <8 x float> %26, <float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01>
  %28 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %27) #13
  %29 = shl <8 x i32> %28, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %30 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %31 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %30, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %32 = fmul <8 x float> %31, <float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01, float 6.300000e+01>
  %33 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %32) #13
  %34 = shl <8 x i32> %33, <i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5>
  %35 = or <8 x i32> %34, %29
  %36 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %6) #13
  %37 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %36, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %38 = fmul <8 x float> %37, <float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01, float 3.100000e+01>
  %39 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %38) #13
  %40 = or <8 x i32> %35, %39
  %41 = shufflevector <8 x i32> %40, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %42 = shufflevector <8 x i32> %40, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %43 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %41, <4 x i32> %42) #13
  %44 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %44) #13
  switch i64 %0, label %67 [
    i64 0, label %65
    i64 7, label %45
    i64 6, label %48
    i64 5, label %51
    i64 4, label %54
    i64 3, label %57
    i64 2, label %60
    i64 1, label %63
  ], !prof !99

45:                                               ; preds = %12
  %46 = extractelement <8 x i16> %43, i32 6
  %47 = getelementptr inbounds i16, i16* %24, i64 6
  store i16 %46, i16* %47, align 2
  br label %48

48:                                               ; preds = %45, %12
  %49 = extractelement <8 x i16> %43, i32 5
  %50 = getelementptr inbounds i16, i16* %24, i64 5
  store i16 %49, i16* %50, align 2
  br label %51

51:                                               ; preds = %48, %12
  %52 = extractelement <8 x i16> %43, i32 4
  %53 = getelementptr inbounds i16, i16* %24, i64 4
  store i16 %52, i16* %53, align 2
  br label %54

54:                                               ; preds = %51, %12
  %55 = bitcast i16* %24 to <4 x i16>*
  %56 = shufflevector <8 x i16> %43, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %56, <4 x i16>* %55, align 2
  br label %68

57:                                               ; preds = %12
  %58 = extractelement <8 x i16> %43, i32 2
  %59 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %58, i16* %59, align 2
  br label %60

60:                                               ; preds = %57, %12
  %61 = bitcast i16* %24 to <2 x i16>*
  %62 = shufflevector <8 x i16> %43, <8 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %62, <2 x i16>* %61, align 2
  br label %68

63:                                               ; preds = %12
  %64 = extractelement <8 x i16> %43, i32 0
  store i16 %64, i16* %24, align 2
  br label %68

65:                                               ; preds = %12
  %66 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> %43, <8 x i16>* %66, align 2
  br label %68

67:                                               ; preds = %12
  unreachable

68:                                               ; preds = %54, %60, %63, %65
  %69 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %70 = extractvalue { i8*, i8** } %69, 0
  %71 = extractvalue { i8*, i8** } %69, 1
  %72 = bitcast i8* %70 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %72(i64 %0, i8** %71, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10gather_565EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = bitcast <8 x float> %20 to <8 x i32>
  %22 = add <8 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %25 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> %23) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %35 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %34, <8 x float> %33) #13
  %36 = bitcast i8* %14 to i16**
  %37 = load i16*, i16** %36, align 8
  %38 = fptosi <8 x float> %35 to <8 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <8 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = mul <8 x i32> %43, %38
  %45 = fptosi <8 x float> %25 to <8 x i32>
  %46 = add <8 x i32> %44, %45
  %47 = extractelement <8 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %37, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = insertelement <8 x i16> undef, i16 %50, i32 0
  %52 = extractelement <8 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %37, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = insertelement <8 x i16> %51, i16 %55, i32 1
  %57 = extractelement <8 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %37, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = insertelement <8 x i16> %56, i16 %60, i32 2
  %62 = extractelement <8 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i16, i16* %37, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = insertelement <8 x i16> %61, i16 %65, i32 3
  %67 = extractelement <8 x i32> %46, i32 4
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i16, i16* %37, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = insertelement <8 x i16> %66, i16 %70, i32 4
  %72 = extractelement <8 x i32> %46, i32 5
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds i16, i16* %37, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = insertelement <8 x i16> %71, i16 %75, i32 5
  %77 = extractelement <8 x i32> %46, i32 6
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i16, i16* %37, i64 %78
  %80 = load i16, i16* %79, align 2
  %81 = insertelement <8 x i16> %76, i16 %80, i32 6
  %82 = extractelement <8 x i32> %46, i32 7
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i16, i16* %37, i64 %83
  %85 = load i16, i16* %84, align 2
  %86 = insertelement <8 x i16> %81, i16 %85, i32 7
  %87 = zext <8 x i16> %86 to <8 x i32>
  %88 = and <8 x i32> %87, <i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488>
  %89 = sitofp <8 x i32> %88 to <8 x float>
  %90 = fmul <8 x float> %89, <float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000>
  %91 = and <8 x i32> %87, <i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016>
  %92 = sitofp <8 x i32> %91 to <8 x float>
  %93 = fmul <8 x float> %92, <float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000>
  %94 = and <8 x i32> %87, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %95 = sitofp <8 x i32> %94 to <8 x float>
  %96 = fmul <8 x float> %95, <float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000>
  %97 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %98 = extractvalue { i8*, i8** } %97, 0
  %99 = extractvalue { i8*, i8** } %97, 1
  %100 = bitcast i8* %98 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %100(i64 %0, i8** %99, i64 %2, i64 %3, <8 x float> %90, <8 x float> %93, <8 x float> %96, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9load_4444EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 6
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i16, i16* %24, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <8 x i16> %31, i16 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i16> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i16, i16* %24, i64 4
  %38 = load i16, i16* %37, align 2
  %39 = insertelement <8 x i16> %36, i16 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i16> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i16* %24 to <4 x i16>*
  %43 = load <4 x i16>, <4 x i16>* %42, align 2
  %44 = shufflevector <4 x i16> %43, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i16> %44, <8 x i16> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i16, i16* %24, i64 2
  %48 = load i16, i16* %47, align 2
  %49 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i16> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i16* %24 to <2 x i16>*
  %53 = load <2 x i16>, <2 x i16>* %52, align 2
  %54 = shufflevector <2 x i16> %53, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i16> %54, <8 x i16> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i16, i16* %24, align 2
  %58 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i16* %24 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = zext <8 x i16> %64 to <8 x i32>
  %66 = and <8 x i32> %65, <i32 61440, i32 61440, i32 61440, i32 61440, i32 61440, i32 61440, i32 61440, i32 61440>
  %67 = sitofp <8 x i32> %66 to <8 x float>
  %68 = fmul <8 x float> %67, <float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000>
  %69 = and <8 x i32> %65, <i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840>
  %70 = sitofp <8 x i32> %69 to <8 x float>
  %71 = fmul <8 x float> %70, <float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000>
  %72 = and <8 x i32> %65, <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %73 = sitofp <8 x i32> %72 to <8 x float>
  %74 = fmul <8 x float> %73, <float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000>
  %75 = and <8 x i32> %65, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %76 = sitofp <8 x i32> %75 to <8 x float>
  %77 = fmul <8 x float> %76, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  %78 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %79 = extractvalue { i8*, i8** } %78, 0
  %80 = extractvalue { i8*, i8** } %78, 1
  %81 = bitcast i8* %79 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %81(i64 %0, i8** %80, i64 %2, i64 %3, <8 x float> %68, <8 x float> %71, <8 x float> %74, <8 x float> %77, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL13load_4444_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 6
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i16, i16* %24, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <8 x i16> %31, i16 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i16> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i16, i16* %24, i64 4
  %38 = load i16, i16* %37, align 2
  %39 = insertelement <8 x i16> %36, i16 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i16> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i16* %24 to <4 x i16>*
  %43 = load <4 x i16>, <4 x i16>* %42, align 2
  %44 = shufflevector <4 x i16> %43, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i16> %44, <8 x i16> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i16, i16* %24, i64 2
  %48 = load i16, i16* %47, align 2
  %49 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i16> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i16* %24 to <2 x i16>*
  %53 = load <2 x i16>, <2 x i16>* %52, align 2
  %54 = shufflevector <2 x i16> %53, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i16> %54, <8 x i16> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i16, i16* %24, align 2
  %58 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i16* %24 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = zext <8 x i16> %64 to <8 x i32>
  %66 = and <8 x i32> %65, <i32 61440, i32 61440, i32 61440, i32 61440, i32 61440, i32 61440, i32 61440, i32 61440>
  %67 = sitofp <8 x i32> %66 to <8 x float>
  %68 = fmul <8 x float> %67, <float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000>
  %69 = and <8 x i32> %65, <i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840>
  %70 = sitofp <8 x i32> %69 to <8 x float>
  %71 = fmul <8 x float> %70, <float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000>
  %72 = and <8 x i32> %65, <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %73 = sitofp <8 x i32> %72 to <8 x float>
  %74 = fmul <8 x float> %73, <float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000>
  %75 = and <8 x i32> %65, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %76 = sitofp <8 x i32> %75 to <8 x float>
  %77 = fmul <8 x float> %76, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  %78 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %79 = extractvalue { i8*, i8** } %78, 0
  %80 = extractvalue { i8*, i8** } %78, 1
  %81 = bitcast i8* %79 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %81(i64 %0, i8** %80, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %68, <8 x float> %71, <8 x float> %74, <8 x float> %77) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10store_4444EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %26 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %25, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %27 = fmul <8 x float> %26, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %28 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %27) #13
  %29 = shl <8 x i32> %28, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %30 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %31 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %30, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %32 = fmul <8 x float> %31, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %33 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %32) #13
  %34 = shl <8 x i32> %33, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %35 = or <8 x i32> %34, %29
  %36 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %6) #13
  %37 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %36, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %38 = fmul <8 x float> %37, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %39 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %38) #13
  %40 = shl <8 x i32> %39, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %41 = or <8 x i32> %35, %40
  %42 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %7) #13
  %43 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %42, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %44 = fmul <8 x float> %43, <float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01, float 1.500000e+01>
  %45 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %44) #13
  %46 = or <8 x i32> %41, %45
  %47 = shufflevector <8 x i32> %46, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %48 = shufflevector <8 x i32> %46, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %49 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %47, <4 x i32> %48) #13
  %50 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %50) #13
  switch i64 %0, label %73 [
    i64 0, label %71
    i64 7, label %51
    i64 6, label %54
    i64 5, label %57
    i64 4, label %60
    i64 3, label %63
    i64 2, label %66
    i64 1, label %69
  ], !prof !99

51:                                               ; preds = %12
  %52 = extractelement <8 x i16> %49, i32 6
  %53 = getelementptr inbounds i16, i16* %24, i64 6
  store i16 %52, i16* %53, align 2
  br label %54

54:                                               ; preds = %51, %12
  %55 = extractelement <8 x i16> %49, i32 5
  %56 = getelementptr inbounds i16, i16* %24, i64 5
  store i16 %55, i16* %56, align 2
  br label %57

57:                                               ; preds = %54, %12
  %58 = extractelement <8 x i16> %49, i32 4
  %59 = getelementptr inbounds i16, i16* %24, i64 4
  store i16 %58, i16* %59, align 2
  br label %60

60:                                               ; preds = %57, %12
  %61 = bitcast i16* %24 to <4 x i16>*
  %62 = shufflevector <8 x i16> %49, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %62, <4 x i16>* %61, align 2
  br label %74

63:                                               ; preds = %12
  %64 = extractelement <8 x i16> %49, i32 2
  %65 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %64, i16* %65, align 2
  br label %66

66:                                               ; preds = %63, %12
  %67 = bitcast i16* %24 to <2 x i16>*
  %68 = shufflevector <8 x i16> %49, <8 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %68, <2 x i16>* %67, align 2
  br label %74

69:                                               ; preds = %12
  %70 = extractelement <8 x i16> %49, i32 0
  store i16 %70, i16* %24, align 2
  br label %74

71:                                               ; preds = %12
  %72 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %72, align 2
  br label %74

73:                                               ; preds = %12
  unreachable

74:                                               ; preds = %60, %66, %69, %71
  %75 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %76 = extractvalue { i8*, i8** } %75, 0
  %77 = extractvalue { i8*, i8** } %75, 1
  %78 = bitcast i8* %76 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %78(i64 %0, i8** %77, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11gather_4444EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = bitcast <8 x float> %20 to <8 x i32>
  %22 = add <8 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %25 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> %23) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %35 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %34, <8 x float> %33) #13
  %36 = bitcast i8* %14 to i16**
  %37 = load i16*, i16** %36, align 8
  %38 = fptosi <8 x float> %35 to <8 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <8 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = mul <8 x i32> %43, %38
  %45 = fptosi <8 x float> %25 to <8 x i32>
  %46 = add <8 x i32> %44, %45
  %47 = extractelement <8 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %37, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = insertelement <8 x i16> undef, i16 %50, i32 0
  %52 = extractelement <8 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %37, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = insertelement <8 x i16> %51, i16 %55, i32 1
  %57 = extractelement <8 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %37, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = insertelement <8 x i16> %56, i16 %60, i32 2
  %62 = extractelement <8 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i16, i16* %37, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = insertelement <8 x i16> %61, i16 %65, i32 3
  %67 = extractelement <8 x i32> %46, i32 4
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i16, i16* %37, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = insertelement <8 x i16> %66, i16 %70, i32 4
  %72 = extractelement <8 x i32> %46, i32 5
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds i16, i16* %37, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = insertelement <8 x i16> %71, i16 %75, i32 5
  %77 = extractelement <8 x i32> %46, i32 6
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i16, i16* %37, i64 %78
  %80 = load i16, i16* %79, align 2
  %81 = insertelement <8 x i16> %76, i16 %80, i32 6
  %82 = extractelement <8 x i32> %46, i32 7
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i16, i16* %37, i64 %83
  %85 = load i16, i16* %84, align 2
  %86 = insertelement <8 x i16> %81, i16 %85, i32 7
  %87 = zext <8 x i16> %86 to <8 x i32>
  %88 = and <8 x i32> %87, <i32 61440, i32 61440, i32 61440, i32 61440, i32 61440, i32 61440, i32 61440, i32 61440>
  %89 = sitofp <8 x i32> %88 to <8 x float>
  %90 = fmul <8 x float> %89, <float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000, float 0x3EF1111120000000>
  %91 = and <8 x i32> %87, <i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840, i32 3840>
  %92 = sitofp <8 x i32> %91 to <8 x float>
  %93 = fmul <8 x float> %92, <float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000, float 0x3F31111120000000>
  %94 = and <8 x i32> %87, <i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240, i32 240>
  %95 = sitofp <8 x i32> %94 to <8 x float>
  %96 = fmul <8 x float> %95, <float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000, float 0x3F71111120000000>
  %97 = and <8 x i32> %87, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %98 = sitofp <8 x i32> %97 to <8 x float>
  %99 = fmul <8 x float> %98, <float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000, float 0x3FB1111120000000>
  %100 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %101 = extractvalue { i8*, i8** } %100, 0
  %102 = extractvalue { i8*, i8** } %100, 1
  %103 = bitcast i8* %101 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %103(i64 %0, i8** %102, i64 %2, i64 %3, <8 x float> %90, <8 x float> %93, <8 x float> %96, <8 x float> %99, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8load_f16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i64**
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i64, i64* %17, i64 %22
  %24 = getelementptr inbounds i64, i64* %23, i64 %2
  %25 = icmp eq i64 %0, 0
  br i1 %25, label %76, label %26, !prof !100

26:                                               ; preds = %12
  %27 = bitcast i64* %24 to double*
  %28 = load double, double* %27, align 1
  %29 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %28, i32 0
  %30 = bitcast <2 x double> %29 to <2 x i64>
  %31 = icmp eq i64 %0, 1
  br i1 %31, label %88, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds i64, i64* %24, i64 1
  %34 = bitcast i64* %33 to double*
  %35 = load double, double* %34, align 1
  %36 = insertelement <2 x double> undef, double %28, i32 0
  %37 = insertelement <2 x double> %36, double %35, i32 1
  %38 = bitcast <2 x double> %37 to <2 x i64>
  %39 = icmp ugt i64 %0, 2
  br i1 %39, label %40, label %88

40:                                               ; preds = %32
  %41 = getelementptr inbounds i64, i64* %24, i64 2
  %42 = bitcast i64* %41 to double*
  %43 = load double, double* %42, align 1
  %44 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %43, i32 0
  %45 = bitcast <2 x double> %44 to <2 x i64>
  %46 = icmp eq i64 %0, 3
  br i1 %46, label %88, label %47

47:                                               ; preds = %40
  %48 = getelementptr inbounds i64, i64* %24, i64 3
  %49 = bitcast i64* %48 to double*
  %50 = load double, double* %49, align 1
  %51 = insertelement <2 x double> undef, double %43, i32 0
  %52 = insertelement <2 x double> %51, double %50, i32 1
  %53 = bitcast <2 x double> %52 to <2 x i64>
  %54 = icmp ugt i64 %0, 4
  br i1 %54, label %55, label %88

55:                                               ; preds = %47
  %56 = getelementptr inbounds i64, i64* %24, i64 4
  %57 = bitcast i64* %56 to double*
  %58 = load double, double* %57, align 1
  %59 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %58, i32 0
  %60 = bitcast <2 x double> %59 to <2 x i64>
  %61 = icmp eq i64 %0, 5
  br i1 %61, label %88, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds i64, i64* %24, i64 5
  %64 = bitcast i64* %63 to double*
  %65 = load double, double* %64, align 1
  %66 = insertelement <2 x double> undef, double %58, i32 0
  %67 = insertelement <2 x double> %66, double %65, i32 1
  %68 = bitcast <2 x double> %67 to <2 x i64>
  %69 = icmp ugt i64 %0, 6
  br i1 %69, label %70, label %88

70:                                               ; preds = %62
  %71 = getelementptr inbounds i64, i64* %24, i64 6
  %72 = bitcast i64* %71 to double*
  %73 = load double, double* %72, align 1
  %74 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %73, i32 0
  %75 = bitcast <2 x double> %74 to <2 x i64>
  br label %88

76:                                               ; preds = %12
  %77 = bitcast i64* %24 to <2 x i64>*
  %78 = load <2 x i64>, <2 x i64>* %77, align 1
  %79 = getelementptr inbounds i64, i64* %24, i64 2
  %80 = bitcast i64* %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 1
  %82 = getelementptr inbounds i64, i64* %24, i64 4
  %83 = bitcast i64* %82 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 1
  %85 = getelementptr inbounds i64, i64* %24, i64 6
  %86 = bitcast i64* %85 to <2 x i64>*
  %87 = load <2 x i64>, <2 x i64>* %86, align 1
  br label %88

88:                                               ; preds = %26, %32, %40, %47, %55, %62, %70, %76
  %89 = phi <2 x i64> [ %87, %76 ], [ %75, %70 ], [ zeroinitializer, %62 ], [ zeroinitializer, %55 ], [ zeroinitializer, %47 ], [ zeroinitializer, %40 ], [ zeroinitializer, %32 ], [ zeroinitializer, %26 ]
  %90 = phi <2 x i64> [ %84, %76 ], [ %68, %70 ], [ %68, %62 ], [ %60, %55 ], [ zeroinitializer, %47 ], [ zeroinitializer, %40 ], [ zeroinitializer, %32 ], [ zeroinitializer, %26 ]
  %91 = phi <2 x i64> [ %81, %76 ], [ %53, %70 ], [ %53, %62 ], [ %53, %55 ], [ %53, %47 ], [ %45, %40 ], [ zeroinitializer, %32 ], [ zeroinitializer, %26 ]
  %92 = phi <2 x i64> [ %78, %76 ], [ %38, %70 ], [ %38, %62 ], [ %38, %55 ], [ %38, %47 ], [ %38, %40 ], [ %38, %32 ], [ %30, %26 ]
  %93 = bitcast <2 x i64> %92 to <8 x i16>
  %94 = bitcast <2 x i64> %91 to <8 x i16>
  %95 = shufflevector <8 x i16> %93, <8 x i16> %94, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %96 = shufflevector <8 x i16> %93, <8 x i16> %94, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %97 = bitcast <2 x i64> %90 to <8 x i16>
  %98 = bitcast <2 x i64> %89 to <8 x i16>
  %99 = shufflevector <8 x i16> %97, <8 x i16> %98, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %100 = shufflevector <8 x i16> %97, <8 x i16> %98, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %101 = shufflevector <8 x i16> %95, <8 x i16> %96, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %102 = bitcast <8 x i16> %101 to <2 x i64>
  %103 = shufflevector <8 x i16> %95, <8 x i16> %96, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %104 = bitcast <8 x i16> %103 to <2 x i64>
  %105 = shufflevector <8 x i16> %99, <8 x i16> %100, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %106 = bitcast <8 x i16> %105 to <2 x i64>
  %107 = shufflevector <8 x i16> %99, <8 x i16> %100, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %108 = bitcast <8 x i16> %107 to <2 x i64>
  %109 = shufflevector <2 x i64> %102, <2 x i64> %106, <2 x i32> <i32 0, i32 2>
  %110 = shufflevector <2 x i64> %102, <2 x i64> %106, <2 x i32> <i32 1, i32 3>
  %111 = shufflevector <2 x i64> %104, <2 x i64> %108, <2 x i32> <i32 0, i32 2>
  %112 = shufflevector <2 x i64> %104, <2 x i64> %108, <2 x i32> <i32 1, i32 3>
  %113 = bitcast <2 x i64> %109 to <8 x i16>
  %114 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %113) #13
  %115 = bitcast <2 x i64> %110 to <8 x i16>
  %116 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %115) #13
  %117 = bitcast <2 x i64> %111 to <8 x i16>
  %118 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %117) #13
  %119 = bitcast <2 x i64> %112 to <8 x i16>
  %120 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %119) #13
  %121 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %122 = extractvalue { i8*, i8** } %121, 0
  %123 = extractvalue { i8*, i8** } %121, 1
  %124 = bitcast i8* %122 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %124(i64 %0, i8** %123, i64 %2, i64 %3, <8 x float> %114, <8 x float> %116, <8 x float> %118, <8 x float> %120, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL12load_f16_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i64**
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i64, i64* %17, i64 %22
  %24 = getelementptr inbounds i64, i64* %23, i64 %2
  %25 = icmp eq i64 %0, 0
  br i1 %25, label %76, label %26, !prof !100

26:                                               ; preds = %12
  %27 = bitcast i64* %24 to double*
  %28 = load double, double* %27, align 1
  %29 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %28, i32 0
  %30 = bitcast <2 x double> %29 to <2 x i64>
  %31 = icmp eq i64 %0, 1
  br i1 %31, label %88, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds i64, i64* %24, i64 1
  %34 = bitcast i64* %33 to double*
  %35 = load double, double* %34, align 1
  %36 = insertelement <2 x double> undef, double %28, i32 0
  %37 = insertelement <2 x double> %36, double %35, i32 1
  %38 = bitcast <2 x double> %37 to <2 x i64>
  %39 = icmp ugt i64 %0, 2
  br i1 %39, label %40, label %88

40:                                               ; preds = %32
  %41 = getelementptr inbounds i64, i64* %24, i64 2
  %42 = bitcast i64* %41 to double*
  %43 = load double, double* %42, align 1
  %44 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %43, i32 0
  %45 = bitcast <2 x double> %44 to <2 x i64>
  %46 = icmp eq i64 %0, 3
  br i1 %46, label %88, label %47

47:                                               ; preds = %40
  %48 = getelementptr inbounds i64, i64* %24, i64 3
  %49 = bitcast i64* %48 to double*
  %50 = load double, double* %49, align 1
  %51 = insertelement <2 x double> undef, double %43, i32 0
  %52 = insertelement <2 x double> %51, double %50, i32 1
  %53 = bitcast <2 x double> %52 to <2 x i64>
  %54 = icmp ugt i64 %0, 4
  br i1 %54, label %55, label %88

55:                                               ; preds = %47
  %56 = getelementptr inbounds i64, i64* %24, i64 4
  %57 = bitcast i64* %56 to double*
  %58 = load double, double* %57, align 1
  %59 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %58, i32 0
  %60 = bitcast <2 x double> %59 to <2 x i64>
  %61 = icmp eq i64 %0, 5
  br i1 %61, label %88, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds i64, i64* %24, i64 5
  %64 = bitcast i64* %63 to double*
  %65 = load double, double* %64, align 1
  %66 = insertelement <2 x double> undef, double %58, i32 0
  %67 = insertelement <2 x double> %66, double %65, i32 1
  %68 = bitcast <2 x double> %67 to <2 x i64>
  %69 = icmp ugt i64 %0, 6
  br i1 %69, label %70, label %88

70:                                               ; preds = %62
  %71 = getelementptr inbounds i64, i64* %24, i64 6
  %72 = bitcast i64* %71 to double*
  %73 = load double, double* %72, align 1
  %74 = insertelement <2 x double> <double undef, double 0.000000e+00>, double %73, i32 0
  %75 = bitcast <2 x double> %74 to <2 x i64>
  br label %88

76:                                               ; preds = %12
  %77 = bitcast i64* %24 to <2 x i64>*
  %78 = load <2 x i64>, <2 x i64>* %77, align 1
  %79 = getelementptr inbounds i64, i64* %24, i64 2
  %80 = bitcast i64* %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 1
  %82 = getelementptr inbounds i64, i64* %24, i64 4
  %83 = bitcast i64* %82 to <2 x i64>*
  %84 = load <2 x i64>, <2 x i64>* %83, align 1
  %85 = getelementptr inbounds i64, i64* %24, i64 6
  %86 = bitcast i64* %85 to <2 x i64>*
  %87 = load <2 x i64>, <2 x i64>* %86, align 1
  br label %88

88:                                               ; preds = %26, %32, %40, %47, %55, %62, %70, %76
  %89 = phi <2 x i64> [ %87, %76 ], [ %75, %70 ], [ zeroinitializer, %62 ], [ zeroinitializer, %55 ], [ zeroinitializer, %47 ], [ zeroinitializer, %40 ], [ zeroinitializer, %32 ], [ zeroinitializer, %26 ]
  %90 = phi <2 x i64> [ %84, %76 ], [ %68, %70 ], [ %68, %62 ], [ %60, %55 ], [ zeroinitializer, %47 ], [ zeroinitializer, %40 ], [ zeroinitializer, %32 ], [ zeroinitializer, %26 ]
  %91 = phi <2 x i64> [ %81, %76 ], [ %53, %70 ], [ %53, %62 ], [ %53, %55 ], [ %53, %47 ], [ %45, %40 ], [ zeroinitializer, %32 ], [ zeroinitializer, %26 ]
  %92 = phi <2 x i64> [ %78, %76 ], [ %38, %70 ], [ %38, %62 ], [ %38, %55 ], [ %38, %47 ], [ %38, %40 ], [ %38, %32 ], [ %30, %26 ]
  %93 = bitcast <2 x i64> %92 to <8 x i16>
  %94 = bitcast <2 x i64> %91 to <8 x i16>
  %95 = shufflevector <8 x i16> %93, <8 x i16> %94, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %96 = shufflevector <8 x i16> %93, <8 x i16> %94, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %97 = bitcast <2 x i64> %90 to <8 x i16>
  %98 = bitcast <2 x i64> %89 to <8 x i16>
  %99 = shufflevector <8 x i16> %97, <8 x i16> %98, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %100 = shufflevector <8 x i16> %97, <8 x i16> %98, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %101 = shufflevector <8 x i16> %95, <8 x i16> %96, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %102 = bitcast <8 x i16> %101 to <2 x i64>
  %103 = shufflevector <8 x i16> %95, <8 x i16> %96, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %104 = bitcast <8 x i16> %103 to <2 x i64>
  %105 = shufflevector <8 x i16> %99, <8 x i16> %100, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %106 = bitcast <8 x i16> %105 to <2 x i64>
  %107 = shufflevector <8 x i16> %99, <8 x i16> %100, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %108 = bitcast <8 x i16> %107 to <2 x i64>
  %109 = shufflevector <2 x i64> %102, <2 x i64> %106, <2 x i32> <i32 0, i32 2>
  %110 = shufflevector <2 x i64> %102, <2 x i64> %106, <2 x i32> <i32 1, i32 3>
  %111 = shufflevector <2 x i64> %104, <2 x i64> %108, <2 x i32> <i32 0, i32 2>
  %112 = shufflevector <2 x i64> %104, <2 x i64> %108, <2 x i32> <i32 1, i32 3>
  %113 = bitcast <2 x i64> %109 to <8 x i16>
  %114 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %113) #13
  %115 = bitcast <2 x i64> %110 to <8 x i16>
  %116 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %115) #13
  %117 = bitcast <2 x i64> %111 to <8 x i16>
  %118 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %117) #13
  %119 = bitcast <2 x i64> %112 to <8 x i16>
  %120 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %119) #13
  %121 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %122 = extractvalue { i8*, i8** } %121, 0
  %123 = extractvalue { i8*, i8** } %121, 1
  %124 = bitcast i8* %122 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %124(i64 %0, i8** %123, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %114, <8 x float> %116, <8 x float> %118, <8 x float> %120) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9store_f16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i64**
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i64, i64* %17, i64 %22
  %24 = getelementptr inbounds i64, i64* %23, i64 %2
  %25 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %4, i32 4) #13
  %26 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %5, i32 4) #13
  %27 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %6, i32 4) #13
  %28 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %7, i32 4) #13
  %29 = shufflevector <8 x i16> %25, <8 x i16> %26, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %30 = shufflevector <8 x i16> %25, <8 x i16> %26, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %31 = shufflevector <8 x i16> %27, <8 x i16> %28, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %32 = shufflevector <8 x i16> %27, <8 x i16> %28, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %33 = bitcast <8 x i16> %29 to <4 x i32>
  %34 = bitcast <8 x i16> %31 to <4 x i32>
  %35 = shufflevector <4 x i32> %33, <4 x i32> %34, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %36 = shufflevector <4 x i32> %33, <4 x i32> %34, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %37 = bitcast <8 x i16> %30 to <4 x i32>
  %38 = bitcast <8 x i16> %32 to <4 x i32>
  %39 = shufflevector <4 x i32> %37, <4 x i32> %38, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %40 = shufflevector <4 x i32> %37, <4 x i32> %38, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %41 = icmp eq i64 %0, 0
  br i1 %41, label %79, label %42, !prof !100

42:                                               ; preds = %12
  %43 = bitcast i64* %24 to double*
  %44 = bitcast <4 x i32> %35 to <2 x double>
  %45 = extractelement <2 x double> %44, i32 0
  store double %45, double* %43, align 1
  %46 = icmp eq i64 %0, 1
  br i1 %46, label %87, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds i64, i64* %24, i64 1
  %49 = bitcast i64* %48 to double*
  %50 = extractelement <2 x double> %44, i32 1
  store double %50, double* %49, align 1
  %51 = icmp ugt i64 %0, 2
  br i1 %51, label %52, label %87

52:                                               ; preds = %47
  %53 = getelementptr inbounds i64, i64* %24, i64 2
  %54 = bitcast i64* %53 to double*
  %55 = bitcast <4 x i32> %36 to <2 x double>
  %56 = extractelement <2 x double> %55, i32 0
  store double %56, double* %54, align 1
  %57 = icmp eq i64 %0, 3
  br i1 %57, label %87, label %58

58:                                               ; preds = %52
  %59 = getelementptr inbounds i64, i64* %24, i64 3
  %60 = bitcast i64* %59 to double*
  %61 = extractelement <2 x double> %55, i32 1
  store double %61, double* %60, align 1
  %62 = icmp ugt i64 %0, 4
  br i1 %62, label %63, label %87

63:                                               ; preds = %58
  %64 = getelementptr inbounds i64, i64* %24, i64 4
  %65 = bitcast i64* %64 to double*
  %66 = bitcast <4 x i32> %39 to <2 x double>
  %67 = extractelement <2 x double> %66, i32 0
  store double %67, double* %65, align 1
  %68 = icmp eq i64 %0, 5
  br i1 %68, label %87, label %69

69:                                               ; preds = %63
  %70 = getelementptr inbounds i64, i64* %24, i64 5
  %71 = bitcast i64* %70 to double*
  %72 = extractelement <2 x double> %66, i32 1
  store double %72, double* %71, align 1
  %73 = icmp ugt i64 %0, 6
  br i1 %73, label %74, label %87

74:                                               ; preds = %69
  %75 = getelementptr inbounds i64, i64* %24, i64 6
  %76 = bitcast i64* %75 to double*
  %77 = bitcast <4 x i32> %40 to <2 x double>
  %78 = extractelement <2 x double> %77, i32 0
  store double %78, double* %76, align 1
  br label %87

79:                                               ; preds = %12
  %80 = bitcast i64* %24 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %80, align 1
  %81 = getelementptr inbounds i64, i64* %24, i64 2
  %82 = bitcast i64* %81 to <4 x i32>*
  store <4 x i32> %36, <4 x i32>* %82, align 1
  %83 = getelementptr inbounds i64, i64* %24, i64 4
  %84 = bitcast i64* %83 to <4 x i32>*
  store <4 x i32> %39, <4 x i32>* %84, align 1
  %85 = getelementptr inbounds i64, i64* %24, i64 6
  %86 = bitcast i64* %85 to <4 x i32>*
  store <4 x i32> %40, <4 x i32>* %86, align 1
  br label %87

87:                                               ; preds = %42, %47, %52, %58, %63, %69, %74, %79
  %88 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %89 = extractvalue { i8*, i8** } %88, 0
  %90 = extractvalue { i8*, i8** } %88, 1
  %91 = bitcast i8* %89 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %91(i64 %0, i8** %90, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10gather_f16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = bitcast <8 x float> %20 to <8 x i32>
  %22 = add <8 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %25 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> %23) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %35 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %34, <8 x float> %33) #13
  %36 = bitcast i8* %14 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = fptosi <8 x float> %35 to <8 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <8 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = mul <8 x i32> %43, %38
  %45 = fptosi <8 x float> %25 to <8 x i32>
  %46 = add <8 x i32> %44, %45
  %47 = bitcast <8 x i32> %46 to <4 x i64>
  %48 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %49 = bitcast <2 x i64> %48 to <4 x i32>
  %50 = tail call <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64> zeroinitializer, i8* %37, <4 x i32> %49, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, i8 8) #13
  %51 = shufflevector <4 x i64> %50, <4 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %53 = bitcast <2 x i64> %52 to <4 x i32>
  %54 = tail call <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64> zeroinitializer, i8* %37, <4 x i32> %53, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, i8 8) #13
  %55 = shufflevector <4 x i64> %54, <4 x i64> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %56 = shufflevector <8 x i64> %51, <8 x i64> %55, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %57 = shufflevector <4 x i64> %50, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %58 = shufflevector <4 x i64> %50, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %59 = shufflevector <8 x i64> %56, <8 x i64> undef, <2 x i32> <i32 4, i32 5>
  %60 = shufflevector <8 x i64> %56, <8 x i64> undef, <2 x i32> <i32 6, i32 7>
  %61 = bitcast <2 x i64> %57 to <8 x i16>
  %62 = bitcast <2 x i64> %58 to <8 x i16>
  %63 = shufflevector <8 x i16> %61, <8 x i16> %62, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %64 = shufflevector <8 x i16> %61, <8 x i16> %62, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %65 = bitcast <2 x i64> %59 to <8 x i16>
  %66 = bitcast <2 x i64> %60 to <8 x i16>
  %67 = shufflevector <8 x i16> %65, <8 x i16> %66, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %68 = shufflevector <8 x i16> %65, <8 x i16> %66, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %69 = shufflevector <8 x i16> %63, <8 x i16> %64, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %70 = bitcast <8 x i16> %69 to <2 x i64>
  %71 = shufflevector <8 x i16> %63, <8 x i16> %64, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %72 = bitcast <8 x i16> %71 to <2 x i64>
  %73 = shufflevector <8 x i16> %67, <8 x i16> %68, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %74 = bitcast <8 x i16> %73 to <2 x i64>
  %75 = shufflevector <8 x i16> %67, <8 x i16> %68, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %76 = bitcast <8 x i16> %75 to <2 x i64>
  %77 = shufflevector <2 x i64> %70, <2 x i64> %74, <2 x i32> <i32 0, i32 2>
  %78 = shufflevector <2 x i64> %70, <2 x i64> %74, <2 x i32> <i32 1, i32 3>
  %79 = shufflevector <2 x i64> %72, <2 x i64> %76, <2 x i32> <i32 0, i32 2>
  %80 = shufflevector <2 x i64> %72, <2 x i64> %76, <2 x i32> <i32 1, i32 3>
  %81 = bitcast <2 x i64> %77 to <8 x i16>
  %82 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %81) #13
  %83 = bitcast <2 x i64> %78 to <8 x i16>
  %84 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %83) #13
  %85 = bitcast <2 x i64> %79 to <8 x i16>
  %86 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %85) #13
  %87 = bitcast <2 x i64> %80 to <8 x i16>
  %88 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %87) #13
  %89 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %90 = extractvalue { i8*, i8** } %89, 0
  %91 = extractvalue { i8*, i8** } %89, 1
  %92 = bitcast i8* %90 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %92(i64 %0, i8** %91, i64 %2, i64 %3, <8 x float> %82, <8 x float> %84, <8 x float> %86, <8 x float> %88, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9load_af16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 6
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i16, i16* %24, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <8 x i16> %31, i16 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i16> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i16, i16* %24, i64 4
  %38 = load i16, i16* %37, align 2
  %39 = insertelement <8 x i16> %36, i16 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i16> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i16* %24 to <4 x i16>*
  %43 = load <4 x i16>, <4 x i16>* %42, align 2
  %44 = shufflevector <4 x i16> %43, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i16> %44, <8 x i16> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i16, i16* %24, i64 2
  %48 = load i16, i16* %47, align 2
  %49 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i16> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i16* %24 to <2 x i16>*
  %53 = load <2 x i16>, <2 x i16>* %52, align 2
  %54 = shufflevector <2 x i16> %53, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i16> %54, <8 x i16> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i16, i16* %24, align 2
  %58 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i16* %24 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %64) #13
  %66 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %67 = extractvalue { i8*, i8** } %66, 0
  %68 = extractvalue { i8*, i8** } %66, 1
  %69 = bitcast i8* %67 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %69(i64 %0, i8** %68, i64 %2, i64 %3, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> %65, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL13load_af16_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 6
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i16, i16* %24, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <8 x i16> %31, i16 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i16> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i16, i16* %24, i64 4
  %38 = load i16, i16* %37, align 2
  %39 = insertelement <8 x i16> %36, i16 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i16> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i16* %24 to <4 x i16>*
  %43 = load <4 x i16>, <4 x i16>* %42, align 2
  %44 = shufflevector <4 x i16> %43, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i16> %44, <8 x i16> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i16, i16* %24, i64 2
  %48 = load i16, i16* %47, align 2
  %49 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i16> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i16* %24 to <2 x i16>*
  %53 = load <2 x i16>, <2 x i16>* %52, align 2
  %54 = shufflevector <2 x i16> %53, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i16> %54, <8 x i16> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i16, i16* %24, align 2
  %58 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i16* %24 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %64) #13
  %66 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %67 = extractvalue { i8*, i8** } %66, 0
  %68 = extractvalue { i8*, i8** } %66, 1
  %69 = bitcast i8* %67 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %69(i64 %0, i8** %68, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> %65) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10store_af16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %7, i32 4) #13
  %26 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %26) #13
  switch i64 %0, label %49 [
    i64 0, label %47
    i64 7, label %27
    i64 6, label %30
    i64 5, label %33
    i64 4, label %36
    i64 3, label %39
    i64 2, label %42
    i64 1, label %45
  ], !prof !99

27:                                               ; preds = %12
  %28 = extractelement <8 x i16> %25, i32 6
  %29 = getelementptr inbounds i16, i16* %24, i64 6
  store i16 %28, i16* %29, align 2
  br label %30

30:                                               ; preds = %27, %12
  %31 = extractelement <8 x i16> %25, i32 5
  %32 = getelementptr inbounds i16, i16* %24, i64 5
  store i16 %31, i16* %32, align 2
  br label %33

33:                                               ; preds = %30, %12
  %34 = extractelement <8 x i16> %25, i32 4
  %35 = getelementptr inbounds i16, i16* %24, i64 4
  store i16 %34, i16* %35, align 2
  br label %36

36:                                               ; preds = %33, %12
  %37 = bitcast i16* %24 to <4 x i16>*
  %38 = shufflevector <8 x i16> %25, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %38, <4 x i16>* %37, align 2
  br label %50

39:                                               ; preds = %12
  %40 = extractelement <8 x i16> %25, i32 2
  %41 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %40, i16* %41, align 2
  br label %42

42:                                               ; preds = %39, %12
  %43 = bitcast i16* %24 to <2 x i16>*
  %44 = shufflevector <8 x i16> %25, <8 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %44, <2 x i16>* %43, align 2
  br label %50

45:                                               ; preds = %12
  %46 = extractelement <8 x i16> %25, i32 0
  store i16 %46, i16* %24, align 2
  br label %50

47:                                               ; preds = %12
  %48 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> %25, <8 x i16>* %48, align 2
  br label %50

49:                                               ; preds = %12
  unreachable

50:                                               ; preds = %36, %42, %45, %47
  %51 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %52 = extractvalue { i8*, i8** } %51, 0
  %53 = extractvalue { i8*, i8** } %51, 1
  %54 = bitcast i8* %52 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %54(i64 %0, i8** %53, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11gather_af16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = bitcast <8 x float> %20 to <8 x i32>
  %22 = add <8 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %25 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> %23) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %35 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %34, <8 x float> %33) #13
  %36 = bitcast i8* %14 to i16**
  %37 = load i16*, i16** %36, align 8
  %38 = fptosi <8 x float> %35 to <8 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <8 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = mul <8 x i32> %43, %38
  %45 = fptosi <8 x float> %25 to <8 x i32>
  %46 = add <8 x i32> %44, %45
  %47 = extractelement <8 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %37, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = insertelement <8 x i16> undef, i16 %50, i32 0
  %52 = extractelement <8 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %37, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = insertelement <8 x i16> %51, i16 %55, i32 1
  %57 = extractelement <8 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %37, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = insertelement <8 x i16> %56, i16 %60, i32 2
  %62 = extractelement <8 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i16, i16* %37, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = insertelement <8 x i16> %61, i16 %65, i32 3
  %67 = extractelement <8 x i32> %46, i32 4
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i16, i16* %37, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = insertelement <8 x i16> %66, i16 %70, i32 4
  %72 = extractelement <8 x i32> %46, i32 5
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds i16, i16* %37, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = insertelement <8 x i16> %71, i16 %75, i32 5
  %77 = extractelement <8 x i32> %46, i32 6
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i16, i16* %37, i64 %78
  %80 = load i16, i16* %79, align 2
  %81 = insertelement <8 x i16> %76, i16 %80, i32 6
  %82 = extractelement <8 x i32> %46, i32 7
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i16, i16* %37, i64 %83
  %85 = load i16, i16* %84, align 2
  %86 = insertelement <8 x i16> %81, i16 %85, i32 7
  %87 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %86) #13
  %88 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %89 = extractvalue { i8*, i8** } %88, 0
  %90 = extractvalue { i8*, i8** } %88, 1
  %91 = bitcast i8* %89 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %91(i64 %0, i8** %90, i64 %2, i64 %3, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> %87, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10load_rgf16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <8 x i16>, align 16
  %15 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %16 = extractvalue { i8*, i8** } %15, 0
  %17 = extractvalue { i8*, i8** } %15, 1
  %18 = bitcast i8* %16 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = getelementptr inbounds i8, i8* %16, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %23, %3
  %25 = getelementptr inbounds i32, i32* %19, i64 %24
  %26 = getelementptr inbounds i32, i32* %25, i64 %2
  %27 = bitcast <8 x i16>* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27)
  store <8 x i16> <i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846>, <8 x i16>* %13, align 16
  %28 = bitcast <8 x i16>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28)
  store <8 x i16> <i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846>, <8 x i16>* %14, align 16
  %29 = icmp eq i64 %0, 0
  br i1 %29, label %64, label %30, !prof !100

30:                                               ; preds = %12
  store <8 x i16> zeroinitializer, <8 x i16>* %14, align 16
  store <8 x i16> zeroinitializer, <8 x i16>* %13, align 16
  %31 = icmp ugt i64 %0, 3
  br i1 %31, label %32, label %37

32:                                               ; preds = %30
  %33 = bitcast i32* %26 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 1
  store <8 x i16> %34, <8 x i16>* %13, align 16
  %35 = add i64 %0, -4
  %36 = getelementptr inbounds i32, i32* %26, i64 4
  br label %37

37:                                               ; preds = %32, %30
  %38 = phi i64 [ %35, %32 ], [ %0, %30 ]
  %39 = phi i32* [ %36, %32 ], [ %26, %30 ]
  %40 = phi <8 x i16>* [ %14, %32 ], [ %13, %30 ]
  %41 = icmp ugt i64 %38, 1
  br i1 %41, label %42, label %49

42:                                               ; preds = %37
  %43 = bitcast i32* %39 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %44, i32 0
  %46 = bitcast <8 x i16>* %40 to <2 x i64>*
  store <2 x i64> %45, <2 x i64>* %46, align 16
  %47 = add i64 %38, -2
  %48 = getelementptr inbounds i32, i32* %39, i64 2
  br label %49

49:                                               ; preds = %42, %37
  %50 = phi i64 [ %47, %42 ], [ %38, %37 ]
  %51 = phi i32* [ %48, %42 ], [ %39, %37 ]
  %52 = phi i1 [ true, %42 ], [ false, %37 ]
  %53 = bitcast i32* %51 to i16*
  %54 = icmp eq i64 %50, 0
  br i1 %54, label %70, label %55

55:                                               ; preds = %49
  %56 = load i16, i16* %53, align 2
  %57 = select i1 %52, i32 4, i32 0
  %58 = load <8 x i16>, <8 x i16>* %40, align 16
  %59 = insertelement <8 x i16> %58, i16 %56, i32 %57
  store <8 x i16> %59, <8 x i16>* %40, align 16
  %60 = getelementptr inbounds i16, i16* %53, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = select i1 %52, i32 5, i32 1
  %63 = insertelement <8 x i16> %59, i16 %61, i32 %62
  store <8 x i16> %63, <8 x i16>* %40, align 16
  br label %70

64:                                               ; preds = %12
  %65 = bitcast i32* %26 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 1
  store <8 x i16> %66, <8 x i16>* %13, align 16
  %67 = getelementptr inbounds i32, i32* %26, i64 4
  %68 = bitcast i32* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 1
  store <8 x i16> %69, <8 x i16>* %14, align 16
  br label %70

70:                                               ; preds = %49, %55, %64
  %71 = bitcast <8 x i16>* %13 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 16
  %73 = shl <4 x i32> %72, <i32 16, i32 16, i32 16, i32 16>
  %74 = ashr exact <4 x i32> %73, <i32 16, i32 16, i32 16, i32 16>
  %75 = bitcast <8 x i16>* %14 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 16
  %77 = shl <4 x i32> %76, <i32 16, i32 16, i32 16, i32 16>
  %78 = ashr exact <4 x i32> %77, <i32 16, i32 16, i32 16, i32 16>
  %79 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %74, <4 x i32> %78) #13
  %80 = ashr <4 x i32> %72, <i32 16, i32 16, i32 16, i32 16>
  %81 = ashr <4 x i32> %76, <i32 16, i32 16, i32 16, i32 16>
  %82 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %80, <4 x i32> %81) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27)
  %83 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %79) #13
  %84 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %82) #13
  %85 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %17) #10, !srcloc !98
  %86 = extractvalue { i8*, i8** } %85, 0
  %87 = extractvalue { i8*, i8** } %85, 1
  %88 = bitcast i8* %86 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %88(i64 %0, i8** %87, i64 %2, i64 %3, <8 x float> %83, <8 x float> %84, <8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL14load_rgf16_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <8 x i16>, align 16
  %15 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %16 = extractvalue { i8*, i8** } %15, 0
  %17 = extractvalue { i8*, i8** } %15, 1
  %18 = bitcast i8* %16 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = getelementptr inbounds i8, i8* %16, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %23, %3
  %25 = getelementptr inbounds i32, i32* %19, i64 %24
  %26 = getelementptr inbounds i32, i32* %25, i64 %2
  %27 = bitcast <8 x i16>* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27)
  store <8 x i16> <i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846>, <8 x i16>* %13, align 16
  %28 = bitcast <8 x i16>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28)
  store <8 x i16> <i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846>, <8 x i16>* %14, align 16
  %29 = icmp eq i64 %0, 0
  br i1 %29, label %64, label %30, !prof !100

30:                                               ; preds = %12
  store <8 x i16> zeroinitializer, <8 x i16>* %14, align 16
  store <8 x i16> zeroinitializer, <8 x i16>* %13, align 16
  %31 = icmp ugt i64 %0, 3
  br i1 %31, label %32, label %37

32:                                               ; preds = %30
  %33 = bitcast i32* %26 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 1
  store <8 x i16> %34, <8 x i16>* %13, align 16
  %35 = add i64 %0, -4
  %36 = getelementptr inbounds i32, i32* %26, i64 4
  br label %37

37:                                               ; preds = %32, %30
  %38 = phi i64 [ %35, %32 ], [ %0, %30 ]
  %39 = phi i32* [ %36, %32 ], [ %26, %30 ]
  %40 = phi <8 x i16>* [ %14, %32 ], [ %13, %30 ]
  %41 = icmp ugt i64 %38, 1
  br i1 %41, label %42, label %49

42:                                               ; preds = %37
  %43 = bitcast i32* %39 to i64*
  %44 = load i64, i64* %43, align 1
  %45 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %44, i32 0
  %46 = bitcast <8 x i16>* %40 to <2 x i64>*
  store <2 x i64> %45, <2 x i64>* %46, align 16
  %47 = add i64 %38, -2
  %48 = getelementptr inbounds i32, i32* %39, i64 2
  br label %49

49:                                               ; preds = %42, %37
  %50 = phi i64 [ %47, %42 ], [ %38, %37 ]
  %51 = phi i32* [ %48, %42 ], [ %39, %37 ]
  %52 = phi i1 [ true, %42 ], [ false, %37 ]
  %53 = bitcast i32* %51 to i16*
  %54 = icmp eq i64 %50, 0
  br i1 %54, label %70, label %55

55:                                               ; preds = %49
  %56 = load i16, i16* %53, align 2
  %57 = select i1 %52, i32 4, i32 0
  %58 = load <8 x i16>, <8 x i16>* %40, align 16
  %59 = insertelement <8 x i16> %58, i16 %56, i32 %57
  store <8 x i16> %59, <8 x i16>* %40, align 16
  %60 = getelementptr inbounds i16, i16* %53, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = select i1 %52, i32 5, i32 1
  %63 = insertelement <8 x i16> %59, i16 %61, i32 %62
  store <8 x i16> %63, <8 x i16>* %40, align 16
  br label %70

64:                                               ; preds = %12
  %65 = bitcast i32* %26 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 1
  store <8 x i16> %66, <8 x i16>* %13, align 16
  %67 = getelementptr inbounds i32, i32* %26, i64 4
  %68 = bitcast i32* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 1
  store <8 x i16> %69, <8 x i16>* %14, align 16
  br label %70

70:                                               ; preds = %49, %55, %64
  %71 = bitcast <8 x i16>* %13 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 16
  %73 = shl <4 x i32> %72, <i32 16, i32 16, i32 16, i32 16>
  %74 = ashr exact <4 x i32> %73, <i32 16, i32 16, i32 16, i32 16>
  %75 = bitcast <8 x i16>* %14 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 16
  %77 = shl <4 x i32> %76, <i32 16, i32 16, i32 16, i32 16>
  %78 = ashr exact <4 x i32> %77, <i32 16, i32 16, i32 16, i32 16>
  %79 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %74, <4 x i32> %78) #13
  %80 = ashr <4 x i32> %72, <i32 16, i32 16, i32 16, i32 16>
  %81 = ashr <4 x i32> %76, <i32 16, i32 16, i32 16, i32 16>
  %82 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %80, <4 x i32> %81) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27)
  %83 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %79) #13
  %84 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %82) #13
  %85 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %17) #10, !srcloc !98
  %86 = extractvalue { i8*, i8** } %85, 0
  %87 = extractvalue { i8*, i8** } %85, 1
  %88 = bitcast i8* %86 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %88(i64 %0, i8** %87, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %83, <8 x float> %84, <8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11store_rgf16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = alloca <2 x i64>, align 16
  %14 = alloca <2 x i64>, align 16
  %15 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %16 = extractvalue { i8*, i8** } %15, 0
  %17 = extractvalue { i8*, i8** } %15, 1
  %18 = bitcast i8* %16 to i32**
  %19 = load i32*, i32** %18, align 8
  %20 = getelementptr inbounds i8, i8* %16, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %23, %3
  %25 = getelementptr inbounds i32, i32* %19, i64 %24
  %26 = getelementptr inbounds i32, i32* %25, i64 %2
  %27 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %4, i32 4) #13
  %28 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %5, i32 4) #13
  %29 = bitcast <2 x i64>* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29)
  %30 = shufflevector <8 x i16> %27, <8 x i16> %28, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %31 = bitcast <2 x i64>* %13 to <8 x i16>*
  store <8 x i16> %30, <8 x i16>* %31, align 16
  %32 = bitcast <2 x i64>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32)
  %33 = shufflevector <8 x i16> %27, <8 x i16> %28, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %34 = bitcast <2 x i64>* %14 to <8 x i16>*
  store <8 x i16> %33, <8 x i16>* %34, align 16
  %35 = icmp eq i64 %0, 0
  br i1 %35, label %65, label %36, !prof !100

36:                                               ; preds = %12
  %37 = icmp ugt i64 %0, 3
  br i1 %37, label %38, label %42

38:                                               ; preds = %36
  %39 = bitcast i32* %26 to <8 x i16>*
  store <8 x i16> %30, <8 x i16>* %39, align 1
  %40 = add i64 %0, -4
  %41 = getelementptr inbounds i32, i32* %26, i64 4
  br label %42

42:                                               ; preds = %38, %36
  %43 = phi i64 [ %40, %38 ], [ %0, %36 ]
  %44 = phi i32* [ %41, %38 ], [ %26, %36 ]
  %45 = phi <2 x i64>* [ %14, %38 ], [ %13, %36 ]
  %46 = icmp ugt i64 %43, 1
  br i1 %46, label %47, label %53

47:                                               ; preds = %42
  %48 = load <2 x i64>, <2 x i64>* %45, align 16
  %49 = extractelement <2 x i64> %48, i32 0
  %50 = bitcast i32* %44 to i64*
  store i64 %49, i64* %50, align 1
  %51 = getelementptr inbounds i32, i32* %44, i64 2
  %52 = add i64 %43, -2
  br label %53

53:                                               ; preds = %47, %42
  %54 = phi i64 [ %52, %47 ], [ %43, %42 ]
  %55 = phi i32* [ %51, %47 ], [ %44, %42 ]
  %56 = phi i1 [ true, %47 ], [ false, %42 ]
  %57 = icmp eq i64 %54, 0
  br i1 %57, label %69, label %58

58:                                               ; preds = %53
  %59 = bitcast <2 x i64>* %45 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 16
  br i1 %56, label %61, label %63

61:                                               ; preds = %58
  %62 = extractelement <4 x i32> %60, i64 2
  store i32 %62, i32* %55, align 4
  br label %69

63:                                               ; preds = %58
  %64 = extractelement <4 x i32> %60, i32 0
  store i32 %64, i32* %55, align 4
  br label %69

65:                                               ; preds = %12
  %66 = bitcast i32* %26 to <8 x i16>*
  store <8 x i16> %30, <8 x i16>* %66, align 1
  %67 = getelementptr inbounds i32, i32* %26, i64 4
  %68 = bitcast i32* %67 to <8 x i16>*
  store <8 x i16> %33, <8 x i16>* %68, align 1
  br label %69

69:                                               ; preds = %53, %61, %63, %65
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29)
  %70 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %17) #10, !srcloc !98
  %71 = extractvalue { i8*, i8** } %70, 0
  %72 = extractvalue { i8*, i8** } %70, 1
  %73 = bitcast i8* %71 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %73(i64 %0, i8** %72, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL12gather_rgf16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = bitcast <8 x float> %20 to <8 x i32>
  %22 = add <8 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %25 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> %23) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %35 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %34, <8 x float> %33) #13
  %36 = bitcast i8* %14 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = fptosi <8 x float> %35 to <8 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <8 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = mul <8 x i32> %43, %38
  %45 = fptosi <8 x float> %25 to <8 x i32>
  %46 = add <8 x i32> %44, %45
  %47 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %37, <8 x i32> %46, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %48 = shufflevector <8 x i32> %47, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %49 = shufflevector <8 x i32> %47, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %50 = shl <4 x i32> %48, <i32 16, i32 16, i32 16, i32 16>
  %51 = ashr exact <4 x i32> %50, <i32 16, i32 16, i32 16, i32 16>
  %52 = shl <4 x i32> %49, <i32 16, i32 16, i32 16, i32 16>
  %53 = ashr exact <4 x i32> %52, <i32 16, i32 16, i32 16, i32 16>
  %54 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %51, <4 x i32> %53) #13
  %55 = ashr <4 x i32> %48, <i32 16, i32 16, i32 16, i32 16>
  %56 = ashr <4 x i32> %49, <i32 16, i32 16, i32 16, i32 16>
  %57 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %55, <4 x i32> %56) #13
  %58 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %54) #13
  %59 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %57) #13
  %60 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %61 = extractvalue { i8*, i8** } %60, 0
  %62 = extractvalue { i8*, i8** } %60, 1
  %63 = bitcast i8* %61 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %63(i64 %0, i8** %62, i64 %2, i64 %3, <8 x float> %58, <8 x float> %59, <8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8load_f32EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = shl i64 %2, 2
  %17 = shl i64 %3, 2
  %18 = bitcast i8* %14 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %17, %23
  %25 = getelementptr inbounds float, float* %19, i64 %24
  %26 = getelementptr inbounds float, float* %25, i64 %16
  switch i64 %0, label %96 [
    i64 0, label %27
    i64 7, label %33
    i64 6, label %40
    i64 5, label %48
    i64 4, label %57
    i64 3, label %67
    i64 2, label %77
    i64 1, label %87
  ]

27:                                               ; preds = %12
  %28 = getelementptr inbounds float, float* %26, i64 28
  %29 = bitcast float* %28 to <4 x float>*
  %30 = load <4 x float>, <4 x float>* %29, align 1
  %31 = shufflevector <4 x float> %30, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = shufflevector <8 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float undef, float undef, float undef, float undef>, <8 x float> %31, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  br label %33

33:                                               ; preds = %27, %12
  %34 = phi <8 x float> [ zeroinitializer, %12 ], [ %32, %27 ]
  %35 = getelementptr inbounds float, float* %26, i64 24
  %36 = bitcast float* %35 to <4 x float>*
  %37 = load <4 x float>, <4 x float>* %36, align 1
  %38 = shufflevector <4 x float> %37, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %39 = shufflevector <8 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float undef, float undef, float undef, float undef>, <8 x float> %38, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  br label %40

40:                                               ; preds = %33, %12
  %41 = phi <8 x float> [ zeroinitializer, %12 ], [ %34, %33 ]
  %42 = phi <8 x float> [ zeroinitializer, %12 ], [ %39, %33 ]
  %43 = getelementptr inbounds float, float* %26, i64 20
  %44 = bitcast float* %43 to <4 x float>*
  %45 = load <4 x float>, <4 x float>* %44, align 1
  %46 = shufflevector <4 x float> %45, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = shufflevector <8 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float undef, float undef, float undef, float undef>, <8 x float> %46, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  br label %48

48:                                               ; preds = %40, %12
  %49 = phi <8 x float> [ zeroinitializer, %12 ], [ %41, %40 ]
  %50 = phi <8 x float> [ zeroinitializer, %12 ], [ %42, %40 ]
  %51 = phi <8 x float> [ zeroinitializer, %12 ], [ %47, %40 ]
  %52 = getelementptr inbounds float, float* %26, i64 16
  %53 = bitcast float* %52 to <4 x float>*
  %54 = load <4 x float>, <4 x float>* %53, align 1
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %56 = shufflevector <8 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float undef, float undef, float undef, float undef>, <8 x float> %55, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  br label %57

57:                                               ; preds = %48, %12
  %58 = phi <8 x float> [ zeroinitializer, %12 ], [ %49, %48 ]
  %59 = phi <8 x float> [ zeroinitializer, %12 ], [ %50, %48 ]
  %60 = phi <8 x float> [ zeroinitializer, %12 ], [ %51, %48 ]
  %61 = phi <8 x float> [ zeroinitializer, %12 ], [ %56, %48 ]
  %62 = getelementptr inbounds float, float* %26, i64 12
  %63 = bitcast float* %62 to <4 x float>*
  %64 = load <4 x float>, <4 x float>* %63, align 1
  %65 = shufflevector <4 x float> %64, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %66 = shufflevector <8 x float> %65, <8 x float> %58, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %67

67:                                               ; preds = %57, %12
  %68 = phi <8 x float> [ zeroinitializer, %12 ], [ %66, %57 ]
  %69 = phi <8 x float> [ zeroinitializer, %12 ], [ %59, %57 ]
  %70 = phi <8 x float> [ zeroinitializer, %12 ], [ %60, %57 ]
  %71 = phi <8 x float> [ zeroinitializer, %12 ], [ %61, %57 ]
  %72 = getelementptr inbounds float, float* %26, i64 8
  %73 = bitcast float* %72 to <4 x float>*
  %74 = load <4 x float>, <4 x float>* %73, align 1
  %75 = shufflevector <4 x float> %74, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %76 = shufflevector <8 x float> %75, <8 x float> %69, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %77

77:                                               ; preds = %67, %12
  %78 = phi <8 x float> [ zeroinitializer, %12 ], [ %68, %67 ]
  %79 = phi <8 x float> [ zeroinitializer, %12 ], [ %76, %67 ]
  %80 = phi <8 x float> [ zeroinitializer, %12 ], [ %70, %67 ]
  %81 = phi <8 x float> [ zeroinitializer, %12 ], [ %71, %67 ]
  %82 = getelementptr inbounds float, float* %26, i64 4
  %83 = bitcast float* %82 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 1
  %85 = shufflevector <4 x float> %84, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = shufflevector <8 x float> %85, <8 x float> %80, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %87

87:                                               ; preds = %77, %12
  %88 = phi <8 x float> [ zeroinitializer, %12 ], [ %78, %77 ]
  %89 = phi <8 x float> [ zeroinitializer, %12 ], [ %79, %77 ]
  %90 = phi <8 x float> [ zeroinitializer, %12 ], [ %86, %77 ]
  %91 = phi <8 x float> [ zeroinitializer, %12 ], [ %81, %77 ]
  %92 = bitcast float* %26 to <4 x float>*
  %93 = load <4 x float>, <4 x float>* %92, align 1
  %94 = shufflevector <4 x float> %93, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = shufflevector <8 x float> %94, <8 x float> %91, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %96

96:                                               ; preds = %12, %87
  %97 = phi <8 x float> [ zeroinitializer, %12 ], [ %88, %87 ]
  %98 = phi <8 x float> [ zeroinitializer, %12 ], [ %89, %87 ]
  %99 = phi <8 x float> [ zeroinitializer, %12 ], [ %90, %87 ]
  %100 = phi <8 x float> [ zeroinitializer, %12 ], [ %95, %87 ]
  %101 = shufflevector <8 x float> %100, <8 x float> %99, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %102 = shufflevector <8 x float> %100, <8 x float> %99, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %103 = shufflevector <8 x float> %98, <8 x float> %97, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %104 = shufflevector <8 x float> %98, <8 x float> %97, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %105 = bitcast <8 x float> %101 to <4 x double>
  %106 = bitcast <8 x float> %103 to <4 x double>
  %107 = shufflevector <4 x double> %105, <4 x double> %106, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %108 = bitcast <4 x double> %107 to <8 x float>
  %109 = shufflevector <4 x double> %105, <4 x double> %106, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %110 = bitcast <4 x double> %109 to <8 x float>
  %111 = bitcast <8 x float> %102 to <4 x double>
  %112 = bitcast <8 x float> %104 to <4 x double>
  %113 = shufflevector <4 x double> %111, <4 x double> %112, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %114 = bitcast <4 x double> %113 to <8 x float>
  %115 = shufflevector <4 x double> %111, <4 x double> %112, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %116 = bitcast <4 x double> %115 to <8 x float>
  %117 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %118 = extractvalue { i8*, i8** } %117, 0
  %119 = extractvalue { i8*, i8** } %117, 1
  %120 = bitcast i8* %118 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %120(i64 %0, i8** %119, i64 %2, i64 %3, <8 x float> %108, <8 x float> %110, <8 x float> %114, <8 x float> %116, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL12load_f32_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = shl i64 %2, 2
  %17 = shl i64 %3, 2
  %18 = bitcast i8* %14 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %17, %23
  %25 = getelementptr inbounds float, float* %19, i64 %24
  %26 = getelementptr inbounds float, float* %25, i64 %16
  switch i64 %0, label %96 [
    i64 0, label %27
    i64 7, label %33
    i64 6, label %40
    i64 5, label %48
    i64 4, label %57
    i64 3, label %67
    i64 2, label %77
    i64 1, label %87
  ]

27:                                               ; preds = %12
  %28 = getelementptr inbounds float, float* %26, i64 28
  %29 = bitcast float* %28 to <4 x float>*
  %30 = load <4 x float>, <4 x float>* %29, align 1
  %31 = shufflevector <4 x float> %30, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %32 = shufflevector <8 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float undef, float undef, float undef, float undef>, <8 x float> %31, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  br label %33

33:                                               ; preds = %27, %12
  %34 = phi <8 x float> [ zeroinitializer, %12 ], [ %32, %27 ]
  %35 = getelementptr inbounds float, float* %26, i64 24
  %36 = bitcast float* %35 to <4 x float>*
  %37 = load <4 x float>, <4 x float>* %36, align 1
  %38 = shufflevector <4 x float> %37, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %39 = shufflevector <8 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float undef, float undef, float undef, float undef>, <8 x float> %38, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  br label %40

40:                                               ; preds = %33, %12
  %41 = phi <8 x float> [ zeroinitializer, %12 ], [ %34, %33 ]
  %42 = phi <8 x float> [ zeroinitializer, %12 ], [ %39, %33 ]
  %43 = getelementptr inbounds float, float* %26, i64 20
  %44 = bitcast float* %43 to <4 x float>*
  %45 = load <4 x float>, <4 x float>* %44, align 1
  %46 = shufflevector <4 x float> %45, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %47 = shufflevector <8 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float undef, float undef, float undef, float undef>, <8 x float> %46, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  br label %48

48:                                               ; preds = %40, %12
  %49 = phi <8 x float> [ zeroinitializer, %12 ], [ %41, %40 ]
  %50 = phi <8 x float> [ zeroinitializer, %12 ], [ %42, %40 ]
  %51 = phi <8 x float> [ zeroinitializer, %12 ], [ %47, %40 ]
  %52 = getelementptr inbounds float, float* %26, i64 16
  %53 = bitcast float* %52 to <4 x float>*
  %54 = load <4 x float>, <4 x float>* %53, align 1
  %55 = shufflevector <4 x float> %54, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %56 = shufflevector <8 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float undef, float undef, float undef, float undef>, <8 x float> %55, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  br label %57

57:                                               ; preds = %48, %12
  %58 = phi <8 x float> [ zeroinitializer, %12 ], [ %49, %48 ]
  %59 = phi <8 x float> [ zeroinitializer, %12 ], [ %50, %48 ]
  %60 = phi <8 x float> [ zeroinitializer, %12 ], [ %51, %48 ]
  %61 = phi <8 x float> [ zeroinitializer, %12 ], [ %56, %48 ]
  %62 = getelementptr inbounds float, float* %26, i64 12
  %63 = bitcast float* %62 to <4 x float>*
  %64 = load <4 x float>, <4 x float>* %63, align 1
  %65 = shufflevector <4 x float> %64, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %66 = shufflevector <8 x float> %65, <8 x float> %58, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %67

67:                                               ; preds = %57, %12
  %68 = phi <8 x float> [ zeroinitializer, %12 ], [ %66, %57 ]
  %69 = phi <8 x float> [ zeroinitializer, %12 ], [ %59, %57 ]
  %70 = phi <8 x float> [ zeroinitializer, %12 ], [ %60, %57 ]
  %71 = phi <8 x float> [ zeroinitializer, %12 ], [ %61, %57 ]
  %72 = getelementptr inbounds float, float* %26, i64 8
  %73 = bitcast float* %72 to <4 x float>*
  %74 = load <4 x float>, <4 x float>* %73, align 1
  %75 = shufflevector <4 x float> %74, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %76 = shufflevector <8 x float> %75, <8 x float> %69, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %77

77:                                               ; preds = %67, %12
  %78 = phi <8 x float> [ zeroinitializer, %12 ], [ %68, %67 ]
  %79 = phi <8 x float> [ zeroinitializer, %12 ], [ %76, %67 ]
  %80 = phi <8 x float> [ zeroinitializer, %12 ], [ %70, %67 ]
  %81 = phi <8 x float> [ zeroinitializer, %12 ], [ %71, %67 ]
  %82 = getelementptr inbounds float, float* %26, i64 4
  %83 = bitcast float* %82 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 1
  %85 = shufflevector <4 x float> %84, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %86 = shufflevector <8 x float> %85, <8 x float> %80, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %87

87:                                               ; preds = %77, %12
  %88 = phi <8 x float> [ zeroinitializer, %12 ], [ %78, %77 ]
  %89 = phi <8 x float> [ zeroinitializer, %12 ], [ %79, %77 ]
  %90 = phi <8 x float> [ zeroinitializer, %12 ], [ %86, %77 ]
  %91 = phi <8 x float> [ zeroinitializer, %12 ], [ %81, %77 ]
  %92 = bitcast float* %26 to <4 x float>*
  %93 = load <4 x float>, <4 x float>* %92, align 1
  %94 = shufflevector <4 x float> %93, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %95 = shufflevector <8 x float> %94, <8 x float> %91, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %96

96:                                               ; preds = %12, %87
  %97 = phi <8 x float> [ zeroinitializer, %12 ], [ %88, %87 ]
  %98 = phi <8 x float> [ zeroinitializer, %12 ], [ %89, %87 ]
  %99 = phi <8 x float> [ zeroinitializer, %12 ], [ %90, %87 ]
  %100 = phi <8 x float> [ zeroinitializer, %12 ], [ %95, %87 ]
  %101 = shufflevector <8 x float> %100, <8 x float> %99, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %102 = shufflevector <8 x float> %100, <8 x float> %99, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %103 = shufflevector <8 x float> %98, <8 x float> %97, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %104 = shufflevector <8 x float> %98, <8 x float> %97, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %105 = bitcast <8 x float> %101 to <4 x double>
  %106 = bitcast <8 x float> %103 to <4 x double>
  %107 = shufflevector <4 x double> %105, <4 x double> %106, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %108 = bitcast <4 x double> %107 to <8 x float>
  %109 = shufflevector <4 x double> %105, <4 x double> %106, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %110 = bitcast <4 x double> %109 to <8 x float>
  %111 = bitcast <8 x float> %102 to <4 x double>
  %112 = bitcast <8 x float> %104 to <4 x double>
  %113 = shufflevector <4 x double> %111, <4 x double> %112, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %114 = bitcast <4 x double> %113 to <8 x float>
  %115 = shufflevector <4 x double> %111, <4 x double> %112, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %116 = bitcast <4 x double> %115 to <8 x float>
  %117 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %118 = extractvalue { i8*, i8** } %117, 0
  %119 = extractvalue { i8*, i8** } %117, 1
  %120 = bitcast i8* %118 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %120(i64 %0, i8** %119, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %108, <8 x float> %110, <8 x float> %114, <8 x float> %116) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9store_f32EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = shl i64 %2, 2
  %17 = shl i64 %3, 2
  %18 = bitcast i8* %14 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %17, %23
  %25 = getelementptr inbounds float, float* %19, i64 %24
  %26 = getelementptr inbounds float, float* %25, i64 %16
  %27 = shufflevector <8 x float> %4, <8 x float> %5, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %28 = shufflevector <8 x float> %4, <8 x float> %5, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %29 = shufflevector <8 x float> %6, <8 x float> %7, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %30 = shufflevector <8 x float> %6, <8 x float> %7, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %31 = bitcast <8 x float> %27 to <4 x double>
  %32 = bitcast <8 x float> %29 to <4 x double>
  %33 = shufflevector <4 x double> %31, <4 x double> %32, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %34 = bitcast <4 x double> %33 to <8 x float>
  %35 = shufflevector <4 x double> %31, <4 x double> %32, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %36 = bitcast <4 x double> %35 to <8 x float>
  %37 = bitcast <8 x float> %28 to <4 x double>
  %38 = bitcast <8 x float> %30 to <4 x double>
  %39 = shufflevector <4 x double> %37, <4 x double> %38, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %40 = bitcast <4 x double> %39 to <8 x float>
  %41 = shufflevector <4 x double> %37, <4 x double> %38, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %42 = bitcast <4 x double> %41 to <8 x float>
  %43 = icmp eq i64 %0, 0
  br i1 %43, label %77, label %44, !prof !100

44:                                               ; preds = %12
  %45 = shufflevector <8 x float> %34, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %46 = bitcast float* %26 to <4 x float>*
  store <4 x float> %45, <4 x float>* %46, align 1
  %47 = icmp eq i64 %0, 1
  br i1 %47, label %89, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds float, float* %26, i64 4
  %50 = shufflevector <8 x float> %36, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %51 = bitcast float* %49 to <4 x float>*
  store <4 x float> %50, <4 x float>* %51, align 1
  %52 = icmp ugt i64 %0, 2
  br i1 %52, label %53, label %89

53:                                               ; preds = %48
  %54 = getelementptr inbounds float, float* %26, i64 8
  %55 = shufflevector <8 x float> %40, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %56 = bitcast float* %54 to <4 x float>*
  store <4 x float> %55, <4 x float>* %56, align 1
  %57 = icmp eq i64 %0, 3
  br i1 %57, label %89, label %58

58:                                               ; preds = %53
  %59 = getelementptr inbounds float, float* %26, i64 12
  %60 = shufflevector <8 x float> %42, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %61 = bitcast float* %59 to <4 x float>*
  store <4 x float> %60, <4 x float>* %61, align 1
  %62 = icmp ugt i64 %0, 4
  br i1 %62, label %63, label %89

63:                                               ; preds = %58
  %64 = getelementptr inbounds float, float* %26, i64 16
  %65 = shufflevector <8 x float> %34, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %66 = bitcast float* %64 to <4 x float>*
  store <4 x float> %65, <4 x float>* %66, align 1
  %67 = icmp eq i64 %0, 5
  br i1 %67, label %89, label %68

68:                                               ; preds = %63
  %69 = getelementptr inbounds float, float* %26, i64 20
  %70 = shufflevector <8 x float> %36, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %71 = bitcast float* %69 to <4 x float>*
  store <4 x float> %70, <4 x float>* %71, align 1
  %72 = icmp ugt i64 %0, 6
  br i1 %72, label %73, label %89

73:                                               ; preds = %68
  %74 = getelementptr inbounds float, float* %26, i64 24
  %75 = shufflevector <8 x float> %40, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %76 = bitcast float* %74 to <4 x float>*
  store <4 x float> %75, <4 x float>* %76, align 1
  br label %89

77:                                               ; preds = %12
  %78 = shufflevector <8 x float> %34, <8 x float> %36, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %79 = shufflevector <8 x float> %40, <8 x float> %42, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %80 = shufflevector <8 x float> %34, <8 x float> %36, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %81 = shufflevector <8 x float> %40, <8 x float> %42, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %82 = bitcast float* %26 to <8 x float>*
  store <8 x float> %78, <8 x float>* %82, align 1
  %83 = getelementptr inbounds float, float* %26, i64 8
  %84 = bitcast float* %83 to <8 x float>*
  store <8 x float> %79, <8 x float>* %84, align 1
  %85 = getelementptr inbounds float, float* %26, i64 16
  %86 = bitcast float* %85 to <8 x float>*
  store <8 x float> %80, <8 x float>* %86, align 1
  %87 = getelementptr inbounds float, float* %26, i64 24
  %88 = bitcast float* %87 to <8 x float>*
  store <8 x float> %81, <8 x float>* %88, align 1
  br label %89

89:                                               ; preds = %44, %48, %53, %58, %63, %68, %73, %77
  %90 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %91 = extractvalue { i8*, i8** } %90, 0
  %92 = extractvalue { i8*, i8** } %90, 1
  %93 = bitcast i8* %91 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %93(i64 %0, i8** %92, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10gather_f32EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = bitcast <8 x float> %20 to <8 x i32>
  %22 = add <8 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %25 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> %23) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %35 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %34, <8 x float> %33) #13
  %36 = bitcast i8* %14 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = fptosi <8 x float> %35 to <8 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <8 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = mul <8 x i32> %43, %38
  %45 = fptosi <8 x float> %25 to <8 x i32>
  %46 = add <8 x i32> %44, %45
  %47 = shl <8 x i32> %46, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %48 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %37, <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %49 = or <8 x i32> %47, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %50 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %37, <8 x i32> %49, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %51 = or <8 x i32> %47, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %52 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %37, <8 x i32> %51, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %53 = or <8 x i32> %47, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %54 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %37, <8 x i32> %53, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %55 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %56 = extractvalue { i8*, i8** } %55, 0
  %57 = extractvalue { i8*, i8** } %55, 1
  %58 = bitcast i8* %56 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %58(i64 %0, i8** %57, i64 %2, i64 %3, <8 x float> %48, <8 x float> %50, <8 x float> %52, <8 x float> %54, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10load_rgf32EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = alloca <8 x float>, align 32
  %14 = alloca <8 x float>, align 32
  %15 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %16 = extractvalue { i8*, i8** } %15, 0
  %17 = extractvalue { i8*, i8** } %15, 1
  %18 = shl i64 %2, 1
  %19 = shl i64 %3, 1
  %20 = bitcast i8* %16 to float**
  %21 = load float*, float** %20, align 8
  %22 = getelementptr inbounds i8, i8* %16, i64 8
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = sext i32 %24 to i64
  %26 = mul i64 %19, %25
  %27 = getelementptr inbounds float, float* %21, i64 %26
  %28 = getelementptr inbounds float, float* %27, i64 %18
  %29 = bitcast <8 x float>* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29)
  store <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <8 x float>* %13, align 32
  %30 = bitcast <8 x float>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %30)
  store <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, <8 x float>* %14, align 32
  %31 = icmp eq i64 %0, 0
  br i1 %31, label %65, label %32, !prof !100

32:                                               ; preds = %12
  store <8 x float> zeroinitializer, <8 x float>* %14, align 32
  store <8 x float> zeroinitializer, <8 x float>* %13, align 32
  %33 = icmp ugt i64 %0, 3
  br i1 %33, label %34, label %39

34:                                               ; preds = %32
  %35 = bitcast float* %28 to <8 x float>*
  %36 = load <8 x float>, <8 x float>* %35, align 1
  store <8 x float> %36, <8 x float>* %13, align 32
  %37 = getelementptr inbounds float, float* %28, i64 8
  %38 = add i64 %0, -4
  br label %39

39:                                               ; preds = %34, %32
  %40 = phi <8 x float>* [ %14, %34 ], [ %13, %32 ]
  %41 = phi i64 [ %38, %34 ], [ %0, %32 ]
  %42 = phi float* [ %37, %34 ], [ %28, %32 ]
  %43 = icmp ugt i64 %41, 1
  br i1 %43, label %44, label %50

44:                                               ; preds = %39
  %45 = bitcast float* %42 to <4 x float>*
  %46 = load <4 x float>, <4 x float>* %45, align 1
  %47 = shufflevector <4 x float> %46, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  store <8 x float> %47, <8 x float>* %40, align 32
  %48 = getelementptr inbounds float, float* %42, i64 4
  %49 = add i64 %41, -2
  br label %50

50:                                               ; preds = %44, %39
  %51 = phi i1 [ true, %44 ], [ false, %39 ]
  %52 = phi i64 [ %49, %44 ], [ %41, %39 ]
  %53 = phi float* [ %48, %44 ], [ %42, %39 ]
  %54 = icmp eq i64 %52, 0
  br i1 %54, label %71, label %55

55:                                               ; preds = %50
  %56 = load <8 x float>, <8 x float>* %40, align 32
  %57 = bitcast float* %53 to i64*
  %58 = load i64, i64* %57, align 1
  %59 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %58, i32 0
  %60 = bitcast <2 x i64> %59 to <4 x float>
  %61 = shufflevector <4 x float> %60, <4 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %62 = shufflevector <8 x float> %56, <8 x float> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %63 = shufflevector <8 x float> %61, <8 x float> %56, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %64 = select i1 %51, <8 x float> %62, <8 x float> %63
  store <8 x float> %64, <8 x float>* %40, align 32
  br label %71

65:                                               ; preds = %12
  %66 = bitcast float* %28 to <8 x float>*
  %67 = load <8 x float>, <8 x float>* %66, align 1
  store <8 x float> %67, <8 x float>* %13, align 32
  %68 = getelementptr inbounds float, float* %28, i64 8
  %69 = bitcast float* %68 to <8 x float>*
  %70 = load <8 x float>, <8 x float>* %69, align 1
  store <8 x float> %70, <8 x float>* %14, align 32
  br label %71

71:                                               ; preds = %50, %55, %65
  %72 = bitcast <8 x float>* %13 to <4 x double>*
  %73 = load <4 x double>, <4 x double>* %72, align 32
  %74 = bitcast <8 x float>* %14 to <4 x double>*
  %75 = load <4 x double>, <4 x double>* %74, align 32
  %76 = shufflevector <4 x double> %73, <4 x double> %75, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %77 = bitcast <4 x double> %76 to <8 x float>
  %78 = shufflevector <4 x double> %73, <4 x double> %75, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %79 = bitcast <4 x double> %78 to <8 x float>
  %80 = shufflevector <8 x float> %77, <8 x float> %79, <8 x i32> <i32 0, i32 2, i32 8, i32 10, i32 4, i32 6, i32 12, i32 14>
  %81 = shufflevector <8 x float> %77, <8 x float> %79, <8 x i32> <i32 1, i32 3, i32 9, i32 11, i32 5, i32 7, i32 13, i32 15>
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29)
  %82 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %17) #10, !srcloc !98
  %83 = extractvalue { i8*, i8** } %82, 0
  %84 = extractvalue { i8*, i8** } %82, 1
  %85 = bitcast i8* %83 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %85(i64 %0, i8** %84, i64 %2, i64 %3, <8 x float> %80, <8 x float> %81, <8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11store_rgf32EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = alloca <8 x float>, align 32
  %14 = alloca <8 x float>, align 32
  %15 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %16 = extractvalue { i8*, i8** } %15, 0
  %17 = extractvalue { i8*, i8** } %15, 1
  %18 = shl i64 %2, 1
  %19 = shl i64 %3, 1
  %20 = bitcast i8* %16 to float**
  %21 = load float*, float** %20, align 8
  %22 = getelementptr inbounds i8, i8* %16, i64 8
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = sext i32 %24 to i64
  %26 = mul i64 %19, %25
  %27 = getelementptr inbounds float, float* %21, i64 %26
  %28 = getelementptr inbounds float, float* %27, i64 %18
  %29 = shufflevector <8 x float> %4, <8 x float> %5, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %30 = shufflevector <8 x float> %4, <8 x float> %5, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %31 = bitcast <8 x float>* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31)
  %32 = bitcast <8 x float> %29 to <4 x double>
  %33 = bitcast <8 x float> %30 to <4 x double>
  %34 = shufflevector <4 x double> %32, <4 x double> %33, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %35 = bitcast <8 x float>* %13 to <4 x double>*
  store <4 x double> %34, <4 x double>* %35, align 32
  %36 = bitcast <8 x float>* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36)
  %37 = shufflevector <4 x double> %32, <4 x double> %33, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %38 = bitcast <8 x float>* %14 to <4 x double>*
  store <4 x double> %37, <4 x double>* %38, align 32
  %39 = icmp eq i64 %0, 0
  br i1 %39, label %69, label %40, !prof !100

40:                                               ; preds = %12
  %41 = icmp ugt i64 %0, 3
  br i1 %41, label %42, label %46

42:                                               ; preds = %40
  %43 = bitcast float* %28 to <4 x double>*
  store <4 x double> %34, <4 x double>* %43, align 1
  %44 = add i64 %0, -4
  %45 = getelementptr inbounds float, float* %28, i64 8
  br label %46

46:                                               ; preds = %42, %40
  %47 = phi i64 [ %44, %42 ], [ %0, %40 ]
  %48 = phi float* [ %45, %42 ], [ %28, %40 ]
  %49 = phi <8 x float>* [ %14, %42 ], [ %13, %40 ]
  %50 = icmp ugt i64 %47, 1
  br i1 %50, label %51, label %57

51:                                               ; preds = %46
  %52 = load <8 x float>, <8 x float>* %49, align 32
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %54 = bitcast float* %48 to <4 x float>*
  store <4 x float> %53, <4 x float>* %54, align 1
  %55 = getelementptr inbounds float, float* %48, i64 4
  %56 = add i64 %47, -2
  br label %57

57:                                               ; preds = %51, %46
  %58 = phi i64 [ %56, %51 ], [ %47, %46 ]
  %59 = phi float* [ %55, %51 ], [ %48, %46 ]
  %60 = phi i1 [ true, %51 ], [ false, %46 ]
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %73, label %62

62:                                               ; preds = %57
  %63 = load <8 x float>, <8 x float>* %49, align 32
  %64 = select i1 %60, i32 4, i32 0
  %65 = extractelement <8 x float> %63, i32 %64
  store float %65, float* %59, align 4
  %66 = select i1 %60, i32 5, i32 1
  %67 = extractelement <8 x float> %63, i32 %66
  %68 = getelementptr inbounds float, float* %59, i64 1
  store float %67, float* %68, align 4
  br label %73

69:                                               ; preds = %12
  %70 = bitcast float* %28 to <4 x double>*
  store <4 x double> %34, <4 x double>* %70, align 1
  %71 = getelementptr inbounds float, float* %28, i64 8
  %72 = bitcast float* %71 to <4 x double>*
  store <4 x double> %37, <4 x double>* %72, align 1
  br label %73

73:                                               ; preds = %57, %62, %69
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31)
  %74 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %17) #10, !srcloc !98
  %75 = extractvalue { i8*, i8** } %74, 0
  %76 = extractvalue { i8*, i8** } %74, 1
  %77 = bitcast i8* %75 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %77(i64 %0, i8** %76, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9load_8888EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i32, i32* %24, i64 6
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0>, i32 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i32> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i32, i32* %24, i64 5
  %33 = load i32, i32* %32, align 4
  %34 = insertelement <8 x i32> %31, i32 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i32> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i32, i32* %24, i64 4
  %38 = load i32, i32* %37, align 4
  %39 = insertelement <8 x i32> %36, i32 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i32> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i32* %24 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i32> %44, <8 x i32> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i32, i32* %24, i64 2
  %48 = load i32, i32* %47, align 4
  %49 = insertelement <8 x i32> <i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i32> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i32* %24 to <2 x i32>*
  %53 = load <2 x i32>, <2 x i32>* %52, align 4
  %54 = shufflevector <2 x i32> %53, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i32> %54, <8 x i32> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i32, i32* %24, align 4
  %58 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i32* %24 to <8 x i32>*
  %61 = load <8 x i32>, <8 x i32>* %60, align 4
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i32> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = and <8 x i32> %64, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %66 = sitofp <8 x i32> %65 to <8 x float>
  %67 = fmul <8 x float> %66, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %68 = lshr <8 x i32> %64, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %69 = and <8 x i32> %68, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %70 = sitofp <8 x i32> %69 to <8 x float>
  %71 = fmul <8 x float> %70, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %72 = lshr <8 x i32> %64, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %73 = and <8 x i32> %72, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %74 = sitofp <8 x i32> %73 to <8 x float>
  %75 = fmul <8 x float> %74, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %76 = lshr <8 x i32> %64, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %77 = sitofp <8 x i32> %76 to <8 x float>
  %78 = fmul <8 x float> %77, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %79 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %80 = extractvalue { i8*, i8** } %79, 0
  %81 = extractvalue { i8*, i8** } %79, 1
  %82 = bitcast i8* %80 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %82(i64 %0, i8** %81, i64 %2, i64 %3, <8 x float> %67, <8 x float> %71, <8 x float> %75, <8 x float> %78, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL13load_8888_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i32, i32* %24, i64 6
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0>, i32 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i32> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i32, i32* %24, i64 5
  %33 = load i32, i32* %32, align 4
  %34 = insertelement <8 x i32> %31, i32 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i32> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i32, i32* %24, i64 4
  %38 = load i32, i32* %37, align 4
  %39 = insertelement <8 x i32> %36, i32 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i32> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i32* %24 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i32> %44, <8 x i32> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i32, i32* %24, i64 2
  %48 = load i32, i32* %47, align 4
  %49 = insertelement <8 x i32> <i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i32> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i32* %24 to <2 x i32>*
  %53 = load <2 x i32>, <2 x i32>* %52, align 4
  %54 = shufflevector <2 x i32> %53, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i32> %54, <8 x i32> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i32, i32* %24, align 4
  %58 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i32* %24 to <8 x i32>*
  %61 = load <8 x i32>, <8 x i32>* %60, align 4
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i32> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = and <8 x i32> %64, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %66 = sitofp <8 x i32> %65 to <8 x float>
  %67 = fmul <8 x float> %66, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %68 = lshr <8 x i32> %64, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %69 = and <8 x i32> %68, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %70 = sitofp <8 x i32> %69 to <8 x float>
  %71 = fmul <8 x float> %70, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %72 = lshr <8 x i32> %64, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %73 = and <8 x i32> %72, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %74 = sitofp <8 x i32> %73 to <8 x float>
  %75 = fmul <8 x float> %74, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %76 = lshr <8 x i32> %64, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %77 = sitofp <8 x i32> %76 to <8 x float>
  %78 = fmul <8 x float> %77, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %79 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %80 = extractvalue { i8*, i8** } %79, 0
  %81 = extractvalue { i8*, i8** } %79, 1
  %82 = bitcast i8* %80 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %82(i64 %0, i8** %81, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %67, <8 x float> %71, <8 x float> %75, <8 x float> %78) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10store_8888EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %26 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %25, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %27 = fmul <8 x float> %26, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %28 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %27) #13
  %29 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %30 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %29, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %31 = fmul <8 x float> %30, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %32 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %31) #13
  %33 = shl <8 x i32> %32, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %34 = or <8 x i32> %33, %28
  %35 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %6) #13
  %36 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %35, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %37 = fmul <8 x float> %36, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %38 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %37) #13
  %39 = shl <8 x i32> %38, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %40 = or <8 x i32> %34, %39
  %41 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %7) #13
  %42 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %41, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %43 = fmul <8 x float> %42, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %44 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %43) #13
  %45 = shl <8 x i32> %44, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %46 = or <8 x i32> %40, %45
  %47 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %47) #13
  switch i64 %0, label %70 [
    i64 0, label %68
    i64 7, label %48
    i64 6, label %51
    i64 5, label %54
    i64 4, label %57
    i64 3, label %60
    i64 2, label %63
    i64 1, label %66
  ], !prof !99

48:                                               ; preds = %12
  %49 = extractelement <8 x i32> %46, i32 6
  %50 = getelementptr inbounds i32, i32* %24, i64 6
  store i32 %49, i32* %50, align 4
  br label %51

51:                                               ; preds = %48, %12
  %52 = extractelement <8 x i32> %46, i32 5
  %53 = getelementptr inbounds i32, i32* %24, i64 5
  store i32 %52, i32* %53, align 4
  br label %54

54:                                               ; preds = %51, %12
  %55 = extractelement <8 x i32> %46, i32 4
  %56 = getelementptr inbounds i32, i32* %24, i64 4
  store i32 %55, i32* %56, align 4
  br label %57

57:                                               ; preds = %54, %12
  %58 = bitcast i32* %24 to <4 x i32>*
  %59 = shufflevector <8 x i32> %46, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %59, <4 x i32>* %58, align 4
  br label %71

60:                                               ; preds = %12
  %61 = extractelement <8 x i32> %46, i32 2
  %62 = getelementptr inbounds i32, i32* %24, i64 2
  store i32 %61, i32* %62, align 4
  br label %63

63:                                               ; preds = %60, %12
  %64 = bitcast i32* %24 to <2 x i32>*
  %65 = shufflevector <8 x i32> %46, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i32> %65, <2 x i32>* %64, align 4
  br label %71

66:                                               ; preds = %12
  %67 = extractelement <8 x i32> %46, i32 0
  store i32 %67, i32* %24, align 4
  br label %71

68:                                               ; preds = %12
  %69 = bitcast i32* %24 to <8 x i32>*
  store <8 x i32> %46, <8 x i32>* %69, align 4
  br label %71

70:                                               ; preds = %12
  unreachable

71:                                               ; preds = %57, %63, %66, %68
  %72 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %73 = extractvalue { i8*, i8** } %72, 0
  %74 = extractvalue { i8*, i8** } %72, 1
  %75 = bitcast i8* %73 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %75(i64 %0, i8** %74, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11gather_8888EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = bitcast <8 x float> %20 to <8 x i32>
  %22 = add <8 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %25 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> %23) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %35 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %34, <8 x float> %33) #13
  %36 = bitcast i8* %14 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = fptosi <8 x float> %35 to <8 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <8 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = mul <8 x i32> %43, %38
  %45 = fptosi <8 x float> %25 to <8 x i32>
  %46 = add <8 x i32> %44, %45
  %47 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %37, <8 x i32> %46, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %48 = and <8 x i32> %47, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %49 = sitofp <8 x i32> %48 to <8 x float>
  %50 = fmul <8 x float> %49, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %51 = lshr <8 x i32> %47, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %52 = and <8 x i32> %51, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %53 = sitofp <8 x i32> %52 to <8 x float>
  %54 = fmul <8 x float> %53, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %55 = lshr <8 x i32> %47, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %56 = and <8 x i32> %55, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %57 = sitofp <8 x i32> %56 to <8 x float>
  %58 = fmul <8 x float> %57, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %59 = lshr <8 x i32> %47, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %60 = sitofp <8 x i32> %59 to <8 x float>
  %61 = fmul <8 x float> %60, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %62 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %63 = extractvalue { i8*, i8** } %62, 0
  %64 = extractvalue { i8*, i8** } %62, 1
  %65 = bitcast i8* %63 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %65(i64 %0, i8** %64, i64 %2, i64 %3, <8 x float> %50, <8 x float> %54, <8 x float> %58, <8 x float> %61, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9load_rg88EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 6
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i16, i16* %24, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <8 x i16> %31, i16 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i16> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i16, i16* %24, i64 4
  %38 = load i16, i16* %37, align 2
  %39 = insertelement <8 x i16> %36, i16 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i16> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i16* %24 to <4 x i16>*
  %43 = load <4 x i16>, <4 x i16>* %42, align 2
  %44 = shufflevector <4 x i16> %43, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i16> %44, <8 x i16> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i16, i16* %24, i64 2
  %48 = load i16, i16* %47, align 2
  %49 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i16> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i16* %24 to <2 x i16>*
  %53 = load <2 x i16>, <2 x i16>* %52, align 2
  %54 = shufflevector <2 x i16> %53, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i16> %54, <8 x i16> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i16, i16* %24, align 2
  %58 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i16* %24 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = zext <8 x i16> %64 to <8 x i32>
  %66 = and <8 x i32> %65, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %67 = sitofp <8 x i32> %66 to <8 x float>
  %68 = fmul <8 x float> %67, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %69 = lshr <8 x i32> %65, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %70 = sitofp <8 x i32> %69 to <8 x float>
  %71 = fmul <8 x float> %70, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %72 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %73 = extractvalue { i8*, i8** } %72, 0
  %74 = extractvalue { i8*, i8** } %72, 1
  %75 = bitcast i8* %73 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %75(i64 %0, i8** %74, i64 %2, i64 %3, <8 x float> %68, <8 x float> %71, <8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL13load_rg88_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 6
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i16, i16* %24, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <8 x i16> %31, i16 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i16> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i16, i16* %24, i64 4
  %38 = load i16, i16* %37, align 2
  %39 = insertelement <8 x i16> %36, i16 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i16> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i16* %24 to <4 x i16>*
  %43 = load <4 x i16>, <4 x i16>* %42, align 2
  %44 = shufflevector <4 x i16> %43, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i16> %44, <8 x i16> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i16, i16* %24, i64 2
  %48 = load i16, i16* %47, align 2
  %49 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i16> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i16* %24 to <2 x i16>*
  %53 = load <2 x i16>, <2 x i16>* %52, align 2
  %54 = shufflevector <2 x i16> %53, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i16> %54, <8 x i16> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i16, i16* %24, align 2
  %58 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i16* %24 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = zext <8 x i16> %64 to <8 x i32>
  %66 = and <8 x i32> %65, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %67 = sitofp <8 x i32> %66 to <8 x float>
  %68 = fmul <8 x float> %67, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %69 = lshr <8 x i32> %65, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %70 = sitofp <8 x i32> %69 to <8 x float>
  %71 = fmul <8 x float> %70, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %72 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %73 = extractvalue { i8*, i8** } %72, 0
  %74 = extractvalue { i8*, i8** } %72, 1
  %75 = bitcast i8* %73 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %75(i64 %0, i8** %74, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %68, <8 x float> %71, <8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10store_rg88EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %26 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %25, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %27 = fmul <8 x float> %26, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %28 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %27) #13
  %29 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %30 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %29, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %31 = fmul <8 x float> %30, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %32 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %31) #13
  %33 = shl <8 x i32> %32, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %34 = or <8 x i32> %33, %28
  %35 = shufflevector <8 x i32> %34, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %36 = shufflevector <8 x i32> %34, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %37 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %35, <4 x i32> %36) #13
  %38 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %38) #13
  switch i64 %0, label %61 [
    i64 0, label %59
    i64 7, label %39
    i64 6, label %42
    i64 5, label %45
    i64 4, label %48
    i64 3, label %51
    i64 2, label %54
    i64 1, label %57
  ], !prof !99

39:                                               ; preds = %12
  %40 = extractelement <8 x i16> %37, i32 6
  %41 = getelementptr inbounds i16, i16* %24, i64 6
  store i16 %40, i16* %41, align 2
  br label %42

42:                                               ; preds = %39, %12
  %43 = extractelement <8 x i16> %37, i32 5
  %44 = getelementptr inbounds i16, i16* %24, i64 5
  store i16 %43, i16* %44, align 2
  br label %45

45:                                               ; preds = %42, %12
  %46 = extractelement <8 x i16> %37, i32 4
  %47 = getelementptr inbounds i16, i16* %24, i64 4
  store i16 %46, i16* %47, align 2
  br label %48

48:                                               ; preds = %45, %12
  %49 = bitcast i16* %24 to <4 x i16>*
  %50 = shufflevector <8 x i16> %37, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %50, <4 x i16>* %49, align 2
  br label %62

51:                                               ; preds = %12
  %52 = extractelement <8 x i16> %37, i32 2
  %53 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %52, i16* %53, align 2
  br label %54

54:                                               ; preds = %51, %12
  %55 = bitcast i16* %24 to <2 x i16>*
  %56 = shufflevector <8 x i16> %37, <8 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %56, <2 x i16>* %55, align 2
  br label %62

57:                                               ; preds = %12
  %58 = extractelement <8 x i16> %37, i32 0
  store i16 %58, i16* %24, align 2
  br label %62

59:                                               ; preds = %12
  %60 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> %37, <8 x i16>* %60, align 2
  br label %62

61:                                               ; preds = %12
  unreachable

62:                                               ; preds = %48, %54, %57, %59
  %63 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %64 = extractvalue { i8*, i8** } %63, 0
  %65 = extractvalue { i8*, i8** } %63, 1
  %66 = bitcast i8* %64 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %66(i64 %0, i8** %65, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11gather_rg88EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = bitcast <8 x float> %20 to <8 x i32>
  %22 = add <8 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %25 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> %23) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %35 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %34, <8 x float> %33) #13
  %36 = bitcast i8* %14 to i16**
  %37 = load i16*, i16** %36, align 8
  %38 = fptosi <8 x float> %35 to <8 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <8 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = mul <8 x i32> %43, %38
  %45 = fptosi <8 x float> %25 to <8 x i32>
  %46 = add <8 x i32> %44, %45
  %47 = extractelement <8 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %37, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = insertelement <8 x i16> undef, i16 %50, i32 0
  %52 = extractelement <8 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %37, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = insertelement <8 x i16> %51, i16 %55, i32 1
  %57 = extractelement <8 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %37, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = insertelement <8 x i16> %56, i16 %60, i32 2
  %62 = extractelement <8 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i16, i16* %37, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = insertelement <8 x i16> %61, i16 %65, i32 3
  %67 = extractelement <8 x i32> %46, i32 4
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i16, i16* %37, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = insertelement <8 x i16> %66, i16 %70, i32 4
  %72 = extractelement <8 x i32> %46, i32 5
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds i16, i16* %37, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = insertelement <8 x i16> %71, i16 %75, i32 5
  %77 = extractelement <8 x i32> %46, i32 6
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i16, i16* %37, i64 %78
  %80 = load i16, i16* %79, align 2
  %81 = insertelement <8 x i16> %76, i16 %80, i32 6
  %82 = extractelement <8 x i32> %46, i32 7
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i16, i16* %37, i64 %83
  %85 = load i16, i16* %84, align 2
  %86 = insertelement <8 x i16> %81, i16 %85, i32 7
  %87 = zext <8 x i16> %86 to <8 x i32>
  %88 = and <8 x i32> %87, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %89 = sitofp <8 x i32> %88 to <8 x float>
  %90 = fmul <8 x float> %89, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %91 = lshr <8 x i32> %87, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %92 = sitofp <8 x i32> %91 to <8 x float>
  %93 = fmul <8 x float> %92, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %94 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %95 = extractvalue { i8*, i8** } %94, 0
  %96 = extractvalue { i8*, i8** } %94, 1
  %97 = bitcast i8* %95 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %97(i64 %0, i8** %96, i64 %2, i64 %3, <8 x float> %90, <8 x float> %93, <8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8load_a16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 6
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i16, i16* %24, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <8 x i16> %31, i16 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i16> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i16, i16* %24, i64 4
  %38 = load i16, i16* %37, align 2
  %39 = insertelement <8 x i16> %36, i16 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i16> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i16* %24 to <4 x i16>*
  %43 = load <4 x i16>, <4 x i16>* %42, align 2
  %44 = shufflevector <4 x i16> %43, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i16> %44, <8 x i16> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i16, i16* %24, i64 2
  %48 = load i16, i16* %47, align 2
  %49 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i16> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i16* %24 to <2 x i16>*
  %53 = load <2 x i16>, <2 x i16>* %52, align 2
  %54 = shufflevector <2 x i16> %53, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i16> %54, <8 x i16> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i16, i16* %24, align 2
  %58 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i16* %24 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = uitofp <8 x i16> %64 to <8 x float>
  %66 = fmul <8 x float> %65, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %67 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %68 = extractvalue { i8*, i8** } %67, 0
  %69 = extractvalue { i8*, i8** } %67, 1
  %70 = bitcast i8* %68 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %70(i64 %0, i8** %69, i64 %2, i64 %3, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> %66, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL12load_a16_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 6
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i16, i16* %24, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <8 x i16> %31, i16 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i16> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i16, i16* %24, i64 4
  %38 = load i16, i16* %37, align 2
  %39 = insertelement <8 x i16> %36, i16 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i16> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i16* %24 to <4 x i16>*
  %43 = load <4 x i16>, <4 x i16>* %42, align 2
  %44 = shufflevector <4 x i16> %43, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i16> %44, <8 x i16> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i16, i16* %24, i64 2
  %48 = load i16, i16* %47, align 2
  %49 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i16> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i16* %24 to <2 x i16>*
  %53 = load <2 x i16>, <2 x i16>* %52, align 2
  %54 = shufflevector <2 x i16> %53, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i16> %54, <8 x i16> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i16, i16* %24, align 2
  %58 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i16* %24 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = uitofp <8 x i16> %64 to <8 x float>
  %66 = fmul <8 x float> %65, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %67 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %68 = extractvalue { i8*, i8** } %67, 0
  %69 = extractvalue { i8*, i8** } %67, 1
  %70 = bitcast i8* %68 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %70(i64 %0, i8** %69, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> %66) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9store_a16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %7) #13
  %26 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %25, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %27 = fmul <8 x float> %26, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %28 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %27) #13
  %29 = shufflevector <8 x i32> %28, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %30 = shufflevector <8 x i32> %28, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %31 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %29, <4 x i32> %30) #13
  %32 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %32) #13
  switch i64 %0, label %55 [
    i64 0, label %53
    i64 7, label %33
    i64 6, label %36
    i64 5, label %39
    i64 4, label %42
    i64 3, label %45
    i64 2, label %48
    i64 1, label %51
  ], !prof !99

33:                                               ; preds = %12
  %34 = extractelement <8 x i16> %31, i32 6
  %35 = getelementptr inbounds i16, i16* %24, i64 6
  store i16 %34, i16* %35, align 2
  br label %36

36:                                               ; preds = %33, %12
  %37 = extractelement <8 x i16> %31, i32 5
  %38 = getelementptr inbounds i16, i16* %24, i64 5
  store i16 %37, i16* %38, align 2
  br label %39

39:                                               ; preds = %36, %12
  %40 = extractelement <8 x i16> %31, i32 4
  %41 = getelementptr inbounds i16, i16* %24, i64 4
  store i16 %40, i16* %41, align 2
  br label %42

42:                                               ; preds = %39, %12
  %43 = bitcast i16* %24 to <4 x i16>*
  %44 = shufflevector <8 x i16> %31, <8 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %44, <4 x i16>* %43, align 2
  br label %56

45:                                               ; preds = %12
  %46 = extractelement <8 x i16> %31, i32 2
  %47 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %46, i16* %47, align 2
  br label %48

48:                                               ; preds = %45, %12
  %49 = bitcast i16* %24 to <2 x i16>*
  %50 = shufflevector <8 x i16> %31, <8 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %50, <2 x i16>* %49, align 2
  br label %56

51:                                               ; preds = %12
  %52 = extractelement <8 x i16> %31, i32 0
  store i16 %52, i16* %24, align 2
  br label %56

53:                                               ; preds = %12
  %54 = bitcast i16* %24 to <8 x i16>*
  store <8 x i16> %31, <8 x i16>* %54, align 2
  br label %56

55:                                               ; preds = %12
  unreachable

56:                                               ; preds = %42, %48, %51, %53
  %57 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %58 = extractvalue { i8*, i8** } %57, 0
  %59 = extractvalue { i8*, i8** } %57, 1
  %60 = bitcast i8* %58 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %60(i64 %0, i8** %59, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10gather_a16EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = bitcast <8 x float> %20 to <8 x i32>
  %22 = add <8 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %25 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> %23) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %35 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %34, <8 x float> %33) #13
  %36 = bitcast i8* %14 to i16**
  %37 = load i16*, i16** %36, align 8
  %38 = fptosi <8 x float> %35 to <8 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <8 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = mul <8 x i32> %43, %38
  %45 = fptosi <8 x float> %25 to <8 x i32>
  %46 = add <8 x i32> %44, %45
  %47 = extractelement <8 x i32> %46, i32 0
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %37, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = insertelement <8 x i16> undef, i16 %50, i32 0
  %52 = extractelement <8 x i32> %46, i32 1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %37, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = insertelement <8 x i16> %51, i16 %55, i32 1
  %57 = extractelement <8 x i32> %46, i32 2
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %37, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = insertelement <8 x i16> %56, i16 %60, i32 2
  %62 = extractelement <8 x i32> %46, i32 3
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i16, i16* %37, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = insertelement <8 x i16> %61, i16 %65, i32 3
  %67 = extractelement <8 x i32> %46, i32 4
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i16, i16* %37, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = insertelement <8 x i16> %66, i16 %70, i32 4
  %72 = extractelement <8 x i32> %46, i32 5
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds i16, i16* %37, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = insertelement <8 x i16> %71, i16 %75, i32 5
  %77 = extractelement <8 x i32> %46, i32 6
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i16, i16* %37, i64 %78
  %80 = load i16, i16* %79, align 2
  %81 = insertelement <8 x i16> %76, i16 %80, i32 6
  %82 = extractelement <8 x i32> %46, i32 7
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i16, i16* %37, i64 %83
  %85 = load i16, i16* %84, align 2
  %86 = insertelement <8 x i16> %81, i16 %85, i32 7
  %87 = uitofp <8 x i16> %86 to <8 x float>
  %88 = fmul <8 x float> %87, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %89 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %90 = extractvalue { i8*, i8** } %89, 0
  %91 = extractvalue { i8*, i8** } %89, 1
  %92 = bitcast i8* %90 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %92(i64 %0, i8** %91, i64 %2, i64 %3, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> %88, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11load_rg1616EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i32, i32* %24, i64 6
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0>, i32 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i32> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i32, i32* %24, i64 5
  %33 = load i32, i32* %32, align 4
  %34 = insertelement <8 x i32> %31, i32 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i32> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i32, i32* %24, i64 4
  %38 = load i32, i32* %37, align 4
  %39 = insertelement <8 x i32> %36, i32 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i32> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i32* %24 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i32> %44, <8 x i32> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i32, i32* %24, i64 2
  %48 = load i32, i32* %47, align 4
  %49 = insertelement <8 x i32> <i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i32> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i32* %24 to <2 x i32>*
  %53 = load <2 x i32>, <2 x i32>* %52, align 4
  %54 = shufflevector <2 x i32> %53, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i32> %54, <8 x i32> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i32, i32* %24, align 4
  %58 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i32* %24 to <8 x i32>*
  %61 = load <8 x i32>, <8 x i32>* %60, align 4
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i32> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = and <8 x i32> %64, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %66 = sitofp <8 x i32> %65 to <8 x float>
  %67 = fmul <8 x float> %66, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %68 = lshr <8 x i32> %64, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %69 = sitofp <8 x i32> %68 to <8 x float>
  %70 = fmul <8 x float> %69, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %71 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %72 = extractvalue { i8*, i8** } %71, 0
  %73 = extractvalue { i8*, i8** } %71, 1
  %74 = bitcast i8* %72 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %74(i64 %0, i8** %73, i64 %2, i64 %3, <8 x float> %67, <8 x float> %70, <8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL15load_rg1616_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i32, i32* %24, i64 6
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0>, i32 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i32> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i32, i32* %24, i64 5
  %33 = load i32, i32* %32, align 4
  %34 = insertelement <8 x i32> %31, i32 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i32> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i32, i32* %24, i64 4
  %38 = load i32, i32* %37, align 4
  %39 = insertelement <8 x i32> %36, i32 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i32> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i32* %24 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i32> %44, <8 x i32> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i32, i32* %24, i64 2
  %48 = load i32, i32* %47, align 4
  %49 = insertelement <8 x i32> <i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i32> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i32* %24 to <2 x i32>*
  %53 = load <2 x i32>, <2 x i32>* %52, align 4
  %54 = shufflevector <2 x i32> %53, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i32> %54, <8 x i32> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i32, i32* %24, align 4
  %58 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i32* %24 to <8 x i32>*
  %61 = load <8 x i32>, <8 x i32>* %60, align 4
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i32> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = and <8 x i32> %64, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %66 = sitofp <8 x i32> %65 to <8 x float>
  %67 = fmul <8 x float> %66, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %68 = lshr <8 x i32> %64, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %69 = sitofp <8 x i32> %68 to <8 x float>
  %70 = fmul <8 x float> %69, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %71 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %72 = extractvalue { i8*, i8** } %71, 0
  %73 = extractvalue { i8*, i8** } %71, 1
  %74 = bitcast i8* %72 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %74(i64 %0, i8** %73, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %67, <8 x float> %70, <8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL12store_rg1616EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %26 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %25, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %27 = fmul <8 x float> %26, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %28 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %27) #13
  %29 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %30 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %29, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %31 = fmul <8 x float> %30, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %32 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %31) #13
  %33 = shl <8 x i32> %32, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %34 = or <8 x i32> %33, %28
  %35 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %35) #13
  switch i64 %0, label %58 [
    i64 0, label %56
    i64 7, label %36
    i64 6, label %39
    i64 5, label %42
    i64 4, label %45
    i64 3, label %48
    i64 2, label %51
    i64 1, label %54
  ], !prof !99

36:                                               ; preds = %12
  %37 = extractelement <8 x i32> %34, i32 6
  %38 = getelementptr inbounds i32, i32* %24, i64 6
  store i32 %37, i32* %38, align 4
  br label %39

39:                                               ; preds = %36, %12
  %40 = extractelement <8 x i32> %34, i32 5
  %41 = getelementptr inbounds i32, i32* %24, i64 5
  store i32 %40, i32* %41, align 4
  br label %42

42:                                               ; preds = %39, %12
  %43 = extractelement <8 x i32> %34, i32 4
  %44 = getelementptr inbounds i32, i32* %24, i64 4
  store i32 %43, i32* %44, align 4
  br label %45

45:                                               ; preds = %42, %12
  %46 = bitcast i32* %24 to <4 x i32>*
  %47 = shufflevector <8 x i32> %34, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %47, <4 x i32>* %46, align 4
  br label %59

48:                                               ; preds = %12
  %49 = extractelement <8 x i32> %34, i32 2
  %50 = getelementptr inbounds i32, i32* %24, i64 2
  store i32 %49, i32* %50, align 4
  br label %51

51:                                               ; preds = %48, %12
  %52 = bitcast i32* %24 to <2 x i32>*
  %53 = shufflevector <8 x i32> %34, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i32> %53, <2 x i32>* %52, align 4
  br label %59

54:                                               ; preds = %12
  %55 = extractelement <8 x i32> %34, i32 0
  store i32 %55, i32* %24, align 4
  br label %59

56:                                               ; preds = %12
  %57 = bitcast i32* %24 to <8 x i32>*
  store <8 x i32> %34, <8 x i32>* %57, align 4
  br label %59

58:                                               ; preds = %12
  unreachable

59:                                               ; preds = %45, %51, %54, %56
  %60 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %61 = extractvalue { i8*, i8** } %60, 0
  %62 = extractvalue { i8*, i8** } %60, 1
  %63 = bitcast i8* %61 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %63(i64 %0, i8** %62, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL13gather_rg1616EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = bitcast <8 x float> %20 to <8 x i32>
  %22 = add <8 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %25 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> %23) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %35 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %34, <8 x float> %33) #13
  %36 = bitcast i8* %14 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = fptosi <8 x float> %35 to <8 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <8 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = mul <8 x i32> %43, %38
  %45 = fptosi <8 x float> %25 to <8 x i32>
  %46 = add <8 x i32> %44, %45
  %47 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %37, <8 x i32> %46, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %48 = and <8 x i32> %47, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %49 = sitofp <8 x i32> %48 to <8 x float>
  %50 = fmul <8 x float> %49, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %51 = lshr <8 x i32> %47, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %52 = sitofp <8 x i32> %51 to <8 x float>
  %53 = fmul <8 x float> %52, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %54 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %55 = extractvalue { i8*, i8** } %54, 0
  %56 = extractvalue { i8*, i8** } %54, 1
  %57 = bitcast i8* %55 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %57(i64 %0, i8** %56, i64 %2, i64 %3, <8 x float> %50, <8 x float> %53, <8 x float> zeroinitializer, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL13load_16161616EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i64**
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i64, i64* %17, i64 %22
  %24 = getelementptr inbounds i64, i64* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i64, i64* %24, i64 6
  %28 = load i64, i64* %27, align 8
  %29 = insertelement <8 x i64> <i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 undef, i64 0>, i64 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i64> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i64, i64* %24, i64 5
  %33 = load i64, i64* %32, align 8
  %34 = insertelement <8 x i64> %31, i64 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i64> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i64, i64* %24, i64 4
  %38 = load i64, i64* %37, align 8
  %39 = insertelement <8 x i64> %36, i64 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i64> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i64* %24 to <4 x i64>*
  %43 = load <4 x i64>, <4 x i64>* %42, align 8
  %44 = shufflevector <4 x i64> %43, <4 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i64> %44, <8 x i64> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i64, i64* %24, i64 2
  %48 = load i64, i64* %47, align 8
  %49 = insertelement <8 x i64> <i64 0, i64 0, i64 undef, i64 0, i64 0, i64 0, i64 0, i64 0>, i64 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i64> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i64* %24 to <2 x i64>*
  %53 = load <2 x i64>, <2 x i64>* %52, align 8
  %54 = shufflevector <2 x i64> %53, <2 x i64> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i64> %54, <8 x i64> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i64, i64* %24, align 8
  %58 = insertelement <8 x i64> <i64 undef, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0>, i64 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i64* %24 to <8 x i64>*
  %61 = load <8 x i64>, <8 x i64>* %60, align 8
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i64> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = and <8 x i64> %64, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %66 = uitofp <8 x i64> %65 to <8 x float>
  %67 = fmul <8 x float> %66, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %68 = lshr <8 x i64> %64, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %69 = and <8 x i64> %68, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %70 = uitofp <8 x i64> %69 to <8 x float>
  %71 = fmul <8 x float> %70, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %72 = lshr <8 x i64> %64, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %73 = and <8 x i64> %72, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %74 = uitofp <8 x i64> %73 to <8 x float>
  %75 = fmul <8 x float> %74, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %76 = lshr <8 x i64> %64, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %77 = uitofp <8 x i64> %76 to <8 x float>
  %78 = fmul <8 x float> %77, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %79 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %80 = extractvalue { i8*, i8** } %79, 0
  %81 = extractvalue { i8*, i8** } %79, 1
  %82 = bitcast i8* %80 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %82(i64 %0, i8** %81, i64 %2, i64 %3, <8 x float> %67, <8 x float> %71, <8 x float> %75, <8 x float> %78, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL17load_16161616_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i64**
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i64, i64* %17, i64 %22
  %24 = getelementptr inbounds i64, i64* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i64, i64* %24, i64 6
  %28 = load i64, i64* %27, align 8
  %29 = insertelement <8 x i64> <i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 undef, i64 0>, i64 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i64> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i64, i64* %24, i64 5
  %33 = load i64, i64* %32, align 8
  %34 = insertelement <8 x i64> %31, i64 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i64> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i64, i64* %24, i64 4
  %38 = load i64, i64* %37, align 8
  %39 = insertelement <8 x i64> %36, i64 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i64> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i64* %24 to <4 x i64>*
  %43 = load <4 x i64>, <4 x i64>* %42, align 8
  %44 = shufflevector <4 x i64> %43, <4 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i64> %44, <8 x i64> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i64, i64* %24, i64 2
  %48 = load i64, i64* %47, align 8
  %49 = insertelement <8 x i64> <i64 0, i64 0, i64 undef, i64 0, i64 0, i64 0, i64 0, i64 0>, i64 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i64> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i64* %24 to <2 x i64>*
  %53 = load <2 x i64>, <2 x i64>* %52, align 8
  %54 = shufflevector <2 x i64> %53, <2 x i64> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i64> %54, <8 x i64> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i64, i64* %24, align 8
  %58 = insertelement <8 x i64> <i64 undef, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0>, i64 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i64* %24 to <8 x i64>*
  %61 = load <8 x i64>, <8 x i64>* %60, align 8
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i64> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = and <8 x i64> %64, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %66 = uitofp <8 x i64> %65 to <8 x float>
  %67 = fmul <8 x float> %66, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %68 = lshr <8 x i64> %64, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %69 = and <8 x i64> %68, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %70 = uitofp <8 x i64> %69 to <8 x float>
  %71 = fmul <8 x float> %70, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %72 = lshr <8 x i64> %64, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %73 = and <8 x i64> %72, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %74 = uitofp <8 x i64> %73 to <8 x float>
  %75 = fmul <8 x float> %74, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %76 = lshr <8 x i64> %64, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %77 = uitofp <8 x i64> %76 to <8 x float>
  %78 = fmul <8 x float> %77, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %79 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %80 = extractvalue { i8*, i8** } %79, 0
  %81 = extractvalue { i8*, i8** } %79, 1
  %82 = bitcast i8* %80 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %82(i64 %0, i8** %81, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %67, <8 x float> %71, <8 x float> %75, <8 x float> %78) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL14store_16161616EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = shl i64 %2, 2
  %17 = shl i64 %3, 2
  %18 = bitcast i8* %14 to i16**
  %19 = load i16*, i16** %18, align 8
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 8
  %23 = sext i32 %22 to i64
  %24 = mul i64 %17, %23
  %25 = getelementptr inbounds i16, i16* %19, i64 %24
  %26 = getelementptr inbounds i16, i16* %25, i64 %16
  %27 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %28 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %27, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %29 = fmul <8 x float> %28, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %30 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %29) #13
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %32 = shufflevector <8 x i32> %30, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %33 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %31, <4 x i32> %32) #13
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %35 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %34, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %36 = fmul <8 x float> %35, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %37 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %36) #13
  %38 = shufflevector <8 x i32> %37, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %39 = shufflevector <8 x i32> %37, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %40 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %38, <4 x i32> %39) #13
  %41 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %6) #13
  %42 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %41, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %43 = fmul <8 x float> %42, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %44 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %43) #13
  %45 = shufflevector <8 x i32> %44, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %46 = shufflevector <8 x i32> %44, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %47 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %45, <4 x i32> %46) #13
  %48 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %7) #13
  %49 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %48, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %50 = fmul <8 x float> %49, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %51 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %50) #13
  %52 = shufflevector <8 x i32> %51, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %53 = shufflevector <8 x i32> %51, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %54 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %52, <4 x i32> %53) #13
  %55 = shufflevector <8 x i16> %33, <8 x i16> %40, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %56 = shufflevector <8 x i16> %33, <8 x i16> %40, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %57 = shufflevector <8 x i16> %47, <8 x i16> %54, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %58 = shufflevector <8 x i16> %47, <8 x i16> %54, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %59 = bitcast <8 x i16> %55 to <4 x i32>
  %60 = bitcast <8 x i16> %57 to <4 x i32>
  %61 = shufflevector <4 x i32> %59, <4 x i32> %60, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %62 = shufflevector <4 x i32> %59, <4 x i32> %60, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %63 = bitcast <8 x i16> %56 to <4 x i32>
  %64 = bitcast <8 x i16> %58 to <4 x i32>
  %65 = shufflevector <4 x i32> %63, <4 x i32> %64, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %66 = shufflevector <4 x i32> %63, <4 x i32> %64, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %67 = icmp eq i64 %0, 0
  br i1 %67, label %105, label %68, !prof !100

68:                                               ; preds = %12
  %69 = bitcast i16* %26 to double*
  %70 = bitcast <4 x i32> %61 to <2 x double>
  %71 = extractelement <2 x double> %70, i32 0
  store double %71, double* %69, align 1
  %72 = icmp eq i64 %0, 1
  br i1 %72, label %113, label %73

73:                                               ; preds = %68
  %74 = getelementptr inbounds i16, i16* %26, i64 4
  %75 = bitcast i16* %74 to double*
  %76 = extractelement <2 x double> %70, i32 1
  store double %76, double* %75, align 1
  %77 = icmp ugt i64 %0, 2
  br i1 %77, label %78, label %113

78:                                               ; preds = %73
  %79 = getelementptr inbounds i16, i16* %26, i64 8
  %80 = bitcast i16* %79 to double*
  %81 = bitcast <4 x i32> %62 to <2 x double>
  %82 = extractelement <2 x double> %81, i32 0
  store double %82, double* %80, align 1
  %83 = icmp eq i64 %0, 3
  br i1 %83, label %113, label %84

84:                                               ; preds = %78
  %85 = getelementptr inbounds i16, i16* %26, i64 12
  %86 = bitcast i16* %85 to double*
  %87 = extractelement <2 x double> %81, i32 1
  store double %87, double* %86, align 1
  %88 = icmp ugt i64 %0, 4
  br i1 %88, label %89, label %113

89:                                               ; preds = %84
  %90 = getelementptr inbounds i16, i16* %26, i64 16
  %91 = bitcast i16* %90 to double*
  %92 = bitcast <4 x i32> %65 to <2 x double>
  %93 = extractelement <2 x double> %92, i32 0
  store double %93, double* %91, align 1
  %94 = icmp eq i64 %0, 5
  br i1 %94, label %113, label %95

95:                                               ; preds = %89
  %96 = getelementptr inbounds i16, i16* %26, i64 20
  %97 = bitcast i16* %96 to double*
  %98 = extractelement <2 x double> %92, i32 1
  store double %98, double* %97, align 1
  %99 = icmp ugt i64 %0, 6
  br i1 %99, label %100, label %113

100:                                              ; preds = %95
  %101 = getelementptr inbounds i16, i16* %26, i64 24
  %102 = bitcast i16* %101 to double*
  %103 = bitcast <4 x i32> %66 to <2 x double>
  %104 = extractelement <2 x double> %103, i32 0
  store double %104, double* %102, align 1
  br label %113

105:                                              ; preds = %12
  %106 = bitcast i16* %26 to <4 x i32>*
  store <4 x i32> %61, <4 x i32>* %106, align 1
  %107 = getelementptr inbounds i16, i16* %26, i64 8
  %108 = bitcast i16* %107 to <4 x i32>*
  store <4 x i32> %62, <4 x i32>* %108, align 1
  %109 = getelementptr inbounds i16, i16* %26, i64 16
  %110 = bitcast i16* %109 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %110, align 1
  %111 = getelementptr inbounds i16, i16* %26, i64 24
  %112 = bitcast i16* %111 to <4 x i32>*
  store <4 x i32> %66, <4 x i32>* %112, align 1
  br label %113

113:                                              ; preds = %68, %73, %78, %84, %89, %95, %100, %105
  %114 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %115 = extractvalue { i8*, i8** } %114, 0
  %116 = extractvalue { i8*, i8** } %114, 1
  %117 = bitcast i8* %115 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %117(i64 %0, i8** %116, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL15gather_16161616EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = bitcast <8 x float> %20 to <8 x i32>
  %22 = add <8 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %25 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> %23) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %35 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %34, <8 x float> %33) #13
  %36 = bitcast i8* %14 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = fptosi <8 x float> %35 to <8 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <8 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = mul <8 x i32> %43, %38
  %45 = fptosi <8 x float> %25 to <8 x i32>
  %46 = add <8 x i32> %44, %45
  %47 = bitcast <8 x i32> %46 to <4 x i64>
  %48 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %49 = bitcast <2 x i64> %48 to <4 x i32>
  %50 = tail call <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64> zeroinitializer, i8* %37, <4 x i32> %49, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, i8 8) #13
  %51 = shufflevector <4 x i64> %50, <4 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %52 = shufflevector <4 x i64> %47, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %53 = bitcast <2 x i64> %52 to <4 x i32>
  %54 = tail call <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64> zeroinitializer, i8* %37, <4 x i32> %53, <4 x i64> <i64 -1, i64 -1, i64 -1, i64 -1>, i8 8) #13
  %55 = shufflevector <4 x i64> %54, <4 x i64> undef, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %56 = shufflevector <8 x i64> %51, <8 x i64> %55, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  %57 = and <8 x i64> %56, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %58 = uitofp <8 x i64> %57 to <8 x float>
  %59 = fmul <8 x float> %58, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %60 = lshr <8 x i64> %56, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %61 = and <8 x i64> %60, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %62 = uitofp <8 x i64> %61 to <8 x float>
  %63 = fmul <8 x float> %62, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %64 = lshr <8 x i64> %56, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %65 = and <8 x i64> %64, <i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535, i64 65535>
  %66 = uitofp <8 x i64> %65 to <8 x float>
  %67 = fmul <8 x float> %66, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %68 = lshr <8 x i64> %56, <i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48, i64 48>
  %69 = uitofp <8 x i64> %68 to <8 x float>
  %70 = fmul <8 x float> %69, <float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000, float 0x3EF0001000000000>
  %71 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %72 = extractvalue { i8*, i8** } %71, 0
  %73 = extractvalue { i8*, i8** } %71, 1
  %74 = bitcast i8* %72 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %74(i64 %0, i8** %73, i64 %2, i64 %3, <8 x float> %59, <8 x float> %63, <8 x float> %67, <8 x float> %70, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL12load_1010102EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i32, i32* %24, i64 6
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0>, i32 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i32> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i32, i32* %24, i64 5
  %33 = load i32, i32* %32, align 4
  %34 = insertelement <8 x i32> %31, i32 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i32> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i32, i32* %24, i64 4
  %38 = load i32, i32* %37, align 4
  %39 = insertelement <8 x i32> %36, i32 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i32> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i32* %24 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i32> %44, <8 x i32> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i32, i32* %24, i64 2
  %48 = load i32, i32* %47, align 4
  %49 = insertelement <8 x i32> <i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i32> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i32* %24 to <2 x i32>*
  %53 = load <2 x i32>, <2 x i32>* %52, align 4
  %54 = shufflevector <2 x i32> %53, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i32> %54, <8 x i32> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i32, i32* %24, align 4
  %58 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i32* %24 to <8 x i32>*
  %61 = load <8 x i32>, <8 x i32>* %60, align 4
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i32> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = and <8 x i32> %64, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %66 = sitofp <8 x i32> %65 to <8 x float>
  %67 = fmul <8 x float> %66, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %68 = lshr <8 x i32> %64, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %69 = and <8 x i32> %68, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %70 = sitofp <8 x i32> %69 to <8 x float>
  %71 = fmul <8 x float> %70, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %72 = lshr <8 x i32> %64, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %73 = and <8 x i32> %72, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %74 = sitofp <8 x i32> %73 to <8 x float>
  %75 = fmul <8 x float> %74, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %76 = lshr <8 x i32> %64, <i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30>
  %77 = sitofp <8 x i32> %76 to <8 x float>
  %78 = fmul <8 x float> %77, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %79 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %80 = extractvalue { i8*, i8** } %79, 0
  %81 = extractvalue { i8*, i8** } %79, 1
  %82 = bitcast i8* %80 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %82(i64 %0, i8** %81, i64 %2, i64 %3, <8 x float> %67, <8 x float> %71, <8 x float> %75, <8 x float> %78, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL16load_1010102_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i32, i32* %24, i64 6
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0>, i32 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i32> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i32, i32* %24, i64 5
  %33 = load i32, i32* %32, align 4
  %34 = insertelement <8 x i32> %31, i32 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i32> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i32, i32* %24, i64 4
  %38 = load i32, i32* %37, align 4
  %39 = insertelement <8 x i32> %36, i32 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i32> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i32* %24 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i32> %44, <8 x i32> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i32, i32* %24, i64 2
  %48 = load i32, i32* %47, align 4
  %49 = insertelement <8 x i32> <i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i32> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i32* %24 to <2 x i32>*
  %53 = load <2 x i32>, <2 x i32>* %52, align 4
  %54 = shufflevector <2 x i32> %53, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i32> %54, <8 x i32> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i32, i32* %24, align 4
  %58 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i32* %24 to <8 x i32>*
  %61 = load <8 x i32>, <8 x i32>* %60, align 4
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i32> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = and <8 x i32> %64, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %66 = sitofp <8 x i32> %65 to <8 x float>
  %67 = fmul <8 x float> %66, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %68 = lshr <8 x i32> %64, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %69 = and <8 x i32> %68, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %70 = sitofp <8 x i32> %69 to <8 x float>
  %71 = fmul <8 x float> %70, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %72 = lshr <8 x i32> %64, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %73 = and <8 x i32> %72, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %74 = sitofp <8 x i32> %73 to <8 x float>
  %75 = fmul <8 x float> %74, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %76 = lshr <8 x i32> %64, <i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30>
  %77 = sitofp <8 x i32> %76 to <8 x float>
  %78 = fmul <8 x float> %77, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %79 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %80 = extractvalue { i8*, i8** } %79, 0
  %81 = extractvalue { i8*, i8** } %79, 1
  %82 = bitcast i8* %80 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %82(i64 %0, i8** %81, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %67, <8 x float> %71, <8 x float> %75, <8 x float> %78) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL13store_1010102EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %26 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %25, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %27 = fmul <8 x float> %26, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %28 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %27) #13
  %29 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %30 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %29, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %31 = fmul <8 x float> %30, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %32 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %31) #13
  %33 = shl <8 x i32> %32, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %34 = or <8 x i32> %33, %28
  %35 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %6) #13
  %36 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %35, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %37 = fmul <8 x float> %36, <float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03, float 1.023000e+03>
  %38 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %37) #13
  %39 = shl <8 x i32> %38, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %40 = or <8 x i32> %34, %39
  %41 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %7) #13
  %42 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %41, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %43 = fmul <8 x float> %42, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %44 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %43) #13
  %45 = shl <8 x i32> %44, <i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30>
  %46 = or <8 x i32> %40, %45
  %47 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %47) #13
  switch i64 %0, label %70 [
    i64 0, label %68
    i64 7, label %48
    i64 6, label %51
    i64 5, label %54
    i64 4, label %57
    i64 3, label %60
    i64 2, label %63
    i64 1, label %66
  ], !prof !99

48:                                               ; preds = %12
  %49 = extractelement <8 x i32> %46, i32 6
  %50 = getelementptr inbounds i32, i32* %24, i64 6
  store i32 %49, i32* %50, align 4
  br label %51

51:                                               ; preds = %48, %12
  %52 = extractelement <8 x i32> %46, i32 5
  %53 = getelementptr inbounds i32, i32* %24, i64 5
  store i32 %52, i32* %53, align 4
  br label %54

54:                                               ; preds = %51, %12
  %55 = extractelement <8 x i32> %46, i32 4
  %56 = getelementptr inbounds i32, i32* %24, i64 4
  store i32 %55, i32* %56, align 4
  br label %57

57:                                               ; preds = %54, %12
  %58 = bitcast i32* %24 to <4 x i32>*
  %59 = shufflevector <8 x i32> %46, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %59, <4 x i32>* %58, align 4
  br label %71

60:                                               ; preds = %12
  %61 = extractelement <8 x i32> %46, i32 2
  %62 = getelementptr inbounds i32, i32* %24, i64 2
  store i32 %61, i32* %62, align 4
  br label %63

63:                                               ; preds = %60, %12
  %64 = bitcast i32* %24 to <2 x i32>*
  %65 = shufflevector <8 x i32> %46, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i32> %65, <2 x i32>* %64, align 4
  br label %71

66:                                               ; preds = %12
  %67 = extractelement <8 x i32> %46, i32 0
  store i32 %67, i32* %24, align 4
  br label %71

68:                                               ; preds = %12
  %69 = bitcast i32* %24 to <8 x i32>*
  store <8 x i32> %46, <8 x i32>* %69, align 4
  br label %71

70:                                               ; preds = %12
  unreachable

71:                                               ; preds = %57, %63, %66, %68
  %72 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %73 = extractvalue { i8*, i8** } %72, 0
  %74 = extractvalue { i8*, i8** } %72, 1
  %75 = bitcast i8* %73 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %75(i64 %0, i8** %74, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL14gather_1010102EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 12
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = bitcast <8 x float> %20 to <8 x i32>
  %22 = add <8 x i32> %21, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %25 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> %23) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 16
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 8
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = bitcast <8 x float> %30 to <8 x i32>
  %32 = add <8 x i32> %31, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %35 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %34, <8 x float> %33) #13
  %36 = bitcast i8* %14 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = fptosi <8 x float> %35 to <8 x i32>
  %39 = getelementptr inbounds i8, i8* %14, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = insertelement <8 x i32> undef, i32 %41, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = mul <8 x i32> %43, %38
  %45 = fptosi <8 x float> %25 to <8 x i32>
  %46 = add <8 x i32> %44, %45
  %47 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %37, <8 x i32> %46, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %48 = and <8 x i32> %47, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %49 = sitofp <8 x i32> %48 to <8 x float>
  %50 = fmul <8 x float> %49, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %51 = lshr <8 x i32> %47, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %52 = and <8 x i32> %51, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %53 = sitofp <8 x i32> %52 to <8 x float>
  %54 = fmul <8 x float> %53, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %55 = lshr <8 x i32> %47, <i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20, i32 20>
  %56 = and <8 x i32> %55, <i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023, i32 1023>
  %57 = sitofp <8 x i32> %56 to <8 x float>
  %58 = fmul <8 x float> %57, <float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000, float 0x3F50040100000000>
  %59 = lshr <8 x i32> %47, <i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30, i32 30>
  %60 = sitofp <8 x i32> %59 to <8 x float>
  %61 = fmul <8 x float> %60, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %62 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %63 = extractvalue { i8*, i8** } %62, 0
  %64 = extractvalue { i8*, i8** } %62, 1
  %65 = bitcast i8* %63 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %65(i64 %0, i8** %64, i64 %2, i64 %3, <8 x float> %50, <8 x float> %54, <8 x float> %58, <8 x float> %61, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL13alpha_to_grayEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x float> %7, <8 x float> %7, <8 x float> %7, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL17alpha_to_gray_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %11, <8 x float> %11, <8 x float> %11, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL32bt709_luminance_or_luma_to_alphaEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %4, <float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000>
  %14 = fmul <8 x float> %5, <float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000>
  %15 = fadd <8 x float> %13, %14
  %16 = fmul <8 x float> %6, <float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000>
  %17 = fadd <8 x float> %15, %16
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %21(i64 %0, i8** %20, i64 %2, i64 %3, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> %17, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL30bt709_luminance_or_luma_to_rgbEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %4, <float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000, float 0x3FCB367A00000000>
  %14 = fmul <8 x float> %5, <float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000, float 0x3FE6E2EB20000000>
  %15 = fadd <8 x float> %13, %14
  %16 = fmul <8 x float> %6, <float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000, float 0x3FB27BB300000000>
  %17 = fadd <8 x float> %15, %16
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %21(i64 %0, i8** %20, i64 %2, i64 %3, <8 x float> %17, <8 x float> %17, <8 x float> %17, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL17bilerp_clamp_8888EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = fadd <8 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %16 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %15, i32 1) #13
  %17 = fsub <8 x float> %15, %16
  %18 = fadd <8 x float> %5, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %19 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %18, i32 1) #13
  %20 = fsub <8 x float> %18, %19
  %21 = getelementptr inbounds i8, i8* %14, i64 12
  %22 = bitcast i8* %21 to float*
  %23 = getelementptr inbounds i8, i8* %14, i64 16
  %24 = bitcast i8* %23 to float*
  %25 = bitcast i8* %14 to i8**
  %26 = getelementptr inbounds i8, i8* %14, i64 8
  %27 = bitcast i8* %26 to i32*
  %28 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %17
  %29 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %20
  %30 = fadd <8 x float> %4, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %31 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %30) #13
  %32 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %15) #13
  %33 = load float, float* %22, align 4
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = bitcast <8 x float> %35 to <8 x i32>
  %37 = add <8 x i32> %36, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %38 = bitcast <8 x i32> %37 to <8 x float>
  %39 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %31, <8 x float> %38) #13
  %40 = load float, float* %24, align 8
  %41 = insertelement <8 x float> undef, float %40, i32 0
  %42 = shufflevector <8 x float> %41, <8 x float> undef, <8 x i32> zeroinitializer
  %43 = bitcast <8 x float> %42 to <8 x i32>
  %44 = add <8 x i32> %43, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %45 = bitcast <8 x i32> %44 to <8 x float>
  %46 = load i8*, i8** %25, align 8
  %47 = load i32, i32* %27, align 8
  %48 = insertelement <8 x i32> undef, i32 %47, i32 0
  %49 = shufflevector <8 x i32> %48, <8 x i32> undef, <8 x i32> zeroinitializer
  %50 = fptosi <8 x float> %39 to <8 x i32>
  %51 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %32, <8 x float> %38) #13
  %52 = fptosi <8 x float> %51 to <8 x i32>
  %53 = fadd <8 x float> %5, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %54 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %53) #13
  %55 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %54, <8 x float> %45) #13
  %56 = fptosi <8 x float> %55 to <8 x i32>
  %57 = mul <8 x i32> %49, %56
  %58 = add <8 x i32> %57, %50
  %59 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %46, <8 x i32> %58, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %60 = and <8 x i32> %59, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %61 = sitofp <8 x i32> %60 to <8 x float>
  %62 = fmul <8 x float> %61, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %63 = lshr <8 x i32> %59, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %64 = and <8 x i32> %63, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %65 = sitofp <8 x i32> %64 to <8 x float>
  %66 = fmul <8 x float> %65, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %67 = lshr <8 x i32> %59, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %68 = and <8 x i32> %67, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %69 = sitofp <8 x i32> %68 to <8 x float>
  %70 = fmul <8 x float> %69, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %71 = lshr <8 x i32> %59, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %72 = sitofp <8 x i32> %71 to <8 x float>
  %73 = fmul <8 x float> %72, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %74 = fmul <8 x float> %28, %29
  %75 = fmul <8 x float> %74, %62
  %76 = fadd <8 x float> %75, zeroinitializer
  %77 = fmul <8 x float> %74, %66
  %78 = fadd <8 x float> %77, zeroinitializer
  %79 = fmul <8 x float> %74, %70
  %80 = fadd <8 x float> %79, zeroinitializer
  %81 = fmul <8 x float> %74, %73
  %82 = fadd <8 x float> %81, zeroinitializer
  %83 = add <8 x i32> %57, %52
  %84 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %46, <8 x i32> %83, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %85 = and <8 x i32> %84, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %86 = sitofp <8 x i32> %85 to <8 x float>
  %87 = fmul <8 x float> %86, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %88 = lshr <8 x i32> %84, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %89 = and <8 x i32> %88, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %90 = sitofp <8 x i32> %89 to <8 x float>
  %91 = fmul <8 x float> %90, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %92 = lshr <8 x i32> %84, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %93 = and <8 x i32> %92, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %94 = sitofp <8 x i32> %93 to <8 x float>
  %95 = fmul <8 x float> %94, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %96 = lshr <8 x i32> %84, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %97 = sitofp <8 x i32> %96 to <8 x float>
  %98 = fmul <8 x float> %97, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %99 = fmul <8 x float> %17, %29
  %100 = fmul <8 x float> %99, %87
  %101 = fadd <8 x float> %76, %100
  %102 = fmul <8 x float> %99, %91
  %103 = fadd <8 x float> %78, %102
  %104 = fmul <8 x float> %99, %95
  %105 = fadd <8 x float> %80, %104
  %106 = fmul <8 x float> %99, %98
  %107 = fadd <8 x float> %82, %106
  %108 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %18) #13
  %109 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %108, <8 x float> %45) #13
  %110 = fptosi <8 x float> %109 to <8 x i32>
  %111 = mul <8 x i32> %49, %110
  %112 = add <8 x i32> %111, %50
  %113 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %46, <8 x i32> %112, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %114 = and <8 x i32> %113, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %115 = sitofp <8 x i32> %114 to <8 x float>
  %116 = fmul <8 x float> %115, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %117 = lshr <8 x i32> %113, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %118 = and <8 x i32> %117, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %119 = sitofp <8 x i32> %118 to <8 x float>
  %120 = fmul <8 x float> %119, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %121 = lshr <8 x i32> %113, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %122 = and <8 x i32> %121, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %123 = sitofp <8 x i32> %122 to <8 x float>
  %124 = fmul <8 x float> %123, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %125 = lshr <8 x i32> %113, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %126 = sitofp <8 x i32> %125 to <8 x float>
  %127 = fmul <8 x float> %126, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %128 = fmul <8 x float> %28, %20
  %129 = fmul <8 x float> %128, %116
  %130 = fadd <8 x float> %101, %129
  %131 = fmul <8 x float> %128, %120
  %132 = fadd <8 x float> %103, %131
  %133 = fmul <8 x float> %128, %124
  %134 = fadd <8 x float> %105, %133
  %135 = fmul <8 x float> %128, %127
  %136 = fadd <8 x float> %107, %135
  %137 = add <8 x i32> %111, %52
  %138 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %46, <8 x i32> %137, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %139 = and <8 x i32> %138, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %140 = sitofp <8 x i32> %139 to <8 x float>
  %141 = fmul <8 x float> %140, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %142 = lshr <8 x i32> %138, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %143 = and <8 x i32> %142, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %144 = sitofp <8 x i32> %143 to <8 x float>
  %145 = fmul <8 x float> %144, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %146 = lshr <8 x i32> %138, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %147 = and <8 x i32> %146, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %148 = sitofp <8 x i32> %147 to <8 x float>
  %149 = fmul <8 x float> %148, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %150 = lshr <8 x i32> %138, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %151 = sitofp <8 x i32> %150 to <8 x float>
  %152 = fmul <8 x float> %151, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %153 = fmul <8 x float> %17, %20
  %154 = fmul <8 x float> %153, %141
  %155 = fadd <8 x float> %130, %154
  %156 = fmul <8 x float> %153, %145
  %157 = fadd <8 x float> %132, %156
  %158 = fmul <8 x float> %153, %149
  %159 = fadd <8 x float> %134, %158
  %160 = fmul <8 x float> %153, %152
  %161 = fadd <8 x float> %136, %160
  %162 = extractvalue { i8*, i8** } %13, 1
  %163 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %162) #10, !srcloc !98
  %164 = extractvalue { i8*, i8** } %163, 0
  %165 = extractvalue { i8*, i8** } %163, 1
  %166 = bitcast i8* %164 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %166(i64 %0, i8** %165, i64 %2, i64 %3, <8 x float> %155, <8 x float> %157, <8 x float> %159, <8 x float> %161, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL18bicubic_clamp_8888EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = alloca [4 x <8 x float>], align 32
  %14 = alloca [4 x <8 x float>], align 32
  %15 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %16 = extractvalue { i8*, i8** } %15, 0
  %17 = fadd <8 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %18 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %17, i32 1) #13
  %19 = fsub <8 x float> %17, %18
  %20 = fadd <8 x float> %5, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %21 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %20, i32 1) #13
  %22 = fsub <8 x float> %20, %21
  %23 = bitcast [4 x <8 x float>]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %23) #13
  %24 = getelementptr inbounds [4 x <8 x float>], [4 x <8 x float>]* %13, i64 0, i64 0
  %25 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %22
  %26 = fmul <8 x float> %25, %25
  %27 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %25, <8 x float> <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>, <8 x float> <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>) #13
  %28 = fmul <8 x float> %26, %27
  store <8 x float> %28, <8 x float>* %24, align 32
  %29 = getelementptr inbounds [4 x <8 x float>], [4 x <8 x float>]* %13, i64 0, i64 1
  %30 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %25, <8 x float> <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>, <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>) #13
  %31 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %25, <8 x float> %30, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #13
  %32 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %25, <8 x float> %31, <8 x float> <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>) #13
  store <8 x float> %32, <8 x float>* %29, align 32
  %33 = getelementptr inbounds [4 x <8 x float>], [4 x <8 x float>]* %13, i64 0, i64 2
  %34 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>, <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>) #13
  %35 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> %34, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #13
  %36 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> %35, <8 x float> <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>) #13
  store <8 x float> %36, <8 x float>* %33, align 32
  %37 = getelementptr inbounds [4 x <8 x float>], [4 x <8 x float>]* %13, i64 0, i64 3
  %38 = fmul <8 x float> %22, %22
  %39 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>, <8 x float> <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>) #13
  %40 = fmul <8 x float> %38, %39
  store <8 x float> %40, <8 x float>* %37, align 32
  %41 = bitcast [4 x <8 x float>]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %41) #13
  %42 = getelementptr inbounds [4 x <8 x float>], [4 x <8 x float>]* %14, i64 0, i64 0
  %43 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %19
  %44 = fmul <8 x float> %43, %43
  %45 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %43, <8 x float> <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>, <8 x float> <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>) #13
  %46 = fmul <8 x float> %44, %45
  store <8 x float> %46, <8 x float>* %42, align 32
  %47 = getelementptr inbounds [4 x <8 x float>], [4 x <8 x float>]* %14, i64 0, i64 1
  %48 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %43, <8 x float> <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>, <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>) #13
  %49 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %43, <8 x float> %48, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #13
  %50 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %43, <8 x float> %49, <8 x float> <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>) #13
  store <8 x float> %50, <8 x float>* %47, align 32
  %51 = getelementptr inbounds [4 x <8 x float>], [4 x <8 x float>]* %14, i64 0, i64 2
  %52 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %19, <8 x float> <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>, <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>) #13
  %53 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %19, <8 x float> %52, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #13
  %54 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %19, <8 x float> %53, <8 x float> <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>) #13
  store <8 x float> %54, <8 x float>* %51, align 32
  %55 = getelementptr inbounds [4 x <8 x float>], [4 x <8 x float>]* %14, i64 0, i64 3
  %56 = fmul <8 x float> %19, %19
  %57 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %19, <8 x float> <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>, <8 x float> <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>) #13
  %58 = fmul <8 x float> %56, %57
  store <8 x float> %58, <8 x float>* %55, align 32
  %59 = fadd <8 x float> %5, <float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00>
  %60 = fadd <8 x float> %4, <float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00>
  %61 = getelementptr inbounds i8, i8* %16, i64 12
  %62 = bitcast i8* %61 to float*
  %63 = getelementptr inbounds i8, i8* %16, i64 16
  %64 = bitcast i8* %63 to float*
  %65 = bitcast i8* %16 to i8**
  %66 = getelementptr inbounds i8, i8* %16, i64 8
  %67 = bitcast i8* %66 to i32*
  %68 = load float, float* %62, align 4
  %69 = insertelement <8 x float> undef, float %68, i32 0
  %70 = shufflevector <8 x float> %69, <8 x float> undef, <8 x i32> zeroinitializer
  %71 = bitcast <8 x float> %70 to <8 x i32>
  %72 = add <8 x i32> %71, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %73 = bitcast <8 x i32> %72 to <8 x float>
  %74 = load float, float* %64, align 8
  %75 = insertelement <8 x float> undef, float %74, i32 0
  %76 = shufflevector <8 x float> %75, <8 x float> undef, <8 x i32> zeroinitializer
  %77 = bitcast <8 x float> %76 to <8 x i32>
  %78 = add <8 x i32> %77, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %79 = bitcast <8 x i32> %78 to <8 x float>
  %80 = load i8*, i8** %65, align 8
  %81 = load i32, i32* %67, align 8
  %82 = insertelement <8 x i32> undef, i32 %81, i32 0
  %83 = shufflevector <8 x i32> %82, <8 x i32> undef, <8 x i32> zeroinitializer
  %84 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %60) #13
  %85 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %84, <8 x float> %73) #13
  %86 = fptosi <8 x float> %85 to <8 x i32>
  %87 = fadd <8 x float> %60, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %88 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %87) #13
  %89 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %88, <8 x float> %73) #13
  %90 = fptosi <8 x float> %89 to <8 x i32>
  %91 = fadd <8 x float> %87, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %92 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %91) #13
  %93 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %92, <8 x float> %73) #13
  %94 = fptosi <8 x float> %93 to <8 x i32>
  %95 = fadd <8 x float> %91, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %96 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %95) #13
  %97 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %96, <8 x float> %73) #13
  %98 = fptosi <8 x float> %97 to <8 x i32>
  %99 = load <8 x float>, <8 x float>* %42, align 32
  br label %100

100:                                              ; preds = %199, %12
  %101 = phi <8 x float> [ %46, %12 ], [ %99, %199 ]
  %102 = phi <8 x float> [ zeroinitializer, %12 ], [ %196, %199 ]
  %103 = phi <8 x float> [ zeroinitializer, %12 ], [ %195, %199 ]
  %104 = phi <8 x float> [ zeroinitializer, %12 ], [ %194, %199 ]
  %105 = phi <8 x float> [ zeroinitializer, %12 ], [ %193, %199 ]
  %106 = phi <8 x float> [ %28, %12 ], [ %202, %199 ]
  %107 = phi i64 [ 0, %12 ], [ %197, %199 ]
  %108 = phi <8 x float> [ %59, %12 ], [ %200, %199 ]
  %109 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %108) #13
  %110 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %109, <8 x float> %79) #13
  %111 = fptosi <8 x float> %110 to <8 x i32>
  %112 = mul <8 x i32> %83, %111
  %113 = fmul <8 x float> %106, %101
  %114 = add <8 x i32> %112, %86
  %115 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %80, <8 x i32> %114, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %116 = and <8 x i32> %115, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %117 = sitofp <8 x i32> %116 to <8 x float>
  %118 = fmul <8 x float> %117, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %119 = lshr <8 x i32> %115, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %120 = and <8 x i32> %119, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %121 = sitofp <8 x i32> %120 to <8 x float>
  %122 = fmul <8 x float> %121, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %123 = lshr <8 x i32> %115, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %124 = and <8 x i32> %123, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %125 = sitofp <8 x i32> %124 to <8 x float>
  %126 = fmul <8 x float> %125, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %127 = lshr <8 x i32> %115, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %128 = sitofp <8 x i32> %127 to <8 x float>
  %129 = fmul <8 x float> %128, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %130 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %113, <8 x float> %118, <8 x float> %105) #13
  %131 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %113, <8 x float> %122, <8 x float> %104) #13
  %132 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %113, <8 x float> %126, <8 x float> %103) #13
  %133 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %113, <8 x float> %129, <8 x float> %102) #13
  %134 = fmul <8 x float> %106, %50
  %135 = add <8 x i32> %112, %90
  %136 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %80, <8 x i32> %135, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %137 = and <8 x i32> %136, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %138 = sitofp <8 x i32> %137 to <8 x float>
  %139 = fmul <8 x float> %138, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %140 = lshr <8 x i32> %136, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %141 = and <8 x i32> %140, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %142 = sitofp <8 x i32> %141 to <8 x float>
  %143 = fmul <8 x float> %142, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %144 = lshr <8 x i32> %136, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %145 = and <8 x i32> %144, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %146 = sitofp <8 x i32> %145 to <8 x float>
  %147 = fmul <8 x float> %146, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %148 = lshr <8 x i32> %136, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %149 = sitofp <8 x i32> %148 to <8 x float>
  %150 = fmul <8 x float> %149, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %151 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %134, <8 x float> %139, <8 x float> %130) #13
  %152 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %134, <8 x float> %143, <8 x float> %131) #13
  %153 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %134, <8 x float> %147, <8 x float> %132) #13
  %154 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %134, <8 x float> %150, <8 x float> %133) #13
  %155 = fmul <8 x float> %106, %54
  %156 = add <8 x i32> %112, %94
  %157 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %80, <8 x i32> %156, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %158 = and <8 x i32> %157, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %159 = sitofp <8 x i32> %158 to <8 x float>
  %160 = fmul <8 x float> %159, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %161 = lshr <8 x i32> %157, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %162 = and <8 x i32> %161, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %163 = sitofp <8 x i32> %162 to <8 x float>
  %164 = fmul <8 x float> %163, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %165 = lshr <8 x i32> %157, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %166 = and <8 x i32> %165, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %167 = sitofp <8 x i32> %166 to <8 x float>
  %168 = fmul <8 x float> %167, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %169 = lshr <8 x i32> %157, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %170 = sitofp <8 x i32> %169 to <8 x float>
  %171 = fmul <8 x float> %170, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %172 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %155, <8 x float> %160, <8 x float> %151) #13
  %173 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %155, <8 x float> %164, <8 x float> %152) #13
  %174 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %155, <8 x float> %168, <8 x float> %153) #13
  %175 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %155, <8 x float> %171, <8 x float> %154) #13
  %176 = fmul <8 x float> %106, %58
  %177 = add <8 x i32> %112, %98
  %178 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %80, <8 x i32> %177, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %179 = and <8 x i32> %178, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %180 = sitofp <8 x i32> %179 to <8 x float>
  %181 = fmul <8 x float> %180, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %182 = lshr <8 x i32> %178, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %183 = and <8 x i32> %182, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %184 = sitofp <8 x i32> %183 to <8 x float>
  %185 = fmul <8 x float> %184, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %186 = lshr <8 x i32> %178, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %187 = and <8 x i32> %186, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %188 = sitofp <8 x i32> %187 to <8 x float>
  %189 = fmul <8 x float> %188, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %190 = lshr <8 x i32> %178, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %191 = sitofp <8 x i32> %190 to <8 x float>
  %192 = fmul <8 x float> %191, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %193 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %176, <8 x float> %181, <8 x float> %172) #13
  %194 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %176, <8 x float> %185, <8 x float> %173) #13
  %195 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %176, <8 x float> %189, <8 x float> %174) #13
  %196 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %176, <8 x float> %192, <8 x float> %175) #13
  %197 = add nuw nsw i64 %107, 1
  %198 = icmp eq i64 %197, 4
  br i1 %198, label %203, label %199

199:                                              ; preds = %100
  %200 = fadd <8 x float> %108, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %201 = getelementptr inbounds [4 x <8 x float>], [4 x <8 x float>]* %13, i64 0, i64 %197
  %202 = load <8 x float>, <8 x float>* %201, align 32
  br label %100

203:                                              ; preds = %100
  %204 = extractvalue { i8*, i8** } %15, 1
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %41) #13
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %23) #13
  %205 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %204) #10, !srcloc !98
  %206 = extractvalue { i8*, i8** } %205, 0
  %207 = extractvalue { i8*, i8** } %205, 1
  %208 = bitcast i8* %206 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %208(i64 %0, i8** %207, i64 %2, i64 %3, <8 x float> %193, <8 x float> %194, <8 x float> %195, <8 x float> %196, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL12store_u16_beEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = shl i64 %2, 2
  %17 = bitcast i8* %14 to i16**
  %18 = load i16*, i16** %17, align 8
  %19 = getelementptr inbounds i8, i8* %14, i64 8
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 8
  %22 = sext i32 %21 to i64
  %23 = mul i64 %22, %3
  %24 = getelementptr inbounds i16, i16* %18, i64 %23
  %25 = getelementptr inbounds i16, i16* %24, i64 %16
  %26 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %27 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %26, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %28 = fmul <8 x float> %27, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %29 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %28) #13
  %30 = shufflevector <8 x i32> %29, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %31 = shufflevector <8 x i32> %29, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %32 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %30, <4 x i32> %31) #13
  %33 = shl <8 x i16> %32, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %34 = lshr <8 x i16> %32, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = or <8 x i16> %33, %34
  %36 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %37 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %36, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %38 = fmul <8 x float> %37, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %39 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %38) #13
  %40 = shufflevector <8 x i32> %39, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %41 = shufflevector <8 x i32> %39, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %42 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %40, <4 x i32> %41) #13
  %43 = shl <8 x i16> %42, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %44 = lshr <8 x i16> %42, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %45 = or <8 x i16> %43, %44
  %46 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %6) #13
  %47 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %46, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %48 = fmul <8 x float> %47, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %49 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %48) #13
  %50 = shufflevector <8 x i32> %49, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %51 = shufflevector <8 x i32> %49, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %52 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %50, <4 x i32> %51) #13
  %53 = shl <8 x i16> %52, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %54 = lshr <8 x i16> %52, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %55 = or <8 x i16> %53, %54
  %56 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %7) #13
  %57 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %56, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %58 = fmul <8 x float> %57, <float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04, float 6.553500e+04>
  %59 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %58) #13
  %60 = shufflevector <8 x i32> %59, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %61 = shufflevector <8 x i32> %59, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %62 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %60, <4 x i32> %61) #13
  %63 = shl <8 x i16> %62, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %64 = lshr <8 x i16> %62, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %65 = or <8 x i16> %63, %64
  %66 = shufflevector <8 x i16> %35, <8 x i16> %45, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %67 = shufflevector <8 x i16> %35, <8 x i16> %45, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %68 = shufflevector <8 x i16> %55, <8 x i16> %65, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %69 = shufflevector <8 x i16> %55, <8 x i16> %65, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %70 = bitcast <8 x i16> %66 to <4 x i32>
  %71 = bitcast <8 x i16> %68 to <4 x i32>
  %72 = shufflevector <4 x i32> %70, <4 x i32> %71, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %73 = shufflevector <4 x i32> %70, <4 x i32> %71, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %74 = bitcast <8 x i16> %67 to <4 x i32>
  %75 = bitcast <8 x i16> %69 to <4 x i32>
  %76 = shufflevector <4 x i32> %74, <4 x i32> %75, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %77 = shufflevector <4 x i32> %74, <4 x i32> %75, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %78 = icmp eq i64 %0, 0
  br i1 %78, label %116, label %79, !prof !100

79:                                               ; preds = %12
  %80 = bitcast i16* %25 to double*
  %81 = bitcast <4 x i32> %72 to <2 x double>
  %82 = extractelement <2 x double> %81, i32 0
  store double %82, double* %80, align 1
  %83 = icmp eq i64 %0, 1
  br i1 %83, label %124, label %84

84:                                               ; preds = %79
  %85 = getelementptr inbounds i16, i16* %25, i64 4
  %86 = bitcast i16* %85 to double*
  %87 = extractelement <2 x double> %81, i32 1
  store double %87, double* %86, align 1
  %88 = icmp ugt i64 %0, 2
  br i1 %88, label %89, label %124

89:                                               ; preds = %84
  %90 = getelementptr inbounds i16, i16* %25, i64 8
  %91 = bitcast i16* %90 to double*
  %92 = bitcast <4 x i32> %73 to <2 x double>
  %93 = extractelement <2 x double> %92, i32 0
  store double %93, double* %91, align 1
  %94 = icmp eq i64 %0, 3
  br i1 %94, label %124, label %95

95:                                               ; preds = %89
  %96 = getelementptr inbounds i16, i16* %25, i64 12
  %97 = bitcast i16* %96 to double*
  %98 = extractelement <2 x double> %92, i32 1
  store double %98, double* %97, align 1
  %99 = icmp ugt i64 %0, 4
  br i1 %99, label %100, label %124

100:                                              ; preds = %95
  %101 = getelementptr inbounds i16, i16* %25, i64 16
  %102 = bitcast i16* %101 to double*
  %103 = bitcast <4 x i32> %76 to <2 x double>
  %104 = extractelement <2 x double> %103, i32 0
  store double %104, double* %102, align 1
  %105 = icmp eq i64 %0, 5
  br i1 %105, label %124, label %106

106:                                              ; preds = %100
  %107 = getelementptr inbounds i16, i16* %25, i64 20
  %108 = bitcast i16* %107 to double*
  %109 = extractelement <2 x double> %103, i32 1
  store double %109, double* %108, align 1
  %110 = icmp ugt i64 %0, 6
  br i1 %110, label %111, label %124

111:                                              ; preds = %106
  %112 = getelementptr inbounds i16, i16* %25, i64 24
  %113 = bitcast i16* %112 to double*
  %114 = bitcast <4 x i32> %77 to <2 x double>
  %115 = extractelement <2 x double> %114, i32 0
  store double %115, double* %113, align 1
  br label %124

116:                                              ; preds = %12
  %117 = bitcast i16* %25 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %117, align 1
  %118 = getelementptr inbounds i16, i16* %25, i64 8
  %119 = bitcast i16* %118 to <4 x i32>*
  store <4 x i32> %73, <4 x i32>* %119, align 1
  %120 = getelementptr inbounds i16, i16* %25, i64 16
  %121 = bitcast i16* %120 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %121, align 1
  %122 = getelementptr inbounds i16, i16* %25, i64 24
  %123 = bitcast i16* %122 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %123, align 1
  br label %124

124:                                              ; preds = %79, %84, %89, %95, %100, %106, %111, %116
  %125 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %126 = extractvalue { i8*, i8** } %125, 0
  %127 = extractvalue { i8*, i8** } %125, 1
  %128 = bitcast i8* %126 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %128(i64 %0, i8** %127, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8load_srcEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x float>*
  %17 = load <8 x float>, <8 x float>* %16, align 4
  %18 = getelementptr inbounds i8, i8* %14, i64 32
  %19 = bitcast i8* %18 to <8 x float>*
  %20 = load <8 x float>, <8 x float>* %19, align 4
  %21 = getelementptr inbounds i8, i8* %14, i64 64
  %22 = bitcast i8* %21 to <8 x float>*
  %23 = load <8 x float>, <8 x float>* %22, align 4
  %24 = getelementptr inbounds i8, i8* %14, i64 96
  %25 = bitcast i8* %24 to <8 x float>*
  %26 = load <8 x float>, <8 x float>* %25, align 4
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <8 x float> %17, <8 x float> %20, <8 x float> %23, <8 x float> %26, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9store_srcEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x float>*
  store <8 x float> %4, <8 x float>* %16, align 4
  %17 = getelementptr inbounds i8, i8* %14, i64 32
  %18 = bitcast i8* %17 to <8 x float>*
  store <8 x float> %5, <8 x float>* %18, align 4
  %19 = getelementptr inbounds i8, i8* %14, i64 64
  %20 = bitcast i8* %19 to <8 x float>*
  store <8 x float> %6, <8 x float>* %20, align 4
  %21 = getelementptr inbounds i8, i8* %14, i64 96
  %22 = bitcast i8* %21 to <8 x float>*
  store <8 x float> %7, <8 x float>* %22, align 4
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %26(i64 %0, i8** %25, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11store_src_aEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x float>*
  store <8 x float> %7, <8 x float>* %16, align 4
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8load_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x float>*
  %17 = load <8 x float>, <8 x float>* %16, align 4
  %18 = getelementptr inbounds i8, i8* %14, i64 32
  %19 = bitcast i8* %18 to <8 x float>*
  %20 = load <8 x float>, <8 x float>* %19, align 4
  %21 = getelementptr inbounds i8, i8* %14, i64 64
  %22 = bitcast i8* %21 to <8 x float>*
  %23 = load <8 x float>, <8 x float>* %22, align 4
  %24 = getelementptr inbounds i8, i8* %14, i64 96
  %25 = bitcast i8* %24 to <8 x float>*
  %26 = load <8 x float>, <8 x float>* %25, align 4
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %17, <8 x float> %20, <8 x float> %23, <8 x float> %26) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9store_dstEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x float>*
  store <8 x float> %8, <8 x float>* %16, align 4
  %17 = getelementptr inbounds i8, i8* %14, i64 32
  %18 = bitcast i8* %17 to <8 x float>*
  store <8 x float> %9, <8 x float>* %18, align 4
  %19 = getelementptr inbounds i8, i8* %14, i64 64
  %20 = bitcast i8* %19 to <8 x float>*
  store <8 x float> %10, <8 x float>* %20, align 4
  %21 = getelementptr inbounds i8, i8* %14, i64 96
  %22 = bitcast i8* %21 to <8 x float>*
  store <8 x float> %11, <8 x float>* %22, align 4
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %26(i64 %0, i8** %25, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8scale_u8EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i8, i8* %24, i64 6
  %28 = load i8, i8* %27, align 1
  %29 = insertelement <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i8> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i8, i8* %24, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = insertelement <8 x i8> %31, i8 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i8> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i8, i8* %24, i64 4
  %38 = load i8, i8* %37, align 1
  %39 = insertelement <8 x i8> %36, i8 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i8> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i8* %24 to <4 x i8>*
  %43 = load <4 x i8>, <4 x i8>* %42, align 1
  %44 = shufflevector <4 x i8> %43, <4 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i8> %44, <8 x i8> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i8, i8* %24, i64 2
  %48 = load i8, i8* %47, align 1
  %49 = insertelement <8 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i8> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i8* %24 to <2 x i8>*
  %53 = load <2 x i8>, <2 x i8>* %52, align 1
  %54 = shufflevector <2 x i8> %53, <2 x i8> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i8> %54, <8 x i8> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i8, i8* %24, align 1
  %58 = insertelement <8 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i8* %24 to <8 x i8>*
  %61 = load <8 x i8>, <8 x i8>* %60, align 1
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i8> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = uitofp <8 x i8> %64 to <8 x float>
  %66 = fmul <8 x float> %65, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %67 = fmul <8 x float> %66, %4
  %68 = fmul <8 x float> %66, %5
  %69 = fmul <8 x float> %66, %6
  %70 = fmul <8 x float> %66, %7
  %71 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %72 = extractvalue { i8*, i8** } %71, 0
  %73 = extractvalue { i8*, i8** } %71, 1
  %74 = bitcast i8* %72 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %74(i64 %0, i8** %73, i64 %2, i64 %3, <8 x float> %67, <8 x float> %68, <8 x float> %69, <8 x float> %70, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9scale_565EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 6
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i16, i16* %24, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <8 x i16> %31, i16 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i16> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i16, i16* %24, i64 4
  %38 = load i16, i16* %37, align 2
  %39 = insertelement <8 x i16> %36, i16 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i16> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i16* %24 to <4 x i16>*
  %43 = load <4 x i16>, <4 x i16>* %42, align 2
  %44 = shufflevector <4 x i16> %43, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i16> %44, <8 x i16> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i16, i16* %24, i64 2
  %48 = load i16, i16* %47, align 2
  %49 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i16> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i16* %24 to <2 x i16>*
  %53 = load <2 x i16>, <2 x i16>* %52, align 2
  %54 = shufflevector <2 x i16> %53, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i16> %54, <8 x i16> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i16, i16* %24, align 2
  %58 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i16* %24 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = zext <8 x i16> %64 to <8 x i32>
  %66 = and <8 x i32> %65, <i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488>
  %67 = sitofp <8 x i32> %66 to <8 x float>
  %68 = fmul <8 x float> %67, <float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000>
  %69 = and <8 x i32> %65, <i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016>
  %70 = sitofp <8 x i32> %69 to <8 x float>
  %71 = fmul <8 x float> %70, <float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000>
  %72 = and <8 x i32> %65, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %73 = sitofp <8 x i32> %72 to <8 x float>
  %74 = fmul <8 x float> %73, <float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000>
  %75 = fcmp olt <8 x float> %7, %11
  %76 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %71, <8 x float> %74) #13
  %77 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %68, <8 x float> %76) #13
  %78 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %71, <8 x float> %74) #13
  %79 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %68, <8 x float> %78) #13
  %80 = select <8 x i1> %75, <8 x float> %77, <8 x float> %79
  %81 = fmul <8 x float> %68, %4
  %82 = fmul <8 x float> %71, %5
  %83 = fmul <8 x float> %74, %6
  %84 = fmul <8 x float> %80, %7
  %85 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %86 = extractvalue { i8*, i8** } %85, 0
  %87 = extractvalue { i8*, i8** } %85, 1
  %88 = bitcast i8* %86 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %88(i64 %0, i8** %87, i64 %2, i64 %3, <8 x float> %81, <8 x float> %82, <8 x float> %83, <8 x float> %84, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL13scale_1_floatEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = fmul <8 x float> %19, %4
  %21 = fmul <8 x float> %19, %5
  %22 = fmul <8 x float> %19, %6
  %23 = fmul <8 x float> %19, %7
  %24 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %25 = extractvalue { i8*, i8** } %24, 0
  %26 = extractvalue { i8*, i8** } %24, 1
  %27 = bitcast i8* %25 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %27(i64 %0, i8** %26, i64 %2, i64 %3, <8 x float> %20, <8 x float> %21, <8 x float> %22, <8 x float> %23, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL12scale_nativeEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x float>*
  %17 = load <8 x float>, <8 x float>* %16, align 4
  %18 = fmul <8 x float> %17, %4
  %19 = fmul <8 x float> %17, %5
  %20 = fmul <8 x float> %17, %6
  %21 = fmul <8 x float> %17, %7
  %22 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %23 = extractvalue { i8*, i8** } %22, 0
  %24 = extractvalue { i8*, i8** } %22, 1
  %25 = bitcast i8* %23 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %25(i64 %0, i8** %24, i64 %2, i64 %3, <8 x float> %18, <8 x float> %19, <8 x float> %20, <8 x float> %21, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7lerp_u8EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i8, i8* %24, i64 6
  %28 = load i8, i8* %27, align 1
  %29 = insertelement <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i8> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i8, i8* %24, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = insertelement <8 x i8> %31, i8 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i8> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i8, i8* %24, i64 4
  %38 = load i8, i8* %37, align 1
  %39 = insertelement <8 x i8> %36, i8 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i8> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i8* %24 to <4 x i8>*
  %43 = load <4 x i8>, <4 x i8>* %42, align 1
  %44 = shufflevector <4 x i8> %43, <4 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i8> %44, <8 x i8> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i8, i8* %24, i64 2
  %48 = load i8, i8* %47, align 1
  %49 = insertelement <8 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i8> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i8* %24 to <2 x i8>*
  %53 = load <2 x i8>, <2 x i8>* %52, align 1
  %54 = shufflevector <2 x i8> %53, <2 x i8> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i8> %54, <8 x i8> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i8, i8* %24, align 1
  %58 = insertelement <8 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i8* %24 to <8 x i8>*
  %61 = load <8 x i8>, <8 x i8>* %60, align 1
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i8> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = uitofp <8 x i8> %64 to <8 x float>
  %66 = fmul <8 x float> %65, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %67 = fsub <8 x float> %4, %8
  %68 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %67, <8 x float> %66, <8 x float> %8) #13
  %69 = fsub <8 x float> %5, %9
  %70 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %69, <8 x float> %66, <8 x float> %9) #13
  %71 = fsub <8 x float> %6, %10
  %72 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %71, <8 x float> %66, <8 x float> %10) #13
  %73 = fsub <8 x float> %7, %11
  %74 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %73, <8 x float> %66, <8 x float> %11) #13
  %75 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %76 = extractvalue { i8*, i8** } %75, 0
  %77 = extractvalue { i8*, i8** } %75, 1
  %78 = bitcast i8* %76 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %78(i64 %0, i8** %77, i64 %2, i64 %3, <8 x float> %68, <8 x float> %70, <8 x float> %72, <8 x float> %74, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8lerp_565EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i16, i16* %24, i64 6
  %28 = load i16, i16* %27, align 2
  %29 = insertelement <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i16> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i16, i16* %24, i64 5
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <8 x i16> %31, i16 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i16> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i16, i16* %24, i64 4
  %38 = load i16, i16* %37, align 2
  %39 = insertelement <8 x i16> %36, i16 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i16> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i16* %24 to <4 x i16>*
  %43 = load <4 x i16>, <4 x i16>* %42, align 2
  %44 = shufflevector <4 x i16> %43, <4 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i16> %44, <8 x i16> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i16, i16* %24, i64 2
  %48 = load i16, i16* %47, align 2
  %49 = insertelement <8 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i16> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i16* %24 to <2 x i16>*
  %53 = load <2 x i16>, <2 x i16>* %52, align 2
  %54 = shufflevector <2 x i16> %53, <2 x i16> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i16> %54, <8 x i16> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i16, i16* %24, align 2
  %58 = insertelement <8 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i16* %24 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %40, %50, %56, %59
  %64 = phi <8 x i16> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = zext <8 x i16> %64 to <8 x i32>
  %66 = and <8 x i32> %65, <i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488, i32 63488>
  %67 = sitofp <8 x i32> %66 to <8 x float>
  %68 = fmul <8 x float> %67, <float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000, float 0x3EF0842100000000>
  %69 = and <8 x i32> %65, <i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016>
  %70 = sitofp <8 x i32> %69 to <8 x float>
  %71 = fmul <8 x float> %70, <float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000, float 0x3F40410420000000>
  %72 = and <8 x i32> %65, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %73 = sitofp <8 x i32> %72 to <8 x float>
  %74 = fmul <8 x float> %73, <float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000, float 0x3FA0842100000000>
  %75 = fcmp olt <8 x float> %7, %11
  %76 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %71, <8 x float> %74) #13
  %77 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %68, <8 x float> %76) #13
  %78 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %71, <8 x float> %74) #13
  %79 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %68, <8 x float> %78) #13
  %80 = select <8 x i1> %75, <8 x float> %77, <8 x float> %79
  %81 = fsub <8 x float> %4, %8
  %82 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %81, <8 x float> %68, <8 x float> %8) #13
  %83 = fsub <8 x float> %5, %9
  %84 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %83, <8 x float> %71, <8 x float> %9) #13
  %85 = fsub <8 x float> %6, %10
  %86 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %85, <8 x float> %74, <8 x float> %10) #13
  %87 = fsub <8 x float> %7, %11
  %88 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %87, <8 x float> %80, <8 x float> %11) #13
  %89 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %90 = extractvalue { i8*, i8** } %89, 0
  %91 = extractvalue { i8*, i8** } %89, 1
  %92 = bitcast i8* %90 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %92(i64 %0, i8** %91, i64 %2, i64 %3, <8 x float> %82, <8 x float> %84, <8 x float> %86, <8 x float> %88, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL12lerp_1_floatEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = fsub <8 x float> %4, %8
  %21 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %20, <8 x float> %19, <8 x float> %8) #13
  %22 = fsub <8 x float> %5, %9
  %23 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> %19, <8 x float> %9) #13
  %24 = fsub <8 x float> %6, %10
  %25 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %24, <8 x float> %19, <8 x float> %10) #13
  %26 = fsub <8 x float> %7, %11
  %27 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %26, <8 x float> %19, <8 x float> %11) #13
  %28 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %29 = extractvalue { i8*, i8** } %28, 0
  %30 = extractvalue { i8*, i8** } %28, 1
  %31 = bitcast i8* %29 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %31(i64 %0, i8** %30, i64 %2, i64 %3, <8 x float> %21, <8 x float> %23, <8 x float> %25, <8 x float> %27, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11lerp_nativeEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x float>*
  %17 = load <8 x float>, <8 x float>* %16, align 4
  %18 = fsub <8 x float> %4, %8
  %19 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %18, <8 x float> %17, <8 x float> %8) #13
  %20 = fsub <8 x float> %5, %9
  %21 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %20, <8 x float> %17, <8 x float> %9) #13
  %22 = fsub <8 x float> %6, %10
  %23 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> %17, <8 x float> %10) #13
  %24 = fsub <8 x float> %7, %11
  %25 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %24, <8 x float> %17, <8 x float> %11) #13
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <8 x float> %19, <8 x float> %21, <8 x float> %23, <8 x float> %25, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7dstatopEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %7, %8
  %14 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %15 = fmul <8 x float> %14, %4
  %16 = fadd <8 x float> %13, %15
  %17 = fmul <8 x float> %7, %9
  %18 = fmul <8 x float> %14, %5
  %19 = fadd <8 x float> %17, %18
  %20 = fmul <8 x float> %7, %10
  %21 = fmul <8 x float> %14, %6
  %22 = fadd <8 x float> %20, %21
  %23 = fmul <8 x float> %7, %11
  %24 = fmul <8 x float> %14, %7
  %25 = fadd <8 x float> %23, %24
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <8 x float> %16, <8 x float> %19, <8 x float> %22, <8 x float> %25, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL5dstinEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %7, %8
  %14 = fmul <8 x float> %7, %9
  %15 = fmul <8 x float> %7, %10
  %16 = fmul <8 x float> %7, %11
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <8 x float> %13, <8 x float> %14, <8 x float> %15, <8 x float> %16, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL6dstoutEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %14 = fmul <8 x float> %13, %8
  %15 = fmul <8 x float> %13, %9
  %16 = fmul <8 x float> %13, %10
  %17 = fmul <8 x float> %13, %11
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %21(i64 %0, i8** %20, i64 %2, i64 %3, <8 x float> %14, <8 x float> %15, <8 x float> %16, <8 x float> %17, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7dstoverEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %14 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %13, <8 x float> %8) #13
  %15 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %13, <8 x float> %9) #13
  %16 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %6, <8 x float> %13, <8 x float> %10) #13
  %17 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %7, <8 x float> %13, <8 x float> %11) #13
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %21(i64 %0, i8** %20, i64 %2, i64 %3, <8 x float> %14, <8 x float> %15, <8 x float> %16, <8 x float> %17, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7srcatopEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %4, %11
  %14 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %15 = fmul <8 x float> %14, %8
  %16 = fadd <8 x float> %15, %13
  %17 = fmul <8 x float> %5, %11
  %18 = fmul <8 x float> %14, %9
  %19 = fadd <8 x float> %18, %17
  %20 = fmul <8 x float> %6, %11
  %21 = fmul <8 x float> %14, %10
  %22 = fadd <8 x float> %21, %20
  %23 = fmul <8 x float> %7, %11
  %24 = fmul <8 x float> %14, %11
  %25 = fadd <8 x float> %23, %24
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <8 x float> %16, <8 x float> %19, <8 x float> %22, <8 x float> %25, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL5srcinEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %4, %11
  %14 = fmul <8 x float> %5, %11
  %15 = fmul <8 x float> %6, %11
  %16 = fmul <8 x float> %7, %11
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <8 x float> %13, <8 x float> %14, <8 x float> %15, <8 x float> %16, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL6srcoutEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %14 = fmul <8 x float> %13, %4
  %15 = fmul <8 x float> %13, %5
  %16 = fmul <8 x float> %13, %6
  %17 = fmul <8 x float> %13, %7
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %21(i64 %0, i8** %20, i64 %2, i64 %3, <8 x float> %14, <8 x float> %15, <8 x float> %16, <8 x float> %17, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7srcoverEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %14 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %8, <8 x float> %13, <8 x float> %4) #13
  %15 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %9, <8 x float> %13, <8 x float> %5) #13
  %16 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %10, <8 x float> %13, <8 x float> %6) #13
  %17 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %11, <8 x float> %13, <8 x float> %7) #13
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %21(i64 %0, i8** %20, i64 %2, i64 %3, <8 x float> %14, <8 x float> %15, <8 x float> %16, <8 x float> %17, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL5clearEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8modulateEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %4, %8
  %14 = fmul <8 x float> %5, %9
  %15 = fmul <8 x float> %6, %10
  %16 = fmul <8 x float> %7, %11
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <8 x float> %13, <8 x float> %14, <8 x float> %15, <8 x float> %16, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8multiplyEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %14 = fmul <8 x float> %13, %4
  %15 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %16 = fmul <8 x float> %15, %8
  %17 = fadd <8 x float> %16, %14
  %18 = fmul <8 x float> %4, %8
  %19 = fadd <8 x float> %18, %17
  %20 = fmul <8 x float> %13, %5
  %21 = fmul <8 x float> %15, %9
  %22 = fadd <8 x float> %21, %20
  %23 = fmul <8 x float> %5, %9
  %24 = fadd <8 x float> %23, %22
  %25 = fmul <8 x float> %13, %6
  %26 = fmul <8 x float> %15, %10
  %27 = fadd <8 x float> %26, %25
  %28 = fmul <8 x float> %6, %10
  %29 = fadd <8 x float> %28, %27
  %30 = fmul <8 x float> %13, %7
  %31 = fmul <8 x float> %15, %11
  %32 = fadd <8 x float> %31, %30
  %33 = fmul <8 x float> %7, %11
  %34 = fadd <8 x float> %33, %32
  %35 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %36 = extractvalue { i8*, i8** } %35, 0
  %37 = extractvalue { i8*, i8** } %35, 1
  %38 = bitcast i8* %36 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %38(i64 %0, i8** %37, i64 %2, i64 %3, <8 x float> %19, <8 x float> %24, <8 x float> %29, <8 x float> %34, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL5plus_EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fadd <8 x float> %4, %8
  %14 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %13, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %15 = fadd <8 x float> %5, %9
  %16 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %15, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %17 = fadd <8 x float> %6, %10
  %18 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %17, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %19 = fadd <8 x float> %7, %11
  %20 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %19, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %21 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %22 = extractvalue { i8*, i8** } %21, 0
  %23 = extractvalue { i8*, i8** } %21, 1
  %24 = bitcast i8* %22 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %24(i64 %0, i8** %23, i64 %2, i64 %3, <8 x float> %14, <8 x float> %16, <8 x float> %18, <8 x float> %20, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL6screenEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fadd <8 x float> %4, %8
  %14 = fmul <8 x float> %4, %8
  %15 = fsub <8 x float> %13, %14
  %16 = fadd <8 x float> %5, %9
  %17 = fmul <8 x float> %5, %9
  %18 = fsub <8 x float> %16, %17
  %19 = fadd <8 x float> %6, %10
  %20 = fmul <8 x float> %6, %10
  %21 = fsub <8 x float> %19, %20
  %22 = fadd <8 x float> %7, %11
  %23 = fmul <8 x float> %7, %11
  %24 = fsub <8 x float> %22, %23
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <8 x float> %15, <8 x float> %18, <8 x float> %21, <8 x float> %24, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL4xor_EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %14 = fmul <8 x float> %13, %4
  %15 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %16 = fmul <8 x float> %15, %8
  %17 = fadd <8 x float> %16, %14
  %18 = fmul <8 x float> %13, %5
  %19 = fmul <8 x float> %15, %9
  %20 = fadd <8 x float> %19, %18
  %21 = fmul <8 x float> %13, %6
  %22 = fmul <8 x float> %15, %10
  %23 = fadd <8 x float> %22, %21
  %24 = fmul <8 x float> %13, %7
  %25 = fmul <8 x float> %15, %11
  %26 = fadd <8 x float> %25, %24
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <8 x float> %17, <8 x float> %20, <8 x float> %23, <8 x float> %26, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9colorburnEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fcmp oeq <8 x float> %8, %11
  %14 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %15 = fmul <8 x float> %14, %4
  %16 = fadd <8 x float> %15, %8
  %17 = fcmp oeq <8 x float> %4, zeroinitializer
  %18 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %19 = fmul <8 x float> %18, %8
  %20 = fsub <8 x float> %11, %8
  %21 = fmul <8 x float> %20, %7
  %22 = tail call <8 x float> @llvm.x86.avx.rcp.ps.256(<8 x float> %4) #13
  %23 = fmul <8 x float> %21, %22
  %24 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %11, <8 x float> %23) #13
  %25 = fsub <8 x float> %11, %24
  %26 = fmul <8 x float> %25, %7
  %27 = fadd <8 x float> %15, %26
  %28 = fadd <8 x float> %19, %27
  %29 = select <8 x i1> %17, <8 x float> %19, <8 x float> %28
  %30 = select <8 x i1> %13, <8 x float> %16, <8 x float> %29
  %31 = fcmp oeq <8 x float> %9, %11
  %32 = fmul <8 x float> %14, %5
  %33 = fadd <8 x float> %32, %9
  %34 = fcmp oeq <8 x float> %5, zeroinitializer
  %35 = fmul <8 x float> %18, %9
  %36 = fsub <8 x float> %11, %9
  %37 = fmul <8 x float> %36, %7
  %38 = tail call <8 x float> @llvm.x86.avx.rcp.ps.256(<8 x float> %5) #13
  %39 = fmul <8 x float> %37, %38
  %40 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %11, <8 x float> %39) #13
  %41 = fsub <8 x float> %11, %40
  %42 = fmul <8 x float> %41, %7
  %43 = fadd <8 x float> %32, %42
  %44 = fadd <8 x float> %35, %43
  %45 = select <8 x i1> %34, <8 x float> %35, <8 x float> %44
  %46 = select <8 x i1> %31, <8 x float> %33, <8 x float> %45
  %47 = fcmp oeq <8 x float> %10, %11
  %48 = fmul <8 x float> %14, %6
  %49 = fadd <8 x float> %48, %10
  %50 = fcmp oeq <8 x float> %6, zeroinitializer
  %51 = fmul <8 x float> %18, %10
  %52 = fsub <8 x float> %11, %10
  %53 = fmul <8 x float> %52, %7
  %54 = tail call <8 x float> @llvm.x86.avx.rcp.ps.256(<8 x float> %6) #13
  %55 = fmul <8 x float> %53, %54
  %56 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %11, <8 x float> %55) #13
  %57 = fsub <8 x float> %11, %56
  %58 = fmul <8 x float> %57, %7
  %59 = fadd <8 x float> %48, %58
  %60 = fadd <8 x float> %51, %59
  %61 = select <8 x i1> %50, <8 x float> %51, <8 x float> %60
  %62 = select <8 x i1> %47, <8 x float> %49, <8 x float> %61
  %63 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %11, <8 x float> %18, <8 x float> %7) #13
  %64 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %65 = extractvalue { i8*, i8** } %64, 0
  %66 = extractvalue { i8*, i8** } %64, 1
  %67 = bitcast i8* %65 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %67(i64 %0, i8** %66, i64 %2, i64 %3, <8 x float> %30, <8 x float> %46, <8 x float> %62, <8 x float> %63, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10colordodgeEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fcmp oeq <8 x float> %8, zeroinitializer
  %14 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %15 = fmul <8 x float> %14, %4
  %16 = fcmp oeq <8 x float> %4, %7
  %17 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %18 = fmul <8 x float> %17, %8
  %19 = fmul <8 x float> %7, %8
  %20 = fsub <8 x float> %7, %4
  %21 = tail call <8 x float> @llvm.x86.avx.rcp.ps.256(<8 x float> %20) #13
  %22 = fmul <8 x float> %19, %21
  %23 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %11, <8 x float> %22) #13
  %24 = fmul <8 x float> %23, %7
  %25 = fadd <8 x float> %15, %24
  %26 = select <8 x i1> %16, <8 x float> %4, <8 x float> %25
  %27 = fadd <8 x float> %18, %26
  %28 = select <8 x i1> %13, <8 x float> %15, <8 x float> %27
  %29 = fcmp oeq <8 x float> %9, zeroinitializer
  %30 = fmul <8 x float> %14, %5
  %31 = fcmp oeq <8 x float> %5, %7
  %32 = fmul <8 x float> %17, %9
  %33 = fmul <8 x float> %7, %9
  %34 = fsub <8 x float> %7, %5
  %35 = tail call <8 x float> @llvm.x86.avx.rcp.ps.256(<8 x float> %34) #13
  %36 = fmul <8 x float> %33, %35
  %37 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %11, <8 x float> %36) #13
  %38 = fmul <8 x float> %37, %7
  %39 = fadd <8 x float> %30, %38
  %40 = select <8 x i1> %31, <8 x float> %5, <8 x float> %39
  %41 = fadd <8 x float> %32, %40
  %42 = select <8 x i1> %29, <8 x float> %30, <8 x float> %41
  %43 = fcmp oeq <8 x float> %10, zeroinitializer
  %44 = fmul <8 x float> %14, %6
  %45 = fcmp oeq <8 x float> %6, %7
  %46 = fmul <8 x float> %17, %10
  %47 = fmul <8 x float> %7, %10
  %48 = fsub <8 x float> %7, %6
  %49 = tail call <8 x float> @llvm.x86.avx.rcp.ps.256(<8 x float> %48) #13
  %50 = fmul <8 x float> %47, %49
  %51 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %11, <8 x float> %50) #13
  %52 = fmul <8 x float> %51, %7
  %53 = fadd <8 x float> %44, %52
  %54 = select <8 x i1> %45, <8 x float> %6, <8 x float> %53
  %55 = fadd <8 x float> %46, %54
  %56 = select <8 x i1> %43, <8 x float> %44, <8 x float> %55
  %57 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %11, <8 x float> %17, <8 x float> %7) #13
  %58 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %59 = extractvalue { i8*, i8** } %58, 0
  %60 = extractvalue { i8*, i8** } %58, 1
  %61 = bitcast i8* %59 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %61(i64 %0, i8** %60, i64 %2, i64 %3, <8 x float> %28, <8 x float> %42, <8 x float> %56, <8 x float> %57, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL6darkenEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fadd <8 x float> %4, %8
  %14 = fmul <8 x float> %4, %11
  %15 = fmul <8 x float> %7, %8
  %16 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %14, <8 x float> %15) #13
  %17 = fsub <8 x float> %13, %16
  %18 = fadd <8 x float> %5, %9
  %19 = fmul <8 x float> %5, %11
  %20 = fmul <8 x float> %7, %9
  %21 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %19, <8 x float> %20) #13
  %22 = fsub <8 x float> %18, %21
  %23 = fadd <8 x float> %6, %10
  %24 = fmul <8 x float> %6, %11
  %25 = fmul <8 x float> %7, %10
  %26 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %24, <8 x float> %25) #13
  %27 = fsub <8 x float> %23, %26
  %28 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %29 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %11, <8 x float> %28, <8 x float> %7) #13
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <8 x float> %17, <8 x float> %22, <8 x float> %27, <8 x float> %29, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10differenceEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fadd <8 x float> %4, %8
  %14 = fmul <8 x float> %4, %11
  %15 = fmul <8 x float> %7, %8
  %16 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %14, <8 x float> %15) #13
  %17 = fadd <8 x float> %16, %16
  %18 = fsub <8 x float> %13, %17
  %19 = fadd <8 x float> %5, %9
  %20 = fmul <8 x float> %5, %11
  %21 = fmul <8 x float> %7, %9
  %22 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %20, <8 x float> %21) #13
  %23 = fadd <8 x float> %22, %22
  %24 = fsub <8 x float> %19, %23
  %25 = fadd <8 x float> %6, %10
  %26 = fmul <8 x float> %6, %11
  %27 = fmul <8 x float> %7, %10
  %28 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %26, <8 x float> %27) #13
  %29 = fadd <8 x float> %28, %28
  %30 = fsub <8 x float> %25, %29
  %31 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %32 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %11, <8 x float> %31, <8 x float> %7) #13
  %33 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %34 = extractvalue { i8*, i8** } %33, 0
  %35 = extractvalue { i8*, i8** } %33, 1
  %36 = bitcast i8* %34 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %36(i64 %0, i8** %35, i64 %2, i64 %3, <8 x float> %18, <8 x float> %24, <8 x float> %30, <8 x float> %32, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9exclusionEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fadd <8 x float> %4, %8
  %14 = fmul <8 x float> %4, %8
  %15 = fadd <8 x float> %14, %14
  %16 = fsub <8 x float> %13, %15
  %17 = fadd <8 x float> %5, %9
  %18 = fmul <8 x float> %5, %9
  %19 = fadd <8 x float> %18, %18
  %20 = fsub <8 x float> %17, %19
  %21 = fadd <8 x float> %6, %10
  %22 = fmul <8 x float> %6, %10
  %23 = fadd <8 x float> %22, %22
  %24 = fsub <8 x float> %21, %23
  %25 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %26 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %11, <8 x float> %25, <8 x float> %7) #13
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <8 x float> %16, <8 x float> %20, <8 x float> %24, <8 x float> %26, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9hardlightEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %14 = fmul <8 x float> %13, %4
  %15 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %16 = fmul <8 x float> %15, %8
  %17 = fadd <8 x float> %16, %14
  %18 = fadd <8 x float> %4, %4
  %19 = fcmp ole <8 x float> %18, %7
  %20 = fmul <8 x float> %4, %8
  %21 = fadd <8 x float> %20, %20
  %22 = fmul <8 x float> %7, %11
  %23 = fsub <8 x float> %11, %8
  %24 = fsub <8 x float> %7, %4
  %25 = fmul <8 x float> %24, %23
  %26 = fadd <8 x float> %25, %25
  %27 = fsub <8 x float> %22, %26
  %28 = select <8 x i1> %19, <8 x float> %21, <8 x float> %27
  %29 = fadd <8 x float> %17, %28
  %30 = fmul <8 x float> %13, %5
  %31 = fmul <8 x float> %15, %9
  %32 = fadd <8 x float> %31, %30
  %33 = fadd <8 x float> %5, %5
  %34 = fcmp ole <8 x float> %33, %7
  %35 = fmul <8 x float> %5, %9
  %36 = fadd <8 x float> %35, %35
  %37 = fsub <8 x float> %11, %9
  %38 = fsub <8 x float> %7, %5
  %39 = fmul <8 x float> %38, %37
  %40 = fadd <8 x float> %39, %39
  %41 = fsub <8 x float> %22, %40
  %42 = select <8 x i1> %34, <8 x float> %36, <8 x float> %41
  %43 = fadd <8 x float> %32, %42
  %44 = fmul <8 x float> %13, %6
  %45 = fmul <8 x float> %15, %10
  %46 = fadd <8 x float> %45, %44
  %47 = fadd <8 x float> %6, %6
  %48 = fcmp ole <8 x float> %47, %7
  %49 = fmul <8 x float> %6, %10
  %50 = fadd <8 x float> %49, %49
  %51 = fsub <8 x float> %11, %10
  %52 = fsub <8 x float> %7, %6
  %53 = fmul <8 x float> %52, %51
  %54 = fadd <8 x float> %53, %53
  %55 = fsub <8 x float> %22, %54
  %56 = select <8 x i1> %48, <8 x float> %50, <8 x float> %55
  %57 = fadd <8 x float> %46, %56
  %58 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %11, <8 x float> %15, <8 x float> %7) #13
  %59 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %60 = extractvalue { i8*, i8** } %59, 0
  %61 = extractvalue { i8*, i8** } %59, 1
  %62 = bitcast i8* %60 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %62(i64 %0, i8** %61, i64 %2, i64 %3, <8 x float> %29, <8 x float> %43, <8 x float> %57, <8 x float> %58, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7lightenEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fadd <8 x float> %4, %8
  %14 = fmul <8 x float> %4, %11
  %15 = fmul <8 x float> %7, %8
  %16 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %14, <8 x float> %15) #13
  %17 = fsub <8 x float> %13, %16
  %18 = fadd <8 x float> %5, %9
  %19 = fmul <8 x float> %5, %11
  %20 = fmul <8 x float> %7, %9
  %21 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %19, <8 x float> %20) #13
  %22 = fsub <8 x float> %18, %21
  %23 = fadd <8 x float> %6, %10
  %24 = fmul <8 x float> %6, %11
  %25 = fmul <8 x float> %7, %10
  %26 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> %25) #13
  %27 = fsub <8 x float> %23, %26
  %28 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %29 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %11, <8 x float> %28, <8 x float> %7) #13
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <8 x float> %17, <8 x float> %22, <8 x float> %27, <8 x float> %29, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7overlayEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %14 = fmul <8 x float> %13, %4
  %15 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %16 = fmul <8 x float> %15, %8
  %17 = fadd <8 x float> %16, %14
  %18 = fadd <8 x float> %8, %8
  %19 = fcmp ole <8 x float> %18, %11
  %20 = fmul <8 x float> %4, %8
  %21 = fadd <8 x float> %20, %20
  %22 = fmul <8 x float> %7, %11
  %23 = fsub <8 x float> %11, %8
  %24 = fsub <8 x float> %7, %4
  %25 = fmul <8 x float> %24, %23
  %26 = fadd <8 x float> %25, %25
  %27 = fsub <8 x float> %22, %26
  %28 = select <8 x i1> %19, <8 x float> %21, <8 x float> %27
  %29 = fadd <8 x float> %17, %28
  %30 = fmul <8 x float> %13, %5
  %31 = fmul <8 x float> %15, %9
  %32 = fadd <8 x float> %31, %30
  %33 = fadd <8 x float> %9, %9
  %34 = fcmp ole <8 x float> %33, %11
  %35 = fmul <8 x float> %5, %9
  %36 = fadd <8 x float> %35, %35
  %37 = fsub <8 x float> %11, %9
  %38 = fsub <8 x float> %7, %5
  %39 = fmul <8 x float> %38, %37
  %40 = fadd <8 x float> %39, %39
  %41 = fsub <8 x float> %22, %40
  %42 = select <8 x i1> %34, <8 x float> %36, <8 x float> %41
  %43 = fadd <8 x float> %32, %42
  %44 = fmul <8 x float> %13, %6
  %45 = fmul <8 x float> %15, %10
  %46 = fadd <8 x float> %45, %44
  %47 = fadd <8 x float> %10, %10
  %48 = fcmp ole <8 x float> %47, %11
  %49 = fmul <8 x float> %6, %10
  %50 = fadd <8 x float> %49, %49
  %51 = fsub <8 x float> %11, %10
  %52 = fsub <8 x float> %7, %6
  %53 = fmul <8 x float> %52, %51
  %54 = fadd <8 x float> %53, %53
  %55 = fsub <8 x float> %22, %54
  %56 = select <8 x i1> %48, <8 x float> %50, <8 x float> %55
  %57 = fadd <8 x float> %46, %56
  %58 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %11, <8 x float> %15, <8 x float> %7) #13
  %59 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %60 = extractvalue { i8*, i8** } %59, 0
  %61 = extractvalue { i8*, i8** } %59, 1
  %62 = bitcast i8* %60 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %62(i64 %0, i8** %61, i64 %2, i64 %3, <8 x float> %29, <8 x float> %43, <8 x float> %57, <8 x float> %58, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9softlightEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fcmp ogt <8 x float> %11, zeroinitializer
  %14 = fdiv <8 x float> %8, %11
  %15 = select <8 x i1> %13, <8 x float> %14, <8 x float> zeroinitializer
  %16 = fadd <8 x float> %4, %4
  %17 = fadd <8 x float> %15, %15
  %18 = fadd <8 x float> %17, %17
  %19 = fsub <8 x float> %16, %7
  %20 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %15
  %21 = fmul <8 x float> %19, %20
  %22 = fadd <8 x float> %21, %7
  %23 = fmul <8 x float> %22, %8
  %24 = fmul <8 x float> %18, %18
  %25 = fadd <8 x float> %18, %24
  %26 = fadd <8 x float> %15, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %27 = fmul <8 x float> %26, %25
  %28 = fmul <8 x float> %15, <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>
  %29 = fadd <8 x float> %28, %27
  %30 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %15) #13
  %31 = fsub <8 x float> %30, %15
  %32 = fmul <8 x float> %7, %8
  %33 = fmul <8 x float> %19, %11
  %34 = fadd <8 x float> %8, %8
  %35 = fadd <8 x float> %34, %34
  %36 = fcmp ole <8 x float> %35, %11
  %37 = select <8 x i1> %36, <8 x float> %29, <8 x float> %31
  %38 = fmul <8 x float> %33, %37
  %39 = fadd <8 x float> %32, %38
  %40 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %41 = fmul <8 x float> %40, %4
  %42 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %43 = fmul <8 x float> %42, %8
  %44 = fadd <8 x float> %43, %41
  %45 = fcmp ole <8 x float> %16, %7
  %46 = select <8 x i1> %45, <8 x float> %23, <8 x float> %39
  %47 = fadd <8 x float> %44, %46
  %48 = fdiv <8 x float> %9, %11
  %49 = select <8 x i1> %13, <8 x float> %48, <8 x float> zeroinitializer
  %50 = fadd <8 x float> %5, %5
  %51 = fadd <8 x float> %49, %49
  %52 = fadd <8 x float> %51, %51
  %53 = fsub <8 x float> %50, %7
  %54 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %49
  %55 = fmul <8 x float> %53, %54
  %56 = fadd <8 x float> %55, %7
  %57 = fmul <8 x float> %56, %9
  %58 = fmul <8 x float> %52, %52
  %59 = fadd <8 x float> %52, %58
  %60 = fadd <8 x float> %49, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %61 = fmul <8 x float> %60, %59
  %62 = fmul <8 x float> %49, <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>
  %63 = fadd <8 x float> %62, %61
  %64 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %49) #13
  %65 = fsub <8 x float> %64, %49
  %66 = fmul <8 x float> %7, %9
  %67 = fmul <8 x float> %53, %11
  %68 = fadd <8 x float> %9, %9
  %69 = fadd <8 x float> %68, %68
  %70 = fcmp ole <8 x float> %69, %11
  %71 = select <8 x i1> %70, <8 x float> %63, <8 x float> %65
  %72 = fmul <8 x float> %67, %71
  %73 = fadd <8 x float> %66, %72
  %74 = fmul <8 x float> %40, %5
  %75 = fmul <8 x float> %42, %9
  %76 = fadd <8 x float> %75, %74
  %77 = fcmp ole <8 x float> %50, %7
  %78 = select <8 x i1> %77, <8 x float> %57, <8 x float> %73
  %79 = fadd <8 x float> %76, %78
  %80 = fdiv <8 x float> %10, %11
  %81 = select <8 x i1> %13, <8 x float> %80, <8 x float> zeroinitializer
  %82 = fadd <8 x float> %6, %6
  %83 = fadd <8 x float> %81, %81
  %84 = fadd <8 x float> %83, %83
  %85 = fsub <8 x float> %82, %7
  %86 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %81
  %87 = fmul <8 x float> %85, %86
  %88 = fadd <8 x float> %87, %7
  %89 = fmul <8 x float> %88, %10
  %90 = fmul <8 x float> %84, %84
  %91 = fadd <8 x float> %84, %90
  %92 = fadd <8 x float> %81, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %93 = fmul <8 x float> %92, %91
  %94 = fmul <8 x float> %81, <float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00, float 7.000000e+00>
  %95 = fadd <8 x float> %94, %93
  %96 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %81) #13
  %97 = fsub <8 x float> %96, %81
  %98 = fmul <8 x float> %7, %10
  %99 = fmul <8 x float> %85, %11
  %100 = fadd <8 x float> %10, %10
  %101 = fadd <8 x float> %100, %100
  %102 = fcmp ole <8 x float> %101, %11
  %103 = select <8 x i1> %102, <8 x float> %95, <8 x float> %97
  %104 = fmul <8 x float> %99, %103
  %105 = fadd <8 x float> %98, %104
  %106 = fmul <8 x float> %40, %6
  %107 = fmul <8 x float> %42, %10
  %108 = fadd <8 x float> %107, %106
  %109 = fcmp ole <8 x float> %82, %7
  %110 = select <8 x i1> %109, <8 x float> %89, <8 x float> %105
  %111 = fadd <8 x float> %108, %110
  %112 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %11, <8 x float> %42, <8 x float> %7) #13
  %113 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %114 = extractvalue { i8*, i8** } %113, 0
  %115 = extractvalue { i8*, i8** } %113, 1
  %116 = bitcast i8* %114 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %116(i64 %0, i8** %115, i64 %2, i64 %3, <8 x float> %47, <8 x float> %79, <8 x float> %111, <8 x float> %112, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL3hueEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %4, %7
  %14 = fmul <8 x float> %5, %7
  %15 = fmul <8 x float> %6, %7
  %16 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %9, <8 x float> %10) #13
  %17 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %8, <8 x float> %16) #13
  %18 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %9, <8 x float> %10) #13
  %19 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %8, <8 x float> %18) #13
  %20 = fsub <8 x float> %17, %19
  %21 = fmul <8 x float> %20, %7
  %22 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %14, <8 x float> %15) #13
  %23 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %13, <8 x float> %22) #13
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %14, <8 x float> %15) #13
  %25 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %13, <8 x float> %24) #13
  %26 = fsub <8 x float> %25, %23
  %27 = fcmp oeq <8 x float> %26, zeroinitializer
  %28 = fsub <8 x float> %13, %23
  %29 = fmul <8 x float> %21, %28
  %30 = fdiv <8 x float> %29, %26
  %31 = select <8 x i1> %27, <8 x float> zeroinitializer, <8 x float> %30
  %32 = fsub <8 x float> %14, %23
  %33 = fmul <8 x float> %21, %32
  %34 = fdiv <8 x float> %33, %26
  %35 = select <8 x i1> %27, <8 x float> zeroinitializer, <8 x float> %34
  %36 = fsub <8 x float> %15, %23
  %37 = fmul <8 x float> %21, %36
  %38 = fdiv <8 x float> %37, %26
  %39 = select <8 x i1> %27, <8 x float> zeroinitializer, <8 x float> %38
  %40 = fmul <8 x float> %8, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %41 = fmul <8 x float> %9, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %42 = fadd <8 x float> %40, %41
  %43 = fmul <8 x float> %10, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %44 = fadd <8 x float> %42, %43
  %45 = fmul <8 x float> %44, %7
  %46 = fmul <8 x float> %31, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %47 = fmul <8 x float> %35, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %48 = fadd <8 x float> %46, %47
  %49 = fmul <8 x float> %39, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %50 = fadd <8 x float> %49, %48
  %51 = fsub <8 x float> %45, %50
  %52 = fadd <8 x float> %31, %51
  %53 = fadd <8 x float> %35, %51
  %54 = fadd <8 x float> %39, %51
  %55 = fmul <8 x float> %7, %11
  %56 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %53, <8 x float> %54) #13
  %57 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %52, <8 x float> %56) #13
  %58 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %53, <8 x float> %54) #13
  %59 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %52, <8 x float> %58) #13
  %60 = fmul <8 x float> %52, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %61 = fmul <8 x float> %53, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %62 = fadd <8 x float> %60, %61
  %63 = fmul <8 x float> %54, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %64 = fadd <8 x float> %63, %62
  %65 = fcmp oge <8 x float> %57, zeroinitializer
  %66 = fsub <8 x float> %52, %64
  %67 = fmul <8 x float> %64, %66
  %68 = fsub <8 x float> %64, %57
  %69 = fdiv <8 x float> %67, %68
  %70 = fadd <8 x float> %64, %69
  %71 = select <8 x i1> %65, <8 x float> %52, <8 x float> %70
  %72 = fcmp ogt <8 x float> %59, %55
  %73 = fsub <8 x float> %71, %64
  %74 = fsub <8 x float> %55, %64
  %75 = fmul <8 x float> %74, %73
  %76 = fsub <8 x float> %59, %64
  %77 = fdiv <8 x float> %75, %76
  %78 = fadd <8 x float> %64, %77
  %79 = select <8 x i1> %72, <8 x float> %78, <8 x float> %71
  %80 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %79, <8 x float> zeroinitializer) #13
  %81 = fsub <8 x float> %53, %64
  %82 = fmul <8 x float> %64, %81
  %83 = fdiv <8 x float> %82, %68
  %84 = fadd <8 x float> %64, %83
  %85 = select <8 x i1> %65, <8 x float> %53, <8 x float> %84
  %86 = fsub <8 x float> %85, %64
  %87 = fmul <8 x float> %74, %86
  %88 = fdiv <8 x float> %87, %76
  %89 = fadd <8 x float> %64, %88
  %90 = select <8 x i1> %72, <8 x float> %89, <8 x float> %85
  %91 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %90, <8 x float> zeroinitializer) #13
  %92 = fsub <8 x float> %54, %64
  %93 = fmul <8 x float> %64, %92
  %94 = fdiv <8 x float> %93, %68
  %95 = fadd <8 x float> %64, %94
  %96 = select <8 x i1> %65, <8 x float> %54, <8 x float> %95
  %97 = fsub <8 x float> %96, %64
  %98 = fmul <8 x float> %74, %97
  %99 = fdiv <8 x float> %98, %76
  %100 = fadd <8 x float> %64, %99
  %101 = select <8 x i1> %72, <8 x float> %100, <8 x float> %96
  %102 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %101, <8 x float> zeroinitializer) #13
  %103 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %104 = fmul <8 x float> %103, %4
  %105 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %106 = fmul <8 x float> %105, %8
  %107 = fadd <8 x float> %106, %104
  %108 = fadd <8 x float> %107, %80
  %109 = fmul <8 x float> %103, %5
  %110 = fmul <8 x float> %105, %9
  %111 = fadd <8 x float> %110, %109
  %112 = fadd <8 x float> %111, %91
  %113 = fmul <8 x float> %103, %6
  %114 = fmul <8 x float> %105, %10
  %115 = fadd <8 x float> %114, %113
  %116 = fadd <8 x float> %115, %102
  %117 = fadd <8 x float> %7, %11
  %118 = fsub <8 x float> %117, %55
  %119 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %120 = extractvalue { i8*, i8** } %119, 0
  %121 = extractvalue { i8*, i8** } %119, 1
  %122 = bitcast i8* %120 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %122(i64 %0, i8** %121, i64 %2, i64 %3, <8 x float> %108, <8 x float> %112, <8 x float> %116, <8 x float> %118, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10saturationEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %7, %8
  %14 = fmul <8 x float> %7, %9
  %15 = fmul <8 x float> %7, %10
  %16 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> %6) #13
  %17 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %4, <8 x float> %16) #13
  %18 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> %6) #13
  %19 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %4, <8 x float> %18) #13
  %20 = fsub <8 x float> %17, %19
  %21 = fmul <8 x float> %20, %11
  %22 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %14, <8 x float> %15) #13
  %23 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %13, <8 x float> %22) #13
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %14, <8 x float> %15) #13
  %25 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %13, <8 x float> %24) #13
  %26 = fsub <8 x float> %25, %23
  %27 = fcmp oeq <8 x float> %26, zeroinitializer
  %28 = fsub <8 x float> %13, %23
  %29 = fmul <8 x float> %21, %28
  %30 = fdiv <8 x float> %29, %26
  %31 = select <8 x i1> %27, <8 x float> zeroinitializer, <8 x float> %30
  %32 = fsub <8 x float> %14, %23
  %33 = fmul <8 x float> %21, %32
  %34 = fdiv <8 x float> %33, %26
  %35 = select <8 x i1> %27, <8 x float> zeroinitializer, <8 x float> %34
  %36 = fsub <8 x float> %15, %23
  %37 = fmul <8 x float> %21, %36
  %38 = fdiv <8 x float> %37, %26
  %39 = select <8 x i1> %27, <8 x float> zeroinitializer, <8 x float> %38
  %40 = fmul <8 x float> %8, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %41 = fmul <8 x float> %9, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %42 = fadd <8 x float> %40, %41
  %43 = fmul <8 x float> %10, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %44 = fadd <8 x float> %42, %43
  %45 = fmul <8 x float> %44, %7
  %46 = fmul <8 x float> %31, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %47 = fmul <8 x float> %35, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %48 = fadd <8 x float> %46, %47
  %49 = fmul <8 x float> %39, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %50 = fadd <8 x float> %49, %48
  %51 = fsub <8 x float> %45, %50
  %52 = fadd <8 x float> %31, %51
  %53 = fadd <8 x float> %35, %51
  %54 = fadd <8 x float> %39, %51
  %55 = fmul <8 x float> %7, %11
  %56 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %53, <8 x float> %54) #13
  %57 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %52, <8 x float> %56) #13
  %58 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %53, <8 x float> %54) #13
  %59 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %52, <8 x float> %58) #13
  %60 = fmul <8 x float> %52, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %61 = fmul <8 x float> %53, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %62 = fadd <8 x float> %60, %61
  %63 = fmul <8 x float> %54, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %64 = fadd <8 x float> %63, %62
  %65 = fcmp oge <8 x float> %57, zeroinitializer
  %66 = fsub <8 x float> %52, %64
  %67 = fmul <8 x float> %64, %66
  %68 = fsub <8 x float> %64, %57
  %69 = fdiv <8 x float> %67, %68
  %70 = fadd <8 x float> %64, %69
  %71 = select <8 x i1> %65, <8 x float> %52, <8 x float> %70
  %72 = fcmp ogt <8 x float> %59, %55
  %73 = fsub <8 x float> %71, %64
  %74 = fsub <8 x float> %55, %64
  %75 = fmul <8 x float> %74, %73
  %76 = fsub <8 x float> %59, %64
  %77 = fdiv <8 x float> %75, %76
  %78 = fadd <8 x float> %64, %77
  %79 = select <8 x i1> %72, <8 x float> %78, <8 x float> %71
  %80 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %79, <8 x float> zeroinitializer) #13
  %81 = fsub <8 x float> %53, %64
  %82 = fmul <8 x float> %64, %81
  %83 = fdiv <8 x float> %82, %68
  %84 = fadd <8 x float> %64, %83
  %85 = select <8 x i1> %65, <8 x float> %53, <8 x float> %84
  %86 = fsub <8 x float> %85, %64
  %87 = fmul <8 x float> %74, %86
  %88 = fdiv <8 x float> %87, %76
  %89 = fadd <8 x float> %64, %88
  %90 = select <8 x i1> %72, <8 x float> %89, <8 x float> %85
  %91 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %90, <8 x float> zeroinitializer) #13
  %92 = fsub <8 x float> %54, %64
  %93 = fmul <8 x float> %64, %92
  %94 = fdiv <8 x float> %93, %68
  %95 = fadd <8 x float> %64, %94
  %96 = select <8 x i1> %65, <8 x float> %54, <8 x float> %95
  %97 = fsub <8 x float> %96, %64
  %98 = fmul <8 x float> %74, %97
  %99 = fdiv <8 x float> %98, %76
  %100 = fadd <8 x float> %64, %99
  %101 = select <8 x i1> %72, <8 x float> %100, <8 x float> %96
  %102 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %101, <8 x float> zeroinitializer) #13
  %103 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %104 = fmul <8 x float> %103, %4
  %105 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %106 = fmul <8 x float> %105, %8
  %107 = fadd <8 x float> %106, %104
  %108 = fadd <8 x float> %107, %80
  %109 = fmul <8 x float> %103, %5
  %110 = fmul <8 x float> %105, %9
  %111 = fadd <8 x float> %110, %109
  %112 = fadd <8 x float> %111, %91
  %113 = fmul <8 x float> %103, %6
  %114 = fmul <8 x float> %105, %10
  %115 = fadd <8 x float> %114, %113
  %116 = fadd <8 x float> %115, %102
  %117 = fadd <8 x float> %7, %11
  %118 = fsub <8 x float> %117, %55
  %119 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %120 = extractvalue { i8*, i8** } %119, 0
  %121 = extractvalue { i8*, i8** } %119, 1
  %122 = bitcast i8* %120 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %122(i64 %0, i8** %121, i64 %2, i64 %3, <8 x float> %108, <8 x float> %112, <8 x float> %116, <8 x float> %118, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL5colorEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %4, %11
  %14 = fmul <8 x float> %5, %11
  %15 = fmul <8 x float> %6, %11
  %16 = fmul <8 x float> %8, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %17 = fmul <8 x float> %9, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %18 = fadd <8 x float> %16, %17
  %19 = fmul <8 x float> %10, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %20 = fadd <8 x float> %18, %19
  %21 = fmul <8 x float> %20, %7
  %22 = fmul <8 x float> %13, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %23 = fmul <8 x float> %14, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %24 = fadd <8 x float> %22, %23
  %25 = fmul <8 x float> %15, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %26 = fadd <8 x float> %25, %24
  %27 = fsub <8 x float> %21, %26
  %28 = fadd <8 x float> %13, %27
  %29 = fadd <8 x float> %14, %27
  %30 = fadd <8 x float> %15, %27
  %31 = fmul <8 x float> %7, %11
  %32 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %29, <8 x float> %30) #13
  %33 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %28, <8 x float> %32) #13
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %29, <8 x float> %30) #13
  %35 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %28, <8 x float> %34) #13
  %36 = fmul <8 x float> %28, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %37 = fmul <8 x float> %29, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %38 = fadd <8 x float> %36, %37
  %39 = fmul <8 x float> %30, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %40 = fadd <8 x float> %39, %38
  %41 = fcmp oge <8 x float> %33, zeroinitializer
  %42 = fsub <8 x float> %28, %40
  %43 = fmul <8 x float> %40, %42
  %44 = fsub <8 x float> %40, %33
  %45 = fdiv <8 x float> %43, %44
  %46 = fadd <8 x float> %40, %45
  %47 = select <8 x i1> %41, <8 x float> %28, <8 x float> %46
  %48 = fcmp ogt <8 x float> %35, %31
  %49 = fsub <8 x float> %47, %40
  %50 = fsub <8 x float> %31, %40
  %51 = fmul <8 x float> %50, %49
  %52 = fsub <8 x float> %35, %40
  %53 = fdiv <8 x float> %51, %52
  %54 = fadd <8 x float> %40, %53
  %55 = select <8 x i1> %48, <8 x float> %54, <8 x float> %47
  %56 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %55, <8 x float> zeroinitializer) #13
  %57 = fsub <8 x float> %29, %40
  %58 = fmul <8 x float> %40, %57
  %59 = fdiv <8 x float> %58, %44
  %60 = fadd <8 x float> %40, %59
  %61 = select <8 x i1> %41, <8 x float> %29, <8 x float> %60
  %62 = fsub <8 x float> %61, %40
  %63 = fmul <8 x float> %50, %62
  %64 = fdiv <8 x float> %63, %52
  %65 = fadd <8 x float> %40, %64
  %66 = select <8 x i1> %48, <8 x float> %65, <8 x float> %61
  %67 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %66, <8 x float> zeroinitializer) #13
  %68 = fsub <8 x float> %30, %40
  %69 = fmul <8 x float> %40, %68
  %70 = fdiv <8 x float> %69, %44
  %71 = fadd <8 x float> %40, %70
  %72 = select <8 x i1> %41, <8 x float> %30, <8 x float> %71
  %73 = fsub <8 x float> %72, %40
  %74 = fmul <8 x float> %50, %73
  %75 = fdiv <8 x float> %74, %52
  %76 = fadd <8 x float> %40, %75
  %77 = select <8 x i1> %48, <8 x float> %76, <8 x float> %72
  %78 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %77, <8 x float> zeroinitializer) #13
  %79 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %80 = fmul <8 x float> %79, %4
  %81 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %82 = fmul <8 x float> %81, %8
  %83 = fadd <8 x float> %82, %80
  %84 = fadd <8 x float> %83, %56
  %85 = fmul <8 x float> %79, %5
  %86 = fmul <8 x float> %81, %9
  %87 = fadd <8 x float> %86, %85
  %88 = fadd <8 x float> %87, %67
  %89 = fmul <8 x float> %79, %6
  %90 = fmul <8 x float> %81, %10
  %91 = fadd <8 x float> %90, %89
  %92 = fadd <8 x float> %91, %78
  %93 = fadd <8 x float> %7, %11
  %94 = fsub <8 x float> %93, %31
  %95 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %96 = extractvalue { i8*, i8** } %95, 0
  %97 = extractvalue { i8*, i8** } %95, 1
  %98 = bitcast i8* %96 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %98(i64 %0, i8** %97, i64 %2, i64 %3, <8 x float> %84, <8 x float> %88, <8 x float> %92, <8 x float> %94, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10luminosityEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %7, %8
  %14 = fmul <8 x float> %7, %9
  %15 = fmul <8 x float> %7, %10
  %16 = fmul <8 x float> %4, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %17 = fmul <8 x float> %5, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %18 = fadd <8 x float> %16, %17
  %19 = fmul <8 x float> %6, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %20 = fadd <8 x float> %18, %19
  %21 = fmul <8 x float> %20, %11
  %22 = fmul <8 x float> %13, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %23 = fmul <8 x float> %14, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %24 = fadd <8 x float> %22, %23
  %25 = fmul <8 x float> %15, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %26 = fadd <8 x float> %24, %25
  %27 = fsub <8 x float> %21, %26
  %28 = fadd <8 x float> %13, %27
  %29 = fadd <8 x float> %14, %27
  %30 = fadd <8 x float> %15, %27
  %31 = fmul <8 x float> %7, %11
  %32 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %29, <8 x float> %30) #13
  %33 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %28, <8 x float> %32) #13
  %34 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %29, <8 x float> %30) #13
  %35 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %28, <8 x float> %34) #13
  %36 = fmul <8 x float> %28, <float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000, float 0x3FD3333340000000>
  %37 = fmul <8 x float> %29, <float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000, float 0x3FE2E147A0000000>
  %38 = fadd <8 x float> %36, %37
  %39 = fmul <8 x float> %30, <float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000, float 0x3FBC28F5C0000000>
  %40 = fadd <8 x float> %39, %38
  %41 = fcmp oge <8 x float> %33, zeroinitializer
  %42 = fsub <8 x float> %28, %40
  %43 = fmul <8 x float> %40, %42
  %44 = fsub <8 x float> %40, %33
  %45 = fdiv <8 x float> %43, %44
  %46 = fadd <8 x float> %40, %45
  %47 = select <8 x i1> %41, <8 x float> %28, <8 x float> %46
  %48 = fcmp ogt <8 x float> %35, %31
  %49 = fsub <8 x float> %47, %40
  %50 = fsub <8 x float> %31, %40
  %51 = fmul <8 x float> %50, %49
  %52 = fsub <8 x float> %35, %40
  %53 = fdiv <8 x float> %51, %52
  %54 = fadd <8 x float> %40, %53
  %55 = select <8 x i1> %48, <8 x float> %54, <8 x float> %47
  %56 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %55, <8 x float> zeroinitializer) #13
  %57 = fsub <8 x float> %29, %40
  %58 = fmul <8 x float> %40, %57
  %59 = fdiv <8 x float> %58, %44
  %60 = fadd <8 x float> %40, %59
  %61 = select <8 x i1> %41, <8 x float> %29, <8 x float> %60
  %62 = fsub <8 x float> %61, %40
  %63 = fmul <8 x float> %50, %62
  %64 = fdiv <8 x float> %63, %52
  %65 = fadd <8 x float> %40, %64
  %66 = select <8 x i1> %48, <8 x float> %65, <8 x float> %61
  %67 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %66, <8 x float> zeroinitializer) #13
  %68 = fsub <8 x float> %30, %40
  %69 = fmul <8 x float> %40, %68
  %70 = fdiv <8 x float> %69, %44
  %71 = fadd <8 x float> %40, %70
  %72 = select <8 x i1> %41, <8 x float> %30, <8 x float> %71
  %73 = fsub <8 x float> %72, %40
  %74 = fmul <8 x float> %50, %73
  %75 = fdiv <8 x float> %74, %52
  %76 = fadd <8 x float> %40, %75
  %77 = select <8 x i1> %48, <8 x float> %76, <8 x float> %72
  %78 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %77, <8 x float> zeroinitializer) #13
  %79 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %11
  %80 = fmul <8 x float> %79, %4
  %81 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %82 = fmul <8 x float> %81, %8
  %83 = fadd <8 x float> %82, %80
  %84 = fadd <8 x float> %83, %56
  %85 = fmul <8 x float> %79, %5
  %86 = fmul <8 x float> %81, %9
  %87 = fadd <8 x float> %86, %85
  %88 = fadd <8 x float> %87, %67
  %89 = fmul <8 x float> %79, %6
  %90 = fmul <8 x float> %81, %10
  %91 = fadd <8 x float> %90, %89
  %92 = fadd <8 x float> %91, %78
  %93 = fadd <8 x float> %7, %11
  %94 = fsub <8 x float> %93, %31
  %95 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %96 = extractvalue { i8*, i8** } %95, 0
  %97 = extractvalue { i8*, i8** } %95, 1
  %98 = bitcast i8* %96 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %98(i64 %0, i8** %97, i64 %2, i64 %3, <8 x float> %84, <8 x float> %88, <8 x float> %92, <8 x float> %94, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL17srcover_rgba_8888EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %25) #13
  switch i64 %0, label %62 [
    i64 0, label %59
    i64 7, label %26
    i64 6, label %30
    i64 5, label %35
    i64 4, label %40
    i64 3, label %46
    i64 2, label %50
    i64 1, label %56
  ], !prof !99

26:                                               ; preds = %12
  %27 = getelementptr inbounds i32, i32* %24, i64 6
  %28 = load i32, i32* %27, align 4
  %29 = insertelement <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0>, i32 %28, i32 6
  br label %30

30:                                               ; preds = %26, %12
  %31 = phi <8 x i32> [ %29, %26 ], [ zeroinitializer, %12 ]
  %32 = getelementptr inbounds i32, i32* %24, i64 5
  %33 = load i32, i32* %32, align 4
  %34 = insertelement <8 x i32> %31, i32 %33, i32 5
  br label %35

35:                                               ; preds = %30, %12
  %36 = phi <8 x i32> [ %34, %30 ], [ zeroinitializer, %12 ]
  %37 = getelementptr inbounds i32, i32* %24, i64 4
  %38 = load i32, i32* %37, align 4
  %39 = insertelement <8 x i32> %36, i32 %38, i32 4
  br label %40

40:                                               ; preds = %35, %12
  %41 = phi <8 x i32> [ %39, %35 ], [ zeroinitializer, %12 ]
  %42 = bitcast i32* %24 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = shufflevector <4 x i32> %43, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = shufflevector <8 x i32> %44, <8 x i32> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %63

46:                                               ; preds = %12
  %47 = getelementptr inbounds i32, i32* %24, i64 2
  %48 = load i32, i32* %47, align 4
  %49 = insertelement <8 x i32> <i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %48, i32 2
  br label %50

50:                                               ; preds = %46, %12
  %51 = phi <8 x i32> [ %49, %46 ], [ zeroinitializer, %12 ]
  %52 = bitcast i32* %24 to <2 x i32>*
  %53 = load <2 x i32>, <2 x i32>* %52, align 4
  %54 = shufflevector <2 x i32> %53, <2 x i32> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i32> %54, <8 x i32> %51, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %63

56:                                               ; preds = %12
  %57 = load i32, i32* %24, align 4
  %58 = insertelement <8 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %57, i32 0
  br label %63

59:                                               ; preds = %12
  %60 = bitcast i32* %24 to <8 x i32>*
  %61 = load <8 x i32>, <8 x i32>* %60, align 4
  br label %63

62:                                               ; preds = %12
  unreachable

63:                                               ; preds = %59, %56, %50, %40
  %64 = phi <8 x i32> [ %61, %59 ], [ %58, %56 ], [ %55, %50 ], [ %45, %40 ]
  %65 = and <8 x i32> %64, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %66 = sitofp <8 x i32> %65 to <8 x float>
  %67 = lshr <8 x i32> %64, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %68 = and <8 x i32> %67, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %69 = sitofp <8 x i32> %68 to <8 x float>
  %70 = lshr <8 x i32> %64, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %71 = and <8 x i32> %70, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %72 = sitofp <8 x i32> %71 to <8 x float>
  %73 = lshr <8 x i32> %64, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %74 = sitofp <8 x i32> %73 to <8 x float>
  %75 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %7
  %76 = fmul <8 x float> %4, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %77 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %66, <8 x float> %75, <8 x float> %76) #13
  %78 = fmul <8 x float> %5, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %79 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %69, <8 x float> %75, <8 x float> %78) #13
  %80 = fmul <8 x float> %6, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %81 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %72, <8 x float> %75, <8 x float> %80) #13
  %82 = fmul <8 x float> %7, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %83 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %74, <8 x float> %75, <8 x float> %82) #13
  %84 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %77) #13
  %85 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %84, <8 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>) #13
  %86 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %85) #13
  %87 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %79) #13
  %88 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %87, <8 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>) #13
  %89 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %88) #13
  %90 = shl <8 x i32> %89, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %91 = or <8 x i32> %90, %86
  %92 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %81) #13
  %93 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %92, <8 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>) #13
  %94 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %93) #13
  %95 = shl <8 x i32> %94, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %96 = or <8 x i32> %91, %95
  %97 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %83) #13
  %98 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %97, <8 x float> <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>) #13
  %99 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %98) #13
  %100 = shl <8 x i32> %99, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %101 = or <8 x i32> %96, %100
  switch i64 %0, label %124 [
    i64 0, label %122
    i64 7, label %102
    i64 6, label %105
    i64 5, label %108
    i64 4, label %111
    i64 3, label %114
    i64 2, label %117
    i64 1, label %120
  ], !prof !99

102:                                              ; preds = %63
  %103 = extractelement <8 x i32> %101, i32 6
  %104 = getelementptr inbounds i32, i32* %24, i64 6
  store i32 %103, i32* %104, align 4
  br label %105

105:                                              ; preds = %102, %63
  %106 = extractelement <8 x i32> %101, i32 5
  %107 = getelementptr inbounds i32, i32* %24, i64 5
  store i32 %106, i32* %107, align 4
  br label %108

108:                                              ; preds = %105, %63
  %109 = extractelement <8 x i32> %101, i32 4
  %110 = getelementptr inbounds i32, i32* %24, i64 4
  store i32 %109, i32* %110, align 4
  br label %111

111:                                              ; preds = %108, %63
  %112 = bitcast i32* %24 to <4 x i32>*
  %113 = shufflevector <8 x i32> %101, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %113, <4 x i32>* %112, align 4
  br label %125

114:                                              ; preds = %63
  %115 = extractelement <8 x i32> %101, i32 2
  %116 = getelementptr inbounds i32, i32* %24, i64 2
  store i32 %115, i32* %116, align 4
  br label %117

117:                                              ; preds = %114, %63
  %118 = bitcast i32* %24 to <2 x i32>*
  %119 = shufflevector <8 x i32> %101, <8 x i32> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i32> %119, <2 x i32>* %118, align 4
  br label %125

120:                                              ; preds = %63
  %121 = extractelement <8 x i32> %101, i32 0
  store i32 %121, i32* %24, align 4
  br label %125

122:                                              ; preds = %63
  %123 = bitcast i32* %24 to <8 x i32>*
  store <8 x i32> %101, <8 x i32>* %123, align 4
  br label %125

124:                                              ; preds = %63
  unreachable

125:                                              ; preds = %111, %117, %120, %122
  %126 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %127 = extractvalue { i8*, i8** } %126, 0
  %128 = extractvalue { i8*, i8** } %126, 1
  %129 = bitcast i8* %127 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %129(i64 %0, i8** %128, i64 %2, i64 %3, <8 x float> %77, <8 x float> %79, <8 x float> %81, <8 x float> %83, <8 x float> %66, <8 x float> %69, <8 x float> %72, <8 x float> %74) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL16matrix_translateEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = fadd <8 x float> %19, %4
  %21 = getelementptr inbounds i8, i8* %14, i64 4
  %22 = bitcast i8* %21 to float*
  %23 = load float, float* %22, align 4
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = fadd <8 x float> %25, %5
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <8 x float> %20, <8 x float> %26, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL22matrix_scale_translateEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %19, <8 x float> %24) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 4
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 4
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = getelementptr inbounds i8, i8* %14, i64 12
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %30, <8 x float> %35) #13
  %37 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %38 = extractvalue { i8*, i8** } %37, 0
  %39 = extractvalue { i8*, i8** } %37, 1
  %40 = bitcast i8* %38 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %40(i64 %0, i8** %39, i64 %2, i64 %3, <8 x float> %25, <8 x float> %36, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10matrix_2x3EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 16
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %24, <8 x float> %29) #13
  %31 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %19, <8 x float> %30) #13
  %32 = getelementptr inbounds i8, i8* %14, i64 4
  %33 = bitcast i8* %32 to float*
  %34 = load float, float* %33, align 4
  %35 = insertelement <8 x float> undef, float %34, i32 0
  %36 = shufflevector <8 x float> %35, <8 x float> undef, <8 x i32> zeroinitializer
  %37 = getelementptr inbounds i8, i8* %14, i64 12
  %38 = bitcast i8* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = insertelement <8 x float> undef, float %39, i32 0
  %41 = shufflevector <8 x float> %40, <8 x float> undef, <8 x i32> zeroinitializer
  %42 = getelementptr inbounds i8, i8* %14, i64 20
  %43 = bitcast i8* %42 to float*
  %44 = load float, float* %43, align 4
  %45 = insertelement <8 x float> undef, float %44, i32 0
  %46 = shufflevector <8 x float> %45, <8 x float> undef, <8 x i32> zeroinitializer
  %47 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %41, <8 x float> %46) #13
  %48 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %36, <8 x float> %47) #13
  %49 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %50 = extractvalue { i8*, i8** } %49, 0
  %51 = extractvalue { i8*, i8** } %49, 1
  %52 = bitcast i8* %50 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %52(i64 %0, i8** %51, i64 %2, i64 %3, <8 x float> %31, <8 x float> %48, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10matrix_3x3EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 12
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 24
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = fmul <8 x float> %29, %6
  %31 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %24, <8 x float> %30) #13
  %32 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %19, <8 x float> %31) #13
  %33 = getelementptr inbounds i8, i8* %14, i64 4
  %34 = bitcast i8* %33 to float*
  %35 = load float, float* %34, align 4
  %36 = insertelement <8 x float> undef, float %35, i32 0
  %37 = shufflevector <8 x float> %36, <8 x float> undef, <8 x i32> zeroinitializer
  %38 = getelementptr inbounds i8, i8* %14, i64 16
  %39 = bitcast i8* %38 to float*
  %40 = load float, float* %39, align 4
  %41 = insertelement <8 x float> undef, float %40, i32 0
  %42 = shufflevector <8 x float> %41, <8 x float> undef, <8 x i32> zeroinitializer
  %43 = getelementptr inbounds i8, i8* %14, i64 28
  %44 = bitcast i8* %43 to float*
  %45 = load float, float* %44, align 4
  %46 = insertelement <8 x float> undef, float %45, i32 0
  %47 = shufflevector <8 x float> %46, <8 x float> undef, <8 x i32> zeroinitializer
  %48 = fmul <8 x float> %47, %6
  %49 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %42, <8 x float> %48) #13
  %50 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %37, <8 x float> %49) #13
  %51 = getelementptr inbounds i8, i8* %14, i64 8
  %52 = bitcast i8* %51 to float*
  %53 = load float, float* %52, align 4
  %54 = insertelement <8 x float> undef, float %53, i32 0
  %55 = shufflevector <8 x float> %54, <8 x float> undef, <8 x i32> zeroinitializer
  %56 = getelementptr inbounds i8, i8* %14, i64 20
  %57 = bitcast i8* %56 to float*
  %58 = load float, float* %57, align 4
  %59 = insertelement <8 x float> undef, float %58, i32 0
  %60 = shufflevector <8 x float> %59, <8 x float> undef, <8 x i32> zeroinitializer
  %61 = getelementptr inbounds i8, i8* %14, i64 32
  %62 = bitcast i8* %61 to float*
  %63 = load float, float* %62, align 4
  %64 = insertelement <8 x float> undef, float %63, i32 0
  %65 = shufflevector <8 x float> %64, <8 x float> undef, <8 x i32> zeroinitializer
  %66 = fmul <8 x float> %65, %6
  %67 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %60, <8 x float> %66) #13
  %68 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %55, <8 x float> %67) #13
  %69 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %70 = extractvalue { i8*, i8** } %69, 0
  %71 = extractvalue { i8*, i8** } %69, 1
  %72 = bitcast i8* %70 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %72(i64 %0, i8** %71, i64 %2, i64 %3, <8 x float> %32, <8 x float> %50, <8 x float> %68, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10matrix_3x4EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 12
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 24
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %14, i64 36
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <8 x float> undef, float %32, i32 0
  %34 = shufflevector <8 x float> %33, <8 x float> undef, <8 x i32> zeroinitializer
  %35 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %6, <8 x float> %29, <8 x float> %34) #13
  %36 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %24, <8 x float> %35) #13
  %37 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %19, <8 x float> %36) #13
  %38 = getelementptr inbounds i8, i8* %14, i64 4
  %39 = bitcast i8* %38 to float*
  %40 = load float, float* %39, align 4
  %41 = insertelement <8 x float> undef, float %40, i32 0
  %42 = shufflevector <8 x float> %41, <8 x float> undef, <8 x i32> zeroinitializer
  %43 = getelementptr inbounds i8, i8* %14, i64 16
  %44 = bitcast i8* %43 to float*
  %45 = load float, float* %44, align 4
  %46 = insertelement <8 x float> undef, float %45, i32 0
  %47 = shufflevector <8 x float> %46, <8 x float> undef, <8 x i32> zeroinitializer
  %48 = getelementptr inbounds i8, i8* %14, i64 28
  %49 = bitcast i8* %48 to float*
  %50 = load float, float* %49, align 4
  %51 = insertelement <8 x float> undef, float %50, i32 0
  %52 = shufflevector <8 x float> %51, <8 x float> undef, <8 x i32> zeroinitializer
  %53 = getelementptr inbounds i8, i8* %14, i64 40
  %54 = bitcast i8* %53 to float*
  %55 = load float, float* %54, align 4
  %56 = insertelement <8 x float> undef, float %55, i32 0
  %57 = shufflevector <8 x float> %56, <8 x float> undef, <8 x i32> zeroinitializer
  %58 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %6, <8 x float> %52, <8 x float> %57) #13
  %59 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %47, <8 x float> %58) #13
  %60 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %42, <8 x float> %59) #13
  %61 = getelementptr inbounds i8, i8* %14, i64 8
  %62 = bitcast i8* %61 to float*
  %63 = load float, float* %62, align 4
  %64 = insertelement <8 x float> undef, float %63, i32 0
  %65 = shufflevector <8 x float> %64, <8 x float> undef, <8 x i32> zeroinitializer
  %66 = getelementptr inbounds i8, i8* %14, i64 20
  %67 = bitcast i8* %66 to float*
  %68 = load float, float* %67, align 4
  %69 = insertelement <8 x float> undef, float %68, i32 0
  %70 = shufflevector <8 x float> %69, <8 x float> undef, <8 x i32> zeroinitializer
  %71 = getelementptr inbounds i8, i8* %14, i64 32
  %72 = bitcast i8* %71 to float*
  %73 = load float, float* %72, align 4
  %74 = insertelement <8 x float> undef, float %73, i32 0
  %75 = shufflevector <8 x float> %74, <8 x float> undef, <8 x i32> zeroinitializer
  %76 = getelementptr inbounds i8, i8* %14, i64 44
  %77 = bitcast i8* %76 to float*
  %78 = load float, float* %77, align 4
  %79 = insertelement <8 x float> undef, float %78, i32 0
  %80 = shufflevector <8 x float> %79, <8 x float> undef, <8 x i32> zeroinitializer
  %81 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %6, <8 x float> %75, <8 x float> %80) #13
  %82 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %70, <8 x float> %81) #13
  %83 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %65, <8 x float> %82) #13
  %84 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %85 = extractvalue { i8*, i8** } %84, 0
  %86 = extractvalue { i8*, i8** } %84, 1
  %87 = bitcast i8* %85 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %87(i64 %0, i8** %86, i64 %2, i64 %3, <8 x float> %37, <8 x float> %60, <8 x float> %83, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10matrix_4x5EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %14, i64 12
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <8 x float> undef, float %32, i32 0
  %34 = shufflevector <8 x float> %33, <8 x float> undef, <8 x i32> zeroinitializer
  %35 = getelementptr inbounds i8, i8* %14, i64 16
  %36 = bitcast i8* %35 to float*
  %37 = load float, float* %36, align 4
  %38 = insertelement <8 x float> undef, float %37, i32 0
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <8 x i32> zeroinitializer
  %40 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %7, <8 x float> %34, <8 x float> %39) #13
  %41 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %6, <8 x float> %29, <8 x float> %40) #13
  %42 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %24, <8 x float> %41) #13
  %43 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %19, <8 x float> %42) #13
  %44 = getelementptr inbounds i8, i8* %14, i64 20
  %45 = bitcast i8* %44 to float*
  %46 = load float, float* %45, align 4
  %47 = insertelement <8 x float> undef, float %46, i32 0
  %48 = shufflevector <8 x float> %47, <8 x float> undef, <8 x i32> zeroinitializer
  %49 = getelementptr inbounds i8, i8* %14, i64 24
  %50 = bitcast i8* %49 to float*
  %51 = load float, float* %50, align 4
  %52 = insertelement <8 x float> undef, float %51, i32 0
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <8 x i32> zeroinitializer
  %54 = getelementptr inbounds i8, i8* %14, i64 28
  %55 = bitcast i8* %54 to float*
  %56 = load float, float* %55, align 4
  %57 = insertelement <8 x float> undef, float %56, i32 0
  %58 = shufflevector <8 x float> %57, <8 x float> undef, <8 x i32> zeroinitializer
  %59 = getelementptr inbounds i8, i8* %14, i64 32
  %60 = bitcast i8* %59 to float*
  %61 = load float, float* %60, align 4
  %62 = insertelement <8 x float> undef, float %61, i32 0
  %63 = shufflevector <8 x float> %62, <8 x float> undef, <8 x i32> zeroinitializer
  %64 = getelementptr inbounds i8, i8* %14, i64 36
  %65 = bitcast i8* %64 to float*
  %66 = load float, float* %65, align 4
  %67 = insertelement <8 x float> undef, float %66, i32 0
  %68 = shufflevector <8 x float> %67, <8 x float> undef, <8 x i32> zeroinitializer
  %69 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %7, <8 x float> %63, <8 x float> %68) #13
  %70 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %6, <8 x float> %58, <8 x float> %69) #13
  %71 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %53, <8 x float> %70) #13
  %72 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %48, <8 x float> %71) #13
  %73 = getelementptr inbounds i8, i8* %14, i64 40
  %74 = bitcast i8* %73 to float*
  %75 = load float, float* %74, align 4
  %76 = insertelement <8 x float> undef, float %75, i32 0
  %77 = shufflevector <8 x float> %76, <8 x float> undef, <8 x i32> zeroinitializer
  %78 = getelementptr inbounds i8, i8* %14, i64 44
  %79 = bitcast i8* %78 to float*
  %80 = load float, float* %79, align 4
  %81 = insertelement <8 x float> undef, float %80, i32 0
  %82 = shufflevector <8 x float> %81, <8 x float> undef, <8 x i32> zeroinitializer
  %83 = getelementptr inbounds i8, i8* %14, i64 48
  %84 = bitcast i8* %83 to float*
  %85 = load float, float* %84, align 4
  %86 = insertelement <8 x float> undef, float %85, i32 0
  %87 = shufflevector <8 x float> %86, <8 x float> undef, <8 x i32> zeroinitializer
  %88 = getelementptr inbounds i8, i8* %14, i64 52
  %89 = bitcast i8* %88 to float*
  %90 = load float, float* %89, align 4
  %91 = insertelement <8 x float> undef, float %90, i32 0
  %92 = shufflevector <8 x float> %91, <8 x float> undef, <8 x i32> zeroinitializer
  %93 = getelementptr inbounds i8, i8* %14, i64 56
  %94 = bitcast i8* %93 to float*
  %95 = load float, float* %94, align 4
  %96 = insertelement <8 x float> undef, float %95, i32 0
  %97 = shufflevector <8 x float> %96, <8 x float> undef, <8 x i32> zeroinitializer
  %98 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %7, <8 x float> %92, <8 x float> %97) #13
  %99 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %6, <8 x float> %87, <8 x float> %98) #13
  %100 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %82, <8 x float> %99) #13
  %101 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %77, <8 x float> %100) #13
  %102 = getelementptr inbounds i8, i8* %14, i64 60
  %103 = bitcast i8* %102 to float*
  %104 = load float, float* %103, align 4
  %105 = insertelement <8 x float> undef, float %104, i32 0
  %106 = shufflevector <8 x float> %105, <8 x float> undef, <8 x i32> zeroinitializer
  %107 = getelementptr inbounds i8, i8* %14, i64 64
  %108 = bitcast i8* %107 to float*
  %109 = load float, float* %108, align 4
  %110 = insertelement <8 x float> undef, float %109, i32 0
  %111 = shufflevector <8 x float> %110, <8 x float> undef, <8 x i32> zeroinitializer
  %112 = getelementptr inbounds i8, i8* %14, i64 68
  %113 = bitcast i8* %112 to float*
  %114 = load float, float* %113, align 4
  %115 = insertelement <8 x float> undef, float %114, i32 0
  %116 = shufflevector <8 x float> %115, <8 x float> undef, <8 x i32> zeroinitializer
  %117 = getelementptr inbounds i8, i8* %14, i64 72
  %118 = bitcast i8* %117 to float*
  %119 = load float, float* %118, align 4
  %120 = insertelement <8 x float> undef, float %119, i32 0
  %121 = shufflevector <8 x float> %120, <8 x float> undef, <8 x i32> zeroinitializer
  %122 = getelementptr inbounds i8, i8* %14, i64 76
  %123 = bitcast i8* %122 to float*
  %124 = load float, float* %123, align 4
  %125 = insertelement <8 x float> undef, float %124, i32 0
  %126 = shufflevector <8 x float> %125, <8 x float> undef, <8 x i32> zeroinitializer
  %127 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %7, <8 x float> %121, <8 x float> %126) #13
  %128 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %6, <8 x float> %116, <8 x float> %127) #13
  %129 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %111, <8 x float> %128) #13
  %130 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %106, <8 x float> %129) #13
  %131 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %132 = extractvalue { i8*, i8** } %131, 0
  %133 = extractvalue { i8*, i8** } %131, 1
  %134 = bitcast i8* %132 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %134(i64 %0, i8** %133, i64 %2, i64 %3, <8 x float> %43, <8 x float> %72, <8 x float> %101, <8 x float> %130, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10matrix_4x3EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 16
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 32
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %24, <8 x float> %29) #13
  %31 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %19, <8 x float> %30) #13
  %32 = getelementptr inbounds i8, i8* %14, i64 4
  %33 = bitcast i8* %32 to float*
  %34 = load float, float* %33, align 4
  %35 = insertelement <8 x float> undef, float %34, i32 0
  %36 = shufflevector <8 x float> %35, <8 x float> undef, <8 x i32> zeroinitializer
  %37 = getelementptr inbounds i8, i8* %14, i64 20
  %38 = bitcast i8* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = insertelement <8 x float> undef, float %39, i32 0
  %41 = shufflevector <8 x float> %40, <8 x float> undef, <8 x i32> zeroinitializer
  %42 = getelementptr inbounds i8, i8* %14, i64 36
  %43 = bitcast i8* %42 to float*
  %44 = load float, float* %43, align 4
  %45 = insertelement <8 x float> undef, float %44, i32 0
  %46 = shufflevector <8 x float> %45, <8 x float> undef, <8 x i32> zeroinitializer
  %47 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %41, <8 x float> %46) #13
  %48 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %36, <8 x float> %47) #13
  %49 = getelementptr inbounds i8, i8* %14, i64 8
  %50 = bitcast i8* %49 to float*
  %51 = load float, float* %50, align 4
  %52 = insertelement <8 x float> undef, float %51, i32 0
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <8 x i32> zeroinitializer
  %54 = getelementptr inbounds i8, i8* %14, i64 24
  %55 = bitcast i8* %54 to float*
  %56 = load float, float* %55, align 4
  %57 = insertelement <8 x float> undef, float %56, i32 0
  %58 = shufflevector <8 x float> %57, <8 x float> undef, <8 x i32> zeroinitializer
  %59 = getelementptr inbounds i8, i8* %14, i64 40
  %60 = bitcast i8* %59 to float*
  %61 = load float, float* %60, align 4
  %62 = insertelement <8 x float> undef, float %61, i32 0
  %63 = shufflevector <8 x float> %62, <8 x float> undef, <8 x i32> zeroinitializer
  %64 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %58, <8 x float> %63) #13
  %65 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %53, <8 x float> %64) #13
  %66 = getelementptr inbounds i8, i8* %14, i64 12
  %67 = bitcast i8* %66 to float*
  %68 = load float, float* %67, align 4
  %69 = insertelement <8 x float> undef, float %68, i32 0
  %70 = shufflevector <8 x float> %69, <8 x float> undef, <8 x i32> zeroinitializer
  %71 = getelementptr inbounds i8, i8* %14, i64 28
  %72 = bitcast i8* %71 to float*
  %73 = load float, float* %72, align 4
  %74 = insertelement <8 x float> undef, float %73, i32 0
  %75 = shufflevector <8 x float> %74, <8 x float> undef, <8 x i32> zeroinitializer
  %76 = getelementptr inbounds i8, i8* %14, i64 44
  %77 = bitcast i8* %76 to float*
  %78 = load float, float* %77, align 4
  %79 = insertelement <8 x float> undef, float %78, i32 0
  %80 = shufflevector <8 x float> %79, <8 x float> undef, <8 x i32> zeroinitializer
  %81 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %75, <8 x float> %80) #13
  %82 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %70, <8 x float> %81) #13
  %83 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %84 = extractvalue { i8*, i8** } %83, 0
  %85 = extractvalue { i8*, i8** } %83, 1
  %86 = bitcast i8* %84 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %86(i64 %0, i8** %85, i64 %2, i64 %3, <8 x float> %31, <8 x float> %48, <8 x float> %65, <8 x float> %82, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL18matrix_perspectiveEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 4
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %24, <8 x float> %29) #13
  %31 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %19, <8 x float> %30) #13
  %32 = getelementptr inbounds i8, i8* %14, i64 12
  %33 = bitcast i8* %32 to float*
  %34 = load float, float* %33, align 4
  %35 = insertelement <8 x float> undef, float %34, i32 0
  %36 = shufflevector <8 x float> %35, <8 x float> undef, <8 x i32> zeroinitializer
  %37 = getelementptr inbounds i8, i8* %14, i64 16
  %38 = bitcast i8* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = insertelement <8 x float> undef, float %39, i32 0
  %41 = shufflevector <8 x float> %40, <8 x float> undef, <8 x i32> zeroinitializer
  %42 = getelementptr inbounds i8, i8* %14, i64 20
  %43 = bitcast i8* %42 to float*
  %44 = load float, float* %43, align 4
  %45 = insertelement <8 x float> undef, float %44, i32 0
  %46 = shufflevector <8 x float> %45, <8 x float> undef, <8 x i32> zeroinitializer
  %47 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %41, <8 x float> %46) #13
  %48 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %36, <8 x float> %47) #13
  %49 = getelementptr inbounds i8, i8* %14, i64 24
  %50 = bitcast i8* %49 to float*
  %51 = load float, float* %50, align 4
  %52 = insertelement <8 x float> undef, float %51, i32 0
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <8 x i32> zeroinitializer
  %54 = getelementptr inbounds i8, i8* %14, i64 28
  %55 = bitcast i8* %54 to float*
  %56 = load float, float* %55, align 4
  %57 = insertelement <8 x float> undef, float %56, i32 0
  %58 = shufflevector <8 x float> %57, <8 x float> undef, <8 x i32> zeroinitializer
  %59 = getelementptr inbounds i8, i8* %14, i64 32
  %60 = bitcast i8* %59 to float*
  %61 = load float, float* %60, align 4
  %62 = insertelement <8 x float> undef, float %61, i32 0
  %63 = shufflevector <8 x float> %62, <8 x float> undef, <8 x i32> zeroinitializer
  %64 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %58, <8 x float> %63) #13
  %65 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %53, <8 x float> %64) #13
  %66 = tail call <8 x float> @llvm.x86.avx.rcp.ps.256(<8 x float> %65) #13
  %67 = fmul <8 x float> %31, %66
  %68 = fmul <8 x float> %48, %66
  %69 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %70 = extractvalue { i8*, i8** } %69, 0
  %71 = extractvalue { i8*, i8** } %69, 1
  %72 = bitcast i8* %70 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %72(i64 %0, i8** %71, i64 %2, i64 %3, <8 x float> %67, <8 x float> %68, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10parametricEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = bitcast <8 x float> %4 to <8 x i32>
  %14 = bitcast <8 x float> %5 to <8 x i32>
  %15 = bitcast <8 x float> %6 to <8 x i32>
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = and <8 x i32> %13, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %20 = and <8 x i32> %13, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %21 = bitcast <8 x i32> %20 to <8 x float>
  %22 = getelementptr inbounds i8, i8* %17, i64 16
  %23 = bitcast i8* %22 to float*
  %24 = load float, float* %23, align 4
  %25 = insertelement <8 x float> undef, float %24, i32 0
  %26 = shufflevector <8 x float> %25, <8 x float> undef, <8 x i32> zeroinitializer
  %27 = fcmp oge <8 x float> %26, %21
  %28 = getelementptr inbounds i8, i8* %17, i64 12
  %29 = bitcast i8* %28 to float*
  %30 = load float, float* %29, align 4
  %31 = insertelement <8 x float> undef, float %30, i32 0
  %32 = shufflevector <8 x float> %31, <8 x float> undef, <8 x i32> zeroinitializer
  %33 = getelementptr inbounds i8, i8* %17, i64 24
  %34 = bitcast i8* %33 to float*
  %35 = load float, float* %34, align 4
  %36 = insertelement <8 x float> undef, float %35, i32 0
  %37 = shufflevector <8 x float> %36, <8 x float> undef, <8 x i32> zeroinitializer
  %38 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %32, <8 x float> %21, <8 x float> %37) #13
  %39 = getelementptr inbounds i8, i8* %17, i64 4
  %40 = bitcast i8* %39 to float*
  %41 = load float, float* %40, align 4
  %42 = insertelement <8 x float> undef, float %41, i32 0
  %43 = shufflevector <8 x float> %42, <8 x float> undef, <8 x i32> zeroinitializer
  %44 = getelementptr inbounds i8, i8* %17, i64 8
  %45 = bitcast i8* %44 to float*
  %46 = load float, float* %45, align 4
  %47 = insertelement <8 x float> undef, float %46, i32 0
  %48 = shufflevector <8 x float> %47, <8 x float> undef, <8 x i32> zeroinitializer
  %49 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %43, <8 x float> %21, <8 x float> %48) #13
  %50 = bitcast i8* %17 to float*
  %51 = load float, float* %50, align 4
  %52 = insertelement <8 x float> undef, float %51, i32 0
  %53 = shufflevector <8 x float> %52, <8 x float> undef, <8 x i32> zeroinitializer
  %54 = fcmp oeq <8 x float> %49, zeroinitializer
  %55 = fcmp oeq <8 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %56 = or <8 x i1> %54, %55
  %57 = bitcast <8 x float> %49 to <8 x i32>
  %58 = sitofp <8 x i32> %57 to <8 x float>
  %59 = fmul <8 x float> %58, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %60 = and <8 x i32> %57, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %61 = or <8 x i32> %60, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %62 = bitcast <8 x i32> %61 to <8 x float>
  %63 = fadd <8 x float> %59, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %64 = fmul <8 x float> %62, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %65 = fsub <8 x float> %63, %64
  %66 = fadd <8 x float> %62, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %67 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %66
  %68 = fsub <8 x float> %65, %67
  %69 = fmul <8 x float> %53, %68
  %70 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %69, i32 1) #13
  %71 = fsub <8 x float> %69, %70
  %72 = fadd <8 x float> %69, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %73 = fmul <8 x float> %71, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %74 = fsub <8 x float> %72, %73
  %75 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %71
  %76 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %75
  %77 = fadd <8 x float> %74, %76
  %78 = fmul <8 x float> %77, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %79 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %78) #13
  %80 = bitcast <8 x i32> %79 to <8 x float>
  %81 = select <8 x i1> %56, <8 x float> %49, <8 x float> %80
  %82 = getelementptr inbounds i8, i8* %17, i64 20
  %83 = bitcast i8* %82 to float*
  %84 = load float, float* %83, align 4
  %85 = insertelement <8 x float> undef, float %84, i32 0
  %86 = shufflevector <8 x float> %85, <8 x float> undef, <8 x i32> zeroinitializer
  %87 = fadd <8 x float> %81, %86
  %88 = select <8 x i1> %27, <8 x float> %38, <8 x float> %87
  %89 = bitcast <8 x float> %88 to <8 x i32>
  %90 = or <8 x i32> %19, %89
  %91 = and <8 x i32> %14, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %92 = and <8 x i32> %14, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %93 = bitcast <8 x i32> %92 to <8 x float>
  %94 = fcmp oge <8 x float> %26, %93
  %95 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %32, <8 x float> %93, <8 x float> %37) #13
  %96 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %43, <8 x float> %93, <8 x float> %48) #13
  %97 = fcmp oeq <8 x float> %96, zeroinitializer
  %98 = fcmp oeq <8 x float> %96, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %99 = or <8 x i1> %97, %98
  %100 = bitcast <8 x float> %96 to <8 x i32>
  %101 = sitofp <8 x i32> %100 to <8 x float>
  %102 = fmul <8 x float> %101, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %103 = and <8 x i32> %100, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %104 = or <8 x i32> %103, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %105 = bitcast <8 x i32> %104 to <8 x float>
  %106 = fadd <8 x float> %102, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %107 = fmul <8 x float> %105, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %108 = fsub <8 x float> %106, %107
  %109 = fadd <8 x float> %105, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %110 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %109
  %111 = fsub <8 x float> %108, %110
  %112 = fmul <8 x float> %53, %111
  %113 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %112, i32 1) #13
  %114 = fsub <8 x float> %112, %113
  %115 = fadd <8 x float> %112, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %116 = fmul <8 x float> %114, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %117 = fsub <8 x float> %115, %116
  %118 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %114
  %119 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %118
  %120 = fadd <8 x float> %117, %119
  %121 = fmul <8 x float> %120, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %122 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %121) #13
  %123 = bitcast <8 x i32> %122 to <8 x float>
  %124 = select <8 x i1> %99, <8 x float> %96, <8 x float> %123
  %125 = fadd <8 x float> %86, %124
  %126 = select <8 x i1> %94, <8 x float> %95, <8 x float> %125
  %127 = bitcast <8 x float> %126 to <8 x i32>
  %128 = or <8 x i32> %91, %127
  %129 = and <8 x i32> %15, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %130 = and <8 x i32> %15, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %131 = bitcast <8 x i32> %130 to <8 x float>
  %132 = fcmp oge <8 x float> %26, %131
  %133 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %32, <8 x float> %131, <8 x float> %37) #13
  %134 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %43, <8 x float> %131, <8 x float> %48) #13
  %135 = fcmp oeq <8 x float> %134, zeroinitializer
  %136 = fcmp oeq <8 x float> %134, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %137 = or <8 x i1> %135, %136
  %138 = bitcast <8 x float> %134 to <8 x i32>
  %139 = sitofp <8 x i32> %138 to <8 x float>
  %140 = fmul <8 x float> %139, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %141 = and <8 x i32> %138, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %142 = or <8 x i32> %141, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %143 = bitcast <8 x i32> %142 to <8 x float>
  %144 = fadd <8 x float> %140, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %145 = fmul <8 x float> %143, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %146 = fsub <8 x float> %144, %145
  %147 = fadd <8 x float> %143, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %148 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %147
  %149 = fsub <8 x float> %146, %148
  %150 = fmul <8 x float> %53, %149
  %151 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %150, i32 1) #13
  %152 = fsub <8 x float> %150, %151
  %153 = fadd <8 x float> %150, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %154 = fmul <8 x float> %152, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %155 = fsub <8 x float> %153, %154
  %156 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %152
  %157 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %156
  %158 = fadd <8 x float> %155, %157
  %159 = fmul <8 x float> %158, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %160 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %159) #13
  %161 = bitcast <8 x i32> %160 to <8 x float>
  %162 = select <8 x i1> %137, <8 x float> %134, <8 x float> %161
  %163 = fadd <8 x float> %86, %162
  %164 = select <8 x i1> %132, <8 x float> %133, <8 x float> %163
  %165 = bitcast <8 x float> %164 to <8 x i32>
  %166 = or <8 x i32> %129, %165
  %167 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %18) #10, !srcloc !98
  %168 = extractvalue { i8*, i8** } %167, 0
  %169 = extractvalue { i8*, i8** } %167, 1
  %170 = bitcast i8* %168 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  %171 = bitcast <8 x i32> %90 to <8 x float>
  %172 = bitcast <8 x i32> %128 to <8 x float>
  %173 = bitcast <8 x i32> %166 to <8 x float>
  tail call void %170(i64 %0, i8** %169, i64 %2, i64 %3, <8 x float> %171, <8 x float> %172, <8 x float> %173, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL6gamma_EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = bitcast <8 x float> %4 to <8 x i32>
  %14 = bitcast <8 x float> %5 to <8 x i32>
  %15 = bitcast <8 x float> %6 to <8 x i32>
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = bitcast i8* %17 to float*
  %20 = and <8 x i32> %13, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %21 = and <8 x i32> %13, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %22 = bitcast <8 x i32> %21 to <8 x float>
  %23 = load float, float* %19, align 4
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = fcmp oeq <8 x float> %22, zeroinitializer
  %27 = fcmp oeq <8 x float> %22, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = or <8 x i1> %26, %27
  %29 = sitofp <8 x i32> %21 to <8 x float>
  %30 = fmul <8 x float> %29, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %31 = and <8 x i32> %13, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %32 = or <8 x i32> %31, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %33 = bitcast <8 x i32> %32 to <8 x float>
  %34 = fadd <8 x float> %30, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %35 = fmul <8 x float> %33, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %36 = fsub <8 x float> %34, %35
  %37 = fadd <8 x float> %33, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %38 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %37
  %39 = fsub <8 x float> %36, %38
  %40 = fmul <8 x float> %39, %25
  %41 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %40, i32 1) #13
  %42 = fsub <8 x float> %40, %41
  %43 = fadd <8 x float> %40, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %44 = fmul <8 x float> %42, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %45 = fsub <8 x float> %43, %44
  %46 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %42
  %47 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %46
  %48 = fadd <8 x float> %45, %47
  %49 = fmul <8 x float> %48, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %50 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %49) #13
  %51 = select <8 x i1> %28, <8 x i32> %21, <8 x i32> %50
  %52 = or <8 x i32> %51, %20
  %53 = and <8 x i32> %14, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %54 = and <8 x i32> %14, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %55 = bitcast <8 x i32> %54 to <8 x float>
  %56 = fcmp oeq <8 x float> %55, zeroinitializer
  %57 = fcmp oeq <8 x float> %55, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %58 = or <8 x i1> %56, %57
  %59 = sitofp <8 x i32> %54 to <8 x float>
  %60 = fmul <8 x float> %59, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %61 = and <8 x i32> %14, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %62 = or <8 x i32> %61, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %63 = bitcast <8 x i32> %62 to <8 x float>
  %64 = fadd <8 x float> %60, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %65 = fmul <8 x float> %63, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %66 = fsub <8 x float> %64, %65
  %67 = fadd <8 x float> %63, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %68 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %67
  %69 = fsub <8 x float> %66, %68
  %70 = fmul <8 x float> %69, %25
  %71 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %70, i32 1) #13
  %72 = fsub <8 x float> %70, %71
  %73 = fadd <8 x float> %70, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %74 = fmul <8 x float> %72, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %75 = fsub <8 x float> %73, %74
  %76 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %72
  %77 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %76
  %78 = fadd <8 x float> %75, %77
  %79 = fmul <8 x float> %78, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %80 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %79) #13
  %81 = select <8 x i1> %58, <8 x i32> %54, <8 x i32> %80
  %82 = or <8 x i32> %81, %53
  %83 = and <8 x i32> %15, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %84 = and <8 x i32> %15, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %85 = bitcast <8 x i32> %84 to <8 x float>
  %86 = fcmp oeq <8 x float> %85, zeroinitializer
  %87 = fcmp oeq <8 x float> %85, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %88 = or <8 x i1> %86, %87
  %89 = sitofp <8 x i32> %84 to <8 x float>
  %90 = fmul <8 x float> %89, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %91 = and <8 x i32> %15, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %92 = or <8 x i32> %91, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %93 = bitcast <8 x i32> %92 to <8 x float>
  %94 = fadd <8 x float> %90, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %95 = fmul <8 x float> %93, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %96 = fsub <8 x float> %94, %95
  %97 = fadd <8 x float> %93, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %98 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %97
  %99 = fsub <8 x float> %96, %98
  %100 = fmul <8 x float> %99, %25
  %101 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %100, i32 1) #13
  %102 = fsub <8 x float> %100, %101
  %103 = fadd <8 x float> %100, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %104 = fmul <8 x float> %102, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %105 = fsub <8 x float> %103, %104
  %106 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %102
  %107 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %106
  %108 = fadd <8 x float> %105, %107
  %109 = fmul <8 x float> %108, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %110 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %109) #13
  %111 = select <8 x i1> %88, <8 x i32> %84, <8 x i32> %110
  %112 = or <8 x i32> %111, %83
  %113 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %18) #10, !srcloc !98
  %114 = extractvalue { i8*, i8** } %113, 0
  %115 = extractvalue { i8*, i8** } %113, 1
  %116 = bitcast i8* %114 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  %117 = bitcast <8 x i32> %52 to <8 x float>
  %118 = bitcast <8 x i32> %82 to <8 x float>
  %119 = bitcast <8 x i32> %112 to <8 x float>
  tail call void %116(i64 %0, i8** %115, i64 %2, i64 %3, <8 x float> %117, <8 x float> %118, <8 x float> %119, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL5PQishEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = bitcast <8 x float> %4 to <8 x i32>
  %14 = bitcast <8 x float> %5 to <8 x i32>
  %15 = bitcast <8 x float> %6 to <8 x i32>
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = and <8 x i32> %13, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %20 = and <8 x i32> %13, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %21 = bitcast <8 x i32> %20 to <8 x float>
  %22 = getelementptr inbounds i8, i8* %17, i64 8
  %23 = bitcast i8* %22 to float*
  %24 = load float, float* %23, align 4
  %25 = insertelement <8 x float> undef, float %24, i32 0
  %26 = shufflevector <8 x float> %25, <8 x float> undef, <8 x i32> zeroinitializer
  %27 = getelementptr inbounds i8, i8* %17, i64 12
  %28 = bitcast i8* %27 to float*
  %29 = load float, float* %28, align 4
  %30 = insertelement <8 x float> undef, float %29, i32 0
  %31 = shufflevector <8 x float> %30, <8 x float> undef, <8 x i32> zeroinitializer
  %32 = fcmp oeq <8 x float> %21, zeroinitializer
  %33 = fcmp oeq <8 x float> %21, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %34 = or <8 x i1> %32, %33
  %35 = sitofp <8 x i32> %20 to <8 x float>
  %36 = fmul <8 x float> %35, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %37 = and <8 x i32> %13, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %38 = or <8 x i32> %37, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %39 = bitcast <8 x i32> %38 to <8 x float>
  %40 = fadd <8 x float> %36, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %41 = fmul <8 x float> %39, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %42 = fsub <8 x float> %40, %41
  %43 = fadd <8 x float> %39, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %44 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %43
  %45 = fsub <8 x float> %42, %44
  %46 = fmul <8 x float> %45, %31
  %47 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %46, i32 1) #13
  %48 = fsub <8 x float> %46, %47
  %49 = fadd <8 x float> %46, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %50 = fmul <8 x float> %48, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %51 = fsub <8 x float> %49, %50
  %52 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %48
  %53 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %52
  %54 = fadd <8 x float> %51, %53
  %55 = fmul <8 x float> %54, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %56 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %55) #13
  %57 = select <8 x i1> %34, <8 x i32> %20, <8 x i32> %56
  %58 = bitcast <8 x i32> %57 to <8 x float>
  %59 = getelementptr inbounds i8, i8* %17, i64 4
  %60 = bitcast i8* %59 to float*
  %61 = load float, float* %60, align 4
  %62 = insertelement <8 x float> undef, float %61, i32 0
  %63 = shufflevector <8 x float> %62, <8 x float> undef, <8 x i32> zeroinitializer
  %64 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %26, <8 x float> %58, <8 x float> %63) #13
  %65 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %64, <8 x float> zeroinitializer) #13
  %66 = getelementptr inbounds i8, i8* %17, i64 20
  %67 = bitcast i8* %66 to float*
  %68 = load float, float* %67, align 4
  %69 = insertelement <8 x float> undef, float %68, i32 0
  %70 = shufflevector <8 x float> %69, <8 x float> undef, <8 x i32> zeroinitializer
  %71 = getelementptr inbounds i8, i8* %17, i64 16
  %72 = bitcast i8* %71 to float*
  %73 = load float, float* %72, align 4
  %74 = insertelement <8 x float> undef, float %73, i32 0
  %75 = shufflevector <8 x float> %74, <8 x float> undef, <8 x i32> zeroinitializer
  %76 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %70, <8 x float> %58, <8 x float> %75) #13
  %77 = fdiv <8 x float> %65, %76
  %78 = getelementptr inbounds i8, i8* %17, i64 24
  %79 = bitcast i8* %78 to float*
  %80 = load float, float* %79, align 4
  %81 = insertelement <8 x float> undef, float %80, i32 0
  %82 = shufflevector <8 x float> %81, <8 x float> undef, <8 x i32> zeroinitializer
  %83 = fcmp oeq <8 x float> %77, zeroinitializer
  %84 = fcmp oeq <8 x float> %77, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %85 = or <8 x i1> %83, %84
  %86 = bitcast <8 x float> %77 to <8 x i32>
  %87 = sitofp <8 x i32> %86 to <8 x float>
  %88 = fmul <8 x float> %87, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %89 = and <8 x i32> %86, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %90 = or <8 x i32> %89, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %91 = bitcast <8 x i32> %90 to <8 x float>
  %92 = fadd <8 x float> %88, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %93 = fmul <8 x float> %91, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %94 = fsub <8 x float> %92, %93
  %95 = fadd <8 x float> %91, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %96 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %95
  %97 = fsub <8 x float> %94, %96
  %98 = fmul <8 x float> %82, %97
  %99 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %98, i32 1) #13
  %100 = fsub <8 x float> %98, %99
  %101 = fadd <8 x float> %98, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %102 = fmul <8 x float> %100, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %103 = fsub <8 x float> %101, %102
  %104 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %100
  %105 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %104
  %106 = fadd <8 x float> %103, %105
  %107 = fmul <8 x float> %106, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %108 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %107) #13
  %109 = select <8 x i1> %85, <8 x i32> %86, <8 x i32> %108
  %110 = or <8 x i32> %109, %19
  %111 = and <8 x i32> %14, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %112 = and <8 x i32> %14, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %113 = bitcast <8 x i32> %112 to <8 x float>
  %114 = fcmp oeq <8 x float> %113, zeroinitializer
  %115 = fcmp oeq <8 x float> %113, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %116 = or <8 x i1> %114, %115
  %117 = sitofp <8 x i32> %112 to <8 x float>
  %118 = fmul <8 x float> %117, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %119 = and <8 x i32> %14, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %120 = or <8 x i32> %119, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %121 = bitcast <8 x i32> %120 to <8 x float>
  %122 = fadd <8 x float> %118, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %123 = fmul <8 x float> %121, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %124 = fsub <8 x float> %122, %123
  %125 = fadd <8 x float> %121, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %126 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %125
  %127 = fsub <8 x float> %124, %126
  %128 = fmul <8 x float> %127, %31
  %129 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %128, i32 1) #13
  %130 = fsub <8 x float> %128, %129
  %131 = fadd <8 x float> %128, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %132 = fmul <8 x float> %130, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %133 = fsub <8 x float> %131, %132
  %134 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %130
  %135 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %134
  %136 = fadd <8 x float> %133, %135
  %137 = fmul <8 x float> %136, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %138 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %137) #13
  %139 = select <8 x i1> %116, <8 x i32> %112, <8 x i32> %138
  %140 = bitcast <8 x i32> %139 to <8 x float>
  %141 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %26, <8 x float> %140, <8 x float> %63) #13
  %142 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %141, <8 x float> zeroinitializer) #13
  %143 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %70, <8 x float> %140, <8 x float> %75) #13
  %144 = fdiv <8 x float> %142, %143
  %145 = fcmp oeq <8 x float> %144, zeroinitializer
  %146 = fcmp oeq <8 x float> %144, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %147 = or <8 x i1> %145, %146
  %148 = bitcast <8 x float> %144 to <8 x i32>
  %149 = sitofp <8 x i32> %148 to <8 x float>
  %150 = fmul <8 x float> %149, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %151 = and <8 x i32> %148, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %152 = or <8 x i32> %151, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %153 = bitcast <8 x i32> %152 to <8 x float>
  %154 = fadd <8 x float> %150, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %155 = fmul <8 x float> %153, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %156 = fsub <8 x float> %154, %155
  %157 = fadd <8 x float> %153, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %158 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %157
  %159 = fsub <8 x float> %156, %158
  %160 = fmul <8 x float> %82, %159
  %161 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %160, i32 1) #13
  %162 = fsub <8 x float> %160, %161
  %163 = fadd <8 x float> %160, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %164 = fmul <8 x float> %162, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %165 = fsub <8 x float> %163, %164
  %166 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %162
  %167 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %166
  %168 = fadd <8 x float> %165, %167
  %169 = fmul <8 x float> %168, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %170 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %169) #13
  %171 = select <8 x i1> %147, <8 x i32> %148, <8 x i32> %170
  %172 = or <8 x i32> %171, %111
  %173 = and <8 x i32> %15, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %174 = and <8 x i32> %15, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %175 = bitcast <8 x i32> %174 to <8 x float>
  %176 = fcmp oeq <8 x float> %175, zeroinitializer
  %177 = fcmp oeq <8 x float> %175, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %178 = or <8 x i1> %176, %177
  %179 = sitofp <8 x i32> %174 to <8 x float>
  %180 = fmul <8 x float> %179, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %181 = and <8 x i32> %15, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %182 = or <8 x i32> %181, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %183 = bitcast <8 x i32> %182 to <8 x float>
  %184 = fadd <8 x float> %180, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %185 = fmul <8 x float> %183, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %186 = fsub <8 x float> %184, %185
  %187 = fadd <8 x float> %183, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %188 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %187
  %189 = fsub <8 x float> %186, %188
  %190 = fmul <8 x float> %189, %31
  %191 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %190, i32 1) #13
  %192 = fsub <8 x float> %190, %191
  %193 = fadd <8 x float> %190, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %194 = fmul <8 x float> %192, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %195 = fsub <8 x float> %193, %194
  %196 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %192
  %197 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %196
  %198 = fadd <8 x float> %195, %197
  %199 = fmul <8 x float> %198, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %200 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %199) #13
  %201 = select <8 x i1> %178, <8 x i32> %174, <8 x i32> %200
  %202 = bitcast <8 x i32> %201 to <8 x float>
  %203 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %26, <8 x float> %202, <8 x float> %63) #13
  %204 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %203, <8 x float> zeroinitializer) #13
  %205 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %70, <8 x float> %202, <8 x float> %75) #13
  %206 = fdiv <8 x float> %204, %205
  %207 = fcmp oeq <8 x float> %206, zeroinitializer
  %208 = fcmp oeq <8 x float> %206, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %209 = or <8 x i1> %207, %208
  %210 = bitcast <8 x float> %206 to <8 x i32>
  %211 = sitofp <8 x i32> %210 to <8 x float>
  %212 = fmul <8 x float> %211, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %213 = and <8 x i32> %210, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %214 = or <8 x i32> %213, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %215 = bitcast <8 x i32> %214 to <8 x float>
  %216 = fadd <8 x float> %212, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %217 = fmul <8 x float> %215, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %218 = fsub <8 x float> %216, %217
  %219 = fadd <8 x float> %215, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %220 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %219
  %221 = fsub <8 x float> %218, %220
  %222 = fmul <8 x float> %82, %221
  %223 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %222, i32 1) #13
  %224 = fsub <8 x float> %222, %223
  %225 = fadd <8 x float> %222, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %226 = fmul <8 x float> %224, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %227 = fsub <8 x float> %225, %226
  %228 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %224
  %229 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %228
  %230 = fadd <8 x float> %227, %229
  %231 = fmul <8 x float> %230, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %232 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %231) #13
  %233 = select <8 x i1> %209, <8 x i32> %210, <8 x i32> %232
  %234 = or <8 x i32> %233, %173
  %235 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %18) #10, !srcloc !98
  %236 = extractvalue { i8*, i8** } %235, 0
  %237 = extractvalue { i8*, i8** } %235, 1
  %238 = bitcast i8* %236 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  %239 = bitcast <8 x i32> %110 to <8 x float>
  %240 = bitcast <8 x i32> %172 to <8 x float>
  %241 = bitcast <8 x i32> %234 to <8 x float>
  tail call void %238(i64 %0, i8** %237, i64 %2, i64 %3, <8 x float> %239, <8 x float> %240, <8 x float> %241, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL6HLGishEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = bitcast <8 x float> %4 to <8 x i32>
  %14 = bitcast <8 x float> %5 to <8 x i32>
  %15 = bitcast <8 x float> %6 to <8 x i32>
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = and <8 x i32> %13, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %20 = and <8 x i32> %13, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %21 = bitcast <8 x i32> %20 to <8 x float>
  %22 = getelementptr inbounds i8, i8* %17, i64 4
  %23 = bitcast i8* %22 to float*
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds i8, i8* %17, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds i8, i8* %17, i64 12
  %29 = bitcast i8* %28 to float*
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds i8, i8* %17, i64 16
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4
  %34 = getelementptr inbounds i8, i8* %17, i64 20
  %35 = bitcast i8* %34 to float*
  %36 = load float, float* %35, align 4
  %37 = getelementptr inbounds i8, i8* %17, i64 24
  %38 = bitcast i8* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = fadd float %39, 1.000000e+00
  %41 = insertelement <8 x float> undef, float %24, i32 0
  %42 = shufflevector <8 x float> %41, <8 x float> undef, <8 x i32> zeroinitializer
  %43 = fmul <8 x float> %42, %21
  %44 = fcmp ole <8 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %45 = insertelement <8 x float> undef, float %27, i32 0
  %46 = shufflevector <8 x float> %45, <8 x float> undef, <8 x i32> zeroinitializer
  %47 = fcmp oeq <8 x float> %43, zeroinitializer
  %48 = fcmp oeq <8 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %49 = or <8 x i1> %47, %48
  %50 = bitcast <8 x float> %43 to <8 x i32>
  %51 = sitofp <8 x i32> %50 to <8 x float>
  %52 = fmul <8 x float> %51, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %53 = and <8 x i32> %50, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %54 = or <8 x i32> %53, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %55 = bitcast <8 x i32> %54 to <8 x float>
  %56 = fadd <8 x float> %52, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %57 = fmul <8 x float> %55, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %58 = fsub <8 x float> %56, %57
  %59 = fadd <8 x float> %55, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %60 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %59
  %61 = fsub <8 x float> %58, %60
  %62 = fmul <8 x float> %46, %61
  %63 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %62, i32 1) #13
  %64 = fsub <8 x float> %62, %63
  %65 = fadd <8 x float> %62, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %66 = fmul <8 x float> %64, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %67 = fsub <8 x float> %65, %66
  %68 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %64
  %69 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %68
  %70 = fadd <8 x float> %67, %69
  %71 = fmul <8 x float> %70, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %72 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %71) #13
  %73 = bitcast <8 x i32> %72 to <8 x float>
  %74 = select <8 x i1> %49, <8 x float> %43, <8 x float> %73
  %75 = insertelement <8 x float> undef, float %36, i32 0
  %76 = shufflevector <8 x float> %75, <8 x float> undef, <8 x i32> zeroinitializer
  %77 = fsub <8 x float> %21, %76
  %78 = insertelement <8 x float> undef, float %30, i32 0
  %79 = shufflevector <8 x float> %78, <8 x float> undef, <8 x i32> zeroinitializer
  %80 = fmul <8 x float> %79, %77
  %81 = fmul <8 x float> %80, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %82 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %81, i32 1) #13
  %83 = fsub <8 x float> %81, %82
  %84 = fadd <8 x float> %81, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %85 = fmul <8 x float> %83, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %86 = fsub <8 x float> %84, %85
  %87 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %83
  %88 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %87
  %89 = fadd <8 x float> %86, %88
  %90 = fmul <8 x float> %89, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %91 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %90) #13
  %92 = bitcast <8 x i32> %91 to <8 x float>
  %93 = insertelement <8 x float> undef, float %33, i32 0
  %94 = shufflevector <8 x float> %93, <8 x float> undef, <8 x i32> zeroinitializer
  %95 = fadd <8 x float> %94, %92
  %96 = select <8 x i1> %44, <8 x float> %74, <8 x float> %95
  %97 = insertelement <8 x float> undef, float %40, i32 0
  %98 = shufflevector <8 x float> %97, <8 x float> undef, <8 x i32> zeroinitializer
  %99 = bitcast <8 x float> %96 to <8 x i32>
  %100 = or <8 x i32> %19, %99
  %101 = bitcast <8 x i32> %100 to <8 x float>
  %102 = fmul <8 x float> %98, %101
  %103 = and <8 x i32> %14, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %104 = and <8 x i32> %14, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %105 = bitcast <8 x i32> %104 to <8 x float>
  %106 = fmul <8 x float> %42, %105
  %107 = fcmp ole <8 x float> %106, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %108 = fcmp oeq <8 x float> %106, zeroinitializer
  %109 = fcmp oeq <8 x float> %106, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %110 = or <8 x i1> %108, %109
  %111 = bitcast <8 x float> %106 to <8 x i32>
  %112 = sitofp <8 x i32> %111 to <8 x float>
  %113 = fmul <8 x float> %112, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %114 = and <8 x i32> %111, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %115 = or <8 x i32> %114, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %116 = bitcast <8 x i32> %115 to <8 x float>
  %117 = fadd <8 x float> %113, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %118 = fmul <8 x float> %116, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %119 = fsub <8 x float> %117, %118
  %120 = fadd <8 x float> %116, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %121 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %120
  %122 = fsub <8 x float> %119, %121
  %123 = fmul <8 x float> %46, %122
  %124 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %123, i32 1) #13
  %125 = fsub <8 x float> %123, %124
  %126 = fadd <8 x float> %123, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %127 = fmul <8 x float> %125, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %128 = fsub <8 x float> %126, %127
  %129 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %125
  %130 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %129
  %131 = fadd <8 x float> %128, %130
  %132 = fmul <8 x float> %131, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %133 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %132) #13
  %134 = bitcast <8 x i32> %133 to <8 x float>
  %135 = select <8 x i1> %110, <8 x float> %106, <8 x float> %134
  %136 = fsub <8 x float> %105, %76
  %137 = fmul <8 x float> %79, %136
  %138 = fmul <8 x float> %137, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %139 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %138, i32 1) #13
  %140 = fsub <8 x float> %138, %139
  %141 = fadd <8 x float> %138, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %142 = fmul <8 x float> %140, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %143 = fsub <8 x float> %141, %142
  %144 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %140
  %145 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %144
  %146 = fadd <8 x float> %143, %145
  %147 = fmul <8 x float> %146, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %148 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %147) #13
  %149 = bitcast <8 x i32> %148 to <8 x float>
  %150 = fadd <8 x float> %94, %149
  %151 = select <8 x i1> %107, <8 x float> %135, <8 x float> %150
  %152 = bitcast <8 x float> %151 to <8 x i32>
  %153 = or <8 x i32> %103, %152
  %154 = bitcast <8 x i32> %153 to <8 x float>
  %155 = fmul <8 x float> %98, %154
  %156 = and <8 x i32> %15, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %157 = and <8 x i32> %15, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %158 = bitcast <8 x i32> %157 to <8 x float>
  %159 = fmul <8 x float> %42, %158
  %160 = fcmp ole <8 x float> %159, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %161 = fcmp oeq <8 x float> %159, zeroinitializer
  %162 = fcmp oeq <8 x float> %159, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %163 = or <8 x i1> %161, %162
  %164 = bitcast <8 x float> %159 to <8 x i32>
  %165 = sitofp <8 x i32> %164 to <8 x float>
  %166 = fmul <8 x float> %165, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %167 = and <8 x i32> %164, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %168 = or <8 x i32> %167, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %169 = bitcast <8 x i32> %168 to <8 x float>
  %170 = fadd <8 x float> %166, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %171 = fmul <8 x float> %169, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %172 = fsub <8 x float> %170, %171
  %173 = fadd <8 x float> %169, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %174 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %173
  %175 = fsub <8 x float> %172, %174
  %176 = fmul <8 x float> %46, %175
  %177 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %176, i32 1) #13
  %178 = fsub <8 x float> %176, %177
  %179 = fadd <8 x float> %176, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %180 = fmul <8 x float> %178, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %181 = fsub <8 x float> %179, %180
  %182 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %178
  %183 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %182
  %184 = fadd <8 x float> %181, %183
  %185 = fmul <8 x float> %184, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %186 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %185) #13
  %187 = bitcast <8 x i32> %186 to <8 x float>
  %188 = select <8 x i1> %163, <8 x float> %159, <8 x float> %187
  %189 = fsub <8 x float> %158, %76
  %190 = fmul <8 x float> %79, %189
  %191 = fmul <8 x float> %190, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %192 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %191, i32 1) #13
  %193 = fsub <8 x float> %191, %192
  %194 = fadd <8 x float> %191, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %195 = fmul <8 x float> %193, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %196 = fsub <8 x float> %194, %195
  %197 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %193
  %198 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %197
  %199 = fadd <8 x float> %196, %198
  %200 = fmul <8 x float> %199, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %201 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %200) #13
  %202 = bitcast <8 x i32> %201 to <8 x float>
  %203 = fadd <8 x float> %94, %202
  %204 = select <8 x i1> %160, <8 x float> %188, <8 x float> %203
  %205 = bitcast <8 x float> %204 to <8 x i32>
  %206 = or <8 x i32> %156, %205
  %207 = bitcast <8 x i32> %206 to <8 x float>
  %208 = fmul <8 x float> %98, %207
  %209 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %18) #10, !srcloc !98
  %210 = extractvalue { i8*, i8** } %209, 0
  %211 = extractvalue { i8*, i8** } %209, 1
  %212 = bitcast i8* %210 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %212(i64 %0, i8** %211, i64 %2, i64 %3, <8 x float> %102, <8 x float> %155, <8 x float> %208, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9HLGinvishEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = bitcast <8 x float> %4 to <8 x i32>
  %14 = bitcast <8 x float> %5 to <8 x i32>
  %15 = bitcast <8 x float> %6 to <8 x i32>
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = and <8 x i32> %13, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %20 = and <8 x i32> %13, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %21 = bitcast <8 x i32> %20 to <8 x float>
  %22 = getelementptr inbounds i8, i8* %17, i64 4
  %23 = bitcast i8* %22 to float*
  %24 = load float, float* %23, align 4
  %25 = getelementptr inbounds i8, i8* %17, i64 8
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = getelementptr inbounds i8, i8* %17, i64 12
  %29 = bitcast i8* %28 to float*
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds i8, i8* %17, i64 16
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4
  %34 = getelementptr inbounds i8, i8* %17, i64 20
  %35 = bitcast i8* %34 to float*
  %36 = load float, float* %35, align 4
  %37 = getelementptr inbounds i8, i8* %17, i64 24
  %38 = bitcast i8* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = fadd float %39, 1.000000e+00
  %41 = insertelement <8 x float> undef, float %40, i32 0
  %42 = shufflevector <8 x float> %41, <8 x float> undef, <8 x i32> zeroinitializer
  %43 = fdiv <8 x float> %21, %42
  %44 = fcmp ole <8 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %45 = insertelement <8 x float> undef, float %24, i32 0
  %46 = shufflevector <8 x float> %45, <8 x float> undef, <8 x i32> zeroinitializer
  %47 = insertelement <8 x float> undef, float %27, i32 0
  %48 = shufflevector <8 x float> %47, <8 x float> undef, <8 x i32> zeroinitializer
  %49 = fcmp oeq <8 x float> %43, zeroinitializer
  %50 = fcmp oeq <8 x float> %43, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %51 = or <8 x i1> %49, %50
  %52 = bitcast <8 x float> %43 to <8 x i32>
  %53 = sitofp <8 x i32> %52 to <8 x float>
  %54 = fmul <8 x float> %53, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %55 = and <8 x i32> %52, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %56 = or <8 x i32> %55, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %57 = bitcast <8 x i32> %56 to <8 x float>
  %58 = fadd <8 x float> %54, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %59 = fmul <8 x float> %57, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %60 = fsub <8 x float> %58, %59
  %61 = fadd <8 x float> %57, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %62 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %61
  %63 = fsub <8 x float> %60, %62
  %64 = fmul <8 x float> %48, %63
  %65 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %64, i32 1) #13
  %66 = fsub <8 x float> %64, %65
  %67 = fadd <8 x float> %64, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %68 = fmul <8 x float> %66, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %69 = fsub <8 x float> %67, %68
  %70 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %66
  %71 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %70
  %72 = fadd <8 x float> %69, %71
  %73 = fmul <8 x float> %72, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %74 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %73) #13
  %75 = bitcast <8 x i32> %74 to <8 x float>
  %76 = select <8 x i1> %51, <8 x float> %43, <8 x float> %75
  %77 = fmul <8 x float> %46, %76
  %78 = insertelement <8 x float> undef, float %30, i32 0
  %79 = shufflevector <8 x float> %78, <8 x float> undef, <8 x i32> zeroinitializer
  %80 = insertelement <8 x float> undef, float %33, i32 0
  %81 = shufflevector <8 x float> %80, <8 x float> undef, <8 x i32> zeroinitializer
  %82 = fsub <8 x float> %43, %81
  %83 = bitcast <8 x float> %82 to <8 x i32>
  %84 = sitofp <8 x i32> %83 to <8 x float>
  %85 = fmul <8 x float> %84, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %86 = and <8 x i32> %83, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %87 = or <8 x i32> %86, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %88 = bitcast <8 x i32> %87 to <8 x float>
  %89 = fadd <8 x float> %85, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %90 = fmul <8 x float> %88, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %91 = fsub <8 x float> %89, %90
  %92 = fadd <8 x float> %88, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %93 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %92
  %94 = fsub <8 x float> %91, %93
  %95 = fmul <8 x float> %94, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %96 = fmul <8 x float> %79, %95
  %97 = insertelement <8 x float> undef, float %36, i32 0
  %98 = shufflevector <8 x float> %97, <8 x float> undef, <8 x i32> zeroinitializer
  %99 = fadd <8 x float> %98, %96
  %100 = select <8 x i1> %44, <8 x float> %77, <8 x float> %99
  %101 = bitcast <8 x float> %100 to <8 x i32>
  %102 = or <8 x i32> %19, %101
  %103 = and <8 x i32> %14, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %104 = and <8 x i32> %14, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %105 = bitcast <8 x i32> %104 to <8 x float>
  %106 = fdiv <8 x float> %105, %42
  %107 = fcmp ole <8 x float> %106, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %108 = fcmp oeq <8 x float> %106, zeroinitializer
  %109 = fcmp oeq <8 x float> %106, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %110 = or <8 x i1> %108, %109
  %111 = bitcast <8 x float> %106 to <8 x i32>
  %112 = sitofp <8 x i32> %111 to <8 x float>
  %113 = fmul <8 x float> %112, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %114 = and <8 x i32> %111, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %115 = or <8 x i32> %114, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %116 = bitcast <8 x i32> %115 to <8 x float>
  %117 = fadd <8 x float> %113, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %118 = fmul <8 x float> %116, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %119 = fsub <8 x float> %117, %118
  %120 = fadd <8 x float> %116, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %121 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %120
  %122 = fsub <8 x float> %119, %121
  %123 = fmul <8 x float> %48, %122
  %124 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %123, i32 1) #13
  %125 = fsub <8 x float> %123, %124
  %126 = fadd <8 x float> %123, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %127 = fmul <8 x float> %125, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %128 = fsub <8 x float> %126, %127
  %129 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %125
  %130 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %129
  %131 = fadd <8 x float> %128, %130
  %132 = fmul <8 x float> %131, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %133 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %132) #13
  %134 = bitcast <8 x i32> %133 to <8 x float>
  %135 = select <8 x i1> %110, <8 x float> %106, <8 x float> %134
  %136 = fmul <8 x float> %46, %135
  %137 = fsub <8 x float> %106, %81
  %138 = bitcast <8 x float> %137 to <8 x i32>
  %139 = sitofp <8 x i32> %138 to <8 x float>
  %140 = fmul <8 x float> %139, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %141 = and <8 x i32> %138, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %142 = or <8 x i32> %141, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %143 = bitcast <8 x i32> %142 to <8 x float>
  %144 = fadd <8 x float> %140, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %145 = fmul <8 x float> %143, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %146 = fsub <8 x float> %144, %145
  %147 = fadd <8 x float> %143, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %148 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %147
  %149 = fsub <8 x float> %146, %148
  %150 = fmul <8 x float> %149, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %151 = fmul <8 x float> %79, %150
  %152 = fadd <8 x float> %98, %151
  %153 = select <8 x i1> %107, <8 x float> %136, <8 x float> %152
  %154 = bitcast <8 x float> %153 to <8 x i32>
  %155 = or <8 x i32> %103, %154
  %156 = and <8 x i32> %15, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %157 = and <8 x i32> %15, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %158 = bitcast <8 x i32> %157 to <8 x float>
  %159 = fdiv <8 x float> %158, %42
  %160 = fcmp ole <8 x float> %159, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %161 = fcmp oeq <8 x float> %159, zeroinitializer
  %162 = fcmp oeq <8 x float> %159, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %163 = or <8 x i1> %161, %162
  %164 = bitcast <8 x float> %159 to <8 x i32>
  %165 = sitofp <8 x i32> %164 to <8 x float>
  %166 = fmul <8 x float> %165, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %167 = and <8 x i32> %164, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %168 = or <8 x i32> %167, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %169 = bitcast <8 x i32> %168 to <8 x float>
  %170 = fadd <8 x float> %166, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %171 = fmul <8 x float> %169, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %172 = fsub <8 x float> %170, %171
  %173 = fadd <8 x float> %169, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %174 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %173
  %175 = fsub <8 x float> %172, %174
  %176 = fmul <8 x float> %48, %175
  %177 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %176, i32 1) #13
  %178 = fsub <8 x float> %176, %177
  %179 = fadd <8 x float> %176, <float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000, float 0x405E518A20000000>
  %180 = fmul <8 x float> %178, <float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000, float 0x3FF7D791A0000000>
  %181 = fsub <8 x float> %179, %180
  %182 = fsub <8 x float> <float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000, float 0x40135EBF00000000>, %178
  %183 = fdiv <8 x float> <float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000, float 0x403BBA5FC0000000>, %182
  %184 = fadd <8 x float> %181, %183
  %185 = fmul <8 x float> %184, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %186 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %185) #13
  %187 = bitcast <8 x i32> %186 to <8 x float>
  %188 = select <8 x i1> %163, <8 x float> %159, <8 x float> %187
  %189 = fmul <8 x float> %46, %188
  %190 = fsub <8 x float> %159, %81
  %191 = bitcast <8 x float> %190 to <8 x i32>
  %192 = sitofp <8 x i32> %191 to <8 x float>
  %193 = fmul <8 x float> %192, <float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000, float 0x3E80000000000000>
  %194 = and <8 x i32> %191, <i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %195 = or <8 x i32> %194, <i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608, i32 1056964608>
  %196 = bitcast <8 x i32> %195 to <8 x float>
  %197 = fadd <8 x float> %193, <float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000, float 0xC05F0E6EE0000000>
  %198 = fmul <8 x float> %196, <float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000, float 0x3FF7F7EEA0000000>
  %199 = fsub <8 x float> %197, %198
  %200 = fadd <8 x float> %196, <float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000, float 0x3FD6889F20000000>
  %201 = fdiv <8 x float> <float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000, float 0x3FFB9D3460000000>, %200
  %202 = fsub <8 x float> %199, %201
  %203 = fmul <8 x float> %202, <float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000, float 0x3FE62E4300000000>
  %204 = fmul <8 x float> %79, %203
  %205 = fadd <8 x float> %98, %204
  %206 = select <8 x i1> %160, <8 x float> %189, <8 x float> %205
  %207 = bitcast <8 x float> %206 to <8 x i32>
  %208 = or <8 x i32> %156, %207
  %209 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %18) #10, !srcloc !98
  %210 = extractvalue { i8*, i8** } %209, 0
  %211 = extractvalue { i8*, i8** } %209, 1
  %212 = bitcast i8* %210 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  %213 = bitcast <8 x i32> %102 to <8 x float>
  %214 = bitcast <8 x i32> %155 to <8 x float>
  %215 = bitcast <8 x i32> %208 to <8 x float>
  tail call void %212(i64 %0, i8** %211, i64 %2, i64 %3, <8 x float> %213, <8 x float> %214, <8 x float> %215, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8mirror_xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds i8, i8* %14, i64 4
  %19 = bitcast i8* %18 to float*
  %20 = load float, float* %19, align 4
  %21 = insertelement <8 x float> undef, float %17, i32 0
  %22 = shufflevector <8 x float> %21, <8 x float> undef, <8 x i32> zeroinitializer
  %23 = fsub <8 x float> %4, %22
  %24 = fadd float %17, %17
  %25 = insertelement <8 x float> undef, float %24, i32 0
  %26 = shufflevector <8 x float> %25, <8 x float> undef, <8 x i32> zeroinitializer
  %27 = fmul float %20, 5.000000e-01
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = fmul <8 x float> %23, %29
  %31 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %30, i32 1) #13
  %32 = fmul <8 x float> %31, %26
  %33 = fsub <8 x float> %23, %32
  %34 = fsub <8 x float> %33, %22
  %35 = fsub <8 x float> zeroinitializer, %34
  %36 = bitcast <8 x float> %34 to <8 x i32>
  %37 = bitcast <8 x float> %35 to <8 x i32>
  %38 = and <8 x i32> %37, %36
  %39 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %40 = extractvalue { i8*, i8** } %39, 0
  %41 = extractvalue { i8*, i8** } %39, 1
  %42 = bitcast i8* %40 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  %43 = bitcast <8 x i32> %38 to <8 x float>
  tail call void %42(i64 %0, i8** %41, i64 %2, i64 %3, <8 x float> %43, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8repeat_xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 4
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = fmul <8 x float> %20, %4
  %22 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %21, i32 1) #13
  %23 = bitcast i8* %14 to float*
  %24 = load float, float* %23, align 4
  %25 = insertelement <8 x float> undef, float %24, i32 0
  %26 = shufflevector <8 x float> %25, <8 x float> undef, <8 x i32> zeroinitializer
  %27 = fmul <8 x float> %22, %26
  %28 = fsub <8 x float> %4, %27
  %29 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %30 = extractvalue { i8*, i8** } %29, 0
  %31 = extractvalue { i8*, i8** } %29, 1
  %32 = bitcast i8* %30 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %32(i64 %0, i8** %31, i64 %2, i64 %3, <8 x float> %28, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8mirror_yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds i8, i8* %14, i64 4
  %19 = bitcast i8* %18 to float*
  %20 = load float, float* %19, align 4
  %21 = insertelement <8 x float> undef, float %17, i32 0
  %22 = shufflevector <8 x float> %21, <8 x float> undef, <8 x i32> zeroinitializer
  %23 = fsub <8 x float> %5, %22
  %24 = fadd float %17, %17
  %25 = insertelement <8 x float> undef, float %24, i32 0
  %26 = shufflevector <8 x float> %25, <8 x float> undef, <8 x i32> zeroinitializer
  %27 = fmul float %20, 5.000000e-01
  %28 = insertelement <8 x float> undef, float %27, i32 0
  %29 = shufflevector <8 x float> %28, <8 x float> undef, <8 x i32> zeroinitializer
  %30 = fmul <8 x float> %23, %29
  %31 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %30, i32 1) #13
  %32 = fmul <8 x float> %31, %26
  %33 = fsub <8 x float> %23, %32
  %34 = fsub <8 x float> %33, %22
  %35 = fsub <8 x float> zeroinitializer, %34
  %36 = bitcast <8 x float> %34 to <8 x i32>
  %37 = bitcast <8 x float> %35 to <8 x i32>
  %38 = and <8 x i32> %37, %36
  %39 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %40 = extractvalue { i8*, i8** } %39, 0
  %41 = extractvalue { i8*, i8** } %39, 1
  %42 = bitcast i8* %40 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  %43 = bitcast <8 x i32> %38 to <8 x float>
  tail call void %42(i64 %0, i8** %41, i64 %2, i64 %3, <8 x float> %4, <8 x float> %43, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8repeat_yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 4
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = fmul <8 x float> %20, %5
  %22 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %21, i32 1) #13
  %23 = bitcast i8* %14 to float*
  %24 = load float, float* %23, align 4
  %25 = insertelement <8 x float> undef, float %24, i32 0
  %26 = shufflevector <8 x float> %25, <8 x float> undef, <8 x i32> zeroinitializer
  %27 = fmul <8 x float> %22, %26
  %28 = fsub <8 x float> %5, %27
  %29 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %30 = extractvalue { i8*, i8** } %29, 0
  %31 = extractvalue { i8*, i8** } %29, 1
  %32 = bitcast i8* %30 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %32(i64 %0, i8** %31, i64 %2, i64 %3, <8 x float> %4, <8 x float> %28, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7decal_xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = fcmp oge <8 x float> %4, zeroinitializer
  %20 = insertelement <8 x float> undef, float %18, i32 0
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <8 x i32> zeroinitializer
  %22 = fcmp ogt <8 x float> %21, %4
  %23 = and <8 x i1> %22, %19
  %24 = sext <8 x i1> %23 to <8 x i32>
  %25 = bitcast i8* %14 to <8 x i32>*
  store <8 x i32> %24, <8 x i32>* %25, align 4
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7decal_yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 68
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = fcmp oge <8 x float> %5, zeroinitializer
  %20 = insertelement <8 x float> undef, float %18, i32 0
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <8 x i32> zeroinitializer
  %22 = fcmp ogt <8 x float> %21, %5
  %23 = and <8 x i1> %22, %19
  %24 = sext <8 x i1> %23 to <8 x i32>
  %25 = bitcast i8* %14 to <8 x i32>*
  store <8 x i32> %24, <8 x i32>* %25, align 4
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL13decal_x_and_yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = getelementptr inbounds i8, i8* %14, i64 68
  %20 = bitcast i8* %19 to float*
  %21 = load float, float* %20, align 4
  %22 = fcmp oge <8 x float> %4, zeroinitializer
  %23 = insertelement <8 x float> undef, float %18, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = fcmp ogt <8 x float> %24, %4
  %26 = fcmp oge <8 x float> %5, zeroinitializer
  %27 = insertelement <8 x float> undef, float %21, i32 0
  %28 = shufflevector <8 x float> %27, <8 x float> undef, <8 x i32> zeroinitializer
  %29 = fcmp ogt <8 x float> %28, %5
  %30 = and <8 x i1> %26, %22
  %31 = and <8 x i1> %30, %25
  %32 = and <8 x i1> %31, %29
  %33 = sext <8 x i1> %32 to <8 x i32>
  %34 = bitcast i8* %14 to <8 x i32>*
  store <8 x i32> %33, <8 x i32>* %34, align 4
  %35 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %36 = extractvalue { i8*, i8** } %35, 0
  %37 = extractvalue { i8*, i8** } %35, 1
  %38 = bitcast i8* %36 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %38(i64 %0, i8** %37, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL16check_decal_maskEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = bitcast <8 x float> %4 to <8 x i32>
  %14 = bitcast <8 x float> %5 to <8 x i32>
  %15 = bitcast <8 x float> %6 to <8 x i32>
  %16 = bitcast <8 x float> %7 to <8 x i32>
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to <8 x i32>*
  %21 = load <8 x i32>, <8 x i32>* %20, align 4
  %22 = and <8 x i32> %21, %13
  %23 = and <8 x i32> %21, %14
  %24 = and <8 x i32> %21, %15
  %25 = and <8 x i32> %21, %16
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %19) #10, !srcloc !98
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  %30 = bitcast <8 x i32> %22 to <8 x float>
  %31 = bitcast <8 x i32> %23 to <8 x float>
  %32 = bitcast <8 x i32> %24 to <8 x float>
  %33 = bitcast <8 x i32> %25 to <8 x float>
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <8 x float> %30, <8 x float> %31, <8 x float> %32, <8 x float> %33, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8negate_xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %4
  %14 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %15 = extractvalue { i8*, i8** } %14, 0
  %16 = extractvalue { i8*, i8** } %14, 1
  %17 = bitcast i8* %15 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %17(i64 %0, i8** %16, i64 %2, i64 %3, <8 x float> %13, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8bilinearEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fadd <8 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %17 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %16, i32 1) #13
  %18 = fsub <8 x float> %16, %17
  %19 = fadd <8 x float> %5, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %19, i32 1) #13
  %21 = fsub <8 x float> %19, %20
  %22 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %18
  %23 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %21
  %24 = fadd <8 x float> %5, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %25 = fadd <8 x float> %4, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %26 = getelementptr inbounds i8, i8* %14, i64 28
  %27 = bitcast i8* %26 to i32*
  %28 = getelementptr inbounds i8, i8* %14, i64 12
  %29 = bitcast i8* %28 to float*
  %30 = getelementptr inbounds i8, i8* %14, i64 36
  %31 = bitcast i8* %30 to float*
  %32 = getelementptr inbounds i8, i8* %14, i64 32
  %33 = bitcast i8* %32 to i32*
  %34 = getelementptr inbounds i8, i8* %14, i64 16
  %35 = bitcast i8* %34 to float*
  %36 = getelementptr inbounds i8, i8* %14, i64 40
  %37 = bitcast i8* %36 to float*
  %38 = getelementptr inbounds i8, i8* %14, i64 24
  %39 = bitcast i8* %38 to i32*
  %40 = bitcast i8* %14 to i8**
  %41 = getelementptr inbounds i8, i8* %14, i64 8
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %27, align 4
  %44 = load float, float* %29, align 4
  %45 = load float, float* %31, align 4
  switch i32 %43, label %75 [
    i32 3, label %76
    i32 0, label %76
    i32 1, label %46
    i32 2, label %55
  ]

46:                                               ; preds = %12
  %47 = insertelement <8 x float> undef, float %45, i32 0
  %48 = shufflevector <8 x float> %47, <8 x float> undef, <8 x i32> zeroinitializer
  %49 = fmul <8 x float> %25, %48
  %50 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %49, i32 1) #13
  %51 = insertelement <8 x float> undef, float %44, i32 0
  %52 = shufflevector <8 x float> %51, <8 x float> undef, <8 x i32> zeroinitializer
  %53 = fmul <8 x float> %52, %50
  %54 = fsub <8 x float> %25, %53
  br label %76

55:                                               ; preds = %12
  %56 = insertelement <8 x float> undef, float %44, i32 0
  %57 = shufflevector <8 x float> %56, <8 x float> undef, <8 x i32> zeroinitializer
  %58 = fsub <8 x float> %25, %57
  %59 = fadd float %44, %44
  %60 = insertelement <8 x float> undef, float %59, i32 0
  %61 = shufflevector <8 x float> %60, <8 x float> undef, <8 x i32> zeroinitializer
  %62 = fmul float %45, 5.000000e-01
  %63 = insertelement <8 x float> undef, float %62, i32 0
  %64 = shufflevector <8 x float> %63, <8 x float> undef, <8 x i32> zeroinitializer
  %65 = fmul <8 x float> %58, %64
  %66 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %65, i32 1) #13
  %67 = fmul <8 x float> %61, %66
  %68 = fsub <8 x float> %58, %67
  %69 = fsub <8 x float> %68, %57
  %70 = fsub <8 x float> zeroinitializer, %69
  %71 = bitcast <8 x float> %69 to <8 x i32>
  %72 = bitcast <8 x float> %70 to <8 x i32>
  %73 = and <8 x i32> %72, %71
  %74 = bitcast <8 x i32> %73 to <8 x float>
  br label %76

75:                                               ; preds = %383, %269, %155, %12
  tail call void @llvm.trap() #13
  unreachable

76:                                               ; preds = %55, %46, %12, %12
  %77 = phi <8 x float> [ %74, %55 ], [ %54, %46 ], [ %25, %12 ], [ %25, %12 ]
  %78 = load i32, i32* %33, align 8
  %79 = load float, float* %35, align 8
  %80 = load float, float* %37, align 8
  switch i32 %78, label %110 [
    i32 3, label %111
    i32 0, label %111
    i32 1, label %81
    i32 2, label %90
  ]

81:                                               ; preds = %76
  %82 = insertelement <8 x float> undef, float %80, i32 0
  %83 = shufflevector <8 x float> %82, <8 x float> undef, <8 x i32> zeroinitializer
  %84 = fmul <8 x float> %24, %83
  %85 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %84, i32 1) #13
  %86 = insertelement <8 x float> undef, float %79, i32 0
  %87 = shufflevector <8 x float> %86, <8 x float> undef, <8 x i32> zeroinitializer
  %88 = fmul <8 x float> %87, %85
  %89 = fsub <8 x float> %24, %88
  br label %111

90:                                               ; preds = %76
  %91 = insertelement <8 x float> undef, float %79, i32 0
  %92 = shufflevector <8 x float> %91, <8 x float> undef, <8 x i32> zeroinitializer
  %93 = fsub <8 x float> %24, %92
  %94 = fadd float %79, %79
  %95 = insertelement <8 x float> undef, float %94, i32 0
  %96 = shufflevector <8 x float> %95, <8 x float> undef, <8 x i32> zeroinitializer
  %97 = fmul float %80, 5.000000e-01
  %98 = insertelement <8 x float> undef, float %97, i32 0
  %99 = shufflevector <8 x float> %98, <8 x float> undef, <8 x i32> zeroinitializer
  %100 = fmul <8 x float> %93, %99
  %101 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %100, i32 1) #13
  %102 = fmul <8 x float> %96, %101
  %103 = fsub <8 x float> %93, %102
  %104 = fsub <8 x float> %103, %92
  %105 = fsub <8 x float> zeroinitializer, %104
  %106 = bitcast <8 x float> %104 to <8 x i32>
  %107 = bitcast <8 x float> %105 to <8 x i32>
  %108 = and <8 x i32> %107, %106
  %109 = bitcast <8 x i32> %108 to <8 x float>
  br label %111

110:                                              ; preds = %422, %309, %195, %76
  tail call void @llvm.trap() #13
  unreachable

111:                                              ; preds = %90, %81, %76, %76
  %112 = phi <8 x float> [ %109, %90 ], [ %89, %81 ], [ %24, %76 ], [ %24, %76 ]
  %113 = load i32, i32* %39, align 8
  switch i32 %113, label %155 [
    i32 4, label %114
    i32 6, label %114
  ]

114:                                              ; preds = %111, %111
  %115 = insertelement <8 x float> undef, float %44, i32 0
  %116 = shufflevector <8 x float> %115, <8 x float> undef, <8 x i32> zeroinitializer
  %117 = bitcast <8 x float> %116 to <8 x i32>
  %118 = add <8 x i32> %117, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %119 = bitcast <8 x i32> %118 to <8 x float>
  %120 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %77) #13
  %121 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %120, <8 x float> %119) #13
  %122 = insertelement <8 x float> undef, float %79, i32 0
  %123 = shufflevector <8 x float> %122, <8 x float> undef, <8 x i32> zeroinitializer
  %124 = bitcast <8 x float> %123 to <8 x i32>
  %125 = add <8 x i32> %124, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %126 = bitcast <8 x i32> %125 to <8 x float>
  %127 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %112) #13
  %128 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %127, <8 x float> %126) #13
  %129 = load i8*, i8** %40, align 8
  %130 = fptosi <8 x float> %128 to <8 x i32>
  %131 = load i32, i32* %42, align 8
  %132 = insertelement <8 x i32> undef, i32 %131, i32 0
  %133 = shufflevector <8 x i32> %132, <8 x i32> undef, <8 x i32> zeroinitializer
  %134 = mul <8 x i32> %133, %130
  %135 = fptosi <8 x float> %121 to <8 x i32>
  %136 = add <8 x i32> %134, %135
  %137 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %129, <8 x i32> %136, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %138 = and <8 x i32> %137, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %139 = sitofp <8 x i32> %138 to <8 x float>
  %140 = fmul <8 x float> %139, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %141 = lshr <8 x i32> %137, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %142 = and <8 x i32> %141, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %143 = sitofp <8 x i32> %142 to <8 x float>
  %144 = fmul <8 x float> %143, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %145 = lshr <8 x i32> %137, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %146 = and <8 x i32> %145, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %147 = sitofp <8 x i32> %146 to <8 x float>
  %148 = fmul <8 x float> %147, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %149 = lshr <8 x i32> %137, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %150 = sitofp <8 x i32> %149 to <8 x float>
  %151 = fmul <8 x float> %150, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %152 = icmp eq i32 %113, 6
  %153 = select i1 %152, <8 x float> %148, <8 x float> %140
  %154 = select i1 %152, <8 x float> %140, <8 x float> %148
  br label %155

155:                                              ; preds = %114, %111
  %156 = phi <8 x float> [ zeroinitializer, %111 ], [ %153, %114 ]
  %157 = phi <8 x float> [ zeroinitializer, %111 ], [ %144, %114 ]
  %158 = phi <8 x float> [ zeroinitializer, %111 ], [ %154, %114 ]
  %159 = phi <8 x float> [ zeroinitializer, %111 ], [ %151, %114 ]
  %160 = fmul <8 x float> %22, %23
  %161 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %160, <8 x float> %156, <8 x float> zeroinitializer) #13
  %162 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %160, <8 x float> %157, <8 x float> zeroinitializer) #13
  %163 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %160, <8 x float> %158, <8 x float> zeroinitializer) #13
  %164 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %160, <8 x float> %159, <8 x float> zeroinitializer) #13
  %165 = fadd <8 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %43, label %75 [
    i32 3, label %195
    i32 0, label %195
    i32 1, label %186
    i32 2, label %166
  ]

166:                                              ; preds = %155
  %167 = insertelement <8 x float> undef, float %44, i32 0
  %168 = shufflevector <8 x float> %167, <8 x float> undef, <8 x i32> zeroinitializer
  %169 = fsub <8 x float> %165, %168
  %170 = fadd float %44, %44
  %171 = insertelement <8 x float> undef, float %170, i32 0
  %172 = shufflevector <8 x float> %171, <8 x float> undef, <8 x i32> zeroinitializer
  %173 = fmul float %45, 5.000000e-01
  %174 = insertelement <8 x float> undef, float %173, i32 0
  %175 = shufflevector <8 x float> %174, <8 x float> undef, <8 x i32> zeroinitializer
  %176 = fmul <8 x float> %169, %175
  %177 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %176, i32 1) #13
  %178 = fmul <8 x float> %172, %177
  %179 = fsub <8 x float> %169, %178
  %180 = fsub <8 x float> %179, %168
  %181 = fsub <8 x float> zeroinitializer, %180
  %182 = bitcast <8 x float> %180 to <8 x i32>
  %183 = bitcast <8 x float> %181 to <8 x i32>
  %184 = and <8 x i32> %183, %182
  %185 = bitcast <8 x i32> %184 to <8 x float>
  br label %195

186:                                              ; preds = %155
  %187 = insertelement <8 x float> undef, float %45, i32 0
  %188 = shufflevector <8 x float> %187, <8 x float> undef, <8 x i32> zeroinitializer
  %189 = fmul <8 x float> %165, %188
  %190 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %189, i32 1) #13
  %191 = insertelement <8 x float> undef, float %44, i32 0
  %192 = shufflevector <8 x float> %191, <8 x float> undef, <8 x i32> zeroinitializer
  %193 = fmul <8 x float> %192, %190
  %194 = fsub <8 x float> %165, %193
  br label %195

195:                                              ; preds = %186, %166, %155, %155
  %196 = phi <8 x float> [ %185, %166 ], [ %194, %186 ], [ %165, %155 ], [ %165, %155 ]
  switch i32 %78, label %110 [
    i32 3, label %226
    i32 0, label %226
    i32 1, label %217
    i32 2, label %197
  ]

197:                                              ; preds = %195
  %198 = insertelement <8 x float> undef, float %79, i32 0
  %199 = shufflevector <8 x float> %198, <8 x float> undef, <8 x i32> zeroinitializer
  %200 = fsub <8 x float> %24, %199
  %201 = fadd float %79, %79
  %202 = insertelement <8 x float> undef, float %201, i32 0
  %203 = shufflevector <8 x float> %202, <8 x float> undef, <8 x i32> zeroinitializer
  %204 = fmul float %80, 5.000000e-01
  %205 = insertelement <8 x float> undef, float %204, i32 0
  %206 = shufflevector <8 x float> %205, <8 x float> undef, <8 x i32> zeroinitializer
  %207 = fmul <8 x float> %200, %206
  %208 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %207, i32 1) #13
  %209 = fmul <8 x float> %203, %208
  %210 = fsub <8 x float> %200, %209
  %211 = fsub <8 x float> %210, %199
  %212 = fsub <8 x float> zeroinitializer, %211
  %213 = bitcast <8 x float> %211 to <8 x i32>
  %214 = bitcast <8 x float> %212 to <8 x i32>
  %215 = and <8 x i32> %214, %213
  %216 = bitcast <8 x i32> %215 to <8 x float>
  br label %226

217:                                              ; preds = %195
  %218 = insertelement <8 x float> undef, float %80, i32 0
  %219 = shufflevector <8 x float> %218, <8 x float> undef, <8 x i32> zeroinitializer
  %220 = fmul <8 x float> %24, %219
  %221 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %220, i32 1) #13
  %222 = insertelement <8 x float> undef, float %79, i32 0
  %223 = shufflevector <8 x float> %222, <8 x float> undef, <8 x i32> zeroinitializer
  %224 = fmul <8 x float> %223, %221
  %225 = fsub <8 x float> %24, %224
  br label %226

226:                                              ; preds = %217, %197, %195, %195
  %227 = phi <8 x float> [ %216, %197 ], [ %225, %217 ], [ %24, %195 ], [ %24, %195 ]
  switch i32 %113, label %269 [
    i32 4, label %228
    i32 6, label %228
  ]

228:                                              ; preds = %226, %226
  %229 = insertelement <8 x float> undef, float %44, i32 0
  %230 = shufflevector <8 x float> %229, <8 x float> undef, <8 x i32> zeroinitializer
  %231 = bitcast <8 x float> %230 to <8 x i32>
  %232 = add <8 x i32> %231, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %233 = bitcast <8 x i32> %232 to <8 x float>
  %234 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %196) #13
  %235 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %234, <8 x float> %233) #13
  %236 = insertelement <8 x float> undef, float %79, i32 0
  %237 = shufflevector <8 x float> %236, <8 x float> undef, <8 x i32> zeroinitializer
  %238 = bitcast <8 x float> %237 to <8 x i32>
  %239 = add <8 x i32> %238, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %240 = bitcast <8 x i32> %239 to <8 x float>
  %241 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %227) #13
  %242 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %241, <8 x float> %240) #13
  %243 = load i8*, i8** %40, align 8
  %244 = fptosi <8 x float> %242 to <8 x i32>
  %245 = load i32, i32* %42, align 8
  %246 = insertelement <8 x i32> undef, i32 %245, i32 0
  %247 = shufflevector <8 x i32> %246, <8 x i32> undef, <8 x i32> zeroinitializer
  %248 = mul <8 x i32> %247, %244
  %249 = fptosi <8 x float> %235 to <8 x i32>
  %250 = add <8 x i32> %248, %249
  %251 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %243, <8 x i32> %250, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %252 = and <8 x i32> %251, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %253 = sitofp <8 x i32> %252 to <8 x float>
  %254 = fmul <8 x float> %253, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %255 = lshr <8 x i32> %251, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %256 = and <8 x i32> %255, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %257 = sitofp <8 x i32> %256 to <8 x float>
  %258 = fmul <8 x float> %257, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %259 = lshr <8 x i32> %251, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %260 = and <8 x i32> %259, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %261 = sitofp <8 x i32> %260 to <8 x float>
  %262 = fmul <8 x float> %261, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %263 = lshr <8 x i32> %251, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %264 = sitofp <8 x i32> %263 to <8 x float>
  %265 = fmul <8 x float> %264, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %266 = icmp eq i32 %113, 6
  %267 = select i1 %266, <8 x float> %262, <8 x float> %254
  %268 = select i1 %266, <8 x float> %254, <8 x float> %262
  br label %269

269:                                              ; preds = %228, %226
  %270 = phi <8 x float> [ zeroinitializer, %226 ], [ %267, %228 ]
  %271 = phi <8 x float> [ zeroinitializer, %226 ], [ %258, %228 ]
  %272 = phi <8 x float> [ zeroinitializer, %226 ], [ %268, %228 ]
  %273 = phi <8 x float> [ zeroinitializer, %226 ], [ %265, %228 ]
  %274 = fmul <8 x float> %18, %23
  %275 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %274, <8 x float> %270, <8 x float> %161) #13
  %276 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %274, <8 x float> %271, <8 x float> %162) #13
  %277 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %274, <8 x float> %272, <8 x float> %163) #13
  %278 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %274, <8 x float> %273, <8 x float> %164) #13
  %279 = fadd <8 x float> %24, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %43, label %75 [
    i32 3, label %309
    i32 0, label %309
    i32 1, label %300
    i32 2, label %280
  ]

280:                                              ; preds = %269
  %281 = insertelement <8 x float> undef, float %44, i32 0
  %282 = shufflevector <8 x float> %281, <8 x float> undef, <8 x i32> zeroinitializer
  %283 = fsub <8 x float> %25, %282
  %284 = fadd float %44, %44
  %285 = insertelement <8 x float> undef, float %284, i32 0
  %286 = shufflevector <8 x float> %285, <8 x float> undef, <8 x i32> zeroinitializer
  %287 = fmul float %45, 5.000000e-01
  %288 = insertelement <8 x float> undef, float %287, i32 0
  %289 = shufflevector <8 x float> %288, <8 x float> undef, <8 x i32> zeroinitializer
  %290 = fmul <8 x float> %283, %289
  %291 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %290, i32 1) #13
  %292 = fmul <8 x float> %286, %291
  %293 = fsub <8 x float> %283, %292
  %294 = fsub <8 x float> %293, %282
  %295 = fsub <8 x float> zeroinitializer, %294
  %296 = bitcast <8 x float> %294 to <8 x i32>
  %297 = bitcast <8 x float> %295 to <8 x i32>
  %298 = and <8 x i32> %297, %296
  %299 = bitcast <8 x i32> %298 to <8 x float>
  br label %309

300:                                              ; preds = %269
  %301 = insertelement <8 x float> undef, float %45, i32 0
  %302 = shufflevector <8 x float> %301, <8 x float> undef, <8 x i32> zeroinitializer
  %303 = fmul <8 x float> %25, %302
  %304 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %303, i32 1) #13
  %305 = insertelement <8 x float> undef, float %44, i32 0
  %306 = shufflevector <8 x float> %305, <8 x float> undef, <8 x i32> zeroinitializer
  %307 = fmul <8 x float> %306, %304
  %308 = fsub <8 x float> %25, %307
  br label %309

309:                                              ; preds = %300, %280, %269, %269
  %310 = phi <8 x float> [ %299, %280 ], [ %308, %300 ], [ %25, %269 ], [ %25, %269 ]
  switch i32 %78, label %110 [
    i32 3, label %340
    i32 0, label %340
    i32 1, label %331
    i32 2, label %311
  ]

311:                                              ; preds = %309
  %312 = insertelement <8 x float> undef, float %79, i32 0
  %313 = shufflevector <8 x float> %312, <8 x float> undef, <8 x i32> zeroinitializer
  %314 = fsub <8 x float> %279, %313
  %315 = fadd float %79, %79
  %316 = insertelement <8 x float> undef, float %315, i32 0
  %317 = shufflevector <8 x float> %316, <8 x float> undef, <8 x i32> zeroinitializer
  %318 = fmul float %80, 5.000000e-01
  %319 = insertelement <8 x float> undef, float %318, i32 0
  %320 = shufflevector <8 x float> %319, <8 x float> undef, <8 x i32> zeroinitializer
  %321 = fmul <8 x float> %314, %320
  %322 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %321, i32 1) #13
  %323 = fmul <8 x float> %317, %322
  %324 = fsub <8 x float> %314, %323
  %325 = fsub <8 x float> %324, %313
  %326 = fsub <8 x float> zeroinitializer, %325
  %327 = bitcast <8 x float> %325 to <8 x i32>
  %328 = bitcast <8 x float> %326 to <8 x i32>
  %329 = and <8 x i32> %328, %327
  %330 = bitcast <8 x i32> %329 to <8 x float>
  br label %340

331:                                              ; preds = %309
  %332 = insertelement <8 x float> undef, float %80, i32 0
  %333 = shufflevector <8 x float> %332, <8 x float> undef, <8 x i32> zeroinitializer
  %334 = fmul <8 x float> %279, %333
  %335 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %334, i32 1) #13
  %336 = insertelement <8 x float> undef, float %79, i32 0
  %337 = shufflevector <8 x float> %336, <8 x float> undef, <8 x i32> zeroinitializer
  %338 = fmul <8 x float> %337, %335
  %339 = fsub <8 x float> %279, %338
  br label %340

340:                                              ; preds = %331, %311, %309, %309
  %341 = phi <8 x float> [ %330, %311 ], [ %339, %331 ], [ %279, %309 ], [ %279, %309 ]
  switch i32 %113, label %383 [
    i32 4, label %342
    i32 6, label %342
  ]

342:                                              ; preds = %340, %340
  %343 = insertelement <8 x float> undef, float %44, i32 0
  %344 = shufflevector <8 x float> %343, <8 x float> undef, <8 x i32> zeroinitializer
  %345 = bitcast <8 x float> %344 to <8 x i32>
  %346 = add <8 x i32> %345, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %347 = bitcast <8 x i32> %346 to <8 x float>
  %348 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %310) #13
  %349 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %348, <8 x float> %347) #13
  %350 = insertelement <8 x float> undef, float %79, i32 0
  %351 = shufflevector <8 x float> %350, <8 x float> undef, <8 x i32> zeroinitializer
  %352 = bitcast <8 x float> %351 to <8 x i32>
  %353 = add <8 x i32> %352, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %354 = bitcast <8 x i32> %353 to <8 x float>
  %355 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %341) #13
  %356 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %355, <8 x float> %354) #13
  %357 = load i8*, i8** %40, align 8
  %358 = fptosi <8 x float> %356 to <8 x i32>
  %359 = load i32, i32* %42, align 8
  %360 = insertelement <8 x i32> undef, i32 %359, i32 0
  %361 = shufflevector <8 x i32> %360, <8 x i32> undef, <8 x i32> zeroinitializer
  %362 = mul <8 x i32> %361, %358
  %363 = fptosi <8 x float> %349 to <8 x i32>
  %364 = add <8 x i32> %362, %363
  %365 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %357, <8 x i32> %364, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %366 = and <8 x i32> %365, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %367 = sitofp <8 x i32> %366 to <8 x float>
  %368 = fmul <8 x float> %367, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %369 = lshr <8 x i32> %365, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %370 = and <8 x i32> %369, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %371 = sitofp <8 x i32> %370 to <8 x float>
  %372 = fmul <8 x float> %371, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %373 = lshr <8 x i32> %365, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %374 = and <8 x i32> %373, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %375 = sitofp <8 x i32> %374 to <8 x float>
  %376 = fmul <8 x float> %375, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %377 = lshr <8 x i32> %365, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %378 = sitofp <8 x i32> %377 to <8 x float>
  %379 = fmul <8 x float> %378, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %380 = icmp eq i32 %113, 6
  %381 = select i1 %380, <8 x float> %376, <8 x float> %368
  %382 = select i1 %380, <8 x float> %368, <8 x float> %376
  br label %383

383:                                              ; preds = %342, %340
  %384 = phi <8 x float> [ zeroinitializer, %340 ], [ %381, %342 ]
  %385 = phi <8 x float> [ zeroinitializer, %340 ], [ %372, %342 ]
  %386 = phi <8 x float> [ zeroinitializer, %340 ], [ %382, %342 ]
  %387 = phi <8 x float> [ zeroinitializer, %340 ], [ %379, %342 ]
  %388 = fmul <8 x float> %22, %21
  %389 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %388, <8 x float> %384, <8 x float> %275) #13
  %390 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %388, <8 x float> %385, <8 x float> %276) #13
  %391 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %388, <8 x float> %386, <8 x float> %277) #13
  %392 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %388, <8 x float> %387, <8 x float> %278) #13
  switch i32 %43, label %75 [
    i32 3, label %422
    i32 0, label %422
    i32 1, label %413
    i32 2, label %393
  ]

393:                                              ; preds = %383
  %394 = insertelement <8 x float> undef, float %44, i32 0
  %395 = shufflevector <8 x float> %394, <8 x float> undef, <8 x i32> zeroinitializer
  %396 = fsub <8 x float> %165, %395
  %397 = fadd float %44, %44
  %398 = insertelement <8 x float> undef, float %397, i32 0
  %399 = shufflevector <8 x float> %398, <8 x float> undef, <8 x i32> zeroinitializer
  %400 = fmul float %45, 5.000000e-01
  %401 = insertelement <8 x float> undef, float %400, i32 0
  %402 = shufflevector <8 x float> %401, <8 x float> undef, <8 x i32> zeroinitializer
  %403 = fmul <8 x float> %396, %402
  %404 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %403, i32 1) #13
  %405 = fmul <8 x float> %399, %404
  %406 = fsub <8 x float> %396, %405
  %407 = fsub <8 x float> %406, %395
  %408 = fsub <8 x float> zeroinitializer, %407
  %409 = bitcast <8 x float> %407 to <8 x i32>
  %410 = bitcast <8 x float> %408 to <8 x i32>
  %411 = and <8 x i32> %410, %409
  %412 = bitcast <8 x i32> %411 to <8 x float>
  br label %422

413:                                              ; preds = %383
  %414 = insertelement <8 x float> undef, float %45, i32 0
  %415 = shufflevector <8 x float> %414, <8 x float> undef, <8 x i32> zeroinitializer
  %416 = fmul <8 x float> %165, %415
  %417 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %416, i32 1) #13
  %418 = insertelement <8 x float> undef, float %44, i32 0
  %419 = shufflevector <8 x float> %418, <8 x float> undef, <8 x i32> zeroinitializer
  %420 = fmul <8 x float> %419, %417
  %421 = fsub <8 x float> %165, %420
  br label %422

422:                                              ; preds = %413, %393, %383, %383
  %423 = phi <8 x float> [ %412, %393 ], [ %421, %413 ], [ %165, %383 ], [ %165, %383 ]
  switch i32 %78, label %110 [
    i32 3, label %453
    i32 0, label %453
    i32 1, label %444
    i32 2, label %424
  ]

424:                                              ; preds = %422
  %425 = insertelement <8 x float> undef, float %79, i32 0
  %426 = shufflevector <8 x float> %425, <8 x float> undef, <8 x i32> zeroinitializer
  %427 = fsub <8 x float> %279, %426
  %428 = fadd float %79, %79
  %429 = insertelement <8 x float> undef, float %428, i32 0
  %430 = shufflevector <8 x float> %429, <8 x float> undef, <8 x i32> zeroinitializer
  %431 = fmul float %80, 5.000000e-01
  %432 = insertelement <8 x float> undef, float %431, i32 0
  %433 = shufflevector <8 x float> %432, <8 x float> undef, <8 x i32> zeroinitializer
  %434 = fmul <8 x float> %427, %433
  %435 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %434, i32 1) #13
  %436 = fmul <8 x float> %430, %435
  %437 = fsub <8 x float> %427, %436
  %438 = fsub <8 x float> %437, %426
  %439 = fsub <8 x float> zeroinitializer, %438
  %440 = bitcast <8 x float> %438 to <8 x i32>
  %441 = bitcast <8 x float> %439 to <8 x i32>
  %442 = and <8 x i32> %441, %440
  %443 = bitcast <8 x i32> %442 to <8 x float>
  br label %453

444:                                              ; preds = %422
  %445 = insertelement <8 x float> undef, float %80, i32 0
  %446 = shufflevector <8 x float> %445, <8 x float> undef, <8 x i32> zeroinitializer
  %447 = fmul <8 x float> %279, %446
  %448 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %447, i32 1) #13
  %449 = insertelement <8 x float> undef, float %79, i32 0
  %450 = shufflevector <8 x float> %449, <8 x float> undef, <8 x i32> zeroinitializer
  %451 = fmul <8 x float> %450, %448
  %452 = fsub <8 x float> %279, %451
  br label %453

453:                                              ; preds = %444, %424, %422, %422
  %454 = phi <8 x float> [ %443, %424 ], [ %452, %444 ], [ %279, %422 ], [ %279, %422 ]
  switch i32 %113, label %496 [
    i32 4, label %455
    i32 6, label %455
  ]

455:                                              ; preds = %453, %453
  %456 = insertelement <8 x float> undef, float %44, i32 0
  %457 = shufflevector <8 x float> %456, <8 x float> undef, <8 x i32> zeroinitializer
  %458 = bitcast <8 x float> %457 to <8 x i32>
  %459 = add <8 x i32> %458, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %460 = bitcast <8 x i32> %459 to <8 x float>
  %461 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %423) #13
  %462 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %461, <8 x float> %460) #13
  %463 = insertelement <8 x float> undef, float %79, i32 0
  %464 = shufflevector <8 x float> %463, <8 x float> undef, <8 x i32> zeroinitializer
  %465 = bitcast <8 x float> %464 to <8 x i32>
  %466 = add <8 x i32> %465, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %467 = bitcast <8 x i32> %466 to <8 x float>
  %468 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %454) #13
  %469 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %468, <8 x float> %467) #13
  %470 = load i8*, i8** %40, align 8
  %471 = fptosi <8 x float> %469 to <8 x i32>
  %472 = load i32, i32* %42, align 8
  %473 = insertelement <8 x i32> undef, i32 %472, i32 0
  %474 = shufflevector <8 x i32> %473, <8 x i32> undef, <8 x i32> zeroinitializer
  %475 = mul <8 x i32> %474, %471
  %476 = fptosi <8 x float> %462 to <8 x i32>
  %477 = add <8 x i32> %475, %476
  %478 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %470, <8 x i32> %477, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %479 = and <8 x i32> %478, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %480 = sitofp <8 x i32> %479 to <8 x float>
  %481 = fmul <8 x float> %480, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %482 = lshr <8 x i32> %478, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %483 = and <8 x i32> %482, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %484 = sitofp <8 x i32> %483 to <8 x float>
  %485 = fmul <8 x float> %484, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %486 = lshr <8 x i32> %478, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %487 = and <8 x i32> %486, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %488 = sitofp <8 x i32> %487 to <8 x float>
  %489 = fmul <8 x float> %488, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %490 = lshr <8 x i32> %478, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %491 = sitofp <8 x i32> %490 to <8 x float>
  %492 = fmul <8 x float> %491, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %493 = icmp eq i32 %113, 6
  %494 = select i1 %493, <8 x float> %489, <8 x float> %481
  %495 = select i1 %493, <8 x float> %481, <8 x float> %489
  br label %496

496:                                              ; preds = %453, %455
  %497 = phi <8 x float> [ zeroinitializer, %453 ], [ %494, %455 ]
  %498 = phi <8 x float> [ zeroinitializer, %453 ], [ %485, %455 ]
  %499 = phi <8 x float> [ zeroinitializer, %453 ], [ %495, %455 ]
  %500 = phi <8 x float> [ zeroinitializer, %453 ], [ %492, %455 ]
  %501 = fmul <8 x float> %18, %21
  %502 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %501, <8 x float> %497, <8 x float> %389) #13
  %503 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %501, <8 x float> %498, <8 x float> %390) #13
  %504 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %501, <8 x float> %499, <8 x float> %391) #13
  %505 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %501, <8 x float> %500, <8 x float> %392) #13
  %506 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %507 = extractvalue { i8*, i8** } %506, 0
  %508 = extractvalue { i8*, i8** } %506, 1
  %509 = bitcast i8* %507 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %509(i64 %0, i8** %508, i64 %2, i64 %3, <8 x float> %502, <8 x float> %503, <8 x float> %504, <8 x float> %505, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7bicubicEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fadd <8 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %17 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %16, i32 1) #13
  %18 = fsub <8 x float> %16, %17
  %19 = fadd <8 x float> %5, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %19, i32 1) #13
  %21 = fsub <8 x float> %19, %20
  %22 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %18
  %23 = fmul <8 x float> %22, %22
  %24 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>, <8 x float> <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>) #13
  %25 = fmul <8 x float> %23, %24
  %26 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>, <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>) #13
  %27 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> %26, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #13
  %28 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> %27, <8 x float> <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>) #13
  %29 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %18, <8 x float> <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>, <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>) #13
  %30 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %18, <8 x float> %29, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #13
  %31 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %18, <8 x float> %30, <8 x float> <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>) #13
  %32 = fmul <8 x float> %18, %18
  %33 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %18, <8 x float> <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>, <8 x float> <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>) #13
  %34 = fmul <8 x float> %32, %33
  %35 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %21
  %36 = fmul <8 x float> %35, %35
  %37 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %35, <8 x float> <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>, <8 x float> <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>) #13
  %38 = fmul <8 x float> %36, %37
  %39 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %35, <8 x float> <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>, <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>) #13
  %40 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %35, <8 x float> %39, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #13
  %41 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %35, <8 x float> %40, <8 x float> <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>) #13
  %42 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %21, <8 x float> <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>, <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>) #13
  %43 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %21, <8 x float> %42, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #13
  %44 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %21, <8 x float> %43, <8 x float> <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>) #13
  %45 = fmul <8 x float> %21, %21
  %46 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %21, <8 x float> <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>, <8 x float> <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>) #13
  %47 = fmul <8 x float> %45, %46
  %48 = fadd <8 x float> %5, <float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00>
  %49 = fadd <8 x float> %4, <float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00>
  %50 = getelementptr inbounds i8, i8* %14, i64 28
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr inbounds i8, i8* %14, i64 12
  %53 = bitcast i8* %52 to float*
  %54 = getelementptr inbounds i8, i8* %14, i64 36
  %55 = bitcast i8* %54 to float*
  %56 = getelementptr inbounds i8, i8* %14, i64 32
  %57 = bitcast i8* %56 to i32*
  %58 = getelementptr inbounds i8, i8* %14, i64 16
  %59 = bitcast i8* %58 to float*
  %60 = getelementptr inbounds i8, i8* %14, i64 40
  %61 = bitcast i8* %60 to float*
  %62 = getelementptr inbounds i8, i8* %14, i64 24
  %63 = bitcast i8* %62 to i32*
  %64 = bitcast i8* %14 to i8**
  %65 = getelementptr inbounds i8, i8* %14, i64 8
  %66 = bitcast i8* %65 to i32*
  %67 = load i32, i32* %51, align 4
  %68 = load float, float* %53, align 4
  %69 = load float, float* %55, align 4
  switch i32 %67, label %99 [
    i32 3, label %100
    i32 0, label %100
    i32 1, label %70
    i32 2, label %79
  ]

70:                                               ; preds = %12
  %71 = insertelement <8 x float> undef, float %69, i32 0
  %72 = shufflevector <8 x float> %71, <8 x float> undef, <8 x i32> zeroinitializer
  %73 = fmul <8 x float> %49, %72
  %74 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %73, i32 1) #13
  %75 = insertelement <8 x float> undef, float %68, i32 0
  %76 = shufflevector <8 x float> %75, <8 x float> undef, <8 x i32> zeroinitializer
  %77 = fmul <8 x float> %76, %74
  %78 = fsub <8 x float> %49, %77
  br label %100

79:                                               ; preds = %12
  %80 = insertelement <8 x float> undef, float %68, i32 0
  %81 = shufflevector <8 x float> %80, <8 x float> undef, <8 x i32> zeroinitializer
  %82 = fsub <8 x float> %49, %81
  %83 = fadd float %68, %68
  %84 = insertelement <8 x float> undef, float %83, i32 0
  %85 = shufflevector <8 x float> %84, <8 x float> undef, <8 x i32> zeroinitializer
  %86 = fmul float %69, 5.000000e-01
  %87 = insertelement <8 x float> undef, float %86, i32 0
  %88 = shufflevector <8 x float> %87, <8 x float> undef, <8 x i32> zeroinitializer
  %89 = fmul <8 x float> %82, %88
  %90 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %89, i32 1) #13
  %91 = fmul <8 x float> %85, %90
  %92 = fsub <8 x float> %82, %91
  %93 = fsub <8 x float> %92, %81
  %94 = fsub <8 x float> zeroinitializer, %93
  %95 = bitcast <8 x float> %93 to <8 x i32>
  %96 = bitcast <8 x float> %94 to <8 x i32>
  %97 = and <8 x i32> %96, %95
  %98 = bitcast <8 x i32> %97 to <8 x float>
  br label %100

99:                                               ; preds = %1767, %1654, %1541, %1427, %1314, %1201, %1088, %974, %861, %748, %635, %521, %407, %293, %179, %12
  tail call void @llvm.trap() #13
  unreachable

100:                                              ; preds = %79, %70, %12, %12
  %101 = phi <8 x float> [ %98, %79 ], [ %78, %70 ], [ %49, %12 ], [ %49, %12 ]
  %102 = load i32, i32* %57, align 8
  %103 = load float, float* %59, align 8
  %104 = load float, float* %61, align 8
  switch i32 %102, label %134 [
    i32 3, label %135
    i32 0, label %135
    i32 1, label %105
    i32 2, label %114
  ]

105:                                              ; preds = %100
  %106 = insertelement <8 x float> undef, float %104, i32 0
  %107 = shufflevector <8 x float> %106, <8 x float> undef, <8 x i32> zeroinitializer
  %108 = fmul <8 x float> %48, %107
  %109 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %108, i32 1) #13
  %110 = insertelement <8 x float> undef, float %103, i32 0
  %111 = shufflevector <8 x float> %110, <8 x float> undef, <8 x i32> zeroinitializer
  %112 = fmul <8 x float> %111, %109
  %113 = fsub <8 x float> %48, %112
  br label %135

114:                                              ; preds = %100
  %115 = insertelement <8 x float> undef, float %103, i32 0
  %116 = shufflevector <8 x float> %115, <8 x float> undef, <8 x i32> zeroinitializer
  %117 = fsub <8 x float> %48, %116
  %118 = fadd float %103, %103
  %119 = insertelement <8 x float> undef, float %118, i32 0
  %120 = shufflevector <8 x float> %119, <8 x float> undef, <8 x i32> zeroinitializer
  %121 = fmul float %104, 5.000000e-01
  %122 = insertelement <8 x float> undef, float %121, i32 0
  %123 = shufflevector <8 x float> %122, <8 x float> undef, <8 x i32> zeroinitializer
  %124 = fmul <8 x float> %117, %123
  %125 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %124, i32 1) #13
  %126 = fmul <8 x float> %120, %125
  %127 = fsub <8 x float> %117, %126
  %128 = fsub <8 x float> %127, %116
  %129 = fsub <8 x float> zeroinitializer, %128
  %130 = bitcast <8 x float> %128 to <8 x i32>
  %131 = bitcast <8 x float> %129 to <8 x i32>
  %132 = and <8 x i32> %131, %130
  %133 = bitcast <8 x i32> %132 to <8 x float>
  br label %135

134:                                              ; preds = %1806, %1693, %1580, %1467, %1353, %1240, %1127, %1014, %900, %787, %674, %561, %447, %333, %219, %100
  tail call void @llvm.trap() #13
  unreachable

135:                                              ; preds = %114, %105, %100, %100
  %136 = phi <8 x float> [ %133, %114 ], [ %113, %105 ], [ %48, %100 ], [ %48, %100 ]
  %137 = load i32, i32* %63, align 8
  switch i32 %137, label %179 [
    i32 4, label %138
    i32 6, label %138
  ]

138:                                              ; preds = %135, %135
  %139 = insertelement <8 x float> undef, float %68, i32 0
  %140 = shufflevector <8 x float> %139, <8 x float> undef, <8 x i32> zeroinitializer
  %141 = bitcast <8 x float> %140 to <8 x i32>
  %142 = add <8 x i32> %141, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %143 = bitcast <8 x i32> %142 to <8 x float>
  %144 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %101) #13
  %145 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %144, <8 x float> %143) #13
  %146 = insertelement <8 x float> undef, float %103, i32 0
  %147 = shufflevector <8 x float> %146, <8 x float> undef, <8 x i32> zeroinitializer
  %148 = bitcast <8 x float> %147 to <8 x i32>
  %149 = add <8 x i32> %148, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %150 = bitcast <8 x i32> %149 to <8 x float>
  %151 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %136) #13
  %152 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %151, <8 x float> %150) #13
  %153 = load i8*, i8** %64, align 8
  %154 = fptosi <8 x float> %152 to <8 x i32>
  %155 = load i32, i32* %66, align 8
  %156 = insertelement <8 x i32> undef, i32 %155, i32 0
  %157 = shufflevector <8 x i32> %156, <8 x i32> undef, <8 x i32> zeroinitializer
  %158 = mul <8 x i32> %157, %154
  %159 = fptosi <8 x float> %145 to <8 x i32>
  %160 = add <8 x i32> %158, %159
  %161 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %153, <8 x i32> %160, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %162 = and <8 x i32> %161, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %163 = sitofp <8 x i32> %162 to <8 x float>
  %164 = fmul <8 x float> %163, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %165 = lshr <8 x i32> %161, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %166 = and <8 x i32> %165, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %167 = sitofp <8 x i32> %166 to <8 x float>
  %168 = fmul <8 x float> %167, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %169 = lshr <8 x i32> %161, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %170 = and <8 x i32> %169, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %171 = sitofp <8 x i32> %170 to <8 x float>
  %172 = fmul <8 x float> %171, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %173 = lshr <8 x i32> %161, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %174 = sitofp <8 x i32> %173 to <8 x float>
  %175 = fmul <8 x float> %174, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %176 = icmp eq i32 %137, 6
  %177 = select i1 %176, <8 x float> %172, <8 x float> %164
  %178 = select i1 %176, <8 x float> %164, <8 x float> %172
  br label %179

179:                                              ; preds = %138, %135
  %180 = phi <8 x float> [ zeroinitializer, %135 ], [ %177, %138 ]
  %181 = phi <8 x float> [ zeroinitializer, %135 ], [ %168, %138 ]
  %182 = phi <8 x float> [ zeroinitializer, %135 ], [ %178, %138 ]
  %183 = phi <8 x float> [ zeroinitializer, %135 ], [ %175, %138 ]
  %184 = fmul <8 x float> %25, %38
  %185 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %184, <8 x float> %180, <8 x float> zeroinitializer) #13
  %186 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %184, <8 x float> %181, <8 x float> zeroinitializer) #13
  %187 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %184, <8 x float> %182, <8 x float> zeroinitializer) #13
  %188 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %184, <8 x float> %183, <8 x float> zeroinitializer) #13
  %189 = fadd <8 x float> %49, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %67, label %99 [
    i32 3, label %219
    i32 0, label %219
    i32 1, label %210
    i32 2, label %190
  ]

190:                                              ; preds = %179
  %191 = insertelement <8 x float> undef, float %68, i32 0
  %192 = shufflevector <8 x float> %191, <8 x float> undef, <8 x i32> zeroinitializer
  %193 = fsub <8 x float> %189, %192
  %194 = fadd float %68, %68
  %195 = insertelement <8 x float> undef, float %194, i32 0
  %196 = shufflevector <8 x float> %195, <8 x float> undef, <8 x i32> zeroinitializer
  %197 = fmul float %69, 5.000000e-01
  %198 = insertelement <8 x float> undef, float %197, i32 0
  %199 = shufflevector <8 x float> %198, <8 x float> undef, <8 x i32> zeroinitializer
  %200 = fmul <8 x float> %193, %199
  %201 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %200, i32 1) #13
  %202 = fmul <8 x float> %196, %201
  %203 = fsub <8 x float> %193, %202
  %204 = fsub <8 x float> %203, %192
  %205 = fsub <8 x float> zeroinitializer, %204
  %206 = bitcast <8 x float> %204 to <8 x i32>
  %207 = bitcast <8 x float> %205 to <8 x i32>
  %208 = and <8 x i32> %207, %206
  %209 = bitcast <8 x i32> %208 to <8 x float>
  br label %219

210:                                              ; preds = %179
  %211 = insertelement <8 x float> undef, float %69, i32 0
  %212 = shufflevector <8 x float> %211, <8 x float> undef, <8 x i32> zeroinitializer
  %213 = fmul <8 x float> %189, %212
  %214 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %213, i32 1) #13
  %215 = insertelement <8 x float> undef, float %68, i32 0
  %216 = shufflevector <8 x float> %215, <8 x float> undef, <8 x i32> zeroinitializer
  %217 = fmul <8 x float> %216, %214
  %218 = fsub <8 x float> %189, %217
  br label %219

219:                                              ; preds = %210, %190, %179, %179
  %220 = phi <8 x float> [ %209, %190 ], [ %218, %210 ], [ %189, %179 ], [ %189, %179 ]
  switch i32 %102, label %134 [
    i32 3, label %250
    i32 0, label %250
    i32 1, label %241
    i32 2, label %221
  ]

221:                                              ; preds = %219
  %222 = insertelement <8 x float> undef, float %103, i32 0
  %223 = shufflevector <8 x float> %222, <8 x float> undef, <8 x i32> zeroinitializer
  %224 = fsub <8 x float> %48, %223
  %225 = fadd float %103, %103
  %226 = insertelement <8 x float> undef, float %225, i32 0
  %227 = shufflevector <8 x float> %226, <8 x float> undef, <8 x i32> zeroinitializer
  %228 = fmul float %104, 5.000000e-01
  %229 = insertelement <8 x float> undef, float %228, i32 0
  %230 = shufflevector <8 x float> %229, <8 x float> undef, <8 x i32> zeroinitializer
  %231 = fmul <8 x float> %224, %230
  %232 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %231, i32 1) #13
  %233 = fmul <8 x float> %227, %232
  %234 = fsub <8 x float> %224, %233
  %235 = fsub <8 x float> %234, %223
  %236 = fsub <8 x float> zeroinitializer, %235
  %237 = bitcast <8 x float> %235 to <8 x i32>
  %238 = bitcast <8 x float> %236 to <8 x i32>
  %239 = and <8 x i32> %238, %237
  %240 = bitcast <8 x i32> %239 to <8 x float>
  br label %250

241:                                              ; preds = %219
  %242 = insertelement <8 x float> undef, float %104, i32 0
  %243 = shufflevector <8 x float> %242, <8 x float> undef, <8 x i32> zeroinitializer
  %244 = fmul <8 x float> %48, %243
  %245 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %244, i32 1) #13
  %246 = insertelement <8 x float> undef, float %103, i32 0
  %247 = shufflevector <8 x float> %246, <8 x float> undef, <8 x i32> zeroinitializer
  %248 = fmul <8 x float> %247, %245
  %249 = fsub <8 x float> %48, %248
  br label %250

250:                                              ; preds = %241, %221, %219, %219
  %251 = phi <8 x float> [ %240, %221 ], [ %249, %241 ], [ %48, %219 ], [ %48, %219 ]
  switch i32 %137, label %293 [
    i32 4, label %252
    i32 6, label %252
  ]

252:                                              ; preds = %250, %250
  %253 = insertelement <8 x float> undef, float %68, i32 0
  %254 = shufflevector <8 x float> %253, <8 x float> undef, <8 x i32> zeroinitializer
  %255 = bitcast <8 x float> %254 to <8 x i32>
  %256 = add <8 x i32> %255, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %257 = bitcast <8 x i32> %256 to <8 x float>
  %258 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %220) #13
  %259 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %258, <8 x float> %257) #13
  %260 = insertelement <8 x float> undef, float %103, i32 0
  %261 = shufflevector <8 x float> %260, <8 x float> undef, <8 x i32> zeroinitializer
  %262 = bitcast <8 x float> %261 to <8 x i32>
  %263 = add <8 x i32> %262, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %264 = bitcast <8 x i32> %263 to <8 x float>
  %265 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %251) #13
  %266 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %265, <8 x float> %264) #13
  %267 = load i8*, i8** %64, align 8
  %268 = fptosi <8 x float> %266 to <8 x i32>
  %269 = load i32, i32* %66, align 8
  %270 = insertelement <8 x i32> undef, i32 %269, i32 0
  %271 = shufflevector <8 x i32> %270, <8 x i32> undef, <8 x i32> zeroinitializer
  %272 = mul <8 x i32> %271, %268
  %273 = fptosi <8 x float> %259 to <8 x i32>
  %274 = add <8 x i32> %272, %273
  %275 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %267, <8 x i32> %274, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %276 = and <8 x i32> %275, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %277 = sitofp <8 x i32> %276 to <8 x float>
  %278 = fmul <8 x float> %277, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %279 = lshr <8 x i32> %275, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %280 = and <8 x i32> %279, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %281 = sitofp <8 x i32> %280 to <8 x float>
  %282 = fmul <8 x float> %281, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %283 = lshr <8 x i32> %275, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %284 = and <8 x i32> %283, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %285 = sitofp <8 x i32> %284 to <8 x float>
  %286 = fmul <8 x float> %285, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %287 = lshr <8 x i32> %275, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %288 = sitofp <8 x i32> %287 to <8 x float>
  %289 = fmul <8 x float> %288, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %290 = icmp eq i32 %137, 6
  %291 = select i1 %290, <8 x float> %286, <8 x float> %278
  %292 = select i1 %290, <8 x float> %278, <8 x float> %286
  br label %293

293:                                              ; preds = %252, %250
  %294 = phi <8 x float> [ zeroinitializer, %250 ], [ %291, %252 ]
  %295 = phi <8 x float> [ zeroinitializer, %250 ], [ %282, %252 ]
  %296 = phi <8 x float> [ zeroinitializer, %250 ], [ %292, %252 ]
  %297 = phi <8 x float> [ zeroinitializer, %250 ], [ %289, %252 ]
  %298 = fmul <8 x float> %28, %38
  %299 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %298, <8 x float> %294, <8 x float> %185) #13
  %300 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %298, <8 x float> %295, <8 x float> %186) #13
  %301 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %298, <8 x float> %296, <8 x float> %187) #13
  %302 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %298, <8 x float> %297, <8 x float> %188) #13
  %303 = fadd <8 x float> %189, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %67, label %99 [
    i32 3, label %333
    i32 0, label %333
    i32 1, label %324
    i32 2, label %304
  ]

304:                                              ; preds = %293
  %305 = insertelement <8 x float> undef, float %68, i32 0
  %306 = shufflevector <8 x float> %305, <8 x float> undef, <8 x i32> zeroinitializer
  %307 = fsub <8 x float> %303, %306
  %308 = fadd float %68, %68
  %309 = insertelement <8 x float> undef, float %308, i32 0
  %310 = shufflevector <8 x float> %309, <8 x float> undef, <8 x i32> zeroinitializer
  %311 = fmul float %69, 5.000000e-01
  %312 = insertelement <8 x float> undef, float %311, i32 0
  %313 = shufflevector <8 x float> %312, <8 x float> undef, <8 x i32> zeroinitializer
  %314 = fmul <8 x float> %307, %313
  %315 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %314, i32 1) #13
  %316 = fmul <8 x float> %310, %315
  %317 = fsub <8 x float> %307, %316
  %318 = fsub <8 x float> %317, %306
  %319 = fsub <8 x float> zeroinitializer, %318
  %320 = bitcast <8 x float> %318 to <8 x i32>
  %321 = bitcast <8 x float> %319 to <8 x i32>
  %322 = and <8 x i32> %321, %320
  %323 = bitcast <8 x i32> %322 to <8 x float>
  br label %333

324:                                              ; preds = %293
  %325 = insertelement <8 x float> undef, float %69, i32 0
  %326 = shufflevector <8 x float> %325, <8 x float> undef, <8 x i32> zeroinitializer
  %327 = fmul <8 x float> %303, %326
  %328 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %327, i32 1) #13
  %329 = insertelement <8 x float> undef, float %68, i32 0
  %330 = shufflevector <8 x float> %329, <8 x float> undef, <8 x i32> zeroinitializer
  %331 = fmul <8 x float> %330, %328
  %332 = fsub <8 x float> %303, %331
  br label %333

333:                                              ; preds = %324, %304, %293, %293
  %334 = phi <8 x float> [ %323, %304 ], [ %332, %324 ], [ %303, %293 ], [ %303, %293 ]
  switch i32 %102, label %134 [
    i32 3, label %364
    i32 0, label %364
    i32 1, label %355
    i32 2, label %335
  ]

335:                                              ; preds = %333
  %336 = insertelement <8 x float> undef, float %103, i32 0
  %337 = shufflevector <8 x float> %336, <8 x float> undef, <8 x i32> zeroinitializer
  %338 = fsub <8 x float> %48, %337
  %339 = fadd float %103, %103
  %340 = insertelement <8 x float> undef, float %339, i32 0
  %341 = shufflevector <8 x float> %340, <8 x float> undef, <8 x i32> zeroinitializer
  %342 = fmul float %104, 5.000000e-01
  %343 = insertelement <8 x float> undef, float %342, i32 0
  %344 = shufflevector <8 x float> %343, <8 x float> undef, <8 x i32> zeroinitializer
  %345 = fmul <8 x float> %338, %344
  %346 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %345, i32 1) #13
  %347 = fmul <8 x float> %341, %346
  %348 = fsub <8 x float> %338, %347
  %349 = fsub <8 x float> %348, %337
  %350 = fsub <8 x float> zeroinitializer, %349
  %351 = bitcast <8 x float> %349 to <8 x i32>
  %352 = bitcast <8 x float> %350 to <8 x i32>
  %353 = and <8 x i32> %352, %351
  %354 = bitcast <8 x i32> %353 to <8 x float>
  br label %364

355:                                              ; preds = %333
  %356 = insertelement <8 x float> undef, float %104, i32 0
  %357 = shufflevector <8 x float> %356, <8 x float> undef, <8 x i32> zeroinitializer
  %358 = fmul <8 x float> %48, %357
  %359 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %358, i32 1) #13
  %360 = insertelement <8 x float> undef, float %103, i32 0
  %361 = shufflevector <8 x float> %360, <8 x float> undef, <8 x i32> zeroinitializer
  %362 = fmul <8 x float> %361, %359
  %363 = fsub <8 x float> %48, %362
  br label %364

364:                                              ; preds = %355, %335, %333, %333
  %365 = phi <8 x float> [ %354, %335 ], [ %363, %355 ], [ %48, %333 ], [ %48, %333 ]
  switch i32 %137, label %407 [
    i32 4, label %366
    i32 6, label %366
  ]

366:                                              ; preds = %364, %364
  %367 = insertelement <8 x float> undef, float %68, i32 0
  %368 = shufflevector <8 x float> %367, <8 x float> undef, <8 x i32> zeroinitializer
  %369 = bitcast <8 x float> %368 to <8 x i32>
  %370 = add <8 x i32> %369, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %371 = bitcast <8 x i32> %370 to <8 x float>
  %372 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %334) #13
  %373 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %372, <8 x float> %371) #13
  %374 = insertelement <8 x float> undef, float %103, i32 0
  %375 = shufflevector <8 x float> %374, <8 x float> undef, <8 x i32> zeroinitializer
  %376 = bitcast <8 x float> %375 to <8 x i32>
  %377 = add <8 x i32> %376, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %378 = bitcast <8 x i32> %377 to <8 x float>
  %379 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %365) #13
  %380 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %379, <8 x float> %378) #13
  %381 = load i8*, i8** %64, align 8
  %382 = fptosi <8 x float> %380 to <8 x i32>
  %383 = load i32, i32* %66, align 8
  %384 = insertelement <8 x i32> undef, i32 %383, i32 0
  %385 = shufflevector <8 x i32> %384, <8 x i32> undef, <8 x i32> zeroinitializer
  %386 = mul <8 x i32> %385, %382
  %387 = fptosi <8 x float> %373 to <8 x i32>
  %388 = add <8 x i32> %386, %387
  %389 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %381, <8 x i32> %388, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %390 = and <8 x i32> %389, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %391 = sitofp <8 x i32> %390 to <8 x float>
  %392 = fmul <8 x float> %391, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %393 = lshr <8 x i32> %389, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %394 = and <8 x i32> %393, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %395 = sitofp <8 x i32> %394 to <8 x float>
  %396 = fmul <8 x float> %395, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %397 = lshr <8 x i32> %389, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %398 = and <8 x i32> %397, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %399 = sitofp <8 x i32> %398 to <8 x float>
  %400 = fmul <8 x float> %399, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %401 = lshr <8 x i32> %389, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %402 = sitofp <8 x i32> %401 to <8 x float>
  %403 = fmul <8 x float> %402, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %404 = icmp eq i32 %137, 6
  %405 = select i1 %404, <8 x float> %400, <8 x float> %392
  %406 = select i1 %404, <8 x float> %392, <8 x float> %400
  br label %407

407:                                              ; preds = %366, %364
  %408 = phi <8 x float> [ zeroinitializer, %364 ], [ %405, %366 ]
  %409 = phi <8 x float> [ zeroinitializer, %364 ], [ %396, %366 ]
  %410 = phi <8 x float> [ zeroinitializer, %364 ], [ %406, %366 ]
  %411 = phi <8 x float> [ zeroinitializer, %364 ], [ %403, %366 ]
  %412 = fmul <8 x float> %31, %38
  %413 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %412, <8 x float> %408, <8 x float> %299) #13
  %414 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %412, <8 x float> %409, <8 x float> %300) #13
  %415 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %412, <8 x float> %410, <8 x float> %301) #13
  %416 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %412, <8 x float> %411, <8 x float> %302) #13
  %417 = fadd <8 x float> %303, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %67, label %99 [
    i32 3, label %447
    i32 0, label %447
    i32 1, label %438
    i32 2, label %418
  ]

418:                                              ; preds = %407
  %419 = insertelement <8 x float> undef, float %68, i32 0
  %420 = shufflevector <8 x float> %419, <8 x float> undef, <8 x i32> zeroinitializer
  %421 = fsub <8 x float> %417, %420
  %422 = fadd float %68, %68
  %423 = insertelement <8 x float> undef, float %422, i32 0
  %424 = shufflevector <8 x float> %423, <8 x float> undef, <8 x i32> zeroinitializer
  %425 = fmul float %69, 5.000000e-01
  %426 = insertelement <8 x float> undef, float %425, i32 0
  %427 = shufflevector <8 x float> %426, <8 x float> undef, <8 x i32> zeroinitializer
  %428 = fmul <8 x float> %421, %427
  %429 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %428, i32 1) #13
  %430 = fmul <8 x float> %424, %429
  %431 = fsub <8 x float> %421, %430
  %432 = fsub <8 x float> %431, %420
  %433 = fsub <8 x float> zeroinitializer, %432
  %434 = bitcast <8 x float> %432 to <8 x i32>
  %435 = bitcast <8 x float> %433 to <8 x i32>
  %436 = and <8 x i32> %435, %434
  %437 = bitcast <8 x i32> %436 to <8 x float>
  br label %447

438:                                              ; preds = %407
  %439 = insertelement <8 x float> undef, float %69, i32 0
  %440 = shufflevector <8 x float> %439, <8 x float> undef, <8 x i32> zeroinitializer
  %441 = fmul <8 x float> %417, %440
  %442 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %441, i32 1) #13
  %443 = insertelement <8 x float> undef, float %68, i32 0
  %444 = shufflevector <8 x float> %443, <8 x float> undef, <8 x i32> zeroinitializer
  %445 = fmul <8 x float> %444, %442
  %446 = fsub <8 x float> %417, %445
  br label %447

447:                                              ; preds = %438, %418, %407, %407
  %448 = phi <8 x float> [ %437, %418 ], [ %446, %438 ], [ %417, %407 ], [ %417, %407 ]
  switch i32 %102, label %134 [
    i32 3, label %478
    i32 0, label %478
    i32 1, label %469
    i32 2, label %449
  ]

449:                                              ; preds = %447
  %450 = insertelement <8 x float> undef, float %103, i32 0
  %451 = shufflevector <8 x float> %450, <8 x float> undef, <8 x i32> zeroinitializer
  %452 = fsub <8 x float> %48, %451
  %453 = fadd float %103, %103
  %454 = insertelement <8 x float> undef, float %453, i32 0
  %455 = shufflevector <8 x float> %454, <8 x float> undef, <8 x i32> zeroinitializer
  %456 = fmul float %104, 5.000000e-01
  %457 = insertelement <8 x float> undef, float %456, i32 0
  %458 = shufflevector <8 x float> %457, <8 x float> undef, <8 x i32> zeroinitializer
  %459 = fmul <8 x float> %452, %458
  %460 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %459, i32 1) #13
  %461 = fmul <8 x float> %455, %460
  %462 = fsub <8 x float> %452, %461
  %463 = fsub <8 x float> %462, %451
  %464 = fsub <8 x float> zeroinitializer, %463
  %465 = bitcast <8 x float> %463 to <8 x i32>
  %466 = bitcast <8 x float> %464 to <8 x i32>
  %467 = and <8 x i32> %466, %465
  %468 = bitcast <8 x i32> %467 to <8 x float>
  br label %478

469:                                              ; preds = %447
  %470 = insertelement <8 x float> undef, float %104, i32 0
  %471 = shufflevector <8 x float> %470, <8 x float> undef, <8 x i32> zeroinitializer
  %472 = fmul <8 x float> %48, %471
  %473 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %472, i32 1) #13
  %474 = insertelement <8 x float> undef, float %103, i32 0
  %475 = shufflevector <8 x float> %474, <8 x float> undef, <8 x i32> zeroinitializer
  %476 = fmul <8 x float> %475, %473
  %477 = fsub <8 x float> %48, %476
  br label %478

478:                                              ; preds = %469, %449, %447, %447
  %479 = phi <8 x float> [ %468, %449 ], [ %477, %469 ], [ %48, %447 ], [ %48, %447 ]
  switch i32 %137, label %521 [
    i32 4, label %480
    i32 6, label %480
  ]

480:                                              ; preds = %478, %478
  %481 = insertelement <8 x float> undef, float %68, i32 0
  %482 = shufflevector <8 x float> %481, <8 x float> undef, <8 x i32> zeroinitializer
  %483 = bitcast <8 x float> %482 to <8 x i32>
  %484 = add <8 x i32> %483, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %485 = bitcast <8 x i32> %484 to <8 x float>
  %486 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %448) #13
  %487 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %486, <8 x float> %485) #13
  %488 = insertelement <8 x float> undef, float %103, i32 0
  %489 = shufflevector <8 x float> %488, <8 x float> undef, <8 x i32> zeroinitializer
  %490 = bitcast <8 x float> %489 to <8 x i32>
  %491 = add <8 x i32> %490, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %492 = bitcast <8 x i32> %491 to <8 x float>
  %493 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %479) #13
  %494 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %493, <8 x float> %492) #13
  %495 = load i8*, i8** %64, align 8
  %496 = fptosi <8 x float> %494 to <8 x i32>
  %497 = load i32, i32* %66, align 8
  %498 = insertelement <8 x i32> undef, i32 %497, i32 0
  %499 = shufflevector <8 x i32> %498, <8 x i32> undef, <8 x i32> zeroinitializer
  %500 = mul <8 x i32> %499, %496
  %501 = fptosi <8 x float> %487 to <8 x i32>
  %502 = add <8 x i32> %500, %501
  %503 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %495, <8 x i32> %502, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %504 = and <8 x i32> %503, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %505 = sitofp <8 x i32> %504 to <8 x float>
  %506 = fmul <8 x float> %505, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %507 = lshr <8 x i32> %503, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %508 = and <8 x i32> %507, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %509 = sitofp <8 x i32> %508 to <8 x float>
  %510 = fmul <8 x float> %509, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %511 = lshr <8 x i32> %503, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %512 = and <8 x i32> %511, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %513 = sitofp <8 x i32> %512 to <8 x float>
  %514 = fmul <8 x float> %513, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %515 = lshr <8 x i32> %503, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %516 = sitofp <8 x i32> %515 to <8 x float>
  %517 = fmul <8 x float> %516, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %518 = icmp eq i32 %137, 6
  %519 = select i1 %518, <8 x float> %514, <8 x float> %506
  %520 = select i1 %518, <8 x float> %506, <8 x float> %514
  br label %521

521:                                              ; preds = %480, %478
  %522 = phi <8 x float> [ zeroinitializer, %478 ], [ %519, %480 ]
  %523 = phi <8 x float> [ zeroinitializer, %478 ], [ %510, %480 ]
  %524 = phi <8 x float> [ zeroinitializer, %478 ], [ %520, %480 ]
  %525 = phi <8 x float> [ zeroinitializer, %478 ], [ %517, %480 ]
  %526 = fmul <8 x float> %34, %38
  %527 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %526, <8 x float> %522, <8 x float> %413) #13
  %528 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %526, <8 x float> %523, <8 x float> %414) #13
  %529 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %526, <8 x float> %524, <8 x float> %415) #13
  %530 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %526, <8 x float> %525, <8 x float> %416) #13
  %531 = fadd <8 x float> %48, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %67, label %99 [
    i32 3, label %561
    i32 0, label %561
    i32 1, label %552
    i32 2, label %532
  ]

532:                                              ; preds = %521
  %533 = insertelement <8 x float> undef, float %68, i32 0
  %534 = shufflevector <8 x float> %533, <8 x float> undef, <8 x i32> zeroinitializer
  %535 = fsub <8 x float> %49, %534
  %536 = fadd float %68, %68
  %537 = insertelement <8 x float> undef, float %536, i32 0
  %538 = shufflevector <8 x float> %537, <8 x float> undef, <8 x i32> zeroinitializer
  %539 = fmul float %69, 5.000000e-01
  %540 = insertelement <8 x float> undef, float %539, i32 0
  %541 = shufflevector <8 x float> %540, <8 x float> undef, <8 x i32> zeroinitializer
  %542 = fmul <8 x float> %535, %541
  %543 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %542, i32 1) #13
  %544 = fmul <8 x float> %538, %543
  %545 = fsub <8 x float> %535, %544
  %546 = fsub <8 x float> %545, %534
  %547 = fsub <8 x float> zeroinitializer, %546
  %548 = bitcast <8 x float> %546 to <8 x i32>
  %549 = bitcast <8 x float> %547 to <8 x i32>
  %550 = and <8 x i32> %549, %548
  %551 = bitcast <8 x i32> %550 to <8 x float>
  br label %561

552:                                              ; preds = %521
  %553 = insertelement <8 x float> undef, float %69, i32 0
  %554 = shufflevector <8 x float> %553, <8 x float> undef, <8 x i32> zeroinitializer
  %555 = fmul <8 x float> %49, %554
  %556 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %555, i32 1) #13
  %557 = insertelement <8 x float> undef, float %68, i32 0
  %558 = shufflevector <8 x float> %557, <8 x float> undef, <8 x i32> zeroinitializer
  %559 = fmul <8 x float> %558, %556
  %560 = fsub <8 x float> %49, %559
  br label %561

561:                                              ; preds = %552, %532, %521, %521
  %562 = phi <8 x float> [ %551, %532 ], [ %560, %552 ], [ %49, %521 ], [ %49, %521 ]
  switch i32 %102, label %134 [
    i32 3, label %592
    i32 0, label %592
    i32 1, label %583
    i32 2, label %563
  ]

563:                                              ; preds = %561
  %564 = insertelement <8 x float> undef, float %103, i32 0
  %565 = shufflevector <8 x float> %564, <8 x float> undef, <8 x i32> zeroinitializer
  %566 = fsub <8 x float> %531, %565
  %567 = fadd float %103, %103
  %568 = insertelement <8 x float> undef, float %567, i32 0
  %569 = shufflevector <8 x float> %568, <8 x float> undef, <8 x i32> zeroinitializer
  %570 = fmul float %104, 5.000000e-01
  %571 = insertelement <8 x float> undef, float %570, i32 0
  %572 = shufflevector <8 x float> %571, <8 x float> undef, <8 x i32> zeroinitializer
  %573 = fmul <8 x float> %566, %572
  %574 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %573, i32 1) #13
  %575 = fmul <8 x float> %569, %574
  %576 = fsub <8 x float> %566, %575
  %577 = fsub <8 x float> %576, %565
  %578 = fsub <8 x float> zeroinitializer, %577
  %579 = bitcast <8 x float> %577 to <8 x i32>
  %580 = bitcast <8 x float> %578 to <8 x i32>
  %581 = and <8 x i32> %580, %579
  %582 = bitcast <8 x i32> %581 to <8 x float>
  br label %592

583:                                              ; preds = %561
  %584 = insertelement <8 x float> undef, float %104, i32 0
  %585 = shufflevector <8 x float> %584, <8 x float> undef, <8 x i32> zeroinitializer
  %586 = fmul <8 x float> %531, %585
  %587 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %586, i32 1) #13
  %588 = insertelement <8 x float> undef, float %103, i32 0
  %589 = shufflevector <8 x float> %588, <8 x float> undef, <8 x i32> zeroinitializer
  %590 = fmul <8 x float> %589, %587
  %591 = fsub <8 x float> %531, %590
  br label %592

592:                                              ; preds = %583, %563, %561, %561
  %593 = phi <8 x float> [ %582, %563 ], [ %591, %583 ], [ %531, %561 ], [ %531, %561 ]
  switch i32 %137, label %635 [
    i32 4, label %594
    i32 6, label %594
  ]

594:                                              ; preds = %592, %592
  %595 = insertelement <8 x float> undef, float %68, i32 0
  %596 = shufflevector <8 x float> %595, <8 x float> undef, <8 x i32> zeroinitializer
  %597 = bitcast <8 x float> %596 to <8 x i32>
  %598 = add <8 x i32> %597, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %599 = bitcast <8 x i32> %598 to <8 x float>
  %600 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %562) #13
  %601 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %600, <8 x float> %599) #13
  %602 = insertelement <8 x float> undef, float %103, i32 0
  %603 = shufflevector <8 x float> %602, <8 x float> undef, <8 x i32> zeroinitializer
  %604 = bitcast <8 x float> %603 to <8 x i32>
  %605 = add <8 x i32> %604, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %606 = bitcast <8 x i32> %605 to <8 x float>
  %607 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %593) #13
  %608 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %607, <8 x float> %606) #13
  %609 = load i8*, i8** %64, align 8
  %610 = fptosi <8 x float> %608 to <8 x i32>
  %611 = load i32, i32* %66, align 8
  %612 = insertelement <8 x i32> undef, i32 %611, i32 0
  %613 = shufflevector <8 x i32> %612, <8 x i32> undef, <8 x i32> zeroinitializer
  %614 = mul <8 x i32> %613, %610
  %615 = fptosi <8 x float> %601 to <8 x i32>
  %616 = add <8 x i32> %614, %615
  %617 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %609, <8 x i32> %616, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %618 = and <8 x i32> %617, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %619 = sitofp <8 x i32> %618 to <8 x float>
  %620 = fmul <8 x float> %619, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %621 = lshr <8 x i32> %617, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %622 = and <8 x i32> %621, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %623 = sitofp <8 x i32> %622 to <8 x float>
  %624 = fmul <8 x float> %623, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %625 = lshr <8 x i32> %617, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %626 = and <8 x i32> %625, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %627 = sitofp <8 x i32> %626 to <8 x float>
  %628 = fmul <8 x float> %627, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %629 = lshr <8 x i32> %617, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %630 = sitofp <8 x i32> %629 to <8 x float>
  %631 = fmul <8 x float> %630, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %632 = icmp eq i32 %137, 6
  %633 = select i1 %632, <8 x float> %628, <8 x float> %620
  %634 = select i1 %632, <8 x float> %620, <8 x float> %628
  br label %635

635:                                              ; preds = %594, %592
  %636 = phi <8 x float> [ zeroinitializer, %592 ], [ %633, %594 ]
  %637 = phi <8 x float> [ zeroinitializer, %592 ], [ %624, %594 ]
  %638 = phi <8 x float> [ zeroinitializer, %592 ], [ %634, %594 ]
  %639 = phi <8 x float> [ zeroinitializer, %592 ], [ %631, %594 ]
  %640 = fmul <8 x float> %25, %41
  %641 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %640, <8 x float> %636, <8 x float> %527) #13
  %642 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %640, <8 x float> %637, <8 x float> %528) #13
  %643 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %640, <8 x float> %638, <8 x float> %529) #13
  %644 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %640, <8 x float> %639, <8 x float> %530) #13
  switch i32 %67, label %99 [
    i32 3, label %674
    i32 0, label %674
    i32 1, label %665
    i32 2, label %645
  ]

645:                                              ; preds = %635
  %646 = insertelement <8 x float> undef, float %68, i32 0
  %647 = shufflevector <8 x float> %646, <8 x float> undef, <8 x i32> zeroinitializer
  %648 = fsub <8 x float> %189, %647
  %649 = fadd float %68, %68
  %650 = insertelement <8 x float> undef, float %649, i32 0
  %651 = shufflevector <8 x float> %650, <8 x float> undef, <8 x i32> zeroinitializer
  %652 = fmul float %69, 5.000000e-01
  %653 = insertelement <8 x float> undef, float %652, i32 0
  %654 = shufflevector <8 x float> %653, <8 x float> undef, <8 x i32> zeroinitializer
  %655 = fmul <8 x float> %648, %654
  %656 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %655, i32 1) #13
  %657 = fmul <8 x float> %651, %656
  %658 = fsub <8 x float> %648, %657
  %659 = fsub <8 x float> %658, %647
  %660 = fsub <8 x float> zeroinitializer, %659
  %661 = bitcast <8 x float> %659 to <8 x i32>
  %662 = bitcast <8 x float> %660 to <8 x i32>
  %663 = and <8 x i32> %662, %661
  %664 = bitcast <8 x i32> %663 to <8 x float>
  br label %674

665:                                              ; preds = %635
  %666 = insertelement <8 x float> undef, float %69, i32 0
  %667 = shufflevector <8 x float> %666, <8 x float> undef, <8 x i32> zeroinitializer
  %668 = fmul <8 x float> %189, %667
  %669 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %668, i32 1) #13
  %670 = insertelement <8 x float> undef, float %68, i32 0
  %671 = shufflevector <8 x float> %670, <8 x float> undef, <8 x i32> zeroinitializer
  %672 = fmul <8 x float> %671, %669
  %673 = fsub <8 x float> %189, %672
  br label %674

674:                                              ; preds = %665, %645, %635, %635
  %675 = phi <8 x float> [ %664, %645 ], [ %673, %665 ], [ %189, %635 ], [ %189, %635 ]
  switch i32 %102, label %134 [
    i32 3, label %705
    i32 0, label %705
    i32 1, label %696
    i32 2, label %676
  ]

676:                                              ; preds = %674
  %677 = insertelement <8 x float> undef, float %103, i32 0
  %678 = shufflevector <8 x float> %677, <8 x float> undef, <8 x i32> zeroinitializer
  %679 = fsub <8 x float> %531, %678
  %680 = fadd float %103, %103
  %681 = insertelement <8 x float> undef, float %680, i32 0
  %682 = shufflevector <8 x float> %681, <8 x float> undef, <8 x i32> zeroinitializer
  %683 = fmul float %104, 5.000000e-01
  %684 = insertelement <8 x float> undef, float %683, i32 0
  %685 = shufflevector <8 x float> %684, <8 x float> undef, <8 x i32> zeroinitializer
  %686 = fmul <8 x float> %679, %685
  %687 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %686, i32 1) #13
  %688 = fmul <8 x float> %682, %687
  %689 = fsub <8 x float> %679, %688
  %690 = fsub <8 x float> %689, %678
  %691 = fsub <8 x float> zeroinitializer, %690
  %692 = bitcast <8 x float> %690 to <8 x i32>
  %693 = bitcast <8 x float> %691 to <8 x i32>
  %694 = and <8 x i32> %693, %692
  %695 = bitcast <8 x i32> %694 to <8 x float>
  br label %705

696:                                              ; preds = %674
  %697 = insertelement <8 x float> undef, float %104, i32 0
  %698 = shufflevector <8 x float> %697, <8 x float> undef, <8 x i32> zeroinitializer
  %699 = fmul <8 x float> %531, %698
  %700 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %699, i32 1) #13
  %701 = insertelement <8 x float> undef, float %103, i32 0
  %702 = shufflevector <8 x float> %701, <8 x float> undef, <8 x i32> zeroinitializer
  %703 = fmul <8 x float> %702, %700
  %704 = fsub <8 x float> %531, %703
  br label %705

705:                                              ; preds = %696, %676, %674, %674
  %706 = phi <8 x float> [ %695, %676 ], [ %704, %696 ], [ %531, %674 ], [ %531, %674 ]
  switch i32 %137, label %748 [
    i32 4, label %707
    i32 6, label %707
  ]

707:                                              ; preds = %705, %705
  %708 = insertelement <8 x float> undef, float %68, i32 0
  %709 = shufflevector <8 x float> %708, <8 x float> undef, <8 x i32> zeroinitializer
  %710 = bitcast <8 x float> %709 to <8 x i32>
  %711 = add <8 x i32> %710, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %712 = bitcast <8 x i32> %711 to <8 x float>
  %713 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %675) #13
  %714 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %713, <8 x float> %712) #13
  %715 = insertelement <8 x float> undef, float %103, i32 0
  %716 = shufflevector <8 x float> %715, <8 x float> undef, <8 x i32> zeroinitializer
  %717 = bitcast <8 x float> %716 to <8 x i32>
  %718 = add <8 x i32> %717, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %719 = bitcast <8 x i32> %718 to <8 x float>
  %720 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %706) #13
  %721 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %720, <8 x float> %719) #13
  %722 = load i8*, i8** %64, align 8
  %723 = fptosi <8 x float> %721 to <8 x i32>
  %724 = load i32, i32* %66, align 8
  %725 = insertelement <8 x i32> undef, i32 %724, i32 0
  %726 = shufflevector <8 x i32> %725, <8 x i32> undef, <8 x i32> zeroinitializer
  %727 = mul <8 x i32> %726, %723
  %728 = fptosi <8 x float> %714 to <8 x i32>
  %729 = add <8 x i32> %727, %728
  %730 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %722, <8 x i32> %729, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %731 = and <8 x i32> %730, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %732 = sitofp <8 x i32> %731 to <8 x float>
  %733 = fmul <8 x float> %732, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %734 = lshr <8 x i32> %730, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %735 = and <8 x i32> %734, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %736 = sitofp <8 x i32> %735 to <8 x float>
  %737 = fmul <8 x float> %736, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %738 = lshr <8 x i32> %730, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %739 = and <8 x i32> %738, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %740 = sitofp <8 x i32> %739 to <8 x float>
  %741 = fmul <8 x float> %740, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %742 = lshr <8 x i32> %730, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %743 = sitofp <8 x i32> %742 to <8 x float>
  %744 = fmul <8 x float> %743, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %745 = icmp eq i32 %137, 6
  %746 = select i1 %745, <8 x float> %741, <8 x float> %733
  %747 = select i1 %745, <8 x float> %733, <8 x float> %741
  br label %748

748:                                              ; preds = %707, %705
  %749 = phi <8 x float> [ zeroinitializer, %705 ], [ %746, %707 ]
  %750 = phi <8 x float> [ zeroinitializer, %705 ], [ %737, %707 ]
  %751 = phi <8 x float> [ zeroinitializer, %705 ], [ %747, %707 ]
  %752 = phi <8 x float> [ zeroinitializer, %705 ], [ %744, %707 ]
  %753 = fmul <8 x float> %28, %41
  %754 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %753, <8 x float> %749, <8 x float> %641) #13
  %755 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %753, <8 x float> %750, <8 x float> %642) #13
  %756 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %753, <8 x float> %751, <8 x float> %643) #13
  %757 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %753, <8 x float> %752, <8 x float> %644) #13
  switch i32 %67, label %99 [
    i32 3, label %787
    i32 0, label %787
    i32 1, label %778
    i32 2, label %758
  ]

758:                                              ; preds = %748
  %759 = insertelement <8 x float> undef, float %68, i32 0
  %760 = shufflevector <8 x float> %759, <8 x float> undef, <8 x i32> zeroinitializer
  %761 = fsub <8 x float> %303, %760
  %762 = fadd float %68, %68
  %763 = insertelement <8 x float> undef, float %762, i32 0
  %764 = shufflevector <8 x float> %763, <8 x float> undef, <8 x i32> zeroinitializer
  %765 = fmul float %69, 5.000000e-01
  %766 = insertelement <8 x float> undef, float %765, i32 0
  %767 = shufflevector <8 x float> %766, <8 x float> undef, <8 x i32> zeroinitializer
  %768 = fmul <8 x float> %761, %767
  %769 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %768, i32 1) #13
  %770 = fmul <8 x float> %764, %769
  %771 = fsub <8 x float> %761, %770
  %772 = fsub <8 x float> %771, %760
  %773 = fsub <8 x float> zeroinitializer, %772
  %774 = bitcast <8 x float> %772 to <8 x i32>
  %775 = bitcast <8 x float> %773 to <8 x i32>
  %776 = and <8 x i32> %775, %774
  %777 = bitcast <8 x i32> %776 to <8 x float>
  br label %787

778:                                              ; preds = %748
  %779 = insertelement <8 x float> undef, float %69, i32 0
  %780 = shufflevector <8 x float> %779, <8 x float> undef, <8 x i32> zeroinitializer
  %781 = fmul <8 x float> %303, %780
  %782 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %781, i32 1) #13
  %783 = insertelement <8 x float> undef, float %68, i32 0
  %784 = shufflevector <8 x float> %783, <8 x float> undef, <8 x i32> zeroinitializer
  %785 = fmul <8 x float> %784, %782
  %786 = fsub <8 x float> %303, %785
  br label %787

787:                                              ; preds = %778, %758, %748, %748
  %788 = phi <8 x float> [ %777, %758 ], [ %786, %778 ], [ %303, %748 ], [ %303, %748 ]
  switch i32 %102, label %134 [
    i32 3, label %818
    i32 0, label %818
    i32 1, label %809
    i32 2, label %789
  ]

789:                                              ; preds = %787
  %790 = insertelement <8 x float> undef, float %103, i32 0
  %791 = shufflevector <8 x float> %790, <8 x float> undef, <8 x i32> zeroinitializer
  %792 = fsub <8 x float> %531, %791
  %793 = fadd float %103, %103
  %794 = insertelement <8 x float> undef, float %793, i32 0
  %795 = shufflevector <8 x float> %794, <8 x float> undef, <8 x i32> zeroinitializer
  %796 = fmul float %104, 5.000000e-01
  %797 = insertelement <8 x float> undef, float %796, i32 0
  %798 = shufflevector <8 x float> %797, <8 x float> undef, <8 x i32> zeroinitializer
  %799 = fmul <8 x float> %792, %798
  %800 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %799, i32 1) #13
  %801 = fmul <8 x float> %795, %800
  %802 = fsub <8 x float> %792, %801
  %803 = fsub <8 x float> %802, %791
  %804 = fsub <8 x float> zeroinitializer, %803
  %805 = bitcast <8 x float> %803 to <8 x i32>
  %806 = bitcast <8 x float> %804 to <8 x i32>
  %807 = and <8 x i32> %806, %805
  %808 = bitcast <8 x i32> %807 to <8 x float>
  br label %818

809:                                              ; preds = %787
  %810 = insertelement <8 x float> undef, float %104, i32 0
  %811 = shufflevector <8 x float> %810, <8 x float> undef, <8 x i32> zeroinitializer
  %812 = fmul <8 x float> %531, %811
  %813 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %812, i32 1) #13
  %814 = insertelement <8 x float> undef, float %103, i32 0
  %815 = shufflevector <8 x float> %814, <8 x float> undef, <8 x i32> zeroinitializer
  %816 = fmul <8 x float> %815, %813
  %817 = fsub <8 x float> %531, %816
  br label %818

818:                                              ; preds = %809, %789, %787, %787
  %819 = phi <8 x float> [ %808, %789 ], [ %817, %809 ], [ %531, %787 ], [ %531, %787 ]
  switch i32 %137, label %861 [
    i32 4, label %820
    i32 6, label %820
  ]

820:                                              ; preds = %818, %818
  %821 = insertelement <8 x float> undef, float %68, i32 0
  %822 = shufflevector <8 x float> %821, <8 x float> undef, <8 x i32> zeroinitializer
  %823 = bitcast <8 x float> %822 to <8 x i32>
  %824 = add <8 x i32> %823, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %825 = bitcast <8 x i32> %824 to <8 x float>
  %826 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %788) #13
  %827 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %826, <8 x float> %825) #13
  %828 = insertelement <8 x float> undef, float %103, i32 0
  %829 = shufflevector <8 x float> %828, <8 x float> undef, <8 x i32> zeroinitializer
  %830 = bitcast <8 x float> %829 to <8 x i32>
  %831 = add <8 x i32> %830, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %832 = bitcast <8 x i32> %831 to <8 x float>
  %833 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %819) #13
  %834 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %833, <8 x float> %832) #13
  %835 = load i8*, i8** %64, align 8
  %836 = fptosi <8 x float> %834 to <8 x i32>
  %837 = load i32, i32* %66, align 8
  %838 = insertelement <8 x i32> undef, i32 %837, i32 0
  %839 = shufflevector <8 x i32> %838, <8 x i32> undef, <8 x i32> zeroinitializer
  %840 = mul <8 x i32> %839, %836
  %841 = fptosi <8 x float> %827 to <8 x i32>
  %842 = add <8 x i32> %840, %841
  %843 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %835, <8 x i32> %842, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %844 = and <8 x i32> %843, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %845 = sitofp <8 x i32> %844 to <8 x float>
  %846 = fmul <8 x float> %845, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %847 = lshr <8 x i32> %843, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %848 = and <8 x i32> %847, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %849 = sitofp <8 x i32> %848 to <8 x float>
  %850 = fmul <8 x float> %849, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %851 = lshr <8 x i32> %843, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %852 = and <8 x i32> %851, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %853 = sitofp <8 x i32> %852 to <8 x float>
  %854 = fmul <8 x float> %853, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %855 = lshr <8 x i32> %843, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %856 = sitofp <8 x i32> %855 to <8 x float>
  %857 = fmul <8 x float> %856, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %858 = icmp eq i32 %137, 6
  %859 = select i1 %858, <8 x float> %854, <8 x float> %846
  %860 = select i1 %858, <8 x float> %846, <8 x float> %854
  br label %861

861:                                              ; preds = %820, %818
  %862 = phi <8 x float> [ zeroinitializer, %818 ], [ %859, %820 ]
  %863 = phi <8 x float> [ zeroinitializer, %818 ], [ %850, %820 ]
  %864 = phi <8 x float> [ zeroinitializer, %818 ], [ %860, %820 ]
  %865 = phi <8 x float> [ zeroinitializer, %818 ], [ %857, %820 ]
  %866 = fmul <8 x float> %31, %41
  %867 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %866, <8 x float> %862, <8 x float> %754) #13
  %868 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %866, <8 x float> %863, <8 x float> %755) #13
  %869 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %866, <8 x float> %864, <8 x float> %756) #13
  %870 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %866, <8 x float> %865, <8 x float> %757) #13
  switch i32 %67, label %99 [
    i32 3, label %900
    i32 0, label %900
    i32 1, label %891
    i32 2, label %871
  ]

871:                                              ; preds = %861
  %872 = insertelement <8 x float> undef, float %68, i32 0
  %873 = shufflevector <8 x float> %872, <8 x float> undef, <8 x i32> zeroinitializer
  %874 = fsub <8 x float> %417, %873
  %875 = fadd float %68, %68
  %876 = insertelement <8 x float> undef, float %875, i32 0
  %877 = shufflevector <8 x float> %876, <8 x float> undef, <8 x i32> zeroinitializer
  %878 = fmul float %69, 5.000000e-01
  %879 = insertelement <8 x float> undef, float %878, i32 0
  %880 = shufflevector <8 x float> %879, <8 x float> undef, <8 x i32> zeroinitializer
  %881 = fmul <8 x float> %874, %880
  %882 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %881, i32 1) #13
  %883 = fmul <8 x float> %877, %882
  %884 = fsub <8 x float> %874, %883
  %885 = fsub <8 x float> %884, %873
  %886 = fsub <8 x float> zeroinitializer, %885
  %887 = bitcast <8 x float> %885 to <8 x i32>
  %888 = bitcast <8 x float> %886 to <8 x i32>
  %889 = and <8 x i32> %888, %887
  %890 = bitcast <8 x i32> %889 to <8 x float>
  br label %900

891:                                              ; preds = %861
  %892 = insertelement <8 x float> undef, float %69, i32 0
  %893 = shufflevector <8 x float> %892, <8 x float> undef, <8 x i32> zeroinitializer
  %894 = fmul <8 x float> %417, %893
  %895 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %894, i32 1) #13
  %896 = insertelement <8 x float> undef, float %68, i32 0
  %897 = shufflevector <8 x float> %896, <8 x float> undef, <8 x i32> zeroinitializer
  %898 = fmul <8 x float> %897, %895
  %899 = fsub <8 x float> %417, %898
  br label %900

900:                                              ; preds = %891, %871, %861, %861
  %901 = phi <8 x float> [ %890, %871 ], [ %899, %891 ], [ %417, %861 ], [ %417, %861 ]
  switch i32 %102, label %134 [
    i32 3, label %931
    i32 0, label %931
    i32 1, label %922
    i32 2, label %902
  ]

902:                                              ; preds = %900
  %903 = insertelement <8 x float> undef, float %103, i32 0
  %904 = shufflevector <8 x float> %903, <8 x float> undef, <8 x i32> zeroinitializer
  %905 = fsub <8 x float> %531, %904
  %906 = fadd float %103, %103
  %907 = insertelement <8 x float> undef, float %906, i32 0
  %908 = shufflevector <8 x float> %907, <8 x float> undef, <8 x i32> zeroinitializer
  %909 = fmul float %104, 5.000000e-01
  %910 = insertelement <8 x float> undef, float %909, i32 0
  %911 = shufflevector <8 x float> %910, <8 x float> undef, <8 x i32> zeroinitializer
  %912 = fmul <8 x float> %905, %911
  %913 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %912, i32 1) #13
  %914 = fmul <8 x float> %908, %913
  %915 = fsub <8 x float> %905, %914
  %916 = fsub <8 x float> %915, %904
  %917 = fsub <8 x float> zeroinitializer, %916
  %918 = bitcast <8 x float> %916 to <8 x i32>
  %919 = bitcast <8 x float> %917 to <8 x i32>
  %920 = and <8 x i32> %919, %918
  %921 = bitcast <8 x i32> %920 to <8 x float>
  br label %931

922:                                              ; preds = %900
  %923 = insertelement <8 x float> undef, float %104, i32 0
  %924 = shufflevector <8 x float> %923, <8 x float> undef, <8 x i32> zeroinitializer
  %925 = fmul <8 x float> %531, %924
  %926 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %925, i32 1) #13
  %927 = insertelement <8 x float> undef, float %103, i32 0
  %928 = shufflevector <8 x float> %927, <8 x float> undef, <8 x i32> zeroinitializer
  %929 = fmul <8 x float> %928, %926
  %930 = fsub <8 x float> %531, %929
  br label %931

931:                                              ; preds = %922, %902, %900, %900
  %932 = phi <8 x float> [ %921, %902 ], [ %930, %922 ], [ %531, %900 ], [ %531, %900 ]
  switch i32 %137, label %974 [
    i32 4, label %933
    i32 6, label %933
  ]

933:                                              ; preds = %931, %931
  %934 = insertelement <8 x float> undef, float %68, i32 0
  %935 = shufflevector <8 x float> %934, <8 x float> undef, <8 x i32> zeroinitializer
  %936 = bitcast <8 x float> %935 to <8 x i32>
  %937 = add <8 x i32> %936, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %938 = bitcast <8 x i32> %937 to <8 x float>
  %939 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %901) #13
  %940 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %939, <8 x float> %938) #13
  %941 = insertelement <8 x float> undef, float %103, i32 0
  %942 = shufflevector <8 x float> %941, <8 x float> undef, <8 x i32> zeroinitializer
  %943 = bitcast <8 x float> %942 to <8 x i32>
  %944 = add <8 x i32> %943, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %945 = bitcast <8 x i32> %944 to <8 x float>
  %946 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %932) #13
  %947 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %946, <8 x float> %945) #13
  %948 = load i8*, i8** %64, align 8
  %949 = fptosi <8 x float> %947 to <8 x i32>
  %950 = load i32, i32* %66, align 8
  %951 = insertelement <8 x i32> undef, i32 %950, i32 0
  %952 = shufflevector <8 x i32> %951, <8 x i32> undef, <8 x i32> zeroinitializer
  %953 = mul <8 x i32> %952, %949
  %954 = fptosi <8 x float> %940 to <8 x i32>
  %955 = add <8 x i32> %953, %954
  %956 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %948, <8 x i32> %955, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %957 = and <8 x i32> %956, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %958 = sitofp <8 x i32> %957 to <8 x float>
  %959 = fmul <8 x float> %958, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %960 = lshr <8 x i32> %956, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %961 = and <8 x i32> %960, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %962 = sitofp <8 x i32> %961 to <8 x float>
  %963 = fmul <8 x float> %962, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %964 = lshr <8 x i32> %956, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %965 = and <8 x i32> %964, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %966 = sitofp <8 x i32> %965 to <8 x float>
  %967 = fmul <8 x float> %966, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %968 = lshr <8 x i32> %956, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %969 = sitofp <8 x i32> %968 to <8 x float>
  %970 = fmul <8 x float> %969, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %971 = icmp eq i32 %137, 6
  %972 = select i1 %971, <8 x float> %967, <8 x float> %959
  %973 = select i1 %971, <8 x float> %959, <8 x float> %967
  br label %974

974:                                              ; preds = %933, %931
  %975 = phi <8 x float> [ zeroinitializer, %931 ], [ %972, %933 ]
  %976 = phi <8 x float> [ zeroinitializer, %931 ], [ %963, %933 ]
  %977 = phi <8 x float> [ zeroinitializer, %931 ], [ %973, %933 ]
  %978 = phi <8 x float> [ zeroinitializer, %931 ], [ %970, %933 ]
  %979 = fmul <8 x float> %34, %41
  %980 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %979, <8 x float> %975, <8 x float> %867) #13
  %981 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %979, <8 x float> %976, <8 x float> %868) #13
  %982 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %979, <8 x float> %977, <8 x float> %869) #13
  %983 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %979, <8 x float> %978, <8 x float> %870) #13
  %984 = fadd <8 x float> %531, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %67, label %99 [
    i32 3, label %1014
    i32 0, label %1014
    i32 1, label %1005
    i32 2, label %985
  ]

985:                                              ; preds = %974
  %986 = insertelement <8 x float> undef, float %68, i32 0
  %987 = shufflevector <8 x float> %986, <8 x float> undef, <8 x i32> zeroinitializer
  %988 = fsub <8 x float> %49, %987
  %989 = fadd float %68, %68
  %990 = insertelement <8 x float> undef, float %989, i32 0
  %991 = shufflevector <8 x float> %990, <8 x float> undef, <8 x i32> zeroinitializer
  %992 = fmul float %69, 5.000000e-01
  %993 = insertelement <8 x float> undef, float %992, i32 0
  %994 = shufflevector <8 x float> %993, <8 x float> undef, <8 x i32> zeroinitializer
  %995 = fmul <8 x float> %988, %994
  %996 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %995, i32 1) #13
  %997 = fmul <8 x float> %991, %996
  %998 = fsub <8 x float> %988, %997
  %999 = fsub <8 x float> %998, %987
  %1000 = fsub <8 x float> zeroinitializer, %999
  %1001 = bitcast <8 x float> %999 to <8 x i32>
  %1002 = bitcast <8 x float> %1000 to <8 x i32>
  %1003 = and <8 x i32> %1002, %1001
  %1004 = bitcast <8 x i32> %1003 to <8 x float>
  br label %1014

1005:                                             ; preds = %974
  %1006 = insertelement <8 x float> undef, float %69, i32 0
  %1007 = shufflevector <8 x float> %1006, <8 x float> undef, <8 x i32> zeroinitializer
  %1008 = fmul <8 x float> %49, %1007
  %1009 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1008, i32 1) #13
  %1010 = insertelement <8 x float> undef, float %68, i32 0
  %1011 = shufflevector <8 x float> %1010, <8 x float> undef, <8 x i32> zeroinitializer
  %1012 = fmul <8 x float> %1011, %1009
  %1013 = fsub <8 x float> %49, %1012
  br label %1014

1014:                                             ; preds = %1005, %985, %974, %974
  %1015 = phi <8 x float> [ %1004, %985 ], [ %1013, %1005 ], [ %49, %974 ], [ %49, %974 ]
  switch i32 %102, label %134 [
    i32 3, label %1045
    i32 0, label %1045
    i32 1, label %1036
    i32 2, label %1016
  ]

1016:                                             ; preds = %1014
  %1017 = insertelement <8 x float> undef, float %103, i32 0
  %1018 = shufflevector <8 x float> %1017, <8 x float> undef, <8 x i32> zeroinitializer
  %1019 = fsub <8 x float> %984, %1018
  %1020 = fadd float %103, %103
  %1021 = insertelement <8 x float> undef, float %1020, i32 0
  %1022 = shufflevector <8 x float> %1021, <8 x float> undef, <8 x i32> zeroinitializer
  %1023 = fmul float %104, 5.000000e-01
  %1024 = insertelement <8 x float> undef, float %1023, i32 0
  %1025 = shufflevector <8 x float> %1024, <8 x float> undef, <8 x i32> zeroinitializer
  %1026 = fmul <8 x float> %1019, %1025
  %1027 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1026, i32 1) #13
  %1028 = fmul <8 x float> %1022, %1027
  %1029 = fsub <8 x float> %1019, %1028
  %1030 = fsub <8 x float> %1029, %1018
  %1031 = fsub <8 x float> zeroinitializer, %1030
  %1032 = bitcast <8 x float> %1030 to <8 x i32>
  %1033 = bitcast <8 x float> %1031 to <8 x i32>
  %1034 = and <8 x i32> %1033, %1032
  %1035 = bitcast <8 x i32> %1034 to <8 x float>
  br label %1045

1036:                                             ; preds = %1014
  %1037 = insertelement <8 x float> undef, float %104, i32 0
  %1038 = shufflevector <8 x float> %1037, <8 x float> undef, <8 x i32> zeroinitializer
  %1039 = fmul <8 x float> %984, %1038
  %1040 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1039, i32 1) #13
  %1041 = insertelement <8 x float> undef, float %103, i32 0
  %1042 = shufflevector <8 x float> %1041, <8 x float> undef, <8 x i32> zeroinitializer
  %1043 = fmul <8 x float> %1042, %1040
  %1044 = fsub <8 x float> %984, %1043
  br label %1045

1045:                                             ; preds = %1036, %1016, %1014, %1014
  %1046 = phi <8 x float> [ %1035, %1016 ], [ %1044, %1036 ], [ %984, %1014 ], [ %984, %1014 ]
  switch i32 %137, label %1088 [
    i32 4, label %1047
    i32 6, label %1047
  ]

1047:                                             ; preds = %1045, %1045
  %1048 = insertelement <8 x float> undef, float %68, i32 0
  %1049 = shufflevector <8 x float> %1048, <8 x float> undef, <8 x i32> zeroinitializer
  %1050 = bitcast <8 x float> %1049 to <8 x i32>
  %1051 = add <8 x i32> %1050, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1052 = bitcast <8 x i32> %1051 to <8 x float>
  %1053 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1015) #13
  %1054 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1053, <8 x float> %1052) #13
  %1055 = insertelement <8 x float> undef, float %103, i32 0
  %1056 = shufflevector <8 x float> %1055, <8 x float> undef, <8 x i32> zeroinitializer
  %1057 = bitcast <8 x float> %1056 to <8 x i32>
  %1058 = add <8 x i32> %1057, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1059 = bitcast <8 x i32> %1058 to <8 x float>
  %1060 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1046) #13
  %1061 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1060, <8 x float> %1059) #13
  %1062 = load i8*, i8** %64, align 8
  %1063 = fptosi <8 x float> %1061 to <8 x i32>
  %1064 = load i32, i32* %66, align 8
  %1065 = insertelement <8 x i32> undef, i32 %1064, i32 0
  %1066 = shufflevector <8 x i32> %1065, <8 x i32> undef, <8 x i32> zeroinitializer
  %1067 = mul <8 x i32> %1066, %1063
  %1068 = fptosi <8 x float> %1054 to <8 x i32>
  %1069 = add <8 x i32> %1067, %1068
  %1070 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %1062, <8 x i32> %1069, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %1071 = and <8 x i32> %1070, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1072 = sitofp <8 x i32> %1071 to <8 x float>
  %1073 = fmul <8 x float> %1072, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1074 = lshr <8 x i32> %1070, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1075 = and <8 x i32> %1074, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1076 = sitofp <8 x i32> %1075 to <8 x float>
  %1077 = fmul <8 x float> %1076, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1078 = lshr <8 x i32> %1070, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1079 = and <8 x i32> %1078, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1080 = sitofp <8 x i32> %1079 to <8 x float>
  %1081 = fmul <8 x float> %1080, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1082 = lshr <8 x i32> %1070, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %1083 = sitofp <8 x i32> %1082 to <8 x float>
  %1084 = fmul <8 x float> %1083, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1085 = icmp eq i32 %137, 6
  %1086 = select i1 %1085, <8 x float> %1081, <8 x float> %1073
  %1087 = select i1 %1085, <8 x float> %1073, <8 x float> %1081
  br label %1088

1088:                                             ; preds = %1047, %1045
  %1089 = phi <8 x float> [ zeroinitializer, %1045 ], [ %1086, %1047 ]
  %1090 = phi <8 x float> [ zeroinitializer, %1045 ], [ %1077, %1047 ]
  %1091 = phi <8 x float> [ zeroinitializer, %1045 ], [ %1087, %1047 ]
  %1092 = phi <8 x float> [ zeroinitializer, %1045 ], [ %1084, %1047 ]
  %1093 = fmul <8 x float> %25, %44
  %1094 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1093, <8 x float> %1089, <8 x float> %980) #13
  %1095 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1093, <8 x float> %1090, <8 x float> %981) #13
  %1096 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1093, <8 x float> %1091, <8 x float> %982) #13
  %1097 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1093, <8 x float> %1092, <8 x float> %983) #13
  switch i32 %67, label %99 [
    i32 3, label %1127
    i32 0, label %1127
    i32 1, label %1118
    i32 2, label %1098
  ]

1098:                                             ; preds = %1088
  %1099 = insertelement <8 x float> undef, float %68, i32 0
  %1100 = shufflevector <8 x float> %1099, <8 x float> undef, <8 x i32> zeroinitializer
  %1101 = fsub <8 x float> %189, %1100
  %1102 = fadd float %68, %68
  %1103 = insertelement <8 x float> undef, float %1102, i32 0
  %1104 = shufflevector <8 x float> %1103, <8 x float> undef, <8 x i32> zeroinitializer
  %1105 = fmul float %69, 5.000000e-01
  %1106 = insertelement <8 x float> undef, float %1105, i32 0
  %1107 = shufflevector <8 x float> %1106, <8 x float> undef, <8 x i32> zeroinitializer
  %1108 = fmul <8 x float> %1101, %1107
  %1109 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1108, i32 1) #13
  %1110 = fmul <8 x float> %1104, %1109
  %1111 = fsub <8 x float> %1101, %1110
  %1112 = fsub <8 x float> %1111, %1100
  %1113 = fsub <8 x float> zeroinitializer, %1112
  %1114 = bitcast <8 x float> %1112 to <8 x i32>
  %1115 = bitcast <8 x float> %1113 to <8 x i32>
  %1116 = and <8 x i32> %1115, %1114
  %1117 = bitcast <8 x i32> %1116 to <8 x float>
  br label %1127

1118:                                             ; preds = %1088
  %1119 = insertelement <8 x float> undef, float %69, i32 0
  %1120 = shufflevector <8 x float> %1119, <8 x float> undef, <8 x i32> zeroinitializer
  %1121 = fmul <8 x float> %189, %1120
  %1122 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1121, i32 1) #13
  %1123 = insertelement <8 x float> undef, float %68, i32 0
  %1124 = shufflevector <8 x float> %1123, <8 x float> undef, <8 x i32> zeroinitializer
  %1125 = fmul <8 x float> %1124, %1122
  %1126 = fsub <8 x float> %189, %1125
  br label %1127

1127:                                             ; preds = %1118, %1098, %1088, %1088
  %1128 = phi <8 x float> [ %1117, %1098 ], [ %1126, %1118 ], [ %189, %1088 ], [ %189, %1088 ]
  switch i32 %102, label %134 [
    i32 3, label %1158
    i32 0, label %1158
    i32 1, label %1149
    i32 2, label %1129
  ]

1129:                                             ; preds = %1127
  %1130 = insertelement <8 x float> undef, float %103, i32 0
  %1131 = shufflevector <8 x float> %1130, <8 x float> undef, <8 x i32> zeroinitializer
  %1132 = fsub <8 x float> %984, %1131
  %1133 = fadd float %103, %103
  %1134 = insertelement <8 x float> undef, float %1133, i32 0
  %1135 = shufflevector <8 x float> %1134, <8 x float> undef, <8 x i32> zeroinitializer
  %1136 = fmul float %104, 5.000000e-01
  %1137 = insertelement <8 x float> undef, float %1136, i32 0
  %1138 = shufflevector <8 x float> %1137, <8 x float> undef, <8 x i32> zeroinitializer
  %1139 = fmul <8 x float> %1132, %1138
  %1140 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1139, i32 1) #13
  %1141 = fmul <8 x float> %1135, %1140
  %1142 = fsub <8 x float> %1132, %1141
  %1143 = fsub <8 x float> %1142, %1131
  %1144 = fsub <8 x float> zeroinitializer, %1143
  %1145 = bitcast <8 x float> %1143 to <8 x i32>
  %1146 = bitcast <8 x float> %1144 to <8 x i32>
  %1147 = and <8 x i32> %1146, %1145
  %1148 = bitcast <8 x i32> %1147 to <8 x float>
  br label %1158

1149:                                             ; preds = %1127
  %1150 = insertelement <8 x float> undef, float %104, i32 0
  %1151 = shufflevector <8 x float> %1150, <8 x float> undef, <8 x i32> zeroinitializer
  %1152 = fmul <8 x float> %984, %1151
  %1153 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1152, i32 1) #13
  %1154 = insertelement <8 x float> undef, float %103, i32 0
  %1155 = shufflevector <8 x float> %1154, <8 x float> undef, <8 x i32> zeroinitializer
  %1156 = fmul <8 x float> %1155, %1153
  %1157 = fsub <8 x float> %984, %1156
  br label %1158

1158:                                             ; preds = %1149, %1129, %1127, %1127
  %1159 = phi <8 x float> [ %1148, %1129 ], [ %1157, %1149 ], [ %984, %1127 ], [ %984, %1127 ]
  switch i32 %137, label %1201 [
    i32 4, label %1160
    i32 6, label %1160
  ]

1160:                                             ; preds = %1158, %1158
  %1161 = insertelement <8 x float> undef, float %68, i32 0
  %1162 = shufflevector <8 x float> %1161, <8 x float> undef, <8 x i32> zeroinitializer
  %1163 = bitcast <8 x float> %1162 to <8 x i32>
  %1164 = add <8 x i32> %1163, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1165 = bitcast <8 x i32> %1164 to <8 x float>
  %1166 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1128) #13
  %1167 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1166, <8 x float> %1165) #13
  %1168 = insertelement <8 x float> undef, float %103, i32 0
  %1169 = shufflevector <8 x float> %1168, <8 x float> undef, <8 x i32> zeroinitializer
  %1170 = bitcast <8 x float> %1169 to <8 x i32>
  %1171 = add <8 x i32> %1170, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1172 = bitcast <8 x i32> %1171 to <8 x float>
  %1173 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1159) #13
  %1174 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1173, <8 x float> %1172) #13
  %1175 = load i8*, i8** %64, align 8
  %1176 = fptosi <8 x float> %1174 to <8 x i32>
  %1177 = load i32, i32* %66, align 8
  %1178 = insertelement <8 x i32> undef, i32 %1177, i32 0
  %1179 = shufflevector <8 x i32> %1178, <8 x i32> undef, <8 x i32> zeroinitializer
  %1180 = mul <8 x i32> %1179, %1176
  %1181 = fptosi <8 x float> %1167 to <8 x i32>
  %1182 = add <8 x i32> %1180, %1181
  %1183 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %1175, <8 x i32> %1182, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %1184 = and <8 x i32> %1183, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1185 = sitofp <8 x i32> %1184 to <8 x float>
  %1186 = fmul <8 x float> %1185, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1187 = lshr <8 x i32> %1183, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1188 = and <8 x i32> %1187, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1189 = sitofp <8 x i32> %1188 to <8 x float>
  %1190 = fmul <8 x float> %1189, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1191 = lshr <8 x i32> %1183, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1192 = and <8 x i32> %1191, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1193 = sitofp <8 x i32> %1192 to <8 x float>
  %1194 = fmul <8 x float> %1193, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1195 = lshr <8 x i32> %1183, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %1196 = sitofp <8 x i32> %1195 to <8 x float>
  %1197 = fmul <8 x float> %1196, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1198 = icmp eq i32 %137, 6
  %1199 = select i1 %1198, <8 x float> %1194, <8 x float> %1186
  %1200 = select i1 %1198, <8 x float> %1186, <8 x float> %1194
  br label %1201

1201:                                             ; preds = %1160, %1158
  %1202 = phi <8 x float> [ zeroinitializer, %1158 ], [ %1199, %1160 ]
  %1203 = phi <8 x float> [ zeroinitializer, %1158 ], [ %1190, %1160 ]
  %1204 = phi <8 x float> [ zeroinitializer, %1158 ], [ %1200, %1160 ]
  %1205 = phi <8 x float> [ zeroinitializer, %1158 ], [ %1197, %1160 ]
  %1206 = fmul <8 x float> %28, %44
  %1207 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1206, <8 x float> %1202, <8 x float> %1094) #13
  %1208 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1206, <8 x float> %1203, <8 x float> %1095) #13
  %1209 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1206, <8 x float> %1204, <8 x float> %1096) #13
  %1210 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1206, <8 x float> %1205, <8 x float> %1097) #13
  switch i32 %67, label %99 [
    i32 3, label %1240
    i32 0, label %1240
    i32 1, label %1231
    i32 2, label %1211
  ]

1211:                                             ; preds = %1201
  %1212 = insertelement <8 x float> undef, float %68, i32 0
  %1213 = shufflevector <8 x float> %1212, <8 x float> undef, <8 x i32> zeroinitializer
  %1214 = fsub <8 x float> %303, %1213
  %1215 = fadd float %68, %68
  %1216 = insertelement <8 x float> undef, float %1215, i32 0
  %1217 = shufflevector <8 x float> %1216, <8 x float> undef, <8 x i32> zeroinitializer
  %1218 = fmul float %69, 5.000000e-01
  %1219 = insertelement <8 x float> undef, float %1218, i32 0
  %1220 = shufflevector <8 x float> %1219, <8 x float> undef, <8 x i32> zeroinitializer
  %1221 = fmul <8 x float> %1214, %1220
  %1222 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1221, i32 1) #13
  %1223 = fmul <8 x float> %1217, %1222
  %1224 = fsub <8 x float> %1214, %1223
  %1225 = fsub <8 x float> %1224, %1213
  %1226 = fsub <8 x float> zeroinitializer, %1225
  %1227 = bitcast <8 x float> %1225 to <8 x i32>
  %1228 = bitcast <8 x float> %1226 to <8 x i32>
  %1229 = and <8 x i32> %1228, %1227
  %1230 = bitcast <8 x i32> %1229 to <8 x float>
  br label %1240

1231:                                             ; preds = %1201
  %1232 = insertelement <8 x float> undef, float %69, i32 0
  %1233 = shufflevector <8 x float> %1232, <8 x float> undef, <8 x i32> zeroinitializer
  %1234 = fmul <8 x float> %303, %1233
  %1235 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1234, i32 1) #13
  %1236 = insertelement <8 x float> undef, float %68, i32 0
  %1237 = shufflevector <8 x float> %1236, <8 x float> undef, <8 x i32> zeroinitializer
  %1238 = fmul <8 x float> %1237, %1235
  %1239 = fsub <8 x float> %303, %1238
  br label %1240

1240:                                             ; preds = %1231, %1211, %1201, %1201
  %1241 = phi <8 x float> [ %1230, %1211 ], [ %1239, %1231 ], [ %303, %1201 ], [ %303, %1201 ]
  switch i32 %102, label %134 [
    i32 3, label %1271
    i32 0, label %1271
    i32 1, label %1262
    i32 2, label %1242
  ]

1242:                                             ; preds = %1240
  %1243 = insertelement <8 x float> undef, float %103, i32 0
  %1244 = shufflevector <8 x float> %1243, <8 x float> undef, <8 x i32> zeroinitializer
  %1245 = fsub <8 x float> %984, %1244
  %1246 = fadd float %103, %103
  %1247 = insertelement <8 x float> undef, float %1246, i32 0
  %1248 = shufflevector <8 x float> %1247, <8 x float> undef, <8 x i32> zeroinitializer
  %1249 = fmul float %104, 5.000000e-01
  %1250 = insertelement <8 x float> undef, float %1249, i32 0
  %1251 = shufflevector <8 x float> %1250, <8 x float> undef, <8 x i32> zeroinitializer
  %1252 = fmul <8 x float> %1245, %1251
  %1253 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1252, i32 1) #13
  %1254 = fmul <8 x float> %1248, %1253
  %1255 = fsub <8 x float> %1245, %1254
  %1256 = fsub <8 x float> %1255, %1244
  %1257 = fsub <8 x float> zeroinitializer, %1256
  %1258 = bitcast <8 x float> %1256 to <8 x i32>
  %1259 = bitcast <8 x float> %1257 to <8 x i32>
  %1260 = and <8 x i32> %1259, %1258
  %1261 = bitcast <8 x i32> %1260 to <8 x float>
  br label %1271

1262:                                             ; preds = %1240
  %1263 = insertelement <8 x float> undef, float %104, i32 0
  %1264 = shufflevector <8 x float> %1263, <8 x float> undef, <8 x i32> zeroinitializer
  %1265 = fmul <8 x float> %984, %1264
  %1266 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1265, i32 1) #13
  %1267 = insertelement <8 x float> undef, float %103, i32 0
  %1268 = shufflevector <8 x float> %1267, <8 x float> undef, <8 x i32> zeroinitializer
  %1269 = fmul <8 x float> %1268, %1266
  %1270 = fsub <8 x float> %984, %1269
  br label %1271

1271:                                             ; preds = %1262, %1242, %1240, %1240
  %1272 = phi <8 x float> [ %1261, %1242 ], [ %1270, %1262 ], [ %984, %1240 ], [ %984, %1240 ]
  switch i32 %137, label %1314 [
    i32 4, label %1273
    i32 6, label %1273
  ]

1273:                                             ; preds = %1271, %1271
  %1274 = insertelement <8 x float> undef, float %68, i32 0
  %1275 = shufflevector <8 x float> %1274, <8 x float> undef, <8 x i32> zeroinitializer
  %1276 = bitcast <8 x float> %1275 to <8 x i32>
  %1277 = add <8 x i32> %1276, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1278 = bitcast <8 x i32> %1277 to <8 x float>
  %1279 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1241) #13
  %1280 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1279, <8 x float> %1278) #13
  %1281 = insertelement <8 x float> undef, float %103, i32 0
  %1282 = shufflevector <8 x float> %1281, <8 x float> undef, <8 x i32> zeroinitializer
  %1283 = bitcast <8 x float> %1282 to <8 x i32>
  %1284 = add <8 x i32> %1283, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1285 = bitcast <8 x i32> %1284 to <8 x float>
  %1286 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1272) #13
  %1287 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1286, <8 x float> %1285) #13
  %1288 = load i8*, i8** %64, align 8
  %1289 = fptosi <8 x float> %1287 to <8 x i32>
  %1290 = load i32, i32* %66, align 8
  %1291 = insertelement <8 x i32> undef, i32 %1290, i32 0
  %1292 = shufflevector <8 x i32> %1291, <8 x i32> undef, <8 x i32> zeroinitializer
  %1293 = mul <8 x i32> %1292, %1289
  %1294 = fptosi <8 x float> %1280 to <8 x i32>
  %1295 = add <8 x i32> %1293, %1294
  %1296 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %1288, <8 x i32> %1295, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %1297 = and <8 x i32> %1296, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1298 = sitofp <8 x i32> %1297 to <8 x float>
  %1299 = fmul <8 x float> %1298, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1300 = lshr <8 x i32> %1296, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1301 = and <8 x i32> %1300, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1302 = sitofp <8 x i32> %1301 to <8 x float>
  %1303 = fmul <8 x float> %1302, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1304 = lshr <8 x i32> %1296, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1305 = and <8 x i32> %1304, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1306 = sitofp <8 x i32> %1305 to <8 x float>
  %1307 = fmul <8 x float> %1306, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1308 = lshr <8 x i32> %1296, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %1309 = sitofp <8 x i32> %1308 to <8 x float>
  %1310 = fmul <8 x float> %1309, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1311 = icmp eq i32 %137, 6
  %1312 = select i1 %1311, <8 x float> %1307, <8 x float> %1299
  %1313 = select i1 %1311, <8 x float> %1299, <8 x float> %1307
  br label %1314

1314:                                             ; preds = %1273, %1271
  %1315 = phi <8 x float> [ zeroinitializer, %1271 ], [ %1312, %1273 ]
  %1316 = phi <8 x float> [ zeroinitializer, %1271 ], [ %1303, %1273 ]
  %1317 = phi <8 x float> [ zeroinitializer, %1271 ], [ %1313, %1273 ]
  %1318 = phi <8 x float> [ zeroinitializer, %1271 ], [ %1310, %1273 ]
  %1319 = fmul <8 x float> %31, %44
  %1320 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1319, <8 x float> %1315, <8 x float> %1207) #13
  %1321 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1319, <8 x float> %1316, <8 x float> %1208) #13
  %1322 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1319, <8 x float> %1317, <8 x float> %1209) #13
  %1323 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1319, <8 x float> %1318, <8 x float> %1210) #13
  switch i32 %67, label %99 [
    i32 3, label %1353
    i32 0, label %1353
    i32 1, label %1344
    i32 2, label %1324
  ]

1324:                                             ; preds = %1314
  %1325 = insertelement <8 x float> undef, float %68, i32 0
  %1326 = shufflevector <8 x float> %1325, <8 x float> undef, <8 x i32> zeroinitializer
  %1327 = fsub <8 x float> %417, %1326
  %1328 = fadd float %68, %68
  %1329 = insertelement <8 x float> undef, float %1328, i32 0
  %1330 = shufflevector <8 x float> %1329, <8 x float> undef, <8 x i32> zeroinitializer
  %1331 = fmul float %69, 5.000000e-01
  %1332 = insertelement <8 x float> undef, float %1331, i32 0
  %1333 = shufflevector <8 x float> %1332, <8 x float> undef, <8 x i32> zeroinitializer
  %1334 = fmul <8 x float> %1327, %1333
  %1335 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1334, i32 1) #13
  %1336 = fmul <8 x float> %1330, %1335
  %1337 = fsub <8 x float> %1327, %1336
  %1338 = fsub <8 x float> %1337, %1326
  %1339 = fsub <8 x float> zeroinitializer, %1338
  %1340 = bitcast <8 x float> %1338 to <8 x i32>
  %1341 = bitcast <8 x float> %1339 to <8 x i32>
  %1342 = and <8 x i32> %1341, %1340
  %1343 = bitcast <8 x i32> %1342 to <8 x float>
  br label %1353

1344:                                             ; preds = %1314
  %1345 = insertelement <8 x float> undef, float %69, i32 0
  %1346 = shufflevector <8 x float> %1345, <8 x float> undef, <8 x i32> zeroinitializer
  %1347 = fmul <8 x float> %417, %1346
  %1348 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1347, i32 1) #13
  %1349 = insertelement <8 x float> undef, float %68, i32 0
  %1350 = shufflevector <8 x float> %1349, <8 x float> undef, <8 x i32> zeroinitializer
  %1351 = fmul <8 x float> %1350, %1348
  %1352 = fsub <8 x float> %417, %1351
  br label %1353

1353:                                             ; preds = %1344, %1324, %1314, %1314
  %1354 = phi <8 x float> [ %1343, %1324 ], [ %1352, %1344 ], [ %417, %1314 ], [ %417, %1314 ]
  switch i32 %102, label %134 [
    i32 3, label %1384
    i32 0, label %1384
    i32 1, label %1375
    i32 2, label %1355
  ]

1355:                                             ; preds = %1353
  %1356 = insertelement <8 x float> undef, float %103, i32 0
  %1357 = shufflevector <8 x float> %1356, <8 x float> undef, <8 x i32> zeroinitializer
  %1358 = fsub <8 x float> %984, %1357
  %1359 = fadd float %103, %103
  %1360 = insertelement <8 x float> undef, float %1359, i32 0
  %1361 = shufflevector <8 x float> %1360, <8 x float> undef, <8 x i32> zeroinitializer
  %1362 = fmul float %104, 5.000000e-01
  %1363 = insertelement <8 x float> undef, float %1362, i32 0
  %1364 = shufflevector <8 x float> %1363, <8 x float> undef, <8 x i32> zeroinitializer
  %1365 = fmul <8 x float> %1358, %1364
  %1366 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1365, i32 1) #13
  %1367 = fmul <8 x float> %1361, %1366
  %1368 = fsub <8 x float> %1358, %1367
  %1369 = fsub <8 x float> %1368, %1357
  %1370 = fsub <8 x float> zeroinitializer, %1369
  %1371 = bitcast <8 x float> %1369 to <8 x i32>
  %1372 = bitcast <8 x float> %1370 to <8 x i32>
  %1373 = and <8 x i32> %1372, %1371
  %1374 = bitcast <8 x i32> %1373 to <8 x float>
  br label %1384

1375:                                             ; preds = %1353
  %1376 = insertelement <8 x float> undef, float %104, i32 0
  %1377 = shufflevector <8 x float> %1376, <8 x float> undef, <8 x i32> zeroinitializer
  %1378 = fmul <8 x float> %984, %1377
  %1379 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1378, i32 1) #13
  %1380 = insertelement <8 x float> undef, float %103, i32 0
  %1381 = shufflevector <8 x float> %1380, <8 x float> undef, <8 x i32> zeroinitializer
  %1382 = fmul <8 x float> %1381, %1379
  %1383 = fsub <8 x float> %984, %1382
  br label %1384

1384:                                             ; preds = %1375, %1355, %1353, %1353
  %1385 = phi <8 x float> [ %1374, %1355 ], [ %1383, %1375 ], [ %984, %1353 ], [ %984, %1353 ]
  switch i32 %137, label %1427 [
    i32 4, label %1386
    i32 6, label %1386
  ]

1386:                                             ; preds = %1384, %1384
  %1387 = insertelement <8 x float> undef, float %68, i32 0
  %1388 = shufflevector <8 x float> %1387, <8 x float> undef, <8 x i32> zeroinitializer
  %1389 = bitcast <8 x float> %1388 to <8 x i32>
  %1390 = add <8 x i32> %1389, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1391 = bitcast <8 x i32> %1390 to <8 x float>
  %1392 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1354) #13
  %1393 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1392, <8 x float> %1391) #13
  %1394 = insertelement <8 x float> undef, float %103, i32 0
  %1395 = shufflevector <8 x float> %1394, <8 x float> undef, <8 x i32> zeroinitializer
  %1396 = bitcast <8 x float> %1395 to <8 x i32>
  %1397 = add <8 x i32> %1396, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1398 = bitcast <8 x i32> %1397 to <8 x float>
  %1399 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1385) #13
  %1400 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1399, <8 x float> %1398) #13
  %1401 = load i8*, i8** %64, align 8
  %1402 = fptosi <8 x float> %1400 to <8 x i32>
  %1403 = load i32, i32* %66, align 8
  %1404 = insertelement <8 x i32> undef, i32 %1403, i32 0
  %1405 = shufflevector <8 x i32> %1404, <8 x i32> undef, <8 x i32> zeroinitializer
  %1406 = mul <8 x i32> %1405, %1402
  %1407 = fptosi <8 x float> %1393 to <8 x i32>
  %1408 = add <8 x i32> %1406, %1407
  %1409 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %1401, <8 x i32> %1408, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %1410 = and <8 x i32> %1409, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1411 = sitofp <8 x i32> %1410 to <8 x float>
  %1412 = fmul <8 x float> %1411, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1413 = lshr <8 x i32> %1409, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1414 = and <8 x i32> %1413, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1415 = sitofp <8 x i32> %1414 to <8 x float>
  %1416 = fmul <8 x float> %1415, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1417 = lshr <8 x i32> %1409, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1418 = and <8 x i32> %1417, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1419 = sitofp <8 x i32> %1418 to <8 x float>
  %1420 = fmul <8 x float> %1419, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1421 = lshr <8 x i32> %1409, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %1422 = sitofp <8 x i32> %1421 to <8 x float>
  %1423 = fmul <8 x float> %1422, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1424 = icmp eq i32 %137, 6
  %1425 = select i1 %1424, <8 x float> %1420, <8 x float> %1412
  %1426 = select i1 %1424, <8 x float> %1412, <8 x float> %1420
  br label %1427

1427:                                             ; preds = %1386, %1384
  %1428 = phi <8 x float> [ zeroinitializer, %1384 ], [ %1425, %1386 ]
  %1429 = phi <8 x float> [ zeroinitializer, %1384 ], [ %1416, %1386 ]
  %1430 = phi <8 x float> [ zeroinitializer, %1384 ], [ %1426, %1386 ]
  %1431 = phi <8 x float> [ zeroinitializer, %1384 ], [ %1423, %1386 ]
  %1432 = fmul <8 x float> %34, %44
  %1433 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1432, <8 x float> %1428, <8 x float> %1320) #13
  %1434 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1432, <8 x float> %1429, <8 x float> %1321) #13
  %1435 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1432, <8 x float> %1430, <8 x float> %1322) #13
  %1436 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1432, <8 x float> %1431, <8 x float> %1323) #13
  %1437 = fadd <8 x float> %984, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  switch i32 %67, label %99 [
    i32 3, label %1467
    i32 0, label %1467
    i32 1, label %1458
    i32 2, label %1438
  ]

1438:                                             ; preds = %1427
  %1439 = insertelement <8 x float> undef, float %68, i32 0
  %1440 = shufflevector <8 x float> %1439, <8 x float> undef, <8 x i32> zeroinitializer
  %1441 = fsub <8 x float> %49, %1440
  %1442 = fadd float %68, %68
  %1443 = insertelement <8 x float> undef, float %1442, i32 0
  %1444 = shufflevector <8 x float> %1443, <8 x float> undef, <8 x i32> zeroinitializer
  %1445 = fmul float %69, 5.000000e-01
  %1446 = insertelement <8 x float> undef, float %1445, i32 0
  %1447 = shufflevector <8 x float> %1446, <8 x float> undef, <8 x i32> zeroinitializer
  %1448 = fmul <8 x float> %1441, %1447
  %1449 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1448, i32 1) #13
  %1450 = fmul <8 x float> %1444, %1449
  %1451 = fsub <8 x float> %1441, %1450
  %1452 = fsub <8 x float> %1451, %1440
  %1453 = fsub <8 x float> zeroinitializer, %1452
  %1454 = bitcast <8 x float> %1452 to <8 x i32>
  %1455 = bitcast <8 x float> %1453 to <8 x i32>
  %1456 = and <8 x i32> %1455, %1454
  %1457 = bitcast <8 x i32> %1456 to <8 x float>
  br label %1467

1458:                                             ; preds = %1427
  %1459 = insertelement <8 x float> undef, float %69, i32 0
  %1460 = shufflevector <8 x float> %1459, <8 x float> undef, <8 x i32> zeroinitializer
  %1461 = fmul <8 x float> %49, %1460
  %1462 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1461, i32 1) #13
  %1463 = insertelement <8 x float> undef, float %68, i32 0
  %1464 = shufflevector <8 x float> %1463, <8 x float> undef, <8 x i32> zeroinitializer
  %1465 = fmul <8 x float> %1464, %1462
  %1466 = fsub <8 x float> %49, %1465
  br label %1467

1467:                                             ; preds = %1458, %1438, %1427, %1427
  %1468 = phi <8 x float> [ %1457, %1438 ], [ %1466, %1458 ], [ %49, %1427 ], [ %49, %1427 ]
  switch i32 %102, label %134 [
    i32 3, label %1498
    i32 0, label %1498
    i32 1, label %1489
    i32 2, label %1469
  ]

1469:                                             ; preds = %1467
  %1470 = insertelement <8 x float> undef, float %103, i32 0
  %1471 = shufflevector <8 x float> %1470, <8 x float> undef, <8 x i32> zeroinitializer
  %1472 = fsub <8 x float> %1437, %1471
  %1473 = fadd float %103, %103
  %1474 = insertelement <8 x float> undef, float %1473, i32 0
  %1475 = shufflevector <8 x float> %1474, <8 x float> undef, <8 x i32> zeroinitializer
  %1476 = fmul float %104, 5.000000e-01
  %1477 = insertelement <8 x float> undef, float %1476, i32 0
  %1478 = shufflevector <8 x float> %1477, <8 x float> undef, <8 x i32> zeroinitializer
  %1479 = fmul <8 x float> %1472, %1478
  %1480 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1479, i32 1) #13
  %1481 = fmul <8 x float> %1475, %1480
  %1482 = fsub <8 x float> %1472, %1481
  %1483 = fsub <8 x float> %1482, %1471
  %1484 = fsub <8 x float> zeroinitializer, %1483
  %1485 = bitcast <8 x float> %1483 to <8 x i32>
  %1486 = bitcast <8 x float> %1484 to <8 x i32>
  %1487 = and <8 x i32> %1486, %1485
  %1488 = bitcast <8 x i32> %1487 to <8 x float>
  br label %1498

1489:                                             ; preds = %1467
  %1490 = insertelement <8 x float> undef, float %104, i32 0
  %1491 = shufflevector <8 x float> %1490, <8 x float> undef, <8 x i32> zeroinitializer
  %1492 = fmul <8 x float> %1437, %1491
  %1493 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1492, i32 1) #13
  %1494 = insertelement <8 x float> undef, float %103, i32 0
  %1495 = shufflevector <8 x float> %1494, <8 x float> undef, <8 x i32> zeroinitializer
  %1496 = fmul <8 x float> %1495, %1493
  %1497 = fsub <8 x float> %1437, %1496
  br label %1498

1498:                                             ; preds = %1489, %1469, %1467, %1467
  %1499 = phi <8 x float> [ %1488, %1469 ], [ %1497, %1489 ], [ %1437, %1467 ], [ %1437, %1467 ]
  switch i32 %137, label %1541 [
    i32 4, label %1500
    i32 6, label %1500
  ]

1500:                                             ; preds = %1498, %1498
  %1501 = insertelement <8 x float> undef, float %68, i32 0
  %1502 = shufflevector <8 x float> %1501, <8 x float> undef, <8 x i32> zeroinitializer
  %1503 = bitcast <8 x float> %1502 to <8 x i32>
  %1504 = add <8 x i32> %1503, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1505 = bitcast <8 x i32> %1504 to <8 x float>
  %1506 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1468) #13
  %1507 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1506, <8 x float> %1505) #13
  %1508 = insertelement <8 x float> undef, float %103, i32 0
  %1509 = shufflevector <8 x float> %1508, <8 x float> undef, <8 x i32> zeroinitializer
  %1510 = bitcast <8 x float> %1509 to <8 x i32>
  %1511 = add <8 x i32> %1510, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1512 = bitcast <8 x i32> %1511 to <8 x float>
  %1513 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1499) #13
  %1514 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1513, <8 x float> %1512) #13
  %1515 = load i8*, i8** %64, align 8
  %1516 = fptosi <8 x float> %1514 to <8 x i32>
  %1517 = load i32, i32* %66, align 8
  %1518 = insertelement <8 x i32> undef, i32 %1517, i32 0
  %1519 = shufflevector <8 x i32> %1518, <8 x i32> undef, <8 x i32> zeroinitializer
  %1520 = mul <8 x i32> %1519, %1516
  %1521 = fptosi <8 x float> %1507 to <8 x i32>
  %1522 = add <8 x i32> %1520, %1521
  %1523 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %1515, <8 x i32> %1522, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %1524 = and <8 x i32> %1523, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1525 = sitofp <8 x i32> %1524 to <8 x float>
  %1526 = fmul <8 x float> %1525, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1527 = lshr <8 x i32> %1523, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1528 = and <8 x i32> %1527, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1529 = sitofp <8 x i32> %1528 to <8 x float>
  %1530 = fmul <8 x float> %1529, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1531 = lshr <8 x i32> %1523, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1532 = and <8 x i32> %1531, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1533 = sitofp <8 x i32> %1532 to <8 x float>
  %1534 = fmul <8 x float> %1533, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1535 = lshr <8 x i32> %1523, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %1536 = sitofp <8 x i32> %1535 to <8 x float>
  %1537 = fmul <8 x float> %1536, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1538 = icmp eq i32 %137, 6
  %1539 = select i1 %1538, <8 x float> %1534, <8 x float> %1526
  %1540 = select i1 %1538, <8 x float> %1526, <8 x float> %1534
  br label %1541

1541:                                             ; preds = %1500, %1498
  %1542 = phi <8 x float> [ zeroinitializer, %1498 ], [ %1539, %1500 ]
  %1543 = phi <8 x float> [ zeroinitializer, %1498 ], [ %1530, %1500 ]
  %1544 = phi <8 x float> [ zeroinitializer, %1498 ], [ %1540, %1500 ]
  %1545 = phi <8 x float> [ zeroinitializer, %1498 ], [ %1537, %1500 ]
  %1546 = fmul <8 x float> %25, %47
  %1547 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1546, <8 x float> %1542, <8 x float> %1433) #13
  %1548 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1546, <8 x float> %1543, <8 x float> %1434) #13
  %1549 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1546, <8 x float> %1544, <8 x float> %1435) #13
  %1550 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1546, <8 x float> %1545, <8 x float> %1436) #13
  switch i32 %67, label %99 [
    i32 3, label %1580
    i32 0, label %1580
    i32 1, label %1571
    i32 2, label %1551
  ]

1551:                                             ; preds = %1541
  %1552 = insertelement <8 x float> undef, float %68, i32 0
  %1553 = shufflevector <8 x float> %1552, <8 x float> undef, <8 x i32> zeroinitializer
  %1554 = fsub <8 x float> %189, %1553
  %1555 = fadd float %68, %68
  %1556 = insertelement <8 x float> undef, float %1555, i32 0
  %1557 = shufflevector <8 x float> %1556, <8 x float> undef, <8 x i32> zeroinitializer
  %1558 = fmul float %69, 5.000000e-01
  %1559 = insertelement <8 x float> undef, float %1558, i32 0
  %1560 = shufflevector <8 x float> %1559, <8 x float> undef, <8 x i32> zeroinitializer
  %1561 = fmul <8 x float> %1554, %1560
  %1562 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1561, i32 1) #13
  %1563 = fmul <8 x float> %1557, %1562
  %1564 = fsub <8 x float> %1554, %1563
  %1565 = fsub <8 x float> %1564, %1553
  %1566 = fsub <8 x float> zeroinitializer, %1565
  %1567 = bitcast <8 x float> %1565 to <8 x i32>
  %1568 = bitcast <8 x float> %1566 to <8 x i32>
  %1569 = and <8 x i32> %1568, %1567
  %1570 = bitcast <8 x i32> %1569 to <8 x float>
  br label %1580

1571:                                             ; preds = %1541
  %1572 = insertelement <8 x float> undef, float %69, i32 0
  %1573 = shufflevector <8 x float> %1572, <8 x float> undef, <8 x i32> zeroinitializer
  %1574 = fmul <8 x float> %189, %1573
  %1575 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1574, i32 1) #13
  %1576 = insertelement <8 x float> undef, float %68, i32 0
  %1577 = shufflevector <8 x float> %1576, <8 x float> undef, <8 x i32> zeroinitializer
  %1578 = fmul <8 x float> %1577, %1575
  %1579 = fsub <8 x float> %189, %1578
  br label %1580

1580:                                             ; preds = %1571, %1551, %1541, %1541
  %1581 = phi <8 x float> [ %1570, %1551 ], [ %1579, %1571 ], [ %189, %1541 ], [ %189, %1541 ]
  switch i32 %102, label %134 [
    i32 3, label %1611
    i32 0, label %1611
    i32 1, label %1602
    i32 2, label %1582
  ]

1582:                                             ; preds = %1580
  %1583 = insertelement <8 x float> undef, float %103, i32 0
  %1584 = shufflevector <8 x float> %1583, <8 x float> undef, <8 x i32> zeroinitializer
  %1585 = fsub <8 x float> %1437, %1584
  %1586 = fadd float %103, %103
  %1587 = insertelement <8 x float> undef, float %1586, i32 0
  %1588 = shufflevector <8 x float> %1587, <8 x float> undef, <8 x i32> zeroinitializer
  %1589 = fmul float %104, 5.000000e-01
  %1590 = insertelement <8 x float> undef, float %1589, i32 0
  %1591 = shufflevector <8 x float> %1590, <8 x float> undef, <8 x i32> zeroinitializer
  %1592 = fmul <8 x float> %1585, %1591
  %1593 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1592, i32 1) #13
  %1594 = fmul <8 x float> %1588, %1593
  %1595 = fsub <8 x float> %1585, %1594
  %1596 = fsub <8 x float> %1595, %1584
  %1597 = fsub <8 x float> zeroinitializer, %1596
  %1598 = bitcast <8 x float> %1596 to <8 x i32>
  %1599 = bitcast <8 x float> %1597 to <8 x i32>
  %1600 = and <8 x i32> %1599, %1598
  %1601 = bitcast <8 x i32> %1600 to <8 x float>
  br label %1611

1602:                                             ; preds = %1580
  %1603 = insertelement <8 x float> undef, float %104, i32 0
  %1604 = shufflevector <8 x float> %1603, <8 x float> undef, <8 x i32> zeroinitializer
  %1605 = fmul <8 x float> %1437, %1604
  %1606 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1605, i32 1) #13
  %1607 = insertelement <8 x float> undef, float %103, i32 0
  %1608 = shufflevector <8 x float> %1607, <8 x float> undef, <8 x i32> zeroinitializer
  %1609 = fmul <8 x float> %1608, %1606
  %1610 = fsub <8 x float> %1437, %1609
  br label %1611

1611:                                             ; preds = %1602, %1582, %1580, %1580
  %1612 = phi <8 x float> [ %1601, %1582 ], [ %1610, %1602 ], [ %1437, %1580 ], [ %1437, %1580 ]
  switch i32 %137, label %1654 [
    i32 4, label %1613
    i32 6, label %1613
  ]

1613:                                             ; preds = %1611, %1611
  %1614 = insertelement <8 x float> undef, float %68, i32 0
  %1615 = shufflevector <8 x float> %1614, <8 x float> undef, <8 x i32> zeroinitializer
  %1616 = bitcast <8 x float> %1615 to <8 x i32>
  %1617 = add <8 x i32> %1616, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1618 = bitcast <8 x i32> %1617 to <8 x float>
  %1619 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1581) #13
  %1620 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1619, <8 x float> %1618) #13
  %1621 = insertelement <8 x float> undef, float %103, i32 0
  %1622 = shufflevector <8 x float> %1621, <8 x float> undef, <8 x i32> zeroinitializer
  %1623 = bitcast <8 x float> %1622 to <8 x i32>
  %1624 = add <8 x i32> %1623, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1625 = bitcast <8 x i32> %1624 to <8 x float>
  %1626 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1612) #13
  %1627 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1626, <8 x float> %1625) #13
  %1628 = load i8*, i8** %64, align 8
  %1629 = fptosi <8 x float> %1627 to <8 x i32>
  %1630 = load i32, i32* %66, align 8
  %1631 = insertelement <8 x i32> undef, i32 %1630, i32 0
  %1632 = shufflevector <8 x i32> %1631, <8 x i32> undef, <8 x i32> zeroinitializer
  %1633 = mul <8 x i32> %1632, %1629
  %1634 = fptosi <8 x float> %1620 to <8 x i32>
  %1635 = add <8 x i32> %1633, %1634
  %1636 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %1628, <8 x i32> %1635, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %1637 = and <8 x i32> %1636, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1638 = sitofp <8 x i32> %1637 to <8 x float>
  %1639 = fmul <8 x float> %1638, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1640 = lshr <8 x i32> %1636, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1641 = and <8 x i32> %1640, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1642 = sitofp <8 x i32> %1641 to <8 x float>
  %1643 = fmul <8 x float> %1642, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1644 = lshr <8 x i32> %1636, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1645 = and <8 x i32> %1644, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1646 = sitofp <8 x i32> %1645 to <8 x float>
  %1647 = fmul <8 x float> %1646, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1648 = lshr <8 x i32> %1636, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %1649 = sitofp <8 x i32> %1648 to <8 x float>
  %1650 = fmul <8 x float> %1649, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1651 = icmp eq i32 %137, 6
  %1652 = select i1 %1651, <8 x float> %1647, <8 x float> %1639
  %1653 = select i1 %1651, <8 x float> %1639, <8 x float> %1647
  br label %1654

1654:                                             ; preds = %1613, %1611
  %1655 = phi <8 x float> [ zeroinitializer, %1611 ], [ %1652, %1613 ]
  %1656 = phi <8 x float> [ zeroinitializer, %1611 ], [ %1643, %1613 ]
  %1657 = phi <8 x float> [ zeroinitializer, %1611 ], [ %1653, %1613 ]
  %1658 = phi <8 x float> [ zeroinitializer, %1611 ], [ %1650, %1613 ]
  %1659 = fmul <8 x float> %47, %28
  %1660 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1659, <8 x float> %1655, <8 x float> %1547) #13
  %1661 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1659, <8 x float> %1656, <8 x float> %1548) #13
  %1662 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1659, <8 x float> %1657, <8 x float> %1549) #13
  %1663 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1659, <8 x float> %1658, <8 x float> %1550) #13
  switch i32 %67, label %99 [
    i32 3, label %1693
    i32 0, label %1693
    i32 1, label %1684
    i32 2, label %1664
  ]

1664:                                             ; preds = %1654
  %1665 = insertelement <8 x float> undef, float %68, i32 0
  %1666 = shufflevector <8 x float> %1665, <8 x float> undef, <8 x i32> zeroinitializer
  %1667 = fsub <8 x float> %303, %1666
  %1668 = fadd float %68, %68
  %1669 = insertelement <8 x float> undef, float %1668, i32 0
  %1670 = shufflevector <8 x float> %1669, <8 x float> undef, <8 x i32> zeroinitializer
  %1671 = fmul float %69, 5.000000e-01
  %1672 = insertelement <8 x float> undef, float %1671, i32 0
  %1673 = shufflevector <8 x float> %1672, <8 x float> undef, <8 x i32> zeroinitializer
  %1674 = fmul <8 x float> %1667, %1673
  %1675 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1674, i32 1) #13
  %1676 = fmul <8 x float> %1670, %1675
  %1677 = fsub <8 x float> %1667, %1676
  %1678 = fsub <8 x float> %1677, %1666
  %1679 = fsub <8 x float> zeroinitializer, %1678
  %1680 = bitcast <8 x float> %1678 to <8 x i32>
  %1681 = bitcast <8 x float> %1679 to <8 x i32>
  %1682 = and <8 x i32> %1681, %1680
  %1683 = bitcast <8 x i32> %1682 to <8 x float>
  br label %1693

1684:                                             ; preds = %1654
  %1685 = insertelement <8 x float> undef, float %69, i32 0
  %1686 = shufflevector <8 x float> %1685, <8 x float> undef, <8 x i32> zeroinitializer
  %1687 = fmul <8 x float> %303, %1686
  %1688 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1687, i32 1) #13
  %1689 = insertelement <8 x float> undef, float %68, i32 0
  %1690 = shufflevector <8 x float> %1689, <8 x float> undef, <8 x i32> zeroinitializer
  %1691 = fmul <8 x float> %1690, %1688
  %1692 = fsub <8 x float> %303, %1691
  br label %1693

1693:                                             ; preds = %1684, %1664, %1654, %1654
  %1694 = phi <8 x float> [ %1683, %1664 ], [ %1692, %1684 ], [ %303, %1654 ], [ %303, %1654 ]
  switch i32 %102, label %134 [
    i32 3, label %1724
    i32 0, label %1724
    i32 1, label %1715
    i32 2, label %1695
  ]

1695:                                             ; preds = %1693
  %1696 = insertelement <8 x float> undef, float %103, i32 0
  %1697 = shufflevector <8 x float> %1696, <8 x float> undef, <8 x i32> zeroinitializer
  %1698 = fsub <8 x float> %1437, %1697
  %1699 = fadd float %103, %103
  %1700 = insertelement <8 x float> undef, float %1699, i32 0
  %1701 = shufflevector <8 x float> %1700, <8 x float> undef, <8 x i32> zeroinitializer
  %1702 = fmul float %104, 5.000000e-01
  %1703 = insertelement <8 x float> undef, float %1702, i32 0
  %1704 = shufflevector <8 x float> %1703, <8 x float> undef, <8 x i32> zeroinitializer
  %1705 = fmul <8 x float> %1698, %1704
  %1706 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1705, i32 1) #13
  %1707 = fmul <8 x float> %1701, %1706
  %1708 = fsub <8 x float> %1698, %1707
  %1709 = fsub <8 x float> %1708, %1697
  %1710 = fsub <8 x float> zeroinitializer, %1709
  %1711 = bitcast <8 x float> %1709 to <8 x i32>
  %1712 = bitcast <8 x float> %1710 to <8 x i32>
  %1713 = and <8 x i32> %1712, %1711
  %1714 = bitcast <8 x i32> %1713 to <8 x float>
  br label %1724

1715:                                             ; preds = %1693
  %1716 = insertelement <8 x float> undef, float %104, i32 0
  %1717 = shufflevector <8 x float> %1716, <8 x float> undef, <8 x i32> zeroinitializer
  %1718 = fmul <8 x float> %1437, %1717
  %1719 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1718, i32 1) #13
  %1720 = insertelement <8 x float> undef, float %103, i32 0
  %1721 = shufflevector <8 x float> %1720, <8 x float> undef, <8 x i32> zeroinitializer
  %1722 = fmul <8 x float> %1721, %1719
  %1723 = fsub <8 x float> %1437, %1722
  br label %1724

1724:                                             ; preds = %1715, %1695, %1693, %1693
  %1725 = phi <8 x float> [ %1714, %1695 ], [ %1723, %1715 ], [ %1437, %1693 ], [ %1437, %1693 ]
  switch i32 %137, label %1767 [
    i32 4, label %1726
    i32 6, label %1726
  ]

1726:                                             ; preds = %1724, %1724
  %1727 = insertelement <8 x float> undef, float %68, i32 0
  %1728 = shufflevector <8 x float> %1727, <8 x float> undef, <8 x i32> zeroinitializer
  %1729 = bitcast <8 x float> %1728 to <8 x i32>
  %1730 = add <8 x i32> %1729, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1731 = bitcast <8 x i32> %1730 to <8 x float>
  %1732 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1694) #13
  %1733 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1732, <8 x float> %1731) #13
  %1734 = insertelement <8 x float> undef, float %103, i32 0
  %1735 = shufflevector <8 x float> %1734, <8 x float> undef, <8 x i32> zeroinitializer
  %1736 = bitcast <8 x float> %1735 to <8 x i32>
  %1737 = add <8 x i32> %1736, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1738 = bitcast <8 x i32> %1737 to <8 x float>
  %1739 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1725) #13
  %1740 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1739, <8 x float> %1738) #13
  %1741 = load i8*, i8** %64, align 8
  %1742 = fptosi <8 x float> %1740 to <8 x i32>
  %1743 = load i32, i32* %66, align 8
  %1744 = insertelement <8 x i32> undef, i32 %1743, i32 0
  %1745 = shufflevector <8 x i32> %1744, <8 x i32> undef, <8 x i32> zeroinitializer
  %1746 = mul <8 x i32> %1745, %1742
  %1747 = fptosi <8 x float> %1733 to <8 x i32>
  %1748 = add <8 x i32> %1746, %1747
  %1749 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %1741, <8 x i32> %1748, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %1750 = and <8 x i32> %1749, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1751 = sitofp <8 x i32> %1750 to <8 x float>
  %1752 = fmul <8 x float> %1751, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1753 = lshr <8 x i32> %1749, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1754 = and <8 x i32> %1753, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1755 = sitofp <8 x i32> %1754 to <8 x float>
  %1756 = fmul <8 x float> %1755, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1757 = lshr <8 x i32> %1749, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1758 = and <8 x i32> %1757, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1759 = sitofp <8 x i32> %1758 to <8 x float>
  %1760 = fmul <8 x float> %1759, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1761 = lshr <8 x i32> %1749, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %1762 = sitofp <8 x i32> %1761 to <8 x float>
  %1763 = fmul <8 x float> %1762, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1764 = icmp eq i32 %137, 6
  %1765 = select i1 %1764, <8 x float> %1760, <8 x float> %1752
  %1766 = select i1 %1764, <8 x float> %1752, <8 x float> %1760
  br label %1767

1767:                                             ; preds = %1726, %1724
  %1768 = phi <8 x float> [ zeroinitializer, %1724 ], [ %1765, %1726 ]
  %1769 = phi <8 x float> [ zeroinitializer, %1724 ], [ %1756, %1726 ]
  %1770 = phi <8 x float> [ zeroinitializer, %1724 ], [ %1766, %1726 ]
  %1771 = phi <8 x float> [ zeroinitializer, %1724 ], [ %1763, %1726 ]
  %1772 = fmul <8 x float> %31, %47
  %1773 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1772, <8 x float> %1768, <8 x float> %1660) #13
  %1774 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1772, <8 x float> %1769, <8 x float> %1661) #13
  %1775 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1772, <8 x float> %1770, <8 x float> %1662) #13
  %1776 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1772, <8 x float> %1771, <8 x float> %1663) #13
  switch i32 %67, label %99 [
    i32 3, label %1806
    i32 0, label %1806
    i32 1, label %1797
    i32 2, label %1777
  ]

1777:                                             ; preds = %1767
  %1778 = insertelement <8 x float> undef, float %68, i32 0
  %1779 = shufflevector <8 x float> %1778, <8 x float> undef, <8 x i32> zeroinitializer
  %1780 = fsub <8 x float> %417, %1779
  %1781 = fadd float %68, %68
  %1782 = insertelement <8 x float> undef, float %1781, i32 0
  %1783 = shufflevector <8 x float> %1782, <8 x float> undef, <8 x i32> zeroinitializer
  %1784 = fmul float %69, 5.000000e-01
  %1785 = insertelement <8 x float> undef, float %1784, i32 0
  %1786 = shufflevector <8 x float> %1785, <8 x float> undef, <8 x i32> zeroinitializer
  %1787 = fmul <8 x float> %1780, %1786
  %1788 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1787, i32 1) #13
  %1789 = fmul <8 x float> %1783, %1788
  %1790 = fsub <8 x float> %1780, %1789
  %1791 = fsub <8 x float> %1790, %1779
  %1792 = fsub <8 x float> zeroinitializer, %1791
  %1793 = bitcast <8 x float> %1791 to <8 x i32>
  %1794 = bitcast <8 x float> %1792 to <8 x i32>
  %1795 = and <8 x i32> %1794, %1793
  %1796 = bitcast <8 x i32> %1795 to <8 x float>
  br label %1806

1797:                                             ; preds = %1767
  %1798 = insertelement <8 x float> undef, float %69, i32 0
  %1799 = shufflevector <8 x float> %1798, <8 x float> undef, <8 x i32> zeroinitializer
  %1800 = fmul <8 x float> %417, %1799
  %1801 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1800, i32 1) #13
  %1802 = insertelement <8 x float> undef, float %68, i32 0
  %1803 = shufflevector <8 x float> %1802, <8 x float> undef, <8 x i32> zeroinitializer
  %1804 = fmul <8 x float> %1803, %1801
  %1805 = fsub <8 x float> %417, %1804
  br label %1806

1806:                                             ; preds = %1797, %1777, %1767, %1767
  %1807 = phi <8 x float> [ %1796, %1777 ], [ %1805, %1797 ], [ %417, %1767 ], [ %417, %1767 ]
  switch i32 %102, label %134 [
    i32 3, label %1837
    i32 0, label %1837
    i32 1, label %1828
    i32 2, label %1808
  ]

1808:                                             ; preds = %1806
  %1809 = insertelement <8 x float> undef, float %103, i32 0
  %1810 = shufflevector <8 x float> %1809, <8 x float> undef, <8 x i32> zeroinitializer
  %1811 = fsub <8 x float> %1437, %1810
  %1812 = fadd float %103, %103
  %1813 = insertelement <8 x float> undef, float %1812, i32 0
  %1814 = shufflevector <8 x float> %1813, <8 x float> undef, <8 x i32> zeroinitializer
  %1815 = fmul float %104, 5.000000e-01
  %1816 = insertelement <8 x float> undef, float %1815, i32 0
  %1817 = shufflevector <8 x float> %1816, <8 x float> undef, <8 x i32> zeroinitializer
  %1818 = fmul <8 x float> %1811, %1817
  %1819 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1818, i32 1) #13
  %1820 = fmul <8 x float> %1814, %1819
  %1821 = fsub <8 x float> %1811, %1820
  %1822 = fsub <8 x float> %1821, %1810
  %1823 = fsub <8 x float> zeroinitializer, %1822
  %1824 = bitcast <8 x float> %1822 to <8 x i32>
  %1825 = bitcast <8 x float> %1823 to <8 x i32>
  %1826 = and <8 x i32> %1825, %1824
  %1827 = bitcast <8 x i32> %1826 to <8 x float>
  br label %1837

1828:                                             ; preds = %1806
  %1829 = insertelement <8 x float> undef, float %104, i32 0
  %1830 = shufflevector <8 x float> %1829, <8 x float> undef, <8 x i32> zeroinitializer
  %1831 = fmul <8 x float> %1437, %1830
  %1832 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %1831, i32 1) #13
  %1833 = insertelement <8 x float> undef, float %103, i32 0
  %1834 = shufflevector <8 x float> %1833, <8 x float> undef, <8 x i32> zeroinitializer
  %1835 = fmul <8 x float> %1834, %1832
  %1836 = fsub <8 x float> %1437, %1835
  br label %1837

1837:                                             ; preds = %1828, %1808, %1806, %1806
  %1838 = phi <8 x float> [ %1827, %1808 ], [ %1836, %1828 ], [ %1437, %1806 ], [ %1437, %1806 ]
  switch i32 %137, label %1880 [
    i32 4, label %1839
    i32 6, label %1839
  ]

1839:                                             ; preds = %1837, %1837
  %1840 = insertelement <8 x float> undef, float %68, i32 0
  %1841 = shufflevector <8 x float> %1840, <8 x float> undef, <8 x i32> zeroinitializer
  %1842 = bitcast <8 x float> %1841 to <8 x i32>
  %1843 = add <8 x i32> %1842, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1844 = bitcast <8 x i32> %1843 to <8 x float>
  %1845 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1807) #13
  %1846 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1845, <8 x float> %1844) #13
  %1847 = insertelement <8 x float> undef, float %103, i32 0
  %1848 = shufflevector <8 x float> %1847, <8 x float> undef, <8 x i32> zeroinitializer
  %1849 = bitcast <8 x float> %1848 to <8 x i32>
  %1850 = add <8 x i32> %1849, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1851 = bitcast <8 x i32> %1850 to <8 x float>
  %1852 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %1838) #13
  %1853 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %1852, <8 x float> %1851) #13
  %1854 = load i8*, i8** %64, align 8
  %1855 = fptosi <8 x float> %1853 to <8 x i32>
  %1856 = load i32, i32* %66, align 8
  %1857 = insertelement <8 x i32> undef, i32 %1856, i32 0
  %1858 = shufflevector <8 x i32> %1857, <8 x i32> undef, <8 x i32> zeroinitializer
  %1859 = mul <8 x i32> %1858, %1855
  %1860 = fptosi <8 x float> %1846 to <8 x i32>
  %1861 = add <8 x i32> %1859, %1860
  %1862 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %1854, <8 x i32> %1861, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %1863 = and <8 x i32> %1862, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1864 = sitofp <8 x i32> %1863 to <8 x float>
  %1865 = fmul <8 x float> %1864, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1866 = lshr <8 x i32> %1862, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %1867 = and <8 x i32> %1866, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1868 = sitofp <8 x i32> %1867 to <8 x float>
  %1869 = fmul <8 x float> %1868, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1870 = lshr <8 x i32> %1862, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1871 = and <8 x i32> %1870, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %1872 = sitofp <8 x i32> %1871 to <8 x float>
  %1873 = fmul <8 x float> %1872, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1874 = lshr <8 x i32> %1862, <i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24, i32 24>
  %1875 = sitofp <8 x i32> %1874 to <8 x float>
  %1876 = fmul <8 x float> %1875, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %1877 = icmp eq i32 %137, 6
  %1878 = select i1 %1877, <8 x float> %1873, <8 x float> %1865
  %1879 = select i1 %1877, <8 x float> %1865, <8 x float> %1873
  br label %1880

1880:                                             ; preds = %1837, %1839
  %1881 = phi <8 x float> [ zeroinitializer, %1837 ], [ %1878, %1839 ]
  %1882 = phi <8 x float> [ zeroinitializer, %1837 ], [ %1869, %1839 ]
  %1883 = phi <8 x float> [ zeroinitializer, %1837 ], [ %1879, %1839 ]
  %1884 = phi <8 x float> [ zeroinitializer, %1837 ], [ %1876, %1839 ]
  %1885 = fmul <8 x float> %34, %47
  %1886 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1885, <8 x float> %1881, <8 x float> %1773) #13
  %1887 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1885, <8 x float> %1882, <8 x float> %1774) #13
  %1888 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1885, <8 x float> %1883, <8 x float> %1775) #13
  %1889 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %1885, <8 x float> %1884, <8 x float> %1776) #13
  %1890 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %1891 = extractvalue { i8*, i8** } %1890, 0
  %1892 = extractvalue { i8*, i8** } %1890, 1
  %1893 = bitcast i8* %1891 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %1893(i64 %0, i8** %1892, i64 %2, i64 %3, <8 x float> %1886, <8 x float> %1887, <8 x float> %1888, <8 x float> %1889, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11bilinear_nxEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x float>*
  %17 = load <8 x float>, <8 x float>* %16, align 4
  %18 = fadd <8 x float> %17, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %19 = getelementptr inbounds i8, i8* %14, i64 128
  %20 = bitcast i8* %19 to <8 x float>*
  %21 = load <8 x float>, <8 x float>* %20, align 4
  %22 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %21
  %23 = getelementptr inbounds i8, i8* %14, i64 256
  %24 = bitcast i8* %23 to <8 x float>*
  store <8 x float> %22, <8 x float>* %24, align 4
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <8 x float> %18, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11bilinear_pxEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x float>*
  %17 = load <8 x float>, <8 x float>* %16, align 4
  %18 = fadd <8 x float> %17, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %19 = getelementptr inbounds i8, i8* %14, i64 128
  %20 = bitcast i8* %19 to <8 x float>*
  %21 = load <8 x float>, <8 x float>* %20, align 4
  %22 = getelementptr inbounds i8, i8* %14, i64 256
  %23 = bitcast i8* %22 to <8 x float>*
  store <8 x float> %21, <8 x float>* %23, align 4
  %24 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %25 = extractvalue { i8*, i8** } %24, 0
  %26 = extractvalue { i8*, i8** } %24, 1
  %27 = bitcast i8* %25 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %27(i64 %0, i8** %26, i64 %2, i64 %3, <8 x float> %18, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11bilinear_nyEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to <8 x float>*
  %18 = load <8 x float>, <8 x float>* %17, align 4
  %19 = fadd <8 x float> %18, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %20 = getelementptr inbounds i8, i8* %14, i64 192
  %21 = bitcast i8* %20 to <8 x float>*
  %22 = load <8 x float>, <8 x float>* %21, align 4
  %23 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %22
  %24 = getelementptr inbounds i8, i8* %14, i64 320
  %25 = bitcast i8* %24 to <8 x float>*
  store <8 x float> %23, <8 x float>* %25, align 4
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <8 x float> %4, <8 x float> %19, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11bilinear_pyEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to <8 x float>*
  %18 = load <8 x float>, <8 x float>* %17, align 4
  %19 = fadd <8 x float> %18, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = getelementptr inbounds i8, i8* %14, i64 192
  %21 = bitcast i8* %20 to <8 x float>*
  %22 = load <8 x float>, <8 x float>* %21, align 4
  %23 = getelementptr inbounds i8, i8* %14, i64 320
  %24 = bitcast i8* %23 to <8 x float>*
  store <8 x float> %22, <8 x float>* %24, align 4
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <8 x float> %4, <8 x float> %19, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11bicubic_n3xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x float>*
  %17 = load <8 x float>, <8 x float>* %16, align 4
  %18 = fadd <8 x float> %17, <float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00>
  %19 = getelementptr inbounds i8, i8* %14, i64 128
  %20 = bitcast i8* %19 to <8 x float>*
  %21 = load <8 x float>, <8 x float>* %20, align 4
  %22 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %21
  %23 = fmul <8 x float> %22, %22
  %24 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>, <8 x float> <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>) #13
  %25 = fmul <8 x float> %23, %24
  %26 = getelementptr inbounds i8, i8* %14, i64 256
  %27 = bitcast i8* %26 to <8 x float>*
  store <8 x float> %25, <8 x float>* %27, align 4
  %28 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %29 = extractvalue { i8*, i8** } %28, 0
  %30 = extractvalue { i8*, i8** } %28, 1
  %31 = bitcast i8* %29 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %31(i64 %0, i8** %30, i64 %2, i64 %3, <8 x float> %18, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11bicubic_n1xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x float>*
  %17 = load <8 x float>, <8 x float>* %16, align 4
  %18 = fadd <8 x float> %17, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %19 = getelementptr inbounds i8, i8* %14, i64 128
  %20 = bitcast i8* %19 to <8 x float>*
  %21 = load <8 x float>, <8 x float>* %20, align 4
  %22 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %21
  %23 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>, <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>) #13
  %24 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> %23, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #13
  %25 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> %24, <8 x float> <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 256
  %27 = bitcast i8* %26 to <8 x float>*
  store <8 x float> %25, <8 x float>* %27, align 4
  %28 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %29 = extractvalue { i8*, i8** } %28, 0
  %30 = extractvalue { i8*, i8** } %28, 1
  %31 = bitcast i8* %29 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %31(i64 %0, i8** %30, i64 %2, i64 %3, <8 x float> %18, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11bicubic_p1xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x float>*
  %17 = load <8 x float>, <8 x float>* %16, align 4
  %18 = fadd <8 x float> %17, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %19 = getelementptr inbounds i8, i8* %14, i64 128
  %20 = bitcast i8* %19 to <8 x float>*
  %21 = load <8 x float>, <8 x float>* %20, align 4
  %22 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %21, <8 x float> <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>, <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>) #13
  %23 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %21, <8 x float> %22, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #13
  %24 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %21, <8 x float> %23, <8 x float> <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>) #13
  %25 = getelementptr inbounds i8, i8* %14, i64 256
  %26 = bitcast i8* %25 to <8 x float>*
  store <8 x float> %24, <8 x float>* %26, align 4
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <8 x float> %18, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11bicubic_p3xEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <8 x float>*
  %17 = load <8 x float>, <8 x float>* %16, align 4
  %18 = fadd <8 x float> %17, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %19 = getelementptr inbounds i8, i8* %14, i64 128
  %20 = bitcast i8* %19 to <8 x float>*
  %21 = load <8 x float>, <8 x float>* %20, align 4
  %22 = fmul <8 x float> %21, %21
  %23 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %21, <8 x float> <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>, <8 x float> <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>) #13
  %24 = fmul <8 x float> %22, %23
  %25 = getelementptr inbounds i8, i8* %14, i64 256
  %26 = bitcast i8* %25 to <8 x float>*
  store <8 x float> %24, <8 x float>* %26, align 4
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <8 x float> %18, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11bicubic_n3yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to <8 x float>*
  %18 = load <8 x float>, <8 x float>* %17, align 4
  %19 = fadd <8 x float> %18, <float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00, float -1.500000e+00>
  %20 = getelementptr inbounds i8, i8* %14, i64 192
  %21 = bitcast i8* %20 to <8 x float>*
  %22 = load <8 x float>, <8 x float>* %21, align 4
  %23 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %22
  %24 = fmul <8 x float> %23, %23
  %25 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %23, <8 x float> <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>, <8 x float> <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>) #13
  %26 = fmul <8 x float> %24, %25
  %27 = getelementptr inbounds i8, i8* %14, i64 320
  %28 = bitcast i8* %27 to <8 x float>*
  store <8 x float> %26, <8 x float>* %28, align 4
  %29 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %30 = extractvalue { i8*, i8** } %29, 0
  %31 = extractvalue { i8*, i8** } %29, 1
  %32 = bitcast i8* %30 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %32(i64 %0, i8** %31, i64 %2, i64 %3, <8 x float> %4, <8 x float> %19, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11bicubic_n1yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to <8 x float>*
  %18 = load <8 x float>, <8 x float>* %17, align 4
  %19 = fadd <8 x float> %18, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %20 = getelementptr inbounds i8, i8* %14, i64 192
  %21 = bitcast i8* %20 to <8 x float>*
  %22 = load <8 x float>, <8 x float>* %21, align 4
  %23 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %22
  %24 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %23, <8 x float> <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>, <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>) #13
  %25 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %23, <8 x float> %24, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #13
  %26 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %23, <8 x float> %25, <8 x float> <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>) #13
  %27 = getelementptr inbounds i8, i8* %14, i64 320
  %28 = bitcast i8* %27 to <8 x float>*
  store <8 x float> %26, <8 x float>* %28, align 4
  %29 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %30 = extractvalue { i8*, i8** } %29, 0
  %31 = extractvalue { i8*, i8** } %29, 1
  %32 = bitcast i8* %30 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %32(i64 %0, i8** %31, i64 %2, i64 %3, <8 x float> %4, <8 x float> %19, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11bicubic_p1yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to <8 x float>*
  %18 = load <8 x float>, <8 x float>* %17, align 4
  %19 = fadd <8 x float> %18, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = getelementptr inbounds i8, i8* %14, i64 192
  %21 = bitcast i8* %20 to <8 x float>*
  %22 = load <8 x float>, <8 x float>* %21, align 4
  %23 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> <float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000, float 0xBFF2AAAAA0000000>, <8 x float> <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>) #13
  %24 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> %23, <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>) #13
  %25 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> %24, <8 x float> <float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000, float 0x3FAC71C720000000>) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 320
  %27 = bitcast i8* %26 to <8 x float>*
  store <8 x float> %25, <8 x float>* %27, align 4
  %28 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %29 = extractvalue { i8*, i8** } %28, 0
  %30 = extractvalue { i8*, i8** } %28, 1
  %31 = bitcast i8* %29 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %31(i64 %0, i8** %30, i64 %2, i64 %3, <8 x float> %4, <8 x float> %19, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11bicubic_p3yEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to <8 x float>*
  %18 = load <8 x float>, <8 x float>* %17, align 4
  %19 = fadd <8 x float> %18, <float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00, float 1.500000e+00>
  %20 = getelementptr inbounds i8, i8* %14, i64 192
  %21 = bitcast i8* %20 to <8 x float>*
  %22 = load <8 x float>, <8 x float>* %21, align 4
  %23 = fmul <8 x float> %22, %22
  %24 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> <float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000, float 0x3FD8E38E40000000>, <8 x float> <float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000, float 0xBFD5555560000000>) #13
  %25 = fmul <8 x float> %23, %24
  %26 = getelementptr inbounds i8, i8* %14, i64 320
  %27 = bitcast i8* %26 to <8 x float>*
  store <8 x float> %25, <8 x float>* %27, align 4
  %28 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %29 = extractvalue { i8*, i8** } %28, 0
  %30 = extractvalue { i8*, i8** } %28, 1
  %31 = bitcast i8* %29 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %31(i64 %0, i8** %30, i64 %2, i64 %3, <8 x float> %4, <8 x float> %19, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7save_xyEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fadd <8 x float> %4, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %17 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %16, i32 1) #13
  %18 = fsub <8 x float> %16, %17
  %19 = fadd <8 x float> %5, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %19, i32 1) #13
  %21 = fsub <8 x float> %19, %20
  %22 = bitcast i8* %14 to <8 x float>*
  store <8 x float> %4, <8 x float>* %22, align 4
  %23 = getelementptr inbounds i8, i8* %14, i64 64
  %24 = bitcast i8* %23 to <8 x float>*
  store <8 x float> %5, <8 x float>* %24, align 4
  %25 = getelementptr inbounds i8, i8* %14, i64 128
  %26 = bitcast i8* %25 to <8 x float>*
  store <8 x float> %18, <8 x float>* %26, align 4
  %27 = getelementptr inbounds i8, i8* %14, i64 192
  %28 = bitcast i8* %27 to <8 x float>*
  store <8 x float> %21, <8 x float>* %28, align 4
  %29 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %30 = extractvalue { i8*, i8** } %29, 0
  %31 = extractvalue { i8*, i8** } %29, 1
  %32 = bitcast i8* %30 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %32(i64 %0, i8** %31, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10accumulateEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 256
  %17 = bitcast i8* %16 to <8 x float>*
  %18 = load <8 x float>, <8 x float>* %17, align 4
  %19 = getelementptr inbounds i8, i8* %14, i64 320
  %20 = bitcast i8* %19 to <8 x float>*
  %21 = load <8 x float>, <8 x float>* %20, align 4
  %22 = fmul <8 x float> %18, %21
  %23 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> %4, <8 x float> %8) #13
  %24 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> %5, <8 x float> %9) #13
  %25 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> %6, <8 x float> %10) #13
  %26 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %22, <8 x float> %7, <8 x float> %11) #13
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <8 x float> %4, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %23, <8 x float> %24, <8 x float> %25, <8 x float> %26) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL9clamp_x_1EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %14 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %13, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %15 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %16 = extractvalue { i8*, i8** } %15, 0
  %17 = extractvalue { i8*, i8** } %15, 1
  %18 = bitcast i8* %16 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %18(i64 %0, i8** %17, i64 %2, i64 %3, <8 x float> %14, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10mirror_x_1EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fadd <8 x float> %4, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %14 = fmul <8 x float> %13, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %15 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %14, i32 1) #13
  %16 = fadd <8 x float> %15, %15
  %17 = fsub <8 x float> %13, %16
  %18 = fadd <8 x float> %17, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %19 = fsub <8 x float> zeroinitializer, %18
  %20 = bitcast <8 x float> %18 to <8 x i32>
  %21 = bitcast <8 x float> %19 to <8 x i32>
  %22 = and <8 x i32> %21, %20
  %23 = bitcast <8 x i32> %22 to <8 x float>
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %23) #13
  %25 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %24, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <8 x float> %25, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10repeat_x_1EmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %4, i32 1) #13
  %14 = fsub <8 x float> %4, %13
  %15 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %14) #13
  %16 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %15, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <8 x float> %16, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL22evenly_spaced_gradientEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, -1
  %19 = uitofp i64 %18 to float
  %20 = insertelement <8 x float> undef, float %19, i32 0
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <8 x i32> zeroinitializer
  %22 = fmul <8 x float> %21, %4
  %23 = fptosi <8 x float> %22 to <8 x i32>
  %24 = icmp ult i64 %17, 9
  %25 = getelementptr inbounds i8, i8* %14, i64 8
  %26 = bitcast i8* %25 to float**
  %27 = load float*, float** %26, align 8
  br i1 %24, label %28, label %67

28:                                               ; preds = %12
  %29 = bitcast float* %27 to <8 x float>*
  %30 = load <8 x float>, <8 x float>* %29, align 1
  %31 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %30, <8 x i32> %23) #13
  %32 = getelementptr inbounds i8, i8* %14, i64 40
  %33 = bitcast i8* %32 to <8 x float>**
  %34 = load <8 x float>*, <8 x float>** %33, align 8
  %35 = load <8 x float>, <8 x float>* %34, align 1
  %36 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %35, <8 x i32> %23) #13
  %37 = getelementptr inbounds i8, i8* %14, i64 16
  %38 = bitcast i8* %37 to <8 x float>**
  %39 = load <8 x float>*, <8 x float>** %38, align 8
  %40 = load <8 x float>, <8 x float>* %39, align 1
  %41 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %40, <8 x i32> %23) #13
  %42 = getelementptr inbounds i8, i8* %14, i64 48
  %43 = bitcast i8* %42 to <8 x float>**
  %44 = load <8 x float>*, <8 x float>** %43, align 8
  %45 = load <8 x float>, <8 x float>* %44, align 1
  %46 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %45, <8 x i32> %23) #13
  %47 = getelementptr inbounds i8, i8* %14, i64 24
  %48 = bitcast i8* %47 to <8 x float>**
  %49 = load <8 x float>*, <8 x float>** %48, align 8
  %50 = load <8 x float>, <8 x float>* %49, align 1
  %51 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %50, <8 x i32> %23) #13
  %52 = getelementptr inbounds i8, i8* %14, i64 56
  %53 = bitcast i8* %52 to <8 x float>**
  %54 = load <8 x float>*, <8 x float>** %53, align 8
  %55 = load <8 x float>, <8 x float>* %54, align 1
  %56 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %55, <8 x i32> %23) #13
  %57 = getelementptr inbounds i8, i8* %14, i64 32
  %58 = bitcast i8* %57 to <8 x float>**
  %59 = load <8 x float>*, <8 x float>** %58, align 8
  %60 = load <8 x float>, <8 x float>* %59, align 1
  %61 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %60, <8 x i32> %23) #13
  %62 = getelementptr inbounds i8, i8* %14, i64 64
  %63 = bitcast i8* %62 to <8 x float>**
  %64 = load <8 x float>*, <8 x float>** %63, align 8
  %65 = load <8 x float>, <8 x float>* %64, align 1
  %66 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %65, <8 x i32> %23) #13
  br label %98

67:                                               ; preds = %12
  %68 = bitcast float* %27 to i8*
  %69 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %68, <8 x i32> %23, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %70 = getelementptr inbounds i8, i8* %14, i64 40
  %71 = bitcast i8* %70 to i8**
  %72 = load i8*, i8** %71, align 8
  %73 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %72, <8 x i32> %23, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %74 = getelementptr inbounds i8, i8* %14, i64 16
  %75 = bitcast i8* %74 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %76, <8 x i32> %23, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %78 = getelementptr inbounds i8, i8* %14, i64 48
  %79 = bitcast i8* %78 to i8**
  %80 = load i8*, i8** %79, align 8
  %81 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %80, <8 x i32> %23, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %82 = getelementptr inbounds i8, i8* %14, i64 24
  %83 = bitcast i8* %82 to i8**
  %84 = load i8*, i8** %83, align 8
  %85 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %84, <8 x i32> %23, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %86 = getelementptr inbounds i8, i8* %14, i64 56
  %87 = bitcast i8* %86 to i8**
  %88 = load i8*, i8** %87, align 8
  %89 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %88, <8 x i32> %23, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %90 = getelementptr inbounds i8, i8* %14, i64 32
  %91 = bitcast i8* %90 to i8**
  %92 = load i8*, i8** %91, align 8
  %93 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %92, <8 x i32> %23, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %94 = getelementptr inbounds i8, i8* %14, i64 64
  %95 = bitcast i8* %94 to i8**
  %96 = load i8*, i8** %95, align 8
  %97 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %96, <8 x i32> %23, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  br label %98

98:                                               ; preds = %28, %67
  %99 = phi <8 x float> [ %31, %28 ], [ %69, %67 ]
  %100 = phi <8 x float> [ %36, %28 ], [ %73, %67 ]
  %101 = phi <8 x float> [ %41, %28 ], [ %77, %67 ]
  %102 = phi <8 x float> [ %46, %28 ], [ %81, %67 ]
  %103 = phi <8 x float> [ %51, %28 ], [ %85, %67 ]
  %104 = phi <8 x float> [ %56, %28 ], [ %89, %67 ]
  %105 = phi <8 x float> [ %61, %28 ], [ %93, %67 ]
  %106 = phi <8 x float> [ %66, %28 ], [ %97, %67 ]
  %107 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %99, <8 x float> %100) #13
  %108 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %101, <8 x float> %102) #13
  %109 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %103, <8 x float> %104) #13
  %110 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %105, <8 x float> %106) #13
  %111 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %112 = extractvalue { i8*, i8** } %111, 0
  %113 = extractvalue { i8*, i8** } %111, 1
  %114 = bitcast i8* %112 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %114(i64 %0, i8** %113, i64 %2, i64 %3, <8 x float> %107, <8 x float> %108, <8 x float> %109, <8 x float> %110, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL8gradientEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %17, 1
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds i8, i8* %14, i64 8
  %21 = bitcast i8* %20 to float**
  %22 = load float*, float** %21, align 8
  br label %52

23:                                               ; preds = %12
  %24 = getelementptr inbounds i8, i8* %14, i64 72
  %25 = bitcast i8* %24 to float**
  %26 = load float*, float** %25, align 8
  %27 = add i64 %17, -1
  %28 = and i64 %27, 1
  %29 = icmp eq i64 %17, 2
  br i1 %29, label %32, label %30

30:                                               ; preds = %23
  %31 = sub i64 %27, %28
  br label %124

32:                                               ; preds = %124, %23
  %33 = phi <8 x i32> [ undef, %23 ], [ %144, %124 ]
  %34 = phi i64 [ 1, %23 ], [ %145, %124 ]
  %35 = phi <8 x i32> [ zeroinitializer, %23 ], [ %144, %124 ]
  %36 = icmp eq i64 %28, 0
  br i1 %36, label %46, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds float, float* %26, i64 %34
  %39 = load float, float* %38, align 4
  %40 = insertelement <8 x float> undef, float %39, i32 0
  %41 = shufflevector <8 x float> %40, <8 x float> undef, <8 x i32> zeroinitializer
  %42 = fcmp ole <8 x float> %41, %4
  %43 = select <8 x i1> %42, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> zeroinitializer
  %44 = bitcast <8 x float> %43 to <8 x i32>
  %45 = add <8 x i32> %35, %44
  br label %46

46:                                               ; preds = %32, %37
  %47 = phi <8 x i32> [ %33, %32 ], [ %45, %37 ]
  %48 = icmp ult i64 %17, 9
  %49 = getelementptr inbounds i8, i8* %14, i64 8
  %50 = bitcast i8* %49 to float**
  %51 = load float*, float** %50, align 8
  br i1 %48, label %52, label %93

52:                                               ; preds = %46, %19
  %53 = phi float* [ %22, %19 ], [ %51, %46 ]
  %54 = phi <8 x i32> [ zeroinitializer, %19 ], [ %47, %46 ]
  %55 = bitcast float* %53 to <8 x float>*
  %56 = load <8 x float>, <8 x float>* %55, align 1
  %57 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %56, <8 x i32> %54) #13
  %58 = getelementptr inbounds i8, i8* %14, i64 40
  %59 = bitcast i8* %58 to <8 x float>**
  %60 = load <8 x float>*, <8 x float>** %59, align 8
  %61 = load <8 x float>, <8 x float>* %60, align 1
  %62 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %61, <8 x i32> %54) #13
  %63 = getelementptr inbounds i8, i8* %14, i64 16
  %64 = bitcast i8* %63 to <8 x float>**
  %65 = load <8 x float>*, <8 x float>** %64, align 8
  %66 = load <8 x float>, <8 x float>* %65, align 1
  %67 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %66, <8 x i32> %54) #13
  %68 = getelementptr inbounds i8, i8* %14, i64 48
  %69 = bitcast i8* %68 to <8 x float>**
  %70 = load <8 x float>*, <8 x float>** %69, align 8
  %71 = load <8 x float>, <8 x float>* %70, align 1
  %72 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %71, <8 x i32> %54) #13
  %73 = getelementptr inbounds i8, i8* %14, i64 24
  %74 = bitcast i8* %73 to <8 x float>**
  %75 = load <8 x float>*, <8 x float>** %74, align 8
  %76 = load <8 x float>, <8 x float>* %75, align 1
  %77 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %76, <8 x i32> %54) #13
  %78 = getelementptr inbounds i8, i8* %14, i64 56
  %79 = bitcast i8* %78 to <8 x float>**
  %80 = load <8 x float>*, <8 x float>** %79, align 8
  %81 = load <8 x float>, <8 x float>* %80, align 1
  %82 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %81, <8 x i32> %54) #13
  %83 = getelementptr inbounds i8, i8* %14, i64 32
  %84 = bitcast i8* %83 to <8 x float>**
  %85 = load <8 x float>*, <8 x float>** %84, align 8
  %86 = load <8 x float>, <8 x float>* %85, align 1
  %87 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %86, <8 x i32> %54) #13
  %88 = getelementptr inbounds i8, i8* %14, i64 64
  %89 = bitcast i8* %88 to <8 x float>**
  %90 = load <8 x float>*, <8 x float>** %89, align 8
  %91 = load <8 x float>, <8 x float>* %90, align 1
  %92 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %91, <8 x i32> %54) #13
  br label %148

93:                                               ; preds = %46
  %94 = bitcast float* %51 to i8*
  %95 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %94, <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %96 = getelementptr inbounds i8, i8* %14, i64 40
  %97 = bitcast i8* %96 to i8**
  %98 = load i8*, i8** %97, align 8
  %99 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %98, <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %100 = getelementptr inbounds i8, i8* %14, i64 16
  %101 = bitcast i8* %100 to i8**
  %102 = load i8*, i8** %101, align 8
  %103 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %102, <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %104 = getelementptr inbounds i8, i8* %14, i64 48
  %105 = bitcast i8* %104 to i8**
  %106 = load i8*, i8** %105, align 8
  %107 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %106, <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %108 = getelementptr inbounds i8, i8* %14, i64 24
  %109 = bitcast i8* %108 to i8**
  %110 = load i8*, i8** %109, align 8
  %111 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %110, <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %112 = getelementptr inbounds i8, i8* %14, i64 56
  %113 = bitcast i8* %112 to i8**
  %114 = load i8*, i8** %113, align 8
  %115 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %114, <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %116 = getelementptr inbounds i8, i8* %14, i64 32
  %117 = bitcast i8* %116 to i8**
  %118 = load i8*, i8** %117, align 8
  %119 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %118, <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %120 = getelementptr inbounds i8, i8* %14, i64 64
  %121 = bitcast i8* %120 to i8**
  %122 = load i8*, i8** %121, align 8
  %123 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %122, <8 x i32> %47, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  br label %148

124:                                              ; preds = %124, %30
  %125 = phi i64 [ 1, %30 ], [ %145, %124 ]
  %126 = phi <8 x i32> [ zeroinitializer, %30 ], [ %144, %124 ]
  %127 = phi i64 [ %31, %30 ], [ %146, %124 ]
  %128 = getelementptr inbounds float, float* %26, i64 %125
  %129 = load float, float* %128, align 4
  %130 = insertelement <8 x float> undef, float %129, i32 0
  %131 = shufflevector <8 x float> %130, <8 x float> undef, <8 x i32> zeroinitializer
  %132 = fcmp ole <8 x float> %131, %4
  %133 = select <8 x i1> %132, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> zeroinitializer
  %134 = bitcast <8 x float> %133 to <8 x i32>
  %135 = add <8 x i32> %126, %134
  %136 = add nuw i64 %125, 1
  %137 = getelementptr inbounds float, float* %26, i64 %136
  %138 = load float, float* %137, align 4
  %139 = insertelement <8 x float> undef, float %138, i32 0
  %140 = shufflevector <8 x float> %139, <8 x float> undef, <8 x i32> zeroinitializer
  %141 = fcmp ole <8 x float> %140, %4
  %142 = select <8 x i1> %141, <8 x float> <float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000, float 0x36A0000000000000>, <8 x float> zeroinitializer
  %143 = bitcast <8 x float> %142 to <8 x i32>
  %144 = add <8 x i32> %135, %143
  %145 = add nuw i64 %125, 2
  %146 = add i64 %127, -2
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %32, label %124

148:                                              ; preds = %52, %93
  %149 = phi <8 x float> [ %57, %52 ], [ %95, %93 ]
  %150 = phi <8 x float> [ %62, %52 ], [ %99, %93 ]
  %151 = phi <8 x float> [ %67, %52 ], [ %103, %93 ]
  %152 = phi <8 x float> [ %72, %52 ], [ %107, %93 ]
  %153 = phi <8 x float> [ %77, %52 ], [ %111, %93 ]
  %154 = phi <8 x float> [ %82, %52 ], [ %115, %93 ]
  %155 = phi <8 x float> [ %87, %52 ], [ %119, %93 ]
  %156 = phi <8 x float> [ %92, %52 ], [ %123, %93 ]
  %157 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %149, <8 x float> %150) #13
  %158 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %151, <8 x float> %152) #13
  %159 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %153, <8 x float> %154) #13
  %160 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %155, <8 x float> %156) #13
  %161 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %162 = extractvalue { i8*, i8** } %161, 0
  %163 = extractvalue { i8*, i8** } %161, 1
  %164 = bitcast i8* %162 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %164(i64 %0, i8** %163, i64 %2, i64 %3, <8 x float> %157, <8 x float> %158, <8 x float> %159, <8 x float> %160, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL29evenly_spaced_2_stop_gradientEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = insertelement <8 x float> undef, float %17, i32 0
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <8 x i32> zeroinitializer
  %20 = getelementptr inbounds i8, i8* %14, i64 16
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %19, <8 x float> %24) #13
  %26 = getelementptr inbounds i8, i8* %14, i64 4
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 4
  %29 = insertelement <8 x float> undef, float %28, i32 0
  %30 = shufflevector <8 x float> %29, <8 x float> undef, <8 x i32> zeroinitializer
  %31 = getelementptr inbounds i8, i8* %14, i64 20
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4
  %34 = insertelement <8 x float> undef, float %33, i32 0
  %35 = shufflevector <8 x float> %34, <8 x float> undef, <8 x i32> zeroinitializer
  %36 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %30, <8 x float> %35) #13
  %37 = getelementptr inbounds i8, i8* %14, i64 8
  %38 = bitcast i8* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = insertelement <8 x float> undef, float %39, i32 0
  %41 = shufflevector <8 x float> %40, <8 x float> undef, <8 x i32> zeroinitializer
  %42 = getelementptr inbounds i8, i8* %14, i64 24
  %43 = bitcast i8* %42 to float*
  %44 = load float, float* %43, align 4
  %45 = insertelement <8 x float> undef, float %44, i32 0
  %46 = shufflevector <8 x float> %45, <8 x float> undef, <8 x i32> zeroinitializer
  %47 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %41, <8 x float> %46) #13
  %48 = getelementptr inbounds i8, i8* %14, i64 12
  %49 = bitcast i8* %48 to float*
  %50 = load float, float* %49, align 4
  %51 = insertelement <8 x float> undef, float %50, i32 0
  %52 = shufflevector <8 x float> %51, <8 x float> undef, <8 x i32> zeroinitializer
  %53 = getelementptr inbounds i8, i8* %14, i64 28
  %54 = bitcast i8* %53 to float*
  %55 = load float, float* %54, align 4
  %56 = insertelement <8 x float> undef, float %55, i32 0
  %57 = shufflevector <8 x float> %56, <8 x float> undef, <8 x i32> zeroinitializer
  %58 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %52, <8 x float> %57) #13
  %59 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %60 = extractvalue { i8*, i8** } %59, 0
  %61 = extractvalue { i8*, i8** } %59, 1
  %62 = bitcast i8* %60 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %62(i64 %0, i8** %61, i64 %2, i64 %3, <8 x float> %25, <8 x float> %36, <8 x float> %47, <8 x float> %58, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL16xy_to_unit_angleEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fsub <8 x float> zeroinitializer, %4
  %14 = bitcast <8 x float> %4 to <8 x i32>
  %15 = bitcast <8 x float> %13 to <8 x i32>
  %16 = and <8 x i32> %15, %14
  %17 = bitcast <8 x i32> %16 to <8 x float>
  %18 = fsub <8 x float> zeroinitializer, %5
  %19 = bitcast <8 x float> %5 to <8 x i32>
  %20 = bitcast <8 x float> %18 to <8 x i32>
  %21 = and <8 x i32> %20, %19
  %22 = bitcast <8 x i32> %21 to <8 x float>
  %23 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %17, <8 x float> %22) #13
  %24 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %17, <8 x float> %22) #13
  %25 = fdiv <8 x float> %23, %24
  %26 = fmul <8 x float> %25, %25
  %27 = fmul <8 x float> %26, <float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000>
  %28 = fadd <8 x float> %27, <float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000>
  %29 = fmul <8 x float> %26, %28
  %30 = fadd <8 x float> %29, <float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000>
  %31 = fmul <8 x float> %26, %30
  %32 = fadd <8 x float> %31, <float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000>
  %33 = fmul <8 x float> %25, %32
  %34 = fcmp olt <8 x float> %17, %22
  %35 = fsub <8 x float> <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>, %33
  %36 = select <8 x i1> %34, <8 x float> %35, <8 x float> %33
  %37 = fcmp olt <8 x float> %4, zeroinitializer
  %38 = fsub <8 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %36
  %39 = select <8 x i1> %37, <8 x float> %38, <8 x float> %36
  %40 = fcmp olt <8 x float> %5, zeroinitializer
  %41 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %39
  %42 = select <8 x i1> %40, <8 x float> %41, <8 x float> %39
  %43 = fcmp ord <8 x float> %42, zeroinitializer
  %44 = select <8 x i1> %43, <8 x float> %42, <8 x float> zeroinitializer
  %45 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %46 = extractvalue { i8*, i8** } %45, 0
  %47 = extractvalue { i8*, i8** } %45, 1
  %48 = bitcast i8* %46 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %48(i64 %0, i8** %47, i64 %2, i64 %3, <8 x float> %44, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL12xy_to_radiusEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %4, %4
  %14 = fmul <8 x float> %5, %5
  %15 = fadd <8 x float> %13, %14
  %16 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %15) #13
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <8 x float> %16, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL23xy_to_2pt_conical_stripEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 64
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = fmul <8 x float> %5, %5
  %22 = fsub <8 x float> %20, %21
  %23 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %22) #13
  %24 = fadd <8 x float> %23, %4
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <8 x float> %24, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL33xy_to_2pt_conical_focal_on_circleEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %5, %5
  %14 = fdiv <8 x float> %13, %4
  %15 = fadd <8 x float> %14, %4
  %16 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %17 = extractvalue { i8*, i8** } %16, 0
  %18 = extractvalue { i8*, i8** } %16, 1
  %19 = bitcast i8* %17 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %19(i64 %0, i8** %18, i64 %2, i64 %3, <8 x float> %15, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL30xy_to_2pt_conical_well_behavedEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fmul <8 x float> %4, %4
  %17 = fmul <8 x float> %5, %5
  %18 = fadd <8 x float> %16, %17
  %19 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %18) #13
  %20 = getelementptr inbounds i8, i8* %14, i64 64
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = fmul <8 x float> %24, %4
  %26 = fsub <8 x float> %19, %25
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <8 x float> %26, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL25xy_to_2pt_conical_smallerEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fmul <8 x float> %4, %4
  %17 = fmul <8 x float> %5, %5
  %18 = fsub <8 x float> %16, %17
  %19 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %18) #13
  %20 = fsub <8 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %19
  %21 = getelementptr inbounds i8, i8* %14, i64 64
  %22 = bitcast i8* %21 to float*
  %23 = load float, float* %22, align 4
  %24 = insertelement <8 x float> undef, float %23, i32 0
  %25 = shufflevector <8 x float> %24, <8 x float> undef, <8 x i32> zeroinitializer
  %26 = fmul <8 x float> %25, %4
  %27 = fsub <8 x float> %20, %26
  %28 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %29 = extractvalue { i8*, i8** } %28, 0
  %30 = extractvalue { i8*, i8** } %28, 1
  %31 = bitcast i8* %29 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %31(i64 %0, i8** %30, i64 %2, i64 %3, <8 x float> %27, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL25xy_to_2pt_conical_greaterEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fmul <8 x float> %4, %4
  %17 = fmul <8 x float> %5, %5
  %18 = fsub <8 x float> %16, %17
  %19 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %18) #13
  %20 = getelementptr inbounds i8, i8* %14, i64 64
  %21 = bitcast i8* %20 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <8 x float> undef, float %22, i32 0
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> zeroinitializer
  %25 = fmul <8 x float> %24, %4
  %26 = fsub <8 x float> %19, %25
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <8 x float> %26, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL34alter_2pt_conical_compensate_focalEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 68
  %17 = bitcast i8* %16 to float*
  %18 = load float, float* %17, align 4
  %19 = insertelement <8 x float> undef, float %18, i32 0
  %20 = shufflevector <8 x float> %19, <8 x float> undef, <8 x i32> zeroinitializer
  %21 = fadd <8 x float> %20, %4
  %22 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %23 = extractvalue { i8*, i8** } %22, 0
  %24 = extractvalue { i8*, i8** } %22, 1
  %25 = bitcast i8* %23 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %25(i64 %0, i8** %24, i64 %2, i64 %3, <8 x float> %21, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL24alter_2pt_conical_unswapEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %4
  %14 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %15 = extractvalue { i8*, i8** } %14, 0
  %16 = extractvalue { i8*, i8** } %14, 1
  %17 = bitcast i8* %15 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %17(i64 %0, i8** %16, i64 %2, i64 %3, <8 x float> %13, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL20mask_2pt_conical_nanEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fcmp uno <8 x float> %4, zeroinitializer
  %17 = select <8 x i1> %16, <8 x float> zeroinitializer, <8 x float> %4
  %18 = select <8 x i1> %16, <8 x float> zeroinitializer, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>
  %19 = bitcast i8* %14 to <8 x float>*
  store <8 x float> %18, <8 x float>* %19, align 4
  %20 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %21 = extractvalue { i8*, i8** } %20, 0
  %22 = extractvalue { i8*, i8** } %20, 1
  %23 = bitcast i8* %21 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %23(i64 %0, i8** %22, i64 %2, i64 %3, <8 x float> %17, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL28mask_2pt_conical_degeneratesEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = fcmp ule <8 x float> %4, zeroinitializer
  %17 = select <8 x i1> %16, <8 x float> zeroinitializer, <8 x float> %4
  %18 = select <8 x i1> %16, <8 x float> zeroinitializer, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>
  %19 = bitcast i8* %14 to <8 x float>*
  store <8 x float> %18, <8 x float>* %19, align 4
  %20 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %21 = extractvalue { i8*, i8** } %20, 0
  %22 = extractvalue { i8*, i8** } %20, 1
  %23 = bitcast i8* %21 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %23(i64 %0, i8** %22, i64 %2, i64 %3, <8 x float> %17, <8 x float> %5, <8 x float> %6, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL17apply_vector_maskEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = bitcast <8 x float> %4 to <8 x i32>
  %14 = bitcast <8 x float> %5 to <8 x i32>
  %15 = bitcast <8 x float> %6 to <8 x i32>
  %16 = bitcast <8 x float> %7 to <8 x i32>
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to <8 x i32>*
  %21 = load <8 x i32>, <8 x i32>* %20, align 4
  %22 = and <8 x i32> %21, %13
  %23 = and <8 x i32> %21, %14
  %24 = and <8 x i32> %21, %15
  %25 = and <8 x i32> %21, %16
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %19) #10, !srcloc !98
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  %30 = bitcast <8 x i32> %22 to <8 x float>
  %31 = bitcast <8 x i32> %23 to <8 x float>
  %32 = bitcast <8 x i32> %24 to <8 x float>
  %33 = bitcast <8 x i32> %25 to <8 x float>
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <8 x float> %30, <8 x float> %31, <8 x float> %32, <8 x float> %33, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL11byte_tablesEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %4) #13
  %19 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %18, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %20 = fmul <8 x float> %19, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %21 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %20) #13
  %22 = extractelement <8 x i32> %21, i32 0
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %17, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = insertelement <8 x i8> undef, i8 %25, i32 0
  %27 = extractelement <8 x i32> %21, i32 1
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %17, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = insertelement <8 x i8> %26, i8 %30, i32 1
  %32 = extractelement <8 x i32> %21, i32 2
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %17, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = insertelement <8 x i8> %31, i8 %35, i32 2
  %37 = extractelement <8 x i32> %21, i32 3
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %17, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = insertelement <8 x i8> %36, i8 %40, i32 3
  %42 = extractelement <8 x i32> %21, i32 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %17, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = insertelement <8 x i8> %41, i8 %45, i32 4
  %47 = extractelement <8 x i32> %21, i32 5
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %17, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = insertelement <8 x i8> %46, i8 %50, i32 5
  %52 = extractelement <8 x i32> %21, i32 6
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %17, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = insertelement <8 x i8> %51, i8 %55, i32 6
  %57 = extractelement <8 x i32> %21, i32 7
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %17, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = insertelement <8 x i8> %56, i8 %60, i32 7
  %62 = uitofp <8 x i8> %61 to <8 x float>
  %63 = fmul <8 x float> %62, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %64 = getelementptr inbounds i8, i8* %14, i64 8
  %65 = bitcast i8* %64 to i8**
  %66 = load i8*, i8** %65, align 8
  %67 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %5) #13
  %68 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %67, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %69 = fmul <8 x float> %68, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %70 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %69) #13
  %71 = extractelement <8 x i32> %70, i32 0
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %66, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = insertelement <8 x i8> undef, i8 %74, i32 0
  %76 = extractelement <8 x i32> %70, i32 1
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %66, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = insertelement <8 x i8> %75, i8 %79, i32 1
  %81 = extractelement <8 x i32> %70, i32 2
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %66, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = insertelement <8 x i8> %80, i8 %84, i32 2
  %86 = extractelement <8 x i32> %70, i32 3
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %66, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = insertelement <8 x i8> %85, i8 %89, i32 3
  %91 = extractelement <8 x i32> %70, i32 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %66, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = insertelement <8 x i8> %90, i8 %94, i32 4
  %96 = extractelement <8 x i32> %70, i32 5
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %66, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = insertelement <8 x i8> %95, i8 %99, i32 5
  %101 = extractelement <8 x i32> %70, i32 6
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %66, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = insertelement <8 x i8> %100, i8 %104, i32 6
  %106 = extractelement <8 x i32> %70, i32 7
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %66, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = insertelement <8 x i8> %105, i8 %109, i32 7
  %111 = uitofp <8 x i8> %110 to <8 x float>
  %112 = fmul <8 x float> %111, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %113 = getelementptr inbounds i8, i8* %14, i64 16
  %114 = bitcast i8* %113 to i8**
  %115 = load i8*, i8** %114, align 8
  %116 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %6) #13
  %117 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %116, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %118 = fmul <8 x float> %117, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %119 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %118) #13
  %120 = extractelement <8 x i32> %119, i32 0
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds i8, i8* %115, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = insertelement <8 x i8> undef, i8 %123, i32 0
  %125 = extractelement <8 x i32> %119, i32 1
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* %115, i64 %126
  %128 = load i8, i8* %127, align 1
  %129 = insertelement <8 x i8> %124, i8 %128, i32 1
  %130 = extractelement <8 x i32> %119, i32 2
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %115, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = insertelement <8 x i8> %129, i8 %133, i32 2
  %135 = extractelement <8 x i32> %119, i32 3
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %115, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = insertelement <8 x i8> %134, i8 %138, i32 3
  %140 = extractelement <8 x i32> %119, i32 4
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %115, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = insertelement <8 x i8> %139, i8 %143, i32 4
  %145 = extractelement <8 x i32> %119, i32 5
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds i8, i8* %115, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = insertelement <8 x i8> %144, i8 %148, i32 5
  %150 = extractelement <8 x i32> %119, i32 6
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %115, i64 %151
  %153 = load i8, i8* %152, align 1
  %154 = insertelement <8 x i8> %149, i8 %153, i32 6
  %155 = extractelement <8 x i32> %119, i32 7
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds i8, i8* %115, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = insertelement <8 x i8> %154, i8 %158, i32 7
  %160 = uitofp <8 x i8> %159 to <8 x float>
  %161 = fmul <8 x float> %160, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %162 = getelementptr inbounds i8, i8* %14, i64 24
  %163 = bitcast i8* %162 to i8**
  %164 = load i8*, i8** %163, align 8
  %165 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %7) #13
  %166 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %165, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %167 = fmul <8 x float> %166, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %168 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %167) #13
  %169 = extractelement <8 x i32> %168, i32 0
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds i8, i8* %164, i64 %170
  %172 = load i8, i8* %171, align 1
  %173 = insertelement <8 x i8> undef, i8 %172, i32 0
  %174 = extractelement <8 x i32> %168, i32 1
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %164, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = insertelement <8 x i8> %173, i8 %177, i32 1
  %179 = extractelement <8 x i32> %168, i32 2
  %180 = zext i32 %179 to i64
  %181 = getelementptr inbounds i8, i8* %164, i64 %180
  %182 = load i8, i8* %181, align 1
  %183 = insertelement <8 x i8> %178, i8 %182, i32 2
  %184 = extractelement <8 x i32> %168, i32 3
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds i8, i8* %164, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = insertelement <8 x i8> %183, i8 %187, i32 3
  %189 = extractelement <8 x i32> %168, i32 4
  %190 = zext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %164, i64 %190
  %192 = load i8, i8* %191, align 1
  %193 = insertelement <8 x i8> %188, i8 %192, i32 4
  %194 = extractelement <8 x i32> %168, i32 5
  %195 = zext i32 %194 to i64
  %196 = getelementptr inbounds i8, i8* %164, i64 %195
  %197 = load i8, i8* %196, align 1
  %198 = insertelement <8 x i8> %193, i8 %197, i32 5
  %199 = extractelement <8 x i32> %168, i32 6
  %200 = zext i32 %199 to i64
  %201 = getelementptr inbounds i8, i8* %164, i64 %200
  %202 = load i8, i8* %201, align 1
  %203 = insertelement <8 x i8> %198, i8 %202, i32 6
  %204 = extractelement <8 x i32> %168, i32 7
  %205 = zext i32 %204 to i64
  %206 = getelementptr inbounds i8, i8* %164, i64 %205
  %207 = load i8, i8* %206, align 1
  %208 = insertelement <8 x i8> %203, i8 %207, i32 7
  %209 = uitofp <8 x i8> %208 to <8 x float>
  %210 = fmul <8 x float> %209, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %211 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %212 = extractvalue { i8*, i8** } %211, 0
  %213 = extractvalue { i8*, i8** } %211, 1
  %214 = bitcast i8* %212 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %214(i64 %0, i8** %213, i64 %2, i64 %3, <8 x float> %63, <8 x float> %112, <8 x float> %161, <8 x float> %210, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10rgb_to_hslEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %5, <8 x float> %6) #13
  %14 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %4, <8 x float> %13) #13
  %15 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %5, <8 x float> %6) #13
  %16 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %4, <8 x float> %15) #13
  %17 = fsub <8 x float> %14, %16
  %18 = fdiv <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %17
  %19 = fcmp oeq <8 x float> %14, %16
  %20 = fcmp oeq <8 x float> %14, %4
  %21 = fsub <8 x float> %5, %6
  %22 = fmul <8 x float> %21, %18
  %23 = fcmp olt <8 x float> %5, %6
  %24 = select <8 x i1> %23, <8 x float> <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>, <8 x float> zeroinitializer
  %25 = fadd <8 x float> %24, %22
  %26 = fcmp oeq <8 x float> %14, %5
  %27 = fsub <8 x float> %6, %4
  %28 = fmul <8 x float> %27, %18
  %29 = fadd <8 x float> %28, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %30 = fsub <8 x float> %4, %5
  %31 = fmul <8 x float> %30, %18
  %32 = fadd <8 x float> %31, <float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %33 = select <8 x i1> %26, <8 x float> %29, <8 x float> %32
  %34 = select <8 x i1> %20, <8 x float> %25, <8 x float> %33
  %35 = fmul <8 x float> %34, <float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000, float 0x3FC5555560000000>
  %36 = select <8 x i1> %19, <8 x float> zeroinitializer, <8 x float> %35
  %37 = fadd <8 x float> %14, %16
  %38 = fmul <8 x float> %37, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %39 = fcmp ogt <8 x float> %38, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %40 = fsub <8 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %14
  %41 = fsub <8 x float> %40, %16
  %42 = select <8 x i1> %39, <8 x float> %41, <8 x float> %37
  %43 = fdiv <8 x float> %17, %42
  %44 = select <8 x i1> %19, <8 x float> zeroinitializer, <8 x float> %43
  %45 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %46 = extractvalue { i8*, i8** } %45, 0
  %47 = extractvalue { i8*, i8** } %45, 1
  %48 = bitcast i8* %46 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %48(i64 %0, i8** %47, i64 %2, i64 %3, <8 x float> %36, <8 x float> %44, <8 x float> %38, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL10hsl_to_rgbEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = fmul <8 x float> %6, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %14 = fadd <8 x float> %13, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %15 = fsub <8 x float> zeroinitializer, %14
  %16 = bitcast <8 x float> %14 to <8 x i32>
  %17 = bitcast <8 x float> %15 to <8 x i32>
  %18 = and <8 x i32> %17, %16
  %19 = bitcast <8 x i32> %18 to <8 x float>
  %20 = fsub <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %19
  %21 = fmul <8 x float> %20, %5
  %22 = fadd <8 x float> %4, zeroinitializer
  %23 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %22, i32 1) #13
  %24 = fsub <8 x float> %22, %23
  %25 = fmul <8 x float> %24, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %26 = fadd <8 x float> %25, <float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00>
  %27 = fsub <8 x float> zeroinitializer, %26
  %28 = bitcast <8 x float> %26 to <8 x i32>
  %29 = bitcast <8 x float> %27 to <8 x i32>
  %30 = and <8 x i32> %29, %28
  %31 = bitcast <8 x i32> %30 to <8 x float>
  %32 = fadd <8 x float> %31, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %33 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %32) #13
  %34 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %33, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %35 = fadd <8 x float> %34, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %36 = fmul <8 x float> %21, %35
  %37 = fadd <8 x float> %36, %6
  %38 = fadd <8 x float> %4, <float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000, float 0x3FE5555560000000>
  %39 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %38, i32 1) #13
  %40 = fsub <8 x float> %38, %39
  %41 = fmul <8 x float> %40, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %42 = fadd <8 x float> %41, <float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00>
  %43 = fsub <8 x float> zeroinitializer, %42
  %44 = bitcast <8 x float> %42 to <8 x i32>
  %45 = bitcast <8 x float> %43 to <8 x i32>
  %46 = and <8 x i32> %45, %44
  %47 = bitcast <8 x i32> %46 to <8 x float>
  %48 = fadd <8 x float> %47, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %49 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %48) #13
  %50 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %49, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %51 = fadd <8 x float> %50, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %52 = fmul <8 x float> %21, %51
  %53 = fadd <8 x float> %52, %6
  %54 = fadd <8 x float> %4, <float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000, float 0x3FD5555560000000>
  %55 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %54, i32 1) #13
  %56 = fsub <8 x float> %54, %55
  %57 = fmul <8 x float> %56, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %58 = fadd <8 x float> %57, <float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00, float -3.000000e+00>
  %59 = fsub <8 x float> zeroinitializer, %58
  %60 = bitcast <8 x float> %58 to <8 x i32>
  %61 = bitcast <8 x float> %59 to <8 x i32>
  %62 = and <8 x i32> %61, %60
  %63 = bitcast <8 x i32> %62 to <8 x float>
  %64 = fadd <8 x float> %63, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %65 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %64) #13
  %66 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %65, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #13
  %67 = fadd <8 x float> %66, <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>
  %68 = fmul <8 x float> %21, %67
  %69 = fadd <8 x float> %68, %6
  %70 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %71 = extractvalue { i8*, i8** } %70, 0
  %72 = extractvalue { i8*, i8** } %70, 1
  %73 = bitcast i8* %71 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %73(i64 %0, i8** %72, i64 %2, i64 %3, <8 x float> %37, <8 x float> %53, <8 x float> %69, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL15gauss_a_to_rgbaEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %7, <8 x float> <float 0xC0022205A0000000, float 0xC0022205A0000000, float 0xC0022205A0000000, float 0xC0022205A0000000, float 0xC0022205A0000000, float 0xC0022205A0000000, float 0xC0022205A0000000, float 0xC0022205A0000000>, <8 x float> <float 0x40072F0240000000, float 0x40072F0240000000, float 0x40072F0240000000, float 0x40072F0240000000, float 0x40072F0240000000, float 0x40072F0240000000, float 0x40072F0240000000, float 0x40072F0240000000>) #13
  %14 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %7, <8 x float> %13, <8 x float> <float 0x3FCB528400000000, float 0x3FCB528400000000, float 0x3FCB528400000000, float 0x3FCB528400000000, float 0x3FCB528400000000, float 0x3FCB528400000000, float 0x3FCB528400000000, float 0x3FCB528400000000>) #13
  %15 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %7, <8 x float> %14, <8 x float> <float 0x3FC3D3A080000000, float 0x3FC3D3A080000000, float 0x3FC3D3A080000000, float 0x3FC3D3A080000000, float 0x3FC3D3A080000000, float 0x3FC3D3A080000000, float 0x3FC3D3A080000000, float 0x3FC3D3A080000000>) #13
  %16 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %7, <8 x float> %15, <8 x float> <float 0x3F34230000000000, float 0x3F34230000000000, float 0x3F34230000000000, float 0x3F34230000000000, float 0x3F34230000000000, float 0x3F34230000000000, float 0x3F34230000000000, float 0x3F34230000000000>) #13
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <8 x float> %16, <8 x float> %16, <8 x float> %16, <8 x float> %16, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL6embossEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = getelementptr inbounds i8, i8* %14, i64 16
  %26 = bitcast i8* %25 to i8**
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds i8, i8* %14, i64 24
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = sext i32 %30 to i64
  %32 = mul i64 %31, %3
  %33 = getelementptr inbounds i8, i8* %27, i64 %32
  %34 = getelementptr inbounds i8, i8* %33, i64 %2
  %35 = icmp ult i64 %0, 8
  tail call void @llvm.assume(i1 %35) #13
  switch i64 %0, label %80 [
    i64 0, label %73
    i64 7, label %36
    i64 6, label %40
    i64 5, label %45
    i64 4, label %50
    i64 3, label %56
    i64 2, label %60
    i64 1, label %66
  ], !prof !99

36:                                               ; preds = %12
  %37 = getelementptr inbounds i8, i8* %24, i64 6
  %38 = load i8, i8* %37, align 1
  %39 = insertelement <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %38, i32 6
  br label %40

40:                                               ; preds = %36, %12
  %41 = phi <8 x i8> [ %39, %36 ], [ zeroinitializer, %12 ]
  %42 = getelementptr inbounds i8, i8* %24, i64 5
  %43 = load i8, i8* %42, align 1
  %44 = insertelement <8 x i8> %41, i8 %43, i32 5
  br label %45

45:                                               ; preds = %40, %12
  %46 = phi <8 x i8> [ %44, %40 ], [ zeroinitializer, %12 ]
  %47 = getelementptr inbounds i8, i8* %24, i64 4
  %48 = load i8, i8* %47, align 1
  %49 = insertelement <8 x i8> %46, i8 %48, i32 4
  br label %50

50:                                               ; preds = %45, %12
  %51 = phi <8 x i8> [ %49, %45 ], [ zeroinitializer, %12 ]
  %52 = bitcast i8* %24 to <4 x i8>*
  %53 = load <4 x i8>, <4 x i8>* %52, align 1
  %54 = shufflevector <4 x i8> %53, <4 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %55 = shufflevector <8 x i8> %54, <8 x i8> %51, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %81

56:                                               ; preds = %12
  %57 = getelementptr inbounds i8, i8* %24, i64 2
  %58 = load i8, i8* %57, align 1
  %59 = insertelement <8 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %58, i32 2
  br label %60

60:                                               ; preds = %56, %12
  %61 = phi <8 x i8> [ %59, %56 ], [ zeroinitializer, %12 ]
  %62 = bitcast i8* %24 to <2 x i8>*
  %63 = load <2 x i8>, <2 x i8>* %62, align 1
  %64 = shufflevector <2 x i8> %63, <2 x i8> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %65 = shufflevector <8 x i8> %64, <8 x i8> %61, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %81

66:                                               ; preds = %12
  %67 = load i8, i8* %24, align 1
  %68 = insertelement <8 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %67, i32 0
  %69 = uitofp <8 x i8> %68 to <8 x float>
  %70 = fmul <8 x float> %69, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %71 = load i8, i8* %34, align 1
  %72 = insertelement <8 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %71, i32 0
  br label %116

73:                                               ; preds = %12
  %74 = bitcast i8* %24 to <8 x i8>*
  %75 = load <8 x i8>, <8 x i8>* %74, align 1
  %76 = uitofp <8 x i8> %75 to <8 x float>
  %77 = fmul <8 x float> %76, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %78 = bitcast i8* %34 to <8 x i8>*
  %79 = load <8 x i8>, <8 x i8>* %78, align 1
  br label %116

80:                                               ; preds = %12
  unreachable

81:                                               ; preds = %60, %50
  %82 = phi <8 x i8> [ %65, %60 ], [ %55, %50 ]
  %83 = uitofp <8 x i8> %82 to <8 x float>
  %84 = fmul <8 x float> %83, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  switch i64 %0, label %115 [
    i64 2, label %109
    i64 7, label %85
    i64 6, label %89
    i64 5, label %94
    i64 4, label %99
    i64 3, label %105
  ], !prof !101

85:                                               ; preds = %81
  %86 = getelementptr inbounds i8, i8* %34, i64 6
  %87 = load i8, i8* %86, align 1
  %88 = insertelement <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %87, i32 6
  br label %89

89:                                               ; preds = %85, %81
  %90 = phi <8 x i8> [ %88, %85 ], [ zeroinitializer, %81 ]
  %91 = getelementptr inbounds i8, i8* %34, i64 5
  %92 = load i8, i8* %91, align 1
  %93 = insertelement <8 x i8> %90, i8 %92, i32 5
  br label %94

94:                                               ; preds = %89, %81
  %95 = phi <8 x i8> [ %93, %89 ], [ zeroinitializer, %81 ]
  %96 = getelementptr inbounds i8, i8* %34, i64 4
  %97 = load i8, i8* %96, align 1
  %98 = insertelement <8 x i8> %95, i8 %97, i32 4
  br label %99

99:                                               ; preds = %94, %81
  %100 = phi <8 x i8> [ %98, %94 ], [ zeroinitializer, %81 ]
  %101 = bitcast i8* %34 to <4 x i8>*
  %102 = load <4 x i8>, <4 x i8>* %101, align 1
  %103 = shufflevector <4 x i8> %102, <4 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = shufflevector <8 x i8> %103, <8 x i8> %100, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
  br label %116

105:                                              ; preds = %81
  %106 = getelementptr inbounds i8, i8* %34, i64 2
  %107 = load i8, i8* %106, align 1
  %108 = insertelement <8 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %107, i32 2
  br label %109

109:                                              ; preds = %105, %81
  %110 = phi <8 x i8> [ %108, %105 ], [ zeroinitializer, %81 ]
  %111 = bitcast i8* %34 to <2 x i8>*
  %112 = load <2 x i8>, <2 x i8>* %111, align 1
  %113 = shufflevector <2 x i8> %112, <2 x i8> undef, <8 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %114 = shufflevector <8 x i8> %113, <8 x i8> %110, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %116

115:                                              ; preds = %81
  unreachable

116:                                              ; preds = %66, %73, %99, %109
  %117 = phi <8 x float> [ %77, %73 ], [ %70, %66 ], [ %84, %109 ], [ %84, %99 ]
  %118 = phi <8 x i8> [ %79, %73 ], [ %72, %66 ], [ %114, %109 ], [ %104, %99 ]
  %119 = uitofp <8 x i8> %118 to <8 x float>
  %120 = fmul <8 x float> %119, <float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000, float 0x3F70101020000000>
  %121 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %4, <8 x float> %117, <8 x float> %120) #13
  %122 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %5, <8 x float> %117, <8 x float> %120) #13
  %123 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %6, <8 x float> %117, <8 x float> %120) #13
  %124 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %125 = extractvalue { i8*, i8** } %124, 0
  %126 = extractvalue { i8*, i8** } %124, 1
  %127 = bitcast i8* %125 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %127(i64 %0, i8** %126, i64 %2, i64 %3, <8 x float> %121, <8 x float> %122, <8 x float> %123, <8 x float> %7, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL7swizzleEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = ptrtoint i8* %14 to i64
  %17 = trunc i64 %16 to i32
  %18 = shl i32 %17, 24
  %19 = ashr exact i32 %18, 24
  switch i32 %19, label %25 [
    i32 49, label %24
    i32 103, label %20
    i32 98, label %21
    i32 97, label %22
    i32 48, label %23
  ]

20:                                               ; preds = %12
  br label %25

21:                                               ; preds = %12
  br label %25

22:                                               ; preds = %12
  br label %25

23:                                               ; preds = %12
  br label %25

24:                                               ; preds = %12
  br label %25

25:                                               ; preds = %24, %23, %22, %21, %20, %12
  %26 = phi <8 x float> [ %4, %12 ], [ zeroinitializer, %23 ], [ %7, %22 ], [ %6, %21 ], [ %5, %20 ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %24 ]
  %27 = shl i32 %17, 16
  %28 = ashr i32 %27, 24
  switch i32 %28, label %34 [
    i32 114, label %33
    i32 49, label %29
    i32 98, label %32
    i32 97, label %31
    i32 48, label %30
  ]

29:                                               ; preds = %25
  br label %34

30:                                               ; preds = %25
  br label %34

31:                                               ; preds = %25
  br label %34

32:                                               ; preds = %25
  br label %34

33:                                               ; preds = %25
  br label %34

34:                                               ; preds = %33, %32, %31, %30, %29, %25
  %35 = phi <8 x float> [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %29 ], [ zeroinitializer, %30 ], [ %7, %31 ], [ %6, %32 ], [ %4, %33 ], [ %5, %25 ]
  %36 = shl i32 %17, 8
  %37 = ashr i32 %36, 24
  switch i32 %37, label %43 [
    i32 114, label %42
    i32 103, label %41
    i32 49, label %38
    i32 97, label %40
    i32 48, label %39
  ]

38:                                               ; preds = %34
  br label %43

39:                                               ; preds = %34
  br label %43

40:                                               ; preds = %34
  br label %43

41:                                               ; preds = %34
  br label %43

42:                                               ; preds = %34
  br label %43

43:                                               ; preds = %42, %41, %40, %39, %38, %34
  %44 = phi <8 x float> [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %38 ], [ zeroinitializer, %39 ], [ %7, %40 ], [ %5, %41 ], [ %4, %42 ], [ %6, %34 ]
  %45 = ashr i32 %17, 24
  switch i32 %45, label %51 [
    i32 114, label %50
    i32 103, label %49
    i32 98, label %48
    i32 49, label %46
    i32 48, label %47
  ]

46:                                               ; preds = %43
  br label %51

47:                                               ; preds = %43
  br label %51

48:                                               ; preds = %43
  br label %51

49:                                               ; preds = %43
  br label %51

50:                                               ; preds = %43
  br label %51

51:                                               ; preds = %43, %46, %47, %48, %49, %50
  %52 = phi <8 x float> [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %46 ], [ zeroinitializer, %47 ], [ %6, %48 ], [ %5, %49 ], [ %4, %50 ], [ %7, %43 ]
  %53 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %54 = extractvalue { i8*, i8** } %53, 0
  %55 = extractvalue { i8*, i8** } %53, 1
  %56 = bitcast i8* %54 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  tail call void %56(i64 %0, i8** %55, i64 %2, i64 %3, <8 x float> %26, <8 x float> %35, <8 x float> %44, <8 x float> %52, <8 x float> %8, <8 x float> %9, <8 x float> %10, <8 x float> %11) #13
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN3hswL11just_returnEmPPvmmDv8_fS2_S2_S2_S2_S2_S2_S2_(i64, i8** nocapture, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>) #6 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hswL14start_pipelineEmmmmPPv(i64, i64, i64, i64, i8**) #4 {
  %6 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %4) #10, !srcloc !98
  %7 = extractvalue { i8*, i8** } %6, 0
  %8 = extractvalue { i8*, i8** } %6, 1
  %9 = bitcast i8* %7 to void (i64, i8**, i64, i64, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>, <8 x float>)*
  %10 = icmp ult i64 %1, %3
  br i1 %10, label %11, label %29

11:                                               ; preds = %5
  %12 = add i64 %0, 8
  %13 = icmp ugt i64 %12, %2
  br label %14

14:                                               ; preds = %26, %11
  %15 = phi i64 [ %1, %11 ], [ %27, %26 ]
  br i1 %13, label %21, label %16

16:                                               ; preds = %14, %16
  %17 = phi i64 [ %19, %16 ], [ %12, %14 ]
  %18 = phi i64 [ %17, %16 ], [ %0, %14 ]
  tail call void %9(i64 0, i8** %8, i64 %18, i64 %15, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer) #13
  %19 = add i64 %17, 8
  %20 = icmp ugt i64 %19, %2
  br i1 %20, label %21, label %16

21:                                               ; preds = %16, %14
  %22 = phi i64 [ %0, %14 ], [ %17, %16 ]
  %23 = sub i64 %2, %22
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %21
  tail call void %9(i64 %23, i8** %8, i64 %22, i64 %15, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer, <8 x float> zeroinitializer) #13
  br label %26

26:                                               ; preds = %21, %25
  %27 = add nuw i64 %15, 1
  %28 = icmp eq i64 %27, %3
  br i1 %28, label %29, label %14

29:                                               ; preds = %26, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL12move_src_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL12move_dst_srcEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7clamp_0EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7clamp_1EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7clamp_aEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = icmp ult <16 x i16> %4, %7
  %14 = select <16 x i1> %13, <16 x i16> %4, <16 x i16> %7
  %15 = icmp ult <16 x i16> %5, %7
  %16 = select <16 x i1> %15, <16 x i16> %5, <16 x i16> %7
  %17 = icmp ult <16 x i16> %6, %7
  %18 = select <16 x i1> %17, <16 x i16> %6, <16 x i16> %7
  %19 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %20 = extractvalue { i8*, i8** } %19, 0
  %21 = extractvalue { i8*, i8** } %19, 1
  %22 = bitcast i8* %20 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %22(i64 %0, i8** %21, i64 %2, i64 %3, <16 x i16> %14, <16 x i16> %16, <16 x i16> %18, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL11clamp_gamutEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL6premulEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = mul <16 x i16> %7, %4
  %14 = add <16 x i16> %13, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %15 = lshr <16 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = mul <16 x i16> %7, %5
  %17 = add <16 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %18 = lshr <16 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = mul <16 x i16> %7, %6
  %20 = add <16 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %21 = lshr <16 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %23 = extractvalue { i8*, i8** } %22, 0
  %24 = extractvalue { i8*, i8** } %22, 1
  %25 = bitcast i8* %23 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %25(i64 %0, i8** %24, i64 %2, i64 %3, <16 x i16> %15, <16 x i16> %18, <16 x i16> %21, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL10premul_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = mul <16 x i16> %11, %8
  %14 = add <16 x i16> %13, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %15 = lshr <16 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = mul <16 x i16> %11, %9
  %17 = add <16 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %18 = lshr <16 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = mul <16 x i16> %11, %10
  %20 = add <16 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %21 = lshr <16 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %23 = extractvalue { i8*, i8** } %22, 0
  %24 = extractvalue { i8*, i8** } %22, 1
  %25 = bitcast i8* %23 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %25(i64 %0, i8** %24, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %15, <16 x i16> %18, <16 x i16> %21, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL12force_opaqueEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL16force_opaque_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7set_rgbEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = fmul float %17, 2.550000e+02
  %19 = fadd float %18, 5.000000e-01
  %20 = fptoui float %19 to i16
  %21 = insertelement <16 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <16 x i16> %21, <16 x i16> undef, <16 x i32> zeroinitializer
  %23 = getelementptr inbounds i8, i8* %14, i64 4
  %24 = bitcast i8* %23 to float*
  %25 = load float, float* %24, align 4
  %26 = fmul float %25, 2.550000e+02
  %27 = fadd float %26, 5.000000e-01
  %28 = fptoui float %27 to i16
  %29 = insertelement <16 x i16> undef, i16 %28, i32 0
  %30 = shufflevector <16 x i16> %29, <16 x i16> undef, <16 x i32> zeroinitializer
  %31 = getelementptr inbounds i8, i8* %14, i64 8
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4
  %34 = fmul float %33, 2.550000e+02
  %35 = fadd float %34, 5.000000e-01
  %36 = fptoui float %35 to i16
  %37 = insertelement <16 x i16> undef, i16 %36, i32 0
  %38 = shufflevector <16 x i16> %37, <16 x i16> undef, <16 x i32> zeroinitializer
  %39 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %40 = extractvalue { i8*, i8** } %39, 0
  %41 = extractvalue { i8*, i8** } %39, 1
  %42 = bitcast i8* %40 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %42(i64 %0, i8** %41, i64 %2, i64 %3, <16 x i16> %22, <16 x i16> %30, <16 x i16> %38, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7swap_rbEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <16 x i16> %6, <16 x i16> %5, <16 x i16> %4, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL11swap_rb_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %10, <16 x i16> %9, <16 x i16> %8, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL11black_colorEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL11white_colorEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL13uniform_colorEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 16
  %17 = bitcast i8* %16 to i16*
  %18 = load i16, i16* %17, align 4
  %19 = insertelement <16 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <16 x i16> %19, <16 x i16> undef, <16 x i32> zeroinitializer
  %21 = getelementptr inbounds i8, i8* %14, i64 18
  %22 = bitcast i8* %21 to i16*
  %23 = load i16, i16* %22, align 2
  %24 = insertelement <16 x i16> undef, i16 %23, i32 0
  %25 = shufflevector <16 x i16> %24, <16 x i16> undef, <16 x i32> zeroinitializer
  %26 = getelementptr inbounds i8, i8* %14, i64 20
  %27 = bitcast i8* %26 to i16*
  %28 = load i16, i16* %27, align 4
  %29 = insertelement <16 x i16> undef, i16 %28, i32 0
  %30 = shufflevector <16 x i16> %29, <16 x i16> undef, <16 x i32> zeroinitializer
  %31 = getelementptr inbounds i8, i8* %14, i64 22
  %32 = bitcast i8* %31 to i16*
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <16 x i16> undef, i16 %33, i32 0
  %35 = shufflevector <16 x i16> %34, <16 x i16> undef, <16 x i32> zeroinitializer
  %36 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %37 = extractvalue { i8*, i8** } %36, 0
  %38 = extractvalue { i8*, i8** } %36, 1
  %39 = bitcast i8* %37 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %39(i64 %0, i8** %38, i64 %2, i64 %3, <16 x i16> %20, <16 x i16> %25, <16 x i16> %30, <16 x i16> %35, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL17uniform_color_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = getelementptr inbounds i8, i8* %14, i64 16
  %17 = bitcast i8* %16 to i16*
  %18 = load i16, i16* %17, align 4
  %19 = insertelement <16 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <16 x i16> %19, <16 x i16> undef, <16 x i32> zeroinitializer
  %21 = getelementptr inbounds i8, i8* %14, i64 18
  %22 = bitcast i8* %21 to i16*
  %23 = load i16, i16* %22, align 2
  %24 = insertelement <16 x i16> undef, i16 %23, i32 0
  %25 = shufflevector <16 x i16> %24, <16 x i16> undef, <16 x i32> zeroinitializer
  %26 = getelementptr inbounds i8, i8* %14, i64 20
  %27 = bitcast i8* %26 to i16*
  %28 = load i16, i16* %27, align 4
  %29 = insertelement <16 x i16> undef, i16 %28, i32 0
  %30 = shufflevector <16 x i16> %29, <16 x i16> undef, <16 x i32> zeroinitializer
  %31 = getelementptr inbounds i8, i8* %14, i64 22
  %32 = bitcast i8* %31 to i16*
  %33 = load i16, i16* %32, align 2
  %34 = insertelement <16 x i16> undef, i16 %33, i32 0
  %35 = shufflevector <16 x i16> %34, <16 x i16> undef, <16 x i32> zeroinitializer
  %36 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %37 = extractvalue { i8*, i8** } %36, 0
  %38 = extractvalue { i8*, i8** } %36, 1
  %39 = bitcast i8* %37 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %39(i64 %0, i8** %38, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %20, <16 x i16> %25, <16 x i16> %30, <16 x i16> %35) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL11seed_shaderEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = trunc i64 %2 to i32
  %14 = insertelement <16 x i32> undef, i32 %13, i32 0
  %15 = shufflevector <16 x i32> %14, <16 x i32> undef, <16 x i32> zeroinitializer
  %16 = sitofp <16 x i32> %15 to <16 x float>
  %17 = load <16 x float>, <16 x float>* bitcast ([16 x float]* @_ZZN3hsw4lowpL13seed_shader_kEN3Ctx4NoneEmmmRDv16_fS4_E4iota to <16 x float>*), align 64
  %18 = fadd <16 x float> %17, %16
  %19 = trunc i64 %3 to i32
  %20 = insertelement <16 x i32> undef, i32 %19, i32 0
  %21 = shufflevector <16 x i32> %20, <16 x i32> undef, <16 x i32> zeroinitializer
  %22 = sitofp <16 x i32> %21 to <16 x float>
  %23 = fadd <16 x float> %22, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %24 = shufflevector <16 x float> %18, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %25 = bitcast <8 x float> %24 to <16 x i16>
  %26 = shufflevector <16 x float> %18, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27 = bitcast <8 x float> %26 to <16 x i16>
  %28 = shufflevector <16 x float> %23, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %29 = bitcast <8 x float> %28 to <16 x i16>
  %30 = shufflevector <16 x float> %23, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31 = bitcast <8 x float> %30 to <16 x i16>
  %32 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %33 = extractvalue { i8*, i8** } %32, 0
  %34 = extractvalue { i8*, i8** } %32, 1
  %35 = bitcast i8* %33 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %35(i64 %0, i8** %34, i64 %2, i64 %3, <16 x i16> %25, <16 x i16> %27, <16 x i16> %29, <16 x i16> %31, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7load_a8EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i8* %24 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i8, i8* %24, i64 14
  %31 = load i8, i8* %30, align 1
  %32 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i8> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i8, i8* %24, i64 13
  %36 = load i8, i8* %35, align 1
  %37 = insertelement <16 x i8> %34, i8 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i8> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i8, i8* %24, i64 12
  %41 = load i8, i8* %40, align 1
  %42 = insertelement <16 x i8> %39, i8 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i8> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i8* %24 to <12 x i8>*
  %46 = load <12 x i8>, <12 x i8>* %45, align 1
  %47 = shufflevector <12 x i8> %46, <12 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i8> %47, <16 x i8> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i8, i8* %24, i64 10
  %51 = load i8, i8* %50, align 1
  %52 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i8> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i8, i8* %24, i64 9
  %56 = load i8, i8* %55, align 1
  %57 = insertelement <16 x i8> %54, i8 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i8> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i8, i8* %24, i64 8
  %61 = load i8, i8* %60, align 1
  %62 = insertelement <16 x i8> %59, i8 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i8> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i8* %24 to <8 x i8>*
  %66 = load <8 x i8>, <8 x i8>* %65, align 1
  %67 = shufflevector <8 x i8> %66, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i8> %67, <16 x i8> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i8, i8* %24, i64 6
  %71 = load i8, i8* %70, align 1
  %72 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i8> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i8, i8* %24, i64 5
  %76 = load i8, i8* %75, align 1
  %77 = insertelement <16 x i8> %74, i8 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i8> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i8, i8* %24, i64 4
  %81 = load i8, i8* %80, align 1
  %82 = insertelement <16 x i8> %79, i8 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i8> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i8* %24 to <4 x i8>*
  %86 = load <4 x i8>, <4 x i8>* %85, align 1
  %87 = shufflevector <4 x i8> %86, <4 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i8> %87, <16 x i8> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i8, i8* %24, i64 2
  %91 = load i8, i8* %90, align 1
  %92 = insertelement <16 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i8> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i8* %24 to <2 x i8>*
  %96 = load <2 x i8>, <2 x i8>* %95, align 1
  %97 = shufflevector <2 x i8> %96, <2 x i8> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i8> %97, <16 x i8> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i8, i8* %24, align 1
  %101 = insertelement <16 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %26, %43, %63, %83, %93, %99
  %104 = phi <16 x i8> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = zext <16 x i8> %104 to <16 x i16>
  %106 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %107 = extractvalue { i8*, i8** } %106, 0
  %108 = extractvalue { i8*, i8** } %106, 1
  %109 = bitcast i8* %107 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %109(i64 %0, i8** %108, i64 %2, i64 %3, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> %105, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL11load_a8_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i8* %24 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i8, i8* %24, i64 14
  %31 = load i8, i8* %30, align 1
  %32 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i8> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i8, i8* %24, i64 13
  %36 = load i8, i8* %35, align 1
  %37 = insertelement <16 x i8> %34, i8 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i8> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i8, i8* %24, i64 12
  %41 = load i8, i8* %40, align 1
  %42 = insertelement <16 x i8> %39, i8 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i8> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i8* %24 to <12 x i8>*
  %46 = load <12 x i8>, <12 x i8>* %45, align 1
  %47 = shufflevector <12 x i8> %46, <12 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i8> %47, <16 x i8> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i8, i8* %24, i64 10
  %51 = load i8, i8* %50, align 1
  %52 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i8> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i8, i8* %24, i64 9
  %56 = load i8, i8* %55, align 1
  %57 = insertelement <16 x i8> %54, i8 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i8> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i8, i8* %24, i64 8
  %61 = load i8, i8* %60, align 1
  %62 = insertelement <16 x i8> %59, i8 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i8> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i8* %24 to <8 x i8>*
  %66 = load <8 x i8>, <8 x i8>* %65, align 1
  %67 = shufflevector <8 x i8> %66, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i8> %67, <16 x i8> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i8, i8* %24, i64 6
  %71 = load i8, i8* %70, align 1
  %72 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i8> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i8, i8* %24, i64 5
  %76 = load i8, i8* %75, align 1
  %77 = insertelement <16 x i8> %74, i8 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i8> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i8, i8* %24, i64 4
  %81 = load i8, i8* %80, align 1
  %82 = insertelement <16 x i8> %79, i8 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i8> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i8* %24 to <4 x i8>*
  %86 = load <4 x i8>, <4 x i8>* %85, align 1
  %87 = shufflevector <4 x i8> %86, <4 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i8> %87, <16 x i8> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i8, i8* %24, i64 2
  %91 = load i8, i8* %90, align 1
  %92 = insertelement <16 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i8> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i8* %24 to <2 x i8>*
  %96 = load <2 x i8>, <2 x i8>* %95, align 1
  %97 = shufflevector <2 x i8> %96, <2 x i8> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i8> %97, <16 x i8> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i8, i8* %24, align 1
  %101 = insertelement <16 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %26, %43, %63, %83, %93, %99
  %104 = phi <16 x i8> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = zext <16 x i8> %104 to <16 x i16>
  %106 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %107 = extractvalue { i8*, i8** } %106, 0
  %108 = extractvalue { i8*, i8** } %106, 1
  %109 = bitcast i8* %107 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %109(i64 %0, i8** %108, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> %105) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL8store_a8EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = trunc <16 x i16> %7 to <16 x i8>
  %26 = and i64 %0, 15
  switch i64 %26, label %73 [
    i64 0, label %27
    i64 15, label %29
    i64 14, label %32
    i64 13, label %35
    i64 12, label %38
    i64 11, label %41
    i64 10, label %44
    i64 9, label %47
    i64 8, label %50
    i64 7, label %53
    i64 6, label %56
    i64 5, label %59
    i64 4, label %62
    i64 3, label %65
    i64 2, label %68
    i64 1, label %71
  ]

27:                                               ; preds = %12
  %28 = bitcast i8* %24 to <16 x i8>*
  store <16 x i8> %25, <16 x i8>* %28, align 1
  br label %74

29:                                               ; preds = %12
  %30 = extractelement <16 x i8> %25, i32 14
  %31 = getelementptr inbounds i8, i8* %24, i64 14
  store i8 %30, i8* %31, align 1
  br label %32

32:                                               ; preds = %29, %12
  %33 = extractelement <16 x i8> %25, i32 13
  %34 = getelementptr inbounds i8, i8* %24, i64 13
  store i8 %33, i8* %34, align 1
  br label %35

35:                                               ; preds = %32, %12
  %36 = extractelement <16 x i8> %25, i32 12
  %37 = getelementptr inbounds i8, i8* %24, i64 12
  store i8 %36, i8* %37, align 1
  br label %38

38:                                               ; preds = %35, %12
  %39 = bitcast i8* %24 to <12 x i8>*
  %40 = shufflevector <16 x i8> %25, <16 x i8> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  store <12 x i8> %40, <12 x i8>* %39, align 1
  br label %74

41:                                               ; preds = %12
  %42 = extractelement <16 x i8> %25, i32 10
  %43 = getelementptr inbounds i8, i8* %24, i64 10
  store i8 %42, i8* %43, align 1
  br label %44

44:                                               ; preds = %41, %12
  %45 = extractelement <16 x i8> %25, i32 9
  %46 = getelementptr inbounds i8, i8* %24, i64 9
  store i8 %45, i8* %46, align 1
  br label %47

47:                                               ; preds = %44, %12
  %48 = extractelement <16 x i8> %25, i32 8
  %49 = getelementptr inbounds i8, i8* %24, i64 8
  store i8 %48, i8* %49, align 1
  br label %50

50:                                               ; preds = %47, %12
  %51 = bitcast i8* %24 to <8 x i8>*
  %52 = shufflevector <16 x i8> %25, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i8> %52, <8 x i8>* %51, align 1
  br label %74

53:                                               ; preds = %12
  %54 = extractelement <16 x i8> %25, i32 6
  %55 = getelementptr inbounds i8, i8* %24, i64 6
  store i8 %54, i8* %55, align 1
  br label %56

56:                                               ; preds = %53, %12
  %57 = extractelement <16 x i8> %25, i32 5
  %58 = getelementptr inbounds i8, i8* %24, i64 5
  store i8 %57, i8* %58, align 1
  br label %59

59:                                               ; preds = %56, %12
  %60 = extractelement <16 x i8> %25, i32 4
  %61 = getelementptr inbounds i8, i8* %24, i64 4
  store i8 %60, i8* %61, align 1
  br label %62

62:                                               ; preds = %59, %12
  %63 = bitcast i8* %24 to <4 x i8>*
  %64 = shufflevector <16 x i8> %25, <16 x i8> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i8> %64, <4 x i8>* %63, align 1
  br label %74

65:                                               ; preds = %12
  %66 = extractelement <16 x i8> %25, i32 2
  %67 = getelementptr inbounds i8, i8* %24, i64 2
  store i8 %66, i8* %67, align 1
  br label %68

68:                                               ; preds = %65, %12
  %69 = bitcast i8* %24 to <2 x i8>*
  %70 = shufflevector <16 x i8> %25, <16 x i8> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i8> %70, <2 x i8>* %69, align 1
  br label %74

71:                                               ; preds = %12
  %72 = extractelement <16 x i8> %25, i32 0
  store i8 %72, i8* %24, align 1
  br label %74

73:                                               ; preds = %12
  unreachable

74:                                               ; preds = %27, %38, %50, %62, %68, %71
  %75 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %76 = extractvalue { i8*, i8** } %75, 0
  %77 = extractvalue { i8*, i8** } %75, 1
  %78 = bitcast i8* %76 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %78(i64 %0, i8** %77, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL9gather_a8EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = bitcast <16 x i16> %6 to <8 x float>
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <16 x i16> %7 to <8 x float>
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <16 x float> %19, <16 x float> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = getelementptr inbounds i8, i8* %24, i64 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, -1
  %30 = bitcast i32 %29 to float
  %31 = insertelement <16 x float> undef, float %30, i32 0
  %32 = shufflevector <16 x float> %31, <16 x float> undef, <16 x i32> zeroinitializer
  %33 = getelementptr inbounds i8, i8* %24, i64 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = bitcast i32 %36 to float
  %38 = insertelement <16 x float> undef, float %37, i32 0
  %39 = shufflevector <16 x float> %38, <16 x float> undef, <16 x i32> zeroinitializer
  %40 = fcmp ogt <16 x float> %17, zeroinitializer
  %41 = select <16 x i1> %40, <16 x float> %17, <16 x float> zeroinitializer
  %42 = fcmp olt <16 x float> %41, %32
  %43 = select <16 x i1> %42, <16 x float> %41, <16 x float> %32
  %44 = fcmp ogt <16 x float> %22, zeroinitializer
  %45 = select <16 x i1> %44, <16 x float> %22, <16 x float> zeroinitializer
  %46 = fcmp olt <16 x float> %45, %39
  %47 = select <16 x i1> %46, <16 x float> %45, <16 x float> %39
  %48 = bitcast i8* %24 to i8**
  %49 = load i8*, i8** %48, align 8
  %50 = fptosi <16 x float> %47 to <16 x i32>
  %51 = getelementptr inbounds i8, i8* %24, i64 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 8
  %54 = insertelement <16 x i32> undef, i32 %53, i32 0
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <16 x i32> zeroinitializer
  %56 = mul <16 x i32> %55, %50
  %57 = fptosi <16 x float> %43 to <16 x i32>
  %58 = add <16 x i32> %56, %57
  %59 = extractelement <16 x i32> %58, i32 0
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %49, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = insertelement <16 x i8> undef, i8 %62, i32 0
  %64 = extractelement <16 x i32> %58, i32 1
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %49, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = insertelement <16 x i8> %63, i8 %67, i32 1
  %69 = extractelement <16 x i32> %58, i32 2
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %49, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = insertelement <16 x i8> %68, i8 %72, i32 2
  %74 = extractelement <16 x i32> %58, i32 3
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %49, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = insertelement <16 x i8> %73, i8 %77, i32 3
  %79 = extractelement <16 x i32> %58, i32 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %49, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = insertelement <16 x i8> %78, i8 %82, i32 4
  %84 = extractelement <16 x i32> %58, i32 5
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %49, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = insertelement <16 x i8> %83, i8 %87, i32 5
  %89 = extractelement <16 x i32> %58, i32 6
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %49, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = insertelement <16 x i8> %88, i8 %92, i32 6
  %94 = extractelement <16 x i32> %58, i32 7
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %49, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = insertelement <16 x i8> %93, i8 %97, i32 7
  %99 = extractelement <16 x i32> %58, i32 8
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %49, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = insertelement <16 x i8> %98, i8 %102, i32 8
  %104 = extractelement <16 x i32> %58, i32 9
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %49, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = insertelement <16 x i8> %103, i8 %107, i32 9
  %109 = extractelement <16 x i32> %58, i32 10
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %49, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = insertelement <16 x i8> %108, i8 %112, i32 10
  %114 = extractelement <16 x i32> %58, i32 11
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %49, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = insertelement <16 x i8> %113, i8 %117, i32 11
  %119 = extractelement <16 x i32> %58, i32 12
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %49, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = insertelement <16 x i8> %118, i8 %122, i32 12
  %124 = extractelement <16 x i32> %58, i32 13
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %49, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = insertelement <16 x i8> %123, i8 %127, i32 13
  %129 = extractelement <16 x i32> %58, i32 14
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds i8, i8* %49, i64 %130
  %132 = load i8, i8* %131, align 1
  %133 = insertelement <16 x i8> %128, i8 %132, i32 14
  %134 = extractelement <16 x i32> %58, i32 15
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds i8, i8* %49, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = insertelement <16 x i8> %133, i8 %137, i32 15
  %139 = zext <16 x i8> %138 to <16 x i16>
  %140 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #10, !srcloc !98
  %141 = extractvalue { i8*, i8** } %140, 0
  %142 = extractvalue { i8*, i8** } %140, 1
  %143 = bitcast i8* %141 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %143(i64 %0, i8** %142, i64 %2, i64 %3, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> %139, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL8load_565EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 2
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 14
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 13
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <16 x i16> %34, i16 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 12
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <16 x i16> %39, i16 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <12 x i16>*
  %46 = load <12 x i16>, <12 x i16>* %45, align 2
  %47 = shufflevector <12 x i16> %46, <12 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i16> %47, <16 x i16> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 10
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i16, i16* %24, i64 9
  %56 = load i16, i16* %55, align 2
  %57 = insertelement <16 x i16> %54, i16 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i16> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i16, i16* %24, i64 8
  %61 = load i16, i16* %60, align 2
  %62 = insertelement <16 x i16> %59, i16 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i16> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i16* %24 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2
  %67 = shufflevector <8 x i16> %66, <8 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i16> %67, <16 x i16> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i16, i16* %24, i64 6
  %71 = load i16, i16* %70, align 2
  %72 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i16> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i16, i16* %24, i64 5
  %76 = load i16, i16* %75, align 2
  %77 = insertelement <16 x i16> %74, i16 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i16> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i16, i16* %24, i64 4
  %81 = load i16, i16* %80, align 2
  %82 = insertelement <16 x i16> %79, i16 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i16> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i16* %24 to <4 x i16>*
  %86 = load <4 x i16>, <4 x i16>* %85, align 2
  %87 = shufflevector <4 x i16> %86, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i16> %87, <16 x i16> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i16, i16* %24, i64 2
  %91 = load i16, i16* %90, align 2
  %92 = insertelement <16 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i16> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i16* %24 to <2 x i16>*
  %96 = load <2 x i16>, <2 x i16>* %95, align 2
  %97 = shufflevector <2 x i16> %96, <2 x i16> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i16> %97, <16 x i16> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i16, i16* %24, align 2
  %101 = insertelement <16 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %26, %43, %63, %83, %93, %99
  %104 = phi <16 x i16> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = lshr <16 x i16> %104, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %106 = lshr <16 x i16> %104, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %107 = and <16 x i16> %106, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %108 = and <16 x i16> %104, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %109 = shl nuw nsw <16 x i16> %105, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %110 = lshr <16 x i16> %104, <i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13>
  %111 = or <16 x i16> %109, %110
  %112 = shl nuw nsw <16 x i16> %107, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %113 = lshr <16 x i16> %107, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %114 = or <16 x i16> %112, %113
  %115 = shl nuw nsw <16 x i16> %108, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %116 = lshr <16 x i16> %108, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %117 = or <16 x i16> %115, %116
  %118 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %119 = extractvalue { i8*, i8** } %118, 0
  %120 = extractvalue { i8*, i8** } %118, 1
  %121 = bitcast i8* %119 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %121(i64 %0, i8** %120, i64 %2, i64 %3, <16 x i16> %111, <16 x i16> %114, <16 x i16> %117, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL12load_565_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 2
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 14
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 13
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <16 x i16> %34, i16 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 12
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <16 x i16> %39, i16 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <12 x i16>*
  %46 = load <12 x i16>, <12 x i16>* %45, align 2
  %47 = shufflevector <12 x i16> %46, <12 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i16> %47, <16 x i16> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 10
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i16, i16* %24, i64 9
  %56 = load i16, i16* %55, align 2
  %57 = insertelement <16 x i16> %54, i16 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i16> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i16, i16* %24, i64 8
  %61 = load i16, i16* %60, align 2
  %62 = insertelement <16 x i16> %59, i16 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i16> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i16* %24 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2
  %67 = shufflevector <8 x i16> %66, <8 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i16> %67, <16 x i16> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i16, i16* %24, i64 6
  %71 = load i16, i16* %70, align 2
  %72 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i16> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i16, i16* %24, i64 5
  %76 = load i16, i16* %75, align 2
  %77 = insertelement <16 x i16> %74, i16 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i16> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i16, i16* %24, i64 4
  %81 = load i16, i16* %80, align 2
  %82 = insertelement <16 x i16> %79, i16 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i16> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i16* %24 to <4 x i16>*
  %86 = load <4 x i16>, <4 x i16>* %85, align 2
  %87 = shufflevector <4 x i16> %86, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i16> %87, <16 x i16> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i16, i16* %24, i64 2
  %91 = load i16, i16* %90, align 2
  %92 = insertelement <16 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i16> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i16* %24 to <2 x i16>*
  %96 = load <2 x i16>, <2 x i16>* %95, align 2
  %97 = shufflevector <2 x i16> %96, <2 x i16> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i16> %97, <16 x i16> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i16, i16* %24, align 2
  %101 = insertelement <16 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %26, %43, %63, %83, %93, %99
  %104 = phi <16 x i16> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = lshr <16 x i16> %104, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %106 = lshr <16 x i16> %104, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %107 = and <16 x i16> %106, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %108 = and <16 x i16> %104, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %109 = shl nuw nsw <16 x i16> %105, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %110 = lshr <16 x i16> %104, <i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13>
  %111 = or <16 x i16> %109, %110
  %112 = shl nuw nsw <16 x i16> %107, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %113 = lshr <16 x i16> %107, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %114 = or <16 x i16> %112, %113
  %115 = shl nuw nsw <16 x i16> %108, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %116 = lshr <16 x i16> %108, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %117 = or <16 x i16> %115, %116
  %118 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %119 = extractvalue { i8*, i8** } %118, 0
  %120 = extractvalue { i8*, i8** } %118, 1
  %121 = bitcast i8* %119 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %121(i64 %0, i8** %120, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %111, <16 x i16> %114, <16 x i16> %117, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL9store_565EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = mul <16 x i16> %4, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %26 = add <16 x i16> %25, <i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36>
  %27 = udiv <16 x i16> %26, <i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74>
  %28 = mul <16 x i16> %5, <i16 21, i16 21, i16 21, i16 21, i16 21, i16 21, i16 21, i16 21, i16 21, i16 21, i16 21, i16 21, i16 21, i16 21, i16 21, i16 21>
  %29 = add <16 x i16> %28, <i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42, i16 42>
  %30 = udiv <16 x i16> %29, <i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85, i16 85>
  %31 = mul <16 x i16> %6, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %32 = add <16 x i16> %31, <i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36, i16 36>
  %33 = udiv <16 x i16> %32, <i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74, i16 74>
  %34 = shl <16 x i16> %27, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %35 = shl nuw nsw <16 x i16> %30, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %36 = or <16 x i16> %35, %34
  %37 = or <16 x i16> %36, %33
  %38 = and i64 %0, 15
  switch i64 %38, label %85 [
    i64 0, label %39
    i64 15, label %41
    i64 14, label %44
    i64 13, label %47
    i64 12, label %50
    i64 11, label %53
    i64 10, label %56
    i64 9, label %59
    i64 8, label %62
    i64 7, label %65
    i64 6, label %68
    i64 5, label %71
    i64 4, label %74
    i64 3, label %77
    i64 2, label %80
    i64 1, label %83
  ]

39:                                               ; preds = %12
  %40 = bitcast i16* %24 to <16 x i16>*
  store <16 x i16> %37, <16 x i16>* %40, align 2
  br label %86

41:                                               ; preds = %12
  %42 = extractelement <16 x i16> %37, i32 14
  %43 = getelementptr inbounds i16, i16* %24, i64 14
  store i16 %42, i16* %43, align 2
  br label %44

44:                                               ; preds = %41, %12
  %45 = extractelement <16 x i16> %37, i32 13
  %46 = getelementptr inbounds i16, i16* %24, i64 13
  store i16 %45, i16* %46, align 2
  br label %47

47:                                               ; preds = %44, %12
  %48 = extractelement <16 x i16> %37, i32 12
  %49 = getelementptr inbounds i16, i16* %24, i64 12
  store i16 %48, i16* %49, align 2
  br label %50

50:                                               ; preds = %47, %12
  %51 = bitcast i16* %24 to <12 x i16>*
  %52 = shufflevector <16 x i16> %37, <16 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  store <12 x i16> %52, <12 x i16>* %51, align 2
  br label %86

53:                                               ; preds = %12
  %54 = extractelement <16 x i16> %37, i32 10
  %55 = getelementptr inbounds i16, i16* %24, i64 10
  store i16 %54, i16* %55, align 2
  br label %56

56:                                               ; preds = %53, %12
  %57 = extractelement <16 x i16> %37, i32 9
  %58 = getelementptr inbounds i16, i16* %24, i64 9
  store i16 %57, i16* %58, align 2
  br label %59

59:                                               ; preds = %56, %12
  %60 = extractelement <16 x i16> %37, i32 8
  %61 = getelementptr inbounds i16, i16* %24, i64 8
  store i16 %60, i16* %61, align 2
  br label %62

62:                                               ; preds = %59, %12
  %63 = bitcast i16* %24 to <8 x i16>*
  %64 = shufflevector <16 x i16> %37, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %64, <8 x i16>* %63, align 2
  br label %86

65:                                               ; preds = %12
  %66 = extractelement <16 x i16> %37, i32 6
  %67 = getelementptr inbounds i16, i16* %24, i64 6
  store i16 %66, i16* %67, align 2
  br label %68

68:                                               ; preds = %65, %12
  %69 = extractelement <16 x i16> %37, i32 5
  %70 = getelementptr inbounds i16, i16* %24, i64 5
  store i16 %69, i16* %70, align 2
  br label %71

71:                                               ; preds = %68, %12
  %72 = extractelement <16 x i16> %37, i32 4
  %73 = getelementptr inbounds i16, i16* %24, i64 4
  store i16 %72, i16* %73, align 2
  br label %74

74:                                               ; preds = %71, %12
  %75 = bitcast i16* %24 to <4 x i16>*
  %76 = shufflevector <16 x i16> %37, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %76, <4 x i16>* %75, align 2
  br label %86

77:                                               ; preds = %12
  %78 = extractelement <16 x i16> %37, i32 2
  %79 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %78, i16* %79, align 2
  br label %80

80:                                               ; preds = %77, %12
  %81 = bitcast i16* %24 to <2 x i16>*
  %82 = shufflevector <16 x i16> %37, <16 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %82, <2 x i16>* %81, align 2
  br label %86

83:                                               ; preds = %12
  %84 = extractelement <16 x i16> %37, i32 0
  store i16 %84, i16* %24, align 2
  br label %86

85:                                               ; preds = %12
  unreachable

86:                                               ; preds = %39, %50, %62, %74, %80, %83
  %87 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %88 = extractvalue { i8*, i8** } %87, 0
  %89 = extractvalue { i8*, i8** } %87, 1
  %90 = bitcast i8* %88 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %90(i64 %0, i8** %89, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL10gather_565EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = bitcast <16 x i16> %6 to <8 x float>
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <16 x i16> %7 to <8 x float>
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <16 x float> %19, <16 x float> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = getelementptr inbounds i8, i8* %24, i64 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, -1
  %30 = bitcast i32 %29 to float
  %31 = insertelement <16 x float> undef, float %30, i32 0
  %32 = shufflevector <16 x float> %31, <16 x float> undef, <16 x i32> zeroinitializer
  %33 = getelementptr inbounds i8, i8* %24, i64 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = bitcast i32 %36 to float
  %38 = insertelement <16 x float> undef, float %37, i32 0
  %39 = shufflevector <16 x float> %38, <16 x float> undef, <16 x i32> zeroinitializer
  %40 = fcmp ogt <16 x float> %17, zeroinitializer
  %41 = select <16 x i1> %40, <16 x float> %17, <16 x float> zeroinitializer
  %42 = fcmp olt <16 x float> %41, %32
  %43 = select <16 x i1> %42, <16 x float> %41, <16 x float> %32
  %44 = fcmp ogt <16 x float> %22, zeroinitializer
  %45 = select <16 x i1> %44, <16 x float> %22, <16 x float> zeroinitializer
  %46 = fcmp olt <16 x float> %45, %39
  %47 = select <16 x i1> %46, <16 x float> %45, <16 x float> %39
  %48 = bitcast i8* %24 to i16**
  %49 = load i16*, i16** %48, align 8
  %50 = fptosi <16 x float> %47 to <16 x i32>
  %51 = getelementptr inbounds i8, i8* %24, i64 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 8
  %54 = insertelement <16 x i32> undef, i32 %53, i32 0
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <16 x i32> zeroinitializer
  %56 = mul <16 x i32> %55, %50
  %57 = fptosi <16 x float> %43 to <16 x i32>
  %58 = add <16 x i32> %56, %57
  %59 = extractelement <16 x i32> %58, i32 0
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i16, i16* %49, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = insertelement <16 x i16> undef, i16 %62, i32 0
  %64 = extractelement <16 x i32> %58, i32 1
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i16, i16* %49, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = insertelement <16 x i16> %63, i16 %67, i32 1
  %69 = extractelement <16 x i32> %58, i32 2
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i16, i16* %49, i64 %70
  %72 = load i16, i16* %71, align 2
  %73 = insertelement <16 x i16> %68, i16 %72, i32 2
  %74 = extractelement <16 x i32> %58, i32 3
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i16, i16* %49, i64 %75
  %77 = load i16, i16* %76, align 2
  %78 = insertelement <16 x i16> %73, i16 %77, i32 3
  %79 = extractelement <16 x i32> %58, i32 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i16, i16* %49, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = insertelement <16 x i16> %78, i16 %82, i32 4
  %84 = extractelement <16 x i32> %58, i32 5
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i16, i16* %49, i64 %85
  %87 = load i16, i16* %86, align 2
  %88 = insertelement <16 x i16> %83, i16 %87, i32 5
  %89 = extractelement <16 x i32> %58, i32 6
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i16, i16* %49, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = insertelement <16 x i16> %88, i16 %92, i32 6
  %94 = extractelement <16 x i32> %58, i32 7
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i16, i16* %49, i64 %95
  %97 = load i16, i16* %96, align 2
  %98 = insertelement <16 x i16> %93, i16 %97, i32 7
  %99 = extractelement <16 x i32> %58, i32 8
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds i16, i16* %49, i64 %100
  %102 = load i16, i16* %101, align 2
  %103 = insertelement <16 x i16> %98, i16 %102, i32 8
  %104 = extractelement <16 x i32> %58, i32 9
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds i16, i16* %49, i64 %105
  %107 = load i16, i16* %106, align 2
  %108 = insertelement <16 x i16> %103, i16 %107, i32 9
  %109 = extractelement <16 x i32> %58, i32 10
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i16, i16* %49, i64 %110
  %112 = load i16, i16* %111, align 2
  %113 = insertelement <16 x i16> %108, i16 %112, i32 10
  %114 = extractelement <16 x i32> %58, i32 11
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i16, i16* %49, i64 %115
  %117 = load i16, i16* %116, align 2
  %118 = insertelement <16 x i16> %113, i16 %117, i32 11
  %119 = extractelement <16 x i32> %58, i32 12
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds i16, i16* %49, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = insertelement <16 x i16> %118, i16 %122, i32 12
  %124 = extractelement <16 x i32> %58, i32 13
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i16, i16* %49, i64 %125
  %127 = load i16, i16* %126, align 2
  %128 = insertelement <16 x i16> %123, i16 %127, i32 13
  %129 = extractelement <16 x i32> %58, i32 14
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds i16, i16* %49, i64 %130
  %132 = load i16, i16* %131, align 2
  %133 = insertelement <16 x i16> %128, i16 %132, i32 14
  %134 = extractelement <16 x i32> %58, i32 15
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds i16, i16* %49, i64 %135
  %137 = load i16, i16* %136, align 2
  %138 = insertelement <16 x i16> %133, i16 %137, i32 15
  %139 = lshr <16 x i16> %138, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %140 = lshr <16 x i16> %138, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %141 = and <16 x i16> %140, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %142 = and <16 x i16> %138, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %143 = shl nuw nsw <16 x i16> %139, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %144 = lshr <16 x i16> %138, <i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13>
  %145 = or <16 x i16> %143, %144
  %146 = shl nuw nsw <16 x i16> %141, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %147 = lshr <16 x i16> %141, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %148 = or <16 x i16> %146, %147
  %149 = shl nuw nsw <16 x i16> %142, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %150 = lshr <16 x i16> %142, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %151 = or <16 x i16> %149, %150
  %152 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #10, !srcloc !98
  %153 = extractvalue { i8*, i8** } %152, 0
  %154 = extractvalue { i8*, i8** } %152, 1
  %155 = bitcast i8* %153 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %155(i64 %0, i8** %154, i64 %2, i64 %3, <16 x i16> %145, <16 x i16> %148, <16 x i16> %151, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL9load_4444EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 2
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 14
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 13
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <16 x i16> %34, i16 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 12
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <16 x i16> %39, i16 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <12 x i16>*
  %46 = load <12 x i16>, <12 x i16>* %45, align 2
  %47 = shufflevector <12 x i16> %46, <12 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i16> %47, <16 x i16> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 10
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i16, i16* %24, i64 9
  %56 = load i16, i16* %55, align 2
  %57 = insertelement <16 x i16> %54, i16 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i16> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i16, i16* %24, i64 8
  %61 = load i16, i16* %60, align 2
  %62 = insertelement <16 x i16> %59, i16 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i16> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i16* %24 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2
  %67 = shufflevector <8 x i16> %66, <8 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i16> %67, <16 x i16> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i16, i16* %24, i64 6
  %71 = load i16, i16* %70, align 2
  %72 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i16> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i16, i16* %24, i64 5
  %76 = load i16, i16* %75, align 2
  %77 = insertelement <16 x i16> %74, i16 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i16> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i16, i16* %24, i64 4
  %81 = load i16, i16* %80, align 2
  %82 = insertelement <16 x i16> %79, i16 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i16> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i16* %24 to <4 x i16>*
  %86 = load <4 x i16>, <4 x i16>* %85, align 2
  %87 = shufflevector <4 x i16> %86, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i16> %87, <16 x i16> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i16, i16* %24, i64 2
  %91 = load i16, i16* %90, align 2
  %92 = insertelement <16 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i16> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i16* %24 to <2 x i16>*
  %96 = load <2 x i16>, <2 x i16>* %95, align 2
  %97 = shufflevector <2 x i16> %96, <2 x i16> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i16> %97, <16 x i16> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i16, i16* %24, align 2
  %101 = insertelement <16 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %26, %43, %63, %83, %93, %99
  %104 = phi <16 x i16> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = lshr <16 x i16> %104, <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>
  %106 = lshr <16 x i16> %104, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %107 = and <16 x i16> %106, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %108 = lshr <16 x i16> %104, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %109 = and <16 x i16> %108, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %110 = and <16 x i16> %104, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %111 = shl nuw nsw <16 x i16> %105, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %112 = or <16 x i16> %111, %105
  %113 = shl nuw nsw <16 x i16> %107, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %114 = or <16 x i16> %113, %107
  %115 = shl nuw nsw <16 x i16> %109, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %116 = or <16 x i16> %115, %109
  %117 = shl nuw nsw <16 x i16> %110, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %118 = or <16 x i16> %117, %110
  %119 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %120 = extractvalue { i8*, i8** } %119, 0
  %121 = extractvalue { i8*, i8** } %119, 1
  %122 = bitcast i8* %120 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %122(i64 %0, i8** %121, i64 %2, i64 %3, <16 x i16> %112, <16 x i16> %114, <16 x i16> %116, <16 x i16> %118, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL13load_4444_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 2
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 14
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 13
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <16 x i16> %34, i16 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 12
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <16 x i16> %39, i16 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <12 x i16>*
  %46 = load <12 x i16>, <12 x i16>* %45, align 2
  %47 = shufflevector <12 x i16> %46, <12 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i16> %47, <16 x i16> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 10
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i16, i16* %24, i64 9
  %56 = load i16, i16* %55, align 2
  %57 = insertelement <16 x i16> %54, i16 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i16> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i16, i16* %24, i64 8
  %61 = load i16, i16* %60, align 2
  %62 = insertelement <16 x i16> %59, i16 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i16> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i16* %24 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2
  %67 = shufflevector <8 x i16> %66, <8 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i16> %67, <16 x i16> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i16, i16* %24, i64 6
  %71 = load i16, i16* %70, align 2
  %72 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i16> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i16, i16* %24, i64 5
  %76 = load i16, i16* %75, align 2
  %77 = insertelement <16 x i16> %74, i16 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i16> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i16, i16* %24, i64 4
  %81 = load i16, i16* %80, align 2
  %82 = insertelement <16 x i16> %79, i16 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i16> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i16* %24 to <4 x i16>*
  %86 = load <4 x i16>, <4 x i16>* %85, align 2
  %87 = shufflevector <4 x i16> %86, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i16> %87, <16 x i16> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i16, i16* %24, i64 2
  %91 = load i16, i16* %90, align 2
  %92 = insertelement <16 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i16> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i16* %24 to <2 x i16>*
  %96 = load <2 x i16>, <2 x i16>* %95, align 2
  %97 = shufflevector <2 x i16> %96, <2 x i16> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i16> %97, <16 x i16> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i16, i16* %24, align 2
  %101 = insertelement <16 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %26, %43, %63, %83, %93, %99
  %104 = phi <16 x i16> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = lshr <16 x i16> %104, <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>
  %106 = lshr <16 x i16> %104, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %107 = and <16 x i16> %106, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %108 = lshr <16 x i16> %104, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %109 = and <16 x i16> %108, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %110 = and <16 x i16> %104, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %111 = shl nuw nsw <16 x i16> %105, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %112 = or <16 x i16> %111, %105
  %113 = shl nuw nsw <16 x i16> %107, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %114 = or <16 x i16> %113, %107
  %115 = shl nuw nsw <16 x i16> %109, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %116 = or <16 x i16> %115, %109
  %117 = shl nuw nsw <16 x i16> %110, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %118 = or <16 x i16> %117, %110
  %119 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %120 = extractvalue { i8*, i8** } %119, 0
  %121 = extractvalue { i8*, i8** } %119, 1
  %122 = bitcast i8* %120 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %122(i64 %0, i8** %121, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %112, <16 x i16> %114, <16 x i16> %116, <16 x i16> %118) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL10store_4444EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = add <16 x i16> %4, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %26 = udiv <16 x i16> %25, <i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17>
  %27 = add <16 x i16> %5, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %28 = udiv <16 x i16> %27, <i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17>
  %29 = add <16 x i16> %6, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %30 = udiv <16 x i16> %29, <i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17>
  %31 = add <16 x i16> %7, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = udiv <16 x i16> %31, <i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17, i16 17>
  %33 = shl <16 x i16> %26, <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>
  %34 = shl <16 x i16> %28, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = or <16 x i16> %34, %33
  %36 = shl nuw <16 x i16> %30, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %37 = or <16 x i16> %35, %36
  %38 = or <16 x i16> %37, %32
  %39 = and i64 %0, 15
  switch i64 %39, label %86 [
    i64 0, label %40
    i64 15, label %42
    i64 14, label %45
    i64 13, label %48
    i64 12, label %51
    i64 11, label %54
    i64 10, label %57
    i64 9, label %60
    i64 8, label %63
    i64 7, label %66
    i64 6, label %69
    i64 5, label %72
    i64 4, label %75
    i64 3, label %78
    i64 2, label %81
    i64 1, label %84
  ]

40:                                               ; preds = %12
  %41 = bitcast i16* %24 to <16 x i16>*
  store <16 x i16> %38, <16 x i16>* %41, align 2
  br label %87

42:                                               ; preds = %12
  %43 = extractelement <16 x i16> %38, i32 14
  %44 = getelementptr inbounds i16, i16* %24, i64 14
  store i16 %43, i16* %44, align 2
  br label %45

45:                                               ; preds = %42, %12
  %46 = extractelement <16 x i16> %38, i32 13
  %47 = getelementptr inbounds i16, i16* %24, i64 13
  store i16 %46, i16* %47, align 2
  br label %48

48:                                               ; preds = %45, %12
  %49 = extractelement <16 x i16> %38, i32 12
  %50 = getelementptr inbounds i16, i16* %24, i64 12
  store i16 %49, i16* %50, align 2
  br label %51

51:                                               ; preds = %48, %12
  %52 = bitcast i16* %24 to <12 x i16>*
  %53 = shufflevector <16 x i16> %38, <16 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  store <12 x i16> %53, <12 x i16>* %52, align 2
  br label %87

54:                                               ; preds = %12
  %55 = extractelement <16 x i16> %38, i32 10
  %56 = getelementptr inbounds i16, i16* %24, i64 10
  store i16 %55, i16* %56, align 2
  br label %57

57:                                               ; preds = %54, %12
  %58 = extractelement <16 x i16> %38, i32 9
  %59 = getelementptr inbounds i16, i16* %24, i64 9
  store i16 %58, i16* %59, align 2
  br label %60

60:                                               ; preds = %57, %12
  %61 = extractelement <16 x i16> %38, i32 8
  %62 = getelementptr inbounds i16, i16* %24, i64 8
  store i16 %61, i16* %62, align 2
  br label %63

63:                                               ; preds = %60, %12
  %64 = bitcast i16* %24 to <8 x i16>*
  %65 = shufflevector <16 x i16> %38, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %65, <8 x i16>* %64, align 2
  br label %87

66:                                               ; preds = %12
  %67 = extractelement <16 x i16> %38, i32 6
  %68 = getelementptr inbounds i16, i16* %24, i64 6
  store i16 %67, i16* %68, align 2
  br label %69

69:                                               ; preds = %66, %12
  %70 = extractelement <16 x i16> %38, i32 5
  %71 = getelementptr inbounds i16, i16* %24, i64 5
  store i16 %70, i16* %71, align 2
  br label %72

72:                                               ; preds = %69, %12
  %73 = extractelement <16 x i16> %38, i32 4
  %74 = getelementptr inbounds i16, i16* %24, i64 4
  store i16 %73, i16* %74, align 2
  br label %75

75:                                               ; preds = %72, %12
  %76 = bitcast i16* %24 to <4 x i16>*
  %77 = shufflevector <16 x i16> %38, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %77, <4 x i16>* %76, align 2
  br label %87

78:                                               ; preds = %12
  %79 = extractelement <16 x i16> %38, i32 2
  %80 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %79, i16* %80, align 2
  br label %81

81:                                               ; preds = %78, %12
  %82 = bitcast i16* %24 to <2 x i16>*
  %83 = shufflevector <16 x i16> %38, <16 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %83, <2 x i16>* %82, align 2
  br label %87

84:                                               ; preds = %12
  %85 = extractelement <16 x i16> %38, i32 0
  store i16 %85, i16* %24, align 2
  br label %87

86:                                               ; preds = %12
  unreachable

87:                                               ; preds = %40, %51, %63, %75, %81, %84
  %88 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %89 = extractvalue { i8*, i8** } %88, 0
  %90 = extractvalue { i8*, i8** } %88, 1
  %91 = bitcast i8* %89 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %91(i64 %0, i8** %90, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL11gather_4444EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = bitcast <16 x i16> %6 to <8 x float>
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <16 x i16> %7 to <8 x float>
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <16 x float> %19, <16 x float> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = getelementptr inbounds i8, i8* %24, i64 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, -1
  %30 = bitcast i32 %29 to float
  %31 = insertelement <16 x float> undef, float %30, i32 0
  %32 = shufflevector <16 x float> %31, <16 x float> undef, <16 x i32> zeroinitializer
  %33 = getelementptr inbounds i8, i8* %24, i64 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = bitcast i32 %36 to float
  %38 = insertelement <16 x float> undef, float %37, i32 0
  %39 = shufflevector <16 x float> %38, <16 x float> undef, <16 x i32> zeroinitializer
  %40 = fcmp ogt <16 x float> %17, zeroinitializer
  %41 = select <16 x i1> %40, <16 x float> %17, <16 x float> zeroinitializer
  %42 = fcmp olt <16 x float> %41, %32
  %43 = select <16 x i1> %42, <16 x float> %41, <16 x float> %32
  %44 = fcmp ogt <16 x float> %22, zeroinitializer
  %45 = select <16 x i1> %44, <16 x float> %22, <16 x float> zeroinitializer
  %46 = fcmp olt <16 x float> %45, %39
  %47 = select <16 x i1> %46, <16 x float> %45, <16 x float> %39
  %48 = bitcast i8* %24 to i16**
  %49 = load i16*, i16** %48, align 8
  %50 = fptosi <16 x float> %47 to <16 x i32>
  %51 = getelementptr inbounds i8, i8* %24, i64 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 8
  %54 = insertelement <16 x i32> undef, i32 %53, i32 0
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <16 x i32> zeroinitializer
  %56 = mul <16 x i32> %55, %50
  %57 = fptosi <16 x float> %43 to <16 x i32>
  %58 = add <16 x i32> %56, %57
  %59 = extractelement <16 x i32> %58, i32 0
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i16, i16* %49, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = insertelement <16 x i16> undef, i16 %62, i32 0
  %64 = extractelement <16 x i32> %58, i32 1
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i16, i16* %49, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = insertelement <16 x i16> %63, i16 %67, i32 1
  %69 = extractelement <16 x i32> %58, i32 2
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i16, i16* %49, i64 %70
  %72 = load i16, i16* %71, align 2
  %73 = insertelement <16 x i16> %68, i16 %72, i32 2
  %74 = extractelement <16 x i32> %58, i32 3
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i16, i16* %49, i64 %75
  %77 = load i16, i16* %76, align 2
  %78 = insertelement <16 x i16> %73, i16 %77, i32 3
  %79 = extractelement <16 x i32> %58, i32 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i16, i16* %49, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = insertelement <16 x i16> %78, i16 %82, i32 4
  %84 = extractelement <16 x i32> %58, i32 5
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i16, i16* %49, i64 %85
  %87 = load i16, i16* %86, align 2
  %88 = insertelement <16 x i16> %83, i16 %87, i32 5
  %89 = extractelement <16 x i32> %58, i32 6
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i16, i16* %49, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = insertelement <16 x i16> %88, i16 %92, i32 6
  %94 = extractelement <16 x i32> %58, i32 7
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i16, i16* %49, i64 %95
  %97 = load i16, i16* %96, align 2
  %98 = insertelement <16 x i16> %93, i16 %97, i32 7
  %99 = extractelement <16 x i32> %58, i32 8
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds i16, i16* %49, i64 %100
  %102 = load i16, i16* %101, align 2
  %103 = insertelement <16 x i16> %98, i16 %102, i32 8
  %104 = extractelement <16 x i32> %58, i32 9
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds i16, i16* %49, i64 %105
  %107 = load i16, i16* %106, align 2
  %108 = insertelement <16 x i16> %103, i16 %107, i32 9
  %109 = extractelement <16 x i32> %58, i32 10
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i16, i16* %49, i64 %110
  %112 = load i16, i16* %111, align 2
  %113 = insertelement <16 x i16> %108, i16 %112, i32 10
  %114 = extractelement <16 x i32> %58, i32 11
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i16, i16* %49, i64 %115
  %117 = load i16, i16* %116, align 2
  %118 = insertelement <16 x i16> %113, i16 %117, i32 11
  %119 = extractelement <16 x i32> %58, i32 12
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds i16, i16* %49, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = insertelement <16 x i16> %118, i16 %122, i32 12
  %124 = extractelement <16 x i32> %58, i32 13
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i16, i16* %49, i64 %125
  %127 = load i16, i16* %126, align 2
  %128 = insertelement <16 x i16> %123, i16 %127, i32 13
  %129 = extractelement <16 x i32> %58, i32 14
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds i16, i16* %49, i64 %130
  %132 = load i16, i16* %131, align 2
  %133 = insertelement <16 x i16> %128, i16 %132, i32 14
  %134 = extractelement <16 x i32> %58, i32 15
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds i16, i16* %49, i64 %135
  %137 = load i16, i16* %136, align 2
  %138 = insertelement <16 x i16> %133, i16 %137, i32 15
  %139 = lshr <16 x i16> %138, <i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 12>
  %140 = lshr <16 x i16> %138, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %141 = and <16 x i16> %140, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %142 = lshr <16 x i16> %138, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %143 = and <16 x i16> %142, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %144 = and <16 x i16> %138, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %145 = shl nuw nsw <16 x i16> %139, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %146 = or <16 x i16> %145, %139
  %147 = shl nuw nsw <16 x i16> %141, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %148 = or <16 x i16> %147, %141
  %149 = shl nuw nsw <16 x i16> %143, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %150 = or <16 x i16> %149, %143
  %151 = shl nuw nsw <16 x i16> %144, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %152 = or <16 x i16> %151, %144
  %153 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #10, !srcloc !98
  %154 = extractvalue { i8*, i8** } %153, 0
  %155 = extractvalue { i8*, i8** } %153, 1
  %156 = bitcast i8* %154 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %156(i64 %0, i8** %155, i64 %2, i64 %3, <16 x i16> %146, <16 x i16> %148, <16 x i16> %150, <16 x i16> %152, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL9load_8888EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i32* %24 to <16 x i32>*
  %28 = load <16 x i32>, <16 x i32>* %27, align 4
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i32, i32* %24, i64 14
  %31 = load i32, i32* %30, align 4
  %32 = insertelement <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0>, i32 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i32> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i32, i32* %24, i64 13
  %36 = load i32, i32* %35, align 4
  %37 = insertelement <16 x i32> %34, i32 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i32> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i32, i32* %24, i64 12
  %41 = load i32, i32* %40, align 4
  %42 = insertelement <16 x i32> %39, i32 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i32> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i32* %24 to <12 x i32>*
  %46 = load <12 x i32>, <12 x i32>* %45, align 4
  %47 = shufflevector <12 x i32> %46, <12 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i32> %47, <16 x i32> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i32, i32* %24, i64 10
  %51 = load i32, i32* %50, align 4
  %52 = insertelement <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i32> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i32, i32* %24, i64 9
  %56 = load i32, i32* %55, align 4
  %57 = insertelement <16 x i32> %54, i32 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i32> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i32, i32* %24, i64 8
  %61 = load i32, i32* %60, align 4
  %62 = insertelement <16 x i32> %59, i32 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i32> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i32* %24 to <8 x i32>*
  %66 = load <8 x i32>, <8 x i32>* %65, align 4
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i32> %67, <16 x i32> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i32, i32* %24, i64 6
  %71 = load i32, i32* %70, align 4
  %72 = insertelement <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i32> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i32, i32* %24, i64 5
  %76 = load i32, i32* %75, align 4
  %77 = insertelement <16 x i32> %74, i32 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i32> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i32, i32* %24, i64 4
  %81 = load i32, i32* %80, align 4
  %82 = insertelement <16 x i32> %79, i32 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i32> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i32* %24 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i32> %87, <16 x i32> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i32, i32* %24, i64 2
  %91 = load i32, i32* %90, align 4
  %92 = insertelement <16 x i32> <i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i32> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i32* %24 to <2 x i32>*
  %96 = load <2 x i32>, <2 x i32>* %95, align 4
  %97 = shufflevector <2 x i32> %96, <2 x i32> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i32> %97, <16 x i32> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i32, i32* %24, align 4
  %101 = insertelement <16 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %26, %43, %63, %83, %93, %99
  %104 = phi <16 x i32> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = shufflevector <16 x i32> %104, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %106 = bitcast <8 x i32> %105 to <4 x i64>
  %107 = shufflevector <16 x i32> %104, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %108 = bitcast <8 x i32> %107 to <4 x i64>
  %109 = shufflevector <4 x i64> %106, <4 x i64> %108, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %110 = shufflevector <4 x i64> %106, <4 x i64> %108, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %111 = bitcast <4 x i64> %109 to <8 x i32>
  %112 = shufflevector <8 x i32> %111, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %113 = bitcast <4 x i64> %110 to <8 x i32>
  %114 = shufflevector <8 x i32> %113, <8 x i32> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %115 = shufflevector <16 x i32> %112, <16 x i32> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %116 = and <16 x i32> %115, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %117 = shufflevector <16 x i32> %116, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %118 = shufflevector <16 x i32> %116, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %119 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %117, <8 x i32> %118) #13
  %120 = and <16 x i16> %119, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %121 = lshr <16 x i16> %119, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %122 = lshr <16 x i32> %115, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %123 = shufflevector <16 x i32> %122, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %124 = shufflevector <16 x i32> %122, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %125 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %123, <8 x i32> %124) #13
  %126 = and <16 x i16> %125, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %127 = lshr <16 x i16> %125, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %128 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %129 = extractvalue { i8*, i8** } %128, 0
  %130 = extractvalue { i8*, i8** } %128, 1
  %131 = bitcast i8* %129 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %131(i64 %0, i8** %130, i64 %2, i64 %3, <16 x i16> %120, <16 x i16> %121, <16 x i16> %126, <16 x i16> %127, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL13load_8888_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i32* %24 to <16 x i32>*
  %28 = load <16 x i32>, <16 x i32>* %27, align 4
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i32, i32* %24, i64 14
  %31 = load i32, i32* %30, align 4
  %32 = insertelement <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0>, i32 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i32> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i32, i32* %24, i64 13
  %36 = load i32, i32* %35, align 4
  %37 = insertelement <16 x i32> %34, i32 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i32> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i32, i32* %24, i64 12
  %41 = load i32, i32* %40, align 4
  %42 = insertelement <16 x i32> %39, i32 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i32> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i32* %24 to <12 x i32>*
  %46 = load <12 x i32>, <12 x i32>* %45, align 4
  %47 = shufflevector <12 x i32> %46, <12 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i32> %47, <16 x i32> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i32, i32* %24, i64 10
  %51 = load i32, i32* %50, align 4
  %52 = insertelement <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i32> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i32, i32* %24, i64 9
  %56 = load i32, i32* %55, align 4
  %57 = insertelement <16 x i32> %54, i32 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i32> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i32, i32* %24, i64 8
  %61 = load i32, i32* %60, align 4
  %62 = insertelement <16 x i32> %59, i32 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i32> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i32* %24 to <8 x i32>*
  %66 = load <8 x i32>, <8 x i32>* %65, align 4
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i32> %67, <16 x i32> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i32, i32* %24, i64 6
  %71 = load i32, i32* %70, align 4
  %72 = insertelement <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i32> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i32, i32* %24, i64 5
  %76 = load i32, i32* %75, align 4
  %77 = insertelement <16 x i32> %74, i32 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i32> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i32, i32* %24, i64 4
  %81 = load i32, i32* %80, align 4
  %82 = insertelement <16 x i32> %79, i32 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i32> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i32* %24 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i32> %87, <16 x i32> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i32, i32* %24, i64 2
  %91 = load i32, i32* %90, align 4
  %92 = insertelement <16 x i32> <i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i32> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i32* %24 to <2 x i32>*
  %96 = load <2 x i32>, <2 x i32>* %95, align 4
  %97 = shufflevector <2 x i32> %96, <2 x i32> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i32> %97, <16 x i32> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i32, i32* %24, align 4
  %101 = insertelement <16 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %26, %43, %63, %83, %93, %99
  %104 = phi <16 x i32> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = shufflevector <16 x i32> %104, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %106 = bitcast <8 x i32> %105 to <4 x i64>
  %107 = shufflevector <16 x i32> %104, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %108 = bitcast <8 x i32> %107 to <4 x i64>
  %109 = shufflevector <4 x i64> %106, <4 x i64> %108, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %110 = shufflevector <4 x i64> %106, <4 x i64> %108, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %111 = bitcast <4 x i64> %109 to <8 x i32>
  %112 = shufflevector <8 x i32> %111, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %113 = bitcast <4 x i64> %110 to <8 x i32>
  %114 = shufflevector <8 x i32> %113, <8 x i32> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %115 = shufflevector <16 x i32> %112, <16 x i32> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %116 = and <16 x i32> %115, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %117 = shufflevector <16 x i32> %116, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %118 = shufflevector <16 x i32> %116, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %119 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %117, <8 x i32> %118) #13
  %120 = and <16 x i16> %119, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %121 = lshr <16 x i16> %119, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %122 = lshr <16 x i32> %115, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %123 = shufflevector <16 x i32> %122, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %124 = shufflevector <16 x i32> %122, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %125 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %123, <8 x i32> %124) #13
  %126 = and <16 x i16> %125, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %127 = lshr <16 x i16> %125, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %128 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %129 = extractvalue { i8*, i8** } %128, 0
  %130 = extractvalue { i8*, i8** } %128, 1
  %131 = bitcast i8* %129 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %131(i64 %0, i8** %130, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %120, <16 x i16> %121, <16 x i16> %126, <16 x i16> %127) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL10store_8888EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = shl <16 x i16> %5, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %26 = or <16 x i16> %25, %4
  %27 = zext <16 x i16> %26 to <16 x i32>
  %28 = shl <16 x i16> %7, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = or <16 x i16> %28, %6
  %30 = zext <16 x i16> %29 to <16 x i32>
  %31 = shl nuw <16 x i32> %30, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %32 = or <16 x i32> %31, %27
  %33 = and i64 %0, 15
  switch i64 %33, label %80 [
    i64 0, label %34
    i64 15, label %36
    i64 14, label %39
    i64 13, label %42
    i64 12, label %45
    i64 11, label %48
    i64 10, label %51
    i64 9, label %54
    i64 8, label %57
    i64 7, label %60
    i64 6, label %63
    i64 5, label %66
    i64 4, label %69
    i64 3, label %72
    i64 2, label %75
    i64 1, label %78
  ]

34:                                               ; preds = %12
  %35 = bitcast i32* %24 to <16 x i32>*
  store <16 x i32> %32, <16 x i32>* %35, align 4
  br label %81

36:                                               ; preds = %12
  %37 = extractelement <16 x i32> %32, i32 14
  %38 = getelementptr inbounds i32, i32* %24, i64 14
  store i32 %37, i32* %38, align 4
  br label %39

39:                                               ; preds = %36, %12
  %40 = extractelement <16 x i32> %32, i32 13
  %41 = getelementptr inbounds i32, i32* %24, i64 13
  store i32 %40, i32* %41, align 4
  br label %42

42:                                               ; preds = %39, %12
  %43 = extractelement <16 x i32> %32, i32 12
  %44 = getelementptr inbounds i32, i32* %24, i64 12
  store i32 %43, i32* %44, align 4
  br label %45

45:                                               ; preds = %42, %12
  %46 = bitcast i32* %24 to <12 x i32>*
  %47 = shufflevector <16 x i32> %32, <16 x i32> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  store <12 x i32> %47, <12 x i32>* %46, align 4
  br label %81

48:                                               ; preds = %12
  %49 = extractelement <16 x i32> %32, i32 10
  %50 = getelementptr inbounds i32, i32* %24, i64 10
  store i32 %49, i32* %50, align 4
  br label %51

51:                                               ; preds = %48, %12
  %52 = extractelement <16 x i32> %32, i32 9
  %53 = getelementptr inbounds i32, i32* %24, i64 9
  store i32 %52, i32* %53, align 4
  br label %54

54:                                               ; preds = %51, %12
  %55 = extractelement <16 x i32> %32, i32 8
  %56 = getelementptr inbounds i32, i32* %24, i64 8
  store i32 %55, i32* %56, align 4
  br label %57

57:                                               ; preds = %54, %12
  %58 = bitcast i32* %24 to <8 x i32>*
  %59 = shufflevector <16 x i32> %32, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i32> %59, <8 x i32>* %58, align 4
  br label %81

60:                                               ; preds = %12
  %61 = extractelement <16 x i32> %32, i32 6
  %62 = getelementptr inbounds i32, i32* %24, i64 6
  store i32 %61, i32* %62, align 4
  br label %63

63:                                               ; preds = %60, %12
  %64 = extractelement <16 x i32> %32, i32 5
  %65 = getelementptr inbounds i32, i32* %24, i64 5
  store i32 %64, i32* %65, align 4
  br label %66

66:                                               ; preds = %63, %12
  %67 = extractelement <16 x i32> %32, i32 4
  %68 = getelementptr inbounds i32, i32* %24, i64 4
  store i32 %67, i32* %68, align 4
  br label %69

69:                                               ; preds = %66, %12
  %70 = bitcast i32* %24 to <4 x i32>*
  %71 = shufflevector <16 x i32> %32, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %71, <4 x i32>* %70, align 4
  br label %81

72:                                               ; preds = %12
  %73 = extractelement <16 x i32> %32, i32 2
  %74 = getelementptr inbounds i32, i32* %24, i64 2
  store i32 %73, i32* %74, align 4
  br label %75

75:                                               ; preds = %72, %12
  %76 = bitcast i32* %24 to <2 x i32>*
  %77 = shufflevector <16 x i32> %32, <16 x i32> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i32> %77, <2 x i32>* %76, align 4
  br label %81

78:                                               ; preds = %12
  %79 = extractelement <16 x i32> %32, i32 0
  store i32 %79, i32* %24, align 4
  br label %81

80:                                               ; preds = %12
  unreachable

81:                                               ; preds = %34, %45, %57, %69, %75, %78
  %82 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %83 = extractvalue { i8*, i8** } %82, 0
  %84 = extractvalue { i8*, i8** } %82, 1
  %85 = bitcast i8* %83 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %85(i64 %0, i8** %84, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL11gather_8888EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = bitcast <16 x i16> %6 to <8 x float>
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <16 x i16> %7 to <8 x float>
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <16 x float> %19, <16 x float> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = getelementptr inbounds i8, i8* %24, i64 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, -1
  %30 = bitcast i32 %29 to float
  %31 = insertelement <16 x float> undef, float %30, i32 0
  %32 = shufflevector <16 x float> %31, <16 x float> undef, <16 x i32> zeroinitializer
  %33 = getelementptr inbounds i8, i8* %24, i64 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = bitcast i32 %36 to float
  %38 = insertelement <16 x float> undef, float %37, i32 0
  %39 = shufflevector <16 x float> %38, <16 x float> undef, <16 x i32> zeroinitializer
  %40 = fcmp ogt <16 x float> %17, zeroinitializer
  %41 = select <16 x i1> %40, <16 x float> %17, <16 x float> zeroinitializer
  %42 = fcmp olt <16 x float> %41, %32
  %43 = select <16 x i1> %42, <16 x float> %41, <16 x float> %32
  %44 = fcmp ogt <16 x float> %22, zeroinitializer
  %45 = select <16 x i1> %44, <16 x float> %22, <16 x float> zeroinitializer
  %46 = fcmp olt <16 x float> %45, %39
  %47 = select <16 x i1> %46, <16 x float> %45, <16 x float> %39
  %48 = bitcast i8* %24 to i8**
  %49 = load i8*, i8** %48, align 8
  %50 = fptosi <16 x float> %47 to <16 x i32>
  %51 = getelementptr inbounds i8, i8* %24, i64 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 8
  %54 = insertelement <16 x i32> undef, i32 %53, i32 0
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <16 x i32> zeroinitializer
  %56 = mul <16 x i32> %55, %50
  %57 = fptosi <16 x float> %43 to <16 x i32>
  %58 = add <16 x i32> %56, %57
  %59 = shufflevector <16 x i32> %58, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %60 = shufflevector <16 x i32> %58, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %61 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %49, <8 x i32> %59, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %62 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %49, <8 x i32> %60, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13
  %63 = bitcast <8 x i32> %61 to <4 x i64>
  %64 = bitcast <8 x i32> %62 to <4 x i64>
  %65 = shufflevector <4 x i64> %63, <4 x i64> %64, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %66 = shufflevector <4 x i64> %63, <4 x i64> %64, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %67 = bitcast <4 x i64> %65 to <8 x i32>
  %68 = shufflevector <8 x i32> %67, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %69 = bitcast <4 x i64> %66 to <8 x i32>
  %70 = shufflevector <8 x i32> %69, <8 x i32> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %71 = shufflevector <16 x i32> %68, <16 x i32> %70, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %72 = and <16 x i32> %71, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %73 = shufflevector <16 x i32> %72, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %74 = shufflevector <16 x i32> %72, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %75 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %73, <8 x i32> %74) #13
  %76 = and <16 x i16> %75, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %77 = lshr <16 x i16> %75, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %78 = lshr <16 x i32> %71, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %79 = shufflevector <16 x i32> %78, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %80 = shufflevector <16 x i32> %78, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %81 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %79, <8 x i32> %80) #13
  %82 = and <16 x i16> %81, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %83 = lshr <16 x i16> %81, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %84 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #10, !srcloc !98
  %85 = extractvalue { i8*, i8** } %84, 0
  %86 = extractvalue { i8*, i8** } %84, 1
  %87 = bitcast i8* %85 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %87(i64 %0, i8** %86, i64 %2, i64 %3, <16 x i16> %76, <16 x i16> %77, <16 x i16> %82, <16 x i16> %83, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL9load_rg88EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 2
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 14
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 13
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <16 x i16> %34, i16 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 12
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <16 x i16> %39, i16 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <12 x i16>*
  %46 = load <12 x i16>, <12 x i16>* %45, align 2
  %47 = shufflevector <12 x i16> %46, <12 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i16> %47, <16 x i16> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 10
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i16, i16* %24, i64 9
  %56 = load i16, i16* %55, align 2
  %57 = insertelement <16 x i16> %54, i16 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i16> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i16, i16* %24, i64 8
  %61 = load i16, i16* %60, align 2
  %62 = insertelement <16 x i16> %59, i16 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i16> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i16* %24 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2
  %67 = shufflevector <8 x i16> %66, <8 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i16> %67, <16 x i16> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i16, i16* %24, i64 6
  %71 = load i16, i16* %70, align 2
  %72 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i16> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i16, i16* %24, i64 5
  %76 = load i16, i16* %75, align 2
  %77 = insertelement <16 x i16> %74, i16 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i16> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i16, i16* %24, i64 4
  %81 = load i16, i16* %80, align 2
  %82 = insertelement <16 x i16> %79, i16 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i16> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i16* %24 to <4 x i16>*
  %86 = load <4 x i16>, <4 x i16>* %85, align 2
  %87 = shufflevector <4 x i16> %86, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i16> %87, <16 x i16> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i16, i16* %24, i64 2
  %91 = load i16, i16* %90, align 2
  %92 = insertelement <16 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i16> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i16* %24 to <2 x i16>*
  %96 = load <2 x i16>, <2 x i16>* %95, align 2
  %97 = shufflevector <2 x i16> %96, <2 x i16> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i16> %97, <16 x i16> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i16, i16* %24, align 2
  %101 = insertelement <16 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %26, %43, %63, %83, %93, %99
  %104 = phi <16 x i16> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = and <16 x i16> %104, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %106 = lshr <16 x i16> %104, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %107 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %108 = extractvalue { i8*, i8** } %107, 0
  %109 = extractvalue { i8*, i8** } %107, 1
  %110 = bitcast i8* %108 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %110(i64 %0, i8** %109, i64 %2, i64 %3, <16 x i16> %105, <16 x i16> %106, <16 x i16> zeroinitializer, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL13load_rg88_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 2
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 14
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 13
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <16 x i16> %34, i16 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 12
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <16 x i16> %39, i16 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <12 x i16>*
  %46 = load <12 x i16>, <12 x i16>* %45, align 2
  %47 = shufflevector <12 x i16> %46, <12 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i16> %47, <16 x i16> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 10
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i16, i16* %24, i64 9
  %56 = load i16, i16* %55, align 2
  %57 = insertelement <16 x i16> %54, i16 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i16> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i16, i16* %24, i64 8
  %61 = load i16, i16* %60, align 2
  %62 = insertelement <16 x i16> %59, i16 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i16> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i16* %24 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2
  %67 = shufflevector <8 x i16> %66, <8 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i16> %67, <16 x i16> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i16, i16* %24, i64 6
  %71 = load i16, i16* %70, align 2
  %72 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i16> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i16, i16* %24, i64 5
  %76 = load i16, i16* %75, align 2
  %77 = insertelement <16 x i16> %74, i16 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i16> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i16, i16* %24, i64 4
  %81 = load i16, i16* %80, align 2
  %82 = insertelement <16 x i16> %79, i16 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i16> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i16* %24 to <4 x i16>*
  %86 = load <4 x i16>, <4 x i16>* %85, align 2
  %87 = shufflevector <4 x i16> %86, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i16> %87, <16 x i16> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i16, i16* %24, i64 2
  %91 = load i16, i16* %90, align 2
  %92 = insertelement <16 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i16> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i16* %24 to <2 x i16>*
  %96 = load <2 x i16>, <2 x i16>* %95, align 2
  %97 = shufflevector <2 x i16> %96, <2 x i16> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i16> %97, <16 x i16> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i16, i16* %24, align 2
  %101 = insertelement <16 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %26, %43, %63, %83, %93, %99
  %104 = phi <16 x i16> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = and <16 x i16> %104, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %106 = lshr <16 x i16> %104, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %107 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %108 = extractvalue { i8*, i8** } %107, 0
  %109 = extractvalue { i8*, i8** } %107, 1
  %110 = bitcast i8* %108 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %110(i64 %0, i8** %109, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %105, <16 x i16> %106, <16 x i16> zeroinitializer, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL10store_rg88EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = shl <16 x i16> %5, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %26 = or <16 x i16> %25, %4
  %27 = and i64 %0, 15
  switch i64 %27, label %74 [
    i64 0, label %28
    i64 15, label %30
    i64 14, label %33
    i64 13, label %36
    i64 12, label %39
    i64 11, label %42
    i64 10, label %45
    i64 9, label %48
    i64 8, label %51
    i64 7, label %54
    i64 6, label %57
    i64 5, label %60
    i64 4, label %63
    i64 3, label %66
    i64 2, label %69
    i64 1, label %72
  ]

28:                                               ; preds = %12
  %29 = bitcast i16* %24 to <16 x i16>*
  store <16 x i16> %26, <16 x i16>* %29, align 2
  br label %75

30:                                               ; preds = %12
  %31 = extractelement <16 x i16> %26, i32 14
  %32 = getelementptr inbounds i16, i16* %24, i64 14
  store i16 %31, i16* %32, align 2
  br label %33

33:                                               ; preds = %30, %12
  %34 = extractelement <16 x i16> %26, i32 13
  %35 = getelementptr inbounds i16, i16* %24, i64 13
  store i16 %34, i16* %35, align 2
  br label %36

36:                                               ; preds = %33, %12
  %37 = extractelement <16 x i16> %26, i32 12
  %38 = getelementptr inbounds i16, i16* %24, i64 12
  store i16 %37, i16* %38, align 2
  br label %39

39:                                               ; preds = %36, %12
  %40 = bitcast i16* %24 to <12 x i16>*
  %41 = shufflevector <16 x i16> %26, <16 x i16> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  store <12 x i16> %41, <12 x i16>* %40, align 2
  br label %75

42:                                               ; preds = %12
  %43 = extractelement <16 x i16> %26, i32 10
  %44 = getelementptr inbounds i16, i16* %24, i64 10
  store i16 %43, i16* %44, align 2
  br label %45

45:                                               ; preds = %42, %12
  %46 = extractelement <16 x i16> %26, i32 9
  %47 = getelementptr inbounds i16, i16* %24, i64 9
  store i16 %46, i16* %47, align 2
  br label %48

48:                                               ; preds = %45, %12
  %49 = extractelement <16 x i16> %26, i32 8
  %50 = getelementptr inbounds i16, i16* %24, i64 8
  store i16 %49, i16* %50, align 2
  br label %51

51:                                               ; preds = %48, %12
  %52 = bitcast i16* %24 to <8 x i16>*
  %53 = shufflevector <16 x i16> %26, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %53, <8 x i16>* %52, align 2
  br label %75

54:                                               ; preds = %12
  %55 = extractelement <16 x i16> %26, i32 6
  %56 = getelementptr inbounds i16, i16* %24, i64 6
  store i16 %55, i16* %56, align 2
  br label %57

57:                                               ; preds = %54, %12
  %58 = extractelement <16 x i16> %26, i32 5
  %59 = getelementptr inbounds i16, i16* %24, i64 5
  store i16 %58, i16* %59, align 2
  br label %60

60:                                               ; preds = %57, %12
  %61 = extractelement <16 x i16> %26, i32 4
  %62 = getelementptr inbounds i16, i16* %24, i64 4
  store i16 %61, i16* %62, align 2
  br label %63

63:                                               ; preds = %60, %12
  %64 = bitcast i16* %24 to <4 x i16>*
  %65 = shufflevector <16 x i16> %26, <16 x i16> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i16> %65, <4 x i16>* %64, align 2
  br label %75

66:                                               ; preds = %12
  %67 = extractelement <16 x i16> %26, i32 2
  %68 = getelementptr inbounds i16, i16* %24, i64 2
  store i16 %67, i16* %68, align 2
  br label %69

69:                                               ; preds = %66, %12
  %70 = bitcast i16* %24 to <2 x i16>*
  %71 = shufflevector <16 x i16> %26, <16 x i16> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i16> %71, <2 x i16>* %70, align 2
  br label %75

72:                                               ; preds = %12
  %73 = extractelement <16 x i16> %26, i32 0
  store i16 %73, i16* %24, align 2
  br label %75

74:                                               ; preds = %12
  unreachable

75:                                               ; preds = %28, %39, %51, %63, %69, %72
  %76 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %77 = extractvalue { i8*, i8** } %76, 0
  %78 = extractvalue { i8*, i8** } %76, 1
  %79 = bitcast i8* %77 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %79(i64 %0, i8** %78, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL11gather_rg88EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = bitcast <16 x i16> %6 to <8 x float>
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <16 x i16> %7 to <8 x float>
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <16 x float> %19, <16 x float> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = getelementptr inbounds i8, i8* %24, i64 12
  %27 = bitcast i8* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = add i32 %28, -1
  %30 = bitcast i32 %29 to float
  %31 = insertelement <16 x float> undef, float %30, i32 0
  %32 = shufflevector <16 x float> %31, <16 x float> undef, <16 x i32> zeroinitializer
  %33 = getelementptr inbounds i8, i8* %24, i64 16
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = bitcast i32 %36 to float
  %38 = insertelement <16 x float> undef, float %37, i32 0
  %39 = shufflevector <16 x float> %38, <16 x float> undef, <16 x i32> zeroinitializer
  %40 = fcmp ogt <16 x float> %17, zeroinitializer
  %41 = select <16 x i1> %40, <16 x float> %17, <16 x float> zeroinitializer
  %42 = fcmp olt <16 x float> %41, %32
  %43 = select <16 x i1> %42, <16 x float> %41, <16 x float> %32
  %44 = fcmp ogt <16 x float> %22, zeroinitializer
  %45 = select <16 x i1> %44, <16 x float> %22, <16 x float> zeroinitializer
  %46 = fcmp olt <16 x float> %45, %39
  %47 = select <16 x i1> %46, <16 x float> %45, <16 x float> %39
  %48 = bitcast i8* %24 to i16**
  %49 = load i16*, i16** %48, align 8
  %50 = fptosi <16 x float> %47 to <16 x i32>
  %51 = getelementptr inbounds i8, i8* %24, i64 8
  %52 = bitcast i8* %51 to i32*
  %53 = load i32, i32* %52, align 8
  %54 = insertelement <16 x i32> undef, i32 %53, i32 0
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <16 x i32> zeroinitializer
  %56 = mul <16 x i32> %55, %50
  %57 = fptosi <16 x float> %43 to <16 x i32>
  %58 = add <16 x i32> %56, %57
  %59 = extractelement <16 x i32> %58, i32 0
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i16, i16* %49, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = insertelement <16 x i16> undef, i16 %62, i32 0
  %64 = extractelement <16 x i32> %58, i32 1
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i16, i16* %49, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = insertelement <16 x i16> %63, i16 %67, i32 1
  %69 = extractelement <16 x i32> %58, i32 2
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i16, i16* %49, i64 %70
  %72 = load i16, i16* %71, align 2
  %73 = insertelement <16 x i16> %68, i16 %72, i32 2
  %74 = extractelement <16 x i32> %58, i32 3
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i16, i16* %49, i64 %75
  %77 = load i16, i16* %76, align 2
  %78 = insertelement <16 x i16> %73, i16 %77, i32 3
  %79 = extractelement <16 x i32> %58, i32 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i16, i16* %49, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = insertelement <16 x i16> %78, i16 %82, i32 4
  %84 = extractelement <16 x i32> %58, i32 5
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i16, i16* %49, i64 %85
  %87 = load i16, i16* %86, align 2
  %88 = insertelement <16 x i16> %83, i16 %87, i32 5
  %89 = extractelement <16 x i32> %58, i32 6
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i16, i16* %49, i64 %90
  %92 = load i16, i16* %91, align 2
  %93 = insertelement <16 x i16> %88, i16 %92, i32 6
  %94 = extractelement <16 x i32> %58, i32 7
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i16, i16* %49, i64 %95
  %97 = load i16, i16* %96, align 2
  %98 = insertelement <16 x i16> %93, i16 %97, i32 7
  %99 = extractelement <16 x i32> %58, i32 8
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds i16, i16* %49, i64 %100
  %102 = load i16, i16* %101, align 2
  %103 = insertelement <16 x i16> %98, i16 %102, i32 8
  %104 = extractelement <16 x i32> %58, i32 9
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds i16, i16* %49, i64 %105
  %107 = load i16, i16* %106, align 2
  %108 = insertelement <16 x i16> %103, i16 %107, i32 9
  %109 = extractelement <16 x i32> %58, i32 10
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i16, i16* %49, i64 %110
  %112 = load i16, i16* %111, align 2
  %113 = insertelement <16 x i16> %108, i16 %112, i32 10
  %114 = extractelement <16 x i32> %58, i32 11
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i16, i16* %49, i64 %115
  %117 = load i16, i16* %116, align 2
  %118 = insertelement <16 x i16> %113, i16 %117, i32 11
  %119 = extractelement <16 x i32> %58, i32 12
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds i16, i16* %49, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = insertelement <16 x i16> %118, i16 %122, i32 12
  %124 = extractelement <16 x i32> %58, i32 13
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i16, i16* %49, i64 %125
  %127 = load i16, i16* %126, align 2
  %128 = insertelement <16 x i16> %123, i16 %127, i32 13
  %129 = extractelement <16 x i32> %58, i32 14
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds i16, i16* %49, i64 %130
  %132 = load i16, i16* %131, align 2
  %133 = insertelement <16 x i16> %128, i16 %132, i32 14
  %134 = extractelement <16 x i32> %58, i32 15
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds i16, i16* %49, i64 %135
  %137 = load i16, i16* %136, align 2
  %138 = insertelement <16 x i16> %133, i16 %137, i32 15
  %139 = and <16 x i16> %138, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %140 = lshr <16 x i16> %138, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %141 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #10, !srcloc !98
  %142 = extractvalue { i8*, i8** } %141, 0
  %143 = extractvalue { i8*, i8** } %141, 1
  %144 = bitcast i8* %142 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %144(i64 %0, i8** %143, i64 %2, i64 %3, <16 x i16> %139, <16 x i16> %140, <16 x i16> zeroinitializer, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL13alpha_to_grayEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <16 x i16> %7, <16 x i16> %7, <16 x i16> %7, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL17alpha_to_gray_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %11, <16 x i16> %11, <16 x i16> %11, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL32bt709_luminance_or_luma_to_alphaEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = mul <16 x i16> %4, <i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54>
  %14 = mul <16 x i16> %5, <i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183>
  %15 = add <16 x i16> %14, %13
  %16 = mul <16 x i16> %6, <i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19>
  %17 = add <16 x i16> %15, %16
  %18 = lshr <16 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %20 = extractvalue { i8*, i8** } %19, 0
  %21 = extractvalue { i8*, i8** } %19, 1
  %22 = bitcast i8* %20 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %22(i64 %0, i8** %21, i64 %2, i64 %3, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> %18, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL30bt709_luminance_or_luma_to_rgbEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = mul <16 x i16> %4, <i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54, i16 54>
  %14 = mul <16 x i16> %5, <i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183, i16 183>
  %15 = add <16 x i16> %14, %13
  %16 = mul <16 x i16> %6, <i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19, i16 19>
  %17 = add <16 x i16> %15, %16
  %18 = lshr <16 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %20 = extractvalue { i8*, i8** } %19, 0
  %21 = extractvalue { i8*, i8** } %19, 1
  %22 = bitcast i8* %20 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %22(i64 %0, i8** %21, i64 %2, i64 %3, <16 x i16> %18, <16 x i16> %18, <16 x i16> %18, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL8load_srcEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <16 x i16>*
  %17 = load <16 x i16>, <16 x i16>* %16, align 2
  %18 = getelementptr inbounds i8, i8* %14, i64 32
  %19 = bitcast i8* %18 to <16 x i16>*
  %20 = load <16 x i16>, <16 x i16>* %19, align 2
  %21 = getelementptr inbounds i8, i8* %14, i64 64
  %22 = bitcast i8* %21 to <16 x i16>*
  %23 = load <16 x i16>, <16 x i16>* %22, align 2
  %24 = getelementptr inbounds i8, i8* %14, i64 96
  %25 = bitcast i8* %24 to <16 x i16>*
  %26 = load <16 x i16>, <16 x i16>* %25, align 2
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <16 x i16> %17, <16 x i16> %20, <16 x i16> %23, <16 x i16> %26, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL9store_srcEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <16 x i16>*
  store <16 x i16> %4, <16 x i16>* %16, align 2
  %17 = getelementptr inbounds i8, i8* %14, i64 32
  %18 = bitcast i8* %17 to <16 x i16>*
  store <16 x i16> %5, <16 x i16>* %18, align 2
  %19 = getelementptr inbounds i8, i8* %14, i64 64
  %20 = bitcast i8* %19 to <16 x i16>*
  store <16 x i16> %6, <16 x i16>* %20, align 2
  %21 = getelementptr inbounds i8, i8* %14, i64 96
  %22 = bitcast i8* %21 to <16 x i16>*
  store <16 x i16> %7, <16 x i16>* %22, align 2
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %26(i64 %0, i8** %25, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL11store_src_aEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <16 x i16>*
  store <16 x i16> %7, <16 x i16>* %16, align 2
  %17 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %18 = extractvalue { i8*, i8** } %17, 0
  %19 = extractvalue { i8*, i8** } %17, 1
  %20 = bitcast i8* %18 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %20(i64 %0, i8** %19, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL8load_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <16 x i16>*
  %17 = load <16 x i16>, <16 x i16>* %16, align 2
  %18 = getelementptr inbounds i8, i8* %14, i64 32
  %19 = bitcast i8* %18 to <16 x i16>*
  %20 = load <16 x i16>, <16 x i16>* %19, align 2
  %21 = getelementptr inbounds i8, i8* %14, i64 64
  %22 = bitcast i8* %21 to <16 x i16>*
  %23 = load <16 x i16>, <16 x i16>* %22, align 2
  %24 = getelementptr inbounds i8, i8* %14, i64 96
  %25 = bitcast i8* %24 to <16 x i16>*
  %26 = load <16 x i16>, <16 x i16>* %25, align 2
  %27 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %28 = extractvalue { i8*, i8** } %27, 0
  %29 = extractvalue { i8*, i8** } %27, 1
  %30 = bitcast i8* %28 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %30(i64 %0, i8** %29, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %17, <16 x i16> %20, <16 x i16> %23, <16 x i16> %26) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL9store_dstEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <16 x i16>*
  store <16 x i16> %8, <16 x i16>* %16, align 2
  %17 = getelementptr inbounds i8, i8* %14, i64 32
  %18 = bitcast i8* %17 to <16 x i16>*
  store <16 x i16> %9, <16 x i16>* %18, align 2
  %19 = getelementptr inbounds i8, i8* %14, i64 64
  %20 = bitcast i8* %19 to <16 x i16>*
  store <16 x i16> %10, <16 x i16>* %20, align 2
  %21 = getelementptr inbounds i8, i8* %14, i64 96
  %22 = bitcast i8* %21 to <16 x i16>*
  store <16 x i16> %11, <16 x i16>* %22, align 2
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %26(i64 %0, i8** %25, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL8scale_u8EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i8* %24 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i8, i8* %24, i64 14
  %31 = load i8, i8* %30, align 1
  %32 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i8> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i8, i8* %24, i64 13
  %36 = load i8, i8* %35, align 1
  %37 = insertelement <16 x i8> %34, i8 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i8> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i8, i8* %24, i64 12
  %41 = load i8, i8* %40, align 1
  %42 = insertelement <16 x i8> %39, i8 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i8> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i8* %24 to <12 x i8>*
  %46 = load <12 x i8>, <12 x i8>* %45, align 1
  %47 = shufflevector <12 x i8> %46, <12 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i8> %47, <16 x i8> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i8, i8* %24, i64 10
  %51 = load i8, i8* %50, align 1
  %52 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i8> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i8, i8* %24, i64 9
  %56 = load i8, i8* %55, align 1
  %57 = insertelement <16 x i8> %54, i8 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i8> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i8, i8* %24, i64 8
  %61 = load i8, i8* %60, align 1
  %62 = insertelement <16 x i8> %59, i8 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i8> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i8* %24 to <8 x i8>*
  %66 = load <8 x i8>, <8 x i8>* %65, align 1
  %67 = shufflevector <8 x i8> %66, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i8> %67, <16 x i8> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i8, i8* %24, i64 6
  %71 = load i8, i8* %70, align 1
  %72 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i8> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i8, i8* %24, i64 5
  %76 = load i8, i8* %75, align 1
  %77 = insertelement <16 x i8> %74, i8 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i8> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i8, i8* %24, i64 4
  %81 = load i8, i8* %80, align 1
  %82 = insertelement <16 x i8> %79, i8 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i8> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i8* %24 to <4 x i8>*
  %86 = load <4 x i8>, <4 x i8>* %85, align 1
  %87 = shufflevector <4 x i8> %86, <4 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i8> %87, <16 x i8> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i8, i8* %24, i64 2
  %91 = load i8, i8* %90, align 1
  %92 = insertelement <16 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i8> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i8* %24 to <2 x i8>*
  %96 = load <2 x i8>, <2 x i8>* %95, align 1
  %97 = shufflevector <2 x i8> %96, <2 x i8> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i8> %97, <16 x i8> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i8, i8* %24, align 1
  %101 = insertelement <16 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %26, %43, %63, %83, %93, %99
  %104 = phi <16 x i8> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = zext <16 x i8> %104 to <16 x i16>
  %106 = mul <16 x i16> %105, %4
  %107 = add <16 x i16> %106, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %108 = lshr <16 x i16> %107, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %109 = mul <16 x i16> %105, %5
  %110 = add <16 x i16> %109, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %111 = lshr <16 x i16> %110, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %112 = mul <16 x i16> %105, %6
  %113 = add <16 x i16> %112, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %114 = lshr <16 x i16> %113, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %115 = mul <16 x i16> %105, %7
  %116 = add <16 x i16> %115, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %117 = lshr <16 x i16> %116, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %118 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %119 = extractvalue { i8*, i8** } %118, 0
  %120 = extractvalue { i8*, i8** } %118, 1
  %121 = bitcast i8* %119 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %121(i64 %0, i8** %120, i64 %2, i64 %3, <16 x i16> %108, <16 x i16> %111, <16 x i16> %114, <16 x i16> %117, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL9scale_565EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 2
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 14
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 13
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <16 x i16> %34, i16 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 12
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <16 x i16> %39, i16 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <12 x i16>*
  %46 = load <12 x i16>, <12 x i16>* %45, align 2
  %47 = shufflevector <12 x i16> %46, <12 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i16> %47, <16 x i16> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 10
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i16, i16* %24, i64 9
  %56 = load i16, i16* %55, align 2
  %57 = insertelement <16 x i16> %54, i16 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i16> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i16, i16* %24, i64 8
  %61 = load i16, i16* %60, align 2
  %62 = insertelement <16 x i16> %59, i16 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i16> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i16* %24 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2
  %67 = shufflevector <8 x i16> %66, <8 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i16> %67, <16 x i16> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i16, i16* %24, i64 6
  %71 = load i16, i16* %70, align 2
  %72 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i16> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i16, i16* %24, i64 5
  %76 = load i16, i16* %75, align 2
  %77 = insertelement <16 x i16> %74, i16 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i16> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i16, i16* %24, i64 4
  %81 = load i16, i16* %80, align 2
  %82 = insertelement <16 x i16> %79, i16 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i16> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i16* %24 to <4 x i16>*
  %86 = load <4 x i16>, <4 x i16>* %85, align 2
  %87 = shufflevector <4 x i16> %86, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i16> %87, <16 x i16> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i16, i16* %24, i64 2
  %91 = load i16, i16* %90, align 2
  %92 = insertelement <16 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i16> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i16* %24 to <2 x i16>*
  %96 = load <2 x i16>, <2 x i16>* %95, align 2
  %97 = shufflevector <2 x i16> %96, <2 x i16> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i16> %97, <16 x i16> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i16, i16* %24, align 2
  %101 = insertelement <16 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %26, %43, %63, %83, %93, %99
  %104 = phi <16 x i16> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = lshr <16 x i16> %104, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %106 = lshr <16 x i16> %104, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %107 = and <16 x i16> %106, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %108 = and <16 x i16> %104, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %109 = shl nuw nsw <16 x i16> %105, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %110 = lshr <16 x i16> %104, <i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13>
  %111 = or <16 x i16> %109, %110
  %112 = shl nuw nsw <16 x i16> %107, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %113 = lshr <16 x i16> %107, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %114 = or <16 x i16> %112, %113
  %115 = shl nuw nsw <16 x i16> %108, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %116 = lshr <16 x i16> %108, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %117 = or <16 x i16> %115, %116
  %118 = icmp ult <16 x i16> %7, %11
  %119 = icmp ult <16 x i16> %114, %117
  %120 = select <16 x i1> %119, <16 x i16> %114, <16 x i16> %117
  %121 = icmp ugt <16 x i16> %120, %111
  %122 = select <16 x i1> %121, <16 x i16> %111, <16 x i16> %120
  %123 = select <16 x i1> %119, <16 x i16> %117, <16 x i16> %114
  %124 = icmp ugt <16 x i16> %123, %111
  %125 = select <16 x i1> %124, <16 x i16> %123, <16 x i16> %111
  %126 = select <16 x i1> %118, <16 x i16> %122, <16 x i16> %125
  %127 = mul <16 x i16> %111, %4
  %128 = add <16 x i16> %127, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %129 = lshr <16 x i16> %128, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %130 = mul <16 x i16> %114, %5
  %131 = add <16 x i16> %130, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %132 = lshr <16 x i16> %131, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %133 = mul <16 x i16> %117, %6
  %134 = add <16 x i16> %133, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %135 = lshr <16 x i16> %134, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %136 = mul <16 x i16> %126, %7
  %137 = add <16 x i16> %136, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %138 = lshr <16 x i16> %137, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %139 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %140 = extractvalue { i8*, i8** } %139, 0
  %141 = extractvalue { i8*, i8** } %139, 1
  %142 = bitcast i8* %140 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %142(i64 %0, i8** %141, i64 %2, i64 %3, <16 x i16> %129, <16 x i16> %132, <16 x i16> %135, <16 x i16> %138, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL13scale_1_floatEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = fmul float %17, 2.550000e+02
  %19 = fadd float %18, 5.000000e-01
  %20 = fptoui float %19 to i16
  %21 = insertelement <16 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <16 x i16> %21, <16 x i16> undef, <16 x i32> zeroinitializer
  %23 = mul <16 x i16> %22, %4
  %24 = add <16 x i16> %23, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %25 = lshr <16 x i16> %24, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %26 = mul <16 x i16> %22, %5
  %27 = add <16 x i16> %26, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %28 = lshr <16 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = mul <16 x i16> %22, %6
  %30 = add <16 x i16> %29, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %31 = lshr <16 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = mul <16 x i16> %22, %7
  %33 = add <16 x i16> %32, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %34 = lshr <16 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %36 = extractvalue { i8*, i8** } %35, 0
  %37 = extractvalue { i8*, i8** } %35, 1
  %38 = bitcast i8* %36 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %38(i64 %0, i8** %37, i64 %2, i64 %3, <16 x i16> %25, <16 x i16> %28, <16 x i16> %31, <16 x i16> %34, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL12scale_nativeEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <16 x i16>*
  %17 = load <16 x i16>, <16 x i16>* %16, align 2
  %18 = mul <16 x i16> %17, %4
  %19 = add <16 x i16> %18, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %20 = lshr <16 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %21 = mul <16 x i16> %17, %5
  %22 = add <16 x i16> %21, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %23 = lshr <16 x i16> %22, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %24 = mul <16 x i16> %17, %6
  %25 = add <16 x i16> %24, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %26 = lshr <16 x i16> %25, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %27 = mul <16 x i16> %17, %7
  %28 = add <16 x i16> %27, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %29 = lshr <16 x i16> %28, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <16 x i16> %20, <16 x i16> %23, <16 x i16> %26, <16 x i16> %29, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7lerp_u8EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i8* %24 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i8, i8* %24, i64 14
  %31 = load i8, i8* %30, align 1
  %32 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i8> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i8, i8* %24, i64 13
  %36 = load i8, i8* %35, align 1
  %37 = insertelement <16 x i8> %34, i8 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i8> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i8, i8* %24, i64 12
  %41 = load i8, i8* %40, align 1
  %42 = insertelement <16 x i8> %39, i8 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i8> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i8* %24 to <12 x i8>*
  %46 = load <12 x i8>, <12 x i8>* %45, align 1
  %47 = shufflevector <12 x i8> %46, <12 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i8> %47, <16 x i8> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i8, i8* %24, i64 10
  %51 = load i8, i8* %50, align 1
  %52 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i8> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i8, i8* %24, i64 9
  %56 = load i8, i8* %55, align 1
  %57 = insertelement <16 x i8> %54, i8 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i8> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i8, i8* %24, i64 8
  %61 = load i8, i8* %60, align 1
  %62 = insertelement <16 x i8> %59, i8 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i8> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i8* %24 to <8 x i8>*
  %66 = load <8 x i8>, <8 x i8>* %65, align 1
  %67 = shufflevector <8 x i8> %66, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i8> %67, <16 x i8> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i8, i8* %24, i64 6
  %71 = load i8, i8* %70, align 1
  %72 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i8> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i8, i8* %24, i64 5
  %76 = load i8, i8* %75, align 1
  %77 = insertelement <16 x i8> %74, i8 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i8> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i8, i8* %24, i64 4
  %81 = load i8, i8* %80, align 1
  %82 = insertelement <16 x i8> %79, i8 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i8> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i8* %24 to <4 x i8>*
  %86 = load <4 x i8>, <4 x i8>* %85, align 1
  %87 = shufflevector <4 x i8> %86, <4 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i8> %87, <16 x i8> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i8, i8* %24, i64 2
  %91 = load i8, i8* %90, align 1
  %92 = insertelement <16 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i8> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i8* %24 to <2 x i8>*
  %96 = load <2 x i8>, <2 x i8>* %95, align 1
  %97 = shufflevector <2 x i8> %96, <2 x i8> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i8> %97, <16 x i8> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i8, i8* %24, align 1
  %101 = insertelement <16 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %26, %43, %63, %83, %93, %99
  %104 = phi <16 x i8> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = zext <16 x i8> %104 to <16 x i16>
  %106 = xor <16 x i16> %105, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %107 = mul <16 x i16> %106, %8
  %108 = mul <16 x i16> %105, %4
  %109 = add <16 x i16> %108, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %110 = add <16 x i16> %109, %107
  %111 = lshr <16 x i16> %110, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %112 = mul <16 x i16> %106, %9
  %113 = mul <16 x i16> %105, %5
  %114 = add <16 x i16> %113, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %115 = add <16 x i16> %114, %112
  %116 = lshr <16 x i16> %115, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %117 = mul <16 x i16> %106, %10
  %118 = mul <16 x i16> %105, %6
  %119 = add <16 x i16> %118, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %120 = add <16 x i16> %119, %117
  %121 = lshr <16 x i16> %120, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %122 = mul <16 x i16> %106, %11
  %123 = mul <16 x i16> %105, %7
  %124 = add <16 x i16> %123, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %125 = add <16 x i16> %124, %122
  %126 = lshr <16 x i16> %125, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %127 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %128 = extractvalue { i8*, i8** } %127, 0
  %129 = extractvalue { i8*, i8** } %127, 1
  %130 = bitcast i8* %128 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %130(i64 %0, i8** %129, i64 %2, i64 %3, <16 x i16> %111, <16 x i16> %116, <16 x i16> %121, <16 x i16> %126, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL8lerp_565EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i16**
  %17 = load i16*, i16** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i16, i16* %17, i64 %22
  %24 = getelementptr inbounds i16, i16* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i16* %24 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 2
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i16, i16* %24, i64 14
  %31 = load i16, i16* %30, align 2
  %32 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0>, i16 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i16> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i16, i16* %24, i64 13
  %36 = load i16, i16* %35, align 2
  %37 = insertelement <16 x i16> %34, i16 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i16> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i16, i16* %24, i64 12
  %41 = load i16, i16* %40, align 2
  %42 = insertelement <16 x i16> %39, i16 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i16> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i16* %24 to <12 x i16>*
  %46 = load <12 x i16>, <12 x i16>* %45, align 2
  %47 = shufflevector <12 x i16> %46, <12 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i16> %47, <16 x i16> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i16, i16* %24, i64 10
  %51 = load i16, i16* %50, align 2
  %52 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i16> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i16, i16* %24, i64 9
  %56 = load i16, i16* %55, align 2
  %57 = insertelement <16 x i16> %54, i16 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i16> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i16, i16* %24, i64 8
  %61 = load i16, i16* %60, align 2
  %62 = insertelement <16 x i16> %59, i16 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i16> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i16* %24 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2
  %67 = shufflevector <8 x i16> %66, <8 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i16> %67, <16 x i16> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i16, i16* %24, i64 6
  %71 = load i16, i16* %70, align 2
  %72 = insertelement <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i16> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i16, i16* %24, i64 5
  %76 = load i16, i16* %75, align 2
  %77 = insertelement <16 x i16> %74, i16 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i16> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i16, i16* %24, i64 4
  %81 = load i16, i16* %80, align 2
  %82 = insertelement <16 x i16> %79, i16 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i16> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i16* %24 to <4 x i16>*
  %86 = load <4 x i16>, <4 x i16>* %85, align 2
  %87 = shufflevector <4 x i16> %86, <4 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i16> %87, <16 x i16> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i16, i16* %24, i64 2
  %91 = load i16, i16* %90, align 2
  %92 = insertelement <16 x i16> <i16 0, i16 0, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i16> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i16* %24 to <2 x i16>*
  %96 = load <2 x i16>, <2 x i16>* %95, align 2
  %97 = shufflevector <2 x i16> %96, <2 x i16> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i16> %97, <16 x i16> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i16, i16* %24, align 2
  %101 = insertelement <16 x i16> <i16 undef, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, i16 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %26, %43, %63, %83, %93, %99
  %104 = phi <16 x i16> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = lshr <16 x i16> %104, <i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11, i16 11>
  %106 = lshr <16 x i16> %104, <i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5, i16 5>
  %107 = and <16 x i16> %106, <i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63, i16 63>
  %108 = and <16 x i16> %104, <i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31, i16 31>
  %109 = shl nuw nsw <16 x i16> %105, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %110 = lshr <16 x i16> %104, <i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13, i16 13>
  %111 = or <16 x i16> %109, %110
  %112 = shl nuw nsw <16 x i16> %107, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %113 = lshr <16 x i16> %107, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %114 = or <16 x i16> %112, %113
  %115 = shl nuw nsw <16 x i16> %108, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %116 = lshr <16 x i16> %108, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %117 = or <16 x i16> %115, %116
  %118 = icmp ult <16 x i16> %7, %11
  %119 = icmp ult <16 x i16> %114, %117
  %120 = select <16 x i1> %119, <16 x i16> %114, <16 x i16> %117
  %121 = icmp ugt <16 x i16> %120, %111
  %122 = select <16 x i1> %121, <16 x i16> %111, <16 x i16> %120
  %123 = select <16 x i1> %119, <16 x i16> %117, <16 x i16> %114
  %124 = icmp ugt <16 x i16> %123, %111
  %125 = select <16 x i1> %124, <16 x i16> %123, <16 x i16> %111
  %126 = select <16 x i1> %118, <16 x i16> %122, <16 x i16> %125
  %127 = xor <16 x i16> %111, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %128 = mul <16 x i16> %127, %8
  %129 = mul <16 x i16> %111, %4
  %130 = add <16 x i16> %129, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %131 = add <16 x i16> %130, %128
  %132 = lshr <16 x i16> %131, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %133 = xor <16 x i16> %114, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %134 = mul <16 x i16> %133, %9
  %135 = mul <16 x i16> %114, %5
  %136 = add <16 x i16> %135, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %137 = add <16 x i16> %136, %134
  %138 = lshr <16 x i16> %137, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %139 = xor <16 x i16> %117, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %140 = mul <16 x i16> %139, %10
  %141 = mul <16 x i16> %117, %6
  %142 = add <16 x i16> %141, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %143 = add <16 x i16> %142, %140
  %144 = lshr <16 x i16> %143, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %145 = xor <16 x i16> %126, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %146 = mul <16 x i16> %145, %11
  %147 = mul <16 x i16> %126, %7
  %148 = add <16 x i16> %147, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %149 = add <16 x i16> %148, %146
  %150 = lshr <16 x i16> %149, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %151 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %152 = extractvalue { i8*, i8** } %151, 0
  %153 = extractvalue { i8*, i8** } %151, 1
  %154 = bitcast i8* %152 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %154(i64 %0, i8** %153, i64 %2, i64 %3, <16 x i16> %132, <16 x i16> %138, <16 x i16> %144, <16 x i16> %150, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL12lerp_1_floatEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to float*
  %17 = load float, float* %16, align 4
  %18 = fmul float %17, 2.550000e+02
  %19 = fadd float %18, 5.000000e-01
  %20 = fptoui float %19 to i16
  %21 = insertelement <16 x i16> undef, i16 %20, i32 0
  %22 = shufflevector <16 x i16> %21, <16 x i16> undef, <16 x i32> zeroinitializer
  %23 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %22
  %24 = mul <16 x i16> %23, %8
  %25 = mul <16 x i16> %22, %4
  %26 = add <16 x i16> %25, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %27 = add <16 x i16> %26, %24
  %28 = lshr <16 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = mul <16 x i16> %23, %9
  %30 = mul <16 x i16> %22, %5
  %31 = add <16 x i16> %30, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %32 = add <16 x i16> %31, %29
  %33 = lshr <16 x i16> %32, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %34 = mul <16 x i16> %23, %10
  %35 = mul <16 x i16> %22, %6
  %36 = add <16 x i16> %35, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %37 = add <16 x i16> %36, %34
  %38 = lshr <16 x i16> %37, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %39 = mul <16 x i16> %23, %11
  %40 = mul <16 x i16> %22, %7
  %41 = add <16 x i16> %40, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %42 = add <16 x i16> %41, %39
  %43 = lshr <16 x i16> %42, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %44 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %45 = extractvalue { i8*, i8** } %44, 0
  %46 = extractvalue { i8*, i8** } %44, 1
  %47 = bitcast i8* %45 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %47(i64 %0, i8** %46, i64 %2, i64 %3, <16 x i16> %28, <16 x i16> %33, <16 x i16> %38, <16 x i16> %43, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL11lerp_nativeEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <16 x i16>*
  %17 = load <16 x i16>, <16 x i16>* %16, align 2
  %18 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %17
  %19 = mul <16 x i16> %18, %8
  %20 = mul <16 x i16> %17, %4
  %21 = add <16 x i16> %20, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = add <16 x i16> %21, %19
  %23 = lshr <16 x i16> %22, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %24 = mul <16 x i16> %18, %9
  %25 = mul <16 x i16> %17, %5
  %26 = add <16 x i16> %25, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %27 = add <16 x i16> %26, %24
  %28 = lshr <16 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = mul <16 x i16> %18, %10
  %30 = mul <16 x i16> %17, %6
  %31 = add <16 x i16> %30, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %32 = add <16 x i16> %31, %29
  %33 = lshr <16 x i16> %32, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %34 = mul <16 x i16> %18, %11
  %35 = mul <16 x i16> %17, %7
  %36 = add <16 x i16> %35, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %37 = add <16 x i16> %36, %34
  %38 = lshr <16 x i16> %37, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %39 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %40 = extractvalue { i8*, i8** } %39, 0
  %41 = extractvalue { i8*, i8** } %39, 1
  %42 = bitcast i8* %40 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %42(i64 %0, i8** %41, i64 %2, i64 %3, <16 x i16> %23, <16 x i16> %28, <16 x i16> %33, <16 x i16> %38, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7dstatopEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = mul <16 x i16> %8, %7
  %14 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %11
  %15 = mul <16 x i16> %14, %4
  %16 = add <16 x i16> %13, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %17 = add <16 x i16> %16, %15
  %18 = lshr <16 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = mul <16 x i16> %9, %7
  %20 = mul <16 x i16> %14, %5
  %21 = add <16 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = add <16 x i16> %21, %20
  %23 = lshr <16 x i16> %22, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %24 = mul <16 x i16> %10, %7
  %25 = mul <16 x i16> %14, %6
  %26 = add <16 x i16> %24, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %27 = add <16 x i16> %26, %25
  %28 = lshr <16 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = mul <16 x i16> %7, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %30 = add <16 x i16> %29, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %31 = lshr <16 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %33 = extractvalue { i8*, i8** } %32, 0
  %34 = extractvalue { i8*, i8** } %32, 1
  %35 = bitcast i8* %33 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %35(i64 %0, i8** %34, i64 %2, i64 %3, <16 x i16> %18, <16 x i16> %23, <16 x i16> %28, <16 x i16> %31, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL5dstinEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = mul <16 x i16> %8, %7
  %14 = add <16 x i16> %13, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %15 = lshr <16 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = mul <16 x i16> %9, %7
  %17 = add <16 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %18 = lshr <16 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = mul <16 x i16> %10, %7
  %20 = add <16 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %21 = lshr <16 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = mul <16 x i16> %11, %7
  %23 = add <16 x i16> %22, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %24 = lshr <16 x i16> %23, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <16 x i16> %15, <16 x i16> %18, <16 x i16> %21, <16 x i16> %24, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL6dstoutEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %14 = mul <16 x i16> %13, %8
  %15 = add <16 x i16> %14, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = lshr <16 x i16> %15, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = mul <16 x i16> %13, %9
  %18 = add <16 x i16> %17, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = lshr <16 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %20 = mul <16 x i16> %13, %10
  %21 = add <16 x i16> %20, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = lshr <16 x i16> %21, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = mul <16 x i16> %13, %11
  %24 = add <16 x i16> %23, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %25 = lshr <16 x i16> %24, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <16 x i16> %16, <16 x i16> %19, <16 x i16> %22, <16 x i16> %25, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7dstoverEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %11
  %14 = mul <16 x i16> %13, %4
  %15 = add <16 x i16> %14, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = lshr <16 x i16> %15, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = add <16 x i16> %16, %8
  %18 = mul <16 x i16> %13, %5
  %19 = add <16 x i16> %18, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %20 = lshr <16 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %21 = add <16 x i16> %20, %9
  %22 = mul <16 x i16> %13, %6
  %23 = add <16 x i16> %22, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %24 = lshr <16 x i16> %23, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %25 = add <16 x i16> %24, %10
  %26 = mul <16 x i16> %13, %7
  %27 = add <16 x i16> %26, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %28 = lshr <16 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = add <16 x i16> %28, %11
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <16 x i16> %17, <16 x i16> %21, <16 x i16> %25, <16 x i16> %29, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7srcatopEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = mul <16 x i16> %11, %4
  %14 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %15 = mul <16 x i16> %14, %8
  %16 = add <16 x i16> %15, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %17 = add <16 x i16> %16, %13
  %18 = lshr <16 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = mul <16 x i16> %11, %5
  %20 = mul <16 x i16> %14, %9
  %21 = add <16 x i16> %20, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = add <16 x i16> %21, %19
  %23 = lshr <16 x i16> %22, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %24 = mul <16 x i16> %11, %6
  %25 = mul <16 x i16> %14, %10
  %26 = add <16 x i16> %25, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %27 = add <16 x i16> %26, %24
  %28 = lshr <16 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = mul <16 x i16> %11, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %30 = add <16 x i16> %29, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %31 = lshr <16 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %33 = extractvalue { i8*, i8** } %32, 0
  %34 = extractvalue { i8*, i8** } %32, 1
  %35 = bitcast i8* %33 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %35(i64 %0, i8** %34, i64 %2, i64 %3, <16 x i16> %18, <16 x i16> %23, <16 x i16> %28, <16 x i16> %31, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL5srcinEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = mul <16 x i16> %11, %4
  %14 = add <16 x i16> %13, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %15 = lshr <16 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = mul <16 x i16> %11, %5
  %17 = add <16 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %18 = lshr <16 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = mul <16 x i16> %11, %6
  %20 = add <16 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %21 = lshr <16 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = mul <16 x i16> %11, %7
  %23 = add <16 x i16> %22, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %24 = lshr <16 x i16> %23, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <16 x i16> %15, <16 x i16> %18, <16 x i16> %21, <16 x i16> %24, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL6srcoutEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %11
  %14 = mul <16 x i16> %13, %4
  %15 = add <16 x i16> %14, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = lshr <16 x i16> %15, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = mul <16 x i16> %13, %5
  %18 = add <16 x i16> %17, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = lshr <16 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %20 = mul <16 x i16> %13, %6
  %21 = add <16 x i16> %20, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = lshr <16 x i16> %21, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = mul <16 x i16> %13, %7
  %24 = add <16 x i16> %23, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %25 = lshr <16 x i16> %24, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <16 x i16> %16, <16 x i16> %19, <16 x i16> %22, <16 x i16> %25, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7srcoverEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %14 = mul <16 x i16> %13, %8
  %15 = add <16 x i16> %14, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = lshr <16 x i16> %15, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = add <16 x i16> %16, %4
  %18 = mul <16 x i16> %13, %9
  %19 = add <16 x i16> %18, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %20 = lshr <16 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %21 = add <16 x i16> %20, %5
  %22 = mul <16 x i16> %13, %10
  %23 = add <16 x i16> %22, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %24 = lshr <16 x i16> %23, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %25 = add <16 x i16> %24, %6
  %26 = mul <16 x i16> %13, %11
  %27 = add <16 x i16> %26, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %28 = lshr <16 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = add <16 x i16> %28, %7
  %30 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %31 = extractvalue { i8*, i8** } %30, 0
  %32 = extractvalue { i8*, i8** } %30, 1
  %33 = bitcast i8* %31 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %33(i64 %0, i8** %32, i64 %2, i64 %3, <16 x i16> %17, <16 x i16> %21, <16 x i16> %25, <16 x i16> %29, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL5clearEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %16(i64 %0, i8** %15, i64 %2, i64 %3, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL8modulateEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = mul <16 x i16> %8, %4
  %14 = add <16 x i16> %13, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %15 = lshr <16 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = mul <16 x i16> %9, %5
  %17 = add <16 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %18 = lshr <16 x i16> %17, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %19 = mul <16 x i16> %10, %6
  %20 = add <16 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %21 = lshr <16 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = mul <16 x i16> %11, %7
  %23 = add <16 x i16> %22, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %24 = lshr <16 x i16> %23, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <16 x i16> %15, <16 x i16> %18, <16 x i16> %21, <16 x i16> %24, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL8multiplyEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %14 = mul <16 x i16> %13, %8
  %15 = add <16 x i16> %8, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = sub <16 x i16> %15, %11
  %17 = mul <16 x i16> %16, %4
  %18 = add <16 x i16> %14, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = add <16 x i16> %18, %17
  %20 = lshr <16 x i16> %19, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %21 = mul <16 x i16> %13, %9
  %22 = add <16 x i16> %9, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %23 = sub <16 x i16> %22, %11
  %24 = mul <16 x i16> %23, %5
  %25 = add <16 x i16> %21, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %26 = add <16 x i16> %25, %24
  %27 = lshr <16 x i16> %26, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %28 = mul <16 x i16> %13, %10
  %29 = add <16 x i16> %10, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %30 = sub <16 x i16> %29, %11
  %31 = mul <16 x i16> %30, %6
  %32 = add <16 x i16> %28, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %33 = add <16 x i16> %32, %31
  %34 = lshr <16 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = mul <16 x i16> %13, %11
  %36 = mul <16 x i16> %7, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %37 = add <16 x i16> %36, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %38 = add <16 x i16> %37, %35
  %39 = lshr <16 x i16> %38, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %40 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %41 = extractvalue { i8*, i8** } %40, 0
  %42 = extractvalue { i8*, i8** } %40, 1
  %43 = bitcast i8* %41 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %43(i64 %0, i8** %42, i64 %2, i64 %3, <16 x i16> %20, <16 x i16> %27, <16 x i16> %34, <16 x i16> %39, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL5plus_EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = add <16 x i16> %8, %4
  %14 = icmp ult <16 x i16> %13, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %15 = select <16 x i1> %14, <16 x i16> %13, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = add <16 x i16> %9, %5
  %17 = icmp ult <16 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %18 = select <16 x i1> %17, <16 x i16> %16, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = add <16 x i16> %10, %6
  %20 = icmp ult <16 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %21 = select <16 x i1> %20, <16 x i16> %19, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = add <16 x i16> %11, %7
  %23 = icmp ult <16 x i16> %22, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %24 = select <16 x i1> %23, <16 x i16> %22, <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %25 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %26 = extractvalue { i8*, i8** } %25, 0
  %27 = extractvalue { i8*, i8** } %25, 1
  %28 = bitcast i8* %26 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %28(i64 %0, i8** %27, i64 %2, i64 %3, <16 x i16> %15, <16 x i16> %18, <16 x i16> %21, <16 x i16> %24, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL6screenEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = add <16 x i16> %8, %4
  %14 = mul <16 x i16> %8, %4
  %15 = add <16 x i16> %14, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = lshr <16 x i16> %15, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = sub <16 x i16> %13, %16
  %18 = add <16 x i16> %9, %5
  %19 = mul <16 x i16> %9, %5
  %20 = add <16 x i16> %19, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %21 = lshr <16 x i16> %20, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %22 = sub <16 x i16> %18, %21
  %23 = add <16 x i16> %10, %6
  %24 = mul <16 x i16> %10, %6
  %25 = add <16 x i16> %24, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %26 = lshr <16 x i16> %25, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %27 = sub <16 x i16> %23, %26
  %28 = add <16 x i16> %11, %7
  %29 = mul <16 x i16> %11, %7
  %30 = add <16 x i16> %29, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %31 = lshr <16 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = sub <16 x i16> %28, %31
  %33 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %34 = extractvalue { i8*, i8** } %33, 0
  %35 = extractvalue { i8*, i8** } %33, 1
  %36 = bitcast i8* %34 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %36(i64 %0, i8** %35, i64 %2, i64 %3, <16 x i16> %17, <16 x i16> %22, <16 x i16> %27, <16 x i16> %32, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL4xor_EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %11
  %14 = mul <16 x i16> %13, %4
  %15 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %16 = mul <16 x i16> %15, %8
  %17 = add <16 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %18 = add <16 x i16> %17, %14
  %19 = lshr <16 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %20 = mul <16 x i16> %13, %5
  %21 = mul <16 x i16> %15, %9
  %22 = add <16 x i16> %21, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %23 = add <16 x i16> %22, %20
  %24 = lshr <16 x i16> %23, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %25 = mul <16 x i16> %13, %6
  %26 = mul <16 x i16> %15, %10
  %27 = add <16 x i16> %26, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %28 = add <16 x i16> %27, %25
  %29 = lshr <16 x i16> %28, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %30 = mul <16 x i16> %13, %7
  %31 = mul <16 x i16> %15, %11
  %32 = add <16 x i16> %31, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %33 = add <16 x i16> %32, %30
  %34 = lshr <16 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %36 = extractvalue { i8*, i8** } %35, 0
  %37 = extractvalue { i8*, i8** } %35, 1
  %38 = bitcast i8* %36 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %38(i64 %0, i8** %37, i64 %2, i64 %3, <16 x i16> %19, <16 x i16> %24, <16 x i16> %29, <16 x i16> %34, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL6darkenEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = add <16 x i16> %8, %4
  %14 = mul <16 x i16> %11, %4
  %15 = mul <16 x i16> %8, %7
  %16 = icmp ult <16 x i16> %14, %15
  %17 = select <16 x i1> %16, <16 x i16> %15, <16 x i16> %14
  %18 = add <16 x i16> %17, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = lshr <16 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %20 = sub <16 x i16> %13, %19
  %21 = add <16 x i16> %9, %5
  %22 = mul <16 x i16> %11, %5
  %23 = mul <16 x i16> %9, %7
  %24 = icmp ult <16 x i16> %22, %23
  %25 = select <16 x i1> %24, <16 x i16> %23, <16 x i16> %22
  %26 = add <16 x i16> %25, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %27 = lshr <16 x i16> %26, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %28 = sub <16 x i16> %21, %27
  %29 = add <16 x i16> %10, %6
  %30 = mul <16 x i16> %11, %6
  %31 = mul <16 x i16> %10, %7
  %32 = icmp ult <16 x i16> %30, %31
  %33 = select <16 x i1> %32, <16 x i16> %31, <16 x i16> %30
  %34 = add <16 x i16> %33, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %35 = lshr <16 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %36 = sub <16 x i16> %29, %35
  %37 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %38 = mul <16 x i16> %37, %11
  %39 = add <16 x i16> %38, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %40 = lshr <16 x i16> %39, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %41 = add <16 x i16> %40, %7
  %42 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %43 = extractvalue { i8*, i8** } %42, 0
  %44 = extractvalue { i8*, i8** } %42, 1
  %45 = bitcast i8* %43 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %45(i64 %0, i8** %44, i64 %2, i64 %3, <16 x i16> %20, <16 x i16> %28, <16 x i16> %36, <16 x i16> %41, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL10differenceEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = add <16 x i16> %8, %4
  %14 = mul <16 x i16> %11, %4
  %15 = mul <16 x i16> %8, %7
  %16 = icmp ult <16 x i16> %14, %15
  %17 = select <16 x i1> %16, <16 x i16> %14, <16 x i16> %15
  %18 = add <16 x i16> %17, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = lshr <16 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %20 = shl nuw nsw <16 x i16> %19, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %21 = sub <16 x i16> %13, %20
  %22 = add <16 x i16> %9, %5
  %23 = mul <16 x i16> %11, %5
  %24 = mul <16 x i16> %9, %7
  %25 = icmp ult <16 x i16> %23, %24
  %26 = select <16 x i1> %25, <16 x i16> %23, <16 x i16> %24
  %27 = add <16 x i16> %26, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %28 = lshr <16 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = shl nuw nsw <16 x i16> %28, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %30 = sub <16 x i16> %22, %29
  %31 = add <16 x i16> %10, %6
  %32 = mul <16 x i16> %11, %6
  %33 = mul <16 x i16> %10, %7
  %34 = icmp ult <16 x i16> %32, %33
  %35 = select <16 x i1> %34, <16 x i16> %32, <16 x i16> %33
  %36 = add <16 x i16> %35, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %37 = lshr <16 x i16> %36, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %38 = shl nuw nsw <16 x i16> %37, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %39 = sub <16 x i16> %31, %38
  %40 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %41 = mul <16 x i16> %40, %11
  %42 = add <16 x i16> %41, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %43 = lshr <16 x i16> %42, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %44 = add <16 x i16> %43, %7
  %45 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %46 = extractvalue { i8*, i8** } %45, 0
  %47 = extractvalue { i8*, i8** } %45, 1
  %48 = bitcast i8* %46 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %48(i64 %0, i8** %47, i64 %2, i64 %3, <16 x i16> %21, <16 x i16> %30, <16 x i16> %39, <16 x i16> %44, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL9exclusionEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = add <16 x i16> %8, %4
  %14 = mul <16 x i16> %8, %4
  %15 = add <16 x i16> %14, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %16 = lshr <16 x i16> %15, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %17 = shl nuw nsw <16 x i16> %16, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18 = sub <16 x i16> %13, %17
  %19 = add <16 x i16> %9, %5
  %20 = mul <16 x i16> %9, %5
  %21 = add <16 x i16> %20, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %22 = lshr <16 x i16> %21, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %23 = shl nuw nsw <16 x i16> %22, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %24 = sub <16 x i16> %19, %23
  %25 = add <16 x i16> %10, %6
  %26 = mul <16 x i16> %10, %6
  %27 = add <16 x i16> %26, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %28 = lshr <16 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = shl nuw nsw <16 x i16> %28, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %30 = sub <16 x i16> %25, %29
  %31 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %32 = mul <16 x i16> %31, %11
  %33 = add <16 x i16> %32, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %34 = lshr <16 x i16> %33, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %35 = add <16 x i16> %34, %7
  %36 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %37 = extractvalue { i8*, i8** } %36, 0
  %38 = extractvalue { i8*, i8** } %36, 1
  %39 = bitcast i8* %37 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %39(i64 %0, i8** %38, i64 %2, i64 %3, <16 x i16> %18, <16 x i16> %24, <16 x i16> %30, <16 x i16> %35, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL9hardlightEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %11
  %14 = mul <16 x i16> %13, %4
  %15 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %16 = mul <16 x i16> %15, %8
  %17 = shl <16 x i16> %4, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18 = icmp ugt <16 x i16> %17, %7
  %19 = mul <16 x i16> %17, %8
  %20 = mul <16 x i16> %11, %7
  %21 = sub <16 x i16> %7, %4
  %22 = shl <16 x i16> %21, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %23 = sub <16 x i16> %11, %8
  %24 = mul <16 x i16> %23, %22
  %25 = sub <16 x i16> %20, %24
  %26 = select <16 x i1> %18, <16 x i16> %25, <16 x i16> %19
  %27 = add <16 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %28 = add <16 x i16> %27, %14
  %29 = add <16 x i16> %28, %26
  %30 = lshr <16 x i16> %29, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %31 = mul <16 x i16> %13, %5
  %32 = mul <16 x i16> %15, %9
  %33 = shl <16 x i16> %5, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %34 = icmp ugt <16 x i16> %33, %7
  %35 = mul <16 x i16> %33, %9
  %36 = sub <16 x i16> %7, %5
  %37 = shl <16 x i16> %36, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %38 = sub <16 x i16> %11, %9
  %39 = mul <16 x i16> %38, %37
  %40 = sub <16 x i16> %20, %39
  %41 = select <16 x i1> %34, <16 x i16> %40, <16 x i16> %35
  %42 = add <16 x i16> %32, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %43 = add <16 x i16> %42, %31
  %44 = add <16 x i16> %43, %41
  %45 = lshr <16 x i16> %44, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %46 = mul <16 x i16> %13, %6
  %47 = mul <16 x i16> %15, %10
  %48 = shl <16 x i16> %6, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %49 = icmp ugt <16 x i16> %48, %7
  %50 = mul <16 x i16> %48, %10
  %51 = sub <16 x i16> %7, %6
  %52 = shl <16 x i16> %51, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %53 = sub <16 x i16> %11, %10
  %54 = mul <16 x i16> %53, %52
  %55 = sub <16 x i16> %20, %54
  %56 = select <16 x i1> %49, <16 x i16> %55, <16 x i16> %50
  %57 = add <16 x i16> %47, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %58 = add <16 x i16> %57, %46
  %59 = add <16 x i16> %58, %56
  %60 = lshr <16 x i16> %59, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %61 = mul <16 x i16> %15, %11
  %62 = add <16 x i16> %61, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %63 = lshr <16 x i16> %62, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %64 = add <16 x i16> %63, %7
  %65 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %66 = extractvalue { i8*, i8** } %65, 0
  %67 = extractvalue { i8*, i8** } %65, 1
  %68 = bitcast i8* %66 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %68(i64 %0, i8** %67, i64 %2, i64 %3, <16 x i16> %30, <16 x i16> %45, <16 x i16> %60, <16 x i16> %64, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7lightenEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = add <16 x i16> %8, %4
  %14 = mul <16 x i16> %11, %4
  %15 = mul <16 x i16> %8, %7
  %16 = icmp ult <16 x i16> %14, %15
  %17 = select <16 x i1> %16, <16 x i16> %14, <16 x i16> %15
  %18 = add <16 x i16> %17, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %19 = lshr <16 x i16> %18, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %20 = sub <16 x i16> %13, %19
  %21 = add <16 x i16> %9, %5
  %22 = mul <16 x i16> %11, %5
  %23 = mul <16 x i16> %9, %7
  %24 = icmp ult <16 x i16> %22, %23
  %25 = select <16 x i1> %24, <16 x i16> %22, <16 x i16> %23
  %26 = add <16 x i16> %25, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %27 = lshr <16 x i16> %26, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %28 = sub <16 x i16> %21, %27
  %29 = add <16 x i16> %10, %6
  %30 = mul <16 x i16> %11, %6
  %31 = mul <16 x i16> %10, %7
  %32 = icmp ult <16 x i16> %30, %31
  %33 = select <16 x i1> %32, <16 x i16> %30, <16 x i16> %31
  %34 = add <16 x i16> %33, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %35 = lshr <16 x i16> %34, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %36 = sub <16 x i16> %29, %35
  %37 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %38 = mul <16 x i16> %37, %11
  %39 = add <16 x i16> %38, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %40 = lshr <16 x i16> %39, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %41 = add <16 x i16> %40, %7
  %42 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %43 = extractvalue { i8*, i8** } %42, 0
  %44 = extractvalue { i8*, i8** } %42, 1
  %45 = bitcast i8* %43 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %45(i64 %0, i8** %44, i64 %2, i64 %3, <16 x i16> %20, <16 x i16> %28, <16 x i16> %36, <16 x i16> %41, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7overlayEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %11
  %14 = mul <16 x i16> %13, %4
  %15 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %16 = mul <16 x i16> %15, %8
  %17 = shl <16 x i16> %8, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18 = icmp ugt <16 x i16> %17, %11
  %19 = shl <16 x i16> %4, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %20 = mul <16 x i16> %19, %8
  %21 = mul <16 x i16> %11, %7
  %22 = sub <16 x i16> %7, %4
  %23 = shl <16 x i16> %22, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %24 = sub <16 x i16> %11, %8
  %25 = mul <16 x i16> %24, %23
  %26 = sub <16 x i16> %21, %25
  %27 = select <16 x i1> %18, <16 x i16> %26, <16 x i16> %20
  %28 = add <16 x i16> %16, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %29 = add <16 x i16> %28, %14
  %30 = add <16 x i16> %29, %27
  %31 = lshr <16 x i16> %30, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %32 = mul <16 x i16> %13, %5
  %33 = mul <16 x i16> %15, %9
  %34 = shl <16 x i16> %9, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %35 = icmp ugt <16 x i16> %34, %11
  %36 = shl <16 x i16> %5, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %37 = mul <16 x i16> %36, %9
  %38 = sub <16 x i16> %7, %5
  %39 = shl <16 x i16> %38, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %40 = sub <16 x i16> %11, %9
  %41 = mul <16 x i16> %40, %39
  %42 = sub <16 x i16> %21, %41
  %43 = select <16 x i1> %35, <16 x i16> %42, <16 x i16> %37
  %44 = add <16 x i16> %33, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %45 = add <16 x i16> %44, %32
  %46 = add <16 x i16> %45, %43
  %47 = lshr <16 x i16> %46, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %48 = mul <16 x i16> %13, %6
  %49 = mul <16 x i16> %15, %10
  %50 = shl <16 x i16> %10, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %51 = icmp ugt <16 x i16> %50, %11
  %52 = shl <16 x i16> %6, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %53 = mul <16 x i16> %52, %10
  %54 = sub <16 x i16> %7, %6
  %55 = shl <16 x i16> %54, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %56 = sub <16 x i16> %11, %10
  %57 = mul <16 x i16> %56, %55
  %58 = sub <16 x i16> %21, %57
  %59 = select <16 x i1> %51, <16 x i16> %58, <16 x i16> %53
  %60 = add <16 x i16> %49, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %61 = add <16 x i16> %60, %48
  %62 = add <16 x i16> %61, %59
  %63 = lshr <16 x i16> %62, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %64 = mul <16 x i16> %15, %11
  %65 = add <16 x i16> %64, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %66 = lshr <16 x i16> %65, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %67 = add <16 x i16> %66, %7
  %68 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %69 = extractvalue { i8*, i8** } %68, 0
  %70 = extractvalue { i8*, i8** } %68, 1
  %71 = bitcast i8* %69 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %71(i64 %0, i8** %70, i64 %2, i64 %3, <16 x i16> %31, <16 x i16> %47, <16 x i16> %63, <16 x i16> %67, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL17srcover_rgba_8888EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i32, i32* %17, i64 %22
  %24 = getelementptr inbounds i32, i32* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %102 [
    i64 0, label %26
    i64 15, label %29
    i64 14, label %33
    i64 13, label %38
    i64 12, label %43
    i64 11, label %49
    i64 10, label %53
    i64 9, label %58
    i64 8, label %63
    i64 7, label %69
    i64 6, label %73
    i64 5, label %78
    i64 4, label %83
    i64 3, label %89
    i64 2, label %93
    i64 1, label %99
  ]

26:                                               ; preds = %12
  %27 = bitcast i32* %24 to <16 x i32>*
  %28 = load <16 x i32>, <16 x i32>* %27, align 4
  br label %103

29:                                               ; preds = %12
  %30 = getelementptr inbounds i32, i32* %24, i64 14
  %31 = load i32, i32* %30, align 4
  %32 = insertelement <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0>, i32 %31, i32 14
  br label %33

33:                                               ; preds = %29, %12
  %34 = phi <16 x i32> [ zeroinitializer, %12 ], [ %32, %29 ]
  %35 = getelementptr inbounds i32, i32* %24, i64 13
  %36 = load i32, i32* %35, align 4
  %37 = insertelement <16 x i32> %34, i32 %36, i32 13
  br label %38

38:                                               ; preds = %33, %12
  %39 = phi <16 x i32> [ zeroinitializer, %12 ], [ %37, %33 ]
  %40 = getelementptr inbounds i32, i32* %24, i64 12
  %41 = load i32, i32* %40, align 4
  %42 = insertelement <16 x i32> %39, i32 %41, i32 12
  br label %43

43:                                               ; preds = %38, %12
  %44 = phi <16 x i32> [ zeroinitializer, %12 ], [ %42, %38 ]
  %45 = bitcast i32* %24 to <12 x i32>*
  %46 = load <12 x i32>, <12 x i32>* %45, align 4
  %47 = shufflevector <12 x i32> %46, <12 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = shufflevector <16 x i32> %47, <16 x i32> %44, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %103

49:                                               ; preds = %12
  %50 = getelementptr inbounds i32, i32* %24, i64 10
  %51 = load i32, i32* %50, align 4
  %52 = insertelement <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %51, i32 10
  br label %53

53:                                               ; preds = %49, %12
  %54 = phi <16 x i32> [ zeroinitializer, %12 ], [ %52, %49 ]
  %55 = getelementptr inbounds i32, i32* %24, i64 9
  %56 = load i32, i32* %55, align 4
  %57 = insertelement <16 x i32> %54, i32 %56, i32 9
  br label %58

58:                                               ; preds = %53, %12
  %59 = phi <16 x i32> [ zeroinitializer, %12 ], [ %57, %53 ]
  %60 = getelementptr inbounds i32, i32* %24, i64 8
  %61 = load i32, i32* %60, align 4
  %62 = insertelement <16 x i32> %59, i32 %61, i32 8
  br label %63

63:                                               ; preds = %58, %12
  %64 = phi <16 x i32> [ zeroinitializer, %12 ], [ %62, %58 ]
  %65 = bitcast i32* %24 to <8 x i32>*
  %66 = load <8 x i32>, <8 x i32>* %65, align 4
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %68 = shufflevector <16 x i32> %67, <16 x i32> %64, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

69:                                               ; preds = %12
  %70 = getelementptr inbounds i32, i32* %24, i64 6
  %71 = load i32, i32* %70, align 4
  %72 = insertelement <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %71, i32 6
  br label %73

73:                                               ; preds = %69, %12
  %74 = phi <16 x i32> [ zeroinitializer, %12 ], [ %72, %69 ]
  %75 = getelementptr inbounds i32, i32* %24, i64 5
  %76 = load i32, i32* %75, align 4
  %77 = insertelement <16 x i32> %74, i32 %76, i32 5
  br label %78

78:                                               ; preds = %73, %12
  %79 = phi <16 x i32> [ zeroinitializer, %12 ], [ %77, %73 ]
  %80 = getelementptr inbounds i32, i32* %24, i64 4
  %81 = load i32, i32* %80, align 4
  %82 = insertelement <16 x i32> %79, i32 %81, i32 4
  br label %83

83:                                               ; preds = %78, %12
  %84 = phi <16 x i32> [ zeroinitializer, %12 ], [ %82, %78 ]
  %85 = bitcast i32* %24 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %88 = shufflevector <16 x i32> %87, <16 x i32> %84, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

89:                                               ; preds = %12
  %90 = getelementptr inbounds i32, i32* %24, i64 2
  %91 = load i32, i32* %90, align 4
  %92 = insertelement <16 x i32> <i32 0, i32 0, i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %91, i32 2
  br label %93

93:                                               ; preds = %89, %12
  %94 = phi <16 x i32> [ zeroinitializer, %12 ], [ %92, %89 ]
  %95 = bitcast i32* %24 to <2 x i32>*
  %96 = load <2 x i32>, <2 x i32>* %95, align 4
  %97 = shufflevector <2 x i32> %96, <2 x i32> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = shufflevector <16 x i32> %97, <16 x i32> %94, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %103

99:                                               ; preds = %12
  %100 = load i32, i32* %24, align 4
  %101 = insertelement <16 x i32> <i32 undef, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, i32 %100, i32 0
  br label %103

102:                                              ; preds = %12
  unreachable

103:                                              ; preds = %99, %93, %83, %63, %43, %26
  %104 = phi <16 x i32> [ %101, %99 ], [ %98, %93 ], [ %88, %83 ], [ %68, %63 ], [ %48, %43 ], [ %28, %26 ]
  %105 = shufflevector <16 x i32> %104, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %106 = bitcast <8 x i32> %105 to <4 x i64>
  %107 = shufflevector <16 x i32> %104, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %108 = bitcast <8 x i32> %107 to <4 x i64>
  %109 = shufflevector <4 x i64> %106, <4 x i64> %108, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %110 = shufflevector <4 x i64> %106, <4 x i64> %108, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %111 = bitcast <4 x i64> %109 to <8 x i32>
  %112 = shufflevector <8 x i32> %111, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %113 = bitcast <4 x i64> %110 to <8 x i32>
  %114 = shufflevector <8 x i32> %113, <8 x i32> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %115 = shufflevector <16 x i32> %112, <16 x i32> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %116 = and <16 x i32> %115, <i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535, i32 65535>
  %117 = shufflevector <16 x i32> %116, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %118 = shufflevector <16 x i32> %116, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %119 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %117, <8 x i32> %118) #13
  %120 = and <16 x i16> %119, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %121 = lshr <16 x i16> %119, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %122 = lshr <16 x i32> %115, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %123 = shufflevector <16 x i32> %122, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %124 = shufflevector <16 x i32> %122, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %125 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %123, <8 x i32> %124) #13
  %126 = and <16 x i16> %125, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %127 = lshr <16 x i16> %125, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %128 = sub <16 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %7
  %129 = mul <16 x i16> %120, %128
  %130 = add <16 x i16> %129, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %131 = lshr <16 x i16> %130, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %132 = add <16 x i16> %131, %4
  %133 = mul <16 x i16> %121, %128
  %134 = add <16 x i16> %133, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %135 = lshr <16 x i16> %134, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %136 = add <16 x i16> %135, %5
  %137 = mul <16 x i16> %126, %128
  %138 = add <16 x i16> %137, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %139 = lshr <16 x i16> %138, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %140 = add <16 x i16> %139, %6
  %141 = mul <16 x i16> %127, %128
  %142 = add <16 x i16> %141, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %143 = lshr <16 x i16> %142, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %144 = add <16 x i16> %143, %7
  %145 = shl <16 x i16> %136, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %146 = or <16 x i16> %145, %132
  %147 = zext <16 x i16> %146 to <16 x i32>
  %148 = shl <16 x i16> %144, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %149 = or <16 x i16> %148, %140
  %150 = zext <16 x i16> %149 to <16 x i32>
  %151 = shl nuw <16 x i32> %150, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %152 = or <16 x i32> %151, %147
  switch i64 %25, label %199 [
    i64 0, label %153
    i64 15, label %155
    i64 14, label %158
    i64 13, label %161
    i64 12, label %164
    i64 11, label %167
    i64 10, label %170
    i64 9, label %173
    i64 8, label %176
    i64 7, label %179
    i64 6, label %182
    i64 5, label %185
    i64 4, label %188
    i64 3, label %191
    i64 2, label %194
    i64 1, label %197
  ]

153:                                              ; preds = %103
  %154 = bitcast i32* %24 to <16 x i32>*
  store <16 x i32> %152, <16 x i32>* %154, align 4
  br label %200

155:                                              ; preds = %103
  %156 = extractelement <16 x i32> %152, i32 14
  %157 = getelementptr inbounds i32, i32* %24, i64 14
  store i32 %156, i32* %157, align 4
  br label %158

158:                                              ; preds = %155, %103
  %159 = extractelement <16 x i32> %152, i32 13
  %160 = getelementptr inbounds i32, i32* %24, i64 13
  store i32 %159, i32* %160, align 4
  br label %161

161:                                              ; preds = %158, %103
  %162 = extractelement <16 x i32> %152, i32 12
  %163 = getelementptr inbounds i32, i32* %24, i64 12
  store i32 %162, i32* %163, align 4
  br label %164

164:                                              ; preds = %161, %103
  %165 = bitcast i32* %24 to <12 x i32>*
  %166 = shufflevector <16 x i32> %152, <16 x i32> undef, <12 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11>
  store <12 x i32> %166, <12 x i32>* %165, align 4
  br label %200

167:                                              ; preds = %103
  %168 = extractelement <16 x i32> %152, i32 10
  %169 = getelementptr inbounds i32, i32* %24, i64 10
  store i32 %168, i32* %169, align 4
  br label %170

170:                                              ; preds = %167, %103
  %171 = extractelement <16 x i32> %152, i32 9
  %172 = getelementptr inbounds i32, i32* %24, i64 9
  store i32 %171, i32* %172, align 4
  br label %173

173:                                              ; preds = %170, %103
  %174 = extractelement <16 x i32> %152, i32 8
  %175 = getelementptr inbounds i32, i32* %24, i64 8
  store i32 %174, i32* %175, align 4
  br label %176

176:                                              ; preds = %173, %103
  %177 = bitcast i32* %24 to <8 x i32>*
  %178 = shufflevector <16 x i32> %152, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i32> %178, <8 x i32>* %177, align 4
  br label %200

179:                                              ; preds = %103
  %180 = extractelement <16 x i32> %152, i32 6
  %181 = getelementptr inbounds i32, i32* %24, i64 6
  store i32 %180, i32* %181, align 4
  br label %182

182:                                              ; preds = %179, %103
  %183 = extractelement <16 x i32> %152, i32 5
  %184 = getelementptr inbounds i32, i32* %24, i64 5
  store i32 %183, i32* %184, align 4
  br label %185

185:                                              ; preds = %182, %103
  %186 = extractelement <16 x i32> %152, i32 4
  %187 = getelementptr inbounds i32, i32* %24, i64 4
  store i32 %186, i32* %187, align 4
  br label %188

188:                                              ; preds = %185, %103
  %189 = bitcast i32* %24 to <4 x i32>*
  %190 = shufflevector <16 x i32> %152, <16 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %190, <4 x i32>* %189, align 4
  br label %200

191:                                              ; preds = %103
  %192 = extractelement <16 x i32> %152, i32 2
  %193 = getelementptr inbounds i32, i32* %24, i64 2
  store i32 %192, i32* %193, align 4
  br label %194

194:                                              ; preds = %191, %103
  %195 = bitcast i32* %24 to <2 x i32>*
  %196 = shufflevector <16 x i32> %152, <16 x i32> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i32> %196, <2 x i32>* %195, align 4
  br label %200

197:                                              ; preds = %103
  %198 = extractelement <16 x i32> %152, i32 0
  store i32 %198, i32* %24, align 4
  br label %200

199:                                              ; preds = %103
  unreachable

200:                                              ; preds = %153, %164, %176, %188, %194, %197
  %201 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %202 = extractvalue { i8*, i8** } %201, 0
  %203 = extractvalue { i8*, i8** } %201, 1
  %204 = bitcast i8* %202 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %204(i64 %0, i8** %203, i64 %2, i64 %3, <16 x i16> %132, <16 x i16> %136, <16 x i16> %140, <16 x i16> %144, <16 x i16> %120, <16 x i16> %121, <16 x i16> %126, <16 x i16> %127) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL16matrix_translateEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = bitcast <16 x i16> %6 to <8 x float>
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <16 x i16> %7 to <8 x float>
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <16 x float> %19, <16 x float> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <16 x float> undef, float %27, i32 0
  %29 = shufflevector <16 x float> %28, <16 x float> undef, <16 x i32> zeroinitializer
  %30 = fadd <16 x float> %17, %29
  %31 = getelementptr inbounds i8, i8* %24, i64 4
  %32 = bitcast i8* %31 to float*
  %33 = load float, float* %32, align 4
  %34 = insertelement <16 x float> undef, float %33, i32 0
  %35 = shufflevector <16 x float> %34, <16 x float> undef, <16 x i32> zeroinitializer
  %36 = fadd <16 x float> %22, %35
  %37 = shufflevector <16 x float> %30, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %38 = bitcast <8 x float> %37 to <16 x i16>
  %39 = shufflevector <16 x float> %30, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %40 = bitcast <8 x float> %39 to <16 x i16>
  %41 = shufflevector <16 x float> %36, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %42 = bitcast <8 x float> %41 to <16 x i16>
  %43 = shufflevector <16 x float> %36, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %44 = bitcast <8 x float> %43 to <16 x i16>
  %45 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #10, !srcloc !98
  %46 = extractvalue { i8*, i8** } %45, 0
  %47 = extractvalue { i8*, i8** } %45, 1
  %48 = bitcast i8* %46 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %48(i64 %0, i8** %47, i64 %2, i64 %3, <16 x i16> %38, <16 x i16> %40, <16 x i16> %42, <16 x i16> %44, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL22matrix_scale_translateEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = bitcast <16 x i16> %6 to <8 x float>
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <16 x i16> %7 to <8 x float>
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <16 x float> %19, <16 x float> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <16 x float> undef, float %27, i32 0
  %29 = shufflevector <16 x float> %28, <16 x float> undef, <16 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %24, i64 8
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <16 x float> undef, float %32, i32 0
  %34 = shufflevector <16 x float> %33, <16 x float> undef, <16 x i32> zeroinitializer
  %35 = fmul <16 x float> %17, %29
  %36 = fadd <16 x float> %35, %34
  %37 = getelementptr inbounds i8, i8* %24, i64 4
  %38 = bitcast i8* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = insertelement <16 x float> undef, float %39, i32 0
  %41 = shufflevector <16 x float> %40, <16 x float> undef, <16 x i32> zeroinitializer
  %42 = getelementptr inbounds i8, i8* %24, i64 12
  %43 = bitcast i8* %42 to float*
  %44 = load float, float* %43, align 4
  %45 = insertelement <16 x float> undef, float %44, i32 0
  %46 = shufflevector <16 x float> %45, <16 x float> undef, <16 x i32> zeroinitializer
  %47 = fmul <16 x float> %22, %41
  %48 = fadd <16 x float> %47, %46
  %49 = shufflevector <16 x float> %36, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %50 = bitcast <8 x float> %49 to <16 x i16>
  %51 = shufflevector <16 x float> %36, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %52 = bitcast <8 x float> %51 to <16 x i16>
  %53 = shufflevector <16 x float> %48, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %54 = bitcast <8 x float> %53 to <16 x i16>
  %55 = shufflevector <16 x float> %48, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %56 = bitcast <8 x float> %55 to <16 x i16>
  %57 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #10, !srcloc !98
  %58 = extractvalue { i8*, i8** } %57, 0
  %59 = extractvalue { i8*, i8** } %57, 1
  %60 = bitcast i8* %58 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %60(i64 %0, i8** %59, i64 %2, i64 %3, <16 x i16> %50, <16 x i16> %52, <16 x i16> %54, <16 x i16> %56, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL10matrix_2x3EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = bitcast <16 x i16> %6 to <8 x float>
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <16 x i16> %7 to <8 x float>
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <16 x float> %19, <16 x float> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <16 x float> undef, float %27, i32 0
  %29 = shufflevector <16 x float> %28, <16 x float> undef, <16 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %24, i64 8
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <16 x float> undef, float %32, i32 0
  %34 = shufflevector <16 x float> %33, <16 x float> undef, <16 x i32> zeroinitializer
  %35 = getelementptr inbounds i8, i8* %24, i64 16
  %36 = bitcast i8* %35 to float*
  %37 = load float, float* %36, align 4
  %38 = insertelement <16 x float> undef, float %37, i32 0
  %39 = shufflevector <16 x float> %38, <16 x float> undef, <16 x i32> zeroinitializer
  %40 = fmul <16 x float> %22, %34
  %41 = fadd <16 x float> %40, %39
  %42 = fmul <16 x float> %17, %29
  %43 = fadd <16 x float> %42, %41
  %44 = getelementptr inbounds i8, i8* %24, i64 4
  %45 = bitcast i8* %44 to float*
  %46 = load float, float* %45, align 4
  %47 = insertelement <16 x float> undef, float %46, i32 0
  %48 = shufflevector <16 x float> %47, <16 x float> undef, <16 x i32> zeroinitializer
  %49 = getelementptr inbounds i8, i8* %24, i64 12
  %50 = bitcast i8* %49 to float*
  %51 = load float, float* %50, align 4
  %52 = insertelement <16 x float> undef, float %51, i32 0
  %53 = shufflevector <16 x float> %52, <16 x float> undef, <16 x i32> zeroinitializer
  %54 = getelementptr inbounds i8, i8* %24, i64 20
  %55 = bitcast i8* %54 to float*
  %56 = load float, float* %55, align 4
  %57 = insertelement <16 x float> undef, float %56, i32 0
  %58 = shufflevector <16 x float> %57, <16 x float> undef, <16 x i32> zeroinitializer
  %59 = fmul <16 x float> %22, %53
  %60 = fadd <16 x float> %59, %58
  %61 = fmul <16 x float> %17, %48
  %62 = fadd <16 x float> %61, %60
  %63 = shufflevector <16 x float> %43, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %64 = bitcast <8 x float> %63 to <16 x i16>
  %65 = shufflevector <16 x float> %43, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %66 = bitcast <8 x float> %65 to <16 x i16>
  %67 = shufflevector <16 x float> %62, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %68 = bitcast <8 x float> %67 to <16 x i16>
  %69 = shufflevector <16 x float> %62, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %70 = bitcast <8 x float> %69 to <16 x i16>
  %71 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #10, !srcloc !98
  %72 = extractvalue { i8*, i8** } %71, 0
  %73 = extractvalue { i8*, i8** } %71, 1
  %74 = bitcast i8* %72 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %74(i64 %0, i8** %73, i64 %2, i64 %3, <16 x i16> %64, <16 x i16> %66, <16 x i16> %68, <16 x i16> %70, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL18matrix_perspectiveEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = bitcast <16 x i16> %6 to <8 x float>
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <16 x i16> %7 to <8 x float>
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <16 x float> %19, <16 x float> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = bitcast i8* %24 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <16 x float> undef, float %27, i32 0
  %29 = shufflevector <16 x float> %28, <16 x float> undef, <16 x i32> zeroinitializer
  %30 = getelementptr inbounds i8, i8* %24, i64 4
  %31 = bitcast i8* %30 to float*
  %32 = load float, float* %31, align 4
  %33 = insertelement <16 x float> undef, float %32, i32 0
  %34 = shufflevector <16 x float> %33, <16 x float> undef, <16 x i32> zeroinitializer
  %35 = getelementptr inbounds i8, i8* %24, i64 8
  %36 = bitcast i8* %35 to float*
  %37 = load float, float* %36, align 4
  %38 = insertelement <16 x float> undef, float %37, i32 0
  %39 = shufflevector <16 x float> %38, <16 x float> undef, <16 x i32> zeroinitializer
  %40 = fmul <16 x float> %22, %34
  %41 = fadd <16 x float> %40, %39
  %42 = fmul <16 x float> %17, %29
  %43 = fadd <16 x float> %42, %41
  %44 = getelementptr inbounds i8, i8* %24, i64 12
  %45 = bitcast i8* %44 to float*
  %46 = load float, float* %45, align 4
  %47 = insertelement <16 x float> undef, float %46, i32 0
  %48 = shufflevector <16 x float> %47, <16 x float> undef, <16 x i32> zeroinitializer
  %49 = getelementptr inbounds i8, i8* %24, i64 16
  %50 = bitcast i8* %49 to float*
  %51 = load float, float* %50, align 4
  %52 = insertelement <16 x float> undef, float %51, i32 0
  %53 = shufflevector <16 x float> %52, <16 x float> undef, <16 x i32> zeroinitializer
  %54 = getelementptr inbounds i8, i8* %24, i64 20
  %55 = bitcast i8* %54 to float*
  %56 = load float, float* %55, align 4
  %57 = insertelement <16 x float> undef, float %56, i32 0
  %58 = shufflevector <16 x float> %57, <16 x float> undef, <16 x i32> zeroinitializer
  %59 = fmul <16 x float> %22, %53
  %60 = fadd <16 x float> %59, %58
  %61 = fmul <16 x float> %17, %48
  %62 = fadd <16 x float> %61, %60
  %63 = getelementptr inbounds i8, i8* %24, i64 24
  %64 = bitcast i8* %63 to float*
  %65 = load float, float* %64, align 4
  %66 = insertelement <16 x float> undef, float %65, i32 0
  %67 = shufflevector <16 x float> %66, <16 x float> undef, <16 x i32> zeroinitializer
  %68 = getelementptr inbounds i8, i8* %24, i64 28
  %69 = bitcast i8* %68 to float*
  %70 = load float, float* %69, align 4
  %71 = insertelement <16 x float> undef, float %70, i32 0
  %72 = shufflevector <16 x float> %71, <16 x float> undef, <16 x i32> zeroinitializer
  %73 = getelementptr inbounds i8, i8* %24, i64 32
  %74 = bitcast i8* %73 to float*
  %75 = load float, float* %74, align 4
  %76 = insertelement <16 x float> undef, float %75, i32 0
  %77 = shufflevector <16 x float> %76, <16 x float> undef, <16 x i32> zeroinitializer
  %78 = fmul <16 x float> %22, %72
  %79 = fadd <16 x float> %78, %77
  %80 = fmul <16 x float> %17, %67
  %81 = fadd <16 x float> %80, %79
  %82 = fdiv <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %81
  %83 = fmul <16 x float> %43, %82
  %84 = fmul <16 x float> %62, %82
  %85 = shufflevector <16 x float> %83, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %86 = bitcast <8 x float> %85 to <16 x i16>
  %87 = shufflevector <16 x float> %83, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %88 = bitcast <8 x float> %87 to <16 x i16>
  %89 = shufflevector <16 x float> %84, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %90 = bitcast <8 x float> %89 to <16 x i16>
  %91 = shufflevector <16 x float> %84, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %92 = bitcast <8 x float> %91 to <16 x i16>
  %93 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #10, !srcloc !98
  %94 = extractvalue { i8*, i8** } %93, 0
  %95 = extractvalue { i8*, i8** } %93, 1
  %96 = bitcast i8* %94 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %96(i64 %0, i8** %95, i64 %2, i64 %3, <16 x i16> %86, <16 x i16> %88, <16 x i16> %90, <16 x i16> %92, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7decal_xEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = getelementptr inbounds i8, i8* %19, i64 64
  %22 = bitcast i8* %21 to float*
  %23 = load float, float* %22, align 4
  %24 = fcmp oge <16 x float> %17, zeroinitializer
  %25 = insertelement <16 x float> undef, float %23, i32 0
  %26 = shufflevector <16 x float> %25, <16 x float> undef, <16 x i32> zeroinitializer
  %27 = fcmp olt <16 x float> %17, %26
  %28 = and <16 x i1> %27, %24
  %29 = sext <16 x i1> %28 to <16 x i16>
  %30 = bitcast i8* %19 to <16 x i16>*
  store <16 x i16> %29, <16 x i16>* %30, align 4
  %31 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %20) #10, !srcloc !98
  %32 = extractvalue { i8*, i8** } %31, 0
  %33 = extractvalue { i8*, i8** } %31, 1
  %34 = bitcast i8* %32 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %34(i64 %0, i8** %33, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7decal_yEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %6 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %7 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = getelementptr inbounds i8, i8* %19, i64 68
  %22 = bitcast i8* %21 to float*
  %23 = load float, float* %22, align 4
  %24 = fcmp oge <16 x float> %17, zeroinitializer
  %25 = insertelement <16 x float> undef, float %23, i32 0
  %26 = shufflevector <16 x float> %25, <16 x float> undef, <16 x i32> zeroinitializer
  %27 = fcmp olt <16 x float> %17, %26
  %28 = and <16 x i1> %27, %24
  %29 = sext <16 x i1> %28 to <16 x i16>
  %30 = bitcast i8* %19 to <16 x i16>*
  store <16 x i16> %29, <16 x i16>* %30, align 4
  %31 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %20) #10, !srcloc !98
  %32 = extractvalue { i8*, i8** } %31, 0
  %33 = extractvalue { i8*, i8** } %31, 1
  %34 = bitcast i8* %32 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %34(i64 %0, i8** %33, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL13decal_x_and_yEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = bitcast <16 x i16> %6 to <8 x float>
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <16 x i16> %7 to <8 x float>
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <16 x float> %19, <16 x float> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %24 = extractvalue { i8*, i8** } %23, 0
  %25 = extractvalue { i8*, i8** } %23, 1
  %26 = getelementptr inbounds i8, i8* %24, i64 64
  %27 = bitcast i8* %26 to float*
  %28 = load float, float* %27, align 4
  %29 = getelementptr inbounds i8, i8* %24, i64 68
  %30 = bitcast i8* %29 to float*
  %31 = load float, float* %30, align 4
  %32 = fcmp oge <16 x float> %17, zeroinitializer
  %33 = insertelement <16 x float> undef, float %28, i32 0
  %34 = shufflevector <16 x float> %33, <16 x float> undef, <16 x i32> zeroinitializer
  %35 = fcmp olt <16 x float> %17, %34
  %36 = fcmp oge <16 x float> %22, zeroinitializer
  %37 = insertelement <16 x float> undef, float %31, i32 0
  %38 = shufflevector <16 x float> %37, <16 x float> undef, <16 x i32> zeroinitializer
  %39 = fcmp olt <16 x float> %22, %38
  %40 = and <16 x i1> %36, %32
  %41 = and <16 x i1> %40, %35
  %42 = and <16 x i1> %41, %39
  %43 = sext <16 x i1> %42 to <16 x i16>
  %44 = bitcast i8* %24 to <16 x i16>*
  store <16 x i16> %43, <16 x i16>* %44, align 4
  %45 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %25) #10, !srcloc !98
  %46 = extractvalue { i8*, i8** } %45, 0
  %47 = extractvalue { i8*, i8** } %45, 1
  %48 = bitcast i8* %46 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %48(i64 %0, i8** %47, i64 %2, i64 %3, <16 x i16> %4, <16 x i16> %5, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL16check_decal_maskEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to <16 x i16>*
  %17 = load <16 x i16>, <16 x i16>* %16, align 4
  %18 = and <16 x i16> %17, %4
  %19 = and <16 x i16> %17, %5
  %20 = and <16 x i16> %17, %6
  %21 = and <16 x i16> %17, %7
  %22 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %23 = extractvalue { i8*, i8** } %22, 0
  %24 = extractvalue { i8*, i8** } %22, 1
  %25 = bitcast i8* %23 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %25(i64 %0, i8** %24, i64 %2, i64 %3, <16 x i16> %18, <16 x i16> %19, <16 x i16> %20, <16 x i16> %21, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL9clamp_x_1EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = fcmp ogt <16 x float> %17, zeroinitializer
  %19 = select <16 x i1> %18, <16 x float> %17, <16 x float> zeroinitializer
  %20 = fcmp olt <16 x float> %19, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %21 = select <16 x i1> %20, <16 x float> %19, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %22 = shufflevector <16 x float> %21, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %23 = bitcast <8 x float> %22 to <16 x i16>
  %24 = shufflevector <16 x float> %21, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25 = bitcast <8 x float> %24 to <16 x i16>
  %26 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %27 = extractvalue { i8*, i8** } %26, 0
  %28 = extractvalue { i8*, i8** } %26, 1
  %29 = bitcast i8* %27 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %29(i64 %0, i8** %28, i64 %2, i64 %3, <16 x i16> %23, <16 x i16> %25, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL10mirror_x_1EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = fadd <16 x float> %17, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %19 = fmul <16 x float> %18, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %20 = shufflevector <16 x float> %19, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %21 = shufflevector <16 x float> %19, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %20, i32 1) #13
  %23 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %21, i32 1) #13
  %24 = shufflevector <8 x float> %22, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %25 = shufflevector <8 x float> %23, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %26 = shufflevector <16 x float> %24, <16 x float> %25, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27 = fadd <16 x float> %26, %26
  %28 = fsub <16 x float> %18, %27
  %29 = fadd <16 x float> %28, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  %30 = bitcast <16 x float> %29 to <16 x i32>
  %31 = and <16 x i32> %30, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %32 = bitcast <16 x i32> %31 to <16 x float>
  %33 = fcmp ogt <16 x float> %32, zeroinitializer
  %34 = select <16 x i1> %33, <16 x float> %32, <16 x float> zeroinitializer
  %35 = fcmp olt <16 x float> %34, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %36 = select <16 x i1> %35, <16 x float> %34, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %37 = shufflevector <16 x float> %36, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %38 = bitcast <8 x float> %37 to <16 x i16>
  %39 = shufflevector <16 x float> %36, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %40 = bitcast <8 x float> %39 to <16 x i16>
  %41 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %42 = extractvalue { i8*, i8** } %41, 0
  %43 = extractvalue { i8*, i8** } %41, 1
  %44 = bitcast i8* %42 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %44(i64 %0, i8** %43, i64 %2, i64 %3, <16 x i16> %38, <16 x i16> %40, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL10repeat_x_1EmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %13, i32 1) #13
  %19 = tail call <8 x float> @llvm.x86.avx.round.ps.256(<8 x float> %15, i32 1) #13
  %20 = shufflevector <8 x float> %18, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %21 = shufflevector <8 x float> %19, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <16 x float> %20, <16 x float> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23 = fsub <16 x float> %17, %22
  %24 = fcmp ogt <16 x float> %23, zeroinitializer
  %25 = select <16 x i1> %24, <16 x float> %23, <16 x float> zeroinitializer
  %26 = fcmp olt <16 x float> %25, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %27 = select <16 x i1> %26, <16 x float> %25, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %28 = shufflevector <16 x float> %27, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %29 = bitcast <8 x float> %28 to <16 x i16>
  %30 = shufflevector <16 x float> %27, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31 = bitcast <8 x float> %30 to <16 x i16>
  %32 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %33 = extractvalue { i8*, i8** } %32, 0
  %34 = extractvalue { i8*, i8** } %32, 1
  %35 = bitcast i8* %33 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %35(i64 %0, i8** %34, i64 %2, i64 %3, <16 x i16> %29, <16 x i16> %31, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL22evenly_spaced_gradientEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, -1
  %24 = uitofp i64 %23 to float
  %25 = insertelement <16 x float> undef, float %24, i32 0
  %26 = shufflevector <16 x float> %25, <16 x float> undef, <16 x i32> zeroinitializer
  %27 = fmul <16 x float> %17, %26
  %28 = fptosi <16 x float> %27 to <16 x i32>
  %29 = icmp ult i64 %22, 9
  br i1 %29, label %30, label %102

30:                                               ; preds = %12
  %31 = shufflevector <16 x i32> %28, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %32 = shufflevector <16 x i32> %28, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33 = getelementptr inbounds i8, i8* %19, i64 8
  %34 = bitcast i8* %33 to <8 x float>**
  %35 = load <8 x float>*, <8 x float>** %34, align 8
  %36 = load <8 x float>, <8 x float>* %35, align 1
  %37 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %36, <8 x i32> %31) #13
  %38 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %36, <8 x i32> %32) #13
  %39 = shufflevector <8 x float> %37, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %40 = shufflevector <8 x float> %38, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %41 = shufflevector <16 x float> %39, <16 x float> %40, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %42 = getelementptr inbounds i8, i8* %19, i64 40
  %43 = bitcast i8* %42 to <8 x float>**
  %44 = load <8 x float>*, <8 x float>** %43, align 8
  %45 = load <8 x float>, <8 x float>* %44, align 1
  %46 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %45, <8 x i32> %31) #13
  %47 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %45, <8 x i32> %32) #13
  %48 = shufflevector <8 x float> %46, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %49 = shufflevector <8 x float> %47, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %50 = shufflevector <16 x float> %48, <16 x float> %49, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %51 = getelementptr inbounds i8, i8* %19, i64 16
  %52 = bitcast i8* %51 to <8 x float>**
  %53 = load <8 x float>*, <8 x float>** %52, align 8
  %54 = load <8 x float>, <8 x float>* %53, align 1
  %55 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %54, <8 x i32> %31) #13
  %56 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %54, <8 x i32> %32) #13
  %57 = shufflevector <8 x float> %55, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %58 = shufflevector <8 x float> %56, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %59 = shufflevector <16 x float> %57, <16 x float> %58, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %60 = getelementptr inbounds i8, i8* %19, i64 48
  %61 = bitcast i8* %60 to <8 x float>**
  %62 = load <8 x float>*, <8 x float>** %61, align 8
  %63 = load <8 x float>, <8 x float>* %62, align 1
  %64 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %63, <8 x i32> %31) #13
  %65 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %63, <8 x i32> %32) #13
  %66 = shufflevector <8 x float> %64, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %67 = shufflevector <8 x float> %65, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %68 = shufflevector <16 x float> %66, <16 x float> %67, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %69 = getelementptr inbounds i8, i8* %19, i64 24
  %70 = bitcast i8* %69 to <8 x float>**
  %71 = load <8 x float>*, <8 x float>** %70, align 8
  %72 = load <8 x float>, <8 x float>* %71, align 1
  %73 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %72, <8 x i32> %31) #13
  %74 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %72, <8 x i32> %32) #13
  %75 = shufflevector <8 x float> %73, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %76 = shufflevector <8 x float> %74, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %77 = shufflevector <16 x float> %75, <16 x float> %76, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %78 = getelementptr inbounds i8, i8* %19, i64 56
  %79 = bitcast i8* %78 to <8 x float>**
  %80 = load <8 x float>*, <8 x float>** %79, align 8
  %81 = load <8 x float>, <8 x float>* %80, align 1
  %82 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %81, <8 x i32> %31) #13
  %83 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %81, <8 x i32> %32) #13
  %84 = shufflevector <8 x float> %82, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %85 = shufflevector <8 x float> %83, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %86 = shufflevector <16 x float> %84, <16 x float> %85, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %87 = getelementptr inbounds i8, i8* %19, i64 32
  %88 = bitcast i8* %87 to <8 x float>**
  %89 = load <8 x float>*, <8 x float>** %88, align 8
  %90 = load <8 x float>, <8 x float>* %89, align 1
  %91 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %90, <8 x i32> %31) #13
  %92 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %90, <8 x i32> %32) #13
  %93 = shufflevector <8 x float> %91, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %94 = shufflevector <8 x float> %92, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %95 = shufflevector <16 x float> %93, <16 x float> %94, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %96 = getelementptr inbounds i8, i8* %19, i64 64
  %97 = bitcast i8* %96 to <8 x float>**
  %98 = load <8 x float>*, <8 x float>** %97, align 8
  %99 = load <8 x float>, <8 x float>* %98, align 1
  %100 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %99, <8 x i32> %31) #13
  %101 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %99, <8 x i32> %32) #13
  br label %166

102:                                              ; preds = %12
  %103 = getelementptr inbounds i8, i8* %19, i64 8
  %104 = bitcast i8* %103 to i8**
  %105 = load i8*, i8** %104, align 8
  %106 = shufflevector <16 x i32> %28, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %107 = shufflevector <16 x i32> %28, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %108 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %105, <8 x i32> %106, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %109 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %105, <8 x i32> %107, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %110 = shufflevector <8 x float> %108, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %111 = shufflevector <8 x float> %109, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %112 = shufflevector <16 x float> %110, <16 x float> %111, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %113 = getelementptr inbounds i8, i8* %19, i64 16
  %114 = bitcast i8* %113 to i8**
  %115 = load i8*, i8** %114, align 8
  %116 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %115, <8 x i32> %106, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %117 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %115, <8 x i32> %107, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %118 = shufflevector <8 x float> %116, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %119 = shufflevector <8 x float> %117, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %120 = shufflevector <16 x float> %118, <16 x float> %119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %121 = getelementptr inbounds i8, i8* %19, i64 24
  %122 = bitcast i8* %121 to i8**
  %123 = load i8*, i8** %122, align 8
  %124 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %123, <8 x i32> %106, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %125 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %123, <8 x i32> %107, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %126 = shufflevector <8 x float> %124, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %127 = shufflevector <8 x float> %125, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %128 = shufflevector <16 x float> %126, <16 x float> %127, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %129 = getelementptr inbounds i8, i8* %19, i64 32
  %130 = bitcast i8* %129 to i8**
  %131 = load i8*, i8** %130, align 8
  %132 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %131, <8 x i32> %106, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %133 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %131, <8 x i32> %107, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %134 = shufflevector <8 x float> %132, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = shufflevector <8 x float> %133, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %136 = shufflevector <16 x float> %134, <16 x float> %135, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %137 = getelementptr inbounds i8, i8* %19, i64 40
  %138 = bitcast i8* %137 to i8**
  %139 = load i8*, i8** %138, align 8
  %140 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %139, <8 x i32> %106, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %141 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %139, <8 x i32> %107, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %142 = shufflevector <8 x float> %140, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %143 = shufflevector <8 x float> %141, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %144 = shufflevector <16 x float> %142, <16 x float> %143, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %145 = getelementptr inbounds i8, i8* %19, i64 48
  %146 = bitcast i8* %145 to i8**
  %147 = load i8*, i8** %146, align 8
  %148 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %147, <8 x i32> %106, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %149 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %147, <8 x i32> %107, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %150 = shufflevector <8 x float> %148, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %151 = shufflevector <8 x float> %149, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %152 = shufflevector <16 x float> %150, <16 x float> %151, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %153 = getelementptr inbounds i8, i8* %19, i64 56
  %154 = bitcast i8* %153 to i8**
  %155 = load i8*, i8** %154, align 8
  %156 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %155, <8 x i32> %106, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %157 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %155, <8 x i32> %107, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %158 = shufflevector <8 x float> %156, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %159 = shufflevector <8 x float> %157, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %160 = shufflevector <16 x float> %158, <16 x float> %159, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %161 = getelementptr inbounds i8, i8* %19, i64 64
  %162 = bitcast i8* %161 to i8**
  %163 = load i8*, i8** %162, align 8
  %164 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %163, <8 x i32> %106, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %165 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %163, <8 x i32> %107, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  br label %166

166:                                              ; preds = %30, %102
  %167 = phi <8 x float> [ %100, %30 ], [ %164, %102 ]
  %168 = phi <8 x float> [ %101, %30 ], [ %165, %102 ]
  %169 = phi <16 x float> [ %41, %30 ], [ %112, %102 ]
  %170 = phi <16 x float> [ %59, %30 ], [ %120, %102 ]
  %171 = phi <16 x float> [ %77, %30 ], [ %128, %102 ]
  %172 = phi <16 x float> [ %95, %30 ], [ %136, %102 ]
  %173 = phi <16 x float> [ %50, %30 ], [ %144, %102 ]
  %174 = phi <16 x float> [ %68, %30 ], [ %152, %102 ]
  %175 = phi <16 x float> [ %86, %30 ], [ %160, %102 ]
  %176 = shufflevector <8 x float> %167, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %177 = shufflevector <8 x float> %168, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %178 = shufflevector <16 x float> %176, <16 x float> %177, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %179 = fmul <16 x float> %17, %169
  %180 = fadd <16 x float> %179, %173
  %181 = fmul <16 x float> %17, %170
  %182 = fadd <16 x float> %181, %174
  %183 = fmul <16 x float> %17, %171
  %184 = fadd <16 x float> %183, %175
  %185 = fmul <16 x float> %17, %172
  %186 = fadd <16 x float> %185, %178
  %187 = getelementptr inbounds i8, i8* %19, i64 80
  %188 = load i8, i8* %187, align 8, !range !102
  %189 = icmp eq i8 %188, 0
  %190 = select i1 %189, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %186
  %191 = fcmp ogt <16 x float> %180, zeroinitializer
  %192 = select <16 x i1> %191, <16 x float> %180, <16 x float> zeroinitializer
  %193 = fcmp olt <16 x float> %192, %190
  %194 = select <16 x i1> %193, <16 x float> %192, <16 x float> %190
  %195 = fmul <16 x float> %194, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %196 = fadd <16 x float> %195, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %197 = fptoui <16 x float> %196 to <16 x i16>
  %198 = fcmp ogt <16 x float> %182, zeroinitializer
  %199 = select <16 x i1> %198, <16 x float> %182, <16 x float> zeroinitializer
  %200 = fcmp olt <16 x float> %199, %190
  %201 = select <16 x i1> %200, <16 x float> %199, <16 x float> %190
  %202 = fmul <16 x float> %201, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %203 = fadd <16 x float> %202, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %204 = fptoui <16 x float> %203 to <16 x i16>
  %205 = fcmp ogt <16 x float> %184, zeroinitializer
  %206 = select <16 x i1> %205, <16 x float> %184, <16 x float> zeroinitializer
  %207 = fcmp olt <16 x float> %206, %190
  %208 = select <16 x i1> %207, <16 x float> %206, <16 x float> %190
  %209 = fmul <16 x float> %208, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %210 = fadd <16 x float> %209, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %211 = fptoui <16 x float> %210 to <16 x i16>
  %212 = fmul <16 x float> %186, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %213 = fadd <16 x float> %212, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %214 = fptoui <16 x float> %213 to <16 x i16>
  %215 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %20) #10, !srcloc !98
  %216 = extractvalue { i8*, i8** } %215, 0
  %217 = extractvalue { i8*, i8** } %215, 1
  %218 = bitcast i8* %216 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %218(i64 %0, i8** %217, i64 %2, i64 %3, <16 x i16> %197, <16 x i16> %204, <16 x i16> %211, <16 x i16> %214, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL8gradientEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = icmp ugt i64 %22, 1
  br i1 %23, label %24, label %49

24:                                               ; preds = %12
  %25 = getelementptr inbounds i8, i8* %19, i64 72
  %26 = bitcast i8* %25 to float**
  %27 = load float*, float** %26, align 8
  %28 = add i64 %22, -1
  %29 = and i64 %28, 1
  %30 = icmp eq i64 %22, 2
  br i1 %30, label %33, label %31

31:                                               ; preds = %24
  %32 = sub i64 %28, %29
  br label %186

33:                                               ; preds = %186, %24
  %34 = phi <16 x i32> [ undef, %24 ], [ %204, %186 ]
  %35 = phi i64 [ 1, %24 ], [ %205, %186 ]
  %36 = phi <16 x i32> [ zeroinitializer, %24 ], [ %204, %186 ]
  %37 = icmp eq i64 %29, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %33
  %39 = getelementptr inbounds float, float* %27, i64 %35
  %40 = load float, float* %39, align 4
  %41 = insertelement <16 x float> undef, float %40, i32 0
  %42 = shufflevector <16 x float> %41, <16 x float> undef, <16 x i32> zeroinitializer
  %43 = fcmp oge <16 x float> %17, %42
  %44 = zext <16 x i1> %43 to <16 x i32>
  %45 = add <16 x i32> %36, %44
  br label %46

46:                                               ; preds = %33, %38
  %47 = phi <16 x i32> [ %34, %33 ], [ %45, %38 ]
  %48 = icmp ult i64 %22, 9
  br i1 %48, label %49, label %122

49:                                               ; preds = %46, %12
  %50 = phi <16 x i32> [ %47, %46 ], [ zeroinitializer, %12 ]
  %51 = shufflevector <16 x i32> %50, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %52 = shufflevector <16 x i32> %50, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %53 = getelementptr inbounds i8, i8* %19, i64 8
  %54 = bitcast i8* %53 to <8 x float>**
  %55 = load <8 x float>*, <8 x float>** %54, align 8
  %56 = load <8 x float>, <8 x float>* %55, align 1
  %57 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %56, <8 x i32> %51) #13
  %58 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %56, <8 x i32> %52) #13
  %59 = shufflevector <8 x float> %57, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %60 = shufflevector <8 x float> %58, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %61 = shufflevector <16 x float> %59, <16 x float> %60, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %62 = getelementptr inbounds i8, i8* %19, i64 40
  %63 = bitcast i8* %62 to <8 x float>**
  %64 = load <8 x float>*, <8 x float>** %63, align 8
  %65 = load <8 x float>, <8 x float>* %64, align 1
  %66 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %65, <8 x i32> %51) #13
  %67 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %65, <8 x i32> %52) #13
  %68 = shufflevector <8 x float> %66, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %69 = shufflevector <8 x float> %67, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %70 = shufflevector <16 x float> %68, <16 x float> %69, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %71 = getelementptr inbounds i8, i8* %19, i64 16
  %72 = bitcast i8* %71 to <8 x float>**
  %73 = load <8 x float>*, <8 x float>** %72, align 8
  %74 = load <8 x float>, <8 x float>* %73, align 1
  %75 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %74, <8 x i32> %51) #13
  %76 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %74, <8 x i32> %52) #13
  %77 = shufflevector <8 x float> %75, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %78 = shufflevector <8 x float> %76, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %79 = shufflevector <16 x float> %77, <16 x float> %78, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %80 = getelementptr inbounds i8, i8* %19, i64 48
  %81 = bitcast i8* %80 to <8 x float>**
  %82 = load <8 x float>*, <8 x float>** %81, align 8
  %83 = load <8 x float>, <8 x float>* %82, align 1
  %84 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %83, <8 x i32> %51) #13
  %85 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %83, <8 x i32> %52) #13
  %86 = shufflevector <8 x float> %84, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %87 = shufflevector <8 x float> %85, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %88 = shufflevector <16 x float> %86, <16 x float> %87, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %89 = getelementptr inbounds i8, i8* %19, i64 24
  %90 = bitcast i8* %89 to <8 x float>**
  %91 = load <8 x float>*, <8 x float>** %90, align 8
  %92 = load <8 x float>, <8 x float>* %91, align 1
  %93 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %92, <8 x i32> %51) #13
  %94 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %92, <8 x i32> %52) #13
  %95 = shufflevector <8 x float> %93, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %96 = shufflevector <8 x float> %94, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %97 = shufflevector <16 x float> %95, <16 x float> %96, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %98 = getelementptr inbounds i8, i8* %19, i64 56
  %99 = bitcast i8* %98 to <8 x float>**
  %100 = load <8 x float>*, <8 x float>** %99, align 8
  %101 = load <8 x float>, <8 x float>* %100, align 1
  %102 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %101, <8 x i32> %51) #13
  %103 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %101, <8 x i32> %52) #13
  %104 = shufflevector <8 x float> %102, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %105 = shufflevector <8 x float> %103, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %106 = shufflevector <16 x float> %104, <16 x float> %105, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %107 = getelementptr inbounds i8, i8* %19, i64 32
  %108 = bitcast i8* %107 to <8 x float>**
  %109 = load <8 x float>*, <8 x float>** %108, align 8
  %110 = load <8 x float>, <8 x float>* %109, align 1
  %111 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %110, <8 x i32> %51) #13
  %112 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %110, <8 x i32> %52) #13
  %113 = shufflevector <8 x float> %111, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %114 = shufflevector <8 x float> %112, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %115 = shufflevector <16 x float> %113, <16 x float> %114, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %116 = getelementptr inbounds i8, i8* %19, i64 64
  %117 = bitcast i8* %116 to <8 x float>**
  %118 = load <8 x float>*, <8 x float>** %117, align 8
  %119 = load <8 x float>, <8 x float>* %118, align 1
  %120 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %119, <8 x i32> %51) #13
  %121 = tail call <8 x float> @llvm.x86.avx2.permps(<8 x float> %119, <8 x i32> %52) #13
  br label %208

122:                                              ; preds = %46
  %123 = getelementptr inbounds i8, i8* %19, i64 8
  %124 = bitcast i8* %123 to i8**
  %125 = load i8*, i8** %124, align 8
  %126 = shufflevector <16 x i32> %47, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %127 = shufflevector <16 x i32> %47, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %128 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %125, <8 x i32> %126, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %129 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %125, <8 x i32> %127, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %130 = shufflevector <8 x float> %128, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %131 = shufflevector <8 x float> %129, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %132 = shufflevector <16 x float> %130, <16 x float> %131, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %133 = getelementptr inbounds i8, i8* %19, i64 16
  %134 = bitcast i8* %133 to i8**
  %135 = load i8*, i8** %134, align 8
  %136 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %135, <8 x i32> %126, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %137 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %135, <8 x i32> %127, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %138 = shufflevector <8 x float> %136, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %139 = shufflevector <8 x float> %137, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %140 = shufflevector <16 x float> %138, <16 x float> %139, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %141 = getelementptr inbounds i8, i8* %19, i64 24
  %142 = bitcast i8* %141 to i8**
  %143 = load i8*, i8** %142, align 8
  %144 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %143, <8 x i32> %126, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %145 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %143, <8 x i32> %127, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %146 = shufflevector <8 x float> %144, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %147 = shufflevector <8 x float> %145, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %148 = shufflevector <16 x float> %146, <16 x float> %147, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %149 = getelementptr inbounds i8, i8* %19, i64 32
  %150 = bitcast i8* %149 to i8**
  %151 = load i8*, i8** %150, align 8
  %152 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %151, <8 x i32> %126, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %153 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %151, <8 x i32> %127, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %154 = shufflevector <8 x float> %152, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = shufflevector <8 x float> %153, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %156 = shufflevector <16 x float> %154, <16 x float> %155, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %157 = getelementptr inbounds i8, i8* %19, i64 40
  %158 = bitcast i8* %157 to i8**
  %159 = load i8*, i8** %158, align 8
  %160 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %159, <8 x i32> %126, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %161 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %159, <8 x i32> %127, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %162 = shufflevector <8 x float> %160, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %163 = shufflevector <8 x float> %161, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %164 = shufflevector <16 x float> %162, <16 x float> %163, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %165 = getelementptr inbounds i8, i8* %19, i64 48
  %166 = bitcast i8* %165 to i8**
  %167 = load i8*, i8** %166, align 8
  %168 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %167, <8 x i32> %126, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %169 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %167, <8 x i32> %127, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %170 = shufflevector <8 x float> %168, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %171 = shufflevector <8 x float> %169, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %172 = shufflevector <16 x float> %170, <16 x float> %171, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %173 = getelementptr inbounds i8, i8* %19, i64 56
  %174 = bitcast i8* %173 to i8**
  %175 = load i8*, i8** %174, align 8
  %176 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %175, <8 x i32> %126, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %177 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %175, <8 x i32> %127, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %178 = shufflevector <8 x float> %176, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %179 = shufflevector <8 x float> %177, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %180 = shufflevector <16 x float> %178, <16 x float> %179, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %181 = getelementptr inbounds i8, i8* %19, i64 64
  %182 = bitcast i8* %181 to i8**
  %183 = load i8*, i8** %182, align 8
  %184 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %183, <8 x i32> %126, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  %185 = tail call <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float> zeroinitializer, i8* %183, <8 x i32> %127, <8 x float> <float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000>, i8 4) #13
  br label %208

186:                                              ; preds = %186, %31
  %187 = phi i64 [ 1, %31 ], [ %205, %186 ]
  %188 = phi <16 x i32> [ zeroinitializer, %31 ], [ %204, %186 ]
  %189 = phi i64 [ %32, %31 ], [ %206, %186 ]
  %190 = getelementptr inbounds float, float* %27, i64 %187
  %191 = load float, float* %190, align 4
  %192 = insertelement <16 x float> undef, float %191, i32 0
  %193 = shufflevector <16 x float> %192, <16 x float> undef, <16 x i32> zeroinitializer
  %194 = fcmp oge <16 x float> %17, %193
  %195 = zext <16 x i1> %194 to <16 x i32>
  %196 = add <16 x i32> %188, %195
  %197 = add nuw i64 %187, 1
  %198 = getelementptr inbounds float, float* %27, i64 %197
  %199 = load float, float* %198, align 4
  %200 = insertelement <16 x float> undef, float %199, i32 0
  %201 = shufflevector <16 x float> %200, <16 x float> undef, <16 x i32> zeroinitializer
  %202 = fcmp oge <16 x float> %17, %201
  %203 = zext <16 x i1> %202 to <16 x i32>
  %204 = add <16 x i32> %196, %203
  %205 = add nuw i64 %187, 2
  %206 = add i64 %189, -2
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %33, label %186

208:                                              ; preds = %49, %122
  %209 = phi <8 x float> [ %120, %49 ], [ %184, %122 ]
  %210 = phi <8 x float> [ %121, %49 ], [ %185, %122 ]
  %211 = phi <16 x float> [ %61, %49 ], [ %132, %122 ]
  %212 = phi <16 x float> [ %79, %49 ], [ %140, %122 ]
  %213 = phi <16 x float> [ %97, %49 ], [ %148, %122 ]
  %214 = phi <16 x float> [ %115, %49 ], [ %156, %122 ]
  %215 = phi <16 x float> [ %70, %49 ], [ %164, %122 ]
  %216 = phi <16 x float> [ %88, %49 ], [ %172, %122 ]
  %217 = phi <16 x float> [ %106, %49 ], [ %180, %122 ]
  %218 = shufflevector <8 x float> %209, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %219 = shufflevector <8 x float> %210, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %220 = shufflevector <16 x float> %218, <16 x float> %219, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %221 = fmul <16 x float> %17, %211
  %222 = fadd <16 x float> %221, %215
  %223 = fmul <16 x float> %17, %212
  %224 = fadd <16 x float> %223, %216
  %225 = fmul <16 x float> %17, %213
  %226 = fadd <16 x float> %225, %217
  %227 = fmul <16 x float> %17, %214
  %228 = fadd <16 x float> %227, %220
  %229 = getelementptr inbounds i8, i8* %19, i64 80
  %230 = load i8, i8* %229, align 8, !range !102
  %231 = icmp eq i8 %230, 0
  %232 = select i1 %231, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %228
  %233 = fcmp ogt <16 x float> %222, zeroinitializer
  %234 = select <16 x i1> %233, <16 x float> %222, <16 x float> zeroinitializer
  %235 = fcmp olt <16 x float> %234, %232
  %236 = select <16 x i1> %235, <16 x float> %234, <16 x float> %232
  %237 = fmul <16 x float> %236, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %238 = fadd <16 x float> %237, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %239 = fptoui <16 x float> %238 to <16 x i16>
  %240 = fcmp ogt <16 x float> %224, zeroinitializer
  %241 = select <16 x i1> %240, <16 x float> %224, <16 x float> zeroinitializer
  %242 = fcmp olt <16 x float> %241, %232
  %243 = select <16 x i1> %242, <16 x float> %241, <16 x float> %232
  %244 = fmul <16 x float> %243, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %245 = fadd <16 x float> %244, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %246 = fptoui <16 x float> %245 to <16 x i16>
  %247 = fcmp ogt <16 x float> %226, zeroinitializer
  %248 = select <16 x i1> %247, <16 x float> %226, <16 x float> zeroinitializer
  %249 = fcmp olt <16 x float> %248, %232
  %250 = select <16 x i1> %249, <16 x float> %248, <16 x float> %232
  %251 = fmul <16 x float> %250, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %252 = fadd <16 x float> %251, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %253 = fptoui <16 x float> %252 to <16 x i16>
  %254 = fmul <16 x float> %228, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %255 = fadd <16 x float> %254, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %256 = fptoui <16 x float> %255 to <16 x i16>
  %257 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %20) #10, !srcloc !98
  %258 = extractvalue { i8*, i8** } %257, 0
  %259 = extractvalue { i8*, i8** } %257, 1
  %260 = bitcast i8* %258 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %260(i64 %0, i8** %259, i64 %2, i64 %3, <16 x i16> %239, <16 x i16> %246, <16 x i16> %253, <16 x i16> %256, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL29evenly_spaced_2_stop_gradientEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %19 = extractvalue { i8*, i8** } %18, 0
  %20 = extractvalue { i8*, i8** } %18, 1
  %21 = bitcast i8* %19 to float*
  %22 = load float, float* %21, align 4
  %23 = insertelement <16 x float> undef, float %22, i32 0
  %24 = shufflevector <16 x float> %23, <16 x float> undef, <16 x i32> zeroinitializer
  %25 = getelementptr inbounds i8, i8* %19, i64 16
  %26 = bitcast i8* %25 to float*
  %27 = load float, float* %26, align 4
  %28 = insertelement <16 x float> undef, float %27, i32 0
  %29 = shufflevector <16 x float> %28, <16 x float> undef, <16 x i32> zeroinitializer
  %30 = fmul <16 x float> %17, %24
  %31 = fadd <16 x float> %30, %29
  %32 = getelementptr inbounds i8, i8* %19, i64 4
  %33 = bitcast i8* %32 to float*
  %34 = load float, float* %33, align 4
  %35 = insertelement <16 x float> undef, float %34, i32 0
  %36 = shufflevector <16 x float> %35, <16 x float> undef, <16 x i32> zeroinitializer
  %37 = getelementptr inbounds i8, i8* %19, i64 20
  %38 = bitcast i8* %37 to float*
  %39 = load float, float* %38, align 4
  %40 = insertelement <16 x float> undef, float %39, i32 0
  %41 = shufflevector <16 x float> %40, <16 x float> undef, <16 x i32> zeroinitializer
  %42 = fmul <16 x float> %17, %36
  %43 = fadd <16 x float> %42, %41
  %44 = getelementptr inbounds i8, i8* %19, i64 8
  %45 = bitcast i8* %44 to float*
  %46 = load float, float* %45, align 4
  %47 = insertelement <16 x float> undef, float %46, i32 0
  %48 = shufflevector <16 x float> %47, <16 x float> undef, <16 x i32> zeroinitializer
  %49 = getelementptr inbounds i8, i8* %19, i64 24
  %50 = bitcast i8* %49 to float*
  %51 = load float, float* %50, align 4
  %52 = insertelement <16 x float> undef, float %51, i32 0
  %53 = shufflevector <16 x float> %52, <16 x float> undef, <16 x i32> zeroinitializer
  %54 = fmul <16 x float> %17, %48
  %55 = fadd <16 x float> %54, %53
  %56 = getelementptr inbounds i8, i8* %19, i64 12
  %57 = bitcast i8* %56 to float*
  %58 = load float, float* %57, align 4
  %59 = insertelement <16 x float> undef, float %58, i32 0
  %60 = shufflevector <16 x float> %59, <16 x float> undef, <16 x i32> zeroinitializer
  %61 = getelementptr inbounds i8, i8* %19, i64 28
  %62 = bitcast i8* %61 to float*
  %63 = load float, float* %62, align 4
  %64 = insertelement <16 x float> undef, float %63, i32 0
  %65 = shufflevector <16 x float> %64, <16 x float> undef, <16 x i32> zeroinitializer
  %66 = fmul <16 x float> %17, %60
  %67 = fadd <16 x float> %66, %65
  %68 = getelementptr inbounds i8, i8* %19, i64 32
  %69 = load i8, i8* %68, align 4, !range !102
  %70 = icmp eq i8 %69, 0
  %71 = select i1 %70, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <16 x float> %67
  %72 = fcmp ogt <16 x float> %31, zeroinitializer
  %73 = select <16 x i1> %72, <16 x float> %31, <16 x float> zeroinitializer
  %74 = fcmp olt <16 x float> %73, %71
  %75 = select <16 x i1> %74, <16 x float> %73, <16 x float> %71
  %76 = fmul <16 x float> %75, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %77 = fadd <16 x float> %76, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %78 = fptoui <16 x float> %77 to <16 x i16>
  %79 = fcmp ogt <16 x float> %43, zeroinitializer
  %80 = select <16 x i1> %79, <16 x float> %43, <16 x float> zeroinitializer
  %81 = fcmp olt <16 x float> %80, %71
  %82 = select <16 x i1> %81, <16 x float> %80, <16 x float> %71
  %83 = fmul <16 x float> %82, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %84 = fadd <16 x float> %83, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %85 = fptoui <16 x float> %84 to <16 x i16>
  %86 = fcmp ogt <16 x float> %55, zeroinitializer
  %87 = select <16 x i1> %86, <16 x float> %55, <16 x float> zeroinitializer
  %88 = fcmp olt <16 x float> %87, %71
  %89 = select <16 x i1> %88, <16 x float> %87, <16 x float> %71
  %90 = fmul <16 x float> %89, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %91 = fadd <16 x float> %90, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %92 = fptoui <16 x float> %91 to <16 x i16>
  %93 = fmul <16 x float> %67, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %94 = fadd <16 x float> %93, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %95 = fptoui <16 x float> %94 to <16 x i16>
  %96 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %20) #10, !srcloc !98
  %97 = extractvalue { i8*, i8** } %96, 0
  %98 = extractvalue { i8*, i8** } %96, 1
  %99 = bitcast i8* %97 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %99(i64 %0, i8** %98, i64 %2, i64 %3, <16 x i16> %78, <16 x i16> %85, <16 x i16> %92, <16 x i16> %95, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL16xy_to_unit_angleEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = bitcast <16 x i16> %6 to <8 x float>
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <16 x i16> %7 to <8 x float>
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <16 x float> %19, <16 x float> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23 = bitcast <16 x float> %17 to <16 x i32>
  %24 = and <16 x i32> %23, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %25 = bitcast <16 x i32> %24 to <16 x float>
  %26 = bitcast <16 x float> %22 to <16 x i32>
  %27 = and <16 x i32> %26, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %28 = bitcast <16 x i32> %27 to <16 x float>
  %29 = fcmp olt <16 x float> %25, %28
  %30 = select <16 x i1> %29, <16 x i32> %24, <16 x i32> %27
  %31 = bitcast <16 x i32> %30 to <16 x float>
  %32 = select <16 x i1> %29, <16 x i32> %27, <16 x i32> %24
  %33 = bitcast <16 x i32> %32 to <16 x float>
  %34 = fdiv <16 x float> %31, %33
  %35 = fmul <16 x float> %34, %34
  %36 = fmul <16 x float> %35, <float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000, float 0xBF7CE56DE0000000>
  %37 = fadd <16 x float> %36, <float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000, float 0x3F995AF3E0000000>
  %38 = fmul <16 x float> %35, %37
  %39 = fadd <16 x float> %38, <float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000, float 0xBFAA8C9A80000000>
  %40 = fmul <16 x float> %35, %39
  %41 = fadd <16 x float> %40, <float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000, float 0x3FC45E1520000000>
  %42 = fmul <16 x float> %34, %41
  %43 = fsub <16 x float> <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>, %42
  %44 = select <16 x i1> %29, <16 x float> %43, <16 x float> %42
  %45 = fcmp uge <16 x float> %17, zeroinitializer
  %46 = fsub <16 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>, %44
  %47 = select <16 x i1> %45, <16 x float> %44, <16 x float> %46
  %48 = fcmp uge <16 x float> %22, zeroinitializer
  %49 = fsub <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %47
  %50 = select <16 x i1> %48, <16 x float> %47, <16 x float> %49
  %51 = fcmp ord <16 x float> %50, zeroinitializer
  %52 = select <16 x i1> %51, <16 x float> %50, <16 x float> zeroinitializer
  %53 = shufflevector <16 x float> %52, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %54 = bitcast <8 x float> %53 to <16 x i16>
  %55 = shufflevector <16 x float> %52, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %56 = bitcast <8 x float> %55 to <16 x i16>
  %57 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %58 = extractvalue { i8*, i8** } %57, 0
  %59 = extractvalue { i8*, i8** } %57, 1
  %60 = bitcast i8* %58 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %60(i64 %0, i8** %59, i64 %2, i64 %3, <16 x i16> %54, <16 x i16> %56, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL12xy_to_radiusEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #5 {
  %13 = bitcast <16 x i16> %4 to <8 x float>
  %14 = shufflevector <8 x float> %13, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = bitcast <16 x i16> %5 to <8 x float>
  %16 = shufflevector <8 x float> %15, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %17 = shufflevector <16 x float> %14, <16 x float> %16, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18 = bitcast <16 x i16> %6 to <8 x float>
  %19 = shufflevector <8 x float> %18, <8 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %20 = bitcast <16 x i16> %7 to <8 x float>
  %21 = shufflevector <8 x float> %20, <8 x float> undef, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %22 = shufflevector <16 x float> %19, <16 x float> %21, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23 = fmul <16 x float> %17, %17
  %24 = fmul <16 x float> %22, %22
  %25 = fadd <16 x float> %23, %24
  %26 = shufflevector <16 x float> %25, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %27 = shufflevector <16 x float> %25, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %26) #13
  %29 = tail call <8 x float> @llvm.sqrt.v8f32(<8 x float> %27) #13
  %30 = bitcast <8 x float> %28 to <16 x i16>
  %31 = bitcast <8 x float> %29 to <16 x i16>
  %32 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %33 = extractvalue { i8*, i8** } %32, 0
  %34 = extractvalue { i8*, i8** } %32, 1
  %35 = bitcast i8* %33 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %35(i64 %0, i8** %34, i64 %2, i64 %3, <16 x i16> %30, <16 x i16> %31, <16 x i16> %6, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL6embossEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = bitcast i8* %14 to i8**
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %14, i64 8
  %19 = bitcast i8* %18 to i32*
  %20 = load i32, i32* %19, align 8
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, %3
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 %2
  %25 = and i64 %0, 15
  switch i64 %25, label %128 [
    i64 0, label %26
    i64 15, label %42
    i64 14, label %46
    i64 13, label %51
    i64 12, label %56
    i64 11, label %62
    i64 10, label %66
    i64 9, label %71
    i64 8, label %76
    i64 7, label %82
    i64 6, label %86
    i64 5, label %91
    i64 4, label %96
    i64 3, label %102
    i64 2, label %106
    i64 1, label %112
  ]

26:                                               ; preds = %12
  %27 = bitcast i8* %24 to <16 x i8>*
  %28 = load <16 x i8>, <16 x i8>* %27, align 1
  %29 = zext <16 x i8> %28 to <16 x i16>
  %30 = getelementptr inbounds i8, i8* %14, i64 16
  %31 = bitcast i8* %30 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds i8, i8* %14, i64 24
  %34 = bitcast i8* %33 to i32*
  %35 = load i32, i32* %34, align 8
  %36 = sext i32 %35 to i64
  %37 = mul i64 %36, %3
  %38 = getelementptr inbounds i8, i8* %32, i64 %37
  %39 = getelementptr inbounds i8, i8* %38, i64 %2
  %40 = bitcast i8* %39 to <16 x i8>*
  %41 = load <16 x i8>, <16 x i8>* %40, align 1
  br label %213

42:                                               ; preds = %12
  %43 = getelementptr inbounds i8, i8* %24, i64 14
  %44 = load i8, i8* %43, align 1
  %45 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %44, i32 14
  br label %46

46:                                               ; preds = %42, %12
  %47 = phi <16 x i8> [ zeroinitializer, %12 ], [ %45, %42 ]
  %48 = getelementptr inbounds i8, i8* %24, i64 13
  %49 = load i8, i8* %48, align 1
  %50 = insertelement <16 x i8> %47, i8 %49, i32 13
  br label %51

51:                                               ; preds = %46, %12
  %52 = phi <16 x i8> [ zeroinitializer, %12 ], [ %50, %46 ]
  %53 = getelementptr inbounds i8, i8* %24, i64 12
  %54 = load i8, i8* %53, align 1
  %55 = insertelement <16 x i8> %52, i8 %54, i32 12
  br label %56

56:                                               ; preds = %51, %12
  %57 = phi <16 x i8> [ zeroinitializer, %12 ], [ %55, %51 ]
  %58 = bitcast i8* %24 to <12 x i8>*
  %59 = load <12 x i8>, <12 x i8>* %58, align 1
  %60 = shufflevector <12 x i8> %59, <12 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %61 = shufflevector <16 x i8> %60, <16 x i8> %57, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %129

62:                                               ; preds = %12
  %63 = getelementptr inbounds i8, i8* %24, i64 10
  %64 = load i8, i8* %63, align 1
  %65 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %64, i32 10
  br label %66

66:                                               ; preds = %62, %12
  %67 = phi <16 x i8> [ zeroinitializer, %12 ], [ %65, %62 ]
  %68 = getelementptr inbounds i8, i8* %24, i64 9
  %69 = load i8, i8* %68, align 1
  %70 = insertelement <16 x i8> %67, i8 %69, i32 9
  br label %71

71:                                               ; preds = %66, %12
  %72 = phi <16 x i8> [ zeroinitializer, %12 ], [ %70, %66 ]
  %73 = getelementptr inbounds i8, i8* %24, i64 8
  %74 = load i8, i8* %73, align 1
  %75 = insertelement <16 x i8> %72, i8 %74, i32 8
  br label %76

76:                                               ; preds = %71, %12
  %77 = phi <16 x i8> [ zeroinitializer, %12 ], [ %75, %71 ]
  %78 = bitcast i8* %24 to <8 x i8>*
  %79 = load <8 x i8>, <8 x i8>* %78, align 1
  %80 = shufflevector <8 x i8> %79, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %81 = shufflevector <16 x i8> %80, <16 x i8> %77, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %129

82:                                               ; preds = %12
  %83 = getelementptr inbounds i8, i8* %24, i64 6
  %84 = load i8, i8* %83, align 1
  %85 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %84, i32 6
  br label %86

86:                                               ; preds = %82, %12
  %87 = phi <16 x i8> [ zeroinitializer, %12 ], [ %85, %82 ]
  %88 = getelementptr inbounds i8, i8* %24, i64 5
  %89 = load i8, i8* %88, align 1
  %90 = insertelement <16 x i8> %87, i8 %89, i32 5
  br label %91

91:                                               ; preds = %86, %12
  %92 = phi <16 x i8> [ zeroinitializer, %12 ], [ %90, %86 ]
  %93 = getelementptr inbounds i8, i8* %24, i64 4
  %94 = load i8, i8* %93, align 1
  %95 = insertelement <16 x i8> %92, i8 %94, i32 4
  br label %96

96:                                               ; preds = %91, %12
  %97 = phi <16 x i8> [ zeroinitializer, %12 ], [ %95, %91 ]
  %98 = bitcast i8* %24 to <4 x i8>*
  %99 = load <4 x i8>, <4 x i8>* %98, align 1
  %100 = shufflevector <4 x i8> %99, <4 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %101 = shufflevector <16 x i8> %100, <16 x i8> %97, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %129

102:                                              ; preds = %12
  %103 = getelementptr inbounds i8, i8* %24, i64 2
  %104 = load i8, i8* %103, align 1
  %105 = insertelement <16 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %104, i32 2
  br label %106

106:                                              ; preds = %102, %12
  %107 = phi <16 x i8> [ zeroinitializer, %12 ], [ %105, %102 ]
  %108 = bitcast i8* %24 to <2 x i8>*
  %109 = load <2 x i8>, <2 x i8>* %108, align 1
  %110 = shufflevector <2 x i8> %109, <2 x i8> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %111 = shufflevector <16 x i8> %110, <16 x i8> %107, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %129

112:                                              ; preds = %12
  %113 = load i8, i8* %24, align 1
  %114 = insertelement <16 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %113, i32 0
  %115 = zext <16 x i8> %114 to <16 x i16>
  %116 = getelementptr inbounds i8, i8* %14, i64 16
  %117 = bitcast i8* %116 to i8**
  %118 = load i8*, i8** %117, align 8
  %119 = getelementptr inbounds i8, i8* %14, i64 24
  %120 = bitcast i8* %119 to i32*
  %121 = load i32, i32* %120, align 8
  %122 = sext i32 %121 to i64
  %123 = mul i64 %122, %3
  %124 = getelementptr inbounds i8, i8* %118, i64 %123
  %125 = getelementptr inbounds i8, i8* %124, i64 %2
  %126 = load i8, i8* %125, align 1
  %127 = insertelement <16 x i8> <i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %126, i32 0
  br label %213

128:                                              ; preds = %12
  unreachable

129:                                              ; preds = %106, %96, %76, %56
  %130 = phi <16 x i8> [ %111, %106 ], [ %101, %96 ], [ %81, %76 ], [ %61, %56 ]
  %131 = zext <16 x i8> %130 to <16 x i16>
  %132 = getelementptr inbounds i8, i8* %14, i64 16
  %133 = bitcast i8* %132 to i8**
  %134 = load i8*, i8** %133, align 8
  %135 = getelementptr inbounds i8, i8* %14, i64 24
  %136 = bitcast i8* %135 to i32*
  %137 = load i32, i32* %136, align 8
  %138 = sext i32 %137 to i64
  %139 = mul i64 %138, %3
  %140 = getelementptr inbounds i8, i8* %134, i64 %139
  %141 = getelementptr inbounds i8, i8* %140, i64 %2
  switch i64 %25, label %212 [
    i64 2, label %206
    i64 15, label %142
    i64 14, label %146
    i64 13, label %151
    i64 12, label %156
    i64 11, label %162
    i64 10, label %166
    i64 9, label %171
    i64 8, label %176
    i64 7, label %182
    i64 6, label %186
    i64 5, label %191
    i64 4, label %196
    i64 3, label %202
  ]

142:                                              ; preds = %129
  %143 = getelementptr inbounds i8, i8* %141, i64 14
  %144 = load i8, i8* %143, align 1
  %145 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0>, i8 %144, i32 14
  br label %146

146:                                              ; preds = %142, %129
  %147 = phi <16 x i8> [ zeroinitializer, %129 ], [ %145, %142 ]
  %148 = getelementptr inbounds i8, i8* %141, i64 13
  %149 = load i8, i8* %148, align 1
  %150 = insertelement <16 x i8> %147, i8 %149, i32 13
  br label %151

151:                                              ; preds = %146, %129
  %152 = phi <16 x i8> [ zeroinitializer, %129 ], [ %150, %146 ]
  %153 = getelementptr inbounds i8, i8* %141, i64 12
  %154 = load i8, i8* %153, align 1
  %155 = insertelement <16 x i8> %152, i8 %154, i32 12
  br label %156

156:                                              ; preds = %151, %129
  %157 = phi <16 x i8> [ zeroinitializer, %129 ], [ %155, %151 ]
  %158 = bitcast i8* %141 to <12 x i8>*
  %159 = load <12 x i8>, <12 x i8>* %158, align 1
  %160 = shufflevector <12 x i8> %159, <12 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef>
  %161 = shufflevector <16 x i8> %160, <16 x i8> %157, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 28, i32 29, i32 30, i32 31>
  br label %213

162:                                              ; preds = %129
  %163 = getelementptr inbounds i8, i8* %141, i64 10
  %164 = load i8, i8* %163, align 1
  %165 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %164, i32 10
  br label %166

166:                                              ; preds = %162, %129
  %167 = phi <16 x i8> [ zeroinitializer, %129 ], [ %165, %162 ]
  %168 = getelementptr inbounds i8, i8* %141, i64 9
  %169 = load i8, i8* %168, align 1
  %170 = insertelement <16 x i8> %167, i8 %169, i32 9
  br label %171

171:                                              ; preds = %166, %129
  %172 = phi <16 x i8> [ zeroinitializer, %129 ], [ %170, %166 ]
  %173 = getelementptr inbounds i8, i8* %141, i64 8
  %174 = load i8, i8* %173, align 1
  %175 = insertelement <16 x i8> %172, i8 %174, i32 8
  br label %176

176:                                              ; preds = %171, %129
  %177 = phi <16 x i8> [ zeroinitializer, %129 ], [ %175, %171 ]
  %178 = bitcast i8* %141 to <8 x i8>*
  %179 = load <8 x i8>, <8 x i8>* %178, align 1
  %180 = shufflevector <8 x i8> %179, <8 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %181 = shufflevector <16 x i8> %180, <16 x i8> %177, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %213

182:                                              ; preds = %129
  %183 = getelementptr inbounds i8, i8* %141, i64 6
  %184 = load i8, i8* %183, align 1
  %185 = insertelement <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %184, i32 6
  br label %186

186:                                              ; preds = %182, %129
  %187 = phi <16 x i8> [ zeroinitializer, %129 ], [ %185, %182 ]
  %188 = getelementptr inbounds i8, i8* %141, i64 5
  %189 = load i8, i8* %188, align 1
  %190 = insertelement <16 x i8> %187, i8 %189, i32 5
  br label %191

191:                                              ; preds = %186, %129
  %192 = phi <16 x i8> [ zeroinitializer, %129 ], [ %190, %186 ]
  %193 = getelementptr inbounds i8, i8* %141, i64 4
  %194 = load i8, i8* %193, align 1
  %195 = insertelement <16 x i8> %192, i8 %194, i32 4
  br label %196

196:                                              ; preds = %191, %129
  %197 = phi <16 x i8> [ zeroinitializer, %129 ], [ %195, %191 ]
  %198 = bitcast i8* %141 to <4 x i8>*
  %199 = load <4 x i8>, <4 x i8>* %198, align 1
  %200 = shufflevector <4 x i8> %199, <4 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %201 = shufflevector <16 x i8> %200, <16 x i8> %197, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %213

202:                                              ; preds = %129
  %203 = getelementptr inbounds i8, i8* %141, i64 2
  %204 = load i8, i8* %203, align 1
  %205 = insertelement <16 x i8> <i8 0, i8 0, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, i8 %204, i32 2
  br label %206

206:                                              ; preds = %202, %129
  %207 = phi <16 x i8> [ zeroinitializer, %129 ], [ %205, %202 ]
  %208 = bitcast i8* %141 to <2 x i8>*
  %209 = load <2 x i8>, <2 x i8>* %208, align 1
  %210 = shufflevector <2 x i8> %209, <2 x i8> undef, <16 x i32> <i32 0, i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %211 = shufflevector <16 x i8> %210, <16 x i8> %207, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %213

212:                                              ; preds = %129
  unreachable

213:                                              ; preds = %26, %112, %156, %176, %196, %206
  %214 = phi <16 x i16> [ %115, %112 ], [ %131, %206 ], [ %131, %196 ], [ %131, %176 ], [ %131, %156 ], [ %29, %26 ]
  %215 = phi <16 x i8> [ %127, %112 ], [ %211, %206 ], [ %201, %196 ], [ %181, %176 ], [ %161, %156 ], [ %41, %26 ]
  %216 = zext <16 x i8> %215 to <16 x i16>
  %217 = mul <16 x i16> %214, %4
  %218 = add <16 x i16> %217, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %219 = lshr <16 x i16> %218, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %220 = add nuw nsw <16 x i16> %219, %216
  %221 = icmp ult <16 x i16> %220, %7
  %222 = select <16 x i1> %221, <16 x i16> %220, <16 x i16> %7
  %223 = mul <16 x i16> %214, %5
  %224 = add <16 x i16> %223, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %225 = lshr <16 x i16> %224, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %226 = add nuw nsw <16 x i16> %225, %216
  %227 = icmp ult <16 x i16> %226, %7
  %228 = select <16 x i1> %227, <16 x i16> %226, <16 x i16> %7
  %229 = mul <16 x i16> %214, %6
  %230 = add <16 x i16> %229, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %231 = lshr <16 x i16> %230, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %232 = add nuw nsw <16 x i16> %231, %216
  %233 = icmp ult <16 x i16> %232, %7
  %234 = select <16 x i1> %233, <16 x i16> %232, <16 x i16> %7
  %235 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %236 = extractvalue { i8*, i8** } %235, 0
  %237 = extractvalue { i8*, i8** } %235, 1
  %238 = bitcast i8* %236 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %238(i64 %0, i8** %237, i64 %2, i64 %3, <16 x i16> %222, <16 x i16> %228, <16 x i16> %234, <16 x i16> %7, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL7swizzleEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #4 {
  %13 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %1) #10, !srcloc !98
  %14 = extractvalue { i8*, i8** } %13, 0
  %15 = extractvalue { i8*, i8** } %13, 1
  %16 = ptrtoint i8* %14 to i64
  %17 = trunc i64 %16 to i32
  %18 = shl i32 %17, 24
  %19 = ashr exact i32 %18, 24
  switch i32 %19, label %25 [
    i32 49, label %24
    i32 103, label %20
    i32 98, label %21
    i32 97, label %22
    i32 48, label %23
  ]

20:                                               ; preds = %12
  br label %25

21:                                               ; preds = %12
  br label %25

22:                                               ; preds = %12
  br label %25

23:                                               ; preds = %12
  br label %25

24:                                               ; preds = %12
  br label %25

25:                                               ; preds = %24, %23, %22, %21, %20, %12
  %26 = phi <16 x i16> [ %4, %12 ], [ zeroinitializer, %23 ], [ %7, %22 ], [ %6, %21 ], [ %5, %20 ], [ <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %24 ]
  %27 = shl i32 %17, 16
  %28 = ashr i32 %27, 24
  switch i32 %28, label %34 [
    i32 114, label %33
    i32 49, label %29
    i32 98, label %32
    i32 97, label %31
    i32 48, label %30
  ]

29:                                               ; preds = %25
  br label %34

30:                                               ; preds = %25
  br label %34

31:                                               ; preds = %25
  br label %34

32:                                               ; preds = %25
  br label %34

33:                                               ; preds = %25
  br label %34

34:                                               ; preds = %33, %32, %31, %30, %29, %25
  %35 = phi <16 x i16> [ <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %29 ], [ zeroinitializer, %30 ], [ %7, %31 ], [ %6, %32 ], [ %4, %33 ], [ %5, %25 ]
  %36 = shl i32 %17, 8
  %37 = ashr i32 %36, 24
  switch i32 %37, label %43 [
    i32 114, label %42
    i32 103, label %41
    i32 49, label %38
    i32 97, label %40
    i32 48, label %39
  ]

38:                                               ; preds = %34
  br label %43

39:                                               ; preds = %34
  br label %43

40:                                               ; preds = %34
  br label %43

41:                                               ; preds = %34
  br label %43

42:                                               ; preds = %34
  br label %43

43:                                               ; preds = %42, %41, %40, %39, %38, %34
  %44 = phi <16 x i16> [ <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %38 ], [ zeroinitializer, %39 ], [ %7, %40 ], [ %5, %41 ], [ %4, %42 ], [ %6, %34 ]
  %45 = ashr i32 %17, 24
  switch i32 %45, label %51 [
    i32 114, label %50
    i32 103, label %49
    i32 98, label %48
    i32 49, label %46
    i32 48, label %47
  ]

46:                                               ; preds = %43
  br label %51

47:                                               ; preds = %43
  br label %51

48:                                               ; preds = %43
  br label %51

49:                                               ; preds = %43
  br label %51

50:                                               ; preds = %43
  br label %51

51:                                               ; preds = %43, %46, %47, %48, %49, %50
  %52 = phi <16 x i16> [ <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>, %46 ], [ zeroinitializer, %47 ], [ %6, %48 ], [ %5, %49 ], [ %4, %50 ], [ %7, %43 ]
  %53 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %15) #10, !srcloc !98
  %54 = extractvalue { i8*, i8** } %53, 0
  %55 = extractvalue { i8*, i8** } %53, 1
  %56 = bitcast i8* %54 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  tail call void %56(i64 %0, i8** %55, i64 %2, i64 %3, <16 x i16> %26, <16 x i16> %35, <16 x i16> %44, <16 x i16> %52, <16 x i16> %8, <16 x i16> %9, <16 x i16> %10, <16 x i16> %11) #13
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN3hsw4lowpL11just_returnEmPPvmmDv16_tS3_S3_S3_S3_S3_S3_S3_(i64, i8** nocapture, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>) #6 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hsw4lowpL14start_pipelineEmmmmPPv(i64, i64, i64, i64, i8**) #4 {
  %6 = tail call { i8*, i8** } asm "lodsq", "={ax},={si},1,~{dirflag},~{fpsr},~{flags}"(i8** %4) #10, !srcloc !98
  %7 = extractvalue { i8*, i8** } %6, 0
  %8 = extractvalue { i8*, i8** } %6, 1
  %9 = bitcast i8* %7 to void (i64, i8**, i64, i64, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>, <16 x i16>)*
  %10 = icmp ult i64 %1, %3
  br i1 %10, label %11, label %16

11:                                               ; preds = %5
  %12 = add i64 %0, 16
  %13 = icmp ugt i64 %12, %2
  br label %14

14:                                               ; preds = %27, %11
  %15 = phi i64 [ %1, %11 ], [ %28, %27 ]
  br i1 %13, label %22, label %17

16:                                               ; preds = %27, %5
  ret void

17:                                               ; preds = %14, %17
  %18 = phi i64 [ %20, %17 ], [ %12, %14 ]
  %19 = phi i64 [ %18, %17 ], [ %0, %14 ]
  tail call void %9(i64 0, i8** %8, i64 %19, i64 %15, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer) #13
  %20 = add i64 %18, 16
  %21 = icmp ugt i64 %20, %2
  br i1 %21, label %22, label %17

22:                                               ; preds = %17, %14
  %23 = phi i64 [ %0, %14 ], [ %18, %17 ]
  %24 = sub i64 %2, %23
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %22
  tail call void %9(i64 %24, i8** %8, i64 %23, i64 %15, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer, <16 x i16> zeroinitializer) #13
  br label %27

27:                                               ; preds = %22, %26
  %28 = add nuw i64 %15, 1
  %29 = icmp eq i64 %28, %3
  br i1 %29, label %16, label %14
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3hsw14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPv(%"struct.skvm::InterpreterInstruction"*, i32, i32, i32, i32*, i32, i32, i8**) #7 comdat {
  %9 = alloca [16 x %union.Slot], align 128
  %10 = alloca <32 x i64>, align 256
  %11 = alloca <32 x i64>, align 256
  %12 = bitcast [16 x %union.Slot]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %12) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 %12, i8 -1, i64 2048, i1 false)
  %13 = getelementptr inbounds [16 x %union.Slot], [16 x %union.Slot]* %9, i64 0, i64 0
  %14 = icmp sgt i32 %2, 16
  br i1 %14, label %15, label %25

15:                                               ; preds = %8
  %16 = add nuw nsw i32 %2, 1
  %17 = sext i32 %16 to i64
  %18 = shl nsw i64 %17, 7
  %19 = tail call i8* @_Znam(i64 %18) #18
  %20 = ptrtoint i8* %19 to i64
  %21 = and i64 %20, 127
  %22 = add i64 %20, 128
  %23 = sub i64 %22, %21
  %24 = inttoptr i64 %23 to %union.Slot*
  br label %25

25:                                               ; preds = %15, %8
  %26 = phi i8* [ %19, %15 ], [ null, %8 ]
  %27 = phi %union.Slot* [ %24, %15 ], [ %13, %8 ]
  %28 = icmp sgt i32 %6, 0
  br i1 %28, label %29, label %2320

29:                                               ; preds = %25
  %30 = load <32 x i32>, <32 x i32>* bitcast ([64 x i32]* @_ZZN3hsw14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvE4iota to <32 x i32>*), align 128
  %31 = bitcast <32 x i64>* %10 to i8*
  %32 = bitcast <32 x i64>* %11 to i8*
  %33 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 28
  %34 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 29
  %35 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 30
  %36 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 31
  %37 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 24
  %38 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 25
  %39 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 26
  %40 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 27
  %41 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 20
  %42 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 21
  %43 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 22
  %44 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 23
  %45 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 16
  %46 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 17
  %47 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 18
  %48 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 19
  %49 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 28
  %50 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 29
  %51 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 30
  %52 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 31
  %53 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 24
  %54 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 25
  %55 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 26
  %56 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 27
  %57 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 20
  %58 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 21
  %59 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 22
  %60 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 23
  %61 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 16
  %62 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 17
  %63 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 18
  %64 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 19
  %65 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 12
  %66 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 13
  %67 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 14
  %68 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 15
  %69 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 8
  %70 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 9
  %71 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 10
  %72 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 11
  %73 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 12
  %74 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 13
  %75 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 14
  %76 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 15
  %77 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 8
  %78 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 9
  %79 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 10
  %80 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 11
  %81 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 4
  %82 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 5
  %83 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 6
  %84 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 7
  %85 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 4
  %86 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 5
  %87 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 6
  %88 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 7
  %89 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 0
  %90 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 1
  %91 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 2
  %92 = getelementptr inbounds <32 x i64>, <32 x i64>* %10, i64 0, i64 3
  %93 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 0
  %94 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 1
  %95 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 2
  %96 = getelementptr inbounds <32 x i64>, <32 x i64>* %11, i64 0, i64 3
  %97 = icmp sgt i32 %5, 0
  %98 = sext i32 %5 to i64
  %99 = add nsw i64 %98, -1
  %100 = getelementptr i8*, i8** %7, i64 %99
  %101 = getelementptr i32, i32* %4, i64 %98
  %102 = icmp ult i32 %5, 16
  %103 = bitcast i32* %101 to i8**
  %104 = icmp ugt i8** %103, %7
  %105 = bitcast i8** %100 to i32*
  %106 = icmp ugt i32* %105, %4
  %107 = and i1 %104, %106
  %108 = and i64 %98, -16
  %109 = icmp eq i64 %108, %98
  %110 = and i64 %98, 1
  %111 = icmp eq i64 %110, 0
  %112 = sub nsw i64 0, %98
  br label %113

113:                                              ; preds = %29, %218
  %114 = phi i32 [ %6, %29 ], [ %127, %218 ]
  %115 = phi i32 [ 0, %29 ], [ %3, %218 ]
  %116 = icmp sgt i32 %114, 31
  %117 = select i1 %116, i32 32, i32 1
  %118 = icmp slt i32 %115, %1
  br i1 %118, label %119, label %126

119:                                              ; preds = %113
  %120 = zext i1 %116 to i32
  %121 = insertelement <32 x i32> undef, i32 %114, i32 0
  %122 = shufflevector <32 x i32> %121, <32 x i32> undef, <32 x i32> zeroinitializer
  %123 = sub <32 x i32> %122, %30
  %124 = zext i32 %117 to i64
  %125 = sext i32 %115 to i64
  br label %220

126:                                              ; preds = %2316, %113
  %127 = sub nsw i32 %114, %117
  br i1 %97, label %128, label %218

128:                                              ; preds = %126
  %129 = or i1 %102, %107
  br i1 %129, label %184, label %130

130:                                              ; preds = %128
  %131 = insertelement <4 x i32> undef, i32 %117, i32 0
  %132 = shufflevector <4 x i32> %131, <4 x i32> undef, <4 x i32> zeroinitializer
  %133 = insertelement <4 x i32> undef, i32 %117, i32 0
  %134 = shufflevector <4 x i32> %133, <4 x i32> undef, <4 x i32> zeroinitializer
  %135 = insertelement <4 x i32> undef, i32 %117, i32 0
  %136 = shufflevector <4 x i32> %135, <4 x i32> undef, <4 x i32> zeroinitializer
  %137 = insertelement <4 x i32> undef, i32 %117, i32 0
  %138 = shufflevector <4 x i32> %137, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %139

139:                                              ; preds = %139, %130
  %140 = phi i64 [ 0, %130 ], [ %181, %139 ]
  %141 = getelementptr inbounds i8*, i8** %7, i64 %140
  %142 = bitcast i8** %141 to <4 x i8*>*
  %143 = load <4 x i8*>, <4 x i8*>* %142, align 8, !alias.scope !103, !noalias !106
  %144 = getelementptr inbounds i8*, i8** %141, i64 4
  %145 = bitcast i8** %144 to <4 x i8*>*
  %146 = load <4 x i8*>, <4 x i8*>* %145, align 8, !alias.scope !103, !noalias !106
  %147 = getelementptr inbounds i8*, i8** %141, i64 8
  %148 = bitcast i8** %147 to <4 x i8*>*
  %149 = load <4 x i8*>, <4 x i8*>* %148, align 8, !alias.scope !103, !noalias !106
  %150 = getelementptr inbounds i8*, i8** %141, i64 12
  %151 = bitcast i8** %150 to <4 x i8*>*
  %152 = load <4 x i8*>, <4 x i8*>* %151, align 8, !alias.scope !103, !noalias !106
  %153 = getelementptr inbounds i32, i32* %4, i64 %140
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 4, !alias.scope !106
  %156 = getelementptr inbounds i32, i32* %153, i64 4
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4, !alias.scope !106
  %159 = getelementptr inbounds i32, i32* %153, i64 8
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4, !alias.scope !106
  %162 = getelementptr inbounds i32, i32* %153, i64 12
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 4, !alias.scope !106
  %165 = mul nsw <4 x i32> %155, %132
  %166 = mul nsw <4 x i32> %158, %134
  %167 = mul nsw <4 x i32> %161, %136
  %168 = mul nsw <4 x i32> %164, %138
  %169 = sext <4 x i32> %165 to <4 x i64>
  %170 = sext <4 x i32> %166 to <4 x i64>
  %171 = sext <4 x i32> %167 to <4 x i64>
  %172 = sext <4 x i32> %168 to <4 x i64>
  %173 = getelementptr inbounds i8, <4 x i8*> %143, <4 x i64> %169
  %174 = getelementptr inbounds i8, <4 x i8*> %146, <4 x i64> %170
  %175 = getelementptr inbounds i8, <4 x i8*> %149, <4 x i64> %171
  %176 = getelementptr inbounds i8, <4 x i8*> %152, <4 x i64> %172
  %177 = bitcast i8** %141 to <4 x i8*>*
  store <4 x i8*> %173, <4 x i8*>* %177, align 8, !alias.scope !103, !noalias !106
  %178 = bitcast i8** %144 to <4 x i8*>*
  store <4 x i8*> %174, <4 x i8*>* %178, align 8, !alias.scope !103, !noalias !106
  %179 = bitcast i8** %147 to <4 x i8*>*
  store <4 x i8*> %175, <4 x i8*>* %179, align 8, !alias.scope !103, !noalias !106
  %180 = bitcast i8** %150 to <4 x i8*>*
  store <4 x i8*> %176, <4 x i8*>* %180, align 8, !alias.scope !103, !noalias !106
  %181 = add i64 %140, 16
  %182 = icmp eq i64 %181, %108
  br i1 %182, label %183, label %139, !llvm.loop !108

183:                                              ; preds = %139
  br i1 %109, label %218, label %184

184:                                              ; preds = %128, %183
  %185 = phi i64 [ 0, %128 ], [ %108, %183 ]
  %186 = xor i64 %185, -1
  br i1 %111, label %196, label %187

187:                                              ; preds = %184
  %188 = getelementptr inbounds i8*, i8** %7, i64 %185
  %189 = load i8*, i8** %188, align 8
  %190 = getelementptr inbounds i32, i32* %4, i64 %185
  %191 = load i32, i32* %190, align 4
  %192 = mul nsw i32 %191, %117
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds i8, i8* %189, i64 %193
  store i8* %194, i8** %188, align 8
  %195 = or i64 %185, 1
  br label %196

196:                                              ; preds = %187, %184
  %197 = phi i64 [ %195, %187 ], [ %185, %184 ]
  %198 = icmp eq i64 %186, %112
  br i1 %198, label %218, label %199

199:                                              ; preds = %196, %199
  %200 = phi i64 [ %216, %199 ], [ %197, %196 ]
  %201 = getelementptr inbounds i8*, i8** %7, i64 %200
  %202 = load i8*, i8** %201, align 8
  %203 = getelementptr inbounds i32, i32* %4, i64 %200
  %204 = load i32, i32* %203, align 4
  %205 = mul nsw i32 %204, %117
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i8, i8* %202, i64 %206
  store i8* %207, i8** %201, align 8
  %208 = add nuw nsw i64 %200, 1
  %209 = getelementptr inbounds i8*, i8** %7, i64 %208
  %210 = load i8*, i8** %209, align 8
  %211 = getelementptr inbounds i32, i32* %4, i64 %208
  %212 = load i32, i32* %211, align 4
  %213 = mul nsw i32 %212, %117
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds i8, i8* %210, i64 %214
  store i8* %215, i8** %209, align 8
  %216 = add nuw nsw i64 %200, 2
  %217 = icmp eq i64 %216, %98
  br i1 %217, label %218, label %199, !llvm.loop !109

218:                                              ; preds = %196, %199, %183, %126
  %219 = icmp sgt i32 %127, 0
  br i1 %219, label %113, label %2320

220:                                              ; preds = %2316, %119
  %221 = phi i64 [ %125, %119 ], [ %2317, %2316 ]
  %222 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %221, i32 0
  %223 = load i32, i32* %222, align 4
  %224 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %221, i32 1
  %225 = load i32, i32* %224, align 4
  %226 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %221, i32 2
  %227 = load i32, i32* %226, align 4
  %228 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %221, i32 3
  %229 = load i32, i32* %228, align 4
  %230 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %221, i32 4
  %231 = load i32, i32* %230, align 4
  %232 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %221, i32 6
  %233 = load i32, i32* %232, align 4
  %234 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %221, i32 7
  %235 = load i32, i32* %234, align 4
  %236 = shl nsw i32 %223, 1
  %237 = or i32 %236, %120
  switch i32 %237, label %238 [
    i32 2, label %239
    i32 4, label %247
    i32 6, label %256
    i32 8, label %265
    i32 3, label %281
    i32 5, label %291
    i32 7, label %301
    i32 9, label %308
    i32 12, label %325
    i32 14, label %334
    i32 16, label %344
    i32 18, label %354
    i32 13, label %367
    i32 15, label %377
    i32 17, label %387
    i32 19, label %394
    i32 24, label %409
    i32 26, label %436
    i32 28, label %463
    i32 25, label %489
    i32 27, label %787
    i32 29, label %1085
    i32 10, label %1119
    i32 11, label %1119
    i32 20, label %1323
    i32 21, label %1323
    i32 0, label %2316
    i32 1, label %2316
    i32 22, label %1477
    i32 23, label %1477
    i32 30, label %1481
    i32 31, label %1481
    i32 32, label %1500
    i32 33, label %1500
    i32 34, label %1512
    i32 35, label %1512
    i32 38, label %1525
    i32 39, label %1525
    i32 42, label %1538
    i32 43, label %1538
    i32 46, label %1551
    i32 47, label %1551
    i32 48, label %1564
    i32 49, label %1564
    i32 50, label %1578
    i32 51, label %1578
    i32 52, label %1592
    i32 53, label %1592
    i32 54, label %1645
    i32 55, label %1645
    i32 56, label %1694
    i32 57, label %1694
    i32 58, label %1743
    i32 59, label %1743
    i32 36, label %1874
    i32 37, label %1874
    i32 40, label %1887
    i32 41, label %1887
    i32 44, label %1900
    i32 45, label %1900
    i32 60, label %1913
    i32 61, label %1913
    i32 64, label %1924
    i32 65, label %1924
    i32 62, label %1935
    i32 63, label %1935
    i32 82, label %1946
    i32 83, label %1946
    i32 80, label %1960
    i32 81, label %1960
    i32 88, label %1974
    i32 89, label %1974
    i32 86, label %1988
    i32 87, label %1988
    i32 84, label %2002
    i32 85, label %2002
    i32 90, label %2016
    i32 91, label %2016
    i32 92, label %2030
    i32 93, label %2030
    i32 94, label %2043
    i32 95, label %2043
    i32 96, label %2056
    i32 97, label %2056
    i32 98, label %2069
    i32 99, label %2069
    i32 100, label %2083
    i32 101, label %2083
    i32 66, label %2136
    i32 67, label %2136
    i32 68, label %2163
    i32 69, label %2163
    i32 78, label %2190
    i32 79, label %2190
    i32 70, label %2199
    i32 71, label %2199
    i32 72, label %2208
    i32 73, label %2208
    i32 74, label %2236
    i32 75, label %2236
    i32 76, label %2293
    i32 77, label %2293
  ]

238:                                              ; preds = %220
  tail call void @llvm.trap()
  unreachable

239:                                              ; preds = %220
  %240 = sext i32 %233 to i64
  %241 = getelementptr inbounds i8*, i8** %7, i64 %240
  %242 = load i8*, i8** %241, align 8
  %243 = sext i32 %227 to i64
  %244 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %243
  %245 = bitcast %union.Slot* %244 to i8*
  %246 = load i8, i8* %245, align 128
  store i8 %246, i8* %242, align 1
  br label %2316

247:                                              ; preds = %220
  %248 = sext i32 %233 to i64
  %249 = getelementptr inbounds i8*, i8** %7, i64 %248
  %250 = bitcast i8** %249 to i16**
  %251 = load i16*, i16** %250, align 8
  %252 = sext i32 %227 to i64
  %253 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %252
  %254 = bitcast %union.Slot* %253 to i16*
  %255 = load i16, i16* %254, align 128
  store i16 %255, i16* %251, align 1
  br label %2316

256:                                              ; preds = %220
  %257 = sext i32 %233 to i64
  %258 = getelementptr inbounds i8*, i8** %7, i64 %257
  %259 = bitcast i8** %258 to i32**
  %260 = load i32*, i32** %259, align 8
  %261 = sext i32 %227 to i64
  %262 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %261
  %263 = bitcast %union.Slot* %262 to i32*
  %264 = load i32, i32* %263, align 128
  store i32 %264, i32* %260, align 1
  br label %2316

265:                                              ; preds = %220
  %266 = sext i32 %233 to i64
  %267 = getelementptr inbounds i8*, i8** %7, i64 %266
  %268 = bitcast i8** %267 to i32**
  %269 = load i32*, i32** %268, align 8
  %270 = sext i32 %227 to i64
  %271 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %270
  %272 = bitcast %union.Slot* %271 to i32*
  %273 = load i32, i32* %272, align 128
  store i32 %273, i32* %269, align 1
  %274 = load i8*, i8** %267, align 8
  %275 = getelementptr inbounds i8, i8* %274, i64 4
  %276 = sext i32 %229 to i64
  %277 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %276
  %278 = bitcast %union.Slot* %277 to i32*
  %279 = bitcast i8* %275 to i32*
  %280 = load i32, i32* %278, align 128
  store i32 %280, i32* %279, align 1
  br label %2316

281:                                              ; preds = %220
  %282 = sext i32 %227 to i64
  %283 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %282
  %284 = bitcast %union.Slot* %283 to <32 x i32>*
  %285 = load <32 x i32>, <32 x i32>* %284, align 128, !noalias !110
  %286 = trunc <32 x i32> %285 to <32 x i8>
  %287 = sext i32 %233 to i64
  %288 = getelementptr inbounds i8*, i8** %7, i64 %287
  %289 = bitcast i8** %288 to <32 x i8>**
  %290 = load <32 x i8>*, <32 x i8>** %289, align 8
  store <32 x i8> %286, <32 x i8>* %290, align 1
  br label %2316

291:                                              ; preds = %220
  %292 = sext i32 %227 to i64
  %293 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %292
  %294 = bitcast %union.Slot* %293 to <32 x i32>*
  %295 = load <32 x i32>, <32 x i32>* %294, align 128, !noalias !113
  %296 = trunc <32 x i32> %295 to <32 x i16>
  %297 = sext i32 %233 to i64
  %298 = getelementptr inbounds i8*, i8** %7, i64 %297
  %299 = bitcast i8** %298 to <32 x i16>**
  %300 = load <32 x i16>*, <32 x i16>** %299, align 8
  store <32 x i16> %296, <32 x i16>* %300, align 1
  br label %2316

301:                                              ; preds = %220
  %302 = sext i32 %227 to i64
  %303 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %302
  %304 = sext i32 %233 to i64
  %305 = getelementptr inbounds i8*, i8** %7, i64 %304
  %306 = load i8*, i8** %305, align 8
  %307 = bitcast %union.Slot* %303 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %306, i8* align 128 %307, i64 128, i1 false) #13
  br label %2316

308:                                              ; preds = %220
  %309 = sext i32 %227 to i64
  %310 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %309
  %311 = bitcast %union.Slot* %310 to <32 x i32>*
  %312 = load <32 x i32>, <32 x i32>* %311, align 128, !noalias !116
  %313 = zext <32 x i32> %312 to <32 x i64>
  %314 = sext i32 %229 to i64
  %315 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %314
  %316 = bitcast %union.Slot* %315 to <32 x i32>*
  %317 = load <32 x i32>, <32 x i32>* %316, align 128, !noalias !119
  %318 = zext <32 x i32> %317 to <32 x i64>
  %319 = shl nuw <32 x i64> %318, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %320 = or <32 x i64> %319, %313
  %321 = sext i32 %233 to i64
  %322 = getelementptr inbounds i8*, i8** %7, i64 %321
  %323 = bitcast i8** %322 to <32 x i64>**
  %324 = load <32 x i64>*, <32 x i64>** %323, align 8
  store <32 x i64> %320, <32 x i64>* %324, align 1
  br label %2316

325:                                              ; preds = %220
  %326 = sext i32 %225 to i64
  %327 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %326
  %328 = bitcast %union.Slot* %327 to i8*
  %329 = sext i32 %233 to i64
  %330 = getelementptr inbounds i8*, i8** %7, i64 %329
  %331 = bitcast %union.Slot* %327 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 128 %331, i8 0, i64 128, i1 false)
  %332 = load i8*, i8** %330, align 8
  %333 = load i8, i8* %332, align 1
  store i8 %333, i8* %328, align 128
  br label %2316

334:                                              ; preds = %220
  %335 = sext i32 %225 to i64
  %336 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %335
  %337 = sext i32 %233 to i64
  %338 = getelementptr inbounds i8*, i8** %7, i64 %337
  %339 = bitcast i8** %338 to i16**
  %340 = bitcast %union.Slot* %336 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 128 %340, i8 0, i64 128, i1 false)
  %341 = load i16*, i16** %339, align 8
  %342 = bitcast %union.Slot* %336 to i16*
  %343 = load i16, i16* %341, align 1
  store i16 %343, i16* %342, align 128
  br label %2316

344:                                              ; preds = %220
  %345 = sext i32 %225 to i64
  %346 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %345
  %347 = bitcast %union.Slot* %346 to i32*
  %348 = sext i32 %233 to i64
  %349 = getelementptr inbounds i8*, i8** %7, i64 %348
  %350 = bitcast i8** %349 to i32**
  %351 = bitcast %union.Slot* %346 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 128 %351, i8 0, i64 128, i1 false)
  %352 = load i32*, i32** %350, align 8
  %353 = load i32, i32* %352, align 1
  store i32 %353, i32* %347, align 128
  br label %2316

354:                                              ; preds = %220
  %355 = sext i32 %225 to i64
  %356 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %355
  %357 = bitcast %union.Slot* %356 to i32*
  %358 = sext i32 %233 to i64
  %359 = getelementptr inbounds i8*, i8** %7, i64 %358
  %360 = bitcast %union.Slot* %356 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 128 %360, i8 0, i64 128, i1 false)
  %361 = load i8*, i8** %359, align 8
  %362 = shl nsw i32 %235, 2
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds i8, i8* %361, i64 %363
  %365 = bitcast i8* %364 to i32*
  %366 = load i32, i32* %365, align 1
  store i32 %366, i32* %357, align 128
  br label %2316

367:                                              ; preds = %220
  %368 = sext i32 %233 to i64
  %369 = getelementptr inbounds i8*, i8** %7, i64 %368
  %370 = bitcast i8** %369 to <32 x i8>**
  %371 = load <32 x i8>*, <32 x i8>** %370, align 8
  %372 = load <32 x i8>, <32 x i8>* %371, align 1
  %373 = zext <32 x i8> %372 to <32 x i32>
  %374 = sext i32 %225 to i64
  %375 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %374
  %376 = bitcast %union.Slot* %375 to <32 x i32>*
  store <32 x i32> %373, <32 x i32>* %376, align 128
  br label %2316

377:                                              ; preds = %220
  %378 = sext i32 %233 to i64
  %379 = getelementptr inbounds i8*, i8** %7, i64 %378
  %380 = bitcast i8** %379 to <32 x i16>**
  %381 = load <32 x i16>*, <32 x i16>** %380, align 8
  %382 = load <32 x i16>, <32 x i16>* %381, align 1
  %383 = zext <32 x i16> %382 to <32 x i32>
  %384 = sext i32 %225 to i64
  %385 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %384
  %386 = bitcast %union.Slot* %385 to <32 x i32>*
  store <32 x i32> %383, <32 x i32>* %386, align 128
  br label %2316

387:                                              ; preds = %220
  %388 = sext i32 %233 to i64
  %389 = getelementptr inbounds i8*, i8** %7, i64 %388
  %390 = load i8*, i8** %389, align 8
  %391 = sext i32 %225 to i64
  %392 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %391
  %393 = bitcast %union.Slot* %392 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 128 %393, i8* align 1 %390, i64 128, i1 false)
  br label %2316

394:                                              ; preds = %220
  %395 = sext i32 %233 to i64
  %396 = getelementptr inbounds i8*, i8** %7, i64 %395
  %397 = bitcast i8** %396 to <32 x i64>**
  %398 = load <32 x i64>*, <32 x i64>** %397, align 8
  %399 = load <32 x i64>, <32 x i64>* %398, align 1
  %400 = shl nsw i32 %235, 5
  %401 = insertelement <32 x i32> undef, i32 %400, i32 0
  %402 = shufflevector <32 x i32> %401, <32 x i32> undef, <32 x i32> zeroinitializer
  %403 = zext <32 x i32> %402 to <32 x i64>
  %404 = lshr <32 x i64> %399, %403
  %405 = trunc <32 x i64> %404 to <32 x i32>
  %406 = sext i32 %225 to i64
  %407 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %406
  %408 = bitcast %union.Slot* %407 to <32 x i32>*
  store <32 x i32> %405, <32 x i32>* %408, align 128
  br label %2316

409:                                              ; preds = %220
  %410 = sext i32 %233 to i64
  %411 = getelementptr inbounds i8*, i8** %7, i64 %410
  %412 = load i8*, i8** %411, align 8
  %413 = sext i32 %235 to i64
  %414 = getelementptr inbounds i8, i8* %412, i64 %413
  %415 = bitcast i8* %414 to i8**
  %416 = load i8*, i8** %415, align 1
  %417 = sext i32 %227 to i64
  %418 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %417
  %419 = bitcast %union.Slot* %418 to i32*
  %420 = load i32, i32* %419, align 4
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds i8, i8* %416, i64 %421
  %423 = load i8, i8* %422, align 1
  %424 = zext i8 %423 to i32
  %425 = sext i32 %225 to i64
  %426 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %425
  %427 = insertelement <8 x i32> undef, i32 %424, i32 0
  %428 = shufflevector <8 x i32> %427, <8 x i32> undef, <8 x i32> zeroinitializer
  %429 = bitcast %union.Slot* %426 to <8 x i32>*
  store <8 x i32> %428, <8 x i32>* %429, align 128
  %430 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %425, i32 0, i32 0, i32 1
  %431 = bitcast %"struct.skvx::Vec.53"* %430 to <8 x i32>*
  store <8 x i32> %428, <8 x i32>* %431, align 32
  %432 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %425, i32 0, i32 1
  %433 = bitcast %"struct.skvx::Vec.52"* %432 to <8 x i32>*
  store <8 x i32> %428, <8 x i32>* %433, align 64
  %434 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %425, i32 0, i32 1, i32 1
  %435 = bitcast %"struct.skvx::Vec.53"* %434 to <8 x i32>*
  store <8 x i32> %428, <8 x i32>* %435, align 32
  br label %2316

436:                                              ; preds = %220
  %437 = sext i32 %233 to i64
  %438 = getelementptr inbounds i8*, i8** %7, i64 %437
  %439 = load i8*, i8** %438, align 8
  %440 = sext i32 %235 to i64
  %441 = getelementptr inbounds i8, i8* %439, i64 %440
  %442 = bitcast i8* %441 to i16**
  %443 = load i16*, i16** %442, align 1
  %444 = sext i32 %227 to i64
  %445 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %444
  %446 = bitcast %union.Slot* %445 to i32*
  %447 = load i32, i32* %446, align 4
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds i16, i16* %443, i64 %448
  %450 = load i16, i16* %449, align 2
  %451 = zext i16 %450 to i32
  %452 = sext i32 %225 to i64
  %453 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %452
  %454 = insertelement <8 x i32> undef, i32 %451, i32 0
  %455 = shufflevector <8 x i32> %454, <8 x i32> undef, <8 x i32> zeroinitializer
  %456 = bitcast %union.Slot* %453 to <8 x i32>*
  store <8 x i32> %455, <8 x i32>* %456, align 128
  %457 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %452, i32 0, i32 0, i32 1
  %458 = bitcast %"struct.skvx::Vec.53"* %457 to <8 x i32>*
  store <8 x i32> %455, <8 x i32>* %458, align 32
  %459 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %452, i32 0, i32 1
  %460 = bitcast %"struct.skvx::Vec.52"* %459 to <8 x i32>*
  store <8 x i32> %455, <8 x i32>* %460, align 64
  %461 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %452, i32 0, i32 1, i32 1
  %462 = bitcast %"struct.skvx::Vec.53"* %461 to <8 x i32>*
  store <8 x i32> %455, <8 x i32>* %462, align 32
  br label %2316

463:                                              ; preds = %220
  %464 = sext i32 %233 to i64
  %465 = getelementptr inbounds i8*, i8** %7, i64 %464
  %466 = load i8*, i8** %465, align 8
  %467 = sext i32 %235 to i64
  %468 = getelementptr inbounds i8, i8* %466, i64 %467
  %469 = bitcast i8* %468 to i32**
  %470 = load i32*, i32** %469, align 1
  %471 = sext i32 %227 to i64
  %472 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %471
  %473 = bitcast %union.Slot* %472 to i32*
  %474 = load i32, i32* %473, align 4
  %475 = sext i32 %474 to i64
  %476 = getelementptr inbounds i32, i32* %470, i64 %475
  %477 = load i32, i32* %476, align 4
  %478 = sext i32 %225 to i64
  %479 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %478
  %480 = insertelement <8 x i32> undef, i32 %477, i32 0
  %481 = shufflevector <8 x i32> %480, <8 x i32> undef, <8 x i32> zeroinitializer
  %482 = bitcast %union.Slot* %479 to <8 x i32>*
  store <8 x i32> %481, <8 x i32>* %482, align 128
  %483 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %478, i32 0, i32 0, i32 1
  %484 = bitcast %"struct.skvx::Vec.53"* %483 to <8 x i32>*
  store <8 x i32> %481, <8 x i32>* %484, align 32
  %485 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %478, i32 0, i32 1
  %486 = bitcast %"struct.skvx::Vec.52"* %485 to <8 x i32>*
  store <8 x i32> %481, <8 x i32>* %486, align 64
  %487 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %478, i32 0, i32 1, i32 1
  %488 = bitcast %"struct.skvx::Vec.53"* %487 to <8 x i32>*
  store <8 x i32> %481, <8 x i32>* %488, align 32
  br label %2316

489:                                              ; preds = %220
  %490 = sext i32 %233 to i64
  %491 = getelementptr inbounds i8*, i8** %7, i64 %490
  %492 = load i8*, i8** %491, align 8
  %493 = sext i32 %235 to i64
  %494 = getelementptr inbounds i8, i8* %492, i64 %493
  %495 = bitcast i8* %494 to i8**
  %496 = load i8*, i8** %495, align 1
  %497 = sext i32 %227 to i64
  %498 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497
  %499 = bitcast %union.Slot* %498 to i32*
  %500 = load i32, i32* %499, align 4, !noalias !122
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds i8, i8* %496, i64 %501
  %503 = load i8, i8* %502, align 1
  %504 = zext i8 %503 to i32
  %505 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %506 = bitcast %"struct.skvx::Vec.56"* %505 to i32*
  %507 = load i32, i32* %506, align 4, !noalias !122
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds i8, i8* %496, i64 %508
  %510 = load i8, i8* %509, align 1
  %511 = zext i8 %510 to i32
  %512 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 0, i32 0, i32 1
  %513 = bitcast %"struct.skvx::Vec.55"* %512 to i32*
  %514 = load i32, i32* %513, align 4, !noalias !122
  %515 = sext i32 %514 to i64
  %516 = getelementptr inbounds i8, i8* %496, i64 %515
  %517 = load i8, i8* %516, align 1
  %518 = zext i8 %517 to i32
  %519 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1
  %520 = bitcast %"struct.skvx::Vec.56"* %519 to i32*
  %521 = load i32, i32* %520, align 4, !noalias !122
  %522 = sext i32 %521 to i64
  %523 = getelementptr inbounds i8, i8* %496, i64 %522
  %524 = load i8, i8* %523, align 1
  %525 = zext i8 %524 to i32
  %526 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 0, i32 1
  %527 = bitcast %"struct.skvx::Vec.54"* %526 to i32*
  %528 = load i32, i32* %527, align 4, !noalias !122
  %529 = sext i32 %528 to i64
  %530 = getelementptr inbounds i8, i8* %496, i64 %529
  %531 = load i8, i8* %530, align 1
  %532 = zext i8 %531 to i32
  %533 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %534 = bitcast %"struct.skvx::Vec.56"* %533 to i32*
  %535 = load i32, i32* %534, align 4, !noalias !122
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds i8, i8* %496, i64 %536
  %538 = load i8, i8* %537, align 1
  %539 = zext i8 %538 to i32
  %540 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 0, i32 1, i32 1
  %541 = bitcast %"struct.skvx::Vec.55"* %540 to i32*
  %542 = load i32, i32* %541, align 4, !noalias !122
  %543 = sext i32 %542 to i64
  %544 = getelementptr inbounds i8, i8* %496, i64 %543
  %545 = load i8, i8* %544, align 1
  %546 = zext i8 %545 to i32
  %547 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1
  %548 = bitcast %"struct.skvx::Vec.56"* %547 to i32*
  %549 = load i32, i32* %548, align 4, !noalias !122
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds i8, i8* %496, i64 %550
  %552 = load i8, i8* %551, align 1
  %553 = zext i8 %552 to i32
  %554 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 1
  %555 = bitcast %"struct.skvx::Vec.53"* %554 to i32*
  %556 = load i32, i32* %555, align 4, !noalias !122
  %557 = sext i32 %556 to i64
  %558 = getelementptr inbounds i8, i8* %496, i64 %557
  %559 = load i8, i8* %558, align 1
  %560 = zext i8 %559 to i32
  %561 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %562 = bitcast %"struct.skvx::Vec.56"* %561 to i32*
  %563 = load i32, i32* %562, align 4, !noalias !122
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds i8, i8* %496, i64 %564
  %566 = load i8, i8* %565, align 1
  %567 = zext i8 %566 to i32
  %568 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 1, i32 0, i32 1
  %569 = bitcast %"struct.skvx::Vec.55"* %568 to i32*
  %570 = load i32, i32* %569, align 4, !noalias !122
  %571 = sext i32 %570 to i64
  %572 = getelementptr inbounds i8, i8* %496, i64 %571
  %573 = load i8, i8* %572, align 1
  %574 = zext i8 %573 to i32
  %575 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %576 = bitcast %"struct.skvx::Vec.56"* %575 to i32*
  %577 = load i32, i32* %576, align 4, !noalias !122
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds i8, i8* %496, i64 %578
  %580 = load i8, i8* %579, align 1
  %581 = zext i8 %580 to i32
  %582 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 1, i32 1
  %583 = bitcast %"struct.skvx::Vec.54"* %582 to i32*
  %584 = load i32, i32* %583, align 4, !noalias !122
  %585 = sext i32 %584 to i64
  %586 = getelementptr inbounds i8, i8* %496, i64 %585
  %587 = load i8, i8* %586, align 1
  %588 = zext i8 %587 to i32
  %589 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1
  %590 = bitcast %"struct.skvx::Vec.56"* %589 to i32*
  %591 = load i32, i32* %590, align 4, !noalias !122
  %592 = sext i32 %591 to i64
  %593 = getelementptr inbounds i8, i8* %496, i64 %592
  %594 = load i8, i8* %593, align 1
  %595 = zext i8 %594 to i32
  %596 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 1, i32 1, i32 1
  %597 = bitcast %"struct.skvx::Vec.55"* %596 to i32*
  %598 = load i32, i32* %597, align 4, !noalias !122
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds i8, i8* %496, i64 %599
  %601 = load i8, i8* %600, align 1
  %602 = zext i8 %601 to i32
  %603 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1
  %604 = bitcast %"struct.skvx::Vec.56"* %603 to i32*
  %605 = load i32, i32* %604, align 4, !noalias !122
  %606 = sext i32 %605 to i64
  %607 = getelementptr inbounds i8, i8* %496, i64 %606
  %608 = load i8, i8* %607, align 1
  %609 = zext i8 %608 to i32
  %610 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1
  %611 = bitcast %"struct.skvx::Vec.52"* %610 to i32*
  %612 = load i32, i32* %611, align 4, !noalias !122
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds i8, i8* %496, i64 %613
  %615 = load i8, i8* %614, align 1
  %616 = zext i8 %615 to i32
  %617 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %618 = bitcast %"struct.skvx::Vec.56"* %617 to i32*
  %619 = load i32, i32* %618, align 4, !noalias !122
  %620 = sext i32 %619 to i64
  %621 = getelementptr inbounds i8, i8* %496, i64 %620
  %622 = load i8, i8* %621, align 1
  %623 = zext i8 %622 to i32
  %624 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 0, i32 0, i32 1
  %625 = bitcast %"struct.skvx::Vec.55"* %624 to i32*
  %626 = load i32, i32* %625, align 4, !noalias !122
  %627 = sext i32 %626 to i64
  %628 = getelementptr inbounds i8, i8* %496, i64 %627
  %629 = load i8, i8* %628, align 1
  %630 = zext i8 %629 to i32
  %631 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 0, i32 0, i32 1, i32 1
  %632 = bitcast %"struct.skvx::Vec.56"* %631 to i32*
  %633 = load i32, i32* %632, align 4, !noalias !122
  %634 = sext i32 %633 to i64
  %635 = getelementptr inbounds i8, i8* %496, i64 %634
  %636 = load i8, i8* %635, align 1
  %637 = zext i8 %636 to i32
  %638 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 0, i32 1
  %639 = bitcast %"struct.skvx::Vec.54"* %638 to i32*
  %640 = load i32, i32* %639, align 4, !noalias !122
  %641 = sext i32 %640 to i64
  %642 = getelementptr inbounds i8, i8* %496, i64 %641
  %643 = load i8, i8* %642, align 1
  %644 = zext i8 %643 to i32
  %645 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1
  %646 = bitcast %"struct.skvx::Vec.56"* %645 to i32*
  %647 = load i32, i32* %646, align 4, !noalias !122
  %648 = sext i32 %647 to i64
  %649 = getelementptr inbounds i8, i8* %496, i64 %648
  %650 = load i8, i8* %649, align 1
  %651 = zext i8 %650 to i32
  %652 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 0, i32 1, i32 1
  %653 = bitcast %"struct.skvx::Vec.55"* %652 to i32*
  %654 = load i32, i32* %653, align 4, !noalias !122
  %655 = sext i32 %654 to i64
  %656 = getelementptr inbounds i8, i8* %496, i64 %655
  %657 = load i8, i8* %656, align 1
  %658 = zext i8 %657 to i32
  %659 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1
  %660 = bitcast %"struct.skvx::Vec.56"* %659 to i32*
  %661 = load i32, i32* %660, align 4, !noalias !122
  %662 = sext i32 %661 to i64
  %663 = getelementptr inbounds i8, i8* %496, i64 %662
  %664 = load i8, i8* %663, align 1
  %665 = zext i8 %664 to i32
  %666 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 1
  %667 = bitcast %"struct.skvx::Vec.53"* %666 to i32*
  %668 = load i32, i32* %667, align 4, !noalias !122
  %669 = sext i32 %668 to i64
  %670 = getelementptr inbounds i8, i8* %496, i64 %669
  %671 = load i8, i8* %670, align 1
  %672 = zext i8 %671 to i32
  %673 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %674 = bitcast %"struct.skvx::Vec.56"* %673 to i32*
  %675 = load i32, i32* %674, align 4, !noalias !122
  %676 = sext i32 %675 to i64
  %677 = getelementptr inbounds i8, i8* %496, i64 %676
  %678 = load i8, i8* %677, align 1
  %679 = zext i8 %678 to i32
  %680 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 1, i32 0, i32 1
  %681 = bitcast %"struct.skvx::Vec.55"* %680 to i32*
  %682 = load i32, i32* %681, align 4, !noalias !122
  %683 = sext i32 %682 to i64
  %684 = getelementptr inbounds i8, i8* %496, i64 %683
  %685 = load i8, i8* %684, align 1
  %686 = zext i8 %685 to i32
  %687 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1
  %688 = bitcast %"struct.skvx::Vec.56"* %687 to i32*
  %689 = load i32, i32* %688, align 4, !noalias !122
  %690 = sext i32 %689 to i64
  %691 = getelementptr inbounds i8, i8* %496, i64 %690
  %692 = load i8, i8* %691, align 1
  %693 = zext i8 %692 to i32
  %694 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 1, i32 1
  %695 = bitcast %"struct.skvx::Vec.54"* %694 to i32*
  %696 = load i32, i32* %695, align 4, !noalias !122
  %697 = sext i32 %696 to i64
  %698 = getelementptr inbounds i8, i8* %496, i64 %697
  %699 = load i8, i8* %698, align 1
  %700 = zext i8 %699 to i32
  %701 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1
  %702 = bitcast %"struct.skvx::Vec.56"* %701 to i32*
  %703 = load i32, i32* %702, align 4, !noalias !122
  %704 = sext i32 %703 to i64
  %705 = getelementptr inbounds i8, i8* %496, i64 %704
  %706 = load i8, i8* %705, align 1
  %707 = zext i8 %706 to i32
  %708 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 1, i32 1, i32 1
  %709 = bitcast %"struct.skvx::Vec.55"* %708 to i32*
  %710 = load i32, i32* %709, align 4, !noalias !122
  %711 = sext i32 %710 to i64
  %712 = getelementptr inbounds i8, i8* %496, i64 %711
  %713 = load i8, i8* %712, align 1
  %714 = zext i8 %713 to i32
  %715 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %497, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1
  %716 = bitcast %"struct.skvx::Vec.56"* %715 to i32*
  %717 = load i32, i32* %716, align 4, !noalias !122
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds i8, i8* %496, i64 %718
  %720 = load i8, i8* %719, align 1
  %721 = zext i8 %720 to i32
  %722 = sext i32 %225 to i64
  %723 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722
  %724 = bitcast %union.Slot* %723 to i32*
  store i32 %504, i32* %724, align 128
  %725 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %726 = bitcast %"struct.skvx::Vec.56"* %725 to i32*
  store i32 %511, i32* %726, align 4
  %727 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 0, i32 0, i32 1
  %728 = bitcast %"struct.skvx::Vec.55"* %727 to i32*
  store i32 %518, i32* %728, align 8
  %729 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1
  %730 = bitcast %"struct.skvx::Vec.56"* %729 to i32*
  store i32 %525, i32* %730, align 4
  %731 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 0, i32 1
  %732 = bitcast %"struct.skvx::Vec.54"* %731 to i32*
  store i32 %532, i32* %732, align 16
  %733 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %734 = bitcast %"struct.skvx::Vec.56"* %733 to i32*
  store i32 %539, i32* %734, align 4
  %735 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 0, i32 1, i32 1
  %736 = bitcast %"struct.skvx::Vec.55"* %735 to i32*
  store i32 %546, i32* %736, align 8
  %737 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1
  %738 = bitcast %"struct.skvx::Vec.56"* %737 to i32*
  store i32 %553, i32* %738, align 4
  %739 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 1
  %740 = bitcast %"struct.skvx::Vec.53"* %739 to i32*
  store i32 %560, i32* %740, align 32
  %741 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %742 = bitcast %"struct.skvx::Vec.56"* %741 to i32*
  store i32 %567, i32* %742, align 4
  %743 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 1, i32 0, i32 1
  %744 = bitcast %"struct.skvx::Vec.55"* %743 to i32*
  store i32 %574, i32* %744, align 8
  %745 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %746 = bitcast %"struct.skvx::Vec.56"* %745 to i32*
  store i32 %581, i32* %746, align 4
  %747 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 1, i32 1
  %748 = bitcast %"struct.skvx::Vec.54"* %747 to i32*
  store i32 %588, i32* %748, align 16
  %749 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1
  %750 = bitcast %"struct.skvx::Vec.56"* %749 to i32*
  store i32 %595, i32* %750, align 4
  %751 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 1, i32 1, i32 1
  %752 = bitcast %"struct.skvx::Vec.55"* %751 to i32*
  store i32 %602, i32* %752, align 8
  %753 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1
  %754 = bitcast %"struct.skvx::Vec.56"* %753 to i32*
  store i32 %609, i32* %754, align 4
  %755 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1
  %756 = bitcast %"struct.skvx::Vec.52"* %755 to i32*
  store i32 %616, i32* %756, align 64
  %757 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %758 = bitcast %"struct.skvx::Vec.56"* %757 to i32*
  store i32 %623, i32* %758, align 4
  %759 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 0, i32 0, i32 1
  %760 = bitcast %"struct.skvx::Vec.55"* %759 to i32*
  store i32 %630, i32* %760, align 8
  %761 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 0, i32 0, i32 1, i32 1
  %762 = bitcast %"struct.skvx::Vec.56"* %761 to i32*
  store i32 %637, i32* %762, align 4
  %763 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 0, i32 1
  %764 = bitcast %"struct.skvx::Vec.54"* %763 to i32*
  store i32 %644, i32* %764, align 16
  %765 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1
  %766 = bitcast %"struct.skvx::Vec.56"* %765 to i32*
  store i32 %651, i32* %766, align 4
  %767 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 0, i32 1, i32 1
  %768 = bitcast %"struct.skvx::Vec.55"* %767 to i32*
  store i32 %658, i32* %768, align 8
  %769 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1
  %770 = bitcast %"struct.skvx::Vec.56"* %769 to i32*
  store i32 %665, i32* %770, align 4
  %771 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 1
  %772 = bitcast %"struct.skvx::Vec.53"* %771 to i32*
  store i32 %672, i32* %772, align 32
  %773 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %774 = bitcast %"struct.skvx::Vec.56"* %773 to i32*
  store i32 %679, i32* %774, align 4
  %775 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 1, i32 0, i32 1
  %776 = bitcast %"struct.skvx::Vec.55"* %775 to i32*
  store i32 %686, i32* %776, align 8
  %777 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1
  %778 = bitcast %"struct.skvx::Vec.56"* %777 to i32*
  store i32 %693, i32* %778, align 4
  %779 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 1, i32 1
  %780 = bitcast %"struct.skvx::Vec.54"* %779 to i32*
  store i32 %700, i32* %780, align 16
  %781 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1
  %782 = bitcast %"struct.skvx::Vec.56"* %781 to i32*
  store i32 %707, i32* %782, align 4
  %783 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 1, i32 1, i32 1
  %784 = bitcast %"struct.skvx::Vec.55"* %783 to i32*
  store i32 %714, i32* %784, align 8
  %785 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %722, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1
  %786 = bitcast %"struct.skvx::Vec.56"* %785 to i32*
  store i32 %721, i32* %786, align 4
  br label %2316

787:                                              ; preds = %220
  %788 = sext i32 %233 to i64
  %789 = getelementptr inbounds i8*, i8** %7, i64 %788
  %790 = load i8*, i8** %789, align 8
  %791 = sext i32 %235 to i64
  %792 = getelementptr inbounds i8, i8* %790, i64 %791
  %793 = bitcast i8* %792 to i16**
  %794 = load i16*, i16** %793, align 1
  %795 = sext i32 %227 to i64
  %796 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795
  %797 = bitcast %union.Slot* %796 to i32*
  %798 = load i32, i32* %797, align 4, !noalias !127
  %799 = sext i32 %798 to i64
  %800 = getelementptr inbounds i16, i16* %794, i64 %799
  %801 = load i16, i16* %800, align 2
  %802 = zext i16 %801 to i32
  %803 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %804 = bitcast %"struct.skvx::Vec.56"* %803 to i32*
  %805 = load i32, i32* %804, align 4, !noalias !127
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds i16, i16* %794, i64 %806
  %808 = load i16, i16* %807, align 2
  %809 = zext i16 %808 to i32
  %810 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 0, i32 0, i32 1
  %811 = bitcast %"struct.skvx::Vec.55"* %810 to i32*
  %812 = load i32, i32* %811, align 4, !noalias !127
  %813 = sext i32 %812 to i64
  %814 = getelementptr inbounds i16, i16* %794, i64 %813
  %815 = load i16, i16* %814, align 2
  %816 = zext i16 %815 to i32
  %817 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1
  %818 = bitcast %"struct.skvx::Vec.56"* %817 to i32*
  %819 = load i32, i32* %818, align 4, !noalias !127
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds i16, i16* %794, i64 %820
  %822 = load i16, i16* %821, align 2
  %823 = zext i16 %822 to i32
  %824 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 0, i32 1
  %825 = bitcast %"struct.skvx::Vec.54"* %824 to i32*
  %826 = load i32, i32* %825, align 4, !noalias !127
  %827 = sext i32 %826 to i64
  %828 = getelementptr inbounds i16, i16* %794, i64 %827
  %829 = load i16, i16* %828, align 2
  %830 = zext i16 %829 to i32
  %831 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %832 = bitcast %"struct.skvx::Vec.56"* %831 to i32*
  %833 = load i32, i32* %832, align 4, !noalias !127
  %834 = sext i32 %833 to i64
  %835 = getelementptr inbounds i16, i16* %794, i64 %834
  %836 = load i16, i16* %835, align 2
  %837 = zext i16 %836 to i32
  %838 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 0, i32 1, i32 1
  %839 = bitcast %"struct.skvx::Vec.55"* %838 to i32*
  %840 = load i32, i32* %839, align 4, !noalias !127
  %841 = sext i32 %840 to i64
  %842 = getelementptr inbounds i16, i16* %794, i64 %841
  %843 = load i16, i16* %842, align 2
  %844 = zext i16 %843 to i32
  %845 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1
  %846 = bitcast %"struct.skvx::Vec.56"* %845 to i32*
  %847 = load i32, i32* %846, align 4, !noalias !127
  %848 = sext i32 %847 to i64
  %849 = getelementptr inbounds i16, i16* %794, i64 %848
  %850 = load i16, i16* %849, align 2
  %851 = zext i16 %850 to i32
  %852 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 1
  %853 = bitcast %"struct.skvx::Vec.53"* %852 to i32*
  %854 = load i32, i32* %853, align 4, !noalias !127
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds i16, i16* %794, i64 %855
  %857 = load i16, i16* %856, align 2
  %858 = zext i16 %857 to i32
  %859 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %860 = bitcast %"struct.skvx::Vec.56"* %859 to i32*
  %861 = load i32, i32* %860, align 4, !noalias !127
  %862 = sext i32 %861 to i64
  %863 = getelementptr inbounds i16, i16* %794, i64 %862
  %864 = load i16, i16* %863, align 2
  %865 = zext i16 %864 to i32
  %866 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 1, i32 0, i32 1
  %867 = bitcast %"struct.skvx::Vec.55"* %866 to i32*
  %868 = load i32, i32* %867, align 4, !noalias !127
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds i16, i16* %794, i64 %869
  %871 = load i16, i16* %870, align 2
  %872 = zext i16 %871 to i32
  %873 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %874 = bitcast %"struct.skvx::Vec.56"* %873 to i32*
  %875 = load i32, i32* %874, align 4, !noalias !127
  %876 = sext i32 %875 to i64
  %877 = getelementptr inbounds i16, i16* %794, i64 %876
  %878 = load i16, i16* %877, align 2
  %879 = zext i16 %878 to i32
  %880 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 1, i32 1
  %881 = bitcast %"struct.skvx::Vec.54"* %880 to i32*
  %882 = load i32, i32* %881, align 4, !noalias !127
  %883 = sext i32 %882 to i64
  %884 = getelementptr inbounds i16, i16* %794, i64 %883
  %885 = load i16, i16* %884, align 2
  %886 = zext i16 %885 to i32
  %887 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1
  %888 = bitcast %"struct.skvx::Vec.56"* %887 to i32*
  %889 = load i32, i32* %888, align 4, !noalias !127
  %890 = sext i32 %889 to i64
  %891 = getelementptr inbounds i16, i16* %794, i64 %890
  %892 = load i16, i16* %891, align 2
  %893 = zext i16 %892 to i32
  %894 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 1, i32 1, i32 1
  %895 = bitcast %"struct.skvx::Vec.55"* %894 to i32*
  %896 = load i32, i32* %895, align 4, !noalias !127
  %897 = sext i32 %896 to i64
  %898 = getelementptr inbounds i16, i16* %794, i64 %897
  %899 = load i16, i16* %898, align 2
  %900 = zext i16 %899 to i32
  %901 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1
  %902 = bitcast %"struct.skvx::Vec.56"* %901 to i32*
  %903 = load i32, i32* %902, align 4, !noalias !127
  %904 = sext i32 %903 to i64
  %905 = getelementptr inbounds i16, i16* %794, i64 %904
  %906 = load i16, i16* %905, align 2
  %907 = zext i16 %906 to i32
  %908 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1
  %909 = bitcast %"struct.skvx::Vec.52"* %908 to i32*
  %910 = load i32, i32* %909, align 4, !noalias !127
  %911 = sext i32 %910 to i64
  %912 = getelementptr inbounds i16, i16* %794, i64 %911
  %913 = load i16, i16* %912, align 2
  %914 = zext i16 %913 to i32
  %915 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %916 = bitcast %"struct.skvx::Vec.56"* %915 to i32*
  %917 = load i32, i32* %916, align 4, !noalias !127
  %918 = sext i32 %917 to i64
  %919 = getelementptr inbounds i16, i16* %794, i64 %918
  %920 = load i16, i16* %919, align 2
  %921 = zext i16 %920 to i32
  %922 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 0, i32 0, i32 1
  %923 = bitcast %"struct.skvx::Vec.55"* %922 to i32*
  %924 = load i32, i32* %923, align 4, !noalias !127
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds i16, i16* %794, i64 %925
  %927 = load i16, i16* %926, align 2
  %928 = zext i16 %927 to i32
  %929 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 0, i32 0, i32 1, i32 1
  %930 = bitcast %"struct.skvx::Vec.56"* %929 to i32*
  %931 = load i32, i32* %930, align 4, !noalias !127
  %932 = sext i32 %931 to i64
  %933 = getelementptr inbounds i16, i16* %794, i64 %932
  %934 = load i16, i16* %933, align 2
  %935 = zext i16 %934 to i32
  %936 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 0, i32 1
  %937 = bitcast %"struct.skvx::Vec.54"* %936 to i32*
  %938 = load i32, i32* %937, align 4, !noalias !127
  %939 = sext i32 %938 to i64
  %940 = getelementptr inbounds i16, i16* %794, i64 %939
  %941 = load i16, i16* %940, align 2
  %942 = zext i16 %941 to i32
  %943 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1
  %944 = bitcast %"struct.skvx::Vec.56"* %943 to i32*
  %945 = load i32, i32* %944, align 4, !noalias !127
  %946 = sext i32 %945 to i64
  %947 = getelementptr inbounds i16, i16* %794, i64 %946
  %948 = load i16, i16* %947, align 2
  %949 = zext i16 %948 to i32
  %950 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 0, i32 1, i32 1
  %951 = bitcast %"struct.skvx::Vec.55"* %950 to i32*
  %952 = load i32, i32* %951, align 4, !noalias !127
  %953 = sext i32 %952 to i64
  %954 = getelementptr inbounds i16, i16* %794, i64 %953
  %955 = load i16, i16* %954, align 2
  %956 = zext i16 %955 to i32
  %957 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1
  %958 = bitcast %"struct.skvx::Vec.56"* %957 to i32*
  %959 = load i32, i32* %958, align 4, !noalias !127
  %960 = sext i32 %959 to i64
  %961 = getelementptr inbounds i16, i16* %794, i64 %960
  %962 = load i16, i16* %961, align 2
  %963 = zext i16 %962 to i32
  %964 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 1
  %965 = bitcast %"struct.skvx::Vec.53"* %964 to i32*
  %966 = load i32, i32* %965, align 4, !noalias !127
  %967 = sext i32 %966 to i64
  %968 = getelementptr inbounds i16, i16* %794, i64 %967
  %969 = load i16, i16* %968, align 2
  %970 = zext i16 %969 to i32
  %971 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %972 = bitcast %"struct.skvx::Vec.56"* %971 to i32*
  %973 = load i32, i32* %972, align 4, !noalias !127
  %974 = sext i32 %973 to i64
  %975 = getelementptr inbounds i16, i16* %794, i64 %974
  %976 = load i16, i16* %975, align 2
  %977 = zext i16 %976 to i32
  %978 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 1, i32 0, i32 1
  %979 = bitcast %"struct.skvx::Vec.55"* %978 to i32*
  %980 = load i32, i32* %979, align 4, !noalias !127
  %981 = sext i32 %980 to i64
  %982 = getelementptr inbounds i16, i16* %794, i64 %981
  %983 = load i16, i16* %982, align 2
  %984 = zext i16 %983 to i32
  %985 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1
  %986 = bitcast %"struct.skvx::Vec.56"* %985 to i32*
  %987 = load i32, i32* %986, align 4, !noalias !127
  %988 = sext i32 %987 to i64
  %989 = getelementptr inbounds i16, i16* %794, i64 %988
  %990 = load i16, i16* %989, align 2
  %991 = zext i16 %990 to i32
  %992 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 1, i32 1
  %993 = bitcast %"struct.skvx::Vec.54"* %992 to i32*
  %994 = load i32, i32* %993, align 4, !noalias !127
  %995 = sext i32 %994 to i64
  %996 = getelementptr inbounds i16, i16* %794, i64 %995
  %997 = load i16, i16* %996, align 2
  %998 = zext i16 %997 to i32
  %999 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1
  %1000 = bitcast %"struct.skvx::Vec.56"* %999 to i32*
  %1001 = load i32, i32* %1000, align 4, !noalias !127
  %1002 = sext i32 %1001 to i64
  %1003 = getelementptr inbounds i16, i16* %794, i64 %1002
  %1004 = load i16, i16* %1003, align 2
  %1005 = zext i16 %1004 to i32
  %1006 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 1, i32 1, i32 1
  %1007 = bitcast %"struct.skvx::Vec.55"* %1006 to i32*
  %1008 = load i32, i32* %1007, align 4, !noalias !127
  %1009 = sext i32 %1008 to i64
  %1010 = getelementptr inbounds i16, i16* %794, i64 %1009
  %1011 = load i16, i16* %1010, align 2
  %1012 = zext i16 %1011 to i32
  %1013 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %795, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1
  %1014 = bitcast %"struct.skvx::Vec.56"* %1013 to i32*
  %1015 = load i32, i32* %1014, align 4, !noalias !127
  %1016 = sext i32 %1015 to i64
  %1017 = getelementptr inbounds i16, i16* %794, i64 %1016
  %1018 = load i16, i16* %1017, align 2
  %1019 = zext i16 %1018 to i32
  %1020 = sext i32 %225 to i64
  %1021 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020
  %1022 = bitcast %union.Slot* %1021 to i32*
  store i32 %802, i32* %1022, align 128
  %1023 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %1024 = bitcast %"struct.skvx::Vec.56"* %1023 to i32*
  store i32 %809, i32* %1024, align 4
  %1025 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 0, i32 0, i32 1
  %1026 = bitcast %"struct.skvx::Vec.55"* %1025 to i32*
  store i32 %816, i32* %1026, align 8
  %1027 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1
  %1028 = bitcast %"struct.skvx::Vec.56"* %1027 to i32*
  store i32 %823, i32* %1028, align 4
  %1029 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 0, i32 1
  %1030 = bitcast %"struct.skvx::Vec.54"* %1029 to i32*
  store i32 %830, i32* %1030, align 16
  %1031 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %1032 = bitcast %"struct.skvx::Vec.56"* %1031 to i32*
  store i32 %837, i32* %1032, align 4
  %1033 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 0, i32 1, i32 1
  %1034 = bitcast %"struct.skvx::Vec.55"* %1033 to i32*
  store i32 %844, i32* %1034, align 8
  %1035 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1
  %1036 = bitcast %"struct.skvx::Vec.56"* %1035 to i32*
  store i32 %851, i32* %1036, align 4
  %1037 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 1
  %1038 = bitcast %"struct.skvx::Vec.53"* %1037 to i32*
  store i32 %858, i32* %1038, align 32
  %1039 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %1040 = bitcast %"struct.skvx::Vec.56"* %1039 to i32*
  store i32 %865, i32* %1040, align 4
  %1041 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 1, i32 0, i32 1
  %1042 = bitcast %"struct.skvx::Vec.55"* %1041 to i32*
  store i32 %872, i32* %1042, align 8
  %1043 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %1044 = bitcast %"struct.skvx::Vec.56"* %1043 to i32*
  store i32 %879, i32* %1044, align 4
  %1045 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 1, i32 1
  %1046 = bitcast %"struct.skvx::Vec.54"* %1045 to i32*
  store i32 %886, i32* %1046, align 16
  %1047 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1
  %1048 = bitcast %"struct.skvx::Vec.56"* %1047 to i32*
  store i32 %893, i32* %1048, align 4
  %1049 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 1, i32 1, i32 1
  %1050 = bitcast %"struct.skvx::Vec.55"* %1049 to i32*
  store i32 %900, i32* %1050, align 8
  %1051 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1
  %1052 = bitcast %"struct.skvx::Vec.56"* %1051 to i32*
  store i32 %907, i32* %1052, align 4
  %1053 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1
  %1054 = bitcast %"struct.skvx::Vec.52"* %1053 to i32*
  store i32 %914, i32* %1054, align 64
  %1055 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %1056 = bitcast %"struct.skvx::Vec.56"* %1055 to i32*
  store i32 %921, i32* %1056, align 4
  %1057 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 0, i32 0, i32 1
  %1058 = bitcast %"struct.skvx::Vec.55"* %1057 to i32*
  store i32 %928, i32* %1058, align 8
  %1059 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 0, i32 0, i32 1, i32 1
  %1060 = bitcast %"struct.skvx::Vec.56"* %1059 to i32*
  store i32 %935, i32* %1060, align 4
  %1061 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 0, i32 1
  %1062 = bitcast %"struct.skvx::Vec.54"* %1061 to i32*
  store i32 %942, i32* %1062, align 16
  %1063 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1
  %1064 = bitcast %"struct.skvx::Vec.56"* %1063 to i32*
  store i32 %949, i32* %1064, align 4
  %1065 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 0, i32 1, i32 1
  %1066 = bitcast %"struct.skvx::Vec.55"* %1065 to i32*
  store i32 %956, i32* %1066, align 8
  %1067 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1
  %1068 = bitcast %"struct.skvx::Vec.56"* %1067 to i32*
  store i32 %963, i32* %1068, align 4
  %1069 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 1
  %1070 = bitcast %"struct.skvx::Vec.53"* %1069 to i32*
  store i32 %970, i32* %1070, align 32
  %1071 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %1072 = bitcast %"struct.skvx::Vec.56"* %1071 to i32*
  store i32 %977, i32* %1072, align 4
  %1073 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 1, i32 0, i32 1
  %1074 = bitcast %"struct.skvx::Vec.55"* %1073 to i32*
  store i32 %984, i32* %1074, align 8
  %1075 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1
  %1076 = bitcast %"struct.skvx::Vec.56"* %1075 to i32*
  store i32 %991, i32* %1076, align 4
  %1077 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 1, i32 1
  %1078 = bitcast %"struct.skvx::Vec.54"* %1077 to i32*
  store i32 %998, i32* %1078, align 16
  %1079 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1
  %1080 = bitcast %"struct.skvx::Vec.56"* %1079 to i32*
  store i32 %1005, i32* %1080, align 4
  %1081 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 1, i32 1, i32 1
  %1082 = bitcast %"struct.skvx::Vec.55"* %1081 to i32*
  store i32 %1012, i32* %1082, align 8
  %1083 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1020, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1
  %1084 = bitcast %"struct.skvx::Vec.56"* %1083 to i32*
  store i32 %1019, i32* %1084, align 4
  br label %2316

1085:                                             ; preds = %220
  %1086 = sext i32 %233 to i64
  %1087 = getelementptr inbounds i8*, i8** %7, i64 %1086
  %1088 = load i8*, i8** %1087, align 8
  %1089 = sext i32 %235 to i64
  %1090 = getelementptr inbounds i8, i8* %1088, i64 %1089
  %1091 = bitcast i8* %1090 to i8**
  %1092 = load i8*, i8** %1091, align 1
  %1093 = sext i32 %227 to i64
  %1094 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1093
  %1095 = bitcast %union.Slot* %1094 to <8 x i32>*
  %1096 = load <8 x i32>, <8 x i32>* %1095, align 32, !noalias !132
  %1097 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %1092, <8 x i32> %1096, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13, !noalias !132
  %1098 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1093, i32 0, i32 0, i32 1
  %1099 = bitcast %"struct.skvx::Vec.53"* %1098 to <8 x i32>*
  %1100 = load <8 x i32>, <8 x i32>* %1099, align 32, !noalias !139
  %1101 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %1092, <8 x i32> %1100, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13, !noalias !139
  %1102 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1093, i32 0, i32 1
  %1103 = bitcast %"struct.skvx::Vec.52"* %1102 to <8 x i32>*
  %1104 = load <8 x i32>, <8 x i32>* %1103, align 32, !noalias !142
  %1105 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %1092, <8 x i32> %1104, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13, !noalias !142
  %1106 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1093, i32 0, i32 1, i32 1
  %1107 = bitcast %"struct.skvx::Vec.53"* %1106 to <8 x i32>*
  %1108 = load <8 x i32>, <8 x i32>* %1107, align 32, !noalias !147
  %1109 = tail call <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32> zeroinitializer, i8* %1092, <8 x i32> %1108, <8 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, i8 4) #13, !noalias !147
  %1110 = sext i32 %225 to i64
  %1111 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1110
  %1112 = bitcast %union.Slot* %1111 to <8 x i32>*
  store <8 x i32> %1097, <8 x i32>* %1112, align 128
  %1113 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1110, i32 0, i32 0, i32 1
  %1114 = bitcast %"struct.skvx::Vec.53"* %1113 to <8 x i32>*
  store <8 x i32> %1101, <8 x i32>* %1114, align 32
  %1115 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1110, i32 0, i32 1
  %1116 = bitcast %"struct.skvx::Vec.52"* %1115 to <8 x i32>*
  store <8 x i32> %1105, <8 x i32>* %1116, align 64
  %1117 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1110, i32 0, i32 1, i32 1
  %1118 = bitcast %"struct.skvx::Vec.53"* %1117 to <8 x i32>*
  store <8 x i32> %1109, <8 x i32>* %1118, align 32
  br label %2316

1119:                                             ; preds = %220, %220
  %1120 = getelementptr inbounds %"struct.skvm::InterpreterInstruction", %"struct.skvm::InterpreterInstruction"* %0, i64 %221, i32 5
  %1121 = load i32, i32* %1120, align 4
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %31)
  store <32 x i64> <i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206>, <32 x i64>* %10, align 256
  %1122 = sext i32 %227 to i64
  %1123 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1122
  %1124 = bitcast %union.Slot* %1123 to <32 x i32>*
  %1125 = load <32 x i32>, <32 x i32>* %1124, align 128, !noalias !150
  %1126 = zext <32 x i32> %1125 to <32 x i64>
  %1127 = sext i32 %229 to i64
  %1128 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1127
  %1129 = bitcast %union.Slot* %1128 to <32 x i32>*
  %1130 = load <32 x i32>, <32 x i32>* %1129, align 128, !noalias !153
  %1131 = zext <32 x i32> %1130 to <32 x i64>
  %1132 = shl nuw <32 x i64> %1131, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %1133 = or <32 x i64> %1132, %1126
  store <32 x i64> %1133, <32 x i64>* %10, align 256, !alias.scope !156
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %32)
  store <32 x i64> <i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206>, <32 x i64>* %11, align 256
  %1134 = sext i32 %231 to i64
  %1135 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1134
  %1136 = bitcast %union.Slot* %1135 to <32 x i32>*
  %1137 = load <32 x i32>, <32 x i32>* %1136, align 128, !noalias !159
  %1138 = zext <32 x i32> %1137 to <32 x i64>
  %1139 = sext i32 %1121 to i64
  %1140 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1139
  %1141 = bitcast %union.Slot* %1140 to <32 x i32>*
  %1142 = load <32 x i32>, <32 x i32>* %1141, align 128, !noalias !162
  %1143 = zext <32 x i32> %1142 to <32 x i64>
  %1144 = shl nuw <32 x i64> %1143, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %1145 = or <32 x i64> %1144, %1138
  store <32 x i64> %1145, <32 x i64>* %11, align 256, !alias.scope !165
  %1146 = sext i32 %233 to i64
  %1147 = getelementptr inbounds i8*, i8** %7, i64 %1146
  br label %1149

1148:                                             ; preds = %1316
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %32)
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %31)
  br label %2316

1149:                                             ; preds = %1119, %1316
  %1150 = phi i64 [ 0, %1119 ], [ %1321, %1316 ]
  %1151 = load i8*, i8** %1147, align 8
  %1152 = shl nsw i64 %1150, 4
  %1153 = getelementptr inbounds i8, i8* %1151, i64 %1152
  %1154 = icmp ult i64 %1150, 16
  br i1 %1154, label %1155, label %1162

1155:                                             ; preds = %1149
  %1156 = icmp ult i64 %1150, 8
  br i1 %1156, label %1157, label %1159

1157:                                             ; preds = %1155
  %1158 = icmp ult i64 %1150, 4
  br i1 %1158, label %1181, label %1196

1159:                                             ; preds = %1155
  %1160 = add nsw i64 %1150, -8
  %1161 = icmp slt i64 %1160, 4
  br i1 %1161, label %1212, label %1230

1162:                                             ; preds = %1149
  %1163 = add nsw i64 %1150, -16
  %1164 = icmp slt i64 %1163, 8
  br i1 %1164, label %1165, label %1167

1165:                                             ; preds = %1162
  %1166 = icmp slt i64 %1163, 4
  br i1 %1166, label %1250, label %1268

1167:                                             ; preds = %1162
  %1168 = add nsw i64 %1150, -24
  %1169 = icmp slt i64 %1168, 4
  br i1 %1169, label %1170, label %1175

1170:                                             ; preds = %1167
  %1171 = icmp eq i64 %1168, 1
  %1172 = select i1 %1171, i64* %38, i64* %37
  %1173 = icmp eq i64 %1168, 2
  %1174 = select i1 %1173, i64* %39, i64* %40
  br label %1288

1175:                                             ; preds = %1167
  %1176 = add nsw i64 %1150, -28
  %1177 = icmp eq i64 %1176, 1
  %1178 = select i1 %1177, i64* %34, i64* %33
  %1179 = icmp eq i64 %1176, 2
  %1180 = select i1 %1179, i64* %35, i64* %36
  br label %1288

1181:                                             ; preds = %1157
  %1182 = icmp ult i64 %1150, 2
  %1183 = icmp eq i64 %1150, 1
  %1184 = select i1 %1183, i64* %90, i64* %89
  %1185 = icmp eq i64 %1150, 2
  %1186 = select i1 %1185, i64* %91, i64* %92
  %1187 = select i1 %1182, i64* %1184, i64* %1186
  %1188 = bitcast i8* %1153 to i64*
  %1189 = load i64, i64* %1187, align 8
  store i64 %1189, i64* %1188, align 1
  %1190 = load i8*, i8** %1147, align 8
  %1191 = getelementptr inbounds i8, i8* %1190, i64 8
  %1192 = getelementptr inbounds i8, i8* %1191, i64 %1152
  %1193 = select i1 %1183, i64* %94, i64* %93
  %1194 = select i1 %1185, i64* %95, i64* %96
  %1195 = select i1 %1182, i64* %1193, i64* %1194
  br label %1316

1196:                                             ; preds = %1157
  %1197 = add nsw i64 %1150, -4
  %1198 = icmp slt i64 %1197, 2
  %1199 = icmp eq i64 %1197, 1
  %1200 = select i1 %1199, i64* %82, i64* %81
  %1201 = icmp eq i64 %1197, 2
  %1202 = select i1 %1201, i64* %83, i64* %84
  %1203 = select i1 %1198, i64* %1200, i64* %1202
  %1204 = bitcast i8* %1153 to i64*
  %1205 = load i64, i64* %1203, align 8
  store i64 %1205, i64* %1204, align 1
  %1206 = load i8*, i8** %1147, align 8
  %1207 = getelementptr inbounds i8, i8* %1206, i64 8
  %1208 = getelementptr inbounds i8, i8* %1207, i64 %1152
  %1209 = select i1 %1199, i64* %86, i64* %85
  %1210 = select i1 %1201, i64* %87, i64* %88
  %1211 = select i1 %1198, i64* %1209, i64* %1210
  br label %1316

1212:                                             ; preds = %1159
  %1213 = icmp slt i64 %1160, 2
  %1214 = icmp eq i64 %1160, 1
  %1215 = select i1 %1214, i64* %70, i64* %69
  %1216 = icmp eq i64 %1160, 2
  %1217 = select i1 %1216, i64* %71, i64* %72
  %1218 = select i1 %1213, i64* %1215, i64* %1217
  %1219 = bitcast i8* %1153 to i64*
  %1220 = load i64, i64* %1218, align 8
  store i64 %1220, i64* %1219, align 1
  %1221 = load i8*, i8** %1147, align 8
  %1222 = getelementptr inbounds i8, i8* %1221, i64 8
  %1223 = getelementptr inbounds i8, i8* %1222, i64 %1152
  %1224 = icmp slt i64 %1160, 2
  %1225 = icmp eq i64 %1160, 1
  %1226 = select i1 %1225, i64* %78, i64* %77
  %1227 = icmp eq i64 %1160, 2
  %1228 = select i1 %1227, i64* %79, i64* %80
  %1229 = select i1 %1224, i64* %1226, i64* %1228
  br label %1316

1230:                                             ; preds = %1159
  %1231 = add nsw i64 %1150, -12
  %1232 = icmp slt i64 %1231, 2
  %1233 = icmp eq i64 %1231, 1
  %1234 = select i1 %1233, i64* %66, i64* %65
  %1235 = icmp eq i64 %1231, 2
  %1236 = select i1 %1235, i64* %67, i64* %68
  %1237 = select i1 %1232, i64* %1234, i64* %1236
  %1238 = bitcast i8* %1153 to i64*
  %1239 = load i64, i64* %1237, align 8
  store i64 %1239, i64* %1238, align 1
  %1240 = load i8*, i8** %1147, align 8
  %1241 = getelementptr inbounds i8, i8* %1240, i64 8
  %1242 = getelementptr inbounds i8, i8* %1241, i64 %1152
  %1243 = add nsw i64 %1150, -12
  %1244 = icmp slt i64 %1243, 2
  %1245 = icmp eq i64 %1243, 1
  %1246 = select i1 %1245, i64* %74, i64* %73
  %1247 = icmp eq i64 %1243, 2
  %1248 = select i1 %1247, i64* %75, i64* %76
  %1249 = select i1 %1244, i64* %1246, i64* %1248
  br label %1316

1250:                                             ; preds = %1165
  %1251 = icmp slt i64 %1163, 2
  %1252 = icmp eq i64 %1163, 1
  %1253 = select i1 %1252, i64* %46, i64* %45
  %1254 = icmp eq i64 %1163, 2
  %1255 = select i1 %1254, i64* %47, i64* %48
  %1256 = select i1 %1251, i64* %1253, i64* %1255
  %1257 = bitcast i8* %1153 to i64*
  %1258 = load i64, i64* %1256, align 8
  store i64 %1258, i64* %1257, align 1
  %1259 = load i8*, i8** %1147, align 8
  %1260 = getelementptr inbounds i8, i8* %1259, i64 8
  %1261 = getelementptr inbounds i8, i8* %1260, i64 %1152
  %1262 = icmp slt i64 %1163, 2
  %1263 = icmp eq i64 %1163, 1
  %1264 = select i1 %1263, i64* %62, i64* %61
  %1265 = icmp eq i64 %1163, 2
  %1266 = select i1 %1265, i64* %63, i64* %64
  %1267 = select i1 %1262, i64* %1264, i64* %1266
  br label %1316

1268:                                             ; preds = %1165
  %1269 = add nsw i64 %1150, -20
  %1270 = icmp slt i64 %1269, 2
  %1271 = icmp eq i64 %1269, 1
  %1272 = select i1 %1271, i64* %42, i64* %41
  %1273 = icmp eq i64 %1269, 2
  %1274 = select i1 %1273, i64* %43, i64* %44
  %1275 = select i1 %1270, i64* %1272, i64* %1274
  %1276 = bitcast i8* %1153 to i64*
  %1277 = load i64, i64* %1275, align 8
  store i64 %1277, i64* %1276, align 1
  %1278 = load i8*, i8** %1147, align 8
  %1279 = getelementptr inbounds i8, i8* %1278, i64 8
  %1280 = getelementptr inbounds i8, i8* %1279, i64 %1152
  %1281 = add nsw i64 %1150, -20
  %1282 = icmp slt i64 %1281, 2
  %1283 = icmp eq i64 %1281, 1
  %1284 = select i1 %1283, i64* %58, i64* %57
  %1285 = icmp eq i64 %1281, 2
  %1286 = select i1 %1285, i64* %59, i64* %60
  %1287 = select i1 %1282, i64* %1284, i64* %1286
  br label %1316

1288:                                             ; preds = %1170, %1175
  %1289 = phi i64* [ %1174, %1170 ], [ %1180, %1175 ]
  %1290 = phi i64* [ %1172, %1170 ], [ %1178, %1175 ]
  %1291 = phi i64 [ %1168, %1170 ], [ %1176, %1175 ]
  %1292 = icmp slt i64 %1291, 2
  %1293 = select i1 %1292, i64* %1290, i64* %1289
  %1294 = bitcast i8* %1153 to i64*
  %1295 = load i64, i64* %1293, align 8
  store i64 %1295, i64* %1294, align 1
  %1296 = load i8*, i8** %1147, align 8
  %1297 = getelementptr inbounds i8, i8* %1296, i64 8
  %1298 = getelementptr inbounds i8, i8* %1297, i64 %1152
  %1299 = add nsw i64 %1150, -24
  %1300 = icmp slt i64 %1299, 4
  br i1 %1300, label %1301, label %1308

1301:                                             ; preds = %1288
  %1302 = icmp slt i64 %1299, 2
  %1303 = icmp eq i64 %1299, 1
  %1304 = select i1 %1303, i64* %54, i64* %53
  %1305 = icmp eq i64 %1299, 2
  %1306 = select i1 %1305, i64* %55, i64* %56
  %1307 = select i1 %1302, i64* %1304, i64* %1306
  br label %1316

1308:                                             ; preds = %1288
  %1309 = add nsw i64 %1150, -28
  %1310 = icmp slt i64 %1309, 2
  %1311 = icmp eq i64 %1309, 1
  %1312 = select i1 %1311, i64* %50, i64* %49
  %1313 = icmp eq i64 %1309, 2
  %1314 = select i1 %1313, i64* %51, i64* %52
  %1315 = select i1 %1310, i64* %1312, i64* %1314
  br label %1316

1316:                                             ; preds = %1181, %1196, %1212, %1230, %1250, %1268, %1301, %1308
  %1317 = phi i8* [ %1192, %1181 ], [ %1208, %1196 ], [ %1223, %1212 ], [ %1242, %1230 ], [ %1261, %1250 ], [ %1280, %1268 ], [ %1298, %1301 ], [ %1298, %1308 ]
  %1318 = phi i64* [ %1195, %1181 ], [ %1211, %1196 ], [ %1229, %1212 ], [ %1249, %1230 ], [ %1267, %1250 ], [ %1287, %1268 ], [ %1307, %1301 ], [ %1315, %1308 ]
  %1319 = bitcast i8* %1317 to i64*
  %1320 = load i64, i64* %1318, align 8
  store i64 %1320, i64* %1319, align 1
  %1321 = add nuw nsw i64 %1150, 1
  %1322 = icmp ult i64 %1321, %124
  br i1 %1322, label %1149, label %1148

1323:                                             ; preds = %220, %220
  %1324 = sext i32 %225 to i64
  %1325 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324
  %1326 = bitcast %union.Slot* %1325 to i32*
  %1327 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %1328 = bitcast %"struct.skvx::Vec.56"* %1327 to i32*
  %1329 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 0, i32 0, i32 1
  %1330 = bitcast %"struct.skvx::Vec.55"* %1329 to i32*
  %1331 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1
  %1332 = bitcast %"struct.skvx::Vec.56"* %1331 to i32*
  %1333 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 0, i32 1
  %1334 = bitcast %"struct.skvx::Vec.54"* %1333 to i32*
  %1335 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %1336 = bitcast %"struct.skvx::Vec.56"* %1335 to i32*
  %1337 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 0, i32 1, i32 1
  %1338 = bitcast %"struct.skvx::Vec.55"* %1337 to i32*
  %1339 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1
  %1340 = bitcast %"struct.skvx::Vec.56"* %1339 to i32*
  %1341 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 1
  %1342 = bitcast %"struct.skvx::Vec.53"* %1341 to i32*
  %1343 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %1344 = bitcast %"struct.skvx::Vec.56"* %1343 to i32*
  %1345 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 1, i32 0, i32 1
  %1346 = bitcast %"struct.skvx::Vec.55"* %1345 to i32*
  %1347 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %1348 = bitcast %"struct.skvx::Vec.56"* %1347 to i32*
  %1349 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 1, i32 1
  %1350 = bitcast %"struct.skvx::Vec.54"* %1349 to i32*
  %1351 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1
  %1352 = bitcast %"struct.skvx::Vec.56"* %1351 to i32*
  %1353 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 1, i32 1, i32 1
  %1354 = bitcast %"struct.skvx::Vec.55"* %1353 to i32*
  %1355 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1
  %1356 = bitcast %"struct.skvx::Vec.56"* %1355 to i32*
  %1357 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1
  %1358 = bitcast %"struct.skvx::Vec.52"* %1357 to i32*
  %1359 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %1360 = bitcast %"struct.skvx::Vec.56"* %1359 to i32*
  %1361 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 0, i32 0, i32 1
  %1362 = bitcast %"struct.skvx::Vec.55"* %1361 to i32*
  %1363 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 0, i32 0, i32 1, i32 1
  %1364 = bitcast %"struct.skvx::Vec.56"* %1363 to i32*
  %1365 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 0, i32 1
  %1366 = bitcast %"struct.skvx::Vec.54"* %1365 to i32*
  %1367 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1
  %1368 = bitcast %"struct.skvx::Vec.56"* %1367 to i32*
  %1369 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 0, i32 1, i32 1
  %1370 = bitcast %"struct.skvx::Vec.55"* %1369 to i32*
  %1371 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1
  %1372 = bitcast %"struct.skvx::Vec.56"* %1371 to i32*
  %1373 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 1
  %1374 = bitcast %"struct.skvx::Vec.53"* %1373 to i32*
  %1375 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1
  %1376 = bitcast %"struct.skvx::Vec.56"* %1375 to i32*
  %1377 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 1, i32 0, i32 1
  %1378 = bitcast %"struct.skvx::Vec.55"* %1377 to i32*
  %1379 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1
  %1380 = bitcast %"struct.skvx::Vec.56"* %1379 to i32*
  %1381 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 1, i32 1
  %1382 = bitcast %"struct.skvx::Vec.54"* %1381 to i32*
  %1383 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1
  %1384 = bitcast %"struct.skvx::Vec.56"* %1383 to i32*
  %1385 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 1, i32 1, i32 1
  %1386 = bitcast %"struct.skvx::Vec.55"* %1385 to i32*
  %1387 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1324, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1
  %1388 = bitcast %"struct.skvx::Vec.56"* %1387 to i32*
  %1389 = sext i32 %233 to i64
  %1390 = getelementptr inbounds i8*, i8** %7, i64 %1389
  %1391 = shl nsw i32 %235, 2
  %1392 = sext i32 %1391 to i64
  %1393 = bitcast %union.Slot* %1325 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 128 %1393, i8 0, i64 128, i1 false)
  br label %1394

1394:                                             ; preds = %1323, %1464
  %1395 = phi i64 [ 0, %1323 ], [ %1475, %1464 ]
  %1396 = icmp ult i64 %1395, 16
  br i1 %1396, label %1397, label %1430

1397:                                             ; preds = %1394
  %1398 = icmp ult i64 %1395, 8
  br i1 %1398, label %1399, label %1414

1399:                                             ; preds = %1397
  %1400 = icmp ult i64 %1395, 4
  br i1 %1400, label %1401, label %1407

1401:                                             ; preds = %1399
  %1402 = icmp ult i64 %1395, 2
  %1403 = icmp eq i64 %1395, 1
  %1404 = select i1 %1403, i32* %1328, i32* %1326
  %1405 = icmp eq i64 %1395, 2
  %1406 = select i1 %1405, i32* %1330, i32* %1332
  br label %1464

1407:                                             ; preds = %1399
  %1408 = add nsw i64 %1395, -4
  %1409 = icmp slt i64 %1408, 2
  %1410 = icmp eq i64 %1408, 1
  %1411 = select i1 %1410, i32* %1336, i32* %1334
  %1412 = icmp eq i64 %1408, 2
  %1413 = select i1 %1412, i32* %1338, i32* %1340
  br label %1464

1414:                                             ; preds = %1397
  %1415 = add nsw i64 %1395, -8
  %1416 = icmp slt i64 %1415, 4
  br i1 %1416, label %1417, label %1423

1417:                                             ; preds = %1414
  %1418 = icmp slt i64 %1415, 2
  %1419 = icmp eq i64 %1415, 1
  %1420 = select i1 %1419, i32* %1344, i32* %1342
  %1421 = icmp eq i64 %1415, 2
  %1422 = select i1 %1421, i32* %1346, i32* %1348
  br label %1464

1423:                                             ; preds = %1414
  %1424 = add nsw i64 %1395, -12
  %1425 = icmp slt i64 %1424, 2
  %1426 = icmp eq i64 %1424, 1
  %1427 = select i1 %1426, i32* %1352, i32* %1350
  %1428 = icmp eq i64 %1424, 2
  %1429 = select i1 %1428, i32* %1354, i32* %1356
  br label %1464

1430:                                             ; preds = %1394
  %1431 = add nsw i64 %1395, -16
  %1432 = icmp slt i64 %1431, 8
  br i1 %1432, label %1433, label %1448

1433:                                             ; preds = %1430
  %1434 = icmp slt i64 %1431, 4
  br i1 %1434, label %1435, label %1441

1435:                                             ; preds = %1433
  %1436 = icmp slt i64 %1431, 2
  %1437 = icmp eq i64 %1431, 1
  %1438 = select i1 %1437, i32* %1360, i32* %1358
  %1439 = icmp eq i64 %1431, 2
  %1440 = select i1 %1439, i32* %1362, i32* %1364
  br label %1464

1441:                                             ; preds = %1433
  %1442 = add nsw i64 %1395, -20
  %1443 = icmp slt i64 %1442, 2
  %1444 = icmp eq i64 %1442, 1
  %1445 = select i1 %1444, i32* %1368, i32* %1366
  %1446 = icmp eq i64 %1442, 2
  %1447 = select i1 %1446, i32* %1370, i32* %1372
  br label %1464

1448:                                             ; preds = %1430
  %1449 = add nsw i64 %1395, -24
  %1450 = icmp slt i64 %1449, 4
  br i1 %1450, label %1451, label %1457

1451:                                             ; preds = %1448
  %1452 = icmp slt i64 %1449, 2
  %1453 = icmp eq i64 %1449, 1
  %1454 = select i1 %1453, i32* %1376, i32* %1374
  %1455 = icmp eq i64 %1449, 2
  %1456 = select i1 %1455, i32* %1378, i32* %1380
  br label %1464

1457:                                             ; preds = %1448
  %1458 = add nsw i64 %1395, -28
  %1459 = icmp slt i64 %1458, 2
  %1460 = icmp eq i64 %1458, 1
  %1461 = select i1 %1460, i32* %1384, i32* %1382
  %1462 = icmp eq i64 %1458, 2
  %1463 = select i1 %1462, i32* %1386, i32* %1388
  br label %1464

1464:                                             ; preds = %1401, %1407, %1417, %1423, %1435, %1441, %1451, %1457
  %1465 = phi i32* [ %1406, %1401 ], [ %1413, %1407 ], [ %1422, %1417 ], [ %1429, %1423 ], [ %1440, %1435 ], [ %1447, %1441 ], [ %1456, %1451 ], [ %1463, %1457 ]
  %1466 = phi i32* [ %1404, %1401 ], [ %1411, %1407 ], [ %1420, %1417 ], [ %1427, %1423 ], [ %1438, %1435 ], [ %1445, %1441 ], [ %1454, %1451 ], [ %1461, %1457 ]
  %1467 = phi i1 [ %1402, %1401 ], [ %1409, %1407 ], [ %1418, %1417 ], [ %1425, %1423 ], [ %1436, %1435 ], [ %1443, %1441 ], [ %1452, %1451 ], [ %1459, %1457 ]
  %1468 = select i1 %1467, i32* %1466, i32* %1465
  %1469 = load i8*, i8** %1390, align 8
  %1470 = shl nsw i64 %1395, 4
  %1471 = getelementptr inbounds i8, i8* %1469, i64 %1392
  %1472 = getelementptr inbounds i8, i8* %1471, i64 %1470
  %1473 = bitcast i8* %1472 to i32*
  %1474 = load i32, i32* %1473, align 1
  store i32 %1474, i32* %1468, align 4
  %1475 = add nuw nsw i64 %1395, 1
  %1476 = icmp ult i64 %1475, %124
  br i1 %1476, label %1394, label %2316

1477:                                             ; preds = %220, %220
  %1478 = sext i32 %225 to i64
  %1479 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1478
  %1480 = bitcast %union.Slot* %1479 to <32 x i32>*
  store <32 x i32> %123, <32 x i32>* %1480, align 128
  br label %2316

1481:                                             ; preds = %220, %220
  %1482 = sext i32 %233 to i64
  %1483 = getelementptr inbounds i8*, i8** %7, i64 %1482
  %1484 = load i8*, i8** %1483, align 8
  %1485 = sext i32 %235 to i64
  %1486 = getelementptr inbounds i8, i8* %1484, i64 %1485
  %1487 = bitcast i8* %1486 to i32*
  %1488 = load i32, i32* %1487, align 4
  %1489 = sext i32 %225 to i64
  %1490 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1489
  %1491 = insertelement <8 x i32> undef, i32 %1488, i32 0
  %1492 = shufflevector <8 x i32> %1491, <8 x i32> undef, <8 x i32> zeroinitializer
  %1493 = bitcast %union.Slot* %1490 to <8 x i32>*
  store <8 x i32> %1492, <8 x i32>* %1493, align 128
  %1494 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1489, i32 0, i32 0, i32 1
  %1495 = bitcast %"struct.skvx::Vec.53"* %1494 to <8 x i32>*
  store <8 x i32> %1492, <8 x i32>* %1495, align 32
  %1496 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1489, i32 0, i32 1
  %1497 = bitcast %"struct.skvx::Vec.52"* %1496 to <8 x i32>*
  store <8 x i32> %1492, <8 x i32>* %1497, align 64
  %1498 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1489, i32 0, i32 1, i32 1
  %1499 = bitcast %"struct.skvx::Vec.53"* %1498 to <8 x i32>*
  store <8 x i32> %1492, <8 x i32>* %1499, align 32
  br label %2316

1500:                                             ; preds = %220, %220
  %1501 = sext i32 %225 to i64
  %1502 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1501
  %1503 = insertelement <8 x i32> undef, i32 %233, i32 0
  %1504 = shufflevector <8 x i32> %1503, <8 x i32> undef, <8 x i32> zeroinitializer
  %1505 = bitcast %union.Slot* %1502 to <8 x i32>*
  store <8 x i32> %1504, <8 x i32>* %1505, align 128
  %1506 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1501, i32 0, i32 0, i32 1
  %1507 = bitcast %"struct.skvx::Vec.53"* %1506 to <8 x i32>*
  store <8 x i32> %1504, <8 x i32>* %1507, align 32
  %1508 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1501, i32 0, i32 1
  %1509 = bitcast %"struct.skvx::Vec.52"* %1508 to <8 x i32>*
  store <8 x i32> %1504, <8 x i32>* %1509, align 64
  %1510 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1501, i32 0, i32 1, i32 1
  %1511 = bitcast %"struct.skvx::Vec.53"* %1510 to <8 x i32>*
  store <8 x i32> %1504, <8 x i32>* %1511, align 32
  br label %2316

1512:                                             ; preds = %220, %220
  %1513 = sext i32 %227 to i64
  %1514 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1513, i32 0
  %1515 = sext i32 %229 to i64
  %1516 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1515, i32 0
  %1517 = bitcast %"struct.skvx::Vec.51"* %1514 to <32 x float>*
  %1518 = load <32 x float>, <32 x float>* %1517, align 128, !noalias !168
  %1519 = bitcast %"struct.skvx::Vec.51"* %1516 to <32 x float>*
  %1520 = load <32 x float>, <32 x float>* %1519, align 128, !noalias !168
  %1521 = fadd <32 x float> %1518, %1520
  %1522 = sext i32 %225 to i64
  %1523 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1522, i32 0
  %1524 = bitcast %"struct.skvx::Vec.51"* %1523 to <32 x float>*
  store <32 x float> %1521, <32 x float>* %1524, align 128
  br label %2316

1525:                                             ; preds = %220, %220
  %1526 = sext i32 %227 to i64
  %1527 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1526, i32 0
  %1528 = sext i32 %229 to i64
  %1529 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1528, i32 0
  %1530 = bitcast %"struct.skvx::Vec.51"* %1527 to <32 x float>*
  %1531 = load <32 x float>, <32 x float>* %1530, align 128, !noalias !171
  %1532 = bitcast %"struct.skvx::Vec.51"* %1529 to <32 x float>*
  %1533 = load <32 x float>, <32 x float>* %1532, align 128, !noalias !171
  %1534 = fsub <32 x float> %1531, %1533
  %1535 = sext i32 %225 to i64
  %1536 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1535, i32 0
  %1537 = bitcast %"struct.skvx::Vec.51"* %1536 to <32 x float>*
  store <32 x float> %1534, <32 x float>* %1537, align 128
  br label %2316

1538:                                             ; preds = %220, %220
  %1539 = sext i32 %227 to i64
  %1540 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1539, i32 0
  %1541 = sext i32 %229 to i64
  %1542 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1541, i32 0
  %1543 = bitcast %"struct.skvx::Vec.51"* %1540 to <32 x float>*
  %1544 = load <32 x float>, <32 x float>* %1543, align 128, !noalias !174
  %1545 = bitcast %"struct.skvx::Vec.51"* %1542 to <32 x float>*
  %1546 = load <32 x float>, <32 x float>* %1545, align 128, !noalias !174
  %1547 = fmul <32 x float> %1544, %1546
  %1548 = sext i32 %225 to i64
  %1549 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1548, i32 0
  %1550 = bitcast %"struct.skvx::Vec.51"* %1549 to <32 x float>*
  store <32 x float> %1547, <32 x float>* %1550, align 128
  br label %2316

1551:                                             ; preds = %220, %220
  %1552 = sext i32 %227 to i64
  %1553 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1552, i32 0
  %1554 = sext i32 %229 to i64
  %1555 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1554, i32 0
  %1556 = bitcast %"struct.skvx::Vec.51"* %1553 to <32 x float>*
  %1557 = load <32 x float>, <32 x float>* %1556, align 128, !noalias !177
  %1558 = bitcast %"struct.skvx::Vec.51"* %1555 to <32 x float>*
  %1559 = load <32 x float>, <32 x float>* %1558, align 128, !noalias !177
  %1560 = fdiv <32 x float> %1557, %1559
  %1561 = sext i32 %225 to i64
  %1562 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1561, i32 0
  %1563 = bitcast %"struct.skvx::Vec.51"* %1562 to <32 x float>*
  store <32 x float> %1560, <32 x float>* %1563, align 128
  br label %2316

1564:                                             ; preds = %220, %220
  %1565 = sext i32 %227 to i64
  %1566 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1565, i32 0
  %1567 = sext i32 %229 to i64
  %1568 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1567, i32 0
  %1569 = bitcast %"struct.skvx::Vec.51"* %1568 to <32 x float>*
  %1570 = load <32 x float>, <32 x float>* %1569, align 128, !noalias !180
  %1571 = bitcast %"struct.skvx::Vec.51"* %1566 to <32 x float>*
  %1572 = load <32 x float>, <32 x float>* %1571, align 128, !noalias !180
  %1573 = fcmp olt <32 x float> %1570, %1572
  %1574 = select <32 x i1> %1573, <32 x float> %1570, <32 x float> %1572
  %1575 = sext i32 %225 to i64
  %1576 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1575, i32 0
  %1577 = bitcast %"struct.skvx::Vec.51"* %1576 to <32 x float>*
  store <32 x float> %1574, <32 x float>* %1577, align 128
  br label %2316

1578:                                             ; preds = %220, %220
  %1579 = sext i32 %227 to i64
  %1580 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1579, i32 0
  %1581 = sext i32 %229 to i64
  %1582 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1581, i32 0
  %1583 = bitcast %"struct.skvx::Vec.51"* %1580 to <32 x float>*
  %1584 = load <32 x float>, <32 x float>* %1583, align 128, !noalias !183
  %1585 = bitcast %"struct.skvx::Vec.51"* %1582 to <32 x float>*
  %1586 = load <32 x float>, <32 x float>* %1585, align 128, !noalias !183
  %1587 = fcmp olt <32 x float> %1584, %1586
  %1588 = select <32 x i1> %1587, <32 x float> %1586, <32 x float> %1584
  %1589 = sext i32 %225 to i64
  %1590 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1589, i32 0
  %1591 = bitcast %"struct.skvx::Vec.51"* %1590 to <32 x float>*
  store <32 x float> %1588, <32 x float>* %1591, align 128
  br label %2316

1592:                                             ; preds = %220, %220
  %1593 = sext i32 %227 to i64
  %1594 = sext i32 %229 to i64
  %1595 = sext i32 %231 to i64
  %1596 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1593, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1597 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1594, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1598 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1595, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1599 = bitcast float* %1596 to <8 x float>*
  %1600 = load <8 x float>, <8 x float>* %1599, align 4, !noalias !186
  %1601 = bitcast float* %1597 to <8 x float>*
  %1602 = load <8 x float>, <8 x float>* %1601, align 4, !noalias !186
  %1603 = bitcast float* %1598 to <8 x float>*
  %1604 = load <8 x float>, <8 x float>* %1603, align 4, !noalias !186
  %1605 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1600, <8 x float> %1602, <8 x float> %1604)
  %1606 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1593, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %1607 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1594, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %1608 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1595, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %1609 = bitcast float* %1606 to <8 x float>*
  %1610 = load <8 x float>, <8 x float>* %1609, align 4, !noalias !186
  %1611 = bitcast float* %1607 to <8 x float>*
  %1612 = load <8 x float>, <8 x float>* %1611, align 4, !noalias !186
  %1613 = bitcast float* %1608 to <8 x float>*
  %1614 = load <8 x float>, <8 x float>* %1613, align 4, !noalias !186
  %1615 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1610, <8 x float> %1612, <8 x float> %1614)
  %1616 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1593, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %1617 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1594, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %1618 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1595, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %1619 = bitcast float* %1616 to <8 x float>*
  %1620 = load <8 x float>, <8 x float>* %1619, align 4, !noalias !186
  %1621 = bitcast float* %1617 to <8 x float>*
  %1622 = load <8 x float>, <8 x float>* %1621, align 4, !noalias !186
  %1623 = bitcast float* %1618 to <8 x float>*
  %1624 = load <8 x float>, <8 x float>* %1623, align 4, !noalias !186
  %1625 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1620, <8 x float> %1622, <8 x float> %1624)
  %1626 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1593, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %1627 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1594, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %1628 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1595, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %1629 = bitcast float* %1626 to <8 x float>*
  %1630 = load <8 x float>, <8 x float>* %1629, align 4, !noalias !186
  %1631 = bitcast float* %1627 to <8 x float>*
  %1632 = load <8 x float>, <8 x float>* %1631, align 4, !noalias !186
  %1633 = bitcast float* %1628 to <8 x float>*
  %1634 = load <8 x float>, <8 x float>* %1633, align 4, !noalias !186
  %1635 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1630, <8 x float> %1632, <8 x float> %1634)
  %1636 = sext i32 %225 to i64
  %1637 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1636, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1638 = bitcast float* %1637 to <8 x float>*
  store <8 x float> %1605, <8 x float>* %1638, align 128
  %1639 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1636, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %1640 = bitcast float* %1639 to <8 x float>*
  store <8 x float> %1615, <8 x float>* %1640, align 32
  %1641 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1636, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %1642 = bitcast float* %1641 to <8 x float>*
  store <8 x float> %1625, <8 x float>* %1642, align 64
  %1643 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1636, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %1644 = bitcast float* %1643 to <8 x float>*
  store <8 x float> %1635, <8 x float>* %1644, align 32
  br label %2316

1645:                                             ; preds = %220, %220
  %1646 = sext i32 %227 to i64
  %1647 = sext i32 %229 to i64
  %1648 = sext i32 %231 to i64
  %1649 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1648, i32 0
  %1650 = bitcast %"struct.skvx::Vec.51"* %1649 to <32 x float>*
  %1651 = load <32 x float>, <32 x float>* %1650, align 128, !noalias !193
  %1652 = fsub <32 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %1651
  %1653 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1646, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1654 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1647, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1655 = bitcast float* %1653 to <8 x float>*
  %1656 = load <8 x float>, <8 x float>* %1655, align 4, !noalias !196
  %1657 = bitcast float* %1654 to <8 x float>*
  %1658 = load <8 x float>, <8 x float>* %1657, align 4, !noalias !196
  %1659 = shufflevector <32 x float> %1652, <32 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1660 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1656, <8 x float> %1658, <8 x float> %1659)
  %1661 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1646, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %1662 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1647, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %1663 = bitcast float* %1661 to <8 x float>*
  %1664 = load <8 x float>, <8 x float>* %1663, align 4, !noalias !196
  %1665 = bitcast float* %1662 to <8 x float>*
  %1666 = load <8 x float>, <8 x float>* %1665, align 4, !noalias !196
  %1667 = shufflevector <32 x float> %1652, <32 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1668 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1664, <8 x float> %1666, <8 x float> %1667)
  %1669 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1646, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %1670 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1647, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %1671 = bitcast float* %1669 to <8 x float>*
  %1672 = load <8 x float>, <8 x float>* %1671, align 4, !noalias !196
  %1673 = bitcast float* %1670 to <8 x float>*
  %1674 = load <8 x float>, <8 x float>* %1673, align 4, !noalias !196
  %1675 = shufflevector <32 x float> %1652, <32 x float> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1676 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1672, <8 x float> %1674, <8 x float> %1675)
  %1677 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1646, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %1678 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1647, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %1679 = bitcast float* %1677 to <8 x float>*
  %1680 = load <8 x float>, <8 x float>* %1679, align 4, !noalias !196
  %1681 = bitcast float* %1678 to <8 x float>*
  %1682 = load <8 x float>, <8 x float>* %1681, align 4, !noalias !196
  %1683 = shufflevector <32 x float> %1652, <32 x float> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1684 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1680, <8 x float> %1682, <8 x float> %1683)
  %1685 = sext i32 %225 to i64
  %1686 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1685, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1687 = bitcast float* %1686 to <8 x float>*
  store <8 x float> %1660, <8 x float>* %1687, align 128
  %1688 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1685, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %1689 = bitcast float* %1688 to <8 x float>*
  store <8 x float> %1668, <8 x float>* %1689, align 32
  %1690 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1685, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %1691 = bitcast float* %1690 to <8 x float>*
  store <8 x float> %1676, <8 x float>* %1691, align 64
  %1692 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1685, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %1693 = bitcast float* %1692 to <8 x float>*
  store <8 x float> %1684, <8 x float>* %1693, align 32
  br label %2316

1694:                                             ; preds = %220, %220
  %1695 = sext i32 %227 to i64
  %1696 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1695, i32 0
  %1697 = bitcast %"struct.skvx::Vec.51"* %1696 to <32 x float>*
  %1698 = load <32 x float>, <32 x float>* %1697, align 128, !noalias !203
  %1699 = fsub <32 x float> <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, %1698
  %1700 = sext i32 %229 to i64
  %1701 = sext i32 %231 to i64
  %1702 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1700, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1703 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1701, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1704 = bitcast float* %1702 to <8 x float>*
  %1705 = load <8 x float>, <8 x float>* %1704, align 4, !noalias !206
  %1706 = bitcast float* %1703 to <8 x float>*
  %1707 = load <8 x float>, <8 x float>* %1706, align 4, !noalias !206
  %1708 = shufflevector <32 x float> %1699, <32 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1709 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1708, <8 x float> %1705, <8 x float> %1707)
  %1710 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1700, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %1711 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1701, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %1712 = bitcast float* %1710 to <8 x float>*
  %1713 = load <8 x float>, <8 x float>* %1712, align 4, !noalias !206
  %1714 = bitcast float* %1711 to <8 x float>*
  %1715 = load <8 x float>, <8 x float>* %1714, align 4, !noalias !206
  %1716 = shufflevector <32 x float> %1699, <32 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1717 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1716, <8 x float> %1713, <8 x float> %1715)
  %1718 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1700, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %1719 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1701, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %1720 = bitcast float* %1718 to <8 x float>*
  %1721 = load <8 x float>, <8 x float>* %1720, align 4, !noalias !206
  %1722 = bitcast float* %1719 to <8 x float>*
  %1723 = load <8 x float>, <8 x float>* %1722, align 4, !noalias !206
  %1724 = shufflevector <32 x float> %1699, <32 x float> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1725 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1724, <8 x float> %1721, <8 x float> %1723)
  %1726 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1700, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %1727 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1701, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %1728 = bitcast float* %1726 to <8 x float>*
  %1729 = load <8 x float>, <8 x float>* %1728, align 4, !noalias !206
  %1730 = bitcast float* %1727 to <8 x float>*
  %1731 = load <8 x float>, <8 x float>* %1730, align 4, !noalias !206
  %1732 = shufflevector <32 x float> %1699, <32 x float> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1733 = call <8 x float> @llvm.fma.v8f32(<8 x float> %1732, <8 x float> %1729, <8 x float> %1731)
  %1734 = sext i32 %225 to i64
  %1735 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1734, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1736 = bitcast float* %1735 to <8 x float>*
  store <8 x float> %1709, <8 x float>* %1736, align 128
  %1737 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1734, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %1738 = bitcast float* %1737 to <8 x float>*
  store <8 x float> %1717, <8 x float>* %1738, align 32
  %1739 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1734, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %1740 = bitcast float* %1739 to <8 x float>*
  store <8 x float> %1725, <8 x float>* %1740, align 64
  %1741 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1734, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %1742 = bitcast float* %1741 to <8 x float>*
  store <8 x float> %1733, <8 x float>* %1742, align 32
  br label %2316

1743:                                             ; preds = %220, %220
  %1744 = sext i32 %227 to i64
  %1745 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1746 = load float, float* %1745, align 4, !noalias !213
  %1747 = tail call float @sqrtf(float %1746) #13
  %1748 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %1749 = load float, float* %1748, align 4, !noalias !213
  %1750 = tail call float @sqrtf(float %1749) #13
  %1751 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %1752 = load float, float* %1751, align 4, !noalias !213
  %1753 = tail call float @sqrtf(float %1752) #13
  %1754 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0
  %1755 = load float, float* %1754, align 4, !noalias !213
  %1756 = tail call float @sqrtf(float %1755) #13
  %1757 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %1758 = load float, float* %1757, align 4, !noalias !213
  %1759 = tail call float @sqrtf(float %1758) #13
  %1760 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %1761 = load float, float* %1760, align 4, !noalias !213
  %1762 = tail call float @sqrtf(float %1761) #13
  %1763 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0
  %1764 = load float, float* %1763, align 4, !noalias !213
  %1765 = tail call float @sqrtf(float %1764) #13
  %1766 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0
  %1767 = load float, float* %1766, align 4, !noalias !213
  %1768 = tail call float @sqrtf(float %1767) #13
  %1769 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %1770 = load float, float* %1769, align 4, !noalias !213
  %1771 = tail call float @sqrtf(float %1770) #13
  %1772 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0
  %1773 = load float, float* %1772, align 4, !noalias !213
  %1774 = tail call float @sqrtf(float %1773) #13
  %1775 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %1776 = load float, float* %1775, align 4, !noalias !213
  %1777 = tail call float @sqrtf(float %1776) #13
  %1778 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0
  %1779 = load float, float* %1778, align 4, !noalias !213
  %1780 = tail call float @sqrtf(float %1779) #13
  %1781 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %1782 = load float, float* %1781, align 4, !noalias !213
  %1783 = tail call float @sqrtf(float %1782) #13
  %1784 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1, i32 0
  %1785 = load float, float* %1784, align 4, !noalias !213
  %1786 = tail call float @sqrtf(float %1785) #13
  %1787 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0
  %1788 = load float, float* %1787, align 4, !noalias !213
  %1789 = tail call float @sqrtf(float %1788) #13
  %1790 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 0
  %1791 = load float, float* %1790, align 4, !noalias !213
  %1792 = tail call float @sqrtf(float %1791) #13
  %1793 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %1794 = load float, float* %1793, align 4, !noalias !213
  %1795 = tail call float @sqrtf(float %1794) #13
  %1796 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %1797 = load float, float* %1796, align 4, !noalias !213
  %1798 = tail call float @sqrtf(float %1797) #13
  %1799 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0
  %1800 = load float, float* %1799, align 4, !noalias !213
  %1801 = tail call float @sqrtf(float %1800) #13
  %1802 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 0, i32 0, i32 1, i32 1, i32 0
  %1803 = load float, float* %1802, align 4, !noalias !213
  %1804 = tail call float @sqrtf(float %1803) #13
  %1805 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0
  %1806 = load float, float* %1805, align 4, !noalias !213
  %1807 = tail call float @sqrtf(float %1806) #13
  %1808 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0
  %1809 = load float, float* %1808, align 4, !noalias !213
  %1810 = tail call float @sqrtf(float %1809) #13
  %1811 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0
  %1812 = load float, float* %1811, align 4, !noalias !213
  %1813 = tail call float @sqrtf(float %1812) #13
  %1814 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1, i32 0
  %1815 = load float, float* %1814, align 4, !noalias !213
  %1816 = tail call float @sqrtf(float %1815) #13
  %1817 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %1818 = load float, float* %1817, align 4, !noalias !213
  %1819 = tail call float @sqrtf(float %1818) #13
  %1820 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0
  %1821 = load float, float* %1820, align 4, !noalias !213
  %1822 = tail call float @sqrtf(float %1821) #13
  %1823 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 1, i32 0, i32 1, i32 0, i32 0
  %1824 = load float, float* %1823, align 4, !noalias !213
  %1825 = tail call float @sqrtf(float %1824) #13
  %1826 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0
  %1827 = load float, float* %1826, align 4, !noalias !213
  %1828 = tail call float @sqrtf(float %1827) #13
  %1829 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0
  %1830 = load float, float* %1829, align 4, !noalias !213
  %1831 = tail call float @sqrtf(float %1830) #13
  %1832 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1, i32 0
  %1833 = load float, float* %1832, align 4, !noalias !213
  %1834 = tail call float @sqrtf(float %1833) #13
  %1835 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0
  %1836 = load float, float* %1835, align 4, !noalias !213
  %1837 = tail call float @sqrtf(float %1836) #13
  %1838 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1744, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0
  %1839 = load float, float* %1838, align 4, !noalias !213
  %1840 = tail call float @sqrtf(float %1839) #13
  %1841 = sext i32 %225 to i64
  %1842 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store float %1747, float* %1842, align 128
  %1843 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store float %1750, float* %1843, align 4
  %1844 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store float %1753, float* %1844, align 8
  %1845 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0
  store float %1756, float* %1845, align 4
  %1846 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store float %1759, float* %1846, align 16
  %1847 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  store float %1762, float* %1847, align 4
  %1848 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0
  store float %1765, float* %1848, align 8
  %1849 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0
  store float %1768, float* %1849, align 4
  %1850 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store float %1771, float* %1850, align 32
  %1851 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0
  store float %1774, float* %1851, align 4
  %1852 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0
  store float %1777, float* %1852, align 8
  %1853 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0
  store float %1780, float* %1853, align 4
  %1854 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0
  store float %1783, float* %1854, align 16
  %1855 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1, i32 0
  store float %1786, float* %1855, align 4
  %1856 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0
  store float %1789, float* %1856, align 8
  %1857 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 0
  store float %1792, float* %1857, align 4
  %1858 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store float %1795, float* %1858, align 64
  %1859 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  store float %1798, float* %1859, align 4
  %1860 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0
  store float %1801, float* %1860, align 8
  %1861 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 0, i32 0, i32 1, i32 1, i32 0
  store float %1804, float* %1861, align 4
  %1862 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0
  store float %1807, float* %1862, align 16
  %1863 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0
  store float %1810, float* %1863, align 4
  %1864 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 0, i32 1, i32 1, i32 0, i32 0
  store float %1813, float* %1864, align 8
  %1865 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 0, i32 1, i32 1, i32 1, i32 0
  store float %1816, float* %1865, align 4
  %1866 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  store float %1819, float* %1866, align 32
  %1867 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 1, i32 0, i32 0, i32 1, i32 0
  store float %1822, float* %1867, align 4
  %1868 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 1, i32 0, i32 1, i32 0, i32 0
  store float %1825, float* %1868, align 8
  %1869 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1, i32 0
  store float %1828, float* %1869, align 4
  %1870 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0
  store float %1831, float* %1870, align 16
  %1871 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 1, i32 1, i32 0, i32 1, i32 0
  store float %1834, float* %1871, align 4
  %1872 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0
  store float %1837, float* %1872, align 8
  %1873 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1841, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0
  store float %1840, float* %1873, align 4
  br label %2316

1874:                                             ; preds = %220, %220
  %1875 = sext i32 %227 to i64
  %1876 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1875
  %1877 = sext i32 %229 to i64
  %1878 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1877
  %1879 = bitcast %union.Slot* %1876 to <32 x i32>*
  %1880 = load <32 x i32>, <32 x i32>* %1879, align 128, !noalias !220
  %1881 = bitcast %union.Slot* %1878 to <32 x i32>*
  %1882 = load <32 x i32>, <32 x i32>* %1881, align 128, !noalias !220
  %1883 = add <32 x i32> %1882, %1880
  %1884 = sext i32 %225 to i64
  %1885 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1884
  %1886 = bitcast %union.Slot* %1885 to <32 x i32>*
  store <32 x i32> %1883, <32 x i32>* %1886, align 128
  br label %2316

1887:                                             ; preds = %220, %220
  %1888 = sext i32 %227 to i64
  %1889 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1888
  %1890 = sext i32 %229 to i64
  %1891 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1890
  %1892 = bitcast %union.Slot* %1889 to <32 x i32>*
  %1893 = load <32 x i32>, <32 x i32>* %1892, align 128, !noalias !223
  %1894 = bitcast %union.Slot* %1891 to <32 x i32>*
  %1895 = load <32 x i32>, <32 x i32>* %1894, align 128, !noalias !223
  %1896 = sub <32 x i32> %1893, %1895
  %1897 = sext i32 %225 to i64
  %1898 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1897
  %1899 = bitcast %union.Slot* %1898 to <32 x i32>*
  store <32 x i32> %1896, <32 x i32>* %1899, align 128
  br label %2316

1900:                                             ; preds = %220, %220
  %1901 = sext i32 %227 to i64
  %1902 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1901
  %1903 = sext i32 %229 to i64
  %1904 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1903
  %1905 = bitcast %union.Slot* %1902 to <32 x i32>*
  %1906 = load <32 x i32>, <32 x i32>* %1905, align 128, !noalias !226
  %1907 = bitcast %union.Slot* %1904 to <32 x i32>*
  %1908 = load <32 x i32>, <32 x i32>* %1907, align 128, !noalias !226
  %1909 = mul <32 x i32> %1908, %1906
  %1910 = sext i32 %225 to i64
  %1911 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1910
  %1912 = bitcast %union.Slot* %1911 to <32 x i32>*
  store <32 x i32> %1909, <32 x i32>* %1912, align 128
  br label %2316

1913:                                             ; preds = %220, %220
  %1914 = sext i32 %227 to i64
  %1915 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1914
  %1916 = bitcast %union.Slot* %1915 to <32 x i32>*
  %1917 = load <32 x i32>, <32 x i32>* %1916, align 128, !noalias !229
  %1918 = insertelement <32 x i32> undef, i32 %233, i32 0
  %1919 = shufflevector <32 x i32> %1918, <32 x i32> undef, <32 x i32> zeroinitializer
  %1920 = shl <32 x i32> %1917, %1919
  %1921 = sext i32 %225 to i64
  %1922 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1921
  %1923 = bitcast %union.Slot* %1922 to <32 x i32>*
  store <32 x i32> %1920, <32 x i32>* %1923, align 128
  br label %2316

1924:                                             ; preds = %220, %220
  %1925 = sext i32 %227 to i64
  %1926 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1925
  %1927 = bitcast %union.Slot* %1926 to <32 x i32>*
  %1928 = load <32 x i32>, <32 x i32>* %1927, align 128, !noalias !232
  %1929 = insertelement <32 x i32> undef, i32 %233, i32 0
  %1930 = shufflevector <32 x i32> %1929, <32 x i32> undef, <32 x i32> zeroinitializer
  %1931 = ashr <32 x i32> %1928, %1930
  %1932 = sext i32 %225 to i64
  %1933 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1932
  %1934 = bitcast %union.Slot* %1933 to <32 x i32>*
  store <32 x i32> %1931, <32 x i32>* %1934, align 128
  br label %2316

1935:                                             ; preds = %220, %220
  %1936 = sext i32 %227 to i64
  %1937 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1936
  %1938 = bitcast %union.Slot* %1937 to <32 x i32>*
  %1939 = load <32 x i32>, <32 x i32>* %1938, align 128, !noalias !235
  %1940 = insertelement <32 x i32> undef, i32 %233, i32 0
  %1941 = shufflevector <32 x i32> %1940, <32 x i32> undef, <32 x i32> zeroinitializer
  %1942 = lshr <32 x i32> %1939, %1941
  %1943 = sext i32 %225 to i64
  %1944 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1943
  %1945 = bitcast %union.Slot* %1944 to <32 x i32>*
  store <32 x i32> %1942, <32 x i32>* %1945, align 128
  br label %2316

1946:                                             ; preds = %220, %220
  %1947 = sext i32 %227 to i64
  %1948 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1947, i32 0
  %1949 = sext i32 %229 to i64
  %1950 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1949, i32 0
  %1951 = bitcast %"struct.skvx::Vec.51"* %1948 to <32 x float>*
  %1952 = load <32 x float>, <32 x float>* %1951, align 128, !noalias !238
  %1953 = bitcast %"struct.skvx::Vec.51"* %1950 to <32 x float>*
  %1954 = load <32 x float>, <32 x float>* %1953, align 128, !noalias !238
  %1955 = fcmp oeq <32 x float> %1952, %1954
  %1956 = sext <32 x i1> %1955 to <32 x i32>
  %1957 = sext i32 %225 to i64
  %1958 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1957
  %1959 = bitcast %union.Slot* %1958 to <32 x i32>*
  store <32 x i32> %1956, <32 x i32>* %1959, align 128
  br label %2316

1960:                                             ; preds = %220, %220
  %1961 = sext i32 %227 to i64
  %1962 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1961, i32 0
  %1963 = sext i32 %229 to i64
  %1964 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1963, i32 0
  %1965 = bitcast %"struct.skvx::Vec.51"* %1962 to <32 x float>*
  %1966 = load <32 x float>, <32 x float>* %1965, align 128, !noalias !241
  %1967 = bitcast %"struct.skvx::Vec.51"* %1964 to <32 x float>*
  %1968 = load <32 x float>, <32 x float>* %1967, align 128, !noalias !241
  %1969 = fcmp une <32 x float> %1966, %1968
  %1970 = sext <32 x i1> %1969 to <32 x i32>
  %1971 = sext i32 %225 to i64
  %1972 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1971
  %1973 = bitcast %union.Slot* %1972 to <32 x i32>*
  store <32 x i32> %1970, <32 x i32>* %1973, align 128
  br label %2316

1974:                                             ; preds = %220, %220
  %1975 = sext i32 %227 to i64
  %1976 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1975, i32 0
  %1977 = sext i32 %229 to i64
  %1978 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1977, i32 0
  %1979 = bitcast %"struct.skvx::Vec.51"* %1976 to <32 x float>*
  %1980 = load <32 x float>, <32 x float>* %1979, align 128, !noalias !244
  %1981 = bitcast %"struct.skvx::Vec.51"* %1978 to <32 x float>*
  %1982 = load <32 x float>, <32 x float>* %1981, align 128, !noalias !244
  %1983 = fcmp ogt <32 x float> %1980, %1982
  %1984 = sext <32 x i1> %1983 to <32 x i32>
  %1985 = sext i32 %225 to i64
  %1986 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1985
  %1987 = bitcast %union.Slot* %1986 to <32 x i32>*
  store <32 x i32> %1984, <32 x i32>* %1987, align 128
  br label %2316

1988:                                             ; preds = %220, %220
  %1989 = sext i32 %227 to i64
  %1990 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1989, i32 0
  %1991 = sext i32 %229 to i64
  %1992 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1991, i32 0
  %1993 = bitcast %"struct.skvx::Vec.51"* %1990 to <32 x float>*
  %1994 = load <32 x float>, <32 x float>* %1993, align 128, !noalias !247
  %1995 = bitcast %"struct.skvx::Vec.51"* %1992 to <32 x float>*
  %1996 = load <32 x float>, <32 x float>* %1995, align 128, !noalias !247
  %1997 = fcmp oge <32 x float> %1994, %1996
  %1998 = sext <32 x i1> %1997 to <32 x i32>
  %1999 = sext i32 %225 to i64
  %2000 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %1999
  %2001 = bitcast %union.Slot* %2000 to <32 x i32>*
  store <32 x i32> %1998, <32 x i32>* %2001, align 128
  br label %2316

2002:                                             ; preds = %220, %220
  %2003 = sext i32 %227 to i64
  %2004 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2003
  %2005 = sext i32 %229 to i64
  %2006 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2005
  %2007 = bitcast %union.Slot* %2004 to <32 x i32>*
  %2008 = load <32 x i32>, <32 x i32>* %2007, align 128, !noalias !250
  %2009 = bitcast %union.Slot* %2006 to <32 x i32>*
  %2010 = load <32 x i32>, <32 x i32>* %2009, align 128, !noalias !250
  %2011 = icmp eq <32 x i32> %2008, %2010
  %2012 = sext <32 x i1> %2011 to <32 x i32>
  %2013 = sext i32 %225 to i64
  %2014 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2013
  %2015 = bitcast %union.Slot* %2014 to <32 x i32>*
  store <32 x i32> %2012, <32 x i32>* %2015, align 128
  br label %2316

2016:                                             ; preds = %220, %220
  %2017 = sext i32 %227 to i64
  %2018 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2017
  %2019 = sext i32 %229 to i64
  %2020 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2019
  %2021 = bitcast %union.Slot* %2018 to <32 x i32>*
  %2022 = load <32 x i32>, <32 x i32>* %2021, align 128, !noalias !253
  %2023 = bitcast %union.Slot* %2020 to <32 x i32>*
  %2024 = load <32 x i32>, <32 x i32>* %2023, align 128, !noalias !253
  %2025 = icmp sgt <32 x i32> %2022, %2024
  %2026 = sext <32 x i1> %2025 to <32 x i32>
  %2027 = sext i32 %225 to i64
  %2028 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2027
  %2029 = bitcast %union.Slot* %2028 to <32 x i32>*
  store <32 x i32> %2026, <32 x i32>* %2029, align 128
  br label %2316

2030:                                             ; preds = %220, %220
  %2031 = sext i32 %227 to i64
  %2032 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2031
  %2033 = sext i32 %229 to i64
  %2034 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2033
  %2035 = bitcast %union.Slot* %2032 to <32 x i32>*
  %2036 = load <32 x i32>, <32 x i32>* %2035, align 128, !noalias !256
  %2037 = bitcast %union.Slot* %2034 to <32 x i32>*
  %2038 = load <32 x i32>, <32 x i32>* %2037, align 128, !noalias !256
  %2039 = and <32 x i32> %2038, %2036
  %2040 = sext i32 %225 to i64
  %2041 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2040
  %2042 = bitcast %union.Slot* %2041 to <32 x i32>*
  store <32 x i32> %2039, <32 x i32>* %2042, align 128
  br label %2316

2043:                                             ; preds = %220, %220
  %2044 = sext i32 %227 to i64
  %2045 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2044
  %2046 = sext i32 %229 to i64
  %2047 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2046
  %2048 = bitcast %union.Slot* %2045 to <32 x i32>*
  %2049 = load <32 x i32>, <32 x i32>* %2048, align 128, !noalias !259
  %2050 = bitcast %union.Slot* %2047 to <32 x i32>*
  %2051 = load <32 x i32>, <32 x i32>* %2050, align 128, !noalias !259
  %2052 = or <32 x i32> %2051, %2049
  %2053 = sext i32 %225 to i64
  %2054 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2053
  %2055 = bitcast %union.Slot* %2054 to <32 x i32>*
  store <32 x i32> %2052, <32 x i32>* %2055, align 128
  br label %2316

2056:                                             ; preds = %220, %220
  %2057 = sext i32 %227 to i64
  %2058 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2057
  %2059 = sext i32 %229 to i64
  %2060 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2059
  %2061 = bitcast %union.Slot* %2058 to <32 x i32>*
  %2062 = load <32 x i32>, <32 x i32>* %2061, align 128, !noalias !262
  %2063 = bitcast %union.Slot* %2060 to <32 x i32>*
  %2064 = load <32 x i32>, <32 x i32>* %2063, align 128, !noalias !262
  %2065 = xor <32 x i32> %2064, %2062
  %2066 = sext i32 %225 to i64
  %2067 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2066
  %2068 = bitcast %union.Slot* %2067 to <32 x i32>*
  store <32 x i32> %2065, <32 x i32>* %2068, align 128
  br label %2316

2069:                                             ; preds = %220, %220
  %2070 = sext i32 %227 to i64
  %2071 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2070
  %2072 = sext i32 %229 to i64
  %2073 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2072
  %2074 = bitcast %union.Slot* %2073 to <32 x i32>*
  %2075 = load <32 x i32>, <32 x i32>* %2074, align 128, !noalias !265
  %2076 = xor <32 x i32> %2075, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %2077 = bitcast %union.Slot* %2071 to <32 x i32>*
  %2078 = load <32 x i32>, <32 x i32>* %2077, align 128, !noalias !268
  %2079 = and <32 x i32> %2078, %2076
  %2080 = sext i32 %225 to i64
  %2081 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2080
  %2082 = bitcast %union.Slot* %2081 to <32 x i32>*
  store <32 x i32> %2079, <32 x i32>* %2082, align 128
  br label %2316

2083:                                             ; preds = %220, %220
  %2084 = sext i32 %227 to i64
  %2085 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2084
  %2086 = sext i32 %229 to i64
  %2087 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2086
  %2088 = sext i32 %231 to i64
  %2089 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2088
  %2090 = bitcast %union.Slot* %2089 to <32 x i8>*
  %2091 = load <32 x i8>, <32 x i8>* %2090, align 32, !noalias !271
  %2092 = bitcast %union.Slot* %2087 to <32 x i8>*
  %2093 = load <32 x i8>, <32 x i8>* %2092, align 32, !noalias !271
  %2094 = bitcast %union.Slot* %2085 to <32 x i8>*
  %2095 = load <32 x i8>, <32 x i8>* %2094, align 32, !noalias !271
  %2096 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %2091, <32 x i8> %2093, <32 x i8> %2095) #13
  %2097 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2084, i32 0, i32 0, i32 1
  %2098 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2086, i32 0, i32 0, i32 1
  %2099 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2088, i32 0, i32 0, i32 1
  %2100 = bitcast %"struct.skvx::Vec.53"* %2099 to <32 x i8>*
  %2101 = load <32 x i8>, <32 x i8>* %2100, align 32, !noalias !278
  %2102 = bitcast %"struct.skvx::Vec.53"* %2098 to <32 x i8>*
  %2103 = load <32 x i8>, <32 x i8>* %2102, align 32, !noalias !278
  %2104 = bitcast %"struct.skvx::Vec.53"* %2097 to <32 x i8>*
  %2105 = load <32 x i8>, <32 x i8>* %2104, align 32, !noalias !278
  %2106 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %2101, <32 x i8> %2103, <32 x i8> %2105) #13
  %2107 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2084, i32 0, i32 1
  %2108 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2086, i32 0, i32 1
  %2109 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2088, i32 0, i32 1
  %2110 = bitcast %"struct.skvx::Vec.52"* %2109 to <32 x i8>*
  %2111 = load <32 x i8>, <32 x i8>* %2110, align 32, !noalias !281
  %2112 = bitcast %"struct.skvx::Vec.52"* %2108 to <32 x i8>*
  %2113 = load <32 x i8>, <32 x i8>* %2112, align 32, !noalias !281
  %2114 = bitcast %"struct.skvx::Vec.52"* %2107 to <32 x i8>*
  %2115 = load <32 x i8>, <32 x i8>* %2114, align 32, !noalias !281
  %2116 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %2111, <32 x i8> %2113, <32 x i8> %2115) #13
  %2117 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2084, i32 0, i32 1, i32 1
  %2118 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2086, i32 0, i32 1, i32 1
  %2119 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2088, i32 0, i32 1, i32 1
  %2120 = bitcast %"struct.skvx::Vec.53"* %2119 to <32 x i8>*
  %2121 = load <32 x i8>, <32 x i8>* %2120, align 32, !noalias !286
  %2122 = bitcast %"struct.skvx::Vec.53"* %2118 to <32 x i8>*
  %2123 = load <32 x i8>, <32 x i8>* %2122, align 32, !noalias !286
  %2124 = bitcast %"struct.skvx::Vec.53"* %2117 to <32 x i8>*
  %2125 = load <32 x i8>, <32 x i8>* %2124, align 32, !noalias !286
  %2126 = tail call <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8> %2121, <32 x i8> %2123, <32 x i8> %2125) #13
  %2127 = sext i32 %225 to i64
  %2128 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2127
  %2129 = bitcast %union.Slot* %2128 to <32 x i8>*
  store <32 x i8> %2096, <32 x i8>* %2129, align 128
  %2130 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2127, i32 0, i32 0, i32 1
  %2131 = bitcast %"struct.skvx::Vec.53"* %2130 to <32 x i8>*
  store <32 x i8> %2106, <32 x i8>* %2131, align 32
  %2132 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2127, i32 0, i32 1
  %2133 = bitcast %"struct.skvx::Vec.52"* %2132 to <32 x i8>*
  store <32 x i8> %2116, <32 x i8>* %2133, align 64
  %2134 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2127, i32 0, i32 1, i32 1
  %2135 = bitcast %"struct.skvx::Vec.53"* %2134 to <32 x i8>*
  store <32 x i8> %2126, <32 x i8>* %2135, align 32
  br label %2316

2136:                                             ; preds = %220, %220
  %2137 = sext i32 %227 to i64
  %2138 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2137, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %2139 = bitcast float* %2138 to <8 x float>*
  %2140 = load <8 x float>, <8 x float>* %2139, align 4, !noalias !289
  %2141 = call <8 x float> @llvm.ceil.v8f32(<8 x float> %2140)
  %2142 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2137, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %2143 = bitcast float* %2142 to <8 x float>*
  %2144 = load <8 x float>, <8 x float>* %2143, align 4, !noalias !289
  %2145 = call <8 x float> @llvm.ceil.v8f32(<8 x float> %2144)
  %2146 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2137, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %2147 = bitcast float* %2146 to <8 x float>*
  %2148 = load <8 x float>, <8 x float>* %2147, align 4, !noalias !289
  %2149 = call <8 x float> @llvm.ceil.v8f32(<8 x float> %2148)
  %2150 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2137, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %2151 = bitcast float* %2150 to <8 x float>*
  %2152 = load <8 x float>, <8 x float>* %2151, align 4, !noalias !289
  %2153 = call <8 x float> @llvm.ceil.v8f32(<8 x float> %2152)
  %2154 = sext i32 %225 to i64
  %2155 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2154, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %2156 = bitcast float* %2155 to <8 x float>*
  store <8 x float> %2141, <8 x float>* %2156, align 128
  %2157 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2154, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %2158 = bitcast float* %2157 to <8 x float>*
  store <8 x float> %2145, <8 x float>* %2158, align 32
  %2159 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2154, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %2160 = bitcast float* %2159 to <8 x float>*
  store <8 x float> %2149, <8 x float>* %2160, align 64
  %2161 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2154, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %2162 = bitcast float* %2161 to <8 x float>*
  store <8 x float> %2153, <8 x float>* %2162, align 32
  br label %2316

2163:                                             ; preds = %220, %220
  %2164 = sext i32 %227 to i64
  %2165 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2164, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %2166 = bitcast float* %2165 to <8 x float>*
  %2167 = load <8 x float>, <8 x float>* %2166, align 4, !noalias !296
  %2168 = call <8 x float> @llvm.floor.v8f32(<8 x float> %2167)
  %2169 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2164, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %2170 = bitcast float* %2169 to <8 x float>*
  %2171 = load <8 x float>, <8 x float>* %2170, align 4, !noalias !296
  %2172 = call <8 x float> @llvm.floor.v8f32(<8 x float> %2171)
  %2173 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2164, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %2174 = bitcast float* %2173 to <8 x float>*
  %2175 = load <8 x float>, <8 x float>* %2174, align 4, !noalias !296
  %2176 = call <8 x float> @llvm.floor.v8f32(<8 x float> %2175)
  %2177 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2164, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %2178 = bitcast float* %2177 to <8 x float>*
  %2179 = load <8 x float>, <8 x float>* %2178, align 4, !noalias !296
  %2180 = call <8 x float> @llvm.floor.v8f32(<8 x float> %2179)
  %2181 = sext i32 %225 to i64
  %2182 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2181, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %2183 = bitcast float* %2182 to <8 x float>*
  store <8 x float> %2168, <8 x float>* %2183, align 128
  %2184 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2181, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %2185 = bitcast float* %2184 to <8 x float>*
  store <8 x float> %2172, <8 x float>* %2185, align 32
  %2186 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2181, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %2187 = bitcast float* %2186 to <8 x float>*
  store <8 x float> %2176, <8 x float>* %2187, align 64
  %2188 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2181, i32 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %2189 = bitcast float* %2188 to <8 x float>*
  store <8 x float> %2180, <8 x float>* %2189, align 32
  br label %2316

2190:                                             ; preds = %220, %220
  %2191 = sext i32 %227 to i64
  %2192 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2191
  %2193 = bitcast %union.Slot* %2192 to <32 x i32>*
  %2194 = load <32 x i32>, <32 x i32>* %2193, align 128, !noalias !303
  %2195 = sitofp <32 x i32> %2194 to <32 x float>
  %2196 = sext i32 %225 to i64
  %2197 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2196, i32 0
  %2198 = bitcast %"struct.skvx::Vec.51"* %2197 to <32 x float>*
  store <32 x float> %2195, <32 x float>* %2198, align 128
  br label %2316

2199:                                             ; preds = %220, %220
  %2200 = sext i32 %227 to i64
  %2201 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2200, i32 0
  %2202 = bitcast %"struct.skvx::Vec.51"* %2201 to <32 x float>*
  %2203 = load <32 x float>, <32 x float>* %2202, align 128, !noalias !306
  %2204 = fptosi <32 x float> %2203 to <32 x i32>
  %2205 = sext i32 %225 to i64
  %2206 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2205
  %2207 = bitcast %union.Slot* %2206 to <32 x i32>*
  store <32 x i32> %2204, <32 x i32>* %2207, align 128
  br label %2316

2208:                                             ; preds = %220, %220
  %2209 = sext i32 %227 to i64
  %2210 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2209, i32 0
  %2211 = bitcast %"struct.skvx::Vec.51"* %2210 to <8 x float>*
  %2212 = load <8 x float>, <8 x float>* %2211, align 32, !noalias !309
  %2213 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2212) #13
  %2214 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2209, i32 0, i32 0, i32 1
  %2215 = bitcast %"struct.skvx::Vec.53"* %2214 to <8 x float>*
  %2216 = load <8 x float>, <8 x float>* %2215, align 32, !noalias !316
  %2217 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2216) #13
  %2218 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2209, i32 0, i32 1
  %2219 = bitcast %"struct.skvx::Vec.52"* %2218 to <8 x float>*
  %2220 = load <8 x float>, <8 x float>* %2219, align 32, !noalias !319
  %2221 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2220) #13
  %2222 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2209, i32 0, i32 1, i32 1
  %2223 = bitcast %"struct.skvx::Vec.53"* %2222 to <8 x float>*
  %2224 = load <8 x float>, <8 x float>* %2223, align 32, !noalias !324
  %2225 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %2224) #13
  %2226 = shufflevector <8 x i32> %2213, <8 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2227 = shufflevector <8 x i32> %2217, <8 x i32> undef, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2228 = shufflevector <32 x i32> %2226, <32 x i32> %2227, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2229 = shufflevector <8 x i32> %2221, <8 x i32> undef, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2230 = shufflevector <32 x i32> %2228, <32 x i32> %2229, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2231 = shufflevector <8 x i32> %2225, <8 x i32> undef, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2232 = shufflevector <32 x i32> %2230, <32 x i32> %2231, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2233 = sext i32 %225 to i64
  %2234 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2233
  %2235 = bitcast %union.Slot* %2234 to <32 x i32>*
  store <32 x i32> %2232, <32 x i32>* %2235, align 128
  br label %2316

2236:                                             ; preds = %220, %220
  %2237 = sext i32 %227 to i64
  %2238 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2237, i32 0
  %2239 = bitcast %"struct.skvx::Vec.51"* %2238 to <8 x float>*
  %2240 = load <8 x float>, <8 x float>* %2239, align 32, !noalias !327
  %2241 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %2240, i32 4) #13
  %2242 = bitcast <8 x i16> %2241 to <2 x i64>
  %2243 = extractelement <2 x i64> %2242, i32 0
  %2244 = extractelement <2 x i64> %2242, i32 1
  %2245 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2237, i32 0, i32 0, i32 1
  %2246 = bitcast %"struct.skvx::Vec.53"* %2245 to <8 x float>*
  %2247 = load <8 x float>, <8 x float>* %2246, align 32, !noalias !327
  %2248 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %2247, i32 4) #13
  %2249 = bitcast <8 x i16> %2248 to <2 x i64>
  %2250 = extractelement <2 x i64> %2249, i32 0
  %2251 = extractelement <2 x i64> %2249, i32 1
  %2252 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2237, i32 0, i32 1
  %2253 = bitcast %"struct.skvx::Vec.52"* %2252 to <8 x float>*
  %2254 = load <8 x float>, <8 x float>* %2253, align 32, !noalias !332
  %2255 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %2254, i32 4) #13
  %2256 = bitcast <8 x i16> %2255 to <2 x i64>
  %2257 = extractelement <2 x i64> %2256, i32 0
  %2258 = extractelement <2 x i64> %2256, i32 1
  %2259 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2237, i32 0, i32 1, i32 1
  %2260 = bitcast %"struct.skvx::Vec.53"* %2259 to <8 x float>*
  %2261 = load <8 x float>, <8 x float>* %2260, align 32, !noalias !332
  %2262 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %2261, i32 4) #13
  %2263 = bitcast <8 x i16> %2262 to <2 x i64>
  %2264 = extractelement <2 x i64> %2263, i32 0
  %2265 = extractelement <2 x i64> %2263, i32 1
  %2266 = bitcast i64 %2243 to <4 x i16>
  %2267 = shufflevector <4 x i16> %2266, <4 x i16> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2268 = bitcast i64 %2244 to <4 x i16>
  %2269 = shufflevector <4 x i16> %2268, <4 x i16> undef, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2270 = shufflevector <32 x i16> %2267, <32 x i16> %2269, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 36, i32 37, i32 38, i32 39, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2271 = bitcast i64 %2250 to <4 x i16>
  %2272 = shufflevector <4 x i16> %2271, <4 x i16> undef, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2273 = shufflevector <32 x i16> %2270, <32 x i16> %2272, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 40, i32 41, i32 42, i32 43, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2274 = bitcast i64 %2251 to <4 x i16>
  %2275 = shufflevector <4 x i16> %2274, <4 x i16> undef, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2276 = shufflevector <32 x i16> %2273, <32 x i16> %2275, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 44, i32 45, i32 46, i32 47, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2277 = bitcast i64 %2257 to <4 x i16>
  %2278 = shufflevector <4 x i16> %2277, <4 x i16> undef, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2279 = shufflevector <32 x i16> %2276, <32 x i16> %2278, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 48, i32 49, i32 50, i32 51, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2280 = bitcast i64 %2258 to <4 x i16>
  %2281 = shufflevector <4 x i16> %2280, <4 x i16> undef, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2282 = shufflevector <32 x i16> %2279, <32 x i16> %2281, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 52, i32 53, i32 54, i32 55, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2283 = bitcast i64 %2264 to <4 x i16>
  %2284 = shufflevector <4 x i16> %2283, <4 x i16> undef, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %2285 = shufflevector <32 x i16> %2282, <32 x i16> %2284, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 56, i32 57, i32 58, i32 59, i32 undef, i32 undef, i32 undef, i32 undef>
  %2286 = bitcast i64 %2265 to <4 x i16>
  %2287 = shufflevector <4 x i16> %2286, <4 x i16> undef, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %2288 = shufflevector <32 x i16> %2285, <32 x i16> %2287, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 60, i32 61, i32 62, i32 63>
  %2289 = zext <32 x i16> %2288 to <32 x i32>
  %2290 = sext i32 %225 to i64
  %2291 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2290
  %2292 = bitcast %union.Slot* %2291 to <32 x i32>*
  store <32 x i32> %2289, <32 x i32>* %2292, align 128
  br label %2316

2293:                                             ; preds = %220, %220
  %2294 = sext i32 %227 to i64
  %2295 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2294
  %2296 = bitcast %union.Slot* %2295 to <32 x i32>*
  %2297 = load <32 x i32>, <32 x i32>* %2296, align 128, !noalias !335
  %2298 = trunc <32 x i32> %2297 to <32 x i16>
  %2299 = shufflevector <32 x i16> %2298, <32 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2300 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %2299) #13
  %2301 = shufflevector <32 x i16> %2298, <32 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2302 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %2301) #13
  %2303 = shufflevector <32 x i16> %2298, <32 x i16> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %2304 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %2303) #13
  %2305 = shufflevector <32 x i16> %2298, <32 x i16> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2306 = tail call <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16> %2305) #13
  %2307 = sext i32 %225 to i64
  %2308 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2307, i32 0
  %2309 = bitcast %"struct.skvx::Vec.51"* %2308 to <8 x float>*
  store <8 x float> %2300, <8 x float>* %2309, align 128
  %2310 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2307, i32 0, i32 0, i32 1
  %2311 = bitcast %"struct.skvx::Vec.53"* %2310 to <8 x float>*
  store <8 x float> %2302, <8 x float>* %2311, align 32
  %2312 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2307, i32 0, i32 1
  %2313 = bitcast %"struct.skvx::Vec.52"* %2312 to <8 x float>*
  store <8 x float> %2304, <8 x float>* %2313, align 64
  %2314 = getelementptr inbounds %union.Slot, %union.Slot* %27, i64 %2307, i32 0, i32 1, i32 1
  %2315 = bitcast %"struct.skvx::Vec.53"* %2314 to <8 x float>*
  store <8 x float> %2306, <8 x float>* %2315, align 32
  br label %2316

2316:                                             ; preds = %1464, %220, %220, %2293, %2236, %2208, %2199, %2190, %2163, %2136, %2083, %2069, %2056, %2043, %2030, %2016, %2002, %1988, %1974, %1960, %1946, %1935, %1924, %1913, %1900, %1887, %1874, %1743, %1694, %1645, %1592, %1578, %1564, %1551, %1538, %1525, %1512, %1500, %1481, %1477, %1148, %1085, %787, %489, %463, %436, %409, %394, %387, %377, %367, %354, %344, %334, %325, %308, %301, %291, %281, %265, %256, %247, %239
  %2317 = add nsw i64 %221, 1
  %2318 = trunc i64 %2317 to i32
  %2319 = icmp eq i32 %2318, %1
  br i1 %2319, label %126, label %220

2320:                                             ; preds = %218, %25
  %2321 = icmp eq i8* %26, null
  br i1 %2321, label %2323, label %2322

2322:                                             ; preds = %2320
  tail call void @_ZdaPv(i8* nonnull %26) #18
  br label %2323

2323:                                             ; preds = %2320, %2322
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %12) #13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #8

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #8

; Function Attrs: nounwind readonly
declare <8 x i32> @llvm.x86.avx2.gather.d.d.256(<8 x i32>, i8*, <8 x i32>, <8 x i32>, i8 immarg) #9

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmadd.ub.sw(<32 x i8>, <32 x i8>) #10

; Function Attrs: argmemonly nounwind readonly
declare <8 x i32> @llvm.x86.avx2.maskload.d.256(i8*, <8 x i32>) #11

; Function Attrs: argmemonly nounwind
declare void @llvm.x86.avx2.maskstore.d.256(i8*, <8 x i32>, <8 x i32>) #8

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #12

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16>, <16 x i16>) #10

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.max.ps.256(<8 x float>, <8 x float>) #10

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.min.ps.256(<8 x float>, <8 x float>) #10

; Function Attrs: nounwind
declare void @llvm.assume(i1) #13

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #10

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32>, <4 x i32>) #10

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float>) #10

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.vcvtph2ps.256(<8 x i16>) #10

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float>, i32 immarg) #10

; Function Attrs: nounwind readonly
declare <4 x i64> @llvm.x86.avx2.gather.d.q.256(<4 x i64>, i8*, <4 x i32>, <4 x i64>, i8 immarg) #9

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #10

; Function Attrs: nounwind readonly
declare <8 x float> @llvm.x86.avx2.gather.d.ps.256(<8 x float>, i8*, <8 x i32>, <8 x float>, i8 immarg) #9

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.round.ps.256(<8 x float>, i32 immarg) #10

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #12

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.rcp.ps.256(<8 x float>) #10

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.sqrt.v8f32(<8 x float>) #12

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #14

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx2.permps(<8 x float>, <8 x i32>) #10

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32>, <8 x i32>) #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #15

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #16

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #17

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.pblendvb(<32 x i8>, <32 x i8>, <32 x i8>) #10

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #8

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.ceil.v8f32(<8 x float>) #12

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.floor.v8f32(<8 x float>) #12

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="2048" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nounwind }
attributes #9 = { nounwind readonly }
attributes #10 = { nounwind readnone }
attributes #11 = { argmemonly nounwind readonly }
attributes #12 = { nounwind readnone speculatable }
attributes #13 = { nounwind }
attributes #14 = { cold noreturn nounwind }
attributes #15 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11, !13}
!11 = distinct !{!11, !12, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_: argument 0"}
!12 = distinct !{!12, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_"}
!13 = distinct !{!13, !14, !"_ZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_: argument 0"}
!14 = distinct !{!14, !"_ZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_"}
!15 = !{!16, !13}
!16 = distinct !{!16, !17, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_: argument 0"}
!17 = distinct !{!17, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_"}
!18 = !{!19, !13}
!19 = distinct !{!19, !20, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_: argument 0"}
!20 = distinct !{!20, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_"}
!21 = !{!22, !13}
!22 = distinct !{!22, !23, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_: argument 0"}
!23 = distinct !{!23, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_"}
!24 = !{!13}
!25 = !{!26, !28}
!26 = distinct !{!26, !27, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_: argument 0"}
!27 = distinct !{!27, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_"}
!28 = distinct !{!28, !29, !"_ZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_: argument 0"}
!29 = distinct !{!29, !"_ZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_"}
!30 = !{!31, !28}
!31 = distinct !{!31, !32, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_: argument 0"}
!32 = distinct !{!32, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_"}
!33 = !{!34, !28}
!34 = distinct !{!34, !35, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_: argument 0"}
!35 = distinct !{!35, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_"}
!36 = !{!37, !28}
!37 = distinct !{!37, !38, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_: argument 0"}
!38 = distinct !{!38, !"_ZZZN3hsw23S32_alpha_D32_filter_DXERK17SkBitmapProcStatePKjiPjENKUlN4skvx3VecILi8EjEEE_clES8_ENKUlS4_S8_E_clES4_S8_"}
!39 = !{!28}
!40 = distinct !{!40, !41}
!41 = !{!"llvm.loop.unroll.disable"}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = distinct !{!47, !8}
!48 = distinct !{!48, !8}
!49 = !{!50}
!50 = distinct !{!50, !51}
!51 = distinct !{!51, !"LVerDomain"}
!52 = !{!53}
!53 = distinct !{!53, !51}
!54 = distinct !{!54, !8}
!55 = distinct !{!55, !8}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !8}
!62 = distinct !{!62, !8}
!63 = !{!64}
!64 = distinct !{!64, !65}
!65 = distinct !{!65, !"LVerDomain"}
!66 = !{!67}
!67 = distinct !{!67, !65}
!68 = distinct !{!68, !8}
!69 = distinct !{!69, !8}
!70 = !{!71}
!71 = distinct !{!71, !72}
!72 = distinct !{!72, !"LVerDomain"}
!73 = !{!74}
!74 = distinct !{!74, !72}
!75 = distinct !{!75, !8}
!76 = distinct !{!76, !8}
!77 = !{!78}
!78 = distinct !{!78, !79}
!79 = distinct !{!79, !"LVerDomain"}
!80 = !{!81}
!81 = distinct !{!81, !79}
!82 = distinct !{!82, !8}
!83 = distinct !{!83, !8}
!84 = !{!85}
!85 = distinct !{!85, !86}
!86 = distinct !{!86, !"LVerDomain"}
!87 = !{!88}
!88 = distinct !{!88, !86}
!89 = distinct !{!89, !8}
!90 = distinct !{!90, !8}
!91 = !{!92}
!92 = distinct !{!92, !93}
!93 = distinct !{!93, !"LVerDomain"}
!94 = !{!95}
!95 = distinct !{!95, !93}
!96 = distinct !{!96, !8}
!97 = distinct !{!97, !8}
!98 = !{i32 6963059}
!99 = !{!"branch_weights", i32 1, i32 16000, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1}
!100 = !{!"branch_weights", i32 2000, i32 1}
!101 = !{!"branch_weights", i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1}
!102 = !{i8 0, i8 2}
!103 = !{!104}
!104 = distinct !{!104, !105}
!105 = distinct !{!105, !"LVerDomain"}
!106 = !{!107}
!107 = distinct !{!107, !105}
!108 = distinct !{!108, !8}
!109 = distinct !{!109, !8}
!110 = !{!111}
!111 = distinct !{!111, !112, !"_ZN4skvxL4castIhLi32EiEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!112 = distinct !{!112, !"_ZN4skvxL4castIhLi32EiEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!113 = !{!114}
!114 = distinct !{!114, !115, !"_ZN4skvxL4castItLi32EiEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!115 = distinct !{!115, !"_ZN4skvxL4castItLi32EiEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!116 = !{!117}
!117 = distinct !{!117, !118, !"_ZN4skvxL4castImLi32EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!118 = distinct !{!118, !"_ZN4skvxL4castImLi32EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!119 = !{!120}
!120 = distinct !{!120, !121, !"_ZN4skvxL4castImLi32EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!121 = distinct !{!121, !"_ZN4skvxL4castImLi32EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!122 = !{!123, !125}
!123 = distinct !{!123, !124, !"_ZN4skvxL3mapIRZN3hsw14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE0_JNS_3VecILi32EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENSC_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!124 = distinct !{!124, !"_ZN4skvxL3mapIRZN3hsw14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE0_JNS_3VecILi32EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENSC_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!125 = distinct !{!125, !126, !"_ZN4skvx3mapIZN3hsw14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE0_Li32EiJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!126 = distinct !{!126, !"_ZN4skvx3mapIZN3hsw14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE0_Li32EiJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!127 = !{!128, !130}
!128 = distinct !{!128, !129, !"_ZN4skvxL3mapIRZN3hsw14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE1_JNS_3VecILi32EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENSC_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!129 = distinct !{!129, !"_ZN4skvxL3mapIRZN3hsw14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE1_JNS_3VecILi32EiEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENSC_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!130 = distinct !{!130, !131, !"_ZN4skvx3mapIZN3hsw14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE1_Li32EiJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!131 = distinct !{!131, !"_ZN4skvx3mapIZN3hsw14interpret_skvmEPKN4skvm22InterpreterInstructionEiiiPKiiiPPvEUliE1_Li32EiJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!132 = !{!133, !135, !137}
!133 = distinct !{!133, !134, !"_ZL8gather32ILi8EEN4skvx3VecIXT_EiEEPKiRKS2_: argument 0"}
!134 = distinct !{!134, !"_ZL8gather32ILi8EEN4skvx3VecIXT_EiEEPKiRKS2_"}
!135 = distinct !{!135, !136, !"_ZL8gather32ILi16EEN4skvx3VecIXT_EiEEPKiRKS2_: argument 0"}
!136 = distinct !{!136, !"_ZL8gather32ILi16EEN4skvx3VecIXT_EiEEPKiRKS2_"}
!137 = distinct !{!137, !138, !"_ZL8gather32ILi32EEN4skvx3VecIXT_EiEEPKiRKS2_: argument 0"}
!138 = distinct !{!138, !"_ZL8gather32ILi32EEN4skvx3VecIXT_EiEEPKiRKS2_"}
!139 = !{!140, !135, !137}
!140 = distinct !{!140, !141, !"_ZL8gather32ILi8EEN4skvx3VecIXT_EiEEPKiRKS2_: argument 0"}
!141 = distinct !{!141, !"_ZL8gather32ILi8EEN4skvx3VecIXT_EiEEPKiRKS2_"}
!142 = !{!143, !145, !137}
!143 = distinct !{!143, !144, !"_ZL8gather32ILi8EEN4skvx3VecIXT_EiEEPKiRKS2_: argument 0"}
!144 = distinct !{!144, !"_ZL8gather32ILi8EEN4skvx3VecIXT_EiEEPKiRKS2_"}
!145 = distinct !{!145, !146, !"_ZL8gather32ILi16EEN4skvx3VecIXT_EiEEPKiRKS2_: argument 0"}
!146 = distinct !{!146, !"_ZL8gather32ILi16EEN4skvx3VecIXT_EiEEPKiRKS2_"}
!147 = !{!148, !145, !137}
!148 = distinct !{!148, !149, !"_ZL8gather32ILi8EEN4skvx3VecIXT_EiEEPKiRKS2_: argument 0"}
!149 = distinct !{!149, !"_ZL8gather32ILi8EEN4skvx3VecIXT_EiEEPKiRKS2_"}
!150 = !{!151}
!151 = distinct !{!151, !152, !"_ZN4skvxL4castImLi32EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!152 = distinct !{!152, !"_ZN4skvxL4castImLi32EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!153 = !{!154}
!154 = distinct !{!154, !155, !"_ZN4skvxL4castImLi32EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!155 = distinct !{!155, !"_ZN4skvxL4castImLi32EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!156 = !{!157}
!157 = distinct !{!157, !158, !"_ZN4skvxorILi32EmEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!158 = distinct !{!158, !"_ZN4skvxorILi32EmEENS_3VecIXT_ET0_EERKS3_S5_"}
!159 = !{!160}
!160 = distinct !{!160, !161, !"_ZN4skvxL4castImLi32EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!161 = distinct !{!161, !"_ZN4skvxL4castImLi32EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!162 = !{!163}
!163 = distinct !{!163, !164, !"_ZN4skvxL4castImLi32EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!164 = distinct !{!164, !"_ZN4skvxL4castImLi32EjEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!165 = !{!166}
!166 = distinct !{!166, !167, !"_ZN4skvxorILi32EmEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!167 = distinct !{!167, !"_ZN4skvxorILi32EmEENS_3VecIXT_ET0_EERKS3_S5_"}
!168 = !{!169}
!169 = distinct !{!169, !170, !"_ZN4skvxplILi32EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!170 = distinct !{!170, !"_ZN4skvxplILi32EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!171 = !{!172}
!172 = distinct !{!172, !173, !"_ZN4skvxmiILi32EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!173 = distinct !{!173, !"_ZN4skvxmiILi32EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!174 = !{!175}
!175 = distinct !{!175, !176, !"_ZN4skvxmlILi32EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!176 = distinct !{!176, !"_ZN4skvxmlILi32EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!177 = !{!178}
!178 = distinct !{!178, !179, !"_ZN4skvxdvILi32EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!179 = distinct !{!179, !"_ZN4skvxdvILi32EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!180 = !{!181}
!181 = distinct !{!181, !182, !"_ZN4skvxL3minILi32EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!182 = distinct !{!182, !"_ZN4skvxL3minILi32EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!183 = !{!184}
!184 = distinct !{!184, !185, !"_ZN4skvxL3maxILi32EfEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!185 = distinct !{!185, !"_ZN4skvxL3maxILi32EfEENS_3VecIXT_ET0_EERKS3_S5_"}
!186 = !{!187, !189, !191}
!187 = distinct !{!187, !188, !"_ZN4skvxL3mapIRZNS_L3fmaILi32EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi32EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!188 = distinct !{!188, !"_ZN4skvxL3mapIRZNS_L3fmaILi32EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi32EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!189 = distinct !{!189, !190, !"_ZN4skvx3mapIRZNS_L3fmaILi32EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li32EfJNS2_ILi32EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_: argument 0"}
!190 = distinct !{!190, !"_ZN4skvx3mapIRZNS_L3fmaILi32EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li32EfJNS2_ILi32EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_"}
!191 = distinct !{!191, !192, !"_ZN4skvxL3fmaILi32EEENS_3VecIXT_EfEERKS2_S4_S4_: argument 0"}
!192 = distinct !{!192, !"_ZN4skvxL3fmaILi32EEENS_3VecIXT_EfEERKS2_S4_S4_"}
!193 = !{!194}
!194 = distinct !{!194, !195, !"_ZN4skvxngILi32EfEENS_3VecIXT_ET0_EERKS3_: argument 0"}
!195 = distinct !{!195, !"_ZN4skvxngILi32EfEENS_3VecIXT_ET0_EERKS3_"}
!196 = !{!197, !199, !201}
!197 = distinct !{!197, !198, !"_ZN4skvxL3mapIRZNS_L3fmaILi32EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi32EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!198 = distinct !{!198, !"_ZN4skvxL3mapIRZNS_L3fmaILi32EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi32EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!199 = distinct !{!199, !200, !"_ZN4skvx3mapIRZNS_L3fmaILi32EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li32EfJNS2_ILi32EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_: argument 0"}
!200 = distinct !{!200, !"_ZN4skvx3mapIRZNS_L3fmaILi32EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li32EfJNS2_ILi32EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_"}
!201 = distinct !{!201, !202, !"_ZN4skvxL3fmaILi32EEENS_3VecIXT_EfEERKS2_S4_S4_: argument 0"}
!202 = distinct !{!202, !"_ZN4skvxL3fmaILi32EEENS_3VecIXT_EfEERKS2_S4_S4_"}
!203 = !{!204}
!204 = distinct !{!204, !205, !"_ZN4skvxngILi32EfEENS_3VecIXT_ET0_EERKS3_: argument 0"}
!205 = distinct !{!205, !"_ZN4skvxngILi32EfEENS_3VecIXT_ET0_EERKS3_"}
!206 = !{!207, !209, !211}
!207 = distinct !{!207, !208, !"_ZN4skvxL3mapIRZNS_L3fmaILi32EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi32EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!208 = distinct !{!208, !"_ZN4skvxL3mapIRZNS_L3fmaILi32EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_JNS2_ILi32EfEES8_S8_EJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENS2_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!209 = distinct !{!209, !210, !"_ZN4skvx3mapIRZNS_L3fmaILi32EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li32EfJNS2_ILi32EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_: argument 0"}
!210 = distinct !{!210, !"_ZN4skvx3mapIRZNS_L3fmaILi32EEENS_3VecIXT_EfEERKS3_S5_S5_EUlfffE_Li32EfJNS2_ILi32EfEES8_EEEDaOT_RKNS2_IXT0_ET1_EEDpRKT2_"}
!211 = distinct !{!211, !212, !"_ZN4skvxL3fmaILi32EEENS_3VecIXT_EfEERKS2_S4_S4_: argument 0"}
!212 = distinct !{!212, !"_ZN4skvxL3fmaILi32EEENS_3VecIXT_EfEERKS2_S4_S4_"}
!213 = !{!214, !216, !218}
!214 = distinct !{!214, !215, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi32EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!215 = distinct !{!215, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi32EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!216 = distinct !{!216, !217, !"_ZN4skvx3mapIRDoFffELi32EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!217 = distinct !{!217, !"_ZN4skvx3mapIRDoFffELi32EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!218 = distinct !{!218, !219, !"_ZN4skvxL4sqrtILi32EEENS_3VecIXT_EfEERKS2_: argument 0"}
!219 = distinct !{!219, !"_ZN4skvxL4sqrtILi32EEENS_3VecIXT_EfEERKS2_"}
!220 = !{!221}
!221 = distinct !{!221, !222, !"_ZN4skvxplILi32EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!222 = distinct !{!222, !"_ZN4skvxplILi32EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!223 = !{!224}
!224 = distinct !{!224, !225, !"_ZN4skvxmiILi32EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!225 = distinct !{!225, !"_ZN4skvxmiILi32EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!226 = !{!227}
!227 = distinct !{!227, !228, !"_ZN4skvxmlILi32EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!228 = distinct !{!228, !"_ZN4skvxmlILi32EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!229 = !{!230}
!230 = distinct !{!230, !231, !"_ZN4skvxlsILi32EiEENS_3VecIXT_ET0_EERKS3_i: argument 0"}
!231 = distinct !{!231, !"_ZN4skvxlsILi32EiEENS_3VecIXT_ET0_EERKS3_i"}
!232 = !{!233}
!233 = distinct !{!233, !234, !"_ZN4skvxrsILi32EiEENS_3VecIXT_ET0_EERKS3_i: argument 0"}
!234 = distinct !{!234, !"_ZN4skvxrsILi32EiEENS_3VecIXT_ET0_EERKS3_i"}
!235 = !{!236}
!236 = distinct !{!236, !237, !"_ZN4skvxrsILi32EjEENS_3VecIXT_ET0_EERKS3_i: argument 0"}
!237 = distinct !{!237, !"_ZN4skvxrsILi32EjEENS_3VecIXT_ET0_EERKS3_i"}
!238 = !{!239}
!239 = distinct !{!239, !240, !"_ZN4skvxeqILi32EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!240 = distinct !{!240, !"_ZN4skvxeqILi32EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!241 = !{!242}
!242 = distinct !{!242, !243, !"_ZN4skvxneILi32EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!243 = distinct !{!243, !"_ZN4skvxneILi32EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!244 = !{!245}
!245 = distinct !{!245, !246, !"_ZN4skvxgtILi32EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!246 = distinct !{!246, !"_ZN4skvxgtILi32EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!247 = !{!248}
!248 = distinct !{!248, !249, !"_ZN4skvxgeILi32EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!249 = distinct !{!249, !"_ZN4skvxgeILi32EfEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!250 = !{!251}
!251 = distinct !{!251, !252, !"_ZN4skvxeqILi32EiEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!252 = distinct !{!252, !"_ZN4skvxeqILi32EiEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!253 = !{!254}
!254 = distinct !{!254, !255, !"_ZN4skvxgtILi32EiEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_: argument 0"}
!255 = distinct !{!255, !"_ZN4skvxgtILi32EiEENS_3VecIXT_ENS_4MaskIT0_E4typeEEERKNS1_IXT_ES3_EES9_"}
!256 = !{!257}
!257 = distinct !{!257, !258, !"_ZN4skvxanILi32EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!258 = distinct !{!258, !"_ZN4skvxanILi32EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!259 = !{!260}
!260 = distinct !{!260, !261, !"_ZN4skvxorILi32EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!261 = distinct !{!261, !"_ZN4skvxorILi32EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!262 = !{!263}
!263 = distinct !{!263, !264, !"_ZN4skvxeoILi32EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!264 = distinct !{!264, !"_ZN4skvxeoILi32EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!265 = !{!266}
!266 = distinct !{!266, !267, !"_ZN4skvxcoILi32EiEENS_3VecIXT_ET0_EERKS3_: argument 0"}
!267 = distinct !{!267, !"_ZN4skvxcoILi32EiEENS_3VecIXT_ET0_EERKS3_"}
!268 = !{!269}
!269 = distinct !{!269, !270, !"_ZN4skvxanILi32EiEENS_3VecIXT_ET0_EERKS3_S5_: argument 0"}
!270 = distinct !{!270, !"_ZN4skvxanILi32EiEENS_3VecIXT_ET0_EERKS3_S5_"}
!271 = !{!272, !274, !276}
!272 = distinct !{!272, !273, !"_ZN4skvxL12if_then_elseILi8EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_: argument 0"}
!273 = distinct !{!273, !"_ZN4skvxL12if_then_elseILi8EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_"}
!274 = distinct !{!274, !275, !"_ZN4skvxL12if_then_elseILi16EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_: argument 0"}
!275 = distinct !{!275, !"_ZN4skvxL12if_then_elseILi16EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_"}
!276 = distinct !{!276, !277, !"_ZN4skvxL12if_then_elseILi32EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_: argument 0"}
!277 = distinct !{!277, !"_ZN4skvxL12if_then_elseILi32EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_"}
!278 = !{!279, !274, !276}
!279 = distinct !{!279, !280, !"_ZN4skvxL12if_then_elseILi8EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_: argument 0"}
!280 = distinct !{!280, !"_ZN4skvxL12if_then_elseILi8EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_"}
!281 = !{!282, !284, !276}
!282 = distinct !{!282, !283, !"_ZN4skvxL12if_then_elseILi8EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_: argument 0"}
!283 = distinct !{!283, !"_ZN4skvxL12if_then_elseILi8EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_"}
!284 = distinct !{!284, !285, !"_ZN4skvxL12if_then_elseILi16EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_: argument 0"}
!285 = distinct !{!285, !"_ZN4skvxL12if_then_elseILi16EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_"}
!286 = !{!287, !284, !276}
!287 = distinct !{!287, !288, !"_ZN4skvxL12if_then_elseILi8EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_: argument 0"}
!288 = distinct !{!288, !"_ZN4skvxL12if_then_elseILi8EiEENS_3VecIXT_ET0_EERKNS1_IXT_ENS_4MaskIS2_E4typeEEERKS3_SB_"}
!289 = !{!290, !292, !294}
!290 = distinct !{!290, !291, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi32EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!291 = distinct !{!291, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi32EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!292 = distinct !{!292, !293, !"_ZN4skvx3mapIRDoFffELi32EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!293 = distinct !{!293, !"_ZN4skvx3mapIRDoFffELi32EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!294 = distinct !{!294, !295, !"_ZN4skvxL4ceilILi32EEENS_3VecIXT_EfEERKS2_: argument 0"}
!295 = distinct !{!295, !"_ZN4skvxL4ceilILi32EEENS_3VecIXT_EfEERKS2_"}
!296 = !{!297, !299, !301}
!297 = distinct !{!297, !298, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi32EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_: argument 0"}
!298 = distinct !{!298, !"_ZN4skvxL3mapIRDoFffEJNS_3VecILi32EfEEEJLm0ELm1ELm2ELm3ELm4ELm5ELm6ELm7ELm8ELm9ELm10ELm11ELm12ELm13ELm14ELm15ELm16ELm17ELm18ELm19ELm20ELm21ELm22ELm23ELm24ELm25ELm26ELm27ELm28ELm29ELm30ELm31EEEENS3_IXsZT1_EDTclfp0_spixfp1_Li0EEEEENSt3__116integer_sequenceImJXspT1_EEEEOT_DpRKT0_"}
!299 = distinct !{!299, !300, !"_ZN4skvx3mapIRDoFffELi32EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_: argument 0"}
!300 = distinct !{!300, !"_ZN4skvx3mapIRDoFffELi32EfJEEEDaOT_RKNS_3VecIXT0_ET1_EEDpRKT2_"}
!301 = distinct !{!301, !302, !"_ZN4skvxL5floorILi32EEENS_3VecIXT_EfEERKS2_: argument 0"}
!302 = distinct !{!302, !"_ZN4skvxL5floorILi32EEENS_3VecIXT_EfEERKS2_"}
!303 = !{!304}
!304 = distinct !{!304, !305, !"_ZN4skvxL4castIfLi32EiEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!305 = distinct !{!305, !"_ZN4skvxL4castIfLi32EiEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!306 = !{!307}
!307 = distinct !{!307, !308, !"_ZN4skvxL4castIiLi32EfEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!308 = distinct !{!308, !"_ZN4skvxL4castIiLi32EfEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
!309 = !{!310, !312, !314}
!310 = distinct !{!310, !311, !"_ZN4skvxL5lrintILi8EEENS_3VecIXT_EiEERKNS1_IXT_EfEE: argument 0"}
!311 = distinct !{!311, !"_ZN4skvxL5lrintILi8EEENS_3VecIXT_EiEERKNS1_IXT_EfEE"}
!312 = distinct !{!312, !313, !"_ZN4skvxL5lrintILi16EEENS_3VecIXT_EiEERKNS1_IXT_EfEE: argument 0"}
!313 = distinct !{!313, !"_ZN4skvxL5lrintILi16EEENS_3VecIXT_EiEERKNS1_IXT_EfEE"}
!314 = distinct !{!314, !315, !"_ZN4skvxL5lrintILi32EEENS_3VecIXT_EiEERKNS1_IXT_EfEE: argument 0"}
!315 = distinct !{!315, !"_ZN4skvxL5lrintILi32EEENS_3VecIXT_EiEERKNS1_IXT_EfEE"}
!316 = !{!317, !312, !314}
!317 = distinct !{!317, !318, !"_ZN4skvxL5lrintILi8EEENS_3VecIXT_EiEERKNS1_IXT_EfEE: argument 0"}
!318 = distinct !{!318, !"_ZN4skvxL5lrintILi8EEENS_3VecIXT_EiEERKNS1_IXT_EfEE"}
!319 = !{!320, !322, !314}
!320 = distinct !{!320, !321, !"_ZN4skvxL5lrintILi8EEENS_3VecIXT_EiEERKNS1_IXT_EfEE: argument 0"}
!321 = distinct !{!321, !"_ZN4skvxL5lrintILi8EEENS_3VecIXT_EiEERKNS1_IXT_EfEE"}
!322 = distinct !{!322, !323, !"_ZN4skvxL5lrintILi16EEENS_3VecIXT_EiEERKNS1_IXT_EfEE: argument 0"}
!323 = distinct !{!323, !"_ZN4skvxL5lrintILi16EEENS_3VecIXT_EiEERKNS1_IXT_EfEE"}
!324 = !{!325, !322, !314}
!325 = distinct !{!325, !326, !"_ZN4skvxL5lrintILi8EEENS_3VecIXT_EiEERKNS1_IXT_EfEE: argument 0"}
!326 = distinct !{!326, !"_ZN4skvxL5lrintILi8EEENS_3VecIXT_EiEERKNS1_IXT_EfEE"}
!327 = !{!328, !330}
!328 = distinct !{!328, !329, !"_ZN4skvxL7to_halfILi16EEENS_3VecIXT_EtEERKNS1_IXT_EfEE: argument 0"}
!329 = distinct !{!329, !"_ZN4skvxL7to_halfILi16EEENS_3VecIXT_EtEERKNS1_IXT_EfEE"}
!330 = distinct !{!330, !331, !"_ZN4skvxL7to_halfILi32EEENS_3VecIXT_EtEERKNS1_IXT_EfEE: argument 0"}
!331 = distinct !{!331, !"_ZN4skvxL7to_halfILi32EEENS_3VecIXT_EtEERKNS1_IXT_EfEE"}
!332 = !{!333, !330}
!333 = distinct !{!333, !334, !"_ZN4skvxL7to_halfILi16EEENS_3VecIXT_EtEERKNS1_IXT_EfEE: argument 0"}
!334 = distinct !{!334, !"_ZN4skvxL7to_halfILi16EEENS_3VecIXT_EtEERKNS1_IXT_EfEE"}
!335 = !{!336}
!336 = distinct !{!336, !337, !"_ZN4skvxL4castItLi32EiEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE: argument 0"}
!337 = distinct !{!337, !"_ZN4skvxL4castItLi32EiEENS_3VecIXT0_ET_EERKNS1_IXT0_ET1_EE"}
