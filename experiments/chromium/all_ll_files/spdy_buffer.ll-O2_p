; ModuleID = '../../net/spdy/spdy_buffer.cc'
source_filename = "../../net/spdy/spdy_buffer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::SpdyBuffer" = type { %class.scoped_refptr, %"class.std::__1::vector", i64 }
%class.scoped_refptr = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type { %"class.base::RefCountedThreadSafe", %"class.std::__1::unique_ptr" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.spdy::SpdySerializedFrame"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"*, %"class.std::__1::__compressed_pair.4" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.2 }
%class.scoped_refptr.2 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.3", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.3" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.base::RepeatingCallback"* }
%"class.spdy::SpdySerializedFrame" = type <{ i8*, i64, i8, [7 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.net::IOBuffer" = type { i32 (...)**, %"class.base::RefCountedThreadSafe.13", i8* }
%"class.base::RefCountedThreadSafe.13" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.net::SpdyBuffer::SharedFrameIOBuffer" = type { %"class.net::IOBuffer", %class.scoped_refptr }

$_ZNSt3__16vectorIN4base17RepeatingCallbackIFvmN3net10SpdyBuffer13ConsumeSourceEEEENS_9allocatorIS7_EEE21__push_back_slow_pathIRKS7_EEvOT_ = comdat any

$_ZN3net10SpdyBuffer19SharedFrameIOBufferD2Ev = comdat any

$_ZN3net10SpdyBuffer19SharedFrameIOBufferD0Ev = comdat any

$_ZTVN3net10SpdyBuffer19SharedFrameIOBufferE = comdat any

@.str = private unnamed_addr constant [10 x i8] c"size > 0u\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"../../net/spdy/spdy_buffer.cc\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"size <= kMaxSpdyFrameSize\00", align 1
@_ZTVN3net10SpdyBuffer19SharedFrameIOBufferE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::SpdyBuffer::SharedFrameIOBuffer"*)* @_ZN3net10SpdyBuffer19SharedFrameIOBufferD2Ev to i8*), i8* bitcast (void (%"class.net::SpdyBuffer::SharedFrameIOBuffer"*)* @_ZN3net10SpdyBuffer19SharedFrameIOBufferD0Ev to i8*)] }, comdat, align 8

@_ZN3net10SpdyBufferC1ENSt3__110unique_ptrIN4spdy19SpdySerializedFrameENS1_14default_deleteIS4_EEEE = hidden unnamed_addr alias void (%"class.net::SpdyBuffer"*, %"class.spdy::SpdySerializedFrame"*), void (%"class.net::SpdyBuffer"*, %"class.spdy::SpdySerializedFrame"*)* @_ZN3net10SpdyBufferC2ENSt3__110unique_ptrIN4spdy19SpdySerializedFrameENS1_14default_deleteIS4_EEEE
@_ZN3net10SpdyBufferC1EPKcm = hidden unnamed_addr alias void (%"class.net::SpdyBuffer"*, i8*, i64), void (%"class.net::SpdyBuffer"*, i8*, i64)* @_ZN3net10SpdyBufferC2EPKcm
@_ZN3net10SpdyBufferD1Ev = hidden unnamed_addr alias void (%"class.net::SpdyBuffer"*), void (%"class.net::SpdyBuffer"*)* @_ZN3net10SpdyBufferD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net10SpdyBufferC2ENSt3__110unique_ptrIN4spdy19SpdySerializedFrameENS1_14default_deleteIS4_EEEE(%"class.net::SpdyBuffer"* nocapture, %"class.spdy::SpdySerializedFrame"*) unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.spdy::SpdySerializedFrame"* %1 to i64
  %4 = tail call i8* @_Znwm(i64 16) #10
  %5 = bitcast i8* %4 to i32*
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds i8, i8* %4, i64 8
  %7 = bitcast i8* %6 to i64*
  store i64 %3, i64* %7, align 8
  %8 = bitcast %"class.net::SpdyBuffer"* %0 to i8**
  store i8* %4, i8** %8, align 8
  %9 = atomicrmw add i32* %5, i32 1 monotonic
  %10 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 1
  %11 = bitcast %"class.std::__1::vector"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net10SpdyBufferC2EPKcm(%"class.net::SpdyBuffer"* nocapture, i8* nocapture readonly, i64) unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = alloca %"class.logging::CheckOpResult", align 8
  %11 = alloca %"class.logging::CheckOpResult", align 8
  %12 = alloca %"class.logging::CheckOpResult", align 8
  %13 = alloca %"class.logging::CheckError", align 8
  %14 = alloca %"class.logging::CheckOpResult", align 8
  %15 = alloca %"class.logging::CheckError", align 8
  %16 = tail call i8* @_Znwm(i64 16) #10
  %17 = bitcast i8* %16 to i32*
  store i32 0, i32* %17, align 4
  %18 = getelementptr inbounds i8, i8* %16, i64 8
  %19 = bitcast i8* %18 to i64*
  store i64 0, i64* %19, align 8
  %20 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 0, i32 0
  %21 = bitcast %"class.net::SpdyBuffer"* %0 to i8**
  store i8* %16, i8** %21, align 8
  %22 = atomicrmw add i32* %17, i32 1 monotonic
  %23 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 1
  %24 = bitcast %"class.logging::CheckOpResult"* %12 to i8*
  %25 = bitcast %"class.std::__1::vector"* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #11
  %26 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %12, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %26, align 8
  %27 = bitcast %"class.logging::CheckOpResult"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27)
  %28 = icmp eq i64 %2, 0
  br i1 %28, label %30, label %29

29:                                               ; preds = %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* null, i8** %26, align 8
  br label %39

30:                                               ; preds = %3
  %31 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #11
  %32 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8* %31, i8* %32) #11
  %33 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %11, i64 0, i32 0
  %34 = load i8*, i8** %33, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  store i8* %34, i8** %26, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %30
  %37 = bitcast %"class.logging::CheckError"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %13, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 70, %"class.logging::CheckOpResult"* nonnull %12) #11
  %38 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %13) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %13) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #11
  br label %39

39:                                               ; preds = %29, %30, %36
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #11
  %40 = bitcast %"class.logging::CheckOpResult"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #11
  %41 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %14, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %41, align 8
  %42 = bitcast %"class.logging::CheckOpResult"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42)
  %43 = icmp ugt i64 %2, 16777215
  br i1 %43, label %45, label %44

44:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* null, i8** %41, align 8
  br label %54

45:                                               ; preds = %39
  %46 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #11
  %47 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 16777215) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %10, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0), i8* %46, i8* %47) #11
  %48 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %10, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* %49, i8** %41, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %45
  %52 = bitcast %"class.logging::CheckError"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %15, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 71, %"class.logging::CheckOpResult"* nonnull %14) #11
  %53 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %15) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %15) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #11
  br label %54

54:                                               ; preds = %44, %45, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #11
  %55 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55) #11
  %56 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %56, align 8
  %57 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #11
  br i1 %28, label %59, label %58

58:                                               ; preds = %54
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #11
  store i8* null, i8** %56, align 8
  br label %68

59:                                               ; preds = %54
  %60 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #11
  %61 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8* %60, i8* %61) #11
  %62 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %63 = load i8*, i8** %62, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #11
  store i8* %63, i8** %56, align 8
  %64 = icmp eq i8* %63, null
  br i1 %64, label %68, label %65

65:                                               ; preds = %59
  %66 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 30, %"class.logging::CheckOpResult"* nonnull %6) #11
  %67 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #11
  br label %68

68:                                               ; preds = %65, %59, %58
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55) #11
  %69 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #11
  %70 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %70, align 8
  %71 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #11
  br i1 %43, label %73, label %72

72:                                               ; preds = %68
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #11
  store i8* null, i8** %70, align 8
  br label %82

73:                                               ; preds = %68
  %74 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #11
  %75 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 16777215) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0), i8* %74, i8* %75) #11
  %76 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %77 = load i8*, i8** %76, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #11
  store i8* %77, i8** %70, align 8
  %78 = icmp eq i8* %77, null
  br i1 %78, label %82, label %79

79:                                               ; preds = %73
  %80 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %80) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %8) #11
  %81 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %80) #11
  br label %82

82:                                               ; preds = %72, %73, %79
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #11
  %83 = call i8* @_Znam(i64 %2) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %83, i8* align 1 %1, i64 %2, i1 false) #11
  %84 = ptrtoint i8* %83 to i64
  %85 = call i8* @_Znwm(i64 24) #10
  %86 = bitcast i8* %85 to i64*
  store i64 %84, i64* %86, align 8
  %87 = getelementptr inbounds i8, i8* %85, i64 8
  %88 = bitcast i8* %87 to i64*
  store i64 %2, i64* %88, align 8
  %89 = getelementptr inbounds i8, i8* %85, i64 16
  store i8 1, i8* %89, align 8
  %90 = ptrtoint i8* %85 to i64
  %91 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %20, align 8
  %92 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %91, i64 0, i32 1
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = load %"class.spdy::SpdySerializedFrame"*, %"class.spdy::SpdySerializedFrame"** %93, align 8
  %95 = bitcast %"class.std::__1::unique_ptr"* %92 to i64*
  store i64 %90, i64* %95, align 8
  %96 = icmp eq %"class.spdy::SpdySerializedFrame"* %94, null
  br i1 %96, label %108, label %97

97:                                               ; preds = %82
  %98 = getelementptr inbounds %"class.spdy::SpdySerializedFrame", %"class.spdy::SpdySerializedFrame"* %94, i64 0, i32 2
  %99 = load i8, i8* %98, align 8, !range !2
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %106, label %101

101:                                              ; preds = %97
  %102 = getelementptr inbounds %"class.spdy::SpdySerializedFrame", %"class.spdy::SpdySerializedFrame"* %94, i64 0, i32 0
  %103 = load i8*, i8** %102, align 8
  %104 = icmp eq i8* %103, null
  br i1 %104, label %106, label %105

105:                                              ; preds = %101
  call void @_ZdaPv(i8* nonnull %103) #10
  br label %106

106:                                              ; preds = %105, %101, %97
  %107 = bitcast %"class.spdy::SpdySerializedFrame"* %94 to i8*
  call void @_ZdlPv(i8* %107) #10
  br label %108

108:                                              ; preds = %106, %82
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net10SpdyBufferD2Ev(%"class.net::SpdyBuffer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %2, align 8
  %4 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %3, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %"class.spdy::SpdySerializedFrame"*, %"class.spdy::SpdySerializedFrame"** %4, align 8
  %6 = getelementptr inbounds %"class.spdy::SpdySerializedFrame", %"class.spdy::SpdySerializedFrame"* %5, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %28, label %12

12:                                               ; preds = %1
  store i64 %7, i64* %8, align 8
  %13 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 1, i32 0, i32 0
  %14 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %13, align 8
  %15 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 1, i32 0, i32 1
  %16 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %15, align 8
  %17 = icmp eq %"class.base::RepeatingCallback"* %14, %16
  br i1 %17, label %28, label %18

18:                                               ; preds = %12, %18
  %19 = phi %"class.base::RepeatingCallback"* [ %25, %18 ], [ %14, %12 ]
  %20 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %19, i64 0, i32 0, i32 0, i32 0, i32 0
  %21 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %20, align 8
  %22 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %21, i64 0, i32 1
  %23 = bitcast void ()** %22 to void (%"class.base::internal::BindStateBase"*, i64, i32)**
  %24 = load void (%"class.base::internal::BindStateBase"*, i64, i32)*, void (%"class.base::internal::BindStateBase"*, i64, i32)** %23, align 8
  tail call void %24(%"class.base::internal::BindStateBase"* %21, i64 %10, i32 1) #11
  %25 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %19, i64 1
  %26 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %15, align 8
  %27 = icmp eq %"class.base::RepeatingCallback"* %25, %26
  br i1 %27, label %28, label %18

28:                                               ; preds = %18, %12, %1
  %29 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 1
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %29, i64 0, i32 0, i32 0
  %31 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %30, align 8
  %32 = icmp eq %"class.base::RepeatingCallback"* %31, null
  br i1 %32, label %48, label %33

33:                                               ; preds = %28
  %34 = bitcast %"class.base::RepeatingCallback"* %31 to i8*
  %35 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 1, i32 0, i32 1
  %36 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %35, align 8
  %37 = icmp eq %"class.base::RepeatingCallback"* %36, %31
  br i1 %37, label %46, label %38

38:                                               ; preds = %33, %38
  %39 = phi %"class.base::RepeatingCallback"* [ %40, %38 ], [ %36, %33 ]
  %40 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %39, i64 -1
  %41 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %40, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %41) #11
  %42 = icmp eq %"class.base::RepeatingCallback"* %40, %31
  br i1 %42, label %43, label %38

43:                                               ; preds = %38
  %44 = bitcast %"class.std::__1::vector"* %29 to i8**
  %45 = load i8*, i8** %44, align 8
  br label %46

46:                                               ; preds = %43, %33
  %47 = phi i8* [ %45, %43 ], [ %34, %33 ]
  store %"class.base::RepeatingCallback"* %31, %"class.base::RepeatingCallback"** %35, align 8
  tail call void @_ZdlPv(i8* %47) #10
  br label %48

48:                                               ; preds = %28, %46
  %49 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %2, align 8
  %50 = icmp eq %"class.base::RefCountedData"* %49, null
  br i1 %50, label %74, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %49, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = atomicrmw sub i32* %52, i32 1 acq_rel
  %54 = icmp eq i32 %53, 1
  br i1 %54, label %55, label %74

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %49, i64 0, i32 0
  %57 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %56, i64 2
  %58 = bitcast %"class.base::RefCountedThreadSafe"* %57 to %"class.spdy::SpdySerializedFrame"**
  %59 = load %"class.spdy::SpdySerializedFrame"*, %"class.spdy::SpdySerializedFrame"** %58, align 8
  store %"class.spdy::SpdySerializedFrame"* null, %"class.spdy::SpdySerializedFrame"** %58, align 8
  %60 = icmp eq %"class.spdy::SpdySerializedFrame"* %59, null
  br i1 %60, label %72, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.spdy::SpdySerializedFrame", %"class.spdy::SpdySerializedFrame"* %59, i64 0, i32 2
  %63 = load i8, i8* %62, align 8, !range !2
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %70, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %"class.spdy::SpdySerializedFrame", %"class.spdy::SpdySerializedFrame"* %59, i64 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = icmp eq i8* %67, null
  br i1 %68, label %70, label %69

69:                                               ; preds = %65
  tail call void @_ZdaPv(i8* nonnull %67) #10
  br label %70

70:                                               ; preds = %69, %65, %61
  %71 = bitcast %"class.spdy::SpdySerializedFrame"* %59 to i8*
  tail call void @_ZdlPv(i8* %71) #10
  br label %72

72:                                               ; preds = %70, %55
  %73 = bitcast %"class.base::RefCountedData"* %49 to i8*
  tail call void @_ZdlPv(i8* %73) #10
  br label %74

74:                                               ; preds = %48, %51, %72
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK3net10SpdyBuffer16GetRemainingSizeEv(%"class.net::SpdyBuffer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %2, align 8
  %4 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %3, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %"class.spdy::SpdySerializedFrame"*, %"class.spdy::SpdySerializedFrame"** %4, align 8
  %6 = getelementptr inbounds %"class.spdy::SpdySerializedFrame", %"class.spdy::SpdySerializedFrame"* %5, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  ret i64 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net10SpdyBuffer13ConsumeHelperEmNS0_13ConsumeSourceE(%"class.net::SpdyBuffer"* nocapture, i64, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, %1
  store i64 %6, i64* %4, align 8
  %7 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %7, align 8
  %9 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 1, i32 0, i32 1
  %10 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %9, align 8
  %11 = icmp eq %"class.base::RepeatingCallback"* %8, %10
  br i1 %11, label %12, label %13

12:                                               ; preds = %13, %3
  ret void

13:                                               ; preds = %3, %13
  %14 = phi %"class.base::RepeatingCallback"* [ %20, %13 ], [ %8, %3 ]
  %15 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %15, align 8
  %17 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %16, i64 0, i32 1
  %18 = bitcast void ()** %17 to void (%"class.base::internal::BindStateBase"*, i64, i32)**
  %19 = load void (%"class.base::internal::BindStateBase"*, i64, i32)*, void (%"class.base::internal::BindStateBase"*, i64, i32)** %18, align 8
  tail call void %19(%"class.base::internal::BindStateBase"* %16, i64 %1, i32 %2) #11
  %20 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %14, i64 1
  %21 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %9, align 8
  %22 = icmp eq %"class.base::RepeatingCallback"* %20, %21
  br i1 %22, label %12, label %13
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @_ZNK3net10SpdyBuffer16GetRemainingDataEv(%"class.net::SpdyBuffer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %2, align 8
  %4 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %3, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %"class.spdy::SpdySerializedFrame"*, %"class.spdy::SpdySerializedFrame"** %4, align 8
  %6 = getelementptr inbounds %"class.spdy::SpdySerializedFrame", %"class.spdy::SpdySerializedFrame"* %5, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds i8, i8* %7, i64 %9
  ret i8* %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net10SpdyBuffer18AddConsumeCallbackERKN4base17RepeatingCallbackIFvmNS0_13ConsumeSourceEEEE(%"class.net::SpdyBuffer"*, %"class.base::RepeatingCallback"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 1, i32 0, i32 1
  %4 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %3, align 8
  %5 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %6 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %5, align 8
  %7 = icmp eq %"class.base::RepeatingCallback"* %4, %6
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %4, i64 0, i32 0
  %10 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %1, i64 0, i32 0
  tail call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %9, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %10) #11
  %11 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %4, i64 1
  %12 = ptrtoint %"class.base::RepeatingCallback"* %11 to i64
  %13 = bitcast %"class.base::RepeatingCallback"** %3 to i64*
  store i64 %12, i64* %13, align 8
  br label %16

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 1
  tail call void @_ZNSt3__16vectorIN4base17RepeatingCallbackIFvmN3net10SpdyBuffer13ConsumeSourceEEEENS_9allocatorIS7_EEE21__push_back_slow_pathIRKS7_EEvOT_(%"class.std::__1::vector"* %15, %"class.base::RepeatingCallback"* dereferenceable(8) %1) #11
  br label %16

16:                                               ; preds = %8, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net10SpdyBuffer7ConsumeEm(%"class.net::SpdyBuffer"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, %1
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 1, i32 0, i32 0
  %7 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %6, align 8
  %8 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %8, align 8
  %10 = icmp eq %"class.base::RepeatingCallback"* %7, %9
  br i1 %10, label %21, label %11

11:                                               ; preds = %2, %11
  %12 = phi %"class.base::RepeatingCallback"* [ %18, %11 ], [ %7, %2 ]
  %13 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %12, i64 0, i32 0, i32 0, i32 0, i32 0
  %14 = load %"class.base::internal::BindStateBase"*, %"class.base::internal::BindStateBase"** %13, align 8
  %15 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %14, i64 0, i32 1
  %16 = bitcast void ()** %15 to void (%"class.base::internal::BindStateBase"*, i64, i32)**
  %17 = load void (%"class.base::internal::BindStateBase"*, i64, i32)*, void (%"class.base::internal::BindStateBase"*, i64, i32)** %16, align 8
  tail call void %17(%"class.base::internal::BindStateBase"* %14, i64 %1, i32 0) #11
  %18 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %12, i64 1
  %19 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %8, align 8
  %20 = icmp eq %"class.base::RepeatingCallback"* %18, %19
  br i1 %20, label %21, label %11

21:                                               ; preds = %11, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.net::IOBuffer"* @_ZN3net10SpdyBuffer27GetIOBufferForRemainingDataEv(%"class.net::SpdyBuffer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 2
  %3 = tail call i8* @_Znwm(i64 32) #10
  %4 = load i64, i64* %2, align 8
  %5 = bitcast i8* %3 to %"class.net::IOBuffer"*
  %6 = getelementptr inbounds %"class.net::SpdyBuffer", %"class.net::SpdyBuffer"* %0, i64 0, i32 0, i32 0
  %7 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %6, align 8
  %8 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %7, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %"class.spdy::SpdySerializedFrame"*, %"class.spdy::SpdySerializedFrame"** %8, align 8
  %10 = getelementptr inbounds %"class.spdy::SpdySerializedFrame", %"class.spdy::SpdySerializedFrame"* %9, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %4
  tail call void @_ZN3net8IOBufferC2EPc(%"class.net::IOBuffer"* nonnull %5, i8* %12) #11
  %13 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3net10SpdyBuffer19SharedFrameIOBufferE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  %14 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %6, align 8
  %15 = getelementptr inbounds i8, i8* %3, i64 24
  %16 = bitcast i8* %15 to %"class.base::RefCountedData"**
  store %"class.base::RefCountedData"* %14, %"class.base::RefCountedData"** %16, align 8
  %17 = icmp eq %"class.base::RefCountedData"* %14, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %1
  %19 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw add i32* %19, i32 1 monotonic
  br label %21

21:                                               ; preds = %18, %1
  %22 = getelementptr inbounds i8, i8* %3, i64 8
  %23 = bitcast i8* %22 to i32*
  %24 = atomicrmw add i32* %23, i32 1 monotonic
  ret %"class.net::IOBuffer"* %5
}

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN4base17RepeatingCallbackIFvmN3net10SpdyBuffer13ConsumeSourceEEEENS_9allocatorIS7_EEE21__push_back_slow_pathIRKS7_EEvOT_(%"class.std::__1::vector"*, %"class.base::RepeatingCallback"* dereferenceable(8)) local_unnamed_addr #7 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.base::RepeatingCallback"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.base::RepeatingCallback"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #12
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to %"class.base::RepeatingCallback"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.base::RepeatingCallback"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %36, i64 %9
  %38 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %36, i64 %35
  %39 = ptrtoint %"class.base::RepeatingCallback"* %38 to i64
  %40 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %37, i64 0, i32 0
  %41 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %1, i64 0, i32 0
  tail call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* %40, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %41) #11
  %42 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %37, i64 1
  %43 = ptrtoint %"class.base::RepeatingCallback"* %42 to i64
  %44 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %45 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %44, align 8
  %46 = ptrtoint %"class.base::RepeatingCallback"* %45 to i64
  %47 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %3, align 8
  %48 = icmp eq %"class.base::RepeatingCallback"* %47, %45
  br i1 %48, label %130, label %49

49:                                               ; preds = %34
  %50 = getelementptr %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %47, i64 -1, i32 0, i32 0, i32 0, i32 0
  %51 = ptrtoint %"class.base::internal::BindStateBase"** %50 to i64
  %52 = sub i64 %51, %46
  %53 = lshr i64 %52, 3
  %54 = add nuw nsw i64 %53, 1
  %55 = and i64 %54, 7
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %69, label %57

57:                                               ; preds = %49, %57
  %58 = phi %"class.base::RepeatingCallback"* [ %61, %57 ], [ %37, %49 ]
  %59 = phi %"class.base::RepeatingCallback"* [ %62, %57 ], [ %47, %49 ]
  %60 = phi i64 [ %67, %57 ], [ %55, %49 ]
  %61 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %58, i64 -1
  %62 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %59, i64 -1
  %63 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %62, i64 0, i32 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.base::RepeatingCallback"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"class.base::RepeatingCallback"* %61 to i64*
  store i64 %65, i64* %66, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %63, align 8
  %67 = add i64 %60, -1
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %57, !llvm.loop !3

69:                                               ; preds = %57, %49
  %70 = phi %"class.base::RepeatingCallback"* [ undef, %49 ], [ %61, %57 ]
  %71 = phi %"class.base::RepeatingCallback"* [ %37, %49 ], [ %61, %57 ]
  %72 = phi %"class.base::RepeatingCallback"* [ %47, %49 ], [ %62, %57 ]
  %73 = icmp ult i64 %52, 56
  br i1 %73, label %126, label %74

74:                                               ; preds = %69, %74
  %75 = phi %"class.base::RepeatingCallback"* [ %119, %74 ], [ %71, %69 ]
  %76 = phi %"class.base::RepeatingCallback"* [ %120, %74 ], [ %72, %69 ]
  %77 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %75, i64 -1
  %78 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %76, i64 -1
  %79 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %78, i64 0, i32 0, i32 0, i32 0, i32 0
  %80 = bitcast %"class.base::RepeatingCallback"* %78 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = bitcast %"class.base::RepeatingCallback"* %77 to i64*
  store i64 %81, i64* %82, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %79, align 8
  %83 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %75, i64 -2
  %84 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %76, i64 -2
  %85 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %84, i64 0, i32 0, i32 0, i32 0, i32 0
  %86 = bitcast %"class.base::RepeatingCallback"* %84 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %"class.base::RepeatingCallback"* %83 to i64*
  store i64 %87, i64* %88, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %85, align 8
  %89 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %75, i64 -3
  %90 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %76, i64 -3
  %91 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %90, i64 0, i32 0, i32 0, i32 0, i32 0
  %92 = bitcast %"class.base::RepeatingCallback"* %90 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %"class.base::RepeatingCallback"* %89 to i64*
  store i64 %93, i64* %94, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %91, align 8
  %95 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %75, i64 -4
  %96 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %76, i64 -4
  %97 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %96, i64 0, i32 0, i32 0, i32 0, i32 0
  %98 = bitcast %"class.base::RepeatingCallback"* %96 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.base::RepeatingCallback"* %95 to i64*
  store i64 %99, i64* %100, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %97, align 8
  %101 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %75, i64 -5
  %102 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %76, i64 -5
  %103 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %102, i64 0, i32 0, i32 0, i32 0, i32 0
  %104 = bitcast %"class.base::RepeatingCallback"* %102 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = bitcast %"class.base::RepeatingCallback"* %101 to i64*
  store i64 %105, i64* %106, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %103, align 8
  %107 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %75, i64 -6
  %108 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %76, i64 -6
  %109 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %108, i64 0, i32 0, i32 0, i32 0, i32 0
  %110 = bitcast %"class.base::RepeatingCallback"* %108 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = bitcast %"class.base::RepeatingCallback"* %107 to i64*
  store i64 %111, i64* %112, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %109, align 8
  %113 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %75, i64 -7
  %114 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %76, i64 -7
  %115 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %114, i64 0, i32 0, i32 0, i32 0, i32 0
  %116 = bitcast %"class.base::RepeatingCallback"* %114 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = bitcast %"class.base::RepeatingCallback"* %113 to i64*
  store i64 %117, i64* %118, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %115, align 8
  %119 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %75, i64 -8
  %120 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %76, i64 -8
  %121 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %120, i64 0, i32 0, i32 0, i32 0, i32 0
  %122 = bitcast %"class.base::RepeatingCallback"* %120 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.base::RepeatingCallback"* %119 to i64*
  store i64 %123, i64* %124, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %121, align 8
  %125 = icmp eq %"class.base::RepeatingCallback"* %120, %45
  br i1 %125, label %126, label %74

126:                                              ; preds = %74, %69
  %127 = phi %"class.base::RepeatingCallback"* [ %70, %69 ], [ %119, %74 ]
  %128 = load i64, i64* %6, align 8
  %129 = load %"class.base::RepeatingCallback"*, %"class.base::RepeatingCallback"** %3, align 8
  br label %130

130:                                              ; preds = %34, %126
  %131 = phi %"class.base::RepeatingCallback"* [ %129, %126 ], [ %45, %34 ]
  %132 = phi %"class.base::RepeatingCallback"* [ %127, %126 ], [ %37, %34 ]
  %133 = phi i64 [ %128, %126 ], [ %46, %34 ]
  %134 = ptrtoint %"class.base::RepeatingCallback"* %132 to i64
  store i64 %134, i64* %6, align 8
  store i64 %43, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %135 = inttoptr i64 %133 to %"class.base::RepeatingCallback"*
  %136 = icmp eq %"class.base::RepeatingCallback"* %131, %135
  br i1 %136, label %142, label %137

137:                                              ; preds = %130, %137
  %138 = phi %"class.base::RepeatingCallback"* [ %139, %137 ], [ %131, %130 ]
  %139 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %138, i64 -1
  %140 = getelementptr inbounds %"class.base::RepeatingCallback", %"class.base::RepeatingCallback"* %139, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %140) #11
  %141 = icmp eq %"class.base::RepeatingCallback"* %139, %135
  br i1 %141, label %142, label %137

142:                                              ; preds = %137, %130
  %143 = icmp eq i64 %133, 0
  br i1 %143, label %146, label %144

144:                                              ; preds = %142
  %145 = inttoptr i64 %133 to i8*
  tail call void @_ZdlPv(i8* %145) #10
  br label %146

146:                                              ; preds = %142, %144
  ret void
}

declare void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

declare void @_ZN3net8IOBufferC2EPc(%"class.net::IOBuffer"*, i8*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3net10SpdyBuffer19SharedFrameIOBufferD2Ev(%"class.net::SpdyBuffer::SharedFrameIOBuffer"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.net::SpdyBuffer::SharedFrameIOBuffer", %"class.net::SpdyBuffer::SharedFrameIOBuffer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3net10SpdyBuffer19SharedFrameIOBufferE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::SpdyBuffer::SharedFrameIOBuffer", %"class.net::SpdyBuffer::SharedFrameIOBuffer"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.net::SpdyBuffer::SharedFrameIOBuffer", %"class.net::SpdyBuffer::SharedFrameIOBuffer"* %0, i64 0, i32 0, i32 2
  store i8* null, i8** %4, align 8
  %5 = getelementptr inbounds %"class.net::SpdyBuffer::SharedFrameIOBuffer", %"class.net::SpdyBuffer::SharedFrameIOBuffer"* %0, i64 0, i32 1, i32 0
  %6 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %5, align 8
  %7 = icmp eq %"class.base::RefCountedData"* %6, null
  br i1 %7, label %31, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw sub i32* %9, i32 1 acq_rel
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %31

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %6, i64 0, i32 0
  %14 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %13, i64 2
  %15 = bitcast %"class.base::RefCountedThreadSafe"* %14 to %"class.spdy::SpdySerializedFrame"**
  %16 = load %"class.spdy::SpdySerializedFrame"*, %"class.spdy::SpdySerializedFrame"** %15, align 8
  store %"class.spdy::SpdySerializedFrame"* null, %"class.spdy::SpdySerializedFrame"** %15, align 8
  %17 = icmp eq %"class.spdy::SpdySerializedFrame"* %16, null
  br i1 %17, label %29, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.spdy::SpdySerializedFrame", %"class.spdy::SpdySerializedFrame"* %16, i64 0, i32 2
  %20 = load i8, i8* %19, align 8, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.spdy::SpdySerializedFrame", %"class.spdy::SpdySerializedFrame"* %16, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %22
  tail call void @_ZdaPv(i8* nonnull %24) #10
  br label %27

27:                                               ; preds = %26, %22, %18
  %28 = bitcast %"class.spdy::SpdySerializedFrame"* %16 to i8*
  tail call void @_ZdlPv(i8* %28) #10
  br label %29

29:                                               ; preds = %27, %12
  %30 = bitcast %"class.base::RefCountedData"* %6 to i8*
  tail call void @_ZdlPv(i8* %30) #10
  br label %31

31:                                               ; preds = %1, %8, %29
  tail call void @_ZN3net8IOBufferD2Ev(%"class.net::IOBuffer"* %3) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3net10SpdyBuffer19SharedFrameIOBufferD0Ev(%"class.net::SpdyBuffer::SharedFrameIOBuffer"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.net::SpdyBuffer::SharedFrameIOBuffer", %"class.net::SpdyBuffer::SharedFrameIOBuffer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3net10SpdyBuffer19SharedFrameIOBufferE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::SpdyBuffer::SharedFrameIOBuffer", %"class.net::SpdyBuffer::SharedFrameIOBuffer"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.net::SpdyBuffer::SharedFrameIOBuffer", %"class.net::SpdyBuffer::SharedFrameIOBuffer"* %0, i64 0, i32 0, i32 2
  store i8* null, i8** %4, align 8
  %5 = getelementptr inbounds %"class.net::SpdyBuffer::SharedFrameIOBuffer", %"class.net::SpdyBuffer::SharedFrameIOBuffer"* %0, i64 0, i32 1, i32 0
  %6 = load %"class.base::RefCountedData"*, %"class.base::RefCountedData"** %5, align 8
  %7 = icmp eq %"class.base::RefCountedData"* %6, null
  br i1 %7, label %31, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = atomicrmw sub i32* %9, i32 1 acq_rel
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %31

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.base::RefCountedData", %"class.base::RefCountedData"* %6, i64 0, i32 0
  %14 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %13, i64 2
  %15 = bitcast %"class.base::RefCountedThreadSafe"* %14 to %"class.spdy::SpdySerializedFrame"**
  %16 = load %"class.spdy::SpdySerializedFrame"*, %"class.spdy::SpdySerializedFrame"** %15, align 8
  store %"class.spdy::SpdySerializedFrame"* null, %"class.spdy::SpdySerializedFrame"** %15, align 8
  %17 = icmp eq %"class.spdy::SpdySerializedFrame"* %16, null
  br i1 %17, label %29, label %18

18:                                               ; preds = %12
  %19 = getelementptr inbounds %"class.spdy::SpdySerializedFrame", %"class.spdy::SpdySerializedFrame"* %16, i64 0, i32 2
  %20 = load i8, i8* %19, align 8, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.spdy::SpdySerializedFrame", %"class.spdy::SpdySerializedFrame"* %16, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %22
  tail call void @_ZdaPv(i8* nonnull %24) #10
  br label %27

27:                                               ; preds = %26, %22, %18
  %28 = bitcast %"class.spdy::SpdySerializedFrame"* %16 to i8*
  tail call void @_ZdlPv(i8* %28) #10
  br label %29

29:                                               ; preds = %27, %12
  %30 = bitcast %"class.base::RefCountedData"* %6 to i8*
  tail call void @_ZdlPv(i8* %30) #10
  br label %31

31:                                               ; preds = %1, %8, %29
  tail call void @_ZN3net8IOBufferD2Ev(%"class.net::IOBuffer"* %3) #11
  %32 = bitcast %"class.net::SpdyBuffer::SharedFrameIOBuffer"* %0 to i8*
  tail call void @_ZdlPv(i8* %32) #10
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net8IOBufferD2Ev(%"class.net::IOBuffer"*) unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
