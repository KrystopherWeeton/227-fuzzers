; ModuleID = '../../third_party/ots/src/src/vorg.cc'
source_filename = "../../third_party/ots/src/src/vorg.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.ots::OpenTypeVORG" = type { %"class.ots::Table.base", i16, i16, i16, %"class.std::__1::vector" }
%"class.ots::Table.base" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8 }>
%"struct.ots::Font" = type { %"struct.ots::FontFile"*, i32, i16, i16, i16, i16, %"class.std::__1::map.15" }
%"struct.ots::FontFile" = type { %"class.ots::OTSContext"*, %"class.std::__1::map", %"class.std::__1::map.4" }
%"class.ots::OTSContext" = type { i32 (...)** }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::map.4" = type { %"class.std::__1::__tree.5" }
%"class.std::__1::__tree.5" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::map.15" = type { %"class.std::__1::__tree.16" }
%"class.std::__1::__tree.16" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.17", %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.ots::OpenTypeVORGMetrics"*, %"struct.ots::OpenTypeVORGMetrics"*, %"class.std::__1::__compressed_pair.24" }
%"struct.ots::OpenTypeVORGMetrics" = type { i16, i16 }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.ots::OpenTypeVORGMetrics"* }
%"class.ots::Table" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8, [7 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.ots::OTSStream" = type <{ i32 (...)**, i32, [4 x i8] }>

$_ZN3ots12OpenTypeVORGD2Ev = comdat any

$_ZN3ots12OpenTypeVORGD0Ev = comdat any

@.str = private unnamed_addr constant [22 x i8] c"Failed to read header\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"Unsupported majorVersion: %u\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"Unsupported minorVersion: %u\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"Failed to read record %d\00", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c"The table is not sorted\00", align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"Failed to write table header\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"Failed to write record %d\00", align 1
@_ZTVN3ots12OpenTypeVORGE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ots::OpenTypeVORG"*)* @_ZN3ots12OpenTypeVORGD2Ev to i8*), i8* bitcast (void (%"class.ots::OpenTypeVORG"*)* @_ZN3ots12OpenTypeVORGD0Ev to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeVORG"*, i8*, i64)* @_ZN3ots12OpenTypeVORG5ParseEPKhm to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeVORG"*, %"class.ots::OTSStream"*)* @_ZN3ots12OpenTypeVORG9SerializeEPNS_9OTSStreamE to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeVORG"*)* @_ZN3ots12OpenTypeVORG15ShouldSerializeEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeVORG5ParseEPKhm(%"class.ots::OpenTypeVORG"*, i8*, i64) unnamed_addr #0 align 2 {
  %4 = icmp ult i64 %2, 2
  br i1 %4, label %25, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 1
  %7 = bitcast i8* %1 to i16*
  %8 = load i16, i16* %7, align 1
  %9 = tail call i16 @llvm.bswap.i16(i16 %8) #9
  store i16 %9, i16* %6, align 2
  %10 = icmp ult i64 %2, 4
  br i1 %10, label %25, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 2
  %13 = getelementptr inbounds i8, i8* %1, i64 2
  %14 = bitcast i8* %13 to i16*
  %15 = load i16, i16* %14, align 1
  %16 = tail call i16 @llvm.bswap.i16(i16 %15) #9
  store i16 %16, i16* %12, align 2
  %17 = icmp ult i64 %2, 6
  br i1 %17, label %25, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 3
  %20 = getelementptr inbounds i8, i8* %1, i64 4
  %21 = bitcast i8* %20 to i16*
  %22 = load i16, i16* %21, align 1
  %23 = tail call i16 @llvm.bswap.i16(i16 %22) #9
  store i16 %23, i16* %19, align 2
  %24 = icmp ult i64 %2, 8
  br i1 %24, label %25, label %28

25:                                               ; preds = %18, %11, %5, %3
  %26 = bitcast %"class.ots::OpenTypeVORG"* %0 to %"class.ots::Table"*
  %27 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %26, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0)) #9
  br label %183

28:                                               ; preds = %18
  %29 = getelementptr inbounds i8, i8* %1, i64 6
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 1
  %32 = tail call i16 @llvm.bswap.i16(i16 %31) #9
  %33 = icmp eq i16 %8, 256
  br i1 %33, label %38, label %34

34:                                               ; preds = %28
  %35 = zext i16 %9 to i32
  %36 = bitcast %"class.ots::OpenTypeVORG"* %0 to %"class.ots::Table"*
  %37 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table4DropEPKcz(%"class.ots::Table"* %36, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i32 %35) #9
  br label %183

38:                                               ; preds = %28
  %39 = icmp eq i16 %15, 0
  br i1 %39, label %44, label %40

40:                                               ; preds = %38
  %41 = zext i16 %16 to i32
  %42 = bitcast %"class.ots::OpenTypeVORG"* %0 to %"class.ots::Table"*
  %43 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table4DropEPKcz(%"class.ots::Table"* %42, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), i32 %41) #9
  br label %183

44:                                               ; preds = %38
  %45 = icmp eq i16 %31, 0
  br i1 %45, label %183, label %46

46:                                               ; preds = %44
  %47 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 4
  %48 = zext i16 %32 to i64
  %49 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %50 = bitcast %"struct.ots::OpenTypeVORGMetrics"** %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.std::__1::vector"* %47 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = sub i64 %51, %53
  %55 = ashr exact i64 %54, 2
  %56 = icmp ult i64 %55, %48
  br i1 %56, label %57, label %78

57:                                               ; preds = %46
  %58 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 4, i32 0, i32 1
  %59 = bitcast %"struct.ots::OpenTypeVORGMetrics"** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = sub i64 %60, %53
  %62 = ashr exact i64 %61, 2
  %63 = shl nuw nsw i64 %48, 2
  %64 = tail call i8* @_Znwm(i64 %63) #10
  %65 = bitcast i8* %64 to %"struct.ots::OpenTypeVORGMetrics"*
  %66 = getelementptr inbounds %"struct.ots::OpenTypeVORGMetrics", %"struct.ots::OpenTypeVORGMetrics"* %65, i64 %62
  %67 = ptrtoint %"struct.ots::OpenTypeVORGMetrics"* %66 to i64
  %68 = getelementptr inbounds %"struct.ots::OpenTypeVORGMetrics", %"struct.ots::OpenTypeVORGMetrics"* %65, i64 %48
  %69 = ptrtoint %"struct.ots::OpenTypeVORGMetrics"* %68 to i64
  %70 = ptrtoint i8* %64 to i64
  %71 = icmp sgt i64 %61, 0
  br i1 %71, label %72, label %74

72:                                               ; preds = %57
  %73 = inttoptr i64 %53 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %64, i8* align 2 %73, i64 %61, i1 false) #9
  br label %74

74:                                               ; preds = %72, %57
  store i64 %70, i64* %52, align 8
  store i64 %67, i64* %59, align 8
  store i64 %69, i64* %50, align 8
  %75 = icmp eq i64 %53, 0
  br i1 %75, label %78, label %76

76:                                               ; preds = %74
  %77 = inttoptr i64 %53 to i8*
  tail call void @_ZdlPv(i8* %77) #10
  br label %78

78:                                               ; preds = %76, %74, %46
  %79 = zext i16 %32 to i32
  %80 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 4, i32 0, i32 1
  %81 = bitcast %"struct.ots::OpenTypeVORGMetrics"** %80 to i64*
  %82 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %47, i64 0, i32 0, i32 0
  br label %83

83:                                               ; preds = %78, %180
  %84 = phi i32 [ 0, %78 ], [ %181, %180 ]
  %85 = phi i16 [ 0, %78 ], [ %93, %180 ]
  %86 = phi i64 [ 8, %78 ], [ %94, %180 ]
  %87 = or i64 %86, 2
  %88 = icmp ugt i64 %87, %2
  br i1 %88, label %96, label %89

89:                                               ; preds = %83
  %90 = getelementptr inbounds i8, i8* %1, i64 %86
  %91 = bitcast i8* %90 to i16*
  %92 = load i16, i16* %91, align 1
  %93 = tail call i16 @llvm.bswap.i16(i16 %92) #9
  %94 = add nuw nsw i64 %86, 4
  %95 = icmp ugt i64 %94, %2
  br i1 %95, label %96, label %99

96:                                               ; preds = %89, %83
  %97 = bitcast %"class.ots::OpenTypeVORG"* %0 to %"class.ots::Table"*
  %98 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %97, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i32 %84) #9
  br label %183

99:                                               ; preds = %89
  %100 = getelementptr inbounds i8, i8* %1, i64 %87
  %101 = bitcast i8* %100 to i16*
  %102 = load i16, i16* %101, align 1
  %103 = tail call i16 @llvm.bswap.i16(i16 %102) #9
  %104 = icmp eq i32 %84, 0
  %105 = icmp ugt i16 %93, %85
  %106 = or i1 %104, %105
  br i1 %106, label %110, label %107

107:                                              ; preds = %99
  %108 = bitcast %"class.ots::OpenTypeVORG"* %0 to %"class.ots::Table"*
  %109 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table4DropEPKcz(%"class.ots::Table"* %108, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0)) #9
  br label %183

110:                                              ; preds = %99
  %111 = load %"struct.ots::OpenTypeVORGMetrics"*, %"struct.ots::OpenTypeVORGMetrics"** %80, align 8
  %112 = load %"struct.ots::OpenTypeVORGMetrics"*, %"struct.ots::OpenTypeVORGMetrics"** %49, align 8
  %113 = icmp eq %"struct.ots::OpenTypeVORGMetrics"* %111, %112
  %114 = ptrtoint %"struct.ots::OpenTypeVORGMetrics"* %112 to i64
  br i1 %113, label %123, label %115

115:                                              ; preds = %110
  %116 = bitcast %"struct.ots::OpenTypeVORGMetrics"* %111 to i32*
  %117 = zext i16 %103 to i32
  %118 = shl nuw i32 %117, 16
  %119 = zext i16 %93 to i32
  %120 = or i32 %118, %119
  store i32 %120, i32* %116, align 2
  %121 = getelementptr inbounds %"struct.ots::OpenTypeVORGMetrics", %"struct.ots::OpenTypeVORGMetrics"* %111, i64 1
  %122 = ptrtoint %"struct.ots::OpenTypeVORGMetrics"* %121 to i64
  store i64 %122, i64* %81, align 8
  br label %180

123:                                              ; preds = %110
  %124 = ptrtoint %"struct.ots::OpenTypeVORGMetrics"* %111 to i64
  %125 = load i64, i64* %52, align 8
  %126 = sub i64 %124, %125
  %127 = ashr exact i64 %126, 2
  %128 = add nsw i64 %127, 1
  %129 = icmp ugt i64 %128, 4611686018427387903
  br i1 %129, label %130, label %132

130:                                              ; preds = %123
  %131 = bitcast %"class.std::__1::vector"* %47 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %131) #11
  unreachable

132:                                              ; preds = %123
  %133 = sub i64 %114, %125
  %134 = ashr exact i64 %133, 2
  %135 = icmp ult i64 %134, 2305843009213693951
  br i1 %135, label %136, label %144

136:                                              ; preds = %132
  %137 = ashr exact i64 %133, 1
  %138 = icmp ult i64 %137, %128
  %139 = select i1 %138, i64 %128, i64 %137
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %149, label %141

141:                                              ; preds = %136
  %142 = icmp ugt i64 %139, 4611686018427387903
  br i1 %142, label %143, label %144

143:                                              ; preds = %141
  tail call void @abort() #11
  unreachable

144:                                              ; preds = %141, %132
  %145 = phi i64 [ %139, %141 ], [ 4611686018427387903, %132 ]
  %146 = shl i64 %145, 2
  %147 = tail call i8* @_Znwm(i64 %146) #10
  %148 = bitcast i8* %147 to %"struct.ots::OpenTypeVORGMetrics"*
  br label %149

149:                                              ; preds = %144, %136
  %150 = phi i64 [ %145, %144 ], [ 0, %136 ]
  %151 = phi %"struct.ots::OpenTypeVORGMetrics"* [ %148, %144 ], [ null, %136 ]
  %152 = getelementptr inbounds %"struct.ots::OpenTypeVORGMetrics", %"struct.ots::OpenTypeVORGMetrics"* %151, i64 %127
  %153 = getelementptr inbounds %"struct.ots::OpenTypeVORGMetrics", %"struct.ots::OpenTypeVORGMetrics"* %151, i64 %150
  %154 = ptrtoint %"struct.ots::OpenTypeVORGMetrics"* %153 to i64
  %155 = bitcast %"struct.ots::OpenTypeVORGMetrics"* %152 to i32*
  %156 = zext i16 %103 to i32
  %157 = shl nuw i32 %156, 16
  %158 = zext i16 %93 to i32
  %159 = or i32 %157, %158
  store i32 %159, i32* %155, align 2
  %160 = getelementptr inbounds %"struct.ots::OpenTypeVORGMetrics", %"struct.ots::OpenTypeVORGMetrics"* %152, i64 1
  %161 = ptrtoint %"struct.ots::OpenTypeVORGMetrics"* %160 to i64
  %162 = load %"struct.ots::OpenTypeVORGMetrics"*, %"struct.ots::OpenTypeVORGMetrics"** %82, align 8
  %163 = load i64, i64* %81, align 8
  %164 = ptrtoint %"struct.ots::OpenTypeVORGMetrics"* %162 to i64
  %165 = sub i64 %163, %164
  %166 = ashr exact i64 %165, 2
  %167 = sub nsw i64 0, %166
  %168 = getelementptr inbounds %"struct.ots::OpenTypeVORGMetrics", %"struct.ots::OpenTypeVORGMetrics"* %152, i64 %167
  %169 = ptrtoint %"struct.ots::OpenTypeVORGMetrics"* %168 to i64
  %170 = icmp sgt i64 %165, 0
  br i1 %170, label %171, label %175

171:                                              ; preds = %149
  %172 = bitcast %"struct.ots::OpenTypeVORGMetrics"* %168 to i8*
  %173 = bitcast %"struct.ots::OpenTypeVORGMetrics"* %162 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %172, i8* align 2 %173, i64 %165, i1 false) #9
  %174 = load %"struct.ots::OpenTypeVORGMetrics"*, %"struct.ots::OpenTypeVORGMetrics"** %82, align 8
  br label %175

175:                                              ; preds = %171, %149
  %176 = phi %"struct.ots::OpenTypeVORGMetrics"* [ %162, %149 ], [ %174, %171 ]
  store i64 %169, i64* %52, align 8
  store i64 %161, i64* %81, align 8
  store i64 %154, i64* %50, align 8
  %177 = icmp eq %"struct.ots::OpenTypeVORGMetrics"* %176, null
  br i1 %177, label %180, label %178

178:                                              ; preds = %175
  %179 = bitcast %"struct.ots::OpenTypeVORGMetrics"* %176 to i8*
  tail call void @_ZdlPv(i8* %179) #10
  br label %180

180:                                              ; preds = %115, %175, %178
  %181 = add nuw nsw i32 %84, 1
  %182 = icmp ult i32 %181, %79
  br i1 %182, label %83, label %183

183:                                              ; preds = %180, %96, %107, %44, %40, %34, %25
  %184 = phi i1 [ %37, %34 ], [ %43, %40 ], [ %27, %25 ], [ true, %44 ], [ %98, %96 ], [ %109, %107 ], [ true, %180 ]
  ret i1 %184
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"*, i8*, ...) local_unnamed_addr #2

declare zeroext i1 @_ZN3ots5Table4DropEPKcz(%"class.ots::Table"*, i8*, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeVORG9SerializeEPNS_9OTSStreamE(%"class.ots::OpenTypeVORG"*, %"class.ots::OTSStream"*) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i16, align 2
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i16, align 2
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i16, align 2
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i16, align 2
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i16, align 2
  %21 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 4
  %22 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 4, i32 0, i32 1
  %23 = bitcast %"struct.ots::OpenTypeVORGMetrics"** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast %"class.std::__1::vector"* %21 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = sub i64 %24, %26
  %28 = ashr exact i64 %27, 2
  %29 = trunc i64 %28 to i16
  %30 = icmp ult i64 %28, 65536
  br i1 %30, label %31, label %208

31:                                               ; preds = %2
  %32 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 1
  %33 = load i16, i16* %32, align 2
  %34 = bitcast i16* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %34)
  %35 = tail call i16 @llvm.bswap.i16(i16 %33) #9
  store i16 %35, i16* %17, align 2
  %36 = bitcast %"class.ots::OTSStream"* %1 to i64 (%"class.ots::OTSStream"*)***
  %37 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %36, align 8
  %38 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %37, i64 4
  %39 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %38, align 8
  %40 = tail call i64 %39(%"class.ots::OTSStream"* %1) #9
  %41 = and i64 %40, 3
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %46

43:                                               ; preds = %31
  %44 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %45 = load i32, i32* %44, align 8
  br label %58

46:                                               ; preds = %31
  %47 = sub nuw nsw i64 4, %41
  %48 = icmp ult i64 %47, 2
  %49 = select i1 %48, i64 %47, i64 2
  %50 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %50) #9
  store i32 0, i32* %15, align 4
  %51 = getelementptr inbounds i8, i8* %50, i64 %41
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* nonnull align 2 %34, i64 %49, i1 false) #9
  %52 = load i32, i32* %15, align 4
  %53 = tail call i32 @llvm.bswap.i32(i32 %52) #9
  %54 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %55 = load i32, i32* %54, align 8
  %56 = add i32 %55, %53
  store i32 %56, i32* %54, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %50) #9
  %57 = icmp eq i64 %41, 3
  br i1 %57, label %58, label %68

58:                                               ; preds = %46, %43
  %59 = phi i32 [ %56, %46 ], [ %45, %43 ]
  %60 = phi i64 [ %49, %46 ], [ 0, %43 ]
  %61 = phi i64 [ 1, %46 ], [ 2, %43 ]
  %62 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %62)
  store i32 0, i32* %16, align 4
  %63 = getelementptr inbounds i8, i8* %34, i64 %60
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %62, i8* align 1 %63, i64 %61, i1 false) #9
  %64 = load i32, i32* %16, align 4
  %65 = tail call i32 @llvm.bswap.i32(i32 %64) #9
  %66 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %67 = add i32 %65, %59
  store i32 %67, i32* %66, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %62)
  br label %68

68:                                               ; preds = %46, %58
  %69 = bitcast %"class.ots::OTSStream"* %1 to i1 (%"class.ots::OTSStream"*, i8*, i64)***
  %70 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %69, align 8
  %71 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %70, i64 2
  %72 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %71, align 8
  %73 = call zeroext i1 %72(%"class.ots::OTSStream"* %1, i8* nonnull %34, i64 2) #9
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %34)
  br i1 %73, label %74, label %208

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 2
  %76 = load i16, i16* %75, align 4
  %77 = bitcast i16* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %77)
  %78 = call i16 @llvm.bswap.i16(i16 %76) #9
  store i16 %78, i16* %14, align 2
  %79 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %36, align 8
  %80 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %79, i64 4
  %81 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %80, align 8
  %82 = call i64 %81(%"class.ots::OTSStream"* %1) #9
  %83 = and i64 %82, 3
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %88

85:                                               ; preds = %74
  %86 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %87 = load i32, i32* %86, align 8
  br label %100

88:                                               ; preds = %74
  %89 = sub nuw nsw i64 4, %83
  %90 = icmp ult i64 %89, 2
  %91 = select i1 %90, i64 %89, i64 2
  %92 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %92) #9
  store i32 0, i32* %12, align 4
  %93 = getelementptr inbounds i8, i8* %92, i64 %83
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %93, i8* nonnull align 2 %77, i64 %91, i1 false) #9
  %94 = load i32, i32* %12, align 4
  %95 = call i32 @llvm.bswap.i32(i32 %94) #9
  %96 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %97 = load i32, i32* %96, align 8
  %98 = add i32 %97, %95
  store i32 %98, i32* %96, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #9
  %99 = icmp eq i64 %83, 3
  br i1 %99, label %100, label %110

100:                                              ; preds = %88, %85
  %101 = phi i32 [ %98, %88 ], [ %87, %85 ]
  %102 = phi i64 [ %91, %88 ], [ 0, %85 ]
  %103 = phi i64 [ 1, %88 ], [ 2, %85 ]
  %104 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %104)
  store i32 0, i32* %13, align 4
  %105 = getelementptr inbounds i8, i8* %77, i64 %102
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %104, i8* align 1 %105, i64 %103, i1 false) #9
  %106 = load i32, i32* %13, align 4
  %107 = call i32 @llvm.bswap.i32(i32 %106) #9
  %108 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %109 = add i32 %107, %101
  store i32 %109, i32* %108, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %104)
  br label %110

110:                                              ; preds = %88, %100
  %111 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %69, align 8
  %112 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %111, i64 2
  %113 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %112, align 8
  %114 = call zeroext i1 %113(%"class.ots::OTSStream"* %1, i8* nonnull %77, i64 2) #9
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %77)
  br i1 %114, label %115, label %208

115:                                              ; preds = %110
  %116 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 3
  %117 = load i16, i16* %116, align 2
  %118 = bitcast i16* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %118)
  %119 = call i16 @llvm.bswap.i16(i16 %117) #9
  store i16 %119, i16* %11, align 2
  %120 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %36, align 8
  %121 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %120, i64 4
  %122 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %121, align 8
  %123 = call i64 %122(%"class.ots::OTSStream"* %1) #9
  %124 = and i64 %123, 3
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %129

126:                                              ; preds = %115
  %127 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %128 = load i32, i32* %127, align 8
  br label %141

129:                                              ; preds = %115
  %130 = sub nuw nsw i64 4, %124
  %131 = icmp ult i64 %130, 2
  %132 = select i1 %131, i64 %130, i64 2
  %133 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %133) #9
  store i32 0, i32* %9, align 4
  %134 = getelementptr inbounds i8, i8* %133, i64 %124
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %134, i8* nonnull align 2 %118, i64 %132, i1 false) #9
  %135 = load i32, i32* %9, align 4
  %136 = call i32 @llvm.bswap.i32(i32 %135) #9
  %137 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %138 = load i32, i32* %137, align 8
  %139 = add i32 %138, %136
  store i32 %139, i32* %137, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %133) #9
  %140 = icmp eq i64 %124, 3
  br i1 %140, label %141, label %151

141:                                              ; preds = %129, %126
  %142 = phi i32 [ %139, %129 ], [ %128, %126 ]
  %143 = phi i64 [ %132, %129 ], [ 0, %126 ]
  %144 = phi i64 [ 1, %129 ], [ 2, %126 ]
  %145 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %145)
  store i32 0, i32* %10, align 4
  %146 = getelementptr inbounds i8, i8* %118, i64 %143
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %145, i8* align 1 %146, i64 %144, i1 false) #9
  %147 = load i32, i32* %10, align 4
  %148 = call i32 @llvm.bswap.i32(i32 %147) #9
  %149 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %150 = add i32 %148, %142
  store i32 %150, i32* %149, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %145)
  br label %151

151:                                              ; preds = %129, %141
  %152 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %69, align 8
  %153 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %152, i64 2
  %154 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %153, align 8
  %155 = call zeroext i1 %154(%"class.ots::OTSStream"* %1, i8* nonnull %118, i64 2) #9
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %118)
  br i1 %155, label %156, label %208

156:                                              ; preds = %151
  %157 = bitcast i16* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %157)
  %158 = call i16 @llvm.bswap.i16(i16 %29) #9
  store i16 %158, i16* %8, align 2
  %159 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %36, align 8
  %160 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %159, i64 4
  %161 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %160, align 8
  %162 = call i64 %161(%"class.ots::OTSStream"* %1) #9
  %163 = and i64 %162, 3
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %168

165:                                              ; preds = %156
  %166 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %167 = load i32, i32* %166, align 8
  br label %180

168:                                              ; preds = %156
  %169 = sub nuw nsw i64 4, %163
  %170 = icmp ult i64 %169, 2
  %171 = select i1 %170, i64 %169, i64 2
  %172 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %172) #9
  store i32 0, i32* %6, align 4
  %173 = getelementptr inbounds i8, i8* %172, i64 %163
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %173, i8* nonnull align 2 %157, i64 %171, i1 false) #9
  %174 = load i32, i32* %6, align 4
  %175 = call i32 @llvm.bswap.i32(i32 %174) #9
  %176 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %177 = load i32, i32* %176, align 8
  %178 = add i32 %177, %175
  store i32 %178, i32* %176, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %172) #9
  %179 = icmp eq i64 %163, 3
  br i1 %179, label %180, label %190

180:                                              ; preds = %168, %165
  %181 = phi i32 [ %178, %168 ], [ %167, %165 ]
  %182 = phi i64 [ %171, %168 ], [ 0, %165 ]
  %183 = phi i64 [ 1, %168 ], [ 2, %165 ]
  %184 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %184)
  store i32 0, i32* %7, align 4
  %185 = getelementptr inbounds i8, i8* %157, i64 %182
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %184, i8* align 1 %185, i64 %183, i1 false) #9
  %186 = load i32, i32* %7, align 4
  %187 = call i32 @llvm.bswap.i32(i32 %186) #9
  %188 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %189 = add i32 %187, %181
  store i32 %189, i32* %188, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %184)
  br label %190

190:                                              ; preds = %168, %180
  %191 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %69, align 8
  %192 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %191, i64 2
  %193 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %192, align 8
  %194 = call zeroext i1 %193(%"class.ots::OTSStream"* %1, i8* nonnull %157, i64 2) #9
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %157)
  br i1 %194, label %195, label %208

195:                                              ; preds = %190
  %196 = trunc i64 %28 to i32
  %197 = and i32 %196, 65535
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %292, label %199

199:                                              ; preds = %195
  %200 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %21, i64 0, i32 0, i32 0
  %201 = bitcast i16* %5 to i8*
  %202 = bitcast i32* %3 to i8*
  %203 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %204 = bitcast i32* %4 to i8*
  %205 = bitcast i16* %20 to i8*
  %206 = bitcast i32* %18 to i8*
  %207 = bitcast i32* %19 to i8*
  br label %214

208:                                              ; preds = %2, %190, %151, %110, %68
  %209 = bitcast %"class.ots::OpenTypeVORG"* %0 to %"class.ots::Table"*
  %210 = call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %209, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0)) #9
  ret i1 %210

211:                                              ; preds = %283
  %212 = zext i16 %288 to i32
  %213 = icmp ugt i32 %197, %212
  br i1 %213, label %214, label %292

214:                                              ; preds = %199, %211
  %215 = phi i32 [ 0, %199 ], [ %212, %211 ]
  %216 = phi i16 [ 0, %199 ], [ %288, %211 ]
  %217 = zext i16 %216 to i64
  %218 = load %"struct.ots::OpenTypeVORGMetrics"*, %"struct.ots::OpenTypeVORGMetrics"** %200, align 8
  %219 = getelementptr inbounds %"struct.ots::OpenTypeVORGMetrics", %"struct.ots::OpenTypeVORGMetrics"* %218, i64 %217, i32 0
  %220 = load i16, i16* %219, align 2
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %201)
  %221 = call i16 @llvm.bswap.i16(i16 %220) #9
  store i16 %221, i16* %5, align 2
  %222 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %36, align 8
  %223 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %222, i64 4
  %224 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %223, align 8
  %225 = call i64 %224(%"class.ots::OTSStream"* %1) #9
  %226 = and i64 %225, 3
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %230

228:                                              ; preds = %214
  %229 = load i32, i32* %203, align 8
  br label %240

230:                                              ; preds = %214
  %231 = sub nuw nsw i64 4, %226
  %232 = icmp ult i64 %231, 2
  %233 = select i1 %232, i64 %231, i64 2
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %202) #9
  store i32 0, i32* %3, align 4
  %234 = getelementptr inbounds i8, i8* %202, i64 %226
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %234, i8* nonnull align 2 %201, i64 %233, i1 false) #9
  %235 = load i32, i32* %3, align 4
  %236 = call i32 @llvm.bswap.i32(i32 %235) #9
  %237 = load i32, i32* %203, align 8
  %238 = add i32 %237, %236
  store i32 %238, i32* %203, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %202) #9
  %239 = icmp eq i64 %226, 3
  br i1 %239, label %240, label %248

240:                                              ; preds = %230, %228
  %241 = phi i32 [ %238, %230 ], [ %229, %228 ]
  %242 = phi i64 [ %233, %230 ], [ 0, %228 ]
  %243 = phi i64 [ 1, %230 ], [ 2, %228 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %204)
  store i32 0, i32* %4, align 4
  %244 = getelementptr inbounds i8, i8* %201, i64 %242
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %204, i8* align 1 %244, i64 %243, i1 false) #9
  %245 = load i32, i32* %4, align 4
  %246 = call i32 @llvm.bswap.i32(i32 %245) #9
  %247 = add i32 %246, %241
  store i32 %247, i32* %203, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %204)
  br label %248

248:                                              ; preds = %230, %240
  %249 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %69, align 8
  %250 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %249, i64 2
  %251 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %250, align 8
  %252 = call zeroext i1 %251(%"class.ots::OTSStream"* %1, i8* nonnull %201, i64 2) #9
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %201)
  br i1 %252, label %253, label %289

253:                                              ; preds = %248
  %254 = getelementptr inbounds %"struct.ots::OpenTypeVORGMetrics", %"struct.ots::OpenTypeVORGMetrics"* %218, i64 %217, i32 1
  %255 = load i16, i16* %254, align 2
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %205)
  %256 = call i16 @llvm.bswap.i16(i16 %255) #9
  store i16 %256, i16* %20, align 2
  %257 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %36, align 8
  %258 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %257, i64 4
  %259 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %258, align 8
  %260 = call i64 %259(%"class.ots::OTSStream"* %1) #9
  %261 = and i64 %260, 3
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %263, label %265

263:                                              ; preds = %253
  %264 = load i32, i32* %203, align 8
  br label %275

265:                                              ; preds = %253
  %266 = sub nuw nsw i64 4, %261
  %267 = icmp ult i64 %266, 2
  %268 = select i1 %267, i64 %266, i64 2
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %206) #9
  store i32 0, i32* %18, align 4
  %269 = getelementptr inbounds i8, i8* %206, i64 %261
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %269, i8* nonnull align 2 %205, i64 %268, i1 false) #9
  %270 = load i32, i32* %18, align 4
  %271 = call i32 @llvm.bswap.i32(i32 %270) #9
  %272 = load i32, i32* %203, align 8
  %273 = add i32 %272, %271
  store i32 %273, i32* %203, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %206) #9
  %274 = icmp eq i64 %261, 3
  br i1 %274, label %275, label %283

275:                                              ; preds = %265, %263
  %276 = phi i32 [ %273, %265 ], [ %264, %263 ]
  %277 = phi i64 [ %268, %265 ], [ 0, %263 ]
  %278 = phi i64 [ 1, %265 ], [ 2, %263 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %207)
  store i32 0, i32* %19, align 4
  %279 = getelementptr inbounds i8, i8* %205, i64 %277
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %207, i8* align 1 %279, i64 %278, i1 false) #9
  %280 = load i32, i32* %19, align 4
  %281 = call i32 @llvm.bswap.i32(i32 %280) #9
  %282 = add i32 %281, %276
  store i32 %282, i32* %203, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %207)
  br label %283

283:                                              ; preds = %265, %275
  %284 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %69, align 8
  %285 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %284, i64 2
  %286 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %285, align 8
  %287 = call zeroext i1 %286(%"class.ots::OTSStream"* %1, i8* nonnull %205, i64 2) #9
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %205)
  %288 = add i16 %216, 1
  br i1 %287, label %211, label %289

289:                                              ; preds = %283, %248
  %290 = bitcast %"class.ots::OpenTypeVORG"* %0 to %"class.ots::Table"*
  %291 = call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %290, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0), i32 %215) #9
  br label %292

292:                                              ; preds = %211, %195, %289
  %293 = phi i1 [ %291, %289 ], [ true, %195 ], [ true, %211 ]
  ret i1 %293
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeVORG15ShouldSerializeEv(%"class.ots::OpenTypeVORG"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.ots::OpenTypeVORG"* %0 to %"class.ots::Table"*
  %3 = tail call zeroext i1 @_ZN3ots5Table15ShouldSerializeEv(%"class.ots::Table"* %2) #9
  br i1 %3, label %4, label %9

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 0, i32 3
  %6 = load %"struct.ots::Font"*, %"struct.ots::Font"** %5, align 8
  %7 = tail call %"class.ots::Table"* @_ZNK3ots4Font8GetTableEj(%"struct.ots::Font"* %6, i32 1128678944) #9
  %8 = icmp ne %"class.ots::Table"* %7, null
  br label %9

9:                                                ; preds = %4, %1
  %10 = phi i1 [ false, %1 ], [ %8, %4 ]
  ret i1 %10
}

declare zeroext i1 @_ZN3ots5Table15ShouldSerializeEv(%"class.ots::Table"*) unnamed_addr #2

declare %"class.ots::Table"* @_ZNK3ots4Font8GetTableEj(%"struct.ots::Font"*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3ots12OpenTypeVORGD2Ev(%"class.ots::OpenTypeVORG"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3ots12OpenTypeVORGE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 4, i32 0, i32 0
  %4 = load %"struct.ots::OpenTypeVORGMetrics"*, %"struct.ots::OpenTypeVORGMetrics"** %3, align 8
  %5 = icmp eq %"struct.ots::OpenTypeVORGMetrics"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"struct.ots::OpenTypeVORGMetrics"* %4 to i64
  %8 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 4, i32 0, i32 1
  %9 = bitcast %"struct.ots::OpenTypeVORGMetrics"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"struct.ots::OpenTypeVORGMetrics"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3ots12OpenTypeVORGD0Ev(%"class.ots::OpenTypeVORG"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3ots12OpenTypeVORGE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 4, i32 0, i32 0
  %4 = load %"struct.ots::OpenTypeVORGMetrics"*, %"struct.ots::OpenTypeVORGMetrics"** %3, align 8
  %5 = icmp eq %"struct.ots::OpenTypeVORGMetrics"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"struct.ots::OpenTypeVORGMetrics"* %4 to i64
  %8 = getelementptr inbounds %"class.ots::OpenTypeVORG", %"class.ots::OpenTypeVORG"* %0, i64 0, i32 4, i32 0, i32 1
  %9 = bitcast %"struct.ots::OpenTypeVORGMetrics"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"struct.ots::OpenTypeVORGMetrics"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #10
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.ots::OpenTypeVORG"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #8

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
