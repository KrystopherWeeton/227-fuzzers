; ModuleID = '../../third_party/woff2/src/variable_length.cc'
source_filename = "../../third_party/woff2/src/variable_length.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.woff2::Buffer" = type { i8*, i64, i64 }

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN5woff213Size255UShortEt(i16 zeroext) local_unnamed_addr #0 {
  %2 = icmp ult i16 %0, 253
  %3 = icmp ult i16 %0, 762
  %4 = select i1 %3, i64 2, i64 3
  %5 = select i1 %2, i64 1, i64 %4
  ret i64 %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5woff214Write255UShortEPNSt3__16vectorIhNS0_9allocatorIhEEEEi(%"class.std::__1::vector"*, i32) local_unnamed_addr #2 {
  %3 = icmp slt i32 %1, 253
  br i1 %3, label %4, label %61

4:                                                ; preds = %2
  %5 = trunc i32 %1 to i8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = icmp ult i8* %7, %9
  %11 = ptrtoint i8* %9 to i64
  br i1 %10, label %12, label %16

12:                                               ; preds = %4
  store i8 %5, i8* %7, align 1
  %13 = getelementptr inbounds i8, i8* %7, i64 1
  %14 = ptrtoint i8* %13 to i64
  %15 = bitcast i8** %6 to i64*
  store i64 %14, i64* %15, align 8
  br label %454

16:                                               ; preds = %4
  %17 = ptrtoint i8* %7 to i64
  %18 = bitcast i8** %6 to i64*
  %19 = bitcast %"class.std::__1::vector"* %0 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = add i64 %21, 1
  %23 = icmp slt i64 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %16
  %25 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %25) #8
  unreachable

26:                                               ; preds = %16
  %27 = bitcast i8** %8 to i64*
  %28 = sub i64 %11, %20
  %29 = icmp ult i64 %28, 4611686018427387903
  br i1 %29, label %30, label %35

30:                                               ; preds = %26
  %31 = shl i64 %28, 1
  %32 = icmp ult i64 %31, %22
  %33 = select i1 %32, i64 %22, i64 %31
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %30, %26
  %36 = phi i64 [ %33, %30 ], [ 9223372036854775807, %26 ]
  %37 = tail call i8* @_Znwm(i64 %36) #9
  br label %38

38:                                               ; preds = %35, %30
  %39 = phi i64 [ %36, %35 ], [ 0, %30 ]
  %40 = phi i8* [ %37, %35 ], [ null, %30 ]
  %41 = getelementptr inbounds i8, i8* %40, i64 %21
  %42 = getelementptr inbounds i8, i8* %40, i64 %39
  %43 = ptrtoint i8* %42 to i64
  store i8 %5, i8* %41, align 1
  %44 = getelementptr inbounds i8, i8* %41, i64 1
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = load i64, i64* %18, align 8
  %49 = ptrtoint i8* %47 to i64
  %50 = sub i64 %48, %49
  %51 = sub i64 0, %50
  %52 = getelementptr inbounds i8, i8* %41, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = icmp sgt i64 %50, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %38
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %47, i64 %50, i1 false) #10
  %56 = load i8*, i8** %46, align 8
  br label %57

57:                                               ; preds = %55, %38
  %58 = phi i8* [ %47, %38 ], [ %56, %55 ]
  store i64 %53, i64* %19, align 8
  store i64 %45, i64* %18, align 8
  store i64 %43, i64* %27, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %454, label %60

60:                                               ; preds = %57
  tail call void @_ZdlPv(i8* nonnull %58) #9
  br label %454

61:                                               ; preds = %2
  %62 = icmp slt i32 %1, 506
  br i1 %62, label %63, label %176

63:                                               ; preds = %61
  %64 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = icmp ult i8* %65, %67
  %69 = ptrtoint i8* %67 to i64
  br i1 %68, label %70, label %74

70:                                               ; preds = %63
  store i8 -1, i8* %65, align 1
  %71 = getelementptr inbounds i8, i8* %65, i64 1
  %72 = ptrtoint i8* %71 to i64
  %73 = bitcast i8** %64 to i64*
  store i64 %72, i64* %73, align 8
  br label %120

74:                                               ; preds = %63
  %75 = ptrtoint i8* %65 to i64
  %76 = bitcast i8** %64 to i64*
  %77 = bitcast %"class.std::__1::vector"* %0 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = sub i64 %75, %78
  %80 = add i64 %79, 1
  %81 = icmp slt i64 %80, 0
  br i1 %81, label %82, label %84

82:                                               ; preds = %74
  %83 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %83) #8
  unreachable

84:                                               ; preds = %74
  %85 = bitcast i8** %66 to i64*
  %86 = sub i64 %69, %78
  %87 = icmp ult i64 %86, 4611686018427387903
  br i1 %87, label %88, label %93

88:                                               ; preds = %84
  %89 = shl i64 %86, 1
  %90 = icmp ult i64 %89, %80
  %91 = select i1 %90, i64 %80, i64 %89
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %96, label %93

93:                                               ; preds = %88, %84
  %94 = phi i64 [ %91, %88 ], [ 9223372036854775807, %84 ]
  %95 = tail call i8* @_Znwm(i64 %94) #9
  br label %96

96:                                               ; preds = %93, %88
  %97 = phi i64 [ %94, %93 ], [ 0, %88 ]
  %98 = phi i8* [ %95, %93 ], [ null, %88 ]
  %99 = getelementptr inbounds i8, i8* %98, i64 %79
  %100 = getelementptr inbounds i8, i8* %98, i64 %97
  %101 = ptrtoint i8* %100 to i64
  store i8 -1, i8* %99, align 1
  %102 = getelementptr inbounds i8, i8* %99, i64 1
  %103 = ptrtoint i8* %102 to i64
  %104 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %105 = load i8*, i8** %104, align 8
  %106 = load i64, i64* %76, align 8
  %107 = ptrtoint i8* %105 to i64
  %108 = sub i64 %106, %107
  %109 = sub i64 0, %108
  %110 = getelementptr inbounds i8, i8* %99, i64 %109
  %111 = ptrtoint i8* %110 to i64
  %112 = icmp sgt i64 %108, 0
  br i1 %112, label %113, label %115

113:                                              ; preds = %96
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 1 %105, i64 %108, i1 false) #10
  %114 = load i8*, i8** %104, align 8
  br label %115

115:                                              ; preds = %113, %96
  %116 = phi i8* [ %105, %96 ], [ %114, %113 ]
  store i64 %111, i64* %77, align 8
  store i64 %103, i64* %76, align 8
  store i64 %101, i64* %85, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %115
  tail call void @_ZdlPv(i8* nonnull %116) #9
  %119 = load i8*, i8** %64, align 8
  br label %120

120:                                              ; preds = %70, %115, %118
  %121 = phi i8* [ %71, %70 ], [ %102, %115 ], [ %119, %118 ]
  %122 = trunc i32 %1 to i8
  %123 = add i8 %122, 3
  %124 = load i8*, i8** %66, align 8
  %125 = icmp ult i8* %121, %124
  %126 = ptrtoint i8* %124 to i64
  br i1 %125, label %127, label %131

127:                                              ; preds = %120
  store i8 %123, i8* %121, align 1
  %128 = getelementptr inbounds i8, i8* %121, i64 1
  %129 = ptrtoint i8* %128 to i64
  %130 = bitcast i8** %64 to i64*
  store i64 %129, i64* %130, align 8
  br label %454

131:                                              ; preds = %120
  %132 = ptrtoint i8* %121 to i64
  %133 = bitcast i8** %64 to i64*
  %134 = bitcast %"class.std::__1::vector"* %0 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = sub i64 %132, %135
  %137 = add i64 %136, 1
  %138 = icmp slt i64 %137, 0
  br i1 %138, label %139, label %141

139:                                              ; preds = %131
  %140 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %140) #8
  unreachable

141:                                              ; preds = %131
  %142 = bitcast i8** %66 to i64*
  %143 = sub i64 %126, %135
  %144 = icmp ult i64 %143, 4611686018427387903
  br i1 %144, label %145, label %150

145:                                              ; preds = %141
  %146 = shl i64 %143, 1
  %147 = icmp ult i64 %146, %137
  %148 = select i1 %147, i64 %137, i64 %146
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %153, label %150

150:                                              ; preds = %145, %141
  %151 = phi i64 [ %148, %145 ], [ 9223372036854775807, %141 ]
  %152 = tail call i8* @_Znwm(i64 %151) #9
  br label %153

153:                                              ; preds = %150, %145
  %154 = phi i64 [ %151, %150 ], [ 0, %145 ]
  %155 = phi i8* [ %152, %150 ], [ null, %145 ]
  %156 = getelementptr inbounds i8, i8* %155, i64 %136
  %157 = getelementptr inbounds i8, i8* %155, i64 %154
  %158 = ptrtoint i8* %157 to i64
  store i8 %123, i8* %156, align 1
  %159 = getelementptr inbounds i8, i8* %156, i64 1
  %160 = ptrtoint i8* %159 to i64
  %161 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %162 = load i8*, i8** %161, align 8
  %163 = load i64, i64* %133, align 8
  %164 = ptrtoint i8* %162 to i64
  %165 = sub i64 %163, %164
  %166 = sub i64 0, %165
  %167 = getelementptr inbounds i8, i8* %156, i64 %166
  %168 = ptrtoint i8* %167 to i64
  %169 = icmp sgt i64 %165, 0
  br i1 %169, label %170, label %172

170:                                              ; preds = %153
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %167, i8* align 1 %162, i64 %165, i1 false) #10
  %171 = load i8*, i8** %161, align 8
  br label %172

172:                                              ; preds = %170, %153
  %173 = phi i8* [ %162, %153 ], [ %171, %170 ]
  store i64 %168, i64* %134, align 8
  store i64 %160, i64* %133, align 8
  store i64 %158, i64* %142, align 8
  %174 = icmp eq i8* %173, null
  br i1 %174, label %454, label %175

175:                                              ; preds = %172
  tail call void @_ZdlPv(i8* nonnull %173) #9
  br label %454

176:                                              ; preds = %61
  %177 = icmp slt i32 %1, 762
  %178 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %179 = load i8*, i8** %178, align 8
  %180 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %181 = load i8*, i8** %180, align 8
  %182 = icmp ult i8* %179, %181
  %183 = ptrtoint i8* %181 to i64
  br i1 %177, label %184, label %291

184:                                              ; preds = %176
  br i1 %182, label %185, label %189

185:                                              ; preds = %184
  store i8 -2, i8* %179, align 1
  %186 = getelementptr inbounds i8, i8* %179, i64 1
  %187 = ptrtoint i8* %186 to i64
  %188 = bitcast i8** %178 to i64*
  store i64 %187, i64* %188, align 8
  br label %235

189:                                              ; preds = %184
  %190 = ptrtoint i8* %179 to i64
  %191 = bitcast i8** %178 to i64*
  %192 = bitcast %"class.std::__1::vector"* %0 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = sub i64 %190, %193
  %195 = add i64 %194, 1
  %196 = icmp slt i64 %195, 0
  br i1 %196, label %197, label %199

197:                                              ; preds = %189
  %198 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %198) #8
  unreachable

199:                                              ; preds = %189
  %200 = bitcast i8** %180 to i64*
  %201 = sub i64 %183, %193
  %202 = icmp ult i64 %201, 4611686018427387903
  br i1 %202, label %203, label %208

203:                                              ; preds = %199
  %204 = shl i64 %201, 1
  %205 = icmp ult i64 %204, %195
  %206 = select i1 %205, i64 %195, i64 %204
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %211, label %208

208:                                              ; preds = %203, %199
  %209 = phi i64 [ %206, %203 ], [ 9223372036854775807, %199 ]
  %210 = tail call i8* @_Znwm(i64 %209) #9
  br label %211

211:                                              ; preds = %208, %203
  %212 = phi i64 [ %209, %208 ], [ 0, %203 ]
  %213 = phi i8* [ %210, %208 ], [ null, %203 ]
  %214 = getelementptr inbounds i8, i8* %213, i64 %194
  %215 = getelementptr inbounds i8, i8* %213, i64 %212
  %216 = ptrtoint i8* %215 to i64
  store i8 -2, i8* %214, align 1
  %217 = getelementptr inbounds i8, i8* %214, i64 1
  %218 = ptrtoint i8* %217 to i64
  %219 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %220 = load i8*, i8** %219, align 8
  %221 = load i64, i64* %191, align 8
  %222 = ptrtoint i8* %220 to i64
  %223 = sub i64 %221, %222
  %224 = sub i64 0, %223
  %225 = getelementptr inbounds i8, i8* %214, i64 %224
  %226 = ptrtoint i8* %225 to i64
  %227 = icmp sgt i64 %223, 0
  br i1 %227, label %228, label %230

228:                                              ; preds = %211
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %225, i8* align 1 %220, i64 %223, i1 false) #10
  %229 = load i8*, i8** %219, align 8
  br label %230

230:                                              ; preds = %228, %211
  %231 = phi i8* [ %220, %211 ], [ %229, %228 ]
  store i64 %226, i64* %192, align 8
  store i64 %218, i64* %191, align 8
  store i64 %216, i64* %200, align 8
  %232 = icmp eq i8* %231, null
  br i1 %232, label %235, label %233

233:                                              ; preds = %230
  tail call void @_ZdlPv(i8* nonnull %231) #9
  %234 = load i8*, i8** %178, align 8
  br label %235

235:                                              ; preds = %185, %230, %233
  %236 = phi i8* [ %186, %185 ], [ %217, %230 ], [ %234, %233 ]
  %237 = trunc i32 %1 to i8
  %238 = add i8 %237, 6
  %239 = load i8*, i8** %180, align 8
  %240 = icmp ult i8* %236, %239
  %241 = ptrtoint i8* %239 to i64
  br i1 %240, label %242, label %246

242:                                              ; preds = %235
  store i8 %238, i8* %236, align 1
  %243 = getelementptr inbounds i8, i8* %236, i64 1
  %244 = ptrtoint i8* %243 to i64
  %245 = bitcast i8** %178 to i64*
  store i64 %244, i64* %245, align 8
  br label %454

246:                                              ; preds = %235
  %247 = ptrtoint i8* %236 to i64
  %248 = bitcast i8** %178 to i64*
  %249 = bitcast %"class.std::__1::vector"* %0 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = sub i64 %247, %250
  %252 = add i64 %251, 1
  %253 = icmp slt i64 %252, 0
  br i1 %253, label %254, label %256

254:                                              ; preds = %246
  %255 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %255) #8
  unreachable

256:                                              ; preds = %246
  %257 = bitcast i8** %180 to i64*
  %258 = sub i64 %241, %250
  %259 = icmp ult i64 %258, 4611686018427387903
  br i1 %259, label %260, label %265

260:                                              ; preds = %256
  %261 = shl i64 %258, 1
  %262 = icmp ult i64 %261, %252
  %263 = select i1 %262, i64 %252, i64 %261
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %268, label %265

265:                                              ; preds = %260, %256
  %266 = phi i64 [ %263, %260 ], [ 9223372036854775807, %256 ]
  %267 = tail call i8* @_Znwm(i64 %266) #9
  br label %268

268:                                              ; preds = %265, %260
  %269 = phi i64 [ %266, %265 ], [ 0, %260 ]
  %270 = phi i8* [ %267, %265 ], [ null, %260 ]
  %271 = getelementptr inbounds i8, i8* %270, i64 %251
  %272 = getelementptr inbounds i8, i8* %270, i64 %269
  %273 = ptrtoint i8* %272 to i64
  store i8 %238, i8* %271, align 1
  %274 = getelementptr inbounds i8, i8* %271, i64 1
  %275 = ptrtoint i8* %274 to i64
  %276 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %277 = load i8*, i8** %276, align 8
  %278 = load i64, i64* %248, align 8
  %279 = ptrtoint i8* %277 to i64
  %280 = sub i64 %278, %279
  %281 = sub i64 0, %280
  %282 = getelementptr inbounds i8, i8* %271, i64 %281
  %283 = ptrtoint i8* %282 to i64
  %284 = icmp sgt i64 %280, 0
  br i1 %284, label %285, label %287

285:                                              ; preds = %268
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %282, i8* align 1 %277, i64 %280, i1 false) #10
  %286 = load i8*, i8** %276, align 8
  br label %287

287:                                              ; preds = %285, %268
  %288 = phi i8* [ %277, %268 ], [ %286, %285 ]
  store i64 %283, i64* %249, align 8
  store i64 %275, i64* %248, align 8
  store i64 %273, i64* %257, align 8
  %289 = icmp eq i8* %288, null
  br i1 %289, label %454, label %290

290:                                              ; preds = %287
  tail call void @_ZdlPv(i8* nonnull %288) #9
  br label %454

291:                                              ; preds = %176
  br i1 %182, label %292, label %296

292:                                              ; preds = %291
  store i8 -3, i8* %179, align 1
  %293 = getelementptr inbounds i8, i8* %179, i64 1
  %294 = ptrtoint i8* %293 to i64
  %295 = bitcast i8** %178 to i64*
  store i64 %294, i64* %295, align 8
  br label %342

296:                                              ; preds = %291
  %297 = ptrtoint i8* %179 to i64
  %298 = bitcast i8** %178 to i64*
  %299 = bitcast %"class.std::__1::vector"* %0 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = sub i64 %297, %300
  %302 = add i64 %301, 1
  %303 = icmp slt i64 %302, 0
  br i1 %303, label %304, label %306

304:                                              ; preds = %296
  %305 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %305) #8
  unreachable

306:                                              ; preds = %296
  %307 = bitcast i8** %180 to i64*
  %308 = sub i64 %183, %300
  %309 = icmp ult i64 %308, 4611686018427387903
  br i1 %309, label %310, label %315

310:                                              ; preds = %306
  %311 = shl i64 %308, 1
  %312 = icmp ult i64 %311, %302
  %313 = select i1 %312, i64 %302, i64 %311
  %314 = icmp eq i64 %313, 0
  br i1 %314, label %318, label %315

315:                                              ; preds = %310, %306
  %316 = phi i64 [ %313, %310 ], [ 9223372036854775807, %306 ]
  %317 = tail call i8* @_Znwm(i64 %316) #9
  br label %318

318:                                              ; preds = %315, %310
  %319 = phi i64 [ %316, %315 ], [ 0, %310 ]
  %320 = phi i8* [ %317, %315 ], [ null, %310 ]
  %321 = getelementptr inbounds i8, i8* %320, i64 %301
  %322 = getelementptr inbounds i8, i8* %320, i64 %319
  %323 = ptrtoint i8* %322 to i64
  store i8 -3, i8* %321, align 1
  %324 = getelementptr inbounds i8, i8* %321, i64 1
  %325 = ptrtoint i8* %324 to i64
  %326 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %327 = load i8*, i8** %326, align 8
  %328 = load i64, i64* %298, align 8
  %329 = ptrtoint i8* %327 to i64
  %330 = sub i64 %328, %329
  %331 = sub i64 0, %330
  %332 = getelementptr inbounds i8, i8* %321, i64 %331
  %333 = ptrtoint i8* %332 to i64
  %334 = icmp sgt i64 %330, 0
  br i1 %334, label %335, label %337

335:                                              ; preds = %318
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %332, i8* align 1 %327, i64 %330, i1 false) #10
  %336 = load i8*, i8** %326, align 8
  br label %337

337:                                              ; preds = %335, %318
  %338 = phi i8* [ %327, %318 ], [ %336, %335 ]
  store i64 %333, i64* %299, align 8
  store i64 %325, i64* %298, align 8
  store i64 %323, i64* %307, align 8
  %339 = icmp eq i8* %338, null
  br i1 %339, label %342, label %340

340:                                              ; preds = %337
  tail call void @_ZdlPv(i8* nonnull %338) #9
  %341 = load i8*, i8** %178, align 8
  br label %342

342:                                              ; preds = %292, %337, %340
  %343 = phi i8* [ %293, %292 ], [ %324, %337 ], [ %341, %340 ]
  %344 = lshr i32 %1, 8
  %345 = trunc i32 %344 to i8
  %346 = load i8*, i8** %180, align 8
  %347 = icmp ult i8* %343, %346
  %348 = ptrtoint i8* %346 to i64
  br i1 %347, label %349, label %353

349:                                              ; preds = %342
  store i8 %345, i8* %343, align 1
  %350 = getelementptr inbounds i8, i8* %343, i64 1
  %351 = ptrtoint i8* %350 to i64
  %352 = bitcast i8** %178 to i64*
  store i64 %351, i64* %352, align 8
  br label %399

353:                                              ; preds = %342
  %354 = ptrtoint i8* %343 to i64
  %355 = bitcast i8** %178 to i64*
  %356 = bitcast %"class.std::__1::vector"* %0 to i64*
  %357 = load i64, i64* %356, align 8
  %358 = sub i64 %354, %357
  %359 = add i64 %358, 1
  %360 = icmp slt i64 %359, 0
  br i1 %360, label %361, label %363

361:                                              ; preds = %353
  %362 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %362) #8
  unreachable

363:                                              ; preds = %353
  %364 = bitcast i8** %180 to i64*
  %365 = sub i64 %348, %357
  %366 = icmp ult i64 %365, 4611686018427387903
  br i1 %366, label %367, label %372

367:                                              ; preds = %363
  %368 = shl i64 %365, 1
  %369 = icmp ult i64 %368, %359
  %370 = select i1 %369, i64 %359, i64 %368
  %371 = icmp eq i64 %370, 0
  br i1 %371, label %375, label %372

372:                                              ; preds = %367, %363
  %373 = phi i64 [ %370, %367 ], [ 9223372036854775807, %363 ]
  %374 = tail call i8* @_Znwm(i64 %373) #9
  br label %375

375:                                              ; preds = %372, %367
  %376 = phi i64 [ %373, %372 ], [ 0, %367 ]
  %377 = phi i8* [ %374, %372 ], [ null, %367 ]
  %378 = getelementptr inbounds i8, i8* %377, i64 %358
  %379 = getelementptr inbounds i8, i8* %377, i64 %376
  %380 = ptrtoint i8* %379 to i64
  store i8 %345, i8* %378, align 1
  %381 = getelementptr inbounds i8, i8* %378, i64 1
  %382 = ptrtoint i8* %381 to i64
  %383 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %384 = load i8*, i8** %383, align 8
  %385 = load i64, i64* %355, align 8
  %386 = ptrtoint i8* %384 to i64
  %387 = sub i64 %385, %386
  %388 = sub i64 0, %387
  %389 = getelementptr inbounds i8, i8* %378, i64 %388
  %390 = ptrtoint i8* %389 to i64
  %391 = icmp sgt i64 %387, 0
  br i1 %391, label %392, label %394

392:                                              ; preds = %375
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %389, i8* align 1 %384, i64 %387, i1 false) #10
  %393 = load i8*, i8** %383, align 8
  br label %394

394:                                              ; preds = %392, %375
  %395 = phi i8* [ %384, %375 ], [ %393, %392 ]
  store i64 %390, i64* %356, align 8
  store i64 %382, i64* %355, align 8
  store i64 %380, i64* %364, align 8
  %396 = icmp eq i8* %395, null
  br i1 %396, label %399, label %397

397:                                              ; preds = %394
  tail call void @_ZdlPv(i8* nonnull %395) #9
  %398 = load i8*, i8** %178, align 8
  br label %399

399:                                              ; preds = %349, %394, %397
  %400 = phi i8* [ %350, %349 ], [ %381, %394 ], [ %398, %397 ]
  %401 = trunc i32 %1 to i8
  %402 = load i8*, i8** %180, align 8
  %403 = icmp ult i8* %400, %402
  %404 = ptrtoint i8* %402 to i64
  br i1 %403, label %405, label %409

405:                                              ; preds = %399
  store i8 %401, i8* %400, align 1
  %406 = getelementptr inbounds i8, i8* %400, i64 1
  %407 = ptrtoint i8* %406 to i64
  %408 = bitcast i8** %178 to i64*
  store i64 %407, i64* %408, align 8
  br label %454

409:                                              ; preds = %399
  %410 = ptrtoint i8* %400 to i64
  %411 = bitcast i8** %178 to i64*
  %412 = bitcast %"class.std::__1::vector"* %0 to i64*
  %413 = load i64, i64* %412, align 8
  %414 = sub i64 %410, %413
  %415 = add i64 %414, 1
  %416 = icmp slt i64 %415, 0
  br i1 %416, label %417, label %419

417:                                              ; preds = %409
  %418 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %418) #8
  unreachable

419:                                              ; preds = %409
  %420 = bitcast i8** %180 to i64*
  %421 = sub i64 %404, %413
  %422 = icmp ult i64 %421, 4611686018427387903
  br i1 %422, label %423, label %428

423:                                              ; preds = %419
  %424 = shl i64 %421, 1
  %425 = icmp ult i64 %424, %415
  %426 = select i1 %425, i64 %415, i64 %424
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %431, label %428

428:                                              ; preds = %423, %419
  %429 = phi i64 [ %426, %423 ], [ 9223372036854775807, %419 ]
  %430 = tail call i8* @_Znwm(i64 %429) #9
  br label %431

431:                                              ; preds = %428, %423
  %432 = phi i64 [ %429, %428 ], [ 0, %423 ]
  %433 = phi i8* [ %430, %428 ], [ null, %423 ]
  %434 = getelementptr inbounds i8, i8* %433, i64 %414
  %435 = getelementptr inbounds i8, i8* %433, i64 %432
  %436 = ptrtoint i8* %435 to i64
  store i8 %401, i8* %434, align 1
  %437 = getelementptr inbounds i8, i8* %434, i64 1
  %438 = ptrtoint i8* %437 to i64
  %439 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %440 = load i8*, i8** %439, align 8
  %441 = load i64, i64* %411, align 8
  %442 = ptrtoint i8* %440 to i64
  %443 = sub i64 %441, %442
  %444 = sub i64 0, %443
  %445 = getelementptr inbounds i8, i8* %434, i64 %444
  %446 = ptrtoint i8* %445 to i64
  %447 = icmp sgt i64 %443, 0
  br i1 %447, label %448, label %450

448:                                              ; preds = %431
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %445, i8* align 1 %440, i64 %443, i1 false) #10
  %449 = load i8*, i8** %439, align 8
  br label %450

450:                                              ; preds = %448, %431
  %451 = phi i8* [ %440, %431 ], [ %449, %448 ]
  store i64 %446, i64* %412, align 8
  store i64 %438, i64* %411, align 8
  store i64 %436, i64* %420, align 8
  %452 = icmp eq i8* %451, null
  br i1 %452, label %454, label %453

453:                                              ; preds = %450
  tail call void @_ZdlPv(i8* nonnull %451) #9
  br label %454

454:                                              ; preds = %453, %450, %405, %290, %287, %242, %175, %172, %127, %60, %57, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5woff214Store255UShortEiPmPh(i32, i64* nocapture, i8* nocapture) local_unnamed_addr #2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #10
  call void @_ZN5woff214Write255UShortEPNSt3__16vectorIhNS0_9allocatorIhEEEEi(%"class.std::__1::vector"* nonnull %4, i32 %0)
  %8 = load i8*, i8** %6, align 8
  %9 = load i8*, i8** %7, align 8
  %10 = icmp eq i8* %8, %9
  br i1 %10, label %11, label %17

11:                                               ; preds = %17, %3
  %12 = icmp eq i8* %8, null
  br i1 %12, label %16, label %13

13:                                               ; preds = %11
  %14 = ptrtoint i8* %8 to i64
  %15 = bitcast i8** %7 to i64*
  store i64 %14, i64* %15, align 8
  call void @_ZdlPv(i8* nonnull %8) #9
  br label %16

16:                                               ; preds = %11, %13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #10
  ret void

17:                                               ; preds = %3, %17
  %18 = phi i8* [ %23, %17 ], [ %8, %3 ]
  %19 = load i8, i8* %18, align 1
  %20 = load i64, i64* %1, align 8
  %21 = add i64 %20, 1
  store i64 %21, i64* %1, align 8
  %22 = getelementptr inbounds i8, i8* %2, i64 %20
  store i8 %19, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %18, i64 1
  %24 = icmp eq i8* %23, %9
  br i1 %24, label %11, label %17
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5woff213Read255UShortEPNS_6BufferEPj(%"class.woff2::Buffer"* nocapture, i32* nocapture) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %"class.woff2::Buffer", %"class.woff2::Buffer"* %0, i64 0, i32 2
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 1
  %6 = getelementptr inbounds %"class.woff2::Buffer", %"class.woff2::Buffer"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ugt i64 %5, %7
  br i1 %8, label %41, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.woff2::Buffer", %"class.woff2::Buffer"* %0, i64 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %4
  %13 = load i8, i8* %12, align 1
  store i64 %5, i64* %3, align 8
  switch i8 %13, label %39 [
    i8 -3, label %14
    i8 -1, label %23
    i8 -2, label %31
  ]

14:                                               ; preds = %9
  %15 = add i64 %4, 3
  %16 = icmp ugt i64 %15, %7
  br i1 %16, label %41, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds i8, i8* %11, i64 %5
  %19 = bitcast i8* %18 to i16*
  %20 = load i16, i16* %19, align 1
  %21 = tail call i16 @llvm.bswap.i16(i16 %20) #10
  store i64 %15, i64* %3, align 8
  %22 = zext i16 %21 to i32
  store i32 %22, i32* %1, align 4
  br label %41

23:                                               ; preds = %9
  %24 = add i64 %4, 2
  %25 = icmp ugt i64 %24, %7
  br i1 %25, label %41, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds i8, i8* %11, i64 %5
  %28 = load i8, i8* %27, align 1
  store i64 %24, i64* %3, align 8
  %29 = zext i8 %28 to i32
  %30 = add nuw nsw i32 %29, 253
  store i32 %30, i32* %1, align 4
  br label %41

31:                                               ; preds = %9
  %32 = add i64 %4, 2
  %33 = icmp ugt i64 %32, %7
  br i1 %33, label %41, label %34

34:                                               ; preds = %31
  %35 = getelementptr inbounds i8, i8* %11, i64 %5
  %36 = load i8, i8* %35, align 1
  store i64 %32, i64* %3, align 8
  %37 = zext i8 %36 to i32
  %38 = add nuw nsw i32 %37, 506
  store i32 %38, i32* %1, align 4
  br label %41

39:                                               ; preds = %9
  %40 = zext i8 %13 to i32
  store i32 %40, i32* %1, align 4
  br label %41

41:                                               ; preds = %34, %31, %26, %23, %17, %14, %2, %39
  %42 = phi i1 [ true, %39 ], [ false, %2 ], [ true, %17 ], [ false, %14 ], [ true, %26 ], [ false, %23 ], [ true, %34 ], [ false, %31 ]
  ret i1 %42
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5woff211ReadBase128EPNS_6BufferEPj(%"class.woff2::Buffer"* nocapture, i32* nocapture) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %"class.woff2::Buffer", %"class.woff2::Buffer"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.woff2::Buffer", %"class.woff2::Buffer"* %0, i64 0, i32 1
  %5 = load i64, i64* %3, align 8
  %6 = add i64 %5, 1
  %7 = load i64, i64* %4, align 8
  %8 = icmp ugt i64 %6, %7
  br i1 %8, label %24, label %12

9:                                                ; preds = %18
  %10 = add i64 %5, 2
  %11 = icmp ugt i64 %10, %7
  br i1 %11, label %24, label %26

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.woff2::Buffer", %"class.woff2::Buffer"* %0, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %5
  %16 = load i8, i8* %15, align 1
  store i64 %6, i64* %3, align 8
  %17 = icmp eq i8 %16, -128
  br i1 %17, label %24, label %18

18:                                               ; preds = %12
  %19 = and i8 %16, 127
  %20 = zext i8 %19 to i32
  %21 = icmp sgt i8 %16, -1
  br i1 %21, label %22, label %9

22:                                               ; preds = %63, %48, %37, %26, %18
  %23 = phi i32 [ %20, %18 ], [ %32, %26 ], [ %43, %37 ], [ %54, %48 ], [ %67, %63 ]
  store i32 %23, i32* %1, align 4
  br label %24

24:                                               ; preds = %63, %2, %12, %9, %34, %45, %56, %59, %22
  %25 = phi i1 [ true, %22 ], [ false, %59 ], [ false, %56 ], [ false, %45 ], [ false, %34 ], [ false, %9 ], [ false, %12 ], [ false, %2 ], [ false, %63 ]
  ret i1 %25

26:                                               ; preds = %9
  %27 = getelementptr inbounds i8, i8* %14, i64 %6
  %28 = load i8, i8* %27, align 1
  store i64 %10, i64* %3, align 8
  %29 = shl nuw nsw i32 %20, 7
  %30 = and i8 %28, 127
  %31 = zext i8 %30 to i32
  %32 = or i32 %29, %31
  %33 = icmp sgt i8 %28, -1
  br i1 %33, label %22, label %34

34:                                               ; preds = %26
  %35 = add i64 %5, 3
  %36 = icmp ugt i64 %35, %7
  br i1 %36, label %24, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds i8, i8* %14, i64 %10
  %39 = load i8, i8* %38, align 1
  store i64 %35, i64* %3, align 8
  %40 = shl nuw nsw i32 %32, 7
  %41 = and i8 %39, 127
  %42 = zext i8 %41 to i32
  %43 = or i32 %40, %42
  %44 = icmp sgt i8 %39, -1
  br i1 %44, label %22, label %45

45:                                               ; preds = %37
  %46 = add i64 %5, 4
  %47 = icmp ugt i64 %46, %7
  br i1 %47, label %24, label %48

48:                                               ; preds = %45
  %49 = getelementptr inbounds i8, i8* %14, i64 %35
  %50 = load i8, i8* %49, align 1
  store i64 %46, i64* %3, align 8
  %51 = shl nuw nsw i32 %43, 7
  %52 = and i8 %50, 127
  %53 = zext i8 %52 to i32
  %54 = or i32 %51, %53
  %55 = icmp sgt i8 %50, -1
  br i1 %55, label %22, label %56

56:                                               ; preds = %48
  %57 = add i64 %5, 5
  %58 = icmp ugt i64 %57, %7
  br i1 %58, label %24, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds i8, i8* %14, i64 %46
  %61 = load i8, i8* %60, align 1
  store i64 %57, i64* %3, align 8
  %62 = icmp ugt i32 %54, 33554431
  br i1 %62, label %24, label %63

63:                                               ; preds = %59
  %64 = shl i32 %54, 7
  %65 = and i8 %61, 127
  %66 = zext i8 %65 to i32
  %67 = or i32 %64, %66
  %68 = icmp sgt i8 %61, -1
  br i1 %68, label %22, label %24
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN5woff211Base128SizeEm(i64) local_unnamed_addr #0 {
  %2 = icmp ugt i64 %0, 127
  br i1 %2, label %3, label %9

3:                                                ; preds = %1, %3
  %4 = phi i64 [ %6, %3 ], [ 1, %1 ]
  %5 = phi i64 [ %7, %3 ], [ %0, %1 ]
  %6 = add nuw nsw i64 %4, 1
  %7 = lshr i64 %5, 7
  %8 = icmp ugt i64 %5, 16383
  br i1 %8, label %3, label %9

9:                                                ; preds = %3, %1
  %10 = phi i64 [ 1, %1 ], [ %6, %3 ]
  ret i64 %10
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5woff212StoreBase128EmPmPh(i64, i64* nocapture, i8* nocapture) local_unnamed_addr #3 {
  %4 = icmp ugt i64 %0, 127
  br i1 %4, label %5, label %11

5:                                                ; preds = %3, %5
  %6 = phi i64 [ %8, %5 ], [ 1, %3 ]
  %7 = phi i64 [ %9, %5 ], [ %0, %3 ]
  %8 = add nuw nsw i64 %6, 1
  %9 = lshr i64 %7, 7
  %10 = icmp ugt i64 %7, 16383
  br i1 %10, label %5, label %11

11:                                               ; preds = %5, %3
  %12 = phi i64 [ 1, %3 ], [ %8, %5 ]
  %13 = add i64 %12, -1
  br label %15

14:                                               ; preds = %15
  ret void

15:                                               ; preds = %15, %11
  %16 = phi i64 [ 0, %11 ], [ %30, %15 ]
  %17 = xor i64 %16, -1
  %18 = add nsw i64 %12, %17
  %19 = mul nsw i64 %18, 7
  %20 = lshr i64 %0, %19
  %21 = trunc i64 %20 to i32
  %22 = and i32 %21, 127
  %23 = icmp ult i64 %16, %13
  %24 = or i32 %21, 128
  %25 = select i1 %23, i32 %24, i32 %22
  %26 = trunc i32 %25 to i8
  %27 = load i64, i64* %1, align 8
  %28 = add i64 %27, 1
  store i64 %28, i64* %1, align 8
  %29 = getelementptr inbounds i8, i8* %2, i64 %27
  store i8 %26, i8* %29, align 1
  %30 = add nuw nsw i64 %16, 1
  %31 = icmp eq i64 %30, %12
  br i1 %31, label %14, label %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #7

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
