; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/vulkan/SeparateStructFromUniformDeclarations.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/vulkan/SeparateStructFromUniformDeclarations.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::ImmutableString" = type { i8*, i64 }
%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.sh::TSymbolTable" = type { %"class.sh::TSymbolTableBase", %"class.std::__1::vector.1", %"class.std::__1::vector.6", i8, i32, i32, i32, %struct.ShBuiltInResources, %"class.std::__1::map", %"class.sh::TVariable"* }
%"class.sh::TSymbolTableBase" = type { %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"*, %"class.sh::TSymbol"* }
%"class.sh::TSymbol" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.std::__1::unique_ptr.8"*, %"class.std::__1::unique_ptr.8"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::unique_ptr.8" = type opaque
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::unique_ptr.8"* }
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array", %"struct.std::__1::array", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [3 x i32] }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { i64 }
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.22"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.22" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.23"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.23" = type { %"class.std::__1::vector.24" }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"class.sh::TField"**, %"class.sh::TField"**, %"class.std::__1::__compressed_pair.26" }
%"class.sh::TField" = type <{ %"class.sh::TType"*, %"class.sh::ImmutableString", %"struct.sh::TSourceLoc", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.sh::TField"** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::TConstantUnion" = type { %union.anon.36, i32 }
%union.anon.36 = type { i32 }
%"class.sh::(anonymous namespace)::Traverser" = type { %"class.sh::TIntermTraverser", %"class.absl::flat_hash_map" }
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector.37", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.44", %"class.std::__1::vector.51", %"class.sh::TVector", %"class.std::__1::vector.58" }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.39" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.46" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.53" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.std::__1::vector.58" = type { %"class.std::__1::__vector_base.59" }
%"class.std::__1::__vector_base.59" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.60" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"class.sh::TVariable"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.72", i8, [7 x i8] }>
%"class.sh::TVector.72" = type { %"class.std::__1::vector.73" }
%"class.std::__1::vector.73" = type { %"class.std::__1::__vector_base.74" }
%"class.std::__1::__vector_base.74" = type { i32*, i32*, %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { i32* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.80"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TVector.80" = type opaque
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.angle::PoolAllocator" = type <{ i64, i64, i64, i64, i64, %"struct.angle::PoolAllocator::Header"*, %"struct.angle::PoolAllocator::Header"*, %"class.std::__1::vector.99", i32, [4 x i8], i64, i8, [7 x i8] }>
%"struct.angle::PoolAllocator::Header" = type { %"struct.angle::PoolAllocator::Header"*, i64 }
%"class.std::__1::vector.99" = type { %"class.std::__1::__vector_base.100" }
%"class.std::__1::__vector_base.100" = type { %"struct.angle::PoolAllocator::AllocState"*, %"struct.angle::PoolAllocator::AllocState"*, %"class.std::__1::__compressed_pair.101" }
%"struct.angle::PoolAllocator::AllocState" = type { i64, %"struct.angle::PoolAllocator::Header"* }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"struct.angle::PoolAllocator::AllocState"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }

$_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE27drop_deletes_without_resizeEv = comdat any

$_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_ = comdat any

$_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = comdat any

@_ZTVN2sh12_GLOBAL__N_19TraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::(anonymous namespace)::Traverser"*)* @_ZN2sh12_GLOBAL__N_19TraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::Traverser"*)* @_ZN2sh12_GLOBAL__N_19TraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::Traverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh12_GLOBAL__N_19Traverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::(anonymous namespace)::Traverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh12_GLOBAL__N_19Traverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8
@_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = linkonce_odr hidden constant [16 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", comdat, align 16
@_ZN4absl13hash_internal15MixingHashState5kSeedE = external local_unnamed_addr constant i8*, align 8
@_ZN2shL21kEmptyImmutableStringE = internal constant %"class.sh::ImmutableString" { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0), i64 0 }, align 8
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZTVN2sh18TIntermDeclarationE = external unnamed_addr constant { [31 x i8*], [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh37SeparateStructFromUniformDeclarationsEPNS_9TCompilerEPNS_12TIntermBlockEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermBlock"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %4 = alloca %"class.sh::(anonymous namespace)::Traverser", align 8
  %5 = bitcast %"class.sh::(anonymous namespace)::Traverser"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %5) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 192, i1 false)
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %4, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %6, i1 zeroext true, i1 zeroext false, i1 zeroext false, %"class.sh::TSymbolTable"* %2) #6
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_19TraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %8, align 8
  %9 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %4, i64 0, i32 1, i32 0, i32 0, i32 1
  %10 = bitcast %"union.absl::container_internal::map_slot_type"** %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #6
  call void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"* %1, %"class.sh::TIntermTraverser"* nonnull %6) #6
  %11 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %1, i64 0, i32 0
  %12 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %6, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %11) #6
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_19TraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %13 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %4, i64 0, i32 1, i32 0, i32 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %3
  %17 = load i8*, i8** %8, align 8
  call void @_ZdlPv(i8* %17) #13
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %8, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #6
  br label %18

18:                                               ; preds = %3, %16
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %5) #6
  ret i1 %12
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2sh12TIntermBlock8traverseEPNS_16TIntermTraverserE(%"class.sh::TIntermBlock"*, %"class.sh::TIntermTraverser"*) unnamed_addr #2

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_19TraverserD2Ev(%"class.sh::(anonymous namespace)::Traverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_19TraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #13
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %8, align 8
  %10 = bitcast %"union.absl::container_internal::map_slot_type"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #6
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %12) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_19TraverserD0Ev(%"class.sh::(anonymous namespace)::Traverser"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_19TraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 3
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  tail call void @_ZdlPv(i8* %9) #13
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %8, align 8
  %10 = bitcast %"union.absl::container_internal::map_slot_type"** %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 32, i1 false) #6
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %12) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_19Traverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::(anonymous namespace)::Traverser"*, %"class.sh::TIntermSymbol"* nocapture readonly) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %1, i64 0, i32 1
  %4 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %3, align 8
  %5 = ptrtoint %"class.sh::TVariable"* %4 to i64
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1
  %7 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %8 = add i64 %7, %5
  %9 = zext i64 %8 to i128
  %10 = mul nuw i128 %9, 11376068507788127593
  %11 = lshr i128 %10, 64
  %12 = xor i128 %11, %10
  %13 = trunc i128 %12 to i64
  %14 = add i64 %13, %5
  %15 = zext i64 %14 to i128
  %16 = mul nuw i128 %15, 11376068507788127593
  %17 = lshr i128 %16, 64
  %18 = xor i128 %17, %16
  %19 = trunc i128 %18 to i64
  %20 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %6, i64 0, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 3
  %23 = load i64, i64* %22, align 8
  %24 = lshr i64 %19, 7
  %25 = ptrtoint i8* %21 to i64
  %26 = lshr i64 %25, 12
  %27 = xor i64 %24, %26
  %28 = trunc i128 %18 to i8
  %29 = and i8 %28, 127
  %30 = insertelement <16 x i8> undef, i8 %29, i32 0
  %31 = shufflevector <16 x i8> %30, <16 x i8> undef, <16 x i32> zeroinitializer
  %32 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  br label %33

33:                                               ; preds = %63, %2
  %34 = phi i64 [ %27, %2 ], [ %65, %63 ]
  %35 = phi i64 [ 0, %2 ], [ %64, %63 ]
  %36 = and i64 %34, %23
  %37 = getelementptr inbounds i8, i8* %21, i64 %36
  %38 = bitcast i8* %37 to <16 x i8>*
  %39 = load <16 x i8>, <16 x i8>* %38, align 1
  %40 = icmp eq <16 x i8> %31, %39
  %41 = bitcast <16 x i1> %40 to i16
  %42 = icmp eq i16 %41, 0
  br i1 %42, label %59, label %43

43:                                               ; preds = %33
  %44 = zext i16 %41 to i32
  %45 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %32, align 8
  br label %46

46:                                               ; preds = %55, %43
  %47 = phi i32 [ %44, %43 ], [ %57, %55 ]
  %48 = tail call i32 @llvm.cttz.i32(i32 %47, i1 false) #6, !range !2
  %49 = zext i32 %48 to i64
  %50 = add i64 %36, %49
  %51 = and i64 %50, %23
  %52 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %45, i64 %51, i32 0, i32 0
  %53 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %52, align 8
  %54 = icmp eq %"class.sh::TVariable"* %53, %4
  br i1 %54, label %66, label %55, !prof !3

55:                                               ; preds = %46
  %56 = add i32 %47, -1
  %57 = and i32 %56, %47
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %46

59:                                               ; preds = %55, %33
  %60 = icmp eq <16 x i8> %39, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %61 = bitcast <16 x i1> %60 to i16
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %63, label %133, !prof !4

63:                                               ; preds = %59
  %64 = add i64 %35, 16
  %65 = add i64 %64, %36
  br label %33

66:                                               ; preds = %46
  %67 = getelementptr inbounds i8, i8* %21, i64 %51
  %68 = icmp ne i8* %67, null
  tail call void @llvm.assume(i1 %68) #6
  %69 = load i8, i8* %67, align 1
  %70 = icmp sgt i8 %69, -1
  br i1 %70, label %72, label %71, !prof !3

71:                                               ; preds = %66
  tail call void @llvm.trap() #6
  unreachable

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0
  %74 = getelementptr inbounds %"class.absl::flat_hash_map", %"class.absl::flat_hash_map"* %6, i64 0, i32 0, i32 0
  br label %75

75:                                               ; preds = %104, %72
  %76 = phi i64 [ %27, %72 ], [ %106, %104 ]
  %77 = phi i64 [ 0, %72 ], [ %105, %104 ]
  %78 = and i64 %76, %23
  %79 = getelementptr inbounds i8, i8* %21, i64 %78
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1
  %82 = icmp eq <16 x i8> %31, %81
  %83 = bitcast <16 x i1> %82 to i16
  %84 = icmp eq i16 %83, 0
  br i1 %84, label %100, label %85

85:                                               ; preds = %75
  %86 = zext i16 %83 to i32
  br label %87

87:                                               ; preds = %96, %85
  %88 = phi i32 [ %86, %85 ], [ %98, %96 ]
  %89 = tail call i32 @llvm.cttz.i32(i32 %88, i1 false) #6, !range !2
  %90 = zext i32 %89 to i64
  %91 = add i64 %78, %90
  %92 = and i64 %91, %23
  %93 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %45, i64 %92, i32 0, i32 0
  %94 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %93, align 8
  %95 = icmp eq %"class.sh::TVariable"* %94, %4
  br i1 %95, label %115, label %96, !prof !3

96:                                               ; preds = %87
  %97 = add i32 %88, -1
  %98 = and i32 %97, %88
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %87

100:                                              ; preds = %96, %75
  %101 = icmp eq <16 x i8> %81, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %102 = bitcast <16 x i1> %101 to i16
  %103 = icmp eq i16 %102, 0
  br i1 %103, label %104, label %107, !prof !4

104:                                              ; preds = %100
  %105 = add i64 %77, 16
  %106 = add i64 %105, %78
  br label %75

107:                                              ; preds = %100
  %108 = tail call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* %74, i64 %19) #6
  %109 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %32, align 8, !noalias !5
  %110 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %109, i64 %108
  %111 = bitcast %"union.absl::container_internal::map_slot_type"* %110 to i64*
  store i64 %5, i64* %111, align 8, !noalias !5
  %112 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %109, i64 %108, i32 0, i32 1
  store %"class.sh::TIntermTyped"* null, %"class.sh::TIntermTyped"** %112, align 8, !noalias !5
  %113 = load i8*, i8** %20, align 8, !noalias !5
  %114 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %32, align 8, !noalias !5
  br label %115

115:                                              ; preds = %87, %107
  %116 = phi %"union.absl::container_internal::map_slot_type"* [ %114, %107 ], [ %45, %87 ]
  %117 = phi i8* [ %113, %107 ], [ %21, %87 ]
  %118 = phi i64 [ %108, %107 ], [ %92, %87 ]
  %119 = getelementptr inbounds i8, i8* %117, i64 %118
  %120 = icmp ne i8* %119, null
  tail call void @llvm.assume(i1 %120) #6, !noalias !5
  %121 = load i8, i8* %119, align 1
  %122 = icmp sgt i8 %121, -1
  br i1 %122, label %124, label %123, !prof !3

123:                                              ; preds = %115
  tail call void @llvm.trap() #6
  unreachable

124:                                              ; preds = %115
  %125 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %116, i64 %118, i32 0, i32 1
  %126 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %125, align 8
  %127 = bitcast %"class.sh::TIntermTyped"* %126 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)***
  %128 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*** %127, align 8
  %129 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %128, i64 23
  %130 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermTyped"*)** %129, align 8
  %131 = tail call %"class.sh::TIntermTyped"* %130(%"class.sh::TIntermTyped"* %126) #6
  %132 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %131, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %73, %"class.sh::TIntermNode"* %132, i32 1) #6
  br label %133

133:                                              ; preds = %59, %124
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2sh12_GLOBAL__N_19Traverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::(anonymous namespace)::Traverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #4 align 2 {
  %4 = alloca %"class.sh::TIntermDeclaration"*, align 8
  %5 = alloca %"class.sh::TVector", align 16
  %6 = alloca %"class.sh::ImmutableString", align 8
  %7 = alloca %"class.sh::TIntermBlock"*, align 8
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0, i32 6
  %9 = load i8, i8* %8, align 4, !range !10
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %666, label %11

11:                                               ; preds = %3
  %12 = bitcast %"class.sh::TIntermDeclaration"* %2 to %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)***
  %13 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)**, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*** %12, align 8
  %14 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %13, i64 27
  %15 = load %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)*, %"class.sh::TVector"* (%"class.sh::TIntermDeclaration"*)** %14, align 8
  %16 = tail call %"class.sh::TVector"* %15(%"class.sh::TIntermDeclaration"* %2) #6
  %17 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %16, i64 0, i32 0, i32 0, i32 0
  %18 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %17, align 8
  %19 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %18, align 8
  %20 = bitcast %"class.sh::TIntermNode"* %19 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %21 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %20, align 8
  %22 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %21, i64 4
  %23 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %22, align 8
  %24 = tail call %"class.sh::TIntermTyped"* %23(%"class.sh::TIntermNode"* %19) #6
  %25 = bitcast %"class.sh::TIntermTyped"* %24 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %26 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %26, i64 31
  %28 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %27, align 8
  %29 = tail call dereferenceable(184) %"class.sh::TType"* %28(%"class.sh::TIntermTyped"* %24) #6
  %30 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %29, i64 0, i32 14
  %31 = load i8, i8* %30, align 8, !range !10
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %666, label %33

33:                                               ; preds = %11
  %34 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %29, i64 0, i32 2
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, 6
  br i1 %36, label %37, label %666

37:                                               ; preds = %33
  %38 = bitcast %"class.sh::TIntermDeclaration"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38)
  store %"class.sh::TIntermDeclaration"* %2, %"class.sh::TIntermDeclaration"** %4, align 8
  %39 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %29, i64 0, i32 13
  %40 = load %"class.sh::TStructure"*, %"class.sh::TStructure"** %39, align 8
  %41 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %40, i64 0, i32 0, i32 2
  %42 = load i8, i8* %41, align 4
  %43 = icmp eq i8 %42, 3
  br i1 %43, label %44, label %52

44:                                               ; preds = %37
  %45 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %46 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %45, i64 80) #6
  %47 = bitcast i8* %46 to %"class.sh::TStructure"*
  %48 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0, i32 8
  %49 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %48, align 8
  %50 = getelementptr inbounds %"class.sh::TStructure", %"class.sh::TStructure"* %40, i64 0, i32 2, i32 0
  %51 = load %"class.sh::TVector.23"*, %"class.sh::TVector.23"** %50, align 8
  tail call void @_ZN2sh10TStructureC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_7TVectorIPNS_6TFieldEEENS_10SymbolTypeE(%"class.sh::TStructure"* %47, %"class.sh::TSymbolTable"* %49, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2shL21kEmptyImmutableStringE, %"class.sh::TVector.23"* %51, i8 zeroext 2) #6
  br label %52

52:                                               ; preds = %44, %37
  %53 = phi %"class.sh::TStructure"* [ %47, %44 ], [ %40, %37 ]
  %54 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %55 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %54, i64 184) #6
  %56 = bitcast i8* %55 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1EPKNS_10TStructureEb(%"class.sh::TType"* %56, %"class.sh::TStructure"* %53, i1 zeroext true) #6
  %57 = getelementptr inbounds i8, i8* %55, i64 8
  %58 = bitcast i8* %57 to i32*
  store i32 1, i32* %58, align 8
  %59 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %60 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %59, i64 40) #6
  %61 = bitcast i8* %60 to %"class.sh::TVariable"*
  %62 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0, i32 8
  %63 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %62, align 8
  tail call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %61, %"class.sh::TSymbolTable"* %63, %"class.sh::ImmutableString"* nonnull dereferenceable(16) @_ZN2shL21kEmptyImmutableStringE, %"class.sh::TType"* %56, i8 zeroext 3, i8 zeroext 0) #6
  %64 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %65 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %64, i64 32) #6
  %66 = bitcast i8* %65 to %"class.sh::TIntermSymbol"*
  tail call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %66, %"class.sh::TVariable"* %61) #6
  %67 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %68 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %67, i64 56) #6
  %69 = bitcast i8* %68 to %"class.sh::TIntermDeclaration"*
  %70 = bitcast i8* %68 to i32 (...)***
  %71 = getelementptr inbounds i8, i8* %68, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %71, i8 0, i64 16, i1 false) #6
  %72 = getelementptr inbounds i8, i8* %68, i64 24
  %73 = bitcast i8* %72 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %70, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %73, align 8
  %74 = getelementptr inbounds i8, i8* %68, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %74, i8 0, i64 24, i1 false) #6
  %75 = bitcast i8* %65 to %"class.sh::TIntermTyped"*
  tail call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %69, %"class.sh::TIntermTyped"* %75) #6
  %76 = bitcast %"class.sh::TVector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %76) #6
  %77 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %5, i64 0, i32 0, i32 0, i32 0
  %78 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %5, i64 0, i32 0, i32 0, i32 1
  %79 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %5, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %76, i8 0, i64 24, i1 false) #6
  %80 = ptrtoint i8* %68 to i64
  %81 = bitcast %"class.sh::TIntermNode"*** %78 to i64*
  %82 = bitcast %"class.sh::TVector"* %5 to i64*
  %83 = bitcast %"class.sh::TIntermNode"*** %79 to i64*
  %84 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %85 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %84, i64 8) #6
  %86 = bitcast i8* %85 to %"class.sh::TIntermNode"**
  %87 = getelementptr inbounds i8, i8* %85, i64 8
  %88 = ptrtoint i8* %87 to i64
  %89 = bitcast i8* %85 to i64*
  store i64 %80, i64* %89, align 8
  %90 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %77, align 16
  %91 = ptrtoint %"class.sh::TIntermNode"** %90 to i64
  %92 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %78, align 8
  %93 = bitcast %"class.sh::TIntermNode"** %92 to i8*
  %94 = icmp eq %"class.sh::TIntermNode"** %92, %90
  br i1 %94, label %268, label %95

95:                                               ; preds = %52
  %96 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 -1
  %97 = ptrtoint %"class.sh::TIntermNode"** %96 to i64
  %98 = sub i64 %97, %91
  %99 = lshr i64 %98, 3
  %100 = add nuw nsw i64 %99, 1
  %101 = icmp ult i64 %100, 4
  br i1 %101, label %198, label %102

102:                                              ; preds = %95
  %103 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 -1
  %104 = ptrtoint %"class.sh::TIntermNode"** %103 to i64
  %105 = sub i64 %104, %91
  %106 = lshr i64 %105, 3
  %107 = and i64 %105, -8
  %108 = xor i64 %107, -8
  %109 = getelementptr i8, i8* %85, i64 %108
  %110 = xor i64 %106, -1
  %111 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 %110
  %112 = bitcast %"class.sh::TIntermNode"** %111 to i8*
  %113 = icmp ult i8* %109, %93
  %114 = icmp ugt i8* %85, %112
  %115 = and i1 %113, %114
  br i1 %115, label %198, label %116

116:                                              ; preds = %102
  %117 = and i64 %100, 4611686018427387900
  %118 = sub nsw i64 0, %117
  %119 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %86, i64 %118
  %120 = sub nsw i64 0, %117
  %121 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 %120
  %122 = add nsw i64 %117, -4
  %123 = lshr exact i64 %122, 2
  %124 = add nuw nsw i64 %123, 1
  %125 = and i64 %124, 1
  %126 = icmp eq i64 %122, 0
  br i1 %126, label %173, label %127

127:                                              ; preds = %116
  %128 = sub nuw nsw i64 %124, %125
  %129 = getelementptr i8, i8* %85, i64 -8
  %130 = bitcast i8* %129 to %"class.sh::TIntermNode"**
  %131 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 -1
  %132 = getelementptr i8, i8* %85, i64 -8
  %133 = bitcast i8* %132 to %"class.sh::TIntermNode"**
  %134 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 -1
  br label %135

135:                                              ; preds = %135, %127
  %136 = phi i64 [ 0, %127 ], [ %170, %135 ]
  %137 = phi i64 [ %128, %127 ], [ %171, %135 ]
  %138 = sub i64 0, %136
  %139 = sub i64 0, %136
  %140 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %130, i64 %138
  %141 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %131, i64 %139
  %142 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %141, i64 -1
  %143 = bitcast %"class.sh::TIntermNode"** %142 to <2 x i64>*
  %144 = load <2 x i64>, <2 x i64>* %143, align 8, !alias.scope !11
  %145 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %141, i64 -2
  %146 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %145, i64 -1
  %147 = bitcast %"class.sh::TIntermNode"** %146 to <2 x i64>*
  %148 = load <2 x i64>, <2 x i64>* %147, align 8, !alias.scope !11
  %149 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %140, i64 -1
  %150 = bitcast %"class.sh::TIntermNode"** %149 to <2 x i64>*
  store <2 x i64> %144, <2 x i64>* %150, align 8, !alias.scope !14, !noalias !11
  %151 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %140, i64 -2
  %152 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %151, i64 -1
  %153 = bitcast %"class.sh::TIntermNode"** %152 to <2 x i64>*
  store <2 x i64> %148, <2 x i64>* %153, align 8, !alias.scope !14, !noalias !11
  %154 = sub nuw nsw i64 -4, %136
  %155 = sub nuw nsw i64 -4, %136
  %156 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %133, i64 %154
  %157 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %134, i64 %155
  %158 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %157, i64 -1
  %159 = bitcast %"class.sh::TIntermNode"** %158 to <2 x i64>*
  %160 = load <2 x i64>, <2 x i64>* %159, align 8, !alias.scope !11
  %161 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %157, i64 -2
  %162 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %161, i64 -1
  %163 = bitcast %"class.sh::TIntermNode"** %162 to <2 x i64>*
  %164 = load <2 x i64>, <2 x i64>* %163, align 8, !alias.scope !11
  %165 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %156, i64 -1
  %166 = bitcast %"class.sh::TIntermNode"** %165 to <2 x i64>*
  store <2 x i64> %160, <2 x i64>* %166, align 8, !alias.scope !14, !noalias !11
  %167 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %156, i64 -2
  %168 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %167, i64 -1
  %169 = bitcast %"class.sh::TIntermNode"** %168 to <2 x i64>*
  store <2 x i64> %164, <2 x i64>* %169, align 8, !alias.scope !14, !noalias !11
  %170 = add i64 %136, 8
  %171 = add i64 %137, -2
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %135, !llvm.loop !16

173:                                              ; preds = %135, %116
  %174 = phi i64 [ 0, %116 ], [ %170, %135 ]
  %175 = icmp eq i64 %125, 0
  br i1 %175, label %196, label %176

176:                                              ; preds = %173
  %177 = sub i64 0, %174
  %178 = getelementptr i8, i8* %85, i64 -8
  %179 = bitcast i8* %178 to %"class.sh::TIntermNode"**
  %180 = sub i64 0, %174
  %181 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %92, i64 -1
  %182 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %179, i64 %177
  %183 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %181, i64 %180
  %184 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -1
  %185 = bitcast %"class.sh::TIntermNode"** %184 to <2 x i64>*
  %186 = load <2 x i64>, <2 x i64>* %185, align 8, !alias.scope !11
  %187 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %183, i64 -2
  %188 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %187, i64 -1
  %189 = bitcast %"class.sh::TIntermNode"** %188 to <2 x i64>*
  %190 = load <2 x i64>, <2 x i64>* %189, align 8, !alias.scope !11
  %191 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %182, i64 -1
  %192 = bitcast %"class.sh::TIntermNode"** %191 to <2 x i64>*
  store <2 x i64> %186, <2 x i64>* %192, align 8, !alias.scope !14, !noalias !11
  %193 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %182, i64 -2
  %194 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %193, i64 -1
  %195 = bitcast %"class.sh::TIntermNode"** %194 to <2 x i64>*
  store <2 x i64> %190, <2 x i64>* %195, align 8, !alias.scope !14, !noalias !11
  br label %196

196:                                              ; preds = %173, %176
  %197 = icmp eq i64 %100, %117
  br i1 %197, label %268, label %198

198:                                              ; preds = %196, %102, %95
  %199 = phi %"class.sh::TIntermNode"** [ %86, %102 ], [ %86, %95 ], [ %119, %196 ]
  %200 = phi %"class.sh::TIntermNode"** [ %92, %102 ], [ %92, %95 ], [ %121, %196 ]
  %201 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %200, i64 -1
  %202 = ptrtoint %"class.sh::TIntermNode"** %201 to i64
  %203 = sub i64 %202, %91
  %204 = lshr i64 %203, 3
  %205 = add nuw nsw i64 %204, 1
  %206 = and i64 %205, 7
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %219, label %208

208:                                              ; preds = %198, %208
  %209 = phi %"class.sh::TIntermNode"** [ %212, %208 ], [ %199, %198 ]
  %210 = phi %"class.sh::TIntermNode"** [ %213, %208 ], [ %200, %198 ]
  %211 = phi i64 [ %217, %208 ], [ %206, %198 ]
  %212 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %209, i64 -1
  %213 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %210, i64 -1
  %214 = bitcast %"class.sh::TIntermNode"** %213 to i64*
  %215 = load i64, i64* %214, align 8
  %216 = bitcast %"class.sh::TIntermNode"** %212 to i64*
  store i64 %215, i64* %216, align 8
  %217 = add i64 %211, -1
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %219, label %208, !llvm.loop !18

219:                                              ; preds = %208, %198
  %220 = phi %"class.sh::TIntermNode"** [ undef, %198 ], [ %212, %208 ]
  %221 = phi %"class.sh::TIntermNode"** [ %199, %198 ], [ %212, %208 ]
  %222 = phi %"class.sh::TIntermNode"** [ %200, %198 ], [ %213, %208 ]
  %223 = icmp ult i64 %203, 56
  br i1 %223, label %268, label %224

224:                                              ; preds = %219, %224
  %225 = phi %"class.sh::TIntermNode"** [ %262, %224 ], [ %221, %219 ]
  %226 = phi %"class.sh::TIntermNode"** [ %263, %224 ], [ %222, %219 ]
  %227 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %225, i64 -1
  %228 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %226, i64 -1
  %229 = bitcast %"class.sh::TIntermNode"** %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = bitcast %"class.sh::TIntermNode"** %227 to i64*
  store i64 %230, i64* %231, align 8
  %232 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %225, i64 -2
  %233 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %226, i64 -2
  %234 = bitcast %"class.sh::TIntermNode"** %233 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = bitcast %"class.sh::TIntermNode"** %232 to i64*
  store i64 %235, i64* %236, align 8
  %237 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %225, i64 -3
  %238 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %226, i64 -3
  %239 = bitcast %"class.sh::TIntermNode"** %238 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = bitcast %"class.sh::TIntermNode"** %237 to i64*
  store i64 %240, i64* %241, align 8
  %242 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %225, i64 -4
  %243 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %226, i64 -4
  %244 = bitcast %"class.sh::TIntermNode"** %243 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = bitcast %"class.sh::TIntermNode"** %242 to i64*
  store i64 %245, i64* %246, align 8
  %247 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %225, i64 -5
  %248 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %226, i64 -5
  %249 = bitcast %"class.sh::TIntermNode"** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = bitcast %"class.sh::TIntermNode"** %247 to i64*
  store i64 %250, i64* %251, align 8
  %252 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %225, i64 -6
  %253 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %226, i64 -6
  %254 = bitcast %"class.sh::TIntermNode"** %253 to i64*
  %255 = load i64, i64* %254, align 8
  %256 = bitcast %"class.sh::TIntermNode"** %252 to i64*
  store i64 %255, i64* %256, align 8
  %257 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %225, i64 -7
  %258 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %226, i64 -7
  %259 = bitcast %"class.sh::TIntermNode"** %258 to i64*
  %260 = load i64, i64* %259, align 8
  %261 = bitcast %"class.sh::TIntermNode"** %257 to i64*
  store i64 %260, i64* %261, align 8
  %262 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %225, i64 -8
  %263 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %226, i64 -8
  %264 = bitcast %"class.sh::TIntermNode"** %263 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = bitcast %"class.sh::TIntermNode"** %262 to i64*
  store i64 %265, i64* %266, align 8
  %267 = icmp eq %"class.sh::TIntermNode"** %263, %90
  br i1 %267, label %268, label %224, !llvm.loop !20

268:                                              ; preds = %219, %224, %196, %52
  %269 = phi %"class.sh::TIntermNode"** [ %86, %52 ], [ %119, %196 ], [ %220, %219 ], [ %262, %224 ]
  %270 = ptrtoint %"class.sh::TIntermNode"** %269 to i64
  store i64 %270, i64* %82, align 16
  store i64 %88, i64* %81, align 8
  store i64 %88, i64* %83, align 16
  %271 = bitcast %"class.sh::TIntermTyped"* %24 to %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)***
  %272 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*** %271, align 8
  %273 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %24, i64 0, i32 0
  %274 = getelementptr inbounds %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %272, i64 19
  %275 = load %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermSymbol"* (%"class.sh::TIntermNode"*)** %274, align 8
  %276 = tail call %"class.sh::TIntermSymbol"* %275(%"class.sh::TIntermNode"* %273) #6
  %277 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %278 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %277, i64 56) #6
  %279 = bitcast i8* %278 to %"class.sh::TIntermDeclaration"*
  %280 = bitcast i8* %278 to i32 (...)***
  %281 = getelementptr inbounds i8, i8* %278, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %281, i8 0, i64 16, i1 false) #6
  %282 = getelementptr inbounds i8, i8* %278, i64 24
  %283 = bitcast i8* %282 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %280, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [31 x i8*], [6 x i8*] }, { [31 x i8*], [6 x i8*] }* @_ZTVN2sh18TIntermDeclarationE, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %283, align 8
  %284 = getelementptr inbounds i8, i8* %278, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %284, i8 0, i64 24, i1 false) #6
  %285 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %286 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %285, i64 184) #6
  %287 = bitcast i8* %286 to %"class.sh::TType"*
  tail call void @_ZN2sh5TTypeC1EPKNS_10TStructureEb(%"class.sh::TType"* %287, %"class.sh::TStructure"* %53, i1 zeroext false) #6
  %288 = getelementptr inbounds i8, i8* %286, i64 8
  %289 = bitcast i8* %288 to i32*
  store i32 6, i32* %289, align 8
  %290 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %29, i64 0, i32 10
  tail call void @_ZN2sh5TType10makeArraysERKNS_5TSpanIKjEE(%"class.sh::TType"* %287, %"class.sh::TSpan"* dereferenceable(16) %290) #6
  %291 = tail call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %292 = tail call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %291, i64 40) #6
  %293 = bitcast i8* %292 to %"class.sh::TVariable"*
  %294 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %62, align 8
  %295 = bitcast %"class.sh::ImmutableString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %295) #6
  %296 = tail call { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"* %276) #6
  %297 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 0
  %298 = extractvalue { i8*, i64 } %296, 0
  store i8* %298, i8** %297, align 8
  %299 = getelementptr inbounds %"class.sh::ImmutableString", %"class.sh::ImmutableString"* %6, i64 0, i32 1
  %300 = extractvalue { i8*, i64 } %296, 1
  store i64 %300, i64* %299, align 8
  %301 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %276, i64 0, i32 1
  %302 = bitcast %"class.sh::TVariable"** %301 to %"class.sh::TSymbol"**
  %303 = load %"class.sh::TSymbol"*, %"class.sh::TSymbol"** %302, align 8
  %304 = getelementptr inbounds %"class.sh::TSymbol", %"class.sh::TSymbol"* %303, i64 0, i32 2
  %305 = load i8, i8* %304, align 4
  call void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"* %293, %"class.sh::TSymbolTable"* %294, %"class.sh::ImmutableString"* nonnull dereferenceable(16) %6, %"class.sh::TType"* %287, i8 zeroext %305, i8 zeroext 0) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %295) #6
  %306 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %307 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %306, i64 32) #6
  %308 = bitcast i8* %307 to %"class.sh::TIntermSymbol"*
  call void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"* %308, %"class.sh::TVariable"* %293) #6
  %309 = bitcast i8* %307 to %"class.sh::TIntermTyped"*
  call void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"* %279, %"class.sh::TIntermTyped"* %309) #6
  %310 = ptrtoint i8* %278 to i64
  %311 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %78, align 8
  %312 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %79, align 16
  %313 = icmp ult %"class.sh::TIntermNode"** %311, %312
  %314 = ptrtoint %"class.sh::TIntermNode"** %312 to i64
  br i1 %313, label %315, label %319

315:                                              ; preds = %268
  %316 = bitcast %"class.sh::TIntermNode"** %311 to i64*
  store i64 %310, i64* %316, align 8
  %317 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %311, i64 1
  %318 = ptrtoint %"class.sh::TIntermNode"** %317 to i64
  store i64 %318, i64* %81, align 8
  br label %528

319:                                              ; preds = %268
  %320 = ptrtoint %"class.sh::TIntermNode"** %311 to i64
  %321 = load i64, i64* %82, align 16
  %322 = sub i64 %320, %321
  %323 = ashr exact i64 %322, 3
  %324 = add nsw i64 %323, 1
  %325 = icmp ugt i64 %324, 2305843009213693951
  br i1 %325, label %326, label %328

326:                                              ; preds = %319
  %327 = bitcast %"class.sh::TVector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %327) #14
  unreachable

328:                                              ; preds = %319
  %329 = sub i64 %314, %321
  %330 = ashr exact i64 %329, 3
  %331 = icmp ult i64 %330, 1152921504606846975
  br i1 %331, label %332, label %337

332:                                              ; preds = %328
  %333 = ashr exact i64 %329, 2
  %334 = icmp ult i64 %333, %324
  %335 = select i1 %334, i64 %324, i64 %333
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %343, label %337

337:                                              ; preds = %332, %328
  %338 = phi i64 [ %335, %332 ], [ 2305843009213693951, %328 ]
  %339 = call %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() #6
  %340 = shl i64 %338, 3
  %341 = call i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"* %339, i64 %340) #6
  %342 = bitcast i8* %341 to %"class.sh::TIntermNode"**
  br label %343

343:                                              ; preds = %337, %332
  %344 = phi i64 [ %338, %337 ], [ 0, %332 ]
  %345 = phi %"class.sh::TIntermNode"** [ %342, %337 ], [ null, %332 ]
  %346 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %345, i64 %323
  %347 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %345, i64 %344
  %348 = ptrtoint %"class.sh::TIntermNode"** %347 to i64
  %349 = bitcast %"class.sh::TIntermNode"** %346 to i64*
  store i64 %310, i64* %349, align 8
  %350 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %346, i64 1
  %351 = ptrtoint %"class.sh::TIntermNode"** %350 to i64
  %352 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %77, align 16
  %353 = ptrtoint %"class.sh::TIntermNode"** %352 to i64
  %354 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %78, align 8
  %355 = icmp eq %"class.sh::TIntermNode"** %354, %352
  br i1 %355, label %525, label %356

356:                                              ; preds = %343
  %357 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 -1
  %358 = ptrtoint %"class.sh::TIntermNode"** %357 to i64
  %359 = sub i64 %358, %353
  %360 = lshr i64 %359, 3
  %361 = add nuw nsw i64 %360, 1
  %362 = icmp ult i64 %361, 4
  br i1 %362, label %455, label %363

363:                                              ; preds = %356
  %364 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 -1
  %365 = ptrtoint %"class.sh::TIntermNode"** %364 to i64
  %366 = sub i64 %365, %353
  %367 = lshr i64 %366, 3
  %368 = xor i64 %367, -1
  %369 = add nsw i64 %323, %368
  %370 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %345, i64 %369
  %371 = xor i64 %367, -1
  %372 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 %371
  %373 = icmp ult %"class.sh::TIntermNode"** %370, %354
  %374 = icmp ult %"class.sh::TIntermNode"** %372, %346
  %375 = and i1 %373, %374
  br i1 %375, label %455, label %376

376:                                              ; preds = %363
  %377 = and i64 %361, 4611686018427387900
  %378 = sub nsw i64 0, %377
  %379 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %346, i64 %378
  %380 = sub nsw i64 0, %377
  %381 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 %380
  %382 = add nsw i64 %377, -4
  %383 = lshr exact i64 %382, 2
  %384 = add nuw nsw i64 %383, 1
  %385 = and i64 %384, 1
  %386 = icmp eq i64 %382, 0
  br i1 %386, label %433, label %387

387:                                              ; preds = %376
  %388 = sub nuw nsw i64 %384, %385
  %389 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %346, i64 -1
  %390 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 -1
  %391 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %346, i64 -1
  %392 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 -1
  br label %393

393:                                              ; preds = %393, %387
  %394 = phi i64 [ 0, %387 ], [ %428, %393 ]
  %395 = phi i64 [ %388, %387 ], [ %429, %393 ]
  %396 = sub i64 0, %394
  %397 = sub i64 0, %394
  %398 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %389, i64 %396
  %399 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %390, i64 %397
  %400 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -1
  %401 = bitcast %"class.sh::TIntermNode"** %400 to <2 x i64>*
  %402 = load <2 x i64>, <2 x i64>* %401, align 8, !alias.scope !21
  %403 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %399, i64 -2
  %404 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %403, i64 -1
  %405 = bitcast %"class.sh::TIntermNode"** %404 to <2 x i64>*
  %406 = load <2 x i64>, <2 x i64>* %405, align 8, !alias.scope !21
  %407 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %398, i64 -1
  %408 = bitcast %"class.sh::TIntermNode"** %407 to <2 x i64>*
  store <2 x i64> %402, <2 x i64>* %408, align 8, !alias.scope !24, !noalias !21
  %409 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %398, i64 -2
  %410 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %409, i64 -1
  %411 = bitcast %"class.sh::TIntermNode"** %410 to <2 x i64>*
  store <2 x i64> %406, <2 x i64>* %411, align 8, !alias.scope !24, !noalias !21
  %412 = sub nuw nsw i64 -4, %394
  %413 = sub nuw nsw i64 -4, %394
  %414 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %391, i64 %412
  %415 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %392, i64 %413
  %416 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %415, i64 -1
  %417 = bitcast %"class.sh::TIntermNode"** %416 to <2 x i64>*
  %418 = load <2 x i64>, <2 x i64>* %417, align 8, !alias.scope !21
  %419 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %415, i64 -2
  %420 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %419, i64 -1
  %421 = bitcast %"class.sh::TIntermNode"** %420 to <2 x i64>*
  %422 = load <2 x i64>, <2 x i64>* %421, align 8, !alias.scope !21
  %423 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %414, i64 -1
  %424 = bitcast %"class.sh::TIntermNode"** %423 to <2 x i64>*
  store <2 x i64> %418, <2 x i64>* %424, align 8, !alias.scope !24, !noalias !21
  %425 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %414, i64 -2
  %426 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %425, i64 -1
  %427 = bitcast %"class.sh::TIntermNode"** %426 to <2 x i64>*
  store <2 x i64> %422, <2 x i64>* %427, align 8, !alias.scope !24, !noalias !21
  %428 = add i64 %394, 8
  %429 = add i64 %395, -2
  %430 = icmp eq i64 %429, 0
  br i1 %430, label %431, label %393, !llvm.loop !26

431:                                              ; preds = %393
  %432 = sub nuw nsw i64 -8, %394
  br label %433

433:                                              ; preds = %431, %376
  %434 = phi i64 [ 0, %376 ], [ %432, %431 ]
  %435 = icmp eq i64 %385, 0
  br i1 %435, label %453, label %436

436:                                              ; preds = %433
  %437 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %346, i64 -1
  %438 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %354, i64 -1
  %439 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %437, i64 %434
  %440 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %438, i64 %434
  %441 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %440, i64 -1
  %442 = bitcast %"class.sh::TIntermNode"** %441 to <2 x i64>*
  %443 = load <2 x i64>, <2 x i64>* %442, align 8, !alias.scope !21
  %444 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %440, i64 -2
  %445 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %444, i64 -1
  %446 = bitcast %"class.sh::TIntermNode"** %445 to <2 x i64>*
  %447 = load <2 x i64>, <2 x i64>* %446, align 8, !alias.scope !21
  %448 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %439, i64 -1
  %449 = bitcast %"class.sh::TIntermNode"** %448 to <2 x i64>*
  store <2 x i64> %443, <2 x i64>* %449, align 8, !alias.scope !24, !noalias !21
  %450 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %439, i64 -2
  %451 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %450, i64 -1
  %452 = bitcast %"class.sh::TIntermNode"** %451 to <2 x i64>*
  store <2 x i64> %447, <2 x i64>* %452, align 8, !alias.scope !24, !noalias !21
  br label %453

453:                                              ; preds = %433, %436
  %454 = icmp eq i64 %361, %377
  br i1 %454, label %525, label %455

455:                                              ; preds = %453, %363, %356
  %456 = phi %"class.sh::TIntermNode"** [ %346, %363 ], [ %346, %356 ], [ %379, %453 ]
  %457 = phi %"class.sh::TIntermNode"** [ %354, %363 ], [ %354, %356 ], [ %381, %453 ]
  %458 = getelementptr %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %457, i64 -1
  %459 = ptrtoint %"class.sh::TIntermNode"** %458 to i64
  %460 = sub i64 %459, %353
  %461 = lshr i64 %460, 3
  %462 = add nuw nsw i64 %461, 1
  %463 = and i64 %462, 7
  %464 = icmp eq i64 %463, 0
  br i1 %464, label %476, label %465

465:                                              ; preds = %455, %465
  %466 = phi %"class.sh::TIntermNode"** [ %469, %465 ], [ %456, %455 ]
  %467 = phi %"class.sh::TIntermNode"** [ %470, %465 ], [ %457, %455 ]
  %468 = phi i64 [ %474, %465 ], [ %463, %455 ]
  %469 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %466, i64 -1
  %470 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %467, i64 -1
  %471 = bitcast %"class.sh::TIntermNode"** %470 to i64*
  %472 = load i64, i64* %471, align 8
  %473 = bitcast %"class.sh::TIntermNode"** %469 to i64*
  store i64 %472, i64* %473, align 8
  %474 = add i64 %468, -1
  %475 = icmp eq i64 %474, 0
  br i1 %475, label %476, label %465, !llvm.loop !27

476:                                              ; preds = %465, %455
  %477 = phi %"class.sh::TIntermNode"** [ undef, %455 ], [ %469, %465 ]
  %478 = phi %"class.sh::TIntermNode"** [ %456, %455 ], [ %469, %465 ]
  %479 = phi %"class.sh::TIntermNode"** [ %457, %455 ], [ %470, %465 ]
  %480 = icmp ult i64 %460, 56
  br i1 %480, label %525, label %481

481:                                              ; preds = %476, %481
  %482 = phi %"class.sh::TIntermNode"** [ %519, %481 ], [ %478, %476 ]
  %483 = phi %"class.sh::TIntermNode"** [ %520, %481 ], [ %479, %476 ]
  %484 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %482, i64 -1
  %485 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %483, i64 -1
  %486 = bitcast %"class.sh::TIntermNode"** %485 to i64*
  %487 = load i64, i64* %486, align 8
  %488 = bitcast %"class.sh::TIntermNode"** %484 to i64*
  store i64 %487, i64* %488, align 8
  %489 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %482, i64 -2
  %490 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %483, i64 -2
  %491 = bitcast %"class.sh::TIntermNode"** %490 to i64*
  %492 = load i64, i64* %491, align 8
  %493 = bitcast %"class.sh::TIntermNode"** %489 to i64*
  store i64 %492, i64* %493, align 8
  %494 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %482, i64 -3
  %495 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %483, i64 -3
  %496 = bitcast %"class.sh::TIntermNode"** %495 to i64*
  %497 = load i64, i64* %496, align 8
  %498 = bitcast %"class.sh::TIntermNode"** %494 to i64*
  store i64 %497, i64* %498, align 8
  %499 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %482, i64 -4
  %500 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %483, i64 -4
  %501 = bitcast %"class.sh::TIntermNode"** %500 to i64*
  %502 = load i64, i64* %501, align 8
  %503 = bitcast %"class.sh::TIntermNode"** %499 to i64*
  store i64 %502, i64* %503, align 8
  %504 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %482, i64 -5
  %505 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %483, i64 -5
  %506 = bitcast %"class.sh::TIntermNode"** %505 to i64*
  %507 = load i64, i64* %506, align 8
  %508 = bitcast %"class.sh::TIntermNode"** %504 to i64*
  store i64 %507, i64* %508, align 8
  %509 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %482, i64 -6
  %510 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %483, i64 -6
  %511 = bitcast %"class.sh::TIntermNode"** %510 to i64*
  %512 = load i64, i64* %511, align 8
  %513 = bitcast %"class.sh::TIntermNode"** %509 to i64*
  store i64 %512, i64* %513, align 8
  %514 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %482, i64 -7
  %515 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %483, i64 -7
  %516 = bitcast %"class.sh::TIntermNode"** %515 to i64*
  %517 = load i64, i64* %516, align 8
  %518 = bitcast %"class.sh::TIntermNode"** %514 to i64*
  store i64 %517, i64* %518, align 8
  %519 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %482, i64 -8
  %520 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %483, i64 -8
  %521 = bitcast %"class.sh::TIntermNode"** %520 to i64*
  %522 = load i64, i64* %521, align 8
  %523 = bitcast %"class.sh::TIntermNode"** %519 to i64*
  store i64 %522, i64* %523, align 8
  %524 = icmp eq %"class.sh::TIntermNode"** %520, %352
  br i1 %524, label %525, label %481, !llvm.loop !28

525:                                              ; preds = %476, %481, %453, %343
  %526 = phi %"class.sh::TIntermNode"** [ %346, %343 ], [ %379, %453 ], [ %477, %476 ], [ %519, %481 ]
  %527 = ptrtoint %"class.sh::TIntermNode"** %526 to i64
  store i64 %527, i64* %82, align 16
  store i64 %351, i64* %81, align 8
  store i64 %348, i64* %83, align 16
  br label %528

528:                                              ; preds = %525, %315
  %529 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1, i32 0
  %530 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %301, align 8
  %531 = ptrtoint %"class.sh::TVariable"* %530 to i64
  %532 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %529, i64 0, i32 0
  %533 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %534 = add i64 %533, %531
  %535 = zext i64 %534 to i128
  %536 = mul nuw i128 %535, 11376068507788127593
  %537 = lshr i128 %536, 64
  %538 = xor i128 %537, %536
  %539 = trunc i128 %538 to i64
  %540 = add i64 %539, %531
  %541 = zext i64 %540 to i128
  %542 = mul nuw i128 %541, 11376068507788127593
  %543 = lshr i128 %542, 64
  %544 = xor i128 %543, %542
  %545 = trunc i128 %544 to i64
  %546 = getelementptr inbounds %"class.absl::container_internal::raw_hash_map", %"class.absl::container_internal::raw_hash_map"* %529, i64 0, i32 0, i32 0
  %547 = load i8*, i8** %546, align 8
  %548 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 3
  %549 = load i64, i64* %548, align 8
  %550 = lshr i64 %545, 7
  %551 = ptrtoint i8* %547 to i64
  %552 = lshr i64 %551, 12
  %553 = xor i64 %550, %552
  %554 = trunc i128 %544 to i8
  %555 = and i8 %554, 127
  %556 = insertelement <16 x i8> undef, i8 %555, i32 0
  %557 = shufflevector <16 x i8> %556, <16 x i8> undef, <16 x i32> zeroinitializer
  %558 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  br label %559

559:                                              ; preds = %589, %528
  %560 = phi i64 [ %553, %528 ], [ %591, %589 ]
  %561 = phi i64 [ 0, %528 ], [ %590, %589 ]
  %562 = and i64 %560, %549
  %563 = getelementptr inbounds i8, i8* %547, i64 %562
  %564 = bitcast i8* %563 to <16 x i8>*
  %565 = load <16 x i8>, <16 x i8>* %564, align 1
  %566 = icmp eq <16 x i8> %557, %565
  %567 = bitcast <16 x i1> %566 to i16
  %568 = icmp eq i16 %567, 0
  br i1 %568, label %585, label %569

569:                                              ; preds = %559
  %570 = zext i16 %567 to i32
  %571 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %558, align 8
  br label %572

572:                                              ; preds = %581, %569
  %573 = phi i32 [ %570, %569 ], [ %583, %581 ]
  %574 = call i32 @llvm.cttz.i32(i32 %573, i1 false) #6, !range !2
  %575 = zext i32 %574 to i64
  %576 = add i64 %562, %575
  %577 = and i64 %576, %549
  %578 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %571, i64 %577, i32 0, i32 0
  %579 = load %"class.sh::TVariable"*, %"class.sh::TVariable"** %578, align 8
  %580 = icmp eq %"class.sh::TVariable"* %579, %530
  br i1 %580, label %600, label %581, !prof !3

581:                                              ; preds = %572
  %582 = add i32 %573, -1
  %583 = and i32 %582, %573
  %584 = icmp eq i32 %583, 0
  br i1 %584, label %585, label %572

585:                                              ; preds = %581, %559
  %586 = icmp eq <16 x i8> %565, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %587 = bitcast <16 x i1> %586 to i16
  %588 = icmp eq i16 %587, 0
  br i1 %588, label %589, label %592, !prof !4

589:                                              ; preds = %585
  %590 = add i64 %561, 16
  %591 = add i64 %590, %562
  br label %559

592:                                              ; preds = %585
  %593 = call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* %532, i64 %545) #6
  %594 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %558, align 8, !noalias !29
  %595 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %594, i64 %593
  %596 = bitcast %"union.absl::container_internal::map_slot_type"* %595 to i64*
  store i64 %531, i64* %596, align 8, !noalias !29
  %597 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %594, i64 %593, i32 0, i32 1
  store %"class.sh::TIntermTyped"* null, %"class.sh::TIntermTyped"** %597, align 8, !noalias !29
  %598 = load i8*, i8** %546, align 8, !noalias !29
  %599 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %558, align 8, !noalias !29
  br label %600

600:                                              ; preds = %572, %592
  %601 = phi %"union.absl::container_internal::map_slot_type"* [ %599, %592 ], [ %571, %572 ]
  %602 = phi i8* [ %598, %592 ], [ %547, %572 ]
  %603 = phi i64 [ %593, %592 ], [ %577, %572 ]
  %604 = getelementptr inbounds i8, i8* %602, i64 %603
  %605 = icmp ne i8* %604, null
  call void @llvm.assume(i1 %605) #6, !noalias !29
  %606 = load i8, i8* %604, align 1
  %607 = icmp sgt i8 %606, -1
  br i1 %607, label %609, label %608, !prof !3

608:                                              ; preds = %600
  call void @llvm.trap() #6
  unreachable

609:                                              ; preds = %600
  %610 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %601, i64 %603, i32 0, i32 1
  %611 = bitcast %"class.sh::TIntermTyped"** %610 to i8**
  store i8* %307, i8** %611, align 8
  %612 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0, i32 7
  %613 = bitcast %"class.sh::TIntermBlock"** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %613) #6
  %614 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0, i32 11, i32 0
  %615 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %616 = bitcast %"class.sh::TIntermNode"*** %615 to i64*
  %617 = load i64, i64* %616, align 8
  %618 = bitcast %"class.std::__1::vector"* %614 to i64*
  %619 = load i64, i64* %618, align 8
  %620 = sub i64 %617, %619
  %621 = ashr exact i64 %620, 3
  %622 = icmp ult i64 %621, 2
  br i1 %622, label %629, label %623

623:                                              ; preds = %609
  %624 = inttoptr i64 %619 to %"class.sh::TIntermNode"**
  %625 = add nsw i64 %621, -2
  %626 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %624, i64 %625
  %627 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %626, align 8
  %628 = bitcast %"class.sh::TIntermNode"* %627 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)***
  br label %629

629:                                              ; preds = %623, %609
  %630 = phi %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** [ %628, %623 ], [ null, %609 ]
  %631 = phi %"class.sh::TIntermNode"* [ %627, %623 ], [ null, %609 ]
  %632 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** %630, align 8
  %633 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %632, i64 8
  %634 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %633, align 8
  %635 = call %"class.sh::TIntermBlock"* %634(%"class.sh::TIntermNode"* %631) #6
  store %"class.sh::TIntermBlock"* %635, %"class.sh::TIntermBlock"** %7, align 8
  %636 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 1
  %637 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %636, align 8
  %638 = getelementptr inbounds %"class.sh::(anonymous namespace)::Traverser", %"class.sh::(anonymous namespace)::Traverser"* %0, i64 0, i32 0, i32 7, i32 0, i32 2, i32 0, i32 0
  %639 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %638, align 8
  %640 = icmp ult %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %637, %639
  br i1 %640, label %641, label %660

641:                                              ; preds = %629
  %642 = icmp eq %"class.sh::TIntermBlock"* %635, null
  %643 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %635, i64 0, i32 1
  %644 = select i1 %642, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %643
  %645 = bitcast %"class.sh::TIntermDeclaration"** %4 to i64*
  %646 = load i64, i64* %645, align 8
  %647 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %637, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %644, %"class.sh::TIntermAggregateBase"** %647, align 8
  %648 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %637, i64 0, i32 1
  %649 = bitcast %"class.sh::TIntermNode"** %648 to i64*
  store i64 %646, i64* %649, align 8
  %650 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %637, i64 0, i32 2
  %651 = bitcast %"class.sh::TVector"* %5 to <2 x i64>*
  %652 = load <2 x i64>, <2 x i64>* %651, align 16
  %653 = bitcast %"class.sh::TVector"* %650 to <2 x i64>*
  store <2 x i64> %652, <2 x i64>* %653, align 8
  %654 = load i64, i64* %83, align 16
  %655 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %637, i64 0, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %656 = bitcast %"class.sh::TIntermNode"*** %655 to i64*
  store i64 %654, i64* %656, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %76, i8 0, i64 24, i1 false) #6
  %657 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %637, i64 1
  %658 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %657 to i64
  %659 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %636 to i64*
  store i64 %658, i64* %659, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %613) #6
  br label %665

660:                                              ; preds = %629
  call void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.37"* %612, %"class.sh::TIntermBlock"** nonnull dereferenceable(8) %7, %"class.sh::TIntermDeclaration"** nonnull dereferenceable(8) %4, %"class.sh::TVector"* nonnull dereferenceable(24) %5) #6
  %661 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %77, align 16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %613) #6
  %662 = icmp eq %"class.sh::TIntermNode"** %661, null
  br i1 %662, label %665, label %663

663:                                              ; preds = %660
  %664 = ptrtoint %"class.sh::TIntermNode"** %661 to i64
  store i64 %664, i64* %81, align 8
  br label %665

665:                                              ; preds = %641, %660, %663
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %76) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38)
  br label %666

666:                                              ; preds = %11, %665, %33, %3
  %667 = phi i1 [ true, %3 ], [ false, %665 ], [ true, %33 ], [ true, %11 ]
  ret i1 %667
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare void @llvm.assume(i1) #6

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #7

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #8 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #6, !range !2
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !3

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 1) #6
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"* %0) #6
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %58) #6
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #6, !range !2
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = shl i64 %1, 4
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #13
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #6
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %100, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %96
  br i1 %24, label %100, label %99

28:                                               ; preds = %25, %96
  %29 = phi i64 [ 0, %25 ], [ %97, %96 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %96

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29
  %35 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %26, %36
  %38 = zext i64 %37 to i128
  %39 = mul nuw i128 %38, 11376068507788127593
  %40 = lshr i128 %39, 64
  %41 = xor i128 %40, %39
  %42 = trunc i128 %41 to i64
  %43 = add i64 %36, %42
  %44 = zext i64 %43 to i128
  %45 = mul nuw i128 %44, 11376068507788127593
  %46 = lshr i128 %45, 64
  %47 = xor i128 %46, %45
  %48 = trunc i128 %47 to i64
  %49 = load i8*, i8** %3, align 8
  %50 = load i64, i64* %7, align 8
  %51 = lshr i64 %48, 7
  %52 = ptrtoint i8* %49 to i64
  %53 = lshr i64 %52, 12
  %54 = xor i64 %51, %53
  %55 = and i64 %54, %50
  %56 = getelementptr inbounds i8, i8* %49, i64 %55
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1
  %59 = icmp slt <16 x i8> %58, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %60 = bitcast <16 x i1> %59 to i16
  %61 = icmp eq i16 %60, 0
  br i1 %61, label %62, label %74

62:                                               ; preds = %33, %62
  %63 = phi i64 [ %67, %62 ], [ %55, %33 ]
  %64 = phi i64 [ %65, %62 ], [ 0, %33 ]
  %65 = add i64 %64, 16
  %66 = add i64 %65, %63
  %67 = and i64 %66, %50
  %68 = getelementptr inbounds i8, i8* %49, i64 %67
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = icmp slt <16 x i8> %70, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %72 = bitcast <16 x i1> %71 to i16
  %73 = icmp eq i16 %72, 0
  br i1 %73, label %62, label %74

74:                                               ; preds = %62, %33
  %75 = phi i64 [ %55, %33 ], [ %67, %62 ]
  %76 = phi i16 [ %60, %33 ], [ %72, %62 ]
  %77 = zext i16 %76 to i32
  %78 = tail call i32 @llvm.cttz.i32(i32 %77, i1 false) #6, !range !2
  %79 = zext i32 %78 to i64
  %80 = add i64 %75, %79
  %81 = and i64 %80, %50
  %82 = trunc i128 %47 to i8
  %83 = and i8 %82, 127
  %84 = getelementptr inbounds i8, i8* %49, i64 %81
  store i8 %83, i8* %84, align 1
  %85 = load i8*, i8** %3, align 8
  %86 = add i64 %81, -15
  %87 = load i64, i64* %7, align 8
  %88 = and i64 %86, %87
  %89 = and i64 %87, 15
  %90 = add i64 %88, %89
  %91 = getelementptr inbounds i8, i8* %85, i64 %90
  store i8 %83, i8* %91, align 1
  %92 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %93 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %92, i64 %81
  %94 = bitcast %"union.absl::container_internal::map_slot_type"* %93 to i8*
  %95 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 16, i1 false) #6
  br label %96

96:                                               ; preds = %28, %74
  %97 = add nuw i64 %29, 1
  %98 = icmp eq i64 %97, %8
  br i1 %98, label %27, label %28

99:                                               ; preds = %27
  tail call void @_ZdlPv(i8* %4) #13
  br label %100

100:                                              ; preds = %2, %27, %99
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"*) local_unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #6
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %128, %1
  %12 = phi i64 [ 0, %1 ], [ %130, %128 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %128
  %20 = phi i64 [ %6, %8 ], [ %131, %128 ]
  %21 = phi i64 [ 0, %8 ], [ %130, %128 ]
  %22 = load i8*, i8** %2, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %21
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, -2
  br i1 %25, label %26, label %128

26:                                               ; preds = %19
  %27 = ptrtoint i8* %22 to i64
  %28 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %21, i32 0
  %30 = bitcast %"struct.std::__1::pair"* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %10, %31
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = add i64 %31, %37
  %39 = zext i64 %38 to i128
  %40 = mul nuw i128 %39, 11376068507788127593
  %41 = lshr i128 %40, 64
  %42 = xor i128 %41, %40
  %43 = trunc i128 %42 to i64
  %44 = lshr i64 %43, 7
  %45 = lshr i64 %27, 12
  %46 = xor i64 %44, %45
  %47 = and i64 %46, %20
  %48 = getelementptr inbounds i8, i8* %22, i64 %47
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1
  %51 = icmp slt <16 x i8> %50, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %52 = bitcast <16 x i1> %51 to i16
  %53 = icmp eq i16 %52, 0
  br i1 %53, label %54, label %66

54:                                               ; preds = %26, %54
  %55 = phi i64 [ %59, %54 ], [ %47, %26 ]
  %56 = phi i64 [ %57, %54 ], [ 0, %26 ]
  %57 = add i64 %56, 16
  %58 = add i64 %57, %55
  %59 = and i64 %58, %20
  %60 = getelementptr inbounds i8, i8* %22, i64 %59
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1
  %63 = icmp slt <16 x i8> %62, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %64 = bitcast <16 x i1> %63 to i16
  %65 = icmp eq i16 %64, 0
  br i1 %65, label %54, label %66

66:                                               ; preds = %54, %26
  %67 = phi i64 [ %47, %26 ], [ %59, %54 ]
  %68 = phi i16 [ %52, %26 ], [ %64, %54 ]
  %69 = zext i16 %68 to i32
  %70 = tail call i32 @llvm.cttz.i32(i32 %69, i1 false) #6, !range !2
  %71 = zext i32 %70 to i64
  %72 = add i64 %67, %71
  %73 = and i64 %72, %20
  %74 = sub i64 %73, %47
  %75 = sub i64 %21, %47
  %76 = xor i64 %74, %75
  %77 = and i64 %76, %20
  %78 = icmp ult i64 %77, 16
  br i1 %78, label %79, label %89, !prof !3

79:                                               ; preds = %66
  %80 = trunc i128 %42 to i8
  %81 = and i8 %80, 127
  store i8 %81, i8* %23, align 1
  %82 = load i8*, i8** %2, align 8
  %83 = add i64 %21, -15
  %84 = load i64, i64* %4, align 8
  %85 = and i64 %84, %83
  %86 = and i64 %84, 15
  %87 = add i64 %85, %86
  %88 = getelementptr inbounds i8, i8* %82, i64 %87
  store i8 %81, i8* %88, align 1
  br label %128

89:                                               ; preds = %66
  %90 = getelementptr inbounds i8, i8* %22, i64 %73
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, -128
  %93 = trunc i128 %42 to i8
  %94 = and i8 %93, 127
  store i8 %94, i8* %90, align 1
  %95 = load i8*, i8** %2, align 8
  %96 = add i64 %73, -15
  %97 = load i64, i64* %4, align 8
  %98 = and i64 %97, %96
  %99 = and i64 %97, 15
  %100 = add i64 %98, %99
  %101 = getelementptr inbounds i8, i8* %95, i64 %100
  store i8 %94, i8* %101, align 1
  %102 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  br i1 %92, label %103, label %117

103:                                              ; preds = %89
  %104 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73
  %105 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21
  %106 = bitcast %"union.absl::container_internal::map_slot_type"* %104 to i8*
  %107 = bitcast %"union.absl::container_internal::map_slot_type"* %105 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 16, i1 false) #6
  %108 = load i8*, i8** %2, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 %21
  store i8 -128, i8* %109, align 1
  %110 = load i8*, i8** %2, align 8
  %111 = add i64 %21, -15
  %112 = load i64, i64* %4, align 8
  %113 = and i64 %112, %111
  %114 = and i64 %112, 15
  %115 = add i64 %113, %114
  %116 = getelementptr inbounds i8, i8* %110, i64 %115
  store i8 -128, i8* %116, align 1
  br label %128

117:                                              ; preds = %89
  %118 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %21
  %119 = bitcast %"union.absl::container_internal::map_slot_type"* %118 to i8*
  %120 = bitcast %"union.absl::container_internal::map_slot_type"* %118 to <16 x i8>*
  %121 = load <16 x i8>, <16 x i8>* %120, align 8
  %122 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %102, i64 %73
  %123 = bitcast %"union.absl::container_internal::map_slot_type"* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %123, i64 16, i1 false) #6
  %124 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %9, align 8
  %125 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %124, i64 %73
  %126 = bitcast %"union.absl::container_internal::map_slot_type"* %125 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %126, align 8
  %127 = add i64 %21, -1
  br label %128

128:                                              ; preds = %79, %117, %103, %19
  %129 = phi i64 [ %21, %19 ], [ %21, %79 ], [ %21, %103 ], [ %127, %117 ]
  %130 = add i64 %129, 1
  %131 = load i64, i64* %4, align 8
  %132 = icmp eq i64 %130, %131
  br i1 %132, label %11, label %19
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

declare void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8*, i64) local_unnamed_addr #2

declare void @_ZN2sh10TStructureC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_7TVectorIPNS_6TFieldEEENS_10SymbolTypeE(%"class.sh::TStructure"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TVector.23"*, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh5TTypeC1EPKNS_10TStructureEb(%"class.sh::TType"*, %"class.sh::TStructure"*, i1 zeroext) unnamed_addr #2

declare void @_ZN2sh9TVariableC1EPNS_12TSymbolTableERKNS_15ImmutableStringEPKNS_5TTypeENS_10SymbolTypeENS_10TExtensionE(%"class.sh::TVariable"*, %"class.sh::TSymbolTable"*, %"class.sh::ImmutableString"* dereferenceable(16), %"class.sh::TType"*, i8 zeroext, i8 zeroext) unnamed_addr #2

declare void @_ZN2sh13TIntermSymbolC1EPKNS_9TVariableE(%"class.sh::TIntermSymbol"*, %"class.sh::TVariable"*) unnamed_addr #2

declare void @_ZN2sh18TIntermDeclaration16appendDeclaratorEPNS_12TIntermTypedE(%"class.sh::TIntermDeclaration"*, %"class.sh::TIntermTyped"*) local_unnamed_addr #2

declare void @_ZN2sh5TType10makeArraysERKNS_5TSpanIKjEE(%"class.sh::TType"*, %"class.sh::TSpan"* dereferenceable(16)) local_unnamed_addr #2

declare { i8*, i64 } @_ZNK2sh13TIntermSymbol7getNameEv(%"class.sh::TIntermSymbol"*) local_unnamed_addr #2

declare %"class.angle::PoolAllocator"* @_Z22GetGlobalPoolAllocatorv() local_unnamed_addr #2

declare i8* @_ZN5angle13PoolAllocator8allocateEm(%"class.angle::PoolAllocator"*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2sh16TIntermTraverser28NodeReplaceWithMultipleEntryENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJPNS1_12TIntermBlockERPNS1_18TIntermDeclarationENS1_7TVectorIPNS1_11TIntermNodeEEEEEEvDpOT_(%"class.std::__1::vector.37"*, %"class.sh::TIntermBlock"** dereferenceable(8), %"class.sh::TIntermDeclaration"** dereferenceable(8), %"class.sh::TVector"* dereferenceable(24)) local_unnamed_addr #3 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.37"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 40
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 461168601842738790
  br i1 %13, label %14, label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector.37"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #14
  unreachable

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 40
  %22 = icmp ult i64 %21, 230584300921369395
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 461168601842738790, %16 ]
  %30 = mul i64 %29, 40
  %31 = tail call i8* @_Znwm(i64 %30) #13
  %32 = bitcast i8* %31 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11
  %37 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %34
  %38 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %37 to i64
  %39 = load %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"** %1, align 8
  %40 = icmp eq %"class.sh::TIntermBlock"* %39, null
  %41 = getelementptr inbounds %"class.sh::TIntermBlock", %"class.sh::TIntermBlock"* %39, i64 0, i32 1
  %42 = select i1 %40, %"class.sh::TIntermAggregateBase"* null, %"class.sh::TIntermAggregateBase"* %41
  %43 = bitcast %"class.sh::TIntermDeclaration"** %2 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 0, i32 0
  store %"class.sh::TIntermAggregateBase"* %42, %"class.sh::TIntermAggregateBase"** %45, align 8
  %46 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 1
  %47 = bitcast %"class.sh::TIntermNode"** %46 to i64*
  store i64 %44, i64* %47, align 8
  %48 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2
  %49 = bitcast %"class.sh::TVector"* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #6
  %50 = bitcast %"class.sh::TVector"* %3 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.sh::TVector"* %48 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 1
  %54 = bitcast %"class.sh::TIntermNode"*** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 1
  %57 = bitcast %"class.sh::TIntermNode"*** %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %3, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast %"class.sh::TIntermNode"*** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %35, i64 %11, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %62 = bitcast %"class.sh::TIntermNode"*** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast %"class.sh::TVector"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #6
  %64 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %36, i64 1
  %65 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.37", %"class.std::__1::vector.37"* %0, i64 0, i32 0, i32 0
  %67 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %66, align 8
  %68 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  %69 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %68, %67
  br i1 %69, label %70, label %72

70:                                               ; preds = %33
  %71 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %67 to i64
  br label %100

72:                                               ; preds = %33, %72
  %73 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %75, %72 ], [ %36, %33 ]
  %74 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %76, %72 ], [ %68, %33 ]
  %75 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1
  %76 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1
  %77 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %75 to i8*
  %78 = bitcast %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 16, i1 false) #6
  %79 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2
  %80 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2
  %81 = bitcast %"class.sh::TVector"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #6
  %82 = bitcast %"class.sh::TVector"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.sh::TVector"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 1
  %86 = bitcast %"class.sh::TIntermNode"*** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 1
  %89 = bitcast %"class.sh::TIntermNode"*** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %74, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast %"class.sh::TIntermNode"*** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %73, i64 -1, i32 2, i32 0, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"class.sh::TIntermNode"*** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.sh::TVector"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #6
  %96 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %76, %67
  br i1 %96, label %97, label %72

97:                                               ; preds = %72
  %98 = load i64, i64* %8, align 8
  %99 = load %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"** %5, align 8
  br label %100

100:                                              ; preds = %70, %97
  %101 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %67, %70 ], [ %99, %97 ]
  %102 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %36, %70 ], [ %75, %97 ]
  %103 = phi i64 [ %71, %70 ], [ %98, %97 ]
  %104 = ptrtoint %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %102 to i64
  store i64 %104, i64* %8, align 8
  store i64 %65, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %105 = inttoptr i64 %103 to %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*
  %106 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %101, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %100, %117
  %108 = phi %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* [ %109, %117 ], [ %101, %100 ]
  %109 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1
  %110 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 0
  %111 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %110, align 8
  %112 = icmp eq %"class.sh::TIntermNode"** %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint %"class.sh::TIntermNode"** %111 to i64
  %115 = getelementptr inbounds %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry", %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %108, i64 -1, i32 2, i32 0, i32 0, i32 1
  %116 = bitcast %"class.sh::TIntermNode"*** %115 to i64*
  store i64 %114, i64* %116, align 8
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %100
  %120 = icmp eq i64 %103, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %122) #13
  br label %123

123:                                              ; preds = %119, %121
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #12

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!"branch_weights", i32 1, i32 2000}
!5 = !{!6, !8}
!6 = distinct !{!6, !7, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE16try_emplace_implIRSI_JEEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEEOT_DpOT0_: argument 0"}
!7 = distinct !{!7, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE16try_emplace_implIRSI_JEEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEEOT_DpOT0_"}
!8 = distinct !{!8, !9, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE11try_emplaceIS6_JELi0EEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEERKT_DpOT0_: argument 0"}
!9 = distinct !{!9, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE11try_emplaceIS6_JELi0EEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEERKT_DpOT0_"}
!10 = !{i8 0, i8 2}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.isvectorized", i32 1}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.unroll.disable"}
!20 = distinct !{!20, !17}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !17}
!27 = distinct !{!27, !19}
!28 = distinct !{!28, !17}
!29 = !{!30, !32}
!30 = distinct !{!30, !31, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE16try_emplace_implIS6_JEEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEEOT_DpOT0_: argument 0"}
!31 = distinct !{!31, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE16try_emplace_implIS6_JEEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEEOT_DpOT0_"}
!32 = distinct !{!32, !33, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE11try_emplaceIS6_JELi0ELPS6_0EEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEEOT_DpOT0_: argument 0"}
!33 = distinct !{!33, !"_ZN4absl18container_internal12raw_hash_mapINS0_17FlatHashMapPolicyIPKN2sh9TVariableEPKNS3_12TIntermTypedEEENS0_6HashEqIS6_vE4HashENSC_2EqENSt3__19allocatorINSF_4pairIKS6_S9_EEEEE11try_emplaceIS6_JELi0ELPS6_0EEENSH_INS0_12raw_hash_setISA_SD_SE_SK_E8iteratorEbEEOT_DpOT0_"}
