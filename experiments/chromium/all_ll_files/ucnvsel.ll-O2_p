; ModuleID = '../../third_party/icu/source/common/ucnvsel.cpp'
source_filename = "../../third_party/icu/source/common/ucnvsel.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.UEnumeration = type { i8*, i8*, void (%struct.UEnumeration*)*, i32 (%struct.UEnumeration*, i32*)*, i16* (%struct.UEnumeration*, i32*, i32*)*, i8* (%struct.UEnumeration*, i32*, i32*)*, void (%struct.UEnumeration*, i32*)* }
%struct.UConverterSelector = type { %struct.UTrie2*, i32*, i32, i8**, i32, i32, i8*, i8, i8 }
%struct.UTrie2 = type { i16*, i16*, i32*, i32, i32, i16, i16, i32, i32, i32, i32, i8*, i32, i8, i8, i16, %struct.UNewTrie2* }
%struct.UNewTrie2 = type opaque
%struct.USet = type opaque
%struct.UPropsVectors = type opaque
%struct.UConverter = type opaque
%struct.UDataSwapper = type { i8, i8, i8, i8, i16 (i16)*, i32 (i32)*, i32 (%struct.UDataSwapper*, i8*, i32, i16*, i32)*, void (i16*, i16)*, void (i32*, i32)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, void (i8*, i8*, %struct.__va_list_tag*)*, i8* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.Enumerator = type { i16*, i16, i16, %struct.UConverterSelector* }

@.str = private unnamed_addr constant [17 x i8] c" 000000000000\1000\00", align 1
@.str.1 = private unnamed_addr constant [94 x i8] c"ucnvsel_swap(): data format %02x.%02x.%02x.%02x is not recognized as UConverterSelector data\0A\00", align 1
@.str.2 = private unnamed_addr constant [54 x i8] c"ucnvsel_swap(): format version %02x is not supported\0A\00", align 1
@.str.3 = private unnamed_addr constant [77 x i8] c"ucnvsel_swap(): too few bytes (%d after header) for UConverterSelector data\0A\00", align 1
@.str.4 = private unnamed_addr constant [84 x i8] c"ucnvsel_swap(): too few bytes (%d after header) for all of UConverterSelector data\0A\00", align 1
@_ZL16defaultEncodings = internal unnamed_addr constant %struct.UEnumeration { i8* null, i8* null, void (%struct.UEnumeration*)* @_ZL31ucnvsel_close_selector_iteratorP12UEnumeration, i32 (%struct.UEnumeration*, i32*)* @_ZL23ucnvsel_count_encodingsP12UEnumerationP10UErrorCode, i16* (%struct.UEnumeration*, i32*, i32*)* @uenum_unextDefault_69, i8* (%struct.UEnumeration*, i32*, i32*)* @_ZL21ucnvsel_next_encodingP12UEnumerationPiP10UErrorCode, void (%struct.UEnumeration*, i32*)* @_ZL22ucnvsel_reset_iteratorP12UEnumerationP10UErrorCode }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden %struct.UConverterSelector* @ucnvsel_open_69(i8** readonly, i32, %struct.USet*, i32, i32*) local_unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 1
  br i1 %12, label %13, label %217

13:                                               ; preds = %5
  %14 = icmp slt i32 %1, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %13
  %16 = icmp eq i8** %0, null
  %17 = icmp ne i32 %1, 0
  %18 = and i1 %16, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %15, %13
  store i32 1, i32* %4, align 4
  br label %217

20:                                               ; preds = %15
  %21 = tail call noalias i8* @uprv_malloc_69(i64 56) #9
  %22 = bitcast i8* %21 to %struct.UConverterSelector*
  %23 = icmp eq i8* %21, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %20
  store i32 7, i32* %4, align 4
  br label %217

25:                                               ; preds = %20
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 56, i1 false)
  %26 = icmp eq i32 %1, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = tail call i32 @ucnv_countAvailable_69() #10
  br label %29

29:                                               ; preds = %27, %25
  %30 = phi i32 [ %28, %27 ], [ %1, %25 ]
  %31 = phi i8** [ null, %27 ], [ %0, %25 ]
  %32 = sext i32 %30 to i64
  %33 = shl nsw i64 %32, 3
  %34 = tail call noalias i8* @uprv_malloc_69(i64 %33) #9
  %35 = getelementptr inbounds i8, i8* %21, i64 24
  %36 = bitcast i8* %35 to i8***
  %37 = bitcast i8* %35 to i8**
  store i8* %34, i8** %37, align 8
  %38 = icmp eq i8* %34, null
  br i1 %38, label %39, label %40

39:                                               ; preds = %29
  store i32 7, i32* %4, align 4
  br label %216

40:                                               ; preds = %29
  %41 = bitcast i8* %34 to i8**
  store i8* null, i8** %41, align 8
  %42 = icmp sgt i32 %30, 0
  br i1 %42, label %43, label %63

43:                                               ; preds = %40
  %44 = icmp eq i8** %31, null
  %45 = zext i32 %30 to i64
  br label %46

46:                                               ; preds = %55, %43
  %47 = phi i64 [ 0, %43 ], [ %61, %55 ]
  %48 = phi i32 [ 0, %43 ], [ %60, %55 ]
  br i1 %44, label %52, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds i8*, i8** %31, i64 %47
  %51 = load i8*, i8** %50, align 8
  br label %55

52:                                               ; preds = %46
  %53 = trunc i64 %47 to i32
  %54 = tail call i8* @ucnv_getAvailableName_69(i32 %53) #10
  br label %55

55:                                               ; preds = %52, %49
  %56 = phi i8* [ %51, %49 ], [ %54, %52 ]
  %57 = tail call i64 @strlen(i8* %56) #11
  %58 = trunc i64 %57 to i32
  %59 = add i32 %48, 1
  %60 = add i32 %59, %58
  %61 = add nuw nsw i64 %47, 1
  %62 = icmp eq i64 %61, %45
  br i1 %62, label %63, label %46

63:                                               ; preds = %55, %40
  %64 = phi i32 [ 0, %40 ], [ %60, %55 ]
  %65 = and i32 %64, 3
  %66 = icmp eq i32 %65, 0
  %67 = sub nuw nsw i32 4, %65
  %68 = select i1 %66, i32 0, i32 %67
  %69 = add nsw i32 %68, %64
  %70 = getelementptr inbounds i8, i8* %21, i64 36
  %71 = bitcast i8* %70 to i32*
  store i32 %69, i32* %71, align 4
  %72 = sext i32 %69 to i64
  %73 = tail call noalias i8* @uprv_malloc_69(i64 %72) #9
  %74 = icmp eq i8* %73, null
  br i1 %74, label %80, label %75

75:                                               ; preds = %63
  br i1 %42, label %76, label %81

76:                                               ; preds = %75
  %77 = icmp eq i8** %31, null
  %78 = zext i32 %30 to i64
  %79 = load i8**, i8*** %36, align 8
  br label %91

80:                                               ; preds = %63
  store i32 7, i32* %4, align 4
  br i1 %23, label %217, label %216

81:                                               ; preds = %105, %75
  %82 = phi i8* [ %73, %75 ], [ %113, %105 ]
  %83 = icmp eq i32 %68, 0
  br i1 %83, label %116, label %84

84:                                               ; preds = %81
  %85 = add nsw i32 %68, -1
  %86 = icmp slt i32 %85, 0
  %87 = select i1 %86, i32 %85, i32 0
  %88 = sub nsw i32 %85, %87
  %89 = zext i32 %88 to i64
  %90 = add nuw nsw i64 %89, 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %82, i8 0, i64 %90, i1 false)
  br label %116

91:                                               ; preds = %105, %76
  %92 = phi i8** [ %79, %76 ], [ %108, %105 ]
  %93 = phi i64 [ 0, %76 ], [ %114, %105 ]
  %94 = phi i8* [ %73, %76 ], [ %113, %105 ]
  %95 = getelementptr inbounds i8*, i8** %92, i64 %93
  store i8* %94, i8** %95, align 8
  %96 = load i8**, i8*** %36, align 8
  %97 = getelementptr inbounds i8*, i8** %96, i64 %93
  %98 = load i8*, i8** %97, align 8
  br i1 %77, label %102, label %99

99:                                               ; preds = %91
  %100 = getelementptr inbounds i8*, i8** %31, i64 %93
  %101 = load i8*, i8** %100, align 8
  br label %105

102:                                              ; preds = %91
  %103 = trunc i64 %93 to i32
  %104 = tail call i8* @ucnv_getAvailableName_69(i32 %103) #10
  br label %105

105:                                              ; preds = %102, %99
  %106 = phi i8* [ %101, %99 ], [ %104, %102 ]
  %107 = tail call i8* @strcpy(i8* %98, i8* %106) #10
  %108 = load i8**, i8*** %36, align 8
  %109 = getelementptr inbounds i8*, i8** %108, i64 %93
  %110 = load i8*, i8** %109, align 8
  %111 = tail call i64 @strlen(i8* %110) #11
  %112 = add i64 %111, 1
  %113 = getelementptr inbounds i8, i8* %94, i64 %112
  %114 = add nuw nsw i64 %93, 1
  %115 = icmp eq i64 %114, %78
  br i1 %115, label %81, label %91

116:                                              ; preds = %84, %81
  %117 = getelementptr inbounds i8, i8* %21, i64 49
  store i8 1, i8* %117, align 1
  %118 = getelementptr inbounds i8, i8* %21, i64 32
  %119 = bitcast i8* %118 to i32*
  store i32 %30, i32* %119, align 8
  %120 = add nsw i32 %30, 31
  %121 = sdiv i32 %120, 32
  %122 = tail call %struct.UPropsVectors* @upvec_open_69(i32 %121, i32* %4) #10
  %123 = load i32, i32* %4, align 4
  %124 = icmp slt i32 %123, 1
  br i1 %124, label %125, label %211

125:                                              ; preds = %116
  %126 = load i32, i32* %119, align 8
  %127 = add nsw i32 %126, 31
  %128 = sdiv i32 %127, 32
  %129 = icmp sgt i32 %126, 0
  br i1 %129, label %137, label %180

130:                                              ; preds = %137
  %131 = load i32, i32* %119, align 8
  %132 = icmp sgt i32 %131, 0
  br i1 %132, label %133, label %180

133:                                              ; preds = %130
  %134 = bitcast i32* %6 to i8*
  %135 = bitcast i32* %7 to i8*
  %136 = bitcast i32* %8 to i8*
  br label %145

137:                                              ; preds = %125, %137
  %138 = phi i32 [ %139, %137 ], [ 0, %125 ]
  tail call void @upvec_setValue_69(%struct.UPropsVectors* %122, i32 1114113, i32 1114113, i32 %138, i32 -1, i32 -1, i32* %4) #10
  %139 = add nuw nsw i32 %138, 1
  %140 = icmp slt i32 %139, %128
  br i1 %140, label %137, label %130

141:                                              ; preds = %176
  %142 = load i32, i32* %119, align 8
  %143 = sext i32 %142 to i64
  %144 = icmp slt i64 %179, %143
  br i1 %144, label %145, label %180

145:                                              ; preds = %141, %133
  %146 = phi i64 [ 0, %133 ], [ %179, %141 ]
  %147 = load i8**, i8*** %36, align 8
  %148 = getelementptr inbounds i8*, i8** %147, i64 %146
  %149 = load i8*, i8** %148, align 8
  %150 = call %struct.UConverter* @ucnv_open_69(i8* %149, i32* %4) #10
  %151 = load i32, i32* %4, align 4
  %152 = icmp slt i32 %151, 1
  br i1 %152, label %153, label %211

153:                                              ; preds = %145
  %154 = call %struct.USet* @uset_open_69(i32 1, i32 0) #10
  call void @ucnv_getUnicodeSet_69(%struct.UConverter* %150, %struct.USet* %154, i32 %3, i32* %4) #10
  %155 = load i32, i32* %4, align 4
  %156 = icmp slt i32 %155, 1
  br i1 %156, label %158, label %157

157:                                              ; preds = %153
  call void @ucnv_close_69(%struct.UConverter* %150) #10
  br label %211

158:                                              ; preds = %153
  %159 = trunc i64 %146 to i32
  %160 = lshr i32 %159, 5
  %161 = and i32 %159, 31
  %162 = shl i32 1, %161
  %163 = call i32 @uset_getItemCount_69(%struct.USet* %154) #10
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %165, label %176

165:                                              ; preds = %158, %173
  %166 = phi i32 [ %174, %173 ], [ 0, %158 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %134) #10
  store i32 -1431655766, i32* %6, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %135) #10
  store i32 -1431655766, i32* %7, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %136) #10
  store i32 0, i32* %8, align 4
  %167 = call i32 @uset_getItem_69(%struct.USet* %154, i32 %166, i32* nonnull %6, i32* nonnull %7, i16* null, i32 0, i32* nonnull %8) #10
  %168 = load i32, i32* %8, align 4
  %169 = icmp slt i32 %168, 1
  br i1 %169, label %170, label %173

170:                                              ; preds = %165
  %171 = load i32, i32* %6, align 4
  %172 = load i32, i32* %7, align 4
  call void @upvec_setValue_69(%struct.UPropsVectors* %122, i32 %171, i32 %172, i32 %160, i32 -1, i32 %162, i32* %4) #10
  br label %173

173:                                              ; preds = %170, %165
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %136) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %135) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %134) #10
  %174 = add nuw nsw i32 %166, 1
  %175 = icmp eq i32 %174, %163
  br i1 %175, label %176, label %165

176:                                              ; preds = %173, %158
  call void @ucnv_close_69(%struct.UConverter* %150) #10
  call void @uset_close_69(%struct.USet* %154) #10
  %177 = load i32, i32* %4, align 4
  %178 = icmp slt i32 %177, 1
  %179 = add nuw nsw i64 %146, 1
  br i1 %178, label %141, label %211

180:                                              ; preds = %141, %130, %125
  %181 = icmp eq %struct.USet* %2, null
  br i1 %181, label %200, label %182

182:                                              ; preds = %180
  %183 = call i32 @uset_getItemCount_69(%struct.USet* nonnull %2) #10
  %184 = icmp sgt i32 %183, 0
  br i1 %184, label %185, label %200

185:                                              ; preds = %182
  %186 = bitcast i32* %9 to i8*
  %187 = bitcast i32* %10 to i8*
  br label %188

188:                                              ; preds = %191, %185
  %189 = phi i32 [ 0, %185 ], [ %192, %191 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %186) #10
  store i32 -1431655766, i32* %9, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %187) #10
  store i32 -1431655766, i32* %10, align 4
  %190 = call i32 @uset_getItem_69(%struct.USet* nonnull %2, i32 %189, i32* nonnull %9, i32* nonnull %10, i16* null, i32 0, i32* %4) #10
  br i1 %129, label %194, label %191

191:                                              ; preds = %194, %188
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %187) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %186) #10
  %192 = add nuw nsw i32 %189, 1
  %193 = icmp eq i32 %192, %183
  br i1 %193, label %200, label %188

194:                                              ; preds = %188, %194
  %195 = phi i32 [ %198, %194 ], [ 0, %188 ]
  %196 = load i32, i32* %9, align 4
  %197 = load i32, i32* %10, align 4
  call void @upvec_setValue_69(%struct.UPropsVectors* %122, i32 %196, i32 %197, i32 %195, i32 -1, i32 -1, i32* %4) #10
  %198 = add nuw nsw i32 %195, 1
  %199 = icmp slt i32 %198, %128
  br i1 %199, label %194, label %191

200:                                              ; preds = %191, %182, %180
  %201 = call %struct.UTrie2* @upvec_compactToUTrie2WithRowIndexes_69(%struct.UPropsVectors* %122, i32* %4) #10
  %202 = bitcast i8* %21 to %struct.UTrie2**
  store %struct.UTrie2* %201, %struct.UTrie2** %202, align 8
  %203 = getelementptr inbounds i8, i8* %21, i64 16
  %204 = bitcast i8* %203 to i32*
  %205 = call i32* @upvec_cloneArray_69(%struct.UPropsVectors* %122, i32* %204, i32* null, i32* %4) #10
  %206 = getelementptr inbounds i8, i8* %21, i64 8
  %207 = bitcast i8* %206 to i32**
  store i32* %205, i32** %207, align 8
  %208 = load i32, i32* %204, align 8
  %209 = mul nsw i32 %208, %128
  store i32 %209, i32* %204, align 8
  %210 = getelementptr inbounds i8, i8* %21, i64 48
  store i8 1, i8* %210, align 8
  br label %211

211:                                              ; preds = %145, %176, %116, %157, %200
  call void @upvec_close_69(%struct.UPropsVectors* %122) #10
  %212 = load i32, i32* %4, align 4
  %213 = icmp slt i32 %212, 1
  %214 = or i1 %213, %23
  %215 = select i1 %213, %struct.UConverterSelector* %22, %struct.UConverterSelector* null
  br i1 %214, label %217, label %216

216:                                              ; preds = %211, %39, %80
  call void @ucnvsel_close_69(%struct.UConverterSelector* nonnull %22) #10
  br label %217

217:                                              ; preds = %211, %24, %216, %80, %5, %19
  %218 = phi %struct.UConverterSelector* [ null, %19 ], [ null, %5 ], [ null, %80 ], [ null, %216 ], [ %215, %211 ], [ null, %24 ]
  ret %struct.UConverterSelector* %218
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: allocsize(0)
declare noalias i8* @uprv_malloc_69(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @ucnv_countAvailable_69() local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

declare i8* @ucnv_getAvailableName_69(i32) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i8* @strcpy(i8* returned, i8* nocapture readonly) local_unnamed_addr #5

declare %struct.UPropsVectors* @upvec_open_69(i32, i32*) local_unnamed_addr #3

declare void @upvec_close_69(%struct.UPropsVectors*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnvsel_close_69(%struct.UConverterSelector*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.UConverterSelector* %0, null
  br i1 %2, label %28, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 8
  %5 = load i8, i8* %4, align 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 3
  %9 = load i8**, i8*** %8, align 8
  %10 = load i8*, i8** %9, align 8
  tail call void @uprv_free_69(i8* %10) #10
  br label %11

11:                                               ; preds = %3, %7
  %12 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 3
  %13 = bitcast i8*** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @uprv_free_69(i8* %14) #10
  %15 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 7
  %16 = load i8, i8* %15, align 8
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 1
  %20 = bitcast i32** %19 to i8**
  %21 = load i8*, i8** %20, align 8
  tail call void @uprv_free_69(i8* %21) #10
  br label %22

22:                                               ; preds = %11, %18
  %23 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 0
  %24 = load %struct.UTrie2*, %struct.UTrie2** %23, align 8
  tail call void @utrie2_close_69(%struct.UTrie2* %24) #10
  %25 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 6
  %26 = load i8*, i8** %25, align 8
  tail call void @uprv_free_69(i8* %26) #10
  %27 = bitcast %struct.UConverterSelector* %0 to i8*
  tail call void @uprv_free_69(i8* nonnull %27) #10
  br label %28

28:                                               ; preds = %1, %22
  ret void
}

declare void @uprv_free_69(i8*) local_unnamed_addr #3

declare void @utrie2_close_69(%struct.UTrie2*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ucnvsel_serialize_69(%struct.UConverterSelector* nocapture readonly, i8*, i32, i32*) local_unnamed_addr #0 {
  %5 = alloca [11 x i32], align 16
  %6 = load i32, i32* %3, align 4
  %7 = icmp slt i32 %6, 1
  br i1 %7, label %8, label %89

8:                                                ; preds = %4
  %9 = icmp slt i32 %2, 0
  br i1 %9, label %18, label %10

10:                                               ; preds = %8
  %11 = icmp eq i32 %2, 0
  br i1 %11, label %19, label %12

12:                                               ; preds = %10
  %13 = icmp eq i8* %1, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %12
  %15 = ptrtoint i8* %1 to i64
  %16 = and i64 %15, 3
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %19, label %18

18:                                               ; preds = %14, %12, %8
  store i32 1, i32* %3, align 4
  br label %89

19:                                               ; preds = %14, %10
  %20 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 0
  %21 = load %struct.UTrie2*, %struct.UTrie2** %20, align 8
  %22 = tail call i32 @utrie2_serialize_69(%struct.UTrie2* %21, i8* null, i32 0, i32* %3) #10
  %23 = load i32, i32* %3, align 4
  %24 = icmp eq i32 %23, 15
  %25 = icmp slt i32 %23, 1
  %26 = or i1 %24, %25
  br i1 %26, label %27, label %89

27:                                               ; preds = %19
  store i32 0, i32* %3, align 4
  %28 = bitcast [11 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 44, i8* nonnull %28)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 0, i64 44, i1 false)
  %29 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 5
  %32 = load i32, i32* %31, align 4
  %33 = add nsw i32 %22, 96
  %34 = shl i32 %30, 2
  %35 = add nsw i32 %33, %34
  %36 = add nsw i32 %35, %32
  %37 = icmp sgt i32 %36, %2
  br i1 %37, label %38, label %39

38:                                               ; preds = %27
  store i32 15, i32* %3, align 4
  br label %88

39:                                               ; preds = %27
  %40 = add nsw i32 %36, -32
  %41 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 4
  %42 = load i32, i32* %41, align 8
  %43 = bitcast i8* %1 to i16*
  store i16 32, i16* %43, align 1
  %44 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 -38, i8* %44, align 1
  %45 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 39, i8* %45, align 1
  %46 = getelementptr inbounds i8, i8* %1, i64 4
  %47 = bitcast i8* %46 to i16*
  store i16 20, i16* %47, align 1
  %48 = getelementptr inbounds i8, i8* %1, i64 6
  %49 = bitcast i8* %48 to i16*
  store i16 0, i16* %49, align 1
  %50 = getelementptr inbounds i8, i8* %1, i64 8
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds i8, i8* %1, i64 9
  store i8 0, i8* %51, align 1
  %52 = getelementptr inbounds i8, i8* %1, i64 10
  store i8 2, i8* %52, align 1
  %53 = getelementptr inbounds i8, i8* %1, i64 11
  store i8 0, i8* %53, align 1
  %54 = getelementptr inbounds i8, i8* %1, i64 12
  store i8 67, i8* %54, align 1
  %55 = getelementptr inbounds i8, i8* %1, i64 13
  store i8 83, i8* %55, align 1
  %56 = getelementptr inbounds i8, i8* %1, i64 14
  store i8 101, i8* %56, align 1
  %57 = getelementptr inbounds i8, i8* %1, i64 15
  store i8 108, i8* %57, align 1
  %58 = getelementptr inbounds i8, i8* %1, i64 16
  store i8 1, i8* %58, align 1
  %59 = getelementptr inbounds i8, i8* %1, i64 17
  %60 = getelementptr inbounds i8, i8* %1, i64 32
  %61 = bitcast i8* %60 to i32*
  call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 0, i64 15, i1 false)
  store i32 %22, i32* %61, align 1
  %62 = getelementptr inbounds i8, i8* %1, i64 36
  %63 = bitcast i8* %62 to i32*
  store i32 %30, i32* %63, align 1
  %64 = getelementptr inbounds i8, i8* %1, i64 40
  %65 = bitcast i8* %64 to i32*
  store i32 %42, i32* %65, align 1
  %66 = getelementptr inbounds i8, i8* %1, i64 44
  %67 = bitcast i8* %66 to i32*
  store i32 %32, i32* %67, align 1
  %68 = getelementptr inbounds i8, i8* %1, i64 48
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* nonnull align 16 %28, i64 44, i1 false)
  %69 = getelementptr inbounds i8, i8* %1, i64 92
  %70 = bitcast i8* %69 to i32*
  store i32 %40, i32* %70, align 1
  %71 = getelementptr inbounds i8, i8* %1, i64 96
  %72 = load %struct.UTrie2*, %struct.UTrie2** %20, align 8
  %73 = tail call i32 @utrie2_serialize_69(%struct.UTrie2* %72, i8* %71, i32 %22, i32* %3) #10
  %74 = sext i32 %22 to i64
  %75 = getelementptr inbounds i8, i8* %71, i64 %74
  %76 = load i32, i32* %29, align 8
  %77 = shl nsw i32 %76, 2
  %78 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 1
  %79 = bitcast i32** %78 to i8**
  %80 = load i8*, i8** %79, align 8
  %81 = sext i32 %77 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %75, i8* align 4 %80, i64 %81, i1 false)
  %82 = getelementptr inbounds i8, i8* %75, i64 %81
  %83 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 3
  %84 = load i8**, i8*** %83, align 8
  %85 = load i8*, i8** %84, align 8
  %86 = load i32, i32* %31, align 4
  %87 = sext i32 %86 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %82, i8* align 1 %85, i64 %87, i1 false)
  br label %88

88:                                               ; preds = %39, %38
  call void @llvm.lifetime.end.p0i8(i64 44, i8* nonnull %28)
  br label %89

89:                                               ; preds = %19, %18, %88, %4
  %90 = phi i32 [ 0, %4 ], [ 0, %18 ], [ %36, %88 ], [ 0, %19 ]
  ret i32 %90
}

declare i32 @utrie2_serialize_69(%struct.UTrie2*, i8*, i32, i32*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.UConverterSelector* @ucnvsel_openFromSerialized_69(i8*, i32, i32*) local_unnamed_addr #0 {
  %4 = load i32, i32* %2, align 4
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %6, label %158

6:                                                ; preds = %3
  %7 = icmp slt i32 %1, 1
  %8 = icmp eq i8* %0, null
  %9 = or i1 %8, %7
  br i1 %9, label %14, label %10

10:                                               ; preds = %6
  %11 = ptrtoint i8* %0 to i64
  %12 = and i64 %11, 3
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %10, %6
  store i32 1, i32* %2, align 4
  br label %158

15:                                               ; preds = %10
  %16 = icmp slt i32 %1, 32
  br i1 %16, label %17, label %18

17:                                               ; preds = %15
  store i32 8, i32* %2, align 4
  br label %158

18:                                               ; preds = %15
  %19 = getelementptr inbounds i8, i8* %0, i64 2
  %20 = load i8, i8* %19, align 2
  %21 = icmp eq i8 %20, -38
  br i1 %21, label %22, label %42

22:                                               ; preds = %18
  %23 = getelementptr inbounds i8, i8* %0, i64 3
  %24 = load i8, i8* %23, align 1
  %25 = icmp eq i8 %24, 39
  br i1 %25, label %26, label %42

26:                                               ; preds = %22
  %27 = getelementptr inbounds i8, i8* %0, i64 12
  %28 = load i8, i8* %27, align 2
  %29 = icmp eq i8 %28, 67
  br i1 %29, label %30, label %42

30:                                               ; preds = %26
  %31 = getelementptr inbounds i8, i8* %0, i64 13
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 83
  br i1 %33, label %34, label %42

34:                                               ; preds = %30
  %35 = getelementptr inbounds i8, i8* %0, i64 14
  %36 = load i8, i8* %35, align 2
  %37 = icmp eq i8 %36, 101
  br i1 %37, label %38, label %42

38:                                               ; preds = %34
  %39 = getelementptr inbounds i8, i8* %0, i64 15
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 108
  br i1 %41, label %43, label %42

42:                                               ; preds = %38, %34, %30, %26, %22, %18
  store i32 3, i32* %2, align 4
  br label %158

43:                                               ; preds = %38
  %44 = getelementptr inbounds i8, i8* %0, i64 16
  %45 = load i8, i8* %44, align 2
  %46 = icmp eq i8 %45, 1
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  store i32 16, i32* %2, align 4
  br label %158

48:                                               ; preds = %43
  %49 = getelementptr inbounds i8, i8* %0, i64 8
  %50 = load i8, i8* %49, align 2
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %52, label %56

52:                                               ; preds = %48
  %53 = getelementptr inbounds i8, i8* %0, i64 9
  %54 = load i8, i8* %53, align 1
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %75, label %56

56:                                               ; preds = %52, %48
  %57 = tail call %struct.UDataSwapper* @udata_openSwapperForInputData_69(i8* nonnull %0, i32 %1, i8 signext 0, i8 zeroext 0, i32* %2) #10
  %58 = tail call fastcc i32 @_ZL12ucnvsel_swapPK12UDataSwapperPKviPvP10UErrorCode(%struct.UDataSwapper* %57, i8* nonnull %0, i32 -1, i8* null, i32* %2)
  %59 = load i32, i32* %2, align 4
  %60 = icmp slt i32 %59, 1
  br i1 %60, label %62, label %61

61:                                               ; preds = %56
  tail call void @udata_closeSwapper_69(%struct.UDataSwapper* %57) #10
  br label %158

62:                                               ; preds = %56
  %63 = icmp sgt i32 %58, %1
  br i1 %63, label %64, label %65

64:                                               ; preds = %62
  tail call void @udata_closeSwapper_69(%struct.UDataSwapper* %57) #10
  store i32 8, i32* %2, align 4
  br label %158

65:                                               ; preds = %62
  %66 = sext i32 %58 to i64
  %67 = tail call noalias i8* @uprv_malloc_69(i64 %66) #9
  %68 = icmp eq i8* %67, null
  br i1 %68, label %69, label %70

69:                                               ; preds = %65
  tail call void @udata_closeSwapper_69(%struct.UDataSwapper* %57) #10
  store i32 7, i32* %2, align 4
  br label %158

70:                                               ; preds = %65
  %71 = tail call fastcc i32 @_ZL12ucnvsel_swapPK12UDataSwapperPKviPvP10UErrorCode(%struct.UDataSwapper* %57, i8* nonnull %0, i32 %1, i8* nonnull %67, i32* %2)
  tail call void @udata_closeSwapper_69(%struct.UDataSwapper* %57) #10
  %72 = load i32, i32* %2, align 4
  %73 = icmp slt i32 %72, 1
  br i1 %73, label %75, label %74

74:                                               ; preds = %70
  tail call void @uprv_free_69(i8* nonnull %67) #10
  br label %158

75:                                               ; preds = %70, %52
  %76 = phi i8* [ %0, %52 ], [ %67, %70 ]
  %77 = phi i8* [ null, %52 ], [ %67, %70 ]
  %78 = bitcast i8* %76 to i16*
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = add nuw nsw i32 %80, 64
  %82 = icmp sgt i32 %81, %1
  br i1 %82, label %83, label %84

83:                                               ; preds = %75
  tail call void @uprv_free_69(i8* %77) #10
  store i32 8, i32* %2, align 4
  br label %158

84:                                               ; preds = %75
  %85 = zext i16 %79 to i64
  %86 = getelementptr inbounds i8, i8* %76, i64 %85
  %87 = sub nsw i32 %1, %80
  %88 = bitcast i8* %86 to i32*
  %89 = getelementptr inbounds i8, i8* %86, i64 60
  %90 = bitcast i8* %89 to i32*
  %91 = load i32, i32* %90, align 4
  %92 = icmp slt i32 %87, %91
  br i1 %92, label %93, label %94

93:                                               ; preds = %84
  tail call void @uprv_free_69(i8* %77) #10
  store i32 8, i32* %2, align 4
  br label %158

94:                                               ; preds = %84
  %95 = getelementptr inbounds i8, i8* %86, i64 64
  %96 = tail call noalias i8* @uprv_malloc_69(i64 56) #9
  %97 = bitcast i8* %96 to %struct.UConverterSelector*
  %98 = getelementptr inbounds i8, i8* %86, i64 8
  %99 = bitcast i8* %98 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = sext i32 %100 to i64
  %102 = shl nsw i64 %101, 3
  %103 = tail call noalias i8* @uprv_malloc_69(i64 %102) #9
  %104 = icmp eq i8* %96, null
  %105 = icmp eq i8* %103, null
  %106 = or i1 %104, %105
  br i1 %106, label %107, label %108

107:                                              ; preds = %94
  tail call void @uprv_free_69(i8* %77) #10
  tail call void @uprv_free_69(i8* %96) #10
  tail call void @uprv_free_69(i8* %103) #10
  store i32 7, i32* %2, align 4
  br label %158

108:                                              ; preds = %94
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %96, i8 0, i64 56, i1 false)
  %109 = getelementptr inbounds i8, i8* %86, i64 4
  %110 = bitcast i8* %109 to i32*
  %111 = load i32, i32* %110, align 4
  %112 = getelementptr inbounds i8, i8* %96, i64 16
  %113 = bitcast i8* %112 to i32*
  store i32 %111, i32* %113, align 8
  %114 = getelementptr inbounds i8, i8* %96, i64 24
  %115 = bitcast i8* %114 to i8***
  %116 = bitcast i8* %114 to i8**
  store i8* %103, i8** %116, align 8
  %117 = load i32, i32* %99, align 4
  %118 = getelementptr inbounds i8, i8* %96, i64 32
  %119 = bitcast i8* %118 to i32*
  store i32 %117, i32* %119, align 8
  %120 = getelementptr inbounds i8, i8* %86, i64 12
  %121 = bitcast i8* %120 to i32*
  %122 = load i32, i32* %121, align 4
  %123 = getelementptr inbounds i8, i8* %96, i64 36
  %124 = bitcast i8* %123 to i32*
  store i32 %122, i32* %124, align 4
  %125 = getelementptr inbounds i8, i8* %96, i64 40
  %126 = bitcast i8* %125 to i8**
  store i8* %77, i8** %126, align 8
  %127 = load i32, i32* %88, align 4
  %128 = tail call %struct.UTrie2* @utrie2_openFromSerialized_69(i32 0, i8* %95, i32 %127, i32* null, i32* %2) #10
  %129 = bitcast i8* %96 to %struct.UTrie2**
  store %struct.UTrie2* %128, %struct.UTrie2** %129, align 8
  %130 = load i32, i32* %88, align 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %95, i64 %131
  %133 = load i32, i32* %2, align 4
  %134 = icmp slt i32 %133, 1
  br i1 %134, label %136, label %135

135:                                              ; preds = %108
  tail call void @ucnvsel_close_69(%struct.UConverterSelector* %97)
  br label %158

136:                                              ; preds = %108
  %137 = getelementptr inbounds i8, i8* %96, i64 8
  %138 = bitcast i8* %137 to i8**
  store i8* %132, i8** %138, align 8
  %139 = load i32, i32* %119, align 8
  %140 = icmp sgt i32 %139, 0
  br i1 %140, label %141, label %158

141:                                              ; preds = %136
  %142 = load i32, i32* %113, align 8
  %143 = shl nsw i32 %142, 2
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %132, i64 %144
  br label %146

146:                                              ; preds = %141, %146
  %147 = phi i64 [ 0, %141 ], [ %154, %146 ]
  %148 = phi i8* [ %145, %141 ], [ %153, %146 ]
  %149 = load i8**, i8*** %115, align 8
  %150 = getelementptr inbounds i8*, i8** %149, i64 %147
  store i8* %148, i8** %150, align 8
  %151 = tail call i64 @strlen(i8* %148) #11
  %152 = add i64 %151, 1
  %153 = getelementptr inbounds i8, i8* %148, i64 %152
  %154 = add nuw nsw i64 %147, 1
  %155 = load i32, i32* %119, align 8
  %156 = sext i32 %155 to i64
  %157 = icmp slt i64 %154, %156
  br i1 %157, label %146, label %158

158:                                              ; preds = %146, %136, %74, %69, %64, %61, %14, %17, %83, %107, %135, %93, %47, %42, %3
  %159 = phi %struct.UConverterSelector* [ null, %3 ], [ null, %14 ], [ null, %17 ], [ null, %47 ], [ null, %42 ], [ null, %83 ], [ null, %93 ], [ null, %107 ], [ null, %135 ], [ null, %61 ], [ null, %64 ], [ null, %69 ], [ null, %74 ], [ %97, %136 ], [ %97, %146 ]
  ret %struct.UConverterSelector* %159
}

declare %struct.UDataSwapper* @udata_openSwapperForInputData_69(i8*, i32, i8 signext, i8 zeroext, i32*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZL12ucnvsel_swapPK12UDataSwapperPKviPvP10UErrorCode(%struct.UDataSwapper*, i8*, i32, i8*, i32*) unnamed_addr #0 {
  %6 = tail call i32 @udata_swapDataHeader_69(%struct.UDataSwapper* %0, i8* %1, i32 %2, i8* %3, i32* %4) #10
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %9, label %146

9:                                                ; preds = %5
  %10 = getelementptr inbounds i8, i8* %1, i64 12
  %11 = load i8, i8* %10, align 2
  %12 = icmp eq i8 %11, 67
  %13 = getelementptr inbounds i8, i8* %1, i64 13
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, 83
  %16 = and i1 %12, %15
  br i1 %16, label %17, label %25

17:                                               ; preds = %9
  %18 = getelementptr inbounds i8, i8* %1, i64 14
  %19 = load i8, i8* %18, align 2
  %20 = icmp eq i8 %19, 101
  br i1 %20, label %21, label %25

21:                                               ; preds = %17
  %22 = getelementptr inbounds i8, i8* %1, i64 15
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, 108
  br i1 %24, label %35, label %25

25:                                               ; preds = %9, %21, %17
  %26 = phi i8 [ 83, %21 ], [ 83, %17 ], [ %14, %9 ]
  %27 = zext i8 %11 to i32
  %28 = zext i8 %26 to i32
  %29 = getelementptr inbounds i8, i8* %1, i64 14
  %30 = load i8, i8* %29, align 2
  %31 = zext i8 %30 to i32
  %32 = getelementptr inbounds i8, i8* %1, i64 15
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  tail call void (%struct.UDataSwapper*, i8*, ...) @udata_printError_69(%struct.UDataSwapper* %0, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.1, i64 0, i64 0), i32 %27, i32 %28, i32 %31, i32 %34) #10
  store i32 3, i32* %4, align 4
  br label %146

35:                                               ; preds = %21
  %36 = getelementptr inbounds i8, i8* %1, i64 16
  %37 = load i8, i8* %36, align 2
  %38 = icmp eq i8 %37, 1
  br i1 %38, label %41, label %39

39:                                               ; preds = %35
  %40 = zext i8 %37 to i32
  tail call void (%struct.UDataSwapper*, i8*, ...) @udata_printError_69(%struct.UDataSwapper* %0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i32 %40) #10
  store i32 16, i32* %4, align 4
  br label %146

41:                                               ; preds = %35
  %42 = icmp sgt i32 %2, -1
  br i1 %42, label %43, label %47

43:                                               ; preds = %41
  %44 = sub nsw i32 %2, %6
  %45 = icmp slt i32 %44, 64
  br i1 %45, label %46, label %47

46:                                               ; preds = %43
  tail call void (%struct.UDataSwapper*, i8*, ...) @udata_printError_69(%struct.UDataSwapper* %0, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.3, i64 0, i64 0), i32 %44) #10
  store i32 8, i32* %4, align 4
  br label %146

47:                                               ; preds = %43, %41
  %48 = phi i32 [ %44, %43 ], [ %2, %41 ]
  %49 = sext i32 %6 to i64
  %50 = getelementptr inbounds i8, i8* %1, i64 %49
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %52) #10
  %54 = getelementptr inbounds i8, i8* %50, i64 4
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %56) #10
  %58 = getelementptr inbounds i8, i8* %50, i64 8
  %59 = bitcast i8* %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %60) #10
  %62 = getelementptr inbounds i8, i8* %50, i64 12
  %63 = bitcast i8* %62 to i32*
  %64 = load i32, i32* %63, align 4
  %65 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %64) #10
  %66 = getelementptr inbounds i8, i8* %50, i64 16
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %68) #10
  %70 = getelementptr inbounds i8, i8* %50, i64 20
  %71 = bitcast i8* %70 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %72) #10
  %74 = getelementptr inbounds i8, i8* %50, i64 24
  %75 = bitcast i8* %74 to i32*
  %76 = load i32, i32* %75, align 4
  %77 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %76) #10
  %78 = getelementptr inbounds i8, i8* %50, i64 28
  %79 = bitcast i8* %78 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %80) #10
  %82 = getelementptr inbounds i8, i8* %50, i64 32
  %83 = bitcast i8* %82 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %84) #10
  %86 = getelementptr inbounds i8, i8* %50, i64 36
  %87 = bitcast i8* %86 to i32*
  %88 = load i32, i32* %87, align 4
  %89 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %88) #10
  %90 = getelementptr inbounds i8, i8* %50, i64 40
  %91 = bitcast i8* %90 to i32*
  %92 = load i32, i32* %91, align 4
  %93 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %92) #10
  %94 = getelementptr inbounds i8, i8* %50, i64 44
  %95 = bitcast i8* %94 to i32*
  %96 = load i32, i32* %95, align 4
  %97 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %96) #10
  %98 = getelementptr inbounds i8, i8* %50, i64 48
  %99 = bitcast i8* %98 to i32*
  %100 = load i32, i32* %99, align 4
  %101 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %100) #10
  %102 = getelementptr inbounds i8, i8* %50, i64 52
  %103 = bitcast i8* %102 to i32*
  %104 = load i32, i32* %103, align 4
  %105 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %104) #10
  %106 = getelementptr inbounds i8, i8* %50, i64 56
  %107 = bitcast i8* %106 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %108) #10
  %110 = getelementptr inbounds i8, i8* %50, i64 60
  %111 = bitcast i8* %110 to i32*
  %112 = load i32, i32* %111, align 4
  %113 = tail call i32 @udata_readInt32_69(%struct.UDataSwapper* %0, i32 %112) #10
  %114 = getelementptr inbounds i8, i8* %3, i64 %49
  %115 = icmp sgt i32 %48, -1
  br i1 %115, label %116, label %144

116:                                              ; preds = %47
  %117 = icmp slt i32 %48, %113
  br i1 %117, label %118, label %119

118:                                              ; preds = %116
  tail call void (%struct.UDataSwapper*, i8*, ...) @udata_printError_69(%struct.UDataSwapper* %0, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.4, i64 0, i64 0), i32 %48) #10
  store i32 8, i32* %4, align 4
  br label %146

119:                                              ; preds = %116
  %120 = icmp eq i8* %1, %3
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = sext i32 %113 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 %50, i64 %122, i1 false)
  br label %123

123:                                              ; preds = %119, %121
  %124 = getelementptr inbounds %struct.UDataSwapper, %struct.UDataSwapper* %0, i64 0, i32 10
  %125 = load i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %124, align 8
  %126 = tail call i32 %125(%struct.UDataSwapper* %0, i8* %50, i32 64, i8* %114, i32* %4) #10
  %127 = getelementptr inbounds i8, i8* %50, i64 64
  %128 = getelementptr inbounds i8, i8* %114, i64 64
  %129 = tail call i32 @utrie2_swap_69(%struct.UDataSwapper* %0, i8* %127, i32 %53, i8* %128, i32* %4) #10
  %130 = add nsw i32 %53, 64
  %131 = shl nsw i32 %57, 2
  %132 = load i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %124, align 8
  %133 = sext i32 %130 to i64
  %134 = getelementptr inbounds i8, i8* %50, i64 %133
  %135 = getelementptr inbounds i8, i8* %114, i64 %133
  %136 = tail call i32 %132(%struct.UDataSwapper* %0, i8* %134, i32 %131, i8* %135, i32* %4) #10
  %137 = add nsw i32 %131, %130
  %138 = getelementptr inbounds %struct.UDataSwapper, %struct.UDataSwapper* %0, i64 0, i32 12
  %139 = load i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)*, i32 (%struct.UDataSwapper*, i8*, i32, i8*, i32*)** %138, align 8
  %140 = sext i32 %137 to i64
  %141 = getelementptr inbounds i8, i8* %50, i64 %140
  %142 = getelementptr inbounds i8, i8* %114, i64 %140
  %143 = tail call i32 %139(%struct.UDataSwapper* %0, i8* %141, i32 %65, i8* %142, i32* %4) #10
  br label %144

144:                                              ; preds = %123, %47
  %145 = add nsw i32 %113, %6
  br label %146

146:                                              ; preds = %118, %144, %25, %39, %46, %5
  %147 = phi i32 [ 0, %5 ], [ 0, %39 ], [ 0, %46 ], [ 0, %25 ], [ 0, %118 ], [ %145, %144 ]
  ret i32 %147
}

declare void @udata_closeSwapper_69(%struct.UDataSwapper*) local_unnamed_addr #3

declare %struct.UTrie2* @utrie2_openFromSerialized_69(i32, i8*, i32, i32*, i32*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %struct.UEnumeration* @ucnvsel_selectForString_69(%struct.UConverterSelector*, i16* readonly, i32, i32* nocapture) local_unnamed_addr #0 {
  %5 = load i32, i32* %3, align 4
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %7, label %274

7:                                                ; preds = %4
  %8 = icmp eq %struct.UConverterSelector* %0, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %7
  %10 = icmp eq i16* %1, null
  %11 = icmp ne i32 %2, 0
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %9, %7
  store i32 1, i32* %3, align 4
  br label %274

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, 31
  %18 = sdiv i32 %17, 32
  %19 = shl nsw i32 %18, 2
  %20 = sext i32 %19 to i64
  %21 = tail call noalias i8* @uprv_malloc_69(i64 %20) #9
  %22 = bitcast i8* %21 to i32*
  %23 = icmp eq i8* %21, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %14
  store i32 7, i32* %3, align 4
  br label %274

25:                                               ; preds = %14
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %21, i8 -1, i64 %20, i1 false)
  br i1 %10, label %272, label %26

26:                                               ; preds = %25
  %27 = icmp sgt i32 %2, -1
  %28 = sext i32 %2 to i64
  %29 = getelementptr inbounds i16, i16* %1, i64 %28
  %30 = select i1 %27, i16* %29, i16* null
  %31 = icmp eq i16* %30, null
  %32 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 0
  %33 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 1
  %34 = icmp sgt i32 %16, 0
  %35 = zext i32 %18 to i64
  %36 = shl nuw nsw i64 %35, 2
  %37 = getelementptr i8, i8* %21, i64 %36
  %38 = and i64 %35, 4294967288
  %39 = add nsw i64 %38, -8
  %40 = lshr exact i64 %39, 3
  %41 = add nuw nsw i64 %40, 1
  %42 = icmp ult i32 %18, 8
  %43 = and i64 %35, 4294967288
  %44 = and i64 %41, 1
  %45 = icmp eq i64 %39, 0
  %46 = sub nuw nsw i64 %41, %44
  %47 = icmp eq i64 %44, 0
  %48 = icmp eq i64 %43, %35
  %49 = and i64 %35, 1
  %50 = icmp eq i64 %49, 0
  %51 = sub nsw i64 0, %35
  br label %52

52:                                               ; preds = %269, %26
  %53 = phi i16* [ %1, %26 ], [ %139, %269 ]
  br i1 %31, label %54, label %57

54:                                               ; preds = %52
  %55 = load i16, i16* %53, align 2
  %56 = icmp eq i16 %55, 0
  br i1 %56, label %272, label %61

57:                                               ; preds = %52
  %58 = icmp eq i16* %53, %30
  br i1 %58, label %272, label %59

59:                                               ; preds = %57
  %60 = load i16, i16* %53, align 2
  br label %61

61:                                               ; preds = %59, %54
  %62 = phi i16 [ %60, %59 ], [ %55, %54 ]
  %63 = getelementptr inbounds i16, i16* %53, i64 1
  %64 = zext i16 %62 to i32
  %65 = and i32 %64, 64512
  %66 = icmp eq i32 %65, 55296
  br i1 %66, label %81, label %67

67:                                               ; preds = %61
  %68 = load %struct.UTrie2*, %struct.UTrie2** %32, align 8
  %69 = getelementptr inbounds %struct.UTrie2, %struct.UTrie2* %68, i64 0, i32 0
  %70 = load i16*, i16** %69, align 8
  %71 = lshr i32 %64, 5
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i16, i16* %70, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = shl nuw nsw i32 %75, 2
  %77 = and i32 %64, 31
  %78 = add nuw nsw i32 %76, %77
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds i16, i16* %70, i64 %79
  br label %138

81:                                               ; preds = %61
  %82 = icmp eq i16* %63, %30
  br i1 %82, label %88, label %83

83:                                               ; preds = %81
  %84 = load i16, i16* %63, align 2
  %85 = zext i16 %84 to i32
  %86 = and i32 %85, 64512
  %87 = icmp eq i32 %86, 56320
  br i1 %87, label %103, label %88

88:                                               ; preds = %83, %81
  %89 = load %struct.UTrie2*, %struct.UTrie2** %32, align 8
  %90 = getelementptr inbounds %struct.UTrie2, %struct.UTrie2* %89, i64 0, i32 0
  %91 = load i16*, i16** %90, align 8
  %92 = lshr i32 %64, 5
  %93 = add nuw nsw i32 %92, 320
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds i16, i16* %91, i64 %94
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = shl nuw nsw i32 %97, 2
  %99 = and i32 %64, 31
  %100 = add nuw nsw i32 %98, %99
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds i16, i16* %91, i64 %101
  br label %138

103:                                              ; preds = %83
  %104 = getelementptr inbounds i16, i16* %53, i64 2
  %105 = shl nuw nsw i32 %64, 10
  %106 = add nsw i32 %105, -56613888
  %107 = add nsw i32 %106, %85
  %108 = load %struct.UTrie2*, %struct.UTrie2** %32, align 8
  %109 = getelementptr inbounds %struct.UTrie2, %struct.UTrie2* %108, i64 0, i32 0
  %110 = load i16*, i16** %109, align 8
  %111 = getelementptr inbounds %struct.UTrie2, %struct.UTrie2* %108, i64 0, i32 9
  %112 = load i32, i32* %111, align 4
  %113 = icmp slt i32 %107, %112
  br i1 %113, label %117, label %114

114:                                              ; preds = %103
  %115 = getelementptr inbounds %struct.UTrie2, %struct.UTrie2* %108, i64 0, i32 10
  %116 = load i32, i32* %115, align 8
  br label %134

117:                                              ; preds = %103
  %118 = ashr i32 %107, 11
  %119 = add nsw i32 %118, 2080
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i16, i16* %110, i64 %120
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = lshr i32 %107, 5
  %125 = and i32 %124, 63
  %126 = add nuw nsw i32 %125, %123
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds i16, i16* %110, i64 %127
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = shl nuw nsw i32 %130, 2
  %132 = and i32 %107, 31
  %133 = add nuw nsw i32 %131, %132
  br label %134

134:                                              ; preds = %117, %114
  %135 = phi i32 [ %116, %114 ], [ %133, %117 ]
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i16, i16* %110, i64 %136
  br label %138

138:                                              ; preds = %88, %134, %67
  %139 = phi i16* [ %63, %88 ], [ %104, %134 ], [ %63, %67 ]
  %140 = phi i16* [ %102, %88 ], [ %137, %134 ], [ %80, %67 ]
  %141 = load i16, i16* %140, align 2
  %142 = load i32*, i32** %33, align 8
  %143 = zext i16 %141 to i64
  %144 = getelementptr inbounds i32, i32* %142, i64 %143
  %145 = bitcast i32* %144 to i8*
  br i1 %34, label %146, label %272

146:                                              ; preds = %138
  br i1 %42, label %234, label %147

147:                                              ; preds = %146
  %148 = getelementptr i32, i32* %142, i64 %35
  %149 = getelementptr i32, i32* %148, i64 %143
  %150 = bitcast i32* %149 to i8*
  %151 = icmp ult i8* %21, %150
  %152 = icmp ugt i8* %37, %145
  %153 = and i1 %151, %152
  br i1 %153, label %234, label %154

154:                                              ; preds = %147
  br i1 %45, label %200, label %155

155:                                              ; preds = %154, %155
  %156 = phi i64 [ %197, %155 ], [ 0, %154 ]
  %157 = phi <4 x i32> [ %195, %155 ], [ zeroinitializer, %154 ]
  %158 = phi <4 x i32> [ %196, %155 ], [ zeroinitializer, %154 ]
  %159 = phi i64 [ %198, %155 ], [ %46, %154 ]
  %160 = getelementptr inbounds i32, i32* %144, i64 %156
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 4, !alias.scope !2
  %163 = getelementptr inbounds i32, i32* %160, i64 4
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 4, !alias.scope !2
  %166 = getelementptr inbounds i32, i32* %22, i64 %156
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4, !alias.scope !5, !noalias !2
  %169 = getelementptr inbounds i32, i32* %166, i64 4
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4, !alias.scope !5, !noalias !2
  %172 = and <4 x i32> %168, %162
  %173 = and <4 x i32> %171, %165
  %174 = bitcast i32* %166 to <4 x i32>*
  store <4 x i32> %172, <4 x i32>* %174, align 4, !alias.scope !5, !noalias !2
  %175 = bitcast i32* %169 to <4 x i32>*
  store <4 x i32> %173, <4 x i32>* %175, align 4, !alias.scope !5, !noalias !2
  %176 = or <4 x i32> %172, %157
  %177 = or <4 x i32> %173, %158
  %178 = or i64 %156, 8
  %179 = getelementptr inbounds i32, i32* %144, i64 %178
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 4, !alias.scope !2
  %182 = getelementptr inbounds i32, i32* %179, i64 4
  %183 = bitcast i32* %182 to <4 x i32>*
  %184 = load <4 x i32>, <4 x i32>* %183, align 4, !alias.scope !2
  %185 = getelementptr inbounds i32, i32* %22, i64 %178
  %186 = bitcast i32* %185 to <4 x i32>*
  %187 = load <4 x i32>, <4 x i32>* %186, align 4, !alias.scope !5, !noalias !2
  %188 = getelementptr inbounds i32, i32* %185, i64 4
  %189 = bitcast i32* %188 to <4 x i32>*
  %190 = load <4 x i32>, <4 x i32>* %189, align 4, !alias.scope !5, !noalias !2
  %191 = and <4 x i32> %187, %181
  %192 = and <4 x i32> %190, %184
  %193 = bitcast i32* %185 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %193, align 4, !alias.scope !5, !noalias !2
  %194 = bitcast i32* %188 to <4 x i32>*
  store <4 x i32> %192, <4 x i32>* %194, align 4, !alias.scope !5, !noalias !2
  %195 = or <4 x i32> %191, %176
  %196 = or <4 x i32> %192, %177
  %197 = add i64 %156, 16
  %198 = add i64 %159, -2
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %155, !llvm.loop !7

200:                                              ; preds = %155, %154
  %201 = phi <4 x i32> [ undef, %154 ], [ %195, %155 ]
  %202 = phi <4 x i32> [ undef, %154 ], [ %196, %155 ]
  %203 = phi i64 [ 0, %154 ], [ %197, %155 ]
  %204 = phi <4 x i32> [ zeroinitializer, %154 ], [ %195, %155 ]
  %205 = phi <4 x i32> [ zeroinitializer, %154 ], [ %196, %155 ]
  br i1 %47, label %225, label %206

206:                                              ; preds = %200
  %207 = getelementptr inbounds i32, i32* %144, i64 %203
  %208 = bitcast i32* %207 to <4 x i32>*
  %209 = load <4 x i32>, <4 x i32>* %208, align 4, !alias.scope !2
  %210 = getelementptr inbounds i32, i32* %207, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  %212 = load <4 x i32>, <4 x i32>* %211, align 4, !alias.scope !2
  %213 = getelementptr inbounds i32, i32* %22, i64 %203
  %214 = bitcast i32* %213 to <4 x i32>*
  %215 = load <4 x i32>, <4 x i32>* %214, align 4, !alias.scope !5, !noalias !2
  %216 = getelementptr inbounds i32, i32* %213, i64 4
  %217 = bitcast i32* %216 to <4 x i32>*
  %218 = load <4 x i32>, <4 x i32>* %217, align 4, !alias.scope !5, !noalias !2
  %219 = and <4 x i32> %215, %209
  %220 = and <4 x i32> %218, %212
  %221 = bitcast i32* %213 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %221, align 4, !alias.scope !5, !noalias !2
  %222 = bitcast i32* %216 to <4 x i32>*
  store <4 x i32> %220, <4 x i32>* %222, align 4, !alias.scope !5, !noalias !2
  %223 = or <4 x i32> %220, %205
  %224 = or <4 x i32> %219, %204
  br label %225

225:                                              ; preds = %200, %206
  %226 = phi <4 x i32> [ %201, %200 ], [ %224, %206 ]
  %227 = phi <4 x i32> [ %202, %200 ], [ %223, %206 ]
  %228 = or <4 x i32> %227, %226
  %229 = shufflevector <4 x i32> %228, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %230 = or <4 x i32> %228, %229
  %231 = shufflevector <4 x i32> %230, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %232 = or <4 x i32> %230, %231
  %233 = extractelement <4 x i32> %232, i32 0
  br i1 %48, label %269, label %234

234:                                              ; preds = %225, %147, %146
  %235 = phi i64 [ 0, %147 ], [ 0, %146 ], [ %43, %225 ]
  %236 = phi i32 [ 0, %147 ], [ 0, %146 ], [ %233, %225 ]
  %237 = xor i64 %235, -1
  br i1 %50, label %246, label %238

238:                                              ; preds = %234
  %239 = getelementptr inbounds i32, i32* %144, i64 %235
  %240 = load i32, i32* %239, align 4
  %241 = getelementptr inbounds i32, i32* %22, i64 %235
  %242 = load i32, i32* %241, align 4
  %243 = and i32 %242, %240
  store i32 %243, i32* %241, align 4
  %244 = or i32 %243, %236
  %245 = or i64 %235, 1
  br label %246

246:                                              ; preds = %238, %234
  %247 = phi i32 [ %244, %238 ], [ undef, %234 ]
  %248 = phi i64 [ %245, %238 ], [ %235, %234 ]
  %249 = phi i32 [ %244, %238 ], [ %236, %234 ]
  %250 = icmp eq i64 %237, %51
  br i1 %250, label %269, label %251

251:                                              ; preds = %246, %251
  %252 = phi i64 [ %267, %251 ], [ %248, %246 ]
  %253 = phi i32 [ %266, %251 ], [ %249, %246 ]
  %254 = getelementptr inbounds i32, i32* %144, i64 %252
  %255 = load i32, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %22, i64 %252
  %257 = load i32, i32* %256, align 4
  %258 = and i32 %257, %255
  store i32 %258, i32* %256, align 4
  %259 = or i32 %258, %253
  %260 = add nuw nsw i64 %252, 1
  %261 = getelementptr inbounds i32, i32* %144, i64 %260
  %262 = load i32, i32* %261, align 4
  %263 = getelementptr inbounds i32, i32* %22, i64 %260
  %264 = load i32, i32* %263, align 4
  %265 = and i32 %264, %262
  store i32 %265, i32* %263, align 4
  %266 = or i32 %265, %259
  %267 = add nuw nsw i64 %252, 2
  %268 = icmp eq i64 %267, %35
  br i1 %268, label %269, label %251, !llvm.loop !9

269:                                              ; preds = %246, %251, %225
  %270 = phi i32 [ %233, %225 ], [ %247, %246 ], [ %266, %251 ]
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %272, label %52

272:                                              ; preds = %54, %269, %57, %138, %25
  %273 = tail call fastcc %struct.UEnumeration* @_ZL13selectForMaskPK18UConverterSelectorPjP10UErrorCode(%struct.UConverterSelector* nonnull %0, i32* nonnull %22, i32* %3)
  br label %274

274:                                              ; preds = %24, %272, %4, %13
  %275 = phi %struct.UEnumeration* [ null, %13 ], [ null, %4 ], [ null, %24 ], [ %273, %272 ]
  ret %struct.UEnumeration* %275
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.UEnumeration* @_ZL13selectForMaskPK18UConverterSelectorPjP10UErrorCode(%struct.UConverterSelector*, i32*, i32* nocapture) unnamed_addr #0 {
  %4 = tail call noalias i8* @uprv_malloc_69(i64 24) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  store i32 7, i32* %2, align 4
  br label %118

7:                                                ; preds = %3
  %8 = bitcast i8* %4 to i16**
  store i16* null, i16** %8, align 8
  %9 = getelementptr inbounds i8, i8* %4, i64 10
  %10 = bitcast i8* %9 to i16*
  store i16 0, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %4, i64 8
  %12 = bitcast i8* %11 to i16*
  store i16 0, i16* %12, align 8
  %13 = getelementptr inbounds i8, i8* %4, i64 16
  %14 = bitcast i8* %13 to %struct.UConverterSelector**
  store %struct.UConverterSelector* %0, %struct.UConverterSelector** %14, align 8
  %15 = tail call noalias i8* @uprv_malloc_69(i64 56) #9
  %16 = bitcast i8* %15 to %struct.UEnumeration*
  %17 = icmp eq i8* %15, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %7
  store i32 7, i32* %2, align 4
  br label %114

19:                                               ; preds = %7
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %15, i8* align 8 bitcast (%struct.UEnumeration* @_ZL16defaultEncodings to i8*), i64 56, i1 false)
  %20 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 4
  %21 = load i32, i32* %20, align 8
  %22 = add nsw i32 %21, 31
  %23 = sdiv i32 %22, 32
  %24 = icmp sgt i32 %21, 0
  br i1 %24, label %25, label %111

25:                                               ; preds = %19
  %26 = zext i32 %23 to i64
  %27 = and i64 %26, 1
  %28 = add i32 %21, -1
  %29 = icmp ult i32 %28, 32
  br i1 %29, label %52, label %30

30:                                               ; preds = %25
  %31 = sub nsw i64 %26, %27
  br label %32

32:                                               ; preds = %129, %30
  %33 = phi i64 [ 0, %30 ], [ %131, %129 ]
  %34 = phi i32 [ 0, %30 ], [ %130, %129 ]
  %35 = phi i64 [ %31, %30 ], [ %132, %129 ]
  %36 = getelementptr inbounds i32, i32* %1, i64 %33
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %46, label %39

39:                                               ; preds = %32, %39
  %40 = phi i32 [ %43, %39 ], [ %37, %32 ]
  %41 = phi i32 [ %44, %39 ], [ %34, %32 ]
  %42 = add i32 %40, -1
  %43 = and i32 %42, %40
  %44 = add nsw i32 %41, 1
  %45 = icmp eq i32 %43, 0
  br i1 %45, label %46, label %39

46:                                               ; preds = %39, %32
  %47 = phi i32 [ %34, %32 ], [ %44, %39 ]
  %48 = or i64 %33, 1
  %49 = getelementptr inbounds i32, i32* %1, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %129, label %122

52:                                               ; preds = %129, %25
  %53 = phi i32 [ undef, %25 ], [ %130, %129 ]
  %54 = phi i64 [ 0, %25 ], [ %131, %129 ]
  %55 = phi i32 [ 0, %25 ], [ %130, %129 ]
  %56 = icmp eq i64 %27, 0
  br i1 %56, label %68, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds i32, i32* %1, i64 %54
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %68, label %61

61:                                               ; preds = %57, %61
  %62 = phi i32 [ %65, %61 ], [ %59, %57 ]
  %63 = phi i32 [ %66, %61 ], [ %55, %57 ]
  %64 = add i32 %62, -1
  %65 = and i32 %64, %62
  %66 = add nsw i32 %63, 1
  %67 = icmp eq i32 %65, 0
  br i1 %67, label %68, label %61

68:                                               ; preds = %61, %57, %52
  %69 = phi i32 [ %53, %52 ], [ %55, %57 ], [ %66, %61 ]
  %70 = trunc i32 %69 to i16
  %71 = icmp sgt i16 %70, 0
  br i1 %71, label %72, label %111

72:                                               ; preds = %68
  %73 = sext i16 %70 to i64
  %74 = shl nsw i64 %73, 1
  %75 = tail call noalias i8* @uprv_malloc_69(i64 %74) #9
  %76 = bitcast i8* %4 to i8**
  store i8* %75, i8** %76, align 8
  %77 = icmp eq i8* %75, null
  br i1 %77, label %80, label %78

78:                                               ; preds = %72
  %79 = sext i32 %23 to i64
  br label %81

80:                                               ; preds = %72
  store i32 7, i32* %2, align 4
  br label %114

81:                                               ; preds = %78, %107
  %82 = phi i64 [ 0, %78 ], [ %109, %107 ]
  %83 = phi i16 [ 0, %78 ], [ %108, %107 ]
  %84 = getelementptr inbounds i32, i32* %1, i64 %82
  %85 = load i32, i32* %84, align 4
  br label %86

86:                                               ; preds = %102, %81
  %87 = phi i32 [ %85, %81 ], [ %103, %102 ]
  %88 = phi i16 [ %83, %81 ], [ %105, %102 ]
  %89 = phi i32 [ 0, %81 ], [ %104, %102 ]
  %90 = sext i16 %88 to i32
  %91 = load i32, i32* %20, align 8
  %92 = icmp sgt i32 %91, %90
  br i1 %92, label %93, label %107

93:                                               ; preds = %86
  %94 = and i32 %87, 1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %102, label %96

96:                                               ; preds = %93
  %97 = load i16*, i16** %8, align 8
  %98 = load i16, i16* %12, align 8
  %99 = add i16 %98, 1
  store i16 %99, i16* %12, align 8
  %100 = sext i16 %98 to i64
  %101 = getelementptr inbounds i16, i16* %97, i64 %100
  store i16 %88, i16* %101, align 2
  br label %102

102:                                              ; preds = %93, %96
  %103 = lshr i32 %87, 1
  %104 = add nuw nsw i32 %89, 1
  %105 = add i16 %88, 1
  %106 = icmp eq i32 %104, 32
  br i1 %106, label %107, label %86

107:                                              ; preds = %102, %86
  %108 = phi i16 [ %105, %102 ], [ %88, %86 ]
  %109 = add nuw nsw i64 %82, 1
  %110 = icmp slt i64 %109, %79
  br i1 %110, label %81, label %111

111:                                              ; preds = %107, %19, %68
  %112 = getelementptr inbounds i8, i8* %15, i64 8
  %113 = bitcast i8* %112 to i8**
  store i8* %4, i8** %113, align 8
  br label %114

114:                                              ; preds = %80, %111, %18
  %115 = phi i8* [ %4, %80 ], [ null, %111 ], [ %4, %18 ]
  %116 = phi i8* [ %15, %80 ], [ null, %111 ], [ null, %18 ]
  %117 = phi %struct.UEnumeration* [ null, %80 ], [ %16, %111 ], [ null, %18 ]
  tail call void @uprv_free_69(i8* %116) #10
  br label %118

118:                                              ; preds = %114, %6
  %119 = phi i8* [ %115, %114 ], [ null, %6 ]
  %120 = phi %struct.UEnumeration* [ %117, %114 ], [ null, %6 ]
  tail call void @uprv_free_69(i8* %119) #10
  %121 = bitcast i32* %1 to i8*
  tail call void @uprv_free_69(i8* %121) #10
  ret %struct.UEnumeration* %120

122:                                              ; preds = %46, %122
  %123 = phi i32 [ %126, %122 ], [ %50, %46 ]
  %124 = phi i32 [ %127, %122 ], [ %47, %46 ]
  %125 = add i32 %123, -1
  %126 = and i32 %125, %123
  %127 = add nsw i32 %124, 1
  %128 = icmp eq i32 %126, 0
  br i1 %128, label %129, label %122

129:                                              ; preds = %122, %46
  %130 = phi i32 [ %47, %46 ], [ %127, %122 ]
  %131 = add nuw nsw i64 %33, 2
  %132 = add i64 %35, -2
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %52, label %32
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.UEnumeration* @ucnvsel_selectForUTF8_69(%struct.UConverterSelector*, i8*, i32, i32* nocapture) local_unnamed_addr #0 {
  %5 = load i32, i32* %3, align 4
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %7, label %283

7:                                                ; preds = %4
  %8 = icmp eq %struct.UConverterSelector* %0, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %7
  %10 = icmp eq i8* %1, null
  %11 = icmp ne i32 %2, 0
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %9, %7
  store i32 1, i32* %3, align 4
  br label %283

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, 31
  %18 = sdiv i32 %17, 32
  %19 = shl nsw i32 %18, 2
  %20 = sext i32 %19 to i64
  %21 = tail call noalias i8* @uprv_malloc_69(i64 %20) #9
  %22 = bitcast i8* %21 to i32*
  %23 = icmp eq i8* %21, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %14
  store i32 7, i32* %3, align 4
  br label %283

25:                                               ; preds = %14
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %21, i8 -1, i64 %20, i1 false)
  %26 = icmp slt i32 %2, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %25
  %28 = tail call i64 @strlen(i8* %1) #11
  %29 = trunc i64 %28 to i32
  br label %30

30:                                               ; preds = %27, %25
  %31 = phi i32 [ %29, %27 ], [ %2, %25 ]
  br i1 %10, label %281, label %32

32:                                               ; preds = %30
  %33 = sext i32 %31 to i64
  %34 = getelementptr inbounds i8, i8* %1, i64 %33
  %35 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 0
  %36 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %0, i64 0, i32 1
  %37 = icmp sgt i32 %16, 0
  %38 = zext i32 %18 to i64
  %39 = shl nuw nsw i64 %38, 2
  %40 = getelementptr i8, i8* %21, i64 %39
  %41 = and i64 %38, 4294967288
  %42 = add nsw i64 %41, -8
  %43 = lshr exact i64 %42, 3
  %44 = add nuw nsw i64 %43, 1
  %45 = icmp ult i32 %18, 8
  %46 = and i64 %38, 4294967288
  %47 = and i64 %44, 1
  %48 = icmp eq i64 %42, 0
  %49 = sub nuw nsw i64 %44, %47
  %50 = icmp eq i64 %47, 0
  %51 = icmp eq i64 %46, %38
  %52 = and i64 %38, 1
  %53 = icmp eq i64 %52, 0
  %54 = sub nsw i64 0, %38
  br label %55

55:                                               ; preds = %278, %32
  %56 = phi i8* [ %1, %32 ], [ %148, %278 ]
  %57 = icmp eq i8* %56, %34
  br i1 %57, label %281, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds i8, i8* %56, i64 1
  %60 = load i8, i8* %56, align 1
  %61 = zext i8 %60 to i32
  %62 = icmp sgt i8 %60, -1
  br i1 %62, label %63, label %69

63:                                               ; preds = %58
  %64 = load %struct.UTrie2*, %struct.UTrie2** %35, align 8
  %65 = getelementptr inbounds %struct.UTrie2, %struct.UTrie2* %64, i64 0, i32 1
  %66 = load i16*, i16** %65, align 8
  %67 = zext i8 %60 to i64
  %68 = getelementptr inbounds i16, i16* %66, i64 %67
  br label %147

69:                                               ; preds = %58
  %70 = and i8 %60, -16
  %71 = icmp eq i8 %70, -32
  br i1 %71, label %72, label %113

72:                                               ; preds = %69
  %73 = getelementptr inbounds i8, i8* %56, i64 2
  %74 = icmp ult i8* %73, %34
  br i1 %74, label %75, label %135

75:                                               ; preds = %72
  %76 = and i32 %61, 15
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = sext i8 %79 to i32
  %81 = load i8, i8* %59, align 1
  %82 = zext i8 %81 to i32
  %83 = lshr i32 %82, 5
  %84 = shl i32 1, %83
  %85 = and i32 %84, %80
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %135, label %87

87:                                               ; preds = %75
  %88 = load i8, i8* %73, align 1
  %89 = xor i8 %88, -128
  %90 = zext i8 %89 to i32
  %91 = icmp ult i8 %89, 64
  br i1 %91, label %92, label %135

92:                                               ; preds = %87
  %93 = getelementptr inbounds i8, i8* %56, i64 3
  %94 = load %struct.UTrie2*, %struct.UTrie2** %35, align 8
  %95 = getelementptr inbounds %struct.UTrie2, %struct.UTrie2* %94, i64 0, i32 0
  %96 = load i16*, i16** %95, align 8
  %97 = shl nuw nsw i32 %61, 7
  %98 = add nsw i32 %97, -28672
  %99 = shl nuw nsw i32 %82, 1
  %100 = and i32 %99, 126
  %101 = or i32 %100, %98
  %102 = lshr i32 %90, 5
  %103 = add nsw i32 %102, %101
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i16, i16* %96, i64 %104
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = shl nuw nsw i32 %107, 2
  %109 = and i32 %90, 31
  %110 = add nuw nsw i32 %108, %109
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i16, i16* %96, i64 %111
  br label %147

113:                                              ; preds = %69
  %114 = add nsw i8 %60, 62
  %115 = icmp ult i8 %114, 30
  %116 = icmp ult i8* %59, %34
  %117 = and i1 %116, %115
  br i1 %117, label %118, label %135

118:                                              ; preds = %113
  %119 = load i8, i8* %59, align 1
  %120 = xor i8 %119, -128
  %121 = icmp ult i8 %120, 64
  br i1 %121, label %122, label %135

122:                                              ; preds = %118
  %123 = zext i8 %120 to i64
  %124 = getelementptr inbounds i8, i8* %56, i64 2
  %125 = load %struct.UTrie2*, %struct.UTrie2** %35, align 8
  %126 = getelementptr inbounds %struct.UTrie2, %struct.UTrie2* %125, i64 0, i32 0
  %127 = load i16*, i16** %126, align 8
  %128 = add nuw nsw i32 %61, 1888
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds i16, i16* %127, i64 %129
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i64
  %133 = add nuw nsw i64 %132, %123
  %134 = getelementptr inbounds i16, i16* %127, i64 %133
  br label %147

135:                                              ; preds = %72, %87, %75, %118, %113
  %136 = load %struct.UTrie2*, %struct.UTrie2** %35, align 8
  %137 = tail call i32 @utrie2_internalU8NextIndex_69(%struct.UTrie2* %136, i32 %61, i8* %59, i8* %34) #10
  %138 = and i32 %137, 7
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds i8, i8* %59, i64 %139
  %141 = load %struct.UTrie2*, %struct.UTrie2** %35, align 8
  %142 = getelementptr inbounds %struct.UTrie2, %struct.UTrie2* %141, i64 0, i32 0
  %143 = load i16*, i16** %142, align 8
  %144 = ashr i32 %137, 3
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i16, i16* %143, i64 %145
  br label %147

147:                                              ; preds = %92, %135, %122, %63
  %148 = phi i8* [ %59, %63 ], [ %93, %92 ], [ %124, %122 ], [ %140, %135 ]
  %149 = phi i16* [ %68, %63 ], [ %112, %92 ], [ %134, %122 ], [ %146, %135 ]
  %150 = load i16, i16* %149, align 2
  %151 = load i32*, i32** %36, align 8
  %152 = zext i16 %150 to i64
  %153 = getelementptr inbounds i32, i32* %151, i64 %152
  %154 = bitcast i32* %153 to i8*
  br i1 %37, label %155, label %281

155:                                              ; preds = %147
  br i1 %45, label %243, label %156

156:                                              ; preds = %155
  %157 = getelementptr i32, i32* %151, i64 %38
  %158 = getelementptr i32, i32* %157, i64 %152
  %159 = bitcast i32* %158 to i8*
  %160 = icmp ult i8* %21, %159
  %161 = icmp ugt i8* %40, %154
  %162 = and i1 %160, %161
  br i1 %162, label %243, label %163

163:                                              ; preds = %156
  br i1 %48, label %209, label %164

164:                                              ; preds = %163, %164
  %165 = phi i64 [ %206, %164 ], [ 0, %163 ]
  %166 = phi <4 x i32> [ %204, %164 ], [ zeroinitializer, %163 ]
  %167 = phi <4 x i32> [ %205, %164 ], [ zeroinitializer, %163 ]
  %168 = phi i64 [ %207, %164 ], [ %49, %163 ]
  %169 = getelementptr inbounds i32, i32* %153, i64 %165
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4, !alias.scope !10
  %172 = getelementptr inbounds i32, i32* %169, i64 4
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4, !alias.scope !10
  %175 = getelementptr inbounds i32, i32* %22, i64 %165
  %176 = bitcast i32* %175 to <4 x i32>*
  %177 = load <4 x i32>, <4 x i32>* %176, align 4, !alias.scope !13, !noalias !10
  %178 = getelementptr inbounds i32, i32* %175, i64 4
  %179 = bitcast i32* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 4, !alias.scope !13, !noalias !10
  %181 = and <4 x i32> %177, %171
  %182 = and <4 x i32> %180, %174
  %183 = bitcast i32* %175 to <4 x i32>*
  store <4 x i32> %181, <4 x i32>* %183, align 4, !alias.scope !13, !noalias !10
  %184 = bitcast i32* %178 to <4 x i32>*
  store <4 x i32> %182, <4 x i32>* %184, align 4, !alias.scope !13, !noalias !10
  %185 = or <4 x i32> %181, %166
  %186 = or <4 x i32> %182, %167
  %187 = or i64 %165, 8
  %188 = getelementptr inbounds i32, i32* %153, i64 %187
  %189 = bitcast i32* %188 to <4 x i32>*
  %190 = load <4 x i32>, <4 x i32>* %189, align 4, !alias.scope !10
  %191 = getelementptr inbounds i32, i32* %188, i64 4
  %192 = bitcast i32* %191 to <4 x i32>*
  %193 = load <4 x i32>, <4 x i32>* %192, align 4, !alias.scope !10
  %194 = getelementptr inbounds i32, i32* %22, i64 %187
  %195 = bitcast i32* %194 to <4 x i32>*
  %196 = load <4 x i32>, <4 x i32>* %195, align 4, !alias.scope !13, !noalias !10
  %197 = getelementptr inbounds i32, i32* %194, i64 4
  %198 = bitcast i32* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 4, !alias.scope !13, !noalias !10
  %200 = and <4 x i32> %196, %190
  %201 = and <4 x i32> %199, %193
  %202 = bitcast i32* %194 to <4 x i32>*
  store <4 x i32> %200, <4 x i32>* %202, align 4, !alias.scope !13, !noalias !10
  %203 = bitcast i32* %197 to <4 x i32>*
  store <4 x i32> %201, <4 x i32>* %203, align 4, !alias.scope !13, !noalias !10
  %204 = or <4 x i32> %200, %185
  %205 = or <4 x i32> %201, %186
  %206 = add i64 %165, 16
  %207 = add i64 %168, -2
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %164, !llvm.loop !15

209:                                              ; preds = %164, %163
  %210 = phi <4 x i32> [ undef, %163 ], [ %204, %164 ]
  %211 = phi <4 x i32> [ undef, %163 ], [ %205, %164 ]
  %212 = phi i64 [ 0, %163 ], [ %206, %164 ]
  %213 = phi <4 x i32> [ zeroinitializer, %163 ], [ %204, %164 ]
  %214 = phi <4 x i32> [ zeroinitializer, %163 ], [ %205, %164 ]
  br i1 %50, label %234, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds i32, i32* %153, i64 %212
  %217 = bitcast i32* %216 to <4 x i32>*
  %218 = load <4 x i32>, <4 x i32>* %217, align 4, !alias.scope !10
  %219 = getelementptr inbounds i32, i32* %216, i64 4
  %220 = bitcast i32* %219 to <4 x i32>*
  %221 = load <4 x i32>, <4 x i32>* %220, align 4, !alias.scope !10
  %222 = getelementptr inbounds i32, i32* %22, i64 %212
  %223 = bitcast i32* %222 to <4 x i32>*
  %224 = load <4 x i32>, <4 x i32>* %223, align 4, !alias.scope !13, !noalias !10
  %225 = getelementptr inbounds i32, i32* %222, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4, !alias.scope !13, !noalias !10
  %228 = and <4 x i32> %224, %218
  %229 = and <4 x i32> %227, %221
  %230 = bitcast i32* %222 to <4 x i32>*
  store <4 x i32> %228, <4 x i32>* %230, align 4, !alias.scope !13, !noalias !10
  %231 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %229, <4 x i32>* %231, align 4, !alias.scope !13, !noalias !10
  %232 = or <4 x i32> %229, %214
  %233 = or <4 x i32> %228, %213
  br label %234

234:                                              ; preds = %209, %215
  %235 = phi <4 x i32> [ %210, %209 ], [ %233, %215 ]
  %236 = phi <4 x i32> [ %211, %209 ], [ %232, %215 ]
  %237 = or <4 x i32> %236, %235
  %238 = shufflevector <4 x i32> %237, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %239 = or <4 x i32> %237, %238
  %240 = shufflevector <4 x i32> %239, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %241 = or <4 x i32> %239, %240
  %242 = extractelement <4 x i32> %241, i32 0
  br i1 %51, label %278, label %243

243:                                              ; preds = %234, %156, %155
  %244 = phi i64 [ 0, %156 ], [ 0, %155 ], [ %46, %234 ]
  %245 = phi i32 [ 0, %156 ], [ 0, %155 ], [ %242, %234 ]
  %246 = xor i64 %244, -1
  br i1 %53, label %255, label %247

247:                                              ; preds = %243
  %248 = getelementptr inbounds i32, i32* %153, i64 %244
  %249 = load i32, i32* %248, align 4
  %250 = getelementptr inbounds i32, i32* %22, i64 %244
  %251 = load i32, i32* %250, align 4
  %252 = and i32 %251, %249
  store i32 %252, i32* %250, align 4
  %253 = or i32 %252, %245
  %254 = or i64 %244, 1
  br label %255

255:                                              ; preds = %247, %243
  %256 = phi i32 [ %253, %247 ], [ undef, %243 ]
  %257 = phi i64 [ %254, %247 ], [ %244, %243 ]
  %258 = phi i32 [ %253, %247 ], [ %245, %243 ]
  %259 = icmp eq i64 %246, %54
  br i1 %259, label %278, label %260

260:                                              ; preds = %255, %260
  %261 = phi i64 [ %276, %260 ], [ %257, %255 ]
  %262 = phi i32 [ %275, %260 ], [ %258, %255 ]
  %263 = getelementptr inbounds i32, i32* %153, i64 %261
  %264 = load i32, i32* %263, align 4
  %265 = getelementptr inbounds i32, i32* %22, i64 %261
  %266 = load i32, i32* %265, align 4
  %267 = and i32 %266, %264
  store i32 %267, i32* %265, align 4
  %268 = or i32 %267, %262
  %269 = add nuw nsw i64 %261, 1
  %270 = getelementptr inbounds i32, i32* %153, i64 %269
  %271 = load i32, i32* %270, align 4
  %272 = getelementptr inbounds i32, i32* %22, i64 %269
  %273 = load i32, i32* %272, align 4
  %274 = and i32 %273, %271
  store i32 %274, i32* %272, align 4
  %275 = or i32 %274, %268
  %276 = add nuw nsw i64 %261, 2
  %277 = icmp eq i64 %276, %38
  br i1 %277, label %278, label %260, !llvm.loop !16

278:                                              ; preds = %255, %260, %234
  %279 = phi i32 [ %242, %234 ], [ %256, %255 ], [ %275, %260 ]
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %281, label %55

281:                                              ; preds = %278, %147, %55, %30
  %282 = tail call fastcc %struct.UEnumeration* @_ZL13selectForMaskPK18UConverterSelectorPjP10UErrorCode(%struct.UConverterSelector* nonnull %0, i32* nonnull %22, i32* %3)
  br label %283

283:                                              ; preds = %24, %281, %4, %13
  %284 = phi %struct.UEnumeration* [ null, %13 ], [ null, %4 ], [ null, %24 ], [ %282, %281 ]
  ret %struct.UEnumeration* %284
}

declare i32 @utrie2_internalU8NextIndex_69(%struct.UTrie2*, i32, i8*, i8*) local_unnamed_addr #3

declare void @upvec_setValue_69(%struct.UPropsVectors*, i32, i32, i32, i32, i32, i32*) local_unnamed_addr #3

declare %struct.UConverter* @ucnv_open_69(i8*, i32*) local_unnamed_addr #3

declare %struct.USet* @uset_open_69(i32, i32) local_unnamed_addr #3

declare void @ucnv_getUnicodeSet_69(%struct.UConverter*, %struct.USet*, i32, i32*) local_unnamed_addr #3

declare void @ucnv_close_69(%struct.UConverter*) local_unnamed_addr #3

declare i32 @uset_getItemCount_69(%struct.USet*) local_unnamed_addr #3

declare i32 @uset_getItem_69(%struct.USet*, i32, i32*, i32*, i16*, i32, i32*) local_unnamed_addr #3

declare void @uset_close_69(%struct.USet*) local_unnamed_addr #3

declare %struct.UTrie2* @upvec_compactToUTrie2WithRowIndexes_69(%struct.UPropsVectors*, i32*) local_unnamed_addr #3

declare i32* @upvec_cloneArray_69(%struct.UPropsVectors*, i32*, i32*, i32*) local_unnamed_addr #3

declare i32 @udata_swapDataHeader_69(%struct.UDataSwapper*, i8*, i32, i8*, i32*) local_unnamed_addr #3

declare void @udata_printError_69(%struct.UDataSwapper*, i8*, ...) local_unnamed_addr #3

declare i32 @udata_readInt32_69(%struct.UDataSwapper*, i32) local_unnamed_addr #3

declare i32 @utrie2_swap_69(%struct.UDataSwapper*, i8*, i32, i8*, i32*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL31ucnvsel_close_selector_iteratorP12UEnumeration(%struct.UEnumeration*) #0 {
  %2 = getelementptr inbounds %struct.UEnumeration, %struct.UEnumeration* %0, i64 0, i32 1
  %3 = bitcast i8** %2 to i8***
  %4 = load i8**, i8*** %3, align 8
  %5 = load i8*, i8** %4, align 8
  tail call void @uprv_free_69(i8* %5) #10
  %6 = load i8*, i8** %2, align 8
  tail call void @uprv_free_69(i8* %6) #10
  %7 = bitcast %struct.UEnumeration* %0 to i8*
  tail call void @uprv_free_69(i8* %7) #10
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @_ZL23ucnvsel_count_encodingsP12UEnumerationP10UErrorCode(%struct.UEnumeration* nocapture readonly, i32* nocapture readonly) #6 {
  %3 = load i32, i32* %1, align 4
  %4 = icmp slt i32 %3, 1
  br i1 %4, label %5, label %12

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.UEnumeration, %struct.UEnumeration* %0, i64 0, i32 1
  %7 = bitcast i8** %6 to %struct.Enumerator**
  %8 = load %struct.Enumerator*, %struct.Enumerator** %7, align 8
  %9 = getelementptr inbounds %struct.Enumerator, %struct.Enumerator* %8, i64 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = sext i16 %10 to i32
  br label %12

12:                                               ; preds = %2, %5
  %13 = phi i32 [ %11, %5 ], [ 0, %2 ]
  ret i32 %13
}

declare i16* @uenum_unextDefault_69(%struct.UEnumeration*, i32*, i32*) #3

; Function Attrs: nofree nounwind ssp uwtable
define internal i8* @_ZL21ucnvsel_next_encodingP12UEnumerationPiP10UErrorCode(%struct.UEnumeration* nocapture readonly, i32*, i32* nocapture readonly) #7 {
  %4 = load i32, i32* %2, align 4
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %6, label %33

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.UEnumeration, %struct.UEnumeration* %0, i64 0, i32 1
  %8 = bitcast i8** %7 to %struct.Enumerator**
  %9 = load %struct.Enumerator*, %struct.Enumerator** %8, align 8
  %10 = getelementptr inbounds %struct.Enumerator, %struct.Enumerator* %9, i64 0, i32 2
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds %struct.Enumerator, %struct.Enumerator* %9, i64 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = icmp slt i16 %11, %13
  br i1 %14, label %15, label %33

15:                                               ; preds = %6
  %16 = getelementptr inbounds %struct.Enumerator, %struct.Enumerator* %9, i64 0, i32 3
  %17 = load %struct.UConverterSelector*, %struct.UConverterSelector** %16, align 8
  %18 = getelementptr inbounds %struct.UConverterSelector, %struct.UConverterSelector* %17, i64 0, i32 3
  %19 = load i8**, i8*** %18, align 8
  %20 = getelementptr inbounds %struct.Enumerator, %struct.Enumerator* %9, i64 0, i32 0
  %21 = load i16*, i16** %20, align 8
  %22 = sext i16 %11 to i64
  %23 = getelementptr inbounds i16, i16* %21, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = sext i16 %24 to i64
  %26 = getelementptr inbounds i8*, i8** %19, i64 %25
  %27 = load i8*, i8** %26, align 8
  %28 = add nsw i16 %11, 1
  store i16 %28, i16* %10, align 2
  %29 = icmp eq i32* %1, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %15
  %31 = tail call i64 @strlen(i8* %27) #11
  %32 = trunc i64 %31 to i32
  store i32 %32, i32* %1, align 4
  br label %33

33:                                               ; preds = %6, %15, %30, %3
  %34 = phi i8* [ null, %3 ], [ null, %6 ], [ %27, %15 ], [ %27, %30 ]
  ret i8* %34
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL22ucnvsel_reset_iteratorP12UEnumerationP10UErrorCode(%struct.UEnumeration* nocapture readonly, i32* nocapture readonly) #8 {
  %3 = load i32, i32* %1, align 4
  %4 = icmp slt i32 %3, 1
  br i1 %4, label %5, label %10

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.UEnumeration, %struct.UEnumeration* %0, i64 0, i32 1
  %7 = bitcast i8** %6 to %struct.Enumerator**
  %8 = load %struct.Enumerator*, %struct.Enumerator** %7, align 8
  %9 = getelementptr inbounds %struct.Enumerator, %struct.Enumerator* %8, i64 0, i32 2
  store i16 0, i16* %9, align 2
  br label %10

10:                                               ; preds = %2, %5
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind allocsize(0) }
attributes #10 = { nounwind }
attributes #11 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !8}
