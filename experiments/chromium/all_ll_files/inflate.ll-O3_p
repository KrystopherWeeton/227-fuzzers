; ModuleID = '../../third_party/zlib/contrib/optimizations/inflate.c'
source_filename = "../../third_party/zlib/contrib/optimizations/inflate.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.code = type { i8, i8, i16 }
%struct.z_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.internal_state*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.internal_state = type opaque
%struct.inflate_state = type { %struct.z_stream_s*, i32, i32, i32, i32, i32, i32, i64, i64, %struct.Cr_z_gz_header_s*, i32, i32, i32, i32, i8*, i64, i32, i32, i32, i32, %struct.code*, %struct.code*, i32, i32, i32, i32, i32, i32, %struct.code*, [320 x i16], [288 x i16], [1444 x %struct.code], i32, i32, i32 }
%struct.Cr_z_gz_header_s = type { i32, i64, i32, i32, i8*, i32, i32, i8*, i32, i8*, i32, i32, i32 }

@Cr_z_inflate.order = internal unnamed_addr constant [19 x i16] [i16 16, i16 17, i16 18, i16 0, i16 8, i16 7, i16 9, i16 6, i16 10, i16 5, i16 11, i16 4, i16 12, i16 3, i16 13, i16 2, i16 14, i16 1, i16 15], align 16
@.str.1 = private unnamed_addr constant [23 x i8] c"incorrect header check\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"unknown compression method\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"invalid window size\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"unknown header flags set\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"header crc mismatch\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"invalid block type\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"invalid stored block lengths\00", align 1
@.str.8 = private unnamed_addr constant [36 x i8] c"too many length or distance symbols\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"invalid code lengths set\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"invalid bit length repeat\00", align 1
@.str.11 = private unnamed_addr constant [37 x i8] c"invalid code -- missing end-of-block\00", align 1
@.str.12 = private unnamed_addr constant [28 x i8] c"invalid literal/lengths set\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"invalid distances set\00", align 1
@.str.14 = private unnamed_addr constant [28 x i8] c"invalid literal/length code\00", align 1
@.str.15 = private unnamed_addr constant [22 x i8] c"invalid distance code\00", align 1
@.str.16 = private unnamed_addr constant [30 x i8] c"invalid distance too far back\00", align 1
@.str.17 = private unnamed_addr constant [21 x i8] c"incorrect data check\00", align 1
@.str.18 = private unnamed_addr constant [23 x i8] c"incorrect length check\00", align 1
@fixedtables.lenfix = internal constant [512 x %struct.code] [%struct.code { i8 96, i8 7, i16 0 }, %struct.code { i8 0, i8 8, i16 80 }, %struct.code { i8 0, i8 8, i16 16 }, %struct.code { i8 20, i8 8, i16 115 }, %struct.code { i8 18, i8 7, i16 31 }, %struct.code { i8 0, i8 8, i16 112 }, %struct.code { i8 0, i8 8, i16 48 }, %struct.code { i8 0, i8 9, i16 192 }, %struct.code { i8 16, i8 7, i16 10 }, %struct.code { i8 0, i8 8, i16 96 }, %struct.code { i8 0, i8 8, i16 32 }, %struct.code { i8 0, i8 9, i16 160 }, %struct.code { i8 0, i8 8, i16 0 }, %struct.code { i8 0, i8 8, i16 128 }, %struct.code { i8 0, i8 8, i16 64 }, %struct.code { i8 0, i8 9, i16 224 }, %struct.code { i8 16, i8 7, i16 6 }, %struct.code { i8 0, i8 8, i16 88 }, %struct.code { i8 0, i8 8, i16 24 }, %struct.code { i8 0, i8 9, i16 144 }, %struct.code { i8 19, i8 7, i16 59 }, %struct.code { i8 0, i8 8, i16 120 }, %struct.code { i8 0, i8 8, i16 56 }, %struct.code { i8 0, i8 9, i16 208 }, %struct.code { i8 17, i8 7, i16 17 }, %struct.code { i8 0, i8 8, i16 104 }, %struct.code { i8 0, i8 8, i16 40 }, %struct.code { i8 0, i8 9, i16 176 }, %struct.code { i8 0, i8 8, i16 8 }, %struct.code { i8 0, i8 8, i16 136 }, %struct.code { i8 0, i8 8, i16 72 }, %struct.code { i8 0, i8 9, i16 240 }, %struct.code { i8 16, i8 7, i16 4 }, %struct.code { i8 0, i8 8, i16 84 }, %struct.code { i8 0, i8 8, i16 20 }, %struct.code { i8 21, i8 8, i16 227 }, %struct.code { i8 19, i8 7, i16 43 }, %struct.code { i8 0, i8 8, i16 116 }, %struct.code { i8 0, i8 8, i16 52 }, %struct.code { i8 0, i8 9, i16 200 }, %struct.code { i8 17, i8 7, i16 13 }, %struct.code { i8 0, i8 8, i16 100 }, %struct.code { i8 0, i8 8, i16 36 }, %struct.code { i8 0, i8 9, i16 168 }, %struct.code { i8 0, i8 8, i16 4 }, %struct.code { i8 0, i8 8, i16 132 }, %struct.code { i8 0, i8 8, i16 68 }, %struct.code { i8 0, i8 9, i16 232 }, %struct.code { i8 16, i8 7, i16 8 }, %struct.code { i8 0, i8 8, i16 92 }, %struct.code { i8 0, i8 8, i16 28 }, %struct.code { i8 0, i8 9, i16 152 }, %struct.code { i8 20, i8 7, i16 83 }, %struct.code { i8 0, i8 8, i16 124 }, %struct.code { i8 0, i8 8, i16 60 }, %struct.code { i8 0, i8 9, i16 216 }, %struct.code { i8 18, i8 7, i16 23 }, %struct.code { i8 0, i8 8, i16 108 }, %struct.code { i8 0, i8 8, i16 44 }, %struct.code { i8 0, i8 9, i16 184 }, %struct.code { i8 0, i8 8, i16 12 }, %struct.code { i8 0, i8 8, i16 140 }, %struct.code { i8 0, i8 8, i16 76 }, %struct.code { i8 0, i8 9, i16 248 }, %struct.code { i8 16, i8 7, i16 3 }, %struct.code { i8 0, i8 8, i16 82 }, %struct.code { i8 0, i8 8, i16 18 }, %struct.code { i8 21, i8 8, i16 163 }, %struct.code { i8 19, i8 7, i16 35 }, %struct.code { i8 0, i8 8, i16 114 }, %struct.code { i8 0, i8 8, i16 50 }, %struct.code { i8 0, i8 9, i16 196 }, %struct.code { i8 17, i8 7, i16 11 }, %struct.code { i8 0, i8 8, i16 98 }, %struct.code { i8 0, i8 8, i16 34 }, %struct.code { i8 0, i8 9, i16 164 }, %struct.code { i8 0, i8 8, i16 2 }, %struct.code { i8 0, i8 8, i16 130 }, %struct.code { i8 0, i8 8, i16 66 }, %struct.code { i8 0, i8 9, i16 228 }, %struct.code { i8 16, i8 7, i16 7 }, %struct.code { i8 0, i8 8, i16 90 }, %struct.code { i8 0, i8 8, i16 26 }, %struct.code { i8 0, i8 9, i16 148 }, %struct.code { i8 20, i8 7, i16 67 }, %struct.code { i8 0, i8 8, i16 122 }, %struct.code { i8 0, i8 8, i16 58 }, %struct.code { i8 0, i8 9, i16 212 }, %struct.code { i8 18, i8 7, i16 19 }, %struct.code { i8 0, i8 8, i16 106 }, %struct.code { i8 0, i8 8, i16 42 }, %struct.code { i8 0, i8 9, i16 180 }, %struct.code { i8 0, i8 8, i16 10 }, %struct.code { i8 0, i8 8, i16 138 }, %struct.code { i8 0, i8 8, i16 74 }, %struct.code { i8 0, i8 9, i16 244 }, %struct.code { i8 16, i8 7, i16 5 }, %struct.code { i8 0, i8 8, i16 86 }, %struct.code { i8 0, i8 8, i16 22 }, %struct.code { i8 64, i8 8, i16 0 }, %struct.code { i8 19, i8 7, i16 51 }, %struct.code { i8 0, i8 8, i16 118 }, %struct.code { i8 0, i8 8, i16 54 }, %struct.code { i8 0, i8 9, i16 204 }, %struct.code { i8 17, i8 7, i16 15 }, %struct.code { i8 0, i8 8, i16 102 }, %struct.code { i8 0, i8 8, i16 38 }, %struct.code { i8 0, i8 9, i16 172 }, %struct.code { i8 0, i8 8, i16 6 }, %struct.code { i8 0, i8 8, i16 134 }, %struct.code { i8 0, i8 8, i16 70 }, %struct.code { i8 0, i8 9, i16 236 }, %struct.code { i8 16, i8 7, i16 9 }, %struct.code { i8 0, i8 8, i16 94 }, %struct.code { i8 0, i8 8, i16 30 }, %struct.code { i8 0, i8 9, i16 156 }, %struct.code { i8 20, i8 7, i16 99 }, %struct.code { i8 0, i8 8, i16 126 }, %struct.code { i8 0, i8 8, i16 62 }, %struct.code { i8 0, i8 9, i16 220 }, %struct.code { i8 18, i8 7, i16 27 }, %struct.code { i8 0, i8 8, i16 110 }, %struct.code { i8 0, i8 8, i16 46 }, %struct.code { i8 0, i8 9, i16 188 }, %struct.code { i8 0, i8 8, i16 14 }, %struct.code { i8 0, i8 8, i16 142 }, %struct.code { i8 0, i8 8, i16 78 }, %struct.code { i8 0, i8 9, i16 252 }, %struct.code { i8 96, i8 7, i16 0 }, %struct.code { i8 0, i8 8, i16 81 }, %struct.code { i8 0, i8 8, i16 17 }, %struct.code { i8 21, i8 8, i16 131 }, %struct.code { i8 18, i8 7, i16 31 }, %struct.code { i8 0, i8 8, i16 113 }, %struct.code { i8 0, i8 8, i16 49 }, %struct.code { i8 0, i8 9, i16 194 }, %struct.code { i8 16, i8 7, i16 10 }, %struct.code { i8 0, i8 8, i16 97 }, %struct.code { i8 0, i8 8, i16 33 }, %struct.code { i8 0, i8 9, i16 162 }, %struct.code { i8 0, i8 8, i16 1 }, %struct.code { i8 0, i8 8, i16 129 }, %struct.code { i8 0, i8 8, i16 65 }, %struct.code { i8 0, i8 9, i16 226 }, %struct.code { i8 16, i8 7, i16 6 }, %struct.code { i8 0, i8 8, i16 89 }, %struct.code { i8 0, i8 8, i16 25 }, %struct.code { i8 0, i8 9, i16 146 }, %struct.code { i8 19, i8 7, i16 59 }, %struct.code { i8 0, i8 8, i16 121 }, %struct.code { i8 0, i8 8, i16 57 }, %struct.code { i8 0, i8 9, i16 210 }, %struct.code { i8 17, i8 7, i16 17 }, %struct.code { i8 0, i8 8, i16 105 }, %struct.code { i8 0, i8 8, i16 41 }, %struct.code { i8 0, i8 9, i16 178 }, %struct.code { i8 0, i8 8, i16 9 }, %struct.code { i8 0, i8 8, i16 137 }, %struct.code { i8 0, i8 8, i16 73 }, %struct.code { i8 0, i8 9, i16 242 }, %struct.code { i8 16, i8 7, i16 4 }, %struct.code { i8 0, i8 8, i16 85 }, %struct.code { i8 0, i8 8, i16 21 }, %struct.code { i8 16, i8 8, i16 258 }, %struct.code { i8 19, i8 7, i16 43 }, %struct.code { i8 0, i8 8, i16 117 }, %struct.code { i8 0, i8 8, i16 53 }, %struct.code { i8 0, i8 9, i16 202 }, %struct.code { i8 17, i8 7, i16 13 }, %struct.code { i8 0, i8 8, i16 101 }, %struct.code { i8 0, i8 8, i16 37 }, %struct.code { i8 0, i8 9, i16 170 }, %struct.code { i8 0, i8 8, i16 5 }, %struct.code { i8 0, i8 8, i16 133 }, %struct.code { i8 0, i8 8, i16 69 }, %struct.code { i8 0, i8 9, i16 234 }, %struct.code { i8 16, i8 7, i16 8 }, %struct.code { i8 0, i8 8, i16 93 }, %struct.code { i8 0, i8 8, i16 29 }, %struct.code { i8 0, i8 9, i16 154 }, %struct.code { i8 20, i8 7, i16 83 }, %struct.code { i8 0, i8 8, i16 125 }, %struct.code { i8 0, i8 8, i16 61 }, %struct.code { i8 0, i8 9, i16 218 }, %struct.code { i8 18, i8 7, i16 23 }, %struct.code { i8 0, i8 8, i16 109 }, %struct.code { i8 0, i8 8, i16 45 }, %struct.code { i8 0, i8 9, i16 186 }, %struct.code { i8 0, i8 8, i16 13 }, %struct.code { i8 0, i8 8, i16 141 }, %struct.code { i8 0, i8 8, i16 77 }, %struct.code { i8 0, i8 9, i16 250 }, %struct.code { i8 16, i8 7, i16 3 }, %struct.code { i8 0, i8 8, i16 83 }, %struct.code { i8 0, i8 8, i16 19 }, %struct.code { i8 21, i8 8, i16 195 }, %struct.code { i8 19, i8 7, i16 35 }, %struct.code { i8 0, i8 8, i16 115 }, %struct.code { i8 0, i8 8, i16 51 }, %struct.code { i8 0, i8 9, i16 198 }, %struct.code { i8 17, i8 7, i16 11 }, %struct.code { i8 0, i8 8, i16 99 }, %struct.code { i8 0, i8 8, i16 35 }, %struct.code { i8 0, i8 9, i16 166 }, %struct.code { i8 0, i8 8, i16 3 }, %struct.code { i8 0, i8 8, i16 131 }, %struct.code { i8 0, i8 8, i16 67 }, %struct.code { i8 0, i8 9, i16 230 }, %struct.code { i8 16, i8 7, i16 7 }, %struct.code { i8 0, i8 8, i16 91 }, %struct.code { i8 0, i8 8, i16 27 }, %struct.code { i8 0, i8 9, i16 150 }, %struct.code { i8 20, i8 7, i16 67 }, %struct.code { i8 0, i8 8, i16 123 }, %struct.code { i8 0, i8 8, i16 59 }, %struct.code { i8 0, i8 9, i16 214 }, %struct.code { i8 18, i8 7, i16 19 }, %struct.code { i8 0, i8 8, i16 107 }, %struct.code { i8 0, i8 8, i16 43 }, %struct.code { i8 0, i8 9, i16 182 }, %struct.code { i8 0, i8 8, i16 11 }, %struct.code { i8 0, i8 8, i16 139 }, %struct.code { i8 0, i8 8, i16 75 }, %struct.code { i8 0, i8 9, i16 246 }, %struct.code { i8 16, i8 7, i16 5 }, %struct.code { i8 0, i8 8, i16 87 }, %struct.code { i8 0, i8 8, i16 23 }, %struct.code { i8 64, i8 8, i16 0 }, %struct.code { i8 19, i8 7, i16 51 }, %struct.code { i8 0, i8 8, i16 119 }, %struct.code { i8 0, i8 8, i16 55 }, %struct.code { i8 0, i8 9, i16 206 }, %struct.code { i8 17, i8 7, i16 15 }, %struct.code { i8 0, i8 8, i16 103 }, %struct.code { i8 0, i8 8, i16 39 }, %struct.code { i8 0, i8 9, i16 174 }, %struct.code { i8 0, i8 8, i16 7 }, %struct.code { i8 0, i8 8, i16 135 }, %struct.code { i8 0, i8 8, i16 71 }, %struct.code { i8 0, i8 9, i16 238 }, %struct.code { i8 16, i8 7, i16 9 }, %struct.code { i8 0, i8 8, i16 95 }, %struct.code { i8 0, i8 8, i16 31 }, %struct.code { i8 0, i8 9, i16 158 }, %struct.code { i8 20, i8 7, i16 99 }, %struct.code { i8 0, i8 8, i16 127 }, %struct.code { i8 0, i8 8, i16 63 }, %struct.code { i8 0, i8 9, i16 222 }, %struct.code { i8 18, i8 7, i16 27 }, %struct.code { i8 0, i8 8, i16 111 }, %struct.code { i8 0, i8 8, i16 47 }, %struct.code { i8 0, i8 9, i16 190 }, %struct.code { i8 0, i8 8, i16 15 }, %struct.code { i8 0, i8 8, i16 143 }, %struct.code { i8 0, i8 8, i16 79 }, %struct.code { i8 0, i8 9, i16 254 }, %struct.code { i8 96, i8 7, i16 0 }, %struct.code { i8 0, i8 8, i16 80 }, %struct.code { i8 0, i8 8, i16 16 }, %struct.code { i8 20, i8 8, i16 115 }, %struct.code { i8 18, i8 7, i16 31 }, %struct.code { i8 0, i8 8, i16 112 }, %struct.code { i8 0, i8 8, i16 48 }, %struct.code { i8 0, i8 9, i16 193 }, %struct.code { i8 16, i8 7, i16 10 }, %struct.code { i8 0, i8 8, i16 96 }, %struct.code { i8 0, i8 8, i16 32 }, %struct.code { i8 0, i8 9, i16 161 }, %struct.code { i8 0, i8 8, i16 0 }, %struct.code { i8 0, i8 8, i16 128 }, %struct.code { i8 0, i8 8, i16 64 }, %struct.code { i8 0, i8 9, i16 225 }, %struct.code { i8 16, i8 7, i16 6 }, %struct.code { i8 0, i8 8, i16 88 }, %struct.code { i8 0, i8 8, i16 24 }, %struct.code { i8 0, i8 9, i16 145 }, %struct.code { i8 19, i8 7, i16 59 }, %struct.code { i8 0, i8 8, i16 120 }, %struct.code { i8 0, i8 8, i16 56 }, %struct.code { i8 0, i8 9, i16 209 }, %struct.code { i8 17, i8 7, i16 17 }, %struct.code { i8 0, i8 8, i16 104 }, %struct.code { i8 0, i8 8, i16 40 }, %struct.code { i8 0, i8 9, i16 177 }, %struct.code { i8 0, i8 8, i16 8 }, %struct.code { i8 0, i8 8, i16 136 }, %struct.code { i8 0, i8 8, i16 72 }, %struct.code { i8 0, i8 9, i16 241 }, %struct.code { i8 16, i8 7, i16 4 }, %struct.code { i8 0, i8 8, i16 84 }, %struct.code { i8 0, i8 8, i16 20 }, %struct.code { i8 21, i8 8, i16 227 }, %struct.code { i8 19, i8 7, i16 43 }, %struct.code { i8 0, i8 8, i16 116 }, %struct.code { i8 0, i8 8, i16 52 }, %struct.code { i8 0, i8 9, i16 201 }, %struct.code { i8 17, i8 7, i16 13 }, %struct.code { i8 0, i8 8, i16 100 }, %struct.code { i8 0, i8 8, i16 36 }, %struct.code { i8 0, i8 9, i16 169 }, %struct.code { i8 0, i8 8, i16 4 }, %struct.code { i8 0, i8 8, i16 132 }, %struct.code { i8 0, i8 8, i16 68 }, %struct.code { i8 0, i8 9, i16 233 }, %struct.code { i8 16, i8 7, i16 8 }, %struct.code { i8 0, i8 8, i16 92 }, %struct.code { i8 0, i8 8, i16 28 }, %struct.code { i8 0, i8 9, i16 153 }, %struct.code { i8 20, i8 7, i16 83 }, %struct.code { i8 0, i8 8, i16 124 }, %struct.code { i8 0, i8 8, i16 60 }, %struct.code { i8 0, i8 9, i16 217 }, %struct.code { i8 18, i8 7, i16 23 }, %struct.code { i8 0, i8 8, i16 108 }, %struct.code { i8 0, i8 8, i16 44 }, %struct.code { i8 0, i8 9, i16 185 }, %struct.code { i8 0, i8 8, i16 12 }, %struct.code { i8 0, i8 8, i16 140 }, %struct.code { i8 0, i8 8, i16 76 }, %struct.code { i8 0, i8 9, i16 249 }, %struct.code { i8 16, i8 7, i16 3 }, %struct.code { i8 0, i8 8, i16 82 }, %struct.code { i8 0, i8 8, i16 18 }, %struct.code { i8 21, i8 8, i16 163 }, %struct.code { i8 19, i8 7, i16 35 }, %struct.code { i8 0, i8 8, i16 114 }, %struct.code { i8 0, i8 8, i16 50 }, %struct.code { i8 0, i8 9, i16 197 }, %struct.code { i8 17, i8 7, i16 11 }, %struct.code { i8 0, i8 8, i16 98 }, %struct.code { i8 0, i8 8, i16 34 }, %struct.code { i8 0, i8 9, i16 165 }, %struct.code { i8 0, i8 8, i16 2 }, %struct.code { i8 0, i8 8, i16 130 }, %struct.code { i8 0, i8 8, i16 66 }, %struct.code { i8 0, i8 9, i16 229 }, %struct.code { i8 16, i8 7, i16 7 }, %struct.code { i8 0, i8 8, i16 90 }, %struct.code { i8 0, i8 8, i16 26 }, %struct.code { i8 0, i8 9, i16 149 }, %struct.code { i8 20, i8 7, i16 67 }, %struct.code { i8 0, i8 8, i16 122 }, %struct.code { i8 0, i8 8, i16 58 }, %struct.code { i8 0, i8 9, i16 213 }, %struct.code { i8 18, i8 7, i16 19 }, %struct.code { i8 0, i8 8, i16 106 }, %struct.code { i8 0, i8 8, i16 42 }, %struct.code { i8 0, i8 9, i16 181 }, %struct.code { i8 0, i8 8, i16 10 }, %struct.code { i8 0, i8 8, i16 138 }, %struct.code { i8 0, i8 8, i16 74 }, %struct.code { i8 0, i8 9, i16 245 }, %struct.code { i8 16, i8 7, i16 5 }, %struct.code { i8 0, i8 8, i16 86 }, %struct.code { i8 0, i8 8, i16 22 }, %struct.code { i8 64, i8 8, i16 0 }, %struct.code { i8 19, i8 7, i16 51 }, %struct.code { i8 0, i8 8, i16 118 }, %struct.code { i8 0, i8 8, i16 54 }, %struct.code { i8 0, i8 9, i16 205 }, %struct.code { i8 17, i8 7, i16 15 }, %struct.code { i8 0, i8 8, i16 102 }, %struct.code { i8 0, i8 8, i16 38 }, %struct.code { i8 0, i8 9, i16 173 }, %struct.code { i8 0, i8 8, i16 6 }, %struct.code { i8 0, i8 8, i16 134 }, %struct.code { i8 0, i8 8, i16 70 }, %struct.code { i8 0, i8 9, i16 237 }, %struct.code { i8 16, i8 7, i16 9 }, %struct.code { i8 0, i8 8, i16 94 }, %struct.code { i8 0, i8 8, i16 30 }, %struct.code { i8 0, i8 9, i16 157 }, %struct.code { i8 20, i8 7, i16 99 }, %struct.code { i8 0, i8 8, i16 126 }, %struct.code { i8 0, i8 8, i16 62 }, %struct.code { i8 0, i8 9, i16 221 }, %struct.code { i8 18, i8 7, i16 27 }, %struct.code { i8 0, i8 8, i16 110 }, %struct.code { i8 0, i8 8, i16 46 }, %struct.code { i8 0, i8 9, i16 189 }, %struct.code { i8 0, i8 8, i16 14 }, %struct.code { i8 0, i8 8, i16 142 }, %struct.code { i8 0, i8 8, i16 78 }, %struct.code { i8 0, i8 9, i16 253 }, %struct.code { i8 96, i8 7, i16 0 }, %struct.code { i8 0, i8 8, i16 81 }, %struct.code { i8 0, i8 8, i16 17 }, %struct.code { i8 21, i8 8, i16 131 }, %struct.code { i8 18, i8 7, i16 31 }, %struct.code { i8 0, i8 8, i16 113 }, %struct.code { i8 0, i8 8, i16 49 }, %struct.code { i8 0, i8 9, i16 195 }, %struct.code { i8 16, i8 7, i16 10 }, %struct.code { i8 0, i8 8, i16 97 }, %struct.code { i8 0, i8 8, i16 33 }, %struct.code { i8 0, i8 9, i16 163 }, %struct.code { i8 0, i8 8, i16 1 }, %struct.code { i8 0, i8 8, i16 129 }, %struct.code { i8 0, i8 8, i16 65 }, %struct.code { i8 0, i8 9, i16 227 }, %struct.code { i8 16, i8 7, i16 6 }, %struct.code { i8 0, i8 8, i16 89 }, %struct.code { i8 0, i8 8, i16 25 }, %struct.code { i8 0, i8 9, i16 147 }, %struct.code { i8 19, i8 7, i16 59 }, %struct.code { i8 0, i8 8, i16 121 }, %struct.code { i8 0, i8 8, i16 57 }, %struct.code { i8 0, i8 9, i16 211 }, %struct.code { i8 17, i8 7, i16 17 }, %struct.code { i8 0, i8 8, i16 105 }, %struct.code { i8 0, i8 8, i16 41 }, %struct.code { i8 0, i8 9, i16 179 }, %struct.code { i8 0, i8 8, i16 9 }, %struct.code { i8 0, i8 8, i16 137 }, %struct.code { i8 0, i8 8, i16 73 }, %struct.code { i8 0, i8 9, i16 243 }, %struct.code { i8 16, i8 7, i16 4 }, %struct.code { i8 0, i8 8, i16 85 }, %struct.code { i8 0, i8 8, i16 21 }, %struct.code { i8 16, i8 8, i16 258 }, %struct.code { i8 19, i8 7, i16 43 }, %struct.code { i8 0, i8 8, i16 117 }, %struct.code { i8 0, i8 8, i16 53 }, %struct.code { i8 0, i8 9, i16 203 }, %struct.code { i8 17, i8 7, i16 13 }, %struct.code { i8 0, i8 8, i16 101 }, %struct.code { i8 0, i8 8, i16 37 }, %struct.code { i8 0, i8 9, i16 171 }, %struct.code { i8 0, i8 8, i16 5 }, %struct.code { i8 0, i8 8, i16 133 }, %struct.code { i8 0, i8 8, i16 69 }, %struct.code { i8 0, i8 9, i16 235 }, %struct.code { i8 16, i8 7, i16 8 }, %struct.code { i8 0, i8 8, i16 93 }, %struct.code { i8 0, i8 8, i16 29 }, %struct.code { i8 0, i8 9, i16 155 }, %struct.code { i8 20, i8 7, i16 83 }, %struct.code { i8 0, i8 8, i16 125 }, %struct.code { i8 0, i8 8, i16 61 }, %struct.code { i8 0, i8 9, i16 219 }, %struct.code { i8 18, i8 7, i16 23 }, %struct.code { i8 0, i8 8, i16 109 }, %struct.code { i8 0, i8 8, i16 45 }, %struct.code { i8 0, i8 9, i16 187 }, %struct.code { i8 0, i8 8, i16 13 }, %struct.code { i8 0, i8 8, i16 141 }, %struct.code { i8 0, i8 8, i16 77 }, %struct.code { i8 0, i8 9, i16 251 }, %struct.code { i8 16, i8 7, i16 3 }, %struct.code { i8 0, i8 8, i16 83 }, %struct.code { i8 0, i8 8, i16 19 }, %struct.code { i8 21, i8 8, i16 195 }, %struct.code { i8 19, i8 7, i16 35 }, %struct.code { i8 0, i8 8, i16 115 }, %struct.code { i8 0, i8 8, i16 51 }, %struct.code { i8 0, i8 9, i16 199 }, %struct.code { i8 17, i8 7, i16 11 }, %struct.code { i8 0, i8 8, i16 99 }, %struct.code { i8 0, i8 8, i16 35 }, %struct.code { i8 0, i8 9, i16 167 }, %struct.code { i8 0, i8 8, i16 3 }, %struct.code { i8 0, i8 8, i16 131 }, %struct.code { i8 0, i8 8, i16 67 }, %struct.code { i8 0, i8 9, i16 231 }, %struct.code { i8 16, i8 7, i16 7 }, %struct.code { i8 0, i8 8, i16 91 }, %struct.code { i8 0, i8 8, i16 27 }, %struct.code { i8 0, i8 9, i16 151 }, %struct.code { i8 20, i8 7, i16 67 }, %struct.code { i8 0, i8 8, i16 123 }, %struct.code { i8 0, i8 8, i16 59 }, %struct.code { i8 0, i8 9, i16 215 }, %struct.code { i8 18, i8 7, i16 19 }, %struct.code { i8 0, i8 8, i16 107 }, %struct.code { i8 0, i8 8, i16 43 }, %struct.code { i8 0, i8 9, i16 183 }, %struct.code { i8 0, i8 8, i16 11 }, %struct.code { i8 0, i8 8, i16 139 }, %struct.code { i8 0, i8 8, i16 75 }, %struct.code { i8 0, i8 9, i16 247 }, %struct.code { i8 16, i8 7, i16 5 }, %struct.code { i8 0, i8 8, i16 87 }, %struct.code { i8 0, i8 8, i16 23 }, %struct.code { i8 64, i8 8, i16 0 }, %struct.code { i8 19, i8 7, i16 51 }, %struct.code { i8 0, i8 8, i16 119 }, %struct.code { i8 0, i8 8, i16 55 }, %struct.code { i8 0, i8 9, i16 207 }, %struct.code { i8 17, i8 7, i16 15 }, %struct.code { i8 0, i8 8, i16 103 }, %struct.code { i8 0, i8 8, i16 39 }, %struct.code { i8 0, i8 9, i16 175 }, %struct.code { i8 0, i8 8, i16 7 }, %struct.code { i8 0, i8 8, i16 135 }, %struct.code { i8 0, i8 8, i16 71 }, %struct.code { i8 0, i8 9, i16 239 }, %struct.code { i8 16, i8 7, i16 9 }, %struct.code { i8 0, i8 8, i16 95 }, %struct.code { i8 0, i8 8, i16 31 }, %struct.code { i8 0, i8 9, i16 159 }, %struct.code { i8 20, i8 7, i16 99 }, %struct.code { i8 0, i8 8, i16 127 }, %struct.code { i8 0, i8 8, i16 63 }, %struct.code { i8 0, i8 9, i16 223 }, %struct.code { i8 18, i8 7, i16 27 }, %struct.code { i8 0, i8 8, i16 111 }, %struct.code { i8 0, i8 8, i16 47 }, %struct.code { i8 0, i8 9, i16 191 }, %struct.code { i8 0, i8 8, i16 15 }, %struct.code { i8 0, i8 8, i16 143 }, %struct.code { i8 0, i8 8, i16 79 }, %struct.code { i8 0, i8 9, i16 255 }], align 16
@fixedtables.distfix = internal constant [32 x %struct.code] [%struct.code { i8 16, i8 5, i16 1 }, %struct.code { i8 23, i8 5, i16 257 }, %struct.code { i8 19, i8 5, i16 17 }, %struct.code { i8 27, i8 5, i16 4097 }, %struct.code { i8 17, i8 5, i16 5 }, %struct.code { i8 25, i8 5, i16 1025 }, %struct.code { i8 21, i8 5, i16 65 }, %struct.code { i8 29, i8 5, i16 16385 }, %struct.code { i8 16, i8 5, i16 3 }, %struct.code { i8 24, i8 5, i16 513 }, %struct.code { i8 20, i8 5, i16 33 }, %struct.code { i8 28, i8 5, i16 8193 }, %struct.code { i8 18, i8 5, i16 9 }, %struct.code { i8 26, i8 5, i16 2049 }, %struct.code { i8 22, i8 5, i16 129 }, %struct.code { i8 64, i8 5, i16 0 }, %struct.code { i8 16, i8 5, i16 2 }, %struct.code { i8 23, i8 5, i16 385 }, %struct.code { i8 19, i8 5, i16 25 }, %struct.code { i8 27, i8 5, i16 6145 }, %struct.code { i8 17, i8 5, i16 7 }, %struct.code { i8 25, i8 5, i16 1537 }, %struct.code { i8 21, i8 5, i16 97 }, %struct.code { i8 29, i8 5, i16 24577 }, %struct.code { i8 16, i8 5, i16 4 }, %struct.code { i8 24, i8 5, i16 769 }, %struct.code { i8 20, i8 5, i16 49 }, %struct.code { i8 28, i8 5, i16 12289 }, %struct.code { i8 18, i8 5, i16 13 }, %struct.code { i8 26, i8 5, i16 3073 }, %struct.code { i8 22, i8 5, i16 193 }, %struct.code { i8 64, i8 5, i16 0 }], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @Cr_z_inflateResetKeep(%struct.z_stream_s*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.z_stream_s* %0, null
  br i1 %2, label %50, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %5 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %4, align 8
  %6 = icmp eq i8* (i8*, i32, i32)* %5, null
  br i1 %6, label %50, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %9 = load void (i8*, i8*)*, void (i8*, i8*)** %8, align 8
  %10 = icmp eq void (i8*, i8*)* %9, null
  br i1 %10, label %50, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %13 = bitcast %struct.internal_state** %12 to %struct.inflate_state**
  %14 = load %struct.inflate_state*, %struct.inflate_state** %13, align 8
  %15 = icmp eq %struct.inflate_state* %14, null
  br i1 %15, label %50, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 0
  %18 = load %struct.z_stream_s*, %struct.z_stream_s** %17, align 8
  %19 = icmp eq %struct.z_stream_s* %18, %0
  br i1 %19, label %20, label %50

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = add i32 %22, -16180
  %24 = icmp ult i32 %23, 32
  br i1 %24, label %25, label %50

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 8
  store i64 0, i64* %26, align 8
  %27 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 5
  %28 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 2
  store i64 0, i64* %28, align 8
  %29 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 3
  %30 = bitcast i64* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 16, i1 false)
  %31 = load i32, i32* %29, align 8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %37, label %33

33:                                               ; preds = %25
  %34 = and i32 %31, 1
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 12
  store i64 %35, i64* %36, align 8
  br label %37

37:                                               ; preds = %25, %33
  store i32 16180, i32* %21, align 8
  %38 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 2
  store i32 0, i32* %38, align 4
  %39 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 4
  store i32 0, i32* %39, align 4
  %40 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 6
  store i32 32768, i32* %40, align 4
  %41 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 9
  store %struct.Cr_z_gz_header_s* null, %struct.Cr_z_gz_header_s** %41, align 8
  %42 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 15
  store i64 0, i64* %42, align 8
  %43 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 16
  store i32 0, i32* %43, align 8
  %44 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 31, i64 0
  %45 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 28
  store %struct.code* %44, %struct.code** %45, align 8
  %46 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 21
  store %struct.code* %44, %struct.code** %46, align 8
  %47 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 20
  store %struct.code* %44, %struct.code** %47, align 8
  %48 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 32
  store i32 1, i32* %48, align 8
  %49 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 33
  store i32 -1, i32* %49, align 4
  br label %50

50:                                               ; preds = %1, %3, %7, %11, %16, %20, %37
  %51 = phi i32 [ 0, %37 ], [ -2, %20 ], [ -2, %16 ], [ -2, %11 ], [ -2, %7 ], [ -2, %3 ], [ -2, %1 ]
  ret i32 %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Cr_z_inflateReset(%struct.z_stream_s*) local_unnamed_addr #2 {
  %2 = icmp eq %struct.z_stream_s* %0, null
  br i1 %2, label %71, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %5 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %4, align 8
  %6 = icmp eq i8* (i8*, i32, i32)* %5, null
  br i1 %6, label %71, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %9 = load void (i8*, i8*)*, void (i8*, i8*)** %8, align 8
  %10 = icmp eq void (i8*, i8*)* %9, null
  br i1 %10, label %71, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %13 = bitcast %struct.internal_state** %12 to %struct.inflate_state**
  %14 = load %struct.inflate_state*, %struct.inflate_state** %13, align 8
  %15 = icmp eq %struct.inflate_state* %14, null
  br i1 %15, label %71, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 0
  %18 = load %struct.z_stream_s*, %struct.z_stream_s** %17, align 8
  %19 = icmp eq %struct.z_stream_s* %18, %0
  br i1 %19, label %20, label %71

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = add i32 %22, -16180
  %24 = icmp ult i32 %23, 32
  br i1 %24, label %25, label %71

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 11
  store i32 0, i32* %26, align 4
  %27 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 12
  store i32 0, i32* %27, align 8
  %28 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 13
  store i32 0, i32* %28, align 4
  %29 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %4, align 8
  %30 = icmp eq i8* (i8*, i32, i32)* %29, null
  br i1 %30, label %71, label %31

31:                                               ; preds = %25
  %32 = load void (i8*, i8*)*, void (i8*, i8*)** %8, align 8
  %33 = icmp eq void (i8*, i8*)* %32, null
  br i1 %33, label %71, label %34

34:                                               ; preds = %31
  %35 = load %struct.inflate_state*, %struct.inflate_state** %13, align 8
  %36 = icmp eq %struct.inflate_state* %35, null
  br i1 %36, label %71, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 0
  %39 = load %struct.z_stream_s*, %struct.z_stream_s** %38, align 8
  %40 = icmp eq %struct.z_stream_s* %39, %0
  br i1 %40, label %41, label %71

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = add i32 %43, -16180
  %45 = icmp ult i32 %44, 32
  br i1 %45, label %46, label %71

46:                                               ; preds = %41
  %47 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 8
  store i64 0, i64* %47, align 8
  %48 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 5
  %49 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 2
  store i64 0, i64* %49, align 8
  %50 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 3
  %51 = bitcast i64* %48 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 16, i1 false) #6
  %52 = load i32, i32* %50, align 8
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %46
  %55 = and i32 %52, 1
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 12
  store i64 %56, i64* %57, align 8
  br label %58

58:                                               ; preds = %54, %46
  store i32 16180, i32* %42, align 8
  %59 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 2
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 4
  store i32 0, i32* %60, align 4
  %61 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 6
  store i32 32768, i32* %61, align 4
  %62 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 9
  store %struct.Cr_z_gz_header_s* null, %struct.Cr_z_gz_header_s** %62, align 8
  %63 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 15
  store i64 0, i64* %63, align 8
  %64 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 16
  store i32 0, i32* %64, align 8
  %65 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 31, i64 0
  %66 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 28
  store %struct.code* %65, %struct.code** %66, align 8
  %67 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 21
  store %struct.code* %65, %struct.code** %67, align 8
  %68 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 20
  store %struct.code* %65, %struct.code** %68, align 8
  %69 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 32
  store i32 1, i32* %69, align 8
  %70 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %35, i64 0, i32 33
  store i32 -1, i32* %70, align 4
  br label %71

71:                                               ; preds = %1, %3, %7, %11, %16, %58, %41, %37, %34, %31, %25, %20
  %72 = phi i32 [ -2, %20 ], [ 0, %58 ], [ -2, %41 ], [ -2, %37 ], [ -2, %34 ], [ -2, %31 ], [ -2, %25 ], [ -2, %16 ], [ -2, %11 ], [ -2, %7 ], [ -2, %3 ], [ -2, %1 ]
  ret i32 %72
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Cr_z_inflateReset2(%struct.z_stream_s*, i32) local_unnamed_addr #2 {
  %3 = icmp eq %struct.z_stream_s* %0, null
  br i1 %3, label %58, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %6 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %5, align 8
  %7 = icmp eq i8* (i8*, i32, i32)* %6, null
  br i1 %7, label %58, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %10 = load void (i8*, i8*)*, void (i8*, i8*)** %9, align 8
  %11 = icmp eq void (i8*, i8*)* %10, null
  br i1 %11, label %58, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %14 = bitcast %struct.internal_state** %13 to %struct.inflate_state**
  %15 = load %struct.inflate_state*, %struct.inflate_state** %14, align 8
  %16 = icmp eq %struct.inflate_state* %15, null
  br i1 %16, label %58, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 0
  %19 = load %struct.z_stream_s*, %struct.z_stream_s** %18, align 8
  %20 = icmp eq %struct.z_stream_s* %19, %0
  br i1 %20, label %21, label %58

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = add i32 %23, -16180
  %25 = icmp ult i32 %24, 32
  br i1 %25, label %26, label %58

26:                                               ; preds = %21
  %27 = icmp slt i32 %1, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %26
  %29 = sub nsw i32 0, %1
  br label %36

30:                                               ; preds = %26
  %31 = lshr i32 %1, 4
  %32 = add nuw nsw i32 %31, 5
  %33 = icmp slt i32 %1, 48
  %34 = and i32 %1, 15
  %35 = select i1 %33, i32 %34, i32 %1
  br label %36

36:                                               ; preds = %30, %28
  %37 = phi i32 [ %29, %28 ], [ %35, %30 ]
  %38 = phi i32 [ 0, %28 ], [ %32, %30 ]
  %39 = icmp eq i32 %37, 0
  %40 = and i32 %37, -8
  %41 = icmp eq i32 %40, 8
  %42 = or i1 %39, %41
  br i1 %42, label %43, label %58

43:                                               ; preds = %36
  %44 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 14
  %45 = load i8*, i8** %44, align 8
  %46 = icmp eq i8* %45, null
  br i1 %46, label %54, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 10
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, %37
  br i1 %50, label %54, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 10
  %53 = load i8*, i8** %52, align 8
  tail call void %10(i8* %53, i8* nonnull %45) #6
  store i8* null, i8** %44, align 8
  br label %54

54:                                               ; preds = %47, %43, %51
  %55 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 3
  store i32 %38, i32* %55, align 8
  %56 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 10
  store i32 %37, i32* %56, align 8
  %57 = tail call i32 @Cr_z_inflateReset(%struct.z_stream_s* nonnull %0)
  br label %58

58:                                               ; preds = %2, %4, %8, %12, %17, %36, %21, %54
  %59 = phi i32 [ %57, %54 ], [ -2, %21 ], [ -2, %36 ], [ -2, %17 ], [ -2, %12 ], [ -2, %8 ], [ -2, %4 ], [ -2, %2 ]
  ret i32 %59
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Cr_z_inflateInit2_(%struct.z_stream_s*, i32, i8* readonly, i32) local_unnamed_addr #2 {
  %5 = icmp eq i8* %2, null
  br i1 %5, label %155, label %6

6:                                                ; preds = %4
  %7 = load i8, i8* %2, align 1
  %8 = icmp ne i8 %7, 49
  %9 = icmp ne i32 %3, 112
  %10 = or i1 %9, %8
  br i1 %10, label %155, label %11

11:                                               ; preds = %6
  %12 = icmp eq %struct.z_stream_s* %0, null
  br i1 %12, label %155, label %13

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 6
  store i8* null, i8** %14, align 8
  %15 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %16 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %15, align 8
  %17 = icmp eq i8* (i8*, i32, i32)* %16, null
  br i1 %17, label %18, label %20

18:                                               ; preds = %13
  store i8* (i8*, i32, i32)* @Cr_z_zcalloc, i8* (i8*, i32, i32)** %15, align 8
  %19 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 10
  store i8* null, i8** %19, align 8
  br label %20

20:                                               ; preds = %18, %13
  %21 = phi i8* (i8*, i32, i32)* [ @Cr_z_zcalloc, %18 ], [ %16, %13 ]
  %22 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %23 = load void (i8*, i8*)*, void (i8*, i8*)** %22, align 8
  %24 = icmp eq void (i8*, i8*)* %23, null
  br i1 %24, label %25, label %26

25:                                               ; preds = %20
  store void (i8*, i8*)* @Cr_z_zcfree, void (i8*, i8*)** %22, align 8
  br label %26

26:                                               ; preds = %25, %20
  %27 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 10
  %28 = load i8*, i8** %27, align 8
  %29 = tail call i8* %21(i8* %28, i32 1, i32 7160) #6
  %30 = icmp eq i8* %29, null
  br i1 %30, label %155, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %33 = bitcast %struct.internal_state** %32 to i8**
  store i8* %29, i8** %33, align 8
  %34 = bitcast i8* %29 to %struct.z_stream_s**
  store %struct.z_stream_s* %0, %struct.z_stream_s** %34, align 8
  %35 = getelementptr inbounds i8, i8* %29, i64 72
  %36 = bitcast i8* %35 to i8**
  store i8* null, i8** %36, align 8
  %37 = getelementptr inbounds i8, i8* %29, i64 8
  %38 = bitcast i8* %37 to i32*
  store i32 16180, i32* %38, align 8
  %39 = getelementptr inbounds i8, i8* %29, i64 32
  %40 = bitcast i8* %39 to i64*
  store i64 1, i64* %40, align 8
  %41 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %15, align 8
  %42 = icmp eq i8* (i8*, i32, i32)* %41, null
  br i1 %42, label %152, label %43

43:                                               ; preds = %31
  %44 = load void (i8*, i8*)*, void (i8*, i8*)** %22, align 8
  %45 = icmp eq void (i8*, i8*)* %44, null
  br i1 %45, label %152, label %46

46:                                               ; preds = %43
  %47 = bitcast %struct.internal_state** %32 to %struct.inflate_state**
  %48 = load %struct.inflate_state*, %struct.inflate_state** %47, align 8
  %49 = icmp eq %struct.inflate_state* %48, null
  br i1 %49, label %152, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %48, i64 0, i32 0
  %52 = load %struct.z_stream_s*, %struct.z_stream_s** %51, align 8
  %53 = icmp eq %struct.z_stream_s* %52, %0
  br i1 %53, label %54, label %152

54:                                               ; preds = %50
  %55 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %48, i64 0, i32 1
  %56 = load i32, i32* %55, align 8
  %57 = add i32 %56, -16180
  %58 = icmp ult i32 %57, 32
  br i1 %58, label %59, label %152

59:                                               ; preds = %54
  %60 = icmp slt i32 %1, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %59
  %62 = sub nsw i32 0, %1
  br label %69

63:                                               ; preds = %59
  %64 = lshr i32 %1, 4
  %65 = add nuw nsw i32 %64, 5
  %66 = icmp slt i32 %1, 48
  %67 = and i32 %1, 15
  %68 = select i1 %66, i32 %67, i32 %1
  br label %69

69:                                               ; preds = %63, %61
  %70 = phi i32 [ %62, %61 ], [ %68, %63 ]
  %71 = phi i32 [ 0, %61 ], [ %65, %63 ]
  %72 = icmp eq i32 %70, 0
  %73 = and i32 %70, -8
  %74 = icmp eq i32 %73, 8
  %75 = or i1 %72, %74
  br i1 %75, label %76, label %152

76:                                               ; preds = %69
  %77 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %48, i64 0, i32 14
  %78 = load i8*, i8** %77, align 8
  %79 = icmp eq i8* %78, null
  br i1 %79, label %86, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %48, i64 0, i32 10
  %82 = load i32, i32* %81, align 8
  %83 = icmp eq i32 %82, %70
  br i1 %83, label %86, label %84

84:                                               ; preds = %80
  %85 = load i8*, i8** %27, align 8
  tail call void %44(i8* %85, i8* nonnull %78) #6
  store i8* null, i8** %77, align 8
  br label %86

86:                                               ; preds = %76, %80, %84
  %87 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %48, i64 0, i32 3
  store i32 %71, i32* %87, align 8
  %88 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %48, i64 0, i32 10
  store i32 %70, i32* %88, align 8
  %89 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %15, align 8
  %90 = icmp eq i8* (i8*, i32, i32)* %89, null
  br i1 %90, label %152, label %91

91:                                               ; preds = %86
  %92 = load void (i8*, i8*)*, void (i8*, i8*)** %22, align 8
  %93 = icmp eq void (i8*, i8*)* %92, null
  br i1 %93, label %152, label %94

94:                                               ; preds = %91
  %95 = load %struct.inflate_state*, %struct.inflate_state** %47, align 8
  %96 = icmp eq %struct.inflate_state* %95, null
  br i1 %96, label %152, label %97

97:                                               ; preds = %94
  %98 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %95, i64 0, i32 0
  %99 = load %struct.z_stream_s*, %struct.z_stream_s** %98, align 8
  %100 = icmp eq %struct.z_stream_s* %99, %0
  br i1 %100, label %101, label %152

101:                                              ; preds = %97
  %102 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %95, i64 0, i32 1
  %103 = load i32, i32* %102, align 8
  %104 = add i32 %103, -16180
  %105 = icmp ult i32 %104, 32
  br i1 %105, label %106, label %152

106:                                              ; preds = %101
  %107 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %95, i64 0, i32 11
  store i32 0, i32* %107, align 4
  %108 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %95, i64 0, i32 12
  store i32 0, i32* %108, align 8
  %109 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %95, i64 0, i32 13
  store i32 0, i32* %109, align 4
  %110 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %15, align 8
  %111 = icmp eq i8* (i8*, i32, i32)* %110, null
  br i1 %111, label %152, label %112

112:                                              ; preds = %106
  %113 = load void (i8*, i8*)*, void (i8*, i8*)** %22, align 8
  %114 = icmp eq void (i8*, i8*)* %113, null
  br i1 %114, label %152, label %115

115:                                              ; preds = %112
  %116 = load %struct.inflate_state*, %struct.inflate_state** %47, align 8
  %117 = icmp eq %struct.inflate_state* %116, null
  br i1 %117, label %152, label %118

118:                                              ; preds = %115
  %119 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 0
  %120 = load %struct.z_stream_s*, %struct.z_stream_s** %119, align 8
  %121 = icmp eq %struct.z_stream_s* %120, %0
  br i1 %121, label %122, label %152

122:                                              ; preds = %118
  %123 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 1
  %124 = load i32, i32* %123, align 8
  %125 = add i32 %124, -16180
  %126 = icmp ult i32 %125, 32
  br i1 %126, label %127, label %152

127:                                              ; preds = %122
  %128 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 8
  store i64 0, i64* %128, align 8
  %129 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 5
  %130 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 2
  store i64 0, i64* %130, align 8
  %131 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 3
  %132 = bitcast i64* %129 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %132, i8 0, i64 16, i1 false) #6
  %133 = load i32, i32* %131, align 8
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %139, label %135

135:                                              ; preds = %127
  %136 = and i32 %133, 1
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 12
  store i64 %137, i64* %138, align 8
  br label %139

139:                                              ; preds = %127, %135
  store i32 16180, i32* %123, align 8
  %140 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 2
  store i32 0, i32* %140, align 4
  %141 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 4
  store i32 0, i32* %141, align 4
  %142 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 6
  store i32 32768, i32* %142, align 4
  %143 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 9
  store %struct.Cr_z_gz_header_s* null, %struct.Cr_z_gz_header_s** %143, align 8
  %144 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 15
  store i64 0, i64* %144, align 8
  %145 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 16
  store i32 0, i32* %145, align 8
  %146 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 31, i64 0
  %147 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 28
  store %struct.code* %146, %struct.code** %147, align 8
  %148 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 21
  store %struct.code* %146, %struct.code** %148, align 8
  %149 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 20
  store %struct.code* %146, %struct.code** %149, align 8
  %150 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 32
  store i32 1, i32* %150, align 8
  %151 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i64 0, i32 33
  store i32 -1, i32* %151, align 4
  br label %155

152:                                              ; preds = %54, %69, %50, %46, %43, %31, %101, %122, %118, %115, %112, %106, %97, %94, %91, %86
  %153 = load void (i8*, i8*)*, void (i8*, i8*)** %22, align 8
  %154 = load i8*, i8** %27, align 8
  tail call void %153(i8* %154, i8* nonnull %29) #6
  store %struct.internal_state* null, %struct.internal_state** %32, align 8
  br label %155

155:                                              ; preds = %139, %152, %26, %11, %4, %6
  %156 = phi i32 [ -6, %6 ], [ -6, %4 ], [ -2, %11 ], [ -4, %26 ], [ 0, %139 ], [ -2, %152 ]
  ret i32 %156
}

declare i8* @Cr_z_zcalloc(i8*, i32, i32) #3

declare void @Cr_z_zcfree(i8*, i8*) #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Cr_z_inflateInit_(%struct.z_stream_s*, i8* readonly, i32) local_unnamed_addr #2 {
  %4 = tail call i32 @Cr_z_inflateInit2_(%struct.z_stream_s* %0, i32 15, i8* %1, i32 %2)
  ret i32 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @Cr_z_inflatePrime(%struct.z_stream_s* readonly, i32, i32) local_unnamed_addr #0 {
  %4 = icmp eq %struct.z_stream_s* %0, null
  br i1 %4, label %50, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %7 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %6, align 8
  %8 = icmp eq i8* (i8*, i32, i32)* %7, null
  br i1 %8, label %50, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %10, align 8
  %12 = icmp eq void (i8*, i8*)* %11, null
  br i1 %12, label %50, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %15 = bitcast %struct.internal_state** %14 to %struct.inflate_state**
  %16 = load %struct.inflate_state*, %struct.inflate_state** %15, align 8
  %17 = icmp eq %struct.inflate_state* %16, null
  br i1 %17, label %50, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 0
  %20 = load %struct.z_stream_s*, %struct.z_stream_s** %19, align 8
  %21 = icmp eq %struct.z_stream_s* %20, %0
  br i1 %21, label %22, label %50

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = add i32 %24, -16180
  %26 = icmp ult i32 %25, 32
  br i1 %26, label %27, label %50

27:                                               ; preds = %22
  %28 = icmp slt i32 %1, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %27
  %30 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 15
  store i64 0, i64* %30, align 8
  %31 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 16
  store i32 0, i32* %31, align 8
  br label %50

32:                                               ; preds = %27
  %33 = icmp sgt i32 %1, 16
  br i1 %33, label %50, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 16
  %36 = load i32, i32* %35, align 8
  %37 = add i32 %36, %1
  %38 = icmp ugt i32 %37, 32
  br i1 %38, label %50, label %39

39:                                               ; preds = %34
  %40 = zext i32 %1 to i64
  %41 = shl nsw i64 -1, %40
  %42 = trunc i64 %41 to i32
  %43 = xor i32 %42, -1
  %44 = and i32 %43, %2
  %45 = shl i32 %44, %36
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 15
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, %46
  store i64 %49, i64* %47, align 8
  store i32 %37, i32* %35, align 8
  br label %50

50:                                               ; preds = %3, %5, %9, %13, %18, %32, %34, %22, %39, %29
  %51 = phi i32 [ 0, %29 ], [ 0, %39 ], [ -2, %22 ], [ -2, %34 ], [ -2, %32 ], [ -2, %18 ], [ -2, %13 ], [ -2, %9 ], [ -2, %5 ], [ -2, %3 ]
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Cr_z_inflate(%struct.z_stream_s*, i32) local_unnamed_addr #4 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to [4 x i8]*
  %5 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #6
  %6 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 1
  %7 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 2
  %8 = getelementptr inbounds [4 x i8], [4 x i8]* %4, i64 0, i64 3
  %9 = icmp eq %struct.z_stream_s* %0, null
  store i32 -1431655766, i32* %3, align 4
  br i1 %9, label %2637, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %12 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %11, align 8
  %13 = icmp eq i8* (i8*, i32, i32)* %12, null
  br i1 %13, label %2637, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %16 = load void (i8*, i8*)*, void (i8*, i8*)** %15, align 8
  %17 = icmp eq void (i8*, i8*)* %16, null
  br i1 %17, label %2637, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %20 = bitcast %struct.internal_state** %19 to %struct.inflate_state**
  %21 = load %struct.inflate_state*, %struct.inflate_state** %20, align 8
  %22 = icmp eq %struct.inflate_state* %21, null
  br i1 %22, label %2637, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 0
  %25 = load %struct.z_stream_s*, %struct.z_stream_s** %24, align 8
  %26 = icmp eq %struct.z_stream_s* %25, %0
  br i1 %26, label %27, label %2637

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = add i32 %29, -16180
  %31 = icmp ult i32 %30, 32
  br i1 %31, label %32, label %2637

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 3
  %34 = load i8*, i8** %33, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %2637, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %40, label %44

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %2637

44:                                               ; preds = %40, %36
  %45 = icmp eq i32 %29, 16191
  br i1 %45, label %46, label %49

46:                                               ; preds = %44
  store i32 16192, i32* %28, align 8
  %47 = load i8*, i8** %33, align 8
  %48 = load i8*, i8** %37, align 8
  br label %49

49:                                               ; preds = %44, %46
  %50 = phi i32 [ %29, %44 ], [ 16192, %46 ]
  %51 = phi i8* [ %38, %44 ], [ %48, %46 ]
  %52 = phi i8* [ %34, %44 ], [ %47, %46 ]
  %53 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 4
  %54 = load i32, i32* %53, align 8
  %55 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 1
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 15
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 16
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 3
  %62 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 5
  %63 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 8
  %64 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 5
  %65 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 7
  %66 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 12
  %67 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 6
  %68 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 17
  %69 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 25
  %70 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 26
  %71 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 24
  %72 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 27
  %73 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 31, i64 0
  %74 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 28
  %75 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 20
  %76 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 22
  %77 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 0
  %78 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 30, i64 0
  %79 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 256
  %80 = bitcast %struct.code** %74 to i64*
  %81 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 21
  %82 = bitcast %struct.code** %81 to i64*
  %83 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 23
  %84 = icmp eq i32 %1, 6
  %85 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 33
  %86 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 19
  %87 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 34
  %88 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 18
  %89 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 12
  %90 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 32
  %91 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 13
  %92 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 14
  %93 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 11
  %94 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 4
  %95 = add i32 %1, -5
  %96 = icmp ult i32 %95, 2
  %97 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 2
  %98 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 9
  %99 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 10
  %100 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 6
  %101 = bitcast %struct.code** %75 to <2 x %struct.code*>*
  br label %102

102:                                              ; preds = %2365, %49
  %103 = phi i32 [ %50, %49 ], [ %2374, %2365 ]
  %104 = phi i8* [ %51, %49 ], [ %2366, %2365 ]
  %105 = phi i8* [ %52, %49 ], [ %2367, %2365 ]
  %106 = phi i32 [ %56, %49 ], [ %2368, %2365 ]
  %107 = phi i32 [ %54, %49 ], [ %2369, %2365 ]
  %108 = phi i64 [ %58, %49 ], [ %2370, %2365 ]
  %109 = phi i32 [ %60, %49 ], [ %2371, %2365 ]
  %110 = phi i32 [ %54, %49 ], [ %2372, %2365 ]
  %111 = phi i32 [ 0, %49 ], [ %2373, %2365 ]
  switch i32 %103, label %2637 [
    i32 16180, label %135
    i32 16181, label %130
    i32 16182, label %270
    i32 16183, label %315
    i32 16184, label %362
    i32 16185, label %418
    i32 16186, label %477
    i32 16187, label %537
    i32 16188, label %597
    i32 16189, label %125
    i32 16190, label %677
    i32 16191, label %687
    i32 16192, label %692
    i32 16193, label %739
    i32 16194, label %776
    i32 16195, label %781
    i32 16196, label %120
    i32 16197, label %841
    i32 16198, label %116
    i32 16199, label %1211
    i32 16200, label %1217
    i32 16201, label %114
    i32 16202, label %1430
    i32 16203, label %112
    i32 16204, label %1620
    i32 16205, label %2229
    i32 16206, label %2236
    i32 16207, label %118
    i32 16208, label %2468
    i32 16209, label %2474
    i32 16210, label %2636
  ]

112:                                              ; preds = %102
  %113 = load i32, i32* %86, align 4
  br label %1573

114:                                              ; preds = %102
  %115 = load i32, i32* %86, align 4
  br label %1380

116:                                              ; preds = %102
  %117 = load i32, i32* %72, align 4
  br label %944

118:                                              ; preds = %102
  %119 = load i32, i32* %61, align 8
  br label %2320

120:                                              ; preds = %102
  %121 = icmp ult i32 %109, 14
  br i1 %121, label %122, label %818

122:                                              ; preds = %120
  %123 = zext i32 %109 to i64
  %124 = icmp eq i32 %106, 0
  br i1 %124, label %2447, label %803

125:                                              ; preds = %102
  %126 = icmp ult i32 %109, 32
  br i1 %126, label %127, label %662

127:                                              ; preds = %125
  %128 = zext i32 %109 to i64
  %129 = icmp eq i32 %106, 0
  br i1 %129, label %2425, label %653

130:                                              ; preds = %102
  %131 = icmp ult i32 %109, 16
  br i1 %131, label %132, label %233

132:                                              ; preds = %130
  %133 = zext i32 %109 to i64
  %134 = icmp eq i32 %106, 0
  br i1 %134, label %2418, label %218

135:                                              ; preds = %102
  %136 = load i32, i32* %61, align 8
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %143, label %138

138:                                              ; preds = %135
  %139 = icmp ult i32 %109, 16
  br i1 %139, label %140, label %159

140:                                              ; preds = %138
  %141 = zext i32 %109 to i64
  %142 = icmp eq i32 %106, 0
  br i1 %142, label %2383, label %144

143:                                              ; preds = %135
  store i32 16192, i32* %28, align 8
  br label %2365

144:                                              ; preds = %140
  %145 = add i32 %106, -1
  %146 = getelementptr inbounds i8, i8* %104, i64 1
  %147 = load i8, i8* %104, align 1
  %148 = zext i8 %147 to i64
  %149 = shl i64 %148, %141
  %150 = add i64 %149, %108
  %151 = add nuw nsw i64 %141, 8
  %152 = icmp ult i64 %151, 16
  br i1 %152, label %2845, label %153

153:                                              ; preds = %2847, %144
  %154 = phi i32 [ %145, %144 ], [ %2848, %2847 ]
  %155 = phi i8* [ %146, %144 ], [ %2849, %2847 ]
  %156 = phi i64 [ %150, %144 ], [ %2853, %2847 ]
  %157 = phi i64 [ %151, %144 ], [ %2854, %2847 ]
  %158 = trunc i64 %157 to i32
  br label %159

159:                                              ; preds = %153, %138
  %160 = phi i8* [ %104, %138 ], [ %155, %153 ]
  %161 = phi i32 [ %106, %138 ], [ %154, %153 ]
  %162 = phi i64 [ %108, %138 ], [ %156, %153 ]
  %163 = phi i32 [ %109, %138 ], [ %158, %153 ]
  %164 = and i32 %136, 2
  %165 = icmp ne i32 %164, 0
  %166 = icmp eq i64 %162, 35615
  %167 = and i1 %165, %166
  br i1 %167, label %168, label %175

168:                                              ; preds = %159
  %169 = load i32, i32* %99, align 8
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %172

171:                                              ; preds = %168
  store i32 15, i32* %99, align 8
  br label %172

172:                                              ; preds = %171, %168
  %173 = call i64 @Cr_z_crc32(i64 0, i8* null, i32 0) #6
  store i64 %173, i64* %65, align 8
  store i8 31, i8* %5, align 4
  store i8 -117, i8* %6, align 1
  %174 = call i64 @Cr_z_crc32(i64 %173, i8* nonnull %5, i32 2) #6
  store i64 %174, i64* %65, align 8
  store i32 16181, i32* %28, align 8
  br label %2365

175:                                              ; preds = %159
  store i32 0, i32* %64, align 8
  %176 = load %struct.Cr_z_gz_header_s*, %struct.Cr_z_gz_header_s** %98, align 8
  %177 = icmp eq %struct.Cr_z_gz_header_s* %176, null
  br i1 %177, label %181, label %178

178:                                              ; preds = %175
  %179 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %176, i64 0, i32 12
  store i32 -1, i32* %179, align 8
  %180 = load i32, i32* %61, align 8
  br label %181

181:                                              ; preds = %175, %178
  %182 = phi i32 [ %136, %175 ], [ %180, %178 ]
  %183 = and i32 %182, 1
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %192, label %185

185:                                              ; preds = %181
  %186 = shl i64 %162, 8
  %187 = and i64 %186, 65280
  %188 = lshr i64 %162, 8
  %189 = add nuw nsw i64 %187, %188
  %190 = urem i64 %189, 31
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %193, label %192

192:                                              ; preds = %185, %181
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

193:                                              ; preds = %185
  %194 = and i64 %162, 15
  %195 = icmp eq i64 %194, 8
  br i1 %195, label %197, label %196

196:                                              ; preds = %193
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

197:                                              ; preds = %193
  %198 = lshr i64 %162, 4
  %199 = add i32 %163, -4
  %200 = trunc i64 %198 to i32
  %201 = and i32 %200, 15
  %202 = add nuw nsw i32 %201, 8
  %203 = load i32, i32* %99, align 8
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %206

205:                                              ; preds = %197
  store i32 %202, i32* %99, align 8
  br label %206

206:                                              ; preds = %205, %197
  %207 = phi i32 [ %202, %205 ], [ %203, %197 ]
  %208 = icmp ugt i32 %202, 15
  %209 = icmp ugt i32 %202, %207
  %210 = or i1 %208, %209
  br i1 %210, label %211, label %212

211:                                              ; preds = %206
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

212:                                              ; preds = %206
  %213 = shl i32 256, %201
  store i32 %213, i32* %100, align 4
  %214 = call i64 @Cr_z_adler32(i64 0, i8* null, i32 0) #6
  store i64 %214, i64* %65, align 8
  store i64 %214, i64* %66, align 8
  %215 = and i64 %162, 8192
  %216 = icmp eq i64 %215, 0
  %217 = select i1 %216, i32 16191, i32 16189
  store i32 %217, i32* %28, align 8
  br label %2365

218:                                              ; preds = %132
  %219 = add i32 %106, -1
  %220 = getelementptr inbounds i8, i8* %104, i64 1
  %221 = load i8, i8* %104, align 1
  %222 = zext i8 %221 to i64
  %223 = shl i64 %222, %133
  %224 = add i64 %223, %108
  %225 = add nuw nsw i64 %133, 8
  %226 = icmp ult i64 %225, 16
  br i1 %226, label %2776, label %227

227:                                              ; preds = %2778, %218
  %228 = phi i32 [ %219, %218 ], [ %2779, %2778 ]
  %229 = phi i8* [ %220, %218 ], [ %2780, %2778 ]
  %230 = phi i64 [ %224, %218 ], [ %2784, %2778 ]
  %231 = phi i64 [ %225, %218 ], [ %2785, %2778 ]
  %232 = trunc i64 %231 to i32
  br label %233

233:                                              ; preds = %227, %130
  %234 = phi i8* [ %104, %130 ], [ %229, %227 ]
  %235 = phi i32 [ %106, %130 ], [ %228, %227 ]
  %236 = phi i64 [ %108, %130 ], [ %230, %227 ]
  %237 = phi i32 [ %109, %130 ], [ %232, %227 ]
  %238 = trunc i64 %236 to i32
  store i32 %238, i32* %64, align 8
  %239 = and i32 %238, 255
  %240 = icmp eq i32 %239, 8
  br i1 %240, label %242, label %241

241:                                              ; preds = %233
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

242:                                              ; preds = %233
  %243 = and i32 %238, 57344
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %246, label %245

245:                                              ; preds = %242
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

246:                                              ; preds = %242
  %247 = load %struct.Cr_z_gz_header_s*, %struct.Cr_z_gz_header_s** %98, align 8
  %248 = icmp eq %struct.Cr_z_gz_header_s* %247, null
  br i1 %248, label %255, label %249

249:                                              ; preds = %246
  %250 = lshr i64 %236, 8
  %251 = trunc i64 %250 to i32
  %252 = and i32 %251, 1
  %253 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %247, i64 0, i32 0
  store i32 %252, i32* %253, align 8
  %254 = load i32, i32* %64, align 8
  br label %255

255:                                              ; preds = %246, %249
  %256 = phi i32 [ %238, %246 ], [ %254, %249 ]
  %257 = and i32 %256, 512
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %269, label %259

259:                                              ; preds = %255
  %260 = load i32, i32* %61, align 8
  %261 = and i32 %260, 4
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %269, label %263

263:                                              ; preds = %259
  %264 = trunc i64 %236 to i8
  store i8 %264, i8* %5, align 4
  %265 = lshr i64 %236, 8
  %266 = trunc i64 %265 to i8
  store i8 %266, i8* %6, align 1
  %267 = load i64, i64* %65, align 8
  %268 = call i64 @Cr_z_crc32(i64 %267, i8* nonnull %5, i32 2) #6
  store i64 %268, i64* %65, align 8
  br label %269

269:                                              ; preds = %263, %255, %259
  store i32 16182, i32* %28, align 8
  br label %272

270:                                              ; preds = %102
  %271 = icmp ult i32 %109, 32
  br i1 %271, label %272, label %288

272:                                              ; preds = %269, %270
  %273 = phi i32 [ 0, %269 ], [ %109, %270 ]
  %274 = phi i64 [ 0, %269 ], [ %108, %270 ]
  %275 = phi i32 [ %235, %269 ], [ %106, %270 ]
  %276 = phi i8* [ %234, %269 ], [ %104, %270 ]
  %277 = zext i32 %273 to i64
  %278 = icmp eq i32 %275, 0
  br i1 %278, label %2411, label %279

279:                                              ; preds = %272
  %280 = add i32 %275, -1
  %281 = getelementptr inbounds i8, i8* %276, i64 1
  %282 = load i8, i8* %276, align 1
  %283 = zext i8 %282 to i64
  %284 = shl i64 %283, %277
  %285 = add i64 %284, %274
  %286 = add nuw nsw i64 %277, 8
  %287 = icmp ult i64 %286, 32
  br i1 %287, label %2786, label %288

288:                                              ; preds = %279, %2788, %2799, %2810, %270
  %289 = phi i8* [ %104, %270 ], [ %281, %279 ], [ %2790, %2788 ], [ %2801, %2799 ], [ %2812, %2810 ]
  %290 = phi i32 [ %106, %270 ], [ %280, %279 ], [ %2789, %2788 ], [ %2800, %2799 ], [ %2811, %2810 ]
  %291 = phi i64 [ %108, %270 ], [ %285, %279 ], [ %2794, %2788 ], [ %2805, %2799 ], [ %2816, %2810 ]
  %292 = load %struct.Cr_z_gz_header_s*, %struct.Cr_z_gz_header_s** %98, align 8
  %293 = icmp eq %struct.Cr_z_gz_header_s* %292, null
  br i1 %293, label %296, label %294

294:                                              ; preds = %288
  %295 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %292, i64 0, i32 1
  store i64 %291, i64* %295, align 8
  br label %296

296:                                              ; preds = %288, %294
  %297 = load i32, i32* %64, align 8
  %298 = and i32 %297, 512
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %314, label %300

300:                                              ; preds = %296
  %301 = load i32, i32* %61, align 8
  %302 = and i32 %301, 4
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %314, label %304

304:                                              ; preds = %300
  %305 = trunc i64 %291 to i8
  store i8 %305, i8* %5, align 4
  %306 = lshr i64 %291, 8
  %307 = trunc i64 %306 to i8
  store i8 %307, i8* %6, align 1
  %308 = lshr i64 %291, 16
  %309 = trunc i64 %308 to i8
  store i8 %309, i8* %7, align 2
  %310 = lshr i64 %291, 24
  %311 = trunc i64 %310 to i8
  store i8 %311, i8* %8, align 1
  %312 = load i64, i64* %65, align 8
  %313 = call i64 @Cr_z_crc32(i64 %312, i8* nonnull %5, i32 4) #6
  store i64 %313, i64* %65, align 8
  br label %314

314:                                              ; preds = %304, %296, %300
  store i32 16183, i32* %28, align 8
  br label %317

315:                                              ; preds = %102
  %316 = icmp ult i32 %109, 16
  br i1 %316, label %317, label %333

317:                                              ; preds = %314, %315
  %318 = phi i32 [ 0, %314 ], [ %109, %315 ]
  %319 = phi i64 [ 0, %314 ], [ %108, %315 ]
  %320 = phi i32 [ %290, %314 ], [ %106, %315 ]
  %321 = phi i8* [ %289, %314 ], [ %104, %315 ]
  %322 = zext i32 %318 to i64
  %323 = icmp eq i32 %320, 0
  br i1 %323, label %2404, label %324

324:                                              ; preds = %317
  %325 = add i32 %320, -1
  %326 = getelementptr inbounds i8, i8* %321, i64 1
  %327 = load i8, i8* %321, align 1
  %328 = zext i8 %327 to i64
  %329 = shl i64 %328, %322
  %330 = add i64 %329, %319
  %331 = add nuw nsw i64 %322, 8
  %332 = icmp ult i64 %331, 16
  br i1 %332, label %2817, label %333

333:                                              ; preds = %324, %2819, %315
  %334 = phi i8* [ %104, %315 ], [ %326, %324 ], [ %2821, %2819 ]
  %335 = phi i32 [ %106, %315 ], [ %325, %324 ], [ %2820, %2819 ]
  %336 = phi i64 [ %108, %315 ], [ %330, %324 ], [ %2825, %2819 ]
  %337 = load %struct.Cr_z_gz_header_s*, %struct.Cr_z_gz_header_s** %98, align 8
  %338 = icmp eq %struct.Cr_z_gz_header_s* %337, null
  br i1 %338, label %347, label %339

339:                                              ; preds = %333
  %340 = trunc i64 %336 to i32
  %341 = and i32 %340, 255
  %342 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %337, i64 0, i32 2
  store i32 %341, i32* %342, align 8
  %343 = lshr i64 %336, 8
  %344 = trunc i64 %343 to i32
  %345 = load %struct.Cr_z_gz_header_s*, %struct.Cr_z_gz_header_s** %98, align 8
  %346 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %345, i64 0, i32 3
  store i32 %344, i32* %346, align 4
  br label %347

347:                                              ; preds = %333, %339
  %348 = load i32, i32* %64, align 8
  %349 = and i32 %348, 512
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %361, label %351

351:                                              ; preds = %347
  %352 = load i32, i32* %61, align 8
  %353 = and i32 %352, 4
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %361, label %355

355:                                              ; preds = %351
  %356 = trunc i64 %336 to i8
  store i8 %356, i8* %5, align 4
  %357 = lshr i64 %336, 8
  %358 = trunc i64 %357 to i8
  store i8 %358, i8* %6, align 1
  %359 = load i64, i64* %65, align 8
  %360 = call i64 @Cr_z_crc32(i64 %359, i8* nonnull %5, i32 2) #6
  store i64 %360, i64* %65, align 8
  br label %361

361:                                              ; preds = %351, %347, %355
  store i32 16184, i32* %28, align 8
  br label %362

362:                                              ; preds = %102, %361
  %363 = phi i8* [ %104, %102 ], [ %334, %361 ]
  %364 = phi i32 [ %106, %102 ], [ %335, %361 ]
  %365 = phi i64 [ %108, %102 ], [ 0, %361 ]
  %366 = phi i32 [ %109, %102 ], [ 0, %361 ]
  %367 = load i32, i32* %64, align 8
  %368 = and i32 %367, 1024
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %408, label %370

370:                                              ; preds = %362
  %371 = icmp ult i32 %366, 16
  br i1 %371, label %372, label %384

372:                                              ; preds = %370
  %373 = zext i32 %366 to i64
  %374 = icmp eq i32 %364, 0
  br i1 %374, label %2397, label %375

375:                                              ; preds = %372
  %376 = add i32 %364, -1
  %377 = getelementptr inbounds i8, i8* %363, i64 1
  %378 = load i8, i8* %363, align 1
  %379 = zext i8 %378 to i64
  %380 = shl i64 %379, %373
  %381 = add i64 %380, %365
  %382 = add nuw nsw i64 %373, 8
  %383 = icmp ult i64 %382, 16
  br i1 %383, label %2826, label %384

384:                                              ; preds = %375, %2828, %370
  %385 = phi i8* [ %363, %370 ], [ %377, %375 ], [ %2830, %2828 ]
  %386 = phi i32 [ %364, %370 ], [ %376, %375 ], [ %2829, %2828 ]
  %387 = phi i64 [ %365, %370 ], [ %381, %375 ], [ %2834, %2828 ]
  %388 = trunc i64 %387 to i32
  store i32 %388, i32* %68, align 4
  %389 = load %struct.Cr_z_gz_header_s*, %struct.Cr_z_gz_header_s** %98, align 8
  %390 = icmp eq %struct.Cr_z_gz_header_s* %389, null
  br i1 %390, label %394, label %391

391:                                              ; preds = %384
  %392 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %389, i64 0, i32 5
  store i32 %388, i32* %392, align 8
  %393 = load i32, i32* %64, align 8
  br label %394

394:                                              ; preds = %384, %391
  %395 = phi i32 [ %367, %384 ], [ %393, %391 ]
  %396 = and i32 %395, 512
  %397 = icmp eq i32 %396, 0
  br i1 %397, label %413, label %398

398:                                              ; preds = %394
  %399 = load i32, i32* %61, align 8
  %400 = and i32 %399, 4
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %398
  %403 = trunc i64 %387 to i8
  store i8 %403, i8* %5, align 4
  %404 = lshr i64 %387, 8
  %405 = trunc i64 %404 to i8
  store i8 %405, i8* %6, align 1
  %406 = load i64, i64* %65, align 8
  %407 = call i64 @Cr_z_crc32(i64 %406, i8* nonnull %5, i32 2) #6
  store i64 %407, i64* %65, align 8
  br label %413

408:                                              ; preds = %362
  %409 = load %struct.Cr_z_gz_header_s*, %struct.Cr_z_gz_header_s** %98, align 8
  %410 = icmp eq %struct.Cr_z_gz_header_s* %409, null
  br i1 %410, label %413, label %411

411:                                              ; preds = %408
  %412 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %409, i64 0, i32 4
  store i8* null, i8** %412, align 8
  br label %413

413:                                              ; preds = %402, %394, %398, %408, %411
  %414 = phi i8* [ %363, %411 ], [ %363, %408 ], [ %385, %398 ], [ %385, %394 ], [ %385, %402 ]
  %415 = phi i32 [ %364, %411 ], [ %364, %408 ], [ %386, %398 ], [ %386, %394 ], [ %386, %402 ]
  %416 = phi i64 [ %365, %411 ], [ %365, %408 ], [ 0, %398 ], [ 0, %394 ], [ 0, %402 ]
  %417 = phi i32 [ %366, %411 ], [ %366, %408 ], [ 0, %398 ], [ 0, %394 ], [ 0, %402 ]
  store i32 16185, i32* %28, align 8
  br label %418

418:                                              ; preds = %102, %413
  %419 = phi i8* [ %104, %102 ], [ %414, %413 ]
  %420 = phi i32 [ %106, %102 ], [ %415, %413 ]
  %421 = phi i64 [ %108, %102 ], [ %416, %413 ]
  %422 = phi i32 [ %109, %102 ], [ %417, %413 ]
  %423 = load i32, i32* %64, align 8
  %424 = and i32 %423, 1024
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %474, label %426

426:                                              ; preds = %418
  %427 = load i32, i32* %68, align 4
  %428 = icmp ugt i32 %427, %420
  %429 = select i1 %428, i32 %420, i32 %427
  %430 = icmp eq i32 %429, 0
  br i1 %430, label %469, label %431

431:                                              ; preds = %426
  %432 = load %struct.Cr_z_gz_header_s*, %struct.Cr_z_gz_header_s** %98, align 8
  %433 = icmp eq %struct.Cr_z_gz_header_s* %432, null
  br i1 %433, label %452, label %434

434:                                              ; preds = %431
  %435 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %432, i64 0, i32 4
  %436 = load i8*, i8** %435, align 8
  %437 = icmp eq i8* %436, null
  br i1 %437, label %452, label %438

438:                                              ; preds = %434
  %439 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %432, i64 0, i32 5
  %440 = load i32, i32* %439, align 8
  %441 = sub i32 %440, %427
  %442 = zext i32 %441 to i64
  %443 = getelementptr inbounds i8, i8* %436, i64 %442
  %444 = add i32 %441, %429
  %445 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %432, i64 0, i32 6
  %446 = load i32, i32* %445, align 4
  %447 = icmp ugt i32 %444, %446
  %448 = sub i32 %446, %441
  %449 = select i1 %447, i32 %448, i32 %429
  %450 = zext i32 %449 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %443, i8* align 1 %419, i64 %450, i1 false)
  %451 = load i32, i32* %64, align 8
  br label %452

452:                                              ; preds = %434, %431, %438
  %453 = phi i32 [ %423, %434 ], [ %423, %431 ], [ %451, %438 ]
  %454 = and i32 %453, 512
  %455 = icmp eq i32 %454, 0
  br i1 %455, label %463, label %456

456:                                              ; preds = %452
  %457 = load i32, i32* %61, align 8
  %458 = and i32 %457, 4
  %459 = icmp eq i32 %458, 0
  br i1 %459, label %463, label %460

460:                                              ; preds = %456
  %461 = load i64, i64* %65, align 8
  %462 = call i64 @Cr_z_crc32(i64 %461, i8* %419, i32 %429) #6
  store i64 %462, i64* %65, align 8
  br label %463

463:                                              ; preds = %456, %452, %460
  %464 = sub i32 %420, %429
  %465 = zext i32 %429 to i64
  %466 = getelementptr inbounds i8, i8* %419, i64 %465
  %467 = load i32, i32* %68, align 4
  %468 = sub i32 %467, %429
  store i32 %468, i32* %68, align 4
  br label %469

469:                                              ; preds = %426, %463
  %470 = phi i32 [ %427, %426 ], [ %468, %463 ]
  %471 = phi i8* [ %419, %426 ], [ %466, %463 ]
  %472 = phi i32 [ %420, %426 ], [ %464, %463 ]
  %473 = icmp eq i32 %470, 0
  br i1 %473, label %474, label %2468

474:                                              ; preds = %469, %418
  %475 = phi i8* [ %471, %469 ], [ %419, %418 ]
  %476 = phi i32 [ %472, %469 ], [ %420, %418 ]
  store i32 0, i32* %68, align 4
  store i32 16186, i32* %28, align 8
  br label %477

477:                                              ; preds = %102, %474
  %478 = phi i8* [ %104, %102 ], [ %475, %474 ]
  %479 = phi i32 [ %106, %102 ], [ %476, %474 ]
  %480 = phi i64 [ %108, %102 ], [ %421, %474 ]
  %481 = phi i32 [ %109, %102 ], [ %422, %474 ]
  %482 = load i32, i32* %64, align 8
  %483 = and i32 %482, 2048
  %484 = icmp eq i32 %483, 0
  br i1 %484, label %529, label %485

485:                                              ; preds = %477
  %486 = icmp eq i32 %479, 0
  br i1 %486, label %2468, label %487

487:                                              ; preds = %485
  %488 = zext i32 %479 to i64
  br label %489

489:                                              ; preds = %487, %509
  %490 = phi i64 [ 0, %487 ], [ %491, %509 ]
  %491 = add nuw nsw i64 %490, 1
  %492 = getelementptr inbounds i8, i8* %478, i64 %490
  %493 = load i8, i8* %492, align 1
  %494 = load %struct.Cr_z_gz_header_s*, %struct.Cr_z_gz_header_s** %98, align 8
  %495 = icmp eq %struct.Cr_z_gz_header_s* %494, null
  br i1 %495, label %509, label %496

496:                                              ; preds = %489
  %497 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %494, i64 0, i32 7
  %498 = load i8*, i8** %497, align 8
  %499 = icmp eq i8* %498, null
  br i1 %499, label %509, label %500

500:                                              ; preds = %496
  %501 = load i32, i32* %68, align 4
  %502 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %494, i64 0, i32 8
  %503 = load i32, i32* %502, align 8
  %504 = icmp ult i32 %501, %503
  br i1 %504, label %505, label %509

505:                                              ; preds = %500
  %506 = add nuw i32 %501, 1
  store i32 %506, i32* %68, align 4
  %507 = zext i32 %501 to i64
  %508 = getelementptr inbounds i8, i8* %498, i64 %507
  store i8 %493, i8* %508, align 1
  br label %509

509:                                              ; preds = %496, %489, %500, %505
  %510 = icmp ne i8 %493, 0
  %511 = icmp ult i64 %491, %488
  %512 = and i1 %510, %511
  br i1 %512, label %489, label %513

513:                                              ; preds = %509
  %514 = trunc i64 %491 to i32
  %515 = load i32, i32* %64, align 8
  %516 = and i32 %515, 512
  %517 = icmp eq i32 %516, 0
  br i1 %517, label %525, label %518

518:                                              ; preds = %513
  %519 = load i32, i32* %61, align 8
  %520 = and i32 %519, 4
  %521 = icmp eq i32 %520, 0
  br i1 %521, label %525, label %522

522:                                              ; preds = %518
  %523 = load i64, i64* %65, align 8
  %524 = call i64 @Cr_z_crc32(i64 %523, i8* %478, i32 %514) #6
  store i64 %524, i64* %65, align 8
  br label %525

525:                                              ; preds = %518, %513, %522
  %526 = sub i32 %479, %514
  %527 = and i64 %491, 4294967295
  %528 = getelementptr inbounds i8, i8* %478, i64 %527
  br i1 %510, label %2468, label %534

529:                                              ; preds = %477
  %530 = load %struct.Cr_z_gz_header_s*, %struct.Cr_z_gz_header_s** %98, align 8
  %531 = icmp eq %struct.Cr_z_gz_header_s* %530, null
  br i1 %531, label %534, label %532

532:                                              ; preds = %529
  %533 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %530, i64 0, i32 7
  store i8* null, i8** %533, align 8
  br label %534

534:                                              ; preds = %529, %532, %525
  %535 = phi i8* [ %528, %525 ], [ %478, %532 ], [ %478, %529 ]
  %536 = phi i32 [ %526, %525 ], [ %479, %532 ], [ %479, %529 ]
  store i32 0, i32* %68, align 4
  store i32 16187, i32* %28, align 8
  br label %537

537:                                              ; preds = %102, %534
  %538 = phi i8* [ %104, %102 ], [ %535, %534 ]
  %539 = phi i32 [ %106, %102 ], [ %536, %534 ]
  %540 = phi i64 [ %108, %102 ], [ %480, %534 ]
  %541 = phi i32 [ %109, %102 ], [ %481, %534 ]
  %542 = load i32, i32* %64, align 8
  %543 = and i32 %542, 4096
  %544 = icmp eq i32 %543, 0
  br i1 %544, label %589, label %545

545:                                              ; preds = %537
  %546 = icmp eq i32 %539, 0
  br i1 %546, label %2468, label %547

547:                                              ; preds = %545
  %548 = zext i32 %539 to i64
  br label %549

549:                                              ; preds = %547, %569
  %550 = phi i64 [ 0, %547 ], [ %551, %569 ]
  %551 = add nuw nsw i64 %550, 1
  %552 = getelementptr inbounds i8, i8* %538, i64 %550
  %553 = load i8, i8* %552, align 1
  %554 = load %struct.Cr_z_gz_header_s*, %struct.Cr_z_gz_header_s** %98, align 8
  %555 = icmp eq %struct.Cr_z_gz_header_s* %554, null
  br i1 %555, label %569, label %556

556:                                              ; preds = %549
  %557 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %554, i64 0, i32 9
  %558 = load i8*, i8** %557, align 8
  %559 = icmp eq i8* %558, null
  br i1 %559, label %569, label %560

560:                                              ; preds = %556
  %561 = load i32, i32* %68, align 4
  %562 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %554, i64 0, i32 10
  %563 = load i32, i32* %562, align 8
  %564 = icmp ult i32 %561, %563
  br i1 %564, label %565, label %569

565:                                              ; preds = %560
  %566 = add nuw i32 %561, 1
  store i32 %566, i32* %68, align 4
  %567 = zext i32 %561 to i64
  %568 = getelementptr inbounds i8, i8* %558, i64 %567
  store i8 %553, i8* %568, align 1
  br label %569

569:                                              ; preds = %556, %549, %560, %565
  %570 = icmp ne i8 %553, 0
  %571 = icmp ult i64 %551, %548
  %572 = and i1 %570, %571
  br i1 %572, label %549, label %573

573:                                              ; preds = %569
  %574 = trunc i64 %551 to i32
  %575 = load i32, i32* %64, align 8
  %576 = and i32 %575, 512
  %577 = icmp eq i32 %576, 0
  br i1 %577, label %585, label %578

578:                                              ; preds = %573
  %579 = load i32, i32* %61, align 8
  %580 = and i32 %579, 4
  %581 = icmp eq i32 %580, 0
  br i1 %581, label %585, label %582

582:                                              ; preds = %578
  %583 = load i64, i64* %65, align 8
  %584 = call i64 @Cr_z_crc32(i64 %583, i8* %538, i32 %574) #6
  store i64 %584, i64* %65, align 8
  br label %585

585:                                              ; preds = %578, %573, %582
  %586 = sub i32 %539, %574
  %587 = and i64 %551, 4294967295
  %588 = getelementptr inbounds i8, i8* %538, i64 %587
  br i1 %570, label %2468, label %594

589:                                              ; preds = %537
  %590 = load %struct.Cr_z_gz_header_s*, %struct.Cr_z_gz_header_s** %98, align 8
  %591 = icmp eq %struct.Cr_z_gz_header_s* %590, null
  br i1 %591, label %594, label %592

592:                                              ; preds = %589
  %593 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %590, i64 0, i32 9
  store i8* null, i8** %593, align 8
  br label %594

594:                                              ; preds = %589, %592, %585
  %595 = phi i8* [ %588, %585 ], [ %538, %592 ], [ %538, %589 ]
  %596 = phi i32 [ %586, %585 ], [ %539, %592 ], [ %539, %589 ]
  store i32 16188, i32* %28, align 8
  br label %597

597:                                              ; preds = %102, %594
  %598 = phi i8* [ %104, %102 ], [ %595, %594 ]
  %599 = phi i32 [ %106, %102 ], [ %596, %594 ]
  %600 = phi i64 [ %108, %102 ], [ %540, %594 ]
  %601 = phi i32 [ %109, %102 ], [ %541, %594 ]
  %602 = load i32, i32* %64, align 8
  %603 = and i32 %602, 512
  %604 = icmp eq i32 %603, 0
  br i1 %604, label %638, label %605

605:                                              ; preds = %597
  %606 = icmp ult i32 %601, 16
  br i1 %606, label %607, label %625

607:                                              ; preds = %605
  %608 = zext i32 %601 to i64
  %609 = icmp eq i32 %599, 0
  br i1 %609, label %2390, label %610

610:                                              ; preds = %607
  %611 = add i32 %599, -1
  %612 = getelementptr inbounds i8, i8* %598, i64 1
  %613 = load i8, i8* %598, align 1
  %614 = zext i8 %613 to i64
  %615 = shl i64 %614, %608
  %616 = add i64 %615, %600
  %617 = add nuw nsw i64 %608, 8
  %618 = icmp ult i64 %617, 16
  br i1 %618, label %2835, label %619

619:                                              ; preds = %2837, %610
  %620 = phi i32 [ %611, %610 ], [ %2838, %2837 ]
  %621 = phi i8* [ %612, %610 ], [ %2839, %2837 ]
  %622 = phi i64 [ %616, %610 ], [ %2843, %2837 ]
  %623 = phi i64 [ %617, %610 ], [ %2844, %2837 ]
  %624 = trunc i64 %623 to i32
  br label %625

625:                                              ; preds = %619, %605
  %626 = phi i8* [ %598, %605 ], [ %621, %619 ]
  %627 = phi i32 [ %599, %605 ], [ %620, %619 ]
  %628 = phi i64 [ %600, %605 ], [ %622, %619 ]
  %629 = phi i32 [ %601, %605 ], [ %624, %619 ]
  %630 = load i32, i32* %61, align 8
  %631 = and i32 %630, 4
  %632 = icmp eq i32 %631, 0
  br i1 %632, label %638, label %633

633:                                              ; preds = %625
  %634 = load i64, i64* %65, align 8
  %635 = and i64 %634, 65535
  %636 = icmp eq i64 %628, %635
  br i1 %636, label %638, label %637

637:                                              ; preds = %633
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

638:                                              ; preds = %625, %633, %597
  %639 = phi i8* [ %598, %597 ], [ %626, %633 ], [ %626, %625 ]
  %640 = phi i32 [ %599, %597 ], [ %627, %633 ], [ %627, %625 ]
  %641 = phi i64 [ %600, %597 ], [ 0, %633 ], [ 0, %625 ]
  %642 = phi i32 [ %601, %597 ], [ 0, %633 ], [ 0, %625 ]
  %643 = load %struct.Cr_z_gz_header_s*, %struct.Cr_z_gz_header_s** %98, align 8
  %644 = icmp eq %struct.Cr_z_gz_header_s* %643, null
  br i1 %644, label %651, label %645

645:                                              ; preds = %638
  %646 = lshr i32 %602, 9
  %647 = and i32 %646, 1
  %648 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %643, i64 0, i32 11
  store i32 %647, i32* %648, align 4
  %649 = load %struct.Cr_z_gz_header_s*, %struct.Cr_z_gz_header_s** %98, align 8
  %650 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %649, i64 0, i32 12
  store i32 1, i32* %650, align 8
  br label %651

651:                                              ; preds = %638, %645
  %652 = call i64 @Cr_z_crc32(i64 0, i8* null, i32 0) #6
  store i64 %652, i64* %65, align 8
  store i64 %652, i64* %66, align 8
  store i32 16191, i32* %28, align 8
  br label %2365

653:                                              ; preds = %127
  %654 = add i32 %106, -1
  %655 = getelementptr inbounds i8, i8* %104, i64 1
  %656 = load i8, i8* %104, align 1
  %657 = zext i8 %656 to i64
  %658 = shl i64 %657, %128
  %659 = add i64 %658, %108
  %660 = add nuw nsw i64 %128, 8
  %661 = icmp ult i64 %660, 32
  br i1 %661, label %2745, label %662

662:                                              ; preds = %653, %2747, %2758, %2769, %125
  %663 = phi i8* [ %104, %125 ], [ %655, %653 ], [ %2749, %2747 ], [ %2760, %2758 ], [ %2771, %2769 ]
  %664 = phi i32 [ %106, %125 ], [ %654, %653 ], [ %2748, %2747 ], [ %2759, %2758 ], [ %2770, %2769 ]
  %665 = phi i64 [ %108, %125 ], [ %659, %653 ], [ %2753, %2747 ], [ %2764, %2758 ], [ %2775, %2769 ]
  %666 = lshr i64 %665, 24
  %667 = and i64 %666, 255
  %668 = lshr i64 %665, 8
  %669 = and i64 %668, 65280
  %670 = or i64 %667, %669
  %671 = shl i64 %665, 8
  %672 = and i64 %671, 16711680
  %673 = or i64 %670, %672
  %674 = shl i64 %665, 24
  %675 = and i64 %674, 4278190080
  %676 = or i64 %673, %675
  store i64 %676, i64* %65, align 8
  store i64 %676, i64* %66, align 8
  store i32 16190, i32* %28, align 8
  br label %677

677:                                              ; preds = %102, %662
  %678 = phi i8* [ %104, %102 ], [ %663, %662 ]
  %679 = phi i32 [ %106, %102 ], [ %664, %662 ]
  %680 = phi i64 [ %108, %102 ], [ 0, %662 ]
  %681 = phi i32 [ %109, %102 ], [ 0, %662 ]
  %682 = load i32, i32* %94, align 4
  %683 = icmp eq i32 %682, 0
  br i1 %683, label %684, label %685

684:                                              ; preds = %677
  store i8* %105, i8** %33, align 8
  store i32 %107, i32* %53, align 8
  store i8* %678, i8** %37, align 8
  store i32 %679, i32* %55, align 8
  store i64 %680, i64* %57, align 8
  store i32 %681, i32* %59, align 8
  br label %2637

685:                                              ; preds = %677
  %686 = call i64 @Cr_z_adler32(i64 0, i8* null, i32 0) #6
  store i64 %686, i64* %65, align 8
  store i64 %686, i64* %66, align 8
  store i32 16191, i32* %28, align 8
  br label %687

687:                                              ; preds = %102, %685
  %688 = phi i8* [ %104, %102 ], [ %678, %685 ]
  %689 = phi i32 [ %106, %102 ], [ %679, %685 ]
  %690 = phi i64 [ %108, %102 ], [ %680, %685 ]
  %691 = phi i32 [ %109, %102 ], [ %681, %685 ]
  br i1 %96, label %2468, label %692

692:                                              ; preds = %687, %102
  %693 = phi i8* [ %104, %102 ], [ %688, %687 ]
  %694 = phi i32 [ %106, %102 ], [ %689, %687 ]
  %695 = phi i64 [ %108, %102 ], [ %690, %687 ]
  %696 = phi i32 [ %109, %102 ], [ %691, %687 ]
  %697 = load i32, i32* %97, align 4
  %698 = icmp eq i32 %697, 0
  br i1 %698, label %699, label %703

699:                                              ; preds = %692
  %700 = icmp ult i32 %696, 3
  br i1 %700, label %701, label %717

701:                                              ; preds = %699
  %702 = icmp eq i32 %694, 0
  br i1 %702, label %2468, label %708

703:                                              ; preds = %692
  %704 = and i32 %696, 7
  %705 = zext i32 %704 to i64
  %706 = lshr i64 %695, %705
  %707 = sub i32 %696, %704
  store i32 16206, i32* %28, align 8
  br label %2365

708:                                              ; preds = %701
  %709 = zext i32 %696 to i64
  %710 = add nuw nsw i32 %696, 8
  %711 = getelementptr i8, i8* %693, i64 1
  %712 = add i32 %694, -1
  %713 = load i8, i8* %693, align 1
  %714 = zext i8 %713 to i64
  %715 = shl i64 %714, %709
  %716 = add i64 %715, %695
  br label %717

717:                                              ; preds = %708, %699
  %718 = phi i8* [ %693, %699 ], [ %711, %708 ]
  %719 = phi i32 [ %694, %699 ], [ %712, %708 ]
  %720 = phi i64 [ %695, %699 ], [ %716, %708 ]
  %721 = phi i32 [ %696, %699 ], [ %710, %708 ]
  %722 = trunc i64 %720 to i32
  %723 = and i32 %722, 1
  store i32 %723, i32* %97, align 4
  %724 = lshr i64 %720, 1
  %725 = trunc i64 %724 to i32
  %726 = and i32 %725, 3
  switch i32 %726, label %733 [
    i32 0, label %734
    i32 1, label %727
    i32 2, label %731
    i32 3, label %732
  ]

727:                                              ; preds = %717
  store i32 9, i32* %76, align 8
  store <2 x %struct.code*> <%struct.code* getelementptr inbounds ([512 x %struct.code], [512 x %struct.code]* @fixedtables.lenfix, i64 0, i64 0), %struct.code* getelementptr inbounds ([32 x %struct.code], [32 x %struct.code]* @fixedtables.distfix, i64 0, i64 0)>, <2 x %struct.code*>* %101, align 8
  store i32 5, i32* %83, align 4
  store i32 16199, i32* %28, align 8
  br i1 %84, label %728, label %736

728:                                              ; preds = %727
  %729 = lshr i64 %720, 3
  %730 = add i32 %721, -3
  br label %2474

731:                                              ; preds = %717
  br label %734

732:                                              ; preds = %717
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i8** %67, align 8
  br label %734

733:                                              ; preds = %717
  unreachable

734:                                              ; preds = %717, %732, %731
  %735 = phi i32 [ 16196, %731 ], [ 16209, %732 ], [ 16193, %717 ]
  store i32 %735, i32* %28, align 8
  br label %736

736:                                              ; preds = %734, %727
  %737 = lshr i64 %720, 3
  %738 = add i32 %721, -3
  br label %2365

739:                                              ; preds = %102
  %740 = and i32 %109, 7
  %741 = zext i32 %740 to i64
  %742 = lshr i64 %108, %741
  %743 = sub i32 %109, %740
  %744 = icmp ult i32 %743, 32
  br i1 %744, label %745, label %763

745:                                              ; preds = %739
  %746 = zext i32 %743 to i64
  %747 = icmp eq i32 %106, 0
  br i1 %747, label %2432, label %748

748:                                              ; preds = %745
  %749 = add i32 %106, -1
  %750 = getelementptr inbounds i8, i8* %104, i64 1
  %751 = load i8, i8* %104, align 1
  %752 = zext i8 %751 to i64
  %753 = shl i64 %752, %746
  %754 = add i64 %753, %742
  %755 = add nuw nsw i64 %746, 8
  %756 = icmp ult i64 %755, 32
  br i1 %756, label %2713, label %757

757:                                              ; preds = %2737, %2726, %2715, %748
  %758 = phi i32 [ %749, %748 ], [ %2716, %2715 ], [ %2727, %2726 ], [ %2738, %2737 ]
  %759 = phi i8* [ %750, %748 ], [ %2717, %2715 ], [ %2728, %2726 ], [ %2739, %2737 ]
  %760 = phi i64 [ %754, %748 ], [ %2721, %2715 ], [ %2732, %2726 ], [ %2743, %2737 ]
  %761 = phi i64 [ %755, %748 ], [ %2722, %2715 ], [ %2733, %2726 ], [ %2744, %2737 ]
  %762 = trunc i64 %761 to i32
  br label %763

763:                                              ; preds = %757, %739
  %764 = phi i8* [ %104, %739 ], [ %759, %757 ]
  %765 = phi i32 [ %106, %739 ], [ %758, %757 ]
  %766 = phi i64 [ %742, %739 ], [ %760, %757 ]
  %767 = phi i32 [ %743, %739 ], [ %762, %757 ]
  %768 = and i64 %766, 65535
  %769 = lshr i64 %766, 16
  %770 = xor i64 %769, 65535
  %771 = icmp eq i64 %768, %770
  br i1 %771, label %773, label %772

772:                                              ; preds = %763
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

773:                                              ; preds = %763
  %774 = trunc i64 %766 to i32
  %775 = and i32 %774, 65535
  store i32 %775, i32* %68, align 4
  store i32 16194, i32* %28, align 8
  br i1 %84, label %2468, label %776

776:                                              ; preds = %773, %102
  %777 = phi i8* [ %104, %102 ], [ %764, %773 ]
  %778 = phi i32 [ %106, %102 ], [ %765, %773 ]
  %779 = phi i64 [ %108, %102 ], [ 0, %773 ]
  %780 = phi i32 [ %109, %102 ], [ 0, %773 ]
  store i32 16195, i32* %28, align 8
  br label %781

781:                                              ; preds = %102, %776
  %782 = phi i8* [ %104, %102 ], [ %777, %776 ]
  %783 = phi i32 [ %106, %102 ], [ %778, %776 ]
  %784 = phi i64 [ %108, %102 ], [ %779, %776 ]
  %785 = phi i32 [ %109, %102 ], [ %780, %776 ]
  %786 = load i32, i32* %68, align 4
  %787 = icmp eq i32 %786, 0
  br i1 %787, label %802, label %788

788:                                              ; preds = %781
  %789 = icmp ugt i32 %786, %783
  %790 = select i1 %789, i32 %783, i32 %786
  %791 = icmp ugt i32 %790, %107
  %792 = select i1 %791, i32 %107, i32 %790
  %793 = icmp eq i32 %792, 0
  br i1 %793, label %2468, label %794

794:                                              ; preds = %788
  %795 = zext i32 %792 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %105, i8* align 1 %782, i64 %795, i1 false)
  %796 = sub i32 %783, %792
  %797 = getelementptr inbounds i8, i8* %782, i64 %795
  %798 = sub i32 %107, %792
  %799 = getelementptr inbounds i8, i8* %105, i64 %795
  %800 = load i32, i32* %68, align 4
  %801 = sub i32 %800, %792
  store i32 %801, i32* %68, align 4
  br label %2365

802:                                              ; preds = %781
  store i32 16191, i32* %28, align 8
  br label %2365

803:                                              ; preds = %122
  %804 = add i32 %106, -1
  %805 = getelementptr inbounds i8, i8* %104, i64 1
  %806 = load i8, i8* %104, align 1
  %807 = zext i8 %806 to i64
  %808 = shl i64 %807, %123
  %809 = add i64 %808, %108
  %810 = add nuw nsw i64 %123, 8
  %811 = icmp ult i64 %810, 14
  br i1 %811, label %2703, label %812

812:                                              ; preds = %2705, %803
  %813 = phi i32 [ %804, %803 ], [ %2706, %2705 ]
  %814 = phi i8* [ %805, %803 ], [ %2707, %2705 ]
  %815 = phi i64 [ %809, %803 ], [ %2711, %2705 ]
  %816 = phi i64 [ %810, %803 ], [ %2712, %2705 ]
  %817 = trunc i64 %816 to i32
  br label %818

818:                                              ; preds = %812, %120
  %819 = phi i8* [ %104, %120 ], [ %814, %812 ]
  %820 = phi i32 [ %106, %120 ], [ %813, %812 ]
  %821 = phi i64 [ %108, %120 ], [ %815, %812 ]
  %822 = phi i32 [ %109, %120 ], [ %817, %812 ]
  %823 = trunc i64 %821 to i32
  %824 = and i32 %823, 31
  %825 = add nuw nsw i32 %824, 257
  store i32 %825, i32* %69, align 4
  %826 = lshr i64 %821, 5
  %827 = trunc i64 %826 to i32
  %828 = and i32 %827, 31
  %829 = add nuw nsw i32 %828, 1
  store i32 %829, i32* %70, align 8
  %830 = lshr i64 %821, 10
  %831 = trunc i64 %830 to i32
  %832 = and i32 %831, 15
  %833 = add nuw nsw i32 %832, 4
  store i32 %833, i32* %71, align 8
  %834 = lshr i64 %821, 14
  %835 = add i32 %822, -14
  %836 = icmp ugt i32 %825, 286
  %837 = icmp ugt i32 %828, 29
  %838 = or i1 %836, %837
  br i1 %838, label %839, label %840

839:                                              ; preds = %818
  store i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.8, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

840:                                              ; preds = %818
  store i32 0, i32* %72, align 4
  store i32 16197, i32* %28, align 8
  br label %845

841:                                              ; preds = %102
  %842 = load i32, i32* %72, align 4
  %843 = load i32, i32* %71, align 8
  %844 = icmp ult i32 %842, %843
  br i1 %844, label %845, label %852

845:                                              ; preds = %840, %841
  %846 = phi i32 [ %835, %840 ], [ %109, %841 ]
  %847 = phi i64 [ %834, %840 ], [ %108, %841 ]
  %848 = phi i32 [ %820, %840 ], [ %106, %841 ]
  %849 = phi i8* [ %819, %840 ], [ %104, %841 ]
  %850 = phi i32 [ 0, %840 ], [ %842, %841 ]
  %851 = phi i32 [ %833, %840 ], [ %843, %841 ]
  br label %878

852:                                              ; preds = %896, %841
  %853 = phi i8* [ %104, %841 ], [ %897, %896 ]
  %854 = phi i32 [ %106, %841 ], [ %898, %896 ]
  %855 = phi i64 [ %108, %841 ], [ %909, %896 ]
  %856 = phi i32 [ %109, %841 ], [ %910, %896 ]
  %857 = phi i32 [ %842, %841 ], [ %903, %896 ]
  %858 = icmp ult i32 %857, 19
  br i1 %858, label %859, label %939

859:                                              ; preds = %852
  %860 = sub i32 3, %857
  %861 = sub i32 18, %857
  %862 = and i32 %860, 3
  %863 = icmp eq i32 %862, 0
  br i1 %863, label %875, label %864

864:                                              ; preds = %859, %864
  %865 = phi i32 [ %867, %864 ], [ %857, %859 ]
  %866 = phi i32 [ %873, %864 ], [ %862, %859 ]
  %867 = add nuw nsw i32 %865, 1
  store i32 %867, i32* %72, align 4
  %868 = zext i32 %865 to i64
  %869 = getelementptr inbounds [19 x i16], [19 x i16]* @Cr_z_inflate.order, i64 0, i64 %868
  %870 = load i16, i16* %869, align 2
  %871 = zext i16 %870 to i64
  %872 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 %871
  store i16 0, i16* %872, align 2
  %873 = add i32 %866, -1
  %874 = icmp eq i32 %873, 0
  br i1 %874, label %875, label %864, !llvm.loop !2

875:                                              ; preds = %864, %859
  %876 = phi i32 [ %857, %859 ], [ %867, %864 ]
  %877 = icmp ult i32 %861, 3
  br i1 %877, label %939, label %912

878:                                              ; preds = %845, %896
  %879 = phi i32 [ %903, %896 ], [ %850, %845 ]
  %880 = phi i32 [ %910, %896 ], [ %846, %845 ]
  %881 = phi i64 [ %909, %896 ], [ %847, %845 ]
  %882 = phi i32 [ %898, %896 ], [ %848, %845 ]
  %883 = phi i8* [ %897, %896 ], [ %849, %845 ]
  %884 = icmp ult i32 %880, 3
  br i1 %884, label %885, label %896

885:                                              ; preds = %878
  %886 = icmp eq i32 %882, 0
  br i1 %886, label %2474, label %887

887:                                              ; preds = %885
  %888 = zext i32 %880 to i64
  %889 = add nuw nsw i32 %880, 8
  %890 = getelementptr i8, i8* %883, i64 1
  %891 = add i32 %882, -1
  %892 = load i8, i8* %883, align 1
  %893 = zext i8 %892 to i64
  %894 = shl i64 %893, %888
  %895 = add i64 %894, %881
  br label %896

896:                                              ; preds = %887, %878
  %897 = phi i8* [ %883, %878 ], [ %890, %887 ]
  %898 = phi i32 [ %882, %878 ], [ %891, %887 ]
  %899 = phi i64 [ %881, %878 ], [ %895, %887 ]
  %900 = phi i32 [ %880, %878 ], [ %889, %887 ]
  %901 = trunc i64 %899 to i16
  %902 = and i16 %901, 7
  %903 = add nuw i32 %879, 1
  store i32 %903, i32* %72, align 4
  %904 = zext i32 %879 to i64
  %905 = getelementptr inbounds [19 x i16], [19 x i16]* @Cr_z_inflate.order, i64 0, i64 %904
  %906 = load i16, i16* %905, align 2
  %907 = zext i16 %906 to i64
  %908 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 %907
  store i16 %902, i16* %908, align 2
  %909 = lshr i64 %899, 3
  %910 = add i32 %900, -3
  %911 = icmp ult i32 %903, %851
  br i1 %911, label %878, label %852

912:                                              ; preds = %875, %912
  %913 = phi i32 [ %932, %912 ], [ %876, %875 ]
  %914 = add nuw nsw i32 %913, 1
  store i32 %914, i32* %72, align 4
  %915 = zext i32 %913 to i64
  %916 = getelementptr inbounds [19 x i16], [19 x i16]* @Cr_z_inflate.order, i64 0, i64 %915
  %917 = load i16, i16* %916, align 2
  %918 = zext i16 %917 to i64
  %919 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 %918
  store i16 0, i16* %919, align 2
  %920 = add nuw nsw i32 %913, 2
  store i32 %920, i32* %72, align 4
  %921 = zext i32 %914 to i64
  %922 = getelementptr inbounds [19 x i16], [19 x i16]* @Cr_z_inflate.order, i64 0, i64 %921
  %923 = load i16, i16* %922, align 2
  %924 = zext i16 %923 to i64
  %925 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 %924
  store i16 0, i16* %925, align 2
  %926 = add nuw nsw i32 %913, 3
  store i32 %926, i32* %72, align 4
  %927 = zext i32 %920 to i64
  %928 = getelementptr inbounds [19 x i16], [19 x i16]* @Cr_z_inflate.order, i64 0, i64 %927
  %929 = load i16, i16* %928, align 2
  %930 = zext i16 %929 to i64
  %931 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 %930
  store i16 0, i16* %931, align 2
  %932 = add nuw nsw i32 %913, 4
  store i32 %932, i32* %72, align 4
  %933 = zext i32 %926 to i64
  %934 = getelementptr inbounds [19 x i16], [19 x i16]* @Cr_z_inflate.order, i64 0, i64 %933
  %935 = load i16, i16* %934, align 2
  %936 = zext i16 %935 to i64
  %937 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 %936
  store i16 0, i16* %937, align 2
  %938 = icmp ult i32 %932, 19
  br i1 %938, label %912, label %939

939:                                              ; preds = %875, %912, %852
  store %struct.code* %73, %struct.code** %74, align 8
  store %struct.code* %73, %struct.code** %75, align 8
  store i32 7, i32* %76, align 8
  %940 = call i32 @Cr_z_inflate_table(i32 0, i16* %77, i32 19, %struct.code** %74, i32* %76, i16* %78) #6
  %941 = icmp eq i32 %940, 0
  br i1 %941, label %943, label %942

942:                                              ; preds = %939
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

943:                                              ; preds = %939
  store i32 0, i32* %72, align 4
  store i32 16198, i32* %28, align 8
  br label %944

944:                                              ; preds = %116, %943
  %945 = phi i32 [ %117, %116 ], [ 0, %943 ]
  %946 = phi i8* [ %104, %116 ], [ %853, %943 ]
  %947 = phi i32 [ %106, %116 ], [ %854, %943 ]
  %948 = phi i64 [ %108, %116 ], [ %855, %943 ]
  %949 = phi i32 [ %109, %116 ], [ %856, %943 ]
  %950 = phi i32 [ %111, %116 ], [ 0, %943 ]
  %951 = load i32, i32* %69, align 4
  %952 = load i32, i32* %70, align 8
  %953 = add i32 %952, %951
  %954 = icmp ult i32 %945, %953
  br i1 %954, label %955, label %1189

955:                                              ; preds = %944
  %956 = load %struct.code*, %struct.code** %75, align 8
  %957 = load i32, i32* %76, align 8
  %958 = shl nsw i32 -1, %957
  %959 = xor i32 %958, -1
  %960 = shl nsw i32 -1, %957
  %961 = xor i32 %960, -1
  br label %962

962:                                              ; preds = %955, %1182
  %963 = phi i32 [ %1183, %1182 ], [ %945, %955 ]
  %964 = phi i32 [ %1187, %1182 ], [ %949, %955 ]
  %965 = phi i64 [ %1186, %1182 ], [ %948, %955 ]
  %966 = phi i32 [ %1185, %1182 ], [ %947, %955 ]
  %967 = phi i8* [ %1184, %1182 ], [ %946, %955 ]
  %968 = trunc i64 %965 to i32
  %969 = and i32 %959, %968
  %970 = zext i32 %969 to i64
  %971 = getelementptr inbounds %struct.code, %struct.code* %956, i64 %970, i32 1
  %972 = load i8, i8* %971, align 1
  %973 = zext i8 %972 to i32
  %974 = icmp ult i32 %964, %973
  br i1 %974, label %975, label %1002

975:                                              ; preds = %962
  %976 = zext i32 %964 to i64
  br label %977

977:                                              ; preds = %975, %983
  %978 = phi i64 [ %976, %975 ], [ %990, %983 ]
  %979 = phi i64 [ %965, %975 ], [ %989, %983 ]
  %980 = phi i32 [ %966, %975 ], [ %984, %983 ]
  %981 = phi i8* [ %967, %975 ], [ %985, %983 ]
  %982 = icmp eq i32 %980, 0
  br i1 %982, label %2381, label %983

983:                                              ; preds = %977
  %984 = add i32 %980, -1
  %985 = getelementptr inbounds i8, i8* %981, i64 1
  %986 = load i8, i8* %981, align 1
  %987 = zext i8 %986 to i64
  %988 = shl i64 %987, %978
  %989 = add i64 %988, %979
  %990 = add nuw nsw i64 %978, 8
  %991 = trunc i64 %989 to i32
  %992 = and i32 %961, %991
  %993 = zext i32 %992 to i64
  %994 = getelementptr inbounds %struct.code, %struct.code* %956, i64 %993, i32 1
  %995 = load i8, i8* %994, align 1
  %996 = zext i8 %995 to i64
  %997 = icmp ult i64 %990, %996
  br i1 %997, label %977, label %998

998:                                              ; preds = %983
  %999 = zext i32 %992 to i64
  %1000 = zext i8 %995 to i32
  %1001 = trunc i64 %990 to i32
  br label %1002

1002:                                             ; preds = %998, %962
  %1003 = phi i8* [ %985, %998 ], [ %967, %962 ]
  %1004 = phi i32 [ %984, %998 ], [ %966, %962 ]
  %1005 = phi i64 [ %989, %998 ], [ %965, %962 ]
  %1006 = phi i32 [ %1001, %998 ], [ %964, %962 ]
  %1007 = phi i8 [ %995, %998 ], [ %972, %962 ]
  %1008 = phi i64 [ %999, %998 ], [ %970, %962 ]
  %1009 = phi i32 [ %1000, %998 ], [ %973, %962 ]
  %1010 = getelementptr inbounds %struct.code, %struct.code* %956, i64 %1008, i32 2
  %1011 = load i16, i16* %1010, align 2
  %1012 = icmp ult i16 %1011, 16
  br i1 %1012, label %1013, label %1020

1013:                                             ; preds = %1002
  %1014 = zext i8 %1007 to i64
  %1015 = lshr i64 %1005, %1014
  %1016 = sub i32 %1006, %1009
  %1017 = add i32 %963, 1
  store i32 %1017, i32* %72, align 4
  %1018 = zext i32 %963 to i64
  %1019 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 %1018
  store i16 %1011, i16* %1019, align 2
  br label %1182

1020:                                             ; preds = %1002
  switch i16 %1011, label %1033 [
    i16 16, label %1027
    i16 17, label %1021
  ]

1021:                                             ; preds = %1020
  %1022 = add nuw nsw i32 %1009, 3
  %1023 = icmp ult i32 %1006, %1022
  br i1 %1023, label %1024, label %1093

1024:                                             ; preds = %1021
  %1025 = zext i32 %1006 to i64
  %1026 = zext i32 %1022 to i64
  br label %1076

1027:                                             ; preds = %1020
  %1028 = add nuw nsw i32 %1009, 2
  %1029 = icmp ult i32 %1006, %1028
  br i1 %1029, label %1030, label %1056

1030:                                             ; preds = %1027
  %1031 = zext i32 %1006 to i64
  %1032 = zext i32 %1028 to i64
  br label %1039

1033:                                             ; preds = %1020
  %1034 = add nuw nsw i32 %1009, 7
  %1035 = icmp ult i32 %1006, %1034
  br i1 %1035, label %1036, label %1123

1036:                                             ; preds = %1033
  %1037 = zext i32 %1006 to i64
  %1038 = zext i32 %1034 to i64
  br label %1106

1039:                                             ; preds = %1030, %1045
  %1040 = phi i64 [ %1031, %1030 ], [ %1052, %1045 ]
  %1041 = phi i64 [ %1005, %1030 ], [ %1051, %1045 ]
  %1042 = phi i32 [ %1004, %1030 ], [ %1046, %1045 ]
  %1043 = phi i8* [ %1003, %1030 ], [ %1047, %1045 ]
  %1044 = icmp eq i32 %1042, 0
  br i1 %1044, label %2377, label %1045

1045:                                             ; preds = %1039
  %1046 = add i32 %1042, -1
  %1047 = getelementptr inbounds i8, i8* %1043, i64 1
  %1048 = load i8, i8* %1043, align 1
  %1049 = zext i8 %1048 to i64
  %1050 = shl i64 %1049, %1040
  %1051 = add i64 %1050, %1041
  %1052 = add nuw nsw i64 %1040, 8
  %1053 = icmp ult i64 %1052, %1032
  br i1 %1053, label %1039, label %1054

1054:                                             ; preds = %1045
  %1055 = trunc i64 %1052 to i32
  br label %1056

1056:                                             ; preds = %1054, %1027
  %1057 = phi i8* [ %1003, %1027 ], [ %1047, %1054 ]
  %1058 = phi i32 [ %1004, %1027 ], [ %1046, %1054 ]
  %1059 = phi i64 [ %1005, %1027 ], [ %1051, %1054 ]
  %1060 = phi i32 [ %1006, %1027 ], [ %1055, %1054 ]
  %1061 = zext i8 %1007 to i64
  %1062 = lshr i64 %1059, %1061
  %1063 = sub i32 %1060, %1009
  %1064 = icmp eq i32 %963, 0
  br i1 %1064, label %1065, label %1066

1065:                                             ; preds = %1056
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

1066:                                             ; preds = %1056
  %1067 = add i32 %963, -1
  %1068 = zext i32 %1067 to i64
  %1069 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 %1068
  %1070 = load i16, i16* %1069, align 2
  %1071 = trunc i64 %1062 to i32
  %1072 = and i32 %1071, 3
  %1073 = add nuw nsw i32 %1072, 3
  %1074 = lshr i64 %1062, 2
  %1075 = add i32 %1063, -2
  br label %1136

1076:                                             ; preds = %1024, %1082
  %1077 = phi i64 [ %1025, %1024 ], [ %1089, %1082 ]
  %1078 = phi i64 [ %1005, %1024 ], [ %1088, %1082 ]
  %1079 = phi i32 [ %1004, %1024 ], [ %1083, %1082 ]
  %1080 = phi i8* [ %1003, %1024 ], [ %1084, %1082 ]
  %1081 = icmp eq i32 %1079, 0
  br i1 %1081, label %2379, label %1082

1082:                                             ; preds = %1076
  %1083 = add i32 %1079, -1
  %1084 = getelementptr inbounds i8, i8* %1080, i64 1
  %1085 = load i8, i8* %1080, align 1
  %1086 = zext i8 %1085 to i64
  %1087 = shl i64 %1086, %1077
  %1088 = add i64 %1087, %1078
  %1089 = add nuw nsw i64 %1077, 8
  %1090 = icmp ult i64 %1089, %1026
  br i1 %1090, label %1076, label %1091

1091:                                             ; preds = %1082
  %1092 = trunc i64 %1089 to i32
  br label %1093

1093:                                             ; preds = %1091, %1021
  %1094 = phi i8* [ %1003, %1021 ], [ %1084, %1091 ]
  %1095 = phi i32 [ %1004, %1021 ], [ %1083, %1091 ]
  %1096 = phi i64 [ %1005, %1021 ], [ %1088, %1091 ]
  %1097 = phi i32 [ %1006, %1021 ], [ %1092, %1091 ]
  %1098 = zext i8 %1007 to i64
  %1099 = lshr i64 %1096, %1098
  %1100 = trunc i64 %1099 to i32
  %1101 = and i32 %1100, 7
  %1102 = add nuw nsw i32 %1101, 3
  %1103 = lshr i64 %1099, 3
  %1104 = sub nuw nsw i32 -3, %1009
  %1105 = add i32 %1104, %1097
  br label %1136

1106:                                             ; preds = %1036, %1112
  %1107 = phi i64 [ %1037, %1036 ], [ %1119, %1112 ]
  %1108 = phi i64 [ %1005, %1036 ], [ %1118, %1112 ]
  %1109 = phi i32 [ %1004, %1036 ], [ %1113, %1112 ]
  %1110 = phi i8* [ %1003, %1036 ], [ %1114, %1112 ]
  %1111 = icmp eq i32 %1109, 0
  br i1 %1111, label %2375, label %1112

1112:                                             ; preds = %1106
  %1113 = add i32 %1109, -1
  %1114 = getelementptr inbounds i8, i8* %1110, i64 1
  %1115 = load i8, i8* %1110, align 1
  %1116 = zext i8 %1115 to i64
  %1117 = shl i64 %1116, %1107
  %1118 = add i64 %1117, %1108
  %1119 = add nuw nsw i64 %1107, 8
  %1120 = icmp ult i64 %1119, %1038
  br i1 %1120, label %1106, label %1121

1121:                                             ; preds = %1112
  %1122 = trunc i64 %1119 to i32
  br label %1123

1123:                                             ; preds = %1121, %1033
  %1124 = phi i8* [ %1003, %1033 ], [ %1114, %1121 ]
  %1125 = phi i32 [ %1004, %1033 ], [ %1113, %1121 ]
  %1126 = phi i64 [ %1005, %1033 ], [ %1118, %1121 ]
  %1127 = phi i32 [ %1006, %1033 ], [ %1122, %1121 ]
  %1128 = zext i8 %1007 to i64
  %1129 = lshr i64 %1126, %1128
  %1130 = trunc i64 %1129 to i32
  %1131 = and i32 %1130, 127
  %1132 = add nuw nsw i32 %1131, 11
  %1133 = lshr i64 %1129, 7
  %1134 = sub nuw nsw i32 -7, %1009
  %1135 = add i32 %1134, %1127
  br label %1136

1136:                                             ; preds = %1093, %1123, %1066
  %1137 = phi i8* [ %1057, %1066 ], [ %1094, %1093 ], [ %1124, %1123 ]
  %1138 = phi i32 [ %1058, %1066 ], [ %1095, %1093 ], [ %1125, %1123 ]
  %1139 = phi i64 [ %1074, %1066 ], [ %1103, %1093 ], [ %1133, %1123 ]
  %1140 = phi i32 [ %1075, %1066 ], [ %1105, %1093 ], [ %1135, %1123 ]
  %1141 = phi i32 [ %1073, %1066 ], [ %1102, %1093 ], [ %1132, %1123 ]
  %1142 = phi i16 [ %1070, %1066 ], [ 0, %1093 ], [ 0, %1123 ]
  %1143 = add i32 %1141, %963
  %1144 = icmp ugt i32 %1143, %953
  br i1 %1144, label %1164, label %1145

1145:                                             ; preds = %1136
  %1146 = add nsw i32 %1141, -1
  %1147 = and i32 %1141, 3
  %1148 = icmp eq i32 %1147, 0
  br i1 %1148, label %1159, label %1149

1149:                                             ; preds = %1145, %1149
  %1150 = phi i32 [ %1154, %1149 ], [ %963, %1145 ]
  %1151 = phi i32 [ %1153, %1149 ], [ %1141, %1145 ]
  %1152 = phi i32 [ %1157, %1149 ], [ %1147, %1145 ]
  %1153 = add nsw i32 %1151, -1
  %1154 = add i32 %1150, 1
  store i32 %1154, i32* %72, align 4
  %1155 = zext i32 %1150 to i64
  %1156 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 %1155
  store i16 %1142, i16* %1156, align 2
  %1157 = add i32 %1152, -1
  %1158 = icmp eq i32 %1157, 0
  br i1 %1158, label %1159, label %1149, !llvm.loop !4

1159:                                             ; preds = %1149, %1145
  %1160 = phi i32 [ undef, %1145 ], [ %1154, %1149 ]
  %1161 = phi i32 [ %963, %1145 ], [ %1154, %1149 ]
  %1162 = phi i32 [ %1141, %1145 ], [ %1153, %1149 ]
  %1163 = icmp ult i32 %1146, 3
  br i1 %1163, label %1182, label %1165

1164:                                             ; preds = %1136
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

1165:                                             ; preds = %1159, %1165
  %1166 = phi i32 [ %1178, %1165 ], [ %1161, %1159 ]
  %1167 = phi i32 [ %1177, %1165 ], [ %1162, %1159 ]
  %1168 = add i32 %1166, 1
  store i32 %1168, i32* %72, align 4
  %1169 = zext i32 %1166 to i64
  %1170 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 %1169
  store i16 %1142, i16* %1170, align 2
  %1171 = add i32 %1166, 2
  store i32 %1171, i32* %72, align 4
  %1172 = zext i32 %1168 to i64
  %1173 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 %1172
  store i16 %1142, i16* %1173, align 2
  %1174 = add i32 %1166, 3
  store i32 %1174, i32* %72, align 4
  %1175 = zext i32 %1171 to i64
  %1176 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 %1175
  store i16 %1142, i16* %1176, align 2
  %1177 = add nsw i32 %1167, -4
  %1178 = add i32 %1166, 4
  store i32 %1178, i32* %72, align 4
  %1179 = zext i32 %1174 to i64
  %1180 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 %1179
  store i16 %1142, i16* %1180, align 2
  %1181 = icmp eq i32 %1177, 0
  br i1 %1181, label %1182, label %1165

1182:                                             ; preds = %1159, %1165, %1013
  %1183 = phi i32 [ %1017, %1013 ], [ %1160, %1159 ], [ %1178, %1165 ]
  %1184 = phi i8* [ %1003, %1013 ], [ %1137, %1165 ], [ %1137, %1159 ]
  %1185 = phi i32 [ %1004, %1013 ], [ %1138, %1165 ], [ %1138, %1159 ]
  %1186 = phi i64 [ %1015, %1013 ], [ %1139, %1165 ], [ %1139, %1159 ]
  %1187 = phi i32 [ %1016, %1013 ], [ %1140, %1165 ], [ %1140, %1159 ]
  %1188 = icmp ult i32 %1183, %953
  br i1 %1188, label %962, label %1189

1189:                                             ; preds = %1182, %944
  %1190 = phi i8* [ %946, %944 ], [ %1184, %1182 ]
  %1191 = phi i32 [ %947, %944 ], [ %1185, %1182 ]
  %1192 = phi i64 [ %948, %944 ], [ %1186, %1182 ]
  %1193 = phi i32 [ %949, %944 ], [ %1187, %1182 ]
  %1194 = load i16, i16* %79, align 8
  %1195 = icmp eq i16 %1194, 0
  br i1 %1195, label %1196, label %1197

1196:                                             ; preds = %1189
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

1197:                                             ; preds = %1189
  store %struct.code* %73, %struct.code** %74, align 8
  store %struct.code* %73, %struct.code** %75, align 8
  store i32 9, i32* %76, align 8
  %1198 = call i32 @Cr_z_inflate_table(i32 1, i16* %77, i32 %951, %struct.code** %74, i32* %76, i16* %78) #6
  %1199 = icmp eq i32 %1198, 0
  br i1 %1199, label %1201, label %1200

1200:                                             ; preds = %1197
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.12, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

1201:                                             ; preds = %1197
  %1202 = load i64, i64* %80, align 8
  store i64 %1202, i64* %82, align 8
  store i32 6, i32* %83, align 4
  %1203 = load i32, i32* %69, align 4
  %1204 = zext i32 %1203 to i64
  %1205 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %21, i64 0, i32 29, i64 %1204
  %1206 = load i32, i32* %70, align 8
  %1207 = call i32 @Cr_z_inflate_table(i32 2, i16* %1205, i32 %1206, %struct.code** %74, i32* %83, i16* %78) #6
  %1208 = icmp eq i32 %1207, 0
  br i1 %1208, label %1210, label %1209

1209:                                             ; preds = %1201
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

1210:                                             ; preds = %1201
  store i32 16199, i32* %28, align 8
  br i1 %84, label %2468, label %1211

1211:                                             ; preds = %1210, %102
  %1212 = phi i8* [ %104, %102 ], [ %1190, %1210 ]
  %1213 = phi i32 [ %106, %102 ], [ %1191, %1210 ]
  %1214 = phi i64 [ %108, %102 ], [ %1192, %1210 ]
  %1215 = phi i32 [ %109, %102 ], [ %1193, %1210 ]
  %1216 = phi i32 [ %111, %102 ], [ 0, %1210 ]
  store i32 16200, i32* %28, align 8
  br label %1217

1217:                                             ; preds = %102, %1211
  %1218 = phi i8* [ %104, %102 ], [ %1212, %1211 ]
  %1219 = phi i32 [ %106, %102 ], [ %1213, %1211 ]
  %1220 = phi i64 [ %108, %102 ], [ %1214, %1211 ]
  %1221 = phi i32 [ %109, %102 ], [ %1215, %1211 ]
  %1222 = phi i32 [ %111, %102 ], [ %1216, %1211 ]
  %1223 = icmp ugt i32 %1219, 7
  %1224 = icmp ugt i32 %107, 257
  %1225 = and i1 %1224, %1223
  br i1 %1225, label %1226, label %1236

1226:                                             ; preds = %1217
  store i8* %105, i8** %33, align 8
  store i32 %107, i32* %53, align 8
  store i8* %1218, i8** %37, align 8
  store i32 %1219, i32* %55, align 8
  store i64 %1220, i64* %57, align 8
  store i32 %1221, i32* %59, align 8
  call void @Cr_z_inflate_fast_chunk_(%struct.z_stream_s* nonnull %0, i32 %110) #6
  %1227 = load i8*, i8** %33, align 8
  %1228 = load i32, i32* %53, align 8
  %1229 = load i8*, i8** %37, align 8
  %1230 = load i32, i32* %55, align 8
  %1231 = load i64, i64* %57, align 8
  %1232 = load i32, i32* %59, align 8
  %1233 = load i32, i32* %28, align 8
  %1234 = icmp eq i32 %1233, 16191
  br i1 %1234, label %1235, label %2365

1235:                                             ; preds = %1226
  store i32 -1, i32* %85, align 4
  br label %2365

1236:                                             ; preds = %1217
  store i32 0, i32* %85, align 4
  %1237 = load %struct.code*, %struct.code** %75, align 8
  %1238 = trunc i64 %1220 to i32
  %1239 = load i32, i32* %76, align 8
  %1240 = shl nsw i32 -1, %1239
  %1241 = xor i32 %1240, -1
  %1242 = and i32 %1241, %1238
  %1243 = zext i32 %1242 to i64
  %1244 = getelementptr inbounds %struct.code, %struct.code* %1237, i64 %1243, i32 1
  %1245 = load i8, i8* %1244, align 1
  %1246 = zext i8 %1245 to i32
  %1247 = icmp ult i32 %1221, %1246
  br i1 %1247, label %1248, label %1275

1248:                                             ; preds = %1236
  %1249 = zext i32 %1221 to i64
  br label %1250

1250:                                             ; preds = %1248, %1256
  %1251 = phi i64 [ %1249, %1248 ], [ %1263, %1256 ]
  %1252 = phi i64 [ %1220, %1248 ], [ %1262, %1256 ]
  %1253 = phi i32 [ %1219, %1248 ], [ %1257, %1256 ]
  %1254 = phi i8* [ %1218, %1248 ], [ %1258, %1256 ]
  %1255 = icmp eq i32 %1253, 0
  br i1 %1255, label %2445, label %1256

1256:                                             ; preds = %1250
  %1257 = add i32 %1253, -1
  %1258 = getelementptr inbounds i8, i8* %1254, i64 1
  %1259 = load i8, i8* %1254, align 1
  %1260 = zext i8 %1259 to i64
  %1261 = shl i64 %1260, %1251
  %1262 = add i64 %1261, %1252
  %1263 = add nuw nsw i64 %1251, 8
  %1264 = trunc i64 %1262 to i32
  %1265 = and i32 %1241, %1264
  %1266 = zext i32 %1265 to i64
  %1267 = getelementptr inbounds %struct.code, %struct.code* %1237, i64 %1266, i32 1
  %1268 = load i8, i8* %1267, align 1
  %1269 = zext i8 %1268 to i64
  %1270 = icmp ult i64 %1263, %1269
  br i1 %1270, label %1250, label %1271

1271:                                             ; preds = %1256
  %1272 = zext i32 %1265 to i64
  %1273 = zext i8 %1268 to i32
  %1274 = trunc i64 %1263 to i32
  br label %1275

1275:                                             ; preds = %1271, %1236
  %1276 = phi i8* [ %1258, %1271 ], [ %1218, %1236 ]
  %1277 = phi i32 [ %1257, %1271 ], [ %1219, %1236 ]
  %1278 = phi i64 [ %1262, %1271 ], [ %1220, %1236 ]
  %1279 = phi i32 [ %1274, %1271 ], [ %1221, %1236 ]
  %1280 = phi i64 [ %1272, %1271 ], [ %1243, %1236 ]
  %1281 = phi i8 [ %1268, %1271 ], [ %1245, %1236 ]
  %1282 = phi i32 [ %1273, %1271 ], [ %1246, %1236 ]
  %1283 = getelementptr inbounds %struct.code, %struct.code* %1237, i64 %1280, i32 2
  %1284 = getelementptr inbounds %struct.code, %struct.code* %1237, i64 %1280, i32 0
  %1285 = load i16, i16* %1283, align 2
  %1286 = load i8, i8* %1284, align 2
  %1287 = zext i8 %1286 to i32
  %1288 = icmp ne i8 %1286, 0
  %1289 = and i32 %1287, 240
  %1290 = icmp eq i32 %1289, 0
  %1291 = and i1 %1288, %1290
  br i1 %1291, label %1292, label %1352

1292:                                             ; preds = %1275
  %1293 = zext i16 %1285 to i32
  %1294 = trunc i64 %1278 to i32
  %1295 = add nuw nsw i32 %1282, %1287
  %1296 = shl nsw i32 -1, %1295
  %1297 = xor i32 %1296, -1
  %1298 = and i32 %1294, %1297
  %1299 = lshr i32 %1298, %1282
  %1300 = add i32 %1299, %1293
  %1301 = zext i32 %1300 to i64
  %1302 = getelementptr inbounds %struct.code, %struct.code* %1237, i64 %1301, i32 1
  %1303 = load i8, i8* %1302, align 1
  %1304 = zext i8 %1303 to i32
  %1305 = add nuw nsw i32 %1282, %1304
  %1306 = icmp ugt i32 %1305, %1279
  br i1 %1306, label %1307, label %1337

1307:                                             ; preds = %1292
  %1308 = zext i32 %1279 to i64
  br label %1309

1309:                                             ; preds = %1307, %1315
  %1310 = phi i64 [ %1308, %1307 ], [ %1322, %1315 ]
  %1311 = phi i64 [ %1278, %1307 ], [ %1321, %1315 ]
  %1312 = phi i32 [ %1277, %1307 ], [ %1316, %1315 ]
  %1313 = phi i8* [ %1276, %1307 ], [ %1317, %1315 ]
  %1314 = icmp eq i32 %1312, 0
  br i1 %1314, label %2443, label %1315

1315:                                             ; preds = %1309
  %1316 = add i32 %1312, -1
  %1317 = getelementptr inbounds i8, i8* %1313, i64 1
  %1318 = load i8, i8* %1313, align 1
  %1319 = zext i8 %1318 to i64
  %1320 = shl i64 %1319, %1310
  %1321 = add i64 %1320, %1311
  %1322 = add nuw nsw i64 %1310, 8
  %1323 = trunc i64 %1321 to i32
  %1324 = and i32 %1323, %1297
  %1325 = lshr i32 %1324, %1282
  %1326 = add i32 %1325, %1293
  %1327 = zext i32 %1326 to i64
  %1328 = getelementptr inbounds %struct.code, %struct.code* %1237, i64 %1327, i32 1
  %1329 = load i8, i8* %1328, align 1
  %1330 = zext i8 %1329 to i32
  %1331 = add nuw nsw i32 %1282, %1330
  %1332 = zext i32 %1331 to i64
  %1333 = icmp ult i64 %1322, %1332
  br i1 %1333, label %1309, label %1334

1334:                                             ; preds = %1315
  %1335 = zext i32 %1326 to i64
  %1336 = trunc i64 %1322 to i32
  br label %1337

1337:                                             ; preds = %1334, %1292
  %1338 = phi i8* [ %1317, %1334 ], [ %1276, %1292 ]
  %1339 = phi i32 [ %1316, %1334 ], [ %1277, %1292 ]
  %1340 = phi i64 [ %1321, %1334 ], [ %1278, %1292 ]
  %1341 = phi i32 [ %1336, %1334 ], [ %1279, %1292 ]
  %1342 = phi i64 [ %1335, %1334 ], [ %1301, %1292 ]
  %1343 = phi i8 [ %1329, %1334 ], [ %1303, %1292 ]
  %1344 = getelementptr inbounds %struct.code, %struct.code* %1237, i64 %1342, i32 2
  %1345 = load i16, i16* %1344, align 2
  %1346 = getelementptr inbounds %struct.code, %struct.code* %1237, i64 %1342, i32 0
  %1347 = load i8, i8* %1346, align 2
  %1348 = zext i8 %1281 to i64
  %1349 = lshr i64 %1340, %1348
  %1350 = sub i32 %1341, %1282
  store i32 %1282, i32* %85, align 4
  %1351 = zext i8 %1347 to i32
  br label %1352

1352:                                             ; preds = %1275, %1337
  %1353 = phi i32 [ %1287, %1275 ], [ %1351, %1337 ]
  %1354 = phi i32 [ 0, %1275 ], [ %1282, %1337 ]
  %1355 = phi i8* [ %1276, %1275 ], [ %1338, %1337 ]
  %1356 = phi i32 [ %1277, %1275 ], [ %1339, %1337 ]
  %1357 = phi i64 [ %1278, %1275 ], [ %1349, %1337 ]
  %1358 = phi i32 [ %1279, %1275 ], [ %1350, %1337 ]
  %1359 = phi i16 [ %1285, %1275 ], [ %1345, %1337 ]
  %1360 = phi i8 [ %1281, %1275 ], [ %1343, %1337 ]
  %1361 = phi i8 [ %1286, %1275 ], [ %1347, %1337 ]
  %1362 = zext i8 %1360 to i32
  %1363 = zext i8 %1360 to i64
  %1364 = lshr i64 %1357, %1363
  %1365 = sub i32 %1358, %1362
  %1366 = add nsw i32 %1354, %1362
  store i32 %1366, i32* %85, align 4
  %1367 = zext i16 %1359 to i32
  store i32 %1367, i32* %68, align 4
  %1368 = icmp eq i8 %1361, 0
  br i1 %1368, label %1369, label %1370

1369:                                             ; preds = %1352
  store i32 16205, i32* %28, align 8
  br label %2365

1370:                                             ; preds = %1352
  %1371 = and i32 %1353, 32
  %1372 = icmp eq i32 %1371, 0
  br i1 %1372, label %1374, label %1373

1373:                                             ; preds = %1370
  store i32 -1, i32* %85, align 4
  store i32 16191, i32* %28, align 8
  br label %2365

1374:                                             ; preds = %1370
  %1375 = and i32 %1353, 64
  %1376 = icmp eq i32 %1375, 0
  br i1 %1376, label %1378, label %1377

1377:                                             ; preds = %1374
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.14, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

1378:                                             ; preds = %1374
  %1379 = and i32 %1353, 15
  store i32 %1379, i32* %86, align 4
  store i32 16201, i32* %28, align 8
  br label %1380

1380:                                             ; preds = %114, %1378
  %1381 = phi i32 [ %115, %114 ], [ %1379, %1378 ]
  %1382 = phi i8* [ %104, %114 ], [ %1355, %1378 ]
  %1383 = phi i32 [ %106, %114 ], [ %1356, %1378 ]
  %1384 = phi i64 [ %108, %114 ], [ %1364, %1378 ]
  %1385 = phi i32 [ %109, %114 ], [ %1365, %1378 ]
  %1386 = phi i32 [ %111, %114 ], [ %1222, %1378 ]
  %1387 = icmp eq i32 %1381, 0
  br i1 %1387, label %1388, label %1390

1388:                                             ; preds = %1380
  %1389 = load i32, i32* %68, align 4
  br label %1424

1390:                                             ; preds = %1380
  %1391 = icmp ult i32 %1385, %1381
  br i1 %1391, label %1392, label %1408

1392:                                             ; preds = %1390, %1398
  %1393 = phi i32 [ %1406, %1398 ], [ %1385, %1390 ]
  %1394 = phi i64 [ %1405, %1398 ], [ %1384, %1390 ]
  %1395 = phi i32 [ %1399, %1398 ], [ %1383, %1390 ]
  %1396 = phi i8* [ %1400, %1398 ], [ %1382, %1390 ]
  %1397 = icmp eq i32 %1395, 0
  br i1 %1397, label %2474, label %1398

1398:                                             ; preds = %1392
  %1399 = add i32 %1395, -1
  %1400 = getelementptr inbounds i8, i8* %1396, i64 1
  %1401 = load i8, i8* %1396, align 1
  %1402 = zext i8 %1401 to i64
  %1403 = zext i32 %1393 to i64
  %1404 = shl i64 %1402, %1403
  %1405 = add i64 %1404, %1394
  %1406 = add i32 %1393, 8
  %1407 = icmp ult i32 %1406, %1381
  br i1 %1407, label %1392, label %1408

1408:                                             ; preds = %1398, %1390
  %1409 = phi i8* [ %1382, %1390 ], [ %1400, %1398 ]
  %1410 = phi i32 [ %1383, %1390 ], [ %1399, %1398 ]
  %1411 = phi i64 [ %1384, %1390 ], [ %1405, %1398 ]
  %1412 = phi i32 [ %1385, %1390 ], [ %1406, %1398 ]
  %1413 = trunc i64 %1411 to i32
  %1414 = shl nsw i32 -1, %1381
  %1415 = xor i32 %1414, -1
  %1416 = and i32 %1413, %1415
  %1417 = load i32, i32* %68, align 4
  %1418 = add i32 %1417, %1416
  store i32 %1418, i32* %68, align 4
  %1419 = zext i32 %1381 to i64
  %1420 = lshr i64 %1411, %1419
  %1421 = sub i32 %1412, %1381
  %1422 = load i32, i32* %85, align 4
  %1423 = add i32 %1422, %1381
  store i32 %1423, i32* %85, align 4
  br label %1424

1424:                                             ; preds = %1388, %1408
  %1425 = phi i32 [ %1418, %1408 ], [ %1389, %1388 ]
  %1426 = phi i8* [ %1409, %1408 ], [ %1382, %1388 ]
  %1427 = phi i32 [ %1410, %1408 ], [ %1383, %1388 ]
  %1428 = phi i64 [ %1420, %1408 ], [ %1384, %1388 ]
  %1429 = phi i32 [ %1421, %1408 ], [ %1385, %1388 ]
  store i32 %1425, i32* %87, align 8
  store i32 16202, i32* %28, align 8
  br label %1430

1430:                                             ; preds = %102, %1424
  %1431 = phi i8* [ %104, %102 ], [ %1426, %1424 ]
  %1432 = phi i32 [ %106, %102 ], [ %1427, %1424 ]
  %1433 = phi i64 [ %108, %102 ], [ %1428, %1424 ]
  %1434 = phi i32 [ %109, %102 ], [ %1429, %1424 ]
  %1435 = phi i32 [ %111, %102 ], [ %1386, %1424 ]
  %1436 = load %struct.code*, %struct.code** %81, align 8
  %1437 = trunc i64 %1433 to i32
  %1438 = load i32, i32* %83, align 4
  %1439 = shl nsw i32 -1, %1438
  %1440 = xor i32 %1439, -1
  %1441 = and i32 %1440, %1437
  %1442 = zext i32 %1441 to i64
  %1443 = getelementptr inbounds %struct.code, %struct.code* %1436, i64 %1442, i32 1
  %1444 = load i8, i8* %1443, align 1
  %1445 = zext i8 %1444 to i32
  %1446 = icmp ult i32 %1434, %1445
  br i1 %1446, label %1447, label %1474

1447:                                             ; preds = %1430
  %1448 = zext i32 %1434 to i64
  br label %1449

1449:                                             ; preds = %1447, %1455
  %1450 = phi i64 [ %1448, %1447 ], [ %1462, %1455 ]
  %1451 = phi i64 [ %1433, %1447 ], [ %1461, %1455 ]
  %1452 = phi i32 [ %1432, %1447 ], [ %1456, %1455 ]
  %1453 = phi i8* [ %1431, %1447 ], [ %1457, %1455 ]
  %1454 = icmp eq i32 %1452, 0
  br i1 %1454, label %2441, label %1455

1455:                                             ; preds = %1449
  %1456 = add i32 %1452, -1
  %1457 = getelementptr inbounds i8, i8* %1453, i64 1
  %1458 = load i8, i8* %1453, align 1
  %1459 = zext i8 %1458 to i64
  %1460 = shl i64 %1459, %1450
  %1461 = add i64 %1460, %1451
  %1462 = add nuw nsw i64 %1450, 8
  %1463 = trunc i64 %1461 to i32
  %1464 = and i32 %1440, %1463
  %1465 = zext i32 %1464 to i64
  %1466 = getelementptr inbounds %struct.code, %struct.code* %1436, i64 %1465, i32 1
  %1467 = load i8, i8* %1466, align 1
  %1468 = zext i8 %1467 to i64
  %1469 = icmp ult i64 %1462, %1468
  br i1 %1469, label %1449, label %1470

1470:                                             ; preds = %1455
  %1471 = zext i32 %1464 to i64
  %1472 = zext i8 %1467 to i32
  %1473 = trunc i64 %1462 to i32
  br label %1474

1474:                                             ; preds = %1470, %1430
  %1475 = phi i8* [ %1457, %1470 ], [ %1431, %1430 ]
  %1476 = phi i32 [ %1456, %1470 ], [ %1432, %1430 ]
  %1477 = phi i64 [ %1461, %1470 ], [ %1433, %1430 ]
  %1478 = phi i32 [ %1473, %1470 ], [ %1434, %1430 ]
  %1479 = phi i64 [ %1471, %1470 ], [ %1442, %1430 ]
  %1480 = phi i8 [ %1467, %1470 ], [ %1444, %1430 ]
  %1481 = phi i32 [ %1472, %1470 ], [ %1445, %1430 ]
  %1482 = getelementptr inbounds %struct.code, %struct.code* %1436, i64 %1479, i32 2
  %1483 = getelementptr inbounds %struct.code, %struct.code* %1436, i64 %1479, i32 0
  %1484 = load i16, i16* %1482, align 2
  %1485 = load i8, i8* %1483, align 2
  %1486 = zext i8 %1485 to i32
  %1487 = and i32 %1486, 240
  %1488 = icmp eq i32 %1487, 0
  br i1 %1488, label %1491, label %1489

1489:                                             ; preds = %1474
  %1490 = load i32, i32* %85, align 4
  br label %1553

1491:                                             ; preds = %1474
  %1492 = zext i16 %1484 to i32
  %1493 = trunc i64 %1477 to i32
  %1494 = add nuw nsw i32 %1481, %1486
  %1495 = shl nsw i32 -1, %1494
  %1496 = xor i32 %1495, -1
  %1497 = and i32 %1493, %1496
  %1498 = lshr i32 %1497, %1481
  %1499 = add i32 %1498, %1492
  %1500 = zext i32 %1499 to i64
  %1501 = getelementptr inbounds %struct.code, %struct.code* %1436, i64 %1500, i32 1
  %1502 = load i8, i8* %1501, align 1
  %1503 = zext i8 %1502 to i32
  %1504 = add nuw nsw i32 %1481, %1503
  %1505 = icmp ugt i32 %1504, %1478
  br i1 %1505, label %1506, label %1536

1506:                                             ; preds = %1491
  %1507 = zext i32 %1478 to i64
  br label %1508

1508:                                             ; preds = %1506, %1514
  %1509 = phi i64 [ %1507, %1506 ], [ %1521, %1514 ]
  %1510 = phi i64 [ %1477, %1506 ], [ %1520, %1514 ]
  %1511 = phi i32 [ %1476, %1506 ], [ %1515, %1514 ]
  %1512 = phi i8* [ %1475, %1506 ], [ %1516, %1514 ]
  %1513 = icmp eq i32 %1511, 0
  br i1 %1513, label %2439, label %1514

1514:                                             ; preds = %1508
  %1515 = add i32 %1511, -1
  %1516 = getelementptr inbounds i8, i8* %1512, i64 1
  %1517 = load i8, i8* %1512, align 1
  %1518 = zext i8 %1517 to i64
  %1519 = shl i64 %1518, %1509
  %1520 = add i64 %1519, %1510
  %1521 = add nuw nsw i64 %1509, 8
  %1522 = trunc i64 %1520 to i32
  %1523 = and i32 %1522, %1496
  %1524 = lshr i32 %1523, %1481
  %1525 = add i32 %1524, %1492
  %1526 = zext i32 %1525 to i64
  %1527 = getelementptr inbounds %struct.code, %struct.code* %1436, i64 %1526, i32 1
  %1528 = load i8, i8* %1527, align 1
  %1529 = zext i8 %1528 to i32
  %1530 = add nuw nsw i32 %1481, %1529
  %1531 = zext i32 %1530 to i64
  %1532 = icmp ult i64 %1521, %1531
  br i1 %1532, label %1508, label %1533

1533:                                             ; preds = %1514
  %1534 = zext i32 %1525 to i64
  %1535 = trunc i64 %1521 to i32
  br label %1536

1536:                                             ; preds = %1533, %1491
  %1537 = phi i8* [ %1516, %1533 ], [ %1475, %1491 ]
  %1538 = phi i32 [ %1515, %1533 ], [ %1476, %1491 ]
  %1539 = phi i64 [ %1520, %1533 ], [ %1477, %1491 ]
  %1540 = phi i32 [ %1535, %1533 ], [ %1478, %1491 ]
  %1541 = phi i64 [ %1534, %1533 ], [ %1500, %1491 ]
  %1542 = phi i8 [ %1528, %1533 ], [ %1502, %1491 ]
  %1543 = getelementptr inbounds %struct.code, %struct.code* %1436, i64 %1541, i32 2
  %1544 = load i16, i16* %1543, align 2
  %1545 = getelementptr inbounds %struct.code, %struct.code* %1436, i64 %1541, i32 0
  %1546 = load i8, i8* %1545, align 2
  %1547 = zext i8 %1480 to i64
  %1548 = lshr i64 %1539, %1547
  %1549 = sub i32 %1540, %1481
  %1550 = load i32, i32* %85, align 4
  %1551 = add nsw i32 %1550, %1481
  store i32 %1551, i32* %85, align 4
  %1552 = zext i8 %1546 to i32
  br label %1553

1553:                                             ; preds = %1489, %1536
  %1554 = phi i32 [ %1486, %1489 ], [ %1552, %1536 ]
  %1555 = phi i32 [ %1490, %1489 ], [ %1551, %1536 ]
  %1556 = phi i8* [ %1475, %1489 ], [ %1537, %1536 ]
  %1557 = phi i32 [ %1476, %1489 ], [ %1538, %1536 ]
  %1558 = phi i64 [ %1477, %1489 ], [ %1548, %1536 ]
  %1559 = phi i32 [ %1478, %1489 ], [ %1549, %1536 ]
  %1560 = phi i16 [ %1484, %1489 ], [ %1544, %1536 ]
  %1561 = phi i8 [ %1480, %1489 ], [ %1542, %1536 ]
  %1562 = zext i8 %1561 to i32
  %1563 = zext i8 %1561 to i64
  %1564 = lshr i64 %1558, %1563
  %1565 = sub i32 %1559, %1562
  %1566 = add nsw i32 %1555, %1562
  store i32 %1566, i32* %85, align 4
  %1567 = and i32 %1554, 64
  %1568 = icmp eq i32 %1567, 0
  br i1 %1568, label %1570, label %1569

1569:                                             ; preds = %1553
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.15, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

1570:                                             ; preds = %1553
  %1571 = zext i16 %1560 to i32
  store i32 %1571, i32* %88, align 8
  %1572 = and i32 %1554, 15
  store i32 %1572, i32* %86, align 4
  store i32 16203, i32* %28, align 8
  br label %1573

1573:                                             ; preds = %112, %1570
  %1574 = phi i32 [ %113, %112 ], [ %1572, %1570 ]
  %1575 = phi i8* [ %104, %112 ], [ %1556, %1570 ]
  %1576 = phi i32 [ %106, %112 ], [ %1557, %1570 ]
  %1577 = phi i64 [ %108, %112 ], [ %1564, %1570 ]
  %1578 = phi i32 [ %109, %112 ], [ %1565, %1570 ]
  %1579 = phi i32 [ %111, %112 ], [ %1435, %1570 ]
  %1580 = icmp eq i32 %1574, 0
  br i1 %1580, label %1615, label %1581

1581:                                             ; preds = %1573
  %1582 = icmp ult i32 %1578, %1574
  br i1 %1582, label %1583, label %1599

1583:                                             ; preds = %1581, %1589
  %1584 = phi i32 [ %1597, %1589 ], [ %1578, %1581 ]
  %1585 = phi i64 [ %1596, %1589 ], [ %1577, %1581 ]
  %1586 = phi i32 [ %1590, %1589 ], [ %1576, %1581 ]
  %1587 = phi i8* [ %1591, %1589 ], [ %1575, %1581 ]
  %1588 = icmp eq i32 %1586, 0
  br i1 %1588, label %2474, label %1589

1589:                                             ; preds = %1583
  %1590 = add i32 %1586, -1
  %1591 = getelementptr inbounds i8, i8* %1587, i64 1
  %1592 = load i8, i8* %1587, align 1
  %1593 = zext i8 %1592 to i64
  %1594 = zext i32 %1584 to i64
  %1595 = shl i64 %1593, %1594
  %1596 = add i64 %1595, %1585
  %1597 = add i32 %1584, 8
  %1598 = icmp ult i32 %1597, %1574
  br i1 %1598, label %1583, label %1599

1599:                                             ; preds = %1589, %1581
  %1600 = phi i8* [ %1575, %1581 ], [ %1591, %1589 ]
  %1601 = phi i32 [ %1576, %1581 ], [ %1590, %1589 ]
  %1602 = phi i64 [ %1577, %1581 ], [ %1596, %1589 ]
  %1603 = phi i32 [ %1578, %1581 ], [ %1597, %1589 ]
  %1604 = trunc i64 %1602 to i32
  %1605 = shl nsw i32 -1, %1574
  %1606 = xor i32 %1605, -1
  %1607 = and i32 %1604, %1606
  %1608 = load i32, i32* %88, align 8
  %1609 = add i32 %1608, %1607
  store i32 %1609, i32* %88, align 8
  %1610 = zext i32 %1574 to i64
  %1611 = lshr i64 %1602, %1610
  %1612 = sub i32 %1603, %1574
  %1613 = load i32, i32* %85, align 4
  %1614 = add i32 %1613, %1574
  store i32 %1614, i32* %85, align 4
  br label %1615

1615:                                             ; preds = %1573, %1599
  %1616 = phi i8* [ %1600, %1599 ], [ %1575, %1573 ]
  %1617 = phi i32 [ %1601, %1599 ], [ %1576, %1573 ]
  %1618 = phi i64 [ %1611, %1599 ], [ %1577, %1573 ]
  %1619 = phi i32 [ %1612, %1599 ], [ %1578, %1573 ]
  store i32 16204, i32* %28, align 8
  br label %1620

1620:                                             ; preds = %102, %1615
  %1621 = phi i8* [ %104, %102 ], [ %1616, %1615 ]
  %1622 = phi i32 [ %106, %102 ], [ %1617, %1615 ]
  %1623 = phi i64 [ %108, %102 ], [ %1618, %1615 ]
  %1624 = phi i32 [ %109, %102 ], [ %1619, %1615 ]
  %1625 = phi i32 [ %111, %102 ], [ %1579, %1615 ]
  %1626 = icmp eq i32 %107, 0
  br i1 %1626, label %2483, label %1627

1627:                                             ; preds = %1620
  %1628 = sub i32 %110, %107
  %1629 = load i32, i32* %88, align 8
  %1630 = icmp ugt i32 %1629, %1628
  br i1 %1630, label %1631, label %1780

1631:                                             ; preds = %1627
  %1632 = sub i32 %1629, %1628
  %1633 = load i32, i32* %89, align 8
  %1634 = icmp ugt i32 %1632, %1633
  br i1 %1634, label %1635, label %1639

1635:                                             ; preds = %1631
  %1636 = load i32, i32* %90, align 8
  %1637 = icmp eq i32 %1636, 0
  br i1 %1637, label %1639, label %1638

1638:                                             ; preds = %1635
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.16, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

1639:                                             ; preds = %1635, %1631
  %1640 = load i32, i32* %91, align 4
  %1641 = icmp ugt i32 %1632, %1640
  br i1 %1641, label %1642, label %1646

1642:                                             ; preds = %1639
  %1643 = sub i32 %1632, %1640
  %1644 = load i32, i32* %93, align 4
  %1645 = sub i32 %1644, %1643
  br label %1648

1646:                                             ; preds = %1639
  %1647 = sub i32 %1640, %1632
  br label %1648

1648:                                             ; preds = %1646, %1642
  %1649 = phi i32 [ %1647, %1646 ], [ %1645, %1642 ]
  %1650 = phi i32 [ %1632, %1646 ], [ %1643, %1642 ]
  %1651 = load i8*, i8** %92, align 8
  %1652 = zext i32 %1649 to i64
  %1653 = getelementptr inbounds i8, i8* %1651, i64 %1652
  %1654 = load i32, i32* %68, align 4
  %1655 = icmp ugt i32 %1650, %1654
  %1656 = select i1 %1655, i32 %1654, i32 %1650
  %1657 = icmp ugt i32 %1656, %107
  %1658 = select i1 %1657, i32 %107, i32 %1656
  %1659 = icmp ult i32 %107, 16
  br i1 %1659, label %1660, label %1699

1660:                                             ; preds = %1648
  %1661 = and i32 %1658, 8
  %1662 = icmp eq i32 %1661, 0
  br i1 %1662, label %1669, label %1663

1663:                                             ; preds = %1660
  %1664 = bitcast i8* %1653 to i64*
  %1665 = bitcast i8* %105 to i64*
  %1666 = load i64, i64* %1664, align 1, !alias.scope !5
  store i64 %1666, i64* %1665, align 1, !noalias !5
  %1667 = getelementptr inbounds i8, i8* %105, i64 8
  %1668 = getelementptr inbounds i8, i8* %1653, i64 8
  br label %1669

1669:                                             ; preds = %1663, %1660
  %1670 = phi i8* [ %1667, %1663 ], [ %105, %1660 ]
  %1671 = phi i8* [ %1668, %1663 ], [ %1653, %1660 ]
  %1672 = and i32 %1658, 4
  %1673 = icmp eq i32 %1672, 0
  br i1 %1673, label %1680, label %1674

1674:                                             ; preds = %1669
  %1675 = bitcast i8* %1671 to i32*
  %1676 = bitcast i8* %1670 to i32*
  %1677 = load i32, i32* %1675, align 1, !alias.scope !5
  store i32 %1677, i32* %1676, align 1, !noalias !5
  %1678 = getelementptr inbounds i8, i8* %1670, i64 4
  %1679 = getelementptr inbounds i8, i8* %1671, i64 4
  br label %1680

1680:                                             ; preds = %1674, %1669
  %1681 = phi i8* [ %1678, %1674 ], [ %1670, %1669 ]
  %1682 = phi i8* [ %1679, %1674 ], [ %1671, %1669 ]
  %1683 = and i32 %1658, 2
  %1684 = icmp eq i32 %1683, 0
  br i1 %1684, label %1691, label %1685

1685:                                             ; preds = %1680
  %1686 = bitcast i8* %1682 to i16*
  %1687 = bitcast i8* %1681 to i16*
  %1688 = load i16, i16* %1686, align 1, !alias.scope !5
  store i16 %1688, i16* %1687, align 1, !noalias !5
  %1689 = getelementptr inbounds i8, i8* %1681, i64 2
  %1690 = getelementptr inbounds i8, i8* %1682, i64 2
  br label %1691

1691:                                             ; preds = %1685, %1680
  %1692 = phi i8* [ %1689, %1685 ], [ %1681, %1680 ]
  %1693 = phi i8* [ %1690, %1685 ], [ %1682, %1680 ]
  %1694 = and i32 %1658, 1
  %1695 = icmp eq i32 %1694, 0
  br i1 %1695, label %2221, label %1696

1696:                                             ; preds = %1691
  %1697 = load i8, i8* %1693, align 1, !alias.scope !5
  %1698 = getelementptr inbounds i8, i8* %1692, i64 1
  store i8 %1697, i8* %1692, align 1, !noalias !5
  br label %2221

1699:                                             ; preds = %1648
  %1700 = add i32 %1658, -1
  %1701 = and i32 %1700, 15
  %1702 = add nuw nsw i32 %1701, 1
  %1703 = bitcast i8* %1653 to <2 x i64>*
  %1704 = load <2 x i64>, <2 x i64>* %1703, align 1, !alias.scope !5
  %1705 = bitcast i8* %105 to <2 x i64>*
  store <2 x i64> %1704, <2 x i64>* %1705, align 1, !noalias !5
  %1706 = zext i32 %1702 to i64
  %1707 = getelementptr inbounds i8, i8* %105, i64 %1706
  %1708 = lshr i32 %1700, 4
  %1709 = icmp eq i32 %1708, 0
  br i1 %1709, label %2221, label %1710

1710:                                             ; preds = %1699
  %1711 = getelementptr inbounds i8, i8* %1653, i64 %1706
  %1712 = add nsw i32 %1708, -1
  %1713 = and i32 %1708, 7
  %1714 = icmp eq i32 %1713, 0
  br i1 %1714, label %1728, label %1715

1715:                                             ; preds = %1710, %1715
  %1716 = phi i8* [ %1724, %1715 ], [ %1707, %1710 ]
  %1717 = phi i32 [ %1720, %1715 ], [ %1708, %1710 ]
  %1718 = phi i8* [ %1725, %1715 ], [ %1711, %1710 ]
  %1719 = phi i32 [ %1726, %1715 ], [ %1713, %1710 ]
  %1720 = add nsw i32 %1717, -1
  %1721 = bitcast i8* %1718 to <2 x i64>*
  %1722 = load <2 x i64>, <2 x i64>* %1721, align 1, !alias.scope !5
  %1723 = bitcast i8* %1716 to <2 x i64>*
  store <2 x i64> %1722, <2 x i64>* %1723, align 1, !noalias !5
  %1724 = getelementptr inbounds i8, i8* %1716, i64 16
  %1725 = getelementptr inbounds i8, i8* %1718, i64 16
  %1726 = add i32 %1719, -1
  %1727 = icmp eq i32 %1726, 0
  br i1 %1727, label %1728, label %1715, !llvm.loop !8

1728:                                             ; preds = %1715, %1710
  %1729 = phi i8* [ undef, %1710 ], [ %1724, %1715 ]
  %1730 = phi i8* [ %1707, %1710 ], [ %1724, %1715 ]
  %1731 = phi i32 [ %1708, %1710 ], [ %1720, %1715 ]
  %1732 = phi i8* [ %1711, %1710 ], [ %1725, %1715 ]
  %1733 = icmp ult i32 %1712, 7
  br i1 %1733, label %2221, label %1734

1734:                                             ; preds = %1728, %1734
  %1735 = phi i8* [ %1777, %1734 ], [ %1730, %1728 ]
  %1736 = phi i32 [ %1773, %1734 ], [ %1731, %1728 ]
  %1737 = phi i8* [ %1778, %1734 ], [ %1732, %1728 ]
  %1738 = bitcast i8* %1737 to <2 x i64>*
  %1739 = load <2 x i64>, <2 x i64>* %1738, align 1, !alias.scope !5
  %1740 = bitcast i8* %1735 to <2 x i64>*
  store <2 x i64> %1739, <2 x i64>* %1740, align 1, !noalias !5
  %1741 = getelementptr inbounds i8, i8* %1735, i64 16
  %1742 = getelementptr inbounds i8, i8* %1737, i64 16
  %1743 = bitcast i8* %1742 to <2 x i64>*
  %1744 = load <2 x i64>, <2 x i64>* %1743, align 1, !alias.scope !5
  %1745 = bitcast i8* %1741 to <2 x i64>*
  store <2 x i64> %1744, <2 x i64>* %1745, align 1, !noalias !5
  %1746 = getelementptr inbounds i8, i8* %1735, i64 32
  %1747 = getelementptr inbounds i8, i8* %1737, i64 32
  %1748 = bitcast i8* %1747 to <2 x i64>*
  %1749 = load <2 x i64>, <2 x i64>* %1748, align 1, !alias.scope !5
  %1750 = bitcast i8* %1746 to <2 x i64>*
  store <2 x i64> %1749, <2 x i64>* %1750, align 1, !noalias !5
  %1751 = getelementptr inbounds i8, i8* %1735, i64 48
  %1752 = getelementptr inbounds i8, i8* %1737, i64 48
  %1753 = bitcast i8* %1752 to <2 x i64>*
  %1754 = load <2 x i64>, <2 x i64>* %1753, align 1, !alias.scope !5
  %1755 = bitcast i8* %1751 to <2 x i64>*
  store <2 x i64> %1754, <2 x i64>* %1755, align 1, !noalias !5
  %1756 = getelementptr inbounds i8, i8* %1735, i64 64
  %1757 = getelementptr inbounds i8, i8* %1737, i64 64
  %1758 = bitcast i8* %1757 to <2 x i64>*
  %1759 = load <2 x i64>, <2 x i64>* %1758, align 1, !alias.scope !5
  %1760 = bitcast i8* %1756 to <2 x i64>*
  store <2 x i64> %1759, <2 x i64>* %1760, align 1, !noalias !5
  %1761 = getelementptr inbounds i8, i8* %1735, i64 80
  %1762 = getelementptr inbounds i8, i8* %1737, i64 80
  %1763 = bitcast i8* %1762 to <2 x i64>*
  %1764 = load <2 x i64>, <2 x i64>* %1763, align 1, !alias.scope !5
  %1765 = bitcast i8* %1761 to <2 x i64>*
  store <2 x i64> %1764, <2 x i64>* %1765, align 1, !noalias !5
  %1766 = getelementptr inbounds i8, i8* %1735, i64 96
  %1767 = getelementptr inbounds i8, i8* %1737, i64 96
  %1768 = bitcast i8* %1767 to <2 x i64>*
  %1769 = load <2 x i64>, <2 x i64>* %1768, align 1, !alias.scope !5
  %1770 = bitcast i8* %1766 to <2 x i64>*
  store <2 x i64> %1769, <2 x i64>* %1770, align 1, !noalias !5
  %1771 = getelementptr inbounds i8, i8* %1735, i64 112
  %1772 = getelementptr inbounds i8, i8* %1737, i64 112
  %1773 = add nsw i32 %1736, -8
  %1774 = bitcast i8* %1772 to <2 x i64>*
  %1775 = load <2 x i64>, <2 x i64>* %1774, align 1, !alias.scope !5
  %1776 = bitcast i8* %1771 to <2 x i64>*
  store <2 x i64> %1775, <2 x i64>* %1776, align 1, !noalias !5
  %1777 = getelementptr inbounds i8, i8* %1735, i64 128
  %1778 = getelementptr inbounds i8, i8* %1737, i64 128
  %1779 = icmp eq i32 %1773, 0
  br i1 %1779, label %2221, label %1734

1780:                                             ; preds = %1627
  %1781 = load i32, i32* %68, align 4
  %1782 = icmp ugt i32 %1781, %107
  %1783 = select i1 %1782, i32 %107, i32 %1781
  %1784 = icmp ult i32 %107, 48
  br i1 %1784, label %1785, label %1938

1785:                                             ; preds = %1780
  %1786 = icmp eq i32 %1783, 0
  br i1 %1786, label %2221, label %1787

1787:                                             ; preds = %1785
  %1788 = zext i32 %1629 to i64
  %1789 = sub nsw i64 0, %1788
  %1790 = add i32 %1783, -1
  %1791 = zext i32 %1790 to i64
  %1792 = add nuw nsw i64 %1791, 1
  %1793 = icmp ult i64 %1792, 32
  br i1 %1793, label %1888, label %1794

1794:                                             ; preds = %1787
  %1795 = getelementptr i8, i8* %105, i64 1
  %1796 = add i32 %1783, -1
  %1797 = zext i32 %1796 to i64
  %1798 = getelementptr i8, i8* %1795, i64 %1797
  %1799 = getelementptr i8, i8* %105, i64 %1789
  %1800 = getelementptr i8, i8* %105, i64 1
  %1801 = sub nsw i64 %1797, %1788
  %1802 = getelementptr i8, i8* %1800, i64 %1801
  %1803 = icmp ult i8* %105, %1802
  %1804 = icmp ult i8* %1799, %1798
  %1805 = and i1 %1803, %1804
  br i1 %1805, label %1888, label %1806

1806:                                             ; preds = %1794
  %1807 = and i64 %1792, 8589934560
  %1808 = trunc i64 %1807 to i32
  %1809 = sub i32 %1783, %1808
  %1810 = getelementptr i8, i8* %105, i64 %1807
  %1811 = add nsw i64 %1807, -32
  %1812 = lshr exact i64 %1811, 5
  %1813 = add nuw nsw i64 %1812, 1
  %1814 = and i64 %1813, 3
  %1815 = icmp ult i64 %1811, 96
  br i1 %1815, label %1867, label %1816

1816:                                             ; preds = %1806
  %1817 = sub nsw i64 %1813, %1814
  br label %1818

1818:                                             ; preds = %1818, %1816
  %1819 = phi i64 [ 0, %1816 ], [ %1864, %1818 ]
  %1820 = phi i64 [ %1817, %1816 ], [ %1865, %1818 ]
  %1821 = getelementptr i8, i8* %105, i64 %1819
  %1822 = getelementptr inbounds i8, i8* %1821, i64 %1789
  %1823 = bitcast i8* %1822 to <16 x i8>*
  %1824 = load <16 x i8>, <16 x i8>* %1823, align 1, !alias.scope !9
  %1825 = getelementptr inbounds i8, i8* %1822, i64 16
  %1826 = bitcast i8* %1825 to <16 x i8>*
  %1827 = load <16 x i8>, <16 x i8>* %1826, align 1, !alias.scope !9
  %1828 = bitcast i8* %1821 to <16 x i8>*
  store <16 x i8> %1824, <16 x i8>* %1828, align 1, !alias.scope !12, !noalias !9
  %1829 = getelementptr i8, i8* %1821, i64 16
  %1830 = bitcast i8* %1829 to <16 x i8>*
  store <16 x i8> %1827, <16 x i8>* %1830, align 1, !alias.scope !12, !noalias !9
  %1831 = or i64 %1819, 32
  %1832 = getelementptr i8, i8* %105, i64 %1831
  %1833 = getelementptr inbounds i8, i8* %1832, i64 %1789
  %1834 = bitcast i8* %1833 to <16 x i8>*
  %1835 = load <16 x i8>, <16 x i8>* %1834, align 1, !alias.scope !9
  %1836 = getelementptr inbounds i8, i8* %1833, i64 16
  %1837 = bitcast i8* %1836 to <16 x i8>*
  %1838 = load <16 x i8>, <16 x i8>* %1837, align 1, !alias.scope !9
  %1839 = bitcast i8* %1832 to <16 x i8>*
  store <16 x i8> %1835, <16 x i8>* %1839, align 1, !alias.scope !12, !noalias !9
  %1840 = getelementptr i8, i8* %1832, i64 16
  %1841 = bitcast i8* %1840 to <16 x i8>*
  store <16 x i8> %1838, <16 x i8>* %1841, align 1, !alias.scope !12, !noalias !9
  %1842 = or i64 %1819, 64
  %1843 = getelementptr i8, i8* %105, i64 %1842
  %1844 = getelementptr inbounds i8, i8* %1843, i64 %1789
  %1845 = bitcast i8* %1844 to <16 x i8>*
  %1846 = load <16 x i8>, <16 x i8>* %1845, align 1, !alias.scope !9
  %1847 = getelementptr inbounds i8, i8* %1844, i64 16
  %1848 = bitcast i8* %1847 to <16 x i8>*
  %1849 = load <16 x i8>, <16 x i8>* %1848, align 1, !alias.scope !9
  %1850 = bitcast i8* %1843 to <16 x i8>*
  store <16 x i8> %1846, <16 x i8>* %1850, align 1, !alias.scope !12, !noalias !9
  %1851 = getelementptr i8, i8* %1843, i64 16
  %1852 = bitcast i8* %1851 to <16 x i8>*
  store <16 x i8> %1849, <16 x i8>* %1852, align 1, !alias.scope !12, !noalias !9
  %1853 = or i64 %1819, 96
  %1854 = getelementptr i8, i8* %105, i64 %1853
  %1855 = getelementptr inbounds i8, i8* %1854, i64 %1789
  %1856 = bitcast i8* %1855 to <16 x i8>*
  %1857 = load <16 x i8>, <16 x i8>* %1856, align 1, !alias.scope !9
  %1858 = getelementptr inbounds i8, i8* %1855, i64 16
  %1859 = bitcast i8* %1858 to <16 x i8>*
  %1860 = load <16 x i8>, <16 x i8>* %1859, align 1, !alias.scope !9
  %1861 = bitcast i8* %1854 to <16 x i8>*
  store <16 x i8> %1857, <16 x i8>* %1861, align 1, !alias.scope !12, !noalias !9
  %1862 = getelementptr i8, i8* %1854, i64 16
  %1863 = bitcast i8* %1862 to <16 x i8>*
  store <16 x i8> %1860, <16 x i8>* %1863, align 1, !alias.scope !12, !noalias !9
  %1864 = add i64 %1819, 128
  %1865 = add i64 %1820, -4
  %1866 = icmp eq i64 %1865, 0
  br i1 %1866, label %1867, label %1818, !llvm.loop !14

1867:                                             ; preds = %1818, %1806
  %1868 = phi i64 [ 0, %1806 ], [ %1864, %1818 ]
  %1869 = icmp eq i64 %1814, 0
  br i1 %1869, label %1886, label %1870

1870:                                             ; preds = %1867, %1870
  %1871 = phi i64 [ %1883, %1870 ], [ %1868, %1867 ]
  %1872 = phi i64 [ %1884, %1870 ], [ %1814, %1867 ]
  %1873 = getelementptr i8, i8* %105, i64 %1871
  %1874 = getelementptr inbounds i8, i8* %1873, i64 %1789
  %1875 = bitcast i8* %1874 to <16 x i8>*
  %1876 = load <16 x i8>, <16 x i8>* %1875, align 1, !alias.scope !9
  %1877 = getelementptr inbounds i8, i8* %1874, i64 16
  %1878 = bitcast i8* %1877 to <16 x i8>*
  %1879 = load <16 x i8>, <16 x i8>* %1878, align 1, !alias.scope !9
  %1880 = bitcast i8* %1873 to <16 x i8>*
  store <16 x i8> %1876, <16 x i8>* %1880, align 1, !alias.scope !12, !noalias !9
  %1881 = getelementptr i8, i8* %1873, i64 16
  %1882 = bitcast i8* %1881 to <16 x i8>*
  store <16 x i8> %1879, <16 x i8>* %1882, align 1, !alias.scope !12, !noalias !9
  %1883 = add i64 %1871, 32
  %1884 = add i64 %1872, -1
  %1885 = icmp eq i64 %1884, 0
  br i1 %1885, label %1886, label %1870, !llvm.loop !16

1886:                                             ; preds = %1870, %1867
  %1887 = icmp eq i64 %1792, %1807
  br i1 %1887, label %2221, label %1888

1888:                                             ; preds = %1886, %1794, %1787
  %1889 = phi i32 [ %1783, %1794 ], [ %1783, %1787 ], [ %1809, %1886 ]
  %1890 = phi i8* [ %105, %1794 ], [ %105, %1787 ], [ %1810, %1886 ]
  %1891 = add i32 %1889, -1
  %1892 = and i32 %1889, 7
  %1893 = icmp eq i32 %1892, 0
  br i1 %1893, label %1904, label %1894

1894:                                             ; preds = %1888, %1894
  %1895 = phi i32 [ %1898, %1894 ], [ %1889, %1888 ]
  %1896 = phi i8* [ %1901, %1894 ], [ %1890, %1888 ]
  %1897 = phi i32 [ %1902, %1894 ], [ %1892, %1888 ]
  %1898 = add i32 %1895, -1
  %1899 = getelementptr inbounds i8, i8* %1896, i64 %1789
  %1900 = load i8, i8* %1899, align 1
  store i8 %1900, i8* %1896, align 1
  %1901 = getelementptr inbounds i8, i8* %1896, i64 1
  %1902 = add i32 %1897, -1
  %1903 = icmp eq i32 %1902, 0
  br i1 %1903, label %1904, label %1894, !llvm.loop !17

1904:                                             ; preds = %1894, %1888
  %1905 = phi i8* [ undef, %1888 ], [ %1901, %1894 ]
  %1906 = phi i32 [ %1889, %1888 ], [ %1898, %1894 ]
  %1907 = phi i8* [ %1890, %1888 ], [ %1901, %1894 ]
  %1908 = icmp ult i32 %1891, 7
  br i1 %1908, label %2221, label %1909

1909:                                             ; preds = %1904, %1909
  %1910 = phi i32 [ %1933, %1909 ], [ %1906, %1904 ]
  %1911 = phi i8* [ %1936, %1909 ], [ %1907, %1904 ]
  %1912 = getelementptr inbounds i8, i8* %1911, i64 %1789
  %1913 = load i8, i8* %1912, align 1
  store i8 %1913, i8* %1911, align 1
  %1914 = getelementptr inbounds i8, i8* %1911, i64 1
  %1915 = getelementptr inbounds i8, i8* %1914, i64 %1789
  %1916 = load i8, i8* %1915, align 1
  store i8 %1916, i8* %1914, align 1
  %1917 = getelementptr inbounds i8, i8* %1911, i64 2
  %1918 = getelementptr inbounds i8, i8* %1917, i64 %1789
  %1919 = load i8, i8* %1918, align 1
  store i8 %1919, i8* %1917, align 1
  %1920 = getelementptr inbounds i8, i8* %1911, i64 3
  %1921 = getelementptr inbounds i8, i8* %1920, i64 %1789
  %1922 = load i8, i8* %1921, align 1
  store i8 %1922, i8* %1920, align 1
  %1923 = getelementptr inbounds i8, i8* %1911, i64 4
  %1924 = getelementptr inbounds i8, i8* %1923, i64 %1789
  %1925 = load i8, i8* %1924, align 1
  store i8 %1925, i8* %1923, align 1
  %1926 = getelementptr inbounds i8, i8* %1911, i64 5
  %1927 = getelementptr inbounds i8, i8* %1926, i64 %1789
  %1928 = load i8, i8* %1927, align 1
  store i8 %1928, i8* %1926, align 1
  %1929 = getelementptr inbounds i8, i8* %1911, i64 6
  %1930 = getelementptr inbounds i8, i8* %1929, i64 %1789
  %1931 = load i8, i8* %1930, align 1
  store i8 %1931, i8* %1929, align 1
  %1932 = getelementptr inbounds i8, i8* %1911, i64 7
  %1933 = add i32 %1910, -8
  %1934 = getelementptr inbounds i8, i8* %1932, i64 %1789
  %1935 = load i8, i8* %1934, align 1
  store i8 %1935, i8* %1932, align 1
  %1936 = getelementptr inbounds i8, i8* %1911, i64 8
  %1937 = icmp eq i32 %1933, 0
  br i1 %1937, label %2221, label %1909, !llvm.loop !18

1938:                                             ; preds = %1780
  %1939 = icmp ult i32 %1629, %1783
  %1940 = icmp ult i32 %1629, 16
  %1941 = and i1 %1940, %1939
  br i1 %1941, label %1942, label %2137

1942:                                             ; preds = %1938
  %1943 = add i32 %1783, 15
  %1944 = and i32 %1943, 15
  %1945 = add nuw nsw i32 %1944, 1
  switch i32 %1629, label %2035 [
    i32 1, label %1946
    i32 2, label %1963
    i32 4, label %1987
    i32 8, label %2011
  ]

1946:                                             ; preds = %1942
  %1947 = getelementptr inbounds i8, i8* %105, i64 -1
  %1948 = load i8, i8* %1947, align 1
  %1949 = insertelement <16 x i8> undef, i8 %1948, i32 0
  %1950 = shufflevector <16 x i8> %1949, <16 x i8> undef, <16 x i32> zeroinitializer
  %1951 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> %1950, <16 x i8>* %1951, align 1
  %1952 = zext i32 %1945 to i64
  %1953 = getelementptr inbounds i8, i8* %105, i64 %1952
  %1954 = sub i32 %1783, %1945
  %1955 = icmp eq i32 %1954, 0
  br i1 %1955, label %2221, label %1956

1956:                                             ; preds = %1946, %1956
  %1957 = phi i8* [ %1960, %1956 ], [ %1953, %1946 ]
  %1958 = phi i32 [ %1961, %1956 ], [ %1954, %1946 ]
  %1959 = bitcast i8* %1957 to <16 x i8>*
  store <16 x i8> %1950, <16 x i8>* %1959, align 1
  %1960 = getelementptr inbounds i8, i8* %1957, i64 16
  %1961 = add i32 %1958, -16
  %1962 = icmp eq i32 %1961, 0
  br i1 %1962, label %2221, label %1956

1963:                                             ; preds = %1942
  %1964 = getelementptr inbounds i8, i8* %105, i64 -2
  %1965 = bitcast i8* %1964 to i16*
  %1966 = load i16, i16* %1965, align 1
  %1967 = insertelement <8 x i16> undef, i16 %1966, i32 0
  %1968 = shufflevector <8 x i16> %1967, <8 x i16> undef, <8 x i32> zeroinitializer
  %1969 = bitcast i8* %105 to <8 x i16>*
  store <8 x i16> %1968, <8 x i16>* %1969, align 1
  %1970 = zext i32 %1945 to i64
  %1971 = getelementptr inbounds i8, i8* %105, i64 %1970
  %1972 = sub i32 %1783, %1945
  %1973 = icmp eq i32 %1972, 0
  br i1 %1973, label %2221, label %1974

1974:                                             ; preds = %1963
  %1975 = getelementptr inbounds i8, i8* %1971, i64 -2
  %1976 = bitcast i8* %1975 to i16*
  %1977 = load i16, i16* %1976, align 1
  %1978 = insertelement <8 x i16> undef, i16 %1977, i32 0
  %1979 = shufflevector <8 x i16> %1978, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %1980

1980:                                             ; preds = %1980, %1974
  %1981 = phi i32 [ %1972, %1974 ], [ %1985, %1980 ]
  %1982 = phi i8* [ %1971, %1974 ], [ %1984, %1980 ]
  %1983 = bitcast i8* %1982 to <8 x i16>*
  store <8 x i16> %1979, <8 x i16>* %1983, align 1
  %1984 = getelementptr inbounds i8, i8* %1982, i64 16
  %1985 = add i32 %1981, -16
  %1986 = icmp eq i32 %1985, 0
  br i1 %1986, label %2221, label %1980

1987:                                             ; preds = %1942
  %1988 = getelementptr inbounds i8, i8* %105, i64 -4
  %1989 = bitcast i8* %1988 to i32*
  %1990 = load i32, i32* %1989, align 1
  %1991 = insertelement <4 x i32> undef, i32 %1990, i32 0
  %1992 = shufflevector <4 x i32> %1991, <4 x i32> undef, <4 x i32> zeroinitializer
  %1993 = bitcast i8* %105 to <4 x i32>*
  store <4 x i32> %1992, <4 x i32>* %1993, align 1
  %1994 = zext i32 %1945 to i64
  %1995 = getelementptr inbounds i8, i8* %105, i64 %1994
  %1996 = sub i32 %1783, %1945
  %1997 = icmp eq i32 %1996, 0
  br i1 %1997, label %2221, label %1998

1998:                                             ; preds = %1987
  %1999 = getelementptr inbounds i8, i8* %1995, i64 -4
  %2000 = bitcast i8* %1999 to i32*
  %2001 = load i32, i32* %2000, align 1
  %2002 = insertelement <4 x i32> undef, i32 %2001, i32 0
  %2003 = shufflevector <4 x i32> %2002, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %2004

2004:                                             ; preds = %2004, %1998
  %2005 = phi i32 [ %1996, %1998 ], [ %2009, %2004 ]
  %2006 = phi i8* [ %1995, %1998 ], [ %2008, %2004 ]
  %2007 = bitcast i8* %2006 to <4 x i32>*
  store <4 x i32> %2003, <4 x i32>* %2007, align 1
  %2008 = getelementptr inbounds i8, i8* %2006, i64 16
  %2009 = add i32 %2005, -16
  %2010 = icmp eq i32 %2009, 0
  br i1 %2010, label %2221, label %2004

2011:                                             ; preds = %1942
  %2012 = getelementptr inbounds i8, i8* %105, i64 -8
  %2013 = bitcast i8* %2012 to i64*
  %2014 = load i64, i64* %2013, align 1
  %2015 = insertelement <2 x i64> undef, i64 %2014, i32 0
  %2016 = shufflevector <2 x i64> %2015, <2 x i64> undef, <2 x i32> zeroinitializer
  %2017 = bitcast i8* %105 to <2 x i64>*
  store <2 x i64> %2016, <2 x i64>* %2017, align 1
  %2018 = zext i32 %1945 to i64
  %2019 = getelementptr inbounds i8, i8* %105, i64 %2018
  %2020 = sub i32 %1783, %1945
  %2021 = icmp eq i32 %2020, 0
  br i1 %2021, label %2221, label %2022

2022:                                             ; preds = %2011
  %2023 = getelementptr inbounds i8, i8* %2019, i64 -8
  %2024 = bitcast i8* %2023 to i64*
  %2025 = load i64, i64* %2024, align 1
  %2026 = insertelement <2 x i64> undef, i64 %2025, i32 0
  %2027 = shufflevector <2 x i64> %2026, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %2028

2028:                                             ; preds = %2028, %2022
  %2029 = phi i32 [ %2020, %2022 ], [ %2033, %2028 ]
  %2030 = phi i8* [ %2019, %2022 ], [ %2032, %2028 ]
  %2031 = bitcast i8* %2030 to <2 x i64>*
  store <2 x i64> %2027, <2 x i64>* %2031, align 1
  %2032 = getelementptr inbounds i8, i8* %2030, i64 16
  %2033 = add i32 %2029, -16
  %2034 = icmp eq i32 %2033, 0
  br i1 %2034, label %2221, label %2028

2035:                                             ; preds = %1942
  %2036 = zext i32 %1629 to i64
  %2037 = sub nsw i64 0, %2036
  %2038 = getelementptr inbounds i8, i8* %105, i64 %2037
  %2039 = bitcast i8* %2038 to <2 x i64>*
  br label %2040

2040:                                             ; preds = %2040, %2035
  %2041 = phi i32 [ %1629, %2035 ], [ %2049, %2040 ]
  %2042 = phi i32 [ %1783, %2035 ], [ %2048, %2040 ]
  %2043 = phi i8* [ %105, %2035 ], [ %2047, %2040 ]
  %2044 = load <2 x i64>, <2 x i64>* %2039, align 1
  %2045 = bitcast i8* %2043 to <2 x i64>*
  store <2 x i64> %2044, <2 x i64>* %2045, align 1
  %2046 = zext i32 %2041 to i64
  %2047 = getelementptr inbounds i8, i8* %2043, i64 %2046
  %2048 = sub i32 %2042, %2041
  %2049 = shl i32 %2041, 1
  %2050 = icmp ult i32 %2049, %2048
  %2051 = icmp ult i32 %2049, 16
  %2052 = and i1 %2051, %2050
  br i1 %2052, label %2040, label %2053

2053:                                             ; preds = %2040
  %2054 = zext i32 %2049 to i64
  %2055 = sub nsw i64 0, %2054
  %2056 = getelementptr inbounds i8, i8* %2047, i64 %2055
  %2057 = add i32 %2048, -1
  %2058 = and i32 %2057, 15
  %2059 = add nuw nsw i32 %2058, 1
  %2060 = bitcast i8* %2056 to <2 x i64>*
  %2061 = load <2 x i64>, <2 x i64>* %2060, align 1
  %2062 = bitcast i8* %2047 to <2 x i64>*
  store <2 x i64> %2061, <2 x i64>* %2062, align 1
  %2063 = zext i32 %2059 to i64
  %2064 = getelementptr inbounds i8, i8* %2047, i64 %2063
  %2065 = lshr i32 %2057, 4
  %2066 = icmp eq i32 %2065, 0
  br i1 %2066, label %2221, label %2067

2067:                                             ; preds = %2053
  %2068 = getelementptr inbounds i8, i8* %2056, i64 %2063
  %2069 = add nsw i32 %2065, -1
  %2070 = and i32 %2065, 7
  %2071 = icmp eq i32 %2070, 0
  br i1 %2071, label %2085, label %2072

2072:                                             ; preds = %2067, %2072
  %2073 = phi i8* [ %2081, %2072 ], [ %2064, %2067 ]
  %2074 = phi i32 [ %2077, %2072 ], [ %2065, %2067 ]
  %2075 = phi i8* [ %2082, %2072 ], [ %2068, %2067 ]
  %2076 = phi i32 [ %2083, %2072 ], [ %2070, %2067 ]
  %2077 = add nsw i32 %2074, -1
  %2078 = bitcast i8* %2075 to <2 x i64>*
  %2079 = load <2 x i64>, <2 x i64>* %2078, align 1
  %2080 = bitcast i8* %2073 to <2 x i64>*
  store <2 x i64> %2079, <2 x i64>* %2080, align 1
  %2081 = getelementptr inbounds i8, i8* %2073, i64 16
  %2082 = getelementptr inbounds i8, i8* %2075, i64 16
  %2083 = add i32 %2076, -1
  %2084 = icmp eq i32 %2083, 0
  br i1 %2084, label %2085, label %2072, !llvm.loop !19

2085:                                             ; preds = %2072, %2067
  %2086 = phi i8* [ undef, %2067 ], [ %2081, %2072 ]
  %2087 = phi i8* [ %2064, %2067 ], [ %2081, %2072 ]
  %2088 = phi i32 [ %2065, %2067 ], [ %2077, %2072 ]
  %2089 = phi i8* [ %2068, %2067 ], [ %2082, %2072 ]
  %2090 = icmp ult i32 %2069, 7
  br i1 %2090, label %2221, label %2091

2091:                                             ; preds = %2085, %2091
  %2092 = phi i8* [ %2134, %2091 ], [ %2087, %2085 ]
  %2093 = phi i32 [ %2130, %2091 ], [ %2088, %2085 ]
  %2094 = phi i8* [ %2135, %2091 ], [ %2089, %2085 ]
  %2095 = bitcast i8* %2094 to <2 x i64>*
  %2096 = load <2 x i64>, <2 x i64>* %2095, align 1
  %2097 = bitcast i8* %2092 to <2 x i64>*
  store <2 x i64> %2096, <2 x i64>* %2097, align 1
  %2098 = getelementptr inbounds i8, i8* %2092, i64 16
  %2099 = getelementptr inbounds i8, i8* %2094, i64 16
  %2100 = bitcast i8* %2099 to <2 x i64>*
  %2101 = load <2 x i64>, <2 x i64>* %2100, align 1
  %2102 = bitcast i8* %2098 to <2 x i64>*
  store <2 x i64> %2101, <2 x i64>* %2102, align 1
  %2103 = getelementptr inbounds i8, i8* %2092, i64 32
  %2104 = getelementptr inbounds i8, i8* %2094, i64 32
  %2105 = bitcast i8* %2104 to <2 x i64>*
  %2106 = load <2 x i64>, <2 x i64>* %2105, align 1
  %2107 = bitcast i8* %2103 to <2 x i64>*
  store <2 x i64> %2106, <2 x i64>* %2107, align 1
  %2108 = getelementptr inbounds i8, i8* %2092, i64 48
  %2109 = getelementptr inbounds i8, i8* %2094, i64 48
  %2110 = bitcast i8* %2109 to <2 x i64>*
  %2111 = load <2 x i64>, <2 x i64>* %2110, align 1
  %2112 = bitcast i8* %2108 to <2 x i64>*
  store <2 x i64> %2111, <2 x i64>* %2112, align 1
  %2113 = getelementptr inbounds i8, i8* %2092, i64 64
  %2114 = getelementptr inbounds i8, i8* %2094, i64 64
  %2115 = bitcast i8* %2114 to <2 x i64>*
  %2116 = load <2 x i64>, <2 x i64>* %2115, align 1
  %2117 = bitcast i8* %2113 to <2 x i64>*
  store <2 x i64> %2116, <2 x i64>* %2117, align 1
  %2118 = getelementptr inbounds i8, i8* %2092, i64 80
  %2119 = getelementptr inbounds i8, i8* %2094, i64 80
  %2120 = bitcast i8* %2119 to <2 x i64>*
  %2121 = load <2 x i64>, <2 x i64>* %2120, align 1
  %2122 = bitcast i8* %2118 to <2 x i64>*
  store <2 x i64> %2121, <2 x i64>* %2122, align 1
  %2123 = getelementptr inbounds i8, i8* %2092, i64 96
  %2124 = getelementptr inbounds i8, i8* %2094, i64 96
  %2125 = bitcast i8* %2124 to <2 x i64>*
  %2126 = load <2 x i64>, <2 x i64>* %2125, align 1
  %2127 = bitcast i8* %2123 to <2 x i64>*
  store <2 x i64> %2126, <2 x i64>* %2127, align 1
  %2128 = getelementptr inbounds i8, i8* %2092, i64 112
  %2129 = getelementptr inbounds i8, i8* %2094, i64 112
  %2130 = add nsw i32 %2093, -8
  %2131 = bitcast i8* %2129 to <2 x i64>*
  %2132 = load <2 x i64>, <2 x i64>* %2131, align 1
  %2133 = bitcast i8* %2128 to <2 x i64>*
  store <2 x i64> %2132, <2 x i64>* %2133, align 1
  %2134 = getelementptr inbounds i8, i8* %2092, i64 128
  %2135 = getelementptr inbounds i8, i8* %2094, i64 128
  %2136 = icmp eq i32 %2130, 0
  br i1 %2136, label %2221, label %2091

2137:                                             ; preds = %1938
  %2138 = zext i32 %1629 to i64
  %2139 = sub nsw i64 0, %2138
  %2140 = getelementptr inbounds i8, i8* %105, i64 %2139
  %2141 = add i32 %1783, -1
  %2142 = and i32 %2141, 15
  %2143 = add nuw nsw i32 %2142, 1
  %2144 = bitcast i8* %2140 to <2 x i64>*
  %2145 = load <2 x i64>, <2 x i64>* %2144, align 1
  %2146 = bitcast i8* %105 to <2 x i64>*
  store <2 x i64> %2145, <2 x i64>* %2146, align 1
  %2147 = zext i32 %2143 to i64
  %2148 = getelementptr inbounds i8, i8* %105, i64 %2147
  %2149 = lshr i32 %2141, 4
  %2150 = icmp eq i32 %2149, 0
  br i1 %2150, label %2221, label %2151

2151:                                             ; preds = %2137
  %2152 = getelementptr inbounds i8, i8* %2140, i64 %2147
  %2153 = add nsw i32 %2149, -1
  %2154 = and i32 %2149, 7
  %2155 = icmp eq i32 %2154, 0
  br i1 %2155, label %2169, label %2156

2156:                                             ; preds = %2151, %2156
  %2157 = phi i8* [ %2165, %2156 ], [ %2148, %2151 ]
  %2158 = phi i32 [ %2161, %2156 ], [ %2149, %2151 ]
  %2159 = phi i8* [ %2166, %2156 ], [ %2152, %2151 ]
  %2160 = phi i32 [ %2167, %2156 ], [ %2154, %2151 ]
  %2161 = add nsw i32 %2158, -1
  %2162 = bitcast i8* %2159 to <2 x i64>*
  %2163 = load <2 x i64>, <2 x i64>* %2162, align 1
  %2164 = bitcast i8* %2157 to <2 x i64>*
  store <2 x i64> %2163, <2 x i64>* %2164, align 1
  %2165 = getelementptr inbounds i8, i8* %2157, i64 16
  %2166 = getelementptr inbounds i8, i8* %2159, i64 16
  %2167 = add i32 %2160, -1
  %2168 = icmp eq i32 %2167, 0
  br i1 %2168, label %2169, label %2156, !llvm.loop !20

2169:                                             ; preds = %2156, %2151
  %2170 = phi i8* [ undef, %2151 ], [ %2165, %2156 ]
  %2171 = phi i8* [ %2148, %2151 ], [ %2165, %2156 ]
  %2172 = phi i32 [ %2149, %2151 ], [ %2161, %2156 ]
  %2173 = phi i8* [ %2152, %2151 ], [ %2166, %2156 ]
  %2174 = icmp ult i32 %2153, 7
  br i1 %2174, label %2221, label %2175

2175:                                             ; preds = %2169, %2175
  %2176 = phi i8* [ %2218, %2175 ], [ %2171, %2169 ]
  %2177 = phi i32 [ %2214, %2175 ], [ %2172, %2169 ]
  %2178 = phi i8* [ %2219, %2175 ], [ %2173, %2169 ]
  %2179 = bitcast i8* %2178 to <2 x i64>*
  %2180 = load <2 x i64>, <2 x i64>* %2179, align 1
  %2181 = bitcast i8* %2176 to <2 x i64>*
  store <2 x i64> %2180, <2 x i64>* %2181, align 1
  %2182 = getelementptr inbounds i8, i8* %2176, i64 16
  %2183 = getelementptr inbounds i8, i8* %2178, i64 16
  %2184 = bitcast i8* %2183 to <2 x i64>*
  %2185 = load <2 x i64>, <2 x i64>* %2184, align 1
  %2186 = bitcast i8* %2182 to <2 x i64>*
  store <2 x i64> %2185, <2 x i64>* %2186, align 1
  %2187 = getelementptr inbounds i8, i8* %2176, i64 32
  %2188 = getelementptr inbounds i8, i8* %2178, i64 32
  %2189 = bitcast i8* %2188 to <2 x i64>*
  %2190 = load <2 x i64>, <2 x i64>* %2189, align 1
  %2191 = bitcast i8* %2187 to <2 x i64>*
  store <2 x i64> %2190, <2 x i64>* %2191, align 1
  %2192 = getelementptr inbounds i8, i8* %2176, i64 48
  %2193 = getelementptr inbounds i8, i8* %2178, i64 48
  %2194 = bitcast i8* %2193 to <2 x i64>*
  %2195 = load <2 x i64>, <2 x i64>* %2194, align 1
  %2196 = bitcast i8* %2192 to <2 x i64>*
  store <2 x i64> %2195, <2 x i64>* %2196, align 1
  %2197 = getelementptr inbounds i8, i8* %2176, i64 64
  %2198 = getelementptr inbounds i8, i8* %2178, i64 64
  %2199 = bitcast i8* %2198 to <2 x i64>*
  %2200 = load <2 x i64>, <2 x i64>* %2199, align 1
  %2201 = bitcast i8* %2197 to <2 x i64>*
  store <2 x i64> %2200, <2 x i64>* %2201, align 1
  %2202 = getelementptr inbounds i8, i8* %2176, i64 80
  %2203 = getelementptr inbounds i8, i8* %2178, i64 80
  %2204 = bitcast i8* %2203 to <2 x i64>*
  %2205 = load <2 x i64>, <2 x i64>* %2204, align 1
  %2206 = bitcast i8* %2202 to <2 x i64>*
  store <2 x i64> %2205, <2 x i64>* %2206, align 1
  %2207 = getelementptr inbounds i8, i8* %2176, i64 96
  %2208 = getelementptr inbounds i8, i8* %2178, i64 96
  %2209 = bitcast i8* %2208 to <2 x i64>*
  %2210 = load <2 x i64>, <2 x i64>* %2209, align 1
  %2211 = bitcast i8* %2207 to <2 x i64>*
  store <2 x i64> %2210, <2 x i64>* %2211, align 1
  %2212 = getelementptr inbounds i8, i8* %2176, i64 112
  %2213 = getelementptr inbounds i8, i8* %2178, i64 112
  %2214 = add nsw i32 %2177, -8
  %2215 = bitcast i8* %2213 to <2 x i64>*
  %2216 = load <2 x i64>, <2 x i64>* %2215, align 1
  %2217 = bitcast i8* %2212 to <2 x i64>*
  store <2 x i64> %2216, <2 x i64>* %2217, align 1
  %2218 = getelementptr inbounds i8, i8* %2176, i64 128
  %2219 = getelementptr inbounds i8, i8* %2178, i64 128
  %2220 = icmp eq i32 %2214, 0
  br i1 %2220, label %2221, label %2175

2221:                                             ; preds = %2169, %2175, %2028, %2004, %1980, %1956, %2085, %2091, %1904, %1909, %1728, %1734, %1886, %2137, %2053, %2011, %1987, %1963, %1946, %1785, %1699, %1696, %1691
  %2222 = phi i8* [ %1698, %1696 ], [ %1692, %1691 ], [ %1707, %1699 ], [ %1971, %1963 ], [ %1995, %1987 ], [ %2019, %2011 ], [ %2064, %2053 ], [ %1953, %1946 ], [ %2148, %2137 ], [ %105, %1785 ], [ %1810, %1886 ], [ %1729, %1728 ], [ %1777, %1734 ], [ %1905, %1904 ], [ %1936, %1909 ], [ %2086, %2085 ], [ %2134, %2091 ], [ %1960, %1956 ], [ %1984, %1980 ], [ %2008, %2004 ], [ %2032, %2028 ], [ %2170, %2169 ], [ %2218, %2175 ]
  %2223 = phi i32 [ %1658, %1696 ], [ %1658, %1691 ], [ %1658, %1699 ], [ %1783, %1963 ], [ %1783, %1987 ], [ %1783, %2011 ], [ %1783, %2053 ], [ %1783, %1946 ], [ %1783, %2137 ], [ 0, %1785 ], [ %1783, %1886 ], [ %1658, %1734 ], [ %1658, %1728 ], [ %1783, %1909 ], [ %1783, %1904 ], [ %1783, %2091 ], [ %1783, %2085 ], [ %1783, %1956 ], [ %1783, %1980 ], [ %1783, %2004 ], [ %1783, %2028 ], [ %1783, %2175 ], [ %1783, %2169 ]
  %2224 = sub i32 %107, %2223
  %2225 = load i32, i32* %68, align 4
  %2226 = sub i32 %2225, %2223
  store i32 %2226, i32* %68, align 4
  %2227 = icmp eq i32 %2226, 0
  br i1 %2227, label %2228, label %2365

2228:                                             ; preds = %2221
  store i32 16200, i32* %28, align 8
  br label %2365

2229:                                             ; preds = %102
  %2230 = icmp eq i32 %107, 0
  br i1 %2230, label %2483, label %2231

2231:                                             ; preds = %2229
  %2232 = load i32, i32* %68, align 4
  %2233 = trunc i32 %2232 to i8
  %2234 = getelementptr inbounds i8, i8* %105, i64 1
  store i8 %2233, i8* %105, align 1
  %2235 = add i32 %107, -1
  store i32 16200, i32* %28, align 8
  br label %2365

2236:                                             ; preds = %102
  %2237 = load i32, i32* %61, align 8
  %2238 = icmp eq i32 %2237, 0
  br i1 %2238, label %2313, label %2239

2239:                                             ; preds = %2236
  %2240 = icmp ult i32 %109, 32
  br i1 %2240, label %2241, label %2259

2241:                                             ; preds = %2239
  %2242 = zext i32 %109 to i64
  %2243 = icmp eq i32 %106, 0
  br i1 %2243, label %2461, label %2244

2244:                                             ; preds = %2241
  %2245 = add i32 %106, -1
  %2246 = getelementptr inbounds i8, i8* %104, i64 1
  %2247 = load i8, i8* %104, align 1
  %2248 = zext i8 %2247 to i64
  %2249 = shl i64 %2248, %2242
  %2250 = add i64 %2249, %108
  %2251 = add nuw nsw i64 %2242, 8
  %2252 = icmp ult i64 %2251, 32
  br i1 %2252, label %2639, label %2253

2253:                                             ; preds = %2663, %2652, %2641, %2244
  %2254 = phi i32 [ %2245, %2244 ], [ %2642, %2641 ], [ %2653, %2652 ], [ %2664, %2663 ]
  %2255 = phi i8* [ %2246, %2244 ], [ %2643, %2641 ], [ %2654, %2652 ], [ %2665, %2663 ]
  %2256 = phi i64 [ %2250, %2244 ], [ %2647, %2641 ], [ %2658, %2652 ], [ %2669, %2663 ]
  %2257 = phi i64 [ %2251, %2244 ], [ %2648, %2641 ], [ %2659, %2652 ], [ %2670, %2663 ]
  %2258 = trunc i64 %2257 to i32
  br label %2259

2259:                                             ; preds = %2253, %2239
  %2260 = phi i8* [ %104, %2239 ], [ %2255, %2253 ]
  %2261 = phi i32 [ %106, %2239 ], [ %2254, %2253 ]
  %2262 = phi i64 [ %108, %2239 ], [ %2256, %2253 ]
  %2263 = phi i32 [ %109, %2239 ], [ %2258, %2253 ]
  %2264 = sub i32 %110, %107
  %2265 = zext i32 %2264 to i64
  %2266 = load i64, i64* %62, align 8
  %2267 = add i64 %2266, %2265
  store i64 %2267, i64* %62, align 8
  %2268 = load i64, i64* %63, align 8
  %2269 = add i64 %2268, %2265
  store i64 %2269, i64* %63, align 8
  %2270 = load i32, i32* %61, align 8
  %2271 = and i32 %2270, 4
  %2272 = icmp ne i32 %2271, 0
  %2273 = icmp ne i32 %2264, 0
  %2274 = and i1 %2273, %2272
  br i1 %2274, label %2275, label %2289

2275:                                             ; preds = %2259
  %2276 = load i32, i32* %64, align 8
  %2277 = icmp eq i32 %2276, 0
  %2278 = load i64, i64* %65, align 8
  %2279 = sub nsw i64 0, %2265
  %2280 = getelementptr inbounds i8, i8* %105, i64 %2279
  br i1 %2277, label %2283, label %2281

2281:                                             ; preds = %2275
  %2282 = call i64 @Cr_z_crc32(i64 %2278, i8* %2280, i32 %2264) #6
  br label %2285

2283:                                             ; preds = %2275
  %2284 = call i64 @Cr_z_adler32(i64 %2278, i8* %2280, i32 %2264) #6
  br label %2285

2285:                                             ; preds = %2283, %2281
  %2286 = phi i64 [ %2282, %2281 ], [ %2284, %2283 ]
  store i64 %2286, i64* %65, align 8
  store i64 %2286, i64* %66, align 8
  %2287 = load i32, i32* %61, align 8
  %2288 = and i32 %2287, 4
  br label %2289

2289:                                             ; preds = %2285, %2259
  %2290 = phi i32 [ %2288, %2285 ], [ %2271, %2259 ]
  %2291 = phi i32 [ %2287, %2285 ], [ %2270, %2259 ]
  %2292 = icmp eq i32 %2290, 0
  br i1 %2292, label %2313, label %2293

2293:                                             ; preds = %2289
  %2294 = load i32, i32* %64, align 8
  %2295 = icmp eq i32 %2294, 0
  br i1 %2295, label %2296, label %2308

2296:                                             ; preds = %2293
  %2297 = lshr i64 %2262, 24
  %2298 = and i64 %2297, 255
  %2299 = lshr i64 %2262, 8
  %2300 = and i64 %2299, 65280
  %2301 = or i64 %2298, %2300
  %2302 = shl i64 %2262, 8
  %2303 = and i64 %2302, 16711680
  %2304 = or i64 %2301, %2303
  %2305 = shl i64 %2262, 24
  %2306 = and i64 %2305, 4278190080
  %2307 = or i64 %2304, %2306
  br label %2308

2308:                                             ; preds = %2293, %2296
  %2309 = phi i64 [ %2307, %2296 ], [ %2262, %2293 ]
  %2310 = load i64, i64* %65, align 8
  %2311 = icmp eq i64 %2309, %2310
  br i1 %2311, label %2313, label %2312

2312:                                             ; preds = %2308
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

2313:                                             ; preds = %2289, %2308, %2236
  %2314 = phi i32 [ 0, %2236 ], [ %2291, %2308 ], [ %2291, %2289 ]
  %2315 = phi i8* [ %104, %2236 ], [ %2260, %2308 ], [ %2260, %2289 ]
  %2316 = phi i32 [ %106, %2236 ], [ %2261, %2308 ], [ %2261, %2289 ]
  %2317 = phi i64 [ %108, %2236 ], [ 0, %2308 ], [ 0, %2289 ]
  %2318 = phi i32 [ %109, %2236 ], [ 0, %2308 ], [ 0, %2289 ]
  %2319 = phi i32 [ %110, %2236 ], [ %107, %2308 ], [ %107, %2289 ]
  store i32 16207, i32* %28, align 8
  br label %2320

2320:                                             ; preds = %118, %2313
  %2321 = phi i32 [ %119, %118 ], [ %2314, %2313 ]
  %2322 = phi i8* [ %104, %118 ], [ %2315, %2313 ]
  %2323 = phi i32 [ %106, %118 ], [ %2316, %2313 ]
  %2324 = phi i64 [ %108, %118 ], [ %2317, %2313 ]
  %2325 = phi i32 [ %109, %118 ], [ %2318, %2313 ]
  %2326 = phi i32 [ %110, %118 ], [ %2319, %2313 ]
  %2327 = icmp eq i32 %2321, 0
  br i1 %2327, label %2360, label %2328

2328:                                             ; preds = %2320
  %2329 = load i32, i32* %64, align 8
  %2330 = icmp eq i32 %2329, 0
  br i1 %2330, label %2360, label %2331

2331:                                             ; preds = %2328
  %2332 = icmp ult i32 %2325, 32
  br i1 %2332, label %2333, label %2351

2333:                                             ; preds = %2331
  %2334 = zext i32 %2325 to i64
  %2335 = icmp eq i32 %2323, 0
  br i1 %2335, label %2454, label %2336

2336:                                             ; preds = %2333
  %2337 = add i32 %2323, -1
  %2338 = getelementptr inbounds i8, i8* %2322, i64 1
  %2339 = load i8, i8* %2322, align 1
  %2340 = zext i8 %2339 to i64
  %2341 = shl i64 %2340, %2334
  %2342 = add i64 %2341, %2324
  %2343 = add nuw nsw i64 %2334, 8
  %2344 = icmp ult i64 %2343, 32
  br i1 %2344, label %2671, label %2345

2345:                                             ; preds = %2695, %2684, %2673, %2336
  %2346 = phi i32 [ %2337, %2336 ], [ %2674, %2673 ], [ %2685, %2684 ], [ %2696, %2695 ]
  %2347 = phi i8* [ %2338, %2336 ], [ %2675, %2673 ], [ %2686, %2684 ], [ %2697, %2695 ]
  %2348 = phi i64 [ %2342, %2336 ], [ %2679, %2673 ], [ %2690, %2684 ], [ %2701, %2695 ]
  %2349 = phi i64 [ %2343, %2336 ], [ %2680, %2673 ], [ %2691, %2684 ], [ %2702, %2695 ]
  %2350 = trunc i64 %2349 to i32
  br label %2351

2351:                                             ; preds = %2345, %2331
  %2352 = phi i8* [ %2322, %2331 ], [ %2347, %2345 ]
  %2353 = phi i32 [ %2323, %2331 ], [ %2346, %2345 ]
  %2354 = phi i64 [ %2324, %2331 ], [ %2348, %2345 ]
  %2355 = phi i32 [ %2325, %2331 ], [ %2350, %2345 ]
  %2356 = load i64, i64* %63, align 8
  %2357 = and i64 %2356, 4294967295
  %2358 = icmp eq i64 %2354, %2357
  br i1 %2358, label %2360, label %2359

2359:                                             ; preds = %2351
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.18, i64 0, i64 0), i8** %67, align 8
  store i32 16209, i32* %28, align 8
  br label %2365

2360:                                             ; preds = %2351, %2328, %2320
  %2361 = phi i8* [ %2322, %2328 ], [ %2322, %2320 ], [ %2352, %2351 ]
  %2362 = phi i32 [ %2323, %2328 ], [ %2323, %2320 ], [ %2353, %2351 ]
  %2363 = phi i64 [ %2324, %2328 ], [ %2324, %2320 ], [ 0, %2351 ]
  %2364 = phi i32 [ %2325, %2328 ], [ %2325, %2320 ], [ 0, %2351 ]
  store i32 16208, i32* %28, align 8
  br label %2474

2365:                                             ; preds = %1065, %1164, %2221, %2228, %1226, %1235, %2359, %2312, %2231, %1638, %1569, %1377, %1373, %1369, %1209, %1200, %1196, %942, %839, %802, %794, %772, %736, %703, %651, %637, %245, %241, %212, %211, %196, %192, %172, %143
  %2366 = phi i8* [ %2352, %2359 ], [ %2260, %2312 ], [ %104, %2231 ], [ %1621, %1638 ], [ %1621, %2228 ], [ %1621, %2221 ], [ %1556, %1569 ], [ %1229, %1235 ], [ %1229, %1226 ], [ %1355, %1369 ], [ %1355, %1373 ], [ %1355, %1377 ], [ %1190, %1196 ], [ %1190, %1200 ], [ %1190, %1209 ], [ %853, %942 ], [ %819, %839 ], [ %797, %794 ], [ %782, %802 ], [ %764, %772 ], [ %693, %703 ], [ %718, %736 ], [ %626, %637 ], [ %639, %651 ], [ %234, %241 ], [ %234, %245 ], [ %104, %143 ], [ %160, %172 ], [ %160, %192 ], [ %160, %196 ], [ %160, %211 ], [ %160, %212 ], [ %1137, %1164 ], [ %1057, %1065 ]
  %2367 = phi i8* [ %105, %2359 ], [ %105, %2312 ], [ %2234, %2231 ], [ %105, %1638 ], [ %2222, %2228 ], [ %2222, %2221 ], [ %105, %1569 ], [ %1227, %1235 ], [ %1227, %1226 ], [ %105, %1369 ], [ %105, %1373 ], [ %105, %1377 ], [ %105, %1196 ], [ %105, %1200 ], [ %105, %1209 ], [ %105, %942 ], [ %105, %839 ], [ %799, %794 ], [ %105, %802 ], [ %105, %772 ], [ %105, %703 ], [ %105, %736 ], [ %105, %637 ], [ %105, %651 ], [ %105, %241 ], [ %105, %245 ], [ %105, %143 ], [ %105, %172 ], [ %105, %192 ], [ %105, %196 ], [ %105, %211 ], [ %105, %212 ], [ %105, %1164 ], [ %105, %1065 ]
  %2368 = phi i32 [ %2353, %2359 ], [ %2261, %2312 ], [ %106, %2231 ], [ %1622, %1638 ], [ %1622, %2228 ], [ %1622, %2221 ], [ %1557, %1569 ], [ %1230, %1235 ], [ %1230, %1226 ], [ %1356, %1369 ], [ %1356, %1373 ], [ %1356, %1377 ], [ %1191, %1196 ], [ %1191, %1200 ], [ %1191, %1209 ], [ %854, %942 ], [ %820, %839 ], [ %796, %794 ], [ %783, %802 ], [ %765, %772 ], [ %694, %703 ], [ %719, %736 ], [ %627, %637 ], [ %640, %651 ], [ %235, %241 ], [ %235, %245 ], [ %106, %143 ], [ %161, %172 ], [ %161, %192 ], [ %161, %196 ], [ %161, %211 ], [ %161, %212 ], [ %1138, %1164 ], [ %1058, %1065 ]
  %2369 = phi i32 [ %107, %2359 ], [ %107, %2312 ], [ %2235, %2231 ], [ %107, %1638 ], [ %2224, %2228 ], [ %2224, %2221 ], [ %107, %1569 ], [ %1228, %1235 ], [ %1228, %1226 ], [ %107, %1369 ], [ %107, %1373 ], [ %107, %1377 ], [ %107, %1196 ], [ %107, %1200 ], [ %107, %1209 ], [ %107, %942 ], [ %107, %839 ], [ %798, %794 ], [ %107, %802 ], [ %107, %772 ], [ %107, %703 ], [ %107, %736 ], [ %107, %637 ], [ %107, %651 ], [ %107, %241 ], [ %107, %245 ], [ %107, %143 ], [ %107, %172 ], [ %107, %192 ], [ %107, %196 ], [ %107, %211 ], [ %107, %212 ], [ %107, %1164 ], [ %107, %1065 ]
  %2370 = phi i64 [ %2354, %2359 ], [ %2262, %2312 ], [ %108, %2231 ], [ %1623, %1638 ], [ %1623, %2228 ], [ %1623, %2221 ], [ %1564, %1569 ], [ %1231, %1235 ], [ %1231, %1226 ], [ %1364, %1369 ], [ %1364, %1373 ], [ %1364, %1377 ], [ %1192, %1196 ], [ %1192, %1200 ], [ %1192, %1209 ], [ %855, %942 ], [ %834, %839 ], [ %784, %794 ], [ %784, %802 ], [ %766, %772 ], [ %706, %703 ], [ %737, %736 ], [ %628, %637 ], [ %641, %651 ], [ %236, %241 ], [ %236, %245 ], [ %108, %143 ], [ 0, %172 ], [ %162, %192 ], [ %162, %196 ], [ %198, %211 ], [ 0, %212 ], [ %1139, %1164 ], [ %1062, %1065 ]
  %2371 = phi i32 [ %2355, %2359 ], [ %2263, %2312 ], [ %109, %2231 ], [ %1624, %1638 ], [ %1624, %2228 ], [ %1624, %2221 ], [ %1565, %1569 ], [ %1232, %1235 ], [ %1232, %1226 ], [ %1365, %1369 ], [ %1365, %1373 ], [ %1365, %1377 ], [ %1193, %1196 ], [ %1193, %1200 ], [ %1193, %1209 ], [ %856, %942 ], [ %835, %839 ], [ %785, %794 ], [ %785, %802 ], [ %767, %772 ], [ %707, %703 ], [ %738, %736 ], [ %629, %637 ], [ %642, %651 ], [ %237, %241 ], [ %237, %245 ], [ %109, %143 ], [ 0, %172 ], [ %163, %192 ], [ %163, %196 ], [ %199, %211 ], [ 0, %212 ], [ %1140, %1164 ], [ %1063, %1065 ]
  %2372 = phi i32 [ %2326, %2359 ], [ %107, %2312 ], [ %110, %2231 ], [ %110, %1638 ], [ %110, %2228 ], [ %110, %2221 ], [ %110, %1569 ], [ %110, %1235 ], [ %110, %1226 ], [ %110, %1369 ], [ %110, %1373 ], [ %110, %1377 ], [ %110, %1196 ], [ %110, %1200 ], [ %110, %1209 ], [ %110, %942 ], [ %110, %839 ], [ %110, %794 ], [ %110, %802 ], [ %110, %772 ], [ %110, %703 ], [ %110, %736 ], [ %110, %637 ], [ %110, %651 ], [ %110, %241 ], [ %110, %245 ], [ %110, %143 ], [ %110, %172 ], [ %110, %192 ], [ %110, %196 ], [ %110, %211 ], [ %110, %212 ], [ %110, %1164 ], [ %110, %1065 ]
  %2373 = phi i32 [ %111, %2359 ], [ %111, %2312 ], [ %111, %2231 ], [ %1625, %1638 ], [ %1625, %2228 ], [ %1625, %2221 ], [ %1435, %1569 ], [ %1222, %1235 ], [ %1222, %1226 ], [ %1222, %1369 ], [ %1222, %1373 ], [ %1222, %1377 ], [ %950, %1196 ], [ %1198, %1200 ], [ %1207, %1209 ], [ %940, %942 ], [ %111, %839 ], [ %111, %794 ], [ %111, %802 ], [ %111, %772 ], [ %111, %703 ], [ %111, %736 ], [ %111, %637 ], [ %111, %651 ], [ %111, %241 ], [ %111, %245 ], [ %111, %143 ], [ %111, %172 ], [ %111, %192 ], [ %111, %196 ], [ %111, %211 ], [ %111, %212 ], [ %950, %1164 ], [ %950, %1065 ]
  %2374 = load i32, i32* %28, align 8
  br label %102

2375:                                             ; preds = %1106
  %2376 = trunc i64 %1107 to i32
  br label %2474

2377:                                             ; preds = %1039
  %2378 = trunc i64 %1040 to i32
  br label %2474

2379:                                             ; preds = %1076
  %2380 = trunc i64 %1077 to i32
  br label %2474

2381:                                             ; preds = %977
  %2382 = trunc i64 %978 to i32
  br label %2474

2383:                                             ; preds = %140
  %2384 = zext i32 %109 to i64
  br label %2385

2385:                                             ; preds = %2845, %2383
  %2386 = phi i64 [ %2384, %2383 ], [ %151, %2845 ]
  %2387 = phi i64 [ %108, %2383 ], [ %150, %2845 ]
  %2388 = phi i8* [ %104, %2383 ], [ %146, %2845 ]
  %2389 = trunc i64 %2386 to i32
  br label %2474

2390:                                             ; preds = %607
  %2391 = zext i32 %601 to i64
  br label %2392

2392:                                             ; preds = %2835, %2390
  %2393 = phi i64 [ %2391, %2390 ], [ %617, %2835 ]
  %2394 = phi i64 [ %600, %2390 ], [ %616, %2835 ]
  %2395 = phi i8* [ %598, %2390 ], [ %612, %2835 ]
  %2396 = trunc i64 %2393 to i32
  br label %2474

2397:                                             ; preds = %372
  %2398 = zext i32 %366 to i64
  br label %2399

2399:                                             ; preds = %2826, %2397
  %2400 = phi i64 [ %2398, %2397 ], [ %382, %2826 ]
  %2401 = phi i64 [ %365, %2397 ], [ %381, %2826 ]
  %2402 = phi i8* [ %363, %2397 ], [ %377, %2826 ]
  %2403 = trunc i64 %2400 to i32
  br label %2474

2404:                                             ; preds = %317
  %2405 = zext i32 %318 to i64
  br label %2406

2406:                                             ; preds = %2817, %2404
  %2407 = phi i64 [ %2405, %2404 ], [ %331, %2817 ]
  %2408 = phi i64 [ %319, %2404 ], [ %330, %2817 ]
  %2409 = phi i8* [ %321, %2404 ], [ %326, %2817 ]
  %2410 = trunc i64 %2407 to i32
  br label %2474

2411:                                             ; preds = %272
  %2412 = zext i32 %273 to i64
  br label %2413

2413:                                             ; preds = %2786, %2797, %2808, %2411
  %2414 = phi i64 [ %2412, %2411 ], [ %2806, %2808 ], [ %2795, %2797 ], [ %286, %2786 ]
  %2415 = phi i64 [ %274, %2411 ], [ %2805, %2808 ], [ %2794, %2797 ], [ %285, %2786 ]
  %2416 = phi i8* [ %276, %2411 ], [ %2801, %2808 ], [ %2790, %2797 ], [ %281, %2786 ]
  %2417 = trunc i64 %2414 to i32
  br label %2474

2418:                                             ; preds = %132
  %2419 = zext i32 %109 to i64
  br label %2420

2420:                                             ; preds = %2776, %2418
  %2421 = phi i64 [ %2419, %2418 ], [ %225, %2776 ]
  %2422 = phi i64 [ %108, %2418 ], [ %224, %2776 ]
  %2423 = phi i8* [ %104, %2418 ], [ %220, %2776 ]
  %2424 = trunc i64 %2421 to i32
  br label %2474

2425:                                             ; preds = %127
  %2426 = zext i32 %109 to i64
  br label %2427

2427:                                             ; preds = %2745, %2756, %2767, %2425
  %2428 = phi i64 [ %2426, %2425 ], [ %2765, %2767 ], [ %2754, %2756 ], [ %660, %2745 ]
  %2429 = phi i64 [ %108, %2425 ], [ %2764, %2767 ], [ %2753, %2756 ], [ %659, %2745 ]
  %2430 = phi i8* [ %104, %2425 ], [ %2760, %2767 ], [ %2749, %2756 ], [ %655, %2745 ]
  %2431 = trunc i64 %2428 to i32
  br label %2474

2432:                                             ; preds = %745
  %2433 = zext i32 %743 to i64
  br label %2434

2434:                                             ; preds = %2713, %2724, %2735, %2432
  %2435 = phi i64 [ %2433, %2432 ], [ %2733, %2735 ], [ %2722, %2724 ], [ %755, %2713 ]
  %2436 = phi i64 [ %742, %2432 ], [ %2732, %2735 ], [ %2721, %2724 ], [ %754, %2713 ]
  %2437 = phi i8* [ %104, %2432 ], [ %2728, %2735 ], [ %2717, %2724 ], [ %750, %2713 ]
  %2438 = trunc i64 %2435 to i32
  br label %2474

2439:                                             ; preds = %1508
  %2440 = trunc i64 %1509 to i32
  br label %2474

2441:                                             ; preds = %1449
  %2442 = trunc i64 %1450 to i32
  br label %2474

2443:                                             ; preds = %1309
  %2444 = trunc i64 %1310 to i32
  br label %2474

2445:                                             ; preds = %1250
  %2446 = trunc i64 %1251 to i32
  br label %2474

2447:                                             ; preds = %122
  %2448 = zext i32 %109 to i64
  br label %2449

2449:                                             ; preds = %2703, %2447
  %2450 = phi i64 [ %2448, %2447 ], [ %810, %2703 ]
  %2451 = phi i64 [ %108, %2447 ], [ %809, %2703 ]
  %2452 = phi i8* [ %104, %2447 ], [ %805, %2703 ]
  %2453 = trunc i64 %2450 to i32
  br label %2474

2454:                                             ; preds = %2333
  %2455 = zext i32 %2325 to i64
  br label %2456

2456:                                             ; preds = %2671, %2682, %2693, %2454
  %2457 = phi i64 [ %2455, %2454 ], [ %2691, %2693 ], [ %2680, %2682 ], [ %2343, %2671 ]
  %2458 = phi i64 [ %2324, %2454 ], [ %2690, %2693 ], [ %2679, %2682 ], [ %2342, %2671 ]
  %2459 = phi i8* [ %2322, %2454 ], [ %2686, %2693 ], [ %2675, %2682 ], [ %2338, %2671 ]
  %2460 = trunc i64 %2457 to i32
  br label %2474

2461:                                             ; preds = %2241
  %2462 = zext i32 %109 to i64
  br label %2463

2463:                                             ; preds = %2639, %2650, %2661, %2461
  %2464 = phi i64 [ %2462, %2461 ], [ %2659, %2661 ], [ %2648, %2650 ], [ %2251, %2639 ]
  %2465 = phi i64 [ %108, %2461 ], [ %2658, %2661 ], [ %2647, %2650 ], [ %2250, %2639 ]
  %2466 = phi i8* [ %104, %2461 ], [ %2654, %2661 ], [ %2643, %2650 ], [ %2246, %2639 ]
  %2467 = trunc i64 %2464 to i32
  br label %2474

2468:                                             ; preds = %485, %525, %545, %585, %687, %773, %788, %1210, %469, %102, %701
  %2469 = phi i8* [ %104, %102 ], [ %471, %469 ], [ %528, %525 ], [ %478, %485 ], [ %588, %585 ], [ %538, %545 ], [ %688, %687 ], [ %764, %773 ], [ %782, %788 ], [ %1190, %1210 ], [ %693, %701 ]
  %2470 = phi i32 [ %106, %102 ], [ %472, %469 ], [ %526, %525 ], [ 0, %485 ], [ %586, %585 ], [ 0, %545 ], [ %689, %687 ], [ %765, %773 ], [ %783, %788 ], [ %1191, %1210 ], [ 0, %701 ]
  %2471 = phi i64 [ %108, %102 ], [ %421, %469 ], [ %480, %525 ], [ %480, %485 ], [ %540, %585 ], [ %540, %545 ], [ %690, %687 ], [ 0, %773 ], [ %784, %788 ], [ %1192, %1210 ], [ %695, %701 ]
  %2472 = phi i32 [ %109, %102 ], [ %422, %469 ], [ %481, %525 ], [ %481, %485 ], [ %541, %585 ], [ %541, %545 ], [ %691, %687 ], [ 0, %773 ], [ %785, %788 ], [ %1193, %1210 ], [ %696, %701 ]
  %2473 = phi i32 [ 1, %102 ], [ %111, %469 ], [ %111, %525 ], [ %111, %485 ], [ %111, %585 ], [ %111, %545 ], [ %111, %687 ], [ %111, %773 ], [ %111, %788 ], [ 0, %1210 ], [ %111, %701 ]
  br label %2474

2474:                                             ; preds = %885, %1392, %1583, %102, %2468, %2463, %2456, %2449, %2445, %2443, %2441, %2439, %2434, %2427, %2420, %2413, %2406, %2399, %2392, %2385, %2381, %2379, %2377, %2375, %2360, %728
  %2475 = phi i8* [ %718, %728 ], [ %2361, %2360 ], [ %1110, %2375 ], [ %1043, %2377 ], [ %1080, %2379 ], [ %981, %2381 ], [ %2388, %2385 ], [ %2395, %2392 ], [ %2402, %2399 ], [ %2409, %2406 ], [ %2416, %2413 ], [ %2423, %2420 ], [ %2430, %2427 ], [ %2437, %2434 ], [ %1512, %2439 ], [ %1453, %2441 ], [ %1313, %2443 ], [ %1254, %2445 ], [ %2452, %2449 ], [ %2459, %2456 ], [ %2466, %2463 ], [ %2469, %2468 ], [ %104, %102 ], [ %1587, %1583 ], [ %1396, %1392 ], [ %883, %885 ]
  %2476 = phi i32 [ %719, %728 ], [ %2362, %2360 ], [ 0, %2375 ], [ 0, %2377 ], [ 0, %2379 ], [ 0, %2381 ], [ 0, %2385 ], [ 0, %2392 ], [ 0, %2399 ], [ 0, %2406 ], [ 0, %2413 ], [ 0, %2420 ], [ 0, %2427 ], [ 0, %2434 ], [ 0, %2439 ], [ 0, %2441 ], [ 0, %2443 ], [ 0, %2445 ], [ 0, %2449 ], [ 0, %2456 ], [ 0, %2463 ], [ %2470, %2468 ], [ %106, %102 ], [ 0, %1583 ], [ 0, %1392 ], [ 0, %885 ]
  %2477 = phi i64 [ %729, %728 ], [ %2363, %2360 ], [ %1108, %2375 ], [ %1041, %2377 ], [ %1078, %2379 ], [ %979, %2381 ], [ %2387, %2385 ], [ %2394, %2392 ], [ %2401, %2399 ], [ %2408, %2406 ], [ %2415, %2413 ], [ %2422, %2420 ], [ %2429, %2427 ], [ %2436, %2434 ], [ %1510, %2439 ], [ %1451, %2441 ], [ %1311, %2443 ], [ %1252, %2445 ], [ %2451, %2449 ], [ %2458, %2456 ], [ %2465, %2463 ], [ %2471, %2468 ], [ %108, %102 ], [ %1585, %1583 ], [ %1394, %1392 ], [ %881, %885 ]
  %2478 = phi i32 [ %730, %728 ], [ %2364, %2360 ], [ %2376, %2375 ], [ %2378, %2377 ], [ %2380, %2379 ], [ %2382, %2381 ], [ %2389, %2385 ], [ %2396, %2392 ], [ %2403, %2399 ], [ %2410, %2406 ], [ %2417, %2413 ], [ %2424, %2420 ], [ %2431, %2427 ], [ %2438, %2434 ], [ %2440, %2439 ], [ %2442, %2441 ], [ %2444, %2443 ], [ %2446, %2445 ], [ %2453, %2449 ], [ %2460, %2456 ], [ %2467, %2463 ], [ %2472, %2468 ], [ %109, %102 ], [ %1584, %1583 ], [ %1393, %1392 ], [ %880, %885 ]
  %2479 = phi i32 [ %110, %728 ], [ %2326, %2360 ], [ %110, %2375 ], [ %110, %2377 ], [ %110, %2379 ], [ %110, %2381 ], [ %110, %2385 ], [ %110, %2392 ], [ %110, %2399 ], [ %110, %2406 ], [ %110, %2413 ], [ %110, %2420 ], [ %110, %2427 ], [ %110, %2434 ], [ %110, %2439 ], [ %110, %2441 ], [ %110, %2443 ], [ %110, %2445 ], [ %110, %2449 ], [ %2326, %2456 ], [ %110, %2463 ], [ %110, %2468 ], [ %110, %102 ], [ %110, %1583 ], [ %110, %1392 ], [ %110, %885 ]
  %2480 = phi i32 [ %111, %728 ], [ 1, %2360 ], [ %950, %2375 ], [ %950, %2377 ], [ %950, %2379 ], [ %950, %2381 ], [ %111, %2385 ], [ %111, %2392 ], [ %111, %2399 ], [ %111, %2406 ], [ %111, %2413 ], [ %111, %2420 ], [ %111, %2427 ], [ %111, %2434 ], [ %1435, %2439 ], [ %1435, %2441 ], [ %1222, %2443 ], [ %1222, %2445 ], [ %111, %2449 ], [ %111, %2456 ], [ %111, %2463 ], [ %2473, %2468 ], [ -3, %102 ], [ %1579, %1583 ], [ %1386, %1392 ], [ %111, %885 ]
  %2481 = icmp ugt i32 %107, 15
  br i1 %2481, label %2482, label %2483

2482:                                             ; preds = %2474
  call void @llvm.memset.p0i8.i64(i8* align 1 %105, i8 85, i64 16, i1 false)
  br label %2491

2483:                                             ; preds = %1620, %2229, %2474
  %2484 = phi i32 [ %2480, %2474 ], [ %111, %2229 ], [ %1625, %1620 ]
  %2485 = phi i32 [ %2479, %2474 ], [ %110, %2229 ], [ %110, %1620 ]
  %2486 = phi i32 [ %2478, %2474 ], [ %109, %2229 ], [ %1624, %1620 ]
  %2487 = phi i64 [ %2477, %2474 ], [ %108, %2229 ], [ %1623, %1620 ]
  %2488 = phi i32 [ %2476, %2474 ], [ %106, %2229 ], [ %1622, %1620 ]
  %2489 = phi i8* [ %2475, %2474 ], [ %104, %2229 ], [ %1621, %1620 ]
  %2490 = zext i32 %107 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %105, i8 85, i64 %2490, i1 false)
  br label %2491

2491:                                             ; preds = %2482, %2483
  %2492 = phi i32 [ %2480, %2482 ], [ %2484, %2483 ]
  %2493 = phi i32 [ %2479, %2482 ], [ %2485, %2483 ]
  %2494 = phi i32 [ %2478, %2482 ], [ %2486, %2483 ]
  %2495 = phi i64 [ %2477, %2482 ], [ %2487, %2483 ]
  %2496 = phi i32 [ %2476, %2482 ], [ %2488, %2483 ]
  %2497 = phi i8* [ %2475, %2482 ], [ %2489, %2483 ]
  store i8* %105, i8** %33, align 8
  store i32 %107, i32* %53, align 8
  store i8* %2497, i8** %37, align 8
  store i32 %2496, i32* %55, align 8
  store i64 %2495, i64* %57, align 8
  store i32 %2494, i32* %59, align 8
  %2498 = load i32, i32* %93, align 4
  %2499 = icmp eq i32 %2498, 0
  %2500 = load i32, i32* %53, align 8
  br i1 %2499, label %2501, label %2510

2501:                                             ; preds = %2491
  %2502 = icmp eq i32 %2493, %2500
  br i1 %2502, label %2581, label %2503

2503:                                             ; preds = %2501
  %2504 = load i32, i32* %28, align 8
  %2505 = icmp ult i32 %2504, 16209
  br i1 %2505, label %2506, label %2581

2506:                                             ; preds = %2503
  %2507 = icmp ult i32 %2504, 16206
  %2508 = icmp ne i32 %1, 4
  %2509 = or i1 %2508, %2507
  br i1 %2509, label %2510, label %2581

2510:                                             ; preds = %2491, %2506
  %2511 = load i8*, i8** %33, align 8
  %2512 = sub i32 %2493, %2500
  %2513 = load %struct.inflate_state*, %struct.inflate_state** %20, align 8
  %2514 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %2513, i64 0, i32 14
  %2515 = load i8*, i8** %2514, align 8
  %2516 = icmp eq i8* %2515, null
  br i1 %2516, label %2517, label %2527

2517:                                             ; preds = %2510
  %2518 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %2513, i64 0, i32 10
  %2519 = load i32, i32* %2518, align 8
  %2520 = shl i32 1, %2519
  %2521 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %11, align 8
  %2522 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 10
  %2523 = load i8*, i8** %2522, align 8
  %2524 = add i32 %2520, 16
  %2525 = call i8* %2521(i8* %2523, i32 %2524, i32 1) #6
  store i8* %2525, i8** %2514, align 8
  %2526 = icmp eq i8* %2525, null
  br i1 %2526, label %2580, label %2527

2527:                                             ; preds = %2517, %2510
  %2528 = phi i8* [ %2525, %2517 ], [ %2515, %2510 ]
  %2529 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %2513, i64 0, i32 11
  %2530 = load i32, i32* %2529, align 4
  %2531 = icmp eq i32 %2530, 0
  br i1 %2531, label %2532, label %2538

2532:                                             ; preds = %2527
  %2533 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %2513, i64 0, i32 10
  %2534 = load i32, i32* %2533, align 8
  %2535 = shl i32 1, %2534
  store i32 %2535, i32* %2529, align 4
  %2536 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %2513, i64 0, i32 13
  store i32 0, i32* %2536, align 4
  %2537 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %2513, i64 0, i32 12
  store i32 0, i32* %2537, align 8
  br label %2538

2538:                                             ; preds = %2532, %2527
  %2539 = phi i32 [ %2535, %2532 ], [ %2530, %2527 ]
  %2540 = icmp ugt i32 %2539, %2512
  br i1 %2540, label %2548, label %2541

2541:                                             ; preds = %2538
  %2542 = zext i32 %2539 to i64
  %2543 = sub nsw i64 0, %2542
  %2544 = getelementptr inbounds i8, i8* %2511, i64 %2543
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %2528, i8* align 1 %2544, i64 %2542, i1 false) #6
  %2545 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %2513, i64 0, i32 13
  store i32 0, i32* %2545, align 4
  %2546 = load i32, i32* %2529, align 4
  %2547 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %2513, i64 0, i32 12
  store i32 %2546, i32* %2547, align 8
  br label %2581

2548:                                             ; preds = %2538
  %2549 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %2513, i64 0, i32 13
  %2550 = load i32, i32* %2549, align 4
  %2551 = sub i32 %2539, %2550
  %2552 = icmp ugt i32 %2551, %2512
  %2553 = select i1 %2552, i32 %2512, i32 %2551
  %2554 = zext i32 %2550 to i64
  %2555 = getelementptr inbounds i8, i8* %2528, i64 %2554
  %2556 = zext i32 %2512 to i64
  %2557 = sub nsw i64 0, %2556
  %2558 = getelementptr inbounds i8, i8* %2511, i64 %2557
  %2559 = zext i32 %2553 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2555, i8* align 1 %2558, i64 %2559, i1 false) #6
  %2560 = sub i32 %2512, %2553
  %2561 = icmp eq i32 %2560, 0
  br i1 %2561, label %2569, label %2562

2562:                                             ; preds = %2548
  %2563 = load i8*, i8** %2514, align 8
  %2564 = zext i32 %2560 to i64
  %2565 = sub nsw i64 0, %2564
  %2566 = getelementptr inbounds i8, i8* %2511, i64 %2565
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2563, i8* align 1 %2566, i64 %2564, i1 false) #6
  store i32 %2560, i32* %2549, align 4
  %2567 = load i32, i32* %2529, align 4
  %2568 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %2513, i64 0, i32 12
  store i32 %2567, i32* %2568, align 8
  br label %2581

2569:                                             ; preds = %2548
  %2570 = load i32, i32* %2549, align 4
  %2571 = add i32 %2570, %2553
  %2572 = load i32, i32* %2529, align 4
  %2573 = icmp eq i32 %2571, %2572
  %2574 = select i1 %2573, i32 0, i32 %2571
  store i32 %2574, i32* %2549, align 4
  %2575 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %2513, i64 0, i32 12
  %2576 = load i32, i32* %2575, align 8
  %2577 = icmp ult i32 %2576, %2572
  br i1 %2577, label %2578, label %2581

2578:                                             ; preds = %2569
  %2579 = add i32 %2576, %2553
  store i32 %2579, i32* %2575, align 8
  br label %2581

2580:                                             ; preds = %2517
  store i32 16210, i32* %28, align 8
  br label %2637

2581:                                             ; preds = %2541, %2569, %2578, %2562, %2501, %2506, %2503
  %2582 = load i32, i32* %55, align 8
  %2583 = sub i32 %56, %2582
  %2584 = load i32, i32* %53, align 8
  %2585 = sub i32 %2493, %2584
  %2586 = zext i32 %2583 to i64
  %2587 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 2
  %2588 = load i64, i64* %2587, align 8
  %2589 = add i64 %2588, %2586
  store i64 %2589, i64* %2587, align 8
  %2590 = zext i32 %2585 to i64
  %2591 = load i64, i64* %62, align 8
  %2592 = add i64 %2591, %2590
  store i64 %2592, i64* %62, align 8
  %2593 = load i64, i64* %63, align 8
  %2594 = add i64 %2593, %2590
  store i64 %2594, i64* %63, align 8
  %2595 = load i32, i32* %61, align 8
  %2596 = and i32 %2595, 4
  %2597 = icmp ne i32 %2596, 0
  %2598 = icmp ne i32 %2585, 0
  %2599 = and i1 %2598, %2597
  br i1 %2599, label %2600, label %2613

2600:                                             ; preds = %2581
  %2601 = load i32, i32* %64, align 8
  %2602 = icmp eq i32 %2601, 0
  %2603 = load i64, i64* %65, align 8
  %2604 = load i8*, i8** %33, align 8
  %2605 = sub nsw i64 0, %2590
  %2606 = getelementptr inbounds i8, i8* %2604, i64 %2605
  br i1 %2602, label %2609, label %2607

2607:                                             ; preds = %2600
  %2608 = call i64 @Cr_z_crc32(i64 %2603, i8* %2606, i32 %2585) #6
  br label %2611

2609:                                             ; preds = %2600
  %2610 = call i64 @Cr_z_adler32(i64 %2603, i8* %2606, i32 %2585) #6
  br label %2611

2611:                                             ; preds = %2609, %2607
  %2612 = phi i64 [ %2608, %2607 ], [ %2610, %2609 ]
  store i64 %2612, i64* %65, align 8
  store i64 %2612, i64* %66, align 8
  br label %2613

2613:                                             ; preds = %2611, %2581
  %2614 = load i32, i32* %59, align 8
  %2615 = load i32, i32* %97, align 4
  %2616 = icmp eq i32 %2615, 0
  %2617 = select i1 %2616, i32 0, i32 64
  %2618 = add nsw i32 %2617, %2614
  %2619 = load i32, i32* %28, align 8
  %2620 = icmp eq i32 %2619, 16191
  %2621 = select i1 %2620, i32 128, i32 0
  %2622 = add nsw i32 %2618, %2621
  %2623 = icmp eq i32 %2619, 16199
  %2624 = icmp eq i32 %2619, 16194
  %2625 = or i1 %2623, %2624
  %2626 = select i1 %2625, i32 256, i32 0
  %2627 = add nsw i32 %2622, %2626
  %2628 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 11
  store i32 %2627, i32* %2628, align 8
  %2629 = or i32 %2585, %2583
  %2630 = icmp eq i32 %2629, 0
  %2631 = icmp eq i32 %1, 4
  %2632 = or i1 %2631, %2630
  %2633 = icmp eq i32 %2492, 0
  %2634 = and i1 %2633, %2632
  %2635 = select i1 %2634, i32 -5, i32 %2492
  br label %2637

2636:                                             ; preds = %102
  br label %2637

2637:                                             ; preds = %102, %2636, %2, %10, %14, %18, %23, %32, %27, %40, %2613, %2580, %684
  %2638 = phi i32 [ -4, %2580 ], [ %2635, %2613 ], [ 2, %684 ], [ -2, %40 ], [ -2, %27 ], [ -2, %32 ], [ -2, %23 ], [ -2, %18 ], [ -2, %14 ], [ -2, %10 ], [ -2, %2 ], [ -4, %2636 ], [ -2, %102 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #6
  ret i32 %2638

2639:                                             ; preds = %2244
  %2640 = icmp eq i32 %2245, 0
  br i1 %2640, label %2463, label %2641

2641:                                             ; preds = %2639
  %2642 = add i32 %106, -2
  %2643 = getelementptr inbounds i8, i8* %104, i64 2
  %2644 = load i8, i8* %2246, align 1
  %2645 = zext i8 %2644 to i64
  %2646 = shl i64 %2645, %2251
  %2647 = add i64 %2646, %2250
  %2648 = add nuw nsw i64 %2242, 16
  %2649 = icmp ult i64 %2648, 32
  br i1 %2649, label %2650, label %2253

2650:                                             ; preds = %2641
  %2651 = icmp eq i32 %2642, 0
  br i1 %2651, label %2463, label %2652

2652:                                             ; preds = %2650
  %2653 = add i32 %106, -3
  %2654 = getelementptr inbounds i8, i8* %104, i64 3
  %2655 = load i8, i8* %2643, align 1
  %2656 = zext i8 %2655 to i64
  %2657 = shl i64 %2656, %2648
  %2658 = add i64 %2657, %2647
  %2659 = add nuw nsw i64 %2242, 24
  %2660 = icmp ult i64 %2659, 32
  br i1 %2660, label %2661, label %2253

2661:                                             ; preds = %2652
  %2662 = icmp eq i32 %2653, 0
  br i1 %2662, label %2463, label %2663

2663:                                             ; preds = %2661
  %2664 = add i32 %106, -4
  %2665 = getelementptr inbounds i8, i8* %104, i64 4
  %2666 = load i8, i8* %2654, align 1
  %2667 = zext i8 %2666 to i64
  %2668 = shl i64 %2667, %2659
  %2669 = add i64 %2668, %2658
  %2670 = add nuw nsw i64 %2242, 32
  br label %2253

2671:                                             ; preds = %2336
  %2672 = icmp eq i32 %2337, 0
  br i1 %2672, label %2456, label %2673

2673:                                             ; preds = %2671
  %2674 = add i32 %2323, -2
  %2675 = getelementptr inbounds i8, i8* %2322, i64 2
  %2676 = load i8, i8* %2338, align 1
  %2677 = zext i8 %2676 to i64
  %2678 = shl i64 %2677, %2343
  %2679 = add i64 %2678, %2342
  %2680 = add nuw nsw i64 %2334, 16
  %2681 = icmp ult i64 %2680, 32
  br i1 %2681, label %2682, label %2345

2682:                                             ; preds = %2673
  %2683 = icmp eq i32 %2674, 0
  br i1 %2683, label %2456, label %2684

2684:                                             ; preds = %2682
  %2685 = add i32 %2323, -3
  %2686 = getelementptr inbounds i8, i8* %2322, i64 3
  %2687 = load i8, i8* %2675, align 1
  %2688 = zext i8 %2687 to i64
  %2689 = shl i64 %2688, %2680
  %2690 = add i64 %2689, %2679
  %2691 = add nuw nsw i64 %2334, 24
  %2692 = icmp ult i64 %2691, 32
  br i1 %2692, label %2693, label %2345

2693:                                             ; preds = %2684
  %2694 = icmp eq i32 %2685, 0
  br i1 %2694, label %2456, label %2695

2695:                                             ; preds = %2693
  %2696 = add i32 %2323, -4
  %2697 = getelementptr inbounds i8, i8* %2322, i64 4
  %2698 = load i8, i8* %2686, align 1
  %2699 = zext i8 %2698 to i64
  %2700 = shl i64 %2699, %2691
  %2701 = add i64 %2700, %2690
  %2702 = add nuw nsw i64 %2334, 32
  br label %2345

2703:                                             ; preds = %803
  %2704 = icmp eq i32 %804, 0
  br i1 %2704, label %2449, label %2705

2705:                                             ; preds = %2703
  %2706 = add i32 %106, -2
  %2707 = getelementptr inbounds i8, i8* %104, i64 2
  %2708 = load i8, i8* %805, align 1
  %2709 = zext i8 %2708 to i64
  %2710 = shl i64 %2709, %810
  %2711 = add i64 %2710, %809
  %2712 = add nuw nsw i64 %123, 16
  br label %812

2713:                                             ; preds = %748
  %2714 = icmp eq i32 %749, 0
  br i1 %2714, label %2434, label %2715

2715:                                             ; preds = %2713
  %2716 = add i32 %106, -2
  %2717 = getelementptr inbounds i8, i8* %104, i64 2
  %2718 = load i8, i8* %750, align 1
  %2719 = zext i8 %2718 to i64
  %2720 = shl i64 %2719, %755
  %2721 = add i64 %2720, %754
  %2722 = add nuw nsw i64 %746, 16
  %2723 = icmp ult i64 %2722, 32
  br i1 %2723, label %2724, label %757

2724:                                             ; preds = %2715
  %2725 = icmp eq i32 %2716, 0
  br i1 %2725, label %2434, label %2726

2726:                                             ; preds = %2724
  %2727 = add i32 %106, -3
  %2728 = getelementptr inbounds i8, i8* %104, i64 3
  %2729 = load i8, i8* %2717, align 1
  %2730 = zext i8 %2729 to i64
  %2731 = shl i64 %2730, %2722
  %2732 = add i64 %2731, %2721
  %2733 = add nuw nsw i64 %746, 24
  %2734 = icmp ult i64 %2733, 32
  br i1 %2734, label %2735, label %757

2735:                                             ; preds = %2726
  %2736 = icmp eq i32 %2727, 0
  br i1 %2736, label %2434, label %2737

2737:                                             ; preds = %2735
  %2738 = add i32 %106, -4
  %2739 = getelementptr inbounds i8, i8* %104, i64 4
  %2740 = load i8, i8* %2728, align 1
  %2741 = zext i8 %2740 to i64
  %2742 = shl i64 %2741, %2733
  %2743 = add i64 %2742, %2732
  %2744 = add nuw nsw i64 %746, 32
  br label %757

2745:                                             ; preds = %653
  %2746 = icmp eq i32 %654, 0
  br i1 %2746, label %2427, label %2747

2747:                                             ; preds = %2745
  %2748 = add i32 %106, -2
  %2749 = getelementptr inbounds i8, i8* %104, i64 2
  %2750 = load i8, i8* %655, align 1
  %2751 = zext i8 %2750 to i64
  %2752 = shl i64 %2751, %660
  %2753 = add i64 %2752, %659
  %2754 = add nuw nsw i64 %128, 16
  %2755 = icmp ult i64 %2754, 32
  br i1 %2755, label %2756, label %662

2756:                                             ; preds = %2747
  %2757 = icmp eq i32 %2748, 0
  br i1 %2757, label %2427, label %2758

2758:                                             ; preds = %2756
  %2759 = add i32 %106, -3
  %2760 = getelementptr inbounds i8, i8* %104, i64 3
  %2761 = load i8, i8* %2749, align 1
  %2762 = zext i8 %2761 to i64
  %2763 = shl i64 %2762, %2754
  %2764 = add i64 %2763, %2753
  %2765 = add nuw nsw i64 %128, 24
  %2766 = icmp ult i64 %2765, 32
  br i1 %2766, label %2767, label %662

2767:                                             ; preds = %2758
  %2768 = icmp eq i32 %2759, 0
  br i1 %2768, label %2427, label %2769

2769:                                             ; preds = %2767
  %2770 = add i32 %106, -4
  %2771 = getelementptr inbounds i8, i8* %104, i64 4
  %2772 = load i8, i8* %2760, align 1
  %2773 = zext i8 %2772 to i64
  %2774 = shl i64 %2773, %2765
  %2775 = add i64 %2774, %2764
  br label %662

2776:                                             ; preds = %218
  %2777 = icmp eq i32 %219, 0
  br i1 %2777, label %2420, label %2778

2778:                                             ; preds = %2776
  %2779 = add i32 %106, -2
  %2780 = getelementptr inbounds i8, i8* %104, i64 2
  %2781 = load i8, i8* %220, align 1
  %2782 = zext i8 %2781 to i64
  %2783 = shl i64 %2782, %225
  %2784 = add i64 %2783, %224
  %2785 = add nuw nsw i64 %133, 16
  br label %227

2786:                                             ; preds = %279
  %2787 = icmp eq i32 %280, 0
  br i1 %2787, label %2413, label %2788

2788:                                             ; preds = %2786
  %2789 = add i32 %275, -2
  %2790 = getelementptr inbounds i8, i8* %276, i64 2
  %2791 = load i8, i8* %281, align 1
  %2792 = zext i8 %2791 to i64
  %2793 = shl i64 %2792, %286
  %2794 = add i64 %2793, %285
  %2795 = add nuw nsw i64 %277, 16
  %2796 = icmp ult i64 %2795, 32
  br i1 %2796, label %2797, label %288

2797:                                             ; preds = %2788
  %2798 = icmp eq i32 %2789, 0
  br i1 %2798, label %2413, label %2799

2799:                                             ; preds = %2797
  %2800 = add i32 %275, -3
  %2801 = getelementptr inbounds i8, i8* %276, i64 3
  %2802 = load i8, i8* %2790, align 1
  %2803 = zext i8 %2802 to i64
  %2804 = shl i64 %2803, %2795
  %2805 = add i64 %2804, %2794
  %2806 = add nuw nsw i64 %277, 24
  %2807 = icmp ult i64 %2806, 32
  br i1 %2807, label %2808, label %288

2808:                                             ; preds = %2799
  %2809 = icmp eq i32 %2800, 0
  br i1 %2809, label %2413, label %2810

2810:                                             ; preds = %2808
  %2811 = add i32 %275, -4
  %2812 = getelementptr inbounds i8, i8* %276, i64 4
  %2813 = load i8, i8* %2801, align 1
  %2814 = zext i8 %2813 to i64
  %2815 = shl i64 %2814, %2806
  %2816 = add i64 %2815, %2805
  br label %288

2817:                                             ; preds = %324
  %2818 = icmp eq i32 %325, 0
  br i1 %2818, label %2406, label %2819

2819:                                             ; preds = %2817
  %2820 = add i32 %320, -2
  %2821 = getelementptr inbounds i8, i8* %321, i64 2
  %2822 = load i8, i8* %326, align 1
  %2823 = zext i8 %2822 to i64
  %2824 = shl i64 %2823, %331
  %2825 = add i64 %2824, %330
  br label %333

2826:                                             ; preds = %375
  %2827 = icmp eq i32 %376, 0
  br i1 %2827, label %2399, label %2828

2828:                                             ; preds = %2826
  %2829 = add i32 %364, -2
  %2830 = getelementptr inbounds i8, i8* %363, i64 2
  %2831 = load i8, i8* %377, align 1
  %2832 = zext i8 %2831 to i64
  %2833 = shl i64 %2832, %382
  %2834 = add i64 %2833, %381
  br label %384

2835:                                             ; preds = %610
  %2836 = icmp eq i32 %611, 0
  br i1 %2836, label %2392, label %2837

2837:                                             ; preds = %2835
  %2838 = add i32 %599, -2
  %2839 = getelementptr inbounds i8, i8* %598, i64 2
  %2840 = load i8, i8* %612, align 1
  %2841 = zext i8 %2840 to i64
  %2842 = shl i64 %2841, %617
  %2843 = add i64 %2842, %616
  %2844 = add nuw nsw i64 %608, 16
  br label %619

2845:                                             ; preds = %144
  %2846 = icmp eq i32 %145, 0
  br i1 %2846, label %2385, label %2847

2847:                                             ; preds = %2845
  %2848 = add i32 %106, -2
  %2849 = getelementptr inbounds i8, i8* %104, i64 2
  %2850 = load i8, i8* %146, align 1
  %2851 = zext i8 %2850 to i64
  %2852 = shl i64 %2851, %151
  %2853 = add i64 %2852, %150
  %2854 = add nuw nsw i64 %141, 16
  br label %153
}

declare i64 @Cr_z_crc32(i64, i8*, i32) local_unnamed_addr #3

declare i64 @Cr_z_adler32(i64, i8*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @Cr_z_inflate_table(i32, i16*, i32, %struct.code**, i32*, i16*) local_unnamed_addr #3

declare void @Cr_z_inflate_fast_chunk_(%struct.z_stream_s*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Cr_z_inflateEnd(%struct.z_stream_s*) local_unnamed_addr #2 {
  %2 = icmp eq %struct.z_stream_s* %0, null
  br i1 %2, label %41, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %5 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %4, align 8
  %6 = icmp eq i8* (i8*, i32, i32)* %5, null
  br i1 %6, label %41, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %9 = load void (i8*, i8*)*, void (i8*, i8*)** %8, align 8
  %10 = icmp eq void (i8*, i8*)* %9, null
  br i1 %10, label %41, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %13 = bitcast %struct.internal_state** %12 to %struct.inflate_state**
  %14 = load %struct.inflate_state*, %struct.inflate_state** %13, align 8
  %15 = icmp eq %struct.inflate_state* %14, null
  %16 = bitcast %struct.inflate_state* %14 to i8*
  br i1 %15, label %41, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 0
  %19 = load %struct.z_stream_s*, %struct.z_stream_s** %18, align 8
  %20 = icmp eq %struct.z_stream_s* %19, %0
  br i1 %20, label %21, label %41

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = add i32 %23, -16180
  %25 = icmp ult i32 %24, 32
  br i1 %25, label %26, label %41

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 14
  %28 = load i8*, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %36, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 10
  %32 = load i8*, i8** %31, align 8
  tail call void %9(i8* %32, i8* nonnull %28) #6
  %33 = load void (i8*, i8*)*, void (i8*, i8*)** %8, align 8
  %34 = bitcast %struct.internal_state** %12 to i8**
  %35 = load i8*, i8** %34, align 8
  br label %36

36:                                               ; preds = %26, %30
  %37 = phi i8* [ %35, %30 ], [ %16, %26 ]
  %38 = phi void (i8*, i8*)* [ %33, %30 ], [ %9, %26 ]
  %39 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 10
  %40 = load i8*, i8** %39, align 8
  tail call void %38(i8* %40, i8* %37) #6
  store %struct.internal_state* null, %struct.internal_state** %12, align 8
  br label %41

41:                                               ; preds = %1, %3, %7, %11, %17, %21, %36
  %42 = phi i32 [ 0, %36 ], [ -2, %21 ], [ -2, %17 ], [ -2, %11 ], [ -2, %7 ], [ -2, %3 ], [ -2, %1 ]
  ret i32 %42
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Cr_z_inflateGetDictionary(%struct.z_stream_s* readonly, i8*, i32*) local_unnamed_addr #2 {
  %4 = icmp eq %struct.z_stream_s* %0, null
  br i1 %4, label %54, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %7 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %6, align 8
  %8 = icmp eq i8* (i8*, i32, i32)* %7, null
  br i1 %8, label %54, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %10, align 8
  %12 = icmp eq void (i8*, i8*)* %11, null
  br i1 %12, label %54, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %15 = bitcast %struct.internal_state** %14 to %struct.inflate_state**
  %16 = load %struct.inflate_state*, %struct.inflate_state** %15, align 8
  %17 = icmp eq %struct.inflate_state* %16, null
  br i1 %17, label %54, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 0
  %20 = load %struct.z_stream_s*, %struct.z_stream_s** %19, align 8
  %21 = icmp eq %struct.z_stream_s* %20, %0
  br i1 %21, label %22, label %54

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = add i32 %24, -16180
  %26 = icmp ult i32 %25, 32
  br i1 %26, label %27, label %54

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 12
  %29 = load i32, i32* %28, align 8
  %30 = icmp ne i32 %29, 0
  %31 = icmp ne i8* %1, null
  %32 = and i1 %31, %30
  br i1 %32, label %33, label %50

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 14
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 13
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i8, i8* %35, i64 %38
  %40 = sub i32 %29, %37
  %41 = zext i32 %40 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %1, i8* align 1 %39, i64 %41, i1 false)
  %42 = load i32, i32* %28, align 8
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %1, i64 %43
  %45 = load i32, i32* %36, align 4
  %46 = zext i32 %45 to i64
  %47 = sub nsw i64 0, %46
  %48 = getelementptr inbounds i8, i8* %44, i64 %47
  %49 = load i8*, i8** %34, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %48, i8* align 1 %49, i64 %46, i1 false)
  br label %50

50:                                               ; preds = %33, %27
  %51 = icmp eq i32* %2, null
  br i1 %51, label %54, label %52

52:                                               ; preds = %50
  %53 = load i32, i32* %28, align 8
  store i32 %53, i32* %2, align 4
  br label %54

54:                                               ; preds = %3, %5, %9, %13, %18, %52, %50, %22
  %55 = phi i32 [ -2, %22 ], [ 0, %50 ], [ 0, %52 ], [ -2, %18 ], [ -2, %13 ], [ -2, %9 ], [ -2, %5 ], [ -2, %3 ]
  ret i32 %55
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Cr_z_inflateSetDictionary(%struct.z_stream_s* readonly, i8*, i32) local_unnamed_addr #2 {
  %4 = icmp eq %struct.z_stream_s* %0, null
  br i1 %4, label %112, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %7 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %6, align 8
  %8 = icmp eq i8* (i8*, i32, i32)* %7, null
  br i1 %8, label %112, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %10, align 8
  %12 = icmp eq void (i8*, i8*)* %11, null
  br i1 %12, label %112, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %15 = bitcast %struct.internal_state** %14 to %struct.inflate_state**
  %16 = load %struct.inflate_state*, %struct.inflate_state** %15, align 8
  %17 = icmp eq %struct.inflate_state* %16, null
  br i1 %17, label %112, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 0
  %20 = load %struct.z_stream_s*, %struct.z_stream_s** %19, align 8
  %21 = icmp eq %struct.z_stream_s* %20, %0
  br i1 %21, label %22, label %112

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = add i32 %24, -16180
  %26 = icmp ult i32 %25, 32
  br i1 %26, label %27, label %112

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 0
  %31 = icmp eq i32 %24, 16190
  br i1 %30, label %33, label %32

32:                                               ; preds = %27
  br i1 %31, label %34, label %112

33:                                               ; preds = %27
  br i1 %31, label %34, label %42

34:                                               ; preds = %32, %33
  %35 = tail call i64 @Cr_z_adler32(i64 0, i8* null, i32 0) #6
  %36 = tail call i64 @Cr_z_adler32(i64 %35, i8* %1, i32 %2) #6
  %37 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 7
  %38 = load i64, i64* %37, align 8
  %39 = icmp eq i64 %36, %38
  br i1 %39, label %40, label %112

40:                                               ; preds = %34
  %41 = load %struct.inflate_state*, %struct.inflate_state** %15, align 8
  br label %42

42:                                               ; preds = %40, %33
  %43 = phi %struct.inflate_state* [ %41, %40 ], [ %16, %33 ]
  %44 = zext i32 %2 to i64
  %45 = getelementptr inbounds i8, i8* %1, i64 %44
  %46 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %43, i64 0, i32 14
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, null
  br i1 %48, label %49, label %59

49:                                               ; preds = %42
  %50 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %43, i64 0, i32 10
  %51 = load i32, i32* %50, align 8
  %52 = shl i32 1, %51
  %53 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %6, align 8
  %54 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 10
  %55 = load i8*, i8** %54, align 8
  %56 = add i32 %52, 16
  %57 = tail call i8* %53(i8* %55, i32 %56, i32 1) #6
  store i8* %57, i8** %46, align 8
  %58 = icmp eq i8* %57, null
  br i1 %58, label %109, label %59

59:                                               ; preds = %49, %42
  %60 = phi i8* [ %57, %49 ], [ %47, %42 ]
  %61 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %43, i64 0, i32 11
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %70

64:                                               ; preds = %59
  %65 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %43, i64 0, i32 10
  %66 = load i32, i32* %65, align 8
  %67 = shl i32 1, %66
  store i32 %67, i32* %61, align 4
  %68 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %43, i64 0, i32 13
  store i32 0, i32* %68, align 4
  %69 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %43, i64 0, i32 12
  store i32 0, i32* %69, align 8
  br label %70

70:                                               ; preds = %64, %59
  %71 = phi i32 [ %67, %64 ], [ %62, %59 ]
  %72 = icmp ugt i32 %71, %2
  br i1 %72, label %80, label %73

73:                                               ; preds = %70
  %74 = zext i32 %71 to i64
  %75 = sub nsw i64 0, %74
  %76 = getelementptr inbounds i8, i8* %45, i64 %75
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %60, i8* align 1 %76, i64 %74, i1 false) #6
  %77 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %43, i64 0, i32 13
  store i32 0, i32* %77, align 4
  %78 = load i32, i32* %61, align 4
  %79 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %43, i64 0, i32 12
  store i32 %78, i32* %79, align 8
  br label %110

80:                                               ; preds = %70
  %81 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %43, i64 0, i32 13
  %82 = load i32, i32* %81, align 4
  %83 = sub i32 %71, %82
  %84 = icmp ugt i32 %83, %2
  %85 = select i1 %84, i32 %2, i32 %83
  %86 = zext i32 %82 to i64
  %87 = getelementptr inbounds i8, i8* %60, i64 %86
  %88 = zext i32 %85 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %87, i8* align 1 %1, i64 %88, i1 false) #6
  %89 = sub i32 %2, %85
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %98, label %91

91:                                               ; preds = %80
  %92 = load i8*, i8** %46, align 8
  %93 = zext i32 %89 to i64
  %94 = sub nsw i64 0, %93
  %95 = getelementptr inbounds i8, i8* %45, i64 %94
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %92, i8* align 1 %95, i64 %93, i1 false) #6
  store i32 %89, i32* %81, align 4
  %96 = load i32, i32* %61, align 4
  %97 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %43, i64 0, i32 12
  store i32 %96, i32* %97, align 8
  br label %110

98:                                               ; preds = %80
  %99 = load i32, i32* %81, align 4
  %100 = add i32 %99, %85
  %101 = load i32, i32* %61, align 4
  %102 = icmp eq i32 %100, %101
  %103 = select i1 %102, i32 0, i32 %100
  store i32 %103, i32* %81, align 4
  %104 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %43, i64 0, i32 12
  %105 = load i32, i32* %104, align 8
  %106 = icmp ult i32 %105, %101
  br i1 %106, label %107, label %110

107:                                              ; preds = %98
  %108 = add i32 %105, %85
  store i32 %108, i32* %104, align 8
  br label %110

109:                                              ; preds = %49
  store i32 16210, i32* %23, align 8
  br label %112

110:                                              ; preds = %91, %107, %98, %73
  %111 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i64 0, i32 4
  store i32 1, i32* %111, align 4
  br label %112

112:                                              ; preds = %3, %5, %9, %13, %18, %34, %32, %22, %110, %109
  %113 = phi i32 [ -4, %109 ], [ 0, %110 ], [ -2, %22 ], [ -2, %32 ], [ -3, %34 ], [ -2, %18 ], [ -2, %13 ], [ -2, %9 ], [ -2, %5 ], [ -2, %3 ]
  ret i32 %113
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @Cr_z_inflateGetHeader(%struct.z_stream_s* readonly, %struct.Cr_z_gz_header_s*) local_unnamed_addr #0 {
  %3 = icmp eq %struct.z_stream_s* %0, null
  br i1 %3, label %34, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %6 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %5, align 8
  %7 = icmp eq i8* (i8*, i32, i32)* %6, null
  br i1 %7, label %34, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %10 = load void (i8*, i8*)*, void (i8*, i8*)** %9, align 8
  %11 = icmp eq void (i8*, i8*)* %10, null
  br i1 %11, label %34, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %14 = bitcast %struct.internal_state** %13 to %struct.inflate_state**
  %15 = load %struct.inflate_state*, %struct.inflate_state** %14, align 8
  %16 = icmp eq %struct.inflate_state* %15, null
  br i1 %16, label %34, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 0
  %19 = load %struct.z_stream_s*, %struct.z_stream_s** %18, align 8
  %20 = icmp eq %struct.z_stream_s* %19, %0
  br i1 %20, label %21, label %34

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = add i32 %23, -16180
  %25 = icmp ult i32 %24, 32
  br i1 %25, label %26, label %34

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 3
  %28 = load i32, i32* %27, align 8
  %29 = and i32 %28, 2
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 9
  store %struct.Cr_z_gz_header_s* %1, %struct.Cr_z_gz_header_s** %32, align 8
  %33 = getelementptr inbounds %struct.Cr_z_gz_header_s, %struct.Cr_z_gz_header_s* %1, i64 0, i32 12
  store i32 0, i32* %33, align 8
  br label %34

34:                                               ; preds = %2, %4, %8, %12, %17, %26, %21, %31
  %35 = phi i32 [ 0, %31 ], [ -2, %21 ], [ -2, %26 ], [ -2, %17 ], [ -2, %12 ], [ -2, %8 ], [ -2, %4 ], [ -2, %2 ]
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Cr_z_inflateSync(%struct.z_stream_s*) local_unnamed_addr #2 {
  %2 = alloca i32, align 4
  %3 = bitcast i32* %2 to [4 x i8]*
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #6
  %5 = icmp eq %struct.z_stream_s* %0, null
  store i32 -1431655766, i32* %2, align 4
  br i1 %5, label %190, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %8 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %7, align 8
  %9 = icmp eq i8* (i8*, i32, i32)* %8, null
  br i1 %9, label %190, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %12 = load void (i8*, i8*)*, void (i8*, i8*)** %11, align 8
  %13 = icmp eq void (i8*, i8*)* %12, null
  br i1 %13, label %190, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %16 = bitcast %struct.internal_state** %15 to %struct.inflate_state**
  %17 = load %struct.inflate_state*, %struct.inflate_state** %16, align 8
  %18 = icmp eq %struct.inflate_state* %17, null
  br i1 %18, label %190, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %17, i64 0, i32 0
  %21 = load %struct.z_stream_s*, %struct.z_stream_s** %20, align 8
  %22 = icmp eq %struct.z_stream_s* %21, %0
  br i1 %22, label %23, label %190

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %17, i64 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = add i32 %25, -16180
  %27 = icmp ult i32 %26, 32
  br i1 %27, label %28, label %190

28:                                               ; preds = %23
  %29 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %17, i64 0, i32 16
  %34 = load i32, i32* %33, align 8
  %35 = icmp ult i32 %34, 8
  br i1 %35, label %190, label %36

36:                                               ; preds = %32, %28
  %37 = icmp eq i32 %25, 16211
  br i1 %37, label %38, label %41

38:                                               ; preds = %36
  %39 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %17, i64 0, i32 27
  %40 = load i32, i32* %39, align 4
  br label %139

41:                                               ; preds = %36
  store i32 16211, i32* %24, align 8
  %42 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %17, i64 0, i32 16
  %43 = load i32, i32* %42, align 8
  %44 = and i32 %43, 7
  %45 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %17, i64 0, i32 15
  %46 = load i64, i64* %45, align 8
  %47 = zext i32 %44 to i64
  %48 = shl i64 %46, %47
  store i64 %48, i64* %45, align 8
  %49 = and i32 %43, -8
  store i32 %49, i32* %42, align 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %59, label %51

51:                                               ; preds = %41
  %52 = add i32 %49, -8
  %53 = lshr exact i32 %52, 3
  %54 = add nuw nsw i32 %53, 1
  %55 = and i32 %54, 3
  %56 = icmp ult i32 %52, 24
  br i1 %56, label %85, label %57

57:                                               ; preds = %51
  %58 = sub nsw i32 %54, %55
  br label %61

59:                                               ; preds = %41
  %60 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %17, i64 0, i32 27
  store i32 0, i32* %60, align 4
  br label %135

61:                                               ; preds = %61, %57
  %62 = phi i64 [ 0, %57 ], [ %79, %61 ]
  %63 = phi i64 [ %48, %57 ], [ %81, %61 ]
  %64 = phi i32 [ %49, %57 ], [ %82, %61 ]
  %65 = phi i32 [ %58, %57 ], [ %83, %61 ]
  %66 = trunc i64 %63 to i8
  %67 = or i64 %62, 1
  %68 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 %62
  store i8 %66, i8* %68, align 4
  %69 = lshr i64 %63, 8
  %70 = trunc i64 %69 to i8
  %71 = or i64 %62, 2
  %72 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 %67
  store i8 %70, i8* %72, align 1
  %73 = lshr i64 %63, 16
  %74 = trunc i64 %73 to i8
  %75 = or i64 %62, 3
  %76 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 %71
  store i8 %74, i8* %76, align 2
  %77 = lshr i64 %63, 24
  %78 = trunc i64 %77 to i8
  %79 = add nuw nsw i64 %62, 4
  %80 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 %75
  store i8 %78, i8* %80, align 1
  %81 = lshr i64 %63, 32
  %82 = add i32 %64, -32
  %83 = add i32 %65, -4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %61

85:                                               ; preds = %61, %51
  %86 = phi i64 [ undef, %51 ], [ %79, %61 ]
  %87 = phi i64 [ undef, %51 ], [ %81, %61 ]
  %88 = phi i32 [ undef, %51 ], [ %82, %61 ]
  %89 = phi i64 [ 0, %51 ], [ %79, %61 ]
  %90 = phi i64 [ %48, %51 ], [ %81, %61 ]
  %91 = phi i32 [ %49, %51 ], [ %82, %61 ]
  %92 = icmp eq i32 %55, 0
  br i1 %92, label %105, label %93

93:                                               ; preds = %85, %93
  %94 = phi i64 [ %99, %93 ], [ %89, %85 ]
  %95 = phi i64 [ %101, %93 ], [ %90, %85 ]
  %96 = phi i32 [ %102, %93 ], [ %91, %85 ]
  %97 = phi i32 [ %103, %93 ], [ %55, %85 ]
  %98 = trunc i64 %95 to i8
  %99 = add nuw nsw i64 %94, 1
  %100 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 %94
  store i8 %98, i8* %100, align 1
  %101 = lshr i64 %95, 8
  %102 = add i32 %96, -8
  %103 = add i32 %97, -1
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %93, !llvm.loop !21

105:                                              ; preds = %93, %85
  %106 = phi i64 [ %86, %85 ], [ %99, %93 ]
  %107 = phi i64 [ %87, %85 ], [ %101, %93 ]
  %108 = phi i32 [ %88, %85 ], [ %102, %93 ]
  %109 = trunc i64 %106 to i32
  store i64 %107, i64* %45, align 8
  store i32 %108, i32* %42, align 8
  %110 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %17, i64 0, i32 27
  store i32 0, i32* %110, align 4
  %111 = icmp eq i32 %109, 0
  br i1 %111, label %135, label %112

112:                                              ; preds = %105
  %113 = and i64 %106, 4294967295
  br label %114

114:                                              ; preds = %129, %112
  %115 = phi i64 [ 0, %112 ], [ %131, %129 ]
  %116 = phi i32 [ 0, %112 ], [ %130, %129 ]
  %117 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 %115
  %118 = load i8, i8* %117, align 1
  %119 = zext i8 %118 to i32
  %120 = icmp ult i32 %116, 2
  %121 = select i1 %120, i32 0, i32 255
  %122 = icmp eq i32 %121, %119
  br i1 %122, label %123, label %125

123:                                              ; preds = %114
  %124 = add nuw nsw i32 %116, 1
  br label %129

125:                                              ; preds = %114
  %126 = icmp eq i8 %118, 0
  %127 = sub nuw nsw i32 4, %116
  %128 = select i1 %126, i32 %127, i32 0
  br label %129

129:                                              ; preds = %125, %123
  %130 = phi i32 [ %124, %123 ], [ %128, %125 ]
  %131 = add nuw nsw i64 %115, 1
  %132 = icmp ult i64 %131, %113
  %133 = icmp ult i32 %130, 4
  %134 = and i1 %132, %133
  br i1 %134, label %114, label %135

135:                                              ; preds = %129, %59, %105
  %136 = phi i32* [ %110, %105 ], [ %60, %59 ], [ %110, %129 ]
  %137 = phi i32 [ 0, %105 ], [ 0, %59 ], [ %130, %129 ]
  store i32 %137, i32* %136, align 4
  %138 = load i32, i32* %29, align 8
  br label %139

139:                                              ; preds = %38, %135
  %140 = phi i32 [ %40, %38 ], [ %137, %135 ]
  %141 = phi i32 [ %30, %38 ], [ %138, %135 ]
  %142 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %17, i64 0, i32 27
  %143 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 0
  %144 = load i8*, i8** %143, align 8
  %145 = icmp ne i32 %141, 0
  %146 = icmp ult i32 %140, 4
  %147 = and i1 %145, %146
  br i1 %147, label %148, label %173

148:                                              ; preds = %139
  %149 = zext i32 %141 to i64
  br label %150

150:                                              ; preds = %165, %148
  %151 = phi i64 [ 0, %148 ], [ %167, %165 ]
  %152 = phi i32 [ %140, %148 ], [ %166, %165 ]
  %153 = getelementptr inbounds i8, i8* %144, i64 %151
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = icmp ult i32 %152, 2
  %157 = select i1 %156, i32 0, i32 255
  %158 = icmp eq i32 %157, %155
  br i1 %158, label %159, label %161

159:                                              ; preds = %150
  %160 = add nuw nsw i32 %152, 1
  br label %165

161:                                              ; preds = %150
  %162 = icmp eq i8 %154, 0
  %163 = sub nuw nsw i32 4, %152
  %164 = select i1 %162, i32 %163, i32 0
  br label %165

165:                                              ; preds = %161, %159
  %166 = phi i32 [ %160, %159 ], [ %164, %161 ]
  %167 = add nuw nsw i64 %151, 1
  %168 = icmp ult i64 %167, %149
  %169 = icmp ult i32 %166, 4
  %170 = and i1 %168, %169
  br i1 %170, label %150, label %171

171:                                              ; preds = %165
  %172 = trunc i64 %167 to i32
  br label %173

173:                                              ; preds = %139, %171
  %174 = phi i32 [ %140, %139 ], [ %166, %171 ]
  %175 = phi i32 [ 0, %139 ], [ %172, %171 ]
  store i32 %174, i32* %142, align 4
  %176 = load i32, i32* %29, align 8
  %177 = sub i32 %176, %175
  store i32 %177, i32* %29, align 8
  %178 = load i8*, i8** %143, align 8
  %179 = zext i32 %175 to i64
  %180 = getelementptr inbounds i8, i8* %178, i64 %179
  store i8* %180, i8** %143, align 8
  %181 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 2
  %182 = load i64, i64* %181, align 8
  %183 = add i64 %182, %179
  store i64 %183, i64* %181, align 8
  %184 = load i32, i32* %142, align 4
  %185 = icmp eq i32 %184, 4
  br i1 %185, label %186, label %190

186:                                              ; preds = %173
  %187 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 5
  %188 = load i64, i64* %187, align 8
  %189 = tail call i32 @Cr_z_inflateReset(%struct.z_stream_s* nonnull %0)
  store i64 %183, i64* %181, align 8
  store i64 %188, i64* %187, align 8
  store i32 16191, i32* %24, align 8
  br label %190

190:                                              ; preds = %1, %6, %10, %14, %19, %173, %32, %23, %186
  %191 = phi i32 [ 0, %186 ], [ -2, %23 ], [ -5, %32 ], [ -3, %173 ], [ -2, %19 ], [ -2, %14 ], [ -2, %10 ], [ -2, %6 ], [ -2, %1 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #6
  ret i32 %191
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @Cr_z_inflateSyncPoint(%struct.z_stream_s* readonly) local_unnamed_addr #5 {
  %2 = icmp eq %struct.z_stream_s* %0, null
  br i1 %2, label %32, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %5 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %4, align 8
  %6 = icmp eq i8* (i8*, i32, i32)* %5, null
  br i1 %6, label %32, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %9 = load void (i8*, i8*)*, void (i8*, i8*)** %8, align 8
  %10 = icmp eq void (i8*, i8*)* %9, null
  br i1 %10, label %32, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %13 = bitcast %struct.internal_state** %12 to %struct.inflate_state**
  %14 = load %struct.inflate_state*, %struct.inflate_state** %13, align 8
  %15 = icmp eq %struct.inflate_state* %14, null
  br i1 %15, label %32, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 0
  %18 = load %struct.z_stream_s*, %struct.z_stream_s** %17, align 8
  %19 = icmp eq %struct.z_stream_s* %18, %0
  br i1 %19, label %20, label %32

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = add i32 %22, -16180
  %24 = icmp ult i32 %23, 32
  br i1 %24, label %25, label %32

25:                                               ; preds = %20
  %26 = icmp eq i32 %22, 16193
  br i1 %26, label %27, label %32

27:                                               ; preds = %25
  %28 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 16
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 0
  %31 = zext i1 %30 to i32
  br label %32

32:                                               ; preds = %1, %3, %7, %11, %16, %25, %27, %20
  %33 = phi i32 [ -2, %20 ], [ 0, %25 ], [ %31, %27 ], [ -2, %16 ], [ -2, %11 ], [ -2, %7 ], [ -2, %3 ], [ -2, %1 ]
  ret i32 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @Cr_z_inflateCopy(%struct.z_stream_s*, %struct.z_stream_s* readonly) local_unnamed_addr #2 {
  %3 = icmp eq %struct.z_stream_s* %1, null
  br i1 %3, label %105, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %1, i64 0, i32 8
  %6 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %5, align 8
  %7 = icmp eq i8* (i8*, i32, i32)* %6, null
  br i1 %7, label %105, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %1, i64 0, i32 9
  %10 = load void (i8*, i8*)*, void (i8*, i8*)** %9, align 8
  %11 = icmp eq void (i8*, i8*)* %10, null
  br i1 %11, label %105, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %1, i64 0, i32 7
  %14 = bitcast %struct.internal_state** %13 to %struct.inflate_state**
  %15 = load %struct.inflate_state*, %struct.inflate_state** %14, align 8
  %16 = icmp eq %struct.inflate_state* %15, null
  br i1 %16, label %105, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 0
  %19 = load %struct.z_stream_s*, %struct.z_stream_s** %18, align 8
  %20 = icmp eq %struct.z_stream_s* %19, %1
  br i1 %20, label %21, label %105

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = add i32 %23, -16180
  %25 = icmp ugt i32 %24, 31
  %26 = icmp eq %struct.z_stream_s* %0, null
  %27 = or i1 %26, %25
  br i1 %27, label %105, label %28

28:                                               ; preds = %21
  %29 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %1, i64 0, i32 10
  %30 = load i8*, i8** %29, align 8
  %31 = tail call i8* %6(i8* %30, i32 1, i32 7160) #6
  %32 = icmp eq i8* %31, null
  br i1 %32, label %105, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 14
  %35 = load i8*, i8** %34, align 8
  %36 = icmp eq i8* %35, null
  br i1 %36, label %48, label %37

37:                                               ; preds = %33
  %38 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %5, align 8
  %39 = load i8*, i8** %29, align 8
  %40 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 10
  %41 = load i32, i32* %40, align 8
  %42 = shl i32 1, %41
  %43 = tail call i8* %38(i8* %39, i32 %42, i32 1) #6
  %44 = icmp eq i8* %43, null
  br i1 %44, label %45, label %48

45:                                               ; preds = %37
  %46 = load void (i8*, i8*)*, void (i8*, i8*)** %9, align 8
  %47 = load i8*, i8** %29, align 8
  tail call void %46(i8* %47, i8* nonnull %31) #6
  br label %105

48:                                               ; preds = %33, %37
  %49 = phi i8* [ %43, %37 ], [ null, %33 ]
  %50 = bitcast %struct.z_stream_s* %0 to i8*
  %51 = bitcast %struct.z_stream_s* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* nonnull align 1 %51, i64 112, i1 false)
  %52 = bitcast %struct.inflate_state* %15 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %31, i8* nonnull align 1 %52, i64 7160, i1 false)
  %53 = bitcast i8* %31 to %struct.z_stream_s**
  store %struct.z_stream_s* %0, %struct.z_stream_s** %53, align 8
  %54 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 20
  %55 = load %struct.code*, %struct.code** %54, align 8
  %56 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 31, i64 0
  %57 = icmp ult %struct.code* %55, %56
  %58 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 31, i64 1443
  %59 = icmp ugt %struct.code* %55, %58
  %60 = or i1 %57, %59
  br i1 %60, label %61, label %63

61:                                               ; preds = %48
  %62 = ptrtoint %struct.code* %56 to i64
  br label %81

63:                                               ; preds = %48
  %64 = getelementptr inbounds i8, i8* %31, i64 1368
  %65 = bitcast i8* %64 to %struct.code*
  %66 = ptrtoint %struct.code* %55 to i64
  %67 = ptrtoint %struct.code* %56 to i64
  %68 = sub i64 %66, %67
  %69 = ashr exact i64 %68, 2
  %70 = getelementptr inbounds %struct.code, %struct.code* %65, i64 %69
  %71 = getelementptr inbounds i8, i8* %31, i64 104
  %72 = bitcast i8* %71 to %struct.code**
  store %struct.code* %70, %struct.code** %72, align 8
  %73 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 21
  %74 = bitcast %struct.code** %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = sub i64 %75, %67
  %77 = ashr exact i64 %76, 2
  %78 = getelementptr inbounds %struct.code, %struct.code* %65, i64 %77
  %79 = getelementptr inbounds i8, i8* %31, i64 112
  %80 = bitcast i8* %79 to %struct.code**
  store %struct.code* %78, %struct.code** %80, align 8
  br label %81

81:                                               ; preds = %61, %63
  %82 = phi i64 [ %62, %61 ], [ %67, %63 ]
  %83 = getelementptr inbounds i8, i8* %31, i64 1368
  %84 = bitcast i8* %83 to %struct.code*
  %85 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 28
  %86 = bitcast %struct.code** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %87, %82
  %89 = ashr exact i64 %88, 2
  %90 = getelementptr inbounds %struct.code, %struct.code* %84, i64 %89
  %91 = getelementptr inbounds i8, i8* %31, i64 144
  %92 = bitcast i8* %91 to %struct.code**
  store %struct.code* %90, %struct.code** %92, align 8
  %93 = icmp eq i8* %49, null
  br i1 %93, label %100, label %94

94:                                               ; preds = %81
  %95 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 10
  %96 = load i32, i32* %95, align 8
  %97 = shl i32 1, %96
  %98 = load i8*, i8** %34, align 8
  %99 = zext i32 %97 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %49, i8* align 1 %98, i64 %99, i1 false)
  br label %100

100:                                              ; preds = %81, %94
  %101 = getelementptr inbounds i8, i8* %31, i64 72
  %102 = bitcast i8* %101 to i8**
  store i8* %49, i8** %102, align 8
  %103 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %104 = bitcast %struct.internal_state** %103 to i8**
  store i8* %31, i8** %104, align 8
  br label %105

105:                                              ; preds = %2, %4, %8, %12, %17, %28, %21, %100, %45
  %106 = phi i32 [ -4, %45 ], [ 0, %100 ], [ -2, %21 ], [ -4, %28 ], [ -2, %17 ], [ -2, %12 ], [ -2, %8 ], [ -2, %4 ], [ -2, %2 ]
  ret i32 %106
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @Cr_z_inflateUndermine(%struct.z_stream_s* readonly, i32) local_unnamed_addr #0 {
  %3 = icmp eq %struct.z_stream_s* %0, null
  br i1 %3, label %28, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %6 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %5, align 8
  %7 = icmp eq i8* (i8*, i32, i32)* %6, null
  br i1 %7, label %28, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %10 = load void (i8*, i8*)*, void (i8*, i8*)** %9, align 8
  %11 = icmp eq void (i8*, i8*)* %10, null
  br i1 %11, label %28, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %14 = bitcast %struct.internal_state** %13 to %struct.inflate_state**
  %15 = load %struct.inflate_state*, %struct.inflate_state** %14, align 8
  %16 = icmp eq %struct.inflate_state* %15, null
  br i1 %16, label %28, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 0
  %19 = load %struct.z_stream_s*, %struct.z_stream_s** %18, align 8
  %20 = icmp eq %struct.z_stream_s* %19, %0
  br i1 %20, label %21, label %28

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = add i32 %23, -16180
  %25 = icmp ult i32 %24, 32
  br i1 %25, label %26, label %28

26:                                               ; preds = %21
  %27 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 32
  store i32 1, i32* %27, align 8
  br label %28

28:                                               ; preds = %2, %4, %8, %12, %17, %21, %26
  %29 = phi i32 [ -3, %26 ], [ -2, %21 ], [ -2, %17 ], [ -2, %12 ], [ -2, %8 ], [ -2, %4 ], [ -2, %2 ]
  ret i32 %29
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @Cr_z_inflateValidate(%struct.z_stream_s* readonly, i32) local_unnamed_addr #0 {
  %3 = icmp eq %struct.z_stream_s* %0, null
  br i1 %3, label %33, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %6 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %5, align 8
  %7 = icmp eq i8* (i8*, i32, i32)* %6, null
  br i1 %7, label %33, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %10 = load void (i8*, i8*)*, void (i8*, i8*)** %9, align 8
  %11 = icmp eq void (i8*, i8*)* %10, null
  br i1 %11, label %33, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %14 = bitcast %struct.internal_state** %13 to %struct.inflate_state**
  %15 = load %struct.inflate_state*, %struct.inflate_state** %14, align 8
  %16 = icmp eq %struct.inflate_state* %15, null
  br i1 %16, label %33, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 0
  %19 = load %struct.z_stream_s*, %struct.z_stream_s** %18, align 8
  %20 = icmp eq %struct.z_stream_s* %19, %0
  br i1 %20, label %21, label %33

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  %24 = add i32 %23, -16180
  %25 = icmp ult i32 %24, 32
  br i1 %25, label %26, label %33

26:                                               ; preds = %21
  %27 = icmp eq i32 %1, 0
  %28 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, -5
  %31 = or i32 %29, 4
  %32 = select i1 %27, i32 %30, i32 %31
  store i32 %32, i32* %28, align 8
  br label %33

33:                                               ; preds = %2, %4, %8, %12, %17, %21, %26
  %34 = phi i32 [ 0, %26 ], [ -2, %21 ], [ -2, %17 ], [ -2, %12 ], [ -2, %8 ], [ -2, %4 ], [ -2, %2 ]
  ret i32 %34
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @Cr_z_inflateMark(%struct.z_stream_s* readonly) local_unnamed_addr #5 {
  %2 = icmp eq %struct.z_stream_s* %0, null
  br i1 %2, label %43, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %5 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %4, align 8
  %6 = icmp eq i8* (i8*, i32, i32)* %5, null
  br i1 %6, label %43, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %9 = load void (i8*, i8*)*, void (i8*, i8*)** %8, align 8
  %10 = icmp eq void (i8*, i8*)* %9, null
  br i1 %10, label %43, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %13 = bitcast %struct.internal_state** %12 to %struct.inflate_state**
  %14 = load %struct.inflate_state*, %struct.inflate_state** %13, align 8
  %15 = icmp eq %struct.inflate_state* %14, null
  br i1 %15, label %43, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 0
  %18 = load %struct.z_stream_s*, %struct.z_stream_s** %17, align 8
  %19 = icmp eq %struct.z_stream_s* %18, %0
  br i1 %19, label %20, label %43

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = add i32 %22, -16180
  %24 = icmp ult i32 %23, 32
  br i1 %24, label %25, label %43

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 33
  %27 = load i32, i32* %26, align 4
  %28 = sext i32 %27 to i64
  %29 = shl nsw i64 %28, 16
  switch i32 %22, label %39 [
    i32 16195, label %30
    i32 16204, label %33
  ]

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 17
  %32 = load i32, i32* %31, align 4
  br label %39

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 34
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 17
  %37 = load i32, i32* %36, align 4
  %38 = sub i32 %35, %37
  br label %39

39:                                               ; preds = %25, %33, %30
  %40 = phi i32 [ %32, %30 ], [ %38, %33 ], [ 0, %25 ]
  %41 = zext i32 %40 to i64
  %42 = add nsw i64 %29, %41
  br label %43

43:                                               ; preds = %1, %3, %7, %11, %16, %20, %39
  %44 = phi i64 [ %42, %39 ], [ -65536, %20 ], [ -65536, %16 ], [ -65536, %11 ], [ -65536, %7 ], [ -65536, %3 ], [ -65536, %1 ]
  ret i64 %44
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @Cr_z_inflateCodesUsed(%struct.z_stream_s* readonly) local_unnamed_addr #5 {
  %2 = icmp eq %struct.z_stream_s* %0, null
  br i1 %2, label %33, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 8
  %5 = load i8* (i8*, i32, i32)*, i8* (i8*, i32, i32)** %4, align 8
  %6 = icmp eq i8* (i8*, i32, i32)* %5, null
  br i1 %6, label %33, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 9
  %9 = load void (i8*, i8*)*, void (i8*, i8*)** %8, align 8
  %10 = icmp eq void (i8*, i8*)* %9, null
  br i1 %10, label %33, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %13 = bitcast %struct.internal_state** %12 to %struct.inflate_state**
  %14 = load %struct.inflate_state*, %struct.inflate_state** %13, align 8
  %15 = icmp eq %struct.inflate_state* %14, null
  br i1 %15, label %33, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 0
  %18 = load %struct.z_stream_s*, %struct.z_stream_s** %17, align 8
  %19 = icmp eq %struct.z_stream_s* %18, %0
  br i1 %19, label %20, label %33

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = add i32 %22, -16180
  %24 = icmp ult i32 %23, 32
  br i1 %24, label %25, label %33

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 28
  %27 = bitcast %struct.code** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i64 0, i32 31, i64 0
  %30 = ptrtoint %struct.code* %29 to i64
  %31 = sub i64 %28, %30
  %32 = ashr exact i64 %31, 2
  br label %33

33:                                               ; preds = %1, %3, %7, %11, %16, %20, %25
  %34 = phi i64 [ %32, %25 ], [ -1, %20 ], [ -1, %16 ], [ -1, %11 ], [ -1, %7 ], [ -1, %3 ], [ -1, %1 ]
  ret i64 %34
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = !{!6}
!6 = distinct !{!6, !7, !"chunkcopy_safe: argument 0"}
!7 = distinct !{!7, !"chunkcopy_safe"}
!8 = distinct !{!8, !3}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !15}
!19 = distinct !{!19, !3}
!20 = distinct !{!20, !3}
!21 = distinct !{!21, !3}
