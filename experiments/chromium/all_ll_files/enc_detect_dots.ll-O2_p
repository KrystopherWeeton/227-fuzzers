; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_detect_dots.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_detect_dots.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.hwy::N_SSE4::Simd" = type { i8 }
%"struct.hwy::N_AVX2::Simd" = type { i8 }
%"struct.hwy::N_AVX3::Simd" = type { i8 }
%"struct.hwy::N_SCALAR::Simd" = type { i8 }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.46" }
%"struct.std::__1::__atomic_base.46" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.jxl::WeightsSeparable5" = type { [12 x float], [12 x float] }
%"struct.jxl::(anonymous namespace)::ConnectedComponent" = type { %"class.jxl::Rect", %"class.std::__1::vector.32", float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.jxl::(anonymous namespace)::Pixel"* }
%"struct.jxl::(anonymous namespace)::Pixel" = type { i32, i32 }
%"struct.jxl::(anonymous namespace)::GaussianEllipse" = type { double, double, double, double, double, %"struct.std::__1::array", double, double, double, double, %"struct.std::__1::array", i64, %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [3 x double] }
%"class.jxl::ThreadPool::RunCallState" = type { i32 (i64)*, %class.anon* }
%class.anon = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Plane"*, %"struct.hwy::N_SSE4::Simd"*, %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"* }
%"class.hwy::N_SSE4::Vec128" = type { <4 x float> }
%"class.jxl::ThreadPool::RunCallState.56" = type { i32 (i64)*, %class.anon.1* }
%class.anon.1 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Plane"*, %"struct.hwy::N_AVX2::Simd"*, %"class.hwy::N_AVX2::Vec256"*, %"class.hwy::N_AVX2::Vec256"*, %"class.hwy::N_AVX2::Vec256"* }
%"class.hwy::N_AVX2::Vec256" = type { <8 x float> }
%"class.jxl::ThreadPool::RunCallState.57" = type { i32 (i64)*, %class.anon.2* }
%class.anon.2 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Plane"*, %"struct.hwy::N_AVX3::Simd"*, %"class.hwy::N_AVX3::Vec512"*, %"class.hwy::N_AVX3::Vec512"*, %"class.hwy::N_AVX3::Vec512"* }
%"class.hwy::N_AVX3::Vec512" = type { <16 x float> }
%"class.jxl::ThreadPool::RunCallState.58" = type { i32 (i64)*, %class.anon.3* }
%class.anon.3 = type { %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::Plane"*, %"struct.hwy::N_SCALAR::Simd"*, %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"* }
%"struct.hwy::N_SCALAR::Vec1" = type { float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.25" }
%"struct.std::__1::pair" = type { %"struct.jxl::QuantizedPatch", %"class.std::__1::vector.17" }
%"struct.jxl::QuantizedPatch" = type { i64, i64, [3 x %"class.std::__1::vector.5"], [3 x %"class.std::__1::vector.10"] }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { i8*, i8*, %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i8* }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { float*, float*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { float* }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"struct.std::__1::pair.19"*, %"struct.std::__1::pair.19"*, %"class.std::__1::__compressed_pair.20" }
%"struct.std::__1::pair.19" = type { i32, i32 }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.std::__1::pair.19"* }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::pair"* }
%"struct.jxl::GaussianDetectParams" = type { double, double, i32, double, double, double, double, i64, i64, i64, i64 }
%"struct.jxl::EllipseQuantParams" = type { i64, i64, i64, double, double, i64, i64, %"struct.std::__1::array", %"struct.std::__1::array", %"struct.std::__1::array.4", i8, float, float }
%"struct.std::__1::array.4" = type { [3 x i64] }
%"class.jxl::Plane.54" = type { %"struct.jxl::PlaneBase" }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"struct.jxl::(anonymous namespace)::ConnectedComponent"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3jxl10ThreadPool14ReturnTrueInitEm = comdat any

$_ZNSt3__16vectorINS_4pairIN3jxl14QuantizedPatchENS0_INS1_IjjEENS_9allocatorIS4_EEEEEENS5_IS8_EEE24__emplace_back_slow_pathIJEEEvDpOT_ = comdat any

$_ZN3jxl14QuantizedPatchC2Ev = comdat any

$_ZNSt3__16vectorIaNS_9allocatorIaEEE8__appendEm = comdat any

$_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm = comdat any

@_ZZN3jxl6N_SSE422SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolEE1d = internal constant %"struct.hwy::N_SSE4::Simd" undef, align 1
@.str = private unnamed_addr constant [19 x i8] c"ComputeEnergyImage\00", align 1
@_ZZN3jxl6N_AVX222SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolEE1d = internal constant %"struct.hwy::N_AVX2::Simd" undef, align 1
@_ZZN3jxl6N_AVX322SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolEE1d = internal constant %"struct.hwy::N_AVX3::Simd" undef, align 1
@_ZZN3jxl8N_SCALAR22SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolEE1d = internal constant %"struct.hwy::N_SCALAR::Simd" undef, align 1
@_ZN3jxlL42SumOfSquareDifferencesHighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)*] [void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)* @_ZN3hwy13FunctionCacheIN3jxl5PlaneIfEEJRKNS1_6Image3IfEES7_PNS1_10ThreadPoolEEE13ChooseAndCallIXadL_ZNS1_L42SumOfSquareDifferencesHighwayDispatchTableEEEEES3_S7_S7_S9_, void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)* @_ZN3jxl6N_AVX322SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolE, void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)* @_ZN3jxl6N_AVX222SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolE, void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)* @_ZN3jxl6N_SSE422SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolE, void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)* null, void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)* @_ZN3jxl8N_SCALAR22SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolE], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@_ZZN3jxl12_GLOBAL__N_129WeightsSeparable5Gaussian0_65EvE7weights = internal constant %"struct.jxl::WeightsSeparable5" { [12 x float] [float 0x3FE1DDAF00000000, float 0x3FE1DDAF00000000, float 0x3FE1DDAF00000000, float 0x3FE1DDAF00000000, float 0x3FCAEE3920000000, float 0x3FCAEE3920000000, float 0x3FCAEE3920000000, float 0x3FCAEE3920000000, float 0x3F85664900000000, float 0x3F85664900000000, float 0x3F85664900000000, float 0x3F85664900000000], [12 x float] [float 0x3FE1DDAF00000000, float 0x3FE1DDAF00000000, float 0x3FE1DDAF00000000, float 0x3FE1DDAF00000000, float 0x3FCAEE3920000000, float 0x3FCAEE3920000000, float 0x3FCAEE3920000000, float 0x3FCAEE3920000000, float 0x3F85664900000000, float 0x3F85664900000000, float 0x3F85664900000000, float 0x3F85664900000000] }, align 4
@_ZZN3jxl12_GLOBAL__N_126WeightsSeparable5Gaussian3EvE7weights = internal constant %"struct.jxl::WeightsSeparable5" { [12 x float] [float 0x3FCC759260000000, float 0x3FCC759260000000, float 0x3FCC759260000000, float 0x3FCC759260000000, float 0x3FCAEF6720000000, float 0x3FCAEF6720000000, float 0x3FCAEF6720000000, float 0x3FCAEF6720000000, float 0x3FC6D5CFA0000000, float 0x3FC6D5CFA0000000, float 0x3FC6D5CFA0000000, float 0x3FC6D5CFA0000000], [12 x float] [float 0x3FCC759260000000, float 0x3FCC759260000000, float 0x3FCC759260000000, float 0x3FCC759260000000, float 0x3FCAEF6720000000, float 0x3FCAEF6720000000, float 0x3FCAEF6720000000, float 0x3FCAEF6720000000, float 0x3FC6D5CFA0000000, float 0x3FC6D5CFA0000000, float 0x3FC6D5CFA0000000, float 0x3FC6D5CFA0000000] }, align 4
@__const._ZN3jxl12_GLOBAL__N_16FindCCERKNS_5PlaneIfEEddjd.cc = private unnamed_addr constant %"struct.jxl::(anonymous namespace)::ConnectedComponent" { %"class.jxl::Rect" { i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206, i64 -6148914691236517206 }, %"class.std::__1::vector.32" { %"class.std::__1::__vector_base.33" { %"struct.jxl::(anonymous namespace)::Pixel"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::(anonymous namespace)::Pixel"*), %"struct.jxl::(anonymous namespace)::Pixel"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::(anonymous namespace)::Pixel"*), %"class.std::__1::__compressed_pair.34" { %"struct.std::__1::__compressed_pair_elem.35" { %"struct.jxl::(anonymous namespace)::Pixel"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::(anonymous namespace)::Pixel"*) } } } }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %"struct.jxl::(anonymous namespace)::Pixel" { i32 -1431655766, i32 -1431655766 } }, align 8
@.str.1 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"SameSize(from, *to)\00", align 1
@_ZZN3jxl12_GLOBAL__N_116ExtractComponentEPNS_5PlaneIfEEPNSt3__16vectorINS0_5PixelENS4_9allocatorIS6_EEEERKS6_dE9neighbors = internal global %"class.std::__1::vector.32" zeroinitializer, align 8
@_ZGVZN3jxl12_GLOBAL__N_116ExtractComponentEPNS_5PlaneIfEEPNSt3__16vectorINS0_5PixelENS4_9allocatorIS6_EEEERKS6_dE9neighbors = internal global i64 0, align 8
@.ref.tmp = private unnamed_addr constant [8 x %"struct.jxl::(anonymous namespace)::Pixel"] [%"struct.jxl::(anonymous namespace)::Pixel" { i32 1, i32 -1 }, %"struct.jxl::(anonymous namespace)::Pixel" { i32 1, i32 0 }, %"struct.jxl::(anonymous namespace)::Pixel" { i32 1, i32 1 }, %"struct.jxl::(anonymous namespace)::Pixel" { i32 0, i32 -1 }, %"struct.jxl::(anonymous namespace)::Pixel" { i32 0, i32 1 }, %"struct.jxl::(anonymous namespace)::Pixel" { i32 -1, i32 -1 }, %"struct.jxl::(anonymous namespace)::Pixel" { i32 -1, i32 1 }, %"struct.jxl::(anonymous namespace)::Pixel" { i32 1, i32 0 }], align 4
@__dso_handle = external hidden global i8
@.str.5 = private unnamed_addr constant [56 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_detect_dots.cc\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"!pixels.empty()\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [81 x i8] c"ellipse.angle >= 0 && ellipse.angle <= kPi && ellipse.sigma_x >= ellipse.sigma_y\00", align 1
@__const._ZN3jxl12_GLOBAL__N_115FitGaussianFastERKNS0_18ConnectedComponentERKNS_5PlaneIfEERKNS_6Image3IfEESB_.ans = private unnamed_addr constant %"struct.jxl::(anonymous namespace)::GaussianEllipse" { double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, %"struct.std::__1::array" { [3 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF] }, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, %"struct.std::__1::array" { [3 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF] }, i64 -6148914691236517206, %"struct.std::__1::array" { [3 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF] } }, align 8
@.str.9 = private unnamed_addr constant [6 x i8] c"N > 0\00", align 1
@_ZZN3jxl12_GLOBAL__N_116ComputeDotLossesEPNS0_15GaussianEllipseERKNS0_18ConnectedComponentERKNS_6Image3IfEES9_E12channelGains = internal unnamed_addr constant %"struct.std::__1::array" { [3 x double] [double 1.000000e+00, double 1.000000e+00, double 1.000000e+00] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE422SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::ThreadPool"* readonly) #0 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca %"class.hwy::N_SSE4::Vec128", align 16
  %10 = alloca %"class.hwy::N_SSE4::Vec128", align 16
  %11 = alloca %"class.hwy::N_SSE4::Vec128", align 16
  %12 = alloca %class.anon, align 8
  %13 = bitcast %"class.hwy::N_SSE4::Vec128"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #8
  %14 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %9, i64 0, i32 0
  store <4 x float> zeroinitializer, <4 x float>* %14, align 16
  %15 = bitcast %"class.hwy::N_SSE4::Vec128"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #8
  %16 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %10, i64 0, i32 0
  store <4 x float> <float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01>, <4 x float>* %16, align 16
  %17 = bitcast %"class.hwy::N_SSE4::Vec128"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #8
  %18 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %11, i64 0, i32 0
  store <4 x float> zeroinitializer, <4 x float>* %18, align 16
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 0
  %20 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 -86, i64 32, i1 false)
  %21 = load i32, i32* %19, align 8
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %26, i64 %22, i64 %25, i64 4) #8
  %27 = load i32, i32* %23, align 4
  %28 = bitcast %class.anon* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %28) #8
  %29 = getelementptr inbounds %class.anon, %class.anon* %12, i64 0, i32 0
  store %"class.jxl::Image3"* %1, %"class.jxl::Image3"** %29, align 8
  %30 = getelementptr inbounds %class.anon, %class.anon* %12, i64 0, i32 1
  store %"class.jxl::Image3"* %2, %"class.jxl::Image3"** %30, align 8
  %31 = getelementptr inbounds %class.anon, %class.anon* %12, i64 0, i32 2
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %31, align 8
  %32 = getelementptr inbounds %class.anon, %class.anon* %12, i64 0, i32 3
  store %"struct.hwy::N_SSE4::Simd"* @_ZZN3jxl6N_SSE422SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolEE1d, %"struct.hwy::N_SSE4::Simd"** %32, align 8
  %33 = getelementptr inbounds %class.anon, %class.anon* %12, i64 0, i32 4
  store %"class.hwy::N_SSE4::Vec128"* %9, %"class.hwy::N_SSE4::Vec128"** %33, align 8
  %34 = getelementptr inbounds %class.anon, %class.anon* %12, i64 0, i32 5
  store %"class.hwy::N_SSE4::Vec128"* %10, %"class.hwy::N_SSE4::Vec128"** %34, align 8
  %35 = getelementptr inbounds %class.anon, %class.anon* %12, i64 0, i32 6
  store %"class.hwy::N_SSE4::Vec128"* %11, %"class.hwy::N_SSE4::Vec128"** %35, align 8
  %36 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), double* nonnull %7) #8
  %37 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %37, label %38, label %49

38:                                               ; preds = %4
  %39 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #8
  %40 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %41 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %40, align 8
  %42 = bitcast i8** %41 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %42, align 8
  %43 = icmp eq i32 %27, 0
  br i1 %43, label %60, label %44

44:                                               ; preds = %38
  %45 = bitcast %"class.jxl::ThreadPool::RunCallState"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %5, i64 0, i32 0
  %47 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %46, align 8
  store %class.anon* %12, %class.anon** %47, align 8
  %48 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %39, i8* nonnull %45, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE422SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE422SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_0E12CallDataFuncEPvjm", i32 0, i32 %27) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #8
  br label %60

49:                                               ; preds = %4
  %50 = icmp eq i32 %27, 0
  br i1 %50, label %62, label %51

51:                                               ; preds = %49
  %52 = bitcast %"class.jxl::ThreadPool::RunCallState"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #8
  %53 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %6, i64 0, i32 0
  %54 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %53, align 8
  store %class.anon* %12, %class.anon** %54, align 8
  %55 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %56 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %55, align 8
  %57 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %58 = load i8*, i8** %57, align 8
  %59 = call i32 %56(i8* %58, i8* nonnull %52, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE422SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_0E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE422SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_0E12CallDataFuncEPvjm", i32 0, i32 %27) #8
  br label %60

60:                                               ; preds = %38, %44, %51
  %61 = phi i8* [ %52, %51 ], [ %39, %44 ], [ %39, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %61) #8
  br label %62

62:                                               ; preds = %60, %49
  %63 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), double %63) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %28) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX222SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::ThreadPool"* readonly) #2 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.56", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.56", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca %"class.hwy::N_AVX2::Vec256", align 32
  %10 = alloca %"class.hwy::N_AVX2::Vec256", align 32
  %11 = alloca %"class.hwy::N_AVX2::Vec256", align 32
  %12 = alloca %class.anon.1, align 8
  %13 = bitcast %"class.hwy::N_AVX2::Vec256"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #8
  %14 = getelementptr inbounds %"class.hwy::N_AVX2::Vec256", %"class.hwy::N_AVX2::Vec256"* %9, i64 0, i32 0
  store <8 x float> zeroinitializer, <8 x float>* %14, align 32, !alias.scope !2
  %15 = bitcast %"class.hwy::N_AVX2::Vec256"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #8
  %16 = getelementptr inbounds %"class.hwy::N_AVX2::Vec256", %"class.hwy::N_AVX2::Vec256"* %10, i64 0, i32 0
  store <8 x float> <float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01>, <8 x float>* %16, align 32, !alias.scope !5
  %17 = bitcast %"class.hwy::N_AVX2::Vec256"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #8
  %18 = getelementptr inbounds %"class.hwy::N_AVX2::Vec256", %"class.hwy::N_AVX2::Vec256"* %11, i64 0, i32 0
  store <8 x float> zeroinitializer, <8 x float>* %18, align 32, !alias.scope !8
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 0
  %20 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 -86, i64 32, i1 false)
  %21 = load i32, i32* %19, align 8
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %26, i64 %22, i64 %25, i64 4) #8
  %27 = load i32, i32* %23, align 4
  %28 = bitcast %class.anon.1* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %28) #8
  %29 = getelementptr inbounds %class.anon.1, %class.anon.1* %12, i64 0, i32 0
  store %"class.jxl::Image3"* %1, %"class.jxl::Image3"** %29, align 8
  %30 = getelementptr inbounds %class.anon.1, %class.anon.1* %12, i64 0, i32 1
  store %"class.jxl::Image3"* %2, %"class.jxl::Image3"** %30, align 8
  %31 = getelementptr inbounds %class.anon.1, %class.anon.1* %12, i64 0, i32 2
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %31, align 8
  %32 = getelementptr inbounds %class.anon.1, %class.anon.1* %12, i64 0, i32 3
  store %"struct.hwy::N_AVX2::Simd"* @_ZZN3jxl6N_AVX222SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolEE1d, %"struct.hwy::N_AVX2::Simd"** %32, align 8
  %33 = getelementptr inbounds %class.anon.1, %class.anon.1* %12, i64 0, i32 4
  store %"class.hwy::N_AVX2::Vec256"* %9, %"class.hwy::N_AVX2::Vec256"** %33, align 8
  %34 = getelementptr inbounds %class.anon.1, %class.anon.1* %12, i64 0, i32 5
  store %"class.hwy::N_AVX2::Vec256"* %10, %"class.hwy::N_AVX2::Vec256"** %34, align 8
  %35 = getelementptr inbounds %class.anon.1, %class.anon.1* %12, i64 0, i32 6
  store %"class.hwy::N_AVX2::Vec256"* %11, %"class.hwy::N_AVX2::Vec256"** %35, align 8
  %36 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), double* nonnull %7) #8
  %37 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %37, label %38, label %49

38:                                               ; preds = %4
  %39 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #8
  %40 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %41 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %40, align 8
  %42 = bitcast i8** %41 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %42, align 8
  %43 = icmp eq i32 %27, 0
  br i1 %43, label %60, label %44

44:                                               ; preds = %38
  %45 = bitcast %"class.jxl::ThreadPool::RunCallState.56"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.56", %"class.jxl::ThreadPool::RunCallState.56"* %5, i64 0, i32 0
  %47 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.56", %"class.jxl::ThreadPool::RunCallState.56"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %46, align 8
  store %class.anon.1* %12, %class.anon.1** %47, align 8
  %48 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %39, i8* nonnull %45, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX222SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX222SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_1E12CallDataFuncEPvjm", i32 0, i32 %27) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #8
  br label %60

49:                                               ; preds = %4
  %50 = icmp eq i32 %27, 0
  br i1 %50, label %62, label %51

51:                                               ; preds = %49
  %52 = bitcast %"class.jxl::ThreadPool::RunCallState.56"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #8
  %53 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.56", %"class.jxl::ThreadPool::RunCallState.56"* %6, i64 0, i32 0
  %54 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.56", %"class.jxl::ThreadPool::RunCallState.56"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %53, align 8
  store %class.anon.1* %12, %class.anon.1** %54, align 8
  %55 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %56 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %55, align 8
  %57 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %58 = load i8*, i8** %57, align 8
  %59 = call i32 %56(i8* %58, i8* nonnull %52, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX222SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_1E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX222SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_1E12CallDataFuncEPvjm", i32 0, i32 %27) #8
  br label %60

60:                                               ; preds = %38, %44, %51
  %61 = phi i8* [ %52, %51 ], [ %39, %44 ], [ %39, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %61) #8
  br label %62

62:                                               ; preds = %60, %49
  %63 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), double %63) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %28) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX322SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::ThreadPool"* readonly) #3 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.57", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.57", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca %"class.hwy::N_AVX3::Vec512", align 64
  %10 = alloca %"class.hwy::N_AVX3::Vec512", align 64
  %11 = alloca %"class.hwy::N_AVX3::Vec512", align 64
  %12 = alloca %class.anon.2, align 8
  %13 = bitcast %"class.hwy::N_AVX3::Vec512"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %13) #8
  %14 = getelementptr inbounds %"class.hwy::N_AVX3::Vec512", %"class.hwy::N_AVX3::Vec512"* %9, i64 0, i32 0
  store <16 x float> zeroinitializer, <16 x float>* %14, align 64, !alias.scope !11
  %15 = bitcast %"class.hwy::N_AVX3::Vec512"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %15) #8
  %16 = getelementptr inbounds %"class.hwy::N_AVX3::Vec512", %"class.hwy::N_AVX3::Vec512"* %10, i64 0, i32 0
  store <16 x float> <float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01, float 1.000000e+01>, <16 x float>* %16, align 64, !alias.scope !14
  %17 = bitcast %"class.hwy::N_AVX3::Vec512"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %17) #8
  %18 = getelementptr inbounds %"class.hwy::N_AVX3::Vec512", %"class.hwy::N_AVX3::Vec512"* %11, i64 0, i32 0
  store <16 x float> zeroinitializer, <16 x float>* %18, align 64, !alias.scope !17
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 0
  %20 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 -86, i64 32, i1 false)
  %21 = load i32, i32* %19, align 8
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %26, i64 %22, i64 %25, i64 4) #8
  %27 = load i32, i32* %23, align 4
  %28 = bitcast %class.anon.2* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %28) #8
  %29 = getelementptr inbounds %class.anon.2, %class.anon.2* %12, i64 0, i32 0
  store %"class.jxl::Image3"* %1, %"class.jxl::Image3"** %29, align 8
  %30 = getelementptr inbounds %class.anon.2, %class.anon.2* %12, i64 0, i32 1
  store %"class.jxl::Image3"* %2, %"class.jxl::Image3"** %30, align 8
  %31 = getelementptr inbounds %class.anon.2, %class.anon.2* %12, i64 0, i32 2
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %31, align 8
  %32 = getelementptr inbounds %class.anon.2, %class.anon.2* %12, i64 0, i32 3
  store %"struct.hwy::N_AVX3::Simd"* @_ZZN3jxl6N_AVX322SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolEE1d, %"struct.hwy::N_AVX3::Simd"** %32, align 8
  %33 = getelementptr inbounds %class.anon.2, %class.anon.2* %12, i64 0, i32 4
  store %"class.hwy::N_AVX3::Vec512"* %9, %"class.hwy::N_AVX3::Vec512"** %33, align 8
  %34 = getelementptr inbounds %class.anon.2, %class.anon.2* %12, i64 0, i32 5
  store %"class.hwy::N_AVX3::Vec512"* %10, %"class.hwy::N_AVX3::Vec512"** %34, align 8
  %35 = getelementptr inbounds %class.anon.2, %class.anon.2* %12, i64 0, i32 6
  store %"class.hwy::N_AVX3::Vec512"* %11, %"class.hwy::N_AVX3::Vec512"** %35, align 8
  %36 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), double* nonnull %7) #8
  %37 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %37, label %38, label %49

38:                                               ; preds = %4
  %39 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #8
  %40 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %41 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %40, align 8
  %42 = bitcast i8** %41 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %42, align 8
  %43 = icmp eq i32 %27, 0
  br i1 %43, label %60, label %44

44:                                               ; preds = %38
  %45 = bitcast %"class.jxl::ThreadPool::RunCallState.57"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.57", %"class.jxl::ThreadPool::RunCallState.57"* %5, i64 0, i32 0
  %47 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.57", %"class.jxl::ThreadPool::RunCallState.57"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %46, align 8
  store %class.anon.2* %12, %class.anon.2** %47, align 8
  %48 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %39, i8* nonnull %45, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX322SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX322SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_2E12CallDataFuncEPvjm", i32 0, i32 %27) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #8
  br label %60

49:                                               ; preds = %4
  %50 = icmp eq i32 %27, 0
  br i1 %50, label %62, label %51

51:                                               ; preds = %49
  %52 = bitcast %"class.jxl::ThreadPool::RunCallState.57"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #8
  %53 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.57", %"class.jxl::ThreadPool::RunCallState.57"* %6, i64 0, i32 0
  %54 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.57", %"class.jxl::ThreadPool::RunCallState.57"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %53, align 8
  store %class.anon.2* %12, %class.anon.2** %54, align 8
  %55 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %56 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %55, align 8
  %57 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %58 = load i8*, i8** %57, align 8
  %59 = call i32 %56(i8* %58, i8* nonnull %52, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX322SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_2E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX322SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_2E12CallDataFuncEPvjm", i32 0, i32 %27) #8
  br label %60

60:                                               ; preds = %38, %44, %51
  %61 = phi i8* [ %52, %51 ], [ %39, %44 ], [ %39, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %61) #8
  br label %62

62:                                               ; preds = %60, %49
  %63 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), double %63) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %28) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %17) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %13) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR22SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolE(%"class.jxl::Plane"* noalias sret, %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::ThreadPool"* readonly) #4 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.58", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.58", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca %"struct.hwy::N_SCALAR::Vec1", align 4
  %10 = alloca %"struct.hwy::N_SCALAR::Vec1", align 4
  %11 = alloca %"struct.hwy::N_SCALAR::Vec1", align 4
  %12 = alloca %class.anon.3, align 8
  %13 = bitcast %"struct.hwy::N_SCALAR::Vec1"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #8
  %14 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %9, i64 0, i32 0
  store float 0.000000e+00, float* %14, align 4
  %15 = bitcast %"struct.hwy::N_SCALAR::Vec1"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #8
  %16 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %10, i64 0, i32 0
  store float 1.000000e+01, float* %16, align 4
  %17 = bitcast %"struct.hwy::N_SCALAR::Vec1"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #8
  %18 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %11, i64 0, i32 0
  store float 0.000000e+00, float* %18, align 4
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 0
  %20 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 -86, i64 32, i1 false)
  %21 = load i32, i32* %19, align 8
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %26, i64 %22, i64 %25, i64 4) #8
  %27 = load i32, i32* %23, align 4
  %28 = bitcast %class.anon.3* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %28) #8
  %29 = getelementptr inbounds %class.anon.3, %class.anon.3* %12, i64 0, i32 0
  store %"class.jxl::Image3"* %1, %"class.jxl::Image3"** %29, align 8
  %30 = getelementptr inbounds %class.anon.3, %class.anon.3* %12, i64 0, i32 1
  store %"class.jxl::Image3"* %2, %"class.jxl::Image3"** %30, align 8
  %31 = getelementptr inbounds %class.anon.3, %class.anon.3* %12, i64 0, i32 2
  store %"class.jxl::Plane"* %0, %"class.jxl::Plane"** %31, align 8
  %32 = getelementptr inbounds %class.anon.3, %class.anon.3* %12, i64 0, i32 3
  store %"struct.hwy::N_SCALAR::Simd"* @_ZZN3jxl8N_SCALAR22SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolEE1d, %"struct.hwy::N_SCALAR::Simd"** %32, align 8
  %33 = getelementptr inbounds %class.anon.3, %class.anon.3* %12, i64 0, i32 4
  store %"struct.hwy::N_SCALAR::Vec1"* %9, %"struct.hwy::N_SCALAR::Vec1"** %33, align 8
  %34 = getelementptr inbounds %class.anon.3, %class.anon.3* %12, i64 0, i32 5
  store %"struct.hwy::N_SCALAR::Vec1"* %10, %"struct.hwy::N_SCALAR::Vec1"** %34, align 8
  %35 = getelementptr inbounds %class.anon.3, %class.anon.3* %12, i64 0, i32 6
  store %"struct.hwy::N_SCALAR::Vec1"* %11, %"struct.hwy::N_SCALAR::Vec1"** %35, align 8
  %36 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #8
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), double* nonnull %7) #8
  %37 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %37, label %38, label %49

38:                                               ; preds = %4
  %39 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %39) #8
  %40 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %41 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %40, align 8
  %42 = bitcast i8** %41 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %42, align 8
  %43 = icmp eq i32 %27, 0
  br i1 %43, label %60, label %44

44:                                               ; preds = %38
  %45 = bitcast %"class.jxl::ThreadPool::RunCallState.58"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #8
  %46 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.58", %"class.jxl::ThreadPool::RunCallState.58"* %5, i64 0, i32 0
  %47 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.58", %"class.jxl::ThreadPool::RunCallState.58"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %46, align 8
  store %class.anon.3* %12, %class.anon.3** %47, align 8
  %48 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %39, i8* nonnull %45, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR22SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR22SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_3E12CallDataFuncEPvjm", i32 0, i32 %27) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #8
  br label %60

49:                                               ; preds = %4
  %50 = icmp eq i32 %27, 0
  br i1 %50, label %62, label %51

51:                                               ; preds = %49
  %52 = bitcast %"class.jxl::ThreadPool::RunCallState.58"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #8
  %53 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.58", %"class.jxl::ThreadPool::RunCallState.58"* %6, i64 0, i32 0
  %54 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.58", %"class.jxl::ThreadPool::RunCallState.58"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %53, align 8
  store %class.anon.3* %12, %class.anon.3** %54, align 8
  %55 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %56 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %55, align 8
  %57 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %58 = load i8*, i8** %57, align 8
  %59 = call i32 %56(i8* %58, i8* nonnull %52, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR22SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_3E12CallInitFuncEPvm", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR22SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_3E12CallDataFuncEPvjm", i32 0, i32 %27) #8
  br label %60

60:                                               ; preds = %38, %44, %51
  %61 = phi i8* [ %52, %51 ], [ %39, %44 ], [ %39, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %61) #8
  br label %62

62:                                               ; preds = %60, %49
  %63 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), double %63) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %28) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl22DetectGaussianEllipsesERKNS_6Image3IfEERKNS_20GaussianDetectParamsERKNS_18EllipseQuantParamsEPNS_10ThreadPoolE(%"class.std::__1::vector"* noalias sret, %"class.jxl::Image3"* dereferenceable(96), %"struct.jxl::GaussianDetectParams"* nocapture readonly dereferenceable(88), %"struct.jxl::EllipseQuantParams"* nocapture readnone dereferenceable(144), %"class.jxl::ThreadPool"*) local_unnamed_addr #4 {
  %6 = alloca %"class.jxl::Plane.54", align 8
  %7 = alloca %"class.jxl::Plane.54", align 8
  %8 = alloca %"class.jxl::Plane.54", align 8
  %9 = alloca %"class.std::__1::vector.32", align 8
  %10 = alloca %"class.jxl::Plane", align 8
  %11 = alloca %"class.std::__1::vector.32", align 8
  %12 = alloca %"struct.jxl::(anonymous namespace)::ConnectedComponent", align 8
  %13 = alloca %"class.jxl::Image3", align 8
  %14 = alloca %"class.jxl::Image3", align 8
  %15 = alloca %"class.jxl::Image3", align 8
  %16 = alloca %"class.jxl::Rect", align 8
  %17 = alloca %"class.jxl::Rect", align 8
  %18 = alloca %"class.jxl::Rect", align 8
  %19 = alloca %"class.jxl::Image3", align 8
  %20 = alloca %"class.jxl::Plane", align 8
  %21 = alloca %"class.std::__1::vector.30", align 8
  %22 = alloca %"struct.jxl::(anonymous namespace)::GaussianEllipse", align 16
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %25 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 24, i1 false) #8
  %26 = bitcast %"class.jxl::Image3"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %26) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 96, i1 false)
  %27 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %33, i64 %29, i64 %32, i64 4) #8
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %34, i64 %29, i64 %32, i64 4) #8
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %35, i64 %29, i64 %32, i64 4) #8
  %36 = bitcast %"class.jxl::Plane"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #8
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 0, i32 0, i32 0
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 0, i32 0, i32 1
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 0, i32 0, i32 4
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %41 = bitcast %"class.jxl::Image3"* %13 to i8*
  %42 = bitcast %"class.jxl::Plane"* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %41) #8, !noalias !20
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 -86, i64 96, i1 false) #8, !noalias !20
  %43 = load i32, i32* %27, align 8, !noalias !20
  %44 = zext i32 %43 to i64
  %45 = load i32, i32* %30, align 4, !noalias !20
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %13, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %47, i64 %44, i64 %46, i64 4) #8, !noalias !20
  %48 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %13, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %48, i64 %44, i64 %46, i64 4) #8, !noalias !20
  %49 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %13, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %49, i64 %44, i64 %46, i64 4) #8, !noalias !20
  %50 = bitcast %"class.jxl::Image3"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %50) #8, !noalias !20
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 -86, i64 96, i1 false) #8, !noalias !20
  %51 = load i32, i32* %27, align 8, !noalias !20
  %52 = zext i32 %51 to i64
  %53 = load i32, i32* %30, align 4, !noalias !20
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %14, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %55, i64 %52, i64 %54, i64 4) #8, !noalias !20
  %56 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %14, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %56, i64 %52, i64 %54, i64 4) #8, !noalias !20
  %57 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %14, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %57, i64 %52, i64 %54, i64 4) #8, !noalias !20
  %58 = bitcast %"class.jxl::Image3"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %58) #8, !noalias !20
  %59 = load i32, i32* %27, align 8, !noalias !20
  %60 = zext i32 %59 to i64
  %61 = load i32, i32* %30, align 4, !noalias !20
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %63, i64 %60, i64 %62, i64 4) #8, !noalias !20
  %64 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %64, i64 %60, i64 %62, i64 4) #8, !noalias !20
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %65, i64 %60, i64 %62, i64 4) #8, !noalias !20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* nonnull align 8 %58, i64 24, i1 false) #8, !noalias !20
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 5
  %67 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 0, i32 0, i32 5
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::unique_ptr"* %67 to i64*
  %70 = load i64, i64* %69, align 8, !noalias !20
  store i8* null, i8** %68, align 8, !noalias !20
  %71 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %66, i64 0, i32 0, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8, !noalias !20
  %73 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  store i64 %70, i64* %73, align 8, !noalias !20
  %74 = icmp eq i8* %72, null
  br i1 %74, label %76, label %75

75:                                               ; preds = %5
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %72) #8
  br label %76

76:                                               ; preds = %75, %5
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 1
  %78 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1
  %79 = bitcast %"class.jxl::Plane"* %78 to i8*
  %80 = bitcast %"class.jxl::Plane"* %77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %80, i64 24, i1 false) #8, !noalias !20
  %81 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5
  %82 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 1, i32 0, i32 5
  %83 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %82, i64 0, i32 0, i32 0, i32 0
  %84 = bitcast %"class.std::__1::unique_ptr"* %82 to i64*
  %85 = load i64, i64* %84, align 8, !noalias !20
  store i8* null, i8** %83, align 8, !noalias !20
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %81, i64 0, i32 0, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8, !noalias !20
  %88 = bitcast %"class.std::__1::unique_ptr"* %81 to i64*
  store i64 %85, i64* %88, align 8, !noalias !20
  %89 = icmp eq i8* %87, null
  br i1 %89, label %91, label %90

90:                                               ; preds = %76
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %87) #8
  br label %91

91:                                               ; preds = %90, %76
  %92 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 2
  %93 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2
  %94 = bitcast %"class.jxl::Plane"* %93 to i8*
  %95 = bitcast %"class.jxl::Plane"* %92 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 24, i1 false) #8, !noalias !20
  %96 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5
  %97 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 2, i32 0, i32 5
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %97, i64 0, i32 0, i32 0, i32 0
  %99 = bitcast %"class.std::__1::unique_ptr"* %97 to i64*
  %100 = load i64, i64* %99, align 8, !noalias !20
  store i8* null, i8** %98, align 8, !noalias !20
  %101 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %96, i64 0, i32 0, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8, !noalias !20
  %103 = bitcast %"class.std::__1::unique_ptr"* %96 to i64*
  store i64 %100, i64* %103, align 8, !noalias !20
  %104 = icmp eq i8* %102, null
  br i1 %104, label %105, label %107

105:                                              ; preds = %91
  %106 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %106, align 8, !noalias !20
  br label %112

107:                                              ; preds = %91
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %102) #8
  %108 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %109 = load i8*, i8** %108, align 8, !noalias !20
  store i8* null, i8** %108, align 8, !noalias !20
  %110 = icmp eq i8* %109, null
  br i1 %110, label %112, label %111

111:                                              ; preds = %107
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %109) #8
  br label %112

112:                                              ; preds = %111, %107, %105
  %113 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8, !noalias !20
  store i8* null, i8** %113, align 8, !noalias !20
  %115 = icmp eq i8* %114, null
  br i1 %115, label %117, label %116

116:                                              ; preds = %112
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %114) #8
  br label %117

117:                                              ; preds = %116, %112
  %118 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %15, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %119 = load i8*, i8** %118, align 8, !noalias !20
  store i8* null, i8** %118, align 8, !noalias !20
  %120 = icmp eq i8* %119, null
  br i1 %120, label %122, label %121

121:                                              ; preds = %117
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %119) #8
  br label %122

122:                                              ; preds = %121, %117
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %58) #8, !noalias !20
  %123 = bitcast %"class.jxl::Rect"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %123) #8, !noalias !20
  %124 = bitcast %"class.jxl::Image3"* %1 to <2 x i32>*
  %125 = load <2 x i32>, <2 x i32>* %124, align 8, !noalias !20
  %126 = zext <2 x i32> %125 to <2 x i64>
  %127 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %16, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %123, i8 0, i64 16, i1 false) #8, !noalias !20
  %128 = bitcast i64* %127 to <2 x i64>*
  store <2 x i64> %126, <2 x i64>* %128, align 8, !noalias !20
  call void @_ZN3jxl12Separable5_3ERKNS_6Image3IfEERKNS_4RectERKNS_17WeightsSeparable5EPNS_10ThreadPoolEPS1_(%"class.jxl::Image3"* dereferenceable(96) %1, %"class.jxl::Rect"* nonnull dereferenceable(32) %16, %"struct.jxl::WeightsSeparable5"* nonnull dereferenceable(96) @_ZZN3jxl12_GLOBAL__N_129WeightsSeparable5Gaussian0_65EvE7weights, %"class.jxl::ThreadPool"* %4, %"class.jxl::Image3"* nonnull %13) #8, !noalias !20
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %123) #8, !noalias !20
  %129 = bitcast %"class.jxl::Rect"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %129) #8, !noalias !20
  %130 = bitcast %"class.jxl::Image3"* %1 to <2 x i32>*
  %131 = load <2 x i32>, <2 x i32>* %130, align 8, !noalias !20
  %132 = zext <2 x i32> %131 to <2 x i64>
  %133 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %17, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %129, i8 0, i64 16, i1 false) #8, !noalias !20
  %134 = bitcast i64* %133 to <2 x i64>*
  store <2 x i64> %132, <2 x i64>* %134, align 8, !noalias !20
  call void @_ZN3jxl12Separable5_3ERKNS_6Image3IfEERKNS_4RectERKNS_17WeightsSeparable5EPNS_10ThreadPoolEPS1_(%"class.jxl::Image3"* dereferenceable(96) %1, %"class.jxl::Rect"* nonnull dereferenceable(32) %17, %"struct.jxl::WeightsSeparable5"* nonnull dereferenceable(96) @_ZZN3jxl12_GLOBAL__N_126WeightsSeparable5Gaussian3EvE7weights, %"class.jxl::ThreadPool"* %4, %"class.jxl::Image3"* nonnull %14) #8, !noalias !20
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %129) #8, !noalias !20
  %135 = bitcast %"class.jxl::Rect"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %135) #8, !noalias !20
  %136 = bitcast %"class.jxl::Image3"* %14 to <2 x i32>*
  %137 = load <2 x i32>, <2 x i32>* %136, align 8, !noalias !20
  %138 = zext <2 x i32> %137 to <2 x i64>
  %139 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %18, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %135, i8 0, i64 16, i1 false) #8, !noalias !20
  %140 = bitcast i64* %139 to <2 x i64>*
  store <2 x i64> %138, <2 x i64>* %140, align 8, !noalias !20
  call void @_ZN3jxl12Separable5_3ERKNS_6Image3IfEERKNS_4RectERKNS_17WeightsSeparable5EPNS_10ThreadPoolEPS1_(%"class.jxl::Image3"* nonnull dereferenceable(96) %14, %"class.jxl::Rect"* nonnull dereferenceable(32) %18, %"struct.jxl::WeightsSeparable5"* nonnull dereferenceable(96) @_ZZN3jxl12_GLOBAL__N_126WeightsSeparable5Gaussian3EvE7weights, %"class.jxl::ThreadPool"* %4, %"class.jxl::Image3"* nonnull %19) #8, !noalias !20
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %135) #8, !noalias !20
  %141 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4, !noalias !20
  %142 = and i32 %141, 2225
  %143 = call i32 @llvm.cttz.i32(i32 %142, i1 true) #8, !range !23
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds [12 x void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)*], [12 x void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)*]* @_ZN3jxlL42SumOfSquareDifferencesHighwayDispatchTableE, i64 0, i64 %144
  %146 = load void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)*, void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)** %145, align 8, !noalias !20
  call void %146(%"class.jxl::Plane"* nonnull sret %20, %"class.jxl::Image3"* nonnull dereferenceable(96) %13, %"class.jxl::Image3"* nonnull dereferenceable(96) %19, %"class.jxl::ThreadPool"* %4) #8
  %147 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %14, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %148 = load i8*, i8** %147, align 8, !noalias !20
  store i8* null, i8** %147, align 8, !noalias !20
  %149 = icmp eq i8* %148, null
  br i1 %149, label %151, label %150

150:                                              ; preds = %122
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %148) #8
  br label %151

151:                                              ; preds = %150, %122
  %152 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %14, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %153 = load i8*, i8** %152, align 8, !noalias !20
  store i8* null, i8** %152, align 8, !noalias !20
  %154 = icmp eq i8* %153, null
  br i1 %154, label %156, label %155

155:                                              ; preds = %151
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %153) #8
  br label %156

156:                                              ; preds = %155, %151
  %157 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %14, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %158 = load i8*, i8** %157, align 8, !noalias !20
  store i8* null, i8** %157, align 8, !noalias !20
  %159 = icmp eq i8* %158, null
  br i1 %159, label %161, label %160

160:                                              ; preds = %156
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %158) #8
  br label %161

161:                                              ; preds = %160, %156
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %50) #8, !noalias !20
  %162 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %13, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %163 = load i8*, i8** %162, align 8, !noalias !20
  store i8* null, i8** %162, align 8, !noalias !20
  %164 = icmp eq i8* %163, null
  br i1 %164, label %166, label %165

165:                                              ; preds = %161
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %163) #8
  br label %166

166:                                              ; preds = %165, %161
  %167 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %13, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %168 = load i8*, i8** %167, align 8, !noalias !20
  store i8* null, i8** %167, align 8, !noalias !20
  %169 = icmp eq i8* %168, null
  br i1 %169, label %171, label %170

170:                                              ; preds = %166
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %168) #8
  br label %171

171:                                              ; preds = %170, %166
  %172 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %13, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %173 = load i8*, i8** %172, align 8, !noalias !20
  store i8* null, i8** %172, align 8, !noalias !20
  %174 = icmp eq i8* %173, null
  br i1 %174, label %176, label %175

175:                                              ; preds = %171
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %173) #8
  br label %176

176:                                              ; preds = %171, %175
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %41) #8, !noalias !20
  %177 = bitcast %"class.std::__1::vector.30"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %177) #8
  %178 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %21, i64 0, i32 0, i32 0
  %179 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %21, i64 0, i32 0, i32 1
  %180 = getelementptr inbounds %"class.std::__1::vector.30", %"class.std::__1::vector.30"* %21, i64 0, i32 0, i32 2, i32 0, i32 0
  %181 = getelementptr inbounds %"struct.jxl::GaussianDetectParams", %"struct.jxl::GaussianDetectParams"* %2, i64 0, i32 1
  %182 = bitcast %"class.std::__1::vector.30"* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %182, i8 -86, i64 24, i1 false)
  %183 = load double, double* %181, align 8
  %184 = getelementptr inbounds %"struct.jxl::GaussianDetectParams", %"struct.jxl::GaussianDetectParams"* %2, i64 0, i32 0
  %185 = load double, double* %184, align 8
  %186 = getelementptr inbounds %"struct.jxl::GaussianDetectParams", %"struct.jxl::GaussianDetectParams"* %2, i64 0, i32 2
  %187 = load i32, i32* %186, align 8
  %188 = getelementptr inbounds %"struct.jxl::GaussianDetectParams", %"struct.jxl::GaussianDetectParams"* %2, i64 0, i32 8
  %189 = load i64, i64* %188, align 8
  %190 = uitofp i64 %189 to double
  %191 = bitcast %"class.jxl::Plane"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %191) #8, !noalias !24
  %192 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %10, i64 0, i32 0, i32 0
  %193 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %10, i64 0, i32 0, i32 1
  %194 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %10, i64 0, i32 0, i32 4
  %195 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %10, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %196 = bitcast %"class.jxl::Plane"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %196, i8 -86, i64 32, i1 false)
  %197 = load i32, i32* %37, align 8, !noalias !27
  %198 = zext i32 %197 to i64
  %199 = load i32, i32* %38, align 4, !noalias !27
  %200 = zext i32 %199 to i64
  %201 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %10, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %201, i64 %198, i64 %200, i64 4) #8, !noalias !24
  %202 = load i32, i32* %37, align 8, !noalias !30
  %203 = load i32, i32* %192, align 8, !alias.scope !33, !noalias !24
  %204 = icmp eq i32 %202, %203
  br i1 %204, label %205, label %209

205:                                              ; preds = %176
  %206 = load i32, i32* %38, align 4, !noalias !30
  %207 = load i32, i32* %193, align 4, !alias.scope !33, !noalias !24
  %208 = icmp eq i32 %206, %207
  br i1 %208, label %212, label %209

209:                                              ; preds = %205, %176
  %210 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0)) #8, !noalias !34
  %211 = call zeroext i1 @_ZN3jxl5AbortEv() #18, !noalias !34
  unreachable

212:                                              ; preds = %205
  %213 = icmp eq i32 %206, 0
  %214 = icmp eq i32 %202, 0
  %215 = or i1 %214, %213
  br i1 %215, label %251, label %216

216:                                              ; preds = %212
  %217 = load i8*, i8** %195, align 8, !alias.scope !33, !noalias !24
  %218 = load i64, i64* %194, align 8, !alias.scope !33, !noalias !24
  %219 = load i8*, i8** %40, align 8, !noalias !30
  %220 = ptrtoint i8* %219 to i64
  %221 = and i64 %220, 63
  %222 = icmp eq i64 %221, 0
  call void @llvm.assume(i1 %222) #8, !noalias !34
  %223 = ptrtoint i8* %217 to i64
  %224 = and i64 %223, 63
  %225 = icmp eq i64 %224, 0
  call void @llvm.assume(i1 %225) #8, !noalias !34
  %226 = zext i32 %202 to i64
  %227 = shl nuw nsw i64 %226, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %217, i8* align 64 %219, i64 %227, i1 false) #8, !noalias !34
  %228 = load i32, i32* %38, align 4, !noalias !30
  %229 = icmp ugt i32 %228, 1
  br i1 %229, label %230, label %251

230:                                              ; preds = %216, %230
  %231 = phi i64 [ %247, %230 ], [ 1, %216 ]
  %232 = load i32, i32* %37, align 8, !noalias !30
  %233 = load i8*, i8** %40, align 8, !noalias !30
  %234 = load i64, i64* %39, align 8, !noalias !30
  %235 = mul i64 %234, %231
  %236 = getelementptr inbounds i8, i8* %233, i64 %235
  %237 = ptrtoint i8* %236 to i64
  %238 = and i64 %237, 63
  %239 = icmp eq i64 %238, 0
  call void @llvm.assume(i1 %239) #8, !noalias !34
  %240 = mul i64 %231, %218
  %241 = getelementptr inbounds i8, i8* %217, i64 %240
  %242 = ptrtoint i8* %241 to i64
  %243 = and i64 %242, 63
  %244 = icmp eq i64 %243, 0
  call void @llvm.assume(i1 %244) #8, !noalias !34
  %245 = zext i32 %232 to i64
  %246 = shl nuw nsw i64 %245, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %241, i8* align 64 %236, i64 %246, i1 false) #8, !noalias !34
  %247 = add nuw nsw i64 %231, 1
  %248 = load i32, i32* %38, align 4, !noalias !30
  %249 = zext i32 %248 to i64
  %250 = icmp ult i64 %247, %249
  br i1 %250, label %230, label %251

251:                                              ; preds = %230, %212, %216
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %177, i8 0, i64 24, i1 false) #8, !alias.scope !24
  %252 = load i32, i32* %193, align 4, !noalias !24
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %1055, label %254

254:                                              ; preds = %251
  %255 = bitcast %"class.std::__1::vector.32"* %11 to i8*
  %256 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %11, i64 0, i32 0, i32 0
  %257 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %11, i64 0, i32 0, i32 1
  %258 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %11, i64 0, i32 0, i32 2, i32 0, i32 0
  %259 = bitcast %"class.std::__1::vector.32"* %9 to i8*
  %260 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %9, i64 0, i32 0, i32 0
  %261 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %9, i64 0, i32 0, i32 1
  %262 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  %263 = bitcast %"class.std::__1::vector.32"* %9 to i8**
  %264 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %262 to i8**
  %265 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %261 to i64*
  %266 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %257 to i64*
  %267 = bitcast %"class.std::__1::vector.32"* %11 to i64*
  %268 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %258 to i64*
  %269 = bitcast %"class.std::__1::vector.32"* %9 to i64*
  %270 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %262 to i64*
  %271 = zext i32 %187 to i64
  %272 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12 to i8*
  %273 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 0, i32 0
  %274 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 0, i32 1
  %275 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 0, i32 2
  %276 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 0, i32 3
  %277 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 1
  %278 = bitcast %"class.std::__1::vector.32"* %277 to i8*
  %279 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 1, i32 0, i32 1
  %280 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %279 to i8**
  %281 = bitcast %"class.std::__1::vector.32"* %277 to i8**
  %282 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %283 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %279 to i64*
  %284 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 2
  %285 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 3
  %286 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 4
  %287 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 5
  %288 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 6
  %289 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 8, i32 0
  %290 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 8, i32 1
  %291 = bitcast float* %284 to i8*
  %292 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 7
  %293 = bitcast %"class.std::__1::vector.32"* %277 to i64*
  %294 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %277, i64 0, i32 0, i32 0
  %295 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"** %179 to i64*
  %296 = bitcast %"class.std::__1::vector.30"* %21 to i64*
  %297 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"** %180 to i64*
  %298 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %12, i64 0, i32 1, i32 0, i32 0
  %299 = load i32, i32* %192, align 8, !noalias !24
  br label %300

300:                                              ; preds = %318, %254
  %301 = phi i32 [ %252, %254 ], [ %319, %318 ]
  %302 = phi i32 [ %299, %254 ], [ %320, %318 ]
  %303 = phi i32 [ %299, %254 ], [ %321, %318 ]
  %304 = phi i64 [ 0, %254 ], [ %322, %318 ]
  %305 = load i8*, i8** %195, align 8, !noalias !24
  %306 = load i64, i64* %194, align 8, !noalias !24
  %307 = mul i64 %306, %304
  %308 = getelementptr inbounds i8, i8* %305, i64 %307
  %309 = ptrtoint i8* %308 to i64
  %310 = and i64 %309, 63
  %311 = icmp eq i64 %310, 0
  call void @llvm.assume(i1 %311) #8, !noalias !24
  %312 = bitcast i8* %308 to float*
  %313 = icmp eq i32 %303, 0
  br i1 %313, label %318, label %314

314:                                              ; preds = %300
  %315 = shl i64 %304, 32
  br label %325

316:                                              ; preds = %1050
  %317 = load i32, i32* %193, align 4, !noalias !24
  br label %318

318:                                              ; preds = %316, %300
  %319 = phi i32 [ %317, %316 ], [ %301, %300 ]
  %320 = phi i32 [ %1051, %316 ], [ %302, %300 ]
  %321 = phi i32 [ %1051, %316 ], [ 0, %300 ]
  %322 = add nuw nsw i64 %304, 1
  %323 = zext i32 %319 to i64
  %324 = icmp ult i64 %322, %323
  br i1 %324, label %300, label %1055

325:                                              ; preds = %1050, %314
  %326 = phi i32 [ %302, %314 ], [ %1051, %1050 ]
  %327 = phi i64 [ 0, %314 ], [ %1052, %1050 ]
  %328 = getelementptr inbounds float, float* %312, i64 %327
  %329 = load float, float* %328, align 4, !noalias !24
  %330 = fpext float %329 to double
  %331 = fcmp olt double %185, %330
  br i1 %331, label %332, label %1050

332:                                              ; preds = %325
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %255) #8, !noalias !24
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %255, i8 0, i64 24, i1 false) #8, !noalias !24
  store float 0.000000e+00, float* %328, align 4, !noalias !24
  %333 = load atomic i8, i8* bitcast (i64* @_ZGVZN3jxl12_GLOBAL__N_116ExtractComponentEPNS_5PlaneIfEEPNSt3__16vectorINS0_5PixelENS4_9allocatorIS6_EEEERKS6_dE9neighbors to i8*) acquire, align 8, !noalias !24
  %334 = icmp eq i8 %333, 0
  br i1 %334, label %335, label %343, !prof !35

335:                                              ; preds = %332
  %336 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3jxl12_GLOBAL__N_116ExtractComponentEPNS_5PlaneIfEEPNSt3__16vectorINS0_5PixelENS4_9allocatorIS6_EEEERKS6_dE9neighbors) #8
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %343, label %338

338:                                              ; preds = %335
  %339 = call i8* @_Znwm(i64 64) #19
  store i8* %339, i8** bitcast (%"class.std::__1::vector.32"* @_ZZN3jxl12_GLOBAL__N_116ExtractComponentEPNS_5PlaneIfEEPNSt3__16vectorINS0_5PixelENS4_9allocatorIS6_EEEERKS6_dE9neighbors to i8**), align 8
  %340 = getelementptr inbounds i8, i8* %339, i64 64
  store i8* %340, i8** bitcast (%"struct.jxl::(anonymous namespace)::Pixel"** getelementptr inbounds (%"class.std::__1::vector.32", %"class.std::__1::vector.32"* @_ZZN3jxl12_GLOBAL__N_116ExtractComponentEPNS_5PlaneIfEEPNSt3__16vectorINS0_5PixelENS4_9allocatorIS6_EEEERKS6_dE9neighbors, i64 0, i32 0, i32 2, i32 0, i32 0) to i8**), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %339, i8* align 4 bitcast ([8 x %"struct.jxl::(anonymous namespace)::Pixel"]* @.ref.tmp to i8*), i64 64, i1 false) #8
  %341 = ptrtoint i8* %340 to i64
  store i64 %341, i64* bitcast (%"struct.jxl::(anonymous namespace)::Pixel"** getelementptr inbounds (%"class.std::__1::vector.32", %"class.std::__1::vector.32"* @_ZZN3jxl12_GLOBAL__N_116ExtractComponentEPNS_5PlaneIfEEPNSt3__16vectorINS0_5PixelENS4_9allocatorIS6_EEEERKS6_dE9neighbors, i64 0, i32 0, i32 1) to i64*), align 8
  %342 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::__1::vector.32"*)* @_ZNSt3__16vectorIN3jxl12_GLOBAL__N_15PixelENS_9allocatorIS3_EEED2Ev to void (i8*)*), i8* bitcast (%"class.std::__1::vector.32"* @_ZZN3jxl12_GLOBAL__N_116ExtractComponentEPNS_5PlaneIfEEPNSt3__16vectorINS0_5PixelENS4_9allocatorIS6_EEEERKS6_dE9neighbors to i8*), i8* nonnull @__dso_handle) #8
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN3jxl12_GLOBAL__N_116ExtractComponentEPNS_5PlaneIfEEPNSt3__16vectorINS0_5PixelENS4_9allocatorIS6_EEEERKS6_dE9neighbors) #8
  br label %343

343:                                              ; preds = %338, %335, %332
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %259) #8, !noalias !24
  %344 = or i64 %327, %315
  %345 = call i8* @_Znwm(i64 8) #19, !noalias !24
  store i8* %345, i8** %263, align 8, !noalias !24
  %346 = getelementptr inbounds i8, i8* %345, i64 8
  store i8* %346, i8** %264, align 8, !noalias !24
  %347 = bitcast i8* %345 to i64*
  store i64 %344, i64* %347, align 4, !noalias !24
  %348 = ptrtoint i8* %346 to i64
  store i64 %348, i64* %265, align 8, !noalias !24
  %349 = bitcast i8* %346 to %"struct.jxl::(anonymous namespace)::Pixel"*
  br label %354

350:                                              ; preds = %518, %421
  %351 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %260, align 8, !noalias !24
  %352 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %261, align 8, !noalias !24
  %353 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %351, %352
  br i1 %353, label %523, label %354

354:                                              ; preds = %350, %343
  %355 = phi %"struct.jxl::(anonymous namespace)::Pixel"* [ %349, %343 ], [ %352, %350 ]
  %356 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %355, i64 -1
  %357 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %356 to i64*
  %358 = load i64, i64* %357, align 4, !noalias !24
  %359 = trunc i64 %358 to i32
  %360 = lshr i64 %358, 32
  %361 = trunc i64 %360 to i32
  store %"struct.jxl::(anonymous namespace)::Pixel"* %356, %"struct.jxl::(anonymous namespace)::Pixel"** %261, align 8, !noalias !24
  %362 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %257, align 8, !noalias !24
  %363 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %258, align 8, !noalias !24
  %364 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %362, %363
  %365 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %363 to i64
  br i1 %364, label %370, label %366

366:                                              ; preds = %354
  %367 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %362 to i64*
  store i64 %358, i64* %367, align 4
  %368 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %362, i64 1
  %369 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %368 to i64
  store i64 %369, i64* %266, align 8, !noalias !24
  br label %415

370:                                              ; preds = %354
  %371 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %362 to i64
  %372 = load i64, i64* %267, align 8, !noalias !24
  %373 = sub i64 %371, %372
  %374 = ashr exact i64 %373, 3
  %375 = add nsw i64 %374, 1
  %376 = icmp ugt i64 %375, 2305843009213693951
  br i1 %376, label %377, label %379

377:                                              ; preds = %370
  %378 = bitcast %"class.std::__1::vector.32"* %11 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %378) #18
  unreachable

379:                                              ; preds = %370
  %380 = sub i64 %365, %372
  %381 = ashr exact i64 %380, 3
  %382 = icmp ult i64 %381, 1152921504606846975
  br i1 %382, label %383, label %391

383:                                              ; preds = %379
  %384 = ashr exact i64 %380, 2
  %385 = icmp ult i64 %384, %375
  %386 = select i1 %385, i64 %375, i64 %384
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %396, label %388

388:                                              ; preds = %383
  %389 = icmp ugt i64 %386, 2305843009213693951
  br i1 %389, label %390, label %391

390:                                              ; preds = %388
  call void @abort() #18
  unreachable

391:                                              ; preds = %388, %379
  %392 = phi i64 [ %386, %388 ], [ 2305843009213693951, %379 ]
  %393 = shl i64 %392, 3
  %394 = call i8* @_Znwm(i64 %393) #19
  %395 = bitcast i8* %394 to %"struct.jxl::(anonymous namespace)::Pixel"*
  br label %396

396:                                              ; preds = %391, %383
  %397 = phi i64 [ %392, %391 ], [ 0, %383 ]
  %398 = phi i8* [ %394, %391 ], [ null, %383 ]
  %399 = phi %"struct.jxl::(anonymous namespace)::Pixel"* [ %395, %391 ], [ null, %383 ]
  %400 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %399, i64 %374
  %401 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %399, i64 %397
  %402 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %401 to i64
  %403 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %400 to i64*
  store i64 %358, i64* %403, align 4, !noalias !24
  %404 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %400, i64 1
  %405 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %404 to i64
  %406 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %399 to i64
  %407 = icmp sgt i64 %373, 0
  br i1 %407, label %408, label %410

408:                                              ; preds = %396
  %409 = inttoptr i64 %372 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %398, i8* align 4 %409, i64 %373, i1 false) #8
  br label %410

410:                                              ; preds = %408, %396
  store i64 %406, i64* %267, align 8, !noalias !24
  store i64 %405, i64* %266, align 8, !noalias !24
  store i64 %402, i64* %268, align 8, !noalias !24
  %411 = icmp eq i64 %372, 0
  br i1 %411, label %415, label %412

412:                                              ; preds = %410
  %413 = inttoptr i64 %372 to i8*
  call void @_ZdlPv(i8* %413) #19
  %414 = load i64, i64* %266, align 8, !noalias !24
  br label %415

415:                                              ; preds = %412, %410, %366
  %416 = phi i64 [ %369, %366 ], [ %405, %410 ], [ %414, %412 ]
  %417 = load i64, i64* %267, align 8, !noalias !24
  %418 = sub i64 %416, %417
  %419 = ashr exact i64 %418, 3
  %420 = icmp ugt i64 %419, 1000
  br i1 %420, label %521, label %421

421:                                              ; preds = %415
  %422 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** getelementptr inbounds (%"class.std::__1::vector.32", %"class.std::__1::vector.32"* @_ZZN3jxl12_GLOBAL__N_116ExtractComponentEPNS_5PlaneIfEEPNSt3__16vectorINS0_5PixelENS4_9allocatorIS6_EEEERKS6_dE9neighbors, i64 0, i32 0, i32 0), align 8
  %423 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** getelementptr inbounds (%"class.std::__1::vector.32", %"class.std::__1::vector.32"* @_ZZN3jxl12_GLOBAL__N_116ExtractComponentEPNS_5PlaneIfEEPNSt3__16vectorINS0_5PixelENS4_9allocatorIS6_EEEERKS6_dE9neighbors, i64 0, i32 0, i32 1), align 8
  %424 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %422, %423
  br i1 %424, label %350, label %425

425:                                              ; preds = %421, %518
  %426 = phi %"struct.jxl::(anonymous namespace)::Pixel"* [ %519, %518 ], [ %422, %421 ]
  %427 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %426, i64 0, i32 0
  %428 = load i32, i32* %427, align 4
  %429 = add nsw i32 %428, %359
  %430 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %426, i64 0, i32 1
  %431 = load i32, i32* %430, align 4
  %432 = add nsw i32 %431, %361
  %433 = zext i32 %432 to i64
  %434 = shl nuw i64 %433, 32
  %435 = icmp sgt i32 %429, -1
  br i1 %435, label %436, label %518

436:                                              ; preds = %425
  %437 = sext i32 %429 to i64
  %438 = load i32, i32* %192, align 8, !noalias !24
  %439 = zext i32 %438 to i64
  %440 = icmp ugt i64 %439, %437
  %441 = icmp sgt i32 %432, -1
  %442 = and i1 %441, %440
  br i1 %442, label %443, label %518

443:                                              ; preds = %436
  %444 = sext i32 %432 to i64
  %445 = load i32, i32* %193, align 4, !noalias !24
  %446 = zext i32 %445 to i64
  %447 = icmp ugt i64 %446, %444
  br i1 %447, label %448, label %518

448:                                              ; preds = %443
  %449 = load i8*, i8** %195, align 8, !noalias !24
  %450 = load i64, i64* %194, align 8, !noalias !24
  %451 = mul i64 %450, %444
  %452 = getelementptr inbounds i8, i8* %449, i64 %451
  %453 = ptrtoint i8* %452 to i64
  %454 = and i64 %453, 63
  %455 = icmp eq i64 %454, 0
  call void @llvm.assume(i1 %455) #8
  %456 = bitcast i8* %452 to float*
  %457 = getelementptr inbounds float, float* %456, i64 %437
  %458 = load float, float* %457, align 4
  %459 = fpext float %458 to double
  %460 = fcmp olt double %183, %459
  br i1 %460, label %461, label %518

461:                                              ; preds = %448
  store float 0.000000e+00, float* %457, align 4
  %462 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %261, align 8, !noalias !24
  %463 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %262, align 8, !noalias !24
  %464 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %462, %463
  %465 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %463 to i64
  br i1 %464, label %472, label %466

466:                                              ; preds = %461
  %467 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %462 to i64*
  %468 = zext i32 %429 to i64
  %469 = or i64 %434, %468
  store i64 %469, i64* %467, align 4
  %470 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %462, i64 1
  %471 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %470 to i64
  store i64 %471, i64* %265, align 8, !noalias !24
  br label %518

472:                                              ; preds = %461
  %473 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %462 to i64
  %474 = load i64, i64* %269, align 8, !noalias !24
  %475 = sub i64 %473, %474
  %476 = ashr exact i64 %475, 3
  %477 = add nsw i64 %476, 1
  %478 = icmp ugt i64 %477, 2305843009213693951
  br i1 %478, label %479, label %481

479:                                              ; preds = %472
  %480 = bitcast %"class.std::__1::vector.32"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %480) #18
  unreachable

481:                                              ; preds = %472
  %482 = sub i64 %465, %474
  %483 = ashr exact i64 %482, 3
  %484 = icmp ult i64 %483, 1152921504606846975
  br i1 %484, label %485, label %493

485:                                              ; preds = %481
  %486 = ashr exact i64 %482, 2
  %487 = icmp ult i64 %486, %477
  %488 = select i1 %487, i64 %477, i64 %486
  %489 = icmp eq i64 %488, 0
  br i1 %489, label %498, label %490

490:                                              ; preds = %485
  %491 = icmp ugt i64 %488, 2305843009213693951
  br i1 %491, label %492, label %493

492:                                              ; preds = %490
  call void @abort() #18
  unreachable

493:                                              ; preds = %490, %481
  %494 = phi i64 [ %488, %490 ], [ 2305843009213693951, %481 ]
  %495 = shl i64 %494, 3
  %496 = call i8* @_Znwm(i64 %495) #19
  %497 = bitcast i8* %496 to %"struct.jxl::(anonymous namespace)::Pixel"*
  br label %498

498:                                              ; preds = %493, %485
  %499 = phi i64 [ %494, %493 ], [ 0, %485 ]
  %500 = phi i8* [ %496, %493 ], [ null, %485 ]
  %501 = phi %"struct.jxl::(anonymous namespace)::Pixel"* [ %497, %493 ], [ null, %485 ]
  %502 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %501, i64 %476
  %503 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %501, i64 %499
  %504 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %503 to i64
  %505 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %502 to i64*
  %506 = zext i32 %429 to i64
  %507 = or i64 %434, %506
  store i64 %507, i64* %505, align 4, !noalias !24
  %508 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %502, i64 1
  %509 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %508 to i64
  %510 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %501 to i64
  %511 = icmp sgt i64 %475, 0
  br i1 %511, label %512, label %514

512:                                              ; preds = %498
  %513 = inttoptr i64 %474 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %500, i8* align 4 %513, i64 %475, i1 false) #8
  br label %514

514:                                              ; preds = %512, %498
  store i64 %510, i64* %269, align 8, !noalias !24
  store i64 %509, i64* %265, align 8, !noalias !24
  store i64 %504, i64* %270, align 8, !noalias !24
  %515 = icmp eq i64 %474, 0
  br i1 %515, label %518, label %516

516:                                              ; preds = %514
  %517 = inttoptr i64 %474 to i8*
  call void @_ZdlPv(i8* %517) #19
  br label %518

518:                                              ; preds = %516, %514, %466, %448, %443, %436, %425
  %519 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %426, i64 1
  %520 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %519, %423
  br i1 %520, label %350, label %425

521:                                              ; preds = %415
  %522 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %260, align 8, !noalias !24
  br label %523

523:                                              ; preds = %350, %521
  %524 = phi %"struct.jxl::(anonymous namespace)::Pixel"* [ %522, %521 ], [ %351, %350 ]
  %525 = phi i1 [ false, %521 ], [ true, %350 ]
  %526 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %524, null
  br i1 %526, label %530, label %527

527:                                              ; preds = %523
  %528 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %524 to i64
  store i64 %528, i64* %265, align 8, !noalias !24
  %529 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %524 to i8*
  call void @_ZdlPv(i8* %529) #19
  br label %530

530:                                              ; preds = %527, %523
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %259) #8, !noalias !24
  br i1 %525, label %531, label %1042

531:                                              ; preds = %530
  %532 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %256, align 8, !noalias !36
  %533 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %532 to i64
  %534 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %257, align 8, !noalias !36
  %535 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %532, %534
  %536 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %534 to i64
  br i1 %535, label %537, label %540

537:                                              ; preds = %531
  %538 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i64 0, i64 0), i32 289, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0)) #8, !noalias !39
  %539 = call zeroext i1 @_ZN3jxl5AbortEv() #18, !noalias !39
  unreachable

540:                                              ; preds = %531
  %541 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %532, i64 0, i32 0
  %542 = load i32, i32* %541, align 4, !noalias !36
  %543 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %532, i64 0, i32 1
  %544 = load i32, i32* %543, align 4, !noalias !36
  %545 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %532, i64 1
  %546 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %545, %534
  br i1 %546, label %697, label %547

547:                                              ; preds = %540
  %548 = getelementptr %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %534, i64 -2
  %549 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %548 to i64
  %550 = sub i64 %549, %533
  %551 = lshr i64 %550, 3
  %552 = add nuw nsw i64 %551, 1
  %553 = icmp ult i64 %552, 4
  br i1 %553, label %669, label %554

554:                                              ; preds = %547
  %555 = and i64 %552, 4611686018427387900
  %556 = getelementptr %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %545, i64 %555
  %557 = getelementptr %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %532, i64 %555
  %558 = insertelement <4 x i32> undef, i32 %544, i32 0
  %559 = shufflevector <4 x i32> %558, <4 x i32> undef, <4 x i32> zeroinitializer
  %560 = insertelement <4 x i32> undef, i32 %544, i32 0
  %561 = shufflevector <4 x i32> %560, <4 x i32> undef, <4 x i32> zeroinitializer
  %562 = insertelement <4 x i32> undef, i32 %542, i32 0
  %563 = shufflevector <4 x i32> %562, <4 x i32> undef, <4 x i32> zeroinitializer
  %564 = insertelement <4 x i32> undef, i32 %542, i32 0
  %565 = shufflevector <4 x i32> %564, <4 x i32> undef, <4 x i32> zeroinitializer
  %566 = add nsw i64 %555, -4
  %567 = lshr exact i64 %566, 2
  %568 = add nuw nsw i64 %567, 1
  %569 = and i64 %568, 1
  %570 = icmp eq i64 %566, 0
  br i1 %570, label %610, label %571

571:                                              ; preds = %554
  %572 = sub nuw nsw i64 %568, %569
  br label %573

573:                                              ; preds = %573, %571
  %574 = phi i64 [ 0, %571 ], [ %607, %573 ]
  %575 = phi <4 x i32> [ %559, %571 ], [ %606, %573 ]
  %576 = phi <4 x i32> [ %561, %571 ], [ %604, %573 ]
  %577 = phi <4 x i32> [ %563, %571 ], [ %602, %573 ]
  %578 = phi <4 x i32> [ %565, %571 ], [ %600, %573 ]
  %579 = phi i64 [ %572, %571 ], [ %608, %573 ]
  %580 = getelementptr %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %545, i64 %574
  %581 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %580 to <8 x i32>*
  %582 = load <8 x i32>, <8 x i32>* %581, align 4, !noalias !39
  %583 = shufflevector <8 x i32> %582, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %584 = shufflevector <8 x i32> %582, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %585 = icmp slt <4 x i32> %583, %578
  %586 = select <4 x i1> %585, <4 x i32> %583, <4 x i32> %578
  %587 = icmp slt <4 x i32> %577, %583
  %588 = select <4 x i1> %587, <4 x i32> %583, <4 x i32> %577
  %589 = icmp slt <4 x i32> %584, %576
  %590 = select <4 x i1> %589, <4 x i32> %584, <4 x i32> %576
  %591 = icmp slt <4 x i32> %575, %584
  %592 = select <4 x i1> %591, <4 x i32> %584, <4 x i32> %575
  %593 = or i64 %574, 4
  %594 = getelementptr %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %545, i64 %593
  %595 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %594 to <8 x i32>*
  %596 = load <8 x i32>, <8 x i32>* %595, align 4, !noalias !39
  %597 = shufflevector <8 x i32> %596, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %598 = shufflevector <8 x i32> %596, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %599 = icmp slt <4 x i32> %597, %586
  %600 = select <4 x i1> %599, <4 x i32> %597, <4 x i32> %586
  %601 = icmp slt <4 x i32> %588, %597
  %602 = select <4 x i1> %601, <4 x i32> %597, <4 x i32> %588
  %603 = icmp slt <4 x i32> %598, %590
  %604 = select <4 x i1> %603, <4 x i32> %598, <4 x i32> %590
  %605 = icmp slt <4 x i32> %592, %598
  %606 = select <4 x i1> %605, <4 x i32> %598, <4 x i32> %592
  %607 = add i64 %574, 8
  %608 = add i64 %579, -2
  %609 = icmp eq i64 %608, 0
  br i1 %609, label %610, label %573, !llvm.loop !40

610:                                              ; preds = %573, %554
  %611 = phi <4 x i32> [ undef, %554 ], [ %600, %573 ]
  %612 = phi <4 x i32> [ undef, %554 ], [ %602, %573 ]
  %613 = phi <4 x i32> [ undef, %554 ], [ %604, %573 ]
  %614 = phi <4 x i32> [ undef, %554 ], [ %606, %573 ]
  %615 = phi i64 [ 0, %554 ], [ %607, %573 ]
  %616 = phi <4 x i32> [ %559, %554 ], [ %606, %573 ]
  %617 = phi <4 x i32> [ %561, %554 ], [ %604, %573 ]
  %618 = phi <4 x i32> [ %563, %554 ], [ %602, %573 ]
  %619 = phi <4 x i32> [ %565, %554 ], [ %600, %573 ]
  %620 = icmp eq i64 %569, 0
  br i1 %620, label %635, label %621

621:                                              ; preds = %610
  %622 = getelementptr %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %545, i64 %615
  %623 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %622 to <8 x i32>*
  %624 = load <8 x i32>, <8 x i32>* %623, align 4, !noalias !39
  %625 = shufflevector <8 x i32> %624, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %626 = shufflevector <8 x i32> %624, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %627 = icmp slt <4 x i32> %616, %626
  %628 = select <4 x i1> %627, <4 x i32> %626, <4 x i32> %616
  %629 = icmp slt <4 x i32> %626, %617
  %630 = select <4 x i1> %629, <4 x i32> %626, <4 x i32> %617
  %631 = icmp slt <4 x i32> %618, %625
  %632 = select <4 x i1> %631, <4 x i32> %625, <4 x i32> %618
  %633 = icmp slt <4 x i32> %625, %619
  %634 = select <4 x i1> %633, <4 x i32> %625, <4 x i32> %619
  br label %635

635:                                              ; preds = %610, %621
  %636 = phi <4 x i32> [ %611, %610 ], [ %634, %621 ]
  %637 = phi <4 x i32> [ %612, %610 ], [ %632, %621 ]
  %638 = phi <4 x i32> [ %613, %610 ], [ %630, %621 ]
  %639 = phi <4 x i32> [ %614, %610 ], [ %628, %621 ]
  %640 = shufflevector <4 x i32> %636, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %641 = icmp slt <4 x i32> %636, %640
  %642 = select <4 x i1> %641, <4 x i32> %636, <4 x i32> %640
  %643 = shufflevector <4 x i32> %642, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %644 = icmp slt <4 x i32> %642, %643
  %645 = select <4 x i1> %644, <4 x i32> %642, <4 x i32> %643
  %646 = extractelement <4 x i32> %645, i32 0
  %647 = shufflevector <4 x i32> %637, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %648 = icmp sgt <4 x i32> %637, %647
  %649 = select <4 x i1> %648, <4 x i32> %637, <4 x i32> %647
  %650 = shufflevector <4 x i32> %649, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %651 = icmp sgt <4 x i32> %649, %650
  %652 = select <4 x i1> %651, <4 x i32> %649, <4 x i32> %650
  %653 = extractelement <4 x i32> %652, i32 0
  %654 = shufflevector <4 x i32> %638, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %655 = icmp slt <4 x i32> %638, %654
  %656 = select <4 x i1> %655, <4 x i32> %638, <4 x i32> %654
  %657 = shufflevector <4 x i32> %656, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %658 = icmp slt <4 x i32> %656, %657
  %659 = select <4 x i1> %658, <4 x i32> %656, <4 x i32> %657
  %660 = extractelement <4 x i32> %659, i32 0
  %661 = shufflevector <4 x i32> %639, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %662 = icmp sgt <4 x i32> %639, %661
  %663 = select <4 x i1> %662, <4 x i32> %639, <4 x i32> %661
  %664 = shufflevector <4 x i32> %663, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %665 = icmp sgt <4 x i32> %663, %664
  %666 = select <4 x i1> %665, <4 x i32> %663, <4 x i32> %664
  %667 = extractelement <4 x i32> %666, i32 0
  %668 = icmp eq i64 %552, %555
  br i1 %668, label %697, label %669

669:                                              ; preds = %635, %547
  %670 = phi %"struct.jxl::(anonymous namespace)::Pixel"* [ %545, %547 ], [ %556, %635 ]
  %671 = phi i32 [ %544, %547 ], [ %667, %635 ]
  %672 = phi i32 [ %544, %547 ], [ %660, %635 ]
  %673 = phi i32 [ %542, %547 ], [ %653, %635 ]
  %674 = phi i32 [ %542, %547 ], [ %646, %635 ]
  %675 = phi %"struct.jxl::(anonymous namespace)::Pixel"* [ %532, %547 ], [ %557, %635 ]
  br label %676

676:                                              ; preds = %669, %676
  %677 = phi %"struct.jxl::(anonymous namespace)::Pixel"* [ %695, %676 ], [ %670, %669 ]
  %678 = phi i32 [ %694, %676 ], [ %671, %669 ]
  %679 = phi i32 [ %692, %676 ], [ %672, %669 ]
  %680 = phi i32 [ %690, %676 ], [ %673, %669 ]
  %681 = phi i32 [ %688, %676 ], [ %674, %669 ]
  %682 = phi %"struct.jxl::(anonymous namespace)::Pixel"* [ %677, %676 ], [ %675, %669 ]
  %683 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %677, i64 0, i32 0
  %684 = load i32, i32* %683, align 4, !noalias !39
  %685 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %682, i64 1, i32 1
  %686 = load i32, i32* %685, align 4, !noalias !39
  %687 = icmp slt i32 %684, %681
  %688 = select i1 %687, i32 %684, i32 %681
  %689 = icmp slt i32 %680, %684
  %690 = select i1 %689, i32 %684, i32 %680
  %691 = icmp slt i32 %686, %679
  %692 = select i1 %691, i32 %686, i32 %679
  %693 = icmp slt i32 %678, %686
  %694 = select i1 %693, i32 %686, i32 %678
  %695 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %677, i64 1
  %696 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %695, %534
  br i1 %696, label %697, label %676, !llvm.loop !42

697:                                              ; preds = %676, %635, %540
  %698 = phi i32 [ %542, %540 ], [ %646, %635 ], [ %688, %676 ]
  %699 = phi i32 [ %542, %540 ], [ %653, %635 ], [ %690, %676 ]
  %700 = phi i32 [ %544, %540 ], [ %660, %635 ], [ %692, %676 ]
  %701 = phi i32 [ %544, %540 ], [ %667, %635 ], [ %694, %676 ]
  %702 = sext i32 %698 to i64
  %703 = sext i32 %700 to i64
  %704 = sub i32 1, %698
  %705 = add i32 %704, %699
  %706 = sext i32 %705 to i64
  %707 = sub i32 1, %700
  %708 = add i32 %707, %701
  %709 = sext i32 %708 to i64
  %710 = icmp ult i64 %706, %271
  %711 = icmp ult i64 %709, %271
  %712 = and i1 %710, %711
  br i1 %712, label %713, label %1042

713:                                              ; preds = %697
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %272) #8, !noalias !24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %272, i8* align 8 bitcast (%"struct.jxl::(anonymous namespace)::ConnectedComponent"* @__const._ZN3jxl12_GLOBAL__N_16FindCCERKNS_5PlaneIfEEddjd.cc to i8*), i64 88, i1 false) #8, !noalias !24
  store i64 %702, i64* %273, align 8, !noalias !24
  store i64 %703, i64* %274, align 8, !noalias !24
  store i64 %706, i64* %275, align 8, !noalias !24
  store i64 %709, i64* %276, align 8, !noalias !24
  call void @llvm.memset.p0i8.i64(i8* align 8 %278, i8 0, i64 24, i1 false) #8, !noalias !24
  %714 = sub i64 %536, %533
  %715 = ashr exact i64 %714, 3
  %716 = icmp eq i64 %714, 0
  br i1 %716, label %734, label %717

717:                                              ; preds = %713
  %718 = icmp ugt i64 %715, 2305843009213693951
  br i1 %718, label %719, label %721

719:                                              ; preds = %717
  %720 = bitcast %"class.std::__1::vector.32"* %277 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %720) #18
  unreachable

721:                                              ; preds = %717
  %722 = call i8* @_Znwm(i64 %714) #19
  %723 = bitcast i8* %722 to %"struct.jxl::(anonymous namespace)::Pixel"*
  store i8* %722, i8** %280, align 8, !noalias !24
  store i8* %722, i8** %281, align 8, !noalias !24
  %724 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %723, i64 %715
  store %"struct.jxl::(anonymous namespace)::Pixel"* %724, %"struct.jxl::(anonymous namespace)::Pixel"** %282, align 8, !noalias !24
  %725 = ptrtoint i8* %722 to i64
  %726 = icmp sgt i64 %714, 0
  br i1 %726, label %727, label %732

727:                                              ; preds = %721
  %728 = lshr exact i64 %714, 3
  %729 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %532 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %722, i8* align 4 %729, i64 %714, i1 false) #8
  %730 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %723, i64 %728
  %731 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %730 to i64
  br label %732

732:                                              ; preds = %727, %721
  %733 = phi i64 [ %731, %727 ], [ %725, %721 ]
  store i64 %733, i64* %283, align 8, !noalias !24
  br label %734

734:                                              ; preds = %732, %713
  store i32 0, i32* %289, align 8, !noalias !24
  store i32 0, i32* %290, align 4, !noalias !24
  call void @llvm.memset.p0i8.i64(i8* align 8 %291, i8 0, i64 20, i1 false) #8, !noalias !24
  %735 = icmp sgt i32 %708, -8
  br i1 %735, label %736, label %837

736:                                              ; preds = %734
  %737 = add nsw i64 %709, %703
  %738 = add nsw i32 %708, 3
  %739 = icmp sgt i32 %705, -8
  %740 = add nsw i64 %706, %702
  %741 = add nsw i32 %705, 3
  %742 = sext i32 %741 to i64
  %743 = sext i32 %738 to i64
  br label %744

744:                                              ; preds = %828, %736
  %745 = phi i64 [ %835, %828 ], [ -4, %736 ]
  %746 = phi float [ %829, %828 ], [ 0.000000e+00, %736 ]
  %747 = phi float [ %830, %828 ], [ 0.000000e+00, %736 ]
  %748 = phi float [ %831, %828 ], [ 0.000000e+00, %736 ]
  %749 = phi i32 [ %833, %828 ], [ 0, %736 ]
  %750 = phi i32 [ %832, %828 ], [ 0, %736 ]
  %751 = phi <2 x float> [ %834, %828 ], [ zeroinitializer, %736 ]
  %752 = add nsw i64 %745, %703
  %753 = icmp slt i64 %752, 0
  br i1 %753, label %828, label %754

754:                                              ; preds = %744
  %755 = load i32, i32* %38, align 4, !noalias !24
  %756 = zext i32 %755 to i64
  %757 = icmp ult i64 %752, %756
  br i1 %757, label %758, label %828

758:                                              ; preds = %754
  %759 = load i8*, i8** %40, align 8, !noalias !24
  %760 = load i64, i64* %39, align 8, !noalias !24
  %761 = mul i64 %760, %752
  %762 = getelementptr inbounds i8, i8* %759, i64 %761
  %763 = ptrtoint i8* %762 to i64
  %764 = and i64 %763, 63
  %765 = icmp eq i64 %764, 0
  call void @llvm.assume(i1 %765) #8
  %766 = bitcast i8* %762 to float*
  br i1 %739, label %767, label %828

767:                                              ; preds = %758
  %768 = trunc i64 %752 to i32
  %769 = icmp ugt i32 %700, %768
  %770 = icmp ule i64 %737, %752
  br label %771

771:                                              ; preds = %819, %767
  %772 = phi i64 [ %826, %819 ], [ -4, %767 ]
  %773 = phi float [ %820, %819 ], [ %746, %767 ]
  %774 = phi float [ %821, %819 ], [ %747, %767 ]
  %775 = phi float [ %822, %819 ], [ %748, %767 ]
  %776 = phi i32 [ %824, %819 ], [ %749, %767 ]
  %777 = phi i32 [ %823, %819 ], [ %750, %767 ]
  %778 = phi <2 x float> [ %825, %819 ], [ %751, %767 ]
  %779 = add nsw i64 %772, %702
  %780 = icmp slt i64 %779, 0
  br i1 %780, label %819, label %781

781:                                              ; preds = %771
  %782 = load i32, i32* %37, align 8, !noalias !24
  %783 = zext i32 %782 to i64
  %784 = icmp ult i64 %779, %783
  br i1 %784, label %785, label %819

785:                                              ; preds = %781
  %786 = getelementptr inbounds float, float* %766, i64 %779
  %787 = load float, float* %786, align 4
  %788 = fcmp ogt float %787, %775
  br i1 %788, label %791, label %789

789:                                              ; preds = %785
  %790 = trunc i64 %779 to i32
  br label %794

791:                                              ; preds = %785
  store float %787, float* %284, align 8, !noalias !24
  %792 = trunc i64 %779 to i32
  store i32 %792, i32* %289, align 8, !noalias !24
  store i32 %768, i32* %290, align 4, !noalias !24
  %793 = load float, float* %786, align 4
  br label %794

794:                                              ; preds = %791, %789
  %795 = phi i32 [ %790, %789 ], [ %792, %791 ]
  %796 = phi float [ %787, %789 ], [ %793, %791 ]
  %797 = phi float [ %775, %789 ], [ %787, %791 ]
  %798 = icmp ugt i32 %698, %795
  %799 = icmp ule i64 %740, %779
  %800 = or i1 %799, %798
  %801 = or i1 %769, %800
  %802 = or i1 %770, %801
  br i1 %802, label %809, label %803

803:                                              ; preds = %794
  %804 = fadd float %774, %796
  store float %804, float* %285, align 4, !noalias !24
  %805 = load float, float* %786, align 4
  %806 = fmul float %805, %805
  %807 = fadd float %773, %806
  store float %807, float* %286, align 8, !noalias !24
  %808 = add nsw i32 %777, 1
  br label %819

809:                                              ; preds = %794
  %810 = extractelement <2 x float> %778, i32 1
  %811 = fadd float %810, %796
  store float %811, float* %287, align 4, !noalias !24
  %812 = load float, float* %786, align 4
  %813 = fmul float %812, %812
  %814 = extractelement <2 x float> %778, i32 0
  %815 = fadd float %814, %813
  store float %815, float* %288, align 8, !noalias !24
  %816 = add nsw i32 %776, 1
  %817 = insertelement <2 x float> undef, float %815, i32 0
  %818 = insertelement <2 x float> %817, float %811, i32 1
  br label %819

819:                                              ; preds = %809, %803, %781, %771
  %820 = phi float [ %773, %781 ], [ %773, %771 ], [ %807, %803 ], [ %773, %809 ]
  %821 = phi float [ %774, %781 ], [ %774, %771 ], [ %804, %803 ], [ %774, %809 ]
  %822 = phi float [ %775, %781 ], [ %775, %771 ], [ %797, %803 ], [ %797, %809 ]
  %823 = phi i32 [ %777, %781 ], [ %777, %771 ], [ %808, %803 ], [ %777, %809 ]
  %824 = phi i32 [ %776, %781 ], [ %776, %771 ], [ %776, %803 ], [ %816, %809 ]
  %825 = phi <2 x float> [ %778, %781 ], [ %778, %771 ], [ %778, %803 ], [ %818, %809 ]
  %826 = add nsw i64 %772, 1
  %827 = icmp slt i64 %772, %742
  br i1 %827, label %771, label %828

828:                                              ; preds = %819, %758, %754, %744
  %829 = phi float [ %746, %754 ], [ %746, %744 ], [ %746, %758 ], [ %820, %819 ]
  %830 = phi float [ %747, %754 ], [ %747, %744 ], [ %747, %758 ], [ %821, %819 ]
  %831 = phi float [ %748, %754 ], [ %748, %744 ], [ %748, %758 ], [ %822, %819 ]
  %832 = phi i32 [ %750, %754 ], [ %750, %744 ], [ %750, %758 ], [ %823, %819 ]
  %833 = phi i32 [ %749, %754 ], [ %749, %744 ], [ %749, %758 ], [ %824, %819 ]
  %834 = phi <2 x float> [ %751, %754 ], [ %751, %744 ], [ %751, %758 ], [ %825, %819 ]
  %835 = add nsw i64 %745, 1
  %836 = icmp slt i64 %745, %743
  br i1 %836, label %744, label %837

837:                                              ; preds = %828, %734
  %838 = phi float [ 0.000000e+00, %734 ], [ %829, %828 ]
  %839 = phi float [ 0.000000e+00, %734 ], [ %830, %828 ]
  %840 = phi i32 [ 0, %734 ], [ %832, %828 ]
  %841 = phi i32 [ 0, %734 ], [ %833, %828 ]
  %842 = phi <2 x float> [ zeroinitializer, %734 ], [ %834, %828 ]
  %843 = sitofp i32 %840 to float
  %844 = fdiv float %839, %843
  store float %844, float* %285, align 4, !noalias !24
  %845 = sitofp i32 %841 to float
  %846 = insertelement <2 x float> undef, float %845, i32 0
  %847 = shufflevector <2 x float> %846, <2 x float> undef, <2 x i32> zeroinitializer
  %848 = fdiv <2 x float> %842, %847
  %849 = extractelement <2 x float> %848, i32 1
  store float %849, float* %287, align 4, !noalias !24
  %850 = fdiv float %838, %843
  %851 = fmul float %844, %844
  %852 = fsub float %850, %851
  store float %852, float* %286, align 8, !noalias !24
  %853 = fmul float %849, %849
  %854 = extractelement <2 x float> %848, i32 0
  %855 = fsub float %854, %853
  store float %855, float* %288, align 8, !noalias !24
  %856 = fsub float %844, %849
  %857 = call float @sqrtf(float %855) #8, !noalias !24
  %858 = fdiv float %856, %857
  store float %858, float* %292, align 4, !noalias !24
  %859 = fpext float %858 to double
  %860 = fcmp olt double %859, %190
  br i1 %860, label %1035, label %861

861:                                              ; preds = %837
  %862 = load %"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"struct.jxl::(anonymous namespace)::ConnectedComponent"** %179, align 8, !alias.scope !24
  %863 = load %"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"struct.jxl::(anonymous namespace)::ConnectedComponent"** %180, align 8, !alias.scope !24
  %864 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %862, %863
  %865 = ptrtoint %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %863 to i64
  br i1 %864, label %906, label %866

866:                                              ; preds = %861
  %867 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %862 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %867, i8* nonnull align 8 %272, i64 32, i1 false) #8
  %868 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %862, i64 0, i32 1
  %869 = bitcast %"class.std::__1::vector.32"* %868 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %869, i8 0, i64 24, i1 false) #8
  %870 = load i64, i64* %283, align 8, !noalias !24
  %871 = load i64, i64* %293, align 8, !noalias !24
  %872 = sub i64 %870, %871
  %873 = ashr exact i64 %872, 3
  %874 = icmp eq i64 %872, 0
  br i1 %874, label %901, label %875

875:                                              ; preds = %866
  %876 = icmp ugt i64 %873, 2305843009213693951
  br i1 %876, label %877, label %879

877:                                              ; preds = %875
  %878 = bitcast %"class.std::__1::vector.32"* %868 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %878) #18
  unreachable

879:                                              ; preds = %875
  %880 = call i8* @_Znwm(i64 %872) #19
  %881 = bitcast i8* %880 to %"struct.jxl::(anonymous namespace)::Pixel"*
  %882 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %862, i64 0, i32 1, i32 0, i32 1
  %883 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %882 to i8**
  store i8* %880, i8** %883, align 8
  %884 = bitcast %"class.std::__1::vector.32"* %868 to i8**
  store i8* %880, i8** %884, align 8
  %885 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %881, i64 %873
  %886 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %862, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::(anonymous namespace)::Pixel"* %885, %"struct.jxl::(anonymous namespace)::Pixel"** %886, align 8
  %887 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %294, align 8, !noalias !24
  %888 = load i64, i64* %283, align 8, !noalias !24
  %889 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %882 to i64*
  %890 = ptrtoint i8* %880 to i64
  %891 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %887 to i64
  %892 = sub i64 %888, %891
  %893 = icmp sgt i64 %892, 0
  br i1 %893, label %894, label %899

894:                                              ; preds = %879
  %895 = lshr exact i64 %892, 3
  %896 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %887 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %880, i8* align 4 %896, i64 %892, i1 false) #8
  %897 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %881, i64 %895
  %898 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %897 to i64
  br label %899

899:                                              ; preds = %894, %879
  %900 = phi i64 [ %898, %894 ], [ %890, %879 ]
  store i64 %900, i64* %889, align 8
  br label %901

901:                                              ; preds = %899, %866
  %902 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %862, i64 0, i32 2
  %903 = bitcast float* %902 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %903, i8* align 8 %291, i64 32, i1 false) #8
  %904 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %862, i64 1
  %905 = ptrtoint %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %904 to i64
  store i64 %905, i64* %295, align 8, !alias.scope !24
  br label %1028

906:                                              ; preds = %861
  %907 = ptrtoint %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %862 to i64
  %908 = load i64, i64* %296, align 8, !alias.scope !24
  %909 = sub i64 %907, %908
  %910 = sdiv exact i64 %909, 88
  %911 = add nsw i64 %910, 1
  %912 = icmp ugt i64 %911, 209622091746699450
  %913 = inttoptr i64 %908 to %"struct.jxl::(anonymous namespace)::ConnectedComponent"*
  br i1 %912, label %914, label %916

914:                                              ; preds = %906
  %915 = bitcast %"class.std::__1::vector.30"* %21 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %915) #18
  unreachable

916:                                              ; preds = %906
  %917 = sub i64 %865, %908
  %918 = sdiv exact i64 %917, 88
  %919 = icmp ult i64 %918, 104811045873349725
  br i1 %919, label %920, label %925

920:                                              ; preds = %916
  %921 = shl nsw i64 %918, 1
  %922 = icmp ult i64 %921, %911
  %923 = select i1 %922, i64 %911, i64 %921
  %924 = icmp eq i64 %923, 0
  br i1 %924, label %930, label %925

925:                                              ; preds = %920, %916
  %926 = phi i64 [ %923, %920 ], [ 209622091746699450, %916 ]
  %927 = mul i64 %926, 88
  %928 = call i8* @_Znwm(i64 %927) #19
  %929 = bitcast i8* %928 to %"struct.jxl::(anonymous namespace)::ConnectedComponent"*
  br label %930

930:                                              ; preds = %925, %920
  %931 = phi i64 [ %926, %925 ], [ 0, %920 ]
  %932 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %929, %925 ], [ null, %920 ]
  %933 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %932, i64 %910
  %934 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %932, i64 %931
  %935 = ptrtoint %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %934 to i64
  %936 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %933 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %936, i8* nonnull align 8 %272, i64 32, i1 false) #8, !noalias !24
  %937 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %932, i64 %910, i32 1
  %938 = bitcast %"class.std::__1::vector.32"* %937 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %938, i8 0, i64 24, i1 false) #8, !noalias !24
  %939 = load i64, i64* %283, align 8, !noalias !24
  %940 = load i64, i64* %293, align 8, !noalias !24
  %941 = sub i64 %939, %940
  %942 = ashr exact i64 %941, 3
  %943 = icmp eq i64 %941, 0
  br i1 %943, label %966, label %944

944:                                              ; preds = %930
  %945 = icmp ugt i64 %942, 2305843009213693951
  br i1 %945, label %946, label %948

946:                                              ; preds = %944
  %947 = bitcast %"class.std::__1::vector.32"* %937 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %947) #18
  unreachable

948:                                              ; preds = %944
  %949 = call i8* @_Znwm(i64 %941) #19
  %950 = bitcast i8* %949 to %"struct.jxl::(anonymous namespace)::Pixel"*
  %951 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %932, i64 %910, i32 1, i32 0, i32 1
  %952 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %951 to i8**
  store i8* %949, i8** %952, align 8, !noalias !24
  %953 = bitcast %"class.std::__1::vector.32"* %937 to i8**
  store i8* %949, i8** %953, align 8, !noalias !24
  %954 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %950, i64 %942
  %955 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %932, i64 %910, i32 1, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::(anonymous namespace)::Pixel"* %954, %"struct.jxl::(anonymous namespace)::Pixel"** %955, align 8, !noalias !24
  %956 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %951 to i64*
  %957 = ptrtoint i8* %949 to i64
  %958 = icmp sgt i64 %941, 0
  br i1 %958, label %959, label %964

959:                                              ; preds = %948
  %960 = lshr exact i64 %941, 3
  %961 = inttoptr i64 %940 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %949, i8* align 4 %961, i64 %941, i1 false) #8
  %962 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::Pixel", %"struct.jxl::(anonymous namespace)::Pixel"* %950, i64 %960
  %963 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %962 to i64
  br label %964

964:                                              ; preds = %959, %948
  %965 = phi i64 [ %963, %959 ], [ %957, %948 ]
  store i64 %965, i64* %956, align 8, !noalias !24
  br label %966

966:                                              ; preds = %964, %930
  %967 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %932, i64 %910, i32 2
  %968 = bitcast float* %967 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %968, i8* align 8 %291, i64 32, i1 false) #8, !noalias !24
  %969 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %933, i64 1
  %970 = ptrtoint %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %969 to i64
  %971 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %862, %913
  br i1 %971, label %1004, label %972

972:                                              ; preds = %966, %972
  %973 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %975, %972 ], [ %933, %966 ]
  %974 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %976, %972 ], [ %862, %966 ]
  %975 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %973, i64 -1
  %976 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %974, i64 -1
  %977 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %975 to i8*
  %978 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %976 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %977, i8* align 8 %978, i64 32, i1 false) #8
  %979 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %973, i64 -1, i32 1
  %980 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %974, i64 -1, i32 1
  %981 = bitcast %"class.std::__1::vector.32"* %979 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %981, i8 0, i64 24, i1 false) #8, !noalias !24
  %982 = bitcast %"class.std::__1::vector.32"* %980 to i64*
  %983 = load i64, i64* %982, align 8
  %984 = bitcast %"class.std::__1::vector.32"* %979 to i64*
  store i64 %983, i64* %984, align 8, !noalias !24
  %985 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %974, i64 -1, i32 1, i32 0, i32 1
  %986 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %985 to i64*
  %987 = load i64, i64* %986, align 8
  %988 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %973, i64 -1, i32 1, i32 0, i32 1
  %989 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %988 to i64*
  store i64 %987, i64* %989, align 8, !noalias !24
  %990 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %974, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %991 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %990 to i64*
  %992 = load i64, i64* %991, align 8
  %993 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %973, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %994 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %993 to i64*
  store i64 %992, i64* %994, align 8, !noalias !24
  %995 = bitcast %"class.std::__1::vector.32"* %980 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %995, i8 0, i64 24, i1 false) #8
  %996 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %973, i64 -1, i32 2
  %997 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %974, i64 -1, i32 2
  %998 = bitcast float* %996 to i8*
  %999 = bitcast float* %997 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %998, i8* align 8 %999, i64 32, i1 false) #8
  %1000 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %976, %913
  br i1 %1000, label %1001, label %972

1001:                                             ; preds = %972
  %1002 = load i64, i64* %296, align 8, !alias.scope !24
  %1003 = load %"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"struct.jxl::(anonymous namespace)::ConnectedComponent"** %179, align 8, !alias.scope !24
  br label %1004

1004:                                             ; preds = %1001, %966
  %1005 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %1003, %1001 ], [ %862, %966 ]
  %1006 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %975, %1001 ], [ %933, %966 ]
  %1007 = phi i64 [ %1002, %1001 ], [ %907, %966 ]
  %1008 = ptrtoint %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1006 to i64
  store i64 %1008, i64* %296, align 8, !alias.scope !24
  store i64 %970, i64* %295, align 8, !alias.scope !24
  store i64 %935, i64* %297, align 8, !alias.scope !24
  %1009 = inttoptr i64 %1007 to %"struct.jxl::(anonymous namespace)::ConnectedComponent"*
  %1010 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1005, %1009
  br i1 %1010, label %1024, label %1011

1011:                                             ; preds = %1004, %1022
  %1012 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %1013, %1022 ], [ %1005, %1004 ]
  %1013 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1012, i64 -1
  %1014 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1012, i64 -1, i32 1, i32 0, i32 0
  %1015 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %1014, align 8
  %1016 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %1015, null
  br i1 %1016, label %1022, label %1017

1017:                                             ; preds = %1011
  %1018 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %1015 to i64
  %1019 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1012, i64 -1, i32 1, i32 0, i32 1
  %1020 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %1019 to i64*
  store i64 %1018, i64* %1020, align 8
  %1021 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %1015 to i8*
  call void @_ZdlPv(i8* %1021) #19
  br label %1022

1022:                                             ; preds = %1017, %1011
  %1023 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1013, %1009
  br i1 %1023, label %1024, label %1011

1024:                                             ; preds = %1022, %1004
  %1025 = icmp eq i64 %1007, 0
  br i1 %1025, label %1028, label %1026

1026:                                             ; preds = %1024
  %1027 = inttoptr i64 %1007 to i8*
  call void @_ZdlPv(i8* %1027) #19
  br label %1028

1028:                                             ; preds = %1026, %1024, %901
  %1029 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %298, align 8, !noalias !24
  %1030 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %1029, null
  br i1 %1030, label %1034, label %1031

1031:                                             ; preds = %1028
  %1032 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %1029 to i64
  store i64 %1032, i64* %283, align 8, !noalias !24
  %1033 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %1029 to i8*
  call void @_ZdlPv(i8* %1033) #19
  br label %1034

1034:                                             ; preds = %1031, %1028
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %272) #8, !noalias !24
  br label %1042

1035:                                             ; preds = %837
  %1036 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %298, align 8, !noalias !24
  %1037 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %1036, null
  br i1 %1037, label %1041, label %1038

1038:                                             ; preds = %1035
  %1039 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %1036 to i64
  store i64 %1039, i64* %283, align 8, !noalias !24
  %1040 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %1036 to i8*
  call void @_ZdlPv(i8* %1040) #19
  br label %1041

1041:                                             ; preds = %1038, %1035
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %272) #8, !noalias !24
  br label %1042

1042:                                             ; preds = %1041, %1034, %697, %530
  %1043 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %256, align 8, !noalias !24
  %1044 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %1043, null
  br i1 %1044, label %1048, label %1045

1045:                                             ; preds = %1042
  %1046 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %1043 to i64
  store i64 %1046, i64* %266, align 8, !noalias !24
  %1047 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %1043 to i8*
  call void @_ZdlPv(i8* %1047) #19
  br label %1048

1048:                                             ; preds = %1045, %1042
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %255) #8, !noalias !24
  %1049 = load i32, i32* %192, align 8, !noalias !24
  br label %1050

1050:                                             ; preds = %1048, %325
  %1051 = phi i32 [ %1049, %1048 ], [ %326, %325 ]
  %1052 = add nuw nsw i64 %327, 1
  %1053 = zext i32 %1051 to i64
  %1054 = icmp ult i64 %1052, %1053
  br i1 %1054, label %325, label %316

1055:                                             ; preds = %318, %251
  %1056 = load i8*, i8** %195, align 8, !noalias !24
  store i8* null, i8** %195, align 8, !noalias !24
  %1057 = icmp eq i8* %1056, null
  br i1 %1057, label %1059, label %1058

1058:                                             ; preds = %1055
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1056) #8
  br label %1059

1059:                                             ; preds = %1055, %1058
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %191) #8, !noalias !24
  %1060 = getelementptr inbounds %"struct.jxl::GaussianDetectParams", %"struct.jxl::GaussianDetectParams"* %2, i64 0, i32 9
  %1061 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"** %179 to i64*
  %1062 = load i64, i64* %1061, align 8
  %1063 = bitcast %"class.std::__1::vector.30"* %21 to i64*
  %1064 = load i64, i64* %1063, align 8
  %1065 = sub i64 %1062, %1064
  %1066 = sdiv exact i64 %1065, 88
  %1067 = getelementptr inbounds %"struct.jxl::GaussianDetectParams", %"struct.jxl::GaussianDetectParams"* %2, i64 0, i32 10
  %1068 = load i64, i64* %1067, align 8
  %1069 = mul i64 %1066, %1068
  %1070 = udiv i64 %1069, 100
  %1071 = load i64, i64* %1060, align 8
  %1072 = icmp ult i64 %1070, %1071
  %1073 = select i1 %1072, i64 %1070, i64 %1071
  %1074 = icmp ugt i64 %1066, %1073
  %1075 = inttoptr i64 %1064 to %"struct.jxl::(anonymous namespace)::ConnectedComponent"*
  %1076 = inttoptr i64 %1062 to %"struct.jxl::(anonymous namespace)::ConnectedComponent"*
  br i1 %1074, label %1077, label %1097

1077:                                             ; preds = %1059
  call fastcc void @"_ZNSt3__16__sortIRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEvT0_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1075, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1076) #8
  %1078 = load %"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"struct.jxl::(anonymous namespace)::ConnectedComponent"** %178, align 8
  %1079 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1078, i64 %1073
  %1080 = load %"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"struct.jxl::(anonymous namespace)::ConnectedComponent"** %179, align 8
  %1081 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1079, %1080
  br i1 %1081, label %1097, label %1082

1082:                                             ; preds = %1077, %1093
  %1083 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %1084, %1093 ], [ %1080, %1077 ]
  %1084 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1083, i64 -1
  %1085 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1083, i64 -1, i32 1, i32 0, i32 0
  %1086 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %1085, align 8
  %1087 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %1086, null
  br i1 %1087, label %1093, label %1088

1088:                                             ; preds = %1082
  %1089 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %1086 to i64
  %1090 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1083, i64 -1, i32 1, i32 0, i32 1
  %1091 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %1090 to i64*
  store i64 %1089, i64* %1091, align 8
  %1092 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %1086 to i8*
  call void @_ZdlPv(i8* %1092) #19
  br label %1093

1093:                                             ; preds = %1088, %1082
  %1094 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1084, %1079
  br i1 %1094, label %1095, label %1082

1095:                                             ; preds = %1093
  store %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1079, %"struct.jxl::(anonymous namespace)::ConnectedComponent"** %179, align 8
  %1096 = load %"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"struct.jxl::(anonymous namespace)::ConnectedComponent"** %178, align 8
  br label %1097

1097:                                             ; preds = %1095, %1077, %1059
  %1098 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %1096, %1095 ], [ %1078, %1077 ], [ %1075, %1059 ]
  %1099 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %1079, %1095 ], [ %1079, %1077 ], [ %1076, %1059 ]
  %1100 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1098, %1099
  br i1 %1100, label %1159, label %1101

1101:                                             ; preds = %1097
  %1102 = bitcast %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22 to i8*
  %1103 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %1104 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 4
  %1105 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1106 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1107 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1108 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1109 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1110 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1111 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 0
  %1112 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 1
  %1113 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 5, i32 0, i64 0
  %1114 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 5, i32 0, i64 1
  %1115 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 5, i32 0, i64 2
  %1116 = bitcast %"class.jxl::Plane.54"* %6 to i8*
  %1117 = getelementptr inbounds %"class.jxl::Plane.54", %"class.jxl::Plane.54"* %6, i64 0, i32 0, i32 4
  %1118 = getelementptr inbounds %"class.jxl::Plane.54", %"class.jxl::Plane.54"* %6, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1119 = getelementptr inbounds %"class.jxl::Plane.54", %"class.jxl::Plane.54"* %6, i64 0, i32 0
  %1120 = bitcast %"class.jxl::Plane.54"* %7 to i8*
  %1121 = getelementptr inbounds %"class.jxl::Plane.54", %"class.jxl::Plane.54"* %7, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1122 = getelementptr inbounds %"class.jxl::Plane.54", %"class.jxl::Plane.54"* %7, i64 0, i32 0
  %1123 = bitcast %"class.jxl::Plane.54"* %8 to i8*
  %1124 = getelementptr inbounds %"class.jxl::Plane.54", %"class.jxl::Plane.54"* %8, i64 0, i32 0, i32 4
  %1125 = getelementptr inbounds %"class.jxl::Plane.54", %"class.jxl::Plane.54"* %8, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1126 = getelementptr inbounds %"class.jxl::Plane.54", %"class.jxl::Plane.54"* %8, i64 0, i32 0
  %1127 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 2
  %1128 = bitcast double* %1127 to i64*
  %1129 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 3
  %1130 = bitcast double* %1129 to i64*
  %1131 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 4
  %1132 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 6
  %1133 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 10, i32 0, i64 0
  %1134 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 10, i32 0, i64 2
  %1135 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 11
  %1136 = bitcast double* %1132 to i8*
  %1137 = bitcast i64* %1135 to i8*
  %1138 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 9
  %1139 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 12, i32 0, i64 1
  %1140 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 8
  %1141 = getelementptr inbounds %"struct.jxl::GaussianDetectParams", %"struct.jxl::GaussianDetectParams"* %2, i64 0, i32 7
  %1142 = getelementptr inbounds %"struct.jxl::GaussianDetectParams", %"struct.jxl::GaussianDetectParams"* %2, i64 0, i32 3
  %1143 = getelementptr inbounds %"struct.jxl::GaussianDetectParams", %"struct.jxl::GaussianDetectParams"* %2, i64 0, i32 4
  %1144 = getelementptr inbounds %"struct.jxl::GaussianDetectParams", %"struct.jxl::GaussianDetectParams"* %2, i64 0, i32 5
  %1145 = getelementptr inbounds %"struct.jxl::GaussianDetectParams", %"struct.jxl::GaussianDetectParams"* %2, i64 0, i32 6
  %1146 = bitcast %"struct.std::__1::pair"** %23 to i64*
  %1147 = bitcast %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22 to <2 x double>*
  %1148 = bitcast double* %1113 to <2 x double>*
  %1149 = bitcast double* %1133 to <2 x double>*
  %1150 = bitcast %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22 to <2 x double>*
  %1151 = bitcast double* %1127 to <2 x double>*
  %1152 = bitcast double* %1132 to <2 x double>*
  %1153 = bitcast double* %1132 to <2 x double>*
  %1154 = bitcast double* %1132 to <2 x double>*
  %1155 = bitcast double* %1132 to <2 x double>*
  %1156 = bitcast double* %1140 to <2 x double>*
  br label %1204

1157:                                             ; preds = %2142
  %1158 = load %"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"struct.jxl::(anonymous namespace)::ConnectedComponent"** %178, align 8
  br label %1159

1159:                                             ; preds = %1157, %1097
  %1160 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %1158, %1157 ], [ %1098, %1097 ]
  %1161 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1160, null
  br i1 %1161, label %1184, label %1162

1162:                                             ; preds = %1159
  %1163 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1160 to i8*
  %1164 = load %"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"struct.jxl::(anonymous namespace)::ConnectedComponent"** %179, align 8
  %1165 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1164, %1160
  br i1 %1165, label %1182, label %1166

1166:                                             ; preds = %1162, %1177
  %1167 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %1168, %1177 ], [ %1164, %1162 ]
  %1168 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1167, i64 -1
  %1169 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1167, i64 -1, i32 1, i32 0, i32 0
  %1170 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %1169, align 8
  %1171 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %1170, null
  br i1 %1171, label %1177, label %1172

1172:                                             ; preds = %1166
  %1173 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %1170 to i64
  %1174 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1167, i64 -1, i32 1, i32 0, i32 1
  %1175 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %1174 to i64*
  store i64 %1173, i64* %1175, align 8
  %1176 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %1170 to i8*
  call void @_ZdlPv(i8* %1176) #19
  br label %1177

1177:                                             ; preds = %1172, %1166
  %1178 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1168, %1160
  br i1 %1178, label %1179, label %1166

1179:                                             ; preds = %1177
  %1180 = bitcast %"class.std::__1::vector.30"* %21 to i8**
  %1181 = load i8*, i8** %1180, align 8
  br label %1182

1182:                                             ; preds = %1179, %1162
  %1183 = phi i8* [ %1181, %1179 ], [ %1163, %1162 ]
  store %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1160, %"struct.jxl::(anonymous namespace)::ConnectedComponent"** %179, align 8
  call void @_ZdlPv(i8* %1183) #19
  br label %1184

1184:                                             ; preds = %1159, %1182
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %177) #8
  %1185 = load i8*, i8** %40, align 8
  store i8* null, i8** %40, align 8
  %1186 = icmp eq i8* %1185, null
  br i1 %1186, label %1188, label %1187

1187:                                             ; preds = %1184
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1185) #8
  br label %1188

1188:                                             ; preds = %1184, %1187
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #8
  %1189 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %1190 = load i8*, i8** %1189, align 8
  store i8* null, i8** %1189, align 8
  %1191 = icmp eq i8* %1190, null
  br i1 %1191, label %1193, label %1192

1192:                                             ; preds = %1188
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1190) #8
  br label %1193

1193:                                             ; preds = %1192, %1188
  %1194 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %1195 = load i8*, i8** %1194, align 8
  store i8* null, i8** %1194, align 8
  %1196 = icmp eq i8* %1195, null
  br i1 %1196, label %1198, label %1197

1197:                                             ; preds = %1193
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1195) #8
  br label %1198

1198:                                             ; preds = %1197, %1193
  %1199 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %1200 = load i8*, i8** %1199, align 8
  store i8* null, i8** %1199, align 8
  %1201 = icmp eq i8* %1200, null
  br i1 %1201, label %1203, label %1202

1202:                                             ; preds = %1198
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1200) #8
  br label %1203

1203:                                             ; preds = %1198, %1202
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %26) #8
  ret void

1204:                                             ; preds = %1101, %2142
  %1205 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %1098, %1101 ], [ %2143, %2142 ]
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %1102) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %1102, i8* align 8 bitcast (%"struct.jxl::(anonymous namespace)::GaussianEllipse"* @__const._ZN3jxl12_GLOBAL__N_115FitGaussianFastERKNS0_18ConnectedComponentERKNS_5PlaneIfEERKNS_6Image3IfEESB_.ans to i8*), i64 152, i1 false) #8
  %1206 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1205, i64 0, i32 8, i32 1
  %1207 = load i32, i32* %1206, align 4, !noalias !44
  %1208 = sext i32 %1207 to i64
  %1209 = load i64, i64* %1103, align 8, !noalias !44
  %1210 = mul i64 %1209, %1208
  %1211 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1205, i64 0, i32 8, i32 0
  %1212 = load i32, i32* %1211, align 8, !noalias !44
  %1213 = sext i32 %1212 to i64
  %1214 = load i64, i64* %1104, align 8, !noalias !44
  %1215 = mul i64 %1214, %1208
  %1216 = load i8*, i8** %1105, align 8, !noalias !44
  %1217 = ptrtoint i8* %1216 to i64
  %1218 = and i64 %1217, 63
  %1219 = icmp eq i64 %1218, 0
  call void @llvm.assume(i1 %1219) #8
  %1220 = getelementptr inbounds i8, i8* %1216, i64 %1210
  %1221 = ptrtoint i8* %1220 to i64
  %1222 = and i64 %1221, 63
  %1223 = icmp eq i64 %1222, 0
  call void @llvm.assume(i1 %1223) #8
  %1224 = bitcast i8* %1220 to float*
  %1225 = getelementptr inbounds float, float* %1224, i64 %1213
  %1226 = load float, float* %1225, align 4
  %1227 = load i8*, i8** %1106, align 8, !noalias !44
  %1228 = ptrtoint i8* %1227 to i64
  %1229 = and i64 %1228, 63
  %1230 = icmp eq i64 %1229, 0
  call void @llvm.assume(i1 %1230) #8
  %1231 = getelementptr inbounds i8, i8* %1227, i64 %1215
  %1232 = ptrtoint i8* %1231 to i64
  %1233 = and i64 %1232, 63
  %1234 = icmp eq i64 %1233, 0
  call void @llvm.assume(i1 %1234) #8
  %1235 = bitcast i8* %1231 to float*
  %1236 = getelementptr inbounds float, float* %1235, i64 %1213
  %1237 = load float, float* %1236, align 4
  %1238 = load i8*, i8** %1107, align 8, !noalias !44
  %1239 = ptrtoint i8* %1238 to i64
  %1240 = and i64 %1239, 63
  %1241 = icmp eq i64 %1240, 0
  call void @llvm.assume(i1 %1241) #8
  %1242 = getelementptr inbounds i8, i8* %1238, i64 %1210
  %1243 = ptrtoint i8* %1242 to i64
  %1244 = and i64 %1243, 63
  %1245 = icmp eq i64 %1244, 0
  call void @llvm.assume(i1 %1245) #8
  %1246 = bitcast i8* %1242 to float*
  %1247 = getelementptr inbounds float, float* %1246, i64 %1213
  %1248 = load float, float* %1247, align 4
  %1249 = load i8*, i8** %1108, align 8, !noalias !44
  %1250 = ptrtoint i8* %1249 to i64
  %1251 = and i64 %1250, 63
  %1252 = icmp eq i64 %1251, 0
  call void @llvm.assume(i1 %1252) #8
  %1253 = getelementptr inbounds i8, i8* %1249, i64 %1215
  %1254 = ptrtoint i8* %1253 to i64
  %1255 = and i64 %1254, 63
  %1256 = icmp eq i64 %1255, 0
  call void @llvm.assume(i1 %1256) #8
  %1257 = bitcast i8* %1253 to float*
  %1258 = getelementptr inbounds float, float* %1257, i64 %1213
  %1259 = load float, float* %1258, align 4
  %1260 = fsub float %1248, %1259
  %1261 = load i8*, i8** %1109, align 8, !noalias !44
  %1262 = ptrtoint i8* %1261 to i64
  %1263 = and i64 %1262, 63
  %1264 = icmp eq i64 %1263, 0
  call void @llvm.assume(i1 %1264) #8
  %1265 = getelementptr inbounds i8, i8* %1261, i64 %1210
  %1266 = ptrtoint i8* %1265 to i64
  %1267 = and i64 %1266, 63
  %1268 = icmp eq i64 %1267, 0
  call void @llvm.assume(i1 %1268) #8
  %1269 = bitcast i8* %1265 to float*
  %1270 = getelementptr inbounds float, float* %1269, i64 %1213
  %1271 = load float, float* %1270, align 4
  %1272 = load i8*, i8** %1110, align 8, !noalias !44
  %1273 = ptrtoint i8* %1272 to i64
  %1274 = and i64 %1273, 63
  %1275 = icmp eq i64 %1274, 0
  call void @llvm.assume(i1 %1275) #8
  %1276 = getelementptr inbounds i8, i8* %1272, i64 %1215
  %1277 = ptrtoint i8* %1276 to i64
  %1278 = and i64 %1277, 63
  %1279 = icmp eq i64 %1278, 0
  call void @llvm.assume(i1 %1279) #8
  %1280 = bitcast i8* %1276 to float*
  %1281 = getelementptr inbounds float, float* %1280, i64 %1213
  %1282 = load float, float* %1281, align 4
  %1283 = fcmp ogt float %1260, 0.000000e+00
  %1284 = select i1 %1283, double 1.000000e+00, double -1.000000e+00
  %1285 = load i32, i32* %38, align 4, !noalias !44
  %1286 = zext i32 %1285 to i64
  %1287 = load i32, i32* %37, align 8, !noalias !44
  %1288 = zext i32 %1287 to i64
  br label %1379

1289:                                             ; preds = %1481
  %1290 = icmp sgt i32 %1486, 0
  br i1 %1290, label %1291, label %1492

1291:                                             ; preds = %1289
  %1292 = fsub float %1271, %1282
  %1293 = fsub float %1226, %1237
  %1294 = fpext float %1292 to double
  %1295 = insertelement <2 x float> undef, float %1293, i32 0
  %1296 = insertelement <2 x float> %1295, float %1260, i32 1
  %1297 = fpext <2 x float> %1296 to <2 x double>
  %1298 = sitofp i32 %1486 to double
  %1299 = fdiv double %1485, %1487
  %1300 = insertelement <2 x double> undef, double %1487, i32 0
  %1301 = shufflevector <2 x double> %1300, <2 x double> undef, <2 x i32> zeroinitializer
  %1302 = fdiv <2 x double> %1488, %1301
  %1303 = fdiv double %1484, %1487
  %1304 = insertelement <2 x double> undef, double %1298, i32 0
  %1305 = shufflevector <2 x double> %1304, <2 x double> undef, <2 x i32> zeroinitializer
  %1306 = fdiv <2 x double> %1489, %1305
  %1307 = fdiv double %1483, %1487
  %1308 = fdiv double %1482, %1298
  store <2 x double> %1302, <2 x double>* %1147, align 16, !alias.scope !44
  %1309 = fmul <2 x double> %1297, <double 1.100000e+00, double 1.100000e+00>
  store <2 x double> %1309, <2 x double>* %1148, align 8, !alias.scope !44
  %1310 = fmul double %1294, 1.100000e+00
  store double %1310, double* %1115, align 8, !alias.scope !44
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1116) #8, !noalias !44
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1116, i8 -86, i64 32, i1 false) #8, !noalias !44
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %1119, i64 2, i64 2, i64 8) #8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1120) #8, !noalias !44
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1120, i8 -86, i64 32, i1 false) #8, !noalias !44
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %1122, i64 1, i64 2, i64 8) #8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1123) #8, !noalias !44
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1123, i8 -86, i64 32, i1 false) #8, !noalias !44
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %1126, i64 2, i64 2, i64 8) #8
  %1311 = extractelement <2 x double> %1302, i32 0
  %1312 = fmul double %1311, %1311
  %1313 = fsub double %1299, %1312
  %1314 = load i8*, i8** %1118, align 8, !noalias !44
  %1315 = ptrtoint i8* %1314 to i64
  %1316 = and i64 %1315, 63
  %1317 = icmp eq i64 %1316, 0
  call void @llvm.assume(i1 %1317) #8
  %1318 = bitcast i8* %1314 to double*
  store double %1313, double* %1318, align 64
  %1319 = extractelement <2 x double> %1302, i32 1
  %1320 = fmul double %1319, %1319
  %1321 = fsub double %1307, %1320
  %1322 = load i8*, i8** %1118, align 8, !noalias !44
  %1323 = load i64, i64* %1117, align 8, !noalias !44
  %1324 = getelementptr inbounds i8, i8* %1322, i64 %1323
  %1325 = ptrtoint i8* %1324 to i64
  %1326 = and i64 %1325, 63
  %1327 = icmp eq i64 %1326, 0
  call void @llvm.assume(i1 %1327) #8
  %1328 = getelementptr inbounds i8, i8* %1324, i64 8
  %1329 = bitcast i8* %1328 to double*
  store double %1321, double* %1329, align 8
  %1330 = fmul double %1311, %1319
  %1331 = fsub double %1303, %1330
  %1332 = load i8*, i8** %1118, align 8, !noalias !44
  %1333 = load i64, i64* %1117, align 8, !noalias !44
  %1334 = getelementptr inbounds i8, i8* %1332, i64 %1333
  %1335 = ptrtoint i8* %1334 to i64
  %1336 = and i64 %1335, 63
  %1337 = icmp eq i64 %1336, 0
  call void @llvm.assume(i1 %1337) #8
  %1338 = bitcast i8* %1334 to double*
  store double %1331, double* %1338, align 64
  %1339 = load i8*, i8** %1118, align 8, !noalias !44
  %1340 = ptrtoint i8* %1339 to i64
  %1341 = and i64 %1340, 63
  %1342 = icmp eq i64 %1341, 0
  call void @llvm.assume(i1 %1342) #8
  %1343 = getelementptr inbounds i8, i8* %1339, i64 8
  %1344 = bitcast i8* %1343 to double*
  store double %1331, double* %1344, align 8
  call void @_ZN3jxl17ConvertToDiagonalERKNS_5PlaneIdEEPS1_S4_(%"class.jxl::Plane.54"* nonnull dereferenceable(32) %6, %"class.jxl::Plane.54"* nonnull %7, %"class.jxl::Plane.54"* nonnull %8) #8
  %1345 = load i8*, i8** %1121, align 8, !noalias !44
  %1346 = ptrtoint i8* %1345 to i64
  %1347 = and i64 %1346, 63
  %1348 = icmp eq i64 %1347, 0
  call void @llvm.assume(i1 %1348) #8
  %1349 = bitcast i8* %1345 to double*
  %1350 = load i8*, i8** %1125, align 8, !noalias !44
  %1351 = load i64, i64* %1124, align 8, !noalias !44
  %1352 = getelementptr inbounds i8, i8* %1350, i64 %1351
  %1353 = ptrtoint i8* %1352 to i64
  %1354 = and i64 %1353, 63
  %1355 = icmp eq i64 %1354, 0
  call void @llvm.assume(i1 %1355) #8
  %1356 = bitcast i8* %1352 to double*
  %1357 = load double, double* %1349, align 64
  %1358 = getelementptr inbounds i8, i8* %1345, i64 8
  %1359 = bitcast i8* %1358 to double*
  %1360 = load double, double* %1359, align 8
  %1361 = fcmp olt double %1357, %1360
  %1362 = xor i1 %1361, true
  %1363 = zext i1 %1361 to i64
  %1364 = getelementptr inbounds double, double* %1349, i64 %1363
  %1365 = bitcast double* %1364 to i64*
  %1366 = load i64, i64* %1365, align 8
  store i64 %1366, i64* %1128, align 16, !alias.scope !44
  %1367 = zext i1 %1362 to i64
  %1368 = getelementptr inbounds double, double* %1349, i64 %1367
  %1369 = bitcast double* %1368 to i64*
  %1370 = load i64, i64* %1369, align 8
  store i64 %1370, i64* %1130, align 8, !alias.scope !44
  %1371 = getelementptr inbounds double, double* %1356, i64 %1363
  %1372 = load double, double* %1371, align 8
  %1373 = getelementptr inbounds double, double* %1356, i64 %1367
  %1374 = load double, double* %1373, align 8
  %1375 = call double @atan2(double %1372, double %1374) #8
  store double %1375, double* %1131, align 16, !alias.scope !44
  store double 0.000000e+00, double* %1132, align 16, !alias.scope !44
  store <2 x double> %1306, <2 x double>* %1149, align 16, !alias.scope !49
  store double %1308, double* %1134, align 16, !alias.scope !49
  %1376 = call double @cos(double %1375) #8
  %1377 = load double, double* %1131, align 16, !alias.scope !44
  %1378 = call double @sin(double %1377) #8
  br label %1732

1379:                                             ; preds = %1481, %1204
  %1380 = phi double [ 0.000000e+00, %1204 ], [ %1482, %1481 ]
  %1381 = phi i64 [ -2, %1204 ], [ %1490, %1481 ]
  %1382 = phi double [ 0.000000e+00, %1204 ], [ %1483, %1481 ]
  %1383 = phi double [ 0.000000e+00, %1204 ], [ %1484, %1481 ]
  %1384 = phi double [ 0.000000e+00, %1204 ], [ %1485, %1481 ]
  %1385 = phi double [ 0.000000e+00, %1204 ], [ %1487, %1481 ]
  %1386 = phi i32 [ 0, %1204 ], [ %1486, %1481 ]
  %1387 = phi <2 x double> [ zeroinitializer, %1204 ], [ %1488, %1481 ]
  %1388 = phi <2 x double> [ zeroinitializer, %1204 ], [ %1489, %1481 ]
  %1389 = add nsw i64 %1381, %1208
  %1390 = icmp sgt i64 %1389, -1
  %1391 = icmp ult i64 %1389, %1286
  %1392 = and i1 %1390, %1391
  br i1 %1392, label %1393, label %1481

1393:                                             ; preds = %1379
  %1394 = mul i64 %1389, %1209
  %1395 = getelementptr inbounds i8, i8* %1238, i64 %1394
  %1396 = ptrtoint i8* %1395 to i64
  %1397 = and i64 %1396, 63
  %1398 = icmp eq i64 %1397, 0
  call void @llvm.assume(i1 %1398) #8
  %1399 = bitcast i8* %1395 to float*
  %1400 = mul i64 %1389, %1214
  %1401 = getelementptr inbounds i8, i8* %1249, i64 %1400
  %1402 = ptrtoint i8* %1401 to i64
  %1403 = and i64 %1402, 63
  %1404 = icmp eq i64 %1403, 0
  call void @llvm.assume(i1 %1404) #8
  %1405 = bitcast i8* %1401 to float*
  %1406 = trunc i64 %1389 to i32
  %1407 = sitofp i32 %1406 to double
  %1408 = getelementptr inbounds i8, i8* %1227, i64 %1400
  %1409 = ptrtoint i8* %1408 to i64
  %1410 = and i64 %1409, 63
  %1411 = icmp eq i64 %1410, 0
  %1412 = bitcast i8* %1408 to float*
  %1413 = getelementptr inbounds i8, i8* %1272, i64 %1400
  %1414 = ptrtoint i8* %1413 to i64
  %1415 = and i64 %1414, 63
  %1416 = icmp eq i64 %1415, 0
  %1417 = bitcast i8* %1413 to float*
  br label %1418

1418:                                             ; preds = %1470, %1393
  %1419 = phi double [ %1380, %1393 ], [ %1471, %1470 ]
  %1420 = phi i64 [ -2, %1393 ], [ %1479, %1470 ]
  %1421 = phi double [ %1382, %1393 ], [ %1472, %1470 ]
  %1422 = phi double [ %1383, %1393 ], [ %1473, %1470 ]
  %1423 = phi double [ %1384, %1393 ], [ %1474, %1470 ]
  %1424 = phi double [ %1385, %1393 ], [ %1476, %1470 ]
  %1425 = phi i32 [ %1386, %1393 ], [ %1475, %1470 ]
  %1426 = phi <2 x double> [ %1387, %1393 ], [ %1477, %1470 ]
  %1427 = phi <2 x double> [ %1388, %1393 ], [ %1478, %1470 ]
  %1428 = add nsw i64 %1420, %1213
  %1429 = icmp sgt i64 %1428, -1
  %1430 = icmp ult i64 %1428, %1288
  %1431 = and i1 %1429, %1430
  br i1 %1431, label %1432, label %1470

1432:                                             ; preds = %1418
  %1433 = getelementptr inbounds float, float* %1399, i64 %1428
  %1434 = load float, float* %1433, align 4
  %1435 = getelementptr inbounds float, float* %1405, i64 %1428
  %1436 = load float, float* %1435, align 4
  %1437 = fsub float %1434, %1436
  %1438 = fpext float %1437 to double
  %1439 = fmul double %1284, %1438
  %1440 = fcmp ogt double %1439, 0x3EB0C6F7A0B5ED8D
  %1441 = select i1 %1440, double %1439, double 0x3EB0C6F7A0B5ED8D
  %1442 = trunc i64 %1428 to i32
  %1443 = sitofp i32 %1442 to double
  %1444 = insertelement <2 x double> undef, double %1441, i32 0
  %1445 = shufflevector <2 x double> %1444, <2 x double> undef, <2 x i32> zeroinitializer
  %1446 = insertelement <2 x double> undef, double %1443, i32 0
  %1447 = insertelement <2 x double> %1446, double %1407, i32 1
  %1448 = fmul <2 x double> %1445, %1447
  %1449 = extractelement <2 x double> %1448, i32 0
  %1450 = fmul double %1449, %1443
  %1451 = fmul double %1449, %1407
  %1452 = extractelement <2 x double> %1448, i32 1
  %1453 = fmul double %1452, %1407
  call void @llvm.assume(i1 %1411) #8
  %1454 = getelementptr inbounds float, float* %1412, i64 %1428
  %1455 = load float, float* %1454, align 4
  %1456 = insertelement <2 x float> undef, float %1455, i32 0
  %1457 = insertelement <2 x float> %1456, float %1436, i32 1
  %1458 = fpext <2 x float> %1457 to <2 x double>
  %1459 = fadd <2 x double> %1427, %1458
  call void @llvm.assume(i1 %1416) #8
  %1460 = getelementptr inbounds float, float* %1417, i64 %1428
  %1461 = load float, float* %1460, align 4
  %1462 = fpext float %1461 to double
  %1463 = fadd double %1419, %1462
  %1464 = fadd double %1424, %1441
  %1465 = fadd <2 x double> %1426, %1448
  %1466 = fadd double %1423, %1450
  %1467 = fadd double %1422, %1451
  %1468 = fadd double %1421, %1453
  %1469 = add nsw i32 %1425, 1
  br label %1470

1470:                                             ; preds = %1432, %1418
  %1471 = phi double [ %1463, %1432 ], [ %1419, %1418 ]
  %1472 = phi double [ %1468, %1432 ], [ %1421, %1418 ]
  %1473 = phi double [ %1467, %1432 ], [ %1422, %1418 ]
  %1474 = phi double [ %1466, %1432 ], [ %1423, %1418 ]
  %1475 = phi i32 [ %1469, %1432 ], [ %1425, %1418 ]
  %1476 = phi double [ %1464, %1432 ], [ %1424, %1418 ]
  %1477 = phi <2 x double> [ %1465, %1432 ], [ %1426, %1418 ]
  %1478 = phi <2 x double> [ %1459, %1432 ], [ %1427, %1418 ]
  %1479 = add nsw i64 %1420, 1
  %1480 = icmp eq i64 %1479, 3
  br i1 %1480, label %1481, label %1418

1481:                                             ; preds = %1470, %1379
  %1482 = phi double [ %1380, %1379 ], [ %1471, %1470 ]
  %1483 = phi double [ %1382, %1379 ], [ %1472, %1470 ]
  %1484 = phi double [ %1383, %1379 ], [ %1473, %1470 ]
  %1485 = phi double [ %1384, %1379 ], [ %1474, %1470 ]
  %1486 = phi i32 [ %1386, %1379 ], [ %1475, %1470 ]
  %1487 = phi double [ %1385, %1379 ], [ %1476, %1470 ]
  %1488 = phi <2 x double> [ %1387, %1379 ], [ %1477, %1470 ]
  %1489 = phi <2 x double> [ %1388, %1379 ], [ %1478, %1470 ]
  %1490 = add nsw i64 %1381, 1
  %1491 = icmp eq i64 %1490, 3
  br i1 %1491, label %1289, label %1379

1492:                                             ; preds = %1289
  %1493 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i64 0, i64 0), i32 456, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0)) #8
  %1494 = call zeroext i1 @_ZN3jxl5AbortEv() #18
  unreachable

1495:                                             ; preds = %1746
  %1496 = load double, double* %1131, align 16, !alias.scope !44
  %1497 = call double @cos(double %1496) #8
  %1498 = load double, double* %1131, align 16, !alias.scope !44
  %1499 = call double @sin(double %1498) #8
  call void @llvm.memset.p0i8.i64(i8* align 16 %1136, i8 0, i64 16, i1 false) #8, !alias.scope !44
  call void @llvm.memset.p0i8.i64(i8* align 8 %1137, i8 0, i64 32, i1 false) #8, !alias.scope !44
  %1500 = load i32, i32* %1211, align 8, !noalias !44
  %1501 = load double, double* %1111, align 16, !alias.scope !44
  %1502 = load i32, i32* %1206, align 4, !noalias !44
  %1503 = load double, double* %1112, align 8, !alias.scope !44
  store double 0.000000e+00, double* %1138, align 8, !alias.scope !44
  %1504 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1205, i64 0, i32 0, i32 3
  %1505 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1205, i64 0, i32 0, i32 1
  %1506 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1205, i64 0, i32 0, i32 2
  %1507 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1205, i64 0, i32 0, i32 0
  %1508 = load i64, i64* %1504, align 8, !noalias !44
  %1509 = insertelement <2 x double> undef, double %1497, i32 0
  %1510 = shufflevector <2 x double> %1509, <2 x double> undef, <2 x i32> zeroinitializer
  %1511 = insertelement <2 x double> undef, double %1499, i32 0
  %1512 = shufflevector <2 x double> %1511, <2 x double> undef, <2 x i32> zeroinitializer
  br label %1513

1513:                                             ; preds = %1528, %1495
  %1514 = phi i64 [ %1508, %1495 ], [ %1529, %1528 ]
  %1515 = phi double [ 0.000000e+00, %1495 ], [ %1530, %1528 ]
  %1516 = phi i64 [ %1508, %1495 ], [ %1531, %1528 ]
  %1517 = phi i64 [ 0, %1495 ], [ %1533, %1528 ]
  %1518 = phi i32 [ 0, %1495 ], [ %1532, %1528 ]
  %1519 = trunc i64 %1516 to i32
  %1520 = icmp sgt i32 %1519, -4
  br i1 %1520, label %1521, label %1528

1521:                                             ; preds = %1513
  %1522 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 %1517, i32 0, i32 5, i32 0, i32 0, i32 0
  %1523 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 %1517, i32 0, i32 5, i32 0, i32 0, i32 0
  %1524 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 5, i32 0, i64 %1517
  %1525 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 12, i32 0, i64 %1517
  %1526 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 10, i32 0, i64 %1517
  %1527 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* @_ZZN3jxl12_GLOBAL__N_116ComputeDotLossesEPNS0_15GaussianEllipseERKNS0_18ConnectedComponentERKNS_6Image3IfEES9_E12channelGains, i64 0, i32 0, i64 %1517
  br label %1535

1528:                                             ; preds = %1673, %1513
  %1529 = phi i64 [ %1514, %1513 ], [ %1674, %1673 ]
  %1530 = phi double [ %1515, %1513 ], [ %1675, %1673 ]
  %1531 = phi i64 [ %1516, %1513 ], [ %1674, %1673 ]
  %1532 = phi i32 [ %1518, %1513 ], [ %1676, %1673 ]
  %1533 = add nuw nsw i64 %1517, 1
  %1534 = icmp eq i64 %1533, 3
  br i1 %1534, label %1680, label %1513

1535:                                             ; preds = %1673, %1521
  %1536 = phi i64 [ %1514, %1521 ], [ %1674, %1673 ]
  %1537 = phi double [ %1515, %1521 ], [ %1675, %1673 ]
  %1538 = phi i32 [ %1518, %1521 ], [ %1676, %1673 ]
  %1539 = phi i32 [ -2, %1521 ], [ %1677, %1673 ]
  %1540 = load i64, i64* %1505, align 8, !noalias !44
  %1541 = trunc i64 %1540 to i32
  %1542 = add i32 %1539, %1541
  %1543 = icmp slt i32 %1542, 0
  br i1 %1543, label %1673, label %1544

1544:                                             ; preds = %1535
  %1545 = sext i32 %1542 to i64
  %1546 = load i32, i32* %30, align 4, !noalias !44
  %1547 = zext i32 %1546 to i64
  %1548 = icmp ugt i64 %1547, %1545
  br i1 %1548, label %1549, label %1673

1549:                                             ; preds = %1544
  %1550 = load i64, i64* %1103, align 8, !noalias !44
  %1551 = mul i64 %1550, %1545
  %1552 = load i8*, i8** %1522, align 8, !noalias !44
  %1553 = ptrtoint i8* %1552 to i64
  %1554 = and i64 %1553, 63
  %1555 = icmp eq i64 %1554, 0
  call void @llvm.assume(i1 %1555) #8
  %1556 = getelementptr inbounds i8, i8* %1552, i64 %1551
  %1557 = ptrtoint i8* %1556 to i64
  %1558 = and i64 %1557, 63
  %1559 = icmp eq i64 %1558, 0
  call void @llvm.assume(i1 %1559) #8
  %1560 = bitcast i8* %1556 to float*
  %1561 = load i64, i64* %1104, align 8, !noalias !44
  %1562 = mul i64 %1561, %1545
  %1563 = load i8*, i8** %1523, align 8, !noalias !44
  %1564 = ptrtoint i8* %1563 to i64
  %1565 = and i64 %1564, 63
  %1566 = icmp eq i64 %1565, 0
  call void @llvm.assume(i1 %1566) #8
  %1567 = getelementptr inbounds i8, i8* %1563, i64 %1562
  %1568 = ptrtoint i8* %1567 to i64
  %1569 = and i64 %1568, 63
  %1570 = icmp eq i64 %1569, 0
  call void @llvm.assume(i1 %1570) #8
  %1571 = load i64, i64* %1506, align 8, !noalias !44
  %1572 = trunc i64 %1571 to i32
  %1573 = icmp sgt i32 %1572, -4
  br i1 %1573, label %1574, label %1673

1574:                                             ; preds = %1549
  %1575 = sitofp i32 %1542 to double
  br label %1576

1576:                                             ; preds = %1664, %1574
  %1577 = phi double [ %1537, %1574 ], [ %1665, %1664 ]
  %1578 = phi i64 [ %1571, %1574 ], [ %1666, %1664 ]
  %1579 = phi i32 [ %1538, %1574 ], [ %1667, %1664 ]
  %1580 = phi i32 [ -2, %1574 ], [ %1668, %1664 ]
  %1581 = load i64, i64* %1507, align 8, !noalias !44
  %1582 = trunc i64 %1581 to i32
  %1583 = add i32 %1580, %1582
  %1584 = icmp slt i32 %1583, 0
  br i1 %1584, label %1664, label %1585

1585:                                             ; preds = %1576
  %1586 = sext i32 %1583 to i64
  %1587 = load i32, i32* %27, align 8, !noalias !44
  %1588 = zext i32 %1587 to i64
  %1589 = icmp ugt i64 %1588, %1586
  br i1 %1589, label %1590, label %1664

1590:                                             ; preds = %1585
  %1591 = getelementptr inbounds float, float* %1560, i64 %1586
  %1592 = load float, float* %1591, align 4
  %1593 = fpext float %1592 to double
  %1594 = sitofp i32 %1583 to double
  %1595 = load <2 x double>, <2 x double>* %1150, align 16, !alias.scope !44
  %1596 = insertelement <2 x double> undef, double %1594, i32 0
  %1597 = insertelement <2 x double> %1596, double %1575, i32 1
  %1598 = fsub <2 x double> %1597, %1595
  %1599 = load <2 x double>, <2 x double>* %1151, align 16, !alias.scope !44
  %1600 = load double, double* %1524, align 8, !alias.scope !44
  %1601 = shufflevector <2 x double> %1598, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %1602 = fmul <2 x double> %1512, %1601
  %1603 = fmul <2 x double> %1510, %1598
  %1604 = fadd <2 x double> %1603, %1602
  %1605 = fsub <2 x double> %1603, %1602
  %1606 = shufflevector <2 x double> %1604, <2 x double> %1605, <2 x i32> <i32 0, i32 3>
  %1607 = fmul <2 x double> %1606, %1606
  %1608 = fdiv <2 x double> %1607, %1599
  %1609 = extractelement <2 x double> %1608, i32 0
  %1610 = extractelement <2 x double> %1608, i32 1
  %1611 = fadd double %1609, %1610
  %1612 = fmul double %1611, -5.000000e-01
  %1613 = call double @exp(double %1612) #8
  %1614 = fmul double %1600, %1613
  %1615 = fadd double %1593, 1.000000e-01
  %1616 = fcmp ogt double %1614, %1615
  br i1 %1616, label %1617, label %1623

1617:                                             ; preds = %1590
  %1618 = load i64, i64* %1135, align 8, !alias.scope !44
  %1619 = add i64 %1618, 1
  store i64 %1619, i64* %1135, align 8, !alias.scope !44
  %1620 = fsub double %1614, %1593
  %1621 = load double, double* %1525, align 8, !alias.scope !44
  %1622 = fadd double %1620, %1621
  store double %1622, double* %1525, align 8, !alias.scope !44
  br label %1623

1623:                                             ; preds = %1617, %1590
  %1624 = load double, double* %1526, align 8, !alias.scope !44
  %1625 = fadd double %1614, %1624
  %1626 = fsub double %1593, %1625
  %1627 = load double, double* %1527, align 8
  %1628 = fmul double %1627, %1626
  %1629 = call double @llvm.fabs.f64(double %1626) #8
  %1630 = insertelement <2 x double> undef, double %1626, i32 0
  %1631 = insertelement <2 x double> %1630, double %1627, i32 1
  %1632 = insertelement <2 x double> undef, double %1628, i32 0
  %1633 = insertelement <2 x double> %1632, double %1629, i32 1
  %1634 = fmul <2 x double> %1631, %1633
  %1635 = load <2 x double>, <2 x double>* %1152, align 16, !alias.scope !44
  %1636 = fadd <2 x double> %1635, %1634
  store <2 x double> %1636, <2 x double>* %1153, align 16, !alias.scope !44
  %1637 = load i32, i32* %1211, align 8, !noalias !44
  %1638 = sub nsw i32 %1583, %1637
  %1639 = sitofp i32 %1638 to double
  %1640 = load i32, i32* %1206, align 4, !noalias !44
  %1641 = sub nsw i32 %1542, %1640
  %1642 = sitofp i32 %1641 to double
  %1643 = load double, double* %1127, align 16, !alias.scope !44
  %1644 = fadd double %1643, 1.000000e+00
  %1645 = load double, double* %1129, align 8, !alias.scope !44
  %1646 = fadd double %1645, 1.000000e+00
  %1647 = fmul double %1642, 0.000000e+00
  %1648 = fadd double %1647, %1639
  %1649 = fmul double %1639, 0.000000e+00
  %1650 = fsub double %1642, %1649
  %1651 = fmul double %1648, %1648
  %1652 = fdiv double %1651, %1644
  %1653 = fmul double %1650, %1650
  %1654 = fdiv double %1653, %1646
  %1655 = fadd double %1654, %1652
  %1656 = fmul double %1655, -5.000000e-01
  %1657 = call double @exp(double %1656) #8
  %1658 = extractelement <2 x double> %1634, i32 0
  %1659 = fmul double %1658, %1657
  %1660 = load double, double* %1138, align 8, !alias.scope !44
  %1661 = fadd double %1660, %1659
  store double %1661, double* %1138, align 8, !alias.scope !44
  %1662 = add nsw i32 %1579, 1
  %1663 = load i64, i64* %1506, align 8, !noalias !44
  br label %1664

1664:                                             ; preds = %1623, %1585, %1576
  %1665 = phi double [ %1661, %1623 ], [ %1577, %1585 ], [ %1577, %1576 ]
  %1666 = phi i64 [ %1663, %1623 ], [ %1578, %1585 ], [ %1578, %1576 ]
  %1667 = phi i32 [ %1662, %1623 ], [ %1579, %1585 ], [ %1579, %1576 ]
  %1668 = add nsw i32 %1580, 1
  %1669 = trunc i64 %1666 to i32
  %1670 = icmp sgt i32 %1580, %1669
  br i1 %1670, label %1671, label %1576

1671:                                             ; preds = %1664
  %1672 = load i64, i64* %1504, align 8, !noalias !44
  br label %1673

1673:                                             ; preds = %1671, %1549, %1544, %1535
  %1674 = phi i64 [ %1536, %1544 ], [ %1536, %1535 ], [ %1536, %1549 ], [ %1672, %1671 ]
  %1675 = phi double [ %1537, %1544 ], [ %1537, %1535 ], [ %1537, %1549 ], [ %1665, %1671 ]
  %1676 = phi i32 [ %1538, %1544 ], [ %1538, %1535 ], [ %1538, %1549 ], [ %1667, %1671 ]
  %1677 = add nsw i32 %1539, 1
  %1678 = trunc i64 %1674 to i32
  %1679 = icmp sgt i32 %1539, %1678
  br i1 %1679, label %1528, label %1535

1680:                                             ; preds = %1528
  %1681 = sitofp i32 %1502 to double
  %1682 = fsub double %1681, %1503
  %1683 = sitofp i32 %1500 to double
  %1684 = fsub double %1683, %1501
  %1685 = fmul double %1682, %1682
  %1686 = fmul double %1684, %1684
  %1687 = fadd double %1686, %1685
  %1688 = sitofp i32 %1532 to double
  %1689 = fdiv double %1530, %1688
  %1690 = load double, double* %1139, align 8, !alias.scope !44
  %1691 = load <2 x double>, <2 x double>* %1154, align 16, !alias.scope !44
  %1692 = insertelement <2 x double> undef, double %1688, i32 0
  %1693 = shufflevector <2 x double> %1692, <2 x double> undef, <2 x i32> zeroinitializer
  %1694 = fdiv <2 x double> %1691, %1693
  store <2 x double> %1694, <2 x double>* %1155, align 16, !alias.scope !44
  %1695 = load double, double* %1127, align 16, !alias.scope !44
  %1696 = fmul double %1695, 0.000000e+00
  %1697 = load double, double* %1129, align 8, !alias.scope !44
  %1698 = fmul double %1697, 0.000000e+00
  %1699 = fadd double %1696, %1698
  %1700 = load double, double* %1113, align 8, !alias.scope !44
  %1701 = fmul double %1700, 0.000000e+00
  %1702 = fmul double %1700, %1701
  %1703 = fadd double %1699, %1702
  %1704 = load double, double* %1114, align 8, !alias.scope !44
  %1705 = fmul double %1704, 0.000000e+00
  %1706 = fmul double %1704, %1705
  %1707 = fadd double %1703, %1706
  %1708 = load double, double* %1115, align 8, !alias.scope !44
  %1709 = fmul double %1708, 0.000000e+00
  %1710 = insertelement <2 x double> undef, double %1708, i32 0
  %1711 = insertelement <2 x double> %1710, double %1687, i32 1
  %1712 = insertelement <2 x double> <double undef, double 2.000000e+01>, double %1709, i32 0
  %1713 = fmul <2 x double> %1711, %1712
  %1714 = insertelement <2 x double> undef, double %1707, i32 0
  %1715 = insertelement <2 x double> %1714, double %1690, i32 1
  %1716 = fadd <2 x double> %1715, %1713
  %1717 = extractelement <2 x double> %1694, i32 0
  %1718 = insertelement <2 x double> undef, double %1717, i32 0
  %1719 = insertelement <2 x double> %1718, double %1689, i32 1
  %1720 = fadd <2 x double> %1719, %1716
  store <2 x double> %1720, <2 x double>* %1156, align 16, !alias.scope !44
  %1721 = load i8*, i8** %1125, align 8, !noalias !44
  store i8* null, i8** %1125, align 8, !noalias !44
  %1722 = icmp eq i8* %1721, null
  br i1 %1722, label %1724, label %1723

1723:                                             ; preds = %1680
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1721) #8
  br label %1724

1724:                                             ; preds = %1723, %1680
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1123) #8, !noalias !44
  %1725 = load i8*, i8** %1121, align 8, !noalias !44
  store i8* null, i8** %1121, align 8, !noalias !44
  %1726 = icmp eq i8* %1725, null
  br i1 %1726, label %1728, label %1727

1727:                                             ; preds = %1724
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1725) #8
  br label %1728

1728:                                             ; preds = %1727, %1724
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1120) #8, !noalias !44
  %1729 = load i8*, i8** %1118, align 8, !noalias !44
  store i8* null, i8** %1118, align 8, !noalias !44
  %1730 = icmp eq i8* %1729, null
  br i1 %1730, label %1836, label %1731

1731:                                             ; preds = %1728
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %1729) #8
  br label %1836

1732:                                             ; preds = %1746, %1291
  %1733 = phi i64 [ 0, %1291 ], [ %1752, %1746 ]
  %1734 = load i32, i32* %1206, align 4, !noalias !44
  %1735 = load i32, i32* %1211, align 8, !noalias !44
  %1736 = add nsw i32 %1734, 2
  %1737 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 %1733, i32 0, i32 5, i32 0, i32 0, i32 0
  %1738 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %19, i64 0, i32 0, i64 %1733, i32 0, i32 5, i32 0, i32 0, i32 0
  %1739 = add nsw i32 %1735, 2
  %1740 = add i32 %1735, -2
  %1741 = sext i32 %1740 to i64
  %1742 = sext i32 %1739 to i64
  %1743 = add i32 %1734, -2
  %1744 = sext i32 %1743 to i64
  %1745 = sext i32 %1736 to i64
  br label %1754

1746:                                             ; preds = %1832
  %1747 = extractelement <2 x double> %1833, i32 0
  %1748 = fadd double %1747, 0x3EB0C6F7A0B5ED8D
  %1749 = extractelement <2 x double> %1833, i32 1
  %1750 = fdiv double %1749, %1748
  %1751 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::GaussianEllipse", %"struct.jxl::(anonymous namespace)::GaussianEllipse"* %22, i64 0, i32 5, i32 0, i64 %1733
  store double %1750, double* %1751, align 8, !alias.scope !44
  %1752 = add nuw nsw i64 %1733, 1
  %1753 = icmp eq i64 %1752, 3
  br i1 %1753, label %1495, label %1732

1754:                                             ; preds = %1832, %1732
  %1755 = phi i64 [ %1834, %1832 ], [ %1744, %1732 ]
  %1756 = phi <2 x double> [ %1833, %1832 ], [ zeroinitializer, %1732 ]
  %1757 = icmp slt i64 %1755, 0
  br i1 %1757, label %1832, label %1758

1758:                                             ; preds = %1754
  %1759 = load i32, i32* %30, align 4, !noalias !44
  %1760 = zext i32 %1759 to i64
  %1761 = icmp ult i64 %1755, %1760
  br i1 %1761, label %1762, label %1832

1762:                                             ; preds = %1758
  %1763 = load i64, i64* %1103, align 8, !noalias !44
  %1764 = mul i64 %1763, %1755
  %1765 = load i8*, i8** %1737, align 8, !noalias !44
  %1766 = ptrtoint i8* %1765 to i64
  %1767 = and i64 %1766, 63
  %1768 = icmp eq i64 %1767, 0
  call void @llvm.assume(i1 %1768) #8
  %1769 = getelementptr inbounds i8, i8* %1765, i64 %1764
  %1770 = ptrtoint i8* %1769 to i64
  %1771 = and i64 %1770, 63
  %1772 = icmp eq i64 %1771, 0
  call void @llvm.assume(i1 %1772) #8
  %1773 = bitcast i8* %1769 to float*
  %1774 = load i64, i64* %1104, align 8, !noalias !44
  %1775 = mul i64 %1774, %1755
  %1776 = load i8*, i8** %1738, align 8, !noalias !44
  %1777 = ptrtoint i8* %1776 to i64
  %1778 = and i64 %1777, 63
  %1779 = icmp eq i64 %1778, 0
  call void @llvm.assume(i1 %1779) #8
  %1780 = getelementptr inbounds i8, i8* %1776, i64 %1775
  %1781 = ptrtoint i8* %1780 to i64
  %1782 = and i64 %1781, 63
  %1783 = icmp eq i64 %1782, 0
  call void @llvm.assume(i1 %1783) #8
  %1784 = bitcast i8* %1780 to float*
  %1785 = trunc i64 %1755 to i32
  %1786 = sitofp i32 %1785 to double
  br label %1787

1787:                                             ; preds = %1828, %1762
  %1788 = phi i64 [ %1830, %1828 ], [ %1741, %1762 ]
  %1789 = phi <2 x double> [ %1829, %1828 ], [ %1756, %1762 ]
  %1790 = icmp slt i64 %1788, 0
  br i1 %1790, label %1828, label %1791

1791:                                             ; preds = %1787
  %1792 = load i32, i32* %27, align 8, !noalias !44
  %1793 = zext i32 %1792 to i64
  %1794 = icmp ult i64 %1788, %1793
  br i1 %1794, label %1795, label %1828

1795:                                             ; preds = %1791
  %1796 = getelementptr inbounds float, float* %1773, i64 %1788
  %1797 = load float, float* %1796, align 4
  %1798 = getelementptr inbounds float, float* %1784, i64 %1788
  %1799 = load float, float* %1798, align 4
  %1800 = fsub float %1797, %1799
  %1801 = fpext float %1800 to double
  %1802 = trunc i64 %1788 to i32
  %1803 = sitofp i32 %1802 to double
  %1804 = load double, double* %1111, align 16, !alias.scope !44
  %1805 = fsub double %1803, %1804
  %1806 = load double, double* %1112, align 8, !alias.scope !44
  %1807 = fsub double %1786, %1806
  %1808 = load double, double* %1127, align 16, !alias.scope !44
  %1809 = load double, double* %1129, align 8, !alias.scope !44
  %1810 = fmul double %1376, %1805
  %1811 = fmul double %1378, %1807
  %1812 = fadd double %1810, %1811
  %1813 = fmul double %1378, %1805
  %1814 = fmul double %1376, %1807
  %1815 = fsub double %1814, %1813
  %1816 = fmul double %1812, %1812
  %1817 = fdiv double %1816, %1808
  %1818 = fmul double %1815, %1815
  %1819 = fdiv double %1818, %1809
  %1820 = fadd double %1817, %1819
  %1821 = fmul double %1820, -5.000000e-01
  %1822 = call double @exp(double %1821) #8
  %1823 = insertelement <2 x double> undef, double %1822, i32 0
  %1824 = shufflevector <2 x double> %1823, <2 x double> undef, <2 x i32> zeroinitializer
  %1825 = insertelement <2 x double> %1823, double %1801, i32 1
  %1826 = fmul <2 x double> %1824, %1825
  %1827 = fadd <2 x double> %1789, %1826
  br label %1828

1828:                                             ; preds = %1795, %1791, %1787
  %1829 = phi <2 x double> [ %1789, %1787 ], [ %1789, %1791 ], [ %1827, %1795 ]
  %1830 = add nsw i64 %1788, 1
  %1831 = icmp slt i64 %1788, %1742
  br i1 %1831, label %1787, label %1832

1832:                                             ; preds = %1828, %1758, %1754
  %1833 = phi <2 x double> [ %1756, %1754 ], [ %1756, %1758 ], [ %1829, %1828 ]
  %1834 = add nsw i64 %1755, 1
  %1835 = icmp slt i64 %1755, %1745
  br i1 %1835, label %1754, label %1746

1836:                                             ; preds = %1731, %1728
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1116) #8, !noalias !44
  %1837 = load double, double* %1127, align 16, !alias.scope !49
  %1838 = load double, double* %1129, align 8, !alias.scope !49
  %1839 = fcmp olt double %1837, %1838
  br i1 %1839, label %1842, label %1840

1840:                                             ; preds = %1836
  %1841 = load double, double* %1131, align 16, !alias.scope !49
  br label %1845

1842:                                             ; preds = %1836
  store double %1838, double* %1127, align 16, !alias.scope !49
  store double %1837, double* %1129, align 8, !alias.scope !49
  %1843 = load double, double* %1131, align 16, !alias.scope !49
  %1844 = fadd double %1843, 0x3FF921FB54442D18
  store double %1844, double* %1131, align 16, !alias.scope !49
  br label %1845

1845:                                             ; preds = %1842, %1840
  %1846 = phi double [ %1838, %1840 ], [ %1837, %1842 ]
  %1847 = phi double [ %1837, %1840 ], [ %1838, %1842 ]
  %1848 = phi double [ %1841, %1840 ], [ %1844, %1842 ]
  %1849 = fdiv double %1848, 0x400921FB54442D18
  %1850 = call double @llvm.floor.f64(double %1849) #8
  %1851 = fmul double %1850, 0x400921FB54442D18
  %1852 = fsub double %1848, %1851
  %1853 = fadd double %1852, 0xC00921FB54442D18
  %1854 = call double @llvm.fabs.f64(double %1853) #8
  %1855 = fcmp olt double %1854, 0x3EB0C6F7A0B5ED8D
  %1856 = call double @llvm.fabs.f64(double %1852) #8
  %1857 = fcmp olt double %1856, 0x3EB0C6F7A0B5ED8D
  %1858 = or i1 %1857, %1855
  %1859 = select i1 %1858, double 0.000000e+00, double %1852
  store double %1859, double* %1131, align 16, !alias.scope !49
  %1860 = fcmp ult double %1859, 0.000000e+00
  %1861 = fcmp ugt double %1859, 0x400921FB54442D18
  %1862 = or i1 %1860, %1861
  %1863 = fcmp ult double %1847, %1846
  %1864 = or i1 %1863, %1862
  br i1 %1864, label %1865, label %1868

1865:                                             ; preds = %1845
  %1866 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i64 0, i64 0), i32 531, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.8, i64 0, i64 0)) #8
  %1867 = call zeroext i1 @_ZN3jxl5AbortEv() #18
  unreachable

1868:                                             ; preds = %1845
  %1869 = load double, double* %1111, align 16
  %1870 = fcmp olt double %1869, 0.000000e+00
  br i1 %1870, label %2142, label %1871

1871:                                             ; preds = %1868
  %1872 = call double @llvm.ceil.f64(double %1869)
  %1873 = load i32, i32* %27, align 8
  %1874 = uitofp i32 %1873 to double
  %1875 = fcmp ult double %1872, %1874
  br i1 %1875, label %1876, label %2142

1876:                                             ; preds = %1871
  %1877 = load double, double* %1112, align 8
  %1878 = fcmp olt double %1877, 0.000000e+00
  br i1 %1878, label %2142, label %1879

1879:                                             ; preds = %1876
  %1880 = call double @llvm.ceil.f64(double %1877)
  %1881 = load i32, i32* %30, align 4
  %1882 = uitofp i32 %1881 to double
  %1883 = fcmp ult double %1880, %1882
  br i1 %1883, label %1884, label %2142

1884:                                             ; preds = %1879
  %1885 = load i64, i64* %1135, align 8
  %1886 = load i64, i64* %1141, align 8
  %1887 = icmp ugt i64 %1885, %1886
  br i1 %1887, label %2142, label %1888

1888:                                             ; preds = %1884
  %1889 = load double, double* %1113, align 8
  %1890 = fmul double %1889, 2.100000e-01
  %1891 = load double, double* %1114, align 8
  %1892 = fmul double %1891, 0x3FE70A3D70A3D70A
  %1893 = fadd double %1890, %1892
  %1894 = load double, double* %1115, align 8
  %1895 = fmul double %1894, 7.000000e-02
  %1896 = fadd double %1893, %1895
  %1897 = fmul double %1896, %1896
  %1898 = load i32, i32* %1211, align 8
  %1899 = sitofp i32 %1898 to double
  %1900 = fsub double %1869, %1899
  %1901 = fmul double %1900, %1900
  %1902 = load i32, i32* %1206, align 4
  %1903 = sitofp i32 %1902 to double
  %1904 = fsub double %1877, %1903
  %1905 = fmul double %1904, %1904
  %1906 = fadd double %1901, %1905
  %1907 = load double, double* %1132, align 16
  %1908 = load double, double* %1142, align 8
  %1909 = fcmp olt double %1907, %1908
  br i1 %1909, label %1910, label %2142

1910:                                             ; preds = %1888
  %1911 = load double, double* %1138, align 8
  %1912 = load double, double* %1143, align 8
  %1913 = fcmp olt double %1911, %1912
  br i1 %1913, label %1914, label %2142

1914:                                             ; preds = %1910
  %1915 = load double, double* %1144, align 8
  %1916 = fmul double %1915, %1915
  %1917 = fcmp ogt double %1897, %1916
  br i1 %1917, label %1918, label %2142

1918:                                             ; preds = %1914
  %1919 = load double, double* %1145, align 8
  %1920 = fmul double %1919, %1919
  %1921 = fcmp olt double %1906, %1920
  br i1 %1921, label %1922, label %2142

1922:                                             ; preds = %1918
  %1923 = load i64, i64* %1507, align 8
  %1924 = load i64, i64* %1505, align 8
  %1925 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %23, align 8
  %1926 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %24, align 8
  %1927 = icmp ult %"struct.std::__1::pair"* %1925, %1926
  br i1 %1927, label %1928, label %1934

1928:                                             ; preds = %1922
  %1929 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1925, i64 0, i32 0
  call void @_ZN3jxl14QuantizedPatchC2Ev(%"struct.jxl::QuantizedPatch"* %1929) #8
  %1930 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1925, i64 0, i32 1
  %1931 = bitcast %"class.std::__1::vector.17"* %1930 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1931, i8 0, i64 24, i1 false) #8
  %1932 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1925, i64 1
  %1933 = ptrtoint %"struct.std::__1::pair"* %1932 to i64
  store i64 %1933, i64* %1146, align 8
  br label %1936

1934:                                             ; preds = %1922
  call void @_ZNSt3__16vectorINS_4pairIN3jxl14QuantizedPatchENS0_INS1_IjjEENS_9allocatorIS4_EEEEEENS5_IS8_EEE24__emplace_back_slow_pathIJEEEvDpOT_(%"class.std::__1::vector"* %0) #8
  %1935 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %23, align 8
  br label %1936

1936:                                             ; preds = %1928, %1934
  %1937 = phi %"struct.std::__1::pair"* [ %1932, %1928 ], [ %1935, %1934 ]
  %1938 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1937, i64 -1, i32 1
  %1939 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1937, i64 -1, i32 1, i32 0, i32 1
  %1940 = load %"struct.std::__1::pair.19"*, %"struct.std::__1::pair.19"** %1939, align 8
  %1941 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1937, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %1942 = load %"struct.std::__1::pair.19"*, %"struct.std::__1::pair.19"** %1941, align 8
  %1943 = icmp ult %"struct.std::__1::pair.19"* %1940, %1942
  %1944 = ptrtoint %"struct.std::__1::pair.19"* %1942 to i64
  br i1 %1943, label %1945, label %1953

1945:                                             ; preds = %1936
  %1946 = getelementptr inbounds %"struct.std::__1::pair.19", %"struct.std::__1::pair.19"* %1940, i64 0, i32 0
  %1947 = trunc i64 %1923 to i32
  store i32 %1947, i32* %1946, align 4
  %1948 = getelementptr inbounds %"struct.std::__1::pair.19", %"struct.std::__1::pair.19"* %1940, i64 0, i32 1
  %1949 = trunc i64 %1924 to i32
  store i32 %1949, i32* %1948, align 4
  %1950 = getelementptr inbounds %"struct.std::__1::pair.19", %"struct.std::__1::pair.19"* %1940, i64 1
  %1951 = ptrtoint %"struct.std::__1::pair.19"* %1950 to i64
  %1952 = bitcast %"struct.std::__1::pair.19"** %1939 to i64*
  store i64 %1951, i64* %1952, align 8
  br label %2013

1953:                                             ; preds = %1936
  %1954 = ptrtoint %"struct.std::__1::pair.19"* %1940 to i64
  %1955 = bitcast %"struct.std::__1::pair.19"** %1939 to i64*
  %1956 = bitcast %"class.std::__1::vector.17"* %1938 to i64*
  %1957 = load i64, i64* %1956, align 8
  %1958 = sub i64 %1954, %1957
  %1959 = ashr exact i64 %1958, 3
  %1960 = add nsw i64 %1959, 1
  %1961 = icmp ugt i64 %1960, 2305843009213693951
  br i1 %1961, label %1962, label %1964

1962:                                             ; preds = %1953
  %1963 = bitcast %"class.std::__1::vector.17"* %1938 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1963) #18
  unreachable

1964:                                             ; preds = %1953
  %1965 = bitcast %"struct.std::__1::pair.19"** %1941 to i64*
  %1966 = sub i64 %1944, %1957
  %1967 = ashr exact i64 %1966, 3
  %1968 = icmp ult i64 %1967, 1152921504606846975
  br i1 %1968, label %1969, label %1977

1969:                                             ; preds = %1964
  %1970 = ashr exact i64 %1966, 2
  %1971 = icmp ult i64 %1970, %1960
  %1972 = select i1 %1971, i64 %1960, i64 %1970
  %1973 = icmp eq i64 %1972, 0
  br i1 %1973, label %1982, label %1974

1974:                                             ; preds = %1969
  %1975 = icmp ugt i64 %1972, 2305843009213693951
  br i1 %1975, label %1976, label %1977

1976:                                             ; preds = %1974
  call void @abort() #18
  unreachable

1977:                                             ; preds = %1974, %1964
  %1978 = phi i64 [ %1972, %1974 ], [ 2305843009213693951, %1964 ]
  %1979 = shl i64 %1978, 3
  %1980 = call i8* @_Znwm(i64 %1979) #19
  %1981 = bitcast i8* %1980 to %"struct.std::__1::pair.19"*
  br label %1982

1982:                                             ; preds = %1977, %1969
  %1983 = phi i64 [ %1978, %1977 ], [ 0, %1969 ]
  %1984 = phi %"struct.std::__1::pair.19"* [ %1981, %1977 ], [ null, %1969 ]
  %1985 = getelementptr inbounds %"struct.std::__1::pair.19", %"struct.std::__1::pair.19"* %1984, i64 %1959
  %1986 = getelementptr inbounds %"struct.std::__1::pair.19", %"struct.std::__1::pair.19"* %1984, i64 %1983
  %1987 = ptrtoint %"struct.std::__1::pair.19"* %1986 to i64
  %1988 = getelementptr inbounds %"struct.std::__1::pair.19", %"struct.std::__1::pair.19"* %1985, i64 0, i32 0
  %1989 = trunc i64 %1923 to i32
  store i32 %1989, i32* %1988, align 4
  %1990 = getelementptr inbounds %"struct.std::__1::pair.19", %"struct.std::__1::pair.19"* %1984, i64 %1959, i32 1
  %1991 = trunc i64 %1924 to i32
  store i32 %1991, i32* %1990, align 4
  %1992 = getelementptr inbounds %"struct.std::__1::pair.19", %"struct.std::__1::pair.19"* %1985, i64 1
  %1993 = ptrtoint %"struct.std::__1::pair.19"* %1992 to i64
  %1994 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %1938, i64 0, i32 0, i32 0
  %1995 = load %"struct.std::__1::pair.19"*, %"struct.std::__1::pair.19"** %1994, align 8
  %1996 = load i64, i64* %1955, align 8
  %1997 = ptrtoint %"struct.std::__1::pair.19"* %1995 to i64
  %1998 = sub i64 %1996, %1997
  %1999 = ashr exact i64 %1998, 3
  %2000 = sub nsw i64 0, %1999
  %2001 = getelementptr inbounds %"struct.std::__1::pair.19", %"struct.std::__1::pair.19"* %1985, i64 %2000
  %2002 = ptrtoint %"struct.std::__1::pair.19"* %2001 to i64
  %2003 = icmp sgt i64 %1998, 0
  br i1 %2003, label %2004, label %2008

2004:                                             ; preds = %1982
  %2005 = bitcast %"struct.std::__1::pair.19"* %2001 to i8*
  %2006 = bitcast %"struct.std::__1::pair.19"* %1995 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2005, i8* align 4 %2006, i64 %1998, i1 false) #8
  %2007 = load %"struct.std::__1::pair.19"*, %"struct.std::__1::pair.19"** %1994, align 8
  br label %2008

2008:                                             ; preds = %2004, %1982
  %2009 = phi %"struct.std::__1::pair.19"* [ %1995, %1982 ], [ %2007, %2004 ]
  store i64 %2002, i64* %1956, align 8
  store i64 %1993, i64* %1955, align 8
  store i64 %1987, i64* %1965, align 8
  %2010 = icmp eq %"struct.std::__1::pair.19"* %2009, null
  br i1 %2010, label %2013, label %2011

2011:                                             ; preds = %2008
  %2012 = bitcast %"struct.std::__1::pair.19"* %2009 to i8*
  call void @_ZdlPv(i8* %2012) #19
  br label %2013

2013:                                             ; preds = %2011, %2008, %1945
  %2014 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %23, align 8
  %2015 = load i64, i64* %1506, align 8
  %2016 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2014, i64 -1, i32 0, i32 0
  store i64 %2015, i64* %2016, align 8
  %2017 = load i64, i64* %1504, align 8
  %2018 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2014, i64 -1, i32 0, i32 1
  store i64 %2017, i64* %2018, align 8
  %2019 = icmp eq i64 %2017, 0
  br i1 %2019, label %2142, label %2020

2020:                                             ; preds = %2013
  %2021 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2014, i64 -1, i32 0, i32 3, i64 0, i32 0, i32 0
  %2022 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2014, i64 -1, i32 0, i32 3, i64 1, i32 0, i32 0
  %2023 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2014, i64 -1, i32 0, i32 3, i64 2, i32 0, i32 0
  br label %2024

2024:                                             ; preds = %2020, %2136
  %2025 = phi i64 [ %2137, %2136 ], [ %2017, %2020 ]
  %2026 = phi i64 [ %2138, %2136 ], [ %2015, %2020 ]
  %2027 = phi i64 [ %2139, %2136 ], [ %2015, %2020 ]
  %2028 = phi i64 [ %2140, %2136 ], [ 0, %2020 ]
  %2029 = icmp eq i64 %2027, 0
  br i1 %2029, label %2136, label %2030

2030:                                             ; preds = %2024
  %2031 = add i64 %2028, %1924
  br label %2032

2032:                                             ; preds = %2030, %2032
  %2033 = phi i64 [ %2026, %2030 ], [ %2132, %2032 ]
  %2034 = phi i64 [ 0, %2030 ], [ %2131, %2032 ]
  %2035 = add i64 %2034, %1923
  %2036 = load i64, i64* %1103, align 8
  %2037 = mul i64 %2036, %2031
  %2038 = load i8*, i8** %1105, align 8
  %2039 = ptrtoint i8* %2038 to i64
  %2040 = and i64 %2039, 63
  %2041 = icmp eq i64 %2040, 0
  call void @llvm.assume(i1 %2041) #8
  %2042 = getelementptr inbounds i8, i8* %2038, i64 %2037
  %2043 = ptrtoint i8* %2042 to i64
  %2044 = and i64 %2043, 63
  %2045 = icmp eq i64 %2044, 0
  call void @llvm.assume(i1 %2045) #8
  %2046 = bitcast i8* %2042 to float*
  %2047 = getelementptr inbounds float, float* %2046, i64 %2035
  %2048 = load float, float* %2047, align 4
  %2049 = load i64, i64* %1104, align 8
  %2050 = mul i64 %2049, %2031
  %2051 = load i8*, i8** %1106, align 8
  %2052 = ptrtoint i8* %2051 to i64
  %2053 = and i64 %2052, 63
  %2054 = icmp eq i64 %2053, 0
  call void @llvm.assume(i1 %2054) #8
  %2055 = getelementptr inbounds i8, i8* %2051, i64 %2050
  %2056 = ptrtoint i8* %2055 to i64
  %2057 = and i64 %2056, 63
  %2058 = icmp eq i64 %2057, 0
  call void @llvm.assume(i1 %2058) #8
  %2059 = bitcast i8* %2055 to float*
  %2060 = getelementptr inbounds float, float* %2059, i64 %2035
  %2061 = load float, float* %2060, align 4
  %2062 = fsub float %2048, %2061
  %2063 = mul i64 %2033, %2028
  %2064 = add i64 %2063, %2034
  %2065 = load float*, float** %2021, align 8
  %2066 = getelementptr inbounds float, float* %2065, i64 %2064
  store float %2062, float* %2066, align 4
  %2067 = load i64, i64* %1103, align 8
  %2068 = mul i64 %2067, %2031
  %2069 = load i8*, i8** %1107, align 8
  %2070 = ptrtoint i8* %2069 to i64
  %2071 = and i64 %2070, 63
  %2072 = icmp eq i64 %2071, 0
  call void @llvm.assume(i1 %2072) #8
  %2073 = getelementptr inbounds i8, i8* %2069, i64 %2068
  %2074 = ptrtoint i8* %2073 to i64
  %2075 = and i64 %2074, 63
  %2076 = icmp eq i64 %2075, 0
  call void @llvm.assume(i1 %2076) #8
  %2077 = bitcast i8* %2073 to float*
  %2078 = getelementptr inbounds float, float* %2077, i64 %2035
  %2079 = load float, float* %2078, align 4
  %2080 = load i64, i64* %1104, align 8
  %2081 = mul i64 %2080, %2031
  %2082 = load i8*, i8** %1108, align 8
  %2083 = ptrtoint i8* %2082 to i64
  %2084 = and i64 %2083, 63
  %2085 = icmp eq i64 %2084, 0
  call void @llvm.assume(i1 %2085) #8
  %2086 = getelementptr inbounds i8, i8* %2082, i64 %2081
  %2087 = ptrtoint i8* %2086 to i64
  %2088 = and i64 %2087, 63
  %2089 = icmp eq i64 %2088, 0
  call void @llvm.assume(i1 %2089) #8
  %2090 = bitcast i8* %2086 to float*
  %2091 = getelementptr inbounds float, float* %2090, i64 %2035
  %2092 = load float, float* %2091, align 4
  %2093 = fsub float %2079, %2092
  %2094 = load i64, i64* %2016, align 8
  %2095 = mul i64 %2094, %2028
  %2096 = add i64 %2095, %2034
  %2097 = load float*, float** %2022, align 8
  %2098 = getelementptr inbounds float, float* %2097, i64 %2096
  store float %2093, float* %2098, align 4
  %2099 = load i64, i64* %1103, align 8
  %2100 = mul i64 %2099, %2031
  %2101 = load i8*, i8** %1109, align 8
  %2102 = ptrtoint i8* %2101 to i64
  %2103 = and i64 %2102, 63
  %2104 = icmp eq i64 %2103, 0
  call void @llvm.assume(i1 %2104) #8
  %2105 = getelementptr inbounds i8, i8* %2101, i64 %2100
  %2106 = ptrtoint i8* %2105 to i64
  %2107 = and i64 %2106, 63
  %2108 = icmp eq i64 %2107, 0
  call void @llvm.assume(i1 %2108) #8
  %2109 = bitcast i8* %2105 to float*
  %2110 = getelementptr inbounds float, float* %2109, i64 %2035
  %2111 = load float, float* %2110, align 4
  %2112 = load i64, i64* %1104, align 8
  %2113 = mul i64 %2112, %2031
  %2114 = load i8*, i8** %1110, align 8
  %2115 = ptrtoint i8* %2114 to i64
  %2116 = and i64 %2115, 63
  %2117 = icmp eq i64 %2116, 0
  call void @llvm.assume(i1 %2117) #8
  %2118 = getelementptr inbounds i8, i8* %2114, i64 %2113
  %2119 = ptrtoint i8* %2118 to i64
  %2120 = and i64 %2119, 63
  %2121 = icmp eq i64 %2120, 0
  call void @llvm.assume(i1 %2121) #8
  %2122 = bitcast i8* %2118 to float*
  %2123 = getelementptr inbounds float, float* %2122, i64 %2035
  %2124 = load float, float* %2123, align 4
  %2125 = fsub float %2111, %2124
  %2126 = load i64, i64* %2016, align 8
  %2127 = mul i64 %2126, %2028
  %2128 = add i64 %2127, %2034
  %2129 = load float*, float** %2023, align 8
  %2130 = getelementptr inbounds float, float* %2129, i64 %2128
  store float %2125, float* %2130, align 4
  %2131 = add nuw i64 %2034, 1
  %2132 = load i64, i64* %2016, align 8
  %2133 = icmp ult i64 %2131, %2132
  br i1 %2133, label %2032, label %2134

2134:                                             ; preds = %2032
  %2135 = load i64, i64* %2018, align 8
  br label %2136

2136:                                             ; preds = %2134, %2024
  %2137 = phi i64 [ %2135, %2134 ], [ %2025, %2024 ]
  %2138 = phi i64 [ %2132, %2134 ], [ %2026, %2024 ]
  %2139 = phi i64 [ %2132, %2134 ], [ 0, %2024 ]
  %2140 = add nuw i64 %2028, 1
  %2141 = icmp ult i64 %2140, %2137
  br i1 %2141, label %2024, label %2142

2142:                                             ; preds = %2136, %1884, %1868, %1876, %1871, %1879, %1918, %1914, %1910, %1888, %2013
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %1102) #8
  %2143 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1205, i64 1
  %2144 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2143, %1099
  br i1 %2144, label %1157, label %1204
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.ceil.f64(double) #5

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #6

declare void @_ZN3jxl12Separable5_3ERKNS_6Image3IfEERKNS_4RectERKNS_17WeightsSeparable5EPNS_10ThreadPoolEPS1_(%"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"struct.jxl::WeightsSeparable5"* dereferenceable(96), %"class.jxl::ThreadPool"*, %"class.jxl::Image3"*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIN3jxl5PlaneIfEEJRKNS1_6Image3IfEES7_PNS1_10ThreadPoolEEE13ChooseAndCallIXadL_ZNS1_L42SumOfSquareDifferencesHighwayDispatchTableEEEEES3_S7_S7_S9_(%"class.jxl::Plane"* noalias sret, %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::ThreadPool"*) #4 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #8
  %5 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %6 = and i32 %5, 2225
  %7 = tail call i32 @llvm.cttz.i32(i32 %6, i1 true) #8, !range !23
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [12 x void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)*], [12 x void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)*]* @_ZN3jxlL42SumOfSquareDifferencesHighwayDispatchTableE, i64 0, i64 %8
  %10 = load void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)*, void (%"class.jxl::Plane"*, %"class.jxl::Image3"*, %"class.jxl::Image3"*, %"class.jxl::ThreadPool"*)** %9, align 8
  tail call void %10(%"class.jxl::Plane"* sret %0, %"class.jxl::Image3"* dereferenceable(96) %1, %"class.jxl::Image3"* dereferenceable(96) %2, %"class.jxl::ThreadPool"* %3) #8
  ret void
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNSt3__16vectorIN3jxl12_GLOBAL__N_15PixelENS_9allocatorIS3_EEED2Ev(%"class.std::__1::vector.32"* nocapture) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 0
  %3 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %2, align 8
  %4 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %3 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #19
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #6

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #7

; Function Attrs: nounwind
declare void @llvm.assume(i1) #8

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #9

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #10

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #11

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #12

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #13

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #5

declare void @_ZN3jxl17ConvertToDiagonalERKNS_5PlaneIdEEPS1_S4_(%"class.jxl::Plane.54"* dereferenceable(32), %"class.jxl::Plane.54"*, %"class.jxl::Plane.54"*) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare double @atan2(double, double) local_unnamed_addr #13

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #13

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #13

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #6

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #13

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #6

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #6

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool14ReturnTrueInitEm(i64) #4 comdat align 2 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE422SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_0E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #4 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_SSE422SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_0E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #4 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon**
  %6 = load %class.anon*, %class.anon** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_SSE422SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolEENK3$_0clEii"(%class.anon* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_SSE422SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolEENK3$_0clEii"(%class.anon* nocapture readonly, i32) unnamed_addr #14 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %9 = load i64, i64* %8, align 8
  %10 = mul i64 %9, %3
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 63
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #8
  %15 = bitcast i8* %11 to float*
  %16 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 4
  %19 = load i64, i64* %18, align 8
  %20 = mul i64 %19, %3
  %21 = getelementptr inbounds i8, i8* %17, i64 %20
  %22 = ptrtoint i8* %21 to i64
  %23 = and i64 %22, 63
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #8
  %25 = bitcast i8* %21 to float*
  %26 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = mul i64 %29, %3
  %31 = getelementptr inbounds i8, i8* %27, i64 %30
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #8
  %35 = bitcast i8* %31 to float*
  %36 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 1
  %37 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %36, align 8
  %38 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 4
  %41 = load i64, i64* %40, align 8
  %42 = mul i64 %41, %3
  %43 = getelementptr inbounds i8, i8* %39, i64 %42
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 63
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46) #8
  %47 = bitcast i8* %43 to float*
  %48 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 4
  %51 = load i64, i64* %50, align 8
  %52 = mul i64 %51, %3
  %53 = getelementptr inbounds i8, i8* %49, i64 %52
  %54 = ptrtoint i8* %53 to i64
  %55 = and i64 %54, 63
  %56 = icmp eq i64 %55, 0
  tail call void @llvm.assume(i1 %56) #8
  %57 = bitcast i8* %53 to float*
  %58 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 2, i32 0, i32 4
  %61 = load i64, i64* %60, align 8
  %62 = mul i64 %61, %3
  %63 = getelementptr inbounds i8, i8* %59, i64 %62
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #8
  %67 = bitcast i8* %63 to float*
  %68 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 2
  %69 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %68, align 8
  %70 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %69, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %69, i64 0, i32 0, i32 4
  %73 = load i64, i64* %72, align 8
  %74 = mul i64 %73, %3
  %75 = getelementptr inbounds i8, i8* %71, i64 %74
  %76 = ptrtoint i8* %75 to i64
  %77 = and i64 %76, 63
  %78 = icmp eq i64 %77, 0
  tail call void @llvm.assume(i1 %78) #8
  %79 = bitcast i8* %75 to float*
  %80 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 0
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %87, label %83

83:                                               ; preds = %2
  %84 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 4
  %85 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 5
  %86 = getelementptr inbounds %class.anon, %class.anon* %0, i64 0, i32 6
  br label %88

87:                                               ; preds = %88, %2
  ret void

88:                                               ; preds = %83, %88
  %89 = phi i64 [ 0, %83 ], [ %130, %88 ]
  %90 = getelementptr inbounds float, float* %15, i64 %89
  %91 = bitcast float* %90 to <4 x float>*
  %92 = load <4 x float>, <4 x float>* %91, align 16, !alias.scope !50
  %93 = getelementptr inbounds float, float* %47, i64 %89
  %94 = bitcast float* %93 to <4 x float>*
  %95 = load <4 x float>, <4 x float>* %94, align 16, !alias.scope !53
  %96 = fsub <4 x float> %92, %95
  %97 = getelementptr inbounds float, float* %25, i64 %89
  %98 = bitcast float* %97 to <4 x float>*
  %99 = load <4 x float>, <4 x float>* %98, align 16, !alias.scope !56
  %100 = getelementptr inbounds float, float* %57, i64 %89
  %101 = bitcast float* %100 to <4 x float>*
  %102 = load <4 x float>, <4 x float>* %101, align 16, !alias.scope !59
  %103 = fsub <4 x float> %99, %102
  %104 = getelementptr inbounds float, float* %35, i64 %89
  %105 = bitcast float* %104 to <4 x float>*
  %106 = load <4 x float>, <4 x float>* %105, align 16, !alias.scope !62
  %107 = getelementptr inbounds float, float* %67, i64 %89
  %108 = bitcast float* %107 to <4 x float>*
  %109 = load <4 x float>, <4 x float>* %108, align 16, !alias.scope !65
  %110 = fsub <4 x float> %106, %109
  %111 = fmul <4 x float> %96, %96
  %112 = fmul <4 x float> %103, %103
  %113 = fmul <4 x float> %110, %110
  %114 = load %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"** %84, align 8
  %115 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %114, i64 0, i32 0
  %116 = load <4 x float>, <4 x float>* %115, align 16
  %117 = fmul <4 x float> %111, %116
  %118 = load %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"** %85, align 8
  %119 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %118, i64 0, i32 0
  %120 = load <4 x float>, <4 x float>* %119, align 16
  %121 = fmul <4 x float> %112, %120
  %122 = load %"class.hwy::N_SSE4::Vec128"*, %"class.hwy::N_SSE4::Vec128"** %86, align 8
  %123 = getelementptr inbounds %"class.hwy::N_SSE4::Vec128", %"class.hwy::N_SSE4::Vec128"* %122, i64 0, i32 0
  %124 = load <4 x float>, <4 x float>* %123, align 16
  %125 = fmul <4 x float> %113, %124
  %126 = fadd <4 x float> %117, %121
  %127 = fadd <4 x float> %126, %125
  %128 = getelementptr inbounds float, float* %79, i64 %89
  %129 = bitcast float* %128 to <4 x float>*
  store <4 x float> %127, <4 x float>* %129, align 16, !alias.scope !68
  %130 = add nuw nsw i64 %89, 4
  %131 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %132 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %131, i64 0, i32 0, i64 0, i32 0, i32 0
  %133 = load i32, i32* %132, align 8
  %134 = zext i32 %133 to i64
  %135 = icmp ult i64 %130, %134
  br i1 %135, label %88, label %87
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX222SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_1E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #4 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX222SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_1E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #4 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.1**
  %6 = load %class.anon.1*, %class.anon.1** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX222SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolEENK3$_1clEii"(%class.anon.1* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX222SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolEENK3$_1clEii"(%class.anon.1* nocapture readonly, i32) unnamed_addr #15 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %9 = load i64, i64* %8, align 8
  %10 = mul i64 %9, %3
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 63
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #8
  %15 = bitcast i8* %11 to float*
  %16 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 4
  %19 = load i64, i64* %18, align 8
  %20 = mul i64 %19, %3
  %21 = getelementptr inbounds i8, i8* %17, i64 %20
  %22 = ptrtoint i8* %21 to i64
  %23 = and i64 %22, 63
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #8
  %25 = bitcast i8* %21 to float*
  %26 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = mul i64 %29, %3
  %31 = getelementptr inbounds i8, i8* %27, i64 %30
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #8
  %35 = bitcast i8* %31 to float*
  %36 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 1
  %37 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %36, align 8
  %38 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 4
  %41 = load i64, i64* %40, align 8
  %42 = mul i64 %41, %3
  %43 = getelementptr inbounds i8, i8* %39, i64 %42
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 63
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46) #8
  %47 = bitcast i8* %43 to float*
  %48 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 4
  %51 = load i64, i64* %50, align 8
  %52 = mul i64 %51, %3
  %53 = getelementptr inbounds i8, i8* %49, i64 %52
  %54 = ptrtoint i8* %53 to i64
  %55 = and i64 %54, 63
  %56 = icmp eq i64 %55, 0
  tail call void @llvm.assume(i1 %56) #8
  %57 = bitcast i8* %53 to float*
  %58 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 2, i32 0, i32 4
  %61 = load i64, i64* %60, align 8
  %62 = mul i64 %61, %3
  %63 = getelementptr inbounds i8, i8* %59, i64 %62
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #8
  %67 = bitcast i8* %63 to float*
  %68 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 2
  %69 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %68, align 8
  %70 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %69, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %69, i64 0, i32 0, i32 4
  %73 = load i64, i64* %72, align 8
  %74 = mul i64 %73, %3
  %75 = getelementptr inbounds i8, i8* %71, i64 %74
  %76 = ptrtoint i8* %75 to i64
  %77 = and i64 %76, 63
  %78 = icmp eq i64 %77, 0
  tail call void @llvm.assume(i1 %78) #8
  %79 = bitcast i8* %75 to float*
  %80 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 0
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %90, label %83

83:                                               ; preds = %2
  %84 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 4
  %85 = bitcast %"class.hwy::N_AVX2::Vec256"** %84 to <8 x float>**
  %86 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 5
  %87 = bitcast %"class.hwy::N_AVX2::Vec256"** %86 to <8 x float>**
  %88 = getelementptr inbounds %class.anon.1, %class.anon.1* %0, i64 0, i32 6
  %89 = bitcast %"class.hwy::N_AVX2::Vec256"** %88 to <8 x float>**
  br label %91

90:                                               ; preds = %91, %2
  ret void

91:                                               ; preds = %83, %91
  %92 = phi i64 [ 0, %83 ], [ %130, %91 ]
  %93 = getelementptr inbounds float, float* %15, i64 %92
  %94 = bitcast float* %93 to <8 x float>*
  %95 = load <8 x float>, <8 x float>* %94, align 32, !alias.scope !71, !noalias !74
  %96 = getelementptr inbounds float, float* %47, i64 %92
  %97 = bitcast float* %96 to <8 x float>*
  %98 = load <8 x float>, <8 x float>* %97, align 32, !alias.scope !76, !noalias !79
  %99 = fsub <8 x float> %95, %98
  %100 = getelementptr inbounds float, float* %25, i64 %92
  %101 = bitcast float* %100 to <8 x float>*
  %102 = load <8 x float>, <8 x float>* %101, align 32, !alias.scope !81, !noalias !84
  %103 = getelementptr inbounds float, float* %57, i64 %92
  %104 = bitcast float* %103 to <8 x float>*
  %105 = load <8 x float>, <8 x float>* %104, align 32, !alias.scope !86, !noalias !89
  %106 = fsub <8 x float> %102, %105
  %107 = getelementptr inbounds float, float* %35, i64 %92
  %108 = bitcast float* %107 to <8 x float>*
  %109 = load <8 x float>, <8 x float>* %108, align 32, !alias.scope !91, !noalias !94
  %110 = getelementptr inbounds float, float* %67, i64 %92
  %111 = bitcast float* %110 to <8 x float>*
  %112 = load <8 x float>, <8 x float>* %111, align 32, !alias.scope !96, !noalias !99
  %113 = fsub <8 x float> %109, %112
  %114 = fmul <8 x float> %99, %99
  %115 = fmul <8 x float> %106, %106
  %116 = fmul <8 x float> %113, %113
  %117 = load <8 x float>*, <8 x float>** %85, align 8
  %118 = load <8 x float>, <8 x float>* %117, align 32
  %119 = fmul <8 x float> %114, %118
  %120 = load <8 x float>*, <8 x float>** %87, align 8
  %121 = load <8 x float>, <8 x float>* %120, align 32
  %122 = fmul <8 x float> %115, %121
  %123 = load <8 x float>*, <8 x float>** %89, align 8
  %124 = load <8 x float>, <8 x float>* %123, align 32
  %125 = fmul <8 x float> %116, %124
  %126 = fadd <8 x float> %119, %122
  %127 = fadd <8 x float> %126, %125
  %128 = getelementptr inbounds float, float* %79, i64 %92
  %129 = bitcast float* %128 to <8 x float>*
  store <8 x float> %127, <8 x float>* %129, align 32, !alias.scope !101
  %130 = add nuw nsw i64 %92, 8
  %131 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %132 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %131, i64 0, i32 0, i64 0, i32 0, i32 0
  %133 = load i32, i32* %132, align 8
  %134 = zext i32 %133 to i64
  %135 = icmp ult i64 %130, %134
  br i1 %135, label %91, label %90
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX322SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_2E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #4 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_6N_AVX322SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_2E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #4 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.2**
  %6 = load %class.anon.2*, %class.anon.2** %5, align 8
  tail call fastcc void @"_ZZN3jxl6N_AVX322SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolEENK3$_2clEii"(%class.anon.2* %6, i32 %1)
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @"_ZZN3jxl6N_AVX322SumOfSquareDifferencesERKNS_6Image3IfEES4_PNS_10ThreadPoolEENK3$_2clEii"(%class.anon.2* nocapture readonly, i32) unnamed_addr #16 align 2 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 0
  %5 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %6 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 4
  %9 = load i64, i64* %8, align 8
  %10 = mul i64 %9, %3
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = ptrtoint i8* %11 to i64
  %13 = and i64 %12, 63
  %14 = icmp eq i64 %13, 0
  tail call void @llvm.assume(i1 %14) #8
  %15 = bitcast i8* %11 to float*
  %16 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 4
  %19 = load i64, i64* %18, align 8
  %20 = mul i64 %19, %3
  %21 = getelementptr inbounds i8, i8* %17, i64 %20
  %22 = ptrtoint i8* %21 to i64
  %23 = and i64 %22, 63
  %24 = icmp eq i64 %23, 0
  tail call void @llvm.assume(i1 %24) #8
  %25 = bitcast i8* %21 to float*
  %26 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = mul i64 %29, %3
  %31 = getelementptr inbounds i8, i8* %27, i64 %30
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #8
  %35 = bitcast i8* %31 to float*
  %36 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 1
  %37 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %36, align 8
  %38 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 0, i32 0, i32 4
  %41 = load i64, i64* %40, align 8
  %42 = mul i64 %41, %3
  %43 = getelementptr inbounds i8, i8* %39, i64 %42
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 63
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46) #8
  %47 = bitcast i8* %43 to float*
  %48 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 1, i32 0, i32 4
  %51 = load i64, i64* %50, align 8
  %52 = mul i64 %51, %3
  %53 = getelementptr inbounds i8, i8* %49, i64 %52
  %54 = ptrtoint i8* %53 to i64
  %55 = and i64 %54, 63
  %56 = icmp eq i64 %55, 0
  tail call void @llvm.assume(i1 %56) #8
  %57 = bitcast i8* %53 to float*
  %58 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %37, i64 0, i32 0, i64 2, i32 0, i32 4
  %61 = load i64, i64* %60, align 8
  %62 = mul i64 %61, %3
  %63 = getelementptr inbounds i8, i8* %59, i64 %62
  %64 = ptrtoint i8* %63 to i64
  %65 = and i64 %64, 63
  %66 = icmp eq i64 %65, 0
  tail call void @llvm.assume(i1 %66) #8
  %67 = bitcast i8* %63 to float*
  %68 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 2
  %69 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %68, align 8
  %70 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %69, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %69, i64 0, i32 0, i32 4
  %73 = load i64, i64* %72, align 8
  %74 = mul i64 %73, %3
  %75 = getelementptr inbounds i8, i8* %71, i64 %74
  %76 = ptrtoint i8* %75 to i64
  %77 = and i64 %76, 63
  %78 = icmp eq i64 %77, 0
  tail call void @llvm.assume(i1 %78) #8
  %79 = bitcast i8* %75 to float*
  %80 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 0
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %90, label %83

83:                                               ; preds = %2
  %84 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 4
  %85 = bitcast %"class.hwy::N_AVX3::Vec512"** %84 to <16 x float>**
  %86 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 5
  %87 = bitcast %"class.hwy::N_AVX3::Vec512"** %86 to <16 x float>**
  %88 = getelementptr inbounds %class.anon.2, %class.anon.2* %0, i64 0, i32 6
  %89 = bitcast %"class.hwy::N_AVX3::Vec512"** %88 to <16 x float>**
  br label %91

90:                                               ; preds = %91, %2
  ret void

91:                                               ; preds = %83, %91
  %92 = phi i64 [ 0, %83 ], [ %130, %91 ]
  %93 = getelementptr inbounds float, float* %15, i64 %92
  %94 = bitcast float* %93 to <16 x float>*
  %95 = load <16 x float>, <16 x float>* %94, align 64, !alias.scope !104, !noalias !107
  %96 = getelementptr inbounds float, float* %47, i64 %92
  %97 = bitcast float* %96 to <16 x float>*
  %98 = load <16 x float>, <16 x float>* %97, align 64, !alias.scope !109, !noalias !112
  %99 = fsub <16 x float> %95, %98
  %100 = getelementptr inbounds float, float* %25, i64 %92
  %101 = bitcast float* %100 to <16 x float>*
  %102 = load <16 x float>, <16 x float>* %101, align 64, !alias.scope !114, !noalias !117
  %103 = getelementptr inbounds float, float* %57, i64 %92
  %104 = bitcast float* %103 to <16 x float>*
  %105 = load <16 x float>, <16 x float>* %104, align 64, !alias.scope !119, !noalias !122
  %106 = fsub <16 x float> %102, %105
  %107 = getelementptr inbounds float, float* %35, i64 %92
  %108 = bitcast float* %107 to <16 x float>*
  %109 = load <16 x float>, <16 x float>* %108, align 64, !alias.scope !124, !noalias !127
  %110 = getelementptr inbounds float, float* %67, i64 %92
  %111 = bitcast float* %110 to <16 x float>*
  %112 = load <16 x float>, <16 x float>* %111, align 64, !alias.scope !129, !noalias !132
  %113 = fsub <16 x float> %109, %112
  %114 = fmul <16 x float> %99, %99
  %115 = fmul <16 x float> %106, %106
  %116 = fmul <16 x float> %113, %113
  %117 = load <16 x float>*, <16 x float>** %85, align 8
  %118 = load <16 x float>, <16 x float>* %117, align 64
  %119 = fmul <16 x float> %114, %118
  %120 = load <16 x float>*, <16 x float>** %87, align 8
  %121 = load <16 x float>, <16 x float>* %120, align 64
  %122 = fmul <16 x float> %115, %121
  %123 = load <16 x float>*, <16 x float>** %89, align 8
  %124 = load <16 x float>, <16 x float>* %123, align 64
  %125 = fmul <16 x float> %116, %124
  %126 = fadd <16 x float> %119, %122
  %127 = fadd <16 x float> %126, %125
  %128 = getelementptr inbounds float, float* %79, i64 %92
  %129 = bitcast float* %128 to <16 x float>*
  store <16 x float> %127, <16 x float>* %129, align 64, !alias.scope !134
  %130 = add nuw nsw i64 %92, 16
  %131 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %4, align 8
  %132 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %131, i64 0, i32 0, i64 0, i32 0, i32 0
  %133 = load i32, i32* %132, align 8
  %134 = zext i32 %133 to i64
  %135 = icmp ult i64 %130, %134
  br i1 %135, label %91, label %90
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR22SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_3E12CallInitFuncEPvm"(i8* nocapture readonly, i64) #4 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #8
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_8N_SCALAR22SumOfSquareDifferencesERKNS_6Image3IfEES8_PS0_E3$_3E12CallDataFuncEPvjm"(i8* nocapture readonly, i32, i64) #4 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.3**
  %6 = load %class.anon.3*, %class.anon.3** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.3, %class.anon.3* %6, i64 0, i32 0
  %9 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = mul i64 %13, %7
  %15 = getelementptr inbounds i8, i8* %11, i64 %14
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #8
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 1, i32 0, i32 4
  %23 = load i64, i64* %22, align 8
  %24 = mul i64 %23, %7
  %25 = getelementptr inbounds i8, i8* %21, i64 %24
  %26 = ptrtoint i8* %25 to i64
  %27 = and i64 %26, 63
  %28 = icmp eq i64 %27, 0
  tail call void @llvm.assume(i1 %28) #8
  %29 = bitcast i8* %25 to float*
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 2, i32 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = mul i64 %33, %7
  %35 = getelementptr inbounds i8, i8* %31, i64 %34
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 63
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38) #8
  %39 = bitcast i8* %35 to float*
  %40 = getelementptr inbounds %class.anon.3, %class.anon.3* %6, i64 0, i32 1
  %41 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 4
  %45 = load i64, i64* %44, align 8
  %46 = mul i64 %45, %7
  %47 = getelementptr inbounds i8, i8* %43, i64 %46
  %48 = ptrtoint i8* %47 to i64
  %49 = and i64 %48, 63
  %50 = icmp eq i64 %49, 0
  tail call void @llvm.assume(i1 %50) #8
  %51 = bitcast i8* %47 to float*
  %52 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 1, i32 0, i32 4
  %55 = load i64, i64* %54, align 8
  %56 = mul i64 %55, %7
  %57 = getelementptr inbounds i8, i8* %53, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 63
  %60 = icmp eq i64 %59, 0
  tail call void @llvm.assume(i1 %60) #8
  %61 = bitcast i8* %57 to float*
  %62 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 2, i32 0, i32 4
  %65 = load i64, i64* %64, align 8
  %66 = mul i64 %65, %7
  %67 = getelementptr inbounds i8, i8* %63, i64 %66
  %68 = ptrtoint i8* %67 to i64
  %69 = and i64 %68, 63
  %70 = icmp eq i64 %69, 0
  tail call void @llvm.assume(i1 %70) #8
  %71 = bitcast i8* %67 to float*
  %72 = getelementptr inbounds %class.anon.3, %class.anon.3* %6, i64 0, i32 2
  %73 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %72, align 8
  %74 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %73, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %73, i64 0, i32 0, i32 4
  %77 = load i64, i64* %76, align 8
  %78 = mul i64 %77, %7
  %79 = getelementptr inbounds i8, i8* %75, i64 %78
  %80 = ptrtoint i8* %79 to i64
  %81 = and i64 %80, 63
  %82 = icmp eq i64 %81, 0
  tail call void @llvm.assume(i1 %82) #8
  %83 = bitcast i8* %79 to float*
  %84 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %9, i64 0, i32 0, i64 0, i32 0, i32 0
  %85 = load i32, i32* %84, align 8
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %132, label %87

87:                                               ; preds = %3
  %88 = getelementptr inbounds %class.anon.3, %class.anon.3* %6, i64 0, i32 4
  %89 = getelementptr inbounds %class.anon.3, %class.anon.3* %6, i64 0, i32 5
  %90 = getelementptr inbounds %class.anon.3, %class.anon.3* %6, i64 0, i32 6
  br label %91

91:                                               ; preds = %91, %87
  %92 = phi i64 [ 0, %87 ], [ %126, %91 ]
  %93 = getelementptr inbounds float, float* %19, i64 %92
  %94 = load float, float* %93, align 4, !alias.scope !137
  %95 = getelementptr inbounds float, float* %51, i64 %92
  %96 = load float, float* %95, align 4, !alias.scope !140
  %97 = fsub float %94, %96
  %98 = getelementptr inbounds float, float* %29, i64 %92
  %99 = load float, float* %98, align 4, !alias.scope !143
  %100 = getelementptr inbounds float, float* %61, i64 %92
  %101 = load float, float* %100, align 4, !alias.scope !146
  %102 = fsub float %99, %101
  %103 = getelementptr inbounds float, float* %39, i64 %92
  %104 = load float, float* %103, align 4, !alias.scope !149
  %105 = getelementptr inbounds float, float* %71, i64 %92
  %106 = load float, float* %105, align 4, !alias.scope !152
  %107 = fsub float %104, %106
  %108 = fmul float %97, %97
  %109 = fmul float %102, %102
  %110 = fmul float %107, %107
  %111 = load %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"** %88, align 8
  %112 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %111, i64 0, i32 0
  %113 = load float, float* %112, align 4
  %114 = fmul float %108, %113
  %115 = load %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"** %89, align 8
  %116 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %115, i64 0, i32 0
  %117 = load float, float* %116, align 4
  %118 = fmul float %109, %117
  %119 = load %"struct.hwy::N_SCALAR::Vec1"*, %"struct.hwy::N_SCALAR::Vec1"** %90, align 8
  %120 = getelementptr inbounds %"struct.hwy::N_SCALAR::Vec1", %"struct.hwy::N_SCALAR::Vec1"* %119, i64 0, i32 0
  %121 = load float, float* %120, align 4
  %122 = fmul float %110, %121
  %123 = fadd float %114, %118
  %124 = fadd float %123, %122
  %125 = getelementptr inbounds float, float* %83, i64 %92
  store float %124, float* %125, align 4, !alias.scope !155
  %126 = add nuw nsw i64 %92, 1
  %127 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %8, align 8
  %128 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %127, i64 0, i32 0, i64 0, i32 0, i32 0
  %129 = load i32, i32* %128, align 8
  %130 = zext i32 %129 to i64
  %131 = icmp ult i64 %126, %130
  br i1 %131, label %91, label %132

132:                                              ; preds = %91, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__16__sortIRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEvT0_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"struct.jxl::(anonymous namespace)::ConnectedComponent"*) unnamed_addr #4 {
  %3 = alloca %"class.jxl::Rect", align 8
  %4 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %5 = alloca %"class.jxl::Rect", align 8
  %6 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %7 = alloca %"class.jxl::Rect", align 8
  %8 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %9 = alloca %"class.jxl::Rect", align 8
  %10 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %11 = alloca %"class.jxl::Rect", align 8
  %12 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %13 = alloca %"class.jxl::Rect", align 8
  %14 = alloca { float, float, float, float, float }, align 8
  %15 = alloca %"class.jxl::Rect", align 8
  %16 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %17 = bitcast %"class.jxl::Rect"* %5 to i8*
  %18 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %6 to i8*
  %19 = bitcast %"class.jxl::Rect"* %11 to i8*
  %20 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %12 to i8*
  %21 = bitcast %"class.jxl::Rect"* %9 to i8*
  %22 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %10 to i8*
  %23 = bitcast %"class.jxl::Rect"* %3 to i8*
  %24 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %4 to i8*
  %25 = bitcast %"class.jxl::Rect"* %7 to i8*
  %26 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %8 to i8*
  br label %27

27:                                               ; preds = %483, %2
  %28 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %1, %2 ], [ %431, %483 ]
  %29 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %0, %2 ], [ %49, %483 ]
  %30 = ptrtoint %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28 to i64
  %31 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1
  %32 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1, i32 7
  %33 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %31 to i8*
  %34 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1, i32 1
  %35 = bitcast %"class.std::__1::vector.32"* %34 to i64*
  %36 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1, i32 1, i32 0, i32 1
  %37 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %36 to i64*
  %38 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %39 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %38 to i64*
  %40 = bitcast %"class.std::__1::vector.32"* %34 to i8*
  %41 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1, i32 2
  %42 = bitcast float* %41 to i8*
  %43 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %34, i64 0, i32 0, i32 0
  %44 = bitcast %"class.std::__1::vector.32"* %34 to <2 x i64>*
  %45 = ptrtoint %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28 to i64
  br label %46

46:                                               ; preds = %494, %27
  %47 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %29, %27 ], [ %495, %494 ]
  br label %48

48:                                               ; preds = %286, %46
  %49 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %47, %46 ], [ %275, %286 ]
  %50 = ptrtoint %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49 to i64
  %51 = sub i64 %30, %50
  %52 = sdiv exact i64 %51, 88
  switch i64 %52, label %112 [
    i64 0, label %498
    i64 1, label %498
    i64 2, label %53
    i64 3, label %97
    i64 4, label %101
    i64 5, label %106
  ]

53:                                               ; preds = %48
  %54 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1, i32 7
  %55 = load float, float* %54, align 4
  %56 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 0, i32 7
  %57 = load float, float* %56, align 4
  %58 = fcmp ogt float %55, %57
  br i1 %58, label %59, label %498

59:                                               ; preds = %53
  %60 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1
  %61 = bitcast %"class.jxl::Rect"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %61)
  %62 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %62)
  %63 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %61, i8* align 8 %63, i64 32, i1 false) #8
  %64 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 0, i32 1
  %65 = bitcast %"class.std::__1::vector.32"* %64 to i64*
  %66 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 0, i32 1, i32 0, i32 1
  %67 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %66 to i64*
  %68 = bitcast %"class.std::__1::vector.32"* %64 to <2 x i64>*
  %69 = load <2 x i64>, <2 x i64>* %68, align 8
  %70 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %71 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = bitcast %"class.std::__1::vector.32"* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 24, i1 false) #8
  %74 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 0, i32 2
  %75 = bitcast float* %74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %62, i8* align 8 %75, i64 32, i1 false) #8
  %76 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %60 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %76, i64 32, i1 false) #8
  %77 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1, i32 1
  %78 = bitcast %"class.std::__1::vector.32"* %77 to i64*
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %65, align 8
  %80 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1, i32 1, i32 0, i32 1
  %81 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %80 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %67, align 8
  %83 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %84 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %83 to i64*
  %85 = load i64, i64* %84, align 8
  store i64 %85, i64* %71, align 8
  %86 = bitcast %"class.std::__1::vector.32"* %77 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 24, i1 false) #8
  %87 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1, i32 2
  %88 = bitcast float* %87 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %88, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* nonnull align 8 %61, i64 32, i1 false) #8
  %89 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %77, i64 0, i32 0, i32 0
  %90 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %89, align 8
  %91 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %90, null
  br i1 %91, label %95, label %92

92:                                               ; preds = %59
  %93 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %90 to i64
  store i64 %93, i64* %81, align 8
  %94 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %90 to i8*
  tail call void @_ZdlPv(i8* %94) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %86, i8 0, i64 24, i1 false) #8
  br label %95

95:                                               ; preds = %59, %92
  %96 = bitcast %"class.std::__1::vector.32"* %77 to <2 x i64>*
  store <2 x i64> %69, <2 x i64>* %96, align 8
  store i64 %72, i64* %84, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* nonnull align 8 %62, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %61)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %62)
  br label %498

97:                                               ; preds = %48
  %98 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 1
  %99 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1
  %100 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %98, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %99)
  br label %498

101:                                              ; preds = %48
  %102 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 1
  %103 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 2
  %104 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1
  %105 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %102, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %103, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %104)
  br label %498

106:                                              ; preds = %48
  %107 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 1
  %108 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 2
  %109 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 3
  %110 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28, i64 -1
  %111 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %107, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %108, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %109, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %110)
  br label %498

112:                                              ; preds = %48
  %113 = icmp slt i64 %51, 616
  br i1 %113, label %114, label %207

114:                                              ; preds = %112
  %115 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 2
  %116 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 1
  %117 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %116, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %115) #8
  %118 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 3
  %119 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %118, %28
  br i1 %119, label %498, label %120

120:                                              ; preds = %114
  %121 = bitcast %"class.jxl::Rect"* %13 to i8*
  %122 = bitcast { float, float, float, float, float }* %14 to i8*
  br label %123

123:                                              ; preds = %204, %120
  %124 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %118, %120 ], [ %205, %204 ]
  %125 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %115, %120 ], [ %124, %204 ]
  %126 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %124, i64 0, i32 7
  %127 = load float, float* %126, align 4
  %128 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %125, i64 0, i32 7
  %129 = load float, float* %128, align 4
  %130 = fcmp ogt float %127, %129
  br i1 %130, label %131, label %204

131:                                              ; preds = %123
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %121)
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %122)
  %132 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %124 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %121, i8* align 8 %132, i64 32, i1 false) #8
  %133 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %124, i64 0, i32 1
  %134 = bitcast %"class.std::__1::vector.32"* %133 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 8
  %136 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %124, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %137 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"class.std::__1::vector.32"* %133 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %139, i8 0, i64 24, i1 false) #8
  %140 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %124, i64 0, i32 2
  %141 = bitcast float* %140 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %122, i8* align 8 %141, i64 20, i1 false) #8
  %142 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %124, i64 0, i32 8
  %143 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %142 to i64*
  %144 = load i64, i64* %143, align 8
  br label %145

145:                                              ; preds = %181, %131
  %146 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %124, %131 ], [ %147, %181 ]
  %147 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %125, %131 ], [ %182, %181 ]
  %148 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %146 to i8*
  %149 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %147 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %148, i8* align 8 %149, i64 32, i1 false) #8
  %150 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %146, i64 0, i32 1
  %151 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %147, i64 0, i32 1
  %152 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %150, i64 0, i32 0, i32 0
  %153 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %152, align 8
  %154 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %153, null
  br i1 %154, label %161, label %155

155:                                              ; preds = %145
  %156 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %153 to i64
  %157 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %146, i64 0, i32 1, i32 0, i32 1
  %158 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %157 to i64*
  store i64 %156, i64* %158, align 8
  %159 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %153 to i8*
  tail call void @_ZdlPv(i8* %159) #19
  %160 = bitcast %"class.std::__1::vector.32"* %150 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %160, i8 0, i64 24, i1 false) #8
  br label %161

161:                                              ; preds = %145, %155
  %162 = bitcast %"class.std::__1::vector.32"* %151 to i64*
  %163 = load i64, i64* %162, align 8
  %164 = bitcast %"class.std::__1::vector.32"* %150 to i64*
  store i64 %163, i64* %164, align 8
  %165 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %147, i64 0, i32 1, i32 0, i32 1
  %166 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %165 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %146, i64 0, i32 1, i32 0, i32 1
  %169 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %168 to i64*
  store i64 %167, i64* %169, align 8
  %170 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %147, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %171 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %170 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %146, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %174 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %173 to i64*
  store i64 %172, i64* %174, align 8
  %175 = bitcast %"class.std::__1::vector.32"* %151 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %175, i8 0, i64 24, i1 false) #8
  %176 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %146, i64 0, i32 2
  %177 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %147, i64 0, i32 2
  %178 = bitcast float* %176 to i8*
  %179 = bitcast float* %177 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %178, i8* align 8 %179, i64 32, i1 false) #8
  %180 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %147, %49
  br i1 %180, label %186, label %181

181:                                              ; preds = %161
  %182 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %147, i64 -1
  %183 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %147, i64 -1, i32 7
  %184 = load float, float* %183, align 4
  %185 = fcmp ogt float %127, %184
  br i1 %185, label %145, label %186

186:                                              ; preds = %181, %161
  %187 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %49, %161 ], [ %147, %181 ]
  %188 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %187 to i8*
  %189 = bitcast float* %177 to i8*
  %190 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %170 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %188, i8* nonnull align 8 %121, i64 32, i1 false) #8
  %191 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %151, i64 0, i32 0, i32 0
  %192 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %191, align 8
  %193 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %192, null
  br i1 %193, label %199, label %194

194:                                              ; preds = %186
  %195 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %165 to i64*
  %196 = bitcast %"class.std::__1::vector.32"* %151 to i8*
  %197 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %192 to i64
  store i64 %197, i64* %195, align 8
  %198 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %192 to i8*
  tail call void @_ZdlPv(i8* %198) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %196, i8 0, i64 24, i1 false) #8
  br label %199

199:                                              ; preds = %194, %186
  %200 = bitcast %"class.std::__1::vector.32"* %151 to <2 x i64>*
  store <2 x i64> %135, <2 x i64>* %200, align 8
  store i64 %138, i64* %190, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %189, i8* nonnull align 8 %122, i64 20, i1 false) #8
  %201 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %187, i64 0, i32 7
  store float %127, float* %201, align 4
  %202 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %187, i64 0, i32 8
  %203 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %202 to i64*
  store i64 %144, i64* %203, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %121)
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %122)
  br label %204

204:                                              ; preds = %199, %123
  %205 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %124, i64 1
  %206 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %205, %28
  br i1 %206, label %498, label %123

207:                                              ; preds = %112
  %208 = icmp sgt i64 %51, 87912
  %209 = udiv i64 %51, 176
  %210 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 %209
  br i1 %208, label %211, label %216

211:                                              ; preds = %207
  %212 = udiv i64 %51, 352
  %213 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 %212
  %214 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %210, i64 %212
  %215 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %213, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %210, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %214, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %31)
  br label %218

216:                                              ; preds = %207
  %217 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %210, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %31)
  br label %218

218:                                              ; preds = %216, %211
  %219 = phi i32 [ %215, %211 ], [ %217, %216 ]
  %220 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 0, i32 7
  %221 = load float, float* %220, align 4
  %222 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 %209, i32 7
  %223 = load float, float* %222, align 4
  %224 = fcmp ogt float %221, %223
  br i1 %224, label %363, label %225

225:                                              ; preds = %218, %323
  %226 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %227, %323 ], [ %31, %218 ]
  %227 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %226, i64 -1
  %228 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, %227
  br i1 %228, label %229, label %323

229:                                              ; preds = %225
  %230 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 1
  %231 = load float, float* %32, align 4
  %232 = fcmp ogt float %221, %231
  br i1 %232, label %267, label %233

233:                                              ; preds = %229
  %234 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %230, %31
  br i1 %234, label %498, label %235

235:                                              ; preds = %233, %264
  %236 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %265, %264 ], [ %230, %233 ]
  %237 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %236, i64 0, i32 7
  %238 = load float, float* %237, align 4
  %239 = fcmp ogt float %221, %238
  br i1 %239, label %240, label %264

240:                                              ; preds = %235
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20)
  %241 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %236 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 %241, i64 32, i1 false) #8
  %242 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %236, i64 0, i32 1
  %243 = bitcast %"class.std::__1::vector.32"* %242 to i64*
  %244 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %236, i64 0, i32 1, i32 0, i32 1
  %245 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %244 to i64*
  %246 = bitcast %"class.std::__1::vector.32"* %242 to <2 x i64>*
  %247 = load <2 x i64>, <2 x i64>* %246, align 8
  %248 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %236, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %249 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = bitcast %"class.std::__1::vector.32"* %242 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %251, i8 0, i64 24, i1 false) #8
  %252 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %236, i64 0, i32 2
  %253 = bitcast float* %252 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* align 8 %253, i64 32, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %241, i8* align 8 %33, i64 32, i1 false) #8
  %254 = load i64, i64* %35, align 8
  store i64 %254, i64* %243, align 8
  %255 = load i64, i64* %37, align 8
  store i64 %255, i64* %245, align 8
  %256 = load i64, i64* %39, align 8
  store i64 %256, i64* %249, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 24, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %253, i8* align 8 %42, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* nonnull align 8 %19, i64 32, i1 false) #8
  %257 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %43, align 8
  %258 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %257, null
  br i1 %258, label %262, label %259

259:                                              ; preds = %240
  %260 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %257 to i64
  store i64 %260, i64* %37, align 8
  %261 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %257 to i8*
  tail call void @_ZdlPv(i8* %261) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 0, i64 24, i1 false) #8
  br label %262

262:                                              ; preds = %240, %259
  store <2 x i64> %247, <2 x i64>* %44, align 8
  store i64 %250, i64* %39, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* nonnull align 8 %20, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20)
  %263 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %236, i64 1
  br label %267

264:                                              ; preds = %235
  %265 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %236, i64 1
  %266 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %265, %31
  br i1 %266, label %498, label %235

267:                                              ; preds = %262, %229
  %268 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %230, %229 ], [ %263, %262 ]
  %269 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %268, %31
  br i1 %269, label %498, label %270

270:                                              ; preds = %267, %321
  %271 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %279, %321 ], [ %268, %267 ]
  %272 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %282, %321 ], [ %31, %267 ]
  %273 = load float, float* %220, align 4
  br label %274

274:                                              ; preds = %274, %270
  %275 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %271, %270 ], [ %279, %274 ]
  %276 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %275, i64 0, i32 7
  %277 = load float, float* %276, align 4
  %278 = fcmp ogt float %273, %277
  %279 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %275, i64 1
  br i1 %278, label %280, label %274

280:                                              ; preds = %274, %280
  %281 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %282, %280 ], [ %272, %274 ]
  %282 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %281, i64 -1
  %283 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %281, i64 -1, i32 7
  %284 = load float, float* %283, align 4
  %285 = fcmp ogt float %273, %284
  br i1 %285, label %280, label %286

286:                                              ; preds = %280
  %287 = icmp ult %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %275, %282
  br i1 %287, label %288, label %48

288:                                              ; preds = %286
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22)
  %289 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %275 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %21, i8* align 8 %289, i64 32, i1 false) #8
  %290 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %275, i64 0, i32 1
  %291 = bitcast %"class.std::__1::vector.32"* %290 to i64*
  %292 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %275, i64 0, i32 1, i32 0, i32 1
  %293 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %292 to i64*
  %294 = bitcast %"class.std::__1::vector.32"* %290 to <2 x i64>*
  %295 = load <2 x i64>, <2 x i64>* %294, align 8
  %296 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %275, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %297 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %296 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = bitcast %"class.std::__1::vector.32"* %290 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %299, i8 0, i64 24, i1 false) #8
  %300 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %275, i64 0, i32 2
  %301 = bitcast float* %300 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 8 %301, i64 32, i1 false) #8
  %302 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %282 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %289, i8* align 8 %302, i64 32, i1 false) #8
  %303 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %281, i64 -1, i32 1
  %304 = bitcast %"class.std::__1::vector.32"* %303 to i64*
  %305 = load i64, i64* %304, align 8
  store i64 %305, i64* %291, align 8
  %306 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %281, i64 -1, i32 1, i32 0, i32 1
  %307 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %306 to i64*
  %308 = load i64, i64* %307, align 8
  store i64 %308, i64* %293, align 8
  %309 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %281, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %310 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %309 to i64*
  %311 = load i64, i64* %310, align 8
  store i64 %311, i64* %297, align 8
  %312 = bitcast %"class.std::__1::vector.32"* %303 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %312, i8 0, i64 24, i1 false) #8
  %313 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %281, i64 -1, i32 2
  %314 = bitcast float* %313 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %301, i8* align 8 %314, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %302, i8* nonnull align 8 %21, i64 32, i1 false) #8
  %315 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %303, i64 0, i32 0, i32 0
  %316 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %315, align 8
  %317 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %316, null
  br i1 %317, label %321, label %318

318:                                              ; preds = %288
  %319 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %316 to i64
  store i64 %319, i64* %307, align 8
  %320 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %316 to i8*
  tail call void @_ZdlPv(i8* %320) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %312, i8 0, i64 24, i1 false) #8
  br label %321

321:                                              ; preds = %288, %318
  %322 = bitcast %"class.std::__1::vector.32"* %303 to <2 x i64>*
  store <2 x i64> %295, <2 x i64>* %322, align 8
  store i64 %298, i64* %310, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %314, i8* nonnull align 8 %22, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22)
  br label %270

323:                                              ; preds = %225
  %324 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %226, i64 -1, i32 7
  %325 = load float, float* %324, align 4
  %326 = fcmp ogt float %325, %223
  br i1 %326, label %327, label %225

327:                                              ; preds = %323
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18)
  %328 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %17, i8* align 8 %328, i64 32, i1 false) #8
  %329 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 0, i32 1
  %330 = bitcast %"class.std::__1::vector.32"* %329 to i64*
  %331 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 0, i32 1, i32 0, i32 1
  %332 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %331 to i64*
  %333 = bitcast %"class.std::__1::vector.32"* %329 to <2 x i64>*
  %334 = load <2 x i64>, <2 x i64>* %333, align 8
  %335 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %336 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %335 to i64*
  %337 = load i64, i64* %336, align 8
  %338 = bitcast %"class.std::__1::vector.32"* %329 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %338, i8 0, i64 24, i1 false) #8
  %339 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 0, i32 2
  %340 = bitcast float* %339 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* align 8 %340, i64 32, i1 false) #8
  %341 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %227 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %328, i8* align 8 %341, i64 32, i1 false) #8
  %342 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %226, i64 -1, i32 1
  %343 = bitcast %"class.std::__1::vector.32"* %342 to i64*
  %344 = load i64, i64* %343, align 8
  store i64 %344, i64* %330, align 8
  %345 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %226, i64 -1, i32 1, i32 0, i32 1
  %346 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %345 to i64*
  %347 = load i64, i64* %346, align 8
  store i64 %347, i64* %332, align 8
  %348 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %226, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %349 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %348 to i64*
  %350 = load i64, i64* %349, align 8
  store i64 %350, i64* %336, align 8
  %351 = bitcast %"class.std::__1::vector.32"* %342 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %351, i8 0, i64 24, i1 false) #8
  %352 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %226, i64 -1, i32 2
  %353 = bitcast float* %352 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %340, i8* align 8 %353, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %341, i8* nonnull align 8 %17, i64 32, i1 false) #8
  %354 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %342, i64 0, i32 0, i32 0
  %355 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %354, align 8
  %356 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %355, null
  br i1 %356, label %360, label %357

357:                                              ; preds = %327
  %358 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %355 to i64
  store i64 %358, i64* %346, align 8
  %359 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %355 to i8*
  tail call void @_ZdlPv(i8* %359) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %351, i8 0, i64 24, i1 false) #8
  br label %360

360:                                              ; preds = %327, %357
  %361 = bitcast %"class.std::__1::vector.32"* %342 to <2 x i64>*
  store <2 x i64> %334, <2 x i64>* %361, align 8
  store i64 %337, i64* %349, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %353, i8* nonnull align 8 %18, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18)
  %362 = add i32 %219, 1
  br label %363

363:                                              ; preds = %218, %360
  %364 = phi i32 [ %362, %360 ], [ %219, %218 ]
  %365 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %227, %360 ], [ %31, %218 ]
  %366 = ptrtoint %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49 to i64
  %367 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, i64 1
  %368 = icmp ult %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %367, %365
  br i1 %368, label %369, label %428

369:                                              ; preds = %363, %423
  %370 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %427, %423 ], [ %210, %363 ]
  %371 = phi i32 [ %425, %423 ], [ %364, %363 ]
  %372 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %381, %423 ], [ %367, %363 ]
  %373 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %384, %423 ], [ %365, %363 ]
  %374 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %370, i64 0, i32 7
  %375 = load float, float* %374, align 4
  br label %376

376:                                              ; preds = %376, %369
  %377 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %372, %369 ], [ %381, %376 ]
  %378 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %377, i64 0, i32 7
  %379 = load float, float* %378, align 4
  %380 = fcmp ogt float %379, %375
  %381 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %377, i64 1
  br i1 %380, label %376, label %382

382:                                              ; preds = %376, %382
  %383 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %384, %382 ], [ %373, %376 ]
  %384 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %383, i64 -1
  %385 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %383, i64 -1, i32 7
  %386 = load float, float* %385, align 4
  %387 = fcmp ogt float %386, %375
  br i1 %387, label %388, label %382

388:                                              ; preds = %382
  %389 = icmp ugt %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %377, %384
  br i1 %389, label %428, label %390

390:                                              ; preds = %388
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24)
  %391 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %377 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %23, i8* align 8 %391, i64 32, i1 false) #8
  %392 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %377, i64 0, i32 1
  %393 = bitcast %"class.std::__1::vector.32"* %392 to i64*
  %394 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %377, i64 0, i32 1, i32 0, i32 1
  %395 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %394 to i64*
  %396 = bitcast %"class.std::__1::vector.32"* %392 to <2 x i64>*
  %397 = load <2 x i64>, <2 x i64>* %396, align 8
  %398 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %377, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %399 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %398 to i64*
  %400 = load i64, i64* %399, align 8
  %401 = bitcast %"class.std::__1::vector.32"* %392 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %401, i8 0, i64 24, i1 false) #8
  %402 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %377, i64 0, i32 2
  %403 = bitcast float* %402 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* align 8 %403, i64 32, i1 false) #8
  %404 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %384 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %391, i8* align 8 %404, i64 32, i1 false) #8
  %405 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %383, i64 -1, i32 1
  %406 = bitcast %"class.std::__1::vector.32"* %405 to i64*
  %407 = load i64, i64* %406, align 8
  store i64 %407, i64* %393, align 8
  %408 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %383, i64 -1, i32 1, i32 0, i32 1
  %409 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %408 to i64*
  %410 = load i64, i64* %409, align 8
  store i64 %410, i64* %395, align 8
  %411 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %383, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %412 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %411 to i64*
  %413 = load i64, i64* %412, align 8
  store i64 %413, i64* %399, align 8
  %414 = bitcast %"class.std::__1::vector.32"* %405 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %414, i8 0, i64 24, i1 false) #8
  %415 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %383, i64 -1, i32 2
  %416 = bitcast float* %415 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %403, i8* align 8 %416, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %404, i8* nonnull align 8 %23, i64 32, i1 false) #8
  %417 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %405, i64 0, i32 0, i32 0
  %418 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %417, align 8
  %419 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %418, null
  br i1 %419, label %423, label %420

420:                                              ; preds = %390
  %421 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %418 to i64
  store i64 %421, i64* %409, align 8
  %422 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %418 to i8*
  tail call void @_ZdlPv(i8* %422) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %414, i8 0, i64 24, i1 false) #8
  br label %423

423:                                              ; preds = %390, %420
  %424 = bitcast %"class.std::__1::vector.32"* %405 to <2 x i64>*
  store <2 x i64> %397, <2 x i64>* %424, align 8
  store i64 %400, i64* %412, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %416, i8* nonnull align 8 %24, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24)
  %425 = add i32 %371, 1
  %426 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %370, %377
  %427 = select i1 %426, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %384, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %370
  br label %369

428:                                              ; preds = %388, %363
  %429 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %210, %363 ], [ %370, %388 ]
  %430 = phi i32 [ %364, %363 ], [ %371, %388 ]
  %431 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %367, %363 ], [ %377, %388 ]
  %432 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %431, %429
  br i1 %432, label %475, label %433

433:                                              ; preds = %428
  %434 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %429, i64 0, i32 7
  %435 = load float, float* %434, align 4
  %436 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %431, i64 0, i32 7
  %437 = load float, float* %436, align 4
  %438 = fcmp ogt float %435, %437
  br i1 %438, label %439, label %475

439:                                              ; preds = %433
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %26)
  %440 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %431 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %25, i8* align 8 %440, i64 32, i1 false) #8
  %441 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %431, i64 0, i32 1
  %442 = bitcast %"class.std::__1::vector.32"* %441 to i64*
  %443 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %431, i64 0, i32 1, i32 0, i32 1
  %444 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %443 to i64*
  %445 = bitcast %"class.std::__1::vector.32"* %441 to <2 x i64>*
  %446 = load <2 x i64>, <2 x i64>* %445, align 8
  %447 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %431, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %448 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %447 to i64*
  %449 = load i64, i64* %448, align 8
  %450 = bitcast %"class.std::__1::vector.32"* %441 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %450, i8 0, i64 24, i1 false) #8
  %451 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %431, i64 0, i32 2
  %452 = bitcast float* %451 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %26, i8* align 8 %452, i64 32, i1 false) #8
  %453 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %429 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %440, i8* align 8 %453, i64 32, i1 false) #8
  %454 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %429, i64 0, i32 1
  %455 = bitcast %"class.std::__1::vector.32"* %454 to i64*
  %456 = load i64, i64* %455, align 8
  store i64 %456, i64* %442, align 8
  %457 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %429, i64 0, i32 1, i32 0, i32 1
  %458 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %457 to i64*
  %459 = load i64, i64* %458, align 8
  store i64 %459, i64* %444, align 8
  %460 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %429, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %461 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %460 to i64*
  %462 = load i64, i64* %461, align 8
  store i64 %462, i64* %448, align 8
  %463 = bitcast %"class.std::__1::vector.32"* %454 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %463, i8 0, i64 24, i1 false) #8
  %464 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %429, i64 0, i32 2
  %465 = bitcast float* %464 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %452, i8* align 8 %465, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %453, i8* nonnull align 8 %25, i64 32, i1 false) #8
  %466 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %454, i64 0, i32 0, i32 0
  %467 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %466, align 8
  %468 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %467, null
  br i1 %468, label %472, label %469

469:                                              ; preds = %439
  %470 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %467 to i64
  store i64 %470, i64* %458, align 8
  %471 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %467 to i8*
  tail call void @_ZdlPv(i8* %471) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %463, i8 0, i64 24, i1 false) #8
  br label %472

472:                                              ; preds = %439, %469
  %473 = bitcast %"class.std::__1::vector.32"* %454 to <2 x i64>*
  store <2 x i64> %446, <2 x i64>* %473, align 8
  store i64 %449, i64* %461, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %465, i8* nonnull align 8 %26, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %26)
  %474 = add i32 %430, 1
  br label %475

475:                                              ; preds = %428, %472, %433
  %476 = phi i32 [ %474, %472 ], [ %430, %433 ], [ %430, %428 ]
  %477 = icmp eq i32 %476, 0
  br i1 %477, label %478, label %485

478:                                              ; preds = %475
  %479 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEbT0_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %431)
  %480 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %431, i64 1
  %481 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEbT0_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %480, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28)
  br i1 %481, label %482, label %484

482:                                              ; preds = %478
  br i1 %479, label %498, label %483

483:                                              ; preds = %482, %496
  br label %27

484:                                              ; preds = %478
  br i1 %479, label %494, label %485

485:                                              ; preds = %484, %475
  %486 = ptrtoint %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %431 to i64
  %487 = sub i64 %486, %366
  %488 = sdiv exact i64 %487, 88
  %489 = sub i64 %45, %486
  %490 = sdiv exact i64 %489, 88
  %491 = icmp slt i64 %488, %490
  br i1 %491, label %492, label %496

492:                                              ; preds = %485
  tail call fastcc void @"_ZNSt3__16__sortIRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEvT0_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %49, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %431)
  %493 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %431, i64 1
  br label %494

494:                                              ; preds = %492, %484
  %495 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %480, %484 ], [ %493, %492 ]
  br label %46

496:                                              ; preds = %485
  %497 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %431, i64 1
  tail call fastcc void @"_ZNSt3__16__sortIRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEvT0_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %497, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %28)
  br label %483

498:                                              ; preds = %482, %267, %48, %48, %233, %264, %204, %114, %53, %95, %97, %101, %106
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* nocapture, %"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* nocapture) unnamed_addr #4 {
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %6 = alloca %"class.jxl::Rect", align 8
  %7 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %8 = alloca %"class.jxl::Rect", align 8
  %9 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %10 = alloca %"class.jxl::Rect", align 8
  %11 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %12 = alloca %"class.jxl::Rect", align 8
  %13 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %14 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 7
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 7
  %17 = load float, float* %16, align 4
  %18 = fcmp ogt float %15, %17
  %19 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 7
  %20 = load float, float* %19, align 4
  %21 = fcmp ogt float %20, %15
  br i1 %18, label %90, label %22

22:                                               ; preds = %3
  br i1 %21, label %23, label %190

23:                                               ; preds = %22
  %24 = bitcast %"class.jxl::Rect"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24)
  %25 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25)
  %26 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* align 8 %26, i64 32, i1 false) #8
  %27 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 1
  %28 = bitcast %"class.std::__1::vector.32"* %27 to i64*
  %29 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 1, i32 0, i32 1
  %30 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %29 to i64*
  %31 = bitcast %"class.std::__1::vector.32"* %27 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 8
  %33 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %34 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.std::__1::vector.32"* %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #8
  %37 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 2
  %38 = bitcast float* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %25, i8* align 8 %38, i64 32, i1 false) #8
  %39 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %39, i64 32, i1 false) #8
  %40 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1
  %41 = bitcast %"class.std::__1::vector.32"* %40 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %28, align 8
  %43 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1, i32 0, i32 1
  %44 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %43 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %30, align 8
  %46 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %47 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %46 to i64*
  %48 = load i64, i64* %47, align 8
  store i64 %48, i64* %34, align 8
  %49 = bitcast %"class.std::__1::vector.32"* %40 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #8
  %50 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 2
  %51 = bitcast float* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %51, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* nonnull align 8 %24, i64 32, i1 false) #8
  %52 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %40, i64 0, i32 0, i32 0
  %53 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %52, align 8
  %54 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %53, null
  br i1 %54, label %58, label %55

55:                                               ; preds = %23
  %56 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %53 to i64
  store i64 %56, i64* %44, align 8
  %57 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %53 to i8*
  tail call void @_ZdlPv(i8* %57) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #8
  br label %58

58:                                               ; preds = %23, %55
  %59 = bitcast %"class.std::__1::vector.32"* %40 to <2 x i64>*
  store <2 x i64> %32, <2 x i64>* %59, align 8
  store i64 %35, i64* %47, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* nonnull align 8 %25, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25)
  %60 = load float, float* %14, align 4
  %61 = load float, float* %16, align 4
  %62 = fcmp ogt float %60, %61
  br i1 %62, label %63, label %190

63:                                               ; preds = %58
  %64 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %64)
  %65 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %65)
  %66 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %64, i8* align 8 %66, i64 32, i1 false) #8
  %67 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1
  %68 = bitcast %"class.std::__1::vector.32"* %67 to i64*
  %69 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1, i32 0, i32 1
  %70 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %69 to i64*
  %71 = bitcast %"class.std::__1::vector.32"* %67 to <2 x i64>*
  %72 = load <2 x i64>, <2 x i64>* %71, align 8
  %73 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %74 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.std::__1::vector.32"* %67 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %76, i8 0, i64 24, i1 false) #8
  %77 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 2
  %78 = bitcast float* %77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %65, i8* align 8 %78, i64 32, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %26, i64 32, i1 false) #8
  %79 = load i64, i64* %28, align 8
  store i64 %79, i64* %68, align 8
  %80 = load i64, i64* %30, align 8
  store i64 %80, i64* %70, align 8
  %81 = load i64, i64* %34, align 8
  store i64 %81, i64* %74, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %38, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* nonnull align 8 %64, i64 32, i1 false) #8
  %82 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %27, i64 0, i32 0, i32 0
  %83 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %82, align 8
  %84 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %83, null
  br i1 %84, label %88, label %85

85:                                               ; preds = %63
  %86 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %83 to i64
  store i64 %86, i64* %30, align 8
  %87 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %83 to i8*
  tail call void @_ZdlPv(i8* %87) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #8
  br label %88

88:                                               ; preds = %63, %85
  %89 = bitcast %"class.std::__1::vector.32"* %27 to <2 x i64>*
  store <2 x i64> %72, <2 x i64>* %89, align 8
  store i64 %75, i64* %34, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* nonnull align 8 %65, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %64)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %65)
  br label %190

90:                                               ; preds = %3
  br i1 %21, label %91, label %128

91:                                               ; preds = %90
  %92 = bitcast %"class.jxl::Rect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %92)
  %93 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %93)
  %94 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %92, i8* align 8 %94, i64 32, i1 false) #8
  %95 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1
  %96 = bitcast %"class.std::__1::vector.32"* %95 to i64*
  %97 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1, i32 0, i32 1
  %98 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %97 to i64*
  %99 = bitcast %"class.std::__1::vector.32"* %95 to <2 x i64>*
  %100 = load <2 x i64>, <2 x i64>* %99, align 8
  %101 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %102 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"class.std::__1::vector.32"* %95 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 24, i1 false) #8
  %105 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 2
  %106 = bitcast float* %105 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %93, i8* align 8 %106, i64 32, i1 false) #8
  %107 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %107, i64 32, i1 false) #8
  %108 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1
  %109 = bitcast %"class.std::__1::vector.32"* %108 to i64*
  %110 = load i64, i64* %109, align 8
  store i64 %110, i64* %96, align 8
  %111 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1, i32 0, i32 1
  %112 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  store i64 %113, i64* %98, align 8
  %114 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %115 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %114 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %102, align 8
  %117 = bitcast %"class.std::__1::vector.32"* %108 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %117, i8 0, i64 24, i1 false) #8
  %118 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 2
  %119 = bitcast float* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %119, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %107, i8* nonnull align 8 %92, i64 32, i1 false) #8
  %120 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %108, i64 0, i32 0, i32 0
  %121 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %120, align 8
  %122 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %121, null
  br i1 %122, label %126, label %123

123:                                              ; preds = %91
  %124 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %121 to i64
  store i64 %124, i64* %112, align 8
  %125 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %121 to i8*
  tail call void @_ZdlPv(i8* %125) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %117, i8 0, i64 24, i1 false) #8
  br label %126

126:                                              ; preds = %91, %123
  %127 = bitcast %"class.std::__1::vector.32"* %108 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %127, align 8
  store i64 %103, i64* %115, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* nonnull align 8 %93, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %92)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %93)
  br label %190

128:                                              ; preds = %90
  %129 = bitcast %"class.jxl::Rect"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %129)
  %130 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %130)
  %131 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %129, i8* align 8 %131, i64 32, i1 false) #8
  %132 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1
  %133 = bitcast %"class.std::__1::vector.32"* %132 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1, i32 0, i32 1
  %136 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %139 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = bitcast %"class.std::__1::vector.32"* %132 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %141, i8 0, i64 24, i1 false) #8
  %142 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 2
  %143 = bitcast float* %142 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %130, i8* align 8 %143, i64 32, i1 false) #8
  %144 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %131, i8* align 8 %144, i64 32, i1 false) #8
  %145 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 1
  %146 = bitcast %"class.std::__1::vector.32"* %145 to i64*
  %147 = load i64, i64* %146, align 8
  store i64 %147, i64* %133, align 8
  %148 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 1, i32 0, i32 1
  %149 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %148 to i64*
  %150 = load i64, i64* %149, align 8
  store i64 %150, i64* %136, align 8
  %151 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %152 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %151 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %139, align 8
  %154 = bitcast %"class.std::__1::vector.32"* %145 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %154, i8 0, i64 24, i1 false) #8
  %155 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 2
  %156 = bitcast float* %155 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %156, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %144, i8* nonnull align 8 %129, i64 32, i1 false) #8
  %157 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %145, i64 0, i32 0, i32 0
  %158 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %157, align 8
  %159 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %158, null
  br i1 %159, label %163, label %160

160:                                              ; preds = %128
  %161 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %158 to i64
  store i64 %161, i64* %149, align 8
  %162 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %158 to i8*
  tail call void @_ZdlPv(i8* %162) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %154, i8 0, i64 24, i1 false) #8
  br label %163

163:                                              ; preds = %128, %160
  store i64 %134, i64* %146, align 8
  store i64 %137, i64* %149, align 8
  store i64 %140, i64* %152, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %156, i8* nonnull align 8 %130, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %129)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %130)
  %164 = load float, float* %19, align 4
  %165 = load float, float* %14, align 4
  %166 = fcmp ogt float %164, %165
  br i1 %166, label %167, label %190

167:                                              ; preds = %163
  %168 = bitcast %"class.jxl::Rect"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %168)
  %169 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %169)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %168, i8* align 8 %144, i64 32, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %154, i8 0, i64 24, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %169, i8* align 8 %156, i64 32, i1 false) #8
  %170 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %144, i8* align 8 %170, i64 32, i1 false) #8
  %171 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1
  %172 = bitcast %"class.std::__1::vector.32"* %171 to i64*
  %173 = load i64, i64* %172, align 8
  store i64 %173, i64* %146, align 8
  %174 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1, i32 0, i32 1
  %175 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %174 to i64*
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %149, align 8
  %177 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %178 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %177 to i64*
  %179 = load i64, i64* %178, align 8
  store i64 %179, i64* %152, align 8
  %180 = bitcast %"class.std::__1::vector.32"* %171 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %180, i8 0, i64 24, i1 false) #8
  %181 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 2
  %182 = bitcast float* %181 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %156, i8* align 8 %182, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %170, i8* nonnull align 8 %168, i64 32, i1 false) #8
  %183 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %171, i64 0, i32 0, i32 0
  %184 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %183, align 8
  %185 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %184, null
  br i1 %185, label %189, label %186

186:                                              ; preds = %167
  %187 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %184 to i64
  store i64 %187, i64* %175, align 8
  %188 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %184 to i8*
  tail call void @_ZdlPv(i8* %188) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %180, i8 0, i64 24, i1 false) #8
  br label %189

189:                                              ; preds = %167, %186
  store i64 %134, i64* %172, align 8
  store i64 %137, i64* %175, align 8
  store i64 %140, i64* %178, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %182, i8* nonnull align 8 %169, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %168)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %169)
  br label %190

190:                                              ; preds = %163, %189, %58, %88, %22, %126
  %191 = phi i32 [ 1, %126 ], [ 0, %22 ], [ 2, %88 ], [ 1, %58 ], [ 2, %189 ], [ 1, %163 ]
  ret i32 %191
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* nocapture, %"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* nocapture, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* nocapture) unnamed_addr #4 {
  %5 = alloca %"class.jxl::Rect", align 8
  %6 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %7 = alloca %"class.jxl::Rect", align 8
  %8 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %9 = alloca %"class.jxl::Rect", align 8
  %10 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %11 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2)
  %12 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %3, i64 0, i32 7
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 7
  %15 = load float, float* %14, align 4
  %16 = fcmp ogt float %13, %15
  br i1 %16, label %17, label %119

17:                                               ; preds = %4
  %18 = bitcast %"class.jxl::Rect"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18)
  %19 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19)
  %20 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* align 8 %20, i64 32, i1 false) #8
  %21 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1
  %22 = bitcast %"class.std::__1::vector.32"* %21 to i64*
  %23 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1, i32 0, i32 1
  %24 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %23 to i64*
  %25 = bitcast %"class.std::__1::vector.32"* %21 to <2 x i64>*
  %26 = load <2 x i64>, <2 x i64>* %25, align 8
  %27 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %28 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.std::__1::vector.32"* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 24, i1 false) #8
  %31 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 2
  %32 = bitcast float* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 %32, i64 32, i1 false) #8
  %33 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %33, i64 32, i1 false) #8
  %34 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %3, i64 0, i32 1
  %35 = bitcast %"class.std::__1::vector.32"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %22, align 8
  %37 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %3, i64 0, i32 1, i32 0, i32 1
  %38 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %37 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %24, align 8
  %40 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %3, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %41 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %40 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %28, align 8
  %43 = bitcast %"class.std::__1::vector.32"* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 24, i1 false) #8
  %44 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %3, i64 0, i32 2
  %45 = bitcast float* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %45, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* nonnull align 8 %18, i64 32, i1 false) #8
  %46 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %34, i64 0, i32 0, i32 0
  %47 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %46, align 8
  %48 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %47, null
  br i1 %48, label %52, label %49

49:                                               ; preds = %17
  %50 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %47 to i64
  store i64 %50, i64* %38, align 8
  %51 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %47 to i8*
  tail call void @_ZdlPv(i8* %51) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 24, i1 false) #8
  br label %52

52:                                               ; preds = %17, %49
  %53 = bitcast %"class.std::__1::vector.32"* %34 to <2 x i64>*
  store <2 x i64> %26, <2 x i64>* %53, align 8
  store i64 %29, i64* %41, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* nonnull align 8 %19, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19)
  %54 = add i32 %11, 1
  %55 = load float, float* %14, align 4
  %56 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 7
  %57 = load float, float* %56, align 4
  %58 = fcmp ogt float %55, %57
  br i1 %58, label %59, label %119

59:                                               ; preds = %52
  %60 = bitcast %"class.jxl::Rect"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %60)
  %61 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %61)
  %62 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %60, i8* align 8 %62, i64 32, i1 false) #8
  %63 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 1
  %64 = bitcast %"class.std::__1::vector.32"* %63 to i64*
  %65 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 1, i32 0, i32 1
  %66 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %65 to i64*
  %67 = bitcast %"class.std::__1::vector.32"* %63 to <2 x i64>*
  %68 = load <2 x i64>, <2 x i64>* %67, align 8
  %69 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %70 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"class.std::__1::vector.32"* %63 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 24, i1 false) #8
  %73 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 2
  %74 = bitcast float* %73 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %61, i8* align 8 %74, i64 32, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %20, i64 32, i1 false) #8
  %75 = load i64, i64* %22, align 8
  store i64 %75, i64* %64, align 8
  %76 = load i64, i64* %24, align 8
  store i64 %76, i64* %66, align 8
  %77 = load i64, i64* %28, align 8
  store i64 %77, i64* %70, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 24, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %32, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* nonnull align 8 %60, i64 32, i1 false) #8
  %78 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %21, i64 0, i32 0, i32 0
  %79 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %78, align 8
  %80 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %79, null
  br i1 %80, label %84, label %81

81:                                               ; preds = %59
  %82 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %79 to i64
  store i64 %82, i64* %24, align 8
  %83 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %79 to i8*
  tail call void @_ZdlPv(i8* %83) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 24, i1 false) #8
  br label %84

84:                                               ; preds = %59, %81
  %85 = bitcast %"class.std::__1::vector.32"* %21 to <2 x i64>*
  store <2 x i64> %68, <2 x i64>* %85, align 8
  store i64 %71, i64* %28, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* nonnull align 8 %61, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %60)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %61)
  %86 = add i32 %11, 2
  %87 = load float, float* %56, align 4
  %88 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 7
  %89 = load float, float* %88, align 4
  %90 = fcmp ogt float %87, %89
  br i1 %90, label %91, label %119

91:                                               ; preds = %84
  %92 = bitcast %"class.jxl::Rect"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %92)
  %93 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %93)
  %94 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %92, i8* align 8 %94, i64 32, i1 false) #8
  %95 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1
  %96 = bitcast %"class.std::__1::vector.32"* %95 to i64*
  %97 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1, i32 0, i32 1
  %98 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %97 to i64*
  %99 = bitcast %"class.std::__1::vector.32"* %95 to <2 x i64>*
  %100 = load <2 x i64>, <2 x i64>* %99, align 8
  %101 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %102 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"class.std::__1::vector.32"* %95 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 24, i1 false) #8
  %105 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 2
  %106 = bitcast float* %105 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %93, i8* align 8 %106, i64 32, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %62, i64 32, i1 false) #8
  %107 = load i64, i64* %64, align 8
  store i64 %107, i64* %96, align 8
  %108 = load i64, i64* %66, align 8
  store i64 %108, i64* %98, align 8
  %109 = load i64, i64* %70, align 8
  store i64 %109, i64* %102, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 24, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %74, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* nonnull align 8 %92, i64 32, i1 false) #8
  %110 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %63, i64 0, i32 0, i32 0
  %111 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %110, align 8
  %112 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %111, null
  br i1 %112, label %116, label %113

113:                                              ; preds = %91
  %114 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %111 to i64
  store i64 %114, i64* %66, align 8
  %115 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %111 to i8*
  tail call void @_ZdlPv(i8* %115) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %72, i8 0, i64 24, i1 false) #8
  br label %116

116:                                              ; preds = %91, %113
  %117 = bitcast %"class.std::__1::vector.32"* %63 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %117, align 8
  store i64 %103, i64* %70, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* nonnull align 8 %93, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %92)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %93)
  %118 = add i32 %11, 3
  br label %119

119:                                              ; preds = %52, %116, %84, %4
  %120 = phi i32 [ %118, %116 ], [ %86, %84 ], [ %54, %52 ], [ %11, %4 ]
  ret i32 %120
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort5IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* nocapture, %"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* nocapture, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* nocapture, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* nocapture) unnamed_addr #4 {
  %6 = alloca %"class.jxl::Rect", align 8
  %7 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %8 = alloca %"class.jxl::Rect", align 8
  %9 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %10 = alloca %"class.jxl::Rect", align 8
  %11 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %12 = alloca %"class.jxl::Rect", align 8
  %13 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %14 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %3)
  %15 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %4, i64 0, i32 7
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %3, i64 0, i32 7
  %18 = load float, float* %17, align 4
  %19 = fcmp ogt float %16, %18
  br i1 %19, label %20, label %154

20:                                               ; preds = %5
  %21 = bitcast %"class.jxl::Rect"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21)
  %22 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %22)
  %23 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %21, i8* align 8 %23, i64 32, i1 false) #8
  %24 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %3, i64 0, i32 1
  %25 = bitcast %"class.std::__1::vector.32"* %24 to i64*
  %26 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %3, i64 0, i32 1, i32 0, i32 1
  %27 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %26 to i64*
  %28 = bitcast %"class.std::__1::vector.32"* %24 to <2 x i64>*
  %29 = load <2 x i64>, <2 x i64>* %28, align 8
  %30 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %3, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.std::__1::vector.32"* %24 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 24, i1 false) #8
  %34 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %3, i64 0, i32 2
  %35 = bitcast float* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 8 %35, i64 32, i1 false) #8
  %36 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %36, i64 32, i1 false) #8
  %37 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %4, i64 0, i32 1
  %38 = bitcast %"class.std::__1::vector.32"* %37 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %25, align 8
  %40 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %4, i64 0, i32 1, i32 0, i32 1
  %41 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %40 to i64*
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %27, align 8
  %43 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %4, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %44 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %43 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %31, align 8
  %46 = bitcast %"class.std::__1::vector.32"* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 24, i1 false) #8
  %47 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %4, i64 0, i32 2
  %48 = bitcast float* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %48, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* nonnull align 8 %21, i64 32, i1 false) #8
  %49 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %37, i64 0, i32 0, i32 0
  %50 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %49, align 8
  %51 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %50, null
  br i1 %51, label %55, label %52

52:                                               ; preds = %20
  %53 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %50 to i64
  store i64 %53, i64* %41, align 8
  %54 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %50 to i8*
  tail call void @_ZdlPv(i8* %54) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 24, i1 false) #8
  br label %55

55:                                               ; preds = %20, %52
  %56 = bitcast %"class.std::__1::vector.32"* %37 to <2 x i64>*
  store <2 x i64> %29, <2 x i64>* %56, align 8
  store i64 %32, i64* %44, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* nonnull align 8 %22, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %22)
  %57 = add i32 %14, 1
  %58 = load float, float* %17, align 4
  %59 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 7
  %60 = load float, float* %59, align 4
  %61 = fcmp ogt float %58, %60
  br i1 %61, label %62, label %154

62:                                               ; preds = %55
  %63 = bitcast %"class.jxl::Rect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %63)
  %64 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %64)
  %65 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %63, i8* align 8 %65, i64 32, i1 false) #8
  %66 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1
  %67 = bitcast %"class.std::__1::vector.32"* %66 to i64*
  %68 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1, i32 0, i32 1
  %69 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %68 to i64*
  %70 = bitcast %"class.std::__1::vector.32"* %66 to <2 x i64>*
  %71 = load <2 x i64>, <2 x i64>* %70, align 8
  %72 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %73 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = bitcast %"class.std::__1::vector.32"* %66 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %75, i8 0, i64 24, i1 false) #8
  %76 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %2, i64 0, i32 2
  %77 = bitcast float* %76 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %64, i8* align 8 %77, i64 32, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %23, i64 32, i1 false) #8
  %78 = load i64, i64* %25, align 8
  store i64 %78, i64* %67, align 8
  %79 = load i64, i64* %27, align 8
  store i64 %79, i64* %69, align 8
  %80 = load i64, i64* %31, align 8
  store i64 %80, i64* %73, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 24, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %35, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* nonnull align 8 %63, i64 32, i1 false) #8
  %81 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %24, i64 0, i32 0, i32 0
  %82 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %81, align 8
  %83 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %82, null
  br i1 %83, label %87, label %84

84:                                               ; preds = %62
  %85 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %82 to i64
  store i64 %85, i64* %27, align 8
  %86 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %82 to i8*
  tail call void @_ZdlPv(i8* %86) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 24, i1 false) #8
  br label %87

87:                                               ; preds = %62, %84
  %88 = bitcast %"class.std::__1::vector.32"* %24 to <2 x i64>*
  store <2 x i64> %71, <2 x i64>* %88, align 8
  store i64 %74, i64* %31, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* nonnull align 8 %64, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %63)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %64)
  %89 = add i32 %14, 2
  %90 = load float, float* %59, align 4
  %91 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 7
  %92 = load float, float* %91, align 4
  %93 = fcmp ogt float %90, %92
  br i1 %93, label %94, label %154

94:                                               ; preds = %87
  %95 = bitcast %"class.jxl::Rect"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %95)
  %96 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %96)
  %97 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %95, i8* align 8 %97, i64 32, i1 false) #8
  %98 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 1
  %99 = bitcast %"class.std::__1::vector.32"* %98 to i64*
  %100 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 1, i32 0, i32 1
  %101 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %100 to i64*
  %102 = bitcast %"class.std::__1::vector.32"* %98 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 8
  %104 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %105 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %104 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = bitcast %"class.std::__1::vector.32"* %98 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %107, i8 0, i64 24, i1 false) #8
  %108 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 0, i32 2
  %109 = bitcast float* %108 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %96, i8* align 8 %109, i64 32, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 8 %65, i64 32, i1 false) #8
  %110 = load i64, i64* %67, align 8
  store i64 %110, i64* %99, align 8
  %111 = load i64, i64* %69, align 8
  store i64 %111, i64* %101, align 8
  %112 = load i64, i64* %73, align 8
  store i64 %112, i64* %105, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %75, i8 0, i64 24, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %109, i8* align 8 %77, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* nonnull align 8 %95, i64 32, i1 false) #8
  %113 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %66, i64 0, i32 0, i32 0
  %114 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %113, align 8
  %115 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %114, null
  br i1 %115, label %119, label %116

116:                                              ; preds = %94
  %117 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %114 to i64
  store i64 %117, i64* %69, align 8
  %118 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %114 to i8*
  tail call void @_ZdlPv(i8* %118) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %75, i8 0, i64 24, i1 false) #8
  br label %119

119:                                              ; preds = %94, %116
  %120 = bitcast %"class.std::__1::vector.32"* %66 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %120, align 8
  store i64 %106, i64* %73, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* nonnull align 8 %96, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %95)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %96)
  %121 = add i32 %14, 3
  %122 = load float, float* %91, align 4
  %123 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 7
  %124 = load float, float* %123, align 4
  %125 = fcmp ogt float %122, %124
  br i1 %125, label %126, label %154

126:                                              ; preds = %119
  %127 = bitcast %"class.jxl::Rect"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %127)
  %128 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %128)
  %129 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %127, i8* align 8 %129, i64 32, i1 false) #8
  %130 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1
  %131 = bitcast %"class.std::__1::vector.32"* %130 to i64*
  %132 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1, i32 0, i32 1
  %133 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %132 to i64*
  %134 = bitcast %"class.std::__1::vector.32"* %130 to <2 x i64>*
  %135 = load <2 x i64>, <2 x i64>* %134, align 8
  %136 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %137 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"class.std::__1::vector.32"* %130 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %139, i8 0, i64 24, i1 false) #8
  %140 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 2
  %141 = bitcast float* %140 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %128, i8* align 8 %141, i64 32, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %129, i8* align 8 %97, i64 32, i1 false) #8
  %142 = load i64, i64* %99, align 8
  store i64 %142, i64* %131, align 8
  %143 = load i64, i64* %101, align 8
  store i64 %143, i64* %133, align 8
  %144 = load i64, i64* %105, align 8
  store i64 %144, i64* %137, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %107, i8 0, i64 24, i1 false) #8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %141, i8* align 8 %109, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* nonnull align 8 %127, i64 32, i1 false) #8
  %145 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %98, i64 0, i32 0, i32 0
  %146 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %145, align 8
  %147 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %146, null
  br i1 %147, label %151, label %148

148:                                              ; preds = %126
  %149 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %146 to i64
  store i64 %149, i64* %101, align 8
  %150 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %146 to i8*
  tail call void @_ZdlPv(i8* %150) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %107, i8 0, i64 24, i1 false) #8
  br label %151

151:                                              ; preds = %126, %148
  %152 = bitcast %"class.std::__1::vector.32"* %98 to <2 x i64>*
  store <2 x i64> %135, <2 x i64>* %152, align 8
  store i64 %138, i64* %105, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %109, i8* nonnull align 8 %128, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %127)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %128)
  %153 = add i32 %14, 4
  br label %154

154:                                              ; preds = %55, %119, %151, %87, %5
  %155 = phi i32 [ %153, %151 ], [ %121, %119 ], [ %89, %87 ], [ %57, %55 ], [ %14, %5 ]
  ret i32 %155
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEbT0_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"*, %"struct.jxl::(anonymous namespace)::ConnectedComponent"*) unnamed_addr #4 {
  %3 = alloca %"class.jxl::Rect", align 8
  %4 = alloca { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }, align 8
  %5 = alloca %"class.jxl::Rect", align 8
  %6 = alloca { float, float, float, float, float }, align 8
  %7 = ptrtoint %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1 to i64
  %8 = ptrtoint %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0 to i64
  %9 = sub i64 %7, %8
  %10 = sdiv exact i64 %9, 88
  switch i64 %10, label %70 [
    i64 0, label %170
    i64 1, label %170
    i64 2, label %11
    i64 3, label %55
    i64 4, label %59
    i64 5, label %64
  ]

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 -1, i32 7
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 7
  %15 = load float, float* %14, align 4
  %16 = fcmp ogt float %13, %15
  br i1 %16, label %17, label %170

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 -1
  %19 = bitcast %"class.jxl::Rect"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19)
  %20 = bitcast { float, float, float, float, float, float, %"struct.jxl::(anonymous namespace)::Pixel" }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20)
  %21 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 %21, i64 32, i1 false) #8
  %22 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1
  %23 = bitcast %"class.std::__1::vector.32"* %22 to i64*
  %24 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1, i32 0, i32 1
  %25 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %24 to i64*
  %26 = bitcast %"class.std::__1::vector.32"* %22 to <2 x i64>*
  %27 = load <2 x i64>, <2 x i64>* %26, align 8
  %28 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %29 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %"class.std::__1::vector.32"* %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 24, i1 false) #8
  %32 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 0, i32 2
  %33 = bitcast float* %32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* align 8 %33, i64 32, i1 false) #8
  %34 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %34, i64 32, i1 false) #8
  %35 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 -1, i32 1
  %36 = bitcast %"class.std::__1::vector.32"* %35 to i64*
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %23, align 8
  %38 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 -1, i32 1, i32 0, i32 1
  %39 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %38 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %25, align 8
  %41 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %42 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %41 to i64*
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %29, align 8
  %44 = bitcast %"class.std::__1::vector.32"* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #8
  %45 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 -1, i32 2
  %46 = bitcast float* %45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %46, i64 32, i1 false) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* nonnull align 8 %19, i64 32, i1 false) #8
  %47 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %35, i64 0, i32 0, i32 0
  %48 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %47, align 8
  %49 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %17
  %51 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %48 to i64
  store i64 %51, i64* %39, align 8
  %52 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %48 to i8*
  tail call void @_ZdlPv(i8* %52) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #8
  br label %53

53:                                               ; preds = %17, %50
  %54 = bitcast %"class.std::__1::vector.32"* %35 to <2 x i64>*
  store <2 x i64> %27, <2 x i64>* %54, align 8
  store i64 %30, i64* %42, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* nonnull align 8 %20, i64 32, i1 false) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20)
  br label %170

55:                                               ; preds = %2
  %56 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 1
  %57 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 -1
  %58 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %56, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %57)
  br label %170

59:                                               ; preds = %2
  %60 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 1
  %61 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 2
  %62 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 -1
  %63 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %60, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %61, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %62)
  br label %170

64:                                               ; preds = %2
  %65 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 1
  %66 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 2
  %67 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 3
  %68 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %1, i64 -1
  %69 = tail call fastcc i32 @"_ZNSt3__17__sort5IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %65, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %66, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %67, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %68)
  br label %170

70:                                               ; preds = %2
  %71 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 2
  %72 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 1
  %73 = tail call fastcc i32 @"_ZNSt3__17__sort3IRZN3jxl22DetectGaussianEllipsesERKNS1_6Image3IfEERKNS1_20GaussianDetectParamsERKNS1_18EllipseQuantParamsEPNS1_10ThreadPoolEE3$_4PNS1_12_GLOBAL__N_118ConnectedComponentEEEjT0_SJ_SJ_T_"(%"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %72, %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %71)
  %74 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %0, i64 3
  %75 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %74, %1
  br i1 %75, label %170, label %76

76:                                               ; preds = %70
  %77 = bitcast %"class.jxl::Rect"* %5 to i8*
  %78 = bitcast { float, float, float, float, float }* %6 to i8*
  br label %79

79:                                               ; preds = %76, %163
  %80 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %74, %76 ], [ %165, %163 ]
  %81 = phi i32 [ 0, %76 ], [ %164, %163 ]
  %82 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %71, %76 ], [ %80, %163 ]
  %83 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %80, i64 0, i32 7
  %84 = load float, float* %83, align 4
  %85 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %82, i64 0, i32 7
  %86 = load float, float* %85, align 4
  %87 = fcmp ogt float %84, %86
  br i1 %87, label %88, label %163

88:                                               ; preds = %79
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %77)
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %78)
  %89 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %80 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %77, i8* align 8 %89, i64 32, i1 false)
  %90 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %80, i64 0, i32 1
  %91 = bitcast %"class.std::__1::vector.32"* %90 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 8
  %93 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %80, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %"class.std::__1::vector.32"* %90 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 24, i1 false) #8
  %97 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %80, i64 0, i32 2
  %98 = bitcast float* %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %78, i8* align 8 %98, i64 20, i1 false)
  %99 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %80, i64 0, i32 8
  %100 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %99 to i64*
  %101 = load i64, i64* %100, align 8
  br label %102

102:                                              ; preds = %138, %88
  %103 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %80, %88 ], [ %104, %138 ]
  %104 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %82, %88 ], [ %139, %138 ]
  %105 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %103 to i8*
  %106 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 32, i1 false) #8
  %107 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %103, i64 0, i32 1
  %108 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %104, i64 0, i32 1
  %109 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %107, i64 0, i32 0, i32 0
  %110 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %109, align 8
  %111 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %110, null
  br i1 %111, label %118, label %112

112:                                              ; preds = %102
  %113 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %110 to i64
  %114 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %103, i64 0, i32 1, i32 0, i32 1
  %115 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %114 to i64*
  store i64 %113, i64* %115, align 8
  %116 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %110 to i8*
  tail call void @_ZdlPv(i8* %116) #19
  %117 = bitcast %"class.std::__1::vector.32"* %107 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %117, i8 0, i64 24, i1 false) #8
  br label %118

118:                                              ; preds = %102, %112
  %119 = bitcast %"class.std::__1::vector.32"* %108 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = bitcast %"class.std::__1::vector.32"* %107 to i64*
  store i64 %120, i64* %121, align 8
  %122 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %104, i64 0, i32 1, i32 0, i32 1
  %123 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %103, i64 0, i32 1, i32 0, i32 1
  %126 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %125 to i64*
  store i64 %124, i64* %126, align 8
  %127 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %104, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %128 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %103, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %131 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %130 to i64*
  store i64 %129, i64* %131, align 8
  %132 = bitcast %"class.std::__1::vector.32"* %108 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %132, i8 0, i64 24, i1 false) #8
  %133 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %103, i64 0, i32 2
  %134 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %104, i64 0, i32 2
  %135 = bitcast float* %133 to i8*
  %136 = bitcast float* %134 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* align 8 %136, i64 32, i1 false) #8
  %137 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %104, %0
  br i1 %137, label %143, label %138

138:                                              ; preds = %118
  %139 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %104, i64 -1
  %140 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %104, i64 -1, i32 7
  %141 = load float, float* %140, align 4
  %142 = fcmp ogt float %84, %141
  br i1 %142, label %102, label %143

143:                                              ; preds = %118, %138
  %144 = phi %"struct.jxl::(anonymous namespace)::ConnectedComponent"* [ %104, %138 ], [ %0, %118 ]
  %145 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %127 to i64*
  %146 = bitcast float* %134 to i8*
  %147 = bitcast %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %144 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %147, i8* nonnull align 8 %77, i64 32, i1 false)
  %148 = getelementptr inbounds %"class.std::__1::vector.32", %"class.std::__1::vector.32"* %108, i64 0, i32 0, i32 0
  %149 = load %"struct.jxl::(anonymous namespace)::Pixel"*, %"struct.jxl::(anonymous namespace)::Pixel"** %148, align 8
  %150 = icmp eq %"struct.jxl::(anonymous namespace)::Pixel"* %149, null
  br i1 %150, label %156, label %151

151:                                              ; preds = %143
  %152 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"** %122 to i64*
  %153 = bitcast %"class.std::__1::vector.32"* %108 to i8*
  %154 = ptrtoint %"struct.jxl::(anonymous namespace)::Pixel"* %149 to i64
  store i64 %154, i64* %152, align 8
  %155 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %149 to i8*
  tail call void @_ZdlPv(i8* %155) #19
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %153, i8 0, i64 24, i1 false) #8
  br label %156

156:                                              ; preds = %151, %143
  %157 = bitcast %"class.std::__1::vector.32"* %108 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %157, align 8
  store i64 %95, i64* %145, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %146, i8* nonnull align 8 %78, i64 20, i1 false)
  %158 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %144, i64 0, i32 7
  store float %84, float* %158, align 4
  %159 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %144, i64 0, i32 8
  %160 = bitcast %"struct.jxl::(anonymous namespace)::Pixel"* %159 to i64*
  store i64 %101, i64* %160, align 8
  %161 = add i32 %81, 1
  %162 = icmp eq i32 %161, 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %77)
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %78)
  br i1 %162, label %167, label %163

163:                                              ; preds = %156, %79
  %164 = phi i32 [ %161, %156 ], [ %81, %79 ]
  %165 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %80, i64 1
  %166 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %165, %1
  br i1 %166, label %170, label %79

167:                                              ; preds = %156
  %168 = getelementptr inbounds %"struct.jxl::(anonymous namespace)::ConnectedComponent", %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %80, i64 1
  %169 = icmp eq %"struct.jxl::(anonymous namespace)::ConnectedComponent"* %168, %1
  br label %170

170:                                              ; preds = %163, %167, %70, %11, %53, %2, %2, %64, %59, %55
  %171 = phi i1 [ true, %64 ], [ true, %59 ], [ true, %55 ], [ true, %2 ], [ true, %2 ], [ true, %53 ], [ true, %11 ], [ true, %70 ], [ %169, %167 ], [ true, %163 ]
  ret i1 %171
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_4pairIN3jxl14QuantizedPatchENS0_INS1_IjjEENS_9allocatorIS4_EEEEEENS5_IS8_EEE24__emplace_back_slow_pathIJEEEvDpOT_(%"class.std::__1::vector"*) local_unnamed_addr #17 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %3 = bitcast %"struct.std::__1::pair"** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.std::__1::vector"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = sdiv exact i64 %7, 184
  %9 = add nsw i64 %8, 1
  %10 = icmp ugt i64 %9, 100254043878856258
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %12) #18
  unreachable

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast %"struct.std::__1::pair"** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %16, %6
  %18 = sdiv exact i64 %17, 184
  %19 = icmp ult i64 %18, 50127021939428129
  br i1 %19, label %20, label %25

20:                                               ; preds = %13
  %21 = shl nsw i64 %18, 1
  %22 = icmp ult i64 %21, %9
  %23 = select i1 %22, i64 %9, i64 %21
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %13, %20
  %26 = phi i64 [ %23, %20 ], [ 100254043878856258, %13 ]
  %27 = mul i64 %26, 184
  %28 = tail call i8* @_Znwm(i64 %27) #19
  %29 = bitcast i8* %28 to %"struct.std::__1::pair"*
  br label %30

30:                                               ; preds = %20, %25
  %31 = phi i64 [ %26, %25 ], [ 0, %20 ]
  %32 = phi %"struct.std::__1::pair"* [ %29, %25 ], [ null, %20 ]
  %33 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %32, i64 %8
  %34 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %32, i64 %31
  %35 = ptrtoint %"struct.std::__1::pair"* %34 to i64
  %36 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %33, i64 0, i32 0
  tail call void @_ZN3jxl14QuantizedPatchC2Ev(%"struct.jxl::QuantizedPatch"* %36) #8
  %37 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %32, i64 %8, i32 1
  %38 = bitcast %"class.std::__1::vector.17"* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #8
  %39 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %33, i64 1
  %40 = ptrtoint %"struct.std::__1::pair"* %39 to i64
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %42 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %41, align 8
  %43 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %2, align 8
  %44 = icmp eq %"struct.std::__1::pair"* %43, %42
  br i1 %44, label %45, label %47

45:                                               ; preds = %30
  %46 = ptrtoint %"struct.std::__1::pair"* %42 to i64
  br label %177

47:                                               ; preds = %30, %47
  %48 = phi %"struct.std::__1::pair"* [ %50, %47 ], [ %33, %30 ]
  %49 = phi %"struct.std::__1::pair"* [ %51, %47 ], [ %43, %30 ]
  %50 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1
  %51 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1
  %52 = bitcast %"struct.std::__1::pair"* %50 to i8*
  %53 = bitcast %"struct.std::__1::pair"* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 16, i1 false) #8
  %54 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 2, i64 0
  %55 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 2, i64 0
  %56 = bitcast %"class.std::__1::vector.5"* %54 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 24, i1 false) #8
  %57 = bitcast %"class.std::__1::vector.5"* %55 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"class.std::__1::vector.5"* %54 to i64*
  store i64 %58, i64* %59, align 8
  %60 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 2, i64 0, i32 0, i32 1
  %61 = bitcast i8** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 2, i64 0, i32 0, i32 1
  %64 = bitcast i8** %63 to i64*
  store i64 %62, i64* %64, align 8
  %65 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 2, i64 0, i32 0, i32 2, i32 0, i32 0
  %66 = bitcast i8** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 2, i64 0, i32 0, i32 2, i32 0, i32 0
  %69 = bitcast i8** %68 to i64*
  store i64 %67, i64* %69, align 8
  %70 = bitcast %"class.std::__1::vector.5"* %55 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 0, i64 24, i1 false) #8
  %71 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 2, i64 1
  %72 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 2, i64 1
  %73 = bitcast %"class.std::__1::vector.5"* %71 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 24, i1 false) #8
  %74 = bitcast %"class.std::__1::vector.5"* %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.std::__1::vector.5"* %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 2, i64 1, i32 0, i32 1
  %78 = bitcast i8** %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 2, i64 1, i32 0, i32 1
  %81 = bitcast i8** %80 to i64*
  store i64 %79, i64* %81, align 8
  %82 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 2, i64 1, i32 0, i32 2, i32 0, i32 0
  %83 = bitcast i8** %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 2, i64 1, i32 0, i32 2, i32 0, i32 0
  %86 = bitcast i8** %85 to i64*
  store i64 %84, i64* %86, align 8
  %87 = bitcast %"class.std::__1::vector.5"* %72 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 24, i1 false) #8
  %88 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 2, i64 2
  %89 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 2, i64 2
  %90 = bitcast %"class.std::__1::vector.5"* %88 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 24, i1 false) #8
  %91 = bitcast %"class.std::__1::vector.5"* %89 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = bitcast %"class.std::__1::vector.5"* %88 to i64*
  store i64 %92, i64* %93, align 8
  %94 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 2, i64 2, i32 0, i32 1
  %95 = bitcast i8** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 2, i64 2, i32 0, i32 1
  %98 = bitcast i8** %97 to i64*
  store i64 %96, i64* %98, align 8
  %99 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 2, i64 2, i32 0, i32 2, i32 0, i32 0
  %100 = bitcast i8** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 2, i64 2, i32 0, i32 2, i32 0, i32 0
  %103 = bitcast i8** %102 to i64*
  store i64 %101, i64* %103, align 8
  %104 = bitcast %"class.std::__1::vector.5"* %89 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %104, i8 0, i64 24, i1 false) #8
  %105 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 3, i64 0
  %106 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 3, i64 0
  %107 = bitcast %"class.std::__1::vector.10"* %105 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %107, i8 0, i64 24, i1 false) #8
  %108 = bitcast %"class.std::__1::vector.10"* %106 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"class.std::__1::vector.10"* %105 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 3, i64 0, i32 0, i32 1
  %112 = bitcast float** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 3, i64 0, i32 0, i32 1
  %115 = bitcast float** %114 to i64*
  store i64 %113, i64* %115, align 8
  %116 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 3, i64 0, i32 0, i32 2, i32 0, i32 0
  %117 = bitcast float** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 3, i64 0, i32 0, i32 2, i32 0, i32 0
  %120 = bitcast float** %119 to i64*
  store i64 %118, i64* %120, align 8
  %121 = bitcast %"class.std::__1::vector.10"* %106 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %121, i8 0, i64 24, i1 false) #8
  %122 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 3, i64 1
  %123 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 3, i64 1
  %124 = bitcast %"class.std::__1::vector.10"* %122 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %124, i8 0, i64 24, i1 false) #8
  %125 = bitcast %"class.std::__1::vector.10"* %123 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = bitcast %"class.std::__1::vector.10"* %122 to i64*
  store i64 %126, i64* %127, align 8
  %128 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 3, i64 1, i32 0, i32 1
  %129 = bitcast float** %128 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 3, i64 1, i32 0, i32 1
  %132 = bitcast float** %131 to i64*
  store i64 %130, i64* %132, align 8
  %133 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 3, i64 1, i32 0, i32 2, i32 0, i32 0
  %134 = bitcast float** %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 3, i64 1, i32 0, i32 2, i32 0, i32 0
  %137 = bitcast float** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = bitcast %"class.std::__1::vector.10"* %123 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %138, i8 0, i64 24, i1 false) #8
  %139 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 3, i64 2
  %140 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 3, i64 2
  %141 = bitcast %"class.std::__1::vector.10"* %139 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %141, i8 0, i64 24, i1 false) #8
  %142 = bitcast %"class.std::__1::vector.10"* %140 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = bitcast %"class.std::__1::vector.10"* %139 to i64*
  store i64 %143, i64* %144, align 8
  %145 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 3, i64 2, i32 0, i32 1
  %146 = bitcast float** %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 3, i64 2, i32 0, i32 1
  %149 = bitcast float** %148 to i64*
  store i64 %147, i64* %149, align 8
  %150 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 0, i32 3, i64 2, i32 0, i32 2, i32 0, i32 0
  %151 = bitcast float** %150 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 0, i32 3, i64 2, i32 0, i32 2, i32 0, i32 0
  %154 = bitcast float** %153 to i64*
  store i64 %152, i64* %154, align 8
  %155 = bitcast %"class.std::__1::vector.10"* %140 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %155, i8 0, i64 24, i1 false) #8
  %156 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 1
  %157 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 1
  %158 = bitcast %"class.std::__1::vector.17"* %156 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %158, i8 0, i64 24, i1 false) #8
  %159 = bitcast %"class.std::__1::vector.17"* %157 to i64*
  %160 = load i64, i64* %159, align 8
  %161 = bitcast %"class.std::__1::vector.17"* %156 to i64*
  store i64 %160, i64* %161, align 8
  %162 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 1, i32 0, i32 1
  %163 = bitcast %"struct.std::__1::pair.19"** %162 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 1, i32 0, i32 1
  %166 = bitcast %"struct.std::__1::pair.19"** %165 to i64*
  store i64 %164, i64* %166, align 8
  %167 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %49, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %168 = bitcast %"struct.std::__1::pair.19"** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %48, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %171 = bitcast %"struct.std::__1::pair.19"** %170 to i64*
  store i64 %169, i64* %171, align 8
  %172 = bitcast %"class.std::__1::vector.17"* %157 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %172, i8 0, i64 24, i1 false) #8
  %173 = icmp eq %"struct.std::__1::pair"* %51, %42
  br i1 %173, label %174, label %47

174:                                              ; preds = %47
  %175 = load i64, i64* %5, align 8
  %176 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %2, align 8
  br label %177

177:                                              ; preds = %45, %174
  %178 = phi %"struct.std::__1::pair"* [ %42, %45 ], [ %176, %174 ]
  %179 = phi %"struct.std::__1::pair"* [ %33, %45 ], [ %50, %174 ]
  %180 = phi i64 [ %46, %45 ], [ %175, %174 ]
  %181 = ptrtoint %"struct.std::__1::pair"* %179 to i64
  store i64 %181, i64* %5, align 8
  store i64 %40, i64* %3, align 8
  store i64 %35, i64* %15, align 8
  %182 = inttoptr i64 %180 to %"struct.std::__1::pair"*
  %183 = icmp eq %"struct.std::__1::pair"* %178, %182
  br i1 %183, label %248, label %184

184:                                              ; preds = %177, %246
  %185 = phi %"struct.std::__1::pair"* [ %186, %246 ], [ %178, %177 ]
  %186 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1
  %187 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1, i32 1, i32 0, i32 0
  %188 = load %"struct.std::__1::pair.19"*, %"struct.std::__1::pair.19"** %187, align 8
  %189 = icmp eq %"struct.std::__1::pair.19"* %188, null
  br i1 %189, label %195, label %190

190:                                              ; preds = %184
  %191 = ptrtoint %"struct.std::__1::pair.19"* %188 to i64
  %192 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1, i32 1, i32 0, i32 1
  %193 = bitcast %"struct.std::__1::pair.19"** %192 to i64*
  store i64 %191, i64* %193, align 8
  %194 = bitcast %"struct.std::__1::pair.19"* %188 to i8*
  tail call void @_ZdlPv(i8* %194) #19
  br label %195

195:                                              ; preds = %190, %184
  %196 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1, i32 0, i32 3, i64 2, i32 0, i32 0
  %197 = load float*, float** %196, align 8
  %198 = icmp eq float* %197, null
  br i1 %198, label %204, label %199

199:                                              ; preds = %195
  %200 = ptrtoint float* %197 to i64
  %201 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1, i32 0, i32 3, i64 2, i32 0, i32 1
  %202 = bitcast float** %201 to i64*
  store i64 %200, i64* %202, align 8
  %203 = bitcast float* %197 to i8*
  tail call void @_ZdlPv(i8* %203) #19
  br label %204

204:                                              ; preds = %199, %195
  %205 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1, i32 0, i32 3, i64 1, i32 0, i32 0
  %206 = load float*, float** %205, align 8
  %207 = icmp eq float* %206, null
  br i1 %207, label %233, label %228

208:                                              ; preds = %242
  %209 = ptrtoint i8* %244 to i64
  %210 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1, i32 0, i32 2, i64 2, i32 0, i32 1
  %211 = bitcast i8** %210 to i64*
  store i64 %209, i64* %211, align 8
  tail call void @_ZdlPv(i8* nonnull %244) #19
  br label %212

212:                                              ; preds = %242, %208
  %213 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1, i32 0, i32 2, i64 1, i32 0, i32 0
  %214 = load i8*, i8** %213, align 8
  %215 = icmp eq i8* %214, null
  br i1 %215, label %220, label %216

216:                                              ; preds = %212
  %217 = ptrtoint i8* %214 to i64
  %218 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1, i32 0, i32 2, i64 1, i32 0, i32 1
  %219 = bitcast i8** %218 to i64*
  store i64 %217, i64* %219, align 8
  tail call void @_ZdlPv(i8* nonnull %214) #19
  br label %220

220:                                              ; preds = %216, %212
  %221 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1, i32 0, i32 2, i64 0, i32 0, i32 0
  %222 = load i8*, i8** %221, align 8
  %223 = icmp eq i8* %222, null
  br i1 %223, label %246, label %224

224:                                              ; preds = %220
  %225 = ptrtoint i8* %222 to i64
  %226 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1, i32 0, i32 2, i64 0, i32 0, i32 1
  %227 = bitcast i8** %226 to i64*
  store i64 %225, i64* %227, align 8
  tail call void @_ZdlPv(i8* nonnull %222) #19
  br label %246

228:                                              ; preds = %204
  %229 = ptrtoint float* %206 to i64
  %230 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1, i32 0, i32 3, i64 1, i32 0, i32 1
  %231 = bitcast float** %230 to i64*
  store i64 %229, i64* %231, align 8
  %232 = bitcast float* %206 to i8*
  tail call void @_ZdlPv(i8* %232) #19
  br label %233

233:                                              ; preds = %228, %204
  %234 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1, i32 0, i32 3, i64 0, i32 0, i32 0
  %235 = load float*, float** %234, align 8
  %236 = icmp eq float* %235, null
  br i1 %236, label %242, label %237

237:                                              ; preds = %233
  %238 = ptrtoint float* %235 to i64
  %239 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1, i32 0, i32 3, i64 0, i32 0, i32 1
  %240 = bitcast float** %239 to i64*
  store i64 %238, i64* %240, align 8
  %241 = bitcast float* %235 to i8*
  tail call void @_ZdlPv(i8* %241) #19
  br label %242

242:                                              ; preds = %237, %233
  %243 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %185, i64 -1, i32 0, i32 2, i64 2, i32 0, i32 0
  %244 = load i8*, i8** %243, align 8
  %245 = icmp eq i8* %244, null
  br i1 %245, label %212, label %208

246:                                              ; preds = %220, %224
  %247 = icmp eq %"struct.std::__1::pair"* %186, %182
  br i1 %247, label %248, label %184

248:                                              ; preds = %246, %177
  %249 = icmp eq i64 %180, 0
  br i1 %249, label %252, label %250

250:                                              ; preds = %248
  %251 = inttoptr i64 %180 to i8*
  tail call void @_ZdlPv(i8* %251) #19
  br label %252

252:                                              ; preds = %248, %250
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl14QuantizedPatchC2Ev(%"struct.jxl::QuantizedPatch"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr %"struct.jxl::QuantizedPatch", %"struct.jxl::QuantizedPatch"* %0, i64 0, i32 2, i64 0
  %3 = getelementptr %"struct.jxl::QuantizedPatch", %"struct.jxl::QuantizedPatch"* %0, i64 0, i32 3, i64 0
  %4 = bitcast %"class.std::__1::vector.5"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 144, i1 false)
  tail call void @_ZNSt3__16vectorIaNS_9allocatorIaEEE8__appendEm(%"class.std::__1::vector.5"* %2, i64 1024) #8
  %5 = getelementptr inbounds %"struct.jxl::QuantizedPatch", %"struct.jxl::QuantizedPatch"* %0, i64 0, i32 3, i64 0, i32 0, i32 1
  %6 = bitcast float** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.10"* %3 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"struct.jxl::QuantizedPatch", %"struct.jxl::QuantizedPatch"* %0, i64 0, i32 3, i64 0, i32 0, i32 1
  %11 = sub i64 %7, %9
  %12 = ashr exact i64 %11, 2
  %13 = icmp ult i64 %12, 1024
  %14 = inttoptr i64 %9 to float*
  br i1 %13, label %15, label %17

15:                                               ; preds = %1
  %16 = sub nuw nsw i64 1024, %12
  tail call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.10"* %3, i64 %16) #8
  br label %21

17:                                               ; preds = %1
  %18 = icmp eq i64 %11, 4096
  br i1 %18, label %21, label %19

19:                                               ; preds = %17
  %20 = getelementptr inbounds float, float* %14, i64 1024
  store float* %20, float** %10, align 8
  br label %21

21:                                               ; preds = %17, %15, %19
  %22 = getelementptr inbounds %"struct.jxl::QuantizedPatch", %"struct.jxl::QuantizedPatch"* %0, i64 0, i32 2, i64 1
  %23 = getelementptr inbounds %"struct.jxl::QuantizedPatch", %"struct.jxl::QuantizedPatch"* %0, i64 0, i32 2, i64 1, i32 0, i32 1
  %24 = bitcast i8** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.std::__1::vector.5"* %22 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %25, %27
  %29 = icmp ult i64 %28, 1024
  %30 = inttoptr i64 %27 to i8*
  br i1 %29, label %35, label %31

31:                                               ; preds = %21
  %32 = icmp eq i64 %28, 1024
  br i1 %32, label %37, label %33

33:                                               ; preds = %31
  %34 = getelementptr inbounds i8, i8* %30, i64 1024
  store i8* %34, i8** %23, align 8
  br label %37

35:                                               ; preds = %21
  %36 = sub nuw nsw i64 1024, %28
  tail call void @_ZNSt3__16vectorIaNS_9allocatorIaEEE8__appendEm(%"class.std::__1::vector.5"* %22, i64 %36) #8
  br label %37

37:                                               ; preds = %35, %33, %31
  %38 = getelementptr inbounds %"struct.jxl::QuantizedPatch", %"struct.jxl::QuantizedPatch"* %0, i64 0, i32 3, i64 1
  %39 = getelementptr inbounds %"struct.jxl::QuantizedPatch", %"struct.jxl::QuantizedPatch"* %0, i64 0, i32 3, i64 1, i32 0, i32 1
  %40 = bitcast float** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"class.std::__1::vector.10"* %38 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %41, %43
  %45 = ashr exact i64 %44, 2
  %46 = icmp ult i64 %45, 1024
  %47 = inttoptr i64 %43 to float*
  br i1 %46, label %52, label %48

48:                                               ; preds = %37
  %49 = icmp eq i64 %44, 4096
  br i1 %49, label %54, label %50

50:                                               ; preds = %48
  %51 = getelementptr inbounds float, float* %47, i64 1024
  store float* %51, float** %39, align 8
  br label %54

52:                                               ; preds = %37
  %53 = sub nuw nsw i64 1024, %45
  tail call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.10"* %38, i64 %53) #8
  br label %54

54:                                               ; preds = %52, %50, %48
  %55 = getelementptr inbounds %"struct.jxl::QuantizedPatch", %"struct.jxl::QuantizedPatch"* %0, i64 0, i32 2, i64 2
  %56 = getelementptr inbounds %"struct.jxl::QuantizedPatch", %"struct.jxl::QuantizedPatch"* %0, i64 0, i32 2, i64 2, i32 0, i32 1
  %57 = bitcast i8** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"class.std::__1::vector.5"* %55 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = sub i64 %58, %60
  %62 = icmp ult i64 %61, 1024
  %63 = inttoptr i64 %60 to i8*
  br i1 %62, label %68, label %64

64:                                               ; preds = %54
  %65 = icmp eq i64 %61, 1024
  br i1 %65, label %70, label %66

66:                                               ; preds = %64
  %67 = getelementptr inbounds i8, i8* %63, i64 1024
  store i8* %67, i8** %56, align 8
  br label %70

68:                                               ; preds = %54
  %69 = sub nuw nsw i64 1024, %61
  tail call void @_ZNSt3__16vectorIaNS_9allocatorIaEEE8__appendEm(%"class.std::__1::vector.5"* %55, i64 %69) #8
  br label %70

70:                                               ; preds = %68, %66, %64
  %71 = getelementptr inbounds %"struct.jxl::QuantizedPatch", %"struct.jxl::QuantizedPatch"* %0, i64 0, i32 3, i64 2
  %72 = getelementptr inbounds %"struct.jxl::QuantizedPatch", %"struct.jxl::QuantizedPatch"* %0, i64 0, i32 3, i64 2, i32 0, i32 1
  %73 = bitcast float** %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = bitcast %"class.std::__1::vector.10"* %71 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = sub i64 %74, %76
  %78 = ashr exact i64 %77, 2
  %79 = icmp ult i64 %78, 1024
  %80 = inttoptr i64 %76 to float*
  br i1 %79, label %85, label %81

81:                                               ; preds = %70
  %82 = icmp eq i64 %77, 4096
  br i1 %82, label %87, label %83

83:                                               ; preds = %81
  %84 = getelementptr inbounds float, float* %80, i64 1024
  store float* %84, float** %72, align 8
  br label %87

85:                                               ; preds = %70
  %86 = sub nuw nsw i64 1024, %78
  tail call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.10"* %71, i64 %86) #8
  br label %87

87:                                               ; preds = %85, %83, %81
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIaNS_9allocatorIaEEE8__appendEm(%"class.std::__1::vector.5"*, i64) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #8
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.5"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.5"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #18
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #19
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #8
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.5", %"class.std::__1::vector.5"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #8
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #19
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE8__appendEm(%"class.std::__1::vector.10"*, i64) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast float** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 1
  %7 = bitcast float** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to float*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds float, float* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr float, float* %13, i64 %18
  %20 = bitcast float* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #8
  %26 = ptrtoint float* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.10"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.10"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #18
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #18
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #19
  %54 = bitcast i8* %53 to float*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi float* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds float, float* %57, i64 %33
  %59 = getelementptr inbounds float, float* %57, i64 %56
  %60 = getelementptr inbounds float, float* %58, i64 %1
  %61 = bitcast float* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #8
  %63 = ptrtoint float* %59 to i64
  %64 = ptrtoint float* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 0
  %66 = load float*, float** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint float* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds float, float* %58, i64 %71
  %73 = ptrtoint float* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast float* %72 to i8*
  %77 = bitcast float* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #8
  %78 = load float*, float** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi float* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq float* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast float* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #19
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { nofree nounwind }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { noreturn nounwind }
attributes #19 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf: argument 0"}
!4 = distinct !{!4, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf: argument 0"}
!7 = distinct !{!7, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf: argument 0"}
!10 = distinct !{!10, !"_ZN3hwy6N_AVX2L3SetENS0_4SimdIfLm8EEEf"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf: argument 0"}
!13 = distinct !{!13, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf: argument 0"}
!16 = distinct !{!16, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf: argument 0"}
!19 = distinct !{!19, !"_ZN3hwy6N_AVX3L3SetENS0_4SimdIfLm16EEEf"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN3jxl12_GLOBAL__N_118ComputeEnergyImageERKNS_6Image3IfEEPS2_PNS_10ThreadPoolE: argument 0"}
!22 = distinct !{!22, !"_ZN3jxl12_GLOBAL__N_118ComputeEnergyImageERKNS_6Image3IfEEPS2_PNS_10ThreadPoolE"}
!23 = !{i32 0, i32 33}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZN3jxl12_GLOBAL__N_16FindCCERKNS_5PlaneIfEEddjd: argument 0"}
!26 = distinct !{!26, !"_ZN3jxl12_GLOBAL__N_16FindCCERKNS_5PlaneIfEEddjd"}
!27 = !{!25, !28}
!28 = distinct !{!28, !29, !"_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_: argument 0"}
!29 = distinct !{!29, !"_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_"}
!30 = !{!31, !25, !28}
!31 = distinct !{!31, !32, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_: argument 0"}
!32 = distinct !{!32, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_"}
!33 = !{!31, !28}
!34 = !{!31, !25}
!35 = !{!"branch_weights", i32 1, i32 1048575}
!36 = !{!37, !25}
!37 = distinct !{!37, !38, !"_ZN3jxl12_GLOBAL__N_117BoundingRectangleERKNSt3__16vectorINS0_5PixelENS1_9allocatorIS3_EEEE: argument 0"}
!38 = distinct !{!38, !"_ZN3jxl12_GLOBAL__N_117BoundingRectangleERKNSt3__16vectorINS0_5PixelENS1_9allocatorIS3_EEEE"}
!39 = !{!37}
!40 = distinct !{!40, !41}
!41 = !{!"llvm.loop.isvectorized", i32 1}
!42 = distinct !{!42, !43, !41}
!43 = !{!"llvm.loop.unroll.runtime.disable"}
!44 = !{!45, !47}
!45 = distinct !{!45, !46, !"_ZN3jxl12_GLOBAL__N_115FitGaussianFastERKNS0_18ConnectedComponentERKNS_5PlaneIfEERKNS_6Image3IfEESB_: argument 0"}
!46 = distinct !{!46, !"_ZN3jxl12_GLOBAL__N_115FitGaussianFastERKNS0_18ConnectedComponentERKNS_5PlaneIfEERKNS_6Image3IfEESB_"}
!47 = distinct !{!47, !48, !"_ZN3jxl12_GLOBAL__N_111FitGaussianERKNS0_18ConnectedComponentERKNS_5PlaneIfEERKNS_6Image3IfEESB_: argument 0"}
!48 = distinct !{!48, !"_ZN3jxl12_GLOBAL__N_111FitGaussianERKNS0_18ConnectedComponentERKNS_5PlaneIfEERKNS_6Image3IfEESB_"}
!49 = !{!47}
!50 = !{!51}
!51 = distinct !{!51, !52, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!52 = distinct !{!52, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!55 = distinct !{!55, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!58 = distinct !{!58, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!59 = !{!60}
!60 = distinct !{!60, !61, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!61 = distinct !{!61, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!62 = !{!63}
!63 = distinct !{!63, !64, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!64 = distinct !{!64, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!67 = distinct !{!67, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf: argument 0"}
!70 = distinct !{!70, !"_ZN3hwy6N_SSE4L5StoreENS0_6Vec128IfLm4EEENS0_4SimdIfLm4EEEPf"}
!71 = !{!72}
!72 = distinct !{!72, !73, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!73 = distinct !{!73, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!74 = !{!75}
!75 = distinct !{!75, !73, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!76 = !{!77}
!77 = distinct !{!77, !78, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!78 = distinct !{!78, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!79 = !{!80}
!80 = distinct !{!80, !78, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!81 = !{!82}
!82 = distinct !{!82, !83, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!83 = distinct !{!83, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!84 = !{!85}
!85 = distinct !{!85, !83, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!86 = !{!87}
!87 = distinct !{!87, !88, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!88 = distinct !{!88, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!89 = !{!90}
!90 = distinct !{!90, !88, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!91 = !{!92}
!92 = distinct !{!92, !93, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!93 = distinct !{!93, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!94 = !{!95}
!95 = distinct !{!95, !93, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!96 = !{!97}
!97 = distinct !{!97, !98, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!98 = distinct !{!98, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!99 = !{!100}
!100 = distinct !{!100, !98, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!101 = !{!102}
!102 = distinct !{!102, !103, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf: argument 0"}
!103 = distinct !{!103, !"_ZN3hwy6N_AVX2L5StoreENS0_6Vec256IfEENS0_4SimdIfLm8EEEPf"}
!104 = !{!105}
!105 = distinct !{!105, !106, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!106 = distinct !{!106, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!107 = !{!108}
!108 = distinct !{!108, !106, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!109 = !{!110}
!110 = distinct !{!110, !111, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!111 = distinct !{!111, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!112 = !{!113}
!113 = distinct !{!113, !111, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!114 = !{!115}
!115 = distinct !{!115, !116, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!116 = distinct !{!116, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!117 = !{!118}
!118 = distinct !{!118, !116, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!119 = !{!120}
!120 = distinct !{!120, !121, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!121 = distinct !{!121, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!122 = !{!123}
!123 = distinct !{!123, !121, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!124 = !{!125}
!125 = distinct !{!125, !126, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!126 = distinct !{!126, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!127 = !{!128}
!128 = distinct !{!128, !126, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!129 = !{!130}
!130 = distinct !{!130, !131, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!131 = distinct !{!131, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!132 = !{!133}
!133 = distinct !{!133, !131, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!134 = !{!135}
!135 = distinct !{!135, !136, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf: argument 0"}
!136 = distinct !{!136, !"_ZN3hwy6N_AVX3L5StoreENS0_6Vec512IfEENS0_4SimdIfLm16EEEPf"}
!137 = !{!138}
!138 = distinct !{!138, !139, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!139 = distinct !{!139, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!140 = !{!141}
!141 = distinct !{!141, !142, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!142 = distinct !{!142, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!143 = !{!144}
!144 = distinct !{!144, !145, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!145 = distinct !{!145, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!146 = !{!147}
!147 = distinct !{!147, !148, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!148 = distinct !{!148, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!149 = !{!150}
!150 = distinct !{!150, !151, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!151 = distinct !{!151, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!152 = !{!153}
!153 = distinct !{!153, !154, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!154 = distinct !{!154, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!155 = !{!156}
!156 = distinct !{!156, !157, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!157 = distinct !{!157, !"_ZN3hwy8N_SCALAR5StoreIfEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
