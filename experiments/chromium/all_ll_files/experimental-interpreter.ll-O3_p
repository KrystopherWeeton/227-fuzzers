; ModuleID = '../../v8/src/regexp/experimental/experimental-interpreter.cc'
source_filename = "../../v8/src/regexp/experimental/experimental-interpreter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.645", %"class.std::__1::unique_ptr.666", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.676", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.815", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.828", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.838", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.849", %"struct.std::__1::atomic.152", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.924", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.967"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.975", i32, i8, i8, i32, i32, %"class.std::__1::vector.981", %"class.std::__1::vector.981", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.988", i64, %"class.std::__1::unordered_map.989", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.541", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.160", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1045", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1083", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1117", %"class.std::__1::vector.1121", %"class.std::__1::vector.1121", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.19", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.19", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.19", i64, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.29", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.146", %"class.std::__1::unique_ptr.146", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.161", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.19", i64, i8, %"struct.std::__1::atomic.19", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.165", %"class.std::__1::vector.165", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.172", %"class.std::__1::unique_ptr.178", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.308", %"class.std::__1::unique_ptr.314", %"class.std::__1::unique_ptr.320", %"class.std::__1::unique_ptr.359", %"class.std::__1::unique_ptr.398", %"class.std::__1::unique_ptr.428", %"class.std::__1::unique_ptr.434", %"class.std::__1::unique_ptr.444", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.450", %"class.std::__1::unique_ptr.456", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.462", %"class.std::__1::unique_ptr.468", %"class.std::__1::unique_ptr.474", %"class.std::__1::shared_ptr.480", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.503", %"class.std::__1::unique_ptr.529", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.535", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.548", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.330", i8, [7 x i8], %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.580", %"class.std::__1::unordered_map.554", %"class.std::__1::unordered_map.604", %"class.std::__1::vector.632", i8, %"class.std::__1::unique_ptr.639", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.2", %"class.std::__1::__compressed_pair.9", %"class.std::__1::__compressed_pair.14", %"class.std::__1::__compressed_pair.16", [4 x i8] }>
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4", %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.24" }
%"struct.std::__1::atomic.24" = type { %"struct.std::__1::__atomic_base.25" }
%"struct.std::__1::__atomic_base.25" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl.27" }
%"struct.std::__1::__cxx_atomic_impl.27" = type { %"struct.std::__1::__cxx_atomic_base_impl.28" }
%"struct.std::__1::__cxx_atomic_base_impl.28" = type { i64 }
%"struct.std::__1::atomic.29" = type { %"struct.std::__1::__atomic_base.30" }
%"struct.std::__1::__atomic_base.30" = type { %"struct.std::__1::__cxx_atomic_impl.31" }
%"struct.std::__1::__cxx_atomic_impl.31" = type { %"struct.std::__1::__cxx_atomic_base_impl.32" }
%"struct.std::__1::__cxx_atomic_base_impl.32" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.33" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.103" }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.19"*, %"class.std::__1::unique_ptr.97" }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.19", i64 }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.38", %"class.std::__1::vector.38", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.38" = type { %"class.std::__1::__vector_base.39" }
%"class.std::__1::__vector_base.39" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.40" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.45" }
%"class.std::__1::__hash_table.45" = type <{ %"class.std::__1::unique_ptr.46", %"class.std::__1::__compressed_pair.56", %"class.std::__1::__compressed_pair.61", %"class.std::__1::__compressed_pair.63", [4 x i8] }>
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48", %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.std::__1::__hash_node_base.49"** }
%"struct.std::__1::__hash_node_base.49" = type { %"struct.std::__1::__hash_node_base.49"* }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.std::__1::__bucket_list_deallocator.51" }
%"class.std::__1::__bucket_list_deallocator.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"struct.std::__1::__hash_node_base.49" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.24", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.86", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.19"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.24", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.24", %"struct.std::__1::atomic.68", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.68" = type { %"struct.std::__1::__atomic_base.69" }
%"struct.std::__1::__atomic_base.69" = type { %"struct.std::__1::__cxx_atomic_impl.70" }
%"struct.std::__1::__cxx_atomic_impl.70" = type { %"struct.std::__1::__cxx_atomic_base_impl.71" }
%"struct.std::__1::__cxx_atomic_base_impl.71" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.72" }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.74" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.79", %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.86" = type { %"struct.std::__1::__atomic_base.87" }
%"struct.std::__1::__atomic_base.87" = type { %"struct.std::__1::__cxx_atomic_impl.88" }
%"struct.std::__1::__cxx_atomic_impl.88" = type { %"struct.std::__1::__cxx_atomic_base_impl.89" }
%"struct.std::__1::__cxx_atomic_base_impl.89" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.90", i8, [7 x i8] }>
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { i64*, i64*, %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.19", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::vector.103" = type { %"class.std::__1::__vector_base.104" }
%"class.std::__1::__vector_base.104" = type { %"struct.std::__1::pair.105"*, %"struct.std::__1::pair.105"*, %"class.std::__1::__compressed_pair.106" }
%"struct.std::__1::pair.105" = type { i32, i64 }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"struct.std::__1::pair.105"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.19", i64, %"struct.std::__1::atomic.19" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.19", i32, %"struct.std::__1::atomic.19", %"class.v8::base::Mutex", %"struct.std::__1::atomic.19" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.111" }
%"class.std::__1::unordered_map.111" = type { %"class.std::__1::__hash_table.112" }
%"class.std::__1::__hash_table.112" = type <{ %"class.std::__1::unique_ptr.113", %"class.std::__1::__compressed_pair.123", %"class.std::__1::__compressed_pair.128", %"class.std::__1::__compressed_pair.133", [4 x i8] }>
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115", %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"struct.std::__1::__hash_node_base.116"** }
%"struct.std::__1::__hash_node_base.116" = type { %"struct.std::__1::__hash_node_base.116"* }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.std::__1::__bucket_list_deallocator.118" }
%"class.std::__1::__bucket_list_deallocator.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.std::__1::__hash_node_base.116" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.139", i64, i64, i8, i64, i64 }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.141" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.141" = type { %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1050", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1054", %"class.std::__1::unique_ptr.1060", %"class.std::__1::unique_ptr.474", %"class.std::__1::vector.1066", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1050" = type { %"struct.std::__1::__atomic_base.1051" }
%"struct.std::__1::__atomic_base.1051" = type { %"struct.std::__1::__cxx_atomic_impl.1052" }
%"struct.std::__1::__cxx_atomic_impl.1052" = type { %"struct.std::__1::__cxx_atomic_base_impl.1053" }
%"struct.std::__1::__cxx_atomic_base_impl.1053" = type { i32 }
%"class.std::__1::unique_ptr.1054" = type { %"class.std::__1::__compressed_pair.1055" }
%"class.std::__1::__compressed_pair.1055" = type { %"struct.std::__1::__compressed_pair_elem.1056" }
%"struct.std::__1::__compressed_pair_elem.1056" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.808" }
%"class.std::__1::vector.808" = type { %"class.std::__1::__vector_base.809" }
%"class.std::__1::__vector_base.809" = type { i64**, i64**, %"class.std::__1::__compressed_pair.810" }
%"class.std::__1::__compressed_pair.810" = type { %"struct.std::__1::__compressed_pair_elem.811" }
%"struct.std::__1::__compressed_pair_elem.811" = type { i64** }
%"class.std::__1::unique_ptr.1060" = type { %"class.std::__1::__compressed_pair.1061" }
%"class.std::__1::__compressed_pair.1061" = type { %"struct.std::__1::__compressed_pair_elem.1062" }
%"struct.std::__1::__compressed_pair_elem.1062" = type { %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.808", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1066" = type { %"class.std::__1::__vector_base.1067" }
%"class.std::__1::__vector_base.1067" = type { %"struct.std::__1::pair.1068"*, %"struct.std::__1::pair.1068"*, %"class.std::__1::__compressed_pair.1069" }
%"struct.std::__1::pair.1068" = type opaque
%"class.std::__1::__compressed_pair.1069" = type { %"struct.std::__1::__compressed_pair_elem.1070" }
%"struct.std::__1::__compressed_pair_elem.1070" = type { %"struct.std::__1::pair.1068"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.152", %"struct.std::__1::atomic.156", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.19" }
%"struct.std::__1::atomic.156" = type { %"struct.std::__1::__atomic_base.157" }
%"struct.std::__1::__atomic_base.157" = type { %"struct.std::__1::__cxx_atomic_impl.158" }
%"struct.std::__1::__cxx_atomic_impl.158" = type { %"struct.std::__1::__cxx_atomic_base_impl.159" }
%"struct.std::__1::__cxx_atomic_base_impl.159" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.19", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.160" }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"struct.std::__1::atomic.161" = type { %"struct.std::__1::__atomic_base.162" }
%"struct.std::__1::__atomic_base.162" = type { %"struct.std::__1::__cxx_atomic_impl.163" }
%"struct.std::__1::__cxx_atomic_impl.163" = type { %"struct.std::__1::__cxx_atomic_base_impl.164" }
%"struct.std::__1::__cxx_atomic_base_impl.164" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"struct.std::__1::atomic.19" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__cxx_atomic_impl.22" }
%"struct.std::__1::__cxx_atomic_impl.22" = type { %"struct.std::__1::__cxx_atomic_base_impl.23" }
%"struct.std::__1::__cxx_atomic_base_impl.23" = type { i64 }
%"class.std::__1::vector.165" = type { %"class.std::__1::__vector_base.166" }
%"class.std::__1::__vector_base.166" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.167" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.220", %"class.std::__1::unique_ptr.226", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.std::__1::vector.287", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.181", %"class.std::__1::vector.182", %"class.std::__1::vector.189", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.181" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.182" = type { %"class.std::__1::__vector_base.183" }
%"class.std::__1::__vector_base.183" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.184" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.189" = type { %"class.std::__1::__vector_base.190" }
%"class.std::__1::__vector_base.190" = type { %"class.std::__1::unique_ptr.191"*, %"class.std::__1::unique_ptr.191"*, %"class.std::__1::__compressed_pair.192" }
%"class.std::__1::unique_ptr.191" = type opaque
%"class.std::__1::__compressed_pair.192" = type { %"struct.std::__1::__compressed_pair_elem.193" }
%"struct.std::__1::__compressed_pair_elem.193" = type { %"class.std::__1::unique_ptr.191"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.197", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.203", %"class.v8::internal::Worklist.205", %"class.v8::internal::Worklist.207", %"class.v8::internal::Worklist.209", %"class.v8::internal::Worklist.211" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.197" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.199" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.201" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.203" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.205" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.207" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.209" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"class.v8::internal::Worklist.211" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.19" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.213", i8, i64 }
%"class.std::__1::vector.213" = type { %"class.std::__1::__vector_base.214" }
%"class.std::__1::__vector_base.214" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.215" }
%"class.std::__1::__compressed_pair.215" = type { %"struct.std::__1::__compressed_pair_elem.216" }
%"struct.std::__1::__compressed_pair_elem.216" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.220" = type { %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.226" = type { %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.229" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.181"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.229" = type { %"class.std::__1::__hash_table.230" }
%"class.std::__1::__hash_table.230" = type <{ %"class.std::__1::unique_ptr.231", %"class.std::__1::__compressed_pair.241", %"class.std::__1::__compressed_pair.246", %"class.std::__1::__compressed_pair.249", [4 x i8] }>
%"class.std::__1::unique_ptr.231" = type { %"class.std::__1::__compressed_pair.232" }
%"class.std::__1::__compressed_pair.232" = type { %"struct.std::__1::__compressed_pair_elem.233", %"struct.std::__1::__compressed_pair_elem.235" }
%"struct.std::__1::__compressed_pair_elem.233" = type { %"struct.std::__1::__hash_node_base.234"** }
%"struct.std::__1::__hash_node_base.234" = type { %"struct.std::__1::__hash_node_base.234"* }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"class.std::__1::__bucket_list_deallocator.236" }
%"class.std::__1::__bucket_list_deallocator.236" = type { %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"struct.std::__1::__hash_node_base.234" }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.256" }
%"class.std::__1::unordered_map.256" = type { %"class.std::__1::__hash_table.257" }
%"class.std::__1::__hash_table.257" = type <{ %"class.std::__1::unique_ptr.258", %"class.std::__1::__compressed_pair.268", %"class.std::__1::__compressed_pair.273", %"class.std::__1::__compressed_pair.276", [4 x i8] }>
%"class.std::__1::unique_ptr.258" = type { %"class.std::__1::__compressed_pair.259" }
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260", %"struct.std::__1::__compressed_pair_elem.262" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"struct.std::__1::__hash_node_base.261"** }
%"struct.std::__1::__hash_node_base.261" = type { %"struct.std::__1::__hash_node_base.261"* }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"class.std::__1::__bucket_list_deallocator.263" }
%"class.std::__1::__bucket_list_deallocator.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.268" = type { %"struct.std::__1::__compressed_pair_elem.269" }
%"struct.std::__1::__compressed_pair_elem.269" = type { %"struct.std::__1::__hash_node_base.261" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.276" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.280" = type { %"class.std::__1::__vector_base.281" }
%"class.std::__1::__vector_base.281" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.282" }
%"class.std::__1::__compressed_pair.282" = type { %"struct.std::__1::__compressed_pair_elem.283" }
%"struct.std::__1::__compressed_pair_elem.283" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.287" = type { %"class.std::__1::__vector_base.288" }
%"class.std::__1::__vector_base.288" = type { %"struct.std::__1::pair.289"*, %"struct.std::__1::pair.289"*, %"class.std::__1::__compressed_pair.290" }
%"struct.std::__1::pair.289" = type opaque
%"class.std::__1::__compressed_pair.290" = type { %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"struct.std::__1::pair.289"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.295", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.280"], [3 x %"class.std::__1::vector.280"], i8, %"struct.std::__1::atomic.152", [6 x i8], %"class.std::__1::vector.280", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.295" = type { %"class.std::__1::__compressed_pair.296" }
%"class.std::__1::__compressed_pair.296" = type { %"struct.std::__1::__compressed_pair_elem.297" }
%"struct.std::__1::__compressed_pair_elem.297" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.305"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.280", %"class.std::__1::vector.280", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.305" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.308" = type { %"class.std::__1::__compressed_pair.309" }
%"class.std::__1::__compressed_pair.309" = type { %"struct.std::__1::__compressed_pair_elem.310" }
%"struct.std::__1::__compressed_pair_elem.310" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.314" = type { %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.320" = type { %"class.std::__1::__compressed_pair.321" }
%"class.std::__1::__compressed_pair.321" = type { %"struct.std::__1::__compressed_pair_elem.322" }
%"struct.std::__1::__compressed_pair_elem.322" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.330", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.323"], %"class.std::__1::unique_ptr.295" }
%"class.std::__1::vector.323" = type { %"class.std::__1::__vector_base.324" }
%"class.std::__1::__vector_base.324" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.359" = type { %"class.std::__1::__compressed_pair.360" }
%"class.std::__1::__compressed_pair.360" = type { %"struct.std::__1::__compressed_pair_elem.361" }
%"struct.std::__1::__compressed_pair_elem.361" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.362", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.366", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.371" }
%"struct.std::__1::atomic.362" = type { %"struct.std::__1::__atomic_base.363" }
%"struct.std::__1::__atomic_base.363" = type { %"struct.std::__1::__cxx_atomic_impl.364" }
%"struct.std::__1::__cxx_atomic_impl.364" = type { %"struct.std::__1::__cxx_atomic_base_impl.365" }
%"struct.std::__1::__cxx_atomic_base_impl.365" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.366" = type { %"struct.std::__1::__atomic_base.367" }
%"struct.std::__1::__atomic_base.367" = type { %"struct.std::__1::__cxx_atomic_impl.368" }
%"struct.std::__1::__cxx_atomic_impl.368" = type { %"struct.std::__1::__cxx_atomic_base_impl.369" }
%"struct.std::__1::__cxx_atomic_base_impl.369" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.371" = type { %"class.std::__1::__hash_table.372" }
%"class.std::__1::__hash_table.372" = type <{ %"class.std::__1::unique_ptr.373", %"class.std::__1::__compressed_pair.383", %"class.std::__1::__compressed_pair.388", %"class.std::__1::__compressed_pair.391", [4 x i8] }>
%"class.std::__1::unique_ptr.373" = type { %"class.std::__1::__compressed_pair.374" }
%"class.std::__1::__compressed_pair.374" = type { %"struct.std::__1::__compressed_pair_elem.375", %"struct.std::__1::__compressed_pair_elem.377" }
%"struct.std::__1::__compressed_pair_elem.375" = type { %"struct.std::__1::__hash_node_base.376"** }
%"struct.std::__1::__hash_node_base.376" = type { %"struct.std::__1::__hash_node_base.376"* }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"class.std::__1::__bucket_list_deallocator.378" }
%"class.std::__1::__bucket_list_deallocator.378" = type { %"class.std::__1::__compressed_pair.379" }
%"class.std::__1::__compressed_pair.379" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"struct.std::__1::__hash_node_base.376" }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.391" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.398" = type { %"class.std::__1::__compressed_pair.399" }
%"class.std::__1::__compressed_pair.399" = type { %"struct.std::__1::__compressed_pair_elem.400" }
%"struct.std::__1::__compressed_pair_elem.400" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.295", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.152", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.401", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.401" = type { %"class.std::__1::__hash_table.402" }
%"class.std::__1::__hash_table.402" = type <{ %"class.std::__1::unique_ptr.403", %"class.std::__1::__compressed_pair.413", %"class.std::__1::__compressed_pair.418", %"class.std::__1::__compressed_pair.421", [4 x i8] }>
%"class.std::__1::unique_ptr.403" = type { %"class.std::__1::__compressed_pair.404" }
%"class.std::__1::__compressed_pair.404" = type { %"struct.std::__1::__compressed_pair_elem.405", %"struct.std::__1::__compressed_pair_elem.407" }
%"struct.std::__1::__compressed_pair_elem.405" = type { %"struct.std::__1::__hash_node_base.406"** }
%"struct.std::__1::__hash_node_base.406" = type { %"struct.std::__1::__hash_node_base.406"* }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"class.std::__1::__bucket_list_deallocator.408" }
%"class.std::__1::__bucket_list_deallocator.408" = type { %"class.std::__1::__compressed_pair.409" }
%"class.std::__1::__compressed_pair.409" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.413" = type { %"struct.std::__1::__compressed_pair_elem.414" }
%"struct.std::__1::__compressed_pair_elem.414" = type { %"struct.std::__1::__hash_node_base.406" }
%"class.std::__1::__compressed_pair.418" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.421" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.428" = type { %"class.std::__1::__compressed_pair.429" }
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.430" }
%"struct.std::__1::__compressed_pair_elem.430" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.434" = type { %"class.std::__1::__compressed_pair.435" }
%"class.std::__1::__compressed_pair.435" = type { %"struct.std::__1::__compressed_pair_elem.436" }
%"struct.std::__1::__compressed_pair_elem.436" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.437" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"class.std::__1::unique_ptr.444" = type { %"class.std::__1::__compressed_pair.445" }
%"class.std::__1::__compressed_pair.445" = type { %"struct.std::__1::__compressed_pair_elem.446" }
%"struct.std::__1::__compressed_pair_elem.446" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.450" = type { %"class.std::__1::__compressed_pair.451" }
%"class.std::__1::__compressed_pair.451" = type { %"struct.std::__1::__compressed_pair_elem.452" }
%"struct.std::__1::__compressed_pair_elem.452" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.456" = type { %"class.std::__1::__compressed_pair.457" }
%"class.std::__1::__compressed_pair.457" = type { %"struct.std::__1::__compressed_pair_elem.458" }
%"struct.std::__1::__compressed_pair_elem.458" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.462" = type { %"class.std::__1::__compressed_pair.463" }
%"class.std::__1::__compressed_pair.463" = type { %"struct.std::__1::__compressed_pair_elem.464" }
%"struct.std::__1::__compressed_pair_elem.464" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.468" = type { %"class.std::__1::__compressed_pair.469" }
%"class.std::__1::__compressed_pair.469" = type { %"struct.std::__1::__compressed_pair_elem.470" }
%"struct.std::__1::__compressed_pair_elem.470" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.474" = type { %"class.std::__1::__compressed_pair.475" }
%"class.std::__1::__compressed_pair.475" = type { %"struct.std::__1::__compressed_pair_elem.476" }
%"struct.std::__1::__compressed_pair_elem.476" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.480" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.499", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.481", %"class.v8::internal::VirtualMemory" }
%"class.std::__1::unique_ptr.481" = type { %"class.std::__1::__compressed_pair.482" }
%"class.std::__1::__compressed_pair.482" = type { %"struct.std::__1::__compressed_pair_elem.483" }
%"struct.std::__1::__compressed_pair_elem.483" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.484", %"class.std::__1::set.492" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.484" = type { %"class.std::__1::__tree.485" }
%"class.std::__1::__tree.485" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.490" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.490" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::set.492" = type { %"class.std::__1::__tree.493" }
%"class.std::__1::__tree.493" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.486", %"class.std::__1::__compressed_pair.494" }
%"class.std::__1::__compressed_pair.494" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::atomic.499" = type { %"struct.std::__1::__atomic_base.500" }
%"struct.std::__1::__atomic_base.500" = type { %"struct.std::__1::__cxx_atomic_impl.501" }
%"struct.std::__1::__cxx_atomic_impl.501" = type { %"struct.std::__1::__cxx_atomic_base_impl.502" }
%"struct.std::__1::__cxx_atomic_base_impl.502" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.503" = type { %"class.std::__1::__hash_table.504" }
%"class.std::__1::__hash_table.504" = type <{ %"class.std::__1::unique_ptr.505", %"class.std::__1::__compressed_pair.515", %"class.std::__1::__compressed_pair.520", %"class.std::__1::__compressed_pair.523", [4 x i8] }>
%"class.std::__1::unique_ptr.505" = type { %"class.std::__1::__compressed_pair.506" }
%"class.std::__1::__compressed_pair.506" = type { %"struct.std::__1::__compressed_pair_elem.507", %"struct.std::__1::__compressed_pair_elem.509" }
%"struct.std::__1::__compressed_pair_elem.507" = type { %"struct.std::__1::__hash_node_base.508"** }
%"struct.std::__1::__hash_node_base.508" = type { %"struct.std::__1::__hash_node_base.508"* }
%"struct.std::__1::__compressed_pair_elem.509" = type { %"class.std::__1::__bucket_list_deallocator.510" }
%"class.std::__1::__bucket_list_deallocator.510" = type { %"class.std::__1::__compressed_pair.511" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.515" = type { %"struct.std::__1::__compressed_pair_elem.516" }
%"struct.std::__1::__compressed_pair_elem.516" = type { %"struct.std::__1::__hash_node_base.508" }
%"class.std::__1::__compressed_pair.520" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unique_ptr.529" = type { %"class.std::__1::__compressed_pair.530" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.535" = type { %"class.std::__1::__compressed_pair.536" }
%"class.std::__1::__compressed_pair.536" = type { %"struct.std::__1::__compressed_pair_elem.537" }
%"struct.std::__1::__compressed_pair_elem.537" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.541", %"class.std::__1::vector.541" }
%"class.std::__1::unique_ptr.548" = type { %"class.std::__1::__compressed_pair.549" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.550" }
%"struct.std::__1::__compressed_pair_elem.550" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.std::__1::unordered_set.330" = type { %"class.std::__1::__hash_table.331" }
%"class.std::__1::__hash_table.331" = type <{ %"class.std::__1::unique_ptr.332", %"class.std::__1::__compressed_pair.342", %"class.std::__1::__compressed_pair.347", %"class.std::__1::__compressed_pair.351", [4 x i8] }>
%"class.std::__1::unique_ptr.332" = type { %"class.std::__1::__compressed_pair.333" }
%"class.std::__1::__compressed_pair.333" = type { %"struct.std::__1::__compressed_pair_elem.334", %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.334" = type { %"struct.std::__1::__hash_node_base.335"** }
%"struct.std::__1::__hash_node_base.335" = type { %"struct.std::__1::__hash_node_base.335"* }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"class.std::__1::__bucket_list_deallocator.337" }
%"class.std::__1::__bucket_list_deallocator.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.342" = type { %"struct.std::__1::__compressed_pair_elem.343" }
%"struct.std::__1::__compressed_pair_elem.343" = type { %"struct.std::__1::__hash_node_base.335" }
%"class.std::__1::__compressed_pair.347" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.351" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.580" = type { %"class.std::__1::__hash_table.581" }
%"class.std::__1::__hash_table.581" = type <{ %"class.std::__1::unique_ptr.582", %"class.std::__1::__compressed_pair.592", %"class.std::__1::__compressed_pair.597", %"class.std::__1::__compressed_pair.600", [4 x i8] }>
%"class.std::__1::unique_ptr.582" = type { %"class.std::__1::__compressed_pair.583" }
%"class.std::__1::__compressed_pair.583" = type { %"struct.std::__1::__compressed_pair_elem.584", %"struct.std::__1::__compressed_pair_elem.586" }
%"struct.std::__1::__compressed_pair_elem.584" = type { %"struct.std::__1::__hash_node_base.585"** }
%"struct.std::__1::__hash_node_base.585" = type { %"struct.std::__1::__hash_node_base.585"* }
%"struct.std::__1::__compressed_pair_elem.586" = type { %"class.std::__1::__bucket_list_deallocator.587" }
%"class.std::__1::__bucket_list_deallocator.587" = type { %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.592" = type { %"struct.std::__1::__compressed_pair_elem.593" }
%"struct.std::__1::__compressed_pair_elem.593" = type { %"struct.std::__1::__hash_node_base.585" }
%"class.std::__1::__compressed_pair.597" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.600" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.554" = type { %"class.std::__1::__hash_table.555" }
%"class.std::__1::__hash_table.555" = type <{ %"class.std::__1::unique_ptr.556", %"class.std::__1::__compressed_pair.566", %"class.std::__1::__compressed_pair.571", %"class.std::__1::__compressed_pair.574", [4 x i8] }>
%"class.std::__1::unique_ptr.556" = type { %"class.std::__1::__compressed_pair.557" }
%"class.std::__1::__compressed_pair.557" = type { %"struct.std::__1::__compressed_pair_elem.558", %"struct.std::__1::__compressed_pair_elem.560" }
%"struct.std::__1::__compressed_pair_elem.558" = type { %"struct.std::__1::__hash_node_base.559"** }
%"struct.std::__1::__hash_node_base.559" = type { %"struct.std::__1::__hash_node_base.559"* }
%"struct.std::__1::__compressed_pair_elem.560" = type { %"class.std::__1::__bucket_list_deallocator.561" }
%"class.std::__1::__bucket_list_deallocator.561" = type { %"class.std::__1::__compressed_pair.562" }
%"class.std::__1::__compressed_pair.562" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.566" = type { %"struct.std::__1::__compressed_pair_elem.567" }
%"struct.std::__1::__compressed_pair_elem.567" = type { %"struct.std::__1::__hash_node_base.559" }
%"class.std::__1::__compressed_pair.571" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.574" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::unordered_map.604" = type { %"class.std::__1::__hash_table.605" }
%"class.std::__1::__hash_table.605" = type <{ %"class.std::__1::unique_ptr.606", %"class.std::__1::__compressed_pair.616", %"class.std::__1::__compressed_pair.621", %"class.std::__1::__compressed_pair.626", [4 x i8] }>
%"class.std::__1::unique_ptr.606" = type { %"class.std::__1::__compressed_pair.607" }
%"class.std::__1::__compressed_pair.607" = type { %"struct.std::__1::__compressed_pair_elem.608", %"struct.std::__1::__compressed_pair_elem.610" }
%"struct.std::__1::__compressed_pair_elem.608" = type { %"struct.std::__1::__hash_node_base.609"** }
%"struct.std::__1::__hash_node_base.609" = type { %"struct.std::__1::__hash_node_base.609"* }
%"struct.std::__1::__compressed_pair_elem.610" = type { %"class.std::__1::__bucket_list_deallocator.611" }
%"class.std::__1::__bucket_list_deallocator.611" = type { %"class.std::__1::__compressed_pair.612" }
%"class.std::__1::__compressed_pair.612" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.616" = type { %"struct.std::__1::__compressed_pair_elem.617" }
%"struct.std::__1::__compressed_pair_elem.617" = type { %"struct.std::__1::__hash_node_base.609" }
%"class.std::__1::__compressed_pair.621" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.std::__1::vector.632" = type { %"class.std::__1::__vector_base.633" }
%"class.std::__1::__vector_base.633" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.634" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.634" = type { %"struct.std::__1::__compressed_pair_elem.635" }
%"struct.std::__1::__compressed_pair_elem.635" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.639" = type { %"class.std::__1::__compressed_pair.640" }
%"class.std::__1::__compressed_pair.640" = type { %"struct.std::__1::__compressed_pair_elem.641" }
%"struct.std::__1::__compressed_pair_elem.641" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.541" }
%"class.std::__1::shared_ptr.645" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.139", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.646", %"class.std::__1::unique_ptr.660" }
%"class.std::__1::unique_ptr.646" = type { %"class.std::__1::__compressed_pair.647" }
%"class.std::__1::__compressed_pair.647" = type { %"struct.std::__1::__compressed_pair_elem.648" }
%"struct.std::__1::__compressed_pair_elem.648" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.649" }
%"class.std::__1::vector.649" = type { %"class.std::__1::__vector_base.650" }
%"class.std::__1::__vector_base.650" = type { %"class.std::__1::unique_ptr.651"*, %"class.std::__1::unique_ptr.651"*, %"class.std::__1::__compressed_pair.652" }
%"class.std::__1::unique_ptr.651" = type { %"class.std::__1::__compressed_pair.1144" }
%"class.std::__1::__compressed_pair.1144" = type { %"struct.std::__1::__compressed_pair_elem.1145" }
%"struct.std::__1::__compressed_pair_elem.1145" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.652" = type { %"struct.std::__1::__compressed_pair_elem.653" }
%"struct.std::__1::__compressed_pair_elem.653" = type { %"class.std::__1::unique_ptr.651"* }
%"class.std::__1::unique_ptr.660" = type { %"class.std::__1::__compressed_pair.661" }
%"class.std::__1::__compressed_pair.661" = type { %"struct.std::__1::__compressed_pair_elem.662" }
%"struct.std::__1::__compressed_pair_elem.662" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::unique_ptr.666" = type { %"class.std::__1::__compressed_pair.667" }
%"class.std::__1::__compressed_pair.667" = type { %"struct.std::__1::__compressed_pair_elem.668" }
%"struct.std::__1::__compressed_pair_elem.668" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.669", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.669" = type { %"struct.std::__1::__atomic_base.670" }
%"struct.std::__1::__atomic_base.670" = type { %"struct.std::__1::__cxx_atomic_impl.671" }
%"struct.std::__1::__cxx_atomic_impl.671" = type { %"struct.std::__1::__cxx_atomic_base_impl.672" }
%"struct.std::__1::__cxx_atomic_base_impl.672" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.676" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.677", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.677" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.678", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.678" = type { %"class.std::__1::__vector_base.679" }
%"class.std::__1::__vector_base.679" = type { %"class.std::__1::unique_ptr.680"*, %"class.std::__1::unique_ptr.680"*, %"class.std::__1::__compressed_pair.681" }
%"class.std::__1::unique_ptr.680" = type opaque
%"class.std::__1::__compressed_pair.681" = type { %"struct.std::__1::__compressed_pair_elem.682" }
%"struct.std::__1::__compressed_pair_elem.682" = type { %"class.std::__1::unique_ptr.680"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.686", %"class.std::__1::unique_ptr.692", %"struct.std::__1::atomic.152", %"class.std::__1::unique_ptr.698", %"class.std::__1::unique_ptr.704", %"class.std::__1::unique_ptr.710", %"class.std::__1::unique_ptr.716", %"class.std::__1::unique_ptr.722", %"class.std::__1::set.728", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.686" = type { %"class.std::__1::__compressed_pair.687" }
%"class.std::__1::__compressed_pair.687" = type { %"struct.std::__1::__compressed_pair_elem.688" }
%"struct.std::__1::__compressed_pair_elem.688" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.692" = type { %"class.std::__1::__compressed_pair.693" }
%"class.std::__1::__compressed_pair.693" = type { %"struct.std::__1::__compressed_pair_elem.694" }
%"struct.std::__1::__compressed_pair_elem.694" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.698" = type { %"class.std::__1::__compressed_pair.699" }
%"class.std::__1::__compressed_pair.699" = type { %"struct.std::__1::__compressed_pair_elem.700" }
%"struct.std::__1::__compressed_pair_elem.700" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.704" = type { %"class.std::__1::__compressed_pair.705" }
%"class.std::__1::__compressed_pair.705" = type { %"struct.std::__1::__compressed_pair_elem.706" }
%"struct.std::__1::__compressed_pair_elem.706" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.710" = type { %"class.std::__1::__compressed_pair.711" }
%"class.std::__1::__compressed_pair.711" = type { %"struct.std::__1::__compressed_pair_elem.712" }
%"struct.std::__1::__compressed_pair_elem.712" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.716" = type { %"class.std::__1::__compressed_pair.717" }
%"class.std::__1::__compressed_pair.717" = type { %"struct.std::__1::__compressed_pair_elem.718" }
%"struct.std::__1::__compressed_pair_elem.718" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.722" = type { %"class.std::__1::__compressed_pair.723" }
%"class.std::__1::__compressed_pair.723" = type { %"struct.std::__1::__compressed_pair_elem.724" }
%"struct.std::__1::__compressed_pair_elem.724" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.728" = type { %"class.std::__1::__tree.729" }
%"class.std::__1::__tree.729" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.730", %"class.std::__1::__compressed_pair.734" }
%"class.std::__1::__compressed_pair.730" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"class.std::__1::__compressed_pair.734" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.737" }
%"class.v8::internal::TaggedImpl.737" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.736" }
%"class.v8::internal::TaggedImpl.736" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.744", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.744" = type { %"class.std::__1::__compressed_pair.745" }
%"class.std::__1::__compressed_pair.745" = type { %"struct.std::__1::__compressed_pair_elem.746" }
%"struct.std::__1::__compressed_pair_elem.746" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.750", %"class.v8::internal::DetachableVector.751", %"class.v8::internal::DetachableVector.750", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.751" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.750" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.19", %"struct.std::__1::atomic.19", %"class.std::__1::unique_ptr.738", %"class.std::__1::unique_ptr.481" }
%"class.std::__1::unique_ptr.738" = type { %"class.std::__1::__compressed_pair.739" }
%"class.std::__1::__compressed_pair.739" = type { %"struct.std::__1::__compressed_pair_elem.740" }
%"struct.std::__1::__compressed_pair_elem.740" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.752", %"class.std::__1::vector.758", %"class.std::__1::unique_ptr.765", %"class.std::__1::vector.772", %"class.std::__1::unique_ptr.779", i64, %"class.std::__1::vector.785", %"class.std::__1::vector.793", %"class.std::__1::vector.801", i8, i8, i32 }
%"class.std::__1::unique_ptr.752" = type { %"class.std::__1::__compressed_pair.753" }
%"class.std::__1::__compressed_pair.753" = type { %"struct.std::__1::__compressed_pair_elem.754" }
%"struct.std::__1::__compressed_pair_elem.754" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.758" = type { %"class.std::__1::__vector_base.759" }
%"class.std::__1::__vector_base.759" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.760" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.760" = type { %"struct.std::__1::__compressed_pair_elem.761" }
%"struct.std::__1::__compressed_pair_elem.761" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.765" = type { %"class.std::__1::__compressed_pair.766" }
%"class.std::__1::__compressed_pair.766" = type { %"struct.std::__1::__compressed_pair_elem.767" }
%"struct.std::__1::__compressed_pair_elem.767" = type { %"class.v8::internal::GlobalHandles::NodeSpace.768"* }
%"class.v8::internal::GlobalHandles::NodeSpace.768" = type opaque
%"class.std::__1::vector.772" = type { %"class.std::__1::__vector_base.773" }
%"class.std::__1::__vector_base.773" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.774" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.774" = type { %"struct.std::__1::__compressed_pair_elem.775" }
%"struct.std::__1::__compressed_pair_elem.775" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.779" = type { %"class.std::__1::__compressed_pair.780" }
%"class.std::__1::__compressed_pair.780" = type { %"struct.std::__1::__compressed_pair_elem.781" }
%"struct.std::__1::__compressed_pair_elem.781" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.785" = type { %"class.std::__1::__vector_base.786" }
%"class.std::__1::__vector_base.786" = type { %"struct.std::__1::pair.787"*, %"struct.std::__1::pair.787"*, %"class.std::__1::__compressed_pair.788" }
%"struct.std::__1::pair.787" = type opaque
%"class.std::__1::__compressed_pair.788" = type { %"struct.std::__1::__compressed_pair_elem.789" }
%"struct.std::__1::__compressed_pair_elem.789" = type { %"struct.std::__1::pair.787"* }
%"class.std::__1::vector.793" = type { %"class.std::__1::__vector_base.794" }
%"class.std::__1::__vector_base.794" = type { %"struct.std::__1::pair.795"*, %"struct.std::__1::pair.795"*, %"class.std::__1::__compressed_pair.796" }
%"struct.std::__1::pair.795" = type opaque
%"class.std::__1::__compressed_pair.796" = type { %"struct.std::__1::__compressed_pair_elem.797" }
%"struct.std::__1::__compressed_pair_elem.797" = type { %"struct.std::__1::pair.795"* }
%"class.std::__1::vector.801" = type { %"class.std::__1::__vector_base.802" }
%"class.std::__1::__vector_base.802" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.803" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.std::__1::__compressed_pair.803" = type { %"struct.std::__1::__compressed_pair_elem.804" }
%"struct.std::__1::__compressed_pair_elem.804" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.808", %"class.std::__1::vector.815" }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.822" }
%"class.std::__1::unique_ptr.822" = type { %"class.std::__1::__compressed_pair.823" }
%"class.std::__1::__compressed_pair.823" = type { %"struct.std::__1::__compressed_pair_elem.824" }
%"struct.std::__1::__compressed_pair_elem.824" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.815" = type { %"class.std::__1::__vector_base.816" }
%"class.std::__1::__vector_base.816" = type { i32*, i32*, %"class.std::__1::__compressed_pair.817" }
%"class.std::__1::__compressed_pair.817" = type { %"struct.std::__1::__compressed_pair_elem.818" }
%"struct.std::__1::__compressed_pair_elem.818" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"struct.std::__1::atomic.828" = type { %"struct.std::__1::__atomic_base.829" }
%"struct.std::__1::__atomic_base.829" = type { %"struct.std::__1::__cxx_atomic_impl.830" }
%"struct.std::__1::__cxx_atomic_impl.830" = type { %"struct.std::__1::__cxx_atomic_base_impl.831" }
%"struct.std::__1::__cxx_atomic_base_impl.831" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.838" = type { %"struct.std::__1::__atomic_base.839" }
%"struct.std::__1::__atomic_base.839" = type { %"struct.std::__1::__cxx_atomic_impl.840" }
%"struct.std::__1::__cxx_atomic_impl.840" = type { %"struct.std::__1::__cxx_atomic_base_impl.841" }
%"struct.std::__1::__cxx_atomic_base_impl.841" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.843" }
%"class.std::__1::__compressed_pair.843" = type { %"struct.std::__1::__compressed_pair_elem.844" }
%"struct.std::__1::__compressed_pair_elem.844" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.845 }
%union.anon.845 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.849" = type { %"class.std::__1::__hash_table.850" }
%"class.std::__1::__hash_table.850" = type <{ %"class.std::__1::unique_ptr.851", %"class.std::__1::__compressed_pair.861", %"class.std::__1::__compressed_pair.866", %"class.std::__1::__compressed_pair.869", [4 x i8] }>
%"class.std::__1::unique_ptr.851" = type { %"class.std::__1::__compressed_pair.852" }
%"class.std::__1::__compressed_pair.852" = type { %"struct.std::__1::__compressed_pair_elem.853", %"struct.std::__1::__compressed_pair_elem.855" }
%"struct.std::__1::__compressed_pair_elem.853" = type { %"struct.std::__1::__hash_node_base.854"** }
%"struct.std::__1::__hash_node_base.854" = type { %"struct.std::__1::__hash_node_base.854"* }
%"struct.std::__1::__compressed_pair_elem.855" = type { %"class.std::__1::__bucket_list_deallocator.856" }
%"class.std::__1::__bucket_list_deallocator.856" = type { %"class.std::__1::__compressed_pair.857" }
%"class.std::__1::__compressed_pair.857" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.861" = type { %"struct.std::__1::__compressed_pair_elem.862" }
%"struct.std::__1::__compressed_pair_elem.862" = type { %"struct.std::__1::__hash_node_base.854" }
%"class.std::__1::__compressed_pair.866" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.869" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::atomic.152" = type { %"struct.std::__1::__atomic_base.153" }
%"struct.std::__1::__atomic_base.153" = type { %"struct.std::__1::__cxx_atomic_impl.154" }
%"struct.std::__1::__cxx_atomic_impl.154" = type { %"struct.std::__1::__cxx_atomic_base_impl.155" }
%"struct.std::__1::__cxx_atomic_base_impl.155" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.875", %"class.v8::internal::Handle.881", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.882", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.875" = type { %"class.std::__1::__compressed_pair.876" }
%"class.std::__1::__compressed_pair.876" = type { %"struct.std::__1::__compressed_pair_elem.877" }
%"struct.std::__1::__compressed_pair_elem.877" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.881" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.882" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.883", %"class.std::__1::vector.889", %"class.std::__1::unique_ptr.897", %"class.std::__1::unique_ptr.903", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.909", %"class.std::__1::vector.915", %"struct.std::__1::pair.923" }
%"class.std::__1::unique_ptr.883" = type { %"class.std::__1::__compressed_pair.884" }
%"class.std::__1::__compressed_pair.884" = type { %"struct.std::__1::__compressed_pair_elem.885" }
%"struct.std::__1::__compressed_pair_elem.885" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.889" = type { %"class.std::__1::__vector_base.890" }
%"class.std::__1::__vector_base.890" = type { %"class.std::__1::unique_ptr.891"*, %"class.std::__1::unique_ptr.891"*, %"class.std::__1::__compressed_pair.892" }
%"class.std::__1::unique_ptr.891" = type opaque
%"class.std::__1::__compressed_pair.892" = type { %"struct.std::__1::__compressed_pair_elem.893" }
%"struct.std::__1::__compressed_pair_elem.893" = type { %"class.std::__1::unique_ptr.891"* }
%"class.std::__1::unique_ptr.897" = type { %"class.std::__1::__compressed_pair.898" }
%"class.std::__1::__compressed_pair.898" = type { %"struct.std::__1::__compressed_pair_elem.899" }
%"struct.std::__1::__compressed_pair_elem.899" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.903" = type { %"class.std::__1::__compressed_pair.904" }
%"class.std::__1::__compressed_pair.904" = type { %"struct.std::__1::__compressed_pair_elem.905" }
%"struct.std::__1::__compressed_pair_elem.905" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.909" = type { %"class.std::__1::__compressed_pair.910" }
%"class.std::__1::__compressed_pair.910" = type { %"struct.std::__1::__compressed_pair_elem.911" }
%"struct.std::__1::__compressed_pair_elem.911" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.915" = type { %"class.std::__1::__vector_base.916" }
%"class.std::__1::__vector_base.916" = type { %"struct.std::__1::pair.917"*, %"struct.std::__1::pair.917"*, %"class.std::__1::__compressed_pair.918" }
%"struct.std::__1::pair.917" = type opaque
%"class.std::__1::__compressed_pair.918" = type { %"struct.std::__1::__compressed_pair_elem.919" }
%"struct.std::__1::__compressed_pair_elem.919" = type { %"struct.std::__1::pair.917"* }
%"struct.std::__1::pair.923" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.0"*, i16, i8*)*, i8* }
%"class.v8::Local.0" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.924" = type { %"class.std::__1::__compressed_pair.925" }
%"class.std::__1::__compressed_pair.925" = type { %"struct.std::__1::__compressed_pair_elem.926" }
%"struct.std::__1::__compressed_pair_elem.926" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.927", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.927" = type { %"class.std::__1::__hash_table.928" }
%"class.std::__1::__hash_table.928" = type <{ %"class.std::__1::unique_ptr.929", %"class.std::__1::__compressed_pair.939", %"class.std::__1::__compressed_pair.944", %"class.std::__1::__compressed_pair.948", [4 x i8] }>
%"class.std::__1::unique_ptr.929" = type { %"class.std::__1::__compressed_pair.930" }
%"class.std::__1::__compressed_pair.930" = type { %"struct.std::__1::__compressed_pair_elem.931", %"struct.std::__1::__compressed_pair_elem.933" }
%"struct.std::__1::__compressed_pair_elem.931" = type { %"struct.std::__1::__hash_node_base.932"** }
%"struct.std::__1::__hash_node_base.932" = type { %"struct.std::__1::__hash_node_base.932"* }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"class.std::__1::__bucket_list_deallocator.934" }
%"class.std::__1::__bucket_list_deallocator.934" = type { %"class.std::__1::__compressed_pair.935" }
%"class.std::__1::__compressed_pair.935" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.939" = type { %"struct.std::__1::__compressed_pair_elem.940" }
%"struct.std::__1::__compressed_pair_elem.940" = type { %"struct.std::__1::__hash_node_base.932" }
%"class.std::__1::__compressed_pair.944" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.948" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.962" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"struct.std::__1::pair.956"**, %"class.std::__1::__compressed_pair.957" }
%"struct.std::__1::pair.956" = type opaque
%"class.std::__1::__compressed_pair.957" = type { %"struct.std::__1::__compressed_pair_elem.958" }
%"struct.std::__1::__compressed_pair_elem.958" = type { %"struct.std::__1::pair.956"** }
%"class.std::__1::__compressed_pair.962" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.967" = type { %"class.std::__1::__vector_base.968" }
%"class.std::__1::__vector_base.968" = type { %"class.v8::internal::Handle.969"*, %"class.v8::internal::Handle.969"*, %"class.std::__1::__compressed_pair.970" }
%"class.v8::internal::Handle.969" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.970" = type { %"struct.std::__1::__compressed_pair_elem.971" }
%"struct.std::__1::__compressed_pair_elem.971" = type { %"class.v8::internal::Handle.969"* }
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.833", i32, %"class.v8::Local.0" }
%"class.v8::Local.833" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.975" = type { %"class.std::__1::__compressed_pair.976" }
%"class.std::__1::__compressed_pair.976" = type { %"struct.std::__1::__compressed_pair_elem.977" }
%"struct.std::__1::__compressed_pair_elem.977" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.981" = type { %"class.std::__1::__vector_base.982" }
%"class.std::__1::__vector_base.982" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.983" }
%"class.std::__1::__compressed_pair.983" = type { %"struct.std::__1::__compressed_pair_elem.984" }
%"struct.std::__1::__compressed_pair_elem.984" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.988" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.989" = type { %"class.std::__1::__hash_table.990" }
%"class.std::__1::__hash_table.990" = type <{ %"class.std::__1::unique_ptr.991", %"class.std::__1::__compressed_pair.1001", %"class.std::__1::__compressed_pair.1006", %"class.std::__1::__compressed_pair.1009", [4 x i8] }>
%"class.std::__1::unique_ptr.991" = type { %"class.std::__1::__compressed_pair.992" }
%"class.std::__1::__compressed_pair.992" = type { %"struct.std::__1::__compressed_pair_elem.993", %"struct.std::__1::__compressed_pair_elem.995" }
%"struct.std::__1::__compressed_pair_elem.993" = type { %"struct.std::__1::__hash_node_base.994"** }
%"struct.std::__1::__hash_node_base.994" = type { %"struct.std::__1::__hash_node_base.994"* }
%"struct.std::__1::__compressed_pair_elem.995" = type { %"class.std::__1::__bucket_list_deallocator.996" }
%"class.std::__1::__bucket_list_deallocator.996" = type { %"class.std::__1::__compressed_pair.997" }
%"class.std::__1::__compressed_pair.997" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1001" = type { %"struct.std::__1::__compressed_pair_elem.1002" }
%"struct.std::__1::__compressed_pair_elem.1002" = type { %"struct.std::__1::__hash_node_base.994" }
%"class.std::__1::__compressed_pair.1006" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1009" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.std::__1::vector.541" = type { %"class.std::__1::__vector_base.542" }
%"class.std::__1::__vector_base.542" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.543" }
%"class.std::__1::__compressed_pair.543" = type { %"struct.std::__1::__compressed_pair_elem.544" }
%"struct.std::__1::__compressed_pair_elem.544" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.160" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1013", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1042", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1043", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1013" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1038, %union.anon.1040, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1038 = type { i64 }
%union.anon.1040 = type { i64 }
%"class.std::__1::weak_ptr.1042" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1043" = type { %"class.v8::PersistentBase.1044" }
%"class.v8::PersistentBase.1044" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1014", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1014" = type { %"class.std::__1::__hash_table.1015" }
%"class.std::__1::__hash_table.1015" = type <{ %"class.std::__1::unique_ptr.1016", %"class.std::__1::__compressed_pair.1026", %"class.std::__1::__compressed_pair.1031", %"class.std::__1::__compressed_pair.1034", [4 x i8] }>
%"class.std::__1::unique_ptr.1016" = type { %"class.std::__1::__compressed_pair.1017" }
%"class.std::__1::__compressed_pair.1017" = type { %"struct.std::__1::__compressed_pair_elem.1018", %"struct.std::__1::__compressed_pair_elem.1020" }
%"struct.std::__1::__compressed_pair_elem.1018" = type { %"struct.std::__1::__hash_node_base.1019"** }
%"struct.std::__1::__hash_node_base.1019" = type { %"struct.std::__1::__hash_node_base.1019"* }
%"struct.std::__1::__compressed_pair_elem.1020" = type { %"class.std::__1::__bucket_list_deallocator.1021" }
%"class.std::__1::__bucket_list_deallocator.1021" = type { %"class.std::__1::__compressed_pair.1022" }
%"class.std::__1::__compressed_pair.1022" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1026" = type { %"struct.std::__1::__compressed_pair_elem.1027" }
%"struct.std::__1::__compressed_pair_elem.1027" = type { %"struct.std::__1::__hash_node_base.1019" }
%"class.std::__1::__compressed_pair.1031" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1034" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1045" = type { %"class.std::__1::__compressed_pair.1046" }
%"class.std::__1::__compressed_pair.1046" = type { %"struct.std::__1::__compressed_pair_elem.1047" }
%"struct.std::__1::__compressed_pair_elem.1047" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1074", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.std::__1::unique_ptr.1074" = type { %"class.std::__1::__compressed_pair.1075" }
%"class.std::__1::__compressed_pair.1075" = type { %"struct.std::__1::__compressed_pair_elem.1076" }
%"struct.std::__1::__compressed_pair_elem.1076" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1083" = type { %"class.std::__1::__compressed_pair.1084" }
%"class.std::__1::__compressed_pair.1084" = type { %"struct.std::__1::__compressed_pair_elem.1085" }
%"struct.std::__1::__compressed_pair_elem.1085" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.834", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.834" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1091" }
%"class.std::__1::unordered_map.1091" = type { %"class.std::__1::__hash_table.1092" }
%"class.std::__1::__hash_table.1092" = type <{ %"class.std::__1::unique_ptr.1093", %"class.std::__1::__compressed_pair.1103", %"class.std::__1::__compressed_pair.1108", %"class.std::__1::__compressed_pair.1111", [4 x i8] }>
%"class.std::__1::unique_ptr.1093" = type { %"class.std::__1::__compressed_pair.1094" }
%"class.std::__1::__compressed_pair.1094" = type { %"struct.std::__1::__compressed_pair_elem.1095", %"struct.std::__1::__compressed_pair_elem.1097" }
%"struct.std::__1::__compressed_pair_elem.1095" = type { %"struct.std::__1::__hash_node_base.1096"** }
%"struct.std::__1::__hash_node_base.1096" = type { %"struct.std::__1::__hash_node_base.1096"* }
%"struct.std::__1::__compressed_pair_elem.1097" = type { %"class.std::__1::__bucket_list_deallocator.1098" }
%"class.std::__1::__bucket_list_deallocator.1098" = type { %"class.std::__1::__compressed_pair.1099" }
%"class.std::__1::__compressed_pair.1099" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1103" = type { %"struct.std::__1::__compressed_pair_elem.1104" }
%"struct.std::__1::__compressed_pair_elem.1104" = type { %"struct.std::__1::__hash_node_base.1096" }
%"class.std::__1::__compressed_pair.1108" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"class.std::__1::__compressed_pair.1111" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"struct.std::__1::atomic.1117" = type { %"struct.std::__1::__atomic_base.1118" }
%"struct.std::__1::__atomic_base.1118" = type { %"struct.std::__1::__cxx_atomic_impl.1119" }
%"struct.std::__1::__cxx_atomic_impl.1119" = type { %"struct.std::__1::__cxx_atomic_base_impl.1120" }
%"struct.std::__1::__cxx_atomic_base_impl.1120" = type { %"class.std::__1::vector.1121"* }
%"class.std::__1::vector.1121" = type { %"class.std::__1::__vector_base.1122" }
%"class.std::__1::__vector_base.1122" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1123" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1123" = type { %"struct.std::__1::__compressed_pair_elem.1124" }
%"struct.std::__1::__compressed_pair_elem.1124" = type { %"struct.v8::MemoryRange"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::String" = type { %"class.v8::internal::TorqueGeneratedString" }
%"class.v8::internal::TorqueGeneratedString" = type { %"class.v8::internal::Name" }
%"class.v8::internal::String::FlatContent" = type { %union.anon.1131, i32, i32, %"class.v8::internal::CombinationAssertScope"* }
%union.anon.1131 = type { i8* }
%"class.v8::internal::CombinationAssertScope" = type { i8 }
%"class.v8::internal::StackLimitCheck" = type { %"class.v8::internal::Isolate"* }
%"class.v8::internal::(anonymous namespace)::NfaInterpreter" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::ByteArray", %"class.v8::internal::Vector.1132", i32, %"class.v8::internal::String", %"class.v8::internal::Vector.1134", i32, %"class.v8::internal::Vector.1135", %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList", %"class.v8::internal::RecyclingZoneAllocator", %"class.v8::base::Optional.1136", %"class.v8::internal::Zone"* }
%"class.v8::internal::ByteArray" = type { %"class.v8::internal::TorqueGeneratedByteArray" }
%"class.v8::internal::TorqueGeneratedByteArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::Vector.1132" = type { %"struct.v8::internal::RegExpInstruction"*, i64 }
%"struct.v8::internal::RegExpInstruction" = type { i32, %union.anon.1133 }
%union.anon.1133 = type { i32 }
%"class.v8::internal::Vector.1134" = type { i8*, i64 }
%"class.v8::internal::Vector.1135" = type { i32*, i64 }
%"class.v8::internal::ZoneList" = type { %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"*, i32, i32 }
%"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread" = type { i32, i32* }
%"class.v8::internal::RecyclingZoneAllocator" = type { %"class.v8::internal::ZoneAllocator", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock" = type { %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, i64 }
%"class.v8::base::Optional.1136" = type { %"class.v8::base::internal::OptionalBase.1137" }
%"class.v8::base::internal::OptionalBase.1137" = type { %"struct.v8::base::internal::OptionalStorage.1138" }
%"struct.v8::base::internal::OptionalStorage.1138" = type { %"struct.v8::base::internal::OptionalStorageBase.1139" }
%"struct.v8::base::internal::OptionalStorageBase.1139" = type { i8, %union.anon.1140 }
%union.anon.1140 = type { %"class.v8::internal::Vector.1135" }
%"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::ByteArray", %"class.v8::internal::Vector.1132", i32, %"class.v8::internal::String", %"class.v8::internal::Vector.1142", i32, %"class.v8::internal::Vector.1135", %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143", %"class.v8::internal::RecyclingZoneAllocator", %"class.v8::base::Optional.1136", %"class.v8::internal::Zone"* }
%"class.v8::internal::Vector.1142" = type { i16*, i64 }
%"class.v8::internal::ZoneList.1143" = type { %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"*, i32, i32 }
%"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread" = type { i32, i32* }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN2v88internal29ExperimentalRegExpInterpreter11FindMatchesEPNS0_7IsolateENS0_6RegExp10CallOriginENS0_9ByteArrayEiNS0_6StringEiPiiPNS0_4ZoneE(%"class.v8::internal::Isolate"*, i32, i64, i32, i64, i32, i32* nocapture, i32, %"class.v8::internal::Zone"*) local_unnamed_addr #0 align 2 {
  %10 = alloca %"class.v8::internal::String", align 8
  %11 = alloca %"class.v8::internal::String::FlatContent", align 8
  %12 = alloca %"class.v8::internal::String", align 8
  %13 = alloca %"class.v8::internal::String::FlatContent", align 8
  %14 = alloca %"class.v8::internal::StackLimitCheck", align 8
  %15 = alloca %"class.v8::internal::String", align 8
  %16 = alloca %"class.v8::internal::String::FlatContent", align 8
  %17 = alloca %"class.v8::internal::String", align 8
  %18 = alloca %"class.v8::internal::String::FlatContent", align 8
  %19 = alloca %"class.v8::internal::StackLimitCheck", align 8
  %20 = alloca %"class.v8::internal::String", align 8
  %21 = alloca %"class.v8::internal::CombinationAssertScope", align 1
  %22 = alloca %"class.v8::internal::String::FlatContent", align 8
  %23 = alloca %"class.v8::internal::(anonymous namespace)::NfaInterpreter", align 8
  %24 = alloca %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", align 8
  %25 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %20, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %4, i64* %25, align 8
  %26 = getelementptr inbounds %"class.v8::internal::CombinationAssertScope", %"class.v8::internal::CombinationAssertScope"* %21, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %26) #3
  %27 = bitcast %"class.v8::internal::String::FlatContent"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #3
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %22, %"class.v8::internal::String"* nonnull %20, %"class.v8::internal::CombinationAssertScope"* nonnull dereferenceable(1) %21) #3
  %28 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %22, i64 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 1
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #3
  br i1 %30, label %31, label %634

31:                                               ; preds = %9
  %32 = bitcast %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 176, i8* nonnull %32) #3
  %33 = load i64, i64* %25, align 8
  %34 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %34, align 8
  %35 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 1
  store i32 %1, i32* %35, align 8
  %36 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 2
  %37 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %2, i64* %37, align 8
  %38 = add i64 %2, 7
  %39 = inttoptr i64 %38 to %"struct.v8::internal::RegExpInstruction"*
  %40 = add i64 %2, 3
  %41 = inttoptr i64 %40 to i32*
  %42 = load i32, i32* %41, align 4
  %43 = ashr i32 %42, 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 4, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %39, %"struct.v8::internal::RegExpInstruction"** %45, align 8
  %46 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 4, i32 1
  store i64 %44, i64* %46, align 8
  %47 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 5
  store i32 %3, i32* %47, align 8
  %48 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %33, i64* %48, align 8
  %49 = bitcast %"class.v8::internal::String"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #3
  %50 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %33, i64* %50, align 8
  %51 = bitcast %"class.v8::internal::String::FlatContent"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51) #3
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %16, %"class.v8::internal::String"* nonnull %15, %"class.v8::internal::CombinationAssertScope"* dereferenceable(1) %36) #3
  %52 = bitcast %"class.v8::internal::String::FlatContent"* %16 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %16, i64 0, i32 1
  %55 = load i32, i32* %54, align 8
  %56 = sext i32 %55 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #3
  %57 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 7, i32 0
  %58 = bitcast i8** %57 to i64*
  store i64 %53, i64* %58, align 8
  %59 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 7, i32 1
  store i64 %56, i64* %59, align 8
  %60 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 8
  store i32 %5, i32* %60, align 8
  %61 = load i32, i32* %41, align 4
  %62 = ashr i32 %61, 1
  %63 = sext i32 %62 to i64
  %64 = shl nsw i64 %63, 2
  %65 = add nsw i64 %64, 7
  %66 = and i64 %65, -8
  %67 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %8, i64 0, i32 2
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %8, i64 0, i32 3
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 %70, %68
  %72 = icmp ugt i64 %66, %71
  br i1 %72, label %73, label %75, !prof !2

73:                                               ; preds = %31
  %74 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %8, i64 %66) #3
  br label %77

75:                                               ; preds = %31
  %76 = add i64 %66, %68
  store i64 %76, i64* %67, align 8
  br label %77

77:                                               ; preds = %75, %73
  %78 = phi i64 [ %74, %73 ], [ %68, %75 ]
  %79 = inttoptr i64 %78 to i32*
  %80 = load i32, i32* %41, align 4
  %81 = ashr i32 %80, 1
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 9, i32 0
  store i32* %79, i32** %83, align 8
  %84 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 9, i32 1
  store i64 %82, i64* %84, align 8
  %85 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 10
  %86 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 12, i32 0, i32 0
  %87 = bitcast %"class.v8::internal::ZoneList"* %85 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 32, i1 false) #3
  store %"class.v8::internal::Zone"* %8, %"class.v8::internal::Zone"** %86, align 8
  %88 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 12, i32 1
  store %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* null, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %88, align 8
  %89 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %89, align 8
  %90 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1
  %91 = bitcast %union.anon.1140* %90 to i8*
  store i8 0, i8* %91, align 8
  %92 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 14
  store %"class.v8::internal::Zone"* %8, %"class.v8::internal::Zone"** %92, align 8
  %93 = getelementptr inbounds i32, i32* %79, i64 %82
  %94 = ptrtoint i32* %93 to i64
  %95 = sub i64 %94, %78
  %96 = icmp sgt i64 %95, 0
  br i1 %96, label %97, label %104

97:                                               ; preds = %77
  %98 = inttoptr i64 %78 to i8*
  %99 = and i64 %95, -4
  %100 = icmp ult i64 %95, 4
  %101 = sext i1 %100 to i64
  %102 = shl nsw i64 %101, 2
  %103 = sub i64 %99, %102
  call void @llvm.memset.p0i8.i64(i8* align 4 %98, i8 -1, i64 %103, i1 false) #3
  br label %104

104:                                              ; preds = %77, %97
  %105 = load i32, i32* %47, align 8
  %106 = sdiv i32 %7, %105
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %1236, label %108

108:                                              ; preds = %104
  %109 = bitcast i32** %83 to i8**
  %110 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 11
  %111 = getelementptr %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %110, i64 0, i32 0
  %112 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 11, i32 2
  %113 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %88 to i64*
  %114 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %88 to i32**
  %115 = bitcast %"class.v8::internal::ZoneList"* %110 to i8*
  %116 = getelementptr %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %85, i64 0, i32 0
  %117 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 10, i32 2
  %118 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %119 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 10, i32 1
  %120 = bitcast %"class.v8::internal::ZoneList"* %85 to i8**
  %121 = bitcast %"class.v8::internal::StackLimitCheck"* %14 to i8*
  %122 = getelementptr inbounds %"class.v8::internal::StackLimitCheck", %"class.v8::internal::StackLimitCheck"* %14, i64 0, i32 0
  %123 = bitcast %"class.v8::internal::String"* %12 to i8*
  %124 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %125 = bitcast %"class.v8::internal::String::FlatContent"* %13 to i8*
  %126 = bitcast %"class.v8::internal::String::FlatContent"* %13 to i64*
  %127 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %13, i64 0, i32 1
  %128 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %23, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  br label %129

129:                                              ; preds = %631, %108
  %130 = phi i32* [ %6, %108 ], [ %618, %631 ]
  %131 = phi i32 [ 0, %108 ], [ %619, %631 ]
  %132 = load i64, i64* %84, align 8
  %133 = shl i64 %132, 2
  %134 = icmp sgt i64 %133, 0
  br i1 %134, label %135, label %142

135:                                              ; preds = %129
  %136 = load i8*, i8** %109, align 8
  %137 = icmp slt i64 %132, 1
  %138 = select i1 %137, i64 %132, i64 1
  %139 = mul i64 %138, -4
  %140 = add nuw i64 %133, 4
  %141 = add i64 %140, %139
  call void @llvm.memset.p0i8.i64(i8* align 4 %136, i8 -1, i64 %141, i1 false) #3
  br label %142

142:                                              ; preds = %135, %129
  %143 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"** %111, align 8
  %144 = load i32, i32* %112, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %143, i64 %145
  %147 = icmp eq i32 %144, 0
  br i1 %147, label %148, label %154

148:                                              ; preds = %174, %142
  call void @llvm.memset.p0i8.i64(i8* align 8 %115, i8 0, i64 16, i1 false) #3
  %149 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"** %116, align 8
  %150 = load i32, i32* %117, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %149, i64 %151
  %153 = icmp eq i32 %150, 0
  br i1 %153, label %177, label %180

154:                                              ; preds = %142, %174
  %155 = phi %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* [ %175, %174 ], [ %143, %142 ]
  %156 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %155, i64 0, i32 1
  %157 = load i32*, i32** %156, align 8
  %158 = load i32, i32* %47, align 8
  %159 = sext i32 %158 to i64
  %160 = and i64 %159, 4611686018427387900
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %174, label %162

162:                                              ; preds = %154
  %163 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %88, align 8
  %164 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %163, null
  br i1 %164, label %169, label %165

165:                                              ; preds = %162
  %166 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %163, i64 0, i32 1
  %167 = load i64, i64* %166, align 8
  %168 = icmp ugt i64 %167, %159
  br i1 %168, label %174, label %169

169:                                              ; preds = %165, %162
  %170 = getelementptr inbounds i32, i32* %157, i64 2
  %171 = bitcast i32* %170 to i64*
  store i64 %159, i64* %171, align 8
  %172 = load i64, i64* %113, align 8
  %173 = bitcast i32* %157 to i64*
  store i64 %172, i64* %173, align 8
  store i32* %157, i32** %114, align 8
  br label %174

174:                                              ; preds = %169, %165, %154
  %175 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %155, i64 1
  %176 = icmp eq %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %175, %146
  br i1 %176, label %148, label %154

177:                                              ; preds = %200, %148
  call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 0, i64 16, i1 false) #3
  %178 = load i8, i8* %89, align 8, !range !3
  %179 = icmp eq i8 %178, 0
  br i1 %179, label %225, label %203

180:                                              ; preds = %148, %200
  %181 = phi %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* [ %201, %200 ], [ %149, %148 ]
  %182 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %181, i64 0, i32 1
  %183 = load i32*, i32** %182, align 8
  %184 = load i32, i32* %47, align 8
  %185 = sext i32 %184 to i64
  %186 = and i64 %185, 4611686018427387900
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %200, label %188

188:                                              ; preds = %180
  %189 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %88, align 8
  %190 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %189, null
  br i1 %190, label %195, label %191

191:                                              ; preds = %188
  %192 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %189, i64 0, i32 1
  %193 = load i64, i64* %192, align 8
  %194 = icmp ugt i64 %193, %185
  br i1 %194, label %200, label %195

195:                                              ; preds = %191, %188
  %196 = getelementptr inbounds i32, i32* %183, i64 2
  %197 = bitcast i32* %196 to i64*
  store i64 %185, i64* %197, align 8
  %198 = load i64, i64* %113, align 8
  %199 = bitcast i32* %183 to i64*
  store i64 %198, i64* %199, align 8
  store i32* %183, i32** %114, align 8
  br label %200

200:                                              ; preds = %195, %191, %180
  %201 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %181, i64 1
  %202 = icmp eq %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %201, %152
  br i1 %202, label %177, label %180

203:                                              ; preds = %177
  %204 = load i32*, i32** %118, align 8
  %205 = load i32, i32* %47, align 8
  %206 = sext i32 %205 to i64
  %207 = and i64 %206, 4611686018427387900
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %224, label %209

209:                                              ; preds = %203
  %210 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %88, align 8
  %211 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %210, null
  br i1 %211, label %216, label %212

212:                                              ; preds = %209
  %213 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %210, i64 0, i32 1
  %214 = load i64, i64* %213, align 8
  %215 = icmp ugt i64 %214, %206
  br i1 %215, label %224, label %216

216:                                              ; preds = %212, %209
  %217 = getelementptr inbounds i32, i32* %204, i64 2
  %218 = bitcast i32* %217 to i64*
  store i64 %206, i64* %218, align 8
  %219 = load i64, i64* %113, align 8
  %220 = bitcast i32* %204 to i64*
  store i64 %219, i64* %220, align 8
  store i32* %204, i32** %114, align 8
  %221 = load i8, i8* %89, align 8, !range !3
  %222 = icmp eq i8 %221, 0
  %223 = bitcast i32* %204 to %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*
  br i1 %222, label %228, label %224

224:                                              ; preds = %216, %212, %203
  store i8 0, i8* %89, align 8
  br label %225

225:                                              ; preds = %224, %177
  %226 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %88, align 8
  %227 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %226 to i32*
  br label %228

228:                                              ; preds = %225, %216
  %229 = phi i32* [ %227, %225 ], [ %204, %216 ]
  %230 = phi %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* [ %226, %225 ], [ %223, %216 ]
  %231 = load i32, i32* %47, align 8
  %232 = sext i32 %231 to i64
  %233 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %230, null
  br i1 %233, label %241, label %234

234:                                              ; preds = %228
  %235 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %230, i64 0, i32 1
  %236 = load i64, i64* %235, align 8
  %237 = icmp ult i64 %236, %232
  br i1 %237, label %241, label %238

238:                                              ; preds = %234
  %239 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %230 to i64*
  %240 = load i64, i64* %239, align 8
  store i64 %240, i64* %113, align 8
  br label %260

241:                                              ; preds = %234, %228
  %242 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %86, align 8
  %243 = shl nsw i64 %232, 2
  %244 = add nsw i64 %243, 7
  %245 = and i64 %244, -8
  %246 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %242, i64 0, i32 2
  %247 = load i64, i64* %246, align 8
  %248 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %242, i64 0, i32 3
  %249 = load i64, i64* %248, align 8
  %250 = sub i64 %249, %247
  %251 = icmp ugt i64 %245, %250
  br i1 %251, label %252, label %254, !prof !2

252:                                              ; preds = %241
  %253 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %242, i64 %245) #3
  br label %256

254:                                              ; preds = %241
  %255 = add i64 %247, %245
  store i64 %255, i64* %246, align 8
  br label %256

256:                                              ; preds = %254, %252
  %257 = phi i64 [ %253, %252 ], [ %247, %254 ]
  %258 = inttoptr i64 %257 to i32*
  %259 = load i32, i32* %47, align 8
  br label %260

260:                                              ; preds = %256, %238
  %261 = phi i32 [ %231, %238 ], [ %259, %256 ]
  %262 = phi i32* [ %229, %238 ], [ %258, %256 ]
  %263 = icmp sgt i32 %261, 0
  br i1 %263, label %264, label %268

264:                                              ; preds = %260
  %265 = bitcast i32* %262 to i8*
  %266 = sext i32 %261 to i64
  %267 = shl nuw nsw i64 %266, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %265, i8 -1, i64 %267, i1 false) #3
  br label %268

268:                                              ; preds = %264, %260
  %269 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %92, align 8
  %270 = load i32, i32* %117, align 4
  %271 = load i32, i32* %119, align 8
  %272 = icmp slt i32 %270, %271
  br i1 %272, label %273, label %279

273:                                              ; preds = %268
  %274 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"** %116, align 8
  %275 = add nsw i32 %270, 1
  store i32 %275, i32* %117, align 4
  %276 = sext i32 %270 to i64
  %277 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %274, i64 %276, i32 0
  store i32 0, i32* %277, align 8
  %278 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %274, i64 %276, i32 1
  br label %312

279:                                              ; preds = %268
  %280 = shl nsw i32 %271, 1
  %281 = or i32 %280, 1
  %282 = sext i32 %281 to i64
  %283 = shl nsw i64 %282, 4
  %284 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %269, i64 0, i32 2
  %285 = load i64, i64* %284, align 8
  %286 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %269, i64 0, i32 3
  %287 = load i64, i64* %286, align 8
  %288 = sub i64 %287, %285
  %289 = icmp ugt i64 %283, %288
  br i1 %289, label %290, label %292, !prof !2

290:                                              ; preds = %279
  %291 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %269, i64 %283) #3
  br label %294

292:                                              ; preds = %279
  %293 = add i64 %285, %283
  store i64 %293, i64* %284, align 8
  br label %294

294:                                              ; preds = %292, %290
  %295 = phi i64 [ %291, %290 ], [ %285, %292 ]
  %296 = inttoptr i64 %295 to %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"*
  %297 = load i32, i32* %117, align 4
  %298 = icmp sgt i32 %297, 0
  br i1 %298, label %299, label %306

299:                                              ; preds = %294
  %300 = inttoptr i64 %295 to i8*
  %301 = load i8*, i8** %120, align 8
  %302 = icmp eq i32 %297, 1
  %303 = sext i32 %297 to i64
  %304 = shl nsw i64 %303, 4
  %305 = select i1 %302, i64 16, i64 %304
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %300, i8* align 1 %301, i64 %305, i1 false) #3
  br label %306

306:                                              ; preds = %299, %294
  store %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %296, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"** %116, align 8
  store i32 %281, i32* %119, align 8
  %307 = load i32, i32* %117, align 4
  %308 = add nsw i32 %307, 1
  store i32 %308, i32* %117, align 4
  %309 = sext i32 %307 to i64
  %310 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %296, i64 %309, i32 0
  store i32 0, i32* %310, align 8
  %311 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %296, i64 %309, i32 1
  br label %312

312:                                              ; preds = %306, %273
  %313 = phi i32** [ %311, %306 ], [ %278, %273 ]
  store i32* %262, i32** %313, align 8
  call fastcc void @_ZN2v88internal12_GLOBAL__N_114NfaInterpreterIhE16RunActiveThreadsEv(%"class.v8::internal::(anonymous namespace)::NfaInterpreter"* nonnull %23) #3
  %314 = load i32, i32* %60, align 8
  %315 = load i64, i64* %59, align 8
  %316 = trunc i64 %315 to i32
  %317 = icmp eq i32 %314, %316
  br i1 %317, label %605, label %318

318:                                              ; preds = %312, %598
  %319 = phi i32 [ %599, %598 ], [ %314, %312 ]
  %320 = load i8, i8* %89, align 8, !range !3
  %321 = icmp ne i8 %320, 0
  %322 = load i32, i32* %112, align 4
  %323 = icmp eq i32 %322, 0
  %324 = and i1 %321, %323
  br i1 %324, label %608, label %325

325:                                              ; preds = %318
  %326 = sext i32 %319 to i64
  %327 = load i8*, i8** %57, align 8
  %328 = getelementptr inbounds i8, i8* %327, i64 %326
  %329 = load i8, i8* %328, align 1
  %330 = zext i8 %329 to i16
  %331 = add nsw i32 %319, 1
  store i32 %331, i32* %60, align 8
  %332 = and i32 %331, 63
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %334, label %495

334:                                              ; preds = %325
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %121) #3
  %335 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %34, align 8
  store %"class.v8::internal::Isolate"* %335, %"class.v8::internal::Isolate"** %122, align 8
  %336 = load i32, i32* %35, align 8
  %337 = icmp eq i32 %336, 1
  br i1 %337, label %338, label %346

338:                                              ; preds = %334
  %339 = call zeroext i1 @_ZNK2v88internal15StackLimitCheck15JsHasOverflowedEm(%"class.v8::internal::StackLimitCheck"* nonnull %14, i64 0) #3
  br i1 %339, label %603, label %340

340:                                              ; preds = %338
  %341 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %122, align 8
  %342 = call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #3
  %343 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %341, i64 0, i32 0, i32 6, i32 1, i32 3
  %344 = load atomic i64, i64* %343 monotonic, align 8
  %345 = icmp ult i64 %342, %344
  br i1 %345, label %603, label %493

346:                                              ; preds = %334
  %347 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %335, i64 0, i32 31
  %348 = bitcast %"struct.v8::internal::HandleScopeData"* %347 to i64*
  %349 = load i64, i64* %348, align 8
  %350 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %335, i64 0, i32 31, i32 1
  %351 = load i64*, i64** %350, align 8
  %352 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %335, i64 0, i32 31, i32 2
  %353 = load i32, i32* %352, align 8
  %354 = add nsw i32 %353, 1
  store i32 %354, i32* %352, align 8
  %355 = load i64, i64* %37, align 8
  %356 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %335, i64 0, i32 31, i32 4
  %357 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %356, align 8
  %358 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %357, null
  %359 = inttoptr i64 %349 to i64*
  br i1 %358, label %362, label %360

360:                                              ; preds = %346
  %361 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %357, i64 %355) #3
  br label %372

362:                                              ; preds = %346
  %363 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %335, i64 0, i32 31, i32 0
  %364 = icmp eq i64* %351, %359
  br i1 %364, label %365, label %367

365:                                              ; preds = %362
  %366 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %335) #3
  br label %367

367:                                              ; preds = %365, %362
  %368 = phi i64* [ %366, %365 ], [ %359, %362 ]
  %369 = ptrtoint i64* %368 to i64
  %370 = add i64 %369, 8
  %371 = inttoptr i64 %370 to i64*
  store i64* %371, i64** %363, align 8
  store i64 %355, i64* %368, align 8
  br label %372

372:                                              ; preds = %367, %360
  %373 = phi i64* [ %361, %360 ], [ %368, %367 ]
  %374 = load i64, i64* %48, align 8
  %375 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %34, align 8
  %376 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %375, i64 0, i32 31, i32 4
  %377 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %376, align 8
  %378 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %377, null
  br i1 %378, label %381, label %379

379:                                              ; preds = %372
  %380 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %377, i64 %374) #3
  br label %394

381:                                              ; preds = %372
  %382 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %375, i64 0, i32 31, i32 0
  %383 = load i64*, i64** %382, align 8
  %384 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %375, i64 0, i32 31, i32 1
  %385 = load i64*, i64** %384, align 8
  %386 = icmp eq i64* %383, %385
  br i1 %386, label %387, label %389

387:                                              ; preds = %381
  %388 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %375) #3
  br label %389

389:                                              ; preds = %387, %381
  %390 = phi i64* [ %388, %387 ], [ %383, %381 ]
  %391 = ptrtoint i64* %390 to i64
  %392 = add i64 %391, 8
  %393 = inttoptr i64 %392 to i64*
  store i64* %393, i64** %382, align 8
  store i64 %374, i64* %390, align 8
  br label %394

394:                                              ; preds = %389, %379
  %395 = phi i64* [ %380, %379 ], [ %390, %389 ]
  %396 = call zeroext i1 @_ZNK2v88internal15StackLimitCheck15JsHasOverflowedEm(%"class.v8::internal::StackLimitCheck"* nonnull %14, i64 0) #3
  br i1 %396, label %397, label %400

397:                                              ; preds = %394
  %398 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %34, align 8
  %399 = call i64 @_ZN2v88internal7Isolate13StackOverflowEv(%"class.v8::internal::Isolate"* %398) #3
  br label %475

400:                                              ; preds = %394
  %401 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %122, align 8
  %402 = call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #3
  %403 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %401, i64 0, i32 0, i32 6, i32 1, i32 3
  %404 = load atomic i64, i64* %403 monotonic, align 8
  %405 = icmp ult i64 %402, %404
  br i1 %405, label %406, label %475

406:                                              ; preds = %400
  %407 = load i64, i64* %48, align 8
  br label %408

408:                                              ; preds = %421, %406
  %409 = phi i64 [ %407, %406 ], [ %426, %421 ]
  %410 = and i64 %409, -4294967296
  %411 = add i64 %409, -1
  %412 = inttoptr i64 %411 to i32*
  %413 = load atomic i32, i32* %412 monotonic, align 4
  %414 = zext i32 %413 to i64
  %415 = or i64 %410, %414
  %416 = add i64 %415, 7
  %417 = inttoptr i64 %416 to i16*
  %418 = load atomic i16, i16* %417 monotonic, align 2
  %419 = and i16 %418, 9
  %420 = zext i16 %419 to i32
  switch i32 %420, label %421 [
    i32 8, label %427
    i32 0, label %428
  ]

421:                                              ; preds = %408
  %422 = add i64 %409, 11
  %423 = inttoptr i64 %422 to i32*
  %424 = load i32, i32* %423, align 4
  %425 = zext i32 %424 to i64
  %426 = or i64 %410, %425
  br label %408

427:                                              ; preds = %408
  br label %428

428:                                              ; preds = %408, %427
  %429 = phi i1 [ true, %427 ], [ false, %408 ]
  %430 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %34, align 8
  %431 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %430, i64 0, i32 0, i32 6
  %432 = call i64 @_ZN2v88internal10StackGuard16HandleInterruptsEv(%"class.v8::internal::StackGuard"* %431) #3
  %433 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %34, align 8
  %434 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %433, i64 0, i32 0, i32 7, i32 0, i64 32
  %435 = load i64, i64* %434, align 8
  %436 = trunc i64 %432 to i32
  %437 = trunc i64 %435 to i32
  %438 = icmp eq i32 %436, %437
  br i1 %438, label %475, label %439

439:                                              ; preds = %428
  %440 = load i64, i64* %395, align 8
  br label %441

441:                                              ; preds = %455, %439
  %442 = phi i64 [ %440, %439 ], [ %460, %455 ]
  %443 = and i64 %442, -4294967296
  %444 = add i64 %442, -1
  %445 = inttoptr i64 %444 to i32*
  %446 = load atomic i32, i32* %445 monotonic, align 4
  %447 = zext i32 %446 to i64
  %448 = or i64 %443, %447
  %449 = add i64 %448, 7
  %450 = inttoptr i64 %449 to i16*
  %451 = load atomic i16, i16* %450 monotonic, align 2
  %452 = and i16 %451, 9
  %453 = zext i16 %452 to i32
  switch i32 %453, label %455 [
    i32 8, label %461
    i32 0, label %454
  ]

454:                                              ; preds = %441
  br i1 %429, label %475, label %462

455:                                              ; preds = %441
  %456 = add i64 %442, 11
  %457 = inttoptr i64 %456 to i32*
  %458 = load i32, i32* %457, align 4
  %459 = zext i32 %458 to i64
  %460 = or i64 %443, %459
  br label %441

461:                                              ; preds = %441
  br i1 %429, label %462, label %475

462:                                              ; preds = %461, %454
  %463 = load i64, i64* %373, align 8
  store i64 %463, i64* %37, align 8
  %464 = add i64 %463, 7
  %465 = inttoptr i64 %464 to %"struct.v8::internal::RegExpInstruction"*
  %466 = add i64 %463, 3
  %467 = inttoptr i64 %466 to i32*
  %468 = load i32, i32* %467, align 4
  %469 = ashr i32 %468, 4
  %470 = sext i32 %469 to i64
  store %"struct.v8::internal::RegExpInstruction"* %465, %"struct.v8::internal::RegExpInstruction"** %45, align 8
  store i64 %470, i64* %46, align 8
  %471 = load i64, i64* %395, align 8
  store i64 %471, i64* %48, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #3
  store i64 %471, i64* %124, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %125) #3
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %13, %"class.v8::internal::String"* nonnull %12, %"class.v8::internal::CombinationAssertScope"* dereferenceable(1) %36) #3
  %472 = load i64, i64* %126, align 8
  %473 = load i32, i32* %127, align 8
  %474 = sext i32 %473 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %125) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #3
  store i64 %472, i64* %58, align 8
  store i64 %474, i64* %59, align 8
  br label %475

475:                                              ; preds = %462, %461, %454, %428, %400, %397
  %476 = phi i32 [ 1, %397 ], [ 0, %462 ], [ 0, %400 ], [ 1, %428 ], [ 1, %461 ], [ 1, %454 ]
  %477 = phi i32 [ -1, %397 ], [ undef, %462 ], [ undef, %400 ], [ -1, %428 ], [ -2, %461 ], [ -2, %454 ]
  %478 = icmp eq %"class.v8::internal::Isolate"* %335, null
  br i1 %478, label %491, label %479

479:                                              ; preds = %475
  %480 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %347, i64 0, i32 0
  %481 = load i64*, i64** %480, align 8
  store i64 %349, i64* %348, align 8
  %482 = load i32, i32* %352, align 8
  %483 = add nsw i32 %482, -1
  store i32 %483, i32* %352, align 8
  %484 = load i64*, i64** %350, align 8
  %485 = icmp eq i64* %484, %351
  br i1 %485, label %488, label %486

486:                                              ; preds = %479
  store i64* %351, i64** %350, align 8
  call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %335) #3
  %487 = load i64*, i64** %480, align 8
  br label %488

488:                                              ; preds = %486, %479
  %489 = phi i64* [ %487, %486 ], [ %359, %479 ]
  %490 = phi i64* [ %351, %486 ], [ %481, %479 ]
  call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %489, i64* %490) #3
  br label %491

491:                                              ; preds = %488, %475
  %492 = icmp eq i32 %476, 0
  br i1 %492, label %493, label %603

493:                                              ; preds = %491, %340
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %121) #3
  %494 = load i32, i32* %112, align 4
  br label %495

495:                                              ; preds = %493, %325
  %496 = phi i32 [ %494, %493 ], [ %322, %325 ]
  %497 = icmp sgt i32 %496, 0
  br i1 %497, label %498, label %598

498:                                              ; preds = %495
  %499 = sext i32 %496 to i64
  br label %500

500:                                              ; preds = %596, %498
  %501 = phi i64 [ %499, %498 ], [ %502, %596 ]
  %502 = add nsw i64 %501, -1
  %503 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"** %111, align 8
  %504 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %503, i64 %502
  %505 = bitcast %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %504 to i8*
  %506 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %504, i64 0, i32 0
  %507 = load i32, i32* %506, align 8
  %508 = getelementptr inbounds i8, i8* %505, i64 4
  %509 = bitcast i8* %508 to i32*
  %510 = load i32, i32* %509, align 4
  %511 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %503, i64 %502, i32 1
  %512 = load i32*, i32** %511, align 8
  %513 = sext i32 %507 to i64
  %514 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %45, align 8
  %515 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %514, i64 %513, i32 1
  %516 = bitcast %union.anon.1133* %515 to i16*
  %517 = load i16, i16* %516, align 4
  %518 = icmp ugt i16 %517, %330
  br i1 %518, label %579, label %519

519:                                              ; preds = %500
  %520 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %514, i64 %513
  %521 = bitcast %"struct.v8::internal::RegExpInstruction"* %520 to i8*
  %522 = getelementptr inbounds i8, i8* %521, i64 6
  %523 = bitcast i8* %522 to i16*
  %524 = load i16, i16* %523, align 2
  %525 = icmp ult i16 %524, %330
  br i1 %525, label %579, label %526

526:                                              ; preds = %519
  %527 = add nsw i32 %507, 1
  %528 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %92, align 8
  %529 = load i32, i32* %117, align 4
  %530 = load i32, i32* %119, align 8
  %531 = icmp slt i32 %529, %530
  br i1 %531, label %532, label %542

532:                                              ; preds = %526
  %533 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"** %116, align 8
  %534 = add nsw i32 %529, 1
  store i32 %534, i32* %117, align 4
  %535 = sext i32 %529 to i64
  %536 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %533, i64 %535
  %537 = bitcast %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %536 to i8*
  %538 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %536, i64 0, i32 0
  store i32 %527, i32* %538, align 8
  %539 = getelementptr inbounds i8, i8* %537, i64 4
  %540 = bitcast i8* %539 to i32*
  store i32 %510, i32* %540, align 4
  %541 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %533, i64 %535, i32 1
  store i32* %512, i32** %541, align 8
  br label %596

542:                                              ; preds = %526
  %543 = shl nsw i32 %530, 1
  %544 = or i32 %543, 1
  %545 = sext i32 %544 to i64
  %546 = shl nsw i64 %545, 4
  %547 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %528, i64 0, i32 2
  %548 = load i64, i64* %547, align 8
  %549 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %528, i64 0, i32 3
  %550 = load i64, i64* %549, align 8
  %551 = sub i64 %550, %548
  %552 = icmp ugt i64 %546, %551
  br i1 %552, label %553, label %555, !prof !2

553:                                              ; preds = %542
  %554 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %528, i64 %546) #3
  br label %557

555:                                              ; preds = %542
  %556 = add i64 %548, %546
  store i64 %556, i64* %547, align 8
  br label %557

557:                                              ; preds = %555, %553
  %558 = phi i64 [ %554, %553 ], [ %548, %555 ]
  %559 = inttoptr i64 %558 to %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"*
  %560 = load i32, i32* %117, align 4
  %561 = icmp sgt i32 %560, 0
  br i1 %561, label %562, label %569

562:                                              ; preds = %557
  %563 = inttoptr i64 %558 to i8*
  %564 = load i8*, i8** %120, align 8
  %565 = icmp eq i32 %560, 1
  %566 = sext i32 %560 to i64
  %567 = shl nsw i64 %566, 4
  %568 = select i1 %565, i64 16, i64 %567
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %563, i8* align 1 %564, i64 %568, i1 false) #3
  br label %569

569:                                              ; preds = %562, %557
  store %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %559, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"** %116, align 8
  store i32 %544, i32* %119, align 8
  %570 = load i32, i32* %117, align 4
  %571 = add nsw i32 %570, 1
  store i32 %571, i32* %117, align 4
  %572 = sext i32 %570 to i64
  %573 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %559, i64 %572
  %574 = bitcast %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %573 to i8*
  %575 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %573, i64 0, i32 0
  store i32 %527, i32* %575, align 8
  %576 = getelementptr inbounds i8, i8* %574, i64 4
  %577 = bitcast i8* %576 to i32*
  store i32 %510, i32* %577, align 4
  %578 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %559, i64 %572, i32 1
  store i32* %512, i32** %578, align 8
  br label %596

579:                                              ; preds = %519, %500
  %580 = load i32, i32* %47, align 8
  %581 = sext i32 %580 to i64
  %582 = and i64 %581, 4611686018427387900
  %583 = icmp eq i64 %582, 0
  br i1 %583, label %596, label %584

584:                                              ; preds = %579
  %585 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %88, align 8
  %586 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %585, null
  br i1 %586, label %591, label %587

587:                                              ; preds = %584
  %588 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %585, i64 0, i32 1
  %589 = load i64, i64* %588, align 8
  %590 = icmp ugt i64 %589, %581
  br i1 %590, label %596, label %591

591:                                              ; preds = %587, %584
  %592 = getelementptr inbounds i32, i32* %512, i64 2
  %593 = bitcast i32* %592 to i64*
  store i64 %581, i64* %593, align 8
  %594 = load i64, i64* %113, align 8
  %595 = bitcast i32* %512 to i64*
  store i64 %594, i64* %595, align 8
  store i32* %512, i32** %114, align 8
  br label %596

596:                                              ; preds = %591, %587, %579, %569, %532
  %597 = icmp sgt i64 %502, 0
  br i1 %597, label %500, label %598

598:                                              ; preds = %596, %495
  call void @llvm.memset.p0i8.i64(i8* align 8 %115, i8 0, i64 16, i1 false) #3
  call fastcc void @_ZN2v88internal12_GLOBAL__N_114NfaInterpreterIhE16RunActiveThreadsEv(%"class.v8::internal::(anonymous namespace)::NfaInterpreter"* nonnull %23) #3
  %599 = load i32, i32* %60, align 8
  %600 = load i64, i64* %59, align 8
  %601 = trunc i64 %600 to i32
  %602 = icmp eq i32 %599, %601
  br i1 %602, label %605, label %318

603:                                              ; preds = %491, %340, %338
  %604 = phi i32 [ -2, %340 ], [ -1, %338 ], [ %477, %491 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %121) #3
  br label %1236

605:                                              ; preds = %598, %312
  %606 = load i8, i8* %89, align 8
  %607 = icmp eq i8 %606, 0
  br i1 %607, label %1236, label %608

608:                                              ; preds = %318, %605
  %609 = load i32*, i32** %118, align 8
  %610 = load i64, i64* %128, align 8
  %611 = shl nuw i64 %610, 2
  %612 = ashr exact i64 %611, 2
  %613 = icmp eq i64 %610, 0
  br i1 %613, label %617, label %614

614:                                              ; preds = %608
  %615 = bitcast i32* %130 to i8*
  %616 = bitcast i32* %609 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %615, i8* align 4 %616, i64 %611, i1 false) #3
  br label %617

617:                                              ; preds = %614, %608
  %618 = getelementptr inbounds i32, i32* %130, i64 %612
  %619 = add nuw nsw i32 %131, 1
  %620 = load i32, i32* %609, align 4
  %621 = getelementptr inbounds i32, i32* %609, i64 1
  %622 = load i32, i32* %621, align 4
  %623 = icmp eq i32 %622, %620
  br i1 %623, label %624, label %631

624:                                              ; preds = %617
  %625 = load i64, i64* %59, align 8
  %626 = trunc i64 %625 to i32
  %627 = icmp eq i32 %620, %626
  br i1 %627, label %628, label %629

628:                                              ; preds = %624
  store i32 %620, i32* %60, align 8
  br label %1236

629:                                              ; preds = %624
  %630 = add nsw i32 %620, 1
  br label %631

631:                                              ; preds = %629, %617
  %632 = phi i32 [ %630, %629 ], [ %622, %617 ]
  store i32 %632, i32* %60, align 8
  %633 = icmp eq i32 %619, %106
  br i1 %633, label %1236, label %129

634:                                              ; preds = %9
  %635 = bitcast %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 176, i8* nonnull %635) #3
  %636 = load i64, i64* %25, align 8
  %637 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 0
  store %"class.v8::internal::Isolate"* %0, %"class.v8::internal::Isolate"** %637, align 8
  %638 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 1
  store i32 %1, i32* %638, align 8
  %639 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 2
  %640 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %2, i64* %640, align 8
  %641 = add i64 %2, 7
  %642 = inttoptr i64 %641 to %"struct.v8::internal::RegExpInstruction"*
  %643 = add i64 %2, 3
  %644 = inttoptr i64 %643 to i32*
  %645 = load i32, i32* %644, align 4
  %646 = ashr i32 %645, 4
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 4, i32 0
  store %"struct.v8::internal::RegExpInstruction"* %642, %"struct.v8::internal::RegExpInstruction"** %648, align 8
  %649 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 4, i32 1
  store i64 %647, i64* %649, align 8
  %650 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 5
  store i32 %3, i32* %650, align 8
  %651 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %636, i64* %651, align 8
  %652 = bitcast %"class.v8::internal::String"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %652) #3
  %653 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %636, i64* %653, align 8
  %654 = bitcast %"class.v8::internal::String::FlatContent"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %654) #3
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %11, %"class.v8::internal::String"* nonnull %10, %"class.v8::internal::CombinationAssertScope"* dereferenceable(1) %639) #3
  %655 = bitcast %"class.v8::internal::String::FlatContent"* %11 to i64*
  %656 = load i64, i64* %655, align 8
  %657 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %11, i64 0, i32 1
  %658 = load i32, i32* %657, align 8
  %659 = sext i32 %658 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %654) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %652) #3
  %660 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 7, i32 0
  %661 = bitcast i16** %660 to i64*
  store i64 %656, i64* %661, align 8
  %662 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 7, i32 1
  store i64 %659, i64* %662, align 8
  %663 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 8
  store i32 %5, i32* %663, align 8
  %664 = load i32, i32* %644, align 4
  %665 = ashr i32 %664, 1
  %666 = sext i32 %665 to i64
  %667 = shl nsw i64 %666, 2
  %668 = add nsw i64 %667, 7
  %669 = and i64 %668, -8
  %670 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %8, i64 0, i32 2
  %671 = load i64, i64* %670, align 8
  %672 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %8, i64 0, i32 3
  %673 = load i64, i64* %672, align 8
  %674 = sub i64 %673, %671
  %675 = icmp ugt i64 %669, %674
  br i1 %675, label %676, label %678, !prof !2

676:                                              ; preds = %634
  %677 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %8, i64 %669) #3
  br label %680

678:                                              ; preds = %634
  %679 = add i64 %669, %671
  store i64 %679, i64* %670, align 8
  br label %680

680:                                              ; preds = %678, %676
  %681 = phi i64 [ %677, %676 ], [ %671, %678 ]
  %682 = inttoptr i64 %681 to i32*
  %683 = load i32, i32* %644, align 4
  %684 = ashr i32 %683, 1
  %685 = sext i32 %684 to i64
  %686 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 9, i32 0
  store i32* %682, i32** %686, align 8
  %687 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 9, i32 1
  store i64 %685, i64* %687, align 8
  %688 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 10
  %689 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 12, i32 0, i32 0
  %690 = bitcast %"class.v8::internal::ZoneList.1143"* %688 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %690, i8 0, i64 32, i1 false) #3
  store %"class.v8::internal::Zone"* %8, %"class.v8::internal::Zone"** %689, align 8
  %691 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 12, i32 1
  store %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* null, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %691, align 8
  %692 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %692, align 8
  %693 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1
  %694 = bitcast %union.anon.1140* %693 to i8*
  store i8 0, i8* %694, align 8
  %695 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 14
  store %"class.v8::internal::Zone"* %8, %"class.v8::internal::Zone"** %695, align 8
  %696 = getelementptr inbounds i32, i32* %682, i64 %685
  %697 = ptrtoint i32* %696 to i64
  %698 = sub i64 %697, %681
  %699 = icmp sgt i64 %698, 0
  br i1 %699, label %700, label %707

700:                                              ; preds = %680
  %701 = inttoptr i64 %681 to i8*
  %702 = and i64 %698, -4
  %703 = icmp ult i64 %698, 4
  %704 = sext i1 %703 to i64
  %705 = shl nsw i64 %704, 2
  %706 = sub i64 %702, %705
  call void @llvm.memset.p0i8.i64(i8* align 4 %701, i8 -1, i64 %706, i1 false) #3
  br label %707

707:                                              ; preds = %680, %700
  %708 = load i32, i32* %650, align 8
  %709 = sdiv i32 %7, %708
  %710 = icmp eq i32 %709, 0
  br i1 %710, label %1236, label %711

711:                                              ; preds = %707
  %712 = bitcast i32** %686 to i8**
  %713 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 11
  %714 = getelementptr %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %713, i64 0, i32 0
  %715 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 11, i32 2
  %716 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %691 to i64*
  %717 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %691 to i32**
  %718 = bitcast %"class.v8::internal::ZoneList.1143"* %713 to i8*
  %719 = getelementptr %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %688, i64 0, i32 0
  %720 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 10, i32 2
  %721 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %722 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 10, i32 1
  %723 = bitcast %"class.v8::internal::ZoneList.1143"* %688 to i8**
  %724 = bitcast %"class.v8::internal::StackLimitCheck"* %19 to i8*
  %725 = getelementptr inbounds %"class.v8::internal::StackLimitCheck", %"class.v8::internal::StackLimitCheck"* %19, i64 0, i32 0
  %726 = bitcast %"class.v8::internal::String"* %17 to i8*
  %727 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %728 = bitcast %"class.v8::internal::String::FlatContent"* %18 to i8*
  %729 = bitcast %"class.v8::internal::String::FlatContent"* %18 to i64*
  %730 = getelementptr inbounds %"class.v8::internal::String::FlatContent", %"class.v8::internal::String::FlatContent"* %18, i64 0, i32 1
  %731 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %24, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  br label %732

732:                                              ; preds = %1233, %711
  %733 = phi i32* [ %6, %711 ], [ %1220, %1233 ]
  %734 = phi i32 [ 0, %711 ], [ %1221, %1233 ]
  %735 = load i64, i64* %687, align 8
  %736 = shl i64 %735, 2
  %737 = icmp sgt i64 %736, 0
  br i1 %737, label %738, label %745

738:                                              ; preds = %732
  %739 = load i8*, i8** %712, align 8
  %740 = icmp slt i64 %735, 1
  %741 = select i1 %740, i64 %735, i64 1
  %742 = mul i64 %741, -4
  %743 = add nuw i64 %736, 4
  %744 = add i64 %743, %742
  call void @llvm.memset.p0i8.i64(i8* align 4 %739, i8 -1, i64 %744, i1 false) #3
  br label %745

745:                                              ; preds = %738, %732
  %746 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"** %714, align 8
  %747 = load i32, i32* %715, align 4
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %746, i64 %748
  %750 = icmp eq i32 %747, 0
  br i1 %750, label %751, label %757

751:                                              ; preds = %777, %745
  call void @llvm.memset.p0i8.i64(i8* align 8 %718, i8 0, i64 16, i1 false) #3
  %752 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"** %719, align 8
  %753 = load i32, i32* %720, align 4
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %752, i64 %754
  %756 = icmp eq i32 %753, 0
  br i1 %756, label %780, label %783

757:                                              ; preds = %745, %777
  %758 = phi %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* [ %778, %777 ], [ %746, %745 ]
  %759 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %758, i64 0, i32 1
  %760 = load i32*, i32** %759, align 8
  %761 = load i32, i32* %650, align 8
  %762 = sext i32 %761 to i64
  %763 = and i64 %762, 4611686018427387900
  %764 = icmp eq i64 %763, 0
  br i1 %764, label %777, label %765

765:                                              ; preds = %757
  %766 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %691, align 8
  %767 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %766, null
  br i1 %767, label %772, label %768

768:                                              ; preds = %765
  %769 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %766, i64 0, i32 1
  %770 = load i64, i64* %769, align 8
  %771 = icmp ugt i64 %770, %762
  br i1 %771, label %777, label %772

772:                                              ; preds = %768, %765
  %773 = getelementptr inbounds i32, i32* %760, i64 2
  %774 = bitcast i32* %773 to i64*
  store i64 %762, i64* %774, align 8
  %775 = load i64, i64* %716, align 8
  %776 = bitcast i32* %760 to i64*
  store i64 %775, i64* %776, align 8
  store i32* %760, i32** %717, align 8
  br label %777

777:                                              ; preds = %772, %768, %757
  %778 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %758, i64 1
  %779 = icmp eq %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %778, %749
  br i1 %779, label %751, label %757

780:                                              ; preds = %803, %751
  call void @llvm.memset.p0i8.i64(i8* align 8 %690, i8 0, i64 16, i1 false) #3
  %781 = load i8, i8* %692, align 8, !range !3
  %782 = icmp eq i8 %781, 0
  br i1 %782, label %828, label %806

783:                                              ; preds = %751, %803
  %784 = phi %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* [ %804, %803 ], [ %752, %751 ]
  %785 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %784, i64 0, i32 1
  %786 = load i32*, i32** %785, align 8
  %787 = load i32, i32* %650, align 8
  %788 = sext i32 %787 to i64
  %789 = and i64 %788, 4611686018427387900
  %790 = icmp eq i64 %789, 0
  br i1 %790, label %803, label %791

791:                                              ; preds = %783
  %792 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %691, align 8
  %793 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %792, null
  br i1 %793, label %798, label %794

794:                                              ; preds = %791
  %795 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %792, i64 0, i32 1
  %796 = load i64, i64* %795, align 8
  %797 = icmp ugt i64 %796, %788
  br i1 %797, label %803, label %798

798:                                              ; preds = %794, %791
  %799 = getelementptr inbounds i32, i32* %786, i64 2
  %800 = bitcast i32* %799 to i64*
  store i64 %788, i64* %800, align 8
  %801 = load i64, i64* %716, align 8
  %802 = bitcast i32* %786 to i64*
  store i64 %801, i64* %802, align 8
  store i32* %786, i32** %717, align 8
  br label %803

803:                                              ; preds = %798, %794, %783
  %804 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %784, i64 1
  %805 = icmp eq %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %804, %755
  br i1 %805, label %780, label %783

806:                                              ; preds = %780
  %807 = load i32*, i32** %721, align 8
  %808 = load i32, i32* %650, align 8
  %809 = sext i32 %808 to i64
  %810 = and i64 %809, 4611686018427387900
  %811 = icmp eq i64 %810, 0
  br i1 %811, label %827, label %812

812:                                              ; preds = %806
  %813 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %691, align 8
  %814 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %813, null
  br i1 %814, label %819, label %815

815:                                              ; preds = %812
  %816 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %813, i64 0, i32 1
  %817 = load i64, i64* %816, align 8
  %818 = icmp ugt i64 %817, %809
  br i1 %818, label %827, label %819

819:                                              ; preds = %815, %812
  %820 = getelementptr inbounds i32, i32* %807, i64 2
  %821 = bitcast i32* %820 to i64*
  store i64 %809, i64* %821, align 8
  %822 = load i64, i64* %716, align 8
  %823 = bitcast i32* %807 to i64*
  store i64 %822, i64* %823, align 8
  store i32* %807, i32** %717, align 8
  %824 = load i8, i8* %692, align 8, !range !3
  %825 = icmp eq i8 %824, 0
  %826 = bitcast i32* %807 to %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*
  br i1 %825, label %831, label %827

827:                                              ; preds = %819, %815, %806
  store i8 0, i8* %692, align 8
  br label %828

828:                                              ; preds = %827, %780
  %829 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %691, align 8
  %830 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %829 to i32*
  br label %831

831:                                              ; preds = %828, %819
  %832 = phi i32* [ %830, %828 ], [ %807, %819 ]
  %833 = phi %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* [ %829, %828 ], [ %826, %819 ]
  %834 = load i32, i32* %650, align 8
  %835 = sext i32 %834 to i64
  %836 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %833, null
  br i1 %836, label %844, label %837

837:                                              ; preds = %831
  %838 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %833, i64 0, i32 1
  %839 = load i64, i64* %838, align 8
  %840 = icmp ult i64 %839, %835
  br i1 %840, label %844, label %841

841:                                              ; preds = %837
  %842 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %833 to i64*
  %843 = load i64, i64* %842, align 8
  store i64 %843, i64* %716, align 8
  br label %863

844:                                              ; preds = %837, %831
  %845 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %689, align 8
  %846 = shl nsw i64 %835, 2
  %847 = add nsw i64 %846, 7
  %848 = and i64 %847, -8
  %849 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %845, i64 0, i32 2
  %850 = load i64, i64* %849, align 8
  %851 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %845, i64 0, i32 3
  %852 = load i64, i64* %851, align 8
  %853 = sub i64 %852, %850
  %854 = icmp ugt i64 %848, %853
  br i1 %854, label %855, label %857, !prof !2

855:                                              ; preds = %844
  %856 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %845, i64 %848) #3
  br label %859

857:                                              ; preds = %844
  %858 = add i64 %850, %848
  store i64 %858, i64* %849, align 8
  br label %859

859:                                              ; preds = %857, %855
  %860 = phi i64 [ %856, %855 ], [ %850, %857 ]
  %861 = inttoptr i64 %860 to i32*
  %862 = load i32, i32* %650, align 8
  br label %863

863:                                              ; preds = %859, %841
  %864 = phi i32 [ %834, %841 ], [ %862, %859 ]
  %865 = phi i32* [ %832, %841 ], [ %861, %859 ]
  %866 = icmp sgt i32 %864, 0
  br i1 %866, label %867, label %871

867:                                              ; preds = %863
  %868 = bitcast i32* %865 to i8*
  %869 = sext i32 %864 to i64
  %870 = shl nuw nsw i64 %869, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %868, i8 -1, i64 %870, i1 false) #3
  br label %871

871:                                              ; preds = %867, %863
  %872 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %695, align 8
  %873 = load i32, i32* %720, align 4
  %874 = load i32, i32* %722, align 8
  %875 = icmp slt i32 %873, %874
  br i1 %875, label %876, label %882

876:                                              ; preds = %871
  %877 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"** %719, align 8
  %878 = add nsw i32 %873, 1
  store i32 %878, i32* %720, align 4
  %879 = sext i32 %873 to i64
  %880 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %877, i64 %879, i32 0
  store i32 0, i32* %880, align 8
  %881 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %877, i64 %879, i32 1
  br label %915

882:                                              ; preds = %871
  %883 = shl nsw i32 %874, 1
  %884 = or i32 %883, 1
  %885 = sext i32 %884 to i64
  %886 = shl nsw i64 %885, 4
  %887 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %872, i64 0, i32 2
  %888 = load i64, i64* %887, align 8
  %889 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %872, i64 0, i32 3
  %890 = load i64, i64* %889, align 8
  %891 = sub i64 %890, %888
  %892 = icmp ugt i64 %886, %891
  br i1 %892, label %893, label %895, !prof !2

893:                                              ; preds = %882
  %894 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %872, i64 %886) #3
  br label %897

895:                                              ; preds = %882
  %896 = add i64 %888, %886
  store i64 %896, i64* %887, align 8
  br label %897

897:                                              ; preds = %895, %893
  %898 = phi i64 [ %894, %893 ], [ %888, %895 ]
  %899 = inttoptr i64 %898 to %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"*
  %900 = load i32, i32* %720, align 4
  %901 = icmp sgt i32 %900, 0
  br i1 %901, label %902, label %909

902:                                              ; preds = %897
  %903 = inttoptr i64 %898 to i8*
  %904 = load i8*, i8** %723, align 8
  %905 = icmp eq i32 %900, 1
  %906 = sext i32 %900 to i64
  %907 = shl nsw i64 %906, 4
  %908 = select i1 %905, i64 16, i64 %907
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %903, i8* align 1 %904, i64 %908, i1 false) #3
  br label %909

909:                                              ; preds = %902, %897
  store %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %899, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"** %719, align 8
  store i32 %884, i32* %722, align 8
  %910 = load i32, i32* %720, align 4
  %911 = add nsw i32 %910, 1
  store i32 %911, i32* %720, align 4
  %912 = sext i32 %910 to i64
  %913 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %899, i64 %912, i32 0
  store i32 0, i32* %913, align 8
  %914 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %899, i64 %912, i32 1
  br label %915

915:                                              ; preds = %909, %876
  %916 = phi i32** [ %914, %909 ], [ %881, %876 ]
  store i32* %865, i32** %916, align 8
  call fastcc void @_ZN2v88internal12_GLOBAL__N_114NfaInterpreterItE16RunActiveThreadsEv(%"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* nonnull %24) #3
  %917 = load i32, i32* %663, align 8
  %918 = load i64, i64* %662, align 8
  %919 = trunc i64 %918 to i32
  %920 = icmp eq i32 %917, %919
  br i1 %920, label %1207, label %921

921:                                              ; preds = %915, %1200
  %922 = phi i32 [ %1201, %1200 ], [ %917, %915 ]
  %923 = load i8, i8* %692, align 8, !range !3
  %924 = icmp ne i8 %923, 0
  %925 = load i32, i32* %715, align 4
  %926 = icmp eq i32 %925, 0
  %927 = and i1 %924, %926
  br i1 %927, label %1210, label %928

928:                                              ; preds = %921
  %929 = sext i32 %922 to i64
  %930 = load i16*, i16** %660, align 8
  %931 = getelementptr inbounds i16, i16* %930, i64 %929
  %932 = load i16, i16* %931, align 2
  %933 = add nsw i32 %922, 1
  store i32 %933, i32* %663, align 8
  %934 = and i32 %933, 63
  %935 = icmp eq i32 %934, 0
  br i1 %935, label %936, label %1097

936:                                              ; preds = %928
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %724) #3
  %937 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %637, align 8
  store %"class.v8::internal::Isolate"* %937, %"class.v8::internal::Isolate"** %725, align 8
  %938 = load i32, i32* %638, align 8
  %939 = icmp eq i32 %938, 1
  br i1 %939, label %940, label %948

940:                                              ; preds = %936
  %941 = call zeroext i1 @_ZNK2v88internal15StackLimitCheck15JsHasOverflowedEm(%"class.v8::internal::StackLimitCheck"* nonnull %19, i64 0) #3
  br i1 %941, label %1205, label %942

942:                                              ; preds = %940
  %943 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %725, align 8
  %944 = call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #3
  %945 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %943, i64 0, i32 0, i32 6, i32 1, i32 3
  %946 = load atomic i64, i64* %945 monotonic, align 8
  %947 = icmp ult i64 %944, %946
  br i1 %947, label %1205, label %1095

948:                                              ; preds = %936
  %949 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %937, i64 0, i32 31
  %950 = bitcast %"struct.v8::internal::HandleScopeData"* %949 to i64*
  %951 = load i64, i64* %950, align 8
  %952 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %937, i64 0, i32 31, i32 1
  %953 = load i64*, i64** %952, align 8
  %954 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %937, i64 0, i32 31, i32 2
  %955 = load i32, i32* %954, align 8
  %956 = add nsw i32 %955, 1
  store i32 %956, i32* %954, align 8
  %957 = load i64, i64* %640, align 8
  %958 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %937, i64 0, i32 31, i32 4
  %959 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %958, align 8
  %960 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %959, null
  %961 = inttoptr i64 %951 to i64*
  br i1 %960, label %964, label %962

962:                                              ; preds = %948
  %963 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %959, i64 %957) #3
  br label %974

964:                                              ; preds = %948
  %965 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %937, i64 0, i32 31, i32 0
  %966 = icmp eq i64* %953, %961
  br i1 %966, label %967, label %969

967:                                              ; preds = %964
  %968 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %937) #3
  br label %969

969:                                              ; preds = %967, %964
  %970 = phi i64* [ %968, %967 ], [ %961, %964 ]
  %971 = ptrtoint i64* %970 to i64
  %972 = add i64 %971, 8
  %973 = inttoptr i64 %972 to i64*
  store i64* %973, i64** %965, align 8
  store i64 %957, i64* %970, align 8
  br label %974

974:                                              ; preds = %969, %962
  %975 = phi i64* [ %963, %962 ], [ %970, %969 ]
  %976 = load i64, i64* %651, align 8
  %977 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %637, align 8
  %978 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %977, i64 0, i32 31, i32 4
  %979 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %978, align 8
  %980 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %979, null
  br i1 %980, label %983, label %981

981:                                              ; preds = %974
  %982 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %979, i64 %976) #3
  br label %996

983:                                              ; preds = %974
  %984 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %977, i64 0, i32 31, i32 0
  %985 = load i64*, i64** %984, align 8
  %986 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %977, i64 0, i32 31, i32 1
  %987 = load i64*, i64** %986, align 8
  %988 = icmp eq i64* %985, %987
  br i1 %988, label %989, label %991

989:                                              ; preds = %983
  %990 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %977) #3
  br label %991

991:                                              ; preds = %989, %983
  %992 = phi i64* [ %990, %989 ], [ %985, %983 ]
  %993 = ptrtoint i64* %992 to i64
  %994 = add i64 %993, 8
  %995 = inttoptr i64 %994 to i64*
  store i64* %995, i64** %984, align 8
  store i64 %976, i64* %992, align 8
  br label %996

996:                                              ; preds = %991, %981
  %997 = phi i64* [ %982, %981 ], [ %992, %991 ]
  %998 = call zeroext i1 @_ZNK2v88internal15StackLimitCheck15JsHasOverflowedEm(%"class.v8::internal::StackLimitCheck"* nonnull %19, i64 0) #3
  br i1 %998, label %999, label %1002

999:                                              ; preds = %996
  %1000 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %637, align 8
  %1001 = call i64 @_ZN2v88internal7Isolate13StackOverflowEv(%"class.v8::internal::Isolate"* %1000) #3
  br label %1077

1002:                                             ; preds = %996
  %1003 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %725, align 8
  %1004 = call i64 @_ZN2v88internal23GetCurrentStackPositionEv() #3
  %1005 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1003, i64 0, i32 0, i32 6, i32 1, i32 3
  %1006 = load atomic i64, i64* %1005 monotonic, align 8
  %1007 = icmp ult i64 %1004, %1006
  br i1 %1007, label %1008, label %1077

1008:                                             ; preds = %1002
  %1009 = load i64, i64* %651, align 8
  br label %1010

1010:                                             ; preds = %1023, %1008
  %1011 = phi i64 [ %1009, %1008 ], [ %1028, %1023 ]
  %1012 = and i64 %1011, -4294967296
  %1013 = add i64 %1011, -1
  %1014 = inttoptr i64 %1013 to i32*
  %1015 = load atomic i32, i32* %1014 monotonic, align 4
  %1016 = zext i32 %1015 to i64
  %1017 = or i64 %1012, %1016
  %1018 = add i64 %1017, 7
  %1019 = inttoptr i64 %1018 to i16*
  %1020 = load atomic i16, i16* %1019 monotonic, align 2
  %1021 = and i16 %1020, 9
  %1022 = zext i16 %1021 to i32
  switch i32 %1022, label %1023 [
    i32 8, label %1029
    i32 0, label %1030
  ]

1023:                                             ; preds = %1010
  %1024 = add i64 %1011, 11
  %1025 = inttoptr i64 %1024 to i32*
  %1026 = load i32, i32* %1025, align 4
  %1027 = zext i32 %1026 to i64
  %1028 = or i64 %1012, %1027
  br label %1010

1029:                                             ; preds = %1010
  br label %1030

1030:                                             ; preds = %1010, %1029
  %1031 = phi i1 [ true, %1029 ], [ false, %1010 ]
  %1032 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %637, align 8
  %1033 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1032, i64 0, i32 0, i32 6
  %1034 = call i64 @_ZN2v88internal10StackGuard16HandleInterruptsEv(%"class.v8::internal::StackGuard"* %1033) #3
  %1035 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %637, align 8
  %1036 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1035, i64 0, i32 0, i32 7, i32 0, i64 32
  %1037 = load i64, i64* %1036, align 8
  %1038 = trunc i64 %1034 to i32
  %1039 = trunc i64 %1037 to i32
  %1040 = icmp eq i32 %1038, %1039
  br i1 %1040, label %1077, label %1041

1041:                                             ; preds = %1030
  %1042 = load i64, i64* %997, align 8
  br label %1043

1043:                                             ; preds = %1057, %1041
  %1044 = phi i64 [ %1042, %1041 ], [ %1062, %1057 ]
  %1045 = and i64 %1044, -4294967296
  %1046 = add i64 %1044, -1
  %1047 = inttoptr i64 %1046 to i32*
  %1048 = load atomic i32, i32* %1047 monotonic, align 4
  %1049 = zext i32 %1048 to i64
  %1050 = or i64 %1045, %1049
  %1051 = add i64 %1050, 7
  %1052 = inttoptr i64 %1051 to i16*
  %1053 = load atomic i16, i16* %1052 monotonic, align 2
  %1054 = and i16 %1053, 9
  %1055 = zext i16 %1054 to i32
  switch i32 %1055, label %1057 [
    i32 8, label %1063
    i32 0, label %1056
  ]

1056:                                             ; preds = %1043
  br i1 %1031, label %1077, label %1064

1057:                                             ; preds = %1043
  %1058 = add i64 %1044, 11
  %1059 = inttoptr i64 %1058 to i32*
  %1060 = load i32, i32* %1059, align 4
  %1061 = zext i32 %1060 to i64
  %1062 = or i64 %1045, %1061
  br label %1043

1063:                                             ; preds = %1043
  br i1 %1031, label %1064, label %1077

1064:                                             ; preds = %1063, %1056
  %1065 = load i64, i64* %975, align 8
  store i64 %1065, i64* %640, align 8
  %1066 = add i64 %1065, 7
  %1067 = inttoptr i64 %1066 to %"struct.v8::internal::RegExpInstruction"*
  %1068 = add i64 %1065, 3
  %1069 = inttoptr i64 %1068 to i32*
  %1070 = load i32, i32* %1069, align 4
  %1071 = ashr i32 %1070, 4
  %1072 = sext i32 %1071 to i64
  store %"struct.v8::internal::RegExpInstruction"* %1067, %"struct.v8::internal::RegExpInstruction"** %648, align 8
  store i64 %1072, i64* %649, align 8
  %1073 = load i64, i64* %997, align 8
  store i64 %1073, i64* %651, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %726) #3
  store i64 %1073, i64* %727, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %728) #3
  call void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* nonnull sret %18, %"class.v8::internal::String"* nonnull %17, %"class.v8::internal::CombinationAssertScope"* dereferenceable(1) %639) #3
  %1074 = load i64, i64* %729, align 8
  %1075 = load i32, i32* %730, align 8
  %1076 = sext i32 %1075 to i64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %728) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %726) #3
  store i64 %1074, i64* %661, align 8
  store i64 %1076, i64* %662, align 8
  br label %1077

1077:                                             ; preds = %1064, %1063, %1056, %1030, %1002, %999
  %1078 = phi i32 [ 1, %999 ], [ 0, %1064 ], [ 0, %1002 ], [ 1, %1030 ], [ 1, %1063 ], [ 1, %1056 ]
  %1079 = phi i32 [ -1, %999 ], [ undef, %1064 ], [ undef, %1002 ], [ -1, %1030 ], [ -2, %1063 ], [ -2, %1056 ]
  %1080 = icmp eq %"class.v8::internal::Isolate"* %937, null
  br i1 %1080, label %1093, label %1081

1081:                                             ; preds = %1077
  %1082 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %949, i64 0, i32 0
  %1083 = load i64*, i64** %1082, align 8
  store i64 %951, i64* %950, align 8
  %1084 = load i32, i32* %954, align 8
  %1085 = add nsw i32 %1084, -1
  store i32 %1085, i32* %954, align 8
  %1086 = load i64*, i64** %952, align 8
  %1087 = icmp eq i64* %1086, %953
  br i1 %1087, label %1090, label %1088

1088:                                             ; preds = %1081
  store i64* %953, i64** %952, align 8
  call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %937) #3
  %1089 = load i64*, i64** %1082, align 8
  br label %1090

1090:                                             ; preds = %1088, %1081
  %1091 = phi i64* [ %1089, %1088 ], [ %961, %1081 ]
  %1092 = phi i64* [ %953, %1088 ], [ %1083, %1081 ]
  call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %1091, i64* %1092) #3
  br label %1093

1093:                                             ; preds = %1090, %1077
  %1094 = icmp eq i32 %1078, 0
  br i1 %1094, label %1095, label %1205

1095:                                             ; preds = %1093, %942
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %724) #3
  %1096 = load i32, i32* %715, align 4
  br label %1097

1097:                                             ; preds = %1095, %928
  %1098 = phi i32 [ %1096, %1095 ], [ %925, %928 ]
  %1099 = icmp sgt i32 %1098, 0
  br i1 %1099, label %1100, label %1200

1100:                                             ; preds = %1097
  %1101 = sext i32 %1098 to i64
  br label %1102

1102:                                             ; preds = %1198, %1100
  %1103 = phi i64 [ %1101, %1100 ], [ %1104, %1198 ]
  %1104 = add nsw i64 %1103, -1
  %1105 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"** %714, align 8
  %1106 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %1105, i64 %1104
  %1107 = bitcast %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %1106 to i8*
  %1108 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %1106, i64 0, i32 0
  %1109 = load i32, i32* %1108, align 8
  %1110 = getelementptr inbounds i8, i8* %1107, i64 4
  %1111 = bitcast i8* %1110 to i32*
  %1112 = load i32, i32* %1111, align 4
  %1113 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %1105, i64 %1104, i32 1
  %1114 = load i32*, i32** %1113, align 8
  %1115 = sext i32 %1109 to i64
  %1116 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %648, align 8
  %1117 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %1116, i64 %1115, i32 1
  %1118 = bitcast %union.anon.1133* %1117 to i16*
  %1119 = load i16, i16* %1118, align 4
  %1120 = icmp ugt i16 %1119, %932
  br i1 %1120, label %1181, label %1121

1121:                                             ; preds = %1102
  %1122 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %1116, i64 %1115
  %1123 = bitcast %"struct.v8::internal::RegExpInstruction"* %1122 to i8*
  %1124 = getelementptr inbounds i8, i8* %1123, i64 6
  %1125 = bitcast i8* %1124 to i16*
  %1126 = load i16, i16* %1125, align 2
  %1127 = icmp ult i16 %1126, %932
  br i1 %1127, label %1181, label %1128

1128:                                             ; preds = %1121
  %1129 = add nsw i32 %1109, 1
  %1130 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %695, align 8
  %1131 = load i32, i32* %720, align 4
  %1132 = load i32, i32* %722, align 8
  %1133 = icmp slt i32 %1131, %1132
  br i1 %1133, label %1134, label %1144

1134:                                             ; preds = %1128
  %1135 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"** %719, align 8
  %1136 = add nsw i32 %1131, 1
  store i32 %1136, i32* %720, align 4
  %1137 = sext i32 %1131 to i64
  %1138 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %1135, i64 %1137
  %1139 = bitcast %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %1138 to i8*
  %1140 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %1138, i64 0, i32 0
  store i32 %1129, i32* %1140, align 8
  %1141 = getelementptr inbounds i8, i8* %1139, i64 4
  %1142 = bitcast i8* %1141 to i32*
  store i32 %1112, i32* %1142, align 4
  %1143 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %1135, i64 %1137, i32 1
  store i32* %1114, i32** %1143, align 8
  br label %1198

1144:                                             ; preds = %1128
  %1145 = shl nsw i32 %1132, 1
  %1146 = or i32 %1145, 1
  %1147 = sext i32 %1146 to i64
  %1148 = shl nsw i64 %1147, 4
  %1149 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1130, i64 0, i32 2
  %1150 = load i64, i64* %1149, align 8
  %1151 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %1130, i64 0, i32 3
  %1152 = load i64, i64* %1151, align 8
  %1153 = sub i64 %1152, %1150
  %1154 = icmp ugt i64 %1148, %1153
  br i1 %1154, label %1155, label %1157, !prof !2

1155:                                             ; preds = %1144
  %1156 = call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %1130, i64 %1148) #3
  br label %1159

1157:                                             ; preds = %1144
  %1158 = add i64 %1150, %1148
  store i64 %1158, i64* %1149, align 8
  br label %1159

1159:                                             ; preds = %1157, %1155
  %1160 = phi i64 [ %1156, %1155 ], [ %1150, %1157 ]
  %1161 = inttoptr i64 %1160 to %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"*
  %1162 = load i32, i32* %720, align 4
  %1163 = icmp sgt i32 %1162, 0
  br i1 %1163, label %1164, label %1171

1164:                                             ; preds = %1159
  %1165 = inttoptr i64 %1160 to i8*
  %1166 = load i8*, i8** %723, align 8
  %1167 = icmp eq i32 %1162, 1
  %1168 = sext i32 %1162 to i64
  %1169 = shl nsw i64 %1168, 4
  %1170 = select i1 %1167, i64 16, i64 %1169
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1165, i8* align 1 %1166, i64 %1170, i1 false) #3
  br label %1171

1171:                                             ; preds = %1164, %1159
  store %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %1161, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"** %719, align 8
  store i32 %1146, i32* %722, align 8
  %1172 = load i32, i32* %720, align 4
  %1173 = add nsw i32 %1172, 1
  store i32 %1173, i32* %720, align 4
  %1174 = sext i32 %1172 to i64
  %1175 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %1161, i64 %1174
  %1176 = bitcast %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %1175 to i8*
  %1177 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %1175, i64 0, i32 0
  store i32 %1129, i32* %1177, align 8
  %1178 = getelementptr inbounds i8, i8* %1176, i64 4
  %1179 = bitcast i8* %1178 to i32*
  store i32 %1112, i32* %1179, align 4
  %1180 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %1161, i64 %1174, i32 1
  store i32* %1114, i32** %1180, align 8
  br label %1198

1181:                                             ; preds = %1121, %1102
  %1182 = load i32, i32* %650, align 8
  %1183 = sext i32 %1182 to i64
  %1184 = and i64 %1183, 4611686018427387900
  %1185 = icmp eq i64 %1184, 0
  br i1 %1185, label %1198, label %1186

1186:                                             ; preds = %1181
  %1187 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %691, align 8
  %1188 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %1187, null
  br i1 %1188, label %1193, label %1189

1189:                                             ; preds = %1186
  %1190 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %1187, i64 0, i32 1
  %1191 = load i64, i64* %1190, align 8
  %1192 = icmp ugt i64 %1191, %1183
  br i1 %1192, label %1198, label %1193

1193:                                             ; preds = %1189, %1186
  %1194 = getelementptr inbounds i32, i32* %1114, i64 2
  %1195 = bitcast i32* %1194 to i64*
  store i64 %1183, i64* %1195, align 8
  %1196 = load i64, i64* %716, align 8
  %1197 = bitcast i32* %1114 to i64*
  store i64 %1196, i64* %1197, align 8
  store i32* %1114, i32** %717, align 8
  br label %1198

1198:                                             ; preds = %1193, %1189, %1181, %1171, %1134
  %1199 = icmp sgt i64 %1104, 0
  br i1 %1199, label %1102, label %1200

1200:                                             ; preds = %1198, %1097
  call void @llvm.memset.p0i8.i64(i8* align 8 %718, i8 0, i64 16, i1 false) #3
  call fastcc void @_ZN2v88internal12_GLOBAL__N_114NfaInterpreterItE16RunActiveThreadsEv(%"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* nonnull %24) #3
  %1201 = load i32, i32* %663, align 8
  %1202 = load i64, i64* %662, align 8
  %1203 = trunc i64 %1202 to i32
  %1204 = icmp eq i32 %1201, %1203
  br i1 %1204, label %1207, label %921

1205:                                             ; preds = %1093, %942, %940
  %1206 = phi i32 [ -2, %942 ], [ -1, %940 ], [ %1079, %1093 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %724) #3
  br label %1236

1207:                                             ; preds = %1200, %915
  %1208 = load i8, i8* %692, align 8
  %1209 = icmp eq i8 %1208, 0
  br i1 %1209, label %1236, label %1210

1210:                                             ; preds = %921, %1207
  %1211 = load i32*, i32** %721, align 8
  %1212 = load i64, i64* %731, align 8
  %1213 = shl nuw i64 %1212, 2
  %1214 = ashr exact i64 %1213, 2
  %1215 = icmp eq i64 %1212, 0
  br i1 %1215, label %1219, label %1216

1216:                                             ; preds = %1210
  %1217 = bitcast i32* %733 to i8*
  %1218 = bitcast i32* %1211 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %1217, i8* align 4 %1218, i64 %1213, i1 false) #3
  br label %1219

1219:                                             ; preds = %1216, %1210
  %1220 = getelementptr inbounds i32, i32* %733, i64 %1214
  %1221 = add nuw nsw i32 %734, 1
  %1222 = load i32, i32* %1211, align 4
  %1223 = getelementptr inbounds i32, i32* %1211, i64 1
  %1224 = load i32, i32* %1223, align 4
  %1225 = icmp eq i32 %1224, %1222
  br i1 %1225, label %1226, label %1233

1226:                                             ; preds = %1219
  %1227 = load i64, i64* %662, align 8
  %1228 = trunc i64 %1227 to i32
  %1229 = icmp eq i32 %1222, %1228
  br i1 %1229, label %1230, label %1231

1230:                                             ; preds = %1226
  store i32 %1222, i32* %663, align 8
  br label %1236

1231:                                             ; preds = %1226
  %1232 = add nsw i32 %1222, 1
  br label %1233

1233:                                             ; preds = %1231, %1219
  %1234 = phi i32 [ %1232, %1231 ], [ %1224, %1219 ]
  store i32 %1234, i32* %663, align 8
  %1235 = icmp eq i32 %1221, %709
  br i1 %1235, label %1236, label %732

1236:                                             ; preds = %1233, %1207, %631, %605, %1230, %1205, %707, %628, %603, %104
  %1237 = phi i8* [ %32, %104 ], [ %32, %603 ], [ %32, %628 ], [ %635, %707 ], [ %635, %1205 ], [ %635, %1230 ], [ %32, %605 ], [ %32, %631 ], [ %635, %1207 ], [ %635, %1233 ]
  %1238 = phi i32 [ 0, %104 ], [ %604, %603 ], [ %619, %628 ], [ 0, %707 ], [ %1206, %1205 ], [ %1221, %1230 ], [ %106, %631 ], [ %131, %605 ], [ %709, %1233 ], [ %734, %1207 ]
  call void @llvm.lifetime.end.p0i8(i64 176, i8* nonnull %1237) #3
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %26) #3
  ret i32 %1238
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2v88internal6String14GetFlatContentERKNS0_22CombinationAssertScopeIJNS0_29PerThreadAssertScopeDebugOnlyILNS0_19PerThreadAssertTypeE0ELb0EEENS3_ILS4_1ELb0EEEEEE(%"class.v8::internal::String::FlatContent"* sret, %"class.v8::internal::String"*, %"class.v8::internal::CombinationAssertScope"* dereferenceable(1)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2v88internal12_GLOBAL__N_114NfaInterpreterIhE16RunActiveThreadsEv(%"class.v8::internal::(anonymous namespace)::NfaInterpreter"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 10
  %3 = getelementptr %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 10, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %408, label %6

6:                                                ; preds = %1
  %7 = getelementptr %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %2, i64 0, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 9, i32 0
  %9 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 8
  %10 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 4, i32 0
  %11 = getelementptr %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 5
  %12 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 12, i32 1
  %13 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %12 to i64*
  %14 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 12, i32 0, i32 0
  %15 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 14
  %16 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 10, i32 1
  %17 = bitcast %"class.v8::internal::ZoneList"* %2 to i8**
  %18 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 7, i32 0
  %19 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 7, i32 1
  %20 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %22 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %12 to i32**
  %23 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %24 = bitcast %"class.v8::internal::ZoneList"* %2 to i8*
  %25 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 11
  %26 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 11, i32 2
  %27 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter", %"class.v8::internal::(anonymous namespace)::NfaInterpreter"* %0, i64 0, i32 11, i32 1
  %28 = bitcast %"class.v8::internal::ZoneList"* %25 to i8**
  %29 = getelementptr inbounds %"class.v8::internal::ZoneList", %"class.v8::internal::ZoneList"* %25, i64 0, i32 0
  br label %30

30:                                               ; preds = %6, %405
  %31 = phi i32 [ %4, %6 ], [ %406, %405 ]
  %32 = add nsw i32 %31, -1
  %33 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"** %7, align 8
  %34 = sext i32 %32 to i64
  %35 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %33, i64 %34, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %33, i64 %34, i32 1
  %38 = load i32*, i32** %37, align 8
  store i32 %32, i32* %3, align 4
  %39 = sext i32 %36 to i64
  %40 = load i32*, i32** %8, align 8
  %41 = getelementptr inbounds i32, i32* %40, i64 %39
  %42 = load i32, i32* %41, align 4
  %43 = load i32, i32* %9, align 8
  %44 = icmp eq i32 %42, %43
  br i1 %44, label %405, label %45

45:                                               ; preds = %30
  %46 = bitcast i32* %38 to i8*
  br label %47

47:                                               ; preds = %397, %45
  %48 = phi i32 [ %43, %45 ], [ %403, %397 ]
  %49 = phi i32* [ %41, %45 ], [ %401, %397 ]
  %50 = phi i64 [ %39, %45 ], [ %399, %397 ]
  %51 = phi i32 [ %36, %45 ], [ %398, %397 ]
  store i32 %48, i32* %49, align 4
  %52 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %10, align 8
  %53 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %52, i64 %50, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %52, i64 %50, i32 1, i32 0
  %56 = load i32, i32* %55, align 4
  switch i32 %54, label %397 [
    i32 3, label %57
    i32 1, label %101
    i32 4, label %236
    i32 5, label %323
    i32 0, label %324
    i32 6, label %388
    i32 2, label %393
  ]

57:                                               ; preds = %47
  %58 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %15, align 8
  %59 = load i32, i32* %26, align 4
  %60 = load i32, i32* %27, align 8
  %61 = icmp slt i32 %59, %60
  br i1 %61, label %62, label %68

62:                                               ; preds = %57
  %63 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"** %29, align 8
  %64 = add nsw i32 %59, 1
  store i32 %64, i32* %26, align 4
  %65 = sext i32 %59 to i64
  %66 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %63, i64 %65, i32 0
  store i32 %51, i32* %66, align 8
  %67 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %63, i64 %65, i32 1
  store i32* %38, i32** %67, align 8
  br label %405

68:                                               ; preds = %57
  %69 = shl nsw i32 %60, 1
  %70 = or i32 %69, 1
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 4
  %73 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %58, i64 0, i32 2
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %58, i64 0, i32 3
  %76 = load i64, i64* %75, align 8
  %77 = sub i64 %76, %74
  %78 = icmp ugt i64 %72, %77
  br i1 %78, label %79, label %81, !prof !2

79:                                               ; preds = %68
  %80 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %58, i64 %72) #3
  br label %83

81:                                               ; preds = %68
  %82 = add i64 %74, %72
  store i64 %82, i64* %73, align 8
  br label %83

83:                                               ; preds = %81, %79
  %84 = phi i64 [ %80, %79 ], [ %74, %81 ]
  %85 = inttoptr i64 %84 to %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"*
  %86 = load i32, i32* %26, align 4
  %87 = icmp sgt i32 %86, 0
  br i1 %87, label %88, label %95

88:                                               ; preds = %83
  %89 = inttoptr i64 %84 to i8*
  %90 = load i8*, i8** %28, align 8
  %91 = icmp eq i32 %86, 1
  %92 = sext i32 %86 to i64
  %93 = shl nsw i64 %92, 4
  %94 = select i1 %91, i64 16, i64 %93
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %90, i64 %94, i1 false) #3
  br label %95

95:                                               ; preds = %88, %83
  store %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %85, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"** %29, align 8
  store i32 %70, i32* %27, align 8
  %96 = load i32, i32* %26, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %26, align 4
  %98 = sext i32 %96 to i64
  %99 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %85, i64 %98, i32 0
  store i32 %51, i32* %99, align 8
  %100 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %85, i64 %98, i32 1
  store i32* %38, i32** %100, align 8
  br label %405

101:                                              ; preds = %47
  %102 = load i8*, i8** %18, align 8
  %103 = load i64, i64* %19, align 8
  %104 = load i32, i32* %9, align 8
  switch i32 %56, label %215 [
    i32 1, label %105
    i32 3, label %107
    i32 0, label %110
    i32 2, label %117
    i32 4, label %124
    i32 5, label %169
  ]

105:                                              ; preds = %101
  %106 = icmp eq i32 %104, 0
  br i1 %106, label %234, label %217

107:                                              ; preds = %101
  %108 = trunc i64 %103 to i32
  %109 = icmp eq i32 %104, %108
  br i1 %109, label %234, label %217

110:                                              ; preds = %101
  %111 = icmp eq i32 %104, 0
  br i1 %111, label %234, label %112

112:                                              ; preds = %110
  %113 = add nsw i32 %104, -1
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %102, i64 %114
  %116 = load i8, i8* %115, align 1
  switch i8 %116, label %217 [
    i8 10, label %234
    i8 13, label %234
  ]

117:                                              ; preds = %101
  %118 = trunc i64 %103 to i32
  %119 = icmp eq i32 %104, %118
  br i1 %119, label %234, label %120

120:                                              ; preds = %117
  %121 = sext i32 %104 to i64
  %122 = getelementptr inbounds i8, i8* %102, i64 %121
  %123 = load i8, i8* %122, align 1
  switch i8 %123, label %217 [
    i8 10, label %234
    i8 13, label %234
  ]

124:                                              ; preds = %101
  %125 = trunc i64 %103 to i32
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %217, label %127

127:                                              ; preds = %124
  %128 = icmp eq i32 %104, 0
  br i1 %128, label %129, label %140

129:                                              ; preds = %127
  %130 = load i8, i8* %102, align 1
  %131 = zext i8 %130 to i32
  %132 = or i32 %131, 32
  %133 = add nsw i32 %132, -97
  %134 = icmp ult i32 %133, 26
  %135 = add nsw i32 %131, -48
  %136 = icmp ult i32 %135, 10
  %137 = or i1 %136, %134
  %138 = icmp eq i8 %130, 95
  %139 = or i1 %138, %137
  br i1 %139, label %234, label %217

140:                                              ; preds = %127
  %141 = icmp eq i32 %104, %125
  %142 = add nsw i32 %104, -1
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %102, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = zext i8 %145 to i32
  %147 = or i32 %146, 32
  %148 = add nsw i32 %147, -97
  %149 = icmp ult i32 %148, 26
  %150 = add nsw i32 %146, -48
  %151 = icmp ult i32 %150, 10
  %152 = or i1 %151, %149
  %153 = icmp eq i8 %145, 95
  %154 = or i1 %153, %152
  br i1 %141, label %216, label %155

155:                                              ; preds = %140
  %156 = sext i32 %104 to i64
  %157 = getelementptr inbounds i8, i8* %102, i64 %156
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = or i32 %159, 32
  %161 = add nsw i32 %160, -97
  %162 = icmp ult i32 %161, 26
  %163 = add nsw i32 %159, -48
  %164 = icmp ult i32 %163, 10
  %165 = or i1 %164, %162
  %166 = icmp eq i8 %158, 95
  %167 = or i1 %166, %165
  %168 = xor i1 %154, %167
  br i1 %168, label %234, label %217

169:                                              ; preds = %101
  %170 = trunc i64 %103 to i32
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %234, label %172

172:                                              ; preds = %169
  %173 = icmp eq i32 %104, 0
  br i1 %173, label %174, label %185

174:                                              ; preds = %172
  %175 = load i8, i8* %102, align 1
  %176 = zext i8 %175 to i32
  %177 = or i32 %176, 32
  %178 = add nsw i32 %177, -97
  %179 = icmp ult i32 %178, 26
  %180 = add nsw i32 %176, -48
  %181 = icmp ult i32 %180, 10
  %182 = or i1 %181, %179
  %183 = icmp eq i8 %175, 95
  %184 = or i1 %183, %182
  br i1 %184, label %217, label %234

185:                                              ; preds = %172
  %186 = icmp eq i32 %104, %170
  %187 = add nsw i32 %104, -1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i8, i8* %102, i64 %188
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i32
  %192 = or i32 %191, 32
  %193 = add nsw i32 %192, -97
  %194 = icmp ult i32 %193, 26
  %195 = add nsw i32 %191, -48
  %196 = icmp ult i32 %195, 10
  %197 = or i1 %196, %194
  %198 = icmp eq i8 %190, 95
  %199 = or i1 %198, %197
  br i1 %186, label %214, label %200

200:                                              ; preds = %185
  %201 = sext i32 %104 to i64
  %202 = getelementptr inbounds i8, i8* %102, i64 %201
  %203 = load i8, i8* %202, align 1
  %204 = zext i8 %203 to i32
  %205 = or i32 %204, 32
  %206 = add nsw i32 %205, -97
  %207 = icmp ult i32 %206, 26
  %208 = add nsw i32 %204, -48
  %209 = icmp ult i32 %208, 10
  %210 = or i1 %209, %207
  %211 = icmp eq i8 %203, 95
  %212 = or i1 %211, %210
  %213 = xor i1 %199, %212
  br i1 %213, label %217, label %234

214:                                              ; preds = %185
  br i1 %199, label %217, label %234

215:                                              ; preds = %101
  unreachable

216:                                              ; preds = %140
  br i1 %154, label %234, label %217

217:                                              ; preds = %216, %214, %200, %174, %155, %129, %124, %120, %112, %107, %105
  %218 = load i32, i32* %11, align 8
  %219 = sext i32 %218 to i64
  %220 = and i64 %219, 4611686018427387900
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %405, label %222

222:                                              ; preds = %217
  %223 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %12, align 8
  %224 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %223, null
  br i1 %224, label %229, label %225

225:                                              ; preds = %222
  %226 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %223, i64 0, i32 1
  %227 = load i64, i64* %226, align 8
  %228 = icmp ugt i64 %227, %219
  br i1 %228, label %405, label %229

229:                                              ; preds = %225, %222
  %230 = getelementptr inbounds i32, i32* %38, i64 2
  %231 = bitcast i32* %230 to i64*
  store i64 %219, i64* %231, align 8
  %232 = load i64, i64* %13, align 8
  %233 = bitcast i32* %38 to i64*
  store i64 %232, i64* %233, align 8
  store i32* %38, i32** %22, align 8
  br label %405

234:                                              ; preds = %216, %214, %200, %174, %169, %155, %129, %120, %120, %117, %112, %112, %110, %107, %105
  %235 = add nsw i32 %51, 1
  br label %397

236:                                              ; preds = %47
  %237 = load i32, i32* %11, align 8
  %238 = sext i32 %237 to i64
  %239 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %12, align 8
  %240 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %239, null
  br i1 %240, label %249, label %241

241:                                              ; preds = %236
  %242 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %239, i64 0, i32 1
  %243 = load i64, i64* %242, align 8
  %244 = icmp ult i64 %243, %238
  br i1 %244, label %249, label %245

245:                                              ; preds = %241
  %246 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %239 to i32*
  %247 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %239 to i64*
  %248 = load i64, i64* %247, align 8
  store i64 %248, i64* %13, align 8
  br label %268

249:                                              ; preds = %241, %236
  %250 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %14, align 8
  %251 = shl nsw i64 %238, 2
  %252 = add nsw i64 %251, 7
  %253 = and i64 %252, -8
  %254 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %250, i64 0, i32 2
  %255 = load i64, i64* %254, align 8
  %256 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %250, i64 0, i32 3
  %257 = load i64, i64* %256, align 8
  %258 = sub i64 %257, %255
  %259 = icmp ugt i64 %253, %258
  br i1 %259, label %260, label %262, !prof !2

260:                                              ; preds = %249
  %261 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %250, i64 %253) #3
  br label %264

262:                                              ; preds = %249
  %263 = add i64 %255, %253
  store i64 %263, i64* %254, align 8
  br label %264

264:                                              ; preds = %262, %260
  %265 = phi i64 [ %261, %260 ], [ %255, %262 ]
  %266 = inttoptr i64 %265 to i32*
  %267 = load i32, i32* %11, align 8
  br label %268

268:                                              ; preds = %264, %245
  %269 = phi i32 [ %237, %245 ], [ %267, %264 ]
  %270 = phi i32* [ %246, %245 ], [ %266, %264 ]
  %271 = icmp eq i32 %269, 0
  br i1 %271, label %276, label %272

272:                                              ; preds = %268
  %273 = sext i32 %269 to i64
  %274 = shl nuw nsw i64 %273, 2
  %275 = bitcast i32* %270 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %275, i8* align 4 %46, i64 %274, i1 false) #3
  br label %276

276:                                              ; preds = %272, %268
  %277 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %15, align 8
  %278 = load i32, i32* %3, align 4
  %279 = load i32, i32* %16, align 8
  %280 = icmp slt i32 %278, %279
  br i1 %280, label %281, label %287

281:                                              ; preds = %276
  %282 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"** %7, align 8
  %283 = add nsw i32 %278, 1
  store i32 %283, i32* %3, align 4
  %284 = sext i32 %278 to i64
  %285 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %282, i64 %284, i32 0
  store i32 %56, i32* %285, align 8
  %286 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %282, i64 %284, i32 1
  br label %320

287:                                              ; preds = %276
  %288 = shl nsw i32 %279, 1
  %289 = or i32 %288, 1
  %290 = sext i32 %289 to i64
  %291 = shl nsw i64 %290, 4
  %292 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %277, i64 0, i32 2
  %293 = load i64, i64* %292, align 8
  %294 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %277, i64 0, i32 3
  %295 = load i64, i64* %294, align 8
  %296 = sub i64 %295, %293
  %297 = icmp ugt i64 %291, %296
  br i1 %297, label %298, label %300, !prof !2

298:                                              ; preds = %287
  %299 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %277, i64 %291) #3
  br label %302

300:                                              ; preds = %287
  %301 = add i64 %293, %291
  store i64 %301, i64* %292, align 8
  br label %302

302:                                              ; preds = %300, %298
  %303 = phi i64 [ %299, %298 ], [ %293, %300 ]
  %304 = inttoptr i64 %303 to %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"*
  %305 = load i32, i32* %3, align 4
  %306 = icmp sgt i32 %305, 0
  br i1 %306, label %307, label %314

307:                                              ; preds = %302
  %308 = inttoptr i64 %303 to i8*
  %309 = load i8*, i8** %17, align 8
  %310 = icmp eq i32 %305, 1
  %311 = sext i32 %305 to i64
  %312 = shl nsw i64 %311, 4
  %313 = select i1 %310, i64 16, i64 %312
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %308, i8* align 1 %309, i64 %313, i1 false) #3
  br label %314

314:                                              ; preds = %307, %302
  store %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %304, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"** %7, align 8
  store i32 %289, i32* %16, align 8
  %315 = load i32, i32* %3, align 4
  %316 = add nsw i32 %315, 1
  store i32 %316, i32* %3, align 4
  %317 = sext i32 %315 to i64
  %318 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %304, i64 %317, i32 0
  store i32 %56, i32* %318, align 8
  %319 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %304, i64 %317, i32 1
  br label %320

320:                                              ; preds = %314, %281
  %321 = phi i32** [ %319, %314 ], [ %286, %281 ]
  store i32* %270, i32** %321, align 8
  %322 = add nsw i32 %51, 1
  br label %397

323:                                              ; preds = %47
  br label %397

324:                                              ; preds = %47
  %325 = load i8, i8* %20, align 8, !range !3
  %326 = icmp eq i8 %325, 0
  br i1 %326, label %327, label %330

327:                                              ; preds = %324
  %328 = load i32, i32* %11, align 8
  %329 = sext i32 %328 to i64
  store i32* %38, i32** %21, align 8
  store i64 %329, i64* %23, align 8
  br label %353

330:                                              ; preds = %324
  %331 = load i32*, i32** %21, align 8
  %332 = load i32, i32* %11, align 8
  %333 = sext i32 %332 to i64
  %334 = and i64 %333, 4611686018427387900
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %343, label %336

336:                                              ; preds = %330
  %337 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %12, align 8
  %338 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %337, null
  br i1 %338, label %344, label %339

339:                                              ; preds = %336
  %340 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %337, i64 0, i32 1
  %341 = load i64, i64* %340, align 8
  %342 = icmp ugt i64 %341, %333
  br i1 %342, label %343, label %344

343:                                              ; preds = %330, %339
  store i32* %38, i32** %21, align 8
  store i64 %333, i64* %23, align 8
  br label %355

344:                                              ; preds = %336, %339
  %345 = getelementptr inbounds i32, i32* %331, i64 2
  %346 = bitcast i32* %345 to i64*
  store i64 %333, i64* %346, align 8
  %347 = load i64, i64* %13, align 8
  %348 = bitcast i32* %331 to i64*
  store i64 %347, i64* %348, align 8
  store i32* %331, i32** %22, align 8
  %349 = load i8, i8* %20, align 8
  %350 = icmp eq i8 %349, 0
  %351 = load i32, i32* %11, align 8
  %352 = sext i32 %351 to i64
  store i32* %38, i32** %21, align 8
  store i64 %352, i64* %23, align 8
  br i1 %350, label %353, label %355

353:                                              ; preds = %344, %327
  %354 = phi i32 [ %328, %327 ], [ %351, %344 ]
  store i8 1, i8* %20, align 8
  br label %355

355:                                              ; preds = %343, %353, %344
  %356 = phi i32 [ %351, %344 ], [ %354, %353 ], [ %332, %343 ]
  %357 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"** %7, align 8
  %358 = load i32, i32* %3, align 4
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %357, i64 %359
  %361 = icmp eq i32 %358, 0
  br i1 %361, label %362, label %363

362:                                              ; preds = %383, %355
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 16, i1 false) #3
  br label %405

363:                                              ; preds = %355, %386
  %364 = phi i32 [ %387, %386 ], [ %356, %355 ]
  %365 = phi %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* [ %384, %386 ], [ %357, %355 ]
  %366 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %365, i64 0, i32 1
  %367 = load i32*, i32** %366, align 8
  %368 = sext i32 %364 to i64
  %369 = and i64 %368, 4611686018427387900
  %370 = icmp eq i64 %369, 0
  br i1 %370, label %383, label %371

371:                                              ; preds = %363
  %372 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %12, align 8
  %373 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %372, null
  br i1 %373, label %378, label %374

374:                                              ; preds = %371
  %375 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %372, i64 0, i32 1
  %376 = load i64, i64* %375, align 8
  %377 = icmp ugt i64 %376, %368
  br i1 %377, label %383, label %378

378:                                              ; preds = %374, %371
  %379 = getelementptr inbounds i32, i32* %367, i64 2
  %380 = bitcast i32* %379 to i64*
  store i64 %368, i64* %380, align 8
  %381 = load i64, i64* %13, align 8
  %382 = bitcast i32* %367 to i64*
  store i64 %381, i64* %382, align 8
  store i32* %367, i32** %22, align 8
  br label %383

383:                                              ; preds = %378, %374, %363
  %384 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %365, i64 1
  %385 = icmp eq %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned char>::InterpreterThread"* %384, %360
  br i1 %385, label %362, label %386

386:                                              ; preds = %383
  %387 = load i32, i32* %11, align 8
  br label %363

388:                                              ; preds = %47
  %389 = load i32, i32* %9, align 8
  %390 = sext i32 %56 to i64
  %391 = getelementptr inbounds i32, i32* %38, i64 %390
  store i32 %389, i32* %391, align 4
  %392 = add nsw i32 %51, 1
  br label %397

393:                                              ; preds = %47
  %394 = sext i32 %56 to i64
  %395 = getelementptr inbounds i32, i32* %38, i64 %394
  store i32 -1, i32* %395, align 4
  %396 = add nsw i32 %51, 1
  br label %397

397:                                              ; preds = %393, %388, %323, %320, %234, %47
  %398 = phi i32 [ %51, %47 ], [ %396, %393 ], [ %392, %388 ], [ %56, %323 ], [ %322, %320 ], [ %235, %234 ]
  %399 = sext i32 %398 to i64
  %400 = load i32*, i32** %8, align 8
  %401 = getelementptr inbounds i32, i32* %400, i64 %399
  %402 = load i32, i32* %401, align 4
  %403 = load i32, i32* %9, align 8
  %404 = icmp eq i32 %402, %403
  br i1 %404, label %405, label %47

405:                                              ; preds = %397, %30, %62, %95, %217, %225, %229, %362
  %406 = load i32, i32* %3, align 4
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %408, label %30

408:                                              ; preds = %405, %1
  ret void
}

declare zeroext i1 @_ZNK2v88internal15StackLimitCheck15JsHasOverflowedEm(%"class.v8::internal::StackLimitCheck"*, i64) local_unnamed_addr #2

declare i64 @_ZN2v88internal7Isolate13StackOverflowEv(%"class.v8::internal::Isolate"*) local_unnamed_addr #2

declare i64 @_ZN2v88internal10StackGuard16HandleInterruptsEv(%"class.v8::internal::StackGuard"*) local_unnamed_addr #2

declare i64 @_ZN2v88internal23GetCurrentStackPositionEv() local_unnamed_addr #2

declare i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"*, i64) local_unnamed_addr #2

declare i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #2

declare void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64*, i64*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2v88internal12_GLOBAL__N_114NfaInterpreterItE16RunActiveThreadsEv(%"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 10
  %3 = getelementptr %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 10, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %408, label %6

6:                                                ; preds = %1
  %7 = getelementptr %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %2, i64 0, i32 0
  %8 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 9, i32 0
  %9 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 8
  %10 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 4, i32 0
  %11 = getelementptr %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 5
  %12 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 12, i32 1
  %13 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %12 to i64*
  %14 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 12, i32 0, i32 0
  %15 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 14
  %16 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 10, i32 1
  %17 = bitcast %"class.v8::internal::ZoneList.1143"* %2 to i8**
  %18 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 7, i32 0
  %19 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 7, i32 1
  %20 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %22 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %12 to i32**
  %23 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %24 = bitcast %"class.v8::internal::ZoneList.1143"* %2 to i8*
  %25 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 11
  %26 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 11, i32 2
  %27 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141", %"class.v8::internal::(anonymous namespace)::NfaInterpreter.1141"* %0, i64 0, i32 11, i32 1
  %28 = bitcast %"class.v8::internal::ZoneList.1143"* %25 to i8**
  %29 = getelementptr inbounds %"class.v8::internal::ZoneList.1143", %"class.v8::internal::ZoneList.1143"* %25, i64 0, i32 0
  br label %30

30:                                               ; preds = %6, %405
  %31 = phi i32 [ %4, %6 ], [ %406, %405 ]
  %32 = add nsw i32 %31, -1
  %33 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"** %7, align 8
  %34 = sext i32 %32 to i64
  %35 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %33, i64 %34, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %33, i64 %34, i32 1
  %38 = load i32*, i32** %37, align 8
  store i32 %32, i32* %3, align 4
  %39 = sext i32 %36 to i64
  %40 = load i32*, i32** %8, align 8
  %41 = getelementptr inbounds i32, i32* %40, i64 %39
  %42 = load i32, i32* %41, align 4
  %43 = load i32, i32* %9, align 8
  %44 = icmp eq i32 %42, %43
  br i1 %44, label %405, label %45

45:                                               ; preds = %30
  %46 = bitcast i32* %38 to i8*
  br label %47

47:                                               ; preds = %397, %45
  %48 = phi i32 [ %43, %45 ], [ %403, %397 ]
  %49 = phi i32* [ %41, %45 ], [ %401, %397 ]
  %50 = phi i64 [ %39, %45 ], [ %399, %397 ]
  %51 = phi i32 [ %36, %45 ], [ %398, %397 ]
  store i32 %48, i32* %49, align 4
  %52 = load %"struct.v8::internal::RegExpInstruction"*, %"struct.v8::internal::RegExpInstruction"** %10, align 8
  %53 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %52, i64 %50, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %"struct.v8::internal::RegExpInstruction", %"struct.v8::internal::RegExpInstruction"* %52, i64 %50, i32 1, i32 0
  %56 = load i32, i32* %55, align 4
  switch i32 %54, label %397 [
    i32 3, label %57
    i32 1, label %101
    i32 4, label %236
    i32 5, label %323
    i32 0, label %324
    i32 6, label %388
    i32 2, label %393
  ]

57:                                               ; preds = %47
  %58 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %15, align 8
  %59 = load i32, i32* %26, align 4
  %60 = load i32, i32* %27, align 8
  %61 = icmp slt i32 %59, %60
  br i1 %61, label %62, label %68

62:                                               ; preds = %57
  %63 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"** %29, align 8
  %64 = add nsw i32 %59, 1
  store i32 %64, i32* %26, align 4
  %65 = sext i32 %59 to i64
  %66 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %63, i64 %65, i32 0
  store i32 %51, i32* %66, align 8
  %67 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %63, i64 %65, i32 1
  store i32* %38, i32** %67, align 8
  br label %405

68:                                               ; preds = %57
  %69 = shl nsw i32 %60, 1
  %70 = or i32 %69, 1
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 4
  %73 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %58, i64 0, i32 2
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %58, i64 0, i32 3
  %76 = load i64, i64* %75, align 8
  %77 = sub i64 %76, %74
  %78 = icmp ugt i64 %72, %77
  br i1 %78, label %79, label %81, !prof !2

79:                                               ; preds = %68
  %80 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %58, i64 %72) #3
  br label %83

81:                                               ; preds = %68
  %82 = add i64 %74, %72
  store i64 %82, i64* %73, align 8
  br label %83

83:                                               ; preds = %81, %79
  %84 = phi i64 [ %80, %79 ], [ %74, %81 ]
  %85 = inttoptr i64 %84 to %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"*
  %86 = load i32, i32* %26, align 4
  %87 = icmp sgt i32 %86, 0
  br i1 %87, label %88, label %95

88:                                               ; preds = %83
  %89 = inttoptr i64 %84 to i8*
  %90 = load i8*, i8** %28, align 8
  %91 = icmp eq i32 %86, 1
  %92 = sext i32 %86 to i64
  %93 = shl nsw i64 %92, 4
  %94 = select i1 %91, i64 16, i64 %93
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %90, i64 %94, i1 false) #3
  br label %95

95:                                               ; preds = %88, %83
  store %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %85, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"** %29, align 8
  store i32 %70, i32* %27, align 8
  %96 = load i32, i32* %26, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %26, align 4
  %98 = sext i32 %96 to i64
  %99 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %85, i64 %98, i32 0
  store i32 %51, i32* %99, align 8
  %100 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %85, i64 %98, i32 1
  store i32* %38, i32** %100, align 8
  br label %405

101:                                              ; preds = %47
  %102 = load i16*, i16** %18, align 8
  %103 = load i64, i64* %19, align 8
  %104 = load i32, i32* %9, align 8
  switch i32 %56, label %215 [
    i32 1, label %105
    i32 3, label %107
    i32 0, label %110
    i32 2, label %117
    i32 4, label %124
    i32 5, label %169
  ]

105:                                              ; preds = %101
  %106 = icmp eq i32 %104, 0
  br i1 %106, label %234, label %217

107:                                              ; preds = %101
  %108 = trunc i64 %103 to i32
  %109 = icmp eq i32 %104, %108
  br i1 %109, label %234, label %217

110:                                              ; preds = %101
  %111 = icmp eq i32 %104, 0
  br i1 %111, label %234, label %112

112:                                              ; preds = %110
  %113 = add nsw i32 %104, -1
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i16, i16* %102, i64 %114
  %116 = load i16, i16* %115, align 2
  switch i16 %116, label %217 [
    i16 8232, label %234
    i16 13, label %234
    i16 10, label %234
    i16 8233, label %234
  ]

117:                                              ; preds = %101
  %118 = trunc i64 %103 to i32
  %119 = icmp eq i32 %104, %118
  br i1 %119, label %234, label %120

120:                                              ; preds = %117
  %121 = sext i32 %104 to i64
  %122 = getelementptr inbounds i16, i16* %102, i64 %121
  %123 = load i16, i16* %122, align 2
  switch i16 %123, label %217 [
    i16 8232, label %234
    i16 13, label %234
    i16 10, label %234
    i16 8233, label %234
  ]

124:                                              ; preds = %101
  %125 = trunc i64 %103 to i32
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %217, label %127

127:                                              ; preds = %124
  %128 = icmp eq i32 %104, 0
  br i1 %128, label %129, label %140

129:                                              ; preds = %127
  %130 = load i16, i16* %102, align 2
  %131 = zext i16 %130 to i32
  %132 = or i32 %131, 32
  %133 = add nsw i32 %132, -97
  %134 = icmp ult i32 %133, 26
  %135 = add nsw i32 %131, -48
  %136 = icmp ult i32 %135, 10
  %137 = or i1 %136, %134
  %138 = icmp eq i16 %130, 95
  %139 = or i1 %138, %137
  br i1 %139, label %234, label %217

140:                                              ; preds = %127
  %141 = icmp eq i32 %104, %125
  %142 = add nsw i32 %104, -1
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i16, i16* %102, i64 %143
  %145 = load i16, i16* %144, align 2
  %146 = zext i16 %145 to i32
  %147 = or i32 %146, 32
  %148 = add nsw i32 %147, -97
  %149 = icmp ult i32 %148, 26
  %150 = add nsw i32 %146, -48
  %151 = icmp ult i32 %150, 10
  %152 = or i1 %151, %149
  %153 = icmp eq i16 %145, 95
  %154 = or i1 %153, %152
  br i1 %141, label %216, label %155

155:                                              ; preds = %140
  %156 = sext i32 %104 to i64
  %157 = getelementptr inbounds i16, i16* %102, i64 %156
  %158 = load i16, i16* %157, align 2
  %159 = zext i16 %158 to i32
  %160 = or i32 %159, 32
  %161 = add nsw i32 %160, -97
  %162 = icmp ult i32 %161, 26
  %163 = add nsw i32 %159, -48
  %164 = icmp ult i32 %163, 10
  %165 = or i1 %164, %162
  %166 = icmp eq i16 %158, 95
  %167 = or i1 %166, %165
  %168 = xor i1 %154, %167
  br i1 %168, label %234, label %217

169:                                              ; preds = %101
  %170 = trunc i64 %103 to i32
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %234, label %172

172:                                              ; preds = %169
  %173 = icmp eq i32 %104, 0
  br i1 %173, label %174, label %185

174:                                              ; preds = %172
  %175 = load i16, i16* %102, align 2
  %176 = zext i16 %175 to i32
  %177 = or i32 %176, 32
  %178 = add nsw i32 %177, -97
  %179 = icmp ult i32 %178, 26
  %180 = add nsw i32 %176, -48
  %181 = icmp ult i32 %180, 10
  %182 = or i1 %181, %179
  %183 = icmp eq i16 %175, 95
  %184 = or i1 %183, %182
  br i1 %184, label %217, label %234

185:                                              ; preds = %172
  %186 = icmp eq i32 %104, %170
  %187 = add nsw i32 %104, -1
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i16, i16* %102, i64 %188
  %190 = load i16, i16* %189, align 2
  %191 = zext i16 %190 to i32
  %192 = or i32 %191, 32
  %193 = add nsw i32 %192, -97
  %194 = icmp ult i32 %193, 26
  %195 = add nsw i32 %191, -48
  %196 = icmp ult i32 %195, 10
  %197 = or i1 %196, %194
  %198 = icmp eq i16 %190, 95
  %199 = or i1 %198, %197
  br i1 %186, label %214, label %200

200:                                              ; preds = %185
  %201 = sext i32 %104 to i64
  %202 = getelementptr inbounds i16, i16* %102, i64 %201
  %203 = load i16, i16* %202, align 2
  %204 = zext i16 %203 to i32
  %205 = or i32 %204, 32
  %206 = add nsw i32 %205, -97
  %207 = icmp ult i32 %206, 26
  %208 = add nsw i32 %204, -48
  %209 = icmp ult i32 %208, 10
  %210 = or i1 %209, %207
  %211 = icmp eq i16 %203, 95
  %212 = or i1 %211, %210
  %213 = xor i1 %199, %212
  br i1 %213, label %217, label %234

214:                                              ; preds = %185
  br i1 %199, label %217, label %234

215:                                              ; preds = %101
  unreachable

216:                                              ; preds = %140
  br i1 %154, label %234, label %217

217:                                              ; preds = %216, %214, %200, %174, %155, %129, %124, %120, %112, %107, %105
  %218 = load i32, i32* %11, align 8
  %219 = sext i32 %218 to i64
  %220 = and i64 %219, 4611686018427387900
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %405, label %222

222:                                              ; preds = %217
  %223 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %12, align 8
  %224 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %223, null
  br i1 %224, label %229, label %225

225:                                              ; preds = %222
  %226 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %223, i64 0, i32 1
  %227 = load i64, i64* %226, align 8
  %228 = icmp ugt i64 %227, %219
  br i1 %228, label %405, label %229

229:                                              ; preds = %225, %222
  %230 = getelementptr inbounds i32, i32* %38, i64 2
  %231 = bitcast i32* %230 to i64*
  store i64 %219, i64* %231, align 8
  %232 = load i64, i64* %13, align 8
  %233 = bitcast i32* %38 to i64*
  store i64 %232, i64* %233, align 8
  store i32* %38, i32** %22, align 8
  br label %405

234:                                              ; preds = %216, %214, %200, %174, %169, %155, %129, %120, %120, %120, %120, %117, %112, %112, %112, %112, %110, %107, %105
  %235 = add nsw i32 %51, 1
  br label %397

236:                                              ; preds = %47
  %237 = load i32, i32* %11, align 8
  %238 = sext i32 %237 to i64
  %239 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %12, align 8
  %240 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %239, null
  br i1 %240, label %249, label %241

241:                                              ; preds = %236
  %242 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %239, i64 0, i32 1
  %243 = load i64, i64* %242, align 8
  %244 = icmp ult i64 %243, %238
  br i1 %244, label %249, label %245

245:                                              ; preds = %241
  %246 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %239 to i32*
  %247 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %239 to i64*
  %248 = load i64, i64* %247, align 8
  store i64 %248, i64* %13, align 8
  br label %268

249:                                              ; preds = %241, %236
  %250 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %14, align 8
  %251 = shl nsw i64 %238, 2
  %252 = add nsw i64 %251, 7
  %253 = and i64 %252, -8
  %254 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %250, i64 0, i32 2
  %255 = load i64, i64* %254, align 8
  %256 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %250, i64 0, i32 3
  %257 = load i64, i64* %256, align 8
  %258 = sub i64 %257, %255
  %259 = icmp ugt i64 %253, %258
  br i1 %259, label %260, label %262, !prof !2

260:                                              ; preds = %249
  %261 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %250, i64 %253) #3
  br label %264

262:                                              ; preds = %249
  %263 = add i64 %255, %253
  store i64 %263, i64* %254, align 8
  br label %264

264:                                              ; preds = %262, %260
  %265 = phi i64 [ %261, %260 ], [ %255, %262 ]
  %266 = inttoptr i64 %265 to i32*
  %267 = load i32, i32* %11, align 8
  br label %268

268:                                              ; preds = %264, %245
  %269 = phi i32 [ %237, %245 ], [ %267, %264 ]
  %270 = phi i32* [ %246, %245 ], [ %266, %264 ]
  %271 = icmp eq i32 %269, 0
  br i1 %271, label %276, label %272

272:                                              ; preds = %268
  %273 = sext i32 %269 to i64
  %274 = shl nuw nsw i64 %273, 2
  %275 = bitcast i32* %270 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %275, i8* align 4 %46, i64 %274, i1 false) #3
  br label %276

276:                                              ; preds = %272, %268
  %277 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %15, align 8
  %278 = load i32, i32* %3, align 4
  %279 = load i32, i32* %16, align 8
  %280 = icmp slt i32 %278, %279
  br i1 %280, label %281, label %287

281:                                              ; preds = %276
  %282 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"** %7, align 8
  %283 = add nsw i32 %278, 1
  store i32 %283, i32* %3, align 4
  %284 = sext i32 %278 to i64
  %285 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %282, i64 %284, i32 0
  store i32 %56, i32* %285, align 8
  %286 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %282, i64 %284, i32 1
  br label %320

287:                                              ; preds = %276
  %288 = shl nsw i32 %279, 1
  %289 = or i32 %288, 1
  %290 = sext i32 %289 to i64
  %291 = shl nsw i64 %290, 4
  %292 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %277, i64 0, i32 2
  %293 = load i64, i64* %292, align 8
  %294 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %277, i64 0, i32 3
  %295 = load i64, i64* %294, align 8
  %296 = sub i64 %295, %293
  %297 = icmp ugt i64 %291, %296
  br i1 %297, label %298, label %300, !prof !2

298:                                              ; preds = %287
  %299 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %277, i64 %291) #3
  br label %302

300:                                              ; preds = %287
  %301 = add i64 %293, %291
  store i64 %301, i64* %292, align 8
  br label %302

302:                                              ; preds = %300, %298
  %303 = phi i64 [ %299, %298 ], [ %293, %300 ]
  %304 = inttoptr i64 %303 to %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"*
  %305 = load i32, i32* %3, align 4
  %306 = icmp sgt i32 %305, 0
  br i1 %306, label %307, label %314

307:                                              ; preds = %302
  %308 = inttoptr i64 %303 to i8*
  %309 = load i8*, i8** %17, align 8
  %310 = icmp eq i32 %305, 1
  %311 = sext i32 %305 to i64
  %312 = shl nsw i64 %311, 4
  %313 = select i1 %310, i64 16, i64 %312
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %308, i8* align 1 %309, i64 %313, i1 false) #3
  br label %314

314:                                              ; preds = %307, %302
  store %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %304, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"** %7, align 8
  store i32 %289, i32* %16, align 8
  %315 = load i32, i32* %3, align 4
  %316 = add nsw i32 %315, 1
  store i32 %316, i32* %3, align 4
  %317 = sext i32 %315 to i64
  %318 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %304, i64 %317, i32 0
  store i32 %56, i32* %318, align 8
  %319 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %304, i64 %317, i32 1
  br label %320

320:                                              ; preds = %314, %281
  %321 = phi i32** [ %319, %314 ], [ %286, %281 ]
  store i32* %270, i32** %321, align 8
  %322 = add nsw i32 %51, 1
  br label %397

323:                                              ; preds = %47
  br label %397

324:                                              ; preds = %47
  %325 = load i8, i8* %20, align 8, !range !3
  %326 = icmp eq i8 %325, 0
  br i1 %326, label %327, label %330

327:                                              ; preds = %324
  %328 = load i32, i32* %11, align 8
  %329 = sext i32 %328 to i64
  store i32* %38, i32** %21, align 8
  store i64 %329, i64* %23, align 8
  br label %353

330:                                              ; preds = %324
  %331 = load i32*, i32** %21, align 8
  %332 = load i32, i32* %11, align 8
  %333 = sext i32 %332 to i64
  %334 = and i64 %333, 4611686018427387900
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %343, label %336

336:                                              ; preds = %330
  %337 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %12, align 8
  %338 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %337, null
  br i1 %338, label %344, label %339

339:                                              ; preds = %336
  %340 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %337, i64 0, i32 1
  %341 = load i64, i64* %340, align 8
  %342 = icmp ugt i64 %341, %333
  br i1 %342, label %343, label %344

343:                                              ; preds = %330, %339
  store i32* %38, i32** %21, align 8
  store i64 %333, i64* %23, align 8
  br label %355

344:                                              ; preds = %336, %339
  %345 = getelementptr inbounds i32, i32* %331, i64 2
  %346 = bitcast i32* %345 to i64*
  store i64 %333, i64* %346, align 8
  %347 = load i64, i64* %13, align 8
  %348 = bitcast i32* %331 to i64*
  store i64 %347, i64* %348, align 8
  store i32* %331, i32** %22, align 8
  %349 = load i8, i8* %20, align 8
  %350 = icmp eq i8 %349, 0
  %351 = load i32, i32* %11, align 8
  %352 = sext i32 %351 to i64
  store i32* %38, i32** %21, align 8
  store i64 %352, i64* %23, align 8
  br i1 %350, label %353, label %355

353:                                              ; preds = %344, %327
  %354 = phi i32 [ %328, %327 ], [ %351, %344 ]
  store i8 1, i8* %20, align 8
  br label %355

355:                                              ; preds = %343, %353, %344
  %356 = phi i32 [ %351, %344 ], [ %354, %353 ], [ %332, %343 ]
  %357 = load %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"*, %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"** %7, align 8
  %358 = load i32, i32* %3, align 4
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %357, i64 %359
  %361 = icmp eq i32 %358, 0
  br i1 %361, label %362, label %363

362:                                              ; preds = %383, %355
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 16, i1 false) #3
  br label %405

363:                                              ; preds = %355, %386
  %364 = phi i32 [ %387, %386 ], [ %356, %355 ]
  %365 = phi %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* [ %384, %386 ], [ %357, %355 ]
  %366 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %365, i64 0, i32 1
  %367 = load i32*, i32** %366, align 8
  %368 = sext i32 %364 to i64
  %369 = and i64 %368, 4611686018427387900
  %370 = icmp eq i64 %369, 0
  br i1 %370, label %383, label %371

371:                                              ; preds = %363
  %372 = load %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"** %12, align 8
  %373 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %372, null
  br i1 %373, label %378, label %374

374:                                              ; preds = %371
  %375 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<int>::FreeBlock"* %372, i64 0, i32 1
  %376 = load i64, i64* %375, align 8
  %377 = icmp ugt i64 %376, %368
  br i1 %377, label %383, label %378

378:                                              ; preds = %374, %371
  %379 = getelementptr inbounds i32, i32* %367, i64 2
  %380 = bitcast i32* %379 to i64*
  store i64 %368, i64* %380, align 8
  %381 = load i64, i64* %13, align 8
  %382 = bitcast i32* %367 to i64*
  store i64 %381, i64* %382, align 8
  store i32* %367, i32** %22, align 8
  br label %383

383:                                              ; preds = %378, %374, %363
  %384 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread", %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %365, i64 1
  %385 = icmp eq %"struct.v8::internal::(anonymous namespace)::NfaInterpreter<unsigned short>::InterpreterThread"* %384, %360
  br i1 %385, label %362, label %386

386:                                              ; preds = %383
  %387 = load i32, i32* %11, align 8
  br label %363

388:                                              ; preds = %47
  %389 = load i32, i32* %9, align 8
  %390 = sext i32 %56 to i64
  %391 = getelementptr inbounds i32, i32* %38, i64 %390
  store i32 %389, i32* %391, align 4
  %392 = add nsw i32 %51, 1
  br label %397

393:                                              ; preds = %47
  %394 = sext i32 %56 to i64
  %395 = getelementptr inbounds i32, i32* %38, i64 %394
  store i32 -1, i32* %395, align 4
  %396 = add nsw i32 %51, 1
  br label %397

397:                                              ; preds = %393, %388, %323, %320, %234, %47
  %398 = phi i32 [ %51, %47 ], [ %396, %393 ], [ %392, %388 ], [ %56, %323 ], [ %322, %320 ], [ %235, %234 ]
  %399 = sext i32 %398 to i64
  %400 = load i32*, i32** %8, align 8
  %401 = getelementptr inbounds i32, i32* %400, i64 %399
  %402 = load i32, i32* %401, align 4
  %403 = load i32, i32* %9, align 8
  %404 = icmp eq i32 %402, %403
  br i1 %404, label %405, label %47

405:                                              ; preds = %397, %30, %62, %95, %217, %225, %229, %362
  %406 = load i32, i32* %3, align 4
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %408, label %30

408:                                              ; preds = %405, %1
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
