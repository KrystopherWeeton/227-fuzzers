; ModuleID = '../../third_party/skia/src/pathops/SkPathOpsLine.cpp'
source_filename = "../../third_party/skia/src/pathops/SkPathOpsLine.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkDLine = type { [2 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine* nocapture readonly, double) local_unnamed_addr #0 align 2 {
  %3 = fcmp oeq double %1, 0.000000e+00
  br i1 %3, label %4, label %7

4:                                                ; preds = %2
  %5 = bitcast %struct.SkDLine* %0 to <2 x double>*
  %6 = load <2 x double>, <2 x double>* %5, align 8
  br label %27

7:                                                ; preds = %2
  %8 = fcmp oeq double %1, 1.000000e+00
  br i1 %8, label %9, label %13

9:                                                ; preds = %7
  %10 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 1, i32 0
  %11 = bitcast double* %10 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  br label %27

13:                                               ; preds = %7
  %14 = fsub double 1.000000e+00, %1
  %15 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 1, i32 0
  %16 = bitcast %struct.SkDLine* %0 to <2 x double>*
  %17 = load <2 x double>, <2 x double>* %16, align 8
  %18 = insertelement <2 x double> undef, double %14, i32 0
  %19 = shufflevector <2 x double> %18, <2 x double> undef, <2 x i32> zeroinitializer
  %20 = fmul <2 x double> %19, %17
  %21 = bitcast double* %15 to <2 x double>*
  %22 = load <2 x double>, <2 x double>* %21, align 8
  %23 = insertelement <2 x double> undef, double %1, i32 0
  %24 = shufflevector <2 x double> %23, <2 x double> undef, <2 x i32> zeroinitializer
  %25 = fmul <2 x double> %22, %24
  %26 = fadd <2 x double> %20, %25
  br label %27

27:                                               ; preds = %13, %9, %4
  %28 = phi <2 x double> [ %6, %4 ], [ %12, %9 ], [ %26, %13 ]
  %29 = extractelement <2 x double> %28, i32 0
  %30 = insertvalue { double, double } undef, double %29, 0
  %31 = extractelement <2 x double> %28, i32 1
  %32 = insertvalue { double, double } %30, double %31, 1
  ret { double, double } %32
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine* nocapture readonly, %struct.SkDPoint* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fcmp oeq double %4, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = fcmp oeq double %10, %12
  br i1 %13, label %25, label %14

14:                                               ; preds = %2, %8
  %15 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 1, i32 0
  %16 = load double, double* %15, align 8
  %17 = fcmp oeq double %4, %16
  br i1 %17, label %18, label %25

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %20 = load double, double* %19, align 8
  %21 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 1, i32 1
  %22 = load double, double* %21, align 8
  %23 = fcmp oeq double %20, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %18
  br label %25

25:                                               ; preds = %14, %24, %18, %8
  %26 = phi double [ 0.000000e+00, %8 ], [ 1.000000e+00, %24 ], [ -1.000000e+00, %18 ], [ -1.000000e+00, %14 ]
  ret double %26
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* nocapture readonly, %struct.SkDPoint* nocapture readonly dereferenceable(16), i8*) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 0, i32 0
  %5 = load double, double* %4, align 8
  %6 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %7 = load double, double* %6, align 8
  %8 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 1, i32 0
  %9 = load double, double* %8, align 8
  %10 = fptrunc double %5 to float
  %11 = fptrunc double %7 to float
  %12 = fptrunc double %9 to float
  %13 = tail call zeroext i1 @_Z17AlmostBetweenUlpsfff(float %10, float %11, float %12) #4
  br i1 %13, label %14, label %120

14:                                               ; preds = %3
  %15 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 0, i32 1
  %16 = load double, double* %15, align 8
  %17 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %18 = load double, double* %17, align 8
  %19 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 1, i32 1
  %20 = load double, double* %19, align 8
  %21 = fptrunc double %16 to float
  %22 = fptrunc double %18 to float
  %23 = fptrunc double %20 to float
  %24 = tail call zeroext i1 @_Z17AlmostBetweenUlpsfff(float %21, float %22, float %23) #4
  br i1 %24, label %25, label %120

25:                                               ; preds = %14
  %26 = bitcast double* %8 to <2 x double>*
  %27 = load <2 x double>, <2 x double>* %26, align 8
  %28 = bitcast %struct.SkDLine* %0 to <2 x double>*
  %29 = load <2 x double>, <2 x double>* %28, align 8
  %30 = extractelement <2 x double> %29, i32 0
  %31 = extractelement <2 x double> %27, i32 0
  %32 = fsub double %31, %30
  %33 = extractelement <2 x double> %27, i32 1
  %34 = load double, double* %6, align 8
  %35 = fsub double %34, %30
  %36 = load double, double* %17, align 8
  %37 = insertelement <2 x double> undef, double %33, i32 0
  %38 = insertelement <2 x double> %37, double %36, i32 1
  %39 = shufflevector <2 x double> %29, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %40 = fsub <2 x double> %38, %39
  %41 = insertelement <2 x double> undef, double %32, i32 0
  %42 = shufflevector <2 x double> %41, <2 x double> undef, <2 x i32> zeroinitializer
  %43 = insertelement <2 x double> %41, double %35, i32 1
  %44 = fmul <2 x double> %42, %43
  %45 = shufflevector <2 x double> %40, <2 x double> undef, <2 x i32> zeroinitializer
  %46 = fmul <2 x double> %45, %40
  %47 = fadd <2 x double> %44, %46
  %48 = extractelement <2 x double> %47, i32 1
  %49 = extractelement <2 x double> %47, i32 0
  %50 = shufflevector <2 x double> <double 0.000000e+00, double undef>, <2 x double> %47, <2 x i32> <i32 0, i32 2>
  %51 = shufflevector <2 x double> %47, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %52 = fsub <2 x double> %50, %51
  %53 = extractelement <2 x double> %52, i32 0
  %54 = extractelement <2 x double> %52, i32 1
  %55 = fmul double %53, %54
  %56 = fcmp ugt double %55, 0.000000e+00
  br i1 %56, label %120, label %57

57:                                               ; preds = %25
  %58 = fcmp une double %49, 0.000000e+00
  br i1 %58, label %59, label %120

59:                                               ; preds = %57
  %60 = fdiv double %48, %49
  %61 = fcmp oeq double %60, 0.000000e+00
  br i1 %61, label %73, label %62

62:                                               ; preds = %59
  %63 = fcmp oeq double %60, 1.000000e+00
  br i1 %63, label %73, label %64

64:                                               ; preds = %62
  %65 = fsub double 1.000000e+00, %60
  %66 = insertelement <2 x double> undef, double %65, i32 0
  %67 = shufflevector <2 x double> %66, <2 x double> undef, <2 x i32> zeroinitializer
  %68 = fmul <2 x double> %67, %29
  %69 = insertelement <2 x double> undef, double %60, i32 0
  %70 = shufflevector <2 x double> %69, <2 x double> undef, <2 x i32> zeroinitializer
  %71 = fmul <2 x double> %70, %27
  %72 = fadd <2 x double> %68, %71
  br label %73

73:                                               ; preds = %62, %59, %64
  %74 = phi <2 x double> [ %72, %64 ], [ %29, %59 ], [ %27, %62 ]
  %75 = extractelement <2 x double> %74, i32 0
  %76 = fsub double %75, %34
  %77 = extractelement <2 x double> %74, i32 1
  %78 = fsub double %77, %36
  %79 = fmul double %76, %76
  %80 = fmul double %78, %78
  %81 = fadd double %79, %80
  %82 = tail call double @sqrt(double %81) #4
  %83 = load double, double* %15, align 8
  %84 = load double, double* %4, align 8
  %85 = fcmp olt double %83, %84
  %86 = load double, double* %8, align 8
  %87 = select i1 %85, double %83, double %84
  %88 = fcmp olt double %86, %87
  %89 = load double, double* %19, align 8
  %90 = select i1 %88, double %86, double %87
  %91 = fcmp olt double %89, %90
  %92 = select i1 %91, double %89, double %90
  %93 = fcmp olt double %84, %83
  %94 = load double, double* %15, align 8
  %95 = load double, double* %4, align 8
  %96 = select i1 %93, double %94, double %95
  %97 = fcmp olt double %96, %86
  %98 = load double, double* %8, align 8
  %99 = select i1 %97, double %98, double %96
  %100 = fcmp olt double %99, %89
  %101 = load double, double* %19, align 8
  %102 = select i1 %100, double %101, double %99
  %103 = fsub double -0.000000e+00, %92
  %104 = fcmp olt double %102, %103
  %105 = select i1 %104, double %103, double %102
  %106 = fadd double %82, %105
  %107 = fptrunc double %105 to float
  %108 = fptrunc double %106 to float
  %109 = tail call zeroext i1 @_Z19AlmostEqualUlps_Pinff(float %107, float %108) #4
  br i1 %109, label %110, label %120

110:                                              ; preds = %73
  %111 = icmp eq i8* %2, null
  br i1 %111, label %115, label %112

112:                                              ; preds = %110
  %113 = fcmp une float %107, %108
  %114 = zext i1 %113 to i8
  store i8 %114, i8* %2, align 1
  br label %115

115:                                              ; preds = %110, %112
  %116 = fcmp olt double %60, 0x3CD0000000000000
  %117 = fcmp ogt double %60, 0x3FEFFFFFFFFFFFF8
  %118 = select i1 %117, double 1.000000e+00, double %60
  %119 = select i1 %116, double 0.000000e+00, double %118
  br label %120

120:                                              ; preds = %115, %73, %25, %57, %3, %14
  %121 = phi double [ -1.000000e+00, %14 ], [ -1.000000e+00, %3 ], [ -1.000000e+00, %25 ], [ 0.000000e+00, %57 ], [ %119, %115 ], [ -1.000000e+00, %73 ]
  ret double %121
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7SkDLine7nearRayERK8SkDPoint(%struct.SkDLine* nocapture readonly, %struct.SkDPoint* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 1, i32 0
  %4 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 0, i32 0
  %5 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 1, i32 1
  %6 = bitcast double* %3 to <2 x double>*
  %7 = load <2 x double>, <2 x double>* %6, align 8
  %8 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %0, i64 0, i32 0, i64 0, i32 1
  %9 = bitcast %struct.SkDLine* %0 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = extractelement <2 x double> %10, i32 0
  %12 = extractelement <2 x double> %7, i32 0
  %13 = fsub double %12, %11
  %14 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = fsub double %15, %11
  %17 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %18 = load double, double* %17, align 8
  %19 = insertelement <2 x double> %7, double %18, i32 0
  %20 = shufflevector <2 x double> %10, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %21 = fsub <2 x double> %19, %20
  %22 = insertelement <2 x double> undef, double %13, i32 0
  %23 = shufflevector <2 x double> %22, <2 x double> undef, <2 x i32> zeroinitializer
  %24 = insertelement <2 x double> undef, double %16, i32 0
  %25 = insertelement <2 x double> %24, double %13, i32 1
  %26 = fmul <2 x double> %23, %25
  %27 = shufflevector <2 x double> %21, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %28 = fmul <2 x double> %27, %21
  %29 = fadd <2 x double> %26, %28
  %30 = extractelement <2 x double> %29, i32 0
  %31 = extractelement <2 x double> %29, i32 1
  %32 = fdiv double %30, %31
  %33 = fcmp oeq double %32, 0.000000e+00
  br i1 %33, label %45, label %34

34:                                               ; preds = %2
  %35 = fcmp oeq double %32, 1.000000e+00
  br i1 %35, label %45, label %36

36:                                               ; preds = %34
  %37 = fsub double 1.000000e+00, %32
  %38 = insertelement <2 x double> undef, double %37, i32 0
  %39 = shufflevector <2 x double> %38, <2 x double> undef, <2 x i32> zeroinitializer
  %40 = fmul <2 x double> %39, %10
  %41 = insertelement <2 x double> undef, double %32, i32 0
  %42 = shufflevector <2 x double> %41, <2 x double> undef, <2 x i32> zeroinitializer
  %43 = fmul <2 x double> %42, %7
  %44 = fadd <2 x double> %40, %43
  br label %45

45:                                               ; preds = %34, %2, %36
  %46 = phi <2 x double> [ %44, %36 ], [ %10, %2 ], [ %7, %34 ]
  %47 = extractelement <2 x double> %46, i32 0
  %48 = fsub double %47, %15
  %49 = extractelement <2 x double> %46, i32 1
  %50 = fsub double %49, %18
  %51 = fmul double %48, %48
  %52 = fmul double %50, %50
  %53 = fadd double %51, %52
  %54 = tail call double @sqrt(double %53) #4
  %55 = load double, double* %8, align 8
  %56 = load double, double* %4, align 8
  %57 = fcmp olt double %55, %56
  %58 = load double, double* %3, align 8
  %59 = select i1 %57, double %55, double %56
  %60 = fcmp olt double %58, %59
  %61 = load double, double* %5, align 8
  %62 = select i1 %60, double %58, double %59
  %63 = fcmp olt double %61, %62
  %64 = select i1 %63, double %61, double %62
  %65 = fcmp olt double %56, %55
  %66 = load double, double* %8, align 8
  %67 = load double, double* %4, align 8
  %68 = select i1 %65, double %66, double %67
  %69 = fcmp olt double %68, %58
  %70 = load double, double* %3, align 8
  %71 = select i1 %69, double %70, double %68
  %72 = fcmp olt double %71, %61
  %73 = load double, double* %5, align 8
  %74 = select i1 %72, double %73, double %71
  %75 = fsub double -0.000000e+00, %64
  %76 = fcmp olt double %74, %75
  %77 = select i1 %76, double %75, double %74
  %78 = fadd double %54, %77
  %79 = fptrunc double %77 to float
  %80 = fptrunc double %78 to float
  %81 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %79, float %80) #4
  ret i1 %81
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZN7SkDLine11ExactPointHERK8SkDPointddd(%struct.SkDPoint* nocapture readonly dereferenceable(16), double, double, double) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %6 = load double, double* %5, align 8
  %7 = fcmp oeq double %6, %3
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = fcmp oeq double %10, %1
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = fcmp oeq double %10, %2
  br i1 %13, label %15, label %14

14:                                               ; preds = %12, %4
  br label %15

15:                                               ; preds = %12, %8, %14
  %16 = phi double [ -1.000000e+00, %14 ], [ 0.000000e+00, %8 ], [ 1.000000e+00, %12 ]
  ret double %16
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN7SkDLine10NearPointHERK8SkDPointddd(%struct.SkDPoint* nocapture readonly dereferenceable(16), double, double, double) local_unnamed_addr #1 align 2 {
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  store double %1, double* %5, align 8
  store double %2, double* %6, align 8
  store double %3, double* %7, align 8
  %8 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %9 = load double, double* %8, align 8
  %10 = fptrunc double %9 to float
  %11 = fptrunc double %3 to float
  %12 = tail call zeroext i1 @_Z16AlmostBequalUlpsff(float %10, float %11) #4
  br i1 %12, label %13, label %59

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = fptrunc double %1 to float
  %17 = fptrunc double %15 to float
  %18 = fptrunc double %2 to float
  %19 = tail call zeroext i1 @_Z17AlmostBetweenUlpsfff(float %16, float %17, float %18) #4
  br i1 %19, label %20, label %59

20:                                               ; preds = %13
  %21 = load double, double* %14, align 8
  %22 = fsub double %21, %1
  %23 = fsub double %2, %1
  %24 = fdiv double %22, %23
  %25 = fcmp olt double %24, 0x3CD0000000000000
  %26 = fcmp ogt double %24, 0x3FEFFFFFFFFFFFF8
  %27 = select i1 %26, double 1.000000e+00, double %24
  %28 = select i1 %25, double 0.000000e+00, double %27
  %29 = fsub double 1.000000e+00, %28
  %30 = fmul double %29, %1
  %31 = fmul double %28, %2
  %32 = fadd double %31, %30
  %33 = load double, double* %8, align 8
  %34 = fsub double %33, %3
  %35 = fsub double %21, %32
  %36 = fmul double %34, %34
  %37 = fmul double %35, %35
  %38 = fadd double %36, %37
  %39 = tail call double @sqrt(double %38) #4
  %40 = fcmp olt double %1, %3
  %41 = select i1 %40, double %1, double %3
  %42 = fcmp ogt double %41, %2
  %43 = select i1 %42, double %2, double %41
  %44 = fcmp olt double %3, %1
  %45 = load double, double* %5, align 8
  %46 = load double, double* %7, align 8
  %47 = select i1 %44, double %45, double %46
  %48 = fcmp olt double %47, %2
  %49 = load double, double* %6, align 8
  %50 = select i1 %48, double %49, double %47
  %51 = fsub double -0.000000e+00, %43
  %52 = fcmp olt double %50, %51
  %53 = select i1 %52, double %51, double %50
  %54 = fadd double %39, %53
  %55 = fptrunc double %53 to float
  %56 = fptrunc double %54 to float
  %57 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %55, float %56) #4
  %58 = select i1 %57, double %28, double -1.000000e+00
  br label %59

59:                                               ; preds = %13, %4, %20
  %60 = phi double [ %58, %20 ], [ -1.000000e+00, %4 ], [ -1.000000e+00, %13 ]
  ret double %60
}

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZN7SkDLine11ExactPointVERK8SkDPointddd(%struct.SkDPoint* nocapture readonly dereferenceable(16), double, double, double) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fcmp oeq double %6, %3
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %10 = load double, double* %9, align 8
  %11 = fcmp oeq double %10, %1
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = fcmp oeq double %10, %2
  br i1 %13, label %15, label %14

14:                                               ; preds = %12, %4
  br label %15

15:                                               ; preds = %12, %8, %14
  %16 = phi double [ -1.000000e+00, %14 ], [ 0.000000e+00, %8 ], [ 1.000000e+00, %12 ]
  ret double %16
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN7SkDLine10NearPointVERK8SkDPointddd(%struct.SkDPoint* nocapture readonly dereferenceable(16), double, double, double) local_unnamed_addr #1 align 2 {
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  store double %1, double* %5, align 8
  store double %2, double* %6, align 8
  store double %3, double* %7, align 8
  %8 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 0
  %9 = load double, double* %8, align 8
  %10 = fptrunc double %9 to float
  %11 = fptrunc double %3 to float
  %12 = tail call zeroext i1 @_Z16AlmostBequalUlpsff(float %10, float %11) #4
  br i1 %12, label %13, label %59

13:                                               ; preds = %4
  %14 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %15 = load double, double* %14, align 8
  %16 = fptrunc double %1 to float
  %17 = fptrunc double %15 to float
  %18 = fptrunc double %2 to float
  %19 = tail call zeroext i1 @_Z17AlmostBetweenUlpsfff(float %16, float %17, float %18) #4
  br i1 %19, label %20, label %59

20:                                               ; preds = %13
  %21 = load double, double* %14, align 8
  %22 = fsub double %21, %1
  %23 = fsub double %2, %1
  %24 = fdiv double %22, %23
  %25 = fcmp olt double %24, 0x3CD0000000000000
  %26 = fcmp ogt double %24, 0x3FEFFFFFFFFFFFF8
  %27 = select i1 %26, double 1.000000e+00, double %24
  %28 = select i1 %25, double 0.000000e+00, double %27
  %29 = fsub double 1.000000e+00, %28
  %30 = fmul double %29, %1
  %31 = fmul double %28, %2
  %32 = fadd double %31, %30
  %33 = load double, double* %8, align 8
  %34 = fsub double %33, %3
  %35 = fsub double %21, %32
  %36 = fmul double %34, %34
  %37 = fmul double %35, %35
  %38 = fadd double %36, %37
  %39 = tail call double @sqrt(double %38) #4
  %40 = fcmp olt double %1, %3
  %41 = select i1 %40, double %1, double %3
  %42 = fcmp ogt double %41, %2
  %43 = select i1 %42, double %2, double %41
  %44 = fcmp olt double %3, %1
  %45 = load double, double* %5, align 8
  %46 = load double, double* %7, align 8
  %47 = select i1 %44, double %45, double %46
  %48 = fcmp olt double %47, %2
  %49 = load double, double* %6, align 8
  %50 = select i1 %48, double %49, double %47
  %51 = fsub double -0.000000e+00, %43
  %52 = fcmp olt double %50, %51
  %53 = select i1 %52, double %51, double %50
  %54 = fadd double %39, %53
  %55 = fptrunc double %53 to float
  %56 = fptrunc double %54 to float
  %57 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %55, float %56) #4
  %58 = select i1 %57, double %28, double -1.000000e+00
  br label %59

59:                                               ; preds = %13, %4, %20
  %60 = phi double [ %58, %20 ], [ -1.000000e+00, %4 ], [ -1.000000e+00, %13 ]
  ret double %60
}

declare zeroext i1 @_Z17AlmostBetweenUlpsfff(float, float, float) local_unnamed_addr #3

declare zeroext i1 @_Z19AlmostEqualUlps_Pinff(float, float) local_unnamed_addr #3

declare zeroext i1 @_Z16RoughlyEqualUlpsff(float, float) local_unnamed_addr #3

declare zeroext i1 @_Z16AlmostBequalUlpsff(float, float) local_unnamed_addr #3

declare zeroext i1 @_Z15AlmostEqualUlpsff(float, float) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
