; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/sum_squares_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/sum_squares_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden i64 @aom_sum_squares_2d_i16_avx2(i16*, i32, i32, i32) local_unnamed_addr #0 {
  %5 = icmp eq i32 %2, 4
  %6 = icmp eq i32 %3, 4
  %7 = and i1 %5, %6
  br i1 %7, label %8, label %10, !prof !2

8:                                                ; preds = %4
  %9 = tail call i64 @aom_sum_squares_2d_i16_4x4_sse2(i16* %0, i32 %1) #4
  br label %144

10:                                               ; preds = %4
  %11 = and i32 %3, 3
  %12 = icmp eq i32 %11, 0
  %13 = and i1 %5, %12
  br i1 %13, label %14, label %16, !prof !2

14:                                               ; preds = %10
  %15 = tail call i64 @aom_sum_squares_2d_i16_4xn_sse2(i16* %0, i32 %1, i32 %3) #4
  br label %144

16:                                               ; preds = %10
  %17 = icmp eq i32 %2, 8
  %18 = and i1 %17, %12
  br i1 %18, label %19, label %21, !prof !2

19:                                               ; preds = %16
  %20 = tail call i64 @aom_sum_squares_2d_i16_nxn_sse2(i16* %0, i32 %1, i32 8, i32 %3) #4
  br label %144

21:                                               ; preds = %16
  %22 = and i32 %2, 15
  %23 = or i32 %11, %22
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %142, !prof !2

25:                                               ; preds = %21
  %26 = icmp sgt i32 %3, 0
  br i1 %26, label %27, label %134

27:                                               ; preds = %25
  %28 = icmp sgt i32 %2, 0
  %29 = sext i32 %1 to i64
  %30 = shl nsw i32 %1, 1
  %31 = sext i32 %30 to i64
  %32 = mul nsw i32 %1, 3
  %33 = sext i32 %32 to i64
  %34 = shl nsw i32 %1, 2
  %35 = sext i32 %34 to i64
  %36 = sext i32 %2 to i64
  %37 = add nsw i64 %36, -1
  %38 = lshr i64 %37, 4
  %39 = add nuw nsw i64 %38, 1
  %40 = and i64 %39, 1
  %41 = icmp eq i64 %38, 0
  %42 = sub nuw nsw i64 %39, %40
  %43 = icmp eq i64 %40, 0
  br label %44

44:                                               ; preds = %77, %27
  %45 = phi i16* [ %0, %27 ], [ %83, %77 ]
  %46 = phi <4 x i64> [ zeroinitializer, %27 ], [ %82, %77 ]
  %47 = phi i32 [ 0, %27 ], [ %84, %77 ]
  br i1 %28, label %48, label %77

48:                                               ; preds = %44
  br i1 %41, label %49, label %86

49:                                               ; preds = %86, %48
  %50 = phi <8 x i32> [ undef, %48 ], [ %130, %86 ]
  %51 = phi i64 [ 0, %48 ], [ %131, %86 ]
  %52 = phi <8 x i32> [ zeroinitializer, %48 ], [ %130, %86 ]
  br i1 %43, label %74, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds i16, i16* %45, i64 %51
  %55 = bitcast i16* %54 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 1
  %57 = getelementptr inbounds i16, i16* %54, i64 %29
  %58 = bitcast i16* %57 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 1
  %60 = getelementptr inbounds i16, i16* %54, i64 %31
  %61 = bitcast i16* %60 to <16 x i16>*
  %62 = load <16 x i16>, <16 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %54, i64 %33
  %64 = bitcast i16* %63 to <16 x i16>*
  %65 = load <16 x i16>, <16 x i16>* %64, align 1
  %66 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %56, <16 x i16> %56) #4
  %67 = add <8 x i32> %66, %52
  %68 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %59, <16 x i16> %59) #4
  %69 = add <8 x i32> %67, %68
  %70 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %62, <16 x i16> %62) #4
  %71 = add <8 x i32> %69, %70
  %72 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %65, <16 x i16> %65) #4
  %73 = add <8 x i32> %71, %72
  br label %74

74:                                               ; preds = %49, %53
  %75 = phi <8 x i32> [ %50, %49 ], [ %73, %53 ]
  %76 = bitcast <8 x i32> %75 to <4 x i64>
  br label %77

77:                                               ; preds = %74, %44
  %78 = phi <4 x i64> [ %76, %74 ], [ zeroinitializer, %44 ]
  %79 = and <4 x i64> %78, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %80 = add <4 x i64> %79, %46
  %81 = lshr <4 x i64> %78, <i64 32, i64 32, i64 32, i64 32>
  %82 = add <4 x i64> %80, %81
  %83 = getelementptr inbounds i16, i16* %45, i64 %35
  %84 = add nuw nsw i32 %47, 4
  %85 = icmp slt i32 %84, %3
  br i1 %85, label %44, label %134

86:                                               ; preds = %48, %86
  %87 = phi i64 [ %131, %86 ], [ 0, %48 ]
  %88 = phi <8 x i32> [ %130, %86 ], [ zeroinitializer, %48 ]
  %89 = phi i64 [ %132, %86 ], [ %42, %48 ]
  %90 = getelementptr inbounds i16, i16* %45, i64 %87
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 1
  %93 = getelementptr inbounds i16, i16* %90, i64 %29
  %94 = bitcast i16* %93 to <16 x i16>*
  %95 = load <16 x i16>, <16 x i16>* %94, align 1
  %96 = getelementptr inbounds i16, i16* %90, i64 %31
  %97 = bitcast i16* %96 to <16 x i16>*
  %98 = load <16 x i16>, <16 x i16>* %97, align 1
  %99 = getelementptr inbounds i16, i16* %90, i64 %33
  %100 = bitcast i16* %99 to <16 x i16>*
  %101 = load <16 x i16>, <16 x i16>* %100, align 1
  %102 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %92, <16 x i16> %92) #4
  %103 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %95, <16 x i16> %95) #4
  %104 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %98, <16 x i16> %98) #4
  %105 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %101, <16 x i16> %101) #4
  %106 = add <8 x i32> %102, %88
  %107 = add <8 x i32> %106, %103
  %108 = add <8 x i32> %107, %104
  %109 = add <8 x i32> %108, %105
  %110 = or i64 %87, 16
  %111 = getelementptr inbounds i16, i16* %45, i64 %110
  %112 = bitcast i16* %111 to <16 x i16>*
  %113 = load <16 x i16>, <16 x i16>* %112, align 1
  %114 = getelementptr inbounds i16, i16* %111, i64 %29
  %115 = bitcast i16* %114 to <16 x i16>*
  %116 = load <16 x i16>, <16 x i16>* %115, align 1
  %117 = getelementptr inbounds i16, i16* %111, i64 %31
  %118 = bitcast i16* %117 to <16 x i16>*
  %119 = load <16 x i16>, <16 x i16>* %118, align 1
  %120 = getelementptr inbounds i16, i16* %111, i64 %33
  %121 = bitcast i16* %120 to <16 x i16>*
  %122 = load <16 x i16>, <16 x i16>* %121, align 1
  %123 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %113, <16 x i16> %113) #4
  %124 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %116, <16 x i16> %116) #4
  %125 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %119, <16 x i16> %119) #4
  %126 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %122, <16 x i16> %122) #4
  %127 = add <8 x i32> %123, %109
  %128 = add <8 x i32> %127, %124
  %129 = add <8 x i32> %128, %125
  %130 = add <8 x i32> %129, %126
  %131 = add nuw nsw i64 %87, 32
  %132 = add i64 %89, -2
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %49, label %86

134:                                              ; preds = %77, %25
  %135 = phi <4 x i64> [ zeroinitializer, %25 ], [ %82, %77 ]
  %136 = shufflevector <4 x i64> %135, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %137 = shufflevector <4 x i64> %135, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %138 = add <2 x i64> %137, %136
  %139 = shufflevector <2 x i64> %138, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %140 = add <2 x i64> %139, %138
  %141 = extractelement <2 x i64> %140, i32 0
  br label %144

142:                                              ; preds = %21
  %143 = tail call i64 @aom_sum_squares_2d_i16_c(i16* %0, i32 %1, i32 %2, i32 %3) #4
  br label %144

144:                                              ; preds = %142, %134, %19, %14, %8
  %145 = phi i64 [ %9, %8 ], [ %15, %14 ], [ %20, %19 ], [ %141, %134 ], [ %143, %142 ]
  ret i64 %145
}

declare i64 @aom_sum_squares_2d_i16_4x4_sse2(i16*, i32) local_unnamed_addr #1

declare i64 @aom_sum_squares_2d_i16_4xn_sse2(i16*, i32, i32) local_unnamed_addr #1

declare i64 @aom_sum_squares_2d_i16_nxn_sse2(i16*, i32, i32, i32) local_unnamed_addr #1

declare i64 @aom_sum_squares_2d_i16_c(i16*, i32, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @aom_sum_sse_2d_i16_avx2(i16*, i32, i32, i32, i32*) local_unnamed_addr #0 {
  %6 = icmp eq i32 %2, 4
  %7 = icmp eq i32 %3, 4
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %5
  %10 = tail call i64 @aom_sum_sse_2d_i16_4x4_sse2(i16* %0, i32 %1, i32* %4) #4
  br label %117

11:                                               ; preds = %5
  %12 = and i32 %3, 3
  %13 = icmp eq i32 %12, 0
  %14 = and i1 %6, %13
  br i1 %14, label %15, label %17, !prof !2

15:                                               ; preds = %11
  %16 = tail call i64 @aom_sum_sse_2d_i16_4xn_sse2(i16* %0, i32 %1, i32 %3, i32* %4) #4
  br label %117

17:                                               ; preds = %11
  %18 = icmp eq i32 %2, 8
  %19 = and i1 %18, %13
  br i1 %19, label %20, label %22, !prof !2

20:                                               ; preds = %17
  %21 = tail call i64 @aom_sum_sse_2d_i16_nxn_sse2(i16* %0, i32 %1, i32 8, i32 %3, i32* %4) #4
  br label %117

22:                                               ; preds = %17
  %23 = and i32 %2, 15
  %24 = or i32 %12, %23
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %115, !prof !2

26:                                               ; preds = %22
  %27 = icmp sgt i32 %3, 0
  br i1 %27, label %28, label %90

28:                                               ; preds = %26
  %29 = icmp sgt i32 %2, 0
  %30 = sext i32 %1 to i64
  %31 = shl nsw i32 %1, 1
  %32 = sext i32 %31 to i64
  %33 = mul nsw i32 %1, 3
  %34 = sext i32 %33 to i64
  %35 = shl nsw i32 %1, 2
  %36 = sext i32 %35 to i64
  %37 = sext i32 %2 to i64
  br label %38

38:                                               ; preds = %46, %28
  %39 = phi i16* [ %0, %28 ], [ %56, %46 ]
  %40 = phi <4 x i64> [ zeroinitializer, %28 ], [ %55, %46 ]
  %41 = phi <4 x i64> [ zeroinitializer, %28 ], [ %49, %46 ]
  %42 = phi <8 x i32> [ zeroinitializer, %28 ], [ %48, %46 ]
  %43 = phi i32 [ 0, %28 ], [ %57, %46 ]
  br i1 %29, label %59, label %46

44:                                               ; preds = %59
  %45 = bitcast <8 x i32> %79 to <4 x i64>
  br label %46

46:                                               ; preds = %44, %38
  %47 = phi <8 x i32> [ %87, %44 ], [ zeroinitializer, %38 ]
  %48 = phi <8 x i32> [ %79, %44 ], [ %42, %38 ]
  %49 = phi <4 x i64> [ %45, %44 ], [ %41, %38 ]
  %50 = shufflevector <8 x i32> %47, <8 x i32> <i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 4, i32 12, i32 5, i32 13>
  %51 = bitcast <8 x i32> %50 to <4 x i64>
  %52 = shufflevector <8 x i32> %47, <8 x i32> <i32 undef, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 0, i32 0>, <8 x i32> <i32 2, i32 10, i32 3, i32 11, i32 6, i32 14, i32 7, i32 15>
  %53 = bitcast <8 x i32> %52 to <4 x i64>
  %54 = add <4 x i64> %40, %51
  %55 = add <4 x i64> %54, %53
  %56 = getelementptr inbounds i16, i16* %39, i64 %36
  %57 = add nuw nsw i32 %43, 4
  %58 = icmp slt i32 %57, %3
  br i1 %58, label %38, label %90

59:                                               ; preds = %38, %59
  %60 = phi i64 [ %88, %59 ], [ 0, %38 ]
  %61 = phi <8 x i32> [ %79, %59 ], [ %42, %38 ]
  %62 = phi <8 x i32> [ %87, %59 ], [ zeroinitializer, %38 ]
  %63 = getelementptr inbounds i16, i16* %39, i64 %60
  %64 = bitcast i16* %63 to <16 x i16>*
  %65 = load <16 x i16>, <16 x i16>* %64, align 1
  %66 = getelementptr inbounds i16, i16* %63, i64 %30
  %67 = bitcast i16* %66 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 1
  %69 = getelementptr inbounds i16, i16* %63, i64 %32
  %70 = bitcast i16* %69 to <16 x i16>*
  %71 = load <16 x i16>, <16 x i16>* %70, align 1
  %72 = getelementptr inbounds i16, i16* %63, i64 %34
  %73 = bitcast i16* %72 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 1
  %75 = add <16 x i16> %68, %65
  %76 = add <16 x i16> %75, %71
  %77 = add <16 x i16> %76, %74
  %78 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %77, <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #4
  %79 = add <8 x i32> %78, %61
  %80 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %65, <16 x i16> %65) #4
  %81 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %68, <16 x i16> %68) #4
  %82 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %71, <16 x i16> %71) #4
  %83 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %74, <16 x i16> %74) #4
  %84 = add <8 x i32> %80, %62
  %85 = add <8 x i32> %84, %81
  %86 = add <8 x i32> %85, %82
  %87 = add <8 x i32> %86, %83
  %88 = add nuw nsw i64 %60, 16
  %89 = icmp slt i64 %88, %37
  br i1 %89, label %59, label %44

90:                                               ; preds = %46, %26
  %91 = phi <4 x i64> [ zeroinitializer, %26 ], [ %49, %46 ]
  %92 = phi <4 x i64> [ zeroinitializer, %26 ], [ %55, %46 ]
  %93 = shufflevector <4 x i64> %91, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %94 = shufflevector <4 x i64> %91, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %95 = bitcast <2 x i64> %94 to <4 x i32>
  %96 = bitcast <2 x i64> %93 to <4 x i32>
  %97 = add <4 x i32> %96, %95
  %98 = bitcast <4 x i32> %97 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %100 = bitcast <16 x i8> %99 to <4 x i32>
  %101 = add <4 x i32> %97, %100
  %102 = bitcast <4 x i32> %101 to <16 x i8>
  %103 = shufflevector <16 x i8> %102, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %104 = bitcast <16 x i8> %103 to <4 x i32>
  %105 = add <4 x i32> %101, %104
  %106 = extractelement <4 x i32> %105, i32 0
  %107 = load i32, i32* %4, align 4
  %108 = add nsw i32 %106, %107
  store i32 %108, i32* %4, align 4
  %109 = shufflevector <4 x i64> %92, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %110 = shufflevector <4 x i64> %92, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %111 = add <2 x i64> %110, %109
  %112 = shufflevector <2 x i64> %111, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %113 = add <2 x i64> %112, %111
  %114 = extractelement <2 x i64> %113, i32 0
  br label %117

115:                                              ; preds = %22
  %116 = tail call i64 @aom_sum_sse_2d_i16_c(i16* %0, i32 %1, i32 %2, i32 %3, i32* %4) #4
  br label %117

117:                                              ; preds = %115, %90, %20, %15, %9
  %118 = phi i64 [ %10, %9 ], [ %16, %15 ], [ %21, %20 ], [ %114, %90 ], [ %116, %115 ]
  ret i64 %118
}

declare i64 @aom_sum_sse_2d_i16_4x4_sse2(i16*, i32, i32*) local_unnamed_addr #1

declare i64 @aom_sum_sse_2d_i16_4xn_sse2(i16*, i32, i32, i32*) local_unnamed_addr #1

declare i64 @aom_sum_sse_2d_i16_nxn_sse2(i16*, i32, i32, i32, i32*) local_unnamed_addr #1

declare i64 @aom_sum_sse_2d_i16_c(i16*, i32, i32, i32, i32*) local_unnamed_addr #1

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @aom_var_2d_u8_avx2(i8* nocapture readonly, i32, i32, i32) local_unnamed_addr #2 {
  %5 = add nsw i32 %2, -31
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %18

7:                                                ; preds = %4
  %8 = add nsw i32 %3, -7
  %9 = icmp sgt i32 %8, 0
  %10 = sext i32 %1 to i64
  %11 = and i32 %3, -8
  %12 = sext i32 %5 to i64
  %13 = and i32 %3, 1
  %14 = icmp eq i32 %13, 0
  %15 = sub i32 0, %3
  br label %41

16:                                               ; preds = %260
  %17 = trunc i64 %299 to i32
  br label %18

18:                                               ; preds = %16, %4
  %19 = phi i32 [ 0, %4 ], [ %17, %16 ]
  %20 = phi i64 [ 0, %4 ], [ %298, %16 ]
  %21 = phi i64 [ 0, %4 ], [ %282, %16 ]
  %22 = icmp sgt i32 %3, 0
  br i1 %22, label %23, label %410

23:                                               ; preds = %18
  %24 = icmp slt i32 %19, %2
  %25 = sext i32 %1 to i64
  %26 = zext i32 %19 to i64
  %27 = zext i32 %2 to i64
  %28 = sub nsw i64 %27, %26
  %29 = sub nsw i64 %27, %26
  %30 = add nsw i64 %29, -8
  %31 = lshr i64 %30, 3
  %32 = add nuw nsw i64 %31, 1
  %33 = icmp ult i64 %28, 8
  %34 = and i64 %28, -8
  %35 = add nsw i64 %34, %26
  %36 = and i64 %32, 1
  %37 = icmp eq i64 %31, 0
  %38 = sub nuw nsw i64 %32, %36
  %39 = icmp eq i64 %36, 0
  %40 = icmp eq i64 %28, %34
  br label %301

41:                                               ; preds = %7, %260
  %42 = phi i64 [ 0, %7 ], [ %299, %260 ]
  %43 = phi i64 [ 0, %7 ], [ %282, %260 ]
  %44 = phi i64 [ 0, %7 ], [ %298, %260 ]
  %45 = getelementptr inbounds i8, i8* %0, i64 %42
  br i1 %9, label %75, label %46

46:                                               ; preds = %75, %41
  %47 = phi i32 [ 0, %41 ], [ %11, %75 ]
  %48 = phi i64 [ %44, %41 ], [ %219, %75 ]
  %49 = phi i64 [ %43, %41 ], [ %203, %75 ]
  %50 = phi i8* [ %45, %41 ], [ %181, %75 ]
  %51 = icmp slt i32 %47, %3
  br i1 %51, label %52, label %260

52:                                               ; preds = %46
  %53 = xor i32 %47, -1
  br i1 %14, label %67, label %54

54:                                               ; preds = %52
  %55 = bitcast i8* %50 to <32 x i8>*
  %56 = load <32 x i8>, <32 x i8>* %55, align 1
  %57 = shufflevector <32 x i8> %56, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %58 = shufflevector <32 x i8> %56, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %59 = bitcast <32 x i8> %57 to <16 x i16>
  %60 = bitcast <32 x i8> %58 to <16 x i16>
  %61 = add <16 x i16> %59, %60
  %62 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %59, <16 x i16> %59) #4
  %63 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %60, <16 x i16> %60) #4
  %64 = add <8 x i32> %62, %63
  %65 = getelementptr inbounds i8, i8* %50, i64 %10
  %66 = or i32 %47, 1
  br label %67

67:                                               ; preds = %54, %52
  %68 = phi <16 x i16> [ %61, %54 ], [ undef, %52 ]
  %69 = phi <8 x i32> [ %64, %54 ], [ undef, %52 ]
  %70 = phi i8* [ %65, %54 ], [ %50, %52 ]
  %71 = phi <16 x i16> [ %61, %54 ], [ zeroinitializer, %52 ]
  %72 = phi <8 x i32> [ %64, %54 ], [ zeroinitializer, %52 ]
  %73 = phi i32 [ %66, %54 ], [ %47, %52 ]
  %74 = icmp eq i32 %53, %15
  br i1 %74, label %255, label %222

75:                                               ; preds = %41, %75
  %76 = phi i8* [ %181, %75 ], [ %45, %41 ]
  %77 = phi i64 [ %203, %75 ], [ %43, %41 ]
  %78 = phi i64 [ %219, %75 ], [ %44, %41 ]
  %79 = phi i32 [ %220, %75 ], [ 0, %41 ]
  %80 = bitcast i8* %76 to <32 x i8>*
  %81 = load <32 x i8>, <32 x i8>* %80, align 1
  %82 = getelementptr inbounds i8, i8* %76, i64 %10
  %83 = bitcast i8* %82 to <32 x i8>*
  %84 = load <32 x i8>, <32 x i8>* %83, align 1
  %85 = getelementptr inbounds i8, i8* %82, i64 %10
  %86 = bitcast i8* %85 to <32 x i8>*
  %87 = load <32 x i8>, <32 x i8>* %86, align 1
  %88 = getelementptr inbounds i8, i8* %85, i64 %10
  %89 = bitcast i8* %88 to <32 x i8>*
  %90 = load <32 x i8>, <32 x i8>* %89, align 1
  %91 = getelementptr inbounds i8, i8* %88, i64 %10
  %92 = bitcast i8* %91 to <32 x i8>*
  %93 = load <32 x i8>, <32 x i8>* %92, align 1
  %94 = getelementptr inbounds i8, i8* %91, i64 %10
  %95 = bitcast i8* %94 to <32 x i8>*
  %96 = load <32 x i8>, <32 x i8>* %95, align 1
  %97 = getelementptr inbounds i8, i8* %94, i64 %10
  %98 = bitcast i8* %97 to <32 x i8>*
  %99 = load <32 x i8>, <32 x i8>* %98, align 1
  %100 = getelementptr inbounds i8, i8* %97, i64 %10
  %101 = bitcast i8* %100 to <32 x i8>*
  %102 = load <32 x i8>, <32 x i8>* %101, align 1
  %103 = shufflevector <32 x i8> %81, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %104 = shufflevector <32 x i8> %81, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %105 = bitcast <32 x i8> %103 to <16 x i16>
  %106 = bitcast <32 x i8> %104 to <16 x i16>
  %107 = add <16 x i16> %105, %106
  %108 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %105, <16 x i16> %105) #4
  %109 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %106, <16 x i16> %106) #4
  %110 = add <8 x i32> %108, %109
  %111 = shufflevector <32 x i8> %84, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %112 = shufflevector <32 x i8> %84, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %113 = bitcast <32 x i8> %111 to <16 x i16>
  %114 = add <16 x i16> %107, %113
  %115 = bitcast <32 x i8> %112 to <16 x i16>
  %116 = add <16 x i16> %114, %115
  %117 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %113, <16 x i16> %113) #4
  %118 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %115, <16 x i16> %115) #4
  %119 = add <8 x i32> %117, %110
  %120 = add <8 x i32> %119, %118
  %121 = shufflevector <32 x i8> %87, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %122 = shufflevector <32 x i8> %87, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %123 = bitcast <32 x i8> %121 to <16 x i16>
  %124 = add <16 x i16> %116, %123
  %125 = bitcast <32 x i8> %122 to <16 x i16>
  %126 = add <16 x i16> %124, %125
  %127 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %123, <16 x i16> %123) #4
  %128 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %125, <16 x i16> %125) #4
  %129 = add <8 x i32> %127, %120
  %130 = add <8 x i32> %129, %128
  %131 = shufflevector <32 x i8> %90, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %132 = shufflevector <32 x i8> %90, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %133 = bitcast <32 x i8> %131 to <16 x i16>
  %134 = add <16 x i16> %126, %133
  %135 = bitcast <32 x i8> %132 to <16 x i16>
  %136 = add <16 x i16> %134, %135
  %137 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %133, <16 x i16> %133) #4
  %138 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %135, <16 x i16> %135) #4
  %139 = add <8 x i32> %137, %130
  %140 = add <8 x i32> %139, %138
  %141 = shufflevector <32 x i8> %93, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %142 = shufflevector <32 x i8> %93, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %143 = bitcast <32 x i8> %141 to <16 x i16>
  %144 = add <16 x i16> %136, %143
  %145 = bitcast <32 x i8> %142 to <16 x i16>
  %146 = add <16 x i16> %144, %145
  %147 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %143, <16 x i16> %143) #4
  %148 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %145, <16 x i16> %145) #4
  %149 = add <8 x i32> %147, %140
  %150 = add <8 x i32> %149, %148
  %151 = shufflevector <32 x i8> %96, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %152 = shufflevector <32 x i8> %96, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %153 = bitcast <32 x i8> %151 to <16 x i16>
  %154 = add <16 x i16> %146, %153
  %155 = bitcast <32 x i8> %152 to <16 x i16>
  %156 = add <16 x i16> %154, %155
  %157 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %153, <16 x i16> %153) #4
  %158 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %155, <16 x i16> %155) #4
  %159 = add <8 x i32> %157, %150
  %160 = add <8 x i32> %159, %158
  %161 = shufflevector <32 x i8> %99, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %162 = shufflevector <32 x i8> %99, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %163 = bitcast <32 x i8> %161 to <16 x i16>
  %164 = add <16 x i16> %156, %163
  %165 = bitcast <32 x i8> %162 to <16 x i16>
  %166 = add <16 x i16> %164, %165
  %167 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %163, <16 x i16> %163) #4
  %168 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %165, <16 x i16> %165) #4
  %169 = add <8 x i32> %167, %160
  %170 = add <8 x i32> %169, %168
  %171 = shufflevector <32 x i8> %102, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %172 = shufflevector <32 x i8> %102, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %173 = bitcast <32 x i8> %171 to <16 x i16>
  %174 = add <16 x i16> %166, %173
  %175 = bitcast <32 x i8> %172 to <16 x i16>
  %176 = add <16 x i16> %174, %175
  %177 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %173, <16 x i16> %173) #4
  %178 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %175, <16 x i16> %175) #4
  %179 = add <8 x i32> %177, %170
  %180 = add <8 x i32> %179, %178
  %181 = getelementptr inbounds i8, i8* %100, i64 %10
  %182 = bitcast <16 x i16> %176 to <4 x i64>
  %183 = bitcast <8 x i32> %180 to <4 x i64>
  %184 = shufflevector <4 x i64> %182, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %185 = shufflevector <4 x i64> %182, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %186 = bitcast <2 x i64> %184 to <8 x i16>
  %187 = bitcast <2 x i64> %185 to <8 x i16>
  %188 = add <8 x i16> %187, %186
  %189 = bitcast <8 x i16> %188 to <16 x i8>
  %190 = shufflevector <16 x i8> %189, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %191 = bitcast <16 x i8> %190 to <8 x i16>
  %192 = add <8 x i16> %188, %191
  %193 = bitcast <8 x i16> %192 to <16 x i8>
  %194 = shufflevector <16 x i8> %193, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %195 = bitcast <16 x i8> %194 to <8 x i16>
  %196 = add <8 x i16> %192, %195
  %197 = bitcast <8 x i16> %196 to <16 x i8>
  %198 = shufflevector <16 x i8> %197, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %199 = bitcast <16 x i8> %198 to <8 x i16>
  %200 = add <8 x i16> %196, %199
  %201 = extractelement <8 x i16> %200, i64 0
  %202 = zext i16 %201 to i64
  %203 = add i64 %77, %202
  %204 = shufflevector <4 x i64> %183, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %205 = shufflevector <4 x i64> %183, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %206 = bitcast <2 x i64> %204 to <4 x i32>
  %207 = bitcast <2 x i64> %205 to <4 x i32>
  %208 = add <4 x i32> %207, %206
  %209 = bitcast <4 x i32> %208 to <16 x i8>
  %210 = shufflevector <16 x i8> %209, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %211 = bitcast <16 x i8> %210 to <4 x i32>
  %212 = add <4 x i32> %208, %211
  %213 = bitcast <4 x i32> %212 to <16 x i8>
  %214 = shufflevector <16 x i8> %213, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %215 = bitcast <16 x i8> %214 to <4 x i32>
  %216 = add <4 x i32> %212, %215
  %217 = extractelement <4 x i32> %216, i32 0
  %218 = sext i32 %217 to i64
  %219 = add i64 %78, %218
  %220 = add nuw nsw i32 %79, 8
  %221 = icmp slt i32 %220, %8
  br i1 %221, label %75, label %46

222:                                              ; preds = %67, %222
  %223 = phi i8* [ %252, %222 ], [ %70, %67 ]
  %224 = phi <16 x i16> [ %247, %222 ], [ %71, %67 ]
  %225 = phi <8 x i32> [ %251, %222 ], [ %72, %67 ]
  %226 = phi i32 [ %253, %222 ], [ %73, %67 ]
  %227 = bitcast i8* %223 to <32 x i8>*
  %228 = load <32 x i8>, <32 x i8>* %227, align 1
  %229 = shufflevector <32 x i8> %228, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %230 = shufflevector <32 x i8> %228, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %231 = bitcast <32 x i8> %229 to <16 x i16>
  %232 = add <16 x i16> %224, %231
  %233 = bitcast <32 x i8> %230 to <16 x i16>
  %234 = add <16 x i16> %232, %233
  %235 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %231, <16 x i16> %231) #4
  %236 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %233, <16 x i16> %233) #4
  %237 = add <8 x i32> %235, %225
  %238 = add <8 x i32> %237, %236
  %239 = getelementptr inbounds i8, i8* %223, i64 %10
  %240 = bitcast i8* %239 to <32 x i8>*
  %241 = load <32 x i8>, <32 x i8>* %240, align 1
  %242 = shufflevector <32 x i8> %241, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 0, i32 32, i32 1, i32 33, i32 2, i32 34, i32 3, i32 35, i32 4, i32 36, i32 5, i32 37, i32 6, i32 38, i32 7, i32 39, i32 16, i32 48, i32 17, i32 49, i32 18, i32 50, i32 19, i32 51, i32 20, i32 52, i32 21, i32 53, i32 22, i32 54, i32 23, i32 55>
  %243 = shufflevector <32 x i8> %241, <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <32 x i32> <i32 8, i32 40, i32 9, i32 41, i32 10, i32 42, i32 11, i32 43, i32 12, i32 44, i32 13, i32 45, i32 14, i32 46, i32 15, i32 47, i32 24, i32 56, i32 25, i32 57, i32 26, i32 58, i32 27, i32 59, i32 28, i32 60, i32 29, i32 61, i32 30, i32 62, i32 31, i32 63>
  %244 = bitcast <32 x i8> %242 to <16 x i16>
  %245 = add <16 x i16> %234, %244
  %246 = bitcast <32 x i8> %243 to <16 x i16>
  %247 = add <16 x i16> %245, %246
  %248 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %244, <16 x i16> %244) #4
  %249 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %246, <16 x i16> %246) #4
  %250 = add <8 x i32> %248, %238
  %251 = add <8 x i32> %250, %249
  %252 = getelementptr inbounds i8, i8* %239, i64 %10
  %253 = add nuw nsw i32 %226, 2
  %254 = icmp eq i32 %253, %3
  br i1 %254, label %255, label %222

255:                                              ; preds = %222, %67
  %256 = phi <16 x i16> [ %68, %67 ], [ %247, %222 ]
  %257 = phi <8 x i32> [ %69, %67 ], [ %251, %222 ]
  %258 = bitcast <16 x i16> %256 to <4 x i64>
  %259 = bitcast <8 x i32> %257 to <4 x i64>
  br label %260

260:                                              ; preds = %255, %46
  %261 = phi <4 x i64> [ %259, %255 ], [ zeroinitializer, %46 ]
  %262 = phi <4 x i64> [ %258, %255 ], [ zeroinitializer, %46 ]
  %263 = shufflevector <4 x i64> %262, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %264 = shufflevector <4 x i64> %262, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %265 = bitcast <2 x i64> %263 to <8 x i16>
  %266 = bitcast <2 x i64> %264 to <8 x i16>
  %267 = add <8 x i16> %266, %265
  %268 = bitcast <8 x i16> %267 to <16 x i8>
  %269 = shufflevector <16 x i8> %268, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %270 = bitcast <16 x i8> %269 to <8 x i16>
  %271 = add <8 x i16> %267, %270
  %272 = bitcast <8 x i16> %271 to <16 x i8>
  %273 = shufflevector <16 x i8> %272, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19>
  %274 = bitcast <16 x i8> %273 to <8 x i16>
  %275 = add <8 x i16> %271, %274
  %276 = bitcast <8 x i16> %275 to <16 x i8>
  %277 = shufflevector <16 x i8> %276, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %278 = bitcast <16 x i8> %277 to <8 x i16>
  %279 = add <8 x i16> %275, %278
  %280 = extractelement <8 x i16> %279, i64 0
  %281 = zext i16 %280 to i64
  %282 = add i64 %49, %281
  %283 = shufflevector <4 x i64> %261, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %284 = shufflevector <4 x i64> %261, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %285 = bitcast <2 x i64> %283 to <4 x i32>
  %286 = bitcast <2 x i64> %284 to <4 x i32>
  %287 = add <4 x i32> %286, %285
  %288 = bitcast <4 x i32> %287 to <16 x i8>
  %289 = shufflevector <16 x i8> %288, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %290 = bitcast <16 x i8> %289 to <4 x i32>
  %291 = add <4 x i32> %287, %290
  %292 = bitcast <4 x i32> %291 to <16 x i8>
  %293 = shufflevector <16 x i8> %292, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %294 = bitcast <16 x i8> %293 to <4 x i32>
  %295 = add <4 x i32> %291, %294
  %296 = extractelement <4 x i32> %295, i32 0
  %297 = sext i32 %296 to i64
  %298 = add i64 %48, %297
  %299 = add nuw nsw i64 %42, 32
  %300 = icmp slt i64 %299, %12
  br i1 %300, label %41, label %16

301:                                              ; preds = %418, %23
  %302 = phi i8* [ %0, %23 ], [ %421, %418 ]
  %303 = phi i32 [ 0, %23 ], [ %422, %418 ]
  %304 = phi i64 [ %21, %23 ], [ %420, %418 ]
  %305 = phi i64 [ %20, %23 ], [ %419, %418 ]
  br i1 %24, label %306, label %418

306:                                              ; preds = %301
  br i1 %33, label %307, label %311

307:                                              ; preds = %393, %306
  %308 = phi i64 [ %26, %306 ], [ %35, %393 ]
  %309 = phi i64 [ %304, %306 ], [ %409, %393 ]
  %310 = phi i64 [ %305, %306 ], [ %403, %393 ]
  br label %424

311:                                              ; preds = %306
  %312 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %304, i32 0
  %313 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %305, i32 0
  br i1 %37, label %363, label %314

314:                                              ; preds = %311, %314
  %315 = phi i64 [ %360, %314 ], [ 0, %311 ]
  %316 = phi <4 x i64> [ %350, %314 ], [ %312, %311 ]
  %317 = phi <4 x i64> [ %351, %314 ], [ zeroinitializer, %311 ]
  %318 = phi <4 x i64> [ %358, %314 ], [ %313, %311 ]
  %319 = phi <4 x i64> [ %359, %314 ], [ zeroinitializer, %311 ]
  %320 = phi i64 [ %361, %314 ], [ %38, %311 ]
  %321 = add i64 %315, %26
  %322 = getelementptr inbounds i8, i8* %302, i64 %321
  %323 = bitcast i8* %322 to <4 x i8>*
  %324 = load <4 x i8>, <4 x i8>* %323, align 1
  %325 = getelementptr inbounds i8, i8* %322, i64 4
  %326 = bitcast i8* %325 to <4 x i8>*
  %327 = load <4 x i8>, <4 x i8>* %326, align 1
  %328 = zext <4 x i8> %324 to <4 x i64>
  %329 = zext <4 x i8> %327 to <4 x i64>
  %330 = add <4 x i64> %316, %328
  %331 = add <4 x i64> %317, %329
  %332 = zext <4 x i8> %324 to <4 x i32>
  %333 = zext <4 x i8> %327 to <4 x i32>
  %334 = mul nuw nsw <4 x i32> %332, %332
  %335 = mul nuw nsw <4 x i32> %333, %333
  %336 = zext <4 x i32> %334 to <4 x i64>
  %337 = zext <4 x i32> %335 to <4 x i64>
  %338 = add <4 x i64> %318, %336
  %339 = add <4 x i64> %319, %337
  %340 = or i64 %315, 8
  %341 = add i64 %340, %26
  %342 = getelementptr inbounds i8, i8* %302, i64 %341
  %343 = bitcast i8* %342 to <4 x i8>*
  %344 = load <4 x i8>, <4 x i8>* %343, align 1
  %345 = getelementptr inbounds i8, i8* %342, i64 4
  %346 = bitcast i8* %345 to <4 x i8>*
  %347 = load <4 x i8>, <4 x i8>* %346, align 1
  %348 = zext <4 x i8> %344 to <4 x i64>
  %349 = zext <4 x i8> %347 to <4 x i64>
  %350 = add <4 x i64> %330, %348
  %351 = add <4 x i64> %331, %349
  %352 = zext <4 x i8> %344 to <4 x i32>
  %353 = zext <4 x i8> %347 to <4 x i32>
  %354 = mul nuw nsw <4 x i32> %352, %352
  %355 = mul nuw nsw <4 x i32> %353, %353
  %356 = zext <4 x i32> %354 to <4 x i64>
  %357 = zext <4 x i32> %355 to <4 x i64>
  %358 = add <4 x i64> %338, %356
  %359 = add <4 x i64> %339, %357
  %360 = add i64 %315, 16
  %361 = add i64 %320, -2
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %363, label %314, !llvm.loop !3

363:                                              ; preds = %314, %311
  %364 = phi <4 x i64> [ undef, %311 ], [ %350, %314 ]
  %365 = phi <4 x i64> [ undef, %311 ], [ %351, %314 ]
  %366 = phi <4 x i64> [ undef, %311 ], [ %358, %314 ]
  %367 = phi <4 x i64> [ undef, %311 ], [ %359, %314 ]
  %368 = phi i64 [ 0, %311 ], [ %360, %314 ]
  %369 = phi <4 x i64> [ %312, %311 ], [ %350, %314 ]
  %370 = phi <4 x i64> [ zeroinitializer, %311 ], [ %351, %314 ]
  %371 = phi <4 x i64> [ %313, %311 ], [ %358, %314 ]
  %372 = phi <4 x i64> [ zeroinitializer, %311 ], [ %359, %314 ]
  br i1 %39, label %393, label %373

373:                                              ; preds = %363
  %374 = add i64 %368, %26
  %375 = getelementptr inbounds i8, i8* %302, i64 %374
  %376 = bitcast i8* %375 to <4 x i8>*
  %377 = load <4 x i8>, <4 x i8>* %376, align 1
  %378 = getelementptr inbounds i8, i8* %375, i64 4
  %379 = bitcast i8* %378 to <4 x i8>*
  %380 = load <4 x i8>, <4 x i8>* %379, align 1
  %381 = zext <4 x i8> %377 to <4 x i32>
  %382 = zext <4 x i8> %380 to <4 x i32>
  %383 = mul nuw nsw <4 x i32> %382, %382
  %384 = zext <4 x i32> %383 to <4 x i64>
  %385 = add <4 x i64> %372, %384
  %386 = mul nuw nsw <4 x i32> %381, %381
  %387 = zext <4 x i32> %386 to <4 x i64>
  %388 = add <4 x i64> %371, %387
  %389 = zext <4 x i8> %380 to <4 x i64>
  %390 = add <4 x i64> %370, %389
  %391 = zext <4 x i8> %377 to <4 x i64>
  %392 = add <4 x i64> %369, %391
  br label %393

393:                                              ; preds = %363, %373
  %394 = phi <4 x i64> [ %364, %363 ], [ %392, %373 ]
  %395 = phi <4 x i64> [ %365, %363 ], [ %390, %373 ]
  %396 = phi <4 x i64> [ %366, %363 ], [ %388, %373 ]
  %397 = phi <4 x i64> [ %367, %363 ], [ %385, %373 ]
  %398 = add <4 x i64> %397, %396
  %399 = shufflevector <4 x i64> %398, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %400 = add <4 x i64> %398, %399
  %401 = shufflevector <4 x i64> %400, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %402 = add <4 x i64> %400, %401
  %403 = extractelement <4 x i64> %402, i32 0
  %404 = add <4 x i64> %395, %394
  %405 = shufflevector <4 x i64> %404, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %406 = add <4 x i64> %404, %405
  %407 = shufflevector <4 x i64> %406, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %408 = add <4 x i64> %406, %407
  %409 = extractelement <4 x i64> %408, i32 0
  br i1 %40, label %418, label %307

410:                                              ; preds = %418, %18
  %411 = phi i64 [ %20, %18 ], [ %419, %418 ]
  %412 = phi i64 [ %21, %18 ], [ %420, %418 ]
  %413 = mul i64 %412, %412
  %414 = mul nsw i32 %3, %2
  %415 = sext i32 %414 to i64
  %416 = udiv i64 %413, %415
  %417 = sub i64 %411, %416
  ret i64 %417

418:                                              ; preds = %424, %393, %301
  %419 = phi i64 [ %305, %301 ], [ %403, %393 ], [ %435, %424 ]
  %420 = phi i64 [ %304, %301 ], [ %409, %393 ], [ %431, %424 ]
  %421 = getelementptr inbounds i8, i8* %302, i64 %25
  %422 = add nuw nsw i32 %303, 1
  %423 = icmp eq i32 %422, %3
  br i1 %423, label %410, label %301

424:                                              ; preds = %307, %424
  %425 = phi i64 [ %436, %424 ], [ %308, %307 ]
  %426 = phi i64 [ %431, %424 ], [ %309, %307 ]
  %427 = phi i64 [ %435, %424 ], [ %310, %307 ]
  %428 = getelementptr inbounds i8, i8* %302, i64 %425
  %429 = load i8, i8* %428, align 1
  %430 = zext i8 %429 to i64
  %431 = add i64 %426, %430
  %432 = zext i8 %429 to i32
  %433 = mul nuw nsw i32 %432, %432
  %434 = zext i32 %433 to i64
  %435 = add i64 %427, %434
  %436 = add nuw nsw i64 %425, 1
  %437 = icmp eq i64 %436, %27
  br i1 %437, label %418, label %424, !llvm.loop !5
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @aom_var_2d_u16_avx2(i8*, i32, i32, i32) local_unnamed_addr #2 {
  %5 = ptrtoint i8* %0 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = add nsw i32 %2, -15
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %22

10:                                               ; preds = %4
  %11 = add nsw i32 %3, -8
  %12 = icmp sgt i32 %11, 0
  %13 = sext i32 %1 to i64
  %14 = add i32 %3, -1
  %15 = and i32 %14, -8
  %16 = sext i32 %8 to i64
  %17 = and i32 %3, 1
  %18 = icmp eq i32 %17, 0
  %19 = sub i32 0, %3
  br label %46

20:                                               ; preds = %233
  %21 = trunc i64 %265 to i32
  br label %22

22:                                               ; preds = %20, %4
  %23 = phi i32 [ 0, %4 ], [ %21, %20 ]
  %24 = phi <2 x i64> [ zeroinitializer, %4 ], [ %264, %20 ]
  %25 = icmp sgt i32 %3, 0
  %26 = extractelement <2 x i64> %24, i32 0
  %27 = extractelement <2 x i64> %24, i32 1
  br i1 %25, label %28, label %376

28:                                               ; preds = %22
  %29 = icmp slt i32 %23, %2
  %30 = sext i32 %1 to i64
  %31 = zext i32 %23 to i64
  %32 = zext i32 %2 to i64
  %33 = sub nsw i64 %32, %31
  %34 = sub nsw i64 %32, %31
  %35 = add nsw i64 %34, -8
  %36 = lshr i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = icmp ult i64 %33, 8
  %39 = and i64 %33, -8
  %40 = add nsw i64 %39, %31
  %41 = and i64 %37, 1
  %42 = icmp eq i64 %36, 0
  %43 = sub nuw nsw i64 %37, %41
  %44 = icmp eq i64 %41, 0
  %45 = icmp eq i64 %33, %39
  br label %267

46:                                               ; preds = %10, %233
  %47 = phi i64 [ 0, %10 ], [ %265, %233 ]
  %48 = phi <2 x i64> [ zeroinitializer, %10 ], [ %264, %233 ]
  %49 = getelementptr inbounds i16, i16* %7, i64 %47
  br i1 %12, label %76, label %50

50:                                               ; preds = %76, %46
  %51 = phi i32 [ 0, %46 ], [ %15, %76 ]
  %52 = phi i16* [ %49, %46 ], [ %165, %76 ]
  %53 = phi <2 x i64> [ %48, %46 ], [ %196, %76 ]
  %54 = icmp slt i32 %51, %3
  br i1 %54, label %55, label %233

55:                                               ; preds = %50
  %56 = xor i32 %51, -1
  br i1 %18, label %68, label %57

57:                                               ; preds = %55
  %58 = bitcast i16* %52 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 1
  %60 = shufflevector <16 x i16> %59, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %61 = shufflevector <16 x i16> %59, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = bitcast <16 x i16> %60 to <8 x i32>
  %63 = bitcast <16 x i16> %61 to <8 x i32>
  %64 = add <8 x i32> %62, %63
  %65 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %59, <16 x i16> %59) #4
  %66 = getelementptr inbounds i16, i16* %52, i64 %13
  %67 = or i32 %51, 1
  br label %68

68:                                               ; preds = %57, %55
  %69 = phi <8 x i32> [ %64, %57 ], [ undef, %55 ]
  %70 = phi <8 x i32> [ %65, %57 ], [ undef, %55 ]
  %71 = phi i16* [ %66, %57 ], [ %52, %55 ]
  %72 = phi <8 x i32> [ %64, %57 ], [ zeroinitializer, %55 ]
  %73 = phi <8 x i32> [ %65, %57 ], [ zeroinitializer, %55 ]
  %74 = phi i32 [ %67, %57 ], [ %51, %55 ]
  %75 = icmp eq i32 %56, %19
  br i1 %75, label %228, label %199

76:                                               ; preds = %46, %76
  %77 = phi i16* [ %165, %76 ], [ %49, %46 ]
  %78 = phi i32 [ %197, %76 ], [ 0, %46 ]
  %79 = phi <2 x i64> [ %196, %76 ], [ %48, %46 ]
  %80 = bitcast i16* %77 to <16 x i16>*
  %81 = load <16 x i16>, <16 x i16>* %80, align 1
  %82 = getelementptr inbounds i16, i16* %77, i64 %13
  %83 = bitcast i16* %82 to <16 x i16>*
  %84 = load <16 x i16>, <16 x i16>* %83, align 1
  %85 = getelementptr inbounds i16, i16* %82, i64 %13
  %86 = bitcast i16* %85 to <16 x i16>*
  %87 = load <16 x i16>, <16 x i16>* %86, align 1
  %88 = getelementptr inbounds i16, i16* %85, i64 %13
  %89 = bitcast i16* %88 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 1
  %91 = getelementptr inbounds i16, i16* %88, i64 %13
  %92 = bitcast i16* %91 to <16 x i16>*
  %93 = load <16 x i16>, <16 x i16>* %92, align 1
  %94 = getelementptr inbounds i16, i16* %91, i64 %13
  %95 = bitcast i16* %94 to <16 x i16>*
  %96 = load <16 x i16>, <16 x i16>* %95, align 1
  %97 = getelementptr inbounds i16, i16* %94, i64 %13
  %98 = bitcast i16* %97 to <16 x i16>*
  %99 = load <16 x i16>, <16 x i16>* %98, align 1
  %100 = getelementptr inbounds i16, i16* %97, i64 %13
  %101 = bitcast i16* %100 to <16 x i16>*
  %102 = load <16 x i16>, <16 x i16>* %101, align 1
  %103 = shufflevector <16 x i16> %81, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %104 = shufflevector <16 x i16> %81, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %105 = bitcast <16 x i16> %103 to <8 x i32>
  %106 = bitcast <16 x i16> %104 to <8 x i32>
  %107 = add <8 x i32> %105, %106
  %108 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %81, <16 x i16> %81) #4
  %109 = shufflevector <16 x i16> %84, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %110 = shufflevector <16 x i16> %84, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %111 = bitcast <16 x i16> %109 to <8 x i32>
  %112 = add <8 x i32> %107, %111
  %113 = bitcast <16 x i16> %110 to <8 x i32>
  %114 = add <8 x i32> %112, %113
  %115 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %84, <16 x i16> %84) #4
  %116 = add <8 x i32> %115, %108
  %117 = shufflevector <16 x i16> %87, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %118 = shufflevector <16 x i16> %87, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %119 = bitcast <16 x i16> %117 to <8 x i32>
  %120 = add <8 x i32> %114, %119
  %121 = bitcast <16 x i16> %118 to <8 x i32>
  %122 = add <8 x i32> %120, %121
  %123 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %87, <16 x i16> %87) #4
  %124 = add <8 x i32> %123, %116
  %125 = shufflevector <16 x i16> %90, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %126 = shufflevector <16 x i16> %90, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %127 = bitcast <16 x i16> %125 to <8 x i32>
  %128 = add <8 x i32> %122, %127
  %129 = bitcast <16 x i16> %126 to <8 x i32>
  %130 = add <8 x i32> %128, %129
  %131 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %90, <16 x i16> %90) #4
  %132 = add <8 x i32> %131, %124
  %133 = shufflevector <16 x i16> %93, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %134 = shufflevector <16 x i16> %93, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %135 = bitcast <16 x i16> %133 to <8 x i32>
  %136 = add <8 x i32> %130, %135
  %137 = bitcast <16 x i16> %134 to <8 x i32>
  %138 = add <8 x i32> %136, %137
  %139 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %93, <16 x i16> %93) #4
  %140 = add <8 x i32> %139, %132
  %141 = shufflevector <16 x i16> %96, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %142 = shufflevector <16 x i16> %96, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %143 = bitcast <16 x i16> %141 to <8 x i32>
  %144 = add <8 x i32> %138, %143
  %145 = bitcast <16 x i16> %142 to <8 x i32>
  %146 = add <8 x i32> %144, %145
  %147 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %96, <16 x i16> %96) #4
  %148 = add <8 x i32> %147, %140
  %149 = shufflevector <16 x i16> %99, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %150 = shufflevector <16 x i16> %99, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %151 = bitcast <16 x i16> %149 to <8 x i32>
  %152 = add <8 x i32> %146, %151
  %153 = bitcast <16 x i16> %150 to <8 x i32>
  %154 = add <8 x i32> %152, %153
  %155 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %99, <16 x i16> %99) #4
  %156 = add <8 x i32> %155, %148
  %157 = shufflevector <16 x i16> %102, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %158 = shufflevector <16 x i16> %102, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %159 = bitcast <16 x i16> %157 to <8 x i32>
  %160 = add <8 x i32> %154, %159
  %161 = bitcast <16 x i16> %158 to <8 x i32>
  %162 = add <8 x i32> %160, %161
  %163 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %102, <16 x i16> %102) #4
  %164 = add <8 x i32> %163, %156
  %165 = getelementptr inbounds i16, i16* %100, i64 %13
  %166 = bitcast <8 x i32> %162 to <4 x i64>
  %167 = bitcast <8 x i32> %164 to <4 x i64>
  %168 = shufflevector <4 x i64> %166, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %169 = shufflevector <4 x i64> %166, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %170 = bitcast <2 x i64> %168 to <4 x i32>
  %171 = bitcast <2 x i64> %169 to <4 x i32>
  %172 = add <4 x i32> %171, %170
  %173 = bitcast <4 x i32> %172 to <16 x i8>
  %174 = shufflevector <16 x i8> %173, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %175 = bitcast <16 x i8> %174 to <4 x i32>
  %176 = add <4 x i32> %172, %175
  %177 = bitcast <4 x i32> %176 to <16 x i8>
  %178 = shufflevector <16 x i8> %177, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %179 = bitcast <16 x i8> %178 to <4 x i32>
  %180 = add <4 x i32> %176, %179
  %181 = shufflevector <4 x i64> %167, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %182 = shufflevector <4 x i64> %167, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %183 = bitcast <2 x i64> %181 to <4 x i32>
  %184 = bitcast <2 x i64> %182 to <4 x i32>
  %185 = add <4 x i32> %184, %183
  %186 = bitcast <4 x i32> %185 to <16 x i8>
  %187 = shufflevector <16 x i8> %186, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %188 = bitcast <16 x i8> %187 to <4 x i32>
  %189 = add <4 x i32> %185, %188
  %190 = bitcast <4 x i32> %189 to <16 x i8>
  %191 = shufflevector <16 x i8> %190, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %192 = bitcast <16 x i8> %191 to <4 x i32>
  %193 = add <4 x i32> %189, %192
  %194 = shufflevector <4 x i32> %193, <4 x i32> %180, <2 x i32> <i32 0, i32 4>
  %195 = sext <2 x i32> %194 to <2 x i64>
  %196 = add <2 x i64> %79, %195
  %197 = add nuw nsw i32 %78, 8
  %198 = icmp slt i32 %197, %11
  br i1 %198, label %76, label %50

199:                                              ; preds = %68, %199
  %200 = phi i16* [ %225, %199 ], [ %71, %68 ]
  %201 = phi <8 x i32> [ %222, %199 ], [ %72, %68 ]
  %202 = phi <8 x i32> [ %224, %199 ], [ %73, %68 ]
  %203 = phi i32 [ %226, %199 ], [ %74, %68 ]
  %204 = bitcast i16* %200 to <16 x i16>*
  %205 = load <16 x i16>, <16 x i16>* %204, align 1
  %206 = shufflevector <16 x i16> %205, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %207 = shufflevector <16 x i16> %205, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %208 = bitcast <16 x i16> %206 to <8 x i32>
  %209 = add <8 x i32> %201, %208
  %210 = bitcast <16 x i16> %207 to <8 x i32>
  %211 = add <8 x i32> %209, %210
  %212 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %205, <16 x i16> %205) #4
  %213 = add <8 x i32> %212, %202
  %214 = getelementptr inbounds i16, i16* %200, i64 %13
  %215 = bitcast i16* %214 to <16 x i16>*
  %216 = load <16 x i16>, <16 x i16>* %215, align 1
  %217 = shufflevector <16 x i16> %216, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %218 = shufflevector <16 x i16> %216, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %219 = bitcast <16 x i16> %217 to <8 x i32>
  %220 = add <8 x i32> %211, %219
  %221 = bitcast <16 x i16> %218 to <8 x i32>
  %222 = add <8 x i32> %220, %221
  %223 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %216, <16 x i16> %216) #4
  %224 = add <8 x i32> %223, %213
  %225 = getelementptr inbounds i16, i16* %214, i64 %13
  %226 = add nuw nsw i32 %203, 2
  %227 = icmp eq i32 %226, %3
  br i1 %227, label %228, label %199

228:                                              ; preds = %199, %68
  %229 = phi <8 x i32> [ %69, %68 ], [ %222, %199 ]
  %230 = phi <8 x i32> [ %70, %68 ], [ %224, %199 ]
  %231 = bitcast <8 x i32> %229 to <4 x i64>
  %232 = bitcast <8 x i32> %230 to <4 x i64>
  br label %233

233:                                              ; preds = %228, %50
  %234 = phi <4 x i64> [ %232, %228 ], [ zeroinitializer, %50 ]
  %235 = phi <4 x i64> [ %231, %228 ], [ zeroinitializer, %50 ]
  %236 = shufflevector <4 x i64> %235, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %237 = shufflevector <4 x i64> %235, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %238 = bitcast <2 x i64> %236 to <4 x i32>
  %239 = bitcast <2 x i64> %237 to <4 x i32>
  %240 = add <4 x i32> %239, %238
  %241 = bitcast <4 x i32> %240 to <16 x i8>
  %242 = shufflevector <16 x i8> %241, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %243 = bitcast <16 x i8> %242 to <4 x i32>
  %244 = add <4 x i32> %240, %243
  %245 = bitcast <4 x i32> %244 to <16 x i8>
  %246 = shufflevector <16 x i8> %245, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %247 = bitcast <16 x i8> %246 to <4 x i32>
  %248 = add <4 x i32> %244, %247
  %249 = shufflevector <4 x i64> %234, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %250 = shufflevector <4 x i64> %234, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %251 = bitcast <2 x i64> %249 to <4 x i32>
  %252 = bitcast <2 x i64> %250 to <4 x i32>
  %253 = add <4 x i32> %252, %251
  %254 = bitcast <4 x i32> %253 to <16 x i8>
  %255 = shufflevector <16 x i8> %254, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %256 = bitcast <16 x i8> %255 to <4 x i32>
  %257 = add <4 x i32> %253, %256
  %258 = bitcast <4 x i32> %257 to <16 x i8>
  %259 = shufflevector <16 x i8> %258, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %260 = bitcast <16 x i8> %259 to <4 x i32>
  %261 = add <4 x i32> %257, %260
  %262 = shufflevector <4 x i32> %261, <4 x i32> %248, <2 x i32> <i32 0, i32 4>
  %263 = sext <2 x i32> %262 to <2 x i64>
  %264 = add <2 x i64> %53, %263
  %265 = add nuw nsw i64 %47, 16
  %266 = icmp slt i64 %265, %16
  br i1 %266, label %46, label %20

267:                                              ; preds = %384, %28
  %268 = phi i32 [ 0, %28 ], [ %388, %384 ]
  %269 = phi i16* [ %7, %28 ], [ %387, %384 ]
  %270 = phi i64 [ %27, %28 ], [ %386, %384 ]
  %271 = phi i64 [ %26, %28 ], [ %385, %384 ]
  br i1 %29, label %272, label %384

272:                                              ; preds = %267
  br i1 %38, label %273, label %277

273:                                              ; preds = %359, %272
  %274 = phi i64 [ %31, %272 ], [ %40, %359 ]
  %275 = phi i64 [ %270, %272 ], [ %375, %359 ]
  %276 = phi i64 [ %271, %272 ], [ %369, %359 ]
  br label %390

277:                                              ; preds = %272
  %278 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %270, i32 0
  %279 = insertelement <4 x i64> <i64 undef, i64 0, i64 0, i64 0>, i64 %271, i32 0
  br i1 %42, label %329, label %280

280:                                              ; preds = %277, %280
  %281 = phi i64 [ %326, %280 ], [ 0, %277 ]
  %282 = phi <4 x i64> [ %316, %280 ], [ %278, %277 ]
  %283 = phi <4 x i64> [ %317, %280 ], [ zeroinitializer, %277 ]
  %284 = phi <4 x i64> [ %324, %280 ], [ %279, %277 ]
  %285 = phi <4 x i64> [ %325, %280 ], [ zeroinitializer, %277 ]
  %286 = phi i64 [ %327, %280 ], [ %43, %277 ]
  %287 = add i64 %281, %31
  %288 = getelementptr inbounds i16, i16* %269, i64 %287
  %289 = bitcast i16* %288 to <4 x i16>*
  %290 = load <4 x i16>, <4 x i16>* %289, align 2
  %291 = getelementptr inbounds i16, i16* %288, i64 4
  %292 = bitcast i16* %291 to <4 x i16>*
  %293 = load <4 x i16>, <4 x i16>* %292, align 2
  %294 = zext <4 x i16> %290 to <4 x i64>
  %295 = zext <4 x i16> %293 to <4 x i64>
  %296 = add <4 x i64> %282, %294
  %297 = add <4 x i64> %283, %295
  %298 = zext <4 x i16> %290 to <4 x i32>
  %299 = zext <4 x i16> %293 to <4 x i32>
  %300 = mul nuw nsw <4 x i32> %298, %298
  %301 = mul nuw nsw <4 x i32> %299, %299
  %302 = zext <4 x i32> %300 to <4 x i64>
  %303 = zext <4 x i32> %301 to <4 x i64>
  %304 = add <4 x i64> %284, %302
  %305 = add <4 x i64> %285, %303
  %306 = or i64 %281, 8
  %307 = add i64 %306, %31
  %308 = getelementptr inbounds i16, i16* %269, i64 %307
  %309 = bitcast i16* %308 to <4 x i16>*
  %310 = load <4 x i16>, <4 x i16>* %309, align 2
  %311 = getelementptr inbounds i16, i16* %308, i64 4
  %312 = bitcast i16* %311 to <4 x i16>*
  %313 = load <4 x i16>, <4 x i16>* %312, align 2
  %314 = zext <4 x i16> %310 to <4 x i64>
  %315 = zext <4 x i16> %313 to <4 x i64>
  %316 = add <4 x i64> %296, %314
  %317 = add <4 x i64> %297, %315
  %318 = zext <4 x i16> %310 to <4 x i32>
  %319 = zext <4 x i16> %313 to <4 x i32>
  %320 = mul nuw nsw <4 x i32> %318, %318
  %321 = mul nuw nsw <4 x i32> %319, %319
  %322 = zext <4 x i32> %320 to <4 x i64>
  %323 = zext <4 x i32> %321 to <4 x i64>
  %324 = add <4 x i64> %304, %322
  %325 = add <4 x i64> %305, %323
  %326 = add i64 %281, 16
  %327 = add i64 %286, -2
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %329, label %280, !llvm.loop !7

329:                                              ; preds = %280, %277
  %330 = phi <4 x i64> [ undef, %277 ], [ %316, %280 ]
  %331 = phi <4 x i64> [ undef, %277 ], [ %317, %280 ]
  %332 = phi <4 x i64> [ undef, %277 ], [ %324, %280 ]
  %333 = phi <4 x i64> [ undef, %277 ], [ %325, %280 ]
  %334 = phi i64 [ 0, %277 ], [ %326, %280 ]
  %335 = phi <4 x i64> [ %278, %277 ], [ %316, %280 ]
  %336 = phi <4 x i64> [ zeroinitializer, %277 ], [ %317, %280 ]
  %337 = phi <4 x i64> [ %279, %277 ], [ %324, %280 ]
  %338 = phi <4 x i64> [ zeroinitializer, %277 ], [ %325, %280 ]
  br i1 %44, label %359, label %339

339:                                              ; preds = %329
  %340 = add i64 %334, %31
  %341 = getelementptr inbounds i16, i16* %269, i64 %340
  %342 = bitcast i16* %341 to <4 x i16>*
  %343 = load <4 x i16>, <4 x i16>* %342, align 2
  %344 = getelementptr inbounds i16, i16* %341, i64 4
  %345 = bitcast i16* %344 to <4 x i16>*
  %346 = load <4 x i16>, <4 x i16>* %345, align 2
  %347 = zext <4 x i16> %343 to <4 x i32>
  %348 = zext <4 x i16> %346 to <4 x i32>
  %349 = mul nuw nsw <4 x i32> %348, %348
  %350 = zext <4 x i32> %349 to <4 x i64>
  %351 = add <4 x i64> %338, %350
  %352 = mul nuw nsw <4 x i32> %347, %347
  %353 = zext <4 x i32> %352 to <4 x i64>
  %354 = add <4 x i64> %337, %353
  %355 = zext <4 x i16> %346 to <4 x i64>
  %356 = add <4 x i64> %336, %355
  %357 = zext <4 x i16> %343 to <4 x i64>
  %358 = add <4 x i64> %335, %357
  br label %359

359:                                              ; preds = %329, %339
  %360 = phi <4 x i64> [ %330, %329 ], [ %358, %339 ]
  %361 = phi <4 x i64> [ %331, %329 ], [ %356, %339 ]
  %362 = phi <4 x i64> [ %332, %329 ], [ %354, %339 ]
  %363 = phi <4 x i64> [ %333, %329 ], [ %351, %339 ]
  %364 = add <4 x i64> %363, %362
  %365 = shufflevector <4 x i64> %364, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %366 = add <4 x i64> %364, %365
  %367 = shufflevector <4 x i64> %366, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %368 = add <4 x i64> %366, %367
  %369 = extractelement <4 x i64> %368, i32 0
  %370 = add <4 x i64> %361, %360
  %371 = shufflevector <4 x i64> %370, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %372 = add <4 x i64> %370, %371
  %373 = shufflevector <4 x i64> %372, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %374 = add <4 x i64> %372, %373
  %375 = extractelement <4 x i64> %374, i32 0
  br i1 %45, label %384, label %273

376:                                              ; preds = %384, %22
  %377 = phi i64 [ %26, %22 ], [ %385, %384 ]
  %378 = phi i64 [ %27, %22 ], [ %386, %384 ]
  %379 = mul i64 %378, %378
  %380 = mul nsw i32 %3, %2
  %381 = sext i32 %380 to i64
  %382 = udiv i64 %379, %381
  %383 = sub i64 %377, %382
  ret i64 %383

384:                                              ; preds = %390, %359, %267
  %385 = phi i64 [ %271, %267 ], [ %369, %359 ], [ %401, %390 ]
  %386 = phi i64 [ %270, %267 ], [ %375, %359 ], [ %397, %390 ]
  %387 = getelementptr inbounds i16, i16* %269, i64 %30
  %388 = add nuw nsw i32 %268, 1
  %389 = icmp eq i32 %388, %3
  br i1 %389, label %376, label %267

390:                                              ; preds = %273, %390
  %391 = phi i64 [ %402, %390 ], [ %274, %273 ]
  %392 = phi i64 [ %397, %390 ], [ %275, %273 ]
  %393 = phi i64 [ %401, %390 ], [ %276, %273 ]
  %394 = getelementptr inbounds i16, i16* %269, i64 %391
  %395 = load i16, i16* %394, align 2
  %396 = zext i16 %395 to i64
  %397 = add i64 %392, %396
  %398 = zext i16 %395 to i32
  %399 = mul nuw nsw i32 %398, %398
  %400 = zext i32 %399 to i64
  %401 = add i64 %393, %400
  %402 = add nuw nsw i64 %391, 1
  %403 = icmp eq i64 %402, %32
  br i1 %403, label %384, label %390, !llvm.loop !8
}

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6, !4}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !6, !4}
