; ModuleID = '../../third_party/libjxl/src/lib/jxl/frame_header.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/frame_header.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::BlendingInfo" = type <{ %"class.jxl::Fields", i32, i32, i8, [3 x i8], i32, i64, i8, [7 x i8] }>
%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::AnimationFrame" = type { %"class.jxl::Fields", i32, i32, %"struct.jxl::CodecMetadata"* }
%"struct.jxl::CodecMetadata" = type { %"struct.jxl::ImageMetadata", %"class.jxl::SizeHeader", %"struct.jxl::CustomTransformData" }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.4" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.jxl::ExtraChannelInfo"* }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::Passes" = type <{ %"class.jxl::Fields", i32, i32, [11 x i32], [11 x i32], [11 x i32], [4 x i8] }>
%"struct.jxl::FrameHeader" = type { %"class.jxl::Fields", i8, i32, i32, i64, i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", i32, i32, i32, %"class.std::__1::basic_string", %"struct.jxl::Passes", i8, %"struct.jxl::FrameSize", i32, %"class.std::__1::vector.9", %"struct.jxl::FrameOrigin", %"struct.jxl::BlendingInfo", %"class.std::__1::vector.16", %"struct.jxl::AnimationFrame", i8, i32, i8, i32, %"struct.jxl::CodecMetadata"*, %"struct.jxl::LoopFilter", i8, i64 }
%"struct.jxl::FrameSize" = type { i32, i32 }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { i32*, i32*, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i32* }
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.jxl::BlendingInfo"* }
%"struct.jxl::LoopFilter" = type <{ %"class.jxl::Fields", i8, i8, i8, i8, float, float, float, float, float, float, i32, i8, [3 x i8], [8 x float], i8, [3 x i8], [3 x float], float, float, i8, [3 x i8], float, float, float, float, float, [4 x i8], i64, i8, [7 x i8] }>
%"class.jxl::Visitor" = type { i32 (...)** }
%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"struct.jxl::BitWriter" = type { i64, %"class.jxl::PaddedBytes", %"class.jxl::BitWriter::Allotment"* }
%"class.jxl::BitWriter::Allotment" = type { i64, i64, i64, i8, %"class.jxl::BitWriter::Allotment"* }
%"struct.jxl::AuxOut" = type { %"struct.std::__1::array", i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"struct.std::__1::array.23", %"struct.std::__1::array.23", i32, %"class.std::__1::basic_string", i64, %"class.std::__1::function", %"class.std::__1::function.24" }
%"struct.std::__1::array" = type { [21 x %"struct.jxl::AuxOut::LayerTotals"] }
%"struct.jxl::AuxOut::LayerTotals" = type { i64, i64, i64, i64, double }
%"struct.std::__1::array.23" = type { [8 x i32] }
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { i1 (%"union.std::__1::__function::__policy_storage"*, i8*, %"class.jxl::Image3"*)* }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr" }
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"class.std::__1::function.24" = type { %"class.std::__1::__function::__policy_func.28" }
%"class.std::__1::__function::__policy_func.28" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker.29", %"struct.std::__1::__function::__policy"* }
%"struct.std::__1::__function::__policy_invoker.29" = type { i32 (%"union.std::__1::__function::__policy_storage"*, %"class.jxl::CodecInOut"*, %"class.std::__1::basic_string"*)* }
%"class.jxl::CodecInOut" = type { %"struct.jxl::SizeConstraints", %"class.jxl::DecoderHints", i32, float, i64, %"struct.jxl::Blobs", %"struct.jxl::CodecMetadata", %"class.jxl::ImageBundle", %"class.std::__1::vector.114", i8, i64 }
%"struct.jxl::SizeConstraints" = type { i32, i32, i64 }
%"class.jxl::DecoderHints" = type { %"class.std::__1::vector.30" }
%"class.std::__1::vector.30" = type { %"class.std::__1::__vector_base.31" }
%"class.std::__1::__vector_base.31" = type { %"struct.jxl::DecoderHints::KeyValue"*, %"struct.jxl::DecoderHints::KeyValue"*, %"class.std::__1::__compressed_pair.32" }
%"struct.jxl::DecoderHints::KeyValue" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"struct.jxl::DecoderHints::KeyValue"* }
%"struct.jxl::Blobs" = type { %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes" }
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr.37", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.107", i64 }
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector.40", %"class.std::__1::vector.53", %"class.std::__1::vector.40", %"class.std::__1::vector.60", %"class.std::__1::vector.68", %"class.std::__1::vector.77", %"class.std::__1::vector.91", %"class.std::__1::vector.42", %"class.std::__1::vector.40", %"class.std::__1::vector.42", i32, i8, %"class.std::__1::vector.42" }
%"class.std::__1::vector.53" = type { %"class.std::__1::__vector_base.54" }
%"class.std::__1::__vector_base.54" = type { i32*, i32*, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { i32* }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.63" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array.62", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array.62" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.68" = type { %"class.std::__1::__vector_base.69" }
%"class.std::__1::__vector_base.69" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.72" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.70", %"struct.std::__1::array.71", i32, i8, [3 x i8] }>
%"struct.std::__1::array.70" = type { [17 x i32] }
%"struct.std::__1::array.71" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.86" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.79" }
%"class.std::__1::vector.79" = type { %"class.std::__1::__vector_base.80" }
%"class.std::__1::__vector_base.80" = type { i16*, i16*, %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { i16* }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.101" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.93", i32, %"class.std::__1::vector.9", %"class.std::__1::vector.94" }
%"struct.std::__1::array.93" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.94" = type { %"class.std::__1::__vector_base.95" }
%"class.std::__1::__vector_base.95" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.96" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"class.std::__1::vector.42"*, %"class.std::__1::vector.42"*, %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.std::__1::vector.42"* }
%"class.std::__1::vector.42" = type { %"class.std::__1::__vector_base.43" }
%"class.std::__1::__vector_base.43" = type { i8*, i8*, %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::vector.107" = type { %"class.std::__1::__vector_base.108" }
%"class.std::__1::__vector_base.108" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.jxl::Plane"* }
%"class.std::__1::vector.114" = type { %"class.std::__1::__vector_base.115" }
%"class.std::__1::__vector_base.115" = type { %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"*, %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.jxl::ImageBundle"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3jxl12BlendingInfoD0Ev = comdat any

$_ZNK3jxl12BlendingInfo4NameEv = comdat any

$_ZN3jxl14AnimationFrameD0Ev = comdat any

$_ZNK3jxl14AnimationFrame4NameEv = comdat any

$_ZN3jxl6PassesD0Ev = comdat any

$_ZNK3jxl6Passes4NameEv = comdat any

$_ZN3jxl11FrameHeaderD2Ev = comdat any

$_ZN3jxl11FrameHeaderD0Ev = comdat any

$_ZNK3jxl11FrameHeader4NameEv = comdat any

$_ZN3jxl22YCbCrChromaSubsamplingD0Ev = comdat any

$_ZNK3jxl22YCbCrChromaSubsampling4NameEv = comdat any

$_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE = comdat any

$_ZN3jxl6FieldsD2Ev = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj = comdat any

$_ZNSt3__16vectorIN3jxl12BlendingInfoENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZTVN3jxl22YCbCrChromaSubsamplingE = comdat any

@_ZN3jxl22YCbCrChromaSubsampling7kHShiftE = hidden local_unnamed_addr constant [4 x i8] c"\00\01\01\00", align 1
@_ZN3jxl22YCbCrChromaSubsampling7kVShiftE = hidden local_unnamed_addr constant [4 x i8] c"\00\01\00\01", align 1
@_ZTVN3jxl12BlendingInfoE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::BlendingInfo"*)* @_ZN3jxl12BlendingInfoD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::BlendingInfo"*)* @_ZNK3jxl12BlendingInfo4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::BlendingInfo"*, %"class.jxl::Visitor"*)* @_ZN3jxl12BlendingInfo11VisitFieldsEPNS_7VisitorE to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [53 x i8] c"../../third_party/libjxl/src/lib/jxl/frame_header.cc\00", align 1
@_ZTVN3jxl14AnimationFrameE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::AnimationFrame"*)* @_ZN3jxl14AnimationFrameD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::AnimationFrame"*)* @_ZNK3jxl14AnimationFrame4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::AnimationFrame"*, %"class.jxl::Visitor"*)* @_ZN3jxl14AnimationFrame11VisitFieldsEPNS_7VisitorE to i8*)] }, align 8
@_ZTVN3jxl22YCbCrChromaSubsamplingE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZN3jxl22YCbCrChromaSubsamplingD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"*)* @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE to i8*)] }, comdat, align 8
@_ZTVN3jxl6PassesE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jxl::Fields"*)* @_ZN3jxl6FieldsD2Ev to i8*), i8* bitcast (void (%"struct.jxl::Passes"*)* @_ZN3jxl6PassesD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::Passes"*)* @_ZNK3jxl6Passes4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::Passes"*, %"class.jxl::Visitor"*)* @_ZN3jxl6Passes11VisitFieldsEPNS_7VisitorE to i8*)] }, align 8
@.str.2 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"num_passes <= kMaxNumPasses\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"num_downsample <= 4\00", align 1
@_ZTVN3jxl11FrameHeaderE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"struct.jxl::FrameHeader"*)* @_ZN3jxl11FrameHeaderD2Ev to i8*), i8* bitcast (void (%"struct.jxl::FrameHeader"*)* @_ZN3jxl11FrameHeaderD0Ev to i8*), i8* bitcast (i8* (%"struct.jxl::FrameHeader"*)* @_ZNK3jxl11FrameHeader4NameEv to i8*), i8* bitcast (i32 (%"struct.jxl::FrameHeader"*, %"class.jxl::Visitor"*)* @_ZN3jxl11FrameHeader11VisitFieldsEPNS_7VisitorE to i8*)] }, align 8
@.str.15 = private unnamed_addr constant [13 x i8] c"BlendingInfo\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"AnimationFrame\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"Passes\00", align 1
@.str.18 = private unnamed_addr constant [12 x i8] c"FrameHeader\00", align 1
@.str.20 = private unnamed_addr constant [23 x i8] c"YCbCrChromaSubsampling\00", align 1

@_ZN3jxl12BlendingInfoC1Ev = hidden unnamed_addr alias void (%"struct.jxl::BlendingInfo"*), void (%"struct.jxl::BlendingInfo"*)* @_ZN3jxl12BlendingInfoC2Ev
@_ZN3jxl14AnimationFrameC1EPKNS_13CodecMetadataE = hidden unnamed_addr alias void (%"struct.jxl::AnimationFrame"*, %"struct.jxl::CodecMetadata"*), void (%"struct.jxl::AnimationFrame"*, %"struct.jxl::CodecMetadata"*)* @_ZN3jxl14AnimationFrameC2EPKNS_13CodecMetadataE
@_ZN3jxl22YCbCrChromaSubsamplingC1Ev = hidden unnamed_addr alias void (%"struct.jxl::YCbCrChromaSubsampling"*), void (%"struct.jxl::YCbCrChromaSubsampling"*)* @_ZN3jxl22YCbCrChromaSubsamplingC2Ev
@_ZN3jxl6PassesC1Ev = hidden unnamed_addr alias void (%"struct.jxl::Passes"*), void (%"struct.jxl::Passes"*)* @_ZN3jxl6PassesC2Ev
@_ZN3jxl11FrameHeaderC1EPKNS_13CodecMetadataE = hidden unnamed_addr alias void (%"struct.jxl::FrameHeader"*, %"struct.jxl::CodecMetadata"*), void (%"struct.jxl::FrameHeader"*, %"struct.jxl::CodecMetadata"*)* @_ZN3jxl11FrameHeaderC2EPKNS_13CodecMetadataE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl12BlendingInfoC2Ev(%"struct.jxl::BlendingInfo"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl12BlendingInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %0, i64 0, i32 6
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %0, i64 0, i32 7
  store i8 0, i8* %5, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %2) #8
  ret void
}

declare void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl12BlendingInfo11VisitFieldsEPNS_7VisitorE(%"struct.jxl::BlendingInfo"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %0, i64 0, i32 1
  %5 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #8, !noalias !2
  %6 = load i32, i32* %4, align 4, !noalias !2
  store i32 %6, i32* %3, align 4, !noalias !2
  %7 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %8 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %7, align 8, !alias.scope !2, !noalias !5
  %9 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %8, i64 4
  %10 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %9, align 8, !noalias !8
  %11 = call i32 %10(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 418759311362, i32 0, i32* nonnull %3) #8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %2
  %14 = load i32, i32* %3, align 4, !noalias !2
  %15 = icmp ugt i32 %14, 4
  br i1 %15, label %16, label %18

16:                                               ; preds = %2, %13
  %17 = phi i32 [ 1, %13 ], [ %11, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #8, !noalias !2
  br label %98

18:                                               ; preds = %13
  store i32 %14, i32* %4, align 4, !noalias !2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #8, !noalias !2
  %19 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %0, i64 0, i32 6
  %20 = load i64, i64* %19, align 8
  %21 = icmp ne i64 %20, 0
  %22 = or i32 %14, 1
  %23 = icmp eq i32 %22, 3
  %24 = and i1 %23, %21
  %25 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1)***
  %26 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %25, align 8
  %27 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %26, i64 8
  %28 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %27, align 8
  %29 = call i32 %28(%"class.jxl::Visitor"* %1, i1 zeroext %24) #8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %49

31:                                               ; preds = %18
  %32 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %0, i64 0, i32 2
  %33 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %7, align 8, !noalias !9
  %34 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %33, i64 4
  %35 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %34, align 8, !noalias !9
  %36 = call i32 %35(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 423054278658, i32 0, i32* %32) #8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %98

38:                                               ; preds = %31
  %39 = bitcast %"class.jxl::Visitor"* %1 to i1 (%"class.jxl::Visitor"*)***
  %40 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %39, align 8
  %41 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %40, i64 12
  %42 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %41, align 8
  %43 = call zeroext i1 %42(%"class.jxl::Visitor"* %1) #8
  br i1 %43, label %44, label %49

44:                                               ; preds = %38
  %45 = load i32, i32* %32, align 4
  %46 = zext i32 %45 to i64
  %47 = load i64, i64* %19, align 8
  %48 = icmp ugt i64 %47, %46
  br i1 %48, label %54, label %98

49:                                               ; preds = %38, %18
  %50 = load i64, i64* %19, align 8
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %49
  %53 = load i32, i32* %4, align 8
  br label %58

54:                                               ; preds = %44, %49
  %55 = load i32, i32* %4, align 8
  %56 = and i32 %55, -2
  %57 = icmp eq i32 %56, 2
  br i1 %57, label %61, label %58

58:                                               ; preds = %52, %54
  %59 = phi i32 [ %53, %52 ], [ %55, %54 ]
  %60 = icmp eq i32 %59, 4
  br label %61

61:                                               ; preds = %54, %58
  %62 = phi i1 [ %60, %58 ], [ true, %54 ]
  %63 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %25, align 8
  %64 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %63, i64 8
  %65 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %64, align 8
  %66 = call i32 %65(%"class.jxl::Visitor"* %1, i1 zeroext %62) #8
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %76

68:                                               ; preds = %61
  %69 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %0, i64 0, i32 3
  %70 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %71 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %70, align 8
  %72 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %71, i64 3
  %73 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %72, align 8
  %74 = call i32 %73(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %69) #8
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %98

76:                                               ; preds = %68, %61
  %77 = load i32, i32* %4, align 8
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %83

79:                                               ; preds = %76
  %80 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %0, i64 0, i32 7
  %81 = load i8, i8* %80, align 8, !range !12
  %82 = icmp ne i8 %81, 0
  br label %83

83:                                               ; preds = %76, %79
  %84 = phi i1 [ true, %76 ], [ %82, %79 ]
  %85 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %25, align 8
  %86 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %85, i64 8
  %87 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %86, align 8
  %88 = call i32 %87(%"class.jxl::Visitor"* %1, i1 zeroext %84) #8
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %97

90:                                               ; preds = %83
  %91 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %0, i64 0, i32 5
  %92 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %7, align 8, !noalias !13
  %93 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %92, i64 4
  %94 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %93, align 8, !noalias !13
  %95 = call i32 %94(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 -9223372021822390270, i32 0, i32* %91) #8
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %90, %83
  br label %98

98:                                               ; preds = %44, %16, %90, %68, %31, %97
  %99 = phi i32 [ 0, %97 ], [ %95, %90 ], [ %74, %68 ], [ %36, %31 ], [ %17, %16 ], [ 1, %44 ]
  ret i32 %99
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl14AnimationFrameC2EPKNS_13CodecMetadataE(%"struct.jxl::AnimationFrame"*, %"struct.jxl::CodecMetadata"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::AnimationFrame", %"struct.jxl::AnimationFrame"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.jxl::AnimationFrame", %"struct.jxl::AnimationFrame"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl14AnimationFrameE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"struct.jxl::AnimationFrame", %"struct.jxl::AnimationFrame"* %0, i64 0, i32 3
  store %"struct.jxl::CodecMetadata"* %1, %"struct.jxl::CodecMetadata"** %5, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %3) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl14AnimationFrame11VisitFieldsEPNS_7VisitorE(%"struct.jxl::AnimationFrame"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::AnimationFrame", %"struct.jxl::AnimationFrame"* %0, i64 0, i32 3
  %4 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %3, align 8
  %5 = icmp eq %"struct.jxl::CodecMetadata"* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %4, i64 0, i32 0, i32 10
  %8 = load i8, i8* %7, align 1, !range !12
  %9 = icmp ne i8 %8, 0
  br label %10

10:                                               ; preds = %2, %6
  %11 = phi i1 [ false, %2 ], [ %9, %6 ]
  %12 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1)***
  %13 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %12, align 8
  %14 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %13, i64 8
  %15 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %14, align 8
  %16 = tail call i32 %15(%"class.jxl::Visitor"* %1, i1 zeroext %11) #8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %26

18:                                               ; preds = %10
  %19 = getelementptr inbounds %"struct.jxl::AnimationFrame", %"struct.jxl::AnimationFrame"* %0, i64 0, i32 1
  %20 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %21 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %20, align 8, !noalias !16
  %22 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %21, i64 4
  %23 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %22, align 8, !noalias !16
  %24 = tail call i32 %23(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 133143986183, i32 0, i32* %19) #8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %49

26:                                               ; preds = %18, %10
  %27 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %3, align 8
  %28 = icmp eq %"struct.jxl::CodecMetadata"* %27, null
  br i1 %28, label %33, label %29

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %27, i64 0, i32 0, i32 20, i32 4
  %31 = load i8, i8* %30, align 4, !range !12
  %32 = icmp ne i8 %31, 0
  br label %33

33:                                               ; preds = %26, %29
  %34 = phi i1 [ false, %26 ], [ %32, %29 ]
  %35 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %12, align 8
  %36 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %35, i64 8
  %37 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %36, align 8
  %38 = tail call i32 %37(%"class.jxl::Visitor"* %1, i1 zeroext %34) #8
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %48

40:                                               ; preds = %33
  %41 = getelementptr inbounds %"struct.jxl::AnimationFrame", %"struct.jxl::AnimationFrame"* %0, i64 0, i32 2
  %42 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %43 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %42, align 8
  %44 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %43, i64 5
  %45 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %44, align 8
  %46 = tail call i32 %45(%"class.jxl::Visitor"* %1, i64 32, i32 0, i32* %41) #8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %40, %33
  br label %49

49:                                               ; preds = %40, %18, %48
  %50 = phi i32 [ 0, %48 ], [ %46, %40 ], [ %24, %18 ]
  ret i32 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl22YCbCrChromaSubsamplingC2Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6PassesC2Ev(%"struct.jxl::Passes"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.jxl::Passes", %"struct.jxl::Passes"* %0, i64 0, i32 0
  %3 = getelementptr inbounds %"struct.jxl::Passes", %"struct.jxl::Passes"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl6PassesE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl6Passes11VisitFieldsEPNS_7VisitorE(%"struct.jxl::Passes"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::Passes", %"struct.jxl::Passes"* %0, i64 0, i32 1
  %4 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %4, align 8, !noalias !19
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %5, i64 4
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %6, align 8, !noalias !19
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i64 -9223372026117357567, i64 560493232131, i32 1, i32* %3) #8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %98

10:                                               ; preds = %2
  %11 = load i32, i32* %3, align 8
  %12 = icmp ult i32 %11, 12
  br i1 %12, label %16, label %13

13:                                               ; preds = %10
  %14 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 112, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0)) #8
  %15 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

16:                                               ; preds = %10
  %17 = icmp ne i32 %11, 1
  %18 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1)***
  %19 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %18, align 8
  %20 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %19, i64 8
  %21 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %20, align 8
  %22 = tail call i32 %21(%"class.jxl::Visitor"* %1, i1 zeroext %17) #8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %98

24:                                               ; preds = %16
  %25 = getelementptr inbounds %"struct.jxl::Passes", %"struct.jxl::Passes"* %0, i64 0, i32 2
  %26 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %4, align 8, !noalias !22
  %27 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %26, i64 4
  %28 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %27, align 8, !noalias !22
  %29 = tail call i32 %28(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 414464344066, i32 0, i32* %25) #8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %98

31:                                               ; preds = %24
  %32 = load i32, i32* %25, align 4
  %33 = icmp ult i32 %32, 5
  br i1 %33, label %37, label %34

34:                                               ; preds = %31
  %35 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i32 117, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0)) #8
  %36 = tail call zeroext i1 @_ZN3jxl5AbortEv() #9
  unreachable

37:                                               ; preds = %31
  %38 = load i32, i32* %3, align 8
  %39 = icmp ugt i32 %32, %38
  br i1 %39, label %98, label %40

40:                                               ; preds = %37
  %41 = icmp eq i32 %38, 1
  br i1 %41, label %61, label %42

42:                                               ; preds = %40
  %43 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  br label %49

44:                                               ; preds = %49
  %45 = load i32, i32* %3, align 8
  %46 = add i32 %45, -1
  %47 = zext i32 %46 to i64
  %48 = icmp ult i64 %57, %47
  br i1 %48, label %49, label %58

49:                                               ; preds = %42, %44
  %50 = phi i64 [ 0, %42 ], [ %57, %44 ]
  %51 = getelementptr inbounds %"struct.jxl::Passes", %"struct.jxl::Passes"* %0, i64 0, i32 5, i64 %50
  %52 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %43, align 8
  %53 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %52, i64 5
  %54 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %53, align 8
  %55 = tail call i32 %54(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %51) #8
  %56 = icmp eq i32 %55, 0
  %57 = add nuw nsw i64 %50, 1
  br i1 %56, label %44, label %98

58:                                               ; preds = %44
  %59 = load i32, i32* %25, align 4
  %60 = zext i32 %46 to i64
  br label %61

61:                                               ; preds = %40, %58
  %62 = phi i32 [ %59, %58 ], [ %32, %40 ]
  %63 = phi i64 [ %60, %58 ], [ 0, %40 ]
  %64 = getelementptr inbounds %"struct.jxl::Passes", %"struct.jxl::Passes"* %0, i64 0, i32 5, i64 %63
  store i32 0, i32* %64, align 4
  %65 = icmp eq i32 %62, 0
  br i1 %65, label %98, label %72

66:                                               ; preds = %72
  %67 = load i32, i32* %25, align 4
  %68 = zext i32 %67 to i64
  %69 = icmp ult i64 %80, %68
  br i1 %69, label %72, label %70

70:                                               ; preds = %66
  %71 = icmp eq i32 %67, 0
  br i1 %71, label %98, label %85

72:                                               ; preds = %61, %66
  %73 = phi i64 [ %80, %66 ], [ 0, %61 ]
  %74 = getelementptr inbounds %"struct.jxl::Passes", %"struct.jxl::Passes"* %0, i64 0, i32 3, i64 %73
  %75 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %4, align 8, !noalias !25
  %76 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %75, i64 4
  %77 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %76, align 8, !noalias !25
  %78 = tail call i32 %77(%"class.jxl::Visitor"* %1, i64 -9223372026117357567, i64 -9223372000347553788, i32 1, i32* %74) #8
  %79 = icmp eq i32 %78, 0
  %80 = add nuw nsw i64 %73, 1
  br i1 %79, label %66, label %98

81:                                               ; preds = %93
  %82 = load i32, i32* %25, align 4
  %83 = zext i32 %82 to i64
  %84 = icmp ult i64 %97, %83
  br i1 %84, label %85, label %98

85:                                               ; preds = %70, %81
  %86 = phi i64 [ %97, %81 ], [ 0, %70 ]
  %87 = getelementptr inbounds %"struct.jxl::Passes", %"struct.jxl::Passes"* %0, i64 0, i32 4, i64 %86
  %88 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %4, align 8, !noalias !28
  %89 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %88, i64 4
  %90 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %89, align 8, !noalias !28
  %91 = tail call i32 %90(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 10737418242, i32 0, i32* %87) #8
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %98

93:                                               ; preds = %85
  %94 = load i32, i32* %87, align 4
  %95 = load i32, i32* %3, align 8
  %96 = icmp ult i32 %94, %95
  %97 = add nuw nsw i64 %86, 1
  br i1 %96, label %81, label %98

98:                                               ; preds = %49, %72, %85, %93, %81, %61, %70, %16, %37, %24, %2
  %99 = phi i32 [ %29, %24 ], [ %8, %2 ], [ 1, %37 ], [ 0, %16 ], [ 0, %70 ], [ 0, %61 ], [ %91, %85 ], [ 1, %93 ], [ 0, %81 ], [ %78, %72 ], [ %55, %49 ]
  ret i32 %99
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl11FrameHeaderC2EPKNS_13CodecMetadataE(%"struct.jxl::FrameHeader"*, %"struct.jxl::CodecMetadata"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11FrameHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 3
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 7
  %7 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %6, i64 0, i32 0
  %8 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %6, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22YCbCrChromaSubsamplingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %7) #8
  %9 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 11
  %10 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #8
  %11 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 12
  %12 = getelementptr inbounds %"struct.jxl::Passes", %"struct.jxl::Passes"* %11, i64 0, i32 0
  %13 = getelementptr inbounds %"struct.jxl::Passes", %"struct.jxl::Passes"* %11, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl6PassesE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %13, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %12) #8
  %14 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 16
  %15 = bitcast %"class.std::__1::vector.9"* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false) #8
  %16 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 18
  %17 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %16, i64 0, i32 0
  %18 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %16, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl12BlendingInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %18, align 8
  %19 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 18, i32 6
  store i64 0, i64* %19, align 8
  %20 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 18, i32 7
  store i8 0, i8* %20, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %17) #8
  %21 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 19
  %22 = bitcast %"class.std::__1::vector.16"* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 24, i1 false) #8
  %23 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 20
  %24 = getelementptr inbounds %"struct.jxl::AnimationFrame", %"struct.jxl::AnimationFrame"* %23, i64 0, i32 0
  %25 = getelementptr inbounds %"struct.jxl::AnimationFrame", %"struct.jxl::AnimationFrame"* %23, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl14AnimationFrameE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %25, align 8
  %26 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 20, i32 3
  store %"struct.jxl::CodecMetadata"* %1, %"struct.jxl::CodecMetadata"** %26, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %24) #8
  %27 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 25
  store %"struct.jxl::CodecMetadata"* %1, %"struct.jxl::CodecMetadata"** %27, align 8
  %28 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 26
  tail call void @_ZN3jxl10LoopFilterC1Ev(%"struct.jxl::LoopFilter"* %28) #8
  %29 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 27
  store i8 0, i8* %29, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %3) #8
  ret void
}

declare void @_ZN3jxl10LoopFilterC1Ev(%"struct.jxl::LoopFilter"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl15ReadFrameHeaderEPNS_9BitReaderEPNS_11FrameHeaderE(%"class.jxl::BitReader"* noalias, %"struct.jxl::FrameHeader"* noalias) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %1, i64 0, i32 0
  %4 = tail call i32 @_ZN3jxl6Bundle4ReadEPNS_9BitReaderEPNS_6FieldsE(%"class.jxl::BitReader"* %0, %"class.jxl::Fields"* %3) #8
  ret i32 %4
}

declare i32 @_ZN3jxl6Bundle4ReadEPNS_9BitReaderEPNS_6FieldsE(%"class.jxl::BitReader"*, %"class.jxl::Fields"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl16WriteFrameHeaderERKNS_11FrameHeaderEPNS_9BitWriterEPNS_6AuxOutE(%"struct.jxl::FrameHeader"* dereferenceable(576), %"struct.jxl::BitWriter"* noalias, %"struct.jxl::AuxOut"*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 0
  %5 = tail call i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8) %4, %"struct.jxl::BitWriter"* %1, i64 0, %"struct.jxl::AuxOut"* %2) #8
  ret i32 %5
}

declare i32 @_ZN3jxl6Bundle5WriteERKNS_6FieldsEPNS_9BitWriterEmPNS_6AuxOutE(%"class.jxl::Fields"* dereferenceable(8), %"struct.jxl::BitWriter"*, i64, %"struct.jxl::AuxOut"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl11FrameHeader11VisitFieldsEPNS_7VisitorE(%"struct.jxl::FrameHeader"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 0
  %12 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 1
  %13 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)***
  %14 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*** %13, align 8
  %15 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %14, i64 9
  %16 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*, i8*)** %15, align 8
  %17 = tail call i32 %16(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* dereferenceable(8) %11, i8* %12) #8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %24

19:                                               ; preds = %2
  %20 = bitcast %"class.jxl::Visitor"* %1 to void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %21 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %21, i64 10
  %23 = load void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, void (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %22, align 8
  tail call void %23(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %11) #8
  br label %769

24:                                               ; preds = %2
  %25 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 3
  %26 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #8, !noalias !31
  %27 = load i32, i32* %25, align 4, !noalias !31
  store i32 %27, i32* %5, align 4, !noalias !31
  %28 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)***
  %29 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %28, align 8, !alias.scope !31, !noalias !34
  %30 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %29, i64 4
  %31 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %30, align 8, !noalias !37
  %32 = call i32 %31(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 -9223372021822390270, i32 0, i32* nonnull %5) #8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %35, label %34

34:                                               ; preds = %24
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #8, !noalias !31
  br label %769

35:                                               ; preds = %24
  %36 = load i32, i32* %5, align 4, !noalias !31
  store i32 %36, i32* %25, align 4, !noalias !31
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #8, !noalias !31
  %37 = bitcast %"class.jxl::Visitor"* %1 to i1 (%"class.jxl::Visitor"*)***
  %38 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %37, align 8
  %39 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %38, i64 12
  %40 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %39, align 8
  %41 = call zeroext i1 %40(%"class.jxl::Visitor"* %1) #8
  br i1 %41, label %42, label %49

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 27
  %44 = load i8, i8* %43, align 8, !range !12
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %49, label %46

46:                                               ; preds = %42
  %47 = load i32, i32* %25, align 8
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %769

49:                                               ; preds = %46, %42, %35
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #8
  %50 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 1
  %53 = zext i1 %52 to i8
  store i8 %53, i8* %6, align 1
  %54 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1, i8*)***
  %55 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %54, align 8
  %56 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %55, i64 3
  %57 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %56, align 8
  %58 = call i32 %57(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* nonnull %6) #8
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %767

60:                                               ; preds = %49
  %61 = load i8, i8* %6, align 1, !range !12
  %62 = zext i8 %61 to i32
  store i32 %62, i32* %50, align 4
  %63 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 4
  %64 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i64*)***
  %65 = load i32 (%"class.jxl::Visitor"*, i64, i64*)**, i32 (%"class.jxl::Visitor"*, i64, i64*)*** %64, align 8
  %66 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64*)*, i32 (%"class.jxl::Visitor"*, i64, i64*)** %65, i64 6
  %67 = load i32 (%"class.jxl::Visitor"*, i64, i64*)*, i32 (%"class.jxl::Visitor"*, i64, i64*)** %66, align 8
  %68 = call i32 %67(%"class.jxl::Visitor"* %1, i64 0, i64* %63) #8
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %767

70:                                               ; preds = %60
  %71 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 25
  %72 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %71, align 8
  %73 = icmp eq %"struct.jxl::CodecMetadata"* %72, null
  br i1 %73, label %85, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %72, i64 0, i32 0, i32 5
  %76 = load i8, i8* %75, align 1, !range !12
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %88, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %72, i64 0, i32 0, i32 3, i32 1
  %80 = load i8, i8* %79, align 8, !range !12
  %81 = icmp eq i8 %80, 0
  %82 = load i8, i8* %6, align 1, !range !12
  %83 = icmp eq i8 %82, 0
  %84 = or i1 %81, %83
  br i1 %84, label %85, label %767

85:                                               ; preds = %78, %70
  %86 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 5
  store i32 0, i32* %86, align 8
  %87 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 5
  br label %108

88:                                               ; preds = %74
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #8
  %89 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 5
  %90 = load i32, i32* %89, align 8
  %91 = icmp eq i32 %90, 2
  %92 = zext i1 %91 to i8
  store i8 %92, i8* %7, align 1
  %93 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %54, align 8
  %94 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %93, i64 3
  %95 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %94, align 8
  %96 = call i32 %95(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* nonnull %7) #8
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %99, label %98

98:                                               ; preds = %88
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #8
  br label %767

99:                                               ; preds = %88
  %100 = load i8, i8* %7, align 1, !range !12
  %101 = icmp eq i8 %100, 0
  %102 = select i1 %101, i32 1, i32 2
  store i32 %102, i32* %89, align 8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #8
  %103 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 5
  br i1 %101, label %108, label %104

104:                                              ; preds = %99
  %105 = load i64, i64* %63, align 8
  %106 = and i64 %105, 32
  %107 = icmp eq i64 %106, 0
  br label %108

108:                                              ; preds = %99, %85, %104
  %109 = phi i32* [ %103, %99 ], [ %103, %104 ], [ %87, %85 ]
  %110 = phi i1 [ false, %99 ], [ %107, %104 ], [ false, %85 ]
  %111 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i1)***
  %112 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %113 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %112, i64 8
  %114 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %113, align 8
  %115 = call i32 %114(%"class.jxl::Visitor"* %1, i1 zeroext %110) #8
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %125

117:                                              ; preds = %108
  %118 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 7, i32 0
  %119 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %120 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %119, align 8
  %121 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %120, i64 11
  %122 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %121, align 8
  %123 = call i32 %122(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %118) #8
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %767

125:                                              ; preds = %117, %108
  %126 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %71, align 8
  %127 = icmp eq %"struct.jxl::CodecMetadata"* %126, null
  br i1 %127, label %137, label %128

128:                                              ; preds = %125
  %129 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %126, i64 0, i32 0, i32 17
  %130 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %126, i64 0, i32 0, i32 17, i32 0, i32 1
  %131 = bitcast %"struct.jxl::ExtraChannelInfo"** %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = bitcast %"class.std::__1::vector"* %129 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = sub i64 %132, %134
  %136 = sdiv exact i64 %135, 96
  br label %137

137:                                              ; preds = %125, %128
  %138 = phi i64 [ %136, %128 ], [ 0, %125 ]
  %139 = load i64, i64* %63, align 8
  %140 = and i64 %139, 32
  %141 = icmp eq i64 %140, 0
  %142 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %143 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %142, i64 8
  %144 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %143, align 8
  %145 = call i32 %144(%"class.jxl::Visitor"* %1, i1 zeroext %141) #8
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %233

147:                                              ; preds = %137
  %148 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 15
  %149 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %28, align 8, !noalias !38
  %150 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %149, i64 4
  %151 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %150, align 8, !noalias !38
  %152 = call i32 %151(%"class.jxl::Visitor"* %1, i64 -9223372026117357567, i64 -9223372000347553788, i32 1, i32* %148) #8
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %767

154:                                              ; preds = %147
  %155 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %71, align 8
  %156 = icmp eq %"struct.jxl::CodecMetadata"* %155, null
  br i1 %156, label %227, label %157

157:                                              ; preds = %154
  %158 = icmp ne i64 %138, 0
  %159 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %160 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %159, i64 8
  %161 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %160, align 8
  %162 = call i32 %161(%"class.jxl::Visitor"* %1, i1 zeroext %158) #8
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %227

164:                                              ; preds = %157
  %165 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %71, align 8
  %166 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %165, i64 0, i32 0, i32 17
  %167 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 16
  %168 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %165, i64 0, i32 0, i32 17, i32 0, i32 1
  %169 = bitcast %"struct.jxl::ExtraChannelInfo"** %168 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = bitcast %"class.std::__1::vector"* %166 to i64*
  %172 = load i64, i64* %171, align 8
  %173 = sub i64 %170, %172
  %174 = sdiv exact i64 %173, 96
  %175 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %175) #8
  store i32 1, i32* %8, align 4
  %176 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 16, i32 0, i32 1
  %177 = bitcast i32** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.std::__1::vector.9"* %167 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = sub i64 %178, %180
  %182 = ashr exact i64 %181, 2
  %183 = icmp ugt i64 %174, %182
  %184 = inttoptr i64 %180 to i32*
  br i1 %183, label %185, label %187

185:                                              ; preds = %164
  %186 = sub nsw i64 %174, %182
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.9"* %167, i64 %186, i32* nonnull dereferenceable(4) %8) #8
  br label %191

187:                                              ; preds = %164
  %188 = icmp ult i64 %174, %182
  br i1 %188, label %189, label %191

189:                                              ; preds = %187
  %190 = getelementptr inbounds i32, i32* %184, i64 %174
  store i32* %190, i32** %176, align 8
  br label %191

191:                                              ; preds = %185, %187, %189
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %175) #8
  %192 = load i64, i64* %169, align 8
  %193 = load i64, i64* %171, align 8
  %194 = icmp eq i64 %192, %193
  br i1 %194, label %233, label %195

195:                                              ; preds = %191
  %196 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %167, i64 0, i32 0, i32 0
  br label %203

197:                                              ; preds = %219
  %198 = load i64, i64* %169, align 8
  %199 = load i64, i64* %171, align 8
  %200 = sub i64 %198, %199
  %201 = sdiv exact i64 %200, 96
  %202 = icmp ult i64 %226, %201
  br i1 %202, label %203, label %233

203:                                              ; preds = %195, %197
  %204 = phi i64 [ 0, %195 ], [ %226, %197 ]
  %205 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %71, align 8
  %206 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %205, i64 0, i32 0, i32 17, i32 0, i32 0
  %207 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %206, align 8
  %208 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %207, i64 %204, i32 4
  %209 = load i32, i32* %208, align 8
  %210 = load i32*, i32** %196, align 8
  %211 = getelementptr inbounds i32, i32* %210, i64 %204
  %212 = load i32, i32* %211, align 4
  %213 = lshr i32 %212, %209
  store i32 %213, i32* %211, align 4
  %214 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %28, align 8, !noalias !41
  %215 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %214, i64 4
  %216 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %215, align 8, !noalias !41
  %217 = call i32 %216(%"class.jxl::Visitor"* %1, i64 -9223372026117357567, i64 -9223372000347553788, i32 1, i32* %211) #8
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %767

219:                                              ; preds = %203
  %220 = load i32, i32* %211, align 4
  %221 = shl i32 %220, %209
  store i32 %221, i32* %211, align 4
  %222 = load i32, i32* %148, align 4
  %223 = icmp ult i32 %221, %222
  %224 = icmp ugt i32 %221, 8
  %225 = or i1 %224, %223
  %226 = add nuw i64 %204, 1
  br i1 %225, label %767, label %197

227:                                              ; preds = %154, %157
  %228 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 16
  %229 = bitcast %"class.std::__1::vector.9"* %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 16, i32 0, i32 1
  %232 = bitcast i32** %231 to i64*
  store i64 %230, i64* %232, align 8
  br label %233

233:                                              ; preds = %197, %191, %227, %137
  %234 = load i32, i32* %50, align 4
  %235 = icmp eq i32 %234, 1
  %236 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %237 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %236, i64 8
  %238 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %237, align 8
  %239 = call i32 %238(%"class.jxl::Visitor"* %1, i1 zeroext %235) #8
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %241, label %249

241:                                              ; preds = %233
  %242 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 8
  %243 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %244 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %243, align 8
  %245 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %244, i64 5
  %246 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %245, align 8
  %247 = call i32 %246(%"class.jxl::Visitor"* %1, i64 2, i32 1, i32* %242) #8
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %249, label %767

249:                                              ; preds = %241, %233
  %250 = load i32, i32* %50, align 4
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %252, label %255

252:                                              ; preds = %249
  %253 = load i32, i32* %109, align 8
  %254 = icmp eq i32 %253, 0
  br label %255

255:                                              ; preds = %252, %249
  %256 = phi i1 [ false, %249 ], [ %254, %252 ]
  %257 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %258 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %257, i64 8
  %259 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %258, align 8
  %260 = call i32 %259(%"class.jxl::Visitor"* %1, i1 zeroext %256) #8
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %262, label %277

262:                                              ; preds = %255
  %263 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 9
  %264 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %265 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %264, align 8
  %266 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %265, i64 5
  %267 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %266, align 8
  %268 = call i32 %267(%"class.jxl::Visitor"* %1, i64 3, i32 3, i32* %263) #8
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %270, label %767

270:                                              ; preds = %262
  %271 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 10
  %272 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %264, align 8
  %273 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %272, i64 5
  %274 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %273, align 8
  %275 = call i32 %274(%"class.jxl::Visitor"* %1, i64 3, i32 2, i32* %271) #8
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %280, label %767

277:                                              ; preds = %255
  %278 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 10
  store i32 2, i32* %278, align 8
  %279 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 9
  store i32 2, i32* %279, align 4
  br label %280

280:                                              ; preds = %270, %277
  %281 = load i32, i32* %25, align 8
  %282 = icmp ne i32 %281, 2
  %283 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %284 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %283, i64 8
  %285 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %284, align 8
  %286 = call i32 %285(%"class.jxl::Visitor"* %1, i1 zeroext %282) #8
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %288, label %296

288:                                              ; preds = %280
  %289 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 12, i32 0
  %290 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %291 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %290, align 8
  %292 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %291, i64 11
  %293 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %292, align 8
  %294 = call i32 %293(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %289) #8
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %767

296:                                              ; preds = %288, %280
  %297 = load i32, i32* %25, align 8
  %298 = icmp eq i32 %297, 1
  %299 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %300 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %299, i64 8
  %301 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %300, align 8
  %302 = call i32 %301(%"class.jxl::Visitor"* %1, i1 zeroext %298) #8
  %303 = icmp eq i32 %302, 0
  br i1 %303, label %304, label %311

304:                                              ; preds = %296
  %305 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 24
  %306 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %28, align 8, !noalias !44
  %307 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %306, i64 4
  %308 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %307, align 8, !noalias !44
  %309 = call i32 %308(%"class.jxl::Visitor"* %1, i64 -9223372026117357567, i64 -9223372017527422973, i32 1, i32* %305) #8
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %311, label %767

311:                                              ; preds = %304, %296
  %312 = load i32, i32* %25, align 8
  %313 = icmp eq i32 %312, 1
  br i1 %313, label %316, label %314

314:                                              ; preds = %311
  %315 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 24
  store i32 0, i32* %315, align 4
  br label %316

316:                                              ; preds = %311, %314
  %317 = icmp ne i32 %312, 1
  %318 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %319 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %318, i64 8
  %320 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %319, align 8
  %321 = call i32 %320(%"class.jxl::Visitor"* %1, i1 zeroext %317) #8
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %323, label %468

323:                                              ; preds = %316
  %324 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 13
  %325 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %54, align 8
  %326 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %325, i64 3
  %327 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %326, align 8
  %328 = call i32 %327(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %324) #8
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %330, label %767

330:                                              ; preds = %323
  %331 = load i8, i8* %324, align 8, !range !12
  %332 = icmp ne i8 %331, 0
  %333 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %334 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %333, i64 8
  %335 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %334, align 8
  %336 = call i32 %335(%"class.jxl::Visitor"* %1, i1 zeroext %332) #8
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %338, label %468

338:                                              ; preds = %330
  %339 = load i32, i32* %25, align 8
  %340 = icmp eq i32 %339, 0
  %341 = icmp eq i32 %339, 3
  %342 = or i1 %340, %341
  %343 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %344 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %343, i64 8
  %345 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %344, align 8
  %346 = call i32 %345(%"class.jxl::Visitor"* %1, i1 zeroext %342) #8
  %347 = icmp eq i32 %346, 0
  br i1 %347, label %348, label %389

348:                                              ; preds = %338
  %349 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %349) #8
  %350 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 17, i32 0
  %351 = load i32, i32* %350, align 8
  %352 = shl i32 %351, 1
  %353 = ashr i32 %351, 31
  %354 = xor i32 %352, %353
  store i32 %354, i32* %9, align 4
  %355 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %355) #8
  %356 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 17, i32 1
  %357 = load i32, i32* %356, align 4
  %358 = shl i32 %357, 1
  %359 = ashr i32 %357, 31
  %360 = xor i32 %358, %359
  store i32 %360, i32* %10, align 4
  %361 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %28, align 8
  %362 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %361, i64 4
  %363 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %362, align 8
  %364 = call i32 %363(%"class.jxl::Visitor"* %1, i64 35227321761799, i64 2568583716610061, i32 0, i32* nonnull %9) #8
  %365 = icmp eq i32 %364, 0
  br i1 %365, label %366, label %372

366:                                              ; preds = %348
  %367 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %28, align 8
  %368 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %367, i64 4
  %369 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %368, align 8
  %370 = call i32 %369(%"class.jxl::Visitor"* %1, i64 35227321761799, i64 2568583716610061, i32 0, i32* nonnull %10) #8
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %374, label %372

372:                                              ; preds = %348, %366
  %373 = phi i32 [ %364, %348 ], [ %370, %366 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %355) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %349) #8
  br label %767

374:                                              ; preds = %366
  %375 = load i32, i32* %9, align 4
  %376 = zext i32 %375 to i64
  %377 = lshr i64 %376, 1
  %378 = shl i64 %376, 63
  %379 = ashr exact i64 %378, 63
  %380 = xor i64 %379, %377
  %381 = trunc i64 %380 to i32
  store i32 %381, i32* %350, align 8
  %382 = load i32, i32* %10, align 4
  %383 = zext i32 %382 to i64
  %384 = lshr i64 %383, 1
  %385 = shl i64 %383, 63
  %386 = ashr exact i64 %385, 63
  %387 = xor i64 %386, %384
  %388 = trunc i64 %387 to i32
  store i32 %388, i32* %356, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %355) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %349) #8
  br label %389

389:                                              ; preds = %374, %338
  %390 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 14, i32 0
  %391 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %28, align 8
  %392 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %391, i64 4
  %393 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %392, align 8
  %394 = call i32 %393(%"class.jxl::Visitor"* %1, i64 35227321761799, i64 2568583716610061, i32 0, i32* %390) #8
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %396, label %767

396:                                              ; preds = %389
  %397 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 14, i32 1
  %398 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %28, align 8
  %399 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %398, i64 4
  %400 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %399, align 8
  %401 = call i32 %400(%"class.jxl::Visitor"* %1, i64 35227321761799, i64 2568583716610061, i32 0, i32* %397) #8
  %402 = icmp eq i32 %401, 0
  br i1 %402, label %403, label %767

403:                                              ; preds = %396
  %404 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %71, align 8
  %405 = icmp eq %"struct.jxl::CodecMetadata"* %404, null
  br i1 %405, label %447, label %406

406:                                              ; preds = %403
  %407 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 27
  %408 = load i8, i8* %407, align 8, !range !12
  %409 = icmp eq i8 %408, 0
  br i1 %409, label %413, label %410

410:                                              ; preds = %406
  %411 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %404, i64 0, i32 0, i32 19
  %412 = call i64 @_ZNK3jxl13PreviewHeader5xsizeEv(%"class.jxl::PreviewHeader"* %411) #8
  br label %416

413:                                              ; preds = %406
  %414 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %404, i64 0, i32 1
  %415 = call i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"* %414) #8
  br label %416

416:                                              ; preds = %410, %413
  %417 = phi i64 [ %415, %413 ], [ %412, %410 ]
  %418 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %71, align 8
  %419 = trunc i64 %417 to i32
  %420 = icmp eq %"struct.jxl::CodecMetadata"* %418, null
  br i1 %420, label %447, label %421

421:                                              ; preds = %416
  %422 = load i8, i8* %407, align 8, !range !12
  %423 = icmp eq i8 %422, 0
  br i1 %423, label %435, label %424

424:                                              ; preds = %421
  %425 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %418, i64 0, i32 0, i32 19, i32 1
  %426 = load i8, i8* %425, align 8, !range !12
  %427 = icmp eq i8 %426, 0
  br i1 %427, label %432, label %428

428:                                              ; preds = %424
  %429 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %418, i64 0, i32 0, i32 19, i32 2
  %430 = load i32, i32* %429, align 4
  %431 = shl i32 %430, 3
  br label %447

432:                                              ; preds = %424
  %433 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %418, i64 0, i32 0, i32 19, i32 3
  %434 = load i32, i32* %433, align 8
  br label %447

435:                                              ; preds = %421
  %436 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %418, i64 0, i32 1, i32 1
  %437 = load i8, i8* %436, align 8, !range !12
  %438 = icmp eq i8 %437, 0
  br i1 %438, label %444, label %439

439:                                              ; preds = %435
  %440 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %418, i64 0, i32 1, i32 2
  %441 = load i32, i32* %440, align 4
  %442 = shl i32 %441, 3
  %443 = add i32 %442, 8
  br label %447

444:                                              ; preds = %435
  %445 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %418, i64 0, i32 1, i32 3
  %446 = load i32, i32* %445, align 8
  br label %447

447:                                              ; preds = %403, %416, %428, %432, %439, %444
  %448 = phi i32 [ %419, %416 ], [ %419, %428 ], [ %419, %432 ], [ %419, %439 ], [ %419, %444 ], [ 0, %403 ]
  %449 = phi i32 [ 0, %416 ], [ %431, %428 ], [ %434, %432 ], [ %443, %439 ], [ %446, %444 ], [ 0, %403 ]
  %450 = load i32, i32* %25, align 8
  switch i32 %450, label %468 [
    i32 0, label %451
    i32 3, label %451
  ]

451:                                              ; preds = %447, %447
  %452 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 17, i32 0
  %453 = load i32, i32* %452, align 8
  %454 = icmp sgt i32 %453, 0
  %455 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 17, i32 1
  %456 = load i32, i32* %455, align 4
  %457 = icmp sgt i32 %456, 0
  %458 = or i1 %454, %457
  %459 = load i32, i32* %390, align 4
  %460 = add nsw i32 %459, %453
  %461 = icmp slt i32 %460, %448
  %462 = or i1 %458, %461
  %463 = load i32, i32* %397, align 4
  %464 = add nsw i32 %463, %456
  %465 = icmp slt i32 %464, %449
  %466 = or i1 %462, %465
  %467 = zext i1 %466 to i8
  br label %468

468:                                              ; preds = %447, %451, %330, %316
  %469 = phi i8 [ 0, %330 ], [ 0, %316 ], [ %467, %451 ], [ 0, %447 ]
  %470 = load i32, i32* %25, align 8
  %471 = icmp eq i32 %470, 0
  %472 = icmp eq i32 %470, 3
  %473 = or i1 %471, %472
  %474 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %475 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %474, i64 8
  %476 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %475, align 8
  %477 = call i32 %476(%"class.jxl::Visitor"* %1, i1 zeroext %473) #8
  %478 = icmp eq i32 %477, 0
  br i1 %478, label %479, label %593

479:                                              ; preds = %468
  %480 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 18, i32 6
  store i64 %138, i64* %480, align 8
  %481 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 18, i32 7
  store i8 %469, i8* %481, align 8
  %482 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 18, i32 0
  %483 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %484 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %483, align 8
  %485 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %484, i64 11
  %486 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %485, align 8
  %487 = call i32 %486(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %482) #8
  %488 = icmp eq i32 %487, 0
  br i1 %488, label %489, label %767

489:                                              ; preds = %479
  %490 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 18, i32 1
  %491 = load i32, i32* %490, align 8
  %492 = icmp eq i32 %491, 0
  %493 = zext i1 %492 to i8
  %494 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 19
  %495 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 19, i32 0, i32 1
  %496 = bitcast %"struct.jxl::BlendingInfo"** %495 to i64*
  %497 = load i64, i64* %496, align 8
  %498 = bitcast %"class.std::__1::vector.16"* %494 to i64*
  %499 = load i64, i64* %498, align 8
  %500 = sub i64 %497, %499
  %501 = sdiv exact i64 %500, 40
  %502 = icmp ugt i64 %138, %501
  %503 = inttoptr i64 %499 to %"struct.jxl::BlendingInfo"*
  %504 = inttoptr i64 %497 to %"struct.jxl::BlendingInfo"*
  br i1 %502, label %505, label %507

505:                                              ; preds = %489
  %506 = sub nsw i64 %138, %501
  call void @_ZNSt3__16vectorIN3jxl12BlendingInfoENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.16"* %494, i64 %506) #8
  br label %522

507:                                              ; preds = %489
  %508 = icmp ult i64 %138, %501
  br i1 %508, label %509, label %520

509:                                              ; preds = %507
  %510 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %503, i64 %138
  %511 = icmp eq %"struct.jxl::BlendingInfo"* %510, %504
  br i1 %511, label %519, label %512

512:                                              ; preds = %509, %512
  %513 = phi %"struct.jxl::BlendingInfo"* [ %514, %512 ], [ %504, %509 ]
  %514 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %513, i64 -1
  %515 = bitcast %"struct.jxl::BlendingInfo"* %514 to void (%"struct.jxl::BlendingInfo"*)***
  %516 = load void (%"struct.jxl::BlendingInfo"*)**, void (%"struct.jxl::BlendingInfo"*)*** %515, align 8
  %517 = load void (%"struct.jxl::BlendingInfo"*)*, void (%"struct.jxl::BlendingInfo"*)** %516, align 8
  call void %517(%"struct.jxl::BlendingInfo"* %514) #8
  %518 = icmp eq %"struct.jxl::BlendingInfo"* %514, %510
  br i1 %518, label %519, label %512

519:                                              ; preds = %512, %509
  store %"struct.jxl::BlendingInfo"* %510, %"struct.jxl::BlendingInfo"** %495, align 8
  br label %520

520:                                              ; preds = %507, %519
  %521 = icmp eq i64 %138, 0
  br i1 %521, label %544, label %522

522:                                              ; preds = %505, %520
  %523 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %494, i64 0, i32 0, i32 0
  br label %524

524:                                              ; preds = %536, %522
  %525 = phi i64 [ 0, %522 ], [ %542, %536 ]
  %526 = phi i8 [ %493, %522 ], [ %541, %536 ]
  %527 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %523, align 8
  %528 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %527, i64 %525, i32 7
  store i8 %469, i8* %528, align 8
  %529 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %527, i64 %525, i32 6
  store i64 %138, i64* %529, align 8
  %530 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %527, i64 %525, i32 0
  %531 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %483, align 8
  %532 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %531, i64 11
  %533 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %532, align 8
  %534 = call i32 %533(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %530) #8
  %535 = icmp eq i32 %534, 0
  br i1 %535, label %536, label %767

536:                                              ; preds = %524
  %537 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %527, i64 %525, i32 1
  %538 = load i32, i32* %537, align 8
  %539 = icmp eq i32 %538, 0
  %540 = zext i1 %539 to i8
  %541 = and i8 %526, %540
  %542 = add nuw i64 %525, 1
  %543 = icmp eq i64 %542, %138
  br i1 %543, label %544, label %524

544:                                              ; preds = %536, %520
  %545 = phi i8 [ %493, %520 ], [ %541, %536 ]
  %546 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %37, align 8
  %547 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %546, i64 12
  %548 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %547, align 8
  %549 = call zeroext i1 %548(%"class.jxl::Visitor"* %1) #8
  br i1 %549, label %550, label %561

550:                                              ; preds = %544
  %551 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 27
  %552 = load i8, i8* %551, align 8, !range !12
  %553 = icmp eq i8 %552, 0
  br i1 %553, label %561, label %554

554:                                              ; preds = %550
  %555 = and i8 %545, 1
  %556 = icmp eq i8 %555, 0
  br i1 %556, label %767, label %557

557:                                              ; preds = %554
  %558 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 13
  %559 = load i8, i8* %558, align 8, !range !12
  %560 = icmp eq i8 %559, 0
  br i1 %560, label %561, label %767

561:                                              ; preds = %557, %550, %544
  %562 = load %"struct.jxl::CodecMetadata"*, %"struct.jxl::CodecMetadata"** %71, align 8
  %563 = icmp eq %"struct.jxl::CodecMetadata"* %562, null
  br i1 %563, label %568, label %564

564:                                              ; preds = %561
  %565 = getelementptr inbounds %"struct.jxl::CodecMetadata", %"struct.jxl::CodecMetadata"* %562, i64 0, i32 0, i32 10
  %566 = load i8, i8* %565, align 1, !range !12
  %567 = icmp ne i8 %566, 0
  br label %568

568:                                              ; preds = %561, %564
  %569 = phi i1 [ false, %561 ], [ %567, %564 ]
  %570 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %571 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %570, i64 8
  %572 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %571, align 8
  %573 = call i32 %572(%"class.jxl::Visitor"* %1, i1 zeroext %569) #8
  %574 = icmp eq i32 %573, 0
  br i1 %574, label %575, label %586

575:                                              ; preds = %568
  %576 = bitcast %"struct.jxl::CodecMetadata"** %71 to i64*
  %577 = load i64, i64* %576, align 8
  %578 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 20, i32 3
  %579 = bitcast %"struct.jxl::CodecMetadata"** %578 to i64*
  store i64 %577, i64* %579, align 8
  %580 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 20, i32 0
  %581 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %483, align 8
  %582 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %581, i64 11
  %583 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %582, align 8
  %584 = call i32 %583(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %580) #8
  %585 = icmp eq i32 %584, 0
  br i1 %585, label %586, label %767

586:                                              ; preds = %568, %575
  %587 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 21
  %588 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %54, align 8
  %589 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %588, i64 3
  %590 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %589, align 8
  %591 = call i32 %590(%"class.jxl::Visitor"* %1, i1 zeroext true, i8* %587) #8
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %593, label %767

593:                                              ; preds = %586, %468
  %594 = load i32, i32* %25, align 8
  %595 = icmp eq i32 %594, 0
  %596 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 21
  br i1 %595, label %597, label %600

597:                                              ; preds = %593
  %598 = load i8, i8* %596, align 8, !range !12
  %599 = icmp eq i8 %598, 0
  br label %602

600:                                              ; preds = %593
  store i8 0, i8* %596, align 8
  %601 = icmp eq i32 %594, 1
  br i1 %601, label %604, label %602

602:                                              ; preds = %597, %600
  %603 = phi i1 [ %599, %597 ], [ true, %600 ]
  br label %604

604:                                              ; preds = %600, %602
  %605 = phi i1 [ false, %600 ], [ %603, %602 ]
  %606 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %607 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %606, i64 8
  %608 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %607, align 8
  %609 = call i32 %608(%"class.jxl::Visitor"* %1, i1 zeroext %605) #8
  %610 = icmp eq i32 %609, 0
  br i1 %610, label %611, label %618

611:                                              ; preds = %604
  %612 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 22
  %613 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %28, align 8, !noalias !47
  %614 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %613, i64 4
  %615 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %614, align 8, !noalias !47
  %616 = call i32 %615(%"class.jxl::Visitor"* %1, i64 -9223372030412324864, i64 -9223372021822390270, i32 0, i32* %612) #8
  %617 = icmp eq i32 %616, 0
  br i1 %617, label %618, label %767

618:                                              ; preds = %611, %604
  %619 = load i32, i32* %25, align 8
  %620 = icmp eq i32 %619, 1
  br i1 %620, label %672, label %621

621:                                              ; preds = %618
  %622 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 21
  %623 = load i8, i8* %622, align 8, !range !12
  %624 = icmp eq i8 %623, 0
  br i1 %624, label %625, label %643

625:                                              ; preds = %621
  %626 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 20, i32 1
  %627 = load i32, i32* %626, align 8
  %628 = icmp eq i32 %627, 0
  br i1 %628, label %633, label %629

629:                                              ; preds = %625
  %630 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 22
  %631 = load i32, i32* %630, align 4
  %632 = icmp eq i32 %631, 0
  br i1 %632, label %643, label %633

633:                                              ; preds = %629, %625
  %634 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 18, i32 1
  %635 = load i32, i32* %634, align 8
  %636 = icmp eq i32 %635, 0
  %637 = icmp eq i8 %469, 0
  %638 = and i1 %637, %636
  br i1 %638, label %639, label %643

639:                                              ; preds = %633
  %640 = icmp eq i32 %619, 0
  %641 = icmp eq i32 %619, 3
  %642 = or i1 %640, %641
  br label %643

643:                                              ; preds = %629, %621, %639, %633
  %644 = phi i1 [ false, %633 ], [ false, %629 ], [ %642, %639 ], [ false, %621 ]
  %645 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %646 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %645, i64 8
  %647 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %646, align 8
  %648 = call i32 %647(%"class.jxl::Visitor"* %1, i1 zeroext %644) #8
  %649 = icmp eq i32 %648, 0
  br i1 %649, label %650, label %657

650:                                              ; preds = %643
  %651 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 23
  %652 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %54, align 8
  %653 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %652, i64 3
  %654 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %653, align 8
  %655 = call i32 %654(%"class.jxl::Visitor"* %1, i1 zeroext false, i8* %651) #8
  %656 = icmp eq i32 %655, 0
  br i1 %656, label %674, label %767

657:                                              ; preds = %643
  %658 = load i32, i32* %25, align 8
  %659 = icmp eq i32 %658, 2
  %660 = load i32 (%"class.jxl::Visitor"*, i1)**, i32 (%"class.jxl::Visitor"*, i1)*** %111, align 8
  %661 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %660, i64 8
  %662 = load i32 (%"class.jxl::Visitor"*, i1)*, i32 (%"class.jxl::Visitor"*, i1)** %661, align 8
  %663 = call i32 %662(%"class.jxl::Visitor"* %1, i1 zeroext %659) #8
  %664 = icmp eq i32 %663, 0
  br i1 %664, label %665, label %674

665:                                              ; preds = %657
  %666 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 23
  %667 = load i32 (%"class.jxl::Visitor"*, i1, i8*)**, i32 (%"class.jxl::Visitor"*, i1, i8*)*** %54, align 8
  %668 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %667, i64 3
  %669 = load i32 (%"class.jxl::Visitor"*, i1, i8*)*, i32 (%"class.jxl::Visitor"*, i1, i8*)** %668, align 8
  %670 = call i32 %669(%"class.jxl::Visitor"* %1, i1 zeroext true, i8* %666) #8
  %671 = icmp eq i32 %670, 0
  br i1 %671, label %674, label %767

672:                                              ; preds = %618
  %673 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 23
  store i8 1, i8* %673, align 8
  br label %674

674:                                              ; preds = %672, %657, %665, %650
  %675 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 11
  %676 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %676) #8, !noalias !50
  store i32 -1431655766, i32* %3, align 4, !noalias !50
  %677 = bitcast %"class.std::__1::basic_string"* %675 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %678 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %677, i64 0, i32 1, i32 0
  %679 = load i8, i8* %678, align 1, !noalias !50
  %680 = icmp slt i8 %679, 0
  br i1 %680, label %681, label %684

681:                                              ; preds = %674
  %682 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 11, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %683 = load i64, i64* %682, align 8, !noalias !50
  br label %686

684:                                              ; preds = %674
  %685 = zext i8 %679 to i64
  br label %686

686:                                              ; preds = %684, %681
  %687 = phi i64 [ %683, %681 ], [ %685, %684 ]
  %688 = trunc i64 %687 to i32
  store i32 %688, i32* %3, align 4, !noalias !50
  %689 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*** %28, align 8, !alias.scope !50, !noalias !53
  %690 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %689, i64 4
  %691 = load i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i64, i32, i32*)** %690, align 8, !noalias !56
  %692 = call i32 %691(%"class.jxl::Visitor"* %1, i64 15032385536, i64 6635724472836, i32 0, i32* nonnull %3) #8
  %693 = icmp eq i32 %692, 0
  br i1 %693, label %694, label %741

694:                                              ; preds = %686
  %695 = load i1 (%"class.jxl::Visitor"*)**, i1 (%"class.jxl::Visitor"*)*** %37, align 8, !alias.scope !50
  %696 = getelementptr inbounds i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %695, i64 12
  %697 = load i1 (%"class.jxl::Visitor"*)*, i1 (%"class.jxl::Visitor"*)** %696, align 8
  %698 = call zeroext i1 %697(%"class.jxl::Visitor"* %1) #8
  br i1 %698, label %699, label %702

699:                                              ; preds = %694
  %700 = load i32, i32* %3, align 4, !noalias !50
  %701 = zext i32 %700 to i64
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %675, i64 %701, i8 signext 0) #8
  br label %702

702:                                              ; preds = %699, %694
  %703 = load i32, i32* %3, align 4, !noalias !50
  %704 = icmp eq i32 %703, 0
  br i1 %704, label %743, label %705

705:                                              ; preds = %702
  %706 = bitcast i32* %4 to i8*
  %707 = bitcast %"class.std::__1::basic_string"* %675 to i8*
  %708 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %675, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %709 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  br label %710

710:                                              ; preds = %733, %705
  %711 = phi i64 [ 0, %705 ], [ %736, %733 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %706) #8, !noalias !50
  store i32 -1431655766, i32* %4, align 4, !noalias !50
  %712 = load i8, i8* %678, align 1, !noalias !50
  %713 = icmp slt i8 %712, 0
  br i1 %713, label %714, label %716

714:                                              ; preds = %710
  %715 = load i8*, i8** %708, align 8, !noalias !50
  br label %716

716:                                              ; preds = %714, %710
  %717 = phi i8* [ %715, %714 ], [ %707, %710 ]
  %718 = getelementptr inbounds i8, i8* %717, i64 %711
  %719 = load i8, i8* %718, align 1
  %720 = sext i8 %719 to i32
  store i32 %720, i32* %4, align 4, !noalias !50
  %721 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %709, align 8, !alias.scope !50
  %722 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %721, i64 5
  %723 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %722, align 8
  %724 = call i32 %723(%"class.jxl::Visitor"* %1, i64 8, i32 0, i32* nonnull %4) #8
  %725 = icmp eq i32 %724, 0
  br i1 %725, label %726, label %740

726:                                              ; preds = %716
  %727 = load i32, i32* %4, align 4, !noalias !50
  %728 = trunc i32 %727 to i8
  %729 = load i8, i8* %678, align 1, !noalias !50
  %730 = icmp slt i8 %729, 0
  br i1 %730, label %731, label %733

731:                                              ; preds = %726
  %732 = load i8*, i8** %708, align 8, !noalias !50
  br label %733

733:                                              ; preds = %731, %726
  %734 = phi i8* [ %732, %731 ], [ %707, %726 ]
  %735 = getelementptr inbounds i8, i8* %734, i64 %711
  store i8 %728, i8* %735, align 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %706) #8, !noalias !50
  %736 = add nuw nsw i64 %711, 1
  %737 = load i32, i32* %3, align 4, !noalias !50
  %738 = zext i32 %737 to i64
  %739 = icmp ult i64 %736, %738
  br i1 %739, label %710, label %743

740:                                              ; preds = %716
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %706) #8, !noalias !50
  br label %741

741:                                              ; preds = %686, %740
  %742 = phi i32 [ %724, %740 ], [ %692, %686 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %676) #8, !noalias !50
  br label %767

743:                                              ; preds = %733, %702
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %676) #8, !noalias !50
  %744 = load i8, i8* %6, align 1, !range !12
  %745 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 26, i32 29
  store i8 %744, i8* %745, align 8
  %746 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 26, i32 0
  %747 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)***
  %748 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)**, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*** %747, align 8
  %749 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %748, i64 11
  %750 = load i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)*, i32 (%"class.jxl::Visitor"*, %"class.jxl::Fields"*)** %749, align 8
  %751 = call i32 %750(%"class.jxl::Visitor"* %1, %"class.jxl::Fields"* %746) #8
  %752 = icmp eq i32 %751, 0
  br i1 %752, label %753, label %767

753:                                              ; preds = %743
  %754 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 28
  %755 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64*)***
  %756 = load i32 (%"class.jxl::Visitor"*, i64*)**, i32 (%"class.jxl::Visitor"*, i64*)*** %755, align 8
  %757 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64*)*, i32 (%"class.jxl::Visitor"*, i64*)** %756, i64 13
  %758 = load i32 (%"class.jxl::Visitor"*, i64*)*, i32 (%"class.jxl::Visitor"*, i64*)** %757, align 8
  %759 = call i32 %758(%"class.jxl::Visitor"* %1, i64* %754) #8
  %760 = icmp eq i32 %759, 0
  br i1 %760, label %761, label %767

761:                                              ; preds = %753
  %762 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*)***
  %763 = load i32 (%"class.jxl::Visitor"*)**, i32 (%"class.jxl::Visitor"*)*** %762, align 8
  %764 = getelementptr inbounds i32 (%"class.jxl::Visitor"*)*, i32 (%"class.jxl::Visitor"*)** %763, i64 14
  %765 = load i32 (%"class.jxl::Visitor"*)*, i32 (%"class.jxl::Visitor"*)** %764, align 8
  %766 = call i32 %765(%"class.jxl::Visitor"* %1) #8
  br label %767

767:                                              ; preds = %219, %203, %524, %554, %557, %586, %575, %372, %396, %389, %743, %741, %78, %98, %117, %761, %323, %479, %611, %650, %665, %753, %304, %288, %270, %262, %241, %147, %60, %49
  %768 = phi i32 [ %766, %761 ], [ %759, %753 ], [ %742, %741 ], [ %655, %650 ], [ %670, %665 ], [ %616, %611 ], [ %487, %479 ], [ %328, %323 ], [ %309, %304 ], [ %294, %288 ], [ %275, %270 ], [ %268, %262 ], [ %247, %241 ], [ %152, %147 ], [ %123, %117 ], [ %96, %98 ], [ %68, %60 ], [ %58, %49 ], [ 1, %78 ], [ %751, %743 ], [ %373, %372 ], [ %394, %389 ], [ %401, %396 ], [ 1, %554 ], [ 1, %557 ], [ %584, %575 ], [ %591, %586 ], [ %534, %524 ], [ 1, %219 ], [ %217, %203 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #8
  br label %769

769:                                              ; preds = %46, %34, %767, %19
  %770 = phi i32 [ 0, %19 ], [ %768, %767 ], [ %32, %34 ], [ 1, %46 ]
  ret i32 %770
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl12BlendingInfoD0Ev(%"struct.jxl::BlendingInfo"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"struct.jxl::BlendingInfo"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl12BlendingInfo4NameEv(%"struct.jxl::BlendingInfo"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl14AnimationFrameD0Ev(%"struct.jxl::AnimationFrame"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"struct.jxl::AnimationFrame"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl14AnimationFrame4NameEv(%"struct.jxl::AnimationFrame"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6PassesD0Ev(%"struct.jxl::Passes"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"struct.jxl::Passes"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl6Passes4NameEv(%"struct.jxl::Passes"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11FrameHeaderD2Ev(%"struct.jxl::FrameHeader"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11FrameHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 19
  %4 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %3, i64 0, i32 0, i32 0
  %5 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %4, align 8
  %6 = icmp eq %"struct.jxl::BlendingInfo"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.jxl::BlendingInfo"* %5 to i8*
  %9 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 19, i32 0, i32 1
  %10 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %9, align 8
  %11 = icmp eq %"struct.jxl::BlendingInfo"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"struct.jxl::BlendingInfo"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %13, i64 -1
  %15 = bitcast %"struct.jxl::BlendingInfo"* %14 to void (%"struct.jxl::BlendingInfo"*)***
  %16 = load void (%"struct.jxl::BlendingInfo"*)**, void (%"struct.jxl::BlendingInfo"*)*** %15, align 8
  %17 = load void (%"struct.jxl::BlendingInfo"*)*, void (%"struct.jxl::BlendingInfo"*)** %16, align 8
  tail call void %17(%"struct.jxl::BlendingInfo"* %14) #8
  %18 = icmp eq %"struct.jxl::BlendingInfo"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.16"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"struct.jxl::BlendingInfo"* %5, %"struct.jxl::BlendingInfo"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #10
  br label %24

24:                                               ; preds = %1, %22
  %25 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 16, i32 0, i32 0
  %26 = load i32*, i32** %25, align 8
  %27 = icmp eq i32* %26, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %24
  %29 = ptrtoint i32* %26 to i64
  %30 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 16, i32 0, i32 1
  %31 = bitcast i32** %30 to i64*
  store i64 %29, i64* %31, align 8
  %32 = bitcast i32* %26 to i8*
  tail call void @_ZdlPv(i8* %32) #10
  br label %33

33:                                               ; preds = %24, %28
  %34 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 11
  %35 = bitcast %"class.std::__1::basic_string"* %34 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  %37 = load i8, i8* %36, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  tail call void @_ZdlPv(i8* %41) #10
  br label %42

42:                                               ; preds = %33, %39
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11FrameHeaderD0Ev(%"struct.jxl::FrameHeader"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11FrameHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 19
  %4 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %3, i64 0, i32 0, i32 0
  %5 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %4, align 8
  %6 = icmp eq %"struct.jxl::BlendingInfo"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %1
  %8 = bitcast %"struct.jxl::BlendingInfo"* %5 to i8*
  %9 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 19, i32 0, i32 1
  %10 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %9, align 8
  %11 = icmp eq %"struct.jxl::BlendingInfo"* %10, %5
  br i1 %11, label %22, label %12

12:                                               ; preds = %7, %12
  %13 = phi %"struct.jxl::BlendingInfo"* [ %14, %12 ], [ %10, %7 ]
  %14 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %13, i64 -1
  %15 = bitcast %"struct.jxl::BlendingInfo"* %14 to void (%"struct.jxl::BlendingInfo"*)***
  %16 = load void (%"struct.jxl::BlendingInfo"*)**, void (%"struct.jxl::BlendingInfo"*)*** %15, align 8
  %17 = load void (%"struct.jxl::BlendingInfo"*)*, void (%"struct.jxl::BlendingInfo"*)** %16, align 8
  tail call void %17(%"struct.jxl::BlendingInfo"* %14) #8
  %18 = icmp eq %"struct.jxl::BlendingInfo"* %14, %5
  br i1 %18, label %19, label %12

19:                                               ; preds = %12
  %20 = bitcast %"class.std::__1::vector.16"* %3 to i8**
  %21 = load i8*, i8** %20, align 8
  br label %22

22:                                               ; preds = %19, %7
  %23 = phi i8* [ %21, %19 ], [ %8, %7 ]
  store %"struct.jxl::BlendingInfo"* %5, %"struct.jxl::BlendingInfo"** %9, align 8
  tail call void @_ZdlPv(i8* %23) #10
  br label %24

24:                                               ; preds = %22, %1
  %25 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 16, i32 0, i32 0
  %26 = load i32*, i32** %25, align 8
  %27 = icmp eq i32* %26, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %24
  %29 = ptrtoint i32* %26 to i64
  %30 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 16, i32 0, i32 1
  %31 = bitcast i32** %30 to i64*
  store i64 %29, i64* %31, align 8
  %32 = bitcast i32* %26 to i8*
  tail call void @_ZdlPv(i8* %32) #10
  br label %33

33:                                               ; preds = %28, %24
  %34 = getelementptr inbounds %"struct.jxl::FrameHeader", %"struct.jxl::FrameHeader"* %0, i64 0, i32 11
  %35 = bitcast %"class.std::__1::basic_string"* %34 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %35, i64 0, i32 1, i32 0
  %37 = load i8, i8* %36, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  tail call void @_ZdlPv(i8* %41) #10
  br label %42

42:                                               ; preds = %33, %39
  %43 = bitcast %"struct.jxl::FrameHeader"* %0 to i8*
  tail call void @_ZdlPv(i8* %43) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl11FrameHeader4NameEv(%"struct.jxl::FrameHeader"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.18, i64 0, i64 0)
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl22YCbCrChromaSubsamplingD0Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"struct.jxl::YCbCrChromaSubsampling"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK3jxl22YCbCrChromaSubsampling4NameEv(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #0 comdat align 2 {
  ret i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl22YCbCrChromaSubsampling11VisitFieldsEPNS_7VisitorE(%"struct.jxl::YCbCrChromaSubsampling"*, %"class.jxl::Visitor"* noalias) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.jxl::Visitor"* %1 to i32 (%"class.jxl::Visitor"*, i64, i32, i32*)***
  %4 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 0
  %5 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %6 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %5, i64 5
  %7 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %6, align 8
  %8 = tail call i32 %7(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %4) #8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 1
  %12 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %13 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %12, i64 5
  %14 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %13, align 8
  %15 = tail call i32 %14(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %11) #8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %2, %10, %19, %26
  %18 = phi i32 [ 0, %26 ], [ %8, %2 ], [ %15, %10 ], [ %24, %19 ]
  ret i32 %18

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 1, i64 2
  %21 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)**, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*** %3, align 8
  %22 = getelementptr inbounds i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %21, i64 5
  %23 = load i32 (%"class.jxl::Visitor"*, i64, i32, i32*)*, i32 (%"class.jxl::Visitor"*, i64, i32, i32*)** %22, align 8
  %24 = tail call i32 %23(%"class.jxl::Visitor"* %1, i64 2, i32 0, i32* %20) #8
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %17

26:                                               ; preds = %19
  %27 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 2
  %28 = getelementptr inbounds %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::YCbCrChromaSubsampling"* %0, i64 0, i32 3
  %29 = load i32, i32* %4, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = add nsw i64 %30, -1
  %34 = icmp ult i64 %33, 2
  %35 = select i1 %34, i8 %32, i8 0
  %36 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %30
  %37 = load i8, i8* %36, align 1
  %38 = or i64 %30, 2
  %39 = icmp eq i64 %38, 3
  %40 = select i1 %39, i8 %37, i8 0
  %41 = load i32, i32* %11, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = icmp ult i8 %35, %44
  %46 = select i1 %45, i8 %44, i8 %35
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %42
  %48 = load i8, i8* %47, align 1
  %49 = icmp ult i8 %40, %48
  %50 = select i1 %49, i8 %48, i8 %40
  %51 = load i32, i32* %20, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kHShiftE, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = icmp ult i8 %46, %54
  %56 = select i1 %55, i8 %54, i8 %46
  store i8 %56, i8* %27, align 4
  %57 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZN3jxl22YCbCrChromaSubsampling7kVShiftE, i64 0, i64 %52
  %58 = load i8, i8* %57, align 1
  %59 = icmp ult i8 %50, %58
  %60 = select i1 %59, i8 %58, i8 %50
  store i8 %60, i8* %28, align 1
  br label %17
}

declare i64 @_ZNK3jxl13PreviewHeader5xsizeEv(%"class.jxl::PreviewHeader"*) local_unnamed_addr #1

declare i64 @_ZNK3jxl10SizeHeader5xsizeEv(%"class.jxl::SizeHeader"*) local_unnamed_addr #1

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl6FieldsD2Ev(%"class.jxl::Fields"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.9"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !57

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !59
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !59
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !62, !noalias !59
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !62, !noalias !59
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !62, !noalias !59
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !62, !noalias !59
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !64

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !59
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !62, !noalias !59
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !62, !noalias !59
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !66

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.9"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.9"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #9
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #9
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #10
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !67
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !67
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !70, !noalias !67
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !70, !noalias !67
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !70, !noalias !67
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !70, !noalias !67
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !72

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !67
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !70, !noalias !67
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !70, !noalias !67
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !73

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !74

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #8
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #10
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl12BlendingInfoENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.16"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::BlendingInfo"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::BlendingInfo"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 40
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %28, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::BlendingInfo"*
  %14 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %26, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.jxl::BlendingInfo"* %14 to i64
  br label %26

18:                                               ; preds = %12, %18
  %19 = phi %"struct.jxl::BlendingInfo"* [ %24, %18 ], [ %13, %12 ]
  %20 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %19, i64 0, i32 0
  %21 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %19, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl12BlendingInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %22 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %19, i64 0, i32 6
  store i64 0, i64* %22, align 8
  %23 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %19, i64 0, i32 7
  store i8 0, i8* %23, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %20) #8
  %24 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %19, i64 1
  %25 = icmp eq %"struct.jxl::BlendingInfo"* %24, %14
  br i1 %25, label %16, label %18

26:                                               ; preds = %12, %16
  %27 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %27, i64* %7, align 8
  br label %106

28:                                               ; preds = %2
  %29 = bitcast %"class.std::__1::vector.16"* %0 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %8, %30
  %32 = sdiv exact i64 %31, 40
  %33 = add i64 %32, %1
  %34 = icmp ugt i64 %33, 461168601842738790
  br i1 %34, label %35, label %37

35:                                               ; preds = %28
  %36 = bitcast %"class.std::__1::vector.16"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %36) #9
  unreachable

37:                                               ; preds = %28
  %38 = sub i64 %5, %30
  %39 = sdiv exact i64 %38, 40
  %40 = icmp ult i64 %39, 230584300921369395
  br i1 %40, label %41, label %46

41:                                               ; preds = %37
  %42 = shl nsw i64 %39, 1
  %43 = icmp ult i64 %42, %33
  %44 = select i1 %43, i64 %33, i64 %42
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %51, label %46

46:                                               ; preds = %37, %41
  %47 = phi i64 [ %44, %41 ], [ 461168601842738790, %37 ]
  %48 = mul i64 %47, 40
  %49 = tail call i8* @_Znwm(i64 %48) #10
  %50 = bitcast i8* %49 to %"struct.jxl::BlendingInfo"*
  br label %51

51:                                               ; preds = %41, %46
  %52 = phi i64 [ %47, %46 ], [ 0, %41 ]
  %53 = phi %"struct.jxl::BlendingInfo"* [ %50, %46 ], [ null, %41 ]
  %54 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %53, i64 %32
  %55 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %53, i64 %52
  %56 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %54, i64 %1
  br label %57

57:                                               ; preds = %51, %57
  %58 = phi %"struct.jxl::BlendingInfo"* [ %63, %57 ], [ %54, %51 ]
  %59 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %58, i64 0, i32 0
  %60 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %58, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl12BlendingInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %60, align 8
  %61 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %58, i64 0, i32 6
  store i64 0, i64* %61, align 8
  %62 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %58, i64 0, i32 7
  store i8 0, i8* %62, align 8
  tail call void @_ZN3jxl6Bundle4InitEPNS_6FieldsE(%"class.jxl::Fields"* %59) #8
  %63 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %58, i64 1
  %64 = icmp eq %"struct.jxl::BlendingInfo"* %56, %63
  br i1 %64, label %65, label %57

65:                                               ; preds = %57
  %66 = ptrtoint %"struct.jxl::BlendingInfo"* %55 to i64
  %67 = ptrtoint %"struct.jxl::BlendingInfo"* %56 to i64
  %68 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %0, i64 0, i32 0, i32 0
  %69 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %68, align 8
  %70 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %6, align 8
  %71 = icmp eq %"struct.jxl::BlendingInfo"* %70, %69
  br i1 %71, label %72, label %74

72:                                               ; preds = %65
  %73 = ptrtoint %"struct.jxl::BlendingInfo"* %69 to i64
  br label %88

74:                                               ; preds = %65, %74
  %75 = phi %"struct.jxl::BlendingInfo"* [ %83, %74 ], [ %54, %65 ]
  %76 = phi %"struct.jxl::BlendingInfo"* [ %77, %74 ], [ %70, %65 ]
  %77 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %76, i64 -1
  %78 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %75, i64 -1, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl12BlendingInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %78, align 8
  %79 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %75, i64 -1, i32 1
  %80 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %76, i64 -1, i32 1
  %81 = bitcast i32* %79 to i8*
  %82 = bitcast i32* %80 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 25, i1 false) #8
  %83 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %75, i64 -1
  %84 = icmp eq %"struct.jxl::BlendingInfo"* %77, %69
  br i1 %84, label %85, label %74

85:                                               ; preds = %74
  %86 = load i64, i64* %29, align 8
  %87 = load %"struct.jxl::BlendingInfo"*, %"struct.jxl::BlendingInfo"** %6, align 8
  br label %88

88:                                               ; preds = %72, %85
  %89 = phi %"struct.jxl::BlendingInfo"* [ %69, %72 ], [ %87, %85 ]
  %90 = phi %"struct.jxl::BlendingInfo"* [ %54, %72 ], [ %83, %85 ]
  %91 = phi i64 [ %73, %72 ], [ %86, %85 ]
  %92 = ptrtoint %"struct.jxl::BlendingInfo"* %90 to i64
  store i64 %92, i64* %29, align 8
  store i64 %67, i64* %7, align 8
  store i64 %66, i64* %4, align 8
  %93 = inttoptr i64 %91 to %"struct.jxl::BlendingInfo"*
  %94 = icmp eq %"struct.jxl::BlendingInfo"* %89, %93
  br i1 %94, label %102, label %95

95:                                               ; preds = %88, %95
  %96 = phi %"struct.jxl::BlendingInfo"* [ %97, %95 ], [ %89, %88 ]
  %97 = getelementptr inbounds %"struct.jxl::BlendingInfo", %"struct.jxl::BlendingInfo"* %96, i64 -1
  %98 = bitcast %"struct.jxl::BlendingInfo"* %97 to void (%"struct.jxl::BlendingInfo"*)***
  %99 = load void (%"struct.jxl::BlendingInfo"*)**, void (%"struct.jxl::BlendingInfo"*)*** %98, align 8
  %100 = load void (%"struct.jxl::BlendingInfo"*)*, void (%"struct.jxl::BlendingInfo"*)** %99, align 8
  tail call void %100(%"struct.jxl::BlendingInfo"* %97) #8
  %101 = icmp eq %"struct.jxl::BlendingInfo"* %97, %93
  br i1 %101, label %102, label %95

102:                                              ; preds = %95, %88
  %103 = icmp eq i64 %91, 0
  br i1 %103, label %106, label %104

104:                                              ; preds = %102
  %105 = inttoptr i64 %91 to i8*
  tail call void @_ZdlPv(i8* %105) #10
  br label %106

106:                                              ; preds = %104, %102, %26
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3jxlL14VisitBlendModeEPNS_7VisitorENS_9BlendModeEPS2_: argument 0"}
!4 = distinct !{!4, !"_ZN3jxlL14VisitBlendModeEPNS_7VisitorENS_9BlendModeEPS2_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!7 = distinct !{!7, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!8 = !{!6, !3}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!11 = distinct !{!11, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!12 = !{i8 0, i8 2}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!15 = distinct !{!15, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!18 = distinct !{!18, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!21 = distinct !{!21, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!24 = distinct !{!24, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!27 = distinct !{!27, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!30 = distinct !{!30, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"_ZN3jxlL14VisitFrameTypeEPNS_7VisitorENS_9FrameTypeEPS2_: argument 0"}
!33 = distinct !{!33, !"_ZN3jxlL14VisitFrameTypeEPNS_7VisitorENS_9FrameTypeEPS2_"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!36 = distinct !{!36, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!37 = !{!35, !32}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!40 = distinct !{!40, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!43 = distinct !{!43, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!44 = !{!45}
!45 = distinct !{!45, !46, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!46 = distinct !{!46, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!49 = distinct !{!49, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!50 = !{!51}
!51 = distinct !{!51, !52, !"_ZN3jxlL15VisitNameStringEPNS_7VisitorEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE: argument 0"}
!52 = distinct !{!52, !"_ZN3jxlL15VisitNameStringEPNS_7VisitorEPNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj: argument 0"}
!55 = distinct !{!55, !"_ZN3jxl7Visitor3U32ENS_8U32DistrES1_S1_S1_jPj"}
!56 = !{!54, !51}
!57 = distinct !{!57, !58}
!58 = !{!"llvm.loop.unroll.disable"}
!59 = !{!60}
!60 = distinct !{!60, !61}
!61 = distinct !{!61, !"LVerDomain"}
!62 = !{!63}
!63 = distinct !{!63, !61}
!64 = distinct !{!64, !65}
!65 = !{!"llvm.loop.isvectorized", i32 1}
!66 = distinct !{!66, !65}
!67 = !{!68}
!68 = distinct !{!68, !69}
!69 = distinct !{!69, !"LVerDomain"}
!70 = !{!71}
!71 = distinct !{!71, !69}
!72 = distinct !{!72, !65}
!73 = distinct !{!73, !58}
!74 = distinct !{!74, !65}
