; ModuleID = '../../third_party/pdfium/core/fxcrt/xml/cfx_xmlparser.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/xml/cfx_xmlparser.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.(anonymous namespace)::FX_XMLNAMECHAR" = type { i16, i16, i8 }
%class.CFX_XMLParser = type <{ %class.CFX_XMLNode*, %"class.fxcrt::RetainPtr", %"class.std::__1::vector", i64, i32, [4 x i8] }>
%class.CFX_XMLNode = type { %"class.fxcrt::TreeNode" }
%"class.fxcrt::TreeNode" = type { i32 (...)**, %class.CFX_XMLNode*, %class.CFX_XMLNode*, %class.CFX_XMLNode*, %class.CFX_XMLNode*, %class.CFX_XMLNode* }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_SeekableStreamProxy* }
%class.CFX_SeekableStreamProxy = type { %"class.fxcrt::Retainable", i16, i64, i64, %"class.fxcrt::RetainPtr.0" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::RetainPtr.0" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.IFX_SeekableReadStream* }
%class.IFX_SeekableReadStream = type { %class.IFX_StreamWithSize, %"class.fxcrt::Retainable" }
%class.IFX_StreamWithSize = type { i32 (...)** }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i32* }
%class.CFX_XMLDocument = type { %"class.std::__1::vector.13", %"class.fxcrt::UnownedPtr" }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"*, %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %class.CFX_XMLNode* }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.std::__1::unique_ptr.15"* }
%"class.fxcrt::UnownedPtr" = type { %class.CFX_XMLElement* }
%class.CFX_XMLElement = type { %class.CFX_XMLNode, %"class.fxcrt::WideString", %"class.std::__1::map" }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr.22" }
%"class.fxcrt::RetainPtr.22" = type { %"class.std::__1::unique_ptr.23" }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.28", %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { i64 }
%"class.std::__1::stack" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.44" }
%"struct.std::__1::__split_buffer" = type { i32**, i32**, i32**, %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { i32** }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::stack.48" = type { %"class.std::__1::deque.49" }
%"class.std::__1::deque.49" = type { %"class.std::__1::__deque_base.50" }
%"class.std::__1::__deque_base.50" = type { %"struct.std::__1::__split_buffer.51", i64, %"class.std::__1::__compressed_pair.57" }
%"struct.std::__1::__split_buffer.51" = type { i32**, i32**, i32**, %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { i32** }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%class.CFX_XMLText = type { %class.CFX_XMLNode, %"class.fxcrt::WideString" }
%class.CFX_XMLInstruction = type { %class.CFX_XMLNode, %"class.fxcrt::WideString", %"class.std::__1::vector.62" }
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %"class.fxcrt::WideString"*, %"class.fxcrt::WideString"*, %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.fxcrt::WideString"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%class.CFX_XMLCharData = type { %class.CFX_XMLText }
%"struct.std::__1::__split_buffer.112" = type { i32**, i32**, i32**, %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.53", %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.std::__1::allocator.55"* }
%"class.std::__1::allocator.55" = type { i8 }
%"struct.std::__1::__split_buffer.135" = type { i32**, i32**, i32**, %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.40", %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.std::__1::allocator.42"* }
%"class.std::__1::allocator.42" = type { i8 }

$_ZN5fxcrt8TreeNodeI11CFX_XMLNodePS1_E15AppendLastChildES2_ = comdat any

$_ZNSt3__16vectorIw16FxAllocAllocatorIwEE8__appendEm = comdat any

$_ZNSt3__16vectorINS_10unique_ptrI11CFX_XMLNodeNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_ = comdat any

$_ZNSt3__15dequeIN11CFX_XMLNode4TypeENS_9allocatorIS2_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPN11CFX_XMLNode4TypeENS_9allocatorIS3_EEE9push_backEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPN11CFX_XMLNode4TypeENS_9allocatorIS3_EEE10push_frontEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPN11CFX_XMLNode4TypeERNS_9allocatorIS3_EEE10push_frontERKS3_ = comdat any

$_ZNSt3__15dequeIwNS_9allocatorIwEEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPwNS_9allocatorIS1_EEE9push_backEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPwNS_9allocatorIS1_EEE10push_frontEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPwRNS_9allocatorIS1_EEE10push_frontERKS1_ = comdat any

@_ZN12_GLOBAL__N_114g_XMLNameCharsE = internal constant [20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"] [%"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 45, i16 46, i8 0 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 48, i16 57, i8 0 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 58, i16 58, i8 0 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 65, i16 90, i8 1 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 95, i16 95, i8 1 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 97, i16 122, i8 1 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 183, i16 183, i8 0 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 192, i16 214, i8 1 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 216, i16 246, i8 1 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 248, i16 767, i8 1 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 768, i16 879, i8 0 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 880, i16 893, i8 1 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 895, i16 8191, i8 1 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 8204, i16 8205, i8 1 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 8255, i16 8256, i8 0 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 8304, i16 8591, i8 1 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 11264, i16 12271, i8 1 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 12289, i16 -10241, i8 1 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 -1792, i16 -561, i8 1 }, %"struct.(anonymous namespace)::FX_XMLNAMECHAR" { i16 -528, i16 -3, i8 1 }], align 16
@.str.2 = private unnamed_addr constant [3 x i32] [i32 45, i32 45, i32 0], align 4
@.str.3 = private unnamed_addr constant [8 x i32] [i32 91, i32 67, i32 68, i32 65, i32 84, i32 65, i32 91, i32 0], align 4
@.str.4 = private unnamed_addr constant [4 x i32] [i32 93, i32 93, i32 62, i32 0], align 4
@.str.5 = private unnamed_addr constant [4 x i32] [i32 45, i32 45, i32 62, i32 0], align 4
@.str.6 = private unnamed_addr constant [4 x i32] [i32 97, i32 109, i32 112, i32 0], align 4
@.str.7 = private unnamed_addr constant [3 x i32] [i32 108, i32 116, i32 0], align 4
@.str.8 = private unnamed_addr constant [3 x i32] [i32 103, i32 116, i32 0], align 4
@.str.9 = private unnamed_addr constant [5 x i32] [i32 97, i32 112, i32 111, i32 115, i32 0], align 4
@.str.10 = private unnamed_addr constant [5 x i32] [i32 113, i32 117, i32 111, i32 116, i32 0], align 4
@.str.11 = private unnamed_addr constant [1 x i32] zeroinitializer, align 4

@_ZN13CFX_XMLParserC1ERKN5fxcrt9RetainPtrI22IFX_SeekableReadStreamEE = hidden unnamed_addr alias void (%class.CFX_XMLParser*, %"class.fxcrt::RetainPtr.0"*), void (%class.CFX_XMLParser*, %"class.fxcrt::RetainPtr.0"*)* @_ZN13CFX_XMLParserC2ERKN5fxcrt9RetainPtrI22IFX_SeekableReadStreamEE
@_ZN13CFX_XMLParserD1Ev = hidden unnamed_addr alias void (%class.CFX_XMLParser*), void (%class.CFX_XMLParser*)* @_ZN13CFX_XMLParserD2Ev

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN13CFX_XMLParser13IsXMLNameCharEwb(i32 signext, i1 zeroext) local_unnamed_addr #0 align 2 {
  br label %3

3:                                                ; preds = %3, %2
  %4 = phi i64 [ 20, %2 ], [ %16, %3 ]
  %5 = phi %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* [ getelementptr inbounds ([20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"], [20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"]* @_ZN12_GLOBAL__N_114g_XMLNameCharsE, i64 0, i64 0), %2 ], [ %15, %3 ]
  %6 = lshr i64 %4, 1
  %7 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %5, i64 1
  %8 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %5, i64 %6, i32 1
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = icmp slt i32 %10, %0
  %12 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %7, i64 %6
  %13 = xor i64 %6, -1
  %14 = add i64 %4, %13
  %15 = select i1 %11, %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %12, %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %5
  %16 = select i1 %11, i64 %14, i64 %6
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %18, label %3

18:                                               ; preds = %3
  %19 = icmp eq %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %15, getelementptr inbounds ([20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"], [20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"]* @_ZN12_GLOBAL__N_114g_XMLNameCharsE, i64 1, i64 0)
  br i1 %19, label %32, label %20

20:                                               ; preds = %18
  %21 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %15, i64 0, i32 0
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = icmp sgt i32 %23, %0
  %25 = xor i1 %1, true
  %26 = or i1 %24, %25
  %27 = xor i1 %24, true
  br i1 %26, label %32, label %28

28:                                               ; preds = %20
  %29 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %15, i64 0, i32 2
  %30 = load i8, i8* %29, align 2, !range !2
  %31 = icmp ne i8 %30, 0
  br label %32

32:                                               ; preds = %20, %18, %28
  %33 = phi i1 [ %27, %20 ], [ false, %18 ], [ %31, %28 ]
  ret i1 %33
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFX_XMLParserC2ERKN5fxcrt9RetainPtrI22IFX_SeekableReadStreamEE(%class.CFX_XMLParser* nocapture, %"class.fxcrt::RetainPtr.0"* dereferenceable(8)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2
  %5 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 3
  %6 = bitcast %class.CFX_XMLParser* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 40, i1 false)
  store i64 1024, i64* %5, align 8
  %7 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 4
  store i32 -1, i32* %7, align 8
  %8 = tail call i8* @_Znwm(i64 48) #13, !noalias !3
  %9 = bitcast i8* %8 to %class.CFX_SeekableStreamProxy*
  tail call void @_ZN23CFX_SeekableStreamProxyC1ERKN5fxcrt9RetainPtrI22IFX_SeekableReadStreamEE(%class.CFX_SeekableStreamProxy* nonnull %9, %"class.fxcrt::RetainPtr.0"* dereferenceable(8) %1) #14, !noalias !3
  %10 = getelementptr inbounds i8, i8* %8, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 8, !noalias !3
  %13 = add nsw i64 %12, 1
  store i64 %13, i64* %11, align 8, !noalias !3
  %14 = getelementptr inbounds i8, i8* %8, i64 16
  %15 = bitcast i8* %14 to i16*
  %16 = load i16, i16* %15, align 8
  switch i16 %16, label %17 [
    i16 1200, label %18
    i16 1201, label %18
    i16 -535, label %18
  ]

17:                                               ; preds = %2
  tail call void @_ZN23CFX_SeekableStreamProxy11SetCodePageEt(%class.CFX_SeekableStreamProxy* nonnull %9, i16 zeroext -535) #14
  br label %18

18:                                               ; preds = %2, %2, %2, %17
  %19 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load %class.CFX_SeekableStreamProxy*, %class.CFX_SeekableStreamProxy** %19, align 8
  %21 = icmp eq %class.CFX_SeekableStreamProxy* %20, %9
  br i1 %21, label %38, label %22

22:                                               ; preds = %18
  %23 = load i64, i64* %11, align 8
  %24 = add nsw i64 %23, 1
  store i64 %24, i64* %11, align 8
  %25 = bitcast %"class.fxcrt::RetainPtr"* %3 to i8**
  store i8* %8, i8** %25, align 8
  %26 = icmp eq %class.CFX_SeekableStreamProxy* %20, null
  br i1 %26, label %38, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %20, i64 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = add nsw i64 %29, -1
  store i64 %30, i64* %28, align 8
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %38

32:                                               ; preds = %27
  %33 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %20, i64 0, i32 0
  %34 = bitcast %class.CFX_SeekableStreamProxy* %20 to void (%"class.fxcrt::Retainable"*)***
  %35 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %34, align 8
  %36 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %35, i64 1
  %37 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %36, align 8
  tail call void %37(%"class.fxcrt::Retainable"* nonnull %33) #14
  br label %38

38:                                               ; preds = %18, %22, %27, %32
  %39 = load %class.CFX_SeekableStreamProxy*, %class.CFX_SeekableStreamProxy** %19, align 8
  %40 = tail call i64 @_ZN23CFX_SeekableStreamProxy7GetSizeEv(%class.CFX_SeekableStreamProxy* %39) #14
  %41 = icmp sgt i64 %40, -1
  br i1 %41, label %43, label %42, !prof !6

42:                                               ; preds = %38
  tail call void @llvm.trap() #14
  unreachable

43:                                               ; preds = %38
  %44 = load i64, i64* %5, align 8
  %45 = icmp ult i64 %40, %44
  %46 = select i1 %45, i64 %40, i64 %44
  store i64 %46, i64* %5, align 8
  %47 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %48 = bitcast i32** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast %"class.std::__1::vector"* %4 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = sub i64 %49, %51
  %53 = ashr exact i64 %52, 2
  %54 = icmp ult i64 %53, 128
  br i1 %54, label %55, label %237

55:                                               ; preds = %43
  %56 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2, i32 0, i32 1
  %57 = bitcast i32** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %58, %51
  %60 = ashr exact i64 %59, 2
  %61 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 128, i64 4) #14
  %62 = bitcast i8* %61 to i32*
  %63 = getelementptr inbounds i32, i32* %62, i64 %60
  %64 = ptrtoint i32* %63 to i64
  %65 = getelementptr inbounds i8, i8* %61, i64 512
  %66 = ptrtoint i8* %65 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %68 = load i32*, i32** %67, align 8
  %69 = ptrtoint i32* %68 to i64
  %70 = load i32*, i32** %56, align 8
  %71 = bitcast i32* %70 to i8*
  %72 = icmp eq i32* %70, %68
  br i1 %72, label %231, label %73

73:                                               ; preds = %55
  %74 = getelementptr i32, i32* %70, i64 -1
  %75 = ptrtoint i32* %74 to i64
  %76 = sub i64 %75, %69
  %77 = lshr i64 %76, 2
  %78 = add nuw nsw i64 %77, 1
  %79 = icmp ult i64 %78, 8
  br i1 %79, label %175, label %80

80:                                               ; preds = %73
  %81 = add i64 %59, -4
  %82 = getelementptr i32, i32* %70, i64 -1
  %83 = ptrtoint i32* %82 to i64
  %84 = sub i64 %83, %69
  %85 = lshr i64 %84, 2
  %86 = and i64 %84, -4
  %87 = sub i64 %81, %86
  %88 = getelementptr i8, i8* %61, i64 %87
  %89 = getelementptr i8, i8* %61, i64 %59
  %90 = xor i64 %85, -1
  %91 = getelementptr i32, i32* %70, i64 %90
  %92 = bitcast i32* %91 to i8*
  %93 = icmp ult i8* %88, %71
  %94 = icmp ugt i8* %89, %92
  %95 = and i1 %93, %94
  br i1 %95, label %175, label %96

96:                                               ; preds = %80
  %97 = and i64 %78, 9223372036854775800
  %98 = sub nsw i64 0, %97
  %99 = getelementptr i32, i32* %63, i64 %98
  %100 = sub nsw i64 0, %97
  %101 = getelementptr i32, i32* %70, i64 %100
  %102 = add nsw i64 %97, -8
  %103 = lshr exact i64 %102, 3
  %104 = add nuw nsw i64 %103, 1
  %105 = and i64 %104, 1
  %106 = icmp eq i64 %102, 0
  br i1 %106, label %153, label %107

107:                                              ; preds = %96
  %108 = sub nuw nsw i64 %104, %105
  %109 = getelementptr i32, i32* %63, i64 -1
  %110 = getelementptr i32, i32* %70, i64 -1
  %111 = getelementptr i32, i32* %63, i64 -1
  %112 = getelementptr i32, i32* %70, i64 -1
  br label %113

113:                                              ; preds = %113, %107
  %114 = phi i64 [ 0, %107 ], [ %148, %113 ]
  %115 = phi i64 [ %108, %107 ], [ %149, %113 ]
  %116 = sub i64 0, %114
  %117 = sub i64 0, %114
  %118 = getelementptr inbounds i32, i32* %109, i64 %116
  %119 = getelementptr inbounds i32, i32* %110, i64 %117
  %120 = getelementptr inbounds i32, i32* %119, i64 -3
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !7
  %123 = getelementptr inbounds i32, i32* %119, i64 -4
  %124 = getelementptr inbounds i32, i32* %123, i64 -3
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !7
  %127 = getelementptr inbounds i32, i32* %118, i64 -3
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %128, align 4, !alias.scope !10, !noalias !7
  %129 = getelementptr inbounds i32, i32* %118, i64 -4
  %130 = getelementptr inbounds i32, i32* %129, i64 -3
  %131 = bitcast i32* %130 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %131, align 4, !alias.scope !10, !noalias !7
  %132 = sub nuw nsw i64 -8, %114
  %133 = sub nuw nsw i64 -8, %114
  %134 = getelementptr inbounds i32, i32* %111, i64 %132
  %135 = getelementptr inbounds i32, i32* %112, i64 %133
  %136 = getelementptr inbounds i32, i32* %135, i64 -3
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4, !alias.scope !7
  %139 = getelementptr inbounds i32, i32* %135, i64 -4
  %140 = getelementptr inbounds i32, i32* %139, i64 -3
  %141 = bitcast i32* %140 to <4 x i32>*
  %142 = load <4 x i32>, <4 x i32>* %141, align 4, !alias.scope !7
  %143 = getelementptr inbounds i32, i32* %134, i64 -3
  %144 = bitcast i32* %143 to <4 x i32>*
  store <4 x i32> %138, <4 x i32>* %144, align 4, !alias.scope !10, !noalias !7
  %145 = getelementptr inbounds i32, i32* %134, i64 -4
  %146 = getelementptr inbounds i32, i32* %145, i64 -3
  %147 = bitcast i32* %146 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %147, align 4, !alias.scope !10, !noalias !7
  %148 = add i64 %114, 16
  %149 = add i64 %115, -2
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %113, !llvm.loop !12

151:                                              ; preds = %113
  %152 = sub nuw nsw i64 -16, %114
  br label %153

153:                                              ; preds = %151, %96
  %154 = phi i64 [ 0, %96 ], [ %152, %151 ]
  %155 = icmp eq i64 %105, 0
  br i1 %155, label %173, label %156

156:                                              ; preds = %153
  %157 = getelementptr i32, i32* %63, i64 -1
  %158 = getelementptr i32, i32* %70, i64 -1
  %159 = getelementptr inbounds i32, i32* %157, i64 %154
  %160 = getelementptr inbounds i32, i32* %158, i64 %154
  %161 = getelementptr inbounds i32, i32* %160, i64 -3
  %162 = bitcast i32* %161 to <4 x i32>*
  %163 = load <4 x i32>, <4 x i32>* %162, align 4, !alias.scope !7
  %164 = getelementptr inbounds i32, i32* %160, i64 -4
  %165 = getelementptr inbounds i32, i32* %164, i64 -3
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 4, !alias.scope !7
  %168 = getelementptr inbounds i32, i32* %159, i64 -3
  %169 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> %163, <4 x i32>* %169, align 4, !alias.scope !10, !noalias !7
  %170 = getelementptr inbounds i32, i32* %159, i64 -4
  %171 = getelementptr inbounds i32, i32* %170, i64 -3
  %172 = bitcast i32* %171 to <4 x i32>*
  store <4 x i32> %167, <4 x i32>* %172, align 4, !alias.scope !10, !noalias !7
  br label %173

173:                                              ; preds = %153, %156
  %174 = icmp eq i64 %78, %97
  br i1 %174, label %227, label %175

175:                                              ; preds = %173, %80, %73
  %176 = phi i32* [ %63, %80 ], [ %63, %73 ], [ %99, %173 ]
  %177 = phi i32* [ %70, %80 ], [ %70, %73 ], [ %101, %173 ]
  %178 = getelementptr i32, i32* %177, i64 -1
  %179 = ptrtoint i32* %178 to i64
  %180 = sub i64 %179, %69
  %181 = lshr i64 %180, 2
  %182 = add nuw nsw i64 %181, 1
  %183 = and i64 %182, 7
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %194, label %185

185:                                              ; preds = %175, %185
  %186 = phi i32* [ %189, %185 ], [ %176, %175 ]
  %187 = phi i32* [ %190, %185 ], [ %177, %175 ]
  %188 = phi i64 [ %192, %185 ], [ %183, %175 ]
  %189 = getelementptr inbounds i32, i32* %186, i64 -1
  %190 = getelementptr inbounds i32, i32* %187, i64 -1
  %191 = load i32, i32* %190, align 4
  store i32 %191, i32* %189, align 4
  %192 = add i64 %188, -1
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %185, !llvm.loop !14

194:                                              ; preds = %185, %175
  %195 = phi i32* [ undef, %175 ], [ %189, %185 ]
  %196 = phi i32* [ %176, %175 ], [ %189, %185 ]
  %197 = phi i32* [ %177, %175 ], [ %190, %185 ]
  %198 = icmp ult i64 %180, 28
  br i1 %198, label %227, label %199

199:                                              ; preds = %194, %199
  %200 = phi i32* [ %223, %199 ], [ %196, %194 ]
  %201 = phi i32* [ %224, %199 ], [ %197, %194 ]
  %202 = getelementptr inbounds i32, i32* %200, i64 -1
  %203 = getelementptr inbounds i32, i32* %201, i64 -1
  %204 = load i32, i32* %203, align 4
  store i32 %204, i32* %202, align 4
  %205 = getelementptr inbounds i32, i32* %200, i64 -2
  %206 = getelementptr inbounds i32, i32* %201, i64 -2
  %207 = load i32, i32* %206, align 4
  store i32 %207, i32* %205, align 4
  %208 = getelementptr inbounds i32, i32* %200, i64 -3
  %209 = getelementptr inbounds i32, i32* %201, i64 -3
  %210 = load i32, i32* %209, align 4
  store i32 %210, i32* %208, align 4
  %211 = getelementptr inbounds i32, i32* %200, i64 -4
  %212 = getelementptr inbounds i32, i32* %201, i64 -4
  %213 = load i32, i32* %212, align 4
  store i32 %213, i32* %211, align 4
  %214 = getelementptr inbounds i32, i32* %200, i64 -5
  %215 = getelementptr inbounds i32, i32* %201, i64 -5
  %216 = load i32, i32* %215, align 4
  store i32 %216, i32* %214, align 4
  %217 = getelementptr inbounds i32, i32* %200, i64 -6
  %218 = getelementptr inbounds i32, i32* %201, i64 -6
  %219 = load i32, i32* %218, align 4
  store i32 %219, i32* %217, align 4
  %220 = getelementptr inbounds i32, i32* %200, i64 -7
  %221 = getelementptr inbounds i32, i32* %201, i64 -7
  %222 = load i32, i32* %221, align 4
  store i32 %222, i32* %220, align 4
  %223 = getelementptr inbounds i32, i32* %200, i64 -8
  %224 = getelementptr inbounds i32, i32* %201, i64 -8
  %225 = load i32, i32* %224, align 4
  store i32 %225, i32* %223, align 4
  %226 = icmp eq i32* %224, %68
  br i1 %226, label %227, label %199, !llvm.loop !16

227:                                              ; preds = %194, %199, %173
  %228 = phi i32* [ %99, %173 ], [ %195, %194 ], [ %223, %199 ]
  %229 = ptrtoint i32* %228 to i64
  %230 = load i64, i64* %50, align 8
  br label %231

231:                                              ; preds = %55, %227
  %232 = phi i64 [ %229, %227 ], [ %64, %55 ]
  %233 = phi i64 [ %230, %227 ], [ %69, %55 ]
  store i64 %232, i64* %50, align 8
  store i64 %64, i64* %57, align 8
  store i64 %66, i64* %48, align 8
  %234 = icmp eq i64 %233, 0
  br i1 %234, label %237, label %235

235:                                              ; preds = %231
  %236 = inttoptr i64 %233 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %236) #14
  br label %237

237:                                              ; preds = %235, %231, %43
  %238 = load i64, i64* %11, align 8
  %239 = add nsw i64 %238, -1
  store i64 %239, i64* %11, align 8
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %241, label %247

241:                                              ; preds = %237
  %242 = bitcast i8* %8 to %"class.fxcrt::Retainable"*
  %243 = bitcast i8* %8 to void (%"class.fxcrt::Retainable"*)***
  %244 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %243, align 8
  %245 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %244, i64 1
  %246 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %245, align 8
  tail call void %246(%"class.fxcrt::Retainable"* nonnull %242) #14
  br label %247

247:                                              ; preds = %237, %241
  ret void
}

declare void @_ZN23CFX_SeekableStreamProxy11SetCodePageEt(%class.CFX_SeekableStreamProxy*, i16 zeroext) local_unnamed_addr #3

declare i64 @_ZN23CFX_SeekableStreamProxy7GetSizeEv(%class.CFX_SeekableStreamProxy*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFX_XMLParserD2Ev(%class.CFX_XMLParser* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i32* %3 to i64
  %7 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i32* %3 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %9) #14
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load %class.CFX_SeekableStreamProxy*, %class.CFX_SeekableStreamProxy** %11, align 8
  store %class.CFX_SeekableStreamProxy* null, %class.CFX_SeekableStreamProxy** %11, align 8
  %13 = icmp eq %class.CFX_SeekableStreamProxy* %12, null
  br i1 %13, label %25, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %12, i64 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = add nsw i64 %16, -1
  store i64 %17, i64* %15, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %25

19:                                               ; preds = %14
  %20 = getelementptr inbounds %class.CFX_SeekableStreamProxy, %class.CFX_SeekableStreamProxy* %12, i64 0, i32 0
  %21 = bitcast %class.CFX_SeekableStreamProxy* %12 to void (%"class.fxcrt::Retainable"*)***
  %22 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %22, i64 1
  %24 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %23, align 8
  tail call void %24(%"class.fxcrt::Retainable"* nonnull %20) #14
  br label %25

25:                                               ; preds = %10, %14, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.CFX_XMLDocument* @_ZN13CFX_XMLParser5ParseEv(%class.CFX_XMLParser*) local_unnamed_addr #2 align 2 {
  %2 = tail call i8* @_Znwm(i64 32) #13
  %3 = bitcast i8* %2 to %class.CFX_XMLDocument*
  tail call void @_ZN15CFX_XMLDocumentC1Ev(%class.CFX_XMLDocument* nonnull %3) #14
  %4 = ptrtoint i8* %2 to i64
  %5 = getelementptr inbounds i8, i8* %2, i64 24
  %6 = bitcast i8* %5 to %class.CFX_XMLElement**
  %7 = load %class.CFX_XMLElement*, %class.CFX_XMLElement** %6, align 8
  %8 = getelementptr inbounds %class.CFX_XMLElement, %class.CFX_XMLElement* %7, i64 0, i32 0
  %9 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 0
  store %class.CFX_XMLNode* %8, %class.CFX_XMLNode** %9, align 8
  %10 = tail call zeroext i1 @_ZN13CFX_XMLParser13DoSyntaxParseEP15CFX_XMLDocument(%class.CFX_XMLParser* %0, %class.CFX_XMLDocument* nonnull %3)
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  tail call void @_ZN15CFX_XMLDocumentD1Ev(%class.CFX_XMLDocument* nonnull %3) #14
  tail call void @_ZdlPv(i8* nonnull %2) #13
  br label %12

12:                                               ; preds = %1, %11
  %13 = phi i64 [ 0, %11 ], [ %4, %1 ]
  %14 = inttoptr i64 %13 to %class.CFX_XMLDocument*
  ret %class.CFX_XMLDocument* %14
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN13CFX_XMLParser13DoSyntaxParseEP15CFX_XMLDocument(%class.CFX_XMLParser*, %class.CFX_XMLDocument*) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.std::__1::unique_ptr.15", align 8
  %4 = alloca %"class.std::__1::unique_ptr.15", align 8
  %5 = alloca %"class.std::__1::unique_ptr.15", align 8
  %6 = alloca %"class.std::__1::unique_ptr.15", align 8
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = alloca %"class.std::__1::stack", align 8
  %9 = alloca %"class.std::__1::stack.48", align 8
  %10 = alloca %"class.fxcrt::WideString", align 8
  %11 = alloca %"class.fxcrt::WideString", align 8
  %12 = alloca %"class.fxcrt::WideString", align 8
  %13 = alloca %"class.fxcrt::WideString", align 8
  %14 = alloca %"class.fxcrt::WideString", align 8
  %15 = alloca %"class.fxcrt::WideString", align 8
  %16 = alloca %"class.fxcrt::WideString", align 8
  %17 = alloca %"class.fxcrt::WideString", align 8
  %18 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 3
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %3975, label %21

21:                                               ; preds = %2
  %22 = zext i64 %19 to i65
  %23 = tail call { i65, i1 } @llvm.sadd.with.overflow.i65(i65 %22, i65 1) #14
  %24 = extractvalue { i65, i1 } %23, 1
  %25 = extractvalue { i65, i1 } %23, 0
  %26 = trunc i65 %25 to i64
  %27 = icmp slt i65 %25, 0
  %28 = or i1 %24, %27
  br i1 %28, label %3975, label %29

29:                                               ; preds = %21
  %30 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #14
  %31 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %32 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 0, i64 24, i1 false) #14
  %33 = bitcast i32** %32 to i64*
  %34 = icmp eq i64 %26, 0
  br i1 %34, label %36, label %35

35:                                               ; preds = %29
  call void @_ZNSt3__16vectorIw16FxAllocAllocatorIwEE8__appendEm(%"class.std::__1::vector"* nonnull %7, i64 %26) #14
  br label %36

36:                                               ; preds = %29, %35
  %37 = bitcast %"class.std::__1::stack"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %37) #14
  %38 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %39 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %8, i64 0, i32 0, i32 0, i32 0, i32 1
  %40 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %8, i64 0, i32 0, i32 0, i32 0, i32 2
  %41 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %8, i64 0, i32 0, i32 0, i32 1
  %42 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %8, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 0, i64 48, i1 false) #14
  %43 = bitcast %"class.std::__1::stack.48"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %43) #14
  %44 = getelementptr inbounds %"class.std::__1::stack.48", %"class.std::__1::stack.48"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  %45 = getelementptr inbounds %"class.std::__1::stack.48", %"class.std::__1::stack.48"* %9, i64 0, i32 0, i32 0, i32 0, i32 1
  %46 = getelementptr inbounds %"class.std::__1::stack.48", %"class.std::__1::stack.48"* %9, i64 0, i32 0, i32 0, i32 0, i32 2
  %47 = getelementptr inbounds %"class.std::__1::stack.48", %"class.std::__1::stack.48"* %9, i64 0, i32 0, i32 0, i32 1
  %48 = getelementptr inbounds %"class.std::__1::stack.48", %"class.std::__1::stack.48"* %9, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %43, i8 0, i64 48, i1 false) #14
  %49 = bitcast %"class.fxcrt::WideString"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #14
  %50 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %50, align 8
  call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* nonnull %10) #14
  %51 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %52 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2, i32 0, i32 0
  %53 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2, i32 0, i32 1
  %54 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2
  %55 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %56 = bitcast i32** %53 to i64*
  %57 = bitcast %"class.std::__1::vector"* %54 to i64*
  %58 = bitcast i32** %55 to i64*
  %59 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %54, i64 0, i32 0, i32 0
  %60 = bitcast i32*** %40 to i64*
  %61 = bitcast i32*** %39 to i64*
  %62 = getelementptr inbounds %"class.std::__1::stack", %"class.std::__1::stack"* %8, i64 0, i32 0
  %63 = bitcast %class.CFX_XMLParser* %0 to %"class.fxcrt::TreeNode"**
  %64 = bitcast %"class.fxcrt::WideString"* %17 to i8*
  %65 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 4
  %67 = bitcast %"class.std::__1::unique_ptr.15"* %3 to i8*
  %68 = bitcast %"class.std::__1::unique_ptr.15"* %3 to i64*
  %69 = getelementptr inbounds %class.CFX_XMLDocument, %class.CFX_XMLDocument* %1, i64 0, i32 0, i32 0, i32 1
  %70 = getelementptr inbounds %class.CFX_XMLDocument, %class.CFX_XMLDocument* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %71 = getelementptr inbounds %class.CFX_XMLDocument, %class.CFX_XMLDocument* %1, i64 0, i32 0
  %72 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %3, i64 0, i32 0, i32 0, i32 0
  %73 = bitcast %"class.std::__1::unique_ptr.15"** %69 to i64*
  %74 = bitcast i32*** %46 to i64*
  %75 = bitcast i32*** %45 to i64*
  %76 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 0
  %77 = bitcast %"class.fxcrt::WideString"* %16 to i8*
  %78 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = bitcast %class.CFX_XMLParser* %0 to i64*
  %80 = bitcast %"class.fxcrt::WideString"* %15 to i8*
  %81 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.fxcrt::WideString"* %14 to i8*
  %83 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = bitcast %"class.fxcrt::WideString"* %13 to i8*
  %85 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %86 = bitcast %"class.std::__1::unique_ptr.15"* %4 to i8*
  %87 = bitcast %"class.std::__1::unique_ptr.15"* %4 to i64*
  %88 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %4, i64 0, i32 0, i32 0, i32 0
  %89 = bitcast %"class.fxcrt::WideString"* %12 to i8*
  %90 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = bitcast %"class.std::__1::unique_ptr.15"* %5 to i8*
  %92 = bitcast %"class.std::__1::unique_ptr.15"* %5 to i64*
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %5, i64 0, i32 0, i32 0, i32 0
  %94 = getelementptr inbounds %"class.std::__1::stack.48", %"class.std::__1::stack.48"* %9, i64 0, i32 0
  %95 = bitcast %"class.fxcrt::WideString"* %11 to i8*
  %96 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %97 = bitcast %"class.std::__1::unique_ptr.15"* %6 to i8*
  %98 = bitcast %"class.std::__1::unique_ptr.15"* %6 to i64*
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %6, i64 0, i32 0, i32 0, i32 0
  br label %100

100:                                              ; preds = %3785, %36
  %101 = phi i64 [ 0, %36 ], [ %3786, %3785 ]
  %102 = phi i64 [ 0, %36 ], [ %121, %3785 ]
  %103 = phi i32 [ 0, %36 ], [ %3787, %3785 ]
  %104 = phi i32 [ 0, %36 ], [ %3788, %3785 ]
  %105 = phi i32 [ 0, %36 ], [ %3789, %3785 ]
  br label %106

106:                                              ; preds = %100, %119
  %107 = phi i64 [ %120, %119 ], [ %101, %100 ]
  %108 = phi i64 [ %121, %119 ], [ %102, %100 ]
  %109 = icmp slt i64 %107, %108
  br i1 %109, label %119, label %110

110:                                              ; preds = %106
  %111 = load %class.CFX_SeekableStreamProxy*, %class.CFX_SeekableStreamProxy** %51, align 8
  %112 = call zeroext i1 @_ZN23CFX_SeekableStreamProxy5IsEOFEv(%class.CFX_SeekableStreamProxy* %111) #14
  br i1 %112, label %3791, label %113

113:                                              ; preds = %110
  %114 = load %class.CFX_SeekableStreamProxy*, %class.CFX_SeekableStreamProxy** %51, align 8
  %115 = load i32*, i32** %31, align 8
  %116 = load i64, i64* %18, align 8
  %117 = call i64 @_ZN23CFX_SeekableStreamProxy9ReadBlockEPwm(%class.CFX_SeekableStreamProxy* %114, i32* %115, i64 %116) #14
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %3791, label %119

119:                                              ; preds = %113, %106
  %120 = phi i64 [ 0, %113 ], [ %107, %106 ]
  %121 = phi i64 [ %117, %113 ], [ %108, %106 ]
  %122 = icmp slt i64 %120, %121
  br i1 %122, label %123, label %106

123:                                              ; preds = %119, %3785
  %124 = phi i32 [ %3789, %3785 ], [ %105, %119 ]
  %125 = phi i32 [ %3788, %3785 ], [ %104, %119 ]
  %126 = phi i32 [ %3787, %3785 ], [ %103, %119 ]
  %127 = phi i64 [ %3786, %3785 ], [ %120, %119 ]
  %128 = load i32*, i32** %31, align 8
  %129 = getelementptr inbounds i32, i32* %128, i64 %127
  %130 = load i32, i32* %129, align 4
  %131 = ptrtoint i32* %128 to i64
  switch i32 %126, label %3785 [
    i32 0, label %132
    i32 1, label %364
    i32 2, label %440
    i32 3, label %934
    i32 4, label %1385
    i32 5, label %1838
    i32 6, label %1856
    i32 7, label %1861
    i32 8, label %2073
    i32 9, label %2324
    i32 10, label %2329
    i32 13, label %2807
    i32 14, label %2858
    i32 11, label %3289
    i32 12, label %3549
    i32 15, label %3562
  ]

132:                                              ; preds = %123
  %133 = icmp eq i32 %130, 60
  br i1 %133, label %134, label %354

134:                                              ; preds = %132
  %135 = load i32*, i32** %59, align 8
  %136 = load i32*, i32** %53, align 8
  %137 = icmp eq i32* %135, %136
  br i1 %137, label %352, label %138

138:                                              ; preds = %134
  %139 = ptrtoint i32* %136 to i64
  %140 = load %"class.fxcrt::TreeNode"*, %"class.fxcrt::TreeNode"** %63, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %95) #14
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %96, align 8, !alias.scope !17
  %141 = ptrtoint i32* %135 to i64
  %142 = sub i64 %139, %141
  %143 = ashr exact i64 %142, 2
  call void @_ZN5fxcrt10WideStringC1EPKwm(%"class.fxcrt::WideString"* nonnull %11, i32* %135, i64 %143) #14
  store i32 -1, i32* %66, align 8, !noalias !17
  %144 = load i64, i64* %57, align 8, !noalias !17
  store i64 %144, i64* %56, align 8, !noalias !17
  %145 = load i64, i64* %58, align 8, !noalias !17
  %146 = sub i64 %145, %144
  %147 = ashr exact i64 %146, 2
  %148 = icmp ult i64 %147, 128
  br i1 %148, label %149, label %326

149:                                              ; preds = %138
  %150 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 128, i64 4) #14
  %151 = ptrtoint i8* %150 to i64
  %152 = getelementptr inbounds i8, i8* %150, i64 512
  %153 = ptrtoint i8* %152 to i64
  %154 = load i32*, i32** %59, align 8, !noalias !17
  %155 = ptrtoint i32* %154 to i64
  %156 = load i32*, i32** %53, align 8, !noalias !17
  %157 = bitcast i32* %156 to i8*
  %158 = icmp eq i32* %156, %154
  br i1 %158, label %320, label %159

159:                                              ; preds = %149
  %160 = bitcast i8* %150 to i32*
  %161 = getelementptr i32, i32* %156, i64 -1
  %162 = ptrtoint i32* %161 to i64
  %163 = sub i64 %162, %155
  %164 = lshr i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %264, label %167

167:                                              ; preds = %159
  %168 = getelementptr i8, i8* %150, i64 -4
  %169 = getelementptr i32, i32* %156, i64 -1
  %170 = ptrtoint i32* %169 to i64
  %171 = sub i64 %170, %155
  %172 = lshr i64 %171, 2
  %173 = mul i64 %172, -4
  %174 = getelementptr i8, i8* %168, i64 %173
  %175 = getelementptr i32, i32* %156, i64 -1
  %176 = sub nsw i64 0, %172
  %177 = getelementptr i32, i32* %175, i64 %176
  %178 = bitcast i32* %177 to i8*
  %179 = icmp ult i8* %174, %157
  %180 = icmp ugt i8* %150, %178
  %181 = and i1 %179, %180
  br i1 %181, label %264, label %182

182:                                              ; preds = %167
  %183 = and i64 %165, 9223372036854775800
  %184 = sub nsw i64 0, %183
  %185 = getelementptr i32, i32* %160, i64 %184
  %186 = sub nsw i64 0, %183
  %187 = getelementptr i32, i32* %156, i64 %186
  %188 = add nsw i64 %183, -8
  %189 = lshr exact i64 %188, 3
  %190 = add nuw nsw i64 %189, 1
  %191 = and i64 %190, 1
  %192 = icmp eq i64 %188, 0
  br i1 %192, label %239, label %193

193:                                              ; preds = %182
  %194 = sub nuw nsw i64 %190, %191
  %195 = getelementptr i8, i8* %150, i64 -4
  %196 = bitcast i8* %195 to i32*
  %197 = getelementptr i32, i32* %156, i64 -1
  %198 = getelementptr i8, i8* %150, i64 -4
  %199 = bitcast i8* %198 to i32*
  %200 = getelementptr i32, i32* %156, i64 -1
  br label %201

201:                                              ; preds = %201, %193
  %202 = phi i64 [ 0, %193 ], [ %236, %201 ]
  %203 = phi i64 [ %194, %193 ], [ %237, %201 ]
  %204 = sub i64 0, %202
  %205 = sub i64 0, %202
  %206 = getelementptr inbounds i32, i32* %196, i64 %204
  %207 = getelementptr inbounds i32, i32* %197, i64 %205
  %208 = getelementptr inbounds i32, i32* %207, i64 -3
  %209 = bitcast i32* %208 to <4 x i32>*
  %210 = load <4 x i32>, <4 x i32>* %209, align 4, !alias.scope !20
  %211 = getelementptr inbounds i32, i32* %207, i64 -4
  %212 = getelementptr inbounds i32, i32* %211, i64 -3
  %213 = bitcast i32* %212 to <4 x i32>*
  %214 = load <4 x i32>, <4 x i32>* %213, align 4, !alias.scope !20
  %215 = getelementptr inbounds i32, i32* %206, i64 -3
  %216 = bitcast i32* %215 to <4 x i32>*
  store <4 x i32> %210, <4 x i32>* %216, align 4, !alias.scope !23, !noalias !20
  %217 = getelementptr inbounds i32, i32* %206, i64 -4
  %218 = getelementptr inbounds i32, i32* %217, i64 -3
  %219 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %214, <4 x i32>* %219, align 4, !alias.scope !23, !noalias !20
  %220 = sub nuw nsw i64 -8, %202
  %221 = sub nuw nsw i64 -8, %202
  %222 = getelementptr inbounds i32, i32* %199, i64 %220
  %223 = getelementptr inbounds i32, i32* %200, i64 %221
  %224 = getelementptr inbounds i32, i32* %223, i64 -3
  %225 = bitcast i32* %224 to <4 x i32>*
  %226 = load <4 x i32>, <4 x i32>* %225, align 4, !alias.scope !20
  %227 = getelementptr inbounds i32, i32* %223, i64 -4
  %228 = getelementptr inbounds i32, i32* %227, i64 -3
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 4, !alias.scope !20
  %231 = getelementptr inbounds i32, i32* %222, i64 -3
  %232 = bitcast i32* %231 to <4 x i32>*
  store <4 x i32> %226, <4 x i32>* %232, align 4, !alias.scope !23, !noalias !20
  %233 = getelementptr inbounds i32, i32* %222, i64 -4
  %234 = getelementptr inbounds i32, i32* %233, i64 -3
  %235 = bitcast i32* %234 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %235, align 4, !alias.scope !23, !noalias !20
  %236 = add i64 %202, 16
  %237 = add i64 %203, -2
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %239, label %201, !llvm.loop !25

239:                                              ; preds = %201, %182
  %240 = phi i64 [ 0, %182 ], [ %236, %201 ]
  %241 = icmp eq i64 %191, 0
  br i1 %241, label %262, label %242

242:                                              ; preds = %239
  %243 = sub i64 0, %240
  %244 = getelementptr i8, i8* %150, i64 -4
  %245 = bitcast i8* %244 to i32*
  %246 = sub i64 0, %240
  %247 = getelementptr i32, i32* %156, i64 -1
  %248 = getelementptr inbounds i32, i32* %245, i64 %243
  %249 = getelementptr inbounds i32, i32* %247, i64 %246
  %250 = getelementptr inbounds i32, i32* %249, i64 -3
  %251 = bitcast i32* %250 to <4 x i32>*
  %252 = load <4 x i32>, <4 x i32>* %251, align 4, !alias.scope !20
  %253 = getelementptr inbounds i32, i32* %249, i64 -4
  %254 = getelementptr inbounds i32, i32* %253, i64 -3
  %255 = bitcast i32* %254 to <4 x i32>*
  %256 = load <4 x i32>, <4 x i32>* %255, align 4, !alias.scope !20
  %257 = getelementptr inbounds i32, i32* %248, i64 -3
  %258 = bitcast i32* %257 to <4 x i32>*
  store <4 x i32> %252, <4 x i32>* %258, align 4, !alias.scope !23, !noalias !20
  %259 = getelementptr inbounds i32, i32* %248, i64 -4
  %260 = getelementptr inbounds i32, i32* %259, i64 -3
  %261 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> %256, <4 x i32>* %261, align 4, !alias.scope !23, !noalias !20
  br label %262

262:                                              ; preds = %239, %242
  %263 = icmp eq i64 %165, %183
  br i1 %263, label %316, label %264

264:                                              ; preds = %262, %167, %159
  %265 = phi i32* [ %160, %167 ], [ %160, %159 ], [ %185, %262 ]
  %266 = phi i32* [ %156, %167 ], [ %156, %159 ], [ %187, %262 ]
  %267 = getelementptr i32, i32* %266, i64 -1
  %268 = ptrtoint i32* %267 to i64
  %269 = sub i64 %268, %155
  %270 = lshr i64 %269, 2
  %271 = add nuw nsw i64 %270, 1
  %272 = and i64 %271, 7
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %283, label %274

274:                                              ; preds = %264, %274
  %275 = phi i32* [ %278, %274 ], [ %265, %264 ]
  %276 = phi i32* [ %279, %274 ], [ %266, %264 ]
  %277 = phi i64 [ %281, %274 ], [ %272, %264 ]
  %278 = getelementptr inbounds i32, i32* %275, i64 -1
  %279 = getelementptr inbounds i32, i32* %276, i64 -1
  %280 = load i32, i32* %279, align 4
  store i32 %280, i32* %278, align 4
  %281 = add i64 %277, -1
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %283, label %274, !llvm.loop !26

283:                                              ; preds = %274, %264
  %284 = phi i32* [ undef, %264 ], [ %278, %274 ]
  %285 = phi i32* [ %265, %264 ], [ %278, %274 ]
  %286 = phi i32* [ %266, %264 ], [ %279, %274 ]
  %287 = icmp ult i64 %269, 28
  br i1 %287, label %316, label %288

288:                                              ; preds = %283, %288
  %289 = phi i32* [ %312, %288 ], [ %285, %283 ]
  %290 = phi i32* [ %313, %288 ], [ %286, %283 ]
  %291 = getelementptr inbounds i32, i32* %289, i64 -1
  %292 = getelementptr inbounds i32, i32* %290, i64 -1
  %293 = load i32, i32* %292, align 4
  store i32 %293, i32* %291, align 4
  %294 = getelementptr inbounds i32, i32* %289, i64 -2
  %295 = getelementptr inbounds i32, i32* %290, i64 -2
  %296 = load i32, i32* %295, align 4
  store i32 %296, i32* %294, align 4
  %297 = getelementptr inbounds i32, i32* %289, i64 -3
  %298 = getelementptr inbounds i32, i32* %290, i64 -3
  %299 = load i32, i32* %298, align 4
  store i32 %299, i32* %297, align 4
  %300 = getelementptr inbounds i32, i32* %289, i64 -4
  %301 = getelementptr inbounds i32, i32* %290, i64 -4
  %302 = load i32, i32* %301, align 4
  store i32 %302, i32* %300, align 4
  %303 = getelementptr inbounds i32, i32* %289, i64 -5
  %304 = getelementptr inbounds i32, i32* %290, i64 -5
  %305 = load i32, i32* %304, align 4
  store i32 %305, i32* %303, align 4
  %306 = getelementptr inbounds i32, i32* %289, i64 -6
  %307 = getelementptr inbounds i32, i32* %290, i64 -6
  %308 = load i32, i32* %307, align 4
  store i32 %308, i32* %306, align 4
  %309 = getelementptr inbounds i32, i32* %289, i64 -7
  %310 = getelementptr inbounds i32, i32* %290, i64 -7
  %311 = load i32, i32* %310, align 4
  store i32 %311, i32* %309, align 4
  %312 = getelementptr inbounds i32, i32* %289, i64 -8
  %313 = getelementptr inbounds i32, i32* %290, i64 -8
  %314 = load i32, i32* %313, align 4
  store i32 %314, i32* %312, align 4
  %315 = icmp eq i32* %313, %154
  br i1 %315, label %316, label %288, !llvm.loop !27

316:                                              ; preds = %283, %288, %262
  %317 = phi i32* [ %185, %262 ], [ %284, %283 ], [ %312, %288 ]
  %318 = ptrtoint i32* %317 to i64
  %319 = load i64, i64* %57, align 8, !noalias !17
  br label %320

320:                                              ; preds = %149, %316
  %321 = phi i64 [ %318, %316 ], [ %151, %149 ]
  %322 = phi i64 [ %319, %316 ], [ %155, %149 ]
  store i64 %321, i64* %57, align 8, !noalias !17
  store i64 %151, i64* %56, align 8, !noalias !17
  store i64 %153, i64* %58, align 8, !noalias !17
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %326, label %324

324:                                              ; preds = %320
  %325 = inttoptr i64 %322 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %325) #14
  br label %326

326:                                              ; preds = %138, %320, %324
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %97) #14
  %327 = call i8* @_Znwm(i64 56) #13
  %328 = bitcast i8* %327 to %class.CFX_XMLText*
  call void @_ZN11CFX_XMLTextC1ERKN5fxcrt10WideStringE(%class.CFX_XMLText* nonnull %328, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %11) #14
  %329 = ptrtoint i8* %327 to i64
  store i64 %329, i64* %98, align 8
  %330 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %69, align 8
  %331 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %70, align 8
  %332 = icmp ult %"class.std::__1::unique_ptr.15"* %330, %331
  br i1 %332, label %333, label %337

333:                                              ; preds = %326
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %99, align 8
  %334 = bitcast %"class.std::__1::unique_ptr.15"* %330 to i64*
  store i64 %329, i64* %334, align 8
  %335 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %330, i64 1
  %336 = ptrtoint %"class.std::__1::unique_ptr.15"* %335 to i64
  store i64 %336, i64* %73, align 8
  br label %338

337:                                              ; preds = %326
  call void @_ZNSt3__16vectorINS_10unique_ptrI11CFX_XMLNodeNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.13"* %71, %"class.std::__1::unique_ptr.15"* nonnull dereferenceable(8) %6) #14
  br label %338

338:                                              ; preds = %337, %333
  %339 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %99, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %99, align 8
  %340 = icmp eq %class.CFX_XMLNode* %339, null
  br i1 %340, label %346, label %341

341:                                              ; preds = %338
  %342 = bitcast %class.CFX_XMLNode* %339 to void (%class.CFX_XMLNode*)***
  %343 = load void (%class.CFX_XMLNode*)**, void (%class.CFX_XMLNode*)*** %342, align 8
  %344 = getelementptr inbounds void (%class.CFX_XMLNode*)*, void (%class.CFX_XMLNode*)** %343, i64 1
  %345 = load void (%class.CFX_XMLNode*)*, void (%class.CFX_XMLNode*)** %344, align 8
  call void %345(%class.CFX_XMLNode* nonnull %339) #14
  br label %346

346:                                              ; preds = %338, %341
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %97) #14
  %347 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %69, align 8
  %348 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %347, i64 -1, i32 0, i32 0, i32 0
  %349 = bitcast %class.CFX_XMLNode** %348 to %class.CFX_XMLText**
  %350 = load %class.CFX_XMLText*, %class.CFX_XMLText** %349, align 8
  %351 = getelementptr inbounds %class.CFX_XMLText, %class.CFX_XMLText* %350, i64 0, i32 0
  call void @_ZN5fxcrt8TreeNodeI11CFX_XMLNodePS1_E15AppendLastChildES2_(%"class.fxcrt::TreeNode"* %140, %class.CFX_XMLNode* %351)
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %11) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %95) #14
  br label %3785

352:                                              ; preds = %134
  %353 = add nsw i64 %127, 1
  br label %3785

354:                                              ; preds = %132
  %355 = load i64, i64* %48, align 8
  %356 = icmp eq i64 %355, 0
  %357 = icmp ne i32 %130, 0
  %358 = and i1 %357, %356
  br i1 %358, label %359, label %362

359:                                              ; preds = %354
  %360 = call signext i8 @u_isspace_69(i32 %130) #14
  %361 = icmp eq i8 %360, 0
  br i1 %361, label %3791, label %362

362:                                              ; preds = %359, %354
  call void @_ZN13CFX_XMLParser15ProcessTextCharEw(%class.CFX_XMLParser* %0, i32 signext %130)
  %363 = add nsw i64 %127, 1
  br label %3785

364:                                              ; preds = %123
  switch i32 %130, label %405 [
    i32 33, label %365
    i32 47, label %367
    i32 63, label %369
  ]

365:                                              ; preds = %364
  %366 = add nsw i64 %127, 1
  br label %3785

367:                                              ; preds = %364
  %368 = add nsw i64 %127, 1
  br label %3785

369:                                              ; preds = %364
  %370 = load i64, i64* %74, align 8
  %371 = load i64, i64* %75, align 8
  %372 = sub i64 %370, %371
  %373 = icmp eq i64 %372, 0
  %374 = shl i64 %372, 7
  %375 = add i64 %374, -1
  %376 = select i1 %373, i64 0, i64 %375
  %377 = load i64, i64* %47, align 8
  %378 = load i64, i64* %48, align 8
  %379 = add i64 %378, %377
  %380 = icmp eq i64 %376, %379
  %381 = inttoptr i64 %371 to i32**
  %382 = inttoptr i64 %370 to i32**
  br i1 %380, label %383, label %389

383:                                              ; preds = %369
  call void @_ZNSt3__15dequeIN11CFX_XMLNode4TypeENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque.49"* nonnull %94) #14
  %384 = load i64, i64* %48, align 8
  %385 = load i64, i64* %47, align 8
  %386 = load i32**, i32*** %45, align 8
  %387 = load i32**, i32*** %46, align 8
  %388 = add i64 %385, %384
  br label %389

389:                                              ; preds = %383, %369
  %390 = phi i64 [ %388, %383 ], [ %379, %369 ]
  %391 = phi i32** [ %387, %383 ], [ %382, %369 ]
  %392 = phi i32** [ %386, %383 ], [ %381, %369 ]
  %393 = icmp eq i32** %391, %392
  br i1 %393, label %400, label %394

394:                                              ; preds = %389
  %395 = lshr i64 %390, 10
  %396 = getelementptr inbounds i32*, i32** %392, i64 %395
  %397 = load i32*, i32** %396, align 8
  %398 = and i64 %390, 1023
  %399 = getelementptr inbounds i32, i32* %397, i64 %398
  br label %400

400:                                              ; preds = %389, %394
  %401 = phi i32* [ %399, %394 ], [ null, %389 ]
  store i32 0, i32* %401, align 4
  %402 = load i64, i64* %48, align 8
  %403 = add i64 %402, 1
  store i64 %403, i64* %48, align 8
  %404 = add nsw i64 %127, 1
  br label %3785

405:                                              ; preds = %364
  %406 = load i64, i64* %74, align 8
  %407 = load i64, i64* %75, align 8
  %408 = sub i64 %406, %407
  %409 = icmp eq i64 %408, 0
  %410 = shl i64 %408, 7
  %411 = add i64 %410, -1
  %412 = select i1 %409, i64 0, i64 %411
  %413 = load i64, i64* %47, align 8
  %414 = load i64, i64* %48, align 8
  %415 = add i64 %414, %413
  %416 = icmp eq i64 %412, %415
  %417 = inttoptr i64 %407 to i32**
  %418 = inttoptr i64 %406 to i32**
  br i1 %416, label %419, label %425

419:                                              ; preds = %405
  call void @_ZNSt3__15dequeIN11CFX_XMLNode4TypeENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque.49"* nonnull %94) #14
  %420 = load i64, i64* %48, align 8
  %421 = load i64, i64* %47, align 8
  %422 = load i32**, i32*** %45, align 8
  %423 = load i32**, i32*** %46, align 8
  %424 = add i64 %421, %420
  br label %425

425:                                              ; preds = %419, %405
  %426 = phi i64 [ %424, %419 ], [ %415, %405 ]
  %427 = phi i32** [ %423, %419 ], [ %418, %405 ]
  %428 = phi i32** [ %422, %419 ], [ %417, %405 ]
  %429 = icmp eq i32** %427, %428
  br i1 %429, label %436, label %430

430:                                              ; preds = %425
  %431 = lshr i64 %426, 10
  %432 = getelementptr inbounds i32*, i32** %428, i64 %431
  %433 = load i32*, i32** %432, align 8
  %434 = and i64 %426, 1023
  %435 = getelementptr inbounds i32, i32* %433, i64 %434
  br label %436

436:                                              ; preds = %425, %430
  %437 = phi i32* [ %435, %430 ], [ null, %425 ]
  store i32 1, i32* %437, align 4
  %438 = load i64, i64* %48, align 8
  %439 = add i64 %438, 1
  store i64 %439, i64* %48, align 8
  br label %3785

440:                                              ; preds = %123
  %441 = load i32*, i32** %59, align 8
  %442 = load i32*, i32** %53, align 8
  %443 = ptrtoint i32* %441 to i64
  %444 = ptrtoint i32* %442 to i64
  br label %445

445:                                              ; preds = %445, %440
  %446 = phi i64 [ 20, %440 ], [ %458, %445 ]
  %447 = phi %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* [ getelementptr inbounds ([20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"], [20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"]* @_ZN12_GLOBAL__N_114g_XMLNameCharsE, i64 0, i64 0), %440 ], [ %457, %445 ]
  %448 = lshr i64 %446, 1
  %449 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %447, i64 1
  %450 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %447, i64 %448, i32 1
  %451 = load i16, i16* %450, align 2
  %452 = zext i16 %451 to i32
  %453 = icmp sgt i32 %130, %452
  %454 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %449, i64 %448
  %455 = xor i64 %448, -1
  %456 = add i64 %446, %455
  %457 = select i1 %453, %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %454, %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %447
  %458 = select i1 %453, i64 %456, i64 %448
  %459 = icmp eq i64 %458, 0
  br i1 %459, label %460, label %445

460:                                              ; preds = %445
  %461 = icmp eq i32* %441, %442
  %462 = icmp eq %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %457, getelementptr inbounds ([20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"], [20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"]* @_ZN12_GLOBAL__N_114g_XMLNameCharsE, i64 1, i64 0)
  br i1 %462, label %475, label %463

463:                                              ; preds = %460
  %464 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %457, i64 0, i32 0
  %465 = load i16, i16* %464, align 2
  %466 = zext i16 %465 to i32
  %467 = icmp slt i32 %130, %466
  %468 = xor i1 %461, true
  %469 = or i1 %467, %468
  br i1 %469, label %474, label %470

470:                                              ; preds = %463
  %471 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %457, i64 0, i32 2
  %472 = load i8, i8* %471, align 2, !range !2
  %473 = icmp eq i8 %472, 0
  br i1 %473, label %475, label %731

474:                                              ; preds = %463
  br i1 %467, label %475, label %731

475:                                              ; preds = %474, %470, %460
  br i1 %461, label %3791, label %476

476:                                              ; preds = %475
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #14
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %90, align 8, !alias.scope !28
  %477 = sub i64 %444, %443
  %478 = ashr exact i64 %477, 2
  call void @_ZN5fxcrt10WideStringC1EPKwm(%"class.fxcrt::WideString"* nonnull %12, i32* %441, i64 %478) #14
  store i32 -1, i32* %66, align 8, !noalias !28
  %479 = load i64, i64* %57, align 8, !noalias !28
  store i64 %479, i64* %56, align 8, !noalias !28
  %480 = load i64, i64* %58, align 8, !noalias !28
  %481 = sub i64 %480, %479
  %482 = ashr exact i64 %481, 2
  %483 = icmp ult i64 %482, 128
  br i1 %483, label %484, label %661

484:                                              ; preds = %476
  %485 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 128, i64 4) #14
  %486 = ptrtoint i8* %485 to i64
  %487 = getelementptr inbounds i8, i8* %485, i64 512
  %488 = ptrtoint i8* %487 to i64
  %489 = load i32*, i32** %59, align 8, !noalias !28
  %490 = ptrtoint i32* %489 to i64
  %491 = load i32*, i32** %53, align 8, !noalias !28
  %492 = bitcast i32* %491 to i8*
  %493 = icmp eq i32* %491, %489
  br i1 %493, label %655, label %494

494:                                              ; preds = %484
  %495 = bitcast i8* %485 to i32*
  %496 = getelementptr i32, i32* %491, i64 -1
  %497 = ptrtoint i32* %496 to i64
  %498 = sub i64 %497, %490
  %499 = lshr i64 %498, 2
  %500 = add nuw nsw i64 %499, 1
  %501 = icmp ult i64 %500, 8
  br i1 %501, label %599, label %502

502:                                              ; preds = %494
  %503 = getelementptr i8, i8* %485, i64 -4
  %504 = getelementptr i32, i32* %491, i64 -1
  %505 = ptrtoint i32* %504 to i64
  %506 = sub i64 %505, %490
  %507 = lshr i64 %506, 2
  %508 = mul i64 %507, -4
  %509 = getelementptr i8, i8* %503, i64 %508
  %510 = getelementptr i32, i32* %491, i64 -1
  %511 = sub nsw i64 0, %507
  %512 = getelementptr i32, i32* %510, i64 %511
  %513 = bitcast i32* %512 to i8*
  %514 = icmp ult i8* %509, %492
  %515 = icmp ugt i8* %485, %513
  %516 = and i1 %514, %515
  br i1 %516, label %599, label %517

517:                                              ; preds = %502
  %518 = and i64 %500, 9223372036854775800
  %519 = sub nsw i64 0, %518
  %520 = getelementptr i32, i32* %495, i64 %519
  %521 = sub nsw i64 0, %518
  %522 = getelementptr i32, i32* %491, i64 %521
  %523 = add nsw i64 %518, -8
  %524 = lshr exact i64 %523, 3
  %525 = add nuw nsw i64 %524, 1
  %526 = and i64 %525, 1
  %527 = icmp eq i64 %523, 0
  br i1 %527, label %574, label %528

528:                                              ; preds = %517
  %529 = sub nuw nsw i64 %525, %526
  %530 = getelementptr i8, i8* %485, i64 -4
  %531 = bitcast i8* %530 to i32*
  %532 = getelementptr i32, i32* %491, i64 -1
  %533 = getelementptr i8, i8* %485, i64 -4
  %534 = bitcast i8* %533 to i32*
  %535 = getelementptr i32, i32* %491, i64 -1
  br label %536

536:                                              ; preds = %536, %528
  %537 = phi i64 [ 0, %528 ], [ %571, %536 ]
  %538 = phi i64 [ %529, %528 ], [ %572, %536 ]
  %539 = sub i64 0, %537
  %540 = sub i64 0, %537
  %541 = getelementptr inbounds i32, i32* %531, i64 %539
  %542 = getelementptr inbounds i32, i32* %532, i64 %540
  %543 = getelementptr inbounds i32, i32* %542, i64 -3
  %544 = bitcast i32* %543 to <4 x i32>*
  %545 = load <4 x i32>, <4 x i32>* %544, align 4, !alias.scope !31
  %546 = getelementptr inbounds i32, i32* %542, i64 -4
  %547 = getelementptr inbounds i32, i32* %546, i64 -3
  %548 = bitcast i32* %547 to <4 x i32>*
  %549 = load <4 x i32>, <4 x i32>* %548, align 4, !alias.scope !31
  %550 = getelementptr inbounds i32, i32* %541, i64 -3
  %551 = bitcast i32* %550 to <4 x i32>*
  store <4 x i32> %545, <4 x i32>* %551, align 4, !alias.scope !34, !noalias !31
  %552 = getelementptr inbounds i32, i32* %541, i64 -4
  %553 = getelementptr inbounds i32, i32* %552, i64 -3
  %554 = bitcast i32* %553 to <4 x i32>*
  store <4 x i32> %549, <4 x i32>* %554, align 4, !alias.scope !34, !noalias !31
  %555 = sub nuw nsw i64 -8, %537
  %556 = sub nuw nsw i64 -8, %537
  %557 = getelementptr inbounds i32, i32* %534, i64 %555
  %558 = getelementptr inbounds i32, i32* %535, i64 %556
  %559 = getelementptr inbounds i32, i32* %558, i64 -3
  %560 = bitcast i32* %559 to <4 x i32>*
  %561 = load <4 x i32>, <4 x i32>* %560, align 4, !alias.scope !31
  %562 = getelementptr inbounds i32, i32* %558, i64 -4
  %563 = getelementptr inbounds i32, i32* %562, i64 -3
  %564 = bitcast i32* %563 to <4 x i32>*
  %565 = load <4 x i32>, <4 x i32>* %564, align 4, !alias.scope !31
  %566 = getelementptr inbounds i32, i32* %557, i64 -3
  %567 = bitcast i32* %566 to <4 x i32>*
  store <4 x i32> %561, <4 x i32>* %567, align 4, !alias.scope !34, !noalias !31
  %568 = getelementptr inbounds i32, i32* %557, i64 -4
  %569 = getelementptr inbounds i32, i32* %568, i64 -3
  %570 = bitcast i32* %569 to <4 x i32>*
  store <4 x i32> %565, <4 x i32>* %570, align 4, !alias.scope !34, !noalias !31
  %571 = add i64 %537, 16
  %572 = add i64 %538, -2
  %573 = icmp eq i64 %572, 0
  br i1 %573, label %574, label %536, !llvm.loop !36

574:                                              ; preds = %536, %517
  %575 = phi i64 [ 0, %517 ], [ %571, %536 ]
  %576 = icmp eq i64 %526, 0
  br i1 %576, label %597, label %577

577:                                              ; preds = %574
  %578 = sub i64 0, %575
  %579 = getelementptr i8, i8* %485, i64 -4
  %580 = bitcast i8* %579 to i32*
  %581 = sub i64 0, %575
  %582 = getelementptr i32, i32* %491, i64 -1
  %583 = getelementptr inbounds i32, i32* %580, i64 %578
  %584 = getelementptr inbounds i32, i32* %582, i64 %581
  %585 = getelementptr inbounds i32, i32* %584, i64 -3
  %586 = bitcast i32* %585 to <4 x i32>*
  %587 = load <4 x i32>, <4 x i32>* %586, align 4, !alias.scope !31
  %588 = getelementptr inbounds i32, i32* %584, i64 -4
  %589 = getelementptr inbounds i32, i32* %588, i64 -3
  %590 = bitcast i32* %589 to <4 x i32>*
  %591 = load <4 x i32>, <4 x i32>* %590, align 4, !alias.scope !31
  %592 = getelementptr inbounds i32, i32* %583, i64 -3
  %593 = bitcast i32* %592 to <4 x i32>*
  store <4 x i32> %587, <4 x i32>* %593, align 4, !alias.scope !34, !noalias !31
  %594 = getelementptr inbounds i32, i32* %583, i64 -4
  %595 = getelementptr inbounds i32, i32* %594, i64 -3
  %596 = bitcast i32* %595 to <4 x i32>*
  store <4 x i32> %591, <4 x i32>* %596, align 4, !alias.scope !34, !noalias !31
  br label %597

597:                                              ; preds = %574, %577
  %598 = icmp eq i64 %500, %518
  br i1 %598, label %651, label %599

599:                                              ; preds = %597, %502, %494
  %600 = phi i32* [ %495, %502 ], [ %495, %494 ], [ %520, %597 ]
  %601 = phi i32* [ %491, %502 ], [ %491, %494 ], [ %522, %597 ]
  %602 = getelementptr i32, i32* %601, i64 -1
  %603 = ptrtoint i32* %602 to i64
  %604 = sub i64 %603, %490
  %605 = lshr i64 %604, 2
  %606 = add nuw nsw i64 %605, 1
  %607 = and i64 %606, 7
  %608 = icmp eq i64 %607, 0
  br i1 %608, label %618, label %609

609:                                              ; preds = %599, %609
  %610 = phi i32* [ %613, %609 ], [ %600, %599 ]
  %611 = phi i32* [ %614, %609 ], [ %601, %599 ]
  %612 = phi i64 [ %616, %609 ], [ %607, %599 ]
  %613 = getelementptr inbounds i32, i32* %610, i64 -1
  %614 = getelementptr inbounds i32, i32* %611, i64 -1
  %615 = load i32, i32* %614, align 4
  store i32 %615, i32* %613, align 4
  %616 = add i64 %612, -1
  %617 = icmp eq i64 %616, 0
  br i1 %617, label %618, label %609, !llvm.loop !37

618:                                              ; preds = %609, %599
  %619 = phi i32* [ undef, %599 ], [ %613, %609 ]
  %620 = phi i32* [ %600, %599 ], [ %613, %609 ]
  %621 = phi i32* [ %601, %599 ], [ %614, %609 ]
  %622 = icmp ult i64 %604, 28
  br i1 %622, label %651, label %623

623:                                              ; preds = %618, %623
  %624 = phi i32* [ %647, %623 ], [ %620, %618 ]
  %625 = phi i32* [ %648, %623 ], [ %621, %618 ]
  %626 = getelementptr inbounds i32, i32* %624, i64 -1
  %627 = getelementptr inbounds i32, i32* %625, i64 -1
  %628 = load i32, i32* %627, align 4
  store i32 %628, i32* %626, align 4
  %629 = getelementptr inbounds i32, i32* %624, i64 -2
  %630 = getelementptr inbounds i32, i32* %625, i64 -2
  %631 = load i32, i32* %630, align 4
  store i32 %631, i32* %629, align 4
  %632 = getelementptr inbounds i32, i32* %624, i64 -3
  %633 = getelementptr inbounds i32, i32* %625, i64 -3
  %634 = load i32, i32* %633, align 4
  store i32 %634, i32* %632, align 4
  %635 = getelementptr inbounds i32, i32* %624, i64 -4
  %636 = getelementptr inbounds i32, i32* %625, i64 -4
  %637 = load i32, i32* %636, align 4
  store i32 %637, i32* %635, align 4
  %638 = getelementptr inbounds i32, i32* %624, i64 -5
  %639 = getelementptr inbounds i32, i32* %625, i64 -5
  %640 = load i32, i32* %639, align 4
  store i32 %640, i32* %638, align 4
  %641 = getelementptr inbounds i32, i32* %624, i64 -6
  %642 = getelementptr inbounds i32, i32* %625, i64 -6
  %643 = load i32, i32* %642, align 4
  store i32 %643, i32* %641, align 4
  %644 = getelementptr inbounds i32, i32* %624, i64 -7
  %645 = getelementptr inbounds i32, i32* %625, i64 -7
  %646 = load i32, i32* %645, align 4
  store i32 %646, i32* %644, align 4
  %647 = getelementptr inbounds i32, i32* %624, i64 -8
  %648 = getelementptr inbounds i32, i32* %625, i64 -8
  %649 = load i32, i32* %648, align 4
  store i32 %649, i32* %647, align 4
  %650 = icmp eq i32* %648, %489
  br i1 %650, label %651, label %623, !llvm.loop !38

651:                                              ; preds = %618, %623, %597
  %652 = phi i32* [ %520, %597 ], [ %619, %618 ], [ %647, %623 ]
  %653 = ptrtoint i32* %652 to i64
  %654 = load i64, i64* %57, align 8, !noalias !28
  br label %655

655:                                              ; preds = %484, %651
  %656 = phi i64 [ %653, %651 ], [ %486, %484 ]
  %657 = phi i64 [ %654, %651 ], [ %490, %484 ]
  store i64 %656, i64* %57, align 8, !noalias !28
  store i64 %486, i64* %56, align 8, !noalias !28
  store i64 %488, i64* %58, align 8, !noalias !28
  %658 = icmp eq i64 %657, 0
  br i1 %658, label %661, label %659

659:                                              ; preds = %655
  %660 = inttoptr i64 %657 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %660) #14
  br label %661

661:                                              ; preds = %476, %655, %659
  %662 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %90, align 8, !noalias !39
  %663 = icmp eq %"class.fxcrt::StringDataTemplate"* %662, null
  %664 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %662, i64 0, i32 3
  %665 = select i1 %663, [1 x i32]* @.str.11, [1 x i32]* %664
  br i1 %663, label %730, label %666

666:                                              ; preds = %661
  %667 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %662, i64 0, i32 1
  %668 = load i64, i64* %667, align 8, !noalias !39
  %669 = icmp eq i64 %668, 18
  br i1 %669, label %677, label %685

670:                                              ; preds = %677
  %671 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 1
  %672 = load i32, i32* %671, align 4
  %673 = add i32 %672, -1
  %674 = icmp ule i32 %673, 126
  %675 = icmp eq i32 %672, 114
  %676 = and i1 %674, %675
  br i1 %676, label %3977, label %684

677:                                              ; preds = %666
  %678 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 0
  %679 = load i32, i32* %678, align 4
  %680 = add i32 %679, -1
  %681 = icmp ule i32 %680, 126
  %682 = icmp eq i32 %679, 111
  %683 = and i1 %681, %682
  br i1 %683, label %670, label %684

684:                                              ; preds = %4082, %4075, %4068, %4061, %4054, %4047, %4040, %4033, %4026, %4019, %4012, %4005, %3998, %3991, %3984, %3977, %670, %677
  br i1 %663, label %730, label %685

685:                                              ; preds = %666, %684
  %686 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %662, i64 0, i32 1
  %687 = load i64, i64* %686, align 8, !noalias !42
  %688 = icmp eq i64 %687, 7
  br i1 %688, label %696, label %730

689:                                              ; preds = %696
  %690 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 1
  %691 = load i32, i32* %690, align 4
  %692 = add i32 %691, -1
  %693 = icmp ule i32 %692, 126
  %694 = icmp eq i32 %691, 99
  %695 = and i1 %693, %694
  br i1 %695, label %4089, label %730

696:                                              ; preds = %685
  %697 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 0
  %698 = load i32, i32* %697, align 4
  %699 = add i32 %698, -1
  %700 = icmp ule i32 %699, 126
  %701 = icmp eq i32 %698, 97
  %702 = and i1 %700, %701
  br i1 %702, label %689, label %730

703:                                              ; preds = %4117, %4082
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %91) #14
  %704 = call i8* @_Znwm(i64 80) #13
  %705 = bitcast i8* %704 to %class.CFX_XMLInstruction*
  call void @_ZN18CFX_XMLInstructionC1ERKN5fxcrt10WideStringE(%class.CFX_XMLInstruction* nonnull %705, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %12) #14
  %706 = ptrtoint i8* %704 to i64
  store i64 %706, i64* %92, align 8
  %707 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %69, align 8
  %708 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %70, align 8
  %709 = icmp ult %"class.std::__1::unique_ptr.15"* %707, %708
  br i1 %709, label %710, label %714

710:                                              ; preds = %703
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %93, align 8
  %711 = bitcast %"class.std::__1::unique_ptr.15"* %707 to i64*
  store i64 %706, i64* %711, align 8
  %712 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %707, i64 1
  %713 = ptrtoint %"class.std::__1::unique_ptr.15"* %712 to i64
  store i64 %713, i64* %73, align 8
  br label %715

714:                                              ; preds = %703
  call void @_ZNSt3__16vectorINS_10unique_ptrI11CFX_XMLNodeNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.13"* %71, %"class.std::__1::unique_ptr.15"* nonnull dereferenceable(8) %5) #14
  br label %715

715:                                              ; preds = %714, %710
  %716 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %93, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %93, align 8
  %717 = icmp eq %class.CFX_XMLNode* %716, null
  br i1 %717, label %723, label %718

718:                                              ; preds = %715
  %719 = bitcast %class.CFX_XMLNode* %716 to void (%class.CFX_XMLNode*)***
  %720 = load void (%class.CFX_XMLNode*)**, void (%class.CFX_XMLNode*)*** %719, align 8
  %721 = getelementptr inbounds void (%class.CFX_XMLNode*)*, void (%class.CFX_XMLNode*)** %720, i64 1
  %722 = load void (%class.CFX_XMLNode*)*, void (%class.CFX_XMLNode*)** %721, align 8
  call void %722(%class.CFX_XMLNode* nonnull %716) #14
  br label %723

723:                                              ; preds = %715, %718
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %91) #14
  %724 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %69, align 8
  %725 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %724, i64 -1, i32 0, i32 0, i32 0
  %726 = bitcast %class.CFX_XMLNode** %725 to %class.CFX_XMLInstruction**
  %727 = load %class.CFX_XMLInstruction*, %class.CFX_XMLInstruction** %726, align 8
  %728 = load %"class.fxcrt::TreeNode"*, %"class.fxcrt::TreeNode"** %63, align 8
  %729 = getelementptr inbounds %class.CFX_XMLInstruction, %class.CFX_XMLInstruction* %727, i64 0, i32 0
  call void @_ZN5fxcrt8TreeNodeI11CFX_XMLNodePS1_E15AppendLastChildES2_(%"class.fxcrt::TreeNode"* %728, %class.CFX_XMLNode* %729)
  store %class.CFX_XMLNode* %729, %class.CFX_XMLNode** %76, align 8
  br label %730

730:                                              ; preds = %4117, %4110, %4103, %4096, %4089, %689, %696, %661, %684, %685, %723
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %12) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #14
  br label %3785

731:                                              ; preds = %474, %470
  %732 = load i32*, i32** %55, align 8
  %733 = icmp eq i32* %442, %732
  %734 = ptrtoint i32* %732 to i64
  br i1 %733, label %738, label %735

735:                                              ; preds = %731
  store i32 %130, i32* %442, align 4
  %736 = getelementptr inbounds i32, i32* %442, i64 1
  %737 = ptrtoint i32* %736 to i64
  store i64 %737, i64* %56, align 8
  br label %932

738:                                              ; preds = %731
  %739 = sub i64 %444, %443
  %740 = ashr exact i64 %739, 2
  %741 = add nsw i64 %740, 1
  %742 = icmp ugt i64 %741, 4611686018427387903
  br i1 %742, label %743, label %745

743:                                              ; preds = %738
  %744 = bitcast %"class.std::__1::vector"* %54 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %744) #15
  unreachable

745:                                              ; preds = %738
  %746 = sub i64 %734, %443
  %747 = ashr exact i64 %746, 2
  %748 = icmp ult i64 %747, 2305843009213693951
  br i1 %748, label %749, label %754

749:                                              ; preds = %745
  %750 = ashr exact i64 %746, 1
  %751 = icmp ult i64 %750, %741
  %752 = select i1 %751, i64 %741, i64 %750
  %753 = icmp eq i64 %752, 0
  br i1 %753, label %758, label %754

754:                                              ; preds = %749, %745
  %755 = phi i64 [ %752, %749 ], [ 4611686018427387903, %745 ]
  %756 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %755, i64 4) #14
  %757 = bitcast i8* %756 to i32*
  br label %758

758:                                              ; preds = %754, %749
  %759 = phi i64 [ %755, %754 ], [ 0, %749 ]
  %760 = phi i32* [ %757, %754 ], [ null, %749 ]
  %761 = getelementptr inbounds i32, i32* %760, i64 %740
  %762 = getelementptr inbounds i32, i32* %760, i64 %759
  %763 = ptrtoint i32* %762 to i64
  store i32 %130, i32* %761, align 4
  %764 = getelementptr inbounds i32, i32* %761, i64 1
  %765 = ptrtoint i32* %764 to i64
  %766 = load i32*, i32** %59, align 8
  %767 = ptrtoint i32* %766 to i64
  %768 = load i32*, i32** %53, align 8
  %769 = icmp eq i32* %768, %766
  br i1 %769, label %925, label %770

770:                                              ; preds = %758
  %771 = getelementptr i32, i32* %768, i64 -1
  %772 = ptrtoint i32* %771 to i64
  %773 = sub i64 %772, %767
  %774 = lshr i64 %773, 2
  %775 = add nuw nsw i64 %774, 1
  %776 = icmp ult i64 %775, 8
  br i1 %776, label %870, label %777

777:                                              ; preds = %770
  %778 = getelementptr i32, i32* %760, i64 -1
  %779 = getelementptr i32, i32* %768, i64 -1
  %780 = ptrtoint i32* %779 to i64
  %781 = sub i64 %780, %767
  %782 = lshr i64 %781, 2
  %783 = sub nsw i64 %740, %782
  %784 = getelementptr i32, i32* %778, i64 %783
  %785 = getelementptr i32, i32* %768, i64 -1
  %786 = sub nsw i64 0, %782
  %787 = getelementptr i32, i32* %785, i64 %786
  %788 = icmp ult i32* %784, %768
  %789 = icmp ult i32* %787, %761
  %790 = and i1 %788, %789
  br i1 %790, label %870, label %791

791:                                              ; preds = %777
  %792 = and i64 %775, 9223372036854775800
  %793 = sub nsw i64 0, %792
  %794 = getelementptr i32, i32* %761, i64 %793
  %795 = sub nsw i64 0, %792
  %796 = getelementptr i32, i32* %768, i64 %795
  %797 = add nsw i64 %792, -8
  %798 = lshr exact i64 %797, 3
  %799 = add nuw nsw i64 %798, 1
  %800 = and i64 %799, 1
  %801 = icmp eq i64 %797, 0
  br i1 %801, label %846, label %802

802:                                              ; preds = %791
  %803 = sub nuw nsw i64 %799, %800
  %804 = getelementptr i32, i32* %761, i64 -1
  %805 = getelementptr i32, i32* %768, i64 -1
  %806 = getelementptr i32, i32* %761, i64 -1
  %807 = getelementptr i32, i32* %768, i64 -1
  br label %808

808:                                              ; preds = %808, %802
  %809 = phi i64 [ 0, %802 ], [ %843, %808 ]
  %810 = phi i64 [ %803, %802 ], [ %844, %808 ]
  %811 = sub i64 0, %809
  %812 = sub i64 0, %809
  %813 = getelementptr inbounds i32, i32* %804, i64 %811
  %814 = getelementptr inbounds i32, i32* %805, i64 %812
  %815 = getelementptr inbounds i32, i32* %814, i64 -3
  %816 = bitcast i32* %815 to <4 x i32>*
  %817 = load <4 x i32>, <4 x i32>* %816, align 4, !alias.scope !45
  %818 = getelementptr inbounds i32, i32* %814, i64 -4
  %819 = getelementptr inbounds i32, i32* %818, i64 -3
  %820 = bitcast i32* %819 to <4 x i32>*
  %821 = load <4 x i32>, <4 x i32>* %820, align 4, !alias.scope !45
  %822 = getelementptr inbounds i32, i32* %813, i64 -3
  %823 = bitcast i32* %822 to <4 x i32>*
  store <4 x i32> %817, <4 x i32>* %823, align 4, !alias.scope !48, !noalias !45
  %824 = getelementptr inbounds i32, i32* %813, i64 -4
  %825 = getelementptr inbounds i32, i32* %824, i64 -3
  %826 = bitcast i32* %825 to <4 x i32>*
  store <4 x i32> %821, <4 x i32>* %826, align 4, !alias.scope !48, !noalias !45
  %827 = sub nuw nsw i64 -8, %809
  %828 = sub nuw nsw i64 -8, %809
  %829 = getelementptr inbounds i32, i32* %806, i64 %827
  %830 = getelementptr inbounds i32, i32* %807, i64 %828
  %831 = getelementptr inbounds i32, i32* %830, i64 -3
  %832 = bitcast i32* %831 to <4 x i32>*
  %833 = load <4 x i32>, <4 x i32>* %832, align 4, !alias.scope !45
  %834 = getelementptr inbounds i32, i32* %830, i64 -4
  %835 = getelementptr inbounds i32, i32* %834, i64 -3
  %836 = bitcast i32* %835 to <4 x i32>*
  %837 = load <4 x i32>, <4 x i32>* %836, align 4, !alias.scope !45
  %838 = getelementptr inbounds i32, i32* %829, i64 -3
  %839 = bitcast i32* %838 to <4 x i32>*
  store <4 x i32> %833, <4 x i32>* %839, align 4, !alias.scope !48, !noalias !45
  %840 = getelementptr inbounds i32, i32* %829, i64 -4
  %841 = getelementptr inbounds i32, i32* %840, i64 -3
  %842 = bitcast i32* %841 to <4 x i32>*
  store <4 x i32> %837, <4 x i32>* %842, align 4, !alias.scope !48, !noalias !45
  %843 = add i64 %809, 16
  %844 = add i64 %810, -2
  %845 = icmp eq i64 %844, 0
  br i1 %845, label %846, label %808, !llvm.loop !50

846:                                              ; preds = %808, %791
  %847 = phi i64 [ 0, %791 ], [ %843, %808 ]
  %848 = icmp eq i64 %800, 0
  br i1 %848, label %868, label %849

849:                                              ; preds = %846
  %850 = sub i64 0, %847
  %851 = getelementptr i32, i32* %761, i64 -1
  %852 = sub i64 0, %847
  %853 = getelementptr i32, i32* %768, i64 -1
  %854 = getelementptr inbounds i32, i32* %851, i64 %850
  %855 = getelementptr inbounds i32, i32* %853, i64 %852
  %856 = getelementptr inbounds i32, i32* %855, i64 -3
  %857 = bitcast i32* %856 to <4 x i32>*
  %858 = load <4 x i32>, <4 x i32>* %857, align 4, !alias.scope !45
  %859 = getelementptr inbounds i32, i32* %855, i64 -4
  %860 = getelementptr inbounds i32, i32* %859, i64 -3
  %861 = bitcast i32* %860 to <4 x i32>*
  %862 = load <4 x i32>, <4 x i32>* %861, align 4, !alias.scope !45
  %863 = getelementptr inbounds i32, i32* %854, i64 -3
  %864 = bitcast i32* %863 to <4 x i32>*
  store <4 x i32> %858, <4 x i32>* %864, align 4, !alias.scope !48, !noalias !45
  %865 = getelementptr inbounds i32, i32* %854, i64 -4
  %866 = getelementptr inbounds i32, i32* %865, i64 -3
  %867 = bitcast i32* %866 to <4 x i32>*
  store <4 x i32> %862, <4 x i32>* %867, align 4, !alias.scope !48, !noalias !45
  br label %868

868:                                              ; preds = %846, %849
  %869 = icmp eq i64 %775, %792
  br i1 %869, label %922, label %870

870:                                              ; preds = %868, %777, %770
  %871 = phi i32* [ %761, %777 ], [ %761, %770 ], [ %794, %868 ]
  %872 = phi i32* [ %768, %777 ], [ %768, %770 ], [ %796, %868 ]
  %873 = getelementptr i32, i32* %872, i64 -1
  %874 = ptrtoint i32* %873 to i64
  %875 = sub i64 %874, %767
  %876 = lshr i64 %875, 2
  %877 = add nuw nsw i64 %876, 1
  %878 = and i64 %877, 7
  %879 = icmp eq i64 %878, 0
  br i1 %879, label %889, label %880

880:                                              ; preds = %870, %880
  %881 = phi i32* [ %884, %880 ], [ %871, %870 ]
  %882 = phi i32* [ %885, %880 ], [ %872, %870 ]
  %883 = phi i64 [ %887, %880 ], [ %878, %870 ]
  %884 = getelementptr inbounds i32, i32* %881, i64 -1
  %885 = getelementptr inbounds i32, i32* %882, i64 -1
  %886 = load i32, i32* %885, align 4
  store i32 %886, i32* %884, align 4
  %887 = add i64 %883, -1
  %888 = icmp eq i64 %887, 0
  br i1 %888, label %889, label %880, !llvm.loop !51

889:                                              ; preds = %880, %870
  %890 = phi i32* [ undef, %870 ], [ %884, %880 ]
  %891 = phi i32* [ %871, %870 ], [ %884, %880 ]
  %892 = phi i32* [ %872, %870 ], [ %885, %880 ]
  %893 = icmp ult i64 %875, 28
  br i1 %893, label %922, label %894

894:                                              ; preds = %889, %894
  %895 = phi i32* [ %918, %894 ], [ %891, %889 ]
  %896 = phi i32* [ %919, %894 ], [ %892, %889 ]
  %897 = getelementptr inbounds i32, i32* %895, i64 -1
  %898 = getelementptr inbounds i32, i32* %896, i64 -1
  %899 = load i32, i32* %898, align 4
  store i32 %899, i32* %897, align 4
  %900 = getelementptr inbounds i32, i32* %895, i64 -2
  %901 = getelementptr inbounds i32, i32* %896, i64 -2
  %902 = load i32, i32* %901, align 4
  store i32 %902, i32* %900, align 4
  %903 = getelementptr inbounds i32, i32* %895, i64 -3
  %904 = getelementptr inbounds i32, i32* %896, i64 -3
  %905 = load i32, i32* %904, align 4
  store i32 %905, i32* %903, align 4
  %906 = getelementptr inbounds i32, i32* %895, i64 -4
  %907 = getelementptr inbounds i32, i32* %896, i64 -4
  %908 = load i32, i32* %907, align 4
  store i32 %908, i32* %906, align 4
  %909 = getelementptr inbounds i32, i32* %895, i64 -5
  %910 = getelementptr inbounds i32, i32* %896, i64 -5
  %911 = load i32, i32* %910, align 4
  store i32 %911, i32* %909, align 4
  %912 = getelementptr inbounds i32, i32* %895, i64 -6
  %913 = getelementptr inbounds i32, i32* %896, i64 -6
  %914 = load i32, i32* %913, align 4
  store i32 %914, i32* %912, align 4
  %915 = getelementptr inbounds i32, i32* %895, i64 -7
  %916 = getelementptr inbounds i32, i32* %896, i64 -7
  %917 = load i32, i32* %916, align 4
  store i32 %917, i32* %915, align 4
  %918 = getelementptr inbounds i32, i32* %895, i64 -8
  %919 = getelementptr inbounds i32, i32* %896, i64 -8
  %920 = load i32, i32* %919, align 4
  store i32 %920, i32* %918, align 4
  %921 = icmp eq i32* %919, %766
  br i1 %921, label %922, label %894, !llvm.loop !52

922:                                              ; preds = %889, %894, %868
  %923 = phi i32* [ %794, %868 ], [ %890, %889 ], [ %918, %894 ]
  %924 = load i64, i64* %57, align 8
  br label %925

925:                                              ; preds = %758, %922
  %926 = phi i32* [ %923, %922 ], [ %761, %758 ]
  %927 = phi i64 [ %924, %922 ], [ %767, %758 ]
  %928 = ptrtoint i32* %926 to i64
  store i64 %928, i64* %57, align 8
  store i64 %765, i64* %56, align 8
  store i64 %763, i64* %58, align 8
  %929 = icmp eq i64 %927, 0
  br i1 %929, label %932, label %930

930:                                              ; preds = %925
  %931 = inttoptr i64 %927 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %931) #14
  br label %932

932:                                              ; preds = %735, %925, %930
  %933 = add nsw i64 %127, 1
  br label %3785

934:                                              ; preds = %123
  %935 = load i32*, i32** %59, align 8
  %936 = load i32*, i32** %53, align 8
  %937 = ptrtoint i32* %935 to i64
  %938 = ptrtoint i32* %936 to i64
  br label %939

939:                                              ; preds = %939, %934
  %940 = phi i64 [ 20, %934 ], [ %952, %939 ]
  %941 = phi %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* [ getelementptr inbounds ([20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"], [20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"]* @_ZN12_GLOBAL__N_114g_XMLNameCharsE, i64 0, i64 0), %934 ], [ %951, %939 ]
  %942 = lshr i64 %940, 1
  %943 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %941, i64 1
  %944 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %941, i64 %942, i32 1
  %945 = load i16, i16* %944, align 2
  %946 = zext i16 %945 to i32
  %947 = icmp sgt i32 %130, %946
  %948 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %943, i64 %942
  %949 = xor i64 %942, -1
  %950 = add i64 %940, %949
  %951 = select i1 %947, %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %948, %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %941
  %952 = select i1 %947, i64 %950, i64 %942
  %953 = icmp eq i64 %952, 0
  br i1 %953, label %954, label %939

954:                                              ; preds = %939
  %955 = icmp eq i32* %935, %936
  %956 = icmp eq %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %951, getelementptr inbounds ([20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"], [20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"]* @_ZN12_GLOBAL__N_114g_XMLNameCharsE, i64 1, i64 0)
  br i1 %956, label %969, label %957

957:                                              ; preds = %954
  %958 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %951, i64 0, i32 0
  %959 = load i16, i16* %958, align 2
  %960 = zext i16 %959 to i32
  %961 = icmp slt i32 %130, %960
  %962 = xor i1 %955, true
  %963 = or i1 %961, %962
  br i1 %963, label %968, label %964

964:                                              ; preds = %957
  %965 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %951, i64 0, i32 2
  %966 = load i8, i8* %965, align 2, !range !2
  %967 = icmp eq i8 %966, 0
  br i1 %967, label %969, label %1182

968:                                              ; preds = %957
  br i1 %961, label %969, label %1182

969:                                              ; preds = %968, %964, %954
  br i1 %955, label %3791, label %970

970:                                              ; preds = %969
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #14
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %85, align 8, !alias.scope !53
  %971 = sub i64 %938, %937
  %972 = ashr exact i64 %971, 2
  call void @_ZN5fxcrt10WideStringC1EPKwm(%"class.fxcrt::WideString"* nonnull %13, i32* %935, i64 %972) #14
  store i32 -1, i32* %66, align 8, !noalias !53
  %973 = load i64, i64* %57, align 8, !noalias !53
  store i64 %973, i64* %56, align 8, !noalias !53
  %974 = load i64, i64* %58, align 8, !noalias !53
  %975 = sub i64 %974, %973
  %976 = ashr exact i64 %975, 2
  %977 = icmp ult i64 %976, 128
  br i1 %977, label %978, label %1155

978:                                              ; preds = %970
  %979 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 128, i64 4) #14
  %980 = ptrtoint i8* %979 to i64
  %981 = getelementptr inbounds i8, i8* %979, i64 512
  %982 = ptrtoint i8* %981 to i64
  %983 = load i32*, i32** %59, align 8, !noalias !53
  %984 = ptrtoint i32* %983 to i64
  %985 = load i32*, i32** %53, align 8, !noalias !53
  %986 = bitcast i32* %985 to i8*
  %987 = icmp eq i32* %985, %983
  br i1 %987, label %1149, label %988

988:                                              ; preds = %978
  %989 = bitcast i8* %979 to i32*
  %990 = getelementptr i32, i32* %985, i64 -1
  %991 = ptrtoint i32* %990 to i64
  %992 = sub i64 %991, %984
  %993 = lshr i64 %992, 2
  %994 = add nuw nsw i64 %993, 1
  %995 = icmp ult i64 %994, 8
  br i1 %995, label %1093, label %996

996:                                              ; preds = %988
  %997 = getelementptr i8, i8* %979, i64 -4
  %998 = getelementptr i32, i32* %985, i64 -1
  %999 = ptrtoint i32* %998 to i64
  %1000 = sub i64 %999, %984
  %1001 = lshr i64 %1000, 2
  %1002 = mul i64 %1001, -4
  %1003 = getelementptr i8, i8* %997, i64 %1002
  %1004 = getelementptr i32, i32* %985, i64 -1
  %1005 = sub nsw i64 0, %1001
  %1006 = getelementptr i32, i32* %1004, i64 %1005
  %1007 = bitcast i32* %1006 to i8*
  %1008 = icmp ult i8* %1003, %986
  %1009 = icmp ugt i8* %979, %1007
  %1010 = and i1 %1008, %1009
  br i1 %1010, label %1093, label %1011

1011:                                             ; preds = %996
  %1012 = and i64 %994, 9223372036854775800
  %1013 = sub nsw i64 0, %1012
  %1014 = getelementptr i32, i32* %989, i64 %1013
  %1015 = sub nsw i64 0, %1012
  %1016 = getelementptr i32, i32* %985, i64 %1015
  %1017 = add nsw i64 %1012, -8
  %1018 = lshr exact i64 %1017, 3
  %1019 = add nuw nsw i64 %1018, 1
  %1020 = and i64 %1019, 1
  %1021 = icmp eq i64 %1017, 0
  br i1 %1021, label %1068, label %1022

1022:                                             ; preds = %1011
  %1023 = sub nuw nsw i64 %1019, %1020
  %1024 = getelementptr i8, i8* %979, i64 -4
  %1025 = bitcast i8* %1024 to i32*
  %1026 = getelementptr i32, i32* %985, i64 -1
  %1027 = getelementptr i8, i8* %979, i64 -4
  %1028 = bitcast i8* %1027 to i32*
  %1029 = getelementptr i32, i32* %985, i64 -1
  br label %1030

1030:                                             ; preds = %1030, %1022
  %1031 = phi i64 [ 0, %1022 ], [ %1065, %1030 ]
  %1032 = phi i64 [ %1023, %1022 ], [ %1066, %1030 ]
  %1033 = sub i64 0, %1031
  %1034 = sub i64 0, %1031
  %1035 = getelementptr inbounds i32, i32* %1025, i64 %1033
  %1036 = getelementptr inbounds i32, i32* %1026, i64 %1034
  %1037 = getelementptr inbounds i32, i32* %1036, i64 -3
  %1038 = bitcast i32* %1037 to <4 x i32>*
  %1039 = load <4 x i32>, <4 x i32>* %1038, align 4, !alias.scope !56
  %1040 = getelementptr inbounds i32, i32* %1036, i64 -4
  %1041 = getelementptr inbounds i32, i32* %1040, i64 -3
  %1042 = bitcast i32* %1041 to <4 x i32>*
  %1043 = load <4 x i32>, <4 x i32>* %1042, align 4, !alias.scope !56
  %1044 = getelementptr inbounds i32, i32* %1035, i64 -3
  %1045 = bitcast i32* %1044 to <4 x i32>*
  store <4 x i32> %1039, <4 x i32>* %1045, align 4, !alias.scope !59, !noalias !56
  %1046 = getelementptr inbounds i32, i32* %1035, i64 -4
  %1047 = getelementptr inbounds i32, i32* %1046, i64 -3
  %1048 = bitcast i32* %1047 to <4 x i32>*
  store <4 x i32> %1043, <4 x i32>* %1048, align 4, !alias.scope !59, !noalias !56
  %1049 = sub nuw nsw i64 -8, %1031
  %1050 = sub nuw nsw i64 -8, %1031
  %1051 = getelementptr inbounds i32, i32* %1028, i64 %1049
  %1052 = getelementptr inbounds i32, i32* %1029, i64 %1050
  %1053 = getelementptr inbounds i32, i32* %1052, i64 -3
  %1054 = bitcast i32* %1053 to <4 x i32>*
  %1055 = load <4 x i32>, <4 x i32>* %1054, align 4, !alias.scope !56
  %1056 = getelementptr inbounds i32, i32* %1052, i64 -4
  %1057 = getelementptr inbounds i32, i32* %1056, i64 -3
  %1058 = bitcast i32* %1057 to <4 x i32>*
  %1059 = load <4 x i32>, <4 x i32>* %1058, align 4, !alias.scope !56
  %1060 = getelementptr inbounds i32, i32* %1051, i64 -3
  %1061 = bitcast i32* %1060 to <4 x i32>*
  store <4 x i32> %1055, <4 x i32>* %1061, align 4, !alias.scope !59, !noalias !56
  %1062 = getelementptr inbounds i32, i32* %1051, i64 -4
  %1063 = getelementptr inbounds i32, i32* %1062, i64 -3
  %1064 = bitcast i32* %1063 to <4 x i32>*
  store <4 x i32> %1059, <4 x i32>* %1064, align 4, !alias.scope !59, !noalias !56
  %1065 = add i64 %1031, 16
  %1066 = add i64 %1032, -2
  %1067 = icmp eq i64 %1066, 0
  br i1 %1067, label %1068, label %1030, !llvm.loop !61

1068:                                             ; preds = %1030, %1011
  %1069 = phi i64 [ 0, %1011 ], [ %1065, %1030 ]
  %1070 = icmp eq i64 %1020, 0
  br i1 %1070, label %1091, label %1071

1071:                                             ; preds = %1068
  %1072 = sub i64 0, %1069
  %1073 = getelementptr i8, i8* %979, i64 -4
  %1074 = bitcast i8* %1073 to i32*
  %1075 = sub i64 0, %1069
  %1076 = getelementptr i32, i32* %985, i64 -1
  %1077 = getelementptr inbounds i32, i32* %1074, i64 %1072
  %1078 = getelementptr inbounds i32, i32* %1076, i64 %1075
  %1079 = getelementptr inbounds i32, i32* %1078, i64 -3
  %1080 = bitcast i32* %1079 to <4 x i32>*
  %1081 = load <4 x i32>, <4 x i32>* %1080, align 4, !alias.scope !56
  %1082 = getelementptr inbounds i32, i32* %1078, i64 -4
  %1083 = getelementptr inbounds i32, i32* %1082, i64 -3
  %1084 = bitcast i32* %1083 to <4 x i32>*
  %1085 = load <4 x i32>, <4 x i32>* %1084, align 4, !alias.scope !56
  %1086 = getelementptr inbounds i32, i32* %1077, i64 -3
  %1087 = bitcast i32* %1086 to <4 x i32>*
  store <4 x i32> %1081, <4 x i32>* %1087, align 4, !alias.scope !59, !noalias !56
  %1088 = getelementptr inbounds i32, i32* %1077, i64 -4
  %1089 = getelementptr inbounds i32, i32* %1088, i64 -3
  %1090 = bitcast i32* %1089 to <4 x i32>*
  store <4 x i32> %1085, <4 x i32>* %1090, align 4, !alias.scope !59, !noalias !56
  br label %1091

1091:                                             ; preds = %1068, %1071
  %1092 = icmp eq i64 %994, %1012
  br i1 %1092, label %1145, label %1093

1093:                                             ; preds = %1091, %996, %988
  %1094 = phi i32* [ %989, %996 ], [ %989, %988 ], [ %1014, %1091 ]
  %1095 = phi i32* [ %985, %996 ], [ %985, %988 ], [ %1016, %1091 ]
  %1096 = getelementptr i32, i32* %1095, i64 -1
  %1097 = ptrtoint i32* %1096 to i64
  %1098 = sub i64 %1097, %984
  %1099 = lshr i64 %1098, 2
  %1100 = add nuw nsw i64 %1099, 1
  %1101 = and i64 %1100, 7
  %1102 = icmp eq i64 %1101, 0
  br i1 %1102, label %1112, label %1103

1103:                                             ; preds = %1093, %1103
  %1104 = phi i32* [ %1107, %1103 ], [ %1094, %1093 ]
  %1105 = phi i32* [ %1108, %1103 ], [ %1095, %1093 ]
  %1106 = phi i64 [ %1110, %1103 ], [ %1101, %1093 ]
  %1107 = getelementptr inbounds i32, i32* %1104, i64 -1
  %1108 = getelementptr inbounds i32, i32* %1105, i64 -1
  %1109 = load i32, i32* %1108, align 4
  store i32 %1109, i32* %1107, align 4
  %1110 = add i64 %1106, -1
  %1111 = icmp eq i64 %1110, 0
  br i1 %1111, label %1112, label %1103, !llvm.loop !62

1112:                                             ; preds = %1103, %1093
  %1113 = phi i32* [ undef, %1093 ], [ %1107, %1103 ]
  %1114 = phi i32* [ %1094, %1093 ], [ %1107, %1103 ]
  %1115 = phi i32* [ %1095, %1093 ], [ %1108, %1103 ]
  %1116 = icmp ult i64 %1098, 28
  br i1 %1116, label %1145, label %1117

1117:                                             ; preds = %1112, %1117
  %1118 = phi i32* [ %1141, %1117 ], [ %1114, %1112 ]
  %1119 = phi i32* [ %1142, %1117 ], [ %1115, %1112 ]
  %1120 = getelementptr inbounds i32, i32* %1118, i64 -1
  %1121 = getelementptr inbounds i32, i32* %1119, i64 -1
  %1122 = load i32, i32* %1121, align 4
  store i32 %1122, i32* %1120, align 4
  %1123 = getelementptr inbounds i32, i32* %1118, i64 -2
  %1124 = getelementptr inbounds i32, i32* %1119, i64 -2
  %1125 = load i32, i32* %1124, align 4
  store i32 %1125, i32* %1123, align 4
  %1126 = getelementptr inbounds i32, i32* %1118, i64 -3
  %1127 = getelementptr inbounds i32, i32* %1119, i64 -3
  %1128 = load i32, i32* %1127, align 4
  store i32 %1128, i32* %1126, align 4
  %1129 = getelementptr inbounds i32, i32* %1118, i64 -4
  %1130 = getelementptr inbounds i32, i32* %1119, i64 -4
  %1131 = load i32, i32* %1130, align 4
  store i32 %1131, i32* %1129, align 4
  %1132 = getelementptr inbounds i32, i32* %1118, i64 -5
  %1133 = getelementptr inbounds i32, i32* %1119, i64 -5
  %1134 = load i32, i32* %1133, align 4
  store i32 %1134, i32* %1132, align 4
  %1135 = getelementptr inbounds i32, i32* %1118, i64 -6
  %1136 = getelementptr inbounds i32, i32* %1119, i64 -6
  %1137 = load i32, i32* %1136, align 4
  store i32 %1137, i32* %1135, align 4
  %1138 = getelementptr inbounds i32, i32* %1118, i64 -7
  %1139 = getelementptr inbounds i32, i32* %1119, i64 -7
  %1140 = load i32, i32* %1139, align 4
  store i32 %1140, i32* %1138, align 4
  %1141 = getelementptr inbounds i32, i32* %1118, i64 -8
  %1142 = getelementptr inbounds i32, i32* %1119, i64 -8
  %1143 = load i32, i32* %1142, align 4
  store i32 %1143, i32* %1141, align 4
  %1144 = icmp eq i32* %1142, %983
  br i1 %1144, label %1145, label %1117, !llvm.loop !63

1145:                                             ; preds = %1112, %1117, %1091
  %1146 = phi i32* [ %1014, %1091 ], [ %1113, %1112 ], [ %1141, %1117 ]
  %1147 = ptrtoint i32* %1146 to i64
  %1148 = load i64, i64* %57, align 8, !noalias !53
  br label %1149

1149:                                             ; preds = %978, %1145
  %1150 = phi i64 [ %1147, %1145 ], [ %980, %978 ]
  %1151 = phi i64 [ %1148, %1145 ], [ %984, %978 ]
  store i64 %1150, i64* %57, align 8, !noalias !53
  store i64 %980, i64* %56, align 8, !noalias !53
  store i64 %982, i64* %58, align 8, !noalias !53
  %1152 = icmp eq i64 %1151, 0
  br i1 %1152, label %1155, label %1153

1153:                                             ; preds = %1149
  %1154 = inttoptr i64 %1151 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %1154) #14
  br label %1155

1155:                                             ; preds = %970, %1149, %1153
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %86) #14
  %1156 = call i8* @_Znwm(i64 80) #13
  %1157 = bitcast i8* %1156 to %class.CFX_XMLElement*
  call void @_ZN14CFX_XMLElementC1ERKN5fxcrt10WideStringE(%class.CFX_XMLElement* nonnull %1157, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %13) #14
  %1158 = ptrtoint i8* %1156 to i64
  store i64 %1158, i64* %87, align 8
  %1159 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %69, align 8
  %1160 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %70, align 8
  %1161 = icmp ult %"class.std::__1::unique_ptr.15"* %1159, %1160
  br i1 %1161, label %1162, label %1166

1162:                                             ; preds = %1155
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %88, align 8
  %1163 = bitcast %"class.std::__1::unique_ptr.15"* %1159 to i64*
  store i64 %1158, i64* %1163, align 8
  %1164 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %1159, i64 1
  %1165 = ptrtoint %"class.std::__1::unique_ptr.15"* %1164 to i64
  store i64 %1165, i64* %73, align 8
  br label %1167

1166:                                             ; preds = %1155
  call void @_ZNSt3__16vectorINS_10unique_ptrI11CFX_XMLNodeNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.13"* %71, %"class.std::__1::unique_ptr.15"* nonnull dereferenceable(8) %4) #14
  br label %1167

1167:                                             ; preds = %1166, %1162
  %1168 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %88, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %88, align 8
  %1169 = icmp eq %class.CFX_XMLNode* %1168, null
  br i1 %1169, label %1175, label %1170

1170:                                             ; preds = %1167
  %1171 = bitcast %class.CFX_XMLNode* %1168 to void (%class.CFX_XMLNode*)***
  %1172 = load void (%class.CFX_XMLNode*)**, void (%class.CFX_XMLNode*)*** %1171, align 8
  %1173 = getelementptr inbounds void (%class.CFX_XMLNode*)*, void (%class.CFX_XMLNode*)** %1172, i64 1
  %1174 = load void (%class.CFX_XMLNode*)*, void (%class.CFX_XMLNode*)** %1173, align 8
  call void %1174(%class.CFX_XMLNode* nonnull %1168) #14
  br label %1175

1175:                                             ; preds = %1167, %1170
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %86) #14
  %1176 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %69, align 8
  %1177 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %1176, i64 -1, i32 0, i32 0, i32 0
  %1178 = bitcast %class.CFX_XMLNode** %1177 to %class.CFX_XMLElement**
  %1179 = load %class.CFX_XMLElement*, %class.CFX_XMLElement** %1178, align 8
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %13) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #14
  %1180 = load %"class.fxcrt::TreeNode"*, %"class.fxcrt::TreeNode"** %63, align 8
  %1181 = getelementptr inbounds %class.CFX_XMLElement, %class.CFX_XMLElement* %1179, i64 0, i32 0
  call void @_ZN5fxcrt8TreeNodeI11CFX_XMLNodePS1_E15AppendLastChildES2_(%"class.fxcrt::TreeNode"* %1180, %class.CFX_XMLNode* %1181)
  store %class.CFX_XMLNode* %1181, %class.CFX_XMLNode** %76, align 8
  br label %3785

1182:                                             ; preds = %968, %964
  %1183 = load i32*, i32** %55, align 8
  %1184 = icmp eq i32* %936, %1183
  %1185 = ptrtoint i32* %1183 to i64
  br i1 %1184, label %1189, label %1186

1186:                                             ; preds = %1182
  store i32 %130, i32* %936, align 4
  %1187 = getelementptr inbounds i32, i32* %936, i64 1
  %1188 = ptrtoint i32* %1187 to i64
  store i64 %1188, i64* %56, align 8
  br label %1383

1189:                                             ; preds = %1182
  %1190 = sub i64 %938, %937
  %1191 = ashr exact i64 %1190, 2
  %1192 = add nsw i64 %1191, 1
  %1193 = icmp ugt i64 %1192, 4611686018427387903
  br i1 %1193, label %1194, label %1196

1194:                                             ; preds = %1189
  %1195 = bitcast %"class.std::__1::vector"* %54 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1195) #15
  unreachable

1196:                                             ; preds = %1189
  %1197 = sub i64 %1185, %937
  %1198 = ashr exact i64 %1197, 2
  %1199 = icmp ult i64 %1198, 2305843009213693951
  br i1 %1199, label %1200, label %1205

1200:                                             ; preds = %1196
  %1201 = ashr exact i64 %1197, 1
  %1202 = icmp ult i64 %1201, %1192
  %1203 = select i1 %1202, i64 %1192, i64 %1201
  %1204 = icmp eq i64 %1203, 0
  br i1 %1204, label %1209, label %1205

1205:                                             ; preds = %1200, %1196
  %1206 = phi i64 [ %1203, %1200 ], [ 4611686018427387903, %1196 ]
  %1207 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %1206, i64 4) #14
  %1208 = bitcast i8* %1207 to i32*
  br label %1209

1209:                                             ; preds = %1205, %1200
  %1210 = phi i64 [ %1206, %1205 ], [ 0, %1200 ]
  %1211 = phi i32* [ %1208, %1205 ], [ null, %1200 ]
  %1212 = getelementptr inbounds i32, i32* %1211, i64 %1191
  %1213 = getelementptr inbounds i32, i32* %1211, i64 %1210
  %1214 = ptrtoint i32* %1213 to i64
  store i32 %130, i32* %1212, align 4
  %1215 = getelementptr inbounds i32, i32* %1212, i64 1
  %1216 = ptrtoint i32* %1215 to i64
  %1217 = load i32*, i32** %59, align 8
  %1218 = ptrtoint i32* %1217 to i64
  %1219 = load i32*, i32** %53, align 8
  %1220 = icmp eq i32* %1219, %1217
  br i1 %1220, label %1376, label %1221

1221:                                             ; preds = %1209
  %1222 = getelementptr i32, i32* %1219, i64 -1
  %1223 = ptrtoint i32* %1222 to i64
  %1224 = sub i64 %1223, %1218
  %1225 = lshr i64 %1224, 2
  %1226 = add nuw nsw i64 %1225, 1
  %1227 = icmp ult i64 %1226, 8
  br i1 %1227, label %1321, label %1228

1228:                                             ; preds = %1221
  %1229 = getelementptr i32, i32* %1211, i64 -1
  %1230 = getelementptr i32, i32* %1219, i64 -1
  %1231 = ptrtoint i32* %1230 to i64
  %1232 = sub i64 %1231, %1218
  %1233 = lshr i64 %1232, 2
  %1234 = sub nsw i64 %1191, %1233
  %1235 = getelementptr i32, i32* %1229, i64 %1234
  %1236 = getelementptr i32, i32* %1219, i64 -1
  %1237 = sub nsw i64 0, %1233
  %1238 = getelementptr i32, i32* %1236, i64 %1237
  %1239 = icmp ult i32* %1235, %1219
  %1240 = icmp ult i32* %1238, %1212
  %1241 = and i1 %1239, %1240
  br i1 %1241, label %1321, label %1242

1242:                                             ; preds = %1228
  %1243 = and i64 %1226, 9223372036854775800
  %1244 = sub nsw i64 0, %1243
  %1245 = getelementptr i32, i32* %1212, i64 %1244
  %1246 = sub nsw i64 0, %1243
  %1247 = getelementptr i32, i32* %1219, i64 %1246
  %1248 = add nsw i64 %1243, -8
  %1249 = lshr exact i64 %1248, 3
  %1250 = add nuw nsw i64 %1249, 1
  %1251 = and i64 %1250, 1
  %1252 = icmp eq i64 %1248, 0
  br i1 %1252, label %1297, label %1253

1253:                                             ; preds = %1242
  %1254 = sub nuw nsw i64 %1250, %1251
  %1255 = getelementptr i32, i32* %1212, i64 -1
  %1256 = getelementptr i32, i32* %1219, i64 -1
  %1257 = getelementptr i32, i32* %1212, i64 -1
  %1258 = getelementptr i32, i32* %1219, i64 -1
  br label %1259

1259:                                             ; preds = %1259, %1253
  %1260 = phi i64 [ 0, %1253 ], [ %1294, %1259 ]
  %1261 = phi i64 [ %1254, %1253 ], [ %1295, %1259 ]
  %1262 = sub i64 0, %1260
  %1263 = sub i64 0, %1260
  %1264 = getelementptr inbounds i32, i32* %1255, i64 %1262
  %1265 = getelementptr inbounds i32, i32* %1256, i64 %1263
  %1266 = getelementptr inbounds i32, i32* %1265, i64 -3
  %1267 = bitcast i32* %1266 to <4 x i32>*
  %1268 = load <4 x i32>, <4 x i32>* %1267, align 4, !alias.scope !64
  %1269 = getelementptr inbounds i32, i32* %1265, i64 -4
  %1270 = getelementptr inbounds i32, i32* %1269, i64 -3
  %1271 = bitcast i32* %1270 to <4 x i32>*
  %1272 = load <4 x i32>, <4 x i32>* %1271, align 4, !alias.scope !64
  %1273 = getelementptr inbounds i32, i32* %1264, i64 -3
  %1274 = bitcast i32* %1273 to <4 x i32>*
  store <4 x i32> %1268, <4 x i32>* %1274, align 4, !alias.scope !67, !noalias !64
  %1275 = getelementptr inbounds i32, i32* %1264, i64 -4
  %1276 = getelementptr inbounds i32, i32* %1275, i64 -3
  %1277 = bitcast i32* %1276 to <4 x i32>*
  store <4 x i32> %1272, <4 x i32>* %1277, align 4, !alias.scope !67, !noalias !64
  %1278 = sub nuw nsw i64 -8, %1260
  %1279 = sub nuw nsw i64 -8, %1260
  %1280 = getelementptr inbounds i32, i32* %1257, i64 %1278
  %1281 = getelementptr inbounds i32, i32* %1258, i64 %1279
  %1282 = getelementptr inbounds i32, i32* %1281, i64 -3
  %1283 = bitcast i32* %1282 to <4 x i32>*
  %1284 = load <4 x i32>, <4 x i32>* %1283, align 4, !alias.scope !64
  %1285 = getelementptr inbounds i32, i32* %1281, i64 -4
  %1286 = getelementptr inbounds i32, i32* %1285, i64 -3
  %1287 = bitcast i32* %1286 to <4 x i32>*
  %1288 = load <4 x i32>, <4 x i32>* %1287, align 4, !alias.scope !64
  %1289 = getelementptr inbounds i32, i32* %1280, i64 -3
  %1290 = bitcast i32* %1289 to <4 x i32>*
  store <4 x i32> %1284, <4 x i32>* %1290, align 4, !alias.scope !67, !noalias !64
  %1291 = getelementptr inbounds i32, i32* %1280, i64 -4
  %1292 = getelementptr inbounds i32, i32* %1291, i64 -3
  %1293 = bitcast i32* %1292 to <4 x i32>*
  store <4 x i32> %1288, <4 x i32>* %1293, align 4, !alias.scope !67, !noalias !64
  %1294 = add i64 %1260, 16
  %1295 = add i64 %1261, -2
  %1296 = icmp eq i64 %1295, 0
  br i1 %1296, label %1297, label %1259, !llvm.loop !69

1297:                                             ; preds = %1259, %1242
  %1298 = phi i64 [ 0, %1242 ], [ %1294, %1259 ]
  %1299 = icmp eq i64 %1251, 0
  br i1 %1299, label %1319, label %1300

1300:                                             ; preds = %1297
  %1301 = sub i64 0, %1298
  %1302 = getelementptr i32, i32* %1212, i64 -1
  %1303 = sub i64 0, %1298
  %1304 = getelementptr i32, i32* %1219, i64 -1
  %1305 = getelementptr inbounds i32, i32* %1302, i64 %1301
  %1306 = getelementptr inbounds i32, i32* %1304, i64 %1303
  %1307 = getelementptr inbounds i32, i32* %1306, i64 -3
  %1308 = bitcast i32* %1307 to <4 x i32>*
  %1309 = load <4 x i32>, <4 x i32>* %1308, align 4, !alias.scope !64
  %1310 = getelementptr inbounds i32, i32* %1306, i64 -4
  %1311 = getelementptr inbounds i32, i32* %1310, i64 -3
  %1312 = bitcast i32* %1311 to <4 x i32>*
  %1313 = load <4 x i32>, <4 x i32>* %1312, align 4, !alias.scope !64
  %1314 = getelementptr inbounds i32, i32* %1305, i64 -3
  %1315 = bitcast i32* %1314 to <4 x i32>*
  store <4 x i32> %1309, <4 x i32>* %1315, align 4, !alias.scope !67, !noalias !64
  %1316 = getelementptr inbounds i32, i32* %1305, i64 -4
  %1317 = getelementptr inbounds i32, i32* %1316, i64 -3
  %1318 = bitcast i32* %1317 to <4 x i32>*
  store <4 x i32> %1313, <4 x i32>* %1318, align 4, !alias.scope !67, !noalias !64
  br label %1319

1319:                                             ; preds = %1297, %1300
  %1320 = icmp eq i64 %1226, %1243
  br i1 %1320, label %1373, label %1321

1321:                                             ; preds = %1319, %1228, %1221
  %1322 = phi i32* [ %1212, %1228 ], [ %1212, %1221 ], [ %1245, %1319 ]
  %1323 = phi i32* [ %1219, %1228 ], [ %1219, %1221 ], [ %1247, %1319 ]
  %1324 = getelementptr i32, i32* %1323, i64 -1
  %1325 = ptrtoint i32* %1324 to i64
  %1326 = sub i64 %1325, %1218
  %1327 = lshr i64 %1326, 2
  %1328 = add nuw nsw i64 %1327, 1
  %1329 = and i64 %1328, 7
  %1330 = icmp eq i64 %1329, 0
  br i1 %1330, label %1340, label %1331

1331:                                             ; preds = %1321, %1331
  %1332 = phi i32* [ %1335, %1331 ], [ %1322, %1321 ]
  %1333 = phi i32* [ %1336, %1331 ], [ %1323, %1321 ]
  %1334 = phi i64 [ %1338, %1331 ], [ %1329, %1321 ]
  %1335 = getelementptr inbounds i32, i32* %1332, i64 -1
  %1336 = getelementptr inbounds i32, i32* %1333, i64 -1
  %1337 = load i32, i32* %1336, align 4
  store i32 %1337, i32* %1335, align 4
  %1338 = add i64 %1334, -1
  %1339 = icmp eq i64 %1338, 0
  br i1 %1339, label %1340, label %1331, !llvm.loop !70

1340:                                             ; preds = %1331, %1321
  %1341 = phi i32* [ undef, %1321 ], [ %1335, %1331 ]
  %1342 = phi i32* [ %1322, %1321 ], [ %1335, %1331 ]
  %1343 = phi i32* [ %1323, %1321 ], [ %1336, %1331 ]
  %1344 = icmp ult i64 %1326, 28
  br i1 %1344, label %1373, label %1345

1345:                                             ; preds = %1340, %1345
  %1346 = phi i32* [ %1369, %1345 ], [ %1342, %1340 ]
  %1347 = phi i32* [ %1370, %1345 ], [ %1343, %1340 ]
  %1348 = getelementptr inbounds i32, i32* %1346, i64 -1
  %1349 = getelementptr inbounds i32, i32* %1347, i64 -1
  %1350 = load i32, i32* %1349, align 4
  store i32 %1350, i32* %1348, align 4
  %1351 = getelementptr inbounds i32, i32* %1346, i64 -2
  %1352 = getelementptr inbounds i32, i32* %1347, i64 -2
  %1353 = load i32, i32* %1352, align 4
  store i32 %1353, i32* %1351, align 4
  %1354 = getelementptr inbounds i32, i32* %1346, i64 -3
  %1355 = getelementptr inbounds i32, i32* %1347, i64 -3
  %1356 = load i32, i32* %1355, align 4
  store i32 %1356, i32* %1354, align 4
  %1357 = getelementptr inbounds i32, i32* %1346, i64 -4
  %1358 = getelementptr inbounds i32, i32* %1347, i64 -4
  %1359 = load i32, i32* %1358, align 4
  store i32 %1359, i32* %1357, align 4
  %1360 = getelementptr inbounds i32, i32* %1346, i64 -5
  %1361 = getelementptr inbounds i32, i32* %1347, i64 -5
  %1362 = load i32, i32* %1361, align 4
  store i32 %1362, i32* %1360, align 4
  %1363 = getelementptr inbounds i32, i32* %1346, i64 -6
  %1364 = getelementptr inbounds i32, i32* %1347, i64 -6
  %1365 = load i32, i32* %1364, align 4
  store i32 %1365, i32* %1363, align 4
  %1366 = getelementptr inbounds i32, i32* %1346, i64 -7
  %1367 = getelementptr inbounds i32, i32* %1347, i64 -7
  %1368 = load i32, i32* %1367, align 4
  store i32 %1368, i32* %1366, align 4
  %1369 = getelementptr inbounds i32, i32* %1346, i64 -8
  %1370 = getelementptr inbounds i32, i32* %1347, i64 -8
  %1371 = load i32, i32* %1370, align 4
  store i32 %1371, i32* %1369, align 4
  %1372 = icmp eq i32* %1370, %1217
  br i1 %1372, label %1373, label %1345, !llvm.loop !71

1373:                                             ; preds = %1340, %1345, %1319
  %1374 = phi i32* [ %1245, %1319 ], [ %1341, %1340 ], [ %1369, %1345 ]
  %1375 = load i64, i64* %57, align 8
  br label %1376

1376:                                             ; preds = %1209, %1373
  %1377 = phi i32* [ %1374, %1373 ], [ %1212, %1209 ]
  %1378 = phi i64 [ %1375, %1373 ], [ %1218, %1209 ]
  %1379 = ptrtoint i32* %1377 to i64
  store i64 %1379, i64* %57, align 8
  store i64 %1216, i64* %56, align 8
  store i64 %1214, i64* %58, align 8
  %1380 = icmp eq i64 %1378, 0
  br i1 %1380, label %1383, label %1381

1381:                                             ; preds = %1376
  %1382 = inttoptr i64 %1378 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %1382) #14
  br label %1383

1383:                                             ; preds = %1186, %1376, %1381
  %1384 = add nsw i64 %127, 1
  br label %3785

1385:                                             ; preds = %123
  %1386 = load i32*, i32** %59, align 8
  %1387 = load i32*, i32** %53, align 8
  %1388 = icmp eq i32* %1386, %1387
  %1389 = ptrtoint i32* %1386 to i64
  %1390 = ptrtoint i32* %1387 to i64
  br i1 %1388, label %1392, label %1391

1391:                                             ; preds = %1392, %1385
  br label %1395

1392:                                             ; preds = %1385
  switch i32 %130, label %1391 [
    i32 32, label %1393
    i32 13, label %1393
    i32 10, label %1393
    i32 9, label %1393
  ]

1393:                                             ; preds = %1392, %1392, %1392, %1392
  %1394 = add nsw i64 %127, 1
  br label %3785

1395:                                             ; preds = %1391, %1395
  %1396 = phi i64 [ %1408, %1395 ], [ 20, %1391 ]
  %1397 = phi %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* [ %1407, %1395 ], [ getelementptr inbounds ([20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"], [20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"]* @_ZN12_GLOBAL__N_114g_XMLNameCharsE, i64 0, i64 0), %1391 ]
  %1398 = lshr i64 %1396, 1
  %1399 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %1397, i64 1
  %1400 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %1397, i64 %1398, i32 1
  %1401 = load i16, i16* %1400, align 2
  %1402 = zext i16 %1401 to i32
  %1403 = icmp sgt i32 %130, %1402
  %1404 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %1399, i64 %1398
  %1405 = xor i64 %1398, -1
  %1406 = add i64 %1396, %1405
  %1407 = select i1 %1403, %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %1404, %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %1397
  %1408 = select i1 %1403, i64 %1406, i64 %1398
  %1409 = icmp eq i64 %1408, 0
  br i1 %1409, label %1410, label %1395

1410:                                             ; preds = %1395
  %1411 = icmp eq %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %1407, getelementptr inbounds ([20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"], [20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"]* @_ZN12_GLOBAL__N_114g_XMLNameCharsE, i64 1, i64 0)
  br i1 %1411, label %1424, label %1412

1412:                                             ; preds = %1410
  %1413 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %1407, i64 0, i32 0
  %1414 = load i16, i16* %1413, align 2
  %1415 = zext i16 %1414 to i32
  %1416 = icmp slt i32 %130, %1415
  %1417 = xor i1 %1388, true
  %1418 = or i1 %1416, %1417
  br i1 %1418, label %1423, label %1419

1419:                                             ; preds = %1412
  %1420 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %1407, i64 0, i32 2
  %1421 = load i8, i8* %1420, align 2, !range !2
  %1422 = icmp eq i8 %1421, 0
  br i1 %1422, label %1424, label %1635

1423:                                             ; preds = %1412
  br i1 %1416, label %1424, label %1635

1424:                                             ; preds = %1423, %1419, %1410
  %1425 = load i64, i64* %48, align 8
  %1426 = load i64, i64* %47, align 8
  %1427 = add i64 %1425, -1
  %1428 = add i64 %1427, %1426
  %1429 = load i32**, i32*** %45, align 8
  %1430 = lshr i64 %1428, 10
  %1431 = getelementptr inbounds i32*, i32** %1429, i64 %1430
  %1432 = load i32*, i32** %1431, align 8
  %1433 = and i64 %1428, 1023
  %1434 = getelementptr inbounds i32, i32* %1432, i64 %1433
  %1435 = load i32, i32* %1434, align 4
  br i1 %1388, label %1436, label %1443

1436:                                             ; preds = %1424
  switch i32 %1435, label %3791 [
    i32 1, label %1437
    i32 0, label %1438
  ]

1437:                                             ; preds = %1436
  switch i32 %130, label %3791 [
    i32 62, label %3785
    i32 47, label %3785
  ]

1438:                                             ; preds = %1436
  %1439 = icmp eq i32 %130, 63
  %1440 = zext i1 %1439 to i64
  %1441 = add nsw i64 %127, %1440
  %1442 = select i1 %1439, i32 8, i32 15
  br label %3785

1443:                                             ; preds = %1424
  %1444 = icmp eq i32 %1435, 0
  %1445 = icmp ne i32 %130, 61
  %1446 = and i1 %1445, %1444
  br i1 %1446, label %1447, label %1448

1447:                                             ; preds = %1443
  switch i32 %130, label %3785 [
    i32 32, label %1448
    i32 13, label %1448
    i32 10, label %1448
    i32 9, label %1448
  ]

1448:                                             ; preds = %1447, %1447, %1447, %1447, %1443
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #14
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %83, align 8, !alias.scope !72
  %1449 = sub i64 %1390, %1389
  %1450 = ashr exact i64 %1449, 2
  call void @_ZN5fxcrt10WideStringC1EPKwm(%"class.fxcrt::WideString"* nonnull %14, i32* %1386, i64 %1450) #14
  store i32 -1, i32* %66, align 8, !noalias !72
  %1451 = load i64, i64* %57, align 8, !noalias !72
  store i64 %1451, i64* %56, align 8, !noalias !72
  %1452 = load i64, i64* %58, align 8, !noalias !72
  %1453 = sub i64 %1452, %1451
  %1454 = ashr exact i64 %1453, 2
  %1455 = icmp ult i64 %1454, 128
  br i1 %1455, label %1456, label %1633

1456:                                             ; preds = %1448
  %1457 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 128, i64 4) #14
  %1458 = ptrtoint i8* %1457 to i64
  %1459 = getelementptr inbounds i8, i8* %1457, i64 512
  %1460 = ptrtoint i8* %1459 to i64
  %1461 = load i32*, i32** %59, align 8, !noalias !72
  %1462 = ptrtoint i32* %1461 to i64
  %1463 = load i32*, i32** %53, align 8, !noalias !72
  %1464 = bitcast i32* %1463 to i8*
  %1465 = icmp eq i32* %1463, %1461
  br i1 %1465, label %1627, label %1466

1466:                                             ; preds = %1456
  %1467 = bitcast i8* %1457 to i32*
  %1468 = getelementptr i32, i32* %1463, i64 -1
  %1469 = ptrtoint i32* %1468 to i64
  %1470 = sub i64 %1469, %1462
  %1471 = lshr i64 %1470, 2
  %1472 = add nuw nsw i64 %1471, 1
  %1473 = icmp ult i64 %1472, 8
  br i1 %1473, label %1571, label %1474

1474:                                             ; preds = %1466
  %1475 = getelementptr i8, i8* %1457, i64 -4
  %1476 = getelementptr i32, i32* %1463, i64 -1
  %1477 = ptrtoint i32* %1476 to i64
  %1478 = sub i64 %1477, %1462
  %1479 = lshr i64 %1478, 2
  %1480 = mul i64 %1479, -4
  %1481 = getelementptr i8, i8* %1475, i64 %1480
  %1482 = getelementptr i32, i32* %1463, i64 -1
  %1483 = sub nsw i64 0, %1479
  %1484 = getelementptr i32, i32* %1482, i64 %1483
  %1485 = bitcast i32* %1484 to i8*
  %1486 = icmp ult i8* %1481, %1464
  %1487 = icmp ugt i8* %1457, %1485
  %1488 = and i1 %1486, %1487
  br i1 %1488, label %1571, label %1489

1489:                                             ; preds = %1474
  %1490 = and i64 %1472, 9223372036854775800
  %1491 = sub nsw i64 0, %1490
  %1492 = getelementptr i32, i32* %1467, i64 %1491
  %1493 = sub nsw i64 0, %1490
  %1494 = getelementptr i32, i32* %1463, i64 %1493
  %1495 = add nsw i64 %1490, -8
  %1496 = lshr exact i64 %1495, 3
  %1497 = add nuw nsw i64 %1496, 1
  %1498 = and i64 %1497, 1
  %1499 = icmp eq i64 %1495, 0
  br i1 %1499, label %1546, label %1500

1500:                                             ; preds = %1489
  %1501 = sub nuw nsw i64 %1497, %1498
  %1502 = getelementptr i8, i8* %1457, i64 -4
  %1503 = bitcast i8* %1502 to i32*
  %1504 = getelementptr i32, i32* %1463, i64 -1
  %1505 = getelementptr i8, i8* %1457, i64 -4
  %1506 = bitcast i8* %1505 to i32*
  %1507 = getelementptr i32, i32* %1463, i64 -1
  br label %1508

1508:                                             ; preds = %1508, %1500
  %1509 = phi i64 [ 0, %1500 ], [ %1543, %1508 ]
  %1510 = phi i64 [ %1501, %1500 ], [ %1544, %1508 ]
  %1511 = sub i64 0, %1509
  %1512 = sub i64 0, %1509
  %1513 = getelementptr inbounds i32, i32* %1503, i64 %1511
  %1514 = getelementptr inbounds i32, i32* %1504, i64 %1512
  %1515 = getelementptr inbounds i32, i32* %1514, i64 -3
  %1516 = bitcast i32* %1515 to <4 x i32>*
  %1517 = load <4 x i32>, <4 x i32>* %1516, align 4, !alias.scope !75
  %1518 = getelementptr inbounds i32, i32* %1514, i64 -4
  %1519 = getelementptr inbounds i32, i32* %1518, i64 -3
  %1520 = bitcast i32* %1519 to <4 x i32>*
  %1521 = load <4 x i32>, <4 x i32>* %1520, align 4, !alias.scope !75
  %1522 = getelementptr inbounds i32, i32* %1513, i64 -3
  %1523 = bitcast i32* %1522 to <4 x i32>*
  store <4 x i32> %1517, <4 x i32>* %1523, align 4, !alias.scope !78, !noalias !75
  %1524 = getelementptr inbounds i32, i32* %1513, i64 -4
  %1525 = getelementptr inbounds i32, i32* %1524, i64 -3
  %1526 = bitcast i32* %1525 to <4 x i32>*
  store <4 x i32> %1521, <4 x i32>* %1526, align 4, !alias.scope !78, !noalias !75
  %1527 = sub nuw nsw i64 -8, %1509
  %1528 = sub nuw nsw i64 -8, %1509
  %1529 = getelementptr inbounds i32, i32* %1506, i64 %1527
  %1530 = getelementptr inbounds i32, i32* %1507, i64 %1528
  %1531 = getelementptr inbounds i32, i32* %1530, i64 -3
  %1532 = bitcast i32* %1531 to <4 x i32>*
  %1533 = load <4 x i32>, <4 x i32>* %1532, align 4, !alias.scope !75
  %1534 = getelementptr inbounds i32, i32* %1530, i64 -4
  %1535 = getelementptr inbounds i32, i32* %1534, i64 -3
  %1536 = bitcast i32* %1535 to <4 x i32>*
  %1537 = load <4 x i32>, <4 x i32>* %1536, align 4, !alias.scope !75
  %1538 = getelementptr inbounds i32, i32* %1529, i64 -3
  %1539 = bitcast i32* %1538 to <4 x i32>*
  store <4 x i32> %1533, <4 x i32>* %1539, align 4, !alias.scope !78, !noalias !75
  %1540 = getelementptr inbounds i32, i32* %1529, i64 -4
  %1541 = getelementptr inbounds i32, i32* %1540, i64 -3
  %1542 = bitcast i32* %1541 to <4 x i32>*
  store <4 x i32> %1537, <4 x i32>* %1542, align 4, !alias.scope !78, !noalias !75
  %1543 = add i64 %1509, 16
  %1544 = add i64 %1510, -2
  %1545 = icmp eq i64 %1544, 0
  br i1 %1545, label %1546, label %1508, !llvm.loop !80

1546:                                             ; preds = %1508, %1489
  %1547 = phi i64 [ 0, %1489 ], [ %1543, %1508 ]
  %1548 = icmp eq i64 %1498, 0
  br i1 %1548, label %1569, label %1549

1549:                                             ; preds = %1546
  %1550 = sub i64 0, %1547
  %1551 = getelementptr i8, i8* %1457, i64 -4
  %1552 = bitcast i8* %1551 to i32*
  %1553 = sub i64 0, %1547
  %1554 = getelementptr i32, i32* %1463, i64 -1
  %1555 = getelementptr inbounds i32, i32* %1552, i64 %1550
  %1556 = getelementptr inbounds i32, i32* %1554, i64 %1553
  %1557 = getelementptr inbounds i32, i32* %1556, i64 -3
  %1558 = bitcast i32* %1557 to <4 x i32>*
  %1559 = load <4 x i32>, <4 x i32>* %1558, align 4, !alias.scope !75
  %1560 = getelementptr inbounds i32, i32* %1556, i64 -4
  %1561 = getelementptr inbounds i32, i32* %1560, i64 -3
  %1562 = bitcast i32* %1561 to <4 x i32>*
  %1563 = load <4 x i32>, <4 x i32>* %1562, align 4, !alias.scope !75
  %1564 = getelementptr inbounds i32, i32* %1555, i64 -3
  %1565 = bitcast i32* %1564 to <4 x i32>*
  store <4 x i32> %1559, <4 x i32>* %1565, align 4, !alias.scope !78, !noalias !75
  %1566 = getelementptr inbounds i32, i32* %1555, i64 -4
  %1567 = getelementptr inbounds i32, i32* %1566, i64 -3
  %1568 = bitcast i32* %1567 to <4 x i32>*
  store <4 x i32> %1563, <4 x i32>* %1568, align 4, !alias.scope !78, !noalias !75
  br label %1569

1569:                                             ; preds = %1546, %1549
  %1570 = icmp eq i64 %1472, %1490
  br i1 %1570, label %1623, label %1571

1571:                                             ; preds = %1569, %1474, %1466
  %1572 = phi i32* [ %1467, %1474 ], [ %1467, %1466 ], [ %1492, %1569 ]
  %1573 = phi i32* [ %1463, %1474 ], [ %1463, %1466 ], [ %1494, %1569 ]
  %1574 = getelementptr i32, i32* %1573, i64 -1
  %1575 = ptrtoint i32* %1574 to i64
  %1576 = sub i64 %1575, %1462
  %1577 = lshr i64 %1576, 2
  %1578 = add nuw nsw i64 %1577, 1
  %1579 = and i64 %1578, 7
  %1580 = icmp eq i64 %1579, 0
  br i1 %1580, label %1590, label %1581

1581:                                             ; preds = %1571, %1581
  %1582 = phi i32* [ %1585, %1581 ], [ %1572, %1571 ]
  %1583 = phi i32* [ %1586, %1581 ], [ %1573, %1571 ]
  %1584 = phi i64 [ %1588, %1581 ], [ %1579, %1571 ]
  %1585 = getelementptr inbounds i32, i32* %1582, i64 -1
  %1586 = getelementptr inbounds i32, i32* %1583, i64 -1
  %1587 = load i32, i32* %1586, align 4
  store i32 %1587, i32* %1585, align 4
  %1588 = add i64 %1584, -1
  %1589 = icmp eq i64 %1588, 0
  br i1 %1589, label %1590, label %1581, !llvm.loop !81

1590:                                             ; preds = %1581, %1571
  %1591 = phi i32* [ undef, %1571 ], [ %1585, %1581 ]
  %1592 = phi i32* [ %1572, %1571 ], [ %1585, %1581 ]
  %1593 = phi i32* [ %1573, %1571 ], [ %1586, %1581 ]
  %1594 = icmp ult i64 %1576, 28
  br i1 %1594, label %1623, label %1595

1595:                                             ; preds = %1590, %1595
  %1596 = phi i32* [ %1619, %1595 ], [ %1592, %1590 ]
  %1597 = phi i32* [ %1620, %1595 ], [ %1593, %1590 ]
  %1598 = getelementptr inbounds i32, i32* %1596, i64 -1
  %1599 = getelementptr inbounds i32, i32* %1597, i64 -1
  %1600 = load i32, i32* %1599, align 4
  store i32 %1600, i32* %1598, align 4
  %1601 = getelementptr inbounds i32, i32* %1596, i64 -2
  %1602 = getelementptr inbounds i32, i32* %1597, i64 -2
  %1603 = load i32, i32* %1602, align 4
  store i32 %1603, i32* %1601, align 4
  %1604 = getelementptr inbounds i32, i32* %1596, i64 -3
  %1605 = getelementptr inbounds i32, i32* %1597, i64 -3
  %1606 = load i32, i32* %1605, align 4
  store i32 %1606, i32* %1604, align 4
  %1607 = getelementptr inbounds i32, i32* %1596, i64 -4
  %1608 = getelementptr inbounds i32, i32* %1597, i64 -4
  %1609 = load i32, i32* %1608, align 4
  store i32 %1609, i32* %1607, align 4
  %1610 = getelementptr inbounds i32, i32* %1596, i64 -5
  %1611 = getelementptr inbounds i32, i32* %1597, i64 -5
  %1612 = load i32, i32* %1611, align 4
  store i32 %1612, i32* %1610, align 4
  %1613 = getelementptr inbounds i32, i32* %1596, i64 -6
  %1614 = getelementptr inbounds i32, i32* %1597, i64 -6
  %1615 = load i32, i32* %1614, align 4
  store i32 %1615, i32* %1613, align 4
  %1616 = getelementptr inbounds i32, i32* %1596, i64 -7
  %1617 = getelementptr inbounds i32, i32* %1597, i64 -7
  %1618 = load i32, i32* %1617, align 4
  store i32 %1618, i32* %1616, align 4
  %1619 = getelementptr inbounds i32, i32* %1596, i64 -8
  %1620 = getelementptr inbounds i32, i32* %1597, i64 -8
  %1621 = load i32, i32* %1620, align 4
  store i32 %1621, i32* %1619, align 4
  %1622 = icmp eq i32* %1620, %1461
  br i1 %1622, label %1623, label %1595, !llvm.loop !82

1623:                                             ; preds = %1590, %1595, %1569
  %1624 = phi i32* [ %1492, %1569 ], [ %1591, %1590 ], [ %1619, %1595 ]
  %1625 = ptrtoint i32* %1624 to i64
  %1626 = load i64, i64* %57, align 8, !noalias !72
  br label %1627

1627:                                             ; preds = %1456, %1623
  %1628 = phi i64 [ %1625, %1623 ], [ %1458, %1456 ]
  %1629 = phi i64 [ %1626, %1623 ], [ %1462, %1456 ]
  store i64 %1628, i64* %57, align 8, !noalias !72
  store i64 %1458, i64* %56, align 8, !noalias !72
  store i64 %1460, i64* %58, align 8, !noalias !72
  %1630 = icmp eq i64 %1629, 0
  br i1 %1630, label %1633, label %1631

1631:                                             ; preds = %1627
  %1632 = inttoptr i64 %1629 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %1632) #14
  br label %1633

1633:                                             ; preds = %1448, %1627, %1631
  %1634 = call dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringaSEOS0_(%"class.fxcrt::WideString"* nonnull %10, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %14) #14
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %14) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %82) #14
  br label %3785

1635:                                             ; preds = %1423, %1419
  %1636 = load i32*, i32** %55, align 8
  %1637 = icmp eq i32* %1387, %1636
  %1638 = ptrtoint i32* %1636 to i64
  br i1 %1637, label %1642, label %1639

1639:                                             ; preds = %1635
  store i32 %130, i32* %1387, align 4
  %1640 = getelementptr inbounds i32, i32* %1387, i64 1
  %1641 = ptrtoint i32* %1640 to i64
  store i64 %1641, i64* %56, align 8
  br label %1836

1642:                                             ; preds = %1635
  %1643 = sub i64 %1390, %1389
  %1644 = ashr exact i64 %1643, 2
  %1645 = add nsw i64 %1644, 1
  %1646 = icmp ugt i64 %1645, 4611686018427387903
  br i1 %1646, label %1647, label %1649

1647:                                             ; preds = %1642
  %1648 = bitcast %"class.std::__1::vector"* %54 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1648) #15
  unreachable

1649:                                             ; preds = %1642
  %1650 = sub i64 %1638, %1389
  %1651 = ashr exact i64 %1650, 2
  %1652 = icmp ult i64 %1651, 2305843009213693951
  br i1 %1652, label %1653, label %1658

1653:                                             ; preds = %1649
  %1654 = ashr exact i64 %1650, 1
  %1655 = icmp ult i64 %1654, %1645
  %1656 = select i1 %1655, i64 %1645, i64 %1654
  %1657 = icmp eq i64 %1656, 0
  br i1 %1657, label %1662, label %1658

1658:                                             ; preds = %1653, %1649
  %1659 = phi i64 [ %1656, %1653 ], [ 4611686018427387903, %1649 ]
  %1660 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %1659, i64 4) #14
  %1661 = bitcast i8* %1660 to i32*
  br label %1662

1662:                                             ; preds = %1658, %1653
  %1663 = phi i64 [ %1659, %1658 ], [ 0, %1653 ]
  %1664 = phi i32* [ %1661, %1658 ], [ null, %1653 ]
  %1665 = getelementptr inbounds i32, i32* %1664, i64 %1644
  %1666 = getelementptr inbounds i32, i32* %1664, i64 %1663
  %1667 = ptrtoint i32* %1666 to i64
  store i32 %130, i32* %1665, align 4
  %1668 = getelementptr inbounds i32, i32* %1665, i64 1
  %1669 = ptrtoint i32* %1668 to i64
  %1670 = load i32*, i32** %59, align 8
  %1671 = ptrtoint i32* %1670 to i64
  %1672 = load i32*, i32** %53, align 8
  %1673 = icmp eq i32* %1672, %1670
  br i1 %1673, label %1829, label %1674

1674:                                             ; preds = %1662
  %1675 = getelementptr i32, i32* %1672, i64 -1
  %1676 = ptrtoint i32* %1675 to i64
  %1677 = sub i64 %1676, %1671
  %1678 = lshr i64 %1677, 2
  %1679 = add nuw nsw i64 %1678, 1
  %1680 = icmp ult i64 %1679, 8
  br i1 %1680, label %1774, label %1681

1681:                                             ; preds = %1674
  %1682 = getelementptr i32, i32* %1664, i64 -1
  %1683 = getelementptr i32, i32* %1672, i64 -1
  %1684 = ptrtoint i32* %1683 to i64
  %1685 = sub i64 %1684, %1671
  %1686 = lshr i64 %1685, 2
  %1687 = sub nsw i64 %1644, %1686
  %1688 = getelementptr i32, i32* %1682, i64 %1687
  %1689 = getelementptr i32, i32* %1672, i64 -1
  %1690 = sub nsw i64 0, %1686
  %1691 = getelementptr i32, i32* %1689, i64 %1690
  %1692 = icmp ult i32* %1688, %1672
  %1693 = icmp ult i32* %1691, %1665
  %1694 = and i1 %1692, %1693
  br i1 %1694, label %1774, label %1695

1695:                                             ; preds = %1681
  %1696 = and i64 %1679, 9223372036854775800
  %1697 = sub nsw i64 0, %1696
  %1698 = getelementptr i32, i32* %1665, i64 %1697
  %1699 = sub nsw i64 0, %1696
  %1700 = getelementptr i32, i32* %1672, i64 %1699
  %1701 = add nsw i64 %1696, -8
  %1702 = lshr exact i64 %1701, 3
  %1703 = add nuw nsw i64 %1702, 1
  %1704 = and i64 %1703, 1
  %1705 = icmp eq i64 %1701, 0
  br i1 %1705, label %1750, label %1706

1706:                                             ; preds = %1695
  %1707 = sub nuw nsw i64 %1703, %1704
  %1708 = getelementptr i32, i32* %1665, i64 -1
  %1709 = getelementptr i32, i32* %1672, i64 -1
  %1710 = getelementptr i32, i32* %1665, i64 -1
  %1711 = getelementptr i32, i32* %1672, i64 -1
  br label %1712

1712:                                             ; preds = %1712, %1706
  %1713 = phi i64 [ 0, %1706 ], [ %1747, %1712 ]
  %1714 = phi i64 [ %1707, %1706 ], [ %1748, %1712 ]
  %1715 = sub i64 0, %1713
  %1716 = sub i64 0, %1713
  %1717 = getelementptr inbounds i32, i32* %1708, i64 %1715
  %1718 = getelementptr inbounds i32, i32* %1709, i64 %1716
  %1719 = getelementptr inbounds i32, i32* %1718, i64 -3
  %1720 = bitcast i32* %1719 to <4 x i32>*
  %1721 = load <4 x i32>, <4 x i32>* %1720, align 4, !alias.scope !83
  %1722 = getelementptr inbounds i32, i32* %1718, i64 -4
  %1723 = getelementptr inbounds i32, i32* %1722, i64 -3
  %1724 = bitcast i32* %1723 to <4 x i32>*
  %1725 = load <4 x i32>, <4 x i32>* %1724, align 4, !alias.scope !83
  %1726 = getelementptr inbounds i32, i32* %1717, i64 -3
  %1727 = bitcast i32* %1726 to <4 x i32>*
  store <4 x i32> %1721, <4 x i32>* %1727, align 4, !alias.scope !86, !noalias !83
  %1728 = getelementptr inbounds i32, i32* %1717, i64 -4
  %1729 = getelementptr inbounds i32, i32* %1728, i64 -3
  %1730 = bitcast i32* %1729 to <4 x i32>*
  store <4 x i32> %1725, <4 x i32>* %1730, align 4, !alias.scope !86, !noalias !83
  %1731 = sub nuw nsw i64 -8, %1713
  %1732 = sub nuw nsw i64 -8, %1713
  %1733 = getelementptr inbounds i32, i32* %1710, i64 %1731
  %1734 = getelementptr inbounds i32, i32* %1711, i64 %1732
  %1735 = getelementptr inbounds i32, i32* %1734, i64 -3
  %1736 = bitcast i32* %1735 to <4 x i32>*
  %1737 = load <4 x i32>, <4 x i32>* %1736, align 4, !alias.scope !83
  %1738 = getelementptr inbounds i32, i32* %1734, i64 -4
  %1739 = getelementptr inbounds i32, i32* %1738, i64 -3
  %1740 = bitcast i32* %1739 to <4 x i32>*
  %1741 = load <4 x i32>, <4 x i32>* %1740, align 4, !alias.scope !83
  %1742 = getelementptr inbounds i32, i32* %1733, i64 -3
  %1743 = bitcast i32* %1742 to <4 x i32>*
  store <4 x i32> %1737, <4 x i32>* %1743, align 4, !alias.scope !86, !noalias !83
  %1744 = getelementptr inbounds i32, i32* %1733, i64 -4
  %1745 = getelementptr inbounds i32, i32* %1744, i64 -3
  %1746 = bitcast i32* %1745 to <4 x i32>*
  store <4 x i32> %1741, <4 x i32>* %1746, align 4, !alias.scope !86, !noalias !83
  %1747 = add i64 %1713, 16
  %1748 = add i64 %1714, -2
  %1749 = icmp eq i64 %1748, 0
  br i1 %1749, label %1750, label %1712, !llvm.loop !88

1750:                                             ; preds = %1712, %1695
  %1751 = phi i64 [ 0, %1695 ], [ %1747, %1712 ]
  %1752 = icmp eq i64 %1704, 0
  br i1 %1752, label %1772, label %1753

1753:                                             ; preds = %1750
  %1754 = sub i64 0, %1751
  %1755 = getelementptr i32, i32* %1665, i64 -1
  %1756 = sub i64 0, %1751
  %1757 = getelementptr i32, i32* %1672, i64 -1
  %1758 = getelementptr inbounds i32, i32* %1755, i64 %1754
  %1759 = getelementptr inbounds i32, i32* %1757, i64 %1756
  %1760 = getelementptr inbounds i32, i32* %1759, i64 -3
  %1761 = bitcast i32* %1760 to <4 x i32>*
  %1762 = load <4 x i32>, <4 x i32>* %1761, align 4, !alias.scope !83
  %1763 = getelementptr inbounds i32, i32* %1759, i64 -4
  %1764 = getelementptr inbounds i32, i32* %1763, i64 -3
  %1765 = bitcast i32* %1764 to <4 x i32>*
  %1766 = load <4 x i32>, <4 x i32>* %1765, align 4, !alias.scope !83
  %1767 = getelementptr inbounds i32, i32* %1758, i64 -3
  %1768 = bitcast i32* %1767 to <4 x i32>*
  store <4 x i32> %1762, <4 x i32>* %1768, align 4, !alias.scope !86, !noalias !83
  %1769 = getelementptr inbounds i32, i32* %1758, i64 -4
  %1770 = getelementptr inbounds i32, i32* %1769, i64 -3
  %1771 = bitcast i32* %1770 to <4 x i32>*
  store <4 x i32> %1766, <4 x i32>* %1771, align 4, !alias.scope !86, !noalias !83
  br label %1772

1772:                                             ; preds = %1750, %1753
  %1773 = icmp eq i64 %1679, %1696
  br i1 %1773, label %1826, label %1774

1774:                                             ; preds = %1772, %1681, %1674
  %1775 = phi i32* [ %1665, %1681 ], [ %1665, %1674 ], [ %1698, %1772 ]
  %1776 = phi i32* [ %1672, %1681 ], [ %1672, %1674 ], [ %1700, %1772 ]
  %1777 = getelementptr i32, i32* %1776, i64 -1
  %1778 = ptrtoint i32* %1777 to i64
  %1779 = sub i64 %1778, %1671
  %1780 = lshr i64 %1779, 2
  %1781 = add nuw nsw i64 %1780, 1
  %1782 = and i64 %1781, 7
  %1783 = icmp eq i64 %1782, 0
  br i1 %1783, label %1793, label %1784

1784:                                             ; preds = %1774, %1784
  %1785 = phi i32* [ %1788, %1784 ], [ %1775, %1774 ]
  %1786 = phi i32* [ %1789, %1784 ], [ %1776, %1774 ]
  %1787 = phi i64 [ %1791, %1784 ], [ %1782, %1774 ]
  %1788 = getelementptr inbounds i32, i32* %1785, i64 -1
  %1789 = getelementptr inbounds i32, i32* %1786, i64 -1
  %1790 = load i32, i32* %1789, align 4
  store i32 %1790, i32* %1788, align 4
  %1791 = add i64 %1787, -1
  %1792 = icmp eq i64 %1791, 0
  br i1 %1792, label %1793, label %1784, !llvm.loop !89

1793:                                             ; preds = %1784, %1774
  %1794 = phi i32* [ undef, %1774 ], [ %1788, %1784 ]
  %1795 = phi i32* [ %1775, %1774 ], [ %1788, %1784 ]
  %1796 = phi i32* [ %1776, %1774 ], [ %1789, %1784 ]
  %1797 = icmp ult i64 %1779, 28
  br i1 %1797, label %1826, label %1798

1798:                                             ; preds = %1793, %1798
  %1799 = phi i32* [ %1822, %1798 ], [ %1795, %1793 ]
  %1800 = phi i32* [ %1823, %1798 ], [ %1796, %1793 ]
  %1801 = getelementptr inbounds i32, i32* %1799, i64 -1
  %1802 = getelementptr inbounds i32, i32* %1800, i64 -1
  %1803 = load i32, i32* %1802, align 4
  store i32 %1803, i32* %1801, align 4
  %1804 = getelementptr inbounds i32, i32* %1799, i64 -2
  %1805 = getelementptr inbounds i32, i32* %1800, i64 -2
  %1806 = load i32, i32* %1805, align 4
  store i32 %1806, i32* %1804, align 4
  %1807 = getelementptr inbounds i32, i32* %1799, i64 -3
  %1808 = getelementptr inbounds i32, i32* %1800, i64 -3
  %1809 = load i32, i32* %1808, align 4
  store i32 %1809, i32* %1807, align 4
  %1810 = getelementptr inbounds i32, i32* %1799, i64 -4
  %1811 = getelementptr inbounds i32, i32* %1800, i64 -4
  %1812 = load i32, i32* %1811, align 4
  store i32 %1812, i32* %1810, align 4
  %1813 = getelementptr inbounds i32, i32* %1799, i64 -5
  %1814 = getelementptr inbounds i32, i32* %1800, i64 -5
  %1815 = load i32, i32* %1814, align 4
  store i32 %1815, i32* %1813, align 4
  %1816 = getelementptr inbounds i32, i32* %1799, i64 -6
  %1817 = getelementptr inbounds i32, i32* %1800, i64 -6
  %1818 = load i32, i32* %1817, align 4
  store i32 %1818, i32* %1816, align 4
  %1819 = getelementptr inbounds i32, i32* %1799, i64 -7
  %1820 = getelementptr inbounds i32, i32* %1800, i64 -7
  %1821 = load i32, i32* %1820, align 4
  store i32 %1821, i32* %1819, align 4
  %1822 = getelementptr inbounds i32, i32* %1799, i64 -8
  %1823 = getelementptr inbounds i32, i32* %1800, i64 -8
  %1824 = load i32, i32* %1823, align 4
  store i32 %1824, i32* %1822, align 4
  %1825 = icmp eq i32* %1823, %1670
  br i1 %1825, label %1826, label %1798, !llvm.loop !90

1826:                                             ; preds = %1793, %1798, %1772
  %1827 = phi i32* [ %1698, %1772 ], [ %1794, %1793 ], [ %1822, %1798 ]
  %1828 = load i64, i64* %57, align 8
  br label %1829

1829:                                             ; preds = %1662, %1826
  %1830 = phi i32* [ %1827, %1826 ], [ %1665, %1662 ]
  %1831 = phi i64 [ %1828, %1826 ], [ %1671, %1662 ]
  %1832 = ptrtoint i32* %1830 to i64
  store i64 %1832, i64* %57, align 8
  store i64 %1669, i64* %56, align 8
  store i64 %1667, i64* %58, align 8
  %1833 = icmp eq i64 %1831, 0
  br i1 %1833, label %1836, label %1834

1834:                                             ; preds = %1829
  %1835 = inttoptr i64 %1831 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %1835) #14
  br label %1836

1836:                                             ; preds = %1639, %1829, %1834
  %1837 = add nsw i64 %127, 1
  br label %3785

1838:                                             ; preds = %123
  switch i32 %130, label %1841 [
    i32 32, label %1839
    i32 13, label %1839
    i32 10, label %1839
    i32 9, label %1839
    i32 61, label %1854
  ]

1839:                                             ; preds = %1838, %1838, %1838, %1838
  %1840 = add nsw i64 %127, 1
  br label %3785

1841:                                             ; preds = %1838
  %1842 = load i64, i64* %48, align 8
  %1843 = load i64, i64* %47, align 8
  %1844 = add i64 %1842, -1
  %1845 = add i64 %1844, %1843
  %1846 = load i32**, i32*** %45, align 8
  %1847 = lshr i64 %1845, 10
  %1848 = getelementptr inbounds i32*, i32** %1846, i64 %1847
  %1849 = load i32*, i32** %1848, align 8
  %1850 = and i64 %1845, 1023
  %1851 = getelementptr inbounds i32, i32* %1849, i64 %1850
  %1852 = load i32, i32* %1851, align 4
  %1853 = icmp eq i32 %1852, 0
  br i1 %1853, label %3785, label %3791

1854:                                             ; preds = %1838
  %1855 = add nsw i64 %127, 1
  br label %3785

1856:                                             ; preds = %123
  switch i32 %130, label %3791 [
    i32 32, label %1857
    i32 13, label %1857
    i32 10, label %1857
    i32 9, label %1857
    i32 39, label %1859
    i32 34, label %1859
  ]

1857:                                             ; preds = %1856, %1856, %1856, %1856
  %1858 = add nsw i64 %127, 1
  br label %3785

1859:                                             ; preds = %1856, %1856
  %1860 = add nsw i64 %127, 1
  br label %3785

1861:                                             ; preds = %123
  %1862 = icmp eq i32 %130, %125
  br i1 %1862, label %1863, label %2071

1863:                                             ; preds = %1861
  %1864 = load i32, i32* %66, align 8
  %1865 = icmp sgt i32 %1864, -1
  br i1 %1865, label %3791, label %1866

1866:                                             ; preds = %1863
  %1867 = add nsw i64 %127, 1
  %1868 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %76, align 8
  %1869 = icmp eq %class.CFX_XMLNode* %1868, null
  br i1 %1869, label %2067, label %1870

1870:                                             ; preds = %1866
  %1871 = bitcast %class.CFX_XMLNode* %1868 to i32 (%class.CFX_XMLNode*)***
  %1872 = load i32 (%class.CFX_XMLNode*)**, i32 (%class.CFX_XMLNode*)*** %1871, align 8
  %1873 = getelementptr inbounds i32 (%class.CFX_XMLNode*)*, i32 (%class.CFX_XMLNode*)** %1872, i64 2
  %1874 = load i32 (%class.CFX_XMLNode*)*, i32 (%class.CFX_XMLNode*)** %1873, align 8
  %1875 = call i32 %1874(%class.CFX_XMLNode* nonnull %1868) #14
  %1876 = icmp eq i32 %1875, 1
  %1877 = bitcast %class.CFX_XMLNode* %1868 to %class.CFX_XMLElement*
  br i1 %1876, label %1878, label %2067

1878:                                             ; preds = %1870
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %80) #14
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %81, align 8, !alias.scope !91
  %1879 = load i32*, i32** %59, align 8, !noalias !91
  %1880 = load i64, i64* %56, align 8, !noalias !91
  %1881 = ptrtoint i32* %1879 to i64
  %1882 = sub i64 %1880, %1881
  %1883 = ashr exact i64 %1882, 2
  call void @_ZN5fxcrt10WideStringC1EPKwm(%"class.fxcrt::WideString"* nonnull %15, i32* %1879, i64 %1883) #14
  store i32 -1, i32* %66, align 8, !noalias !91
  %1884 = load i64, i64* %57, align 8, !noalias !91
  store i64 %1884, i64* %56, align 8, !noalias !91
  %1885 = load i64, i64* %58, align 8, !noalias !91
  %1886 = sub i64 %1885, %1884
  %1887 = ashr exact i64 %1886, 2
  %1888 = icmp ult i64 %1887, 128
  br i1 %1888, label %1889, label %2066

1889:                                             ; preds = %1878
  %1890 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 128, i64 4) #14
  %1891 = ptrtoint i8* %1890 to i64
  %1892 = getelementptr inbounds i8, i8* %1890, i64 512
  %1893 = ptrtoint i8* %1892 to i64
  %1894 = load i32*, i32** %59, align 8, !noalias !91
  %1895 = ptrtoint i32* %1894 to i64
  %1896 = load i32*, i32** %53, align 8, !noalias !91
  %1897 = bitcast i32* %1896 to i8*
  %1898 = icmp eq i32* %1896, %1894
  br i1 %1898, label %2060, label %1899

1899:                                             ; preds = %1889
  %1900 = bitcast i8* %1890 to i32*
  %1901 = getelementptr i32, i32* %1896, i64 -1
  %1902 = ptrtoint i32* %1901 to i64
  %1903 = sub i64 %1902, %1895
  %1904 = lshr i64 %1903, 2
  %1905 = add nuw nsw i64 %1904, 1
  %1906 = icmp ult i64 %1905, 8
  br i1 %1906, label %2004, label %1907

1907:                                             ; preds = %1899
  %1908 = getelementptr i8, i8* %1890, i64 -4
  %1909 = getelementptr i32, i32* %1896, i64 -1
  %1910 = ptrtoint i32* %1909 to i64
  %1911 = sub i64 %1910, %1895
  %1912 = lshr i64 %1911, 2
  %1913 = mul i64 %1912, -4
  %1914 = getelementptr i8, i8* %1908, i64 %1913
  %1915 = getelementptr i32, i32* %1896, i64 -1
  %1916 = sub nsw i64 0, %1912
  %1917 = getelementptr i32, i32* %1915, i64 %1916
  %1918 = bitcast i32* %1917 to i8*
  %1919 = icmp ult i8* %1914, %1897
  %1920 = icmp ugt i8* %1890, %1918
  %1921 = and i1 %1919, %1920
  br i1 %1921, label %2004, label %1922

1922:                                             ; preds = %1907
  %1923 = and i64 %1905, 9223372036854775800
  %1924 = sub nsw i64 0, %1923
  %1925 = getelementptr i32, i32* %1900, i64 %1924
  %1926 = sub nsw i64 0, %1923
  %1927 = getelementptr i32, i32* %1896, i64 %1926
  %1928 = add nsw i64 %1923, -8
  %1929 = lshr exact i64 %1928, 3
  %1930 = add nuw nsw i64 %1929, 1
  %1931 = and i64 %1930, 1
  %1932 = icmp eq i64 %1928, 0
  br i1 %1932, label %1979, label %1933

1933:                                             ; preds = %1922
  %1934 = sub nuw nsw i64 %1930, %1931
  %1935 = getelementptr i8, i8* %1890, i64 -4
  %1936 = bitcast i8* %1935 to i32*
  %1937 = getelementptr i32, i32* %1896, i64 -1
  %1938 = getelementptr i8, i8* %1890, i64 -4
  %1939 = bitcast i8* %1938 to i32*
  %1940 = getelementptr i32, i32* %1896, i64 -1
  br label %1941

1941:                                             ; preds = %1941, %1933
  %1942 = phi i64 [ 0, %1933 ], [ %1976, %1941 ]
  %1943 = phi i64 [ %1934, %1933 ], [ %1977, %1941 ]
  %1944 = sub i64 0, %1942
  %1945 = sub i64 0, %1942
  %1946 = getelementptr inbounds i32, i32* %1936, i64 %1944
  %1947 = getelementptr inbounds i32, i32* %1937, i64 %1945
  %1948 = getelementptr inbounds i32, i32* %1947, i64 -3
  %1949 = bitcast i32* %1948 to <4 x i32>*
  %1950 = load <4 x i32>, <4 x i32>* %1949, align 4, !alias.scope !94
  %1951 = getelementptr inbounds i32, i32* %1947, i64 -4
  %1952 = getelementptr inbounds i32, i32* %1951, i64 -3
  %1953 = bitcast i32* %1952 to <4 x i32>*
  %1954 = load <4 x i32>, <4 x i32>* %1953, align 4, !alias.scope !94
  %1955 = getelementptr inbounds i32, i32* %1946, i64 -3
  %1956 = bitcast i32* %1955 to <4 x i32>*
  store <4 x i32> %1950, <4 x i32>* %1956, align 4, !alias.scope !97, !noalias !94
  %1957 = getelementptr inbounds i32, i32* %1946, i64 -4
  %1958 = getelementptr inbounds i32, i32* %1957, i64 -3
  %1959 = bitcast i32* %1958 to <4 x i32>*
  store <4 x i32> %1954, <4 x i32>* %1959, align 4, !alias.scope !97, !noalias !94
  %1960 = sub nuw nsw i64 -8, %1942
  %1961 = sub nuw nsw i64 -8, %1942
  %1962 = getelementptr inbounds i32, i32* %1939, i64 %1960
  %1963 = getelementptr inbounds i32, i32* %1940, i64 %1961
  %1964 = getelementptr inbounds i32, i32* %1963, i64 -3
  %1965 = bitcast i32* %1964 to <4 x i32>*
  %1966 = load <4 x i32>, <4 x i32>* %1965, align 4, !alias.scope !94
  %1967 = getelementptr inbounds i32, i32* %1963, i64 -4
  %1968 = getelementptr inbounds i32, i32* %1967, i64 -3
  %1969 = bitcast i32* %1968 to <4 x i32>*
  %1970 = load <4 x i32>, <4 x i32>* %1969, align 4, !alias.scope !94
  %1971 = getelementptr inbounds i32, i32* %1962, i64 -3
  %1972 = bitcast i32* %1971 to <4 x i32>*
  store <4 x i32> %1966, <4 x i32>* %1972, align 4, !alias.scope !97, !noalias !94
  %1973 = getelementptr inbounds i32, i32* %1962, i64 -4
  %1974 = getelementptr inbounds i32, i32* %1973, i64 -3
  %1975 = bitcast i32* %1974 to <4 x i32>*
  store <4 x i32> %1970, <4 x i32>* %1975, align 4, !alias.scope !97, !noalias !94
  %1976 = add i64 %1942, 16
  %1977 = add i64 %1943, -2
  %1978 = icmp eq i64 %1977, 0
  br i1 %1978, label %1979, label %1941, !llvm.loop !99

1979:                                             ; preds = %1941, %1922
  %1980 = phi i64 [ 0, %1922 ], [ %1976, %1941 ]
  %1981 = icmp eq i64 %1931, 0
  br i1 %1981, label %2002, label %1982

1982:                                             ; preds = %1979
  %1983 = sub i64 0, %1980
  %1984 = getelementptr i8, i8* %1890, i64 -4
  %1985 = bitcast i8* %1984 to i32*
  %1986 = sub i64 0, %1980
  %1987 = getelementptr i32, i32* %1896, i64 -1
  %1988 = getelementptr inbounds i32, i32* %1985, i64 %1983
  %1989 = getelementptr inbounds i32, i32* %1987, i64 %1986
  %1990 = getelementptr inbounds i32, i32* %1989, i64 -3
  %1991 = bitcast i32* %1990 to <4 x i32>*
  %1992 = load <4 x i32>, <4 x i32>* %1991, align 4, !alias.scope !94
  %1993 = getelementptr inbounds i32, i32* %1989, i64 -4
  %1994 = getelementptr inbounds i32, i32* %1993, i64 -3
  %1995 = bitcast i32* %1994 to <4 x i32>*
  %1996 = load <4 x i32>, <4 x i32>* %1995, align 4, !alias.scope !94
  %1997 = getelementptr inbounds i32, i32* %1988, i64 -3
  %1998 = bitcast i32* %1997 to <4 x i32>*
  store <4 x i32> %1992, <4 x i32>* %1998, align 4, !alias.scope !97, !noalias !94
  %1999 = getelementptr inbounds i32, i32* %1988, i64 -4
  %2000 = getelementptr inbounds i32, i32* %1999, i64 -3
  %2001 = bitcast i32* %2000 to <4 x i32>*
  store <4 x i32> %1996, <4 x i32>* %2001, align 4, !alias.scope !97, !noalias !94
  br label %2002

2002:                                             ; preds = %1979, %1982
  %2003 = icmp eq i64 %1905, %1923
  br i1 %2003, label %2056, label %2004

2004:                                             ; preds = %2002, %1907, %1899
  %2005 = phi i32* [ %1900, %1907 ], [ %1900, %1899 ], [ %1925, %2002 ]
  %2006 = phi i32* [ %1896, %1907 ], [ %1896, %1899 ], [ %1927, %2002 ]
  %2007 = getelementptr i32, i32* %2006, i64 -1
  %2008 = ptrtoint i32* %2007 to i64
  %2009 = sub i64 %2008, %1895
  %2010 = lshr i64 %2009, 2
  %2011 = add nuw nsw i64 %2010, 1
  %2012 = and i64 %2011, 7
  %2013 = icmp eq i64 %2012, 0
  br i1 %2013, label %2023, label %2014

2014:                                             ; preds = %2004, %2014
  %2015 = phi i32* [ %2018, %2014 ], [ %2005, %2004 ]
  %2016 = phi i32* [ %2019, %2014 ], [ %2006, %2004 ]
  %2017 = phi i64 [ %2021, %2014 ], [ %2012, %2004 ]
  %2018 = getelementptr inbounds i32, i32* %2015, i64 -1
  %2019 = getelementptr inbounds i32, i32* %2016, i64 -1
  %2020 = load i32, i32* %2019, align 4
  store i32 %2020, i32* %2018, align 4
  %2021 = add i64 %2017, -1
  %2022 = icmp eq i64 %2021, 0
  br i1 %2022, label %2023, label %2014, !llvm.loop !100

2023:                                             ; preds = %2014, %2004
  %2024 = phi i32* [ undef, %2004 ], [ %2018, %2014 ]
  %2025 = phi i32* [ %2005, %2004 ], [ %2018, %2014 ]
  %2026 = phi i32* [ %2006, %2004 ], [ %2019, %2014 ]
  %2027 = icmp ult i64 %2009, 28
  br i1 %2027, label %2056, label %2028

2028:                                             ; preds = %2023, %2028
  %2029 = phi i32* [ %2052, %2028 ], [ %2025, %2023 ]
  %2030 = phi i32* [ %2053, %2028 ], [ %2026, %2023 ]
  %2031 = getelementptr inbounds i32, i32* %2029, i64 -1
  %2032 = getelementptr inbounds i32, i32* %2030, i64 -1
  %2033 = load i32, i32* %2032, align 4
  store i32 %2033, i32* %2031, align 4
  %2034 = getelementptr inbounds i32, i32* %2029, i64 -2
  %2035 = getelementptr inbounds i32, i32* %2030, i64 -2
  %2036 = load i32, i32* %2035, align 4
  store i32 %2036, i32* %2034, align 4
  %2037 = getelementptr inbounds i32, i32* %2029, i64 -3
  %2038 = getelementptr inbounds i32, i32* %2030, i64 -3
  %2039 = load i32, i32* %2038, align 4
  store i32 %2039, i32* %2037, align 4
  %2040 = getelementptr inbounds i32, i32* %2029, i64 -4
  %2041 = getelementptr inbounds i32, i32* %2030, i64 -4
  %2042 = load i32, i32* %2041, align 4
  store i32 %2042, i32* %2040, align 4
  %2043 = getelementptr inbounds i32, i32* %2029, i64 -5
  %2044 = getelementptr inbounds i32, i32* %2030, i64 -5
  %2045 = load i32, i32* %2044, align 4
  store i32 %2045, i32* %2043, align 4
  %2046 = getelementptr inbounds i32, i32* %2029, i64 -6
  %2047 = getelementptr inbounds i32, i32* %2030, i64 -6
  %2048 = load i32, i32* %2047, align 4
  store i32 %2048, i32* %2046, align 4
  %2049 = getelementptr inbounds i32, i32* %2029, i64 -7
  %2050 = getelementptr inbounds i32, i32* %2030, i64 -7
  %2051 = load i32, i32* %2050, align 4
  store i32 %2051, i32* %2049, align 4
  %2052 = getelementptr inbounds i32, i32* %2029, i64 -8
  %2053 = getelementptr inbounds i32, i32* %2030, i64 -8
  %2054 = load i32, i32* %2053, align 4
  store i32 %2054, i32* %2052, align 4
  %2055 = icmp eq i32* %2053, %1894
  br i1 %2055, label %2056, label %2028, !llvm.loop !101

2056:                                             ; preds = %2023, %2028, %2002
  %2057 = phi i32* [ %1925, %2002 ], [ %2024, %2023 ], [ %2052, %2028 ]
  %2058 = ptrtoint i32* %2057 to i64
  %2059 = load i64, i64* %57, align 8, !noalias !91
  br label %2060

2060:                                             ; preds = %1889, %2056
  %2061 = phi i64 [ %2058, %2056 ], [ %1891, %1889 ]
  %2062 = phi i64 [ %2059, %2056 ], [ %1895, %1889 ]
  store i64 %2061, i64* %57, align 8, !noalias !91
  store i64 %1891, i64* %56, align 8, !noalias !91
  store i64 %1893, i64* %58, align 8, !noalias !91
  %2063 = icmp eq i64 %2062, 0
  br i1 %2063, label %2066, label %2064

2064:                                             ; preds = %2060
  %2065 = inttoptr i64 %2062 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %2065) #14
  br label %2066

2066:                                             ; preds = %1878, %2060, %2064
  call void @_ZN14CFX_XMLElement12SetAttributeERKN5fxcrt10WideStringES3_(%class.CFX_XMLElement* nonnull %1877, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %10, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %15) #14
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %15) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %80) #14
  br label %2067

2067:                                             ; preds = %1870, %1866, %2066
  %2068 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %50, align 8
  store %"class.fxcrt::StringDataTemplate"* null, %"class.fxcrt::StringDataTemplate"** %50, align 8
  %2069 = icmp eq %"class.fxcrt::StringDataTemplate"* %2068, null
  br i1 %2069, label %3785, label %2070

2070:                                             ; preds = %2067
  call void @_ZN5fxcrt18StringDataTemplateIwE7ReleaseEv(%"class.fxcrt::StringDataTemplate"* nonnull %2068) #14
  br label %3785

2071:                                             ; preds = %1861
  call void @_ZN13CFX_XMLParser15ProcessTextCharEw(%class.CFX_XMLParser* %0, i32 signext %130)
  %2072 = add nsw i64 %127, 1
  br label %3785

2073:                                             ; preds = %123
  %2074 = icmp eq i32 %130, 62
  br i1 %2074, label %2279, label %2075

2075:                                             ; preds = %2073
  %2076 = load i32*, i32** %53, align 8
  %2077 = load i32*, i32** %55, align 8
  %2078 = icmp eq i32* %2076, %2077
  %2079 = ptrtoint i32* %2077 to i64
  br i1 %2078, label %2083, label %2080

2080:                                             ; preds = %2075
  store i32 %130, i32* %2076, align 4
  %2081 = getelementptr inbounds i32, i32* %2076, i64 1
  %2082 = ptrtoint i32* %2081 to i64
  store i64 %2082, i64* %56, align 8
  br label %3785

2083:                                             ; preds = %2075
  %2084 = ptrtoint i32* %2076 to i64
  %2085 = load i64, i64* %57, align 8
  %2086 = sub i64 %2084, %2085
  %2087 = ashr exact i64 %2086, 2
  %2088 = add nsw i64 %2087, 1
  %2089 = icmp ugt i64 %2088, 4611686018427387903
  br i1 %2089, label %2090, label %2092

2090:                                             ; preds = %2083
  %2091 = bitcast %"class.std::__1::vector"* %54 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %2091) #15
  unreachable

2092:                                             ; preds = %2083
  %2093 = sub i64 %2079, %2085
  %2094 = ashr exact i64 %2093, 2
  %2095 = icmp ult i64 %2094, 2305843009213693951
  br i1 %2095, label %2096, label %2101

2096:                                             ; preds = %2092
  %2097 = ashr exact i64 %2093, 1
  %2098 = icmp ult i64 %2097, %2088
  %2099 = select i1 %2098, i64 %2088, i64 %2097
  %2100 = icmp eq i64 %2099, 0
  br i1 %2100, label %2105, label %2101

2101:                                             ; preds = %2096, %2092
  %2102 = phi i64 [ %2099, %2096 ], [ 4611686018427387903, %2092 ]
  %2103 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %2102, i64 4) #14
  %2104 = bitcast i8* %2103 to i32*
  br label %2105

2105:                                             ; preds = %2101, %2096
  %2106 = phi i64 [ %2102, %2101 ], [ 0, %2096 ]
  %2107 = phi i32* [ %2104, %2101 ], [ null, %2096 ]
  %2108 = getelementptr inbounds i32, i32* %2107, i64 %2087
  %2109 = getelementptr inbounds i32, i32* %2107, i64 %2106
  %2110 = ptrtoint i32* %2109 to i64
  store i32 %130, i32* %2108, align 4
  %2111 = getelementptr inbounds i32, i32* %2108, i64 1
  %2112 = ptrtoint i32* %2111 to i64
  %2113 = load i32*, i32** %59, align 8
  %2114 = ptrtoint i32* %2113 to i64
  %2115 = load i32*, i32** %53, align 8
  %2116 = icmp eq i32* %2115, %2113
  br i1 %2116, label %2272, label %2117

2117:                                             ; preds = %2105
  %2118 = getelementptr i32, i32* %2115, i64 -1
  %2119 = ptrtoint i32* %2118 to i64
  %2120 = sub i64 %2119, %2114
  %2121 = lshr i64 %2120, 2
  %2122 = add nuw nsw i64 %2121, 1
  %2123 = icmp ult i64 %2122, 8
  br i1 %2123, label %2217, label %2124

2124:                                             ; preds = %2117
  %2125 = getelementptr i32, i32* %2107, i64 -1
  %2126 = getelementptr i32, i32* %2115, i64 -1
  %2127 = ptrtoint i32* %2126 to i64
  %2128 = sub i64 %2127, %2114
  %2129 = lshr i64 %2128, 2
  %2130 = sub nsw i64 %2087, %2129
  %2131 = getelementptr i32, i32* %2125, i64 %2130
  %2132 = getelementptr i32, i32* %2115, i64 -1
  %2133 = sub nsw i64 0, %2129
  %2134 = getelementptr i32, i32* %2132, i64 %2133
  %2135 = icmp ult i32* %2131, %2115
  %2136 = icmp ult i32* %2134, %2108
  %2137 = and i1 %2135, %2136
  br i1 %2137, label %2217, label %2138

2138:                                             ; preds = %2124
  %2139 = and i64 %2122, 9223372036854775800
  %2140 = sub nsw i64 0, %2139
  %2141 = getelementptr i32, i32* %2108, i64 %2140
  %2142 = sub nsw i64 0, %2139
  %2143 = getelementptr i32, i32* %2115, i64 %2142
  %2144 = add nsw i64 %2139, -8
  %2145 = lshr exact i64 %2144, 3
  %2146 = add nuw nsw i64 %2145, 1
  %2147 = and i64 %2146, 1
  %2148 = icmp eq i64 %2144, 0
  br i1 %2148, label %2193, label %2149

2149:                                             ; preds = %2138
  %2150 = sub nuw nsw i64 %2146, %2147
  %2151 = getelementptr i32, i32* %2108, i64 -1
  %2152 = getelementptr i32, i32* %2115, i64 -1
  %2153 = getelementptr i32, i32* %2108, i64 -1
  %2154 = getelementptr i32, i32* %2115, i64 -1
  br label %2155

2155:                                             ; preds = %2155, %2149
  %2156 = phi i64 [ 0, %2149 ], [ %2190, %2155 ]
  %2157 = phi i64 [ %2150, %2149 ], [ %2191, %2155 ]
  %2158 = sub i64 0, %2156
  %2159 = sub i64 0, %2156
  %2160 = getelementptr inbounds i32, i32* %2151, i64 %2158
  %2161 = getelementptr inbounds i32, i32* %2152, i64 %2159
  %2162 = getelementptr inbounds i32, i32* %2161, i64 -3
  %2163 = bitcast i32* %2162 to <4 x i32>*
  %2164 = load <4 x i32>, <4 x i32>* %2163, align 4, !alias.scope !102
  %2165 = getelementptr inbounds i32, i32* %2161, i64 -4
  %2166 = getelementptr inbounds i32, i32* %2165, i64 -3
  %2167 = bitcast i32* %2166 to <4 x i32>*
  %2168 = load <4 x i32>, <4 x i32>* %2167, align 4, !alias.scope !102
  %2169 = getelementptr inbounds i32, i32* %2160, i64 -3
  %2170 = bitcast i32* %2169 to <4 x i32>*
  store <4 x i32> %2164, <4 x i32>* %2170, align 4, !alias.scope !105, !noalias !102
  %2171 = getelementptr inbounds i32, i32* %2160, i64 -4
  %2172 = getelementptr inbounds i32, i32* %2171, i64 -3
  %2173 = bitcast i32* %2172 to <4 x i32>*
  store <4 x i32> %2168, <4 x i32>* %2173, align 4, !alias.scope !105, !noalias !102
  %2174 = sub nuw nsw i64 -8, %2156
  %2175 = sub nuw nsw i64 -8, %2156
  %2176 = getelementptr inbounds i32, i32* %2153, i64 %2174
  %2177 = getelementptr inbounds i32, i32* %2154, i64 %2175
  %2178 = getelementptr inbounds i32, i32* %2177, i64 -3
  %2179 = bitcast i32* %2178 to <4 x i32>*
  %2180 = load <4 x i32>, <4 x i32>* %2179, align 4, !alias.scope !102
  %2181 = getelementptr inbounds i32, i32* %2177, i64 -4
  %2182 = getelementptr inbounds i32, i32* %2181, i64 -3
  %2183 = bitcast i32* %2182 to <4 x i32>*
  %2184 = load <4 x i32>, <4 x i32>* %2183, align 4, !alias.scope !102
  %2185 = getelementptr inbounds i32, i32* %2176, i64 -3
  %2186 = bitcast i32* %2185 to <4 x i32>*
  store <4 x i32> %2180, <4 x i32>* %2186, align 4, !alias.scope !105, !noalias !102
  %2187 = getelementptr inbounds i32, i32* %2176, i64 -4
  %2188 = getelementptr inbounds i32, i32* %2187, i64 -3
  %2189 = bitcast i32* %2188 to <4 x i32>*
  store <4 x i32> %2184, <4 x i32>* %2189, align 4, !alias.scope !105, !noalias !102
  %2190 = add i64 %2156, 16
  %2191 = add i64 %2157, -2
  %2192 = icmp eq i64 %2191, 0
  br i1 %2192, label %2193, label %2155, !llvm.loop !107

2193:                                             ; preds = %2155, %2138
  %2194 = phi i64 [ 0, %2138 ], [ %2190, %2155 ]
  %2195 = icmp eq i64 %2147, 0
  br i1 %2195, label %2215, label %2196

2196:                                             ; preds = %2193
  %2197 = sub i64 0, %2194
  %2198 = getelementptr i32, i32* %2108, i64 -1
  %2199 = sub i64 0, %2194
  %2200 = getelementptr i32, i32* %2115, i64 -1
  %2201 = getelementptr inbounds i32, i32* %2198, i64 %2197
  %2202 = getelementptr inbounds i32, i32* %2200, i64 %2199
  %2203 = getelementptr inbounds i32, i32* %2202, i64 -3
  %2204 = bitcast i32* %2203 to <4 x i32>*
  %2205 = load <4 x i32>, <4 x i32>* %2204, align 4, !alias.scope !102
  %2206 = getelementptr inbounds i32, i32* %2202, i64 -4
  %2207 = getelementptr inbounds i32, i32* %2206, i64 -3
  %2208 = bitcast i32* %2207 to <4 x i32>*
  %2209 = load <4 x i32>, <4 x i32>* %2208, align 4, !alias.scope !102
  %2210 = getelementptr inbounds i32, i32* %2201, i64 -3
  %2211 = bitcast i32* %2210 to <4 x i32>*
  store <4 x i32> %2205, <4 x i32>* %2211, align 4, !alias.scope !105, !noalias !102
  %2212 = getelementptr inbounds i32, i32* %2201, i64 -4
  %2213 = getelementptr inbounds i32, i32* %2212, i64 -3
  %2214 = bitcast i32* %2213 to <4 x i32>*
  store <4 x i32> %2209, <4 x i32>* %2214, align 4, !alias.scope !105, !noalias !102
  br label %2215

2215:                                             ; preds = %2193, %2196
  %2216 = icmp eq i64 %2122, %2139
  br i1 %2216, label %2269, label %2217

2217:                                             ; preds = %2215, %2124, %2117
  %2218 = phi i32* [ %2108, %2124 ], [ %2108, %2117 ], [ %2141, %2215 ]
  %2219 = phi i32* [ %2115, %2124 ], [ %2115, %2117 ], [ %2143, %2215 ]
  %2220 = getelementptr i32, i32* %2219, i64 -1
  %2221 = ptrtoint i32* %2220 to i64
  %2222 = sub i64 %2221, %2114
  %2223 = lshr i64 %2222, 2
  %2224 = add nuw nsw i64 %2223, 1
  %2225 = and i64 %2224, 7
  %2226 = icmp eq i64 %2225, 0
  br i1 %2226, label %2236, label %2227

2227:                                             ; preds = %2217, %2227
  %2228 = phi i32* [ %2231, %2227 ], [ %2218, %2217 ]
  %2229 = phi i32* [ %2232, %2227 ], [ %2219, %2217 ]
  %2230 = phi i64 [ %2234, %2227 ], [ %2225, %2217 ]
  %2231 = getelementptr inbounds i32, i32* %2228, i64 -1
  %2232 = getelementptr inbounds i32, i32* %2229, i64 -1
  %2233 = load i32, i32* %2232, align 4
  store i32 %2233, i32* %2231, align 4
  %2234 = add i64 %2230, -1
  %2235 = icmp eq i64 %2234, 0
  br i1 %2235, label %2236, label %2227, !llvm.loop !108

2236:                                             ; preds = %2227, %2217
  %2237 = phi i32* [ undef, %2217 ], [ %2231, %2227 ]
  %2238 = phi i32* [ %2218, %2217 ], [ %2231, %2227 ]
  %2239 = phi i32* [ %2219, %2217 ], [ %2232, %2227 ]
  %2240 = icmp ult i64 %2222, 28
  br i1 %2240, label %2269, label %2241

2241:                                             ; preds = %2236, %2241
  %2242 = phi i32* [ %2265, %2241 ], [ %2238, %2236 ]
  %2243 = phi i32* [ %2266, %2241 ], [ %2239, %2236 ]
  %2244 = getelementptr inbounds i32, i32* %2242, i64 -1
  %2245 = getelementptr inbounds i32, i32* %2243, i64 -1
  %2246 = load i32, i32* %2245, align 4
  store i32 %2246, i32* %2244, align 4
  %2247 = getelementptr inbounds i32, i32* %2242, i64 -2
  %2248 = getelementptr inbounds i32, i32* %2243, i64 -2
  %2249 = load i32, i32* %2248, align 4
  store i32 %2249, i32* %2247, align 4
  %2250 = getelementptr inbounds i32, i32* %2242, i64 -3
  %2251 = getelementptr inbounds i32, i32* %2243, i64 -3
  %2252 = load i32, i32* %2251, align 4
  store i32 %2252, i32* %2250, align 4
  %2253 = getelementptr inbounds i32, i32* %2242, i64 -4
  %2254 = getelementptr inbounds i32, i32* %2243, i64 -4
  %2255 = load i32, i32* %2254, align 4
  store i32 %2255, i32* %2253, align 4
  %2256 = getelementptr inbounds i32, i32* %2242, i64 -5
  %2257 = getelementptr inbounds i32, i32* %2243, i64 -5
  %2258 = load i32, i32* %2257, align 4
  store i32 %2258, i32* %2256, align 4
  %2259 = getelementptr inbounds i32, i32* %2242, i64 -6
  %2260 = getelementptr inbounds i32, i32* %2243, i64 -6
  %2261 = load i32, i32* %2260, align 4
  store i32 %2261, i32* %2259, align 4
  %2262 = getelementptr inbounds i32, i32* %2242, i64 -7
  %2263 = getelementptr inbounds i32, i32* %2243, i64 -7
  %2264 = load i32, i32* %2263, align 4
  store i32 %2264, i32* %2262, align 4
  %2265 = getelementptr inbounds i32, i32* %2242, i64 -8
  %2266 = getelementptr inbounds i32, i32* %2243, i64 -8
  %2267 = load i32, i32* %2266, align 4
  store i32 %2267, i32* %2265, align 4
  %2268 = icmp eq i32* %2266, %2113
  br i1 %2268, label %2269, label %2241, !llvm.loop !109

2269:                                             ; preds = %2236, %2241, %2215
  %2270 = phi i32* [ %2141, %2215 ], [ %2237, %2236 ], [ %2265, %2241 ]
  %2271 = load i64, i64* %57, align 8
  br label %2272

2272:                                             ; preds = %2105, %2269
  %2273 = phi i32* [ %2270, %2269 ], [ %2108, %2105 ]
  %2274 = phi i64 [ %2271, %2269 ], [ %2114, %2105 ]
  %2275 = ptrtoint i32* %2273 to i64
  store i64 %2275, i64* %57, align 8
  store i64 %2112, i64* %56, align 8
  store i64 %2110, i64* %58, align 8
  %2276 = icmp eq i64 %2274, 0
  br i1 %2276, label %3785, label %2277

2277:                                             ; preds = %2272
  %2278 = inttoptr i64 %2274 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %2278) #14
  br label %3785

2279:                                             ; preds = %2073
  %2280 = load i32*, i32** %59, align 8
  %2281 = load i32*, i32** %53, align 8
  %2282 = icmp eq i32* %2280, %2281
  br i1 %2282, label %2284, label %2283

2283:                                             ; preds = %2279
  call void @_ZN13CFX_XMLParser17ProcessTargetDataEv(%class.CFX_XMLParser* %0)
  br label %3785

2284:                                             ; preds = %2279
  %2285 = add nsw i64 %127, 1
  %2286 = load i64, i64* %48, align 8
  %2287 = icmp eq i64 %2286, 0
  br i1 %2287, label %3791, label %2288

2288:                                             ; preds = %2284
  %2289 = load i64, i64* %47, align 8
  %2290 = add i64 %2286, -1
  store i64 %2290, i64* %48, align 8
  %2291 = load i64, i64* %74, align 8
  %2292 = load i64, i64* %75, align 8
  %2293 = sub i64 %2291, %2292
  %2294 = icmp eq i64 %2293, 0
  %2295 = shl i64 %2293, 7
  %2296 = add i64 %2295, -1
  %2297 = select i1 %2294, i64 0, i64 %2296
  %2298 = sub i64 1, %2286
  %2299 = sub i64 %2298, %2289
  %2300 = add i64 %2299, %2297
  %2301 = icmp ult i64 %2300, 2048
  br i1 %2301, label %2309, label %2302

2302:                                             ; preds = %2288
  %2303 = inttoptr i64 %2291 to i32**
  %2304 = getelementptr inbounds i32*, i32** %2303, i64 -1
  %2305 = bitcast i32** %2304 to i8**
  %2306 = load i8*, i8** %2305, align 8
  call void @_ZdlPv(i8* %2306) #13
  %2307 = load i32**, i32*** %46, align 8
  %2308 = getelementptr i32*, i32** %2307, i64 -1
  store i32** %2308, i32*** %46, align 8
  br label %2309

2309:                                             ; preds = %2288, %2302
  %2310 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %76, align 8
  %2311 = icmp eq %class.CFX_XMLNode* %2310, null
  br i1 %2311, label %3785, label %2312

2312:                                             ; preds = %2309
  %2313 = bitcast %class.CFX_XMLNode* %2310 to i32 (%class.CFX_XMLNode*)***
  %2314 = load i32 (%class.CFX_XMLNode*)**, i32 (%class.CFX_XMLNode*)*** %2313, align 8
  %2315 = getelementptr inbounds i32 (%class.CFX_XMLNode*)*, i32 (%class.CFX_XMLNode*)** %2314, i64 2
  %2316 = load i32 (%class.CFX_XMLNode*)*, i32 (%class.CFX_XMLNode*)** %2315, align 8
  %2317 = call i32 %2316(%class.CFX_XMLNode* nonnull %2310) #14
  %2318 = icmp eq i32 %2317, 0
  br i1 %2318, label %2319, label %3785

2319:                                             ; preds = %2312
  %2320 = load %"class.fxcrt::TreeNode"*, %"class.fxcrt::TreeNode"** %63, align 8
  %2321 = getelementptr inbounds %"class.fxcrt::TreeNode", %"class.fxcrt::TreeNode"* %2320, i64 0, i32 1
  %2322 = bitcast %class.CFX_XMLNode** %2321 to i64*
  %2323 = load i64, i64* %2322, align 8
  store i64 %2323, i64* %79, align 8
  br label %3785

2324:                                             ; preds = %123
  switch i32 %130, label %3791 [
    i32 62, label %2326
    i32 47, label %2325
  ]

2325:                                             ; preds = %2324
  br label %2326

2326:                                             ; preds = %2324, %2325
  %2327 = phi i32 [ 10, %2325 ], [ 0, %2324 ]
  %2328 = add nsw i64 %127, 1
  br label %3785

2329:                                             ; preds = %123
  %2330 = load i32*, i32** %59, align 8
  %2331 = load i32*, i32** %53, align 8
  %2332 = ptrtoint i32* %2330 to i64
  br label %2333

2333:                                             ; preds = %2333, %2329
  %2334 = phi i64 [ 20, %2329 ], [ %2346, %2333 ]
  %2335 = phi %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* [ getelementptr inbounds ([20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"], [20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"]* @_ZN12_GLOBAL__N_114g_XMLNameCharsE, i64 0, i64 0), %2329 ], [ %2345, %2333 ]
  %2336 = lshr i64 %2334, 1
  %2337 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %2335, i64 1
  %2338 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %2335, i64 %2336, i32 1
  %2339 = load i16, i16* %2338, align 2
  %2340 = zext i16 %2339 to i32
  %2341 = icmp sgt i32 %130, %2340
  %2342 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %2337, i64 %2336
  %2343 = xor i64 %2336, -1
  %2344 = add i64 %2334, %2343
  %2345 = select i1 %2341, %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %2342, %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %2335
  %2346 = select i1 %2341, i64 %2344, i64 %2336
  %2347 = icmp eq i64 %2346, 0
  br i1 %2347, label %2348, label %2333

2348:                                             ; preds = %2333
  %2349 = icmp eq %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %2345, getelementptr inbounds ([20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"], [20 x %"struct.(anonymous namespace)::FX_XMLNAMECHAR"]* @_ZN12_GLOBAL__N_114g_XMLNameCharsE, i64 1, i64 0)
  br i1 %2349, label %2362, label %2350

2350:                                             ; preds = %2348
  %2351 = icmp ne i32* %2330, %2331
  %2352 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %2345, i64 0, i32 0
  %2353 = load i16, i16* %2352, align 2
  %2354 = zext i16 %2353 to i32
  %2355 = icmp slt i32 %130, %2354
  %2356 = or i1 %2351, %2355
  br i1 %2356, label %2361, label %2357

2357:                                             ; preds = %2350
  %2358 = getelementptr inbounds %"struct.(anonymous namespace)::FX_XMLNAMECHAR", %"struct.(anonymous namespace)::FX_XMLNAMECHAR"* %2345, i64 0, i32 2
  %2359 = load i8, i8* %2358, align 2, !range !2
  %2360 = icmp eq i8 %2359, 0
  br i1 %2360, label %2362, label %2602

2361:                                             ; preds = %2350
  br i1 %2355, label %2362, label %2602

2362:                                             ; preds = %2361, %2357, %2348
  switch i32 %130, label %3791 [
    i32 62, label %2363
    i32 32, label %2804
    i32 13, label %2804
    i32 10, label %2804
    i32 9, label %2804
  ]

2363:                                             ; preds = %2362
  %2364 = load i64, i64* %48, align 8
  %2365 = icmp eq i64 %2364, 0
  br i1 %2365, label %3791, label %2366

2366:                                             ; preds = %2363
  %2367 = load i64, i64* %47, align 8
  %2368 = add i64 %2364, -1
  store i64 %2368, i64* %48, align 8
  %2369 = load i64, i64* %74, align 8
  %2370 = load i64, i64* %75, align 8
  %2371 = sub i64 %2369, %2370
  %2372 = icmp eq i64 %2371, 0
  %2373 = shl i64 %2371, 7
  %2374 = add i64 %2373, -1
  %2375 = select i1 %2372, i64 0, i64 %2374
  %2376 = sub i64 1, %2364
  %2377 = sub i64 %2376, %2367
  %2378 = add i64 %2377, %2375
  %2379 = icmp ult i64 %2378, 2048
  br i1 %2379, label %2387, label %2380

2380:                                             ; preds = %2366
  %2381 = inttoptr i64 %2369 to i32**
  %2382 = getelementptr inbounds i32*, i32** %2381, i64 -1
  %2383 = bitcast i32** %2382 to i8**
  %2384 = load i8*, i8** %2383, align 8
  call void @_ZdlPv(i8* %2384) #13
  %2385 = load i32**, i32*** %46, align 8
  %2386 = getelementptr i32*, i32** %2385, i64 -1
  store i32** %2386, i32*** %46, align 8
  br label %2387

2387:                                             ; preds = %2366, %2380
  %2388 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %76, align 8
  %2389 = icmp eq %class.CFX_XMLNode* %2388, null
  br i1 %2389, label %3791, label %2390

2390:                                             ; preds = %2387
  %2391 = bitcast %class.CFX_XMLNode* %2388 to i32 (%class.CFX_XMLNode*)***
  %2392 = load i32 (%class.CFX_XMLNode*)**, i32 (%class.CFX_XMLNode*)*** %2391, align 8
  %2393 = getelementptr inbounds i32 (%class.CFX_XMLNode*)*, i32 (%class.CFX_XMLNode*)** %2392, i64 2
  %2394 = load i32 (%class.CFX_XMLNode*)*, i32 (%class.CFX_XMLNode*)** %2393, align 8
  %2395 = call i32 %2394(%class.CFX_XMLNode* nonnull %2388) #14
  %2396 = icmp eq i32 %2395, 1
  br i1 %2396, label %2397, label %3791

2397:                                             ; preds = %2390
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %77) #14
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %78, align 8, !alias.scope !110
  %2398 = load i32*, i32** %59, align 8, !noalias !110
  %2399 = load i64, i64* %56, align 8, !noalias !110
  %2400 = ptrtoint i32* %2398 to i64
  %2401 = sub i64 %2399, %2400
  %2402 = ashr exact i64 %2401, 2
  call void @_ZN5fxcrt10WideStringC1EPKwm(%"class.fxcrt::WideString"* nonnull %16, i32* %2398, i64 %2402) #14
  store i32 -1, i32* %66, align 8, !noalias !110
  %2403 = load i64, i64* %57, align 8, !noalias !110
  store i64 %2403, i64* %56, align 8, !noalias !110
  %2404 = load i64, i64* %58, align 8, !noalias !110
  %2405 = sub i64 %2404, %2403
  %2406 = ashr exact i64 %2405, 2
  %2407 = icmp ult i64 %2406, 128
  br i1 %2407, label %2408, label %2585

2408:                                             ; preds = %2397
  %2409 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 128, i64 4) #14
  %2410 = ptrtoint i8* %2409 to i64
  %2411 = getelementptr inbounds i8, i8* %2409, i64 512
  %2412 = ptrtoint i8* %2411 to i64
  %2413 = load i32*, i32** %59, align 8, !noalias !110
  %2414 = ptrtoint i32* %2413 to i64
  %2415 = load i32*, i32** %53, align 8, !noalias !110
  %2416 = bitcast i32* %2415 to i8*
  %2417 = icmp eq i32* %2415, %2413
  br i1 %2417, label %2579, label %2418

2418:                                             ; preds = %2408
  %2419 = bitcast i8* %2409 to i32*
  %2420 = getelementptr i32, i32* %2415, i64 -1
  %2421 = ptrtoint i32* %2420 to i64
  %2422 = sub i64 %2421, %2414
  %2423 = lshr i64 %2422, 2
  %2424 = add nuw nsw i64 %2423, 1
  %2425 = icmp ult i64 %2424, 8
  br i1 %2425, label %2523, label %2426

2426:                                             ; preds = %2418
  %2427 = getelementptr i8, i8* %2409, i64 -4
  %2428 = getelementptr i32, i32* %2415, i64 -1
  %2429 = ptrtoint i32* %2428 to i64
  %2430 = sub i64 %2429, %2414
  %2431 = lshr i64 %2430, 2
  %2432 = mul i64 %2431, -4
  %2433 = getelementptr i8, i8* %2427, i64 %2432
  %2434 = getelementptr i32, i32* %2415, i64 -1
  %2435 = sub nsw i64 0, %2431
  %2436 = getelementptr i32, i32* %2434, i64 %2435
  %2437 = bitcast i32* %2436 to i8*
  %2438 = icmp ult i8* %2433, %2416
  %2439 = icmp ugt i8* %2409, %2437
  %2440 = and i1 %2438, %2439
  br i1 %2440, label %2523, label %2441

2441:                                             ; preds = %2426
  %2442 = and i64 %2424, 9223372036854775800
  %2443 = sub nsw i64 0, %2442
  %2444 = getelementptr i32, i32* %2419, i64 %2443
  %2445 = sub nsw i64 0, %2442
  %2446 = getelementptr i32, i32* %2415, i64 %2445
  %2447 = add nsw i64 %2442, -8
  %2448 = lshr exact i64 %2447, 3
  %2449 = add nuw nsw i64 %2448, 1
  %2450 = and i64 %2449, 1
  %2451 = icmp eq i64 %2447, 0
  br i1 %2451, label %2498, label %2452

2452:                                             ; preds = %2441
  %2453 = sub nuw nsw i64 %2449, %2450
  %2454 = getelementptr i8, i8* %2409, i64 -4
  %2455 = bitcast i8* %2454 to i32*
  %2456 = getelementptr i32, i32* %2415, i64 -1
  %2457 = getelementptr i8, i8* %2409, i64 -4
  %2458 = bitcast i8* %2457 to i32*
  %2459 = getelementptr i32, i32* %2415, i64 -1
  br label %2460

2460:                                             ; preds = %2460, %2452
  %2461 = phi i64 [ 0, %2452 ], [ %2495, %2460 ]
  %2462 = phi i64 [ %2453, %2452 ], [ %2496, %2460 ]
  %2463 = sub i64 0, %2461
  %2464 = sub i64 0, %2461
  %2465 = getelementptr inbounds i32, i32* %2455, i64 %2463
  %2466 = getelementptr inbounds i32, i32* %2456, i64 %2464
  %2467 = getelementptr inbounds i32, i32* %2466, i64 -3
  %2468 = bitcast i32* %2467 to <4 x i32>*
  %2469 = load <4 x i32>, <4 x i32>* %2468, align 4, !alias.scope !113
  %2470 = getelementptr inbounds i32, i32* %2466, i64 -4
  %2471 = getelementptr inbounds i32, i32* %2470, i64 -3
  %2472 = bitcast i32* %2471 to <4 x i32>*
  %2473 = load <4 x i32>, <4 x i32>* %2472, align 4, !alias.scope !113
  %2474 = getelementptr inbounds i32, i32* %2465, i64 -3
  %2475 = bitcast i32* %2474 to <4 x i32>*
  store <4 x i32> %2469, <4 x i32>* %2475, align 4, !alias.scope !116, !noalias !113
  %2476 = getelementptr inbounds i32, i32* %2465, i64 -4
  %2477 = getelementptr inbounds i32, i32* %2476, i64 -3
  %2478 = bitcast i32* %2477 to <4 x i32>*
  store <4 x i32> %2473, <4 x i32>* %2478, align 4, !alias.scope !116, !noalias !113
  %2479 = sub nuw nsw i64 -8, %2461
  %2480 = sub nuw nsw i64 -8, %2461
  %2481 = getelementptr inbounds i32, i32* %2458, i64 %2479
  %2482 = getelementptr inbounds i32, i32* %2459, i64 %2480
  %2483 = getelementptr inbounds i32, i32* %2482, i64 -3
  %2484 = bitcast i32* %2483 to <4 x i32>*
  %2485 = load <4 x i32>, <4 x i32>* %2484, align 4, !alias.scope !113
  %2486 = getelementptr inbounds i32, i32* %2482, i64 -4
  %2487 = getelementptr inbounds i32, i32* %2486, i64 -3
  %2488 = bitcast i32* %2487 to <4 x i32>*
  %2489 = load <4 x i32>, <4 x i32>* %2488, align 4, !alias.scope !113
  %2490 = getelementptr inbounds i32, i32* %2481, i64 -3
  %2491 = bitcast i32* %2490 to <4 x i32>*
  store <4 x i32> %2485, <4 x i32>* %2491, align 4, !alias.scope !116, !noalias !113
  %2492 = getelementptr inbounds i32, i32* %2481, i64 -4
  %2493 = getelementptr inbounds i32, i32* %2492, i64 -3
  %2494 = bitcast i32* %2493 to <4 x i32>*
  store <4 x i32> %2489, <4 x i32>* %2494, align 4, !alias.scope !116, !noalias !113
  %2495 = add i64 %2461, 16
  %2496 = add i64 %2462, -2
  %2497 = icmp eq i64 %2496, 0
  br i1 %2497, label %2498, label %2460, !llvm.loop !118

2498:                                             ; preds = %2460, %2441
  %2499 = phi i64 [ 0, %2441 ], [ %2495, %2460 ]
  %2500 = icmp eq i64 %2450, 0
  br i1 %2500, label %2521, label %2501

2501:                                             ; preds = %2498
  %2502 = sub i64 0, %2499
  %2503 = getelementptr i8, i8* %2409, i64 -4
  %2504 = bitcast i8* %2503 to i32*
  %2505 = sub i64 0, %2499
  %2506 = getelementptr i32, i32* %2415, i64 -1
  %2507 = getelementptr inbounds i32, i32* %2504, i64 %2502
  %2508 = getelementptr inbounds i32, i32* %2506, i64 %2505
  %2509 = getelementptr inbounds i32, i32* %2508, i64 -3
  %2510 = bitcast i32* %2509 to <4 x i32>*
  %2511 = load <4 x i32>, <4 x i32>* %2510, align 4, !alias.scope !113
  %2512 = getelementptr inbounds i32, i32* %2508, i64 -4
  %2513 = getelementptr inbounds i32, i32* %2512, i64 -3
  %2514 = bitcast i32* %2513 to <4 x i32>*
  %2515 = load <4 x i32>, <4 x i32>* %2514, align 4, !alias.scope !113
  %2516 = getelementptr inbounds i32, i32* %2507, i64 -3
  %2517 = bitcast i32* %2516 to <4 x i32>*
  store <4 x i32> %2511, <4 x i32>* %2517, align 4, !alias.scope !116, !noalias !113
  %2518 = getelementptr inbounds i32, i32* %2507, i64 -4
  %2519 = getelementptr inbounds i32, i32* %2518, i64 -3
  %2520 = bitcast i32* %2519 to <4 x i32>*
  store <4 x i32> %2515, <4 x i32>* %2520, align 4, !alias.scope !116, !noalias !113
  br label %2521

2521:                                             ; preds = %2498, %2501
  %2522 = icmp eq i64 %2424, %2442
  br i1 %2522, label %2575, label %2523

2523:                                             ; preds = %2521, %2426, %2418
  %2524 = phi i32* [ %2419, %2426 ], [ %2419, %2418 ], [ %2444, %2521 ]
  %2525 = phi i32* [ %2415, %2426 ], [ %2415, %2418 ], [ %2446, %2521 ]
  %2526 = getelementptr i32, i32* %2525, i64 -1
  %2527 = ptrtoint i32* %2526 to i64
  %2528 = sub i64 %2527, %2414
  %2529 = lshr i64 %2528, 2
  %2530 = add nuw nsw i64 %2529, 1
  %2531 = and i64 %2530, 7
  %2532 = icmp eq i64 %2531, 0
  br i1 %2532, label %2542, label %2533

2533:                                             ; preds = %2523, %2533
  %2534 = phi i32* [ %2537, %2533 ], [ %2524, %2523 ]
  %2535 = phi i32* [ %2538, %2533 ], [ %2525, %2523 ]
  %2536 = phi i64 [ %2540, %2533 ], [ %2531, %2523 ]
  %2537 = getelementptr inbounds i32, i32* %2534, i64 -1
  %2538 = getelementptr inbounds i32, i32* %2535, i64 -1
  %2539 = load i32, i32* %2538, align 4
  store i32 %2539, i32* %2537, align 4
  %2540 = add i64 %2536, -1
  %2541 = icmp eq i64 %2540, 0
  br i1 %2541, label %2542, label %2533, !llvm.loop !119

2542:                                             ; preds = %2533, %2523
  %2543 = phi i32* [ undef, %2523 ], [ %2537, %2533 ]
  %2544 = phi i32* [ %2524, %2523 ], [ %2537, %2533 ]
  %2545 = phi i32* [ %2525, %2523 ], [ %2538, %2533 ]
  %2546 = icmp ult i64 %2528, 28
  br i1 %2546, label %2575, label %2547

2547:                                             ; preds = %2542, %2547
  %2548 = phi i32* [ %2571, %2547 ], [ %2544, %2542 ]
  %2549 = phi i32* [ %2572, %2547 ], [ %2545, %2542 ]
  %2550 = getelementptr inbounds i32, i32* %2548, i64 -1
  %2551 = getelementptr inbounds i32, i32* %2549, i64 -1
  %2552 = load i32, i32* %2551, align 4
  store i32 %2552, i32* %2550, align 4
  %2553 = getelementptr inbounds i32, i32* %2548, i64 -2
  %2554 = getelementptr inbounds i32, i32* %2549, i64 -2
  %2555 = load i32, i32* %2554, align 4
  store i32 %2555, i32* %2553, align 4
  %2556 = getelementptr inbounds i32, i32* %2548, i64 -3
  %2557 = getelementptr inbounds i32, i32* %2549, i64 -3
  %2558 = load i32, i32* %2557, align 4
  store i32 %2558, i32* %2556, align 4
  %2559 = getelementptr inbounds i32, i32* %2548, i64 -4
  %2560 = getelementptr inbounds i32, i32* %2549, i64 -4
  %2561 = load i32, i32* %2560, align 4
  store i32 %2561, i32* %2559, align 4
  %2562 = getelementptr inbounds i32, i32* %2548, i64 -5
  %2563 = getelementptr inbounds i32, i32* %2549, i64 -5
  %2564 = load i32, i32* %2563, align 4
  store i32 %2564, i32* %2562, align 4
  %2565 = getelementptr inbounds i32, i32* %2548, i64 -6
  %2566 = getelementptr inbounds i32, i32* %2549, i64 -6
  %2567 = load i32, i32* %2566, align 4
  store i32 %2567, i32* %2565, align 4
  %2568 = getelementptr inbounds i32, i32* %2548, i64 -7
  %2569 = getelementptr inbounds i32, i32* %2549, i64 -7
  %2570 = load i32, i32* %2569, align 4
  store i32 %2570, i32* %2568, align 4
  %2571 = getelementptr inbounds i32, i32* %2548, i64 -8
  %2572 = getelementptr inbounds i32, i32* %2549, i64 -8
  %2573 = load i32, i32* %2572, align 4
  store i32 %2573, i32* %2571, align 4
  %2574 = icmp eq i32* %2572, %2413
  br i1 %2574, label %2575, label %2547, !llvm.loop !120

2575:                                             ; preds = %2542, %2547, %2521
  %2576 = phi i32* [ %2444, %2521 ], [ %2543, %2542 ], [ %2571, %2547 ]
  %2577 = ptrtoint i32* %2576 to i64
  %2578 = load i64, i64* %57, align 8, !noalias !110
  br label %2579

2579:                                             ; preds = %2408, %2575
  %2580 = phi i64 [ %2577, %2575 ], [ %2410, %2408 ]
  %2581 = phi i64 [ %2578, %2575 ], [ %2414, %2408 ]
  store i64 %2580, i64* %57, align 8, !noalias !110
  store i64 %2410, i64* %56, align 8, !noalias !110
  store i64 %2412, i64* %58, align 8, !noalias !110
  %2582 = icmp eq i64 %2581, 0
  br i1 %2582, label %2585, label %2583

2583:                                             ; preds = %2579
  %2584 = inttoptr i64 %2581 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %2584) #14
  br label %2585

2585:                                             ; preds = %2397, %2579, %2583
  %2586 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %78, align 8
  %2587 = icmp eq %"class.fxcrt::StringDataTemplate"* %2586, null
  br i1 %2587, label %2596, label %2588

2588:                                             ; preds = %2585
  %2589 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %2586, i64 0, i32 1
  %2590 = load i64, i64* %2589, align 8
  %2591 = icmp eq i64 %2590, 0
  br i1 %2591, label %2596, label %2592

2592:                                             ; preds = %2588
  %2593 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %2388, i64 1
  %2594 = bitcast %class.CFX_XMLNode* %2593 to %"class.fxcrt::WideString"*
  %2595 = call zeroext i1 @_ZNK5fxcrt10WideStringeqERKS0_(%"class.fxcrt::WideString"* nonnull %16, %"class.fxcrt::WideString"* dereferenceable(8) %2594) #14
  br i1 %2595, label %2596, label %2601

2596:                                             ; preds = %2588, %2585, %2592
  %2597 = load %"class.fxcrt::TreeNode"*, %"class.fxcrt::TreeNode"** %63, align 8
  %2598 = getelementptr inbounds %"class.fxcrt::TreeNode", %"class.fxcrt::TreeNode"* %2597, i64 0, i32 1
  %2599 = bitcast %class.CFX_XMLNode** %2598 to i64*
  %2600 = load i64, i64* %2599, align 8
  store i64 %2600, i64* %79, align 8
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %16) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %77) #14
  br label %2804

2601:                                             ; preds = %2592
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %16) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %77) #14
  br label %3791

2602:                                             ; preds = %2361, %2357
  %2603 = load i32*, i32** %55, align 8
  %2604 = icmp eq i32* %2331, %2603
  %2605 = ptrtoint i32* %2603 to i64
  br i1 %2604, label %2609, label %2606

2606:                                             ; preds = %2602
  store i32 %130, i32* %2331, align 4
  %2607 = getelementptr inbounds i32, i32* %2331, i64 1
  %2608 = ptrtoint i32* %2607 to i64
  store i64 %2608, i64* %56, align 8
  br label %2804

2609:                                             ; preds = %2602
  %2610 = ptrtoint i32* %2331 to i64
  %2611 = sub i64 %2610, %2332
  %2612 = ashr exact i64 %2611, 2
  %2613 = add nsw i64 %2612, 1
  %2614 = icmp ugt i64 %2613, 4611686018427387903
  br i1 %2614, label %2615, label %2617

2615:                                             ; preds = %2609
  %2616 = bitcast %"class.std::__1::vector"* %54 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %2616) #15
  unreachable

2617:                                             ; preds = %2609
  %2618 = sub i64 %2605, %2332
  %2619 = ashr exact i64 %2618, 2
  %2620 = icmp ult i64 %2619, 2305843009213693951
  br i1 %2620, label %2621, label %2626

2621:                                             ; preds = %2617
  %2622 = ashr exact i64 %2618, 1
  %2623 = icmp ult i64 %2622, %2613
  %2624 = select i1 %2623, i64 %2613, i64 %2622
  %2625 = icmp eq i64 %2624, 0
  br i1 %2625, label %2630, label %2626

2626:                                             ; preds = %2621, %2617
  %2627 = phi i64 [ %2624, %2621 ], [ 4611686018427387903, %2617 ]
  %2628 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %2627, i64 4) #14
  %2629 = bitcast i8* %2628 to i32*
  br label %2630

2630:                                             ; preds = %2626, %2621
  %2631 = phi i64 [ %2627, %2626 ], [ 0, %2621 ]
  %2632 = phi i32* [ %2629, %2626 ], [ null, %2621 ]
  %2633 = getelementptr inbounds i32, i32* %2632, i64 %2612
  %2634 = getelementptr inbounds i32, i32* %2632, i64 %2631
  %2635 = ptrtoint i32* %2634 to i64
  store i32 %130, i32* %2633, align 4
  %2636 = getelementptr inbounds i32, i32* %2633, i64 1
  %2637 = ptrtoint i32* %2636 to i64
  %2638 = load i32*, i32** %59, align 8
  %2639 = ptrtoint i32* %2638 to i64
  %2640 = load i32*, i32** %53, align 8
  %2641 = icmp eq i32* %2640, %2638
  br i1 %2641, label %2797, label %2642

2642:                                             ; preds = %2630
  %2643 = getelementptr i32, i32* %2640, i64 -1
  %2644 = ptrtoint i32* %2643 to i64
  %2645 = sub i64 %2644, %2639
  %2646 = lshr i64 %2645, 2
  %2647 = add nuw nsw i64 %2646, 1
  %2648 = icmp ult i64 %2647, 8
  br i1 %2648, label %2742, label %2649

2649:                                             ; preds = %2642
  %2650 = getelementptr i32, i32* %2632, i64 -1
  %2651 = getelementptr i32, i32* %2640, i64 -1
  %2652 = ptrtoint i32* %2651 to i64
  %2653 = sub i64 %2652, %2639
  %2654 = lshr i64 %2653, 2
  %2655 = sub nsw i64 %2612, %2654
  %2656 = getelementptr i32, i32* %2650, i64 %2655
  %2657 = getelementptr i32, i32* %2640, i64 -1
  %2658 = sub nsw i64 0, %2654
  %2659 = getelementptr i32, i32* %2657, i64 %2658
  %2660 = icmp ult i32* %2656, %2640
  %2661 = icmp ult i32* %2659, %2633
  %2662 = and i1 %2660, %2661
  br i1 %2662, label %2742, label %2663

2663:                                             ; preds = %2649
  %2664 = and i64 %2647, 9223372036854775800
  %2665 = sub nsw i64 0, %2664
  %2666 = getelementptr i32, i32* %2633, i64 %2665
  %2667 = sub nsw i64 0, %2664
  %2668 = getelementptr i32, i32* %2640, i64 %2667
  %2669 = add nsw i64 %2664, -8
  %2670 = lshr exact i64 %2669, 3
  %2671 = add nuw nsw i64 %2670, 1
  %2672 = and i64 %2671, 1
  %2673 = icmp eq i64 %2669, 0
  br i1 %2673, label %2718, label %2674

2674:                                             ; preds = %2663
  %2675 = sub nuw nsw i64 %2671, %2672
  %2676 = getelementptr i32, i32* %2633, i64 -1
  %2677 = getelementptr i32, i32* %2640, i64 -1
  %2678 = getelementptr i32, i32* %2633, i64 -1
  %2679 = getelementptr i32, i32* %2640, i64 -1
  br label %2680

2680:                                             ; preds = %2680, %2674
  %2681 = phi i64 [ 0, %2674 ], [ %2715, %2680 ]
  %2682 = phi i64 [ %2675, %2674 ], [ %2716, %2680 ]
  %2683 = sub i64 0, %2681
  %2684 = sub i64 0, %2681
  %2685 = getelementptr inbounds i32, i32* %2676, i64 %2683
  %2686 = getelementptr inbounds i32, i32* %2677, i64 %2684
  %2687 = getelementptr inbounds i32, i32* %2686, i64 -3
  %2688 = bitcast i32* %2687 to <4 x i32>*
  %2689 = load <4 x i32>, <4 x i32>* %2688, align 4, !alias.scope !121
  %2690 = getelementptr inbounds i32, i32* %2686, i64 -4
  %2691 = getelementptr inbounds i32, i32* %2690, i64 -3
  %2692 = bitcast i32* %2691 to <4 x i32>*
  %2693 = load <4 x i32>, <4 x i32>* %2692, align 4, !alias.scope !121
  %2694 = getelementptr inbounds i32, i32* %2685, i64 -3
  %2695 = bitcast i32* %2694 to <4 x i32>*
  store <4 x i32> %2689, <4 x i32>* %2695, align 4, !alias.scope !124, !noalias !121
  %2696 = getelementptr inbounds i32, i32* %2685, i64 -4
  %2697 = getelementptr inbounds i32, i32* %2696, i64 -3
  %2698 = bitcast i32* %2697 to <4 x i32>*
  store <4 x i32> %2693, <4 x i32>* %2698, align 4, !alias.scope !124, !noalias !121
  %2699 = sub nuw nsw i64 -8, %2681
  %2700 = sub nuw nsw i64 -8, %2681
  %2701 = getelementptr inbounds i32, i32* %2678, i64 %2699
  %2702 = getelementptr inbounds i32, i32* %2679, i64 %2700
  %2703 = getelementptr inbounds i32, i32* %2702, i64 -3
  %2704 = bitcast i32* %2703 to <4 x i32>*
  %2705 = load <4 x i32>, <4 x i32>* %2704, align 4, !alias.scope !121
  %2706 = getelementptr inbounds i32, i32* %2702, i64 -4
  %2707 = getelementptr inbounds i32, i32* %2706, i64 -3
  %2708 = bitcast i32* %2707 to <4 x i32>*
  %2709 = load <4 x i32>, <4 x i32>* %2708, align 4, !alias.scope !121
  %2710 = getelementptr inbounds i32, i32* %2701, i64 -3
  %2711 = bitcast i32* %2710 to <4 x i32>*
  store <4 x i32> %2705, <4 x i32>* %2711, align 4, !alias.scope !124, !noalias !121
  %2712 = getelementptr inbounds i32, i32* %2701, i64 -4
  %2713 = getelementptr inbounds i32, i32* %2712, i64 -3
  %2714 = bitcast i32* %2713 to <4 x i32>*
  store <4 x i32> %2709, <4 x i32>* %2714, align 4, !alias.scope !124, !noalias !121
  %2715 = add i64 %2681, 16
  %2716 = add i64 %2682, -2
  %2717 = icmp eq i64 %2716, 0
  br i1 %2717, label %2718, label %2680, !llvm.loop !126

2718:                                             ; preds = %2680, %2663
  %2719 = phi i64 [ 0, %2663 ], [ %2715, %2680 ]
  %2720 = icmp eq i64 %2672, 0
  br i1 %2720, label %2740, label %2721

2721:                                             ; preds = %2718
  %2722 = sub i64 0, %2719
  %2723 = getelementptr i32, i32* %2633, i64 -1
  %2724 = sub i64 0, %2719
  %2725 = getelementptr i32, i32* %2640, i64 -1
  %2726 = getelementptr inbounds i32, i32* %2723, i64 %2722
  %2727 = getelementptr inbounds i32, i32* %2725, i64 %2724
  %2728 = getelementptr inbounds i32, i32* %2727, i64 -3
  %2729 = bitcast i32* %2728 to <4 x i32>*
  %2730 = load <4 x i32>, <4 x i32>* %2729, align 4, !alias.scope !121
  %2731 = getelementptr inbounds i32, i32* %2727, i64 -4
  %2732 = getelementptr inbounds i32, i32* %2731, i64 -3
  %2733 = bitcast i32* %2732 to <4 x i32>*
  %2734 = load <4 x i32>, <4 x i32>* %2733, align 4, !alias.scope !121
  %2735 = getelementptr inbounds i32, i32* %2726, i64 -3
  %2736 = bitcast i32* %2735 to <4 x i32>*
  store <4 x i32> %2730, <4 x i32>* %2736, align 4, !alias.scope !124, !noalias !121
  %2737 = getelementptr inbounds i32, i32* %2726, i64 -4
  %2738 = getelementptr inbounds i32, i32* %2737, i64 -3
  %2739 = bitcast i32* %2738 to <4 x i32>*
  store <4 x i32> %2734, <4 x i32>* %2739, align 4, !alias.scope !124, !noalias !121
  br label %2740

2740:                                             ; preds = %2718, %2721
  %2741 = icmp eq i64 %2647, %2664
  br i1 %2741, label %2794, label %2742

2742:                                             ; preds = %2740, %2649, %2642
  %2743 = phi i32* [ %2633, %2649 ], [ %2633, %2642 ], [ %2666, %2740 ]
  %2744 = phi i32* [ %2640, %2649 ], [ %2640, %2642 ], [ %2668, %2740 ]
  %2745 = getelementptr i32, i32* %2744, i64 -1
  %2746 = ptrtoint i32* %2745 to i64
  %2747 = sub i64 %2746, %2639
  %2748 = lshr i64 %2747, 2
  %2749 = add nuw nsw i64 %2748, 1
  %2750 = and i64 %2749, 7
  %2751 = icmp eq i64 %2750, 0
  br i1 %2751, label %2761, label %2752

2752:                                             ; preds = %2742, %2752
  %2753 = phi i32* [ %2756, %2752 ], [ %2743, %2742 ]
  %2754 = phi i32* [ %2757, %2752 ], [ %2744, %2742 ]
  %2755 = phi i64 [ %2759, %2752 ], [ %2750, %2742 ]
  %2756 = getelementptr inbounds i32, i32* %2753, i64 -1
  %2757 = getelementptr inbounds i32, i32* %2754, i64 -1
  %2758 = load i32, i32* %2757, align 4
  store i32 %2758, i32* %2756, align 4
  %2759 = add i64 %2755, -1
  %2760 = icmp eq i64 %2759, 0
  br i1 %2760, label %2761, label %2752, !llvm.loop !127

2761:                                             ; preds = %2752, %2742
  %2762 = phi i32* [ undef, %2742 ], [ %2756, %2752 ]
  %2763 = phi i32* [ %2743, %2742 ], [ %2756, %2752 ]
  %2764 = phi i32* [ %2744, %2742 ], [ %2757, %2752 ]
  %2765 = icmp ult i64 %2747, 28
  br i1 %2765, label %2794, label %2766

2766:                                             ; preds = %2761, %2766
  %2767 = phi i32* [ %2790, %2766 ], [ %2763, %2761 ]
  %2768 = phi i32* [ %2791, %2766 ], [ %2764, %2761 ]
  %2769 = getelementptr inbounds i32, i32* %2767, i64 -1
  %2770 = getelementptr inbounds i32, i32* %2768, i64 -1
  %2771 = load i32, i32* %2770, align 4
  store i32 %2771, i32* %2769, align 4
  %2772 = getelementptr inbounds i32, i32* %2767, i64 -2
  %2773 = getelementptr inbounds i32, i32* %2768, i64 -2
  %2774 = load i32, i32* %2773, align 4
  store i32 %2774, i32* %2772, align 4
  %2775 = getelementptr inbounds i32, i32* %2767, i64 -3
  %2776 = getelementptr inbounds i32, i32* %2768, i64 -3
  %2777 = load i32, i32* %2776, align 4
  store i32 %2777, i32* %2775, align 4
  %2778 = getelementptr inbounds i32, i32* %2767, i64 -4
  %2779 = getelementptr inbounds i32, i32* %2768, i64 -4
  %2780 = load i32, i32* %2779, align 4
  store i32 %2780, i32* %2778, align 4
  %2781 = getelementptr inbounds i32, i32* %2767, i64 -5
  %2782 = getelementptr inbounds i32, i32* %2768, i64 -5
  %2783 = load i32, i32* %2782, align 4
  store i32 %2783, i32* %2781, align 4
  %2784 = getelementptr inbounds i32, i32* %2767, i64 -6
  %2785 = getelementptr inbounds i32, i32* %2768, i64 -6
  %2786 = load i32, i32* %2785, align 4
  store i32 %2786, i32* %2784, align 4
  %2787 = getelementptr inbounds i32, i32* %2767, i64 -7
  %2788 = getelementptr inbounds i32, i32* %2768, i64 -7
  %2789 = load i32, i32* %2788, align 4
  store i32 %2789, i32* %2787, align 4
  %2790 = getelementptr inbounds i32, i32* %2767, i64 -8
  %2791 = getelementptr inbounds i32, i32* %2768, i64 -8
  %2792 = load i32, i32* %2791, align 4
  store i32 %2792, i32* %2790, align 4
  %2793 = icmp eq i32* %2791, %2638
  br i1 %2793, label %2794, label %2766, !llvm.loop !128

2794:                                             ; preds = %2761, %2766, %2740
  %2795 = phi i32* [ %2666, %2740 ], [ %2762, %2761 ], [ %2790, %2766 ]
  %2796 = load i64, i64* %57, align 8
  br label %2797

2797:                                             ; preds = %2630, %2794
  %2798 = phi i32* [ %2795, %2794 ], [ %2633, %2630 ]
  %2799 = phi i64 [ %2796, %2794 ], [ %2639, %2630 ]
  %2800 = ptrtoint i32* %2798 to i64
  store i64 %2800, i64* %57, align 8
  store i64 %2637, i64* %56, align 8
  store i64 %2635, i64* %58, align 8
  %2801 = icmp eq i64 %2799, 0
  br i1 %2801, label %2804, label %2802

2802:                                             ; preds = %2797
  %2803 = inttoptr i64 %2799 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %2803) #14
  br label %2804

2804:                                             ; preds = %2596, %2362, %2362, %2362, %2362, %2802, %2797, %2606
  %2805 = phi i32 [ 10, %2606 ], [ 10, %2797 ], [ 10, %2802 ], [ 10, %2362 ], [ 10, %2362 ], [ 10, %2362 ], [ 10, %2362 ], [ 0, %2596 ]
  %2806 = add nsw i64 %127, 1
  br label %3785

2807:                                             ; preds = %123
  %2808 = load i64, i64* %33, align 8, !noalias !129
  %2809 = sub i64 %2808, %131
  %2810 = ashr exact i64 %2809, 2
  %2811 = icmp ult i64 %2810, %127
  br i1 %2811, label %2812, label %2813, !prof !132

2812:                                             ; preds = %2807
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !noalias !133, !srcloc !136
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !noalias !133, !srcloc !137
  unreachable

2813:                                             ; preds = %2807
  %2814 = call i32 @_Z14FXSYS_wcsnicmpPKwS0_m(i32* %129, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.2, i64 0, i64 0), i64 2) #14
  %2815 = icmp eq i32 %2814, 0
  br i1 %2815, label %2816, label %2818

2816:                                             ; preds = %2813
  %2817 = add nsw i64 %127, 2
  br label %3785

2818:                                             ; preds = %2813
  %2819 = call i32 @_Z14FXSYS_wcsnicmpPKwS0_m(i32* %129, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @.str.3, i64 0, i64 0), i64 7) #14
  %2820 = icmp eq i32 %2819, 0
  br i1 %2820, label %2821, label %2823

2821:                                             ; preds = %2818
  %2822 = add nsw i64 %127, 7
  br label %3785

2823:                                             ; preds = %2818
  %2824 = load i64, i64* %60, align 8
  %2825 = load i64, i64* %61, align 8
  %2826 = sub i64 %2824, %2825
  %2827 = icmp eq i64 %2826, 0
  %2828 = shl i64 %2826, 7
  %2829 = add i64 %2828, -1
  %2830 = select i1 %2827, i64 0, i64 %2829
  %2831 = load i64, i64* %41, align 8
  %2832 = load i64, i64* %42, align 8
  %2833 = add i64 %2832, %2831
  %2834 = icmp eq i64 %2830, %2833
  %2835 = inttoptr i64 %2825 to i32**
  %2836 = inttoptr i64 %2824 to i32**
  br i1 %2834, label %2837, label %2843

2837:                                             ; preds = %2823
  call void @_ZNSt3__15dequeIwNS_9allocatorIwEEE19__add_back_capacityEv(%"class.std::__1::deque"* nonnull %62) #14
  %2838 = load i64, i64* %42, align 8
  %2839 = load i64, i64* %41, align 8
  %2840 = load i32**, i32*** %39, align 8
  %2841 = load i32**, i32*** %40, align 8
  %2842 = add i64 %2839, %2838
  br label %2843

2843:                                             ; preds = %2837, %2823
  %2844 = phi i64 [ %2842, %2837 ], [ %2833, %2823 ]
  %2845 = phi i32** [ %2841, %2837 ], [ %2836, %2823 ]
  %2846 = phi i32** [ %2840, %2837 ], [ %2835, %2823 ]
  %2847 = icmp eq i32** %2845, %2846
  br i1 %2847, label %2854, label %2848

2848:                                             ; preds = %2843
  %2849 = lshr i64 %2844, 10
  %2850 = getelementptr inbounds i32*, i32** %2846, i64 %2849
  %2851 = load i32*, i32** %2850, align 8
  %2852 = and i64 %2844, 1023
  %2853 = getelementptr inbounds i32, i32* %2851, i64 %2852
  br label %2854

2854:                                             ; preds = %2843, %2848
  %2855 = phi i32* [ %2853, %2848 ], [ null, %2843 ]
  store i32 62, i32* %2855, align 4
  %2856 = load i64, i64* %42, align 8
  %2857 = add i64 %2856, 1
  store i64 %2857, i64* %42, align 8
  br label %3785

2858:                                             ; preds = %123
  %2859 = load i64, i64* %33, align 8, !noalias !138
  %2860 = sub i64 %2859, %131
  %2861 = ashr exact i64 %2860, 2
  %2862 = icmp ult i64 %2861, %127
  br i1 %2862, label %2863, label %2864, !prof !132

2863:                                             ; preds = %2858
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !noalias !141, !srcloc !136
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !noalias !141, !srcloc !137
  unreachable

2864:                                             ; preds = %2858
  %2865 = call i32 @_Z14FXSYS_wcsnicmpPKwS0_m(i32* %129, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.4, i64 0, i64 0), i64 3) #14
  %2866 = icmp eq i32 %2865, 0
  br i1 %2866, label %2867, label %3083

2867:                                             ; preds = %2864
  %2868 = add nsw i64 %127, 3
  %2869 = load %"class.fxcrt::TreeNode"*, %"class.fxcrt::TreeNode"** %63, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64) #14
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %65, align 8, !alias.scope !144
  %2870 = load i32*, i32** %59, align 8, !noalias !144
  %2871 = load i64, i64* %56, align 8, !noalias !144
  %2872 = ptrtoint i32* %2870 to i64
  %2873 = sub i64 %2871, %2872
  %2874 = ashr exact i64 %2873, 2
  call void @_ZN5fxcrt10WideStringC1EPKwm(%"class.fxcrt::WideString"* nonnull %17, i32* %2870, i64 %2874) #14
  store i32 -1, i32* %66, align 8, !noalias !144
  %2875 = load i64, i64* %57, align 8, !noalias !144
  store i64 %2875, i64* %56, align 8, !noalias !144
  %2876 = load i64, i64* %58, align 8, !noalias !144
  %2877 = sub i64 %2876, %2875
  %2878 = ashr exact i64 %2877, 2
  %2879 = icmp ult i64 %2878, 128
  br i1 %2879, label %2880, label %3057

2880:                                             ; preds = %2867
  %2881 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 128, i64 4) #14
  %2882 = ptrtoint i8* %2881 to i64
  %2883 = getelementptr inbounds i8, i8* %2881, i64 512
  %2884 = ptrtoint i8* %2883 to i64
  %2885 = load i32*, i32** %59, align 8, !noalias !144
  %2886 = ptrtoint i32* %2885 to i64
  %2887 = load i32*, i32** %53, align 8, !noalias !144
  %2888 = bitcast i32* %2887 to i8*
  %2889 = icmp eq i32* %2887, %2885
  br i1 %2889, label %3051, label %2890

2890:                                             ; preds = %2880
  %2891 = bitcast i8* %2881 to i32*
  %2892 = getelementptr i32, i32* %2887, i64 -1
  %2893 = ptrtoint i32* %2892 to i64
  %2894 = sub i64 %2893, %2886
  %2895 = lshr i64 %2894, 2
  %2896 = add nuw nsw i64 %2895, 1
  %2897 = icmp ult i64 %2896, 8
  br i1 %2897, label %2995, label %2898

2898:                                             ; preds = %2890
  %2899 = getelementptr i8, i8* %2881, i64 -4
  %2900 = getelementptr i32, i32* %2887, i64 -1
  %2901 = ptrtoint i32* %2900 to i64
  %2902 = sub i64 %2901, %2886
  %2903 = lshr i64 %2902, 2
  %2904 = mul i64 %2903, -4
  %2905 = getelementptr i8, i8* %2899, i64 %2904
  %2906 = getelementptr i32, i32* %2887, i64 -1
  %2907 = sub nsw i64 0, %2903
  %2908 = getelementptr i32, i32* %2906, i64 %2907
  %2909 = bitcast i32* %2908 to i8*
  %2910 = icmp ult i8* %2905, %2888
  %2911 = icmp ugt i8* %2881, %2909
  %2912 = and i1 %2910, %2911
  br i1 %2912, label %2995, label %2913

2913:                                             ; preds = %2898
  %2914 = and i64 %2896, 9223372036854775800
  %2915 = sub nsw i64 0, %2914
  %2916 = getelementptr i32, i32* %2891, i64 %2915
  %2917 = sub nsw i64 0, %2914
  %2918 = getelementptr i32, i32* %2887, i64 %2917
  %2919 = add nsw i64 %2914, -8
  %2920 = lshr exact i64 %2919, 3
  %2921 = add nuw nsw i64 %2920, 1
  %2922 = and i64 %2921, 1
  %2923 = icmp eq i64 %2919, 0
  br i1 %2923, label %2970, label %2924

2924:                                             ; preds = %2913
  %2925 = sub nuw nsw i64 %2921, %2922
  %2926 = getelementptr i8, i8* %2881, i64 -4
  %2927 = bitcast i8* %2926 to i32*
  %2928 = getelementptr i32, i32* %2887, i64 -1
  %2929 = getelementptr i8, i8* %2881, i64 -4
  %2930 = bitcast i8* %2929 to i32*
  %2931 = getelementptr i32, i32* %2887, i64 -1
  br label %2932

2932:                                             ; preds = %2932, %2924
  %2933 = phi i64 [ 0, %2924 ], [ %2967, %2932 ]
  %2934 = phi i64 [ %2925, %2924 ], [ %2968, %2932 ]
  %2935 = sub i64 0, %2933
  %2936 = sub i64 0, %2933
  %2937 = getelementptr inbounds i32, i32* %2927, i64 %2935
  %2938 = getelementptr inbounds i32, i32* %2928, i64 %2936
  %2939 = getelementptr inbounds i32, i32* %2938, i64 -3
  %2940 = bitcast i32* %2939 to <4 x i32>*
  %2941 = load <4 x i32>, <4 x i32>* %2940, align 4, !alias.scope !147
  %2942 = getelementptr inbounds i32, i32* %2938, i64 -4
  %2943 = getelementptr inbounds i32, i32* %2942, i64 -3
  %2944 = bitcast i32* %2943 to <4 x i32>*
  %2945 = load <4 x i32>, <4 x i32>* %2944, align 4, !alias.scope !147
  %2946 = getelementptr inbounds i32, i32* %2937, i64 -3
  %2947 = bitcast i32* %2946 to <4 x i32>*
  store <4 x i32> %2941, <4 x i32>* %2947, align 4, !alias.scope !150, !noalias !147
  %2948 = getelementptr inbounds i32, i32* %2937, i64 -4
  %2949 = getelementptr inbounds i32, i32* %2948, i64 -3
  %2950 = bitcast i32* %2949 to <4 x i32>*
  store <4 x i32> %2945, <4 x i32>* %2950, align 4, !alias.scope !150, !noalias !147
  %2951 = sub nuw nsw i64 -8, %2933
  %2952 = sub nuw nsw i64 -8, %2933
  %2953 = getelementptr inbounds i32, i32* %2930, i64 %2951
  %2954 = getelementptr inbounds i32, i32* %2931, i64 %2952
  %2955 = getelementptr inbounds i32, i32* %2954, i64 -3
  %2956 = bitcast i32* %2955 to <4 x i32>*
  %2957 = load <4 x i32>, <4 x i32>* %2956, align 4, !alias.scope !147
  %2958 = getelementptr inbounds i32, i32* %2954, i64 -4
  %2959 = getelementptr inbounds i32, i32* %2958, i64 -3
  %2960 = bitcast i32* %2959 to <4 x i32>*
  %2961 = load <4 x i32>, <4 x i32>* %2960, align 4, !alias.scope !147
  %2962 = getelementptr inbounds i32, i32* %2953, i64 -3
  %2963 = bitcast i32* %2962 to <4 x i32>*
  store <4 x i32> %2957, <4 x i32>* %2963, align 4, !alias.scope !150, !noalias !147
  %2964 = getelementptr inbounds i32, i32* %2953, i64 -4
  %2965 = getelementptr inbounds i32, i32* %2964, i64 -3
  %2966 = bitcast i32* %2965 to <4 x i32>*
  store <4 x i32> %2961, <4 x i32>* %2966, align 4, !alias.scope !150, !noalias !147
  %2967 = add i64 %2933, 16
  %2968 = add i64 %2934, -2
  %2969 = icmp eq i64 %2968, 0
  br i1 %2969, label %2970, label %2932, !llvm.loop !152

2970:                                             ; preds = %2932, %2913
  %2971 = phi i64 [ 0, %2913 ], [ %2967, %2932 ]
  %2972 = icmp eq i64 %2922, 0
  br i1 %2972, label %2993, label %2973

2973:                                             ; preds = %2970
  %2974 = sub i64 0, %2971
  %2975 = getelementptr i8, i8* %2881, i64 -4
  %2976 = bitcast i8* %2975 to i32*
  %2977 = sub i64 0, %2971
  %2978 = getelementptr i32, i32* %2887, i64 -1
  %2979 = getelementptr inbounds i32, i32* %2976, i64 %2974
  %2980 = getelementptr inbounds i32, i32* %2978, i64 %2977
  %2981 = getelementptr inbounds i32, i32* %2980, i64 -3
  %2982 = bitcast i32* %2981 to <4 x i32>*
  %2983 = load <4 x i32>, <4 x i32>* %2982, align 4, !alias.scope !147
  %2984 = getelementptr inbounds i32, i32* %2980, i64 -4
  %2985 = getelementptr inbounds i32, i32* %2984, i64 -3
  %2986 = bitcast i32* %2985 to <4 x i32>*
  %2987 = load <4 x i32>, <4 x i32>* %2986, align 4, !alias.scope !147
  %2988 = getelementptr inbounds i32, i32* %2979, i64 -3
  %2989 = bitcast i32* %2988 to <4 x i32>*
  store <4 x i32> %2983, <4 x i32>* %2989, align 4, !alias.scope !150, !noalias !147
  %2990 = getelementptr inbounds i32, i32* %2979, i64 -4
  %2991 = getelementptr inbounds i32, i32* %2990, i64 -3
  %2992 = bitcast i32* %2991 to <4 x i32>*
  store <4 x i32> %2987, <4 x i32>* %2992, align 4, !alias.scope !150, !noalias !147
  br label %2993

2993:                                             ; preds = %2970, %2973
  %2994 = icmp eq i64 %2896, %2914
  br i1 %2994, label %3047, label %2995

2995:                                             ; preds = %2993, %2898, %2890
  %2996 = phi i32* [ %2891, %2898 ], [ %2891, %2890 ], [ %2916, %2993 ]
  %2997 = phi i32* [ %2887, %2898 ], [ %2887, %2890 ], [ %2918, %2993 ]
  %2998 = getelementptr i32, i32* %2997, i64 -1
  %2999 = ptrtoint i32* %2998 to i64
  %3000 = sub i64 %2999, %2886
  %3001 = lshr i64 %3000, 2
  %3002 = add nuw nsw i64 %3001, 1
  %3003 = and i64 %3002, 7
  %3004 = icmp eq i64 %3003, 0
  br i1 %3004, label %3014, label %3005

3005:                                             ; preds = %2995, %3005
  %3006 = phi i32* [ %3009, %3005 ], [ %2996, %2995 ]
  %3007 = phi i32* [ %3010, %3005 ], [ %2997, %2995 ]
  %3008 = phi i64 [ %3012, %3005 ], [ %3003, %2995 ]
  %3009 = getelementptr inbounds i32, i32* %3006, i64 -1
  %3010 = getelementptr inbounds i32, i32* %3007, i64 -1
  %3011 = load i32, i32* %3010, align 4
  store i32 %3011, i32* %3009, align 4
  %3012 = add i64 %3008, -1
  %3013 = icmp eq i64 %3012, 0
  br i1 %3013, label %3014, label %3005, !llvm.loop !153

3014:                                             ; preds = %3005, %2995
  %3015 = phi i32* [ undef, %2995 ], [ %3009, %3005 ]
  %3016 = phi i32* [ %2996, %2995 ], [ %3009, %3005 ]
  %3017 = phi i32* [ %2997, %2995 ], [ %3010, %3005 ]
  %3018 = icmp ult i64 %3000, 28
  br i1 %3018, label %3047, label %3019

3019:                                             ; preds = %3014, %3019
  %3020 = phi i32* [ %3043, %3019 ], [ %3016, %3014 ]
  %3021 = phi i32* [ %3044, %3019 ], [ %3017, %3014 ]
  %3022 = getelementptr inbounds i32, i32* %3020, i64 -1
  %3023 = getelementptr inbounds i32, i32* %3021, i64 -1
  %3024 = load i32, i32* %3023, align 4
  store i32 %3024, i32* %3022, align 4
  %3025 = getelementptr inbounds i32, i32* %3020, i64 -2
  %3026 = getelementptr inbounds i32, i32* %3021, i64 -2
  %3027 = load i32, i32* %3026, align 4
  store i32 %3027, i32* %3025, align 4
  %3028 = getelementptr inbounds i32, i32* %3020, i64 -3
  %3029 = getelementptr inbounds i32, i32* %3021, i64 -3
  %3030 = load i32, i32* %3029, align 4
  store i32 %3030, i32* %3028, align 4
  %3031 = getelementptr inbounds i32, i32* %3020, i64 -4
  %3032 = getelementptr inbounds i32, i32* %3021, i64 -4
  %3033 = load i32, i32* %3032, align 4
  store i32 %3033, i32* %3031, align 4
  %3034 = getelementptr inbounds i32, i32* %3020, i64 -5
  %3035 = getelementptr inbounds i32, i32* %3021, i64 -5
  %3036 = load i32, i32* %3035, align 4
  store i32 %3036, i32* %3034, align 4
  %3037 = getelementptr inbounds i32, i32* %3020, i64 -6
  %3038 = getelementptr inbounds i32, i32* %3021, i64 -6
  %3039 = load i32, i32* %3038, align 4
  store i32 %3039, i32* %3037, align 4
  %3040 = getelementptr inbounds i32, i32* %3020, i64 -7
  %3041 = getelementptr inbounds i32, i32* %3021, i64 -7
  %3042 = load i32, i32* %3041, align 4
  store i32 %3042, i32* %3040, align 4
  %3043 = getelementptr inbounds i32, i32* %3020, i64 -8
  %3044 = getelementptr inbounds i32, i32* %3021, i64 -8
  %3045 = load i32, i32* %3044, align 4
  store i32 %3045, i32* %3043, align 4
  %3046 = icmp eq i32* %3044, %2885
  br i1 %3046, label %3047, label %3019, !llvm.loop !154

3047:                                             ; preds = %3014, %3019, %2993
  %3048 = phi i32* [ %2916, %2993 ], [ %3015, %3014 ], [ %3043, %3019 ]
  %3049 = ptrtoint i32* %3048 to i64
  %3050 = load i64, i64* %57, align 8, !noalias !144
  br label %3051

3051:                                             ; preds = %2880, %3047
  %3052 = phi i64 [ %3049, %3047 ], [ %2882, %2880 ]
  %3053 = phi i64 [ %3050, %3047 ], [ %2886, %2880 ]
  store i64 %3052, i64* %57, align 8, !noalias !144
  store i64 %2882, i64* %56, align 8, !noalias !144
  store i64 %2884, i64* %58, align 8, !noalias !144
  %3054 = icmp eq i64 %3053, 0
  br i1 %3054, label %3057, label %3055

3055:                                             ; preds = %3051
  %3056 = inttoptr i64 %3053 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %3056) #14
  br label %3057

3057:                                             ; preds = %2867, %3051, %3055
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %67) #14
  %3058 = call i8* @_Znwm(i64 56) #13
  %3059 = bitcast i8* %3058 to %class.CFX_XMLCharData*
  call void @_ZN15CFX_XMLCharDataC1ERKN5fxcrt10WideStringE(%class.CFX_XMLCharData* nonnull %3059, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %17) #14
  %3060 = ptrtoint i8* %3058 to i64
  store i64 %3060, i64* %68, align 8
  %3061 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %69, align 8
  %3062 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %70, align 8
  %3063 = icmp ult %"class.std::__1::unique_ptr.15"* %3061, %3062
  br i1 %3063, label %3064, label %3068

3064:                                             ; preds = %3057
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %72, align 8
  %3065 = bitcast %"class.std::__1::unique_ptr.15"* %3061 to i64*
  store i64 %3060, i64* %3065, align 8
  %3066 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %3061, i64 1
  %3067 = ptrtoint %"class.std::__1::unique_ptr.15"* %3066 to i64
  store i64 %3067, i64* %73, align 8
  br label %3069

3068:                                             ; preds = %3057
  call void @_ZNSt3__16vectorINS_10unique_ptrI11CFX_XMLNodeNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.13"* %71, %"class.std::__1::unique_ptr.15"* nonnull dereferenceable(8) %3) #14
  br label %3069

3069:                                             ; preds = %3068, %3064
  %3070 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %72, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %72, align 8
  %3071 = icmp eq %class.CFX_XMLNode* %3070, null
  br i1 %3071, label %3077, label %3072

3072:                                             ; preds = %3069
  %3073 = bitcast %class.CFX_XMLNode* %3070 to void (%class.CFX_XMLNode*)***
  %3074 = load void (%class.CFX_XMLNode*)**, void (%class.CFX_XMLNode*)*** %3073, align 8
  %3075 = getelementptr inbounds void (%class.CFX_XMLNode*)*, void (%class.CFX_XMLNode*)** %3074, i64 1
  %3076 = load void (%class.CFX_XMLNode*)*, void (%class.CFX_XMLNode*)** %3075, align 8
  call void %3076(%class.CFX_XMLNode* nonnull %3070) #14
  br label %3077

3077:                                             ; preds = %3069, %3072
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %67) #14
  %3078 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %69, align 8
  %3079 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %3078, i64 -1, i32 0, i32 0, i32 0
  %3080 = bitcast %class.CFX_XMLNode** %3079 to %class.CFX_XMLCharData**
  %3081 = load %class.CFX_XMLCharData*, %class.CFX_XMLCharData** %3080, align 8
  %3082 = getelementptr inbounds %class.CFX_XMLCharData, %class.CFX_XMLCharData* %3081, i64 0, i32 0, i32 0
  call void @_ZN5fxcrt8TreeNodeI11CFX_XMLNodePS1_E15AppendLastChildES2_(%"class.fxcrt::TreeNode"* %2869, %class.CFX_XMLNode* %3082)
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %17) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %64) #14
  br label %3785

3083:                                             ; preds = %2864
  %3084 = load i32*, i32** %53, align 8
  %3085 = load i32*, i32** %55, align 8
  %3086 = icmp eq i32* %3084, %3085
  %3087 = ptrtoint i32* %3085 to i64
  br i1 %3086, label %3091, label %3088

3088:                                             ; preds = %3083
  store i32 %130, i32* %3084, align 4
  %3089 = getelementptr inbounds i32, i32* %3084, i64 1
  %3090 = ptrtoint i32* %3089 to i64
  store i64 %3090, i64* %56, align 8
  br label %3287

3091:                                             ; preds = %3083
  %3092 = ptrtoint i32* %3084 to i64
  %3093 = load i64, i64* %57, align 8
  %3094 = sub i64 %3092, %3093
  %3095 = ashr exact i64 %3094, 2
  %3096 = add nsw i64 %3095, 1
  %3097 = icmp ugt i64 %3096, 4611686018427387903
  br i1 %3097, label %3098, label %3100

3098:                                             ; preds = %3091
  %3099 = bitcast %"class.std::__1::vector"* %54 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %3099) #15
  unreachable

3100:                                             ; preds = %3091
  %3101 = sub i64 %3087, %3093
  %3102 = ashr exact i64 %3101, 2
  %3103 = icmp ult i64 %3102, 2305843009213693951
  br i1 %3103, label %3104, label %3109

3104:                                             ; preds = %3100
  %3105 = ashr exact i64 %3101, 1
  %3106 = icmp ult i64 %3105, %3096
  %3107 = select i1 %3106, i64 %3096, i64 %3105
  %3108 = icmp eq i64 %3107, 0
  br i1 %3108, label %3113, label %3109

3109:                                             ; preds = %3104, %3100
  %3110 = phi i64 [ %3107, %3104 ], [ 4611686018427387903, %3100 ]
  %3111 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %3110, i64 4) #14
  %3112 = bitcast i8* %3111 to i32*
  br label %3113

3113:                                             ; preds = %3109, %3104
  %3114 = phi i64 [ %3110, %3109 ], [ 0, %3104 ]
  %3115 = phi i32* [ %3112, %3109 ], [ null, %3104 ]
  %3116 = getelementptr inbounds i32, i32* %3115, i64 %3095
  %3117 = getelementptr inbounds i32, i32* %3115, i64 %3114
  %3118 = ptrtoint i32* %3117 to i64
  store i32 %130, i32* %3116, align 4
  %3119 = getelementptr inbounds i32, i32* %3116, i64 1
  %3120 = ptrtoint i32* %3119 to i64
  %3121 = load i32*, i32** %59, align 8
  %3122 = ptrtoint i32* %3121 to i64
  %3123 = load i32*, i32** %53, align 8
  %3124 = icmp eq i32* %3123, %3121
  br i1 %3124, label %3280, label %3125

3125:                                             ; preds = %3113
  %3126 = getelementptr i32, i32* %3123, i64 -1
  %3127 = ptrtoint i32* %3126 to i64
  %3128 = sub i64 %3127, %3122
  %3129 = lshr i64 %3128, 2
  %3130 = add nuw nsw i64 %3129, 1
  %3131 = icmp ult i64 %3130, 8
  br i1 %3131, label %3225, label %3132

3132:                                             ; preds = %3125
  %3133 = getelementptr i32, i32* %3115, i64 -1
  %3134 = getelementptr i32, i32* %3123, i64 -1
  %3135 = ptrtoint i32* %3134 to i64
  %3136 = sub i64 %3135, %3122
  %3137 = lshr i64 %3136, 2
  %3138 = sub nsw i64 %3095, %3137
  %3139 = getelementptr i32, i32* %3133, i64 %3138
  %3140 = getelementptr i32, i32* %3123, i64 -1
  %3141 = sub nsw i64 0, %3137
  %3142 = getelementptr i32, i32* %3140, i64 %3141
  %3143 = icmp ult i32* %3139, %3123
  %3144 = icmp ult i32* %3142, %3116
  %3145 = and i1 %3143, %3144
  br i1 %3145, label %3225, label %3146

3146:                                             ; preds = %3132
  %3147 = and i64 %3130, 9223372036854775800
  %3148 = sub nsw i64 0, %3147
  %3149 = getelementptr i32, i32* %3116, i64 %3148
  %3150 = sub nsw i64 0, %3147
  %3151 = getelementptr i32, i32* %3123, i64 %3150
  %3152 = add nsw i64 %3147, -8
  %3153 = lshr exact i64 %3152, 3
  %3154 = add nuw nsw i64 %3153, 1
  %3155 = and i64 %3154, 1
  %3156 = icmp eq i64 %3152, 0
  br i1 %3156, label %3201, label %3157

3157:                                             ; preds = %3146
  %3158 = sub nuw nsw i64 %3154, %3155
  %3159 = getelementptr i32, i32* %3116, i64 -1
  %3160 = getelementptr i32, i32* %3123, i64 -1
  %3161 = getelementptr i32, i32* %3116, i64 -1
  %3162 = getelementptr i32, i32* %3123, i64 -1
  br label %3163

3163:                                             ; preds = %3163, %3157
  %3164 = phi i64 [ 0, %3157 ], [ %3198, %3163 ]
  %3165 = phi i64 [ %3158, %3157 ], [ %3199, %3163 ]
  %3166 = sub i64 0, %3164
  %3167 = sub i64 0, %3164
  %3168 = getelementptr inbounds i32, i32* %3159, i64 %3166
  %3169 = getelementptr inbounds i32, i32* %3160, i64 %3167
  %3170 = getelementptr inbounds i32, i32* %3169, i64 -3
  %3171 = bitcast i32* %3170 to <4 x i32>*
  %3172 = load <4 x i32>, <4 x i32>* %3171, align 4, !alias.scope !155
  %3173 = getelementptr inbounds i32, i32* %3169, i64 -4
  %3174 = getelementptr inbounds i32, i32* %3173, i64 -3
  %3175 = bitcast i32* %3174 to <4 x i32>*
  %3176 = load <4 x i32>, <4 x i32>* %3175, align 4, !alias.scope !155
  %3177 = getelementptr inbounds i32, i32* %3168, i64 -3
  %3178 = bitcast i32* %3177 to <4 x i32>*
  store <4 x i32> %3172, <4 x i32>* %3178, align 4, !alias.scope !158, !noalias !155
  %3179 = getelementptr inbounds i32, i32* %3168, i64 -4
  %3180 = getelementptr inbounds i32, i32* %3179, i64 -3
  %3181 = bitcast i32* %3180 to <4 x i32>*
  store <4 x i32> %3176, <4 x i32>* %3181, align 4, !alias.scope !158, !noalias !155
  %3182 = sub nuw nsw i64 -8, %3164
  %3183 = sub nuw nsw i64 -8, %3164
  %3184 = getelementptr inbounds i32, i32* %3161, i64 %3182
  %3185 = getelementptr inbounds i32, i32* %3162, i64 %3183
  %3186 = getelementptr inbounds i32, i32* %3185, i64 -3
  %3187 = bitcast i32* %3186 to <4 x i32>*
  %3188 = load <4 x i32>, <4 x i32>* %3187, align 4, !alias.scope !155
  %3189 = getelementptr inbounds i32, i32* %3185, i64 -4
  %3190 = getelementptr inbounds i32, i32* %3189, i64 -3
  %3191 = bitcast i32* %3190 to <4 x i32>*
  %3192 = load <4 x i32>, <4 x i32>* %3191, align 4, !alias.scope !155
  %3193 = getelementptr inbounds i32, i32* %3184, i64 -3
  %3194 = bitcast i32* %3193 to <4 x i32>*
  store <4 x i32> %3188, <4 x i32>* %3194, align 4, !alias.scope !158, !noalias !155
  %3195 = getelementptr inbounds i32, i32* %3184, i64 -4
  %3196 = getelementptr inbounds i32, i32* %3195, i64 -3
  %3197 = bitcast i32* %3196 to <4 x i32>*
  store <4 x i32> %3192, <4 x i32>* %3197, align 4, !alias.scope !158, !noalias !155
  %3198 = add i64 %3164, 16
  %3199 = add i64 %3165, -2
  %3200 = icmp eq i64 %3199, 0
  br i1 %3200, label %3201, label %3163, !llvm.loop !160

3201:                                             ; preds = %3163, %3146
  %3202 = phi i64 [ 0, %3146 ], [ %3198, %3163 ]
  %3203 = icmp eq i64 %3155, 0
  br i1 %3203, label %3223, label %3204

3204:                                             ; preds = %3201
  %3205 = sub i64 0, %3202
  %3206 = getelementptr i32, i32* %3116, i64 -1
  %3207 = sub i64 0, %3202
  %3208 = getelementptr i32, i32* %3123, i64 -1
  %3209 = getelementptr inbounds i32, i32* %3206, i64 %3205
  %3210 = getelementptr inbounds i32, i32* %3208, i64 %3207
  %3211 = getelementptr inbounds i32, i32* %3210, i64 -3
  %3212 = bitcast i32* %3211 to <4 x i32>*
  %3213 = load <4 x i32>, <4 x i32>* %3212, align 4, !alias.scope !155
  %3214 = getelementptr inbounds i32, i32* %3210, i64 -4
  %3215 = getelementptr inbounds i32, i32* %3214, i64 -3
  %3216 = bitcast i32* %3215 to <4 x i32>*
  %3217 = load <4 x i32>, <4 x i32>* %3216, align 4, !alias.scope !155
  %3218 = getelementptr inbounds i32, i32* %3209, i64 -3
  %3219 = bitcast i32* %3218 to <4 x i32>*
  store <4 x i32> %3213, <4 x i32>* %3219, align 4, !alias.scope !158, !noalias !155
  %3220 = getelementptr inbounds i32, i32* %3209, i64 -4
  %3221 = getelementptr inbounds i32, i32* %3220, i64 -3
  %3222 = bitcast i32* %3221 to <4 x i32>*
  store <4 x i32> %3217, <4 x i32>* %3222, align 4, !alias.scope !158, !noalias !155
  br label %3223

3223:                                             ; preds = %3201, %3204
  %3224 = icmp eq i64 %3130, %3147
  br i1 %3224, label %3277, label %3225

3225:                                             ; preds = %3223, %3132, %3125
  %3226 = phi i32* [ %3116, %3132 ], [ %3116, %3125 ], [ %3149, %3223 ]
  %3227 = phi i32* [ %3123, %3132 ], [ %3123, %3125 ], [ %3151, %3223 ]
  %3228 = getelementptr i32, i32* %3227, i64 -1
  %3229 = ptrtoint i32* %3228 to i64
  %3230 = sub i64 %3229, %3122
  %3231 = lshr i64 %3230, 2
  %3232 = add nuw nsw i64 %3231, 1
  %3233 = and i64 %3232, 7
  %3234 = icmp eq i64 %3233, 0
  br i1 %3234, label %3244, label %3235

3235:                                             ; preds = %3225, %3235
  %3236 = phi i32* [ %3239, %3235 ], [ %3226, %3225 ]
  %3237 = phi i32* [ %3240, %3235 ], [ %3227, %3225 ]
  %3238 = phi i64 [ %3242, %3235 ], [ %3233, %3225 ]
  %3239 = getelementptr inbounds i32, i32* %3236, i64 -1
  %3240 = getelementptr inbounds i32, i32* %3237, i64 -1
  %3241 = load i32, i32* %3240, align 4
  store i32 %3241, i32* %3239, align 4
  %3242 = add i64 %3238, -1
  %3243 = icmp eq i64 %3242, 0
  br i1 %3243, label %3244, label %3235, !llvm.loop !161

3244:                                             ; preds = %3235, %3225
  %3245 = phi i32* [ undef, %3225 ], [ %3239, %3235 ]
  %3246 = phi i32* [ %3226, %3225 ], [ %3239, %3235 ]
  %3247 = phi i32* [ %3227, %3225 ], [ %3240, %3235 ]
  %3248 = icmp ult i64 %3230, 28
  br i1 %3248, label %3277, label %3249

3249:                                             ; preds = %3244, %3249
  %3250 = phi i32* [ %3273, %3249 ], [ %3246, %3244 ]
  %3251 = phi i32* [ %3274, %3249 ], [ %3247, %3244 ]
  %3252 = getelementptr inbounds i32, i32* %3250, i64 -1
  %3253 = getelementptr inbounds i32, i32* %3251, i64 -1
  %3254 = load i32, i32* %3253, align 4
  store i32 %3254, i32* %3252, align 4
  %3255 = getelementptr inbounds i32, i32* %3250, i64 -2
  %3256 = getelementptr inbounds i32, i32* %3251, i64 -2
  %3257 = load i32, i32* %3256, align 4
  store i32 %3257, i32* %3255, align 4
  %3258 = getelementptr inbounds i32, i32* %3250, i64 -3
  %3259 = getelementptr inbounds i32, i32* %3251, i64 -3
  %3260 = load i32, i32* %3259, align 4
  store i32 %3260, i32* %3258, align 4
  %3261 = getelementptr inbounds i32, i32* %3250, i64 -4
  %3262 = getelementptr inbounds i32, i32* %3251, i64 -4
  %3263 = load i32, i32* %3262, align 4
  store i32 %3263, i32* %3261, align 4
  %3264 = getelementptr inbounds i32, i32* %3250, i64 -5
  %3265 = getelementptr inbounds i32, i32* %3251, i64 -5
  %3266 = load i32, i32* %3265, align 4
  store i32 %3266, i32* %3264, align 4
  %3267 = getelementptr inbounds i32, i32* %3250, i64 -6
  %3268 = getelementptr inbounds i32, i32* %3251, i64 -6
  %3269 = load i32, i32* %3268, align 4
  store i32 %3269, i32* %3267, align 4
  %3270 = getelementptr inbounds i32, i32* %3250, i64 -7
  %3271 = getelementptr inbounds i32, i32* %3251, i64 -7
  %3272 = load i32, i32* %3271, align 4
  store i32 %3272, i32* %3270, align 4
  %3273 = getelementptr inbounds i32, i32* %3250, i64 -8
  %3274 = getelementptr inbounds i32, i32* %3251, i64 -8
  %3275 = load i32, i32* %3274, align 4
  store i32 %3275, i32* %3273, align 4
  %3276 = icmp eq i32* %3274, %3121
  br i1 %3276, label %3277, label %3249, !llvm.loop !162

3277:                                             ; preds = %3244, %3249, %3223
  %3278 = phi i32* [ %3149, %3223 ], [ %3245, %3244 ], [ %3273, %3249 ]
  %3279 = load i64, i64* %57, align 8
  br label %3280

3280:                                             ; preds = %3113, %3277
  %3281 = phi i32* [ %3278, %3277 ], [ %3116, %3113 ]
  %3282 = phi i64 [ %3279, %3277 ], [ %3122, %3113 ]
  %3283 = ptrtoint i32* %3281 to i64
  store i64 %3283, i64* %57, align 8
  store i64 %3120, i64* %56, align 8
  store i64 %3118, i64* %58, align 8
  %3284 = icmp eq i64 %3282, 0
  br i1 %3284, label %3287, label %3285

3285:                                             ; preds = %3280
  %3286 = inttoptr i64 %3282 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %3286) #14
  br label %3287

3287:                                             ; preds = %3088, %3280, %3285
  %3288 = add nsw i64 %127, 1
  br label %3785

3289:                                             ; preds = %123
  switch i32 %124, label %3330 [
    i32 39, label %3290
    i32 34, label %3290
  ]

3290:                                             ; preds = %3289, %3289
  %3291 = add nsw i64 %127, 1
  %3292 = icmp eq i32 %130, %124
  br i1 %3292, label %3293, label %3785

3293:                                             ; preds = %3290
  %3294 = load i64, i64* %42, align 8
  %3295 = load i64, i64* %41, align 8
  %3296 = add i64 %3294, -1
  store i64 %3296, i64* %42, align 8
  %3297 = load i64, i64* %60, align 8
  %3298 = load i64, i64* %61, align 8
  %3299 = sub i64 %3297, %3298
  %3300 = icmp eq i64 %3299, 0
  %3301 = shl i64 %3299, 7
  %3302 = add i64 %3301, -1
  %3303 = select i1 %3300, i64 0, i64 %3302
  %3304 = sub i64 1, %3294
  %3305 = sub i64 %3304, %3295
  %3306 = add i64 %3305, %3303
  %3307 = icmp ult i64 %3306, 2048
  br i1 %3307, label %3316, label %3308

3308:                                             ; preds = %3293
  %3309 = inttoptr i64 %3297 to i32**
  %3310 = getelementptr inbounds i32*, i32** %3309, i64 -1
  %3311 = bitcast i32** %3310 to i8**
  %3312 = load i8*, i8** %3311, align 8
  call void @_ZdlPv(i8* %3312) #13
  %3313 = load i32**, i32*** %40, align 8
  %3314 = getelementptr i32*, i32** %3313, i64 -1
  store i32** %3314, i32*** %40, align 8
  %3315 = load i64, i64* %42, align 8
  br label %3316

3316:                                             ; preds = %3293, %3308
  %3317 = phi i64 [ %3296, %3293 ], [ %3315, %3308 ]
  %3318 = icmp eq i64 %3317, 0
  br i1 %3318, label %3785, label %3319

3319:                                             ; preds = %3316
  %3320 = load i64, i64* %41, align 8
  %3321 = add i64 %3317, -1
  %3322 = add i64 %3321, %3320
  %3323 = load i32**, i32*** %39, align 8
  %3324 = lshr i64 %3322, 10
  %3325 = getelementptr inbounds i32*, i32** %3323, i64 %3324
  %3326 = load i32*, i32** %3325, align 8
  %3327 = and i64 %3322, 1023
  %3328 = getelementptr inbounds i32, i32* %3326, i64 %3327
  %3329 = load i32, i32* %3328, align 4
  br label %3785

3330:                                             ; preds = %3289
  switch i32 %130, label %3506 [
    i32 60, label %3331
    i32 91, label %3366
    i32 40, label %3401
    i32 39, label %3436
    i32 34, label %3471
  ]

3331:                                             ; preds = %3330
  %3332 = load i64, i64* %60, align 8
  %3333 = load i64, i64* %61, align 8
  %3334 = sub i64 %3332, %3333
  %3335 = icmp eq i64 %3334, 0
  %3336 = shl i64 %3334, 7
  %3337 = add i64 %3336, -1
  %3338 = select i1 %3335, i64 0, i64 %3337
  %3339 = load i64, i64* %41, align 8
  %3340 = load i64, i64* %42, align 8
  %3341 = add i64 %3340, %3339
  %3342 = icmp eq i64 %3338, %3341
  %3343 = inttoptr i64 %3333 to i32**
  %3344 = inttoptr i64 %3332 to i32**
  br i1 %3342, label %3345, label %3351

3345:                                             ; preds = %3331
  call void @_ZNSt3__15dequeIwNS_9allocatorIwEEE19__add_back_capacityEv(%"class.std::__1::deque"* nonnull %62) #14
  %3346 = load i64, i64* %42, align 8
  %3347 = load i64, i64* %41, align 8
  %3348 = load i32**, i32*** %39, align 8
  %3349 = load i32**, i32*** %40, align 8
  %3350 = add i64 %3347, %3346
  br label %3351

3351:                                             ; preds = %3345, %3331
  %3352 = phi i64 [ %3350, %3345 ], [ %3341, %3331 ]
  %3353 = phi i32** [ %3349, %3345 ], [ %3344, %3331 ]
  %3354 = phi i32** [ %3348, %3345 ], [ %3343, %3331 ]
  %3355 = icmp eq i32** %3353, %3354
  br i1 %3355, label %3362, label %3356

3356:                                             ; preds = %3351
  %3357 = lshr i64 %3352, 10
  %3358 = getelementptr inbounds i32*, i32** %3354, i64 %3357
  %3359 = load i32*, i32** %3358, align 8
  %3360 = and i64 %3352, 1023
  %3361 = getelementptr inbounds i32, i32* %3359, i64 %3360
  br label %3362

3362:                                             ; preds = %3351, %3356
  %3363 = phi i32* [ %3361, %3356 ], [ null, %3351 ]
  store i32 62, i32* %3363, align 4
  %3364 = load i64, i64* %42, align 8
  %3365 = add i64 %3364, 1
  store i64 %3365, i64* %42, align 8
  br label %3545

3366:                                             ; preds = %3330
  %3367 = load i64, i64* %60, align 8
  %3368 = load i64, i64* %61, align 8
  %3369 = sub i64 %3367, %3368
  %3370 = icmp eq i64 %3369, 0
  %3371 = shl i64 %3369, 7
  %3372 = add i64 %3371, -1
  %3373 = select i1 %3370, i64 0, i64 %3372
  %3374 = load i64, i64* %41, align 8
  %3375 = load i64, i64* %42, align 8
  %3376 = add i64 %3375, %3374
  %3377 = icmp eq i64 %3373, %3376
  %3378 = inttoptr i64 %3368 to i32**
  %3379 = inttoptr i64 %3367 to i32**
  br i1 %3377, label %3380, label %3386

3380:                                             ; preds = %3366
  call void @_ZNSt3__15dequeIwNS_9allocatorIwEEE19__add_back_capacityEv(%"class.std::__1::deque"* nonnull %62) #14
  %3381 = load i64, i64* %42, align 8
  %3382 = load i64, i64* %41, align 8
  %3383 = load i32**, i32*** %39, align 8
  %3384 = load i32**, i32*** %40, align 8
  %3385 = add i64 %3382, %3381
  br label %3386

3386:                                             ; preds = %3380, %3366
  %3387 = phi i64 [ %3385, %3380 ], [ %3376, %3366 ]
  %3388 = phi i32** [ %3384, %3380 ], [ %3379, %3366 ]
  %3389 = phi i32** [ %3383, %3380 ], [ %3378, %3366 ]
  %3390 = icmp eq i32** %3388, %3389
  br i1 %3390, label %3397, label %3391

3391:                                             ; preds = %3386
  %3392 = lshr i64 %3387, 10
  %3393 = getelementptr inbounds i32*, i32** %3389, i64 %3392
  %3394 = load i32*, i32** %3393, align 8
  %3395 = and i64 %3387, 1023
  %3396 = getelementptr inbounds i32, i32* %3394, i64 %3395
  br label %3397

3397:                                             ; preds = %3386, %3391
  %3398 = phi i32* [ %3396, %3391 ], [ null, %3386 ]
  store i32 93, i32* %3398, align 4
  %3399 = load i64, i64* %42, align 8
  %3400 = add i64 %3399, 1
  store i64 %3400, i64* %42, align 8
  br label %3545

3401:                                             ; preds = %3330
  %3402 = load i64, i64* %60, align 8
  %3403 = load i64, i64* %61, align 8
  %3404 = sub i64 %3402, %3403
  %3405 = icmp eq i64 %3404, 0
  %3406 = shl i64 %3404, 7
  %3407 = add i64 %3406, -1
  %3408 = select i1 %3405, i64 0, i64 %3407
  %3409 = load i64, i64* %41, align 8
  %3410 = load i64, i64* %42, align 8
  %3411 = add i64 %3410, %3409
  %3412 = icmp eq i64 %3408, %3411
  %3413 = inttoptr i64 %3403 to i32**
  %3414 = inttoptr i64 %3402 to i32**
  br i1 %3412, label %3415, label %3421

3415:                                             ; preds = %3401
  call void @_ZNSt3__15dequeIwNS_9allocatorIwEEE19__add_back_capacityEv(%"class.std::__1::deque"* nonnull %62) #14
  %3416 = load i64, i64* %42, align 8
  %3417 = load i64, i64* %41, align 8
  %3418 = load i32**, i32*** %39, align 8
  %3419 = load i32**, i32*** %40, align 8
  %3420 = add i64 %3417, %3416
  br label %3421

3421:                                             ; preds = %3415, %3401
  %3422 = phi i64 [ %3420, %3415 ], [ %3411, %3401 ]
  %3423 = phi i32** [ %3419, %3415 ], [ %3414, %3401 ]
  %3424 = phi i32** [ %3418, %3415 ], [ %3413, %3401 ]
  %3425 = icmp eq i32** %3423, %3424
  br i1 %3425, label %3432, label %3426

3426:                                             ; preds = %3421
  %3427 = lshr i64 %3422, 10
  %3428 = getelementptr inbounds i32*, i32** %3424, i64 %3427
  %3429 = load i32*, i32** %3428, align 8
  %3430 = and i64 %3422, 1023
  %3431 = getelementptr inbounds i32, i32* %3429, i64 %3430
  br label %3432

3432:                                             ; preds = %3421, %3426
  %3433 = phi i32* [ %3431, %3426 ], [ null, %3421 ]
  store i32 41, i32* %3433, align 4
  %3434 = load i64, i64* %42, align 8
  %3435 = add i64 %3434, 1
  store i64 %3435, i64* %42, align 8
  br label %3545

3436:                                             ; preds = %3330
  %3437 = load i64, i64* %60, align 8
  %3438 = load i64, i64* %61, align 8
  %3439 = sub i64 %3437, %3438
  %3440 = icmp eq i64 %3439, 0
  %3441 = shl i64 %3439, 7
  %3442 = add i64 %3441, -1
  %3443 = select i1 %3440, i64 0, i64 %3442
  %3444 = load i64, i64* %41, align 8
  %3445 = load i64, i64* %42, align 8
  %3446 = add i64 %3445, %3444
  %3447 = icmp eq i64 %3443, %3446
  %3448 = inttoptr i64 %3438 to i32**
  %3449 = inttoptr i64 %3437 to i32**
  br i1 %3447, label %3450, label %3456

3450:                                             ; preds = %3436
  call void @_ZNSt3__15dequeIwNS_9allocatorIwEEE19__add_back_capacityEv(%"class.std::__1::deque"* nonnull %62) #14
  %3451 = load i64, i64* %42, align 8
  %3452 = load i64, i64* %41, align 8
  %3453 = load i32**, i32*** %39, align 8
  %3454 = load i32**, i32*** %40, align 8
  %3455 = add i64 %3452, %3451
  br label %3456

3456:                                             ; preds = %3450, %3436
  %3457 = phi i64 [ %3455, %3450 ], [ %3446, %3436 ]
  %3458 = phi i32** [ %3454, %3450 ], [ %3449, %3436 ]
  %3459 = phi i32** [ %3453, %3450 ], [ %3448, %3436 ]
  %3460 = icmp eq i32** %3458, %3459
  br i1 %3460, label %3467, label %3461

3461:                                             ; preds = %3456
  %3462 = lshr i64 %3457, 10
  %3463 = getelementptr inbounds i32*, i32** %3459, i64 %3462
  %3464 = load i32*, i32** %3463, align 8
  %3465 = and i64 %3457, 1023
  %3466 = getelementptr inbounds i32, i32* %3464, i64 %3465
  br label %3467

3467:                                             ; preds = %3456, %3461
  %3468 = phi i32* [ %3466, %3461 ], [ null, %3456 ]
  store i32 39, i32* %3468, align 4
  %3469 = load i64, i64* %42, align 8
  %3470 = add i64 %3469, 1
  store i64 %3470, i64* %42, align 8
  br label %3545

3471:                                             ; preds = %3330
  %3472 = load i64, i64* %60, align 8
  %3473 = load i64, i64* %61, align 8
  %3474 = sub i64 %3472, %3473
  %3475 = icmp eq i64 %3474, 0
  %3476 = shl i64 %3474, 7
  %3477 = add i64 %3476, -1
  %3478 = select i1 %3475, i64 0, i64 %3477
  %3479 = load i64, i64* %41, align 8
  %3480 = load i64, i64* %42, align 8
  %3481 = add i64 %3480, %3479
  %3482 = icmp eq i64 %3478, %3481
  %3483 = inttoptr i64 %3473 to i32**
  %3484 = inttoptr i64 %3472 to i32**
  br i1 %3482, label %3485, label %3491

3485:                                             ; preds = %3471
  call void @_ZNSt3__15dequeIwNS_9allocatorIwEEE19__add_back_capacityEv(%"class.std::__1::deque"* nonnull %62) #14
  %3486 = load i64, i64* %42, align 8
  %3487 = load i64, i64* %41, align 8
  %3488 = load i32**, i32*** %39, align 8
  %3489 = load i32**, i32*** %40, align 8
  %3490 = add i64 %3487, %3486
  br label %3491

3491:                                             ; preds = %3485, %3471
  %3492 = phi i64 [ %3490, %3485 ], [ %3481, %3471 ]
  %3493 = phi i32** [ %3489, %3485 ], [ %3484, %3471 ]
  %3494 = phi i32** [ %3488, %3485 ], [ %3483, %3471 ]
  %3495 = icmp eq i32** %3493, %3494
  br i1 %3495, label %3502, label %3496

3496:                                             ; preds = %3491
  %3497 = lshr i64 %3492, 10
  %3498 = getelementptr inbounds i32*, i32** %3494, i64 %3497
  %3499 = load i32*, i32** %3498, align 8
  %3500 = and i64 %3492, 1023
  %3501 = getelementptr inbounds i32, i32* %3499, i64 %3500
  br label %3502

3502:                                             ; preds = %3491, %3496
  %3503 = phi i32* [ %3501, %3496 ], [ null, %3491 ]
  store i32 34, i32* %3503, align 4
  %3504 = load i64, i64* %42, align 8
  %3505 = add i64 %3504, 1
  store i64 %3505, i64* %42, align 8
  br label %3545

3506:                                             ; preds = %3330
  %3507 = icmp eq i32 %130, %124
  br i1 %3507, label %3508, label %3545

3508:                                             ; preds = %3506
  %3509 = load i64, i64* %42, align 8
  %3510 = load i64, i64* %41, align 8
  %3511 = add i64 %3509, -1
  store i64 %3511, i64* %42, align 8
  %3512 = load i64, i64* %60, align 8
  %3513 = load i64, i64* %61, align 8
  %3514 = sub i64 %3512, %3513
  %3515 = icmp eq i64 %3514, 0
  %3516 = shl i64 %3514, 7
  %3517 = add i64 %3516, -1
  %3518 = select i1 %3515, i64 0, i64 %3517
  %3519 = sub i64 1, %3509
  %3520 = sub i64 %3519, %3510
  %3521 = add i64 %3520, %3518
  %3522 = icmp ult i64 %3521, 2048
  br i1 %3522, label %3531, label %3523

3523:                                             ; preds = %3508
  %3524 = inttoptr i64 %3512 to i32**
  %3525 = getelementptr inbounds i32*, i32** %3524, i64 -1
  %3526 = bitcast i32** %3525 to i8**
  %3527 = load i8*, i8** %3526, align 8
  call void @_ZdlPv(i8* %3527) #13
  %3528 = load i32**, i32*** %40, align 8
  %3529 = getelementptr i32*, i32** %3528, i64 -1
  store i32** %3529, i32*** %40, align 8
  %3530 = load i64, i64* %42, align 8
  br label %3531

3531:                                             ; preds = %3508, %3523
  %3532 = phi i64 [ %3511, %3508 ], [ %3530, %3523 ]
  %3533 = icmp eq i64 %3532, 0
  br i1 %3533, label %3545, label %3534

3534:                                             ; preds = %3531
  %3535 = load i64, i64* %41, align 8
  %3536 = add i64 %3532, -1
  %3537 = add i64 %3536, %3535
  %3538 = load i32**, i32*** %39, align 8
  %3539 = lshr i64 %3537, 10
  %3540 = getelementptr inbounds i32*, i32** %3538, i64 %3539
  %3541 = load i32*, i32** %3540, align 8
  %3542 = and i64 %3537, 1023
  %3543 = getelementptr inbounds i32, i32* %3541, i64 %3542
  %3544 = load i32, i32* %3543, align 4
  br label %3545

3545:                                             ; preds = %3531, %3506, %3534, %3502, %3467, %3432, %3397, %3362
  %3546 = phi i32 [ 11, %3534 ], [ 11, %3506 ], [ 11, %3502 ], [ 11, %3467 ], [ 11, %3432 ], [ 11, %3397 ], [ 11, %3362 ], [ 0, %3531 ]
  %3547 = phi i32 [ %3544, %3534 ], [ %124, %3506 ], [ 34, %3502 ], [ 39, %3467 ], [ 41, %3432 ], [ 93, %3397 ], [ 62, %3362 ], [ %124, %3531 ]
  %3548 = add nsw i64 %127, 1
  br label %3785

3549:                                             ; preds = %123
  %3550 = load i64, i64* %33, align 8, !noalias !163
  %3551 = sub i64 %3550, %131
  %3552 = ashr exact i64 %3551, 2
  %3553 = icmp ult i64 %3552, %127
  br i1 %3553, label %3554, label %3555, !prof !132

3554:                                             ; preds = %3549
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !noalias !166, !srcloc !136
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !noalias !166, !srcloc !137
  unreachable

3555:                                             ; preds = %3549
  %3556 = call i32 @_Z14FXSYS_wcsnicmpPKwS0_m(i32* %129, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.5, i64 0, i64 0), i64 3) #14
  %3557 = icmp eq i32 %3556, 0
  %3558 = add nsw i64 %127, 2
  %3559 = select i1 %3557, i64 %3558, i64 %127
  %3560 = select i1 %3557, i32 0, i32 12
  %3561 = add nsw i64 %3559, 1
  br label %3785

3562:                                             ; preds = %123
  switch i32 %130, label %3563 [
    i32 32, label %3565
    i32 13, label %3565
    i32 10, label %3565
    i32 9, label %3565
    i32 63, label %3575
    i32 34, label %3577
  ]

3563:                                             ; preds = %3562
  %3564 = load i32*, i32** %53, align 8
  br label %3582

3565:                                             ; preds = %3562, %3562, %3562, %3562
  %3566 = load i32*, i32** %52, align 8
  %3567 = load i32*, i32** %53, align 8
  %3568 = icmp eq i32* %3566, %3567
  br i1 %3568, label %3569, label %3571

3569:                                             ; preds = %3565
  %3570 = add nsw i64 %127, 1
  br label %3785

3571:                                             ; preds = %3565
  %3572 = icmp eq i32 %125, 0
  br i1 %3572, label %3573, label %3582

3573:                                             ; preds = %3571
  %3574 = add nsw i64 %127, 1
  call void @_ZN13CFX_XMLParser17ProcessTargetDataEv(%class.CFX_XMLParser* %0)
  br label %3785

3575:                                             ; preds = %3562
  %3576 = add nsw i64 %127, 1
  br label %3785

3577:                                             ; preds = %3562
  switch i32 %125, label %3791 [
    i32 0, label %3578
    i32 34, label %3580
  ]

3578:                                             ; preds = %3577
  %3579 = add nsw i64 %127, 1
  br label %3785

3580:                                             ; preds = %3577
  %3581 = add nsw i64 %127, 1
  call void @_ZN13CFX_XMLParser17ProcessTargetDataEv(%class.CFX_XMLParser* %0)
  br label %3785

3582:                                             ; preds = %3571, %3563
  %3583 = phi i32* [ %3564, %3563 ], [ %3567, %3571 ]
  %3584 = load i32*, i32** %55, align 8
  %3585 = icmp eq i32* %3583, %3584
  br i1 %3585, label %3589, label %3586

3586:                                             ; preds = %3582
  store i32 %130, i32* %3583, align 4
  %3587 = getelementptr inbounds i32, i32* %3583, i64 1
  %3588 = ptrtoint i32* %3587 to i64
  store i64 %3588, i64* %56, align 8
  br label %3783

3589:                                             ; preds = %3582
  %3590 = ptrtoint i32* %3584 to i64
  %3591 = load i64, i64* %57, align 8
  %3592 = sub i64 %3590, %3591
  %3593 = ashr exact i64 %3592, 2
  %3594 = add nsw i64 %3593, 1
  %3595 = icmp ugt i64 %3594, 4611686018427387903
  br i1 %3595, label %3596, label %3598

3596:                                             ; preds = %3589
  %3597 = bitcast %"class.std::__1::vector"* %54 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %3597) #15
  unreachable

3598:                                             ; preds = %3589
  %3599 = icmp ult i64 %3593, 2305843009213693951
  br i1 %3599, label %3600, label %3605

3600:                                             ; preds = %3598
  %3601 = ashr exact i64 %3592, 1
  %3602 = icmp ult i64 %3601, %3594
  %3603 = select i1 %3602, i64 %3594, i64 %3601
  %3604 = icmp eq i64 %3603, 0
  br i1 %3604, label %3609, label %3605

3605:                                             ; preds = %3600, %3598
  %3606 = phi i64 [ %3603, %3600 ], [ 4611686018427387903, %3598 ]
  %3607 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %3606, i64 4) #14
  %3608 = bitcast i8* %3607 to i32*
  br label %3609

3609:                                             ; preds = %3605, %3600
  %3610 = phi i64 [ %3606, %3605 ], [ 0, %3600 ]
  %3611 = phi i32* [ %3608, %3605 ], [ null, %3600 ]
  %3612 = getelementptr inbounds i32, i32* %3611, i64 %3593
  %3613 = getelementptr inbounds i32, i32* %3611, i64 %3610
  %3614 = ptrtoint i32* %3613 to i64
  store i32 %130, i32* %3612, align 4
  %3615 = getelementptr inbounds i32, i32* %3612, i64 1
  %3616 = ptrtoint i32* %3615 to i64
  %3617 = load i32*, i32** %59, align 8
  %3618 = ptrtoint i32* %3617 to i64
  %3619 = load i32*, i32** %53, align 8
  %3620 = icmp eq i32* %3619, %3617
  br i1 %3620, label %3776, label %3621

3621:                                             ; preds = %3609
  %3622 = getelementptr i32, i32* %3619, i64 -1
  %3623 = ptrtoint i32* %3622 to i64
  %3624 = sub i64 %3623, %3618
  %3625 = lshr i64 %3624, 2
  %3626 = add nuw nsw i64 %3625, 1
  %3627 = icmp ult i64 %3626, 8
  br i1 %3627, label %3721, label %3628

3628:                                             ; preds = %3621
  %3629 = getelementptr i32, i32* %3611, i64 -1
  %3630 = getelementptr i32, i32* %3619, i64 -1
  %3631 = ptrtoint i32* %3630 to i64
  %3632 = sub i64 %3631, %3618
  %3633 = lshr i64 %3632, 2
  %3634 = sub nsw i64 %3593, %3633
  %3635 = getelementptr i32, i32* %3629, i64 %3634
  %3636 = getelementptr i32, i32* %3619, i64 -1
  %3637 = sub nsw i64 0, %3633
  %3638 = getelementptr i32, i32* %3636, i64 %3637
  %3639 = icmp ult i32* %3635, %3619
  %3640 = icmp ult i32* %3638, %3612
  %3641 = and i1 %3639, %3640
  br i1 %3641, label %3721, label %3642

3642:                                             ; preds = %3628
  %3643 = and i64 %3626, 9223372036854775800
  %3644 = sub nsw i64 0, %3643
  %3645 = getelementptr i32, i32* %3612, i64 %3644
  %3646 = sub nsw i64 0, %3643
  %3647 = getelementptr i32, i32* %3619, i64 %3646
  %3648 = add nsw i64 %3643, -8
  %3649 = lshr exact i64 %3648, 3
  %3650 = add nuw nsw i64 %3649, 1
  %3651 = and i64 %3650, 1
  %3652 = icmp eq i64 %3648, 0
  br i1 %3652, label %3697, label %3653

3653:                                             ; preds = %3642
  %3654 = sub nuw nsw i64 %3650, %3651
  %3655 = getelementptr i32, i32* %3612, i64 -1
  %3656 = getelementptr i32, i32* %3619, i64 -1
  %3657 = getelementptr i32, i32* %3612, i64 -1
  %3658 = getelementptr i32, i32* %3619, i64 -1
  br label %3659

3659:                                             ; preds = %3659, %3653
  %3660 = phi i64 [ 0, %3653 ], [ %3694, %3659 ]
  %3661 = phi i64 [ %3654, %3653 ], [ %3695, %3659 ]
  %3662 = sub i64 0, %3660
  %3663 = sub i64 0, %3660
  %3664 = getelementptr inbounds i32, i32* %3655, i64 %3662
  %3665 = getelementptr inbounds i32, i32* %3656, i64 %3663
  %3666 = getelementptr inbounds i32, i32* %3665, i64 -3
  %3667 = bitcast i32* %3666 to <4 x i32>*
  %3668 = load <4 x i32>, <4 x i32>* %3667, align 4, !alias.scope !169
  %3669 = getelementptr inbounds i32, i32* %3665, i64 -4
  %3670 = getelementptr inbounds i32, i32* %3669, i64 -3
  %3671 = bitcast i32* %3670 to <4 x i32>*
  %3672 = load <4 x i32>, <4 x i32>* %3671, align 4, !alias.scope !169
  %3673 = getelementptr inbounds i32, i32* %3664, i64 -3
  %3674 = bitcast i32* %3673 to <4 x i32>*
  store <4 x i32> %3668, <4 x i32>* %3674, align 4, !alias.scope !172, !noalias !169
  %3675 = getelementptr inbounds i32, i32* %3664, i64 -4
  %3676 = getelementptr inbounds i32, i32* %3675, i64 -3
  %3677 = bitcast i32* %3676 to <4 x i32>*
  store <4 x i32> %3672, <4 x i32>* %3677, align 4, !alias.scope !172, !noalias !169
  %3678 = sub nuw nsw i64 -8, %3660
  %3679 = sub nuw nsw i64 -8, %3660
  %3680 = getelementptr inbounds i32, i32* %3657, i64 %3678
  %3681 = getelementptr inbounds i32, i32* %3658, i64 %3679
  %3682 = getelementptr inbounds i32, i32* %3681, i64 -3
  %3683 = bitcast i32* %3682 to <4 x i32>*
  %3684 = load <4 x i32>, <4 x i32>* %3683, align 4, !alias.scope !169
  %3685 = getelementptr inbounds i32, i32* %3681, i64 -4
  %3686 = getelementptr inbounds i32, i32* %3685, i64 -3
  %3687 = bitcast i32* %3686 to <4 x i32>*
  %3688 = load <4 x i32>, <4 x i32>* %3687, align 4, !alias.scope !169
  %3689 = getelementptr inbounds i32, i32* %3680, i64 -3
  %3690 = bitcast i32* %3689 to <4 x i32>*
  store <4 x i32> %3684, <4 x i32>* %3690, align 4, !alias.scope !172, !noalias !169
  %3691 = getelementptr inbounds i32, i32* %3680, i64 -4
  %3692 = getelementptr inbounds i32, i32* %3691, i64 -3
  %3693 = bitcast i32* %3692 to <4 x i32>*
  store <4 x i32> %3688, <4 x i32>* %3693, align 4, !alias.scope !172, !noalias !169
  %3694 = add i64 %3660, 16
  %3695 = add i64 %3661, -2
  %3696 = icmp eq i64 %3695, 0
  br i1 %3696, label %3697, label %3659, !llvm.loop !174

3697:                                             ; preds = %3659, %3642
  %3698 = phi i64 [ 0, %3642 ], [ %3694, %3659 ]
  %3699 = icmp eq i64 %3651, 0
  br i1 %3699, label %3719, label %3700

3700:                                             ; preds = %3697
  %3701 = sub i64 0, %3698
  %3702 = getelementptr i32, i32* %3612, i64 -1
  %3703 = sub i64 0, %3698
  %3704 = getelementptr i32, i32* %3619, i64 -1
  %3705 = getelementptr inbounds i32, i32* %3702, i64 %3701
  %3706 = getelementptr inbounds i32, i32* %3704, i64 %3703
  %3707 = getelementptr inbounds i32, i32* %3706, i64 -3
  %3708 = bitcast i32* %3707 to <4 x i32>*
  %3709 = load <4 x i32>, <4 x i32>* %3708, align 4, !alias.scope !169
  %3710 = getelementptr inbounds i32, i32* %3706, i64 -4
  %3711 = getelementptr inbounds i32, i32* %3710, i64 -3
  %3712 = bitcast i32* %3711 to <4 x i32>*
  %3713 = load <4 x i32>, <4 x i32>* %3712, align 4, !alias.scope !169
  %3714 = getelementptr inbounds i32, i32* %3705, i64 -3
  %3715 = bitcast i32* %3714 to <4 x i32>*
  store <4 x i32> %3709, <4 x i32>* %3715, align 4, !alias.scope !172, !noalias !169
  %3716 = getelementptr inbounds i32, i32* %3705, i64 -4
  %3717 = getelementptr inbounds i32, i32* %3716, i64 -3
  %3718 = bitcast i32* %3717 to <4 x i32>*
  store <4 x i32> %3713, <4 x i32>* %3718, align 4, !alias.scope !172, !noalias !169
  br label %3719

3719:                                             ; preds = %3697, %3700
  %3720 = icmp eq i64 %3626, %3643
  br i1 %3720, label %3773, label %3721

3721:                                             ; preds = %3719, %3628, %3621
  %3722 = phi i32* [ %3612, %3628 ], [ %3612, %3621 ], [ %3645, %3719 ]
  %3723 = phi i32* [ %3619, %3628 ], [ %3619, %3621 ], [ %3647, %3719 ]
  %3724 = getelementptr i32, i32* %3723, i64 -1
  %3725 = ptrtoint i32* %3724 to i64
  %3726 = sub i64 %3725, %3618
  %3727 = lshr i64 %3726, 2
  %3728 = add nuw nsw i64 %3727, 1
  %3729 = and i64 %3728, 7
  %3730 = icmp eq i64 %3729, 0
  br i1 %3730, label %3740, label %3731

3731:                                             ; preds = %3721, %3731
  %3732 = phi i32* [ %3735, %3731 ], [ %3722, %3721 ]
  %3733 = phi i32* [ %3736, %3731 ], [ %3723, %3721 ]
  %3734 = phi i64 [ %3738, %3731 ], [ %3729, %3721 ]
  %3735 = getelementptr inbounds i32, i32* %3732, i64 -1
  %3736 = getelementptr inbounds i32, i32* %3733, i64 -1
  %3737 = load i32, i32* %3736, align 4
  store i32 %3737, i32* %3735, align 4
  %3738 = add i64 %3734, -1
  %3739 = icmp eq i64 %3738, 0
  br i1 %3739, label %3740, label %3731, !llvm.loop !175

3740:                                             ; preds = %3731, %3721
  %3741 = phi i32* [ undef, %3721 ], [ %3735, %3731 ]
  %3742 = phi i32* [ %3722, %3721 ], [ %3735, %3731 ]
  %3743 = phi i32* [ %3723, %3721 ], [ %3736, %3731 ]
  %3744 = icmp ult i64 %3726, 28
  br i1 %3744, label %3773, label %3745

3745:                                             ; preds = %3740, %3745
  %3746 = phi i32* [ %3769, %3745 ], [ %3742, %3740 ]
  %3747 = phi i32* [ %3770, %3745 ], [ %3743, %3740 ]
  %3748 = getelementptr inbounds i32, i32* %3746, i64 -1
  %3749 = getelementptr inbounds i32, i32* %3747, i64 -1
  %3750 = load i32, i32* %3749, align 4
  store i32 %3750, i32* %3748, align 4
  %3751 = getelementptr inbounds i32, i32* %3746, i64 -2
  %3752 = getelementptr inbounds i32, i32* %3747, i64 -2
  %3753 = load i32, i32* %3752, align 4
  store i32 %3753, i32* %3751, align 4
  %3754 = getelementptr inbounds i32, i32* %3746, i64 -3
  %3755 = getelementptr inbounds i32, i32* %3747, i64 -3
  %3756 = load i32, i32* %3755, align 4
  store i32 %3756, i32* %3754, align 4
  %3757 = getelementptr inbounds i32, i32* %3746, i64 -4
  %3758 = getelementptr inbounds i32, i32* %3747, i64 -4
  %3759 = load i32, i32* %3758, align 4
  store i32 %3759, i32* %3757, align 4
  %3760 = getelementptr inbounds i32, i32* %3746, i64 -5
  %3761 = getelementptr inbounds i32, i32* %3747, i64 -5
  %3762 = load i32, i32* %3761, align 4
  store i32 %3762, i32* %3760, align 4
  %3763 = getelementptr inbounds i32, i32* %3746, i64 -6
  %3764 = getelementptr inbounds i32, i32* %3747, i64 -6
  %3765 = load i32, i32* %3764, align 4
  store i32 %3765, i32* %3763, align 4
  %3766 = getelementptr inbounds i32, i32* %3746, i64 -7
  %3767 = getelementptr inbounds i32, i32* %3747, i64 -7
  %3768 = load i32, i32* %3767, align 4
  store i32 %3768, i32* %3766, align 4
  %3769 = getelementptr inbounds i32, i32* %3746, i64 -8
  %3770 = getelementptr inbounds i32, i32* %3747, i64 -8
  %3771 = load i32, i32* %3770, align 4
  store i32 %3771, i32* %3769, align 4
  %3772 = icmp eq i32* %3770, %3617
  br i1 %3772, label %3773, label %3745, !llvm.loop !176

3773:                                             ; preds = %3740, %3745, %3719
  %3774 = phi i32* [ %3645, %3719 ], [ %3741, %3740 ], [ %3769, %3745 ]
  %3775 = load i64, i64* %57, align 8
  br label %3776

3776:                                             ; preds = %3609, %3773
  %3777 = phi i32* [ %3774, %3773 ], [ %3612, %3609 ]
  %3778 = phi i64 [ %3775, %3773 ], [ %3618, %3609 ]
  %3779 = ptrtoint i32* %3777 to i64
  store i64 %3779, i64* %57, align 8
  store i64 %3616, i64* %56, align 8
  store i64 %3614, i64* %58, align 8
  %3780 = icmp eq i64 %3778, 0
  br i1 %3780, label %3783, label %3781

3781:                                             ; preds = %3776
  %3782 = inttoptr i64 %3778 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %3782) #14
  br label %3783

3783:                                             ; preds = %3586, %3776, %3781
  %3784 = add nsw i64 %127, 1
  br label %3785

3785:                                             ; preds = %1393, %1839, %1854, %1857, %1859, %2326, %2804, %3555, %3569, %3573, %346, %352, %362, %367, %436, %400, %365, %932, %730, %1383, %1175, %1836, %1633, %2071, %2283, %2319, %2312, %3319, %3545, %3783, %3580, %3578, %3575, %123, %3290, %2309, %1437, %1437, %1841, %3316, %1438, %1447, %2067, %2070, %2080, %2272, %2277, %2821, %2854, %2816, %3287, %3077
  %3786 = phi i64 [ %127, %123 ], [ %3570, %3569 ], [ %3574, %3573 ], [ %3576, %3575 ], [ %3579, %3578 ], [ %3581, %3580 ], [ %3784, %3783 ], [ %3561, %3555 ], [ %3291, %3290 ], [ %3291, %3319 ], [ %3548, %3545 ], [ %2806, %2804 ], [ %2328, %2326 ], [ %2285, %2319 ], [ %2285, %2312 ], [ %2285, %2309 ], [ %127, %2283 ], [ %2072, %2071 ], [ %1858, %1857 ], [ %1860, %1859 ], [ %1840, %1839 ], [ %1855, %1854 ], [ %1394, %1393 ], [ %1837, %1836 ], [ %127, %1633 ], [ %1384, %1383 ], [ %127, %1175 ], [ %933, %932 ], [ %127, %730 ], [ %366, %365 ], [ %368, %367 ], [ %404, %400 ], [ %127, %436 ], [ %353, %352 ], [ %127, %346 ], [ %363, %362 ], [ %127, %1437 ], [ %127, %1437 ], [ %127, %1841 ], [ %3291, %3316 ], [ %1441, %1438 ], [ %127, %1447 ], [ %1867, %2067 ], [ %1867, %2070 ], [ %127, %2080 ], [ %127, %2272 ], [ %127, %2277 ], [ %2817, %2816 ], [ %2822, %2821 ], [ %127, %2854 ], [ %2868, %3077 ], [ %3288, %3287 ]
  %3787 = phi i32 [ %126, %123 ], [ 15, %3569 ], [ 15, %3573 ], [ 8, %3575 ], [ 15, %3578 ], [ 15, %3580 ], [ 15, %3783 ], [ %3560, %3555 ], [ 11, %3290 ], [ 11, %3319 ], [ %3546, %3545 ], [ %2805, %2804 ], [ %2327, %2326 ], [ 0, %2319 ], [ 0, %2312 ], [ 0, %2309 ], [ 8, %2283 ], [ 7, %2071 ], [ 6, %1857 ], [ 7, %1859 ], [ 5, %1839 ], [ 6, %1854 ], [ 4, %1393 ], [ 4, %1836 ], [ 5, %1633 ], [ 3, %1383 ], [ 4, %1175 ], [ 2, %932 ], [ 15, %730 ], [ 13, %365 ], [ 10, %367 ], [ 2, %400 ], [ 3, %436 ], [ 1, %352 ], [ 0, %346 ], [ 0, %362 ], [ 9, %1437 ], [ 9, %1437 ], [ 15, %1841 ], [ 0, %3316 ], [ %1442, %1438 ], [ 15, %1447 ], [ 4, %2067 ], [ 4, %2070 ], [ 15, %2080 ], [ 15, %2272 ], [ 15, %2277 ], [ 12, %2816 ], [ 14, %2821 ], [ 11, %2854 ], [ 0, %3077 ], [ 14, %3287 ]
  %3788 = phi i32 [ %125, %123 ], [ %125, %3569 ], [ 0, %3573 ], [ %125, %3575 ], [ 34, %3578 ], [ 0, %3580 ], [ %125, %3783 ], [ %125, %3555 ], [ %125, %3290 ], [ %125, %3319 ], [ %125, %3545 ], [ %125, %2804 ], [ %125, %2326 ], [ %125, %2319 ], [ %125, %2312 ], [ %125, %2309 ], [ %125, %2283 ], [ %125, %2071 ], [ %125, %1857 ], [ %130, %1859 ], [ %125, %1839 ], [ %125, %1854 ], [ %125, %1393 ], [ %125, %1836 ], [ %125, %1633 ], [ %125, %1383 ], [ %125, %1175 ], [ %125, %932 ], [ %125, %730 ], [ %125, %365 ], [ %125, %367 ], [ %125, %400 ], [ %125, %436 ], [ %125, %352 ], [ %125, %346 ], [ %125, %362 ], [ %125, %1437 ], [ %125, %1437 ], [ %125, %1841 ], [ %125, %3316 ], [ %125, %1438 ], [ %125, %1447 ], [ 0, %2067 ], [ 0, %2070 ], [ %125, %2080 ], [ %125, %2272 ], [ %125, %2277 ], [ %125, %2816 ], [ %125, %2821 ], [ %125, %2854 ], [ %125, %3077 ], [ %125, %3287 ]
  %3789 = phi i32 [ %124, %123 ], [ %124, %3569 ], [ %124, %3573 ], [ %124, %3575 ], [ %124, %3578 ], [ %124, %3580 ], [ %124, %3783 ], [ %124, %3555 ], [ %124, %3290 ], [ %3329, %3319 ], [ %3547, %3545 ], [ %124, %2804 ], [ %124, %2326 ], [ %124, %2319 ], [ %124, %2312 ], [ %124, %2309 ], [ %124, %2283 ], [ %124, %2071 ], [ %124, %1857 ], [ %124, %1859 ], [ %124, %1839 ], [ %124, %1854 ], [ %124, %1393 ], [ %124, %1836 ], [ %124, %1633 ], [ %124, %1383 ], [ %124, %1175 ], [ %124, %932 ], [ %124, %730 ], [ %124, %365 ], [ %124, %367 ], [ %124, %400 ], [ %124, %436 ], [ %124, %352 ], [ %124, %346 ], [ %124, %362 ], [ %124, %1437 ], [ %124, %1437 ], [ %124, %1841 ], [ %124, %3316 ], [ %124, %1438 ], [ %124, %1447 ], [ %124, %2067 ], [ %124, %2070 ], [ %124, %2080 ], [ %124, %2272 ], [ %124, %2277 ], [ %124, %2816 ], [ %124, %2821 ], [ 62, %2854 ], [ %124, %3077 ], [ %124, %3287 ]
  %3790 = icmp slt i64 %3786, %121
  br i1 %3790, label %123, label %100

3791:                                             ; preds = %113, %110, %359, %2390, %2362, %1856, %1436, %2387, %3577, %2363, %2324, %2284, %1863, %1841, %1437, %969, %475, %2601
  %3792 = phi i1 [ false, %2601 ], [ false, %475 ], [ false, %969 ], [ false, %1437 ], [ false, %1841 ], [ false, %1863 ], [ false, %2284 ], [ false, %2324 ], [ false, %2363 ], [ false, %3577 ], [ false, %2387 ], [ false, %1436 ], [ false, %1856 ], [ false, %2362 ], [ false, %2390 ], [ false, %359 ], [ true, %110 ], [ true, %113 ]
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %10) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #14
  %3793 = load i32**, i32*** %45, align 8
  %3794 = load i64, i64* %47, align 8
  %3795 = lshr i64 %3794, 10
  %3796 = getelementptr inbounds i32*, i32** %3793, i64 %3795
  %3797 = load i32**, i32*** %46, align 8
  %3798 = icmp eq i32** %3797, %3793
  %3799 = ptrtoint i32** %3797 to i64
  %3800 = ptrtoint i32** %3793 to i64
  br i1 %3798, label %3813, label %3801

3801:                                             ; preds = %3791
  %3802 = load i32*, i32** %3796, align 8
  %3803 = and i64 %3794, 1023
  %3804 = getelementptr inbounds i32, i32* %3802, i64 %3803
  %3805 = load i64, i64* %48, align 8
  %3806 = add i64 %3805, %3794
  %3807 = lshr i64 %3806, 10
  %3808 = getelementptr inbounds i32*, i32** %3793, i64 %3807
  %3809 = load i32*, i32** %3808, align 8
  %3810 = and i64 %3806, 1023
  %3811 = getelementptr inbounds i32, i32* %3809, i64 %3810
  %3812 = icmp eq i32* %3811, %3804
  br i1 %3812, label %3813, label %3817

3813:                                             ; preds = %3830, %3791, %3801
  store i64 0, i64* %48, align 8
  %3814 = sub i64 %3799, %3800
  %3815 = ashr exact i64 %3814, 3
  %3816 = icmp ugt i64 %3815, 2
  br i1 %3816, label %3835, label %3848

3817:                                             ; preds = %3801, %3830
  %3818 = phi i32* [ %3833, %3830 ], [ %3804, %3801 ]
  %3819 = phi i32** [ %3832, %3830 ], [ %3796, %3801 ]
  %3820 = getelementptr inbounds i32, i32* %3818, i64 1
  %3821 = ptrtoint i32* %3820 to i64
  %3822 = bitcast i32** %3819 to i64*
  %3823 = load i64, i64* %3822, align 8
  %3824 = sub i64 %3821, %3823
  %3825 = icmp eq i64 %3824, 4096
  br i1 %3825, label %3826, label %3830

3826:                                             ; preds = %3817
  %3827 = getelementptr inbounds i32*, i32** %3819, i64 1
  %3828 = bitcast i32** %3827 to i64*
  %3829 = load i64, i64* %3828, align 8
  br label %3830

3830:                                             ; preds = %3826, %3817
  %3831 = phi i64 [ %3829, %3826 ], [ %3821, %3817 ]
  %3832 = phi i32** [ %3827, %3826 ], [ %3819, %3817 ]
  %3833 = inttoptr i64 %3831 to i32*
  %3834 = icmp eq i32* %3811, %3833
  br i1 %3834, label %3813, label %3817

3835:                                             ; preds = %3813, %3835
  %3836 = phi i32** [ %3840, %3835 ], [ %3793, %3813 ]
  %3837 = bitcast i32** %3836 to i8**
  %3838 = load i8*, i8** %3837, align 8
  call void @_ZdlPv(i8* %3838) #13
  %3839 = load i32**, i32*** %45, align 8
  %3840 = getelementptr inbounds i32*, i32** %3839, i64 1
  store i32** %3840, i32*** %45, align 8
  %3841 = load i64, i64* %74, align 8
  %3842 = ptrtoint i32** %3840 to i64
  %3843 = sub i64 %3841, %3842
  %3844 = ashr exact i64 %3843, 3
  %3845 = icmp ugt i64 %3844, 2
  br i1 %3845, label %3835, label %3846

3846:                                             ; preds = %3835
  %3847 = inttoptr i64 %3841 to i32**
  br label %3848

3848:                                             ; preds = %3846, %3813
  %3849 = phi i32** [ %3797, %3813 ], [ %3847, %3846 ]
  %3850 = phi i32** [ %3793, %3813 ], [ %3840, %3846 ]
  %3851 = phi i64 [ %3815, %3813 ], [ %3844, %3846 ]
  switch i64 %3851, label %3855 [
    i64 1, label %3853
    i64 2, label %3852
  ]

3852:                                             ; preds = %3848
  br label %3853

3853:                                             ; preds = %3848, %3852
  %3854 = phi i64 [ 1024, %3852 ], [ 512, %3848 ]
  store i64 %3854, i64* %47, align 8
  br label %3855

3855:                                             ; preds = %3853, %3848
  %3856 = icmp eq i32** %3850, %3849
  br i1 %3856, label %3875, label %3857

3857:                                             ; preds = %3855, %3857
  %3858 = phi i32** [ %3861, %3857 ], [ %3850, %3855 ]
  %3859 = bitcast i32** %3858 to i8**
  %3860 = load i8*, i8** %3859, align 8
  call void @_ZdlPv(i8* %3860) #13
  %3861 = getelementptr inbounds i32*, i32** %3858, i64 1
  %3862 = icmp eq i32** %3861, %3849
  br i1 %3862, label %3863, label %3857

3863:                                             ; preds = %3857
  %3864 = load i32**, i32*** %45, align 8
  %3865 = load i32**, i32*** %46, align 8
  %3866 = icmp eq i32** %3865, %3864
  br i1 %3866, label %3875, label %3867

3867:                                             ; preds = %3863
  %3868 = ptrtoint i32** %3864 to i64
  %3869 = getelementptr i32*, i32** %3865, i64 -1
  %3870 = ptrtoint i32** %3869 to i64
  %3871 = sub i64 %3870, %3868
  %3872 = lshr i64 %3871, 3
  %3873 = xor i64 %3872, -1
  %3874 = getelementptr i32*, i32** %3865, i64 %3873
  store i32** %3874, i32*** %46, align 8
  br label %3875

3875:                                             ; preds = %3867, %3863, %3855
  %3876 = load i32**, i32*** %44, align 8
  %3877 = icmp eq i32** %3876, null
  br i1 %3877, label %3880, label %3878

3878:                                             ; preds = %3875
  %3879 = bitcast i32** %3876 to i8*
  call void @_ZdlPv(i8* %3879) #13
  br label %3880

3880:                                             ; preds = %3875, %3878
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %43) #14
  %3881 = load i32**, i32*** %39, align 8
  %3882 = load i64, i64* %41, align 8
  %3883 = lshr i64 %3882, 10
  %3884 = getelementptr inbounds i32*, i32** %3881, i64 %3883
  %3885 = load i32**, i32*** %40, align 8
  %3886 = icmp eq i32** %3885, %3881
  %3887 = ptrtoint i32** %3885 to i64
  %3888 = ptrtoint i32** %3881 to i64
  br i1 %3886, label %3901, label %3889

3889:                                             ; preds = %3880
  %3890 = load i32*, i32** %3884, align 8
  %3891 = and i64 %3882, 1023
  %3892 = getelementptr inbounds i32, i32* %3890, i64 %3891
  %3893 = load i64, i64* %42, align 8
  %3894 = add i64 %3893, %3882
  %3895 = lshr i64 %3894, 10
  %3896 = getelementptr inbounds i32*, i32** %3881, i64 %3895
  %3897 = load i32*, i32** %3896, align 8
  %3898 = and i64 %3894, 1023
  %3899 = getelementptr inbounds i32, i32* %3897, i64 %3898
  %3900 = icmp eq i32* %3899, %3892
  br i1 %3900, label %3901, label %3905

3901:                                             ; preds = %3918, %3880, %3889
  store i64 0, i64* %42, align 8
  %3902 = sub i64 %3887, %3888
  %3903 = ashr exact i64 %3902, 3
  %3904 = icmp ugt i64 %3903, 2
  br i1 %3904, label %3923, label %3936

3905:                                             ; preds = %3889, %3918
  %3906 = phi i32* [ %3921, %3918 ], [ %3892, %3889 ]
  %3907 = phi i32** [ %3920, %3918 ], [ %3884, %3889 ]
  %3908 = getelementptr inbounds i32, i32* %3906, i64 1
  %3909 = ptrtoint i32* %3908 to i64
  %3910 = bitcast i32** %3907 to i64*
  %3911 = load i64, i64* %3910, align 8
  %3912 = sub i64 %3909, %3911
  %3913 = icmp eq i64 %3912, 4096
  br i1 %3913, label %3914, label %3918

3914:                                             ; preds = %3905
  %3915 = getelementptr inbounds i32*, i32** %3907, i64 1
  %3916 = bitcast i32** %3915 to i64*
  %3917 = load i64, i64* %3916, align 8
  br label %3918

3918:                                             ; preds = %3914, %3905
  %3919 = phi i64 [ %3917, %3914 ], [ %3909, %3905 ]
  %3920 = phi i32** [ %3915, %3914 ], [ %3907, %3905 ]
  %3921 = inttoptr i64 %3919 to i32*
  %3922 = icmp eq i32* %3899, %3921
  br i1 %3922, label %3901, label %3905

3923:                                             ; preds = %3901, %3923
  %3924 = phi i32** [ %3928, %3923 ], [ %3881, %3901 ]
  %3925 = bitcast i32** %3924 to i8**
  %3926 = load i8*, i8** %3925, align 8
  call void @_ZdlPv(i8* %3926) #13
  %3927 = load i32**, i32*** %39, align 8
  %3928 = getelementptr inbounds i32*, i32** %3927, i64 1
  store i32** %3928, i32*** %39, align 8
  %3929 = load i64, i64* %60, align 8
  %3930 = ptrtoint i32** %3928 to i64
  %3931 = sub i64 %3929, %3930
  %3932 = ashr exact i64 %3931, 3
  %3933 = icmp ugt i64 %3932, 2
  br i1 %3933, label %3923, label %3934

3934:                                             ; preds = %3923
  %3935 = inttoptr i64 %3929 to i32**
  br label %3936

3936:                                             ; preds = %3934, %3901
  %3937 = phi i32** [ %3885, %3901 ], [ %3935, %3934 ]
  %3938 = phi i32** [ %3881, %3901 ], [ %3928, %3934 ]
  %3939 = phi i64 [ %3903, %3901 ], [ %3932, %3934 ]
  switch i64 %3939, label %3943 [
    i64 1, label %3941
    i64 2, label %3940
  ]

3940:                                             ; preds = %3936
  br label %3941

3941:                                             ; preds = %3936, %3940
  %3942 = phi i64 [ 1024, %3940 ], [ 512, %3936 ]
  store i64 %3942, i64* %41, align 8
  br label %3943

3943:                                             ; preds = %3941, %3936
  %3944 = icmp eq i32** %3938, %3937
  br i1 %3944, label %3963, label %3945

3945:                                             ; preds = %3943, %3945
  %3946 = phi i32** [ %3949, %3945 ], [ %3938, %3943 ]
  %3947 = bitcast i32** %3946 to i8**
  %3948 = load i8*, i8** %3947, align 8
  call void @_ZdlPv(i8* %3948) #13
  %3949 = getelementptr inbounds i32*, i32** %3946, i64 1
  %3950 = icmp eq i32** %3949, %3937
  br i1 %3950, label %3951, label %3945

3951:                                             ; preds = %3945
  %3952 = load i32**, i32*** %39, align 8
  %3953 = load i32**, i32*** %40, align 8
  %3954 = icmp eq i32** %3953, %3952
  br i1 %3954, label %3963, label %3955

3955:                                             ; preds = %3951
  %3956 = ptrtoint i32** %3952 to i64
  %3957 = getelementptr i32*, i32** %3953, i64 -1
  %3958 = ptrtoint i32** %3957 to i64
  %3959 = sub i64 %3958, %3956
  %3960 = lshr i64 %3959, 3
  %3961 = xor i64 %3960, -1
  %3962 = getelementptr i32*, i32** %3953, i64 %3961
  store i32** %3962, i32*** %40, align 8
  br label %3963

3963:                                             ; preds = %3955, %3951, %3943
  %3964 = load i32**, i32*** %38, align 8
  %3965 = icmp eq i32** %3964, null
  br i1 %3965, label %3968, label %3966

3966:                                             ; preds = %3963
  %3967 = bitcast i32** %3964 to i8*
  call void @_ZdlPv(i8* %3967) #13
  br label %3968

3968:                                             ; preds = %3963, %3966
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %37) #14
  %3969 = load i32*, i32** %31, align 8
  %3970 = icmp eq i32* %3969, null
  br i1 %3970, label %3974, label %3971

3971:                                             ; preds = %3968
  %3972 = ptrtoint i32* %3969 to i64
  store i64 %3972, i64* %33, align 8
  %3973 = bitcast i32* %3969 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %3973) #14
  br label %3974

3974:                                             ; preds = %3968, %3971
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #14
  br label %3975

3975:                                             ; preds = %3974, %21, %2
  %3976 = phi i1 [ false, %2 ], [ %3792, %3974 ], [ false, %21 ]
  ret i1 %3976

3977:                                             ; preds = %670
  %3978 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 2
  %3979 = load i32, i32* %3978, align 4
  %3980 = add i32 %3979, -1
  %3981 = icmp ule i32 %3980, 126
  %3982 = icmp eq i32 %3979, 105
  %3983 = and i1 %3981, %3982
  br i1 %3983, label %3984, label %684

3984:                                             ; preds = %3977
  %3985 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 3
  %3986 = load i32, i32* %3985, align 4
  %3987 = add i32 %3986, -1
  %3988 = icmp ule i32 %3987, 126
  %3989 = icmp eq i32 %3986, 103
  %3990 = and i1 %3988, %3989
  br i1 %3990, label %3991, label %684

3991:                                             ; preds = %3984
  %3992 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 4
  %3993 = load i32, i32* %3992, align 4
  %3994 = add i32 %3993, -1
  %3995 = icmp ule i32 %3994, 126
  %3996 = icmp eq i32 %3993, 105
  %3997 = and i1 %3995, %3996
  br i1 %3997, label %3998, label %684

3998:                                             ; preds = %3991
  %3999 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 5
  %4000 = load i32, i32* %3999, align 4
  %4001 = add i32 %4000, -1
  %4002 = icmp ule i32 %4001, 126
  %4003 = icmp eq i32 %4000, 110
  %4004 = and i1 %4002, %4003
  br i1 %4004, label %4005, label %684

4005:                                             ; preds = %3998
  %4006 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 6
  %4007 = load i32, i32* %4006, align 4
  %4008 = add i32 %4007, -1
  %4009 = icmp ule i32 %4008, 126
  %4010 = icmp eq i32 %4007, 97
  %4011 = and i1 %4009, %4010
  br i1 %4011, label %4012, label %684

4012:                                             ; preds = %4005
  %4013 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 7
  %4014 = load i32, i32* %4013, align 4
  %4015 = add i32 %4014, -1
  %4016 = icmp ule i32 %4015, 126
  %4017 = icmp eq i32 %4014, 108
  %4018 = and i1 %4016, %4017
  br i1 %4018, label %4019, label %684

4019:                                             ; preds = %4012
  %4020 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 8
  %4021 = load i32, i32* %4020, align 4
  %4022 = add i32 %4021, -1
  %4023 = icmp ule i32 %4022, 126
  %4024 = icmp eq i32 %4021, 88
  %4025 = and i1 %4023, %4024
  br i1 %4025, label %4026, label %684

4026:                                             ; preds = %4019
  %4027 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 9
  %4028 = load i32, i32* %4027, align 4
  %4029 = add i32 %4028, -1
  %4030 = icmp ule i32 %4029, 126
  %4031 = icmp eq i32 %4028, 70
  %4032 = and i1 %4030, %4031
  br i1 %4032, label %4033, label %684

4033:                                             ; preds = %4026
  %4034 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 10
  %4035 = load i32, i32* %4034, align 4
  %4036 = add i32 %4035, -1
  %4037 = icmp ule i32 %4036, 126
  %4038 = icmp eq i32 %4035, 65
  %4039 = and i1 %4037, %4038
  br i1 %4039, label %4040, label %684

4040:                                             ; preds = %4033
  %4041 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 11
  %4042 = load i32, i32* %4041, align 4
  %4043 = add i32 %4042, -1
  %4044 = icmp ule i32 %4043, 126
  %4045 = icmp eq i32 %4042, 86
  %4046 = and i1 %4044, %4045
  br i1 %4046, label %4047, label %684

4047:                                             ; preds = %4040
  %4048 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 12
  %4049 = load i32, i32* %4048, align 4
  %4050 = add i32 %4049, -1
  %4051 = icmp ule i32 %4050, 126
  %4052 = icmp eq i32 %4049, 101
  %4053 = and i1 %4051, %4052
  br i1 %4053, label %4054, label %684

4054:                                             ; preds = %4047
  %4055 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 13
  %4056 = load i32, i32* %4055, align 4
  %4057 = add i32 %4056, -1
  %4058 = icmp ule i32 %4057, 126
  %4059 = icmp eq i32 %4056, 114
  %4060 = and i1 %4058, %4059
  br i1 %4060, label %4061, label %684

4061:                                             ; preds = %4054
  %4062 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 14
  %4063 = load i32, i32* %4062, align 4
  %4064 = add i32 %4063, -1
  %4065 = icmp ule i32 %4064, 126
  %4066 = icmp eq i32 %4063, 115
  %4067 = and i1 %4065, %4066
  br i1 %4067, label %4068, label %684

4068:                                             ; preds = %4061
  %4069 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 15
  %4070 = load i32, i32* %4069, align 4
  %4071 = add i32 %4070, -1
  %4072 = icmp ule i32 %4071, 126
  %4073 = icmp eq i32 %4070, 105
  %4074 = and i1 %4072, %4073
  br i1 %4074, label %4075, label %684

4075:                                             ; preds = %4068
  %4076 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 16
  %4077 = load i32, i32* %4076, align 4
  %4078 = add i32 %4077, -1
  %4079 = icmp ule i32 %4078, 126
  %4080 = icmp eq i32 %4077, 111
  %4081 = and i1 %4079, %4080
  br i1 %4081, label %4082, label %684

4082:                                             ; preds = %4075
  %4083 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 17
  %4084 = load i32, i32* %4083, align 4
  %4085 = add i32 %4084, -1
  %4086 = icmp ule i32 %4085, 126
  %4087 = icmp eq i32 %4084, 110
  %4088 = and i1 %4086, %4087
  br i1 %4088, label %703, label %684

4089:                                             ; preds = %689
  %4090 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 2
  %4091 = load i32, i32* %4090, align 4
  %4092 = add i32 %4091, -1
  %4093 = icmp ule i32 %4092, 126
  %4094 = icmp eq i32 %4091, 114
  %4095 = and i1 %4093, %4094
  br i1 %4095, label %4096, label %730

4096:                                             ; preds = %4089
  %4097 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 3
  %4098 = load i32, i32* %4097, align 4
  %4099 = add i32 %4098, -1
  %4100 = icmp ule i32 %4099, 126
  %4101 = icmp eq i32 %4098, 111
  %4102 = and i1 %4100, %4101
  br i1 %4102, label %4103, label %730

4103:                                             ; preds = %4096
  %4104 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 4
  %4105 = load i32, i32* %4104, align 4
  %4106 = add i32 %4105, -1
  %4107 = icmp ule i32 %4106, 126
  %4108 = icmp eq i32 %4105, 98
  %4109 = and i1 %4107, %4108
  br i1 %4109, label %4110, label %730

4110:                                             ; preds = %4103
  %4111 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 5
  %4112 = load i32, i32* %4111, align 4
  %4113 = add i32 %4112, -1
  %4114 = icmp ule i32 %4113, 126
  %4115 = icmp eq i32 %4112, 97
  %4116 = and i1 %4114, %4115
  br i1 %4116, label %4117, label %730

4117:                                             ; preds = %4110
  %4118 = getelementptr inbounds [1 x i32], [1 x i32]* %665, i64 0, i64 6
  %4119 = load i32, i32* %4118, align 4
  %4120 = add i32 %4119, -1
  %4121 = icmp ule i32 %4120, 126
  %4122 = icmp eq i32 %4119, 116
  %4123 = and i1 %4121, %4122
  br i1 %4123, label %703, label %730
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"*) unnamed_addr #3

declare zeroext i1 @_ZN23CFX_SeekableStreamProxy5IsEOFEv(%class.CFX_SeekableStreamProxy*) local_unnamed_addr #3

declare i64 @_ZN23CFX_SeekableStreamProxy9ReadBlockEPwm(%class.CFX_SeekableStreamProxy*, i32*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5fxcrt8TreeNodeI11CFX_XMLNodePS1_E15AppendLastChildES2_(%"class.fxcrt::TreeNode"*, %class.CFX_XMLNode*) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %1, i64 0, i32 0
  %4 = icmp eq %"class.fxcrt::TreeNode"* %3, %0
  br i1 %4, label %5, label %6, !prof !132

5:                                                ; preds = %2
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !177
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !178
  unreachable

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %1, i64 0, i32 0, i32 1
  %8 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %7, align 8
  %9 = icmp eq %class.CFX_XMLNode* %8, null
  br i1 %9, label %53, label %10

10:                                               ; preds = %6
  %11 = icmp eq %class.CFX_XMLNode* %8, %1
  br i1 %11, label %12, label %13, !prof !179

12:                                               ; preds = %10
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !180
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !181
  unreachable

13:                                               ; preds = %10
  %14 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %8, i64 0, i32 0, i32 3
  %15 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %14, align 8
  %16 = icmp eq %class.CFX_XMLNode* %15, %1
  %17 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %1, i64 0, i32 0, i32 4
  br i1 %16, label %18, label %22

18:                                               ; preds = %13
  %19 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %17, align 8
  %20 = icmp eq %class.CFX_XMLNode* %19, null
  br i1 %20, label %26, label %21, !prof !6

21:                                               ; preds = %18
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !182
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !183
  unreachable

22:                                               ; preds = %13
  %23 = bitcast %class.CFX_XMLNode** %17 to %"class.fxcrt::TreeNode"**
  %24 = load %"class.fxcrt::TreeNode"*, %"class.fxcrt::TreeNode"** %23, align 8
  %25 = getelementptr inbounds %"class.fxcrt::TreeNode", %"class.fxcrt::TreeNode"* %24, i64 0, i32 5
  br label %26

26:                                               ; preds = %18, %22
  %27 = phi %class.CFX_XMLNode** [ %25, %22 ], [ %14, %18 ]
  %28 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %1, i64 0, i32 0, i32 5
  %29 = bitcast %class.CFX_XMLNode** %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %class.CFX_XMLNode** %27 to i64*
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %8, i64 0, i32 0, i32 2
  %33 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %32, align 8
  %34 = icmp eq %class.CFX_XMLNode* %33, %1
  %35 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %1, i64 0, i32 0, i32 5
  br i1 %34, label %36, label %40

36:                                               ; preds = %26
  %37 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %35, align 8
  %38 = icmp eq %class.CFX_XMLNode* %37, null
  br i1 %38, label %44, label %39, !prof !6

39:                                               ; preds = %36
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !184
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !185
  unreachable

40:                                               ; preds = %26
  %41 = bitcast %class.CFX_XMLNode** %35 to %"class.fxcrt::TreeNode"**
  %42 = load %"class.fxcrt::TreeNode"*, %"class.fxcrt::TreeNode"** %41, align 8
  %43 = getelementptr inbounds %"class.fxcrt::TreeNode", %"class.fxcrt::TreeNode"* %42, i64 0, i32 4
  br label %44

44:                                               ; preds = %36, %40
  %45 = phi %class.CFX_XMLNode** [ %43, %40 ], [ %32, %36 ]
  %46 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %1, i64 0, i32 0, i32 4
  %47 = bitcast %class.CFX_XMLNode** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast %class.CFX_XMLNode** %45 to i64*
  store i64 %48, i64* %49, align 8
  %50 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %1, i64 0, i32 0, i32 4
  %51 = bitcast %class.CFX_XMLNode** %50 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %51, i8 0, i64 16, i1 false) #14
  %52 = bitcast %class.CFX_XMLNode** %7 to %"class.fxcrt::TreeNode"**
  store %"class.fxcrt::TreeNode"* %0, %"class.fxcrt::TreeNode"** %52, align 8
  br label %64

53:                                               ; preds = %6
  %54 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %1, i64 0, i32 0, i32 4
  %55 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %54, align 8
  %56 = icmp eq %class.CFX_XMLNode* %55, null
  %57 = bitcast %class.CFX_XMLNode** %7 to %"class.fxcrt::TreeNode"**
  store %"class.fxcrt::TreeNode"* %0, %"class.fxcrt::TreeNode"** %57, align 8
  br i1 %56, label %59, label %58, !prof !6

58:                                               ; preds = %53
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !186
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !187
  unreachable

59:                                               ; preds = %53
  %60 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %1, i64 0, i32 0, i32 5
  %61 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %60, align 8
  %62 = icmp eq %class.CFX_XMLNode* %61, null
  br i1 %62, label %64, label %63, !prof !6

63:                                               ; preds = %59
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !188
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !189
  unreachable

64:                                               ; preds = %44, %59
  %65 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %1, i64 0, i32 0, i32 5
  %66 = getelementptr inbounds %"class.fxcrt::TreeNode", %"class.fxcrt::TreeNode"* %0, i64 0, i32 3
  %67 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %66, align 8
  %68 = icmp eq %class.CFX_XMLNode* %67, null
  %69 = getelementptr inbounds %"class.fxcrt::TreeNode", %"class.fxcrt::TreeNode"* %0, i64 0, i32 2
  %70 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %69, align 8
  %71 = icmp ne %class.CFX_XMLNode* %70, null
  br i1 %68, label %79, label %72

72:                                               ; preds = %64
  br i1 %71, label %74, label %73, !prof !6

73:                                               ; preds = %72
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !190
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !191
  unreachable

74:                                               ; preds = %72
  %75 = getelementptr inbounds %class.CFX_XMLNode, %class.CFX_XMLNode* %67, i64 0, i32 0, i32 4
  store %class.CFX_XMLNode* %1, %class.CFX_XMLNode** %75, align 8
  %76 = bitcast %class.CFX_XMLNode** %66 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = bitcast %class.CFX_XMLNode** %65 to i64*
  store i64 %77, i64* %78, align 8
  br label %82

79:                                               ; preds = %64
  br i1 %71, label %80, label %81, !prof !132

80:                                               ; preds = %79
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !192
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !193
  unreachable

81:                                               ; preds = %79
  store %class.CFX_XMLNode* %1, %class.CFX_XMLNode** %69, align 8
  br label %82

82:                                               ; preds = %81, %74
  store %class.CFX_XMLNode* %1, %class.CFX_XMLNode** %66, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFX_XMLParser11GetTextDataEv(%"class.fxcrt::WideString"* noalias sret, %class.CFX_XMLParser* nocapture) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %3, align 8
  %4 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %1, i64 0, i32 2
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %1, i64 0, i32 2, i32 0, i32 1
  %8 = bitcast i32** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %4 to i64*
  %11 = ptrtoint i32* %6 to i64
  %12 = sub i64 %9, %11
  %13 = ashr exact i64 %12, 2
  tail call void @_ZN5fxcrt10WideStringC1EPKwm(%"class.fxcrt::WideString"* %0, i32* %6, i64 %13) #14
  %14 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %1, i64 0, i32 4
  store i32 -1, i32* %14, align 8
  %15 = load i64, i64* %10, align 8
  store i64 %15, i64* %8, align 8
  %16 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %1, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %17 = bitcast i32** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %18, %15
  %20 = ashr exact i64 %19, 2
  %21 = icmp ult i64 %20, 128
  br i1 %21, label %22, label %198

22:                                               ; preds = %2
  %23 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 128, i64 4) #14
  %24 = ptrtoint i8* %23 to i64
  %25 = getelementptr inbounds i8, i8* %23, i64 512
  %26 = ptrtoint i8* %25 to i64
  %27 = load i32*, i32** %5, align 8
  %28 = ptrtoint i32* %27 to i64
  %29 = load i32*, i32** %7, align 8
  %30 = bitcast i32* %29 to i8*
  %31 = icmp eq i32* %29, %27
  br i1 %31, label %192, label %32

32:                                               ; preds = %22
  %33 = bitcast i8* %23 to i32*
  %34 = getelementptr i32, i32* %29, i64 -1
  %35 = ptrtoint i32* %34 to i64
  %36 = sub i64 %35, %28
  %37 = lshr i64 %36, 2
  %38 = add nuw nsw i64 %37, 1
  %39 = icmp ult i64 %38, 8
  br i1 %39, label %136, label %40

40:                                               ; preds = %32
  %41 = getelementptr i32, i32* %29, i64 -1
  %42 = ptrtoint i32* %41 to i64
  %43 = sub i64 %42, %28
  %44 = lshr i64 %43, 2
  %45 = and i64 %43, -4
  %46 = xor i64 %45, -4
  %47 = getelementptr i8, i8* %23, i64 %46
  %48 = xor i64 %44, -1
  %49 = getelementptr i32, i32* %29, i64 %48
  %50 = bitcast i32* %49 to i8*
  %51 = icmp ult i8* %47, %30
  %52 = icmp ugt i8* %23, %50
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %40
  %55 = and i64 %38, 9223372036854775800
  %56 = sub nsw i64 0, %55
  %57 = getelementptr i32, i32* %33, i64 %56
  %58 = sub nsw i64 0, %55
  %59 = getelementptr i32, i32* %29, i64 %58
  %60 = add nsw i64 %55, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %113, label %65

65:                                               ; preds = %54
  %66 = sub nuw nsw i64 %62, %63
  %67 = getelementptr i8, i8* %23, i64 -4
  %68 = bitcast i8* %67 to i32*
  %69 = getelementptr i32, i32* %29, i64 -1
  %70 = getelementptr i8, i8* %23, i64 -4
  %71 = bitcast i8* %70 to i32*
  %72 = getelementptr i32, i32* %29, i64 -1
  br label %73

73:                                               ; preds = %73, %65
  %74 = phi i64 [ 0, %65 ], [ %108, %73 ]
  %75 = phi i64 [ %66, %65 ], [ %109, %73 ]
  %76 = sub i64 0, %74
  %77 = sub i64 0, %74
  %78 = getelementptr inbounds i32, i32* %68, i64 %76
  %79 = getelementptr inbounds i32, i32* %69, i64 %77
  %80 = getelementptr inbounds i32, i32* %79, i64 -3
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4, !alias.scope !194
  %83 = getelementptr inbounds i32, i32* %79, i64 -4
  %84 = getelementptr inbounds i32, i32* %83, i64 -3
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4, !alias.scope !194
  %87 = getelementptr inbounds i32, i32* %78, i64 -3
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %88, align 4, !alias.scope !197, !noalias !194
  %89 = getelementptr inbounds i32, i32* %78, i64 -4
  %90 = getelementptr inbounds i32, i32* %89, i64 -3
  %91 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %86, <4 x i32>* %91, align 4, !alias.scope !197, !noalias !194
  %92 = sub nuw nsw i64 -8, %74
  %93 = sub nuw nsw i64 -8, %74
  %94 = getelementptr inbounds i32, i32* %71, i64 %92
  %95 = getelementptr inbounds i32, i32* %72, i64 %93
  %96 = getelementptr inbounds i32, i32* %95, i64 -3
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 4, !alias.scope !194
  %99 = getelementptr inbounds i32, i32* %95, i64 -4
  %100 = getelementptr inbounds i32, i32* %99, i64 -3
  %101 = bitcast i32* %100 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 4, !alias.scope !194
  %103 = getelementptr inbounds i32, i32* %94, i64 -3
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %98, <4 x i32>* %104, align 4, !alias.scope !197, !noalias !194
  %105 = getelementptr inbounds i32, i32* %94, i64 -4
  %106 = getelementptr inbounds i32, i32* %105, i64 -3
  %107 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %102, <4 x i32>* %107, align 4, !alias.scope !197, !noalias !194
  %108 = add i64 %74, 16
  %109 = add i64 %75, -2
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %73, !llvm.loop !199

111:                                              ; preds = %73
  %112 = sub nuw nsw i64 -16, %74
  br label %113

113:                                              ; preds = %111, %54
  %114 = phi i64 [ 0, %54 ], [ %112, %111 ]
  %115 = icmp eq i64 %63, 0
  br i1 %115, label %134, label %116

116:                                              ; preds = %113
  %117 = getelementptr i8, i8* %23, i64 -4
  %118 = bitcast i8* %117 to i32*
  %119 = getelementptr i32, i32* %29, i64 -1
  %120 = getelementptr inbounds i32, i32* %118, i64 %114
  %121 = getelementptr inbounds i32, i32* %119, i64 %114
  %122 = getelementptr inbounds i32, i32* %121, i64 -3
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 4, !alias.scope !194
  %125 = getelementptr inbounds i32, i32* %121, i64 -4
  %126 = getelementptr inbounds i32, i32* %125, i64 -3
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 4, !alias.scope !194
  %129 = getelementptr inbounds i32, i32* %120, i64 -3
  %130 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %130, align 4, !alias.scope !197, !noalias !194
  %131 = getelementptr inbounds i32, i32* %120, i64 -4
  %132 = getelementptr inbounds i32, i32* %131, i64 -3
  %133 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> %128, <4 x i32>* %133, align 4, !alias.scope !197, !noalias !194
  br label %134

134:                                              ; preds = %113, %116
  %135 = icmp eq i64 %38, %55
  br i1 %135, label %188, label %136

136:                                              ; preds = %134, %40, %32
  %137 = phi i32* [ %33, %40 ], [ %33, %32 ], [ %57, %134 ]
  %138 = phi i32* [ %29, %40 ], [ %29, %32 ], [ %59, %134 ]
  %139 = getelementptr i32, i32* %138, i64 -1
  %140 = ptrtoint i32* %139 to i64
  %141 = sub i64 %140, %28
  %142 = lshr i64 %141, 2
  %143 = add nuw nsw i64 %142, 1
  %144 = and i64 %143, 7
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %155, label %146

146:                                              ; preds = %136, %146
  %147 = phi i32* [ %150, %146 ], [ %137, %136 ]
  %148 = phi i32* [ %151, %146 ], [ %138, %136 ]
  %149 = phi i64 [ %153, %146 ], [ %144, %136 ]
  %150 = getelementptr inbounds i32, i32* %147, i64 -1
  %151 = getelementptr inbounds i32, i32* %148, i64 -1
  %152 = load i32, i32* %151, align 4
  store i32 %152, i32* %150, align 4
  %153 = add i64 %149, -1
  %154 = icmp eq i64 %153, 0
  br i1 %154, label %155, label %146, !llvm.loop !200

155:                                              ; preds = %146, %136
  %156 = phi i32* [ undef, %136 ], [ %150, %146 ]
  %157 = phi i32* [ %137, %136 ], [ %150, %146 ]
  %158 = phi i32* [ %138, %136 ], [ %151, %146 ]
  %159 = icmp ult i64 %141, 28
  br i1 %159, label %188, label %160

160:                                              ; preds = %155, %160
  %161 = phi i32* [ %184, %160 ], [ %157, %155 ]
  %162 = phi i32* [ %185, %160 ], [ %158, %155 ]
  %163 = getelementptr inbounds i32, i32* %161, i64 -1
  %164 = getelementptr inbounds i32, i32* %162, i64 -1
  %165 = load i32, i32* %164, align 4
  store i32 %165, i32* %163, align 4
  %166 = getelementptr inbounds i32, i32* %161, i64 -2
  %167 = getelementptr inbounds i32, i32* %162, i64 -2
  %168 = load i32, i32* %167, align 4
  store i32 %168, i32* %166, align 4
  %169 = getelementptr inbounds i32, i32* %161, i64 -3
  %170 = getelementptr inbounds i32, i32* %162, i64 -3
  %171 = load i32, i32* %170, align 4
  store i32 %171, i32* %169, align 4
  %172 = getelementptr inbounds i32, i32* %161, i64 -4
  %173 = getelementptr inbounds i32, i32* %162, i64 -4
  %174 = load i32, i32* %173, align 4
  store i32 %174, i32* %172, align 4
  %175 = getelementptr inbounds i32, i32* %161, i64 -5
  %176 = getelementptr inbounds i32, i32* %162, i64 -5
  %177 = load i32, i32* %176, align 4
  store i32 %177, i32* %175, align 4
  %178 = getelementptr inbounds i32, i32* %161, i64 -6
  %179 = getelementptr inbounds i32, i32* %162, i64 -6
  %180 = load i32, i32* %179, align 4
  store i32 %180, i32* %178, align 4
  %181 = getelementptr inbounds i32, i32* %161, i64 -7
  %182 = getelementptr inbounds i32, i32* %162, i64 -7
  %183 = load i32, i32* %182, align 4
  store i32 %183, i32* %181, align 4
  %184 = getelementptr inbounds i32, i32* %161, i64 -8
  %185 = getelementptr inbounds i32, i32* %162, i64 -8
  %186 = load i32, i32* %185, align 4
  store i32 %186, i32* %184, align 4
  %187 = icmp eq i32* %185, %27
  br i1 %187, label %188, label %160, !llvm.loop !201

188:                                              ; preds = %155, %160, %134
  %189 = phi i32* [ %57, %134 ], [ %156, %155 ], [ %184, %160 ]
  %190 = ptrtoint i32* %189 to i64
  %191 = load i64, i64* %10, align 8
  br label %192

192:                                              ; preds = %22, %188
  %193 = phi i64 [ %190, %188 ], [ %24, %22 ]
  %194 = phi i64 [ %191, %188 ], [ %28, %22 ]
  store i64 %193, i64* %10, align 8
  store i64 %24, i64* %8, align 8
  store i64 %26, i64* %17, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %198, label %196

196:                                              ; preds = %192
  %197 = inttoptr i64 %194 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %197) #14
  br label %198

198:                                              ; preds = %2, %192, %196
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFX_XMLParser15ProcessTextCharEw(%class.CFX_XMLParser*, i32 signext) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.fxcrt::WideString", align 8
  %4 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2
  %5 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2, i32 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %8 = load i32*, i32** %7, align 8
  %9 = icmp eq i32* %6, %8
  %10 = ptrtoint i32* %8 to i64
  br i1 %9, label %15, label %11

11:                                               ; preds = %2
  store i32 %1, i32* %6, align 4
  %12 = getelementptr inbounds i32, i32* %6, i64 1
  %13 = ptrtoint i32* %12 to i64
  %14 = bitcast i32** %5 to i64*
  store i64 %13, i64* %14, align 8
  br label %214

15:                                               ; preds = %2
  %16 = ptrtoint i32* %6 to i64
  %17 = bitcast i32** %5 to i64*
  %18 = bitcast %"class.std::__1::vector"* %4 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %16, %19
  %21 = ashr exact i64 %20, 2
  %22 = add nsw i64 %21, 1
  %23 = icmp ugt i64 %22, 4611686018427387903
  br i1 %23, label %24, label %26

24:                                               ; preds = %15
  %25 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %25) #15
  unreachable

26:                                               ; preds = %15
  %27 = bitcast i32** %7 to i64*
  %28 = sub i64 %10, %19
  %29 = ashr exact i64 %28, 2
  %30 = icmp ult i64 %29, 2305843009213693951
  br i1 %30, label %31, label %36

31:                                               ; preds = %26
  %32 = ashr exact i64 %28, 1
  %33 = icmp ult i64 %32, %22
  %34 = select i1 %33, i64 %22, i64 %32
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %40, label %36

36:                                               ; preds = %31, %26
  %37 = phi i64 [ %34, %31 ], [ 4611686018427387903, %26 ]
  %38 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %37, i64 4) #14
  %39 = bitcast i8* %38 to i32*
  br label %40

40:                                               ; preds = %36, %31
  %41 = phi i64 [ %37, %36 ], [ 0, %31 ]
  %42 = phi i32* [ %39, %36 ], [ null, %31 ]
  %43 = getelementptr inbounds i32, i32* %42, i64 %21
  %44 = getelementptr inbounds i32, i32* %42, i64 %41
  %45 = ptrtoint i32* %44 to i64
  store i32 %1, i32* %43, align 4
  %46 = getelementptr inbounds i32, i32* %43, i64 1
  %47 = ptrtoint i32* %46 to i64
  %48 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %49 = load i32*, i32** %48, align 8
  %50 = ptrtoint i32* %49 to i64
  %51 = load i32*, i32** %5, align 8
  %52 = icmp eq i32* %51, %49
  br i1 %52, label %207, label %53

53:                                               ; preds = %40
  %54 = getelementptr i32, i32* %51, i64 -1
  %55 = ptrtoint i32* %54 to i64
  %56 = sub i64 %55, %50
  %57 = lshr i64 %56, 2
  %58 = add nuw nsw i64 %57, 1
  %59 = icmp ult i64 %58, 8
  br i1 %59, label %152, label %60

60:                                               ; preds = %53
  %61 = getelementptr i32, i32* %51, i64 -1
  %62 = ptrtoint i32* %61 to i64
  %63 = sub i64 %62, %50
  %64 = lshr i64 %63, 2
  %65 = xor i64 %64, -1
  %66 = add nsw i64 %21, %65
  %67 = getelementptr i32, i32* %42, i64 %66
  %68 = xor i64 %64, -1
  %69 = getelementptr i32, i32* %51, i64 %68
  %70 = icmp ult i32* %67, %51
  %71 = icmp ult i32* %69, %43
  %72 = and i1 %70, %71
  br i1 %72, label %152, label %73

73:                                               ; preds = %60
  %74 = and i64 %58, 9223372036854775800
  %75 = sub nsw i64 0, %74
  %76 = getelementptr i32, i32* %43, i64 %75
  %77 = sub nsw i64 0, %74
  %78 = getelementptr i32, i32* %51, i64 %77
  %79 = add nsw i64 %74, -8
  %80 = lshr exact i64 %79, 3
  %81 = add nuw nsw i64 %80, 1
  %82 = and i64 %81, 1
  %83 = icmp eq i64 %79, 0
  br i1 %83, label %128, label %84

84:                                               ; preds = %73
  %85 = sub nuw nsw i64 %81, %82
  %86 = getelementptr i32, i32* %43, i64 -1
  %87 = getelementptr i32, i32* %51, i64 -1
  %88 = getelementptr i32, i32* %43, i64 -1
  %89 = getelementptr i32, i32* %51, i64 -1
  br label %90

90:                                               ; preds = %90, %84
  %91 = phi i64 [ 0, %84 ], [ %125, %90 ]
  %92 = phi i64 [ %85, %84 ], [ %126, %90 ]
  %93 = sub i64 0, %91
  %94 = sub i64 0, %91
  %95 = getelementptr inbounds i32, i32* %86, i64 %93
  %96 = getelementptr inbounds i32, i32* %87, i64 %94
  %97 = getelementptr inbounds i32, i32* %96, i64 -3
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4, !alias.scope !202
  %100 = getelementptr inbounds i32, i32* %96, i64 -4
  %101 = getelementptr inbounds i32, i32* %100, i64 -3
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !202
  %104 = getelementptr inbounds i32, i32* %95, i64 -3
  %105 = bitcast i32* %104 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %105, align 4, !alias.scope !205, !noalias !202
  %106 = getelementptr inbounds i32, i32* %95, i64 -4
  %107 = getelementptr inbounds i32, i32* %106, i64 -3
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %108, align 4, !alias.scope !205, !noalias !202
  %109 = sub nuw nsw i64 -8, %91
  %110 = sub nuw nsw i64 -8, %91
  %111 = getelementptr inbounds i32, i32* %88, i64 %109
  %112 = getelementptr inbounds i32, i32* %89, i64 %110
  %113 = getelementptr inbounds i32, i32* %112, i64 -3
  %114 = bitcast i32* %113 to <4 x i32>*
  %115 = load <4 x i32>, <4 x i32>* %114, align 4, !alias.scope !202
  %116 = getelementptr inbounds i32, i32* %112, i64 -4
  %117 = getelementptr inbounds i32, i32* %116, i64 -3
  %118 = bitcast i32* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !202
  %120 = getelementptr inbounds i32, i32* %111, i64 -3
  %121 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %121, align 4, !alias.scope !205, !noalias !202
  %122 = getelementptr inbounds i32, i32* %111, i64 -4
  %123 = getelementptr inbounds i32, i32* %122, i64 -3
  %124 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %124, align 4, !alias.scope !205, !noalias !202
  %125 = add i64 %91, 16
  %126 = add i64 %92, -2
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %128, label %90, !llvm.loop !207

128:                                              ; preds = %90, %73
  %129 = phi i64 [ 0, %73 ], [ %125, %90 ]
  %130 = icmp eq i64 %82, 0
  br i1 %130, label %150, label %131

131:                                              ; preds = %128
  %132 = sub i64 0, %129
  %133 = getelementptr i32, i32* %43, i64 -1
  %134 = sub i64 0, %129
  %135 = getelementptr i32, i32* %51, i64 -1
  %136 = getelementptr inbounds i32, i32* %133, i64 %132
  %137 = getelementptr inbounds i32, i32* %135, i64 %134
  %138 = getelementptr inbounds i32, i32* %137, i64 -3
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4, !alias.scope !202
  %141 = getelementptr inbounds i32, i32* %137, i64 -4
  %142 = getelementptr inbounds i32, i32* %141, i64 -3
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4, !alias.scope !202
  %145 = getelementptr inbounds i32, i32* %136, i64 -3
  %146 = bitcast i32* %145 to <4 x i32>*
  store <4 x i32> %140, <4 x i32>* %146, align 4, !alias.scope !205, !noalias !202
  %147 = getelementptr inbounds i32, i32* %136, i64 -4
  %148 = getelementptr inbounds i32, i32* %147, i64 -3
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %144, <4 x i32>* %149, align 4, !alias.scope !205, !noalias !202
  br label %150

150:                                              ; preds = %128, %131
  %151 = icmp eq i64 %58, %74
  br i1 %151, label %204, label %152

152:                                              ; preds = %150, %60, %53
  %153 = phi i32* [ %43, %60 ], [ %43, %53 ], [ %76, %150 ]
  %154 = phi i32* [ %51, %60 ], [ %51, %53 ], [ %78, %150 ]
  %155 = getelementptr i32, i32* %154, i64 -1
  %156 = ptrtoint i32* %155 to i64
  %157 = sub i64 %156, %50
  %158 = lshr i64 %157, 2
  %159 = add nuw nsw i64 %158, 1
  %160 = and i64 %159, 7
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %171, label %162

162:                                              ; preds = %152, %162
  %163 = phi i32* [ %166, %162 ], [ %153, %152 ]
  %164 = phi i32* [ %167, %162 ], [ %154, %152 ]
  %165 = phi i64 [ %169, %162 ], [ %160, %152 ]
  %166 = getelementptr inbounds i32, i32* %163, i64 -1
  %167 = getelementptr inbounds i32, i32* %164, i64 -1
  %168 = load i32, i32* %167, align 4
  store i32 %168, i32* %166, align 4
  %169 = add i64 %165, -1
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %162, !llvm.loop !208

171:                                              ; preds = %162, %152
  %172 = phi i32* [ undef, %152 ], [ %166, %162 ]
  %173 = phi i32* [ %153, %152 ], [ %166, %162 ]
  %174 = phi i32* [ %154, %152 ], [ %167, %162 ]
  %175 = icmp ult i64 %157, 28
  br i1 %175, label %204, label %176

176:                                              ; preds = %171, %176
  %177 = phi i32* [ %200, %176 ], [ %173, %171 ]
  %178 = phi i32* [ %201, %176 ], [ %174, %171 ]
  %179 = getelementptr inbounds i32, i32* %177, i64 -1
  %180 = getelementptr inbounds i32, i32* %178, i64 -1
  %181 = load i32, i32* %180, align 4
  store i32 %181, i32* %179, align 4
  %182 = getelementptr inbounds i32, i32* %177, i64 -2
  %183 = getelementptr inbounds i32, i32* %178, i64 -2
  %184 = load i32, i32* %183, align 4
  store i32 %184, i32* %182, align 4
  %185 = getelementptr inbounds i32, i32* %177, i64 -3
  %186 = getelementptr inbounds i32, i32* %178, i64 -3
  %187 = load i32, i32* %186, align 4
  store i32 %187, i32* %185, align 4
  %188 = getelementptr inbounds i32, i32* %177, i64 -4
  %189 = getelementptr inbounds i32, i32* %178, i64 -4
  %190 = load i32, i32* %189, align 4
  store i32 %190, i32* %188, align 4
  %191 = getelementptr inbounds i32, i32* %177, i64 -5
  %192 = getelementptr inbounds i32, i32* %178, i64 -5
  %193 = load i32, i32* %192, align 4
  store i32 %193, i32* %191, align 4
  %194 = getelementptr inbounds i32, i32* %177, i64 -6
  %195 = getelementptr inbounds i32, i32* %178, i64 -6
  %196 = load i32, i32* %195, align 4
  store i32 %196, i32* %194, align 4
  %197 = getelementptr inbounds i32, i32* %177, i64 -7
  %198 = getelementptr inbounds i32, i32* %178, i64 -7
  %199 = load i32, i32* %198, align 4
  store i32 %199, i32* %197, align 4
  %200 = getelementptr inbounds i32, i32* %177, i64 -8
  %201 = getelementptr inbounds i32, i32* %178, i64 -8
  %202 = load i32, i32* %201, align 4
  store i32 %202, i32* %200, align 4
  %203 = icmp eq i32* %201, %49
  br i1 %203, label %204, label %176, !llvm.loop !209

204:                                              ; preds = %171, %176, %150
  %205 = phi i32* [ %76, %150 ], [ %172, %171 ], [ %200, %176 ]
  %206 = load i64, i64* %18, align 8
  br label %207

207:                                              ; preds = %40, %204
  %208 = phi i32* [ %205, %204 ], [ %43, %40 ]
  %209 = phi i64 [ %206, %204 ], [ %50, %40 ]
  %210 = ptrtoint i32* %208 to i64
  store i64 %210, i64* %18, align 8
  store i64 %47, i64* %17, align 8
  store i64 %45, i64* %27, align 8
  %211 = icmp eq i64 %209, 0
  br i1 %211, label %214, label %212

212:                                              ; preds = %207
  %213 = inttoptr i64 %209 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %213) #14
  br label %214

214:                                              ; preds = %11, %207, %212
  %215 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 4
  %216 = load i32, i32* %215, align 8
  %217 = icmp sgt i32 %216, -1
  %218 = icmp eq i32 %1, 59
  %219 = and i1 %218, %217
  br i1 %219, label %220, label %1588

220:                                              ; preds = %214
  %221 = bitcast %"class.fxcrt::WideString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %221) #14
  %222 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %222, align 8
  %223 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %224 = load i32*, i32** %223, align 8
  %225 = sext i32 %216 to i64
  %226 = getelementptr inbounds i32, i32* %224, i64 %225
  %227 = getelementptr inbounds i32, i32* %226, i64 1
  %228 = bitcast i32** %5 to i64*
  %229 = load i64, i64* %228, align 8
  %230 = bitcast %"class.std::__1::vector"* %4 to i64*
  %231 = ptrtoint i32* %224 to i64
  %232 = sub i64 %229, %231
  %233 = ashr exact i64 %232, 2
  %234 = sub nuw nsw i64 -2, %225
  %235 = add nsw i64 %234, %233
  call void @_ZN5fxcrt10WideStringC1EPKwm(%"class.fxcrt::WideString"* nonnull %3, i32* %227, i64 %235) #14
  %236 = load i32*, i32** %223, align 8
  %237 = load i32, i32* %215, align 8
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i32, i32* %236, i64 %238
  %240 = load i32*, i32** %5, align 8
  %241 = icmp eq i32* %239, %240
  br i1 %241, label %243, label %242

242:                                              ; preds = %220
  store i32* %239, i32** %5, align 8
  br label %243

243:                                              ; preds = %220, %242
  %244 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %222, align 8
  %245 = icmp eq %"class.fxcrt::StringDataTemplate"* %244, null
  br i1 %245, label %1587, label %246

246:                                              ; preds = %243
  %247 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %244, i64 0, i32 1
  %248 = load i64, i64* %247, align 8
  %249 = trunc i64 %248 to i32
  %250 = icmp sgt i32 %249, 0
  br i1 %250, label %251, label %1587

251:                                              ; preds = %246
  %252 = icmp eq i64 %248, 0
  br i1 %252, label %253, label %254, !prof !132

253:                                              ; preds = %251
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !210
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !211
  unreachable

254:                                              ; preds = %251
  %255 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %244, i64 0, i32 3, i64 0
  %256 = load i32, i32* %255, align 4
  %257 = icmp eq i32 %256, 35
  br i1 %257, label %258, label %557

258:                                              ; preds = %254
  %259 = icmp sgt i32 %249, 1
  br i1 %259, label %260, label %1587

260:                                              ; preds = %258
  %261 = icmp ugt i64 %248, 1
  br i1 %261, label %263, label %262, !prof !6

262:                                              ; preds = %260
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !210
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !211
  unreachable

263:                                              ; preds = %260
  %264 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %244, i64 0, i32 3, i64 1
  %265 = load i32, i32* %264, align 4
  %266 = icmp eq i32 %265, 120
  br i1 %266, label %267, label %304

267:                                              ; preds = %263
  %268 = icmp sgt i32 %249, 2
  br i1 %268, label %269, label %1587

269:                                              ; preds = %267
  %270 = and i64 %248, 4294967295
  br label %271

271:                                              ; preds = %289, %269
  %272 = phi i64 [ 2, %269 ], [ %302, %289 ]
  %273 = phi i32 [ 0, %269 ], [ %301, %289 ]
  %274 = icmp eq i64 %272, %248
  br i1 %274, label %275, label %276, !prof !132

275:                                              ; preds = %271
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !210
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !211
  unreachable

276:                                              ; preds = %271
  %277 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %244, i64 0, i32 3, i64 %272
  %278 = load i32, i32* %277, align 4
  %279 = trunc i32 %278 to i8
  %280 = icmp slt i8 %279, 0
  br i1 %280, label %347, label %281

281:                                              ; preds = %276
  %282 = tail call i16** @__ctype_b_loc() #16
  %283 = load i16*, i16** %282, align 8
  %284 = sext i8 %279 to i64
  %285 = getelementptr inbounds i16, i16* %283, i64 %284
  %286 = load i16, i16* %285, align 2
  %287 = and i16 %286, 4096
  %288 = icmp eq i16 %287, 0
  br i1 %288, label %347, label %289

289:                                              ; preds = %281
  %290 = shl i32 %273, 4
  %291 = shl i32 %278, 24
  %292 = ashr exact i32 %291, 24
  %293 = add nsw i32 %292, -97
  %294 = icmp ult i32 %293, 26
  %295 = add nsw i8 %279, -32
  %296 = select i1 %294, i8 %295, i8 %279
  %297 = sext i8 %296 to i32
  %298 = icmp sgt i8 %296, 57
  %299 = select i1 %298, i32 -55, i32 -48
  %300 = add nsw i32 %299, %297
  %301 = add i32 %300, %290
  %302 = add nuw nsw i64 %272, 1
  %303 = icmp eq i64 %302, %270
  br i1 %303, label %347, label %271

304:                                              ; preds = %263
  %305 = and i64 %248, 4294967295
  br label %306

306:                                              ; preds = %304, %344
  %307 = phi i32 [ 0, %304 ], [ %341, %344 ]
  %308 = phi i64 [ 1, %304 ], [ %342, %344 ]
  %309 = phi %"class.fxcrt::StringDataTemplate"* [ %244, %304 ], [ %345, %344 ]
  %310 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %309, i64 0, i32 1
  %311 = load i64, i64* %310, align 8
  %312 = icmp ugt i64 %311, %308
  br i1 %312, label %314, label %313, !prof !6

313:                                              ; preds = %344, %306
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !210
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !211
  unreachable

314:                                              ; preds = %306
  %315 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %309, i64 0, i32 3, i64 %308
  %316 = load i32, i32* %315, align 4
  %317 = icmp ugt i32 %316, 127
  br i1 %317, label %347, label %318

318:                                              ; preds = %314
  %319 = call i32 @iswdigit(i32 %316) #14
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %347, label %321

321:                                              ; preds = %318
  %322 = mul i32 %307, 10
  %323 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %222, align 8
  %324 = icmp eq %"class.fxcrt::StringDataTemplate"* %323, null
  br i1 %324, label %329, label %325

325:                                              ; preds = %321
  %326 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %323, i64 0, i32 1
  %327 = load i64, i64* %326, align 8
  %328 = icmp ugt i64 %327, %308
  br i1 %328, label %330, label %329, !prof !6

329:                                              ; preds = %325, %321
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !210
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #14, !srcloc !211
  unreachable

330:                                              ; preds = %325
  %331 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %323, i64 0, i32 3, i64 %308
  %332 = load i32, i32* %331, align 4
  %333 = icmp ugt i32 %332, 127
  br i1 %333, label %339, label %334

334:                                              ; preds = %330
  %335 = call i32 @iswdigit(i32 %332) #14
  %336 = icmp eq i32 %335, 0
  %337 = add nsw i32 %332, -48
  %338 = select i1 %336, i32 0, i32 %337
  br label %339

339:                                              ; preds = %330, %334
  %340 = phi i32 [ %338, %334 ], [ 0, %330 ]
  %341 = add i32 %340, %322
  %342 = add nuw nsw i64 %308, 1
  %343 = icmp eq i64 %342, %305
  br i1 %343, label %347, label %344

344:                                              ; preds = %339
  %345 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %222, align 8
  %346 = icmp eq %"class.fxcrt::StringDataTemplate"* %345, null
  br i1 %346, label %313, label %306

347:                                              ; preds = %314, %318, %339, %276, %281, %289
  %348 = phi i32 [ %301, %289 ], [ %273, %276 ], [ %273, %281 ], [ %341, %339 ], [ %307, %314 ], [ %307, %318 ]
  %349 = icmp ugt i32 %348, 1114111
  br i1 %349, label %352, label %350

350:                                              ; preds = %347
  %351 = icmp eq i32 %348, 0
  br i1 %351, label %1587, label %352

352:                                              ; preds = %347, %350
  %353 = phi i32 [ %348, %350 ], [ 32, %347 ]
  %354 = load i32*, i32** %5, align 8
  %355 = load i32*, i32** %7, align 8
  %356 = icmp eq i32* %354, %355
  %357 = ptrtoint i32* %355 to i64
  br i1 %356, label %361, label %358

358:                                              ; preds = %352
  store i32 %353, i32* %354, align 4
  %359 = getelementptr inbounds i32, i32* %354, i64 1
  %360 = ptrtoint i32* %359 to i64
  store i64 %360, i64* %228, align 8
  br label %1587

361:                                              ; preds = %352
  %362 = ptrtoint i32* %354 to i64
  %363 = load i64, i64* %230, align 8
  %364 = sub i64 %362, %363
  %365 = ashr exact i64 %364, 2
  %366 = add nsw i64 %365, 1
  %367 = icmp ugt i64 %366, 4611686018427387903
  br i1 %367, label %368, label %370

368:                                              ; preds = %361
  %369 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %369) #15
  unreachable

370:                                              ; preds = %361
  %371 = bitcast i32** %7 to i64*
  %372 = sub i64 %357, %363
  %373 = ashr exact i64 %372, 2
  %374 = icmp ult i64 %373, 2305843009213693951
  br i1 %374, label %375, label %380

375:                                              ; preds = %370
  %376 = ashr exact i64 %372, 1
  %377 = icmp ult i64 %376, %366
  %378 = select i1 %377, i64 %366, i64 %376
  %379 = icmp eq i64 %378, 0
  br i1 %379, label %384, label %380

380:                                              ; preds = %375, %370
  %381 = phi i64 [ %378, %375 ], [ 4611686018427387903, %370 ]
  %382 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %381, i64 4) #14
  %383 = bitcast i8* %382 to i32*
  br label %384

384:                                              ; preds = %380, %375
  %385 = phi i64 [ %381, %380 ], [ 0, %375 ]
  %386 = phi i32* [ %383, %380 ], [ null, %375 ]
  %387 = getelementptr inbounds i32, i32* %386, i64 %365
  %388 = getelementptr inbounds i32, i32* %386, i64 %385
  %389 = ptrtoint i32* %388 to i64
  store i32 %353, i32* %387, align 4
  %390 = getelementptr inbounds i32, i32* %387, i64 1
  %391 = ptrtoint i32* %390 to i64
  %392 = load i32*, i32** %223, align 8
  %393 = ptrtoint i32* %392 to i64
  %394 = load i32*, i32** %5, align 8
  %395 = icmp eq i32* %394, %392
  br i1 %395, label %550, label %396

396:                                              ; preds = %384
  %397 = getelementptr i32, i32* %394, i64 -1
  %398 = ptrtoint i32* %397 to i64
  %399 = sub i64 %398, %393
  %400 = lshr i64 %399, 2
  %401 = add nuw nsw i64 %400, 1
  %402 = icmp ult i64 %401, 8
  br i1 %402, label %495, label %403

403:                                              ; preds = %396
  %404 = getelementptr i32, i32* %394, i64 -1
  %405 = ptrtoint i32* %404 to i64
  %406 = sub i64 %405, %393
  %407 = lshr i64 %406, 2
  %408 = xor i64 %407, -1
  %409 = add nsw i64 %365, %408
  %410 = getelementptr i32, i32* %386, i64 %409
  %411 = xor i64 %407, -1
  %412 = getelementptr i32, i32* %394, i64 %411
  %413 = icmp ult i32* %410, %394
  %414 = icmp ult i32* %412, %387
  %415 = and i1 %413, %414
  br i1 %415, label %495, label %416

416:                                              ; preds = %403
  %417 = and i64 %401, 9223372036854775800
  %418 = sub nsw i64 0, %417
  %419 = getelementptr i32, i32* %387, i64 %418
  %420 = sub nsw i64 0, %417
  %421 = getelementptr i32, i32* %394, i64 %420
  %422 = add nsw i64 %417, -8
  %423 = lshr exact i64 %422, 3
  %424 = add nuw nsw i64 %423, 1
  %425 = and i64 %424, 1
  %426 = icmp eq i64 %422, 0
  br i1 %426, label %473, label %427

427:                                              ; preds = %416
  %428 = sub nuw nsw i64 %424, %425
  %429 = getelementptr i32, i32* %387, i64 -1
  %430 = getelementptr i32, i32* %394, i64 -1
  %431 = getelementptr i32, i32* %387, i64 -1
  %432 = getelementptr i32, i32* %394, i64 -1
  br label %433

433:                                              ; preds = %433, %427
  %434 = phi i64 [ 0, %427 ], [ %468, %433 ]
  %435 = phi i64 [ %428, %427 ], [ %469, %433 ]
  %436 = sub i64 0, %434
  %437 = sub i64 0, %434
  %438 = getelementptr inbounds i32, i32* %429, i64 %436
  %439 = getelementptr inbounds i32, i32* %430, i64 %437
  %440 = getelementptr inbounds i32, i32* %439, i64 -3
  %441 = bitcast i32* %440 to <4 x i32>*
  %442 = load <4 x i32>, <4 x i32>* %441, align 4, !alias.scope !212
  %443 = getelementptr inbounds i32, i32* %439, i64 -4
  %444 = getelementptr inbounds i32, i32* %443, i64 -3
  %445 = bitcast i32* %444 to <4 x i32>*
  %446 = load <4 x i32>, <4 x i32>* %445, align 4, !alias.scope !212
  %447 = getelementptr inbounds i32, i32* %438, i64 -3
  %448 = bitcast i32* %447 to <4 x i32>*
  store <4 x i32> %442, <4 x i32>* %448, align 4, !alias.scope !215, !noalias !212
  %449 = getelementptr inbounds i32, i32* %438, i64 -4
  %450 = getelementptr inbounds i32, i32* %449, i64 -3
  %451 = bitcast i32* %450 to <4 x i32>*
  store <4 x i32> %446, <4 x i32>* %451, align 4, !alias.scope !215, !noalias !212
  %452 = sub nuw nsw i64 -8, %434
  %453 = sub nuw nsw i64 -8, %434
  %454 = getelementptr inbounds i32, i32* %431, i64 %452
  %455 = getelementptr inbounds i32, i32* %432, i64 %453
  %456 = getelementptr inbounds i32, i32* %455, i64 -3
  %457 = bitcast i32* %456 to <4 x i32>*
  %458 = load <4 x i32>, <4 x i32>* %457, align 4, !alias.scope !212
  %459 = getelementptr inbounds i32, i32* %455, i64 -4
  %460 = getelementptr inbounds i32, i32* %459, i64 -3
  %461 = bitcast i32* %460 to <4 x i32>*
  %462 = load <4 x i32>, <4 x i32>* %461, align 4, !alias.scope !212
  %463 = getelementptr inbounds i32, i32* %454, i64 -3
  %464 = bitcast i32* %463 to <4 x i32>*
  store <4 x i32> %458, <4 x i32>* %464, align 4, !alias.scope !215, !noalias !212
  %465 = getelementptr inbounds i32, i32* %454, i64 -4
  %466 = getelementptr inbounds i32, i32* %465, i64 -3
  %467 = bitcast i32* %466 to <4 x i32>*
  store <4 x i32> %462, <4 x i32>* %467, align 4, !alias.scope !215, !noalias !212
  %468 = add i64 %434, 16
  %469 = add i64 %435, -2
  %470 = icmp eq i64 %469, 0
  br i1 %470, label %471, label %433, !llvm.loop !217

471:                                              ; preds = %433
  %472 = sub nuw nsw i64 -16, %434
  br label %473

473:                                              ; preds = %471, %416
  %474 = phi i64 [ 0, %416 ], [ %472, %471 ]
  %475 = icmp eq i64 %425, 0
  br i1 %475, label %493, label %476

476:                                              ; preds = %473
  %477 = getelementptr i32, i32* %387, i64 -1
  %478 = getelementptr i32, i32* %394, i64 -1
  %479 = getelementptr inbounds i32, i32* %477, i64 %474
  %480 = getelementptr inbounds i32, i32* %478, i64 %474
  %481 = getelementptr inbounds i32, i32* %480, i64 -3
  %482 = bitcast i32* %481 to <4 x i32>*
  %483 = load <4 x i32>, <4 x i32>* %482, align 4, !alias.scope !212
  %484 = getelementptr inbounds i32, i32* %480, i64 -4
  %485 = getelementptr inbounds i32, i32* %484, i64 -3
  %486 = bitcast i32* %485 to <4 x i32>*
  %487 = load <4 x i32>, <4 x i32>* %486, align 4, !alias.scope !212
  %488 = getelementptr inbounds i32, i32* %479, i64 -3
  %489 = bitcast i32* %488 to <4 x i32>*
  store <4 x i32> %483, <4 x i32>* %489, align 4, !alias.scope !215, !noalias !212
  %490 = getelementptr inbounds i32, i32* %479, i64 -4
  %491 = getelementptr inbounds i32, i32* %490, i64 -3
  %492 = bitcast i32* %491 to <4 x i32>*
  store <4 x i32> %487, <4 x i32>* %492, align 4, !alias.scope !215, !noalias !212
  br label %493

493:                                              ; preds = %473, %476
  %494 = icmp eq i64 %401, %417
  br i1 %494, label %547, label %495

495:                                              ; preds = %493, %403, %396
  %496 = phi i32* [ %387, %403 ], [ %387, %396 ], [ %419, %493 ]
  %497 = phi i32* [ %394, %403 ], [ %394, %396 ], [ %421, %493 ]
  %498 = getelementptr i32, i32* %497, i64 -1
  %499 = ptrtoint i32* %498 to i64
  %500 = sub i64 %499, %393
  %501 = lshr i64 %500, 2
  %502 = add nuw nsw i64 %501, 1
  %503 = and i64 %502, 7
  %504 = icmp eq i64 %503, 0
  br i1 %504, label %514, label %505

505:                                              ; preds = %495, %505
  %506 = phi i32* [ %509, %505 ], [ %496, %495 ]
  %507 = phi i32* [ %510, %505 ], [ %497, %495 ]
  %508 = phi i64 [ %512, %505 ], [ %503, %495 ]
  %509 = getelementptr inbounds i32, i32* %506, i64 -1
  %510 = getelementptr inbounds i32, i32* %507, i64 -1
  %511 = load i32, i32* %510, align 4
  store i32 %511, i32* %509, align 4
  %512 = add i64 %508, -1
  %513 = icmp eq i64 %512, 0
  br i1 %513, label %514, label %505, !llvm.loop !218

514:                                              ; preds = %505, %495
  %515 = phi i32* [ undef, %495 ], [ %509, %505 ]
  %516 = phi i32* [ %496, %495 ], [ %509, %505 ]
  %517 = phi i32* [ %497, %495 ], [ %510, %505 ]
  %518 = icmp ult i64 %500, 28
  br i1 %518, label %547, label %519

519:                                              ; preds = %514, %519
  %520 = phi i32* [ %543, %519 ], [ %516, %514 ]
  %521 = phi i32* [ %544, %519 ], [ %517, %514 ]
  %522 = getelementptr inbounds i32, i32* %520, i64 -1
  %523 = getelementptr inbounds i32, i32* %521, i64 -1
  %524 = load i32, i32* %523, align 4
  store i32 %524, i32* %522, align 4
  %525 = getelementptr inbounds i32, i32* %520, i64 -2
  %526 = getelementptr inbounds i32, i32* %521, i64 -2
  %527 = load i32, i32* %526, align 4
  store i32 %527, i32* %525, align 4
  %528 = getelementptr inbounds i32, i32* %520, i64 -3
  %529 = getelementptr inbounds i32, i32* %521, i64 -3
  %530 = load i32, i32* %529, align 4
  store i32 %530, i32* %528, align 4
  %531 = getelementptr inbounds i32, i32* %520, i64 -4
  %532 = getelementptr inbounds i32, i32* %521, i64 -4
  %533 = load i32, i32* %532, align 4
  store i32 %533, i32* %531, align 4
  %534 = getelementptr inbounds i32, i32* %520, i64 -5
  %535 = getelementptr inbounds i32, i32* %521, i64 -5
  %536 = load i32, i32* %535, align 4
  store i32 %536, i32* %534, align 4
  %537 = getelementptr inbounds i32, i32* %520, i64 -6
  %538 = getelementptr inbounds i32, i32* %521, i64 -6
  %539 = load i32, i32* %538, align 4
  store i32 %539, i32* %537, align 4
  %540 = getelementptr inbounds i32, i32* %520, i64 -7
  %541 = getelementptr inbounds i32, i32* %521, i64 -7
  %542 = load i32, i32* %541, align 4
  store i32 %542, i32* %540, align 4
  %543 = getelementptr inbounds i32, i32* %520, i64 -8
  %544 = getelementptr inbounds i32, i32* %521, i64 -8
  %545 = load i32, i32* %544, align 4
  store i32 %545, i32* %543, align 4
  %546 = icmp eq i32* %544, %392
  br i1 %546, label %547, label %519, !llvm.loop !219

547:                                              ; preds = %514, %519, %493
  %548 = phi i32* [ %419, %493 ], [ %515, %514 ], [ %543, %519 ]
  %549 = load i64, i64* %230, align 8
  br label %550

550:                                              ; preds = %384, %547
  %551 = phi i32* [ %548, %547 ], [ %387, %384 ]
  %552 = phi i64 [ %549, %547 ], [ %393, %384 ]
  %553 = ptrtoint i32* %551 to i64
  store i64 %553, i64* %230, align 8
  store i64 %391, i64* %228, align 8
  store i64 %389, i64* %371, align 8
  %554 = icmp eq i64 %552, 0
  br i1 %554, label %1587, label %555

555:                                              ; preds = %550
  %556 = inttoptr i64 %552 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %556) #14
  br label %1587

557:                                              ; preds = %254
  %558 = call zeroext i1 @_ZNK5fxcrt10WideStringeqEPKw(%"class.fxcrt::WideString"* nonnull %3, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @.str.6, i64 0, i64 0)) #14
  br i1 %558, label %559, label %763

559:                                              ; preds = %557
  %560 = load i32*, i32** %5, align 8
  %561 = load i32*, i32** %7, align 8
  %562 = icmp ult i32* %560, %561
  %563 = ptrtoint i32* %561 to i64
  br i1 %562, label %564, label %567

564:                                              ; preds = %559
  store i32 38, i32* %560, align 4
  %565 = getelementptr inbounds i32, i32* %560, i64 1
  %566 = ptrtoint i32* %565 to i64
  store i64 %566, i64* %228, align 8
  br label %1587

567:                                              ; preds = %559
  %568 = ptrtoint i32* %560 to i64
  %569 = load i64, i64* %230, align 8
  %570 = sub i64 %568, %569
  %571 = ashr exact i64 %570, 2
  %572 = add nsw i64 %571, 1
  %573 = icmp ugt i64 %572, 4611686018427387903
  br i1 %573, label %574, label %576

574:                                              ; preds = %567
  %575 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %575) #15
  unreachable

576:                                              ; preds = %567
  %577 = bitcast i32** %7 to i64*
  %578 = sub i64 %563, %569
  %579 = ashr exact i64 %578, 2
  %580 = icmp ult i64 %579, 2305843009213693951
  br i1 %580, label %581, label %586

581:                                              ; preds = %576
  %582 = ashr exact i64 %578, 1
  %583 = icmp ult i64 %582, %572
  %584 = select i1 %583, i64 %572, i64 %582
  %585 = icmp eq i64 %584, 0
  br i1 %585, label %590, label %586

586:                                              ; preds = %581, %576
  %587 = phi i64 [ %584, %581 ], [ 4611686018427387903, %576 ]
  %588 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %587, i64 4) #14
  %589 = bitcast i8* %588 to i32*
  br label %590

590:                                              ; preds = %586, %581
  %591 = phi i64 [ %587, %586 ], [ 0, %581 ]
  %592 = phi i32* [ %589, %586 ], [ null, %581 ]
  %593 = getelementptr inbounds i32, i32* %592, i64 %571
  %594 = getelementptr inbounds i32, i32* %592, i64 %591
  %595 = ptrtoint i32* %594 to i64
  store i32 38, i32* %593, align 4
  %596 = getelementptr inbounds i32, i32* %593, i64 1
  %597 = ptrtoint i32* %596 to i64
  %598 = load i32*, i32** %223, align 8
  %599 = ptrtoint i32* %598 to i64
  %600 = load i32*, i32** %5, align 8
  %601 = icmp eq i32* %600, %598
  br i1 %601, label %756, label %602

602:                                              ; preds = %590
  %603 = getelementptr i32, i32* %600, i64 -1
  %604 = ptrtoint i32* %603 to i64
  %605 = sub i64 %604, %599
  %606 = lshr i64 %605, 2
  %607 = add nuw nsw i64 %606, 1
  %608 = icmp ult i64 %607, 8
  br i1 %608, label %701, label %609

609:                                              ; preds = %602
  %610 = getelementptr i32, i32* %600, i64 -1
  %611 = ptrtoint i32* %610 to i64
  %612 = sub i64 %611, %599
  %613 = lshr i64 %612, 2
  %614 = xor i64 %613, -1
  %615 = add nsw i64 %571, %614
  %616 = getelementptr i32, i32* %592, i64 %615
  %617 = xor i64 %613, -1
  %618 = getelementptr i32, i32* %600, i64 %617
  %619 = icmp ult i32* %616, %600
  %620 = icmp ult i32* %618, %593
  %621 = and i1 %619, %620
  br i1 %621, label %701, label %622

622:                                              ; preds = %609
  %623 = and i64 %607, 9223372036854775800
  %624 = sub nsw i64 0, %623
  %625 = getelementptr i32, i32* %593, i64 %624
  %626 = sub nsw i64 0, %623
  %627 = getelementptr i32, i32* %600, i64 %626
  %628 = add nsw i64 %623, -8
  %629 = lshr exact i64 %628, 3
  %630 = add nuw nsw i64 %629, 1
  %631 = and i64 %630, 1
  %632 = icmp eq i64 %628, 0
  br i1 %632, label %679, label %633

633:                                              ; preds = %622
  %634 = sub nuw nsw i64 %630, %631
  %635 = getelementptr i32, i32* %593, i64 -1
  %636 = getelementptr i32, i32* %600, i64 -1
  %637 = getelementptr i32, i32* %593, i64 -1
  %638 = getelementptr i32, i32* %600, i64 -1
  br label %639

639:                                              ; preds = %639, %633
  %640 = phi i64 [ 0, %633 ], [ %674, %639 ]
  %641 = phi i64 [ %634, %633 ], [ %675, %639 ]
  %642 = sub i64 0, %640
  %643 = sub i64 0, %640
  %644 = getelementptr inbounds i32, i32* %635, i64 %642
  %645 = getelementptr inbounds i32, i32* %636, i64 %643
  %646 = getelementptr inbounds i32, i32* %645, i64 -3
  %647 = bitcast i32* %646 to <4 x i32>*
  %648 = load <4 x i32>, <4 x i32>* %647, align 4, !alias.scope !220
  %649 = getelementptr inbounds i32, i32* %645, i64 -4
  %650 = getelementptr inbounds i32, i32* %649, i64 -3
  %651 = bitcast i32* %650 to <4 x i32>*
  %652 = load <4 x i32>, <4 x i32>* %651, align 4, !alias.scope !220
  %653 = getelementptr inbounds i32, i32* %644, i64 -3
  %654 = bitcast i32* %653 to <4 x i32>*
  store <4 x i32> %648, <4 x i32>* %654, align 4, !alias.scope !223, !noalias !220
  %655 = getelementptr inbounds i32, i32* %644, i64 -4
  %656 = getelementptr inbounds i32, i32* %655, i64 -3
  %657 = bitcast i32* %656 to <4 x i32>*
  store <4 x i32> %652, <4 x i32>* %657, align 4, !alias.scope !223, !noalias !220
  %658 = sub nuw nsw i64 -8, %640
  %659 = sub nuw nsw i64 -8, %640
  %660 = getelementptr inbounds i32, i32* %637, i64 %658
  %661 = getelementptr inbounds i32, i32* %638, i64 %659
  %662 = getelementptr inbounds i32, i32* %661, i64 -3
  %663 = bitcast i32* %662 to <4 x i32>*
  %664 = load <4 x i32>, <4 x i32>* %663, align 4, !alias.scope !220
  %665 = getelementptr inbounds i32, i32* %661, i64 -4
  %666 = getelementptr inbounds i32, i32* %665, i64 -3
  %667 = bitcast i32* %666 to <4 x i32>*
  %668 = load <4 x i32>, <4 x i32>* %667, align 4, !alias.scope !220
  %669 = getelementptr inbounds i32, i32* %660, i64 -3
  %670 = bitcast i32* %669 to <4 x i32>*
  store <4 x i32> %664, <4 x i32>* %670, align 4, !alias.scope !223, !noalias !220
  %671 = getelementptr inbounds i32, i32* %660, i64 -4
  %672 = getelementptr inbounds i32, i32* %671, i64 -3
  %673 = bitcast i32* %672 to <4 x i32>*
  store <4 x i32> %668, <4 x i32>* %673, align 4, !alias.scope !223, !noalias !220
  %674 = add i64 %640, 16
  %675 = add i64 %641, -2
  %676 = icmp eq i64 %675, 0
  br i1 %676, label %677, label %639, !llvm.loop !225

677:                                              ; preds = %639
  %678 = sub nuw nsw i64 -16, %640
  br label %679

679:                                              ; preds = %677, %622
  %680 = phi i64 [ 0, %622 ], [ %678, %677 ]
  %681 = icmp eq i64 %631, 0
  br i1 %681, label %699, label %682

682:                                              ; preds = %679
  %683 = getelementptr i32, i32* %593, i64 -1
  %684 = getelementptr i32, i32* %600, i64 -1
  %685 = getelementptr inbounds i32, i32* %683, i64 %680
  %686 = getelementptr inbounds i32, i32* %684, i64 %680
  %687 = getelementptr inbounds i32, i32* %686, i64 -3
  %688 = bitcast i32* %687 to <4 x i32>*
  %689 = load <4 x i32>, <4 x i32>* %688, align 4, !alias.scope !220
  %690 = getelementptr inbounds i32, i32* %686, i64 -4
  %691 = getelementptr inbounds i32, i32* %690, i64 -3
  %692 = bitcast i32* %691 to <4 x i32>*
  %693 = load <4 x i32>, <4 x i32>* %692, align 4, !alias.scope !220
  %694 = getelementptr inbounds i32, i32* %685, i64 -3
  %695 = bitcast i32* %694 to <4 x i32>*
  store <4 x i32> %689, <4 x i32>* %695, align 4, !alias.scope !223, !noalias !220
  %696 = getelementptr inbounds i32, i32* %685, i64 -4
  %697 = getelementptr inbounds i32, i32* %696, i64 -3
  %698 = bitcast i32* %697 to <4 x i32>*
  store <4 x i32> %693, <4 x i32>* %698, align 4, !alias.scope !223, !noalias !220
  br label %699

699:                                              ; preds = %679, %682
  %700 = icmp eq i64 %607, %623
  br i1 %700, label %753, label %701

701:                                              ; preds = %699, %609, %602
  %702 = phi i32* [ %593, %609 ], [ %593, %602 ], [ %625, %699 ]
  %703 = phi i32* [ %600, %609 ], [ %600, %602 ], [ %627, %699 ]
  %704 = getelementptr i32, i32* %703, i64 -1
  %705 = ptrtoint i32* %704 to i64
  %706 = sub i64 %705, %599
  %707 = lshr i64 %706, 2
  %708 = add nuw nsw i64 %707, 1
  %709 = and i64 %708, 7
  %710 = icmp eq i64 %709, 0
  br i1 %710, label %720, label %711

711:                                              ; preds = %701, %711
  %712 = phi i32* [ %715, %711 ], [ %702, %701 ]
  %713 = phi i32* [ %716, %711 ], [ %703, %701 ]
  %714 = phi i64 [ %718, %711 ], [ %709, %701 ]
  %715 = getelementptr inbounds i32, i32* %712, i64 -1
  %716 = getelementptr inbounds i32, i32* %713, i64 -1
  %717 = load i32, i32* %716, align 4
  store i32 %717, i32* %715, align 4
  %718 = add i64 %714, -1
  %719 = icmp eq i64 %718, 0
  br i1 %719, label %720, label %711, !llvm.loop !226

720:                                              ; preds = %711, %701
  %721 = phi i32* [ undef, %701 ], [ %715, %711 ]
  %722 = phi i32* [ %702, %701 ], [ %715, %711 ]
  %723 = phi i32* [ %703, %701 ], [ %716, %711 ]
  %724 = icmp ult i64 %706, 28
  br i1 %724, label %753, label %725

725:                                              ; preds = %720, %725
  %726 = phi i32* [ %749, %725 ], [ %722, %720 ]
  %727 = phi i32* [ %750, %725 ], [ %723, %720 ]
  %728 = getelementptr inbounds i32, i32* %726, i64 -1
  %729 = getelementptr inbounds i32, i32* %727, i64 -1
  %730 = load i32, i32* %729, align 4
  store i32 %730, i32* %728, align 4
  %731 = getelementptr inbounds i32, i32* %726, i64 -2
  %732 = getelementptr inbounds i32, i32* %727, i64 -2
  %733 = load i32, i32* %732, align 4
  store i32 %733, i32* %731, align 4
  %734 = getelementptr inbounds i32, i32* %726, i64 -3
  %735 = getelementptr inbounds i32, i32* %727, i64 -3
  %736 = load i32, i32* %735, align 4
  store i32 %736, i32* %734, align 4
  %737 = getelementptr inbounds i32, i32* %726, i64 -4
  %738 = getelementptr inbounds i32, i32* %727, i64 -4
  %739 = load i32, i32* %738, align 4
  store i32 %739, i32* %737, align 4
  %740 = getelementptr inbounds i32, i32* %726, i64 -5
  %741 = getelementptr inbounds i32, i32* %727, i64 -5
  %742 = load i32, i32* %741, align 4
  store i32 %742, i32* %740, align 4
  %743 = getelementptr inbounds i32, i32* %726, i64 -6
  %744 = getelementptr inbounds i32, i32* %727, i64 -6
  %745 = load i32, i32* %744, align 4
  store i32 %745, i32* %743, align 4
  %746 = getelementptr inbounds i32, i32* %726, i64 -7
  %747 = getelementptr inbounds i32, i32* %727, i64 -7
  %748 = load i32, i32* %747, align 4
  store i32 %748, i32* %746, align 4
  %749 = getelementptr inbounds i32, i32* %726, i64 -8
  %750 = getelementptr inbounds i32, i32* %727, i64 -8
  %751 = load i32, i32* %750, align 4
  store i32 %751, i32* %749, align 4
  %752 = icmp eq i32* %750, %598
  br i1 %752, label %753, label %725, !llvm.loop !227

753:                                              ; preds = %720, %725, %699
  %754 = phi i32* [ %625, %699 ], [ %721, %720 ], [ %749, %725 ]
  %755 = load i64, i64* %230, align 8
  br label %756

756:                                              ; preds = %590, %753
  %757 = phi i32* [ %754, %753 ], [ %593, %590 ]
  %758 = phi i64 [ %755, %753 ], [ %599, %590 ]
  %759 = ptrtoint i32* %757 to i64
  store i64 %759, i64* %230, align 8
  store i64 %597, i64* %228, align 8
  store i64 %595, i64* %577, align 8
  %760 = icmp eq i64 %758, 0
  br i1 %760, label %1587, label %761

761:                                              ; preds = %756
  %762 = inttoptr i64 %758 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %762) #14
  br label %1587

763:                                              ; preds = %557
  %764 = call zeroext i1 @_ZNK5fxcrt10WideStringeqEPKw(%"class.fxcrt::WideString"* nonnull %3, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.7, i64 0, i64 0)) #14
  br i1 %764, label %765, label %969

765:                                              ; preds = %763
  %766 = load i32*, i32** %5, align 8
  %767 = load i32*, i32** %7, align 8
  %768 = icmp ult i32* %766, %767
  %769 = ptrtoint i32* %767 to i64
  br i1 %768, label %770, label %773

770:                                              ; preds = %765
  store i32 60, i32* %766, align 4
  %771 = getelementptr inbounds i32, i32* %766, i64 1
  %772 = ptrtoint i32* %771 to i64
  store i64 %772, i64* %228, align 8
  br label %1587

773:                                              ; preds = %765
  %774 = ptrtoint i32* %766 to i64
  %775 = load i64, i64* %230, align 8
  %776 = sub i64 %774, %775
  %777 = ashr exact i64 %776, 2
  %778 = add nsw i64 %777, 1
  %779 = icmp ugt i64 %778, 4611686018427387903
  br i1 %779, label %780, label %782

780:                                              ; preds = %773
  %781 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %781) #15
  unreachable

782:                                              ; preds = %773
  %783 = bitcast i32** %7 to i64*
  %784 = sub i64 %769, %775
  %785 = ashr exact i64 %784, 2
  %786 = icmp ult i64 %785, 2305843009213693951
  br i1 %786, label %787, label %792

787:                                              ; preds = %782
  %788 = ashr exact i64 %784, 1
  %789 = icmp ult i64 %788, %778
  %790 = select i1 %789, i64 %778, i64 %788
  %791 = icmp eq i64 %790, 0
  br i1 %791, label %796, label %792

792:                                              ; preds = %787, %782
  %793 = phi i64 [ %790, %787 ], [ 4611686018427387903, %782 ]
  %794 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %793, i64 4) #14
  %795 = bitcast i8* %794 to i32*
  br label %796

796:                                              ; preds = %792, %787
  %797 = phi i64 [ %793, %792 ], [ 0, %787 ]
  %798 = phi i32* [ %795, %792 ], [ null, %787 ]
  %799 = getelementptr inbounds i32, i32* %798, i64 %777
  %800 = getelementptr inbounds i32, i32* %798, i64 %797
  %801 = ptrtoint i32* %800 to i64
  store i32 60, i32* %799, align 4
  %802 = getelementptr inbounds i32, i32* %799, i64 1
  %803 = ptrtoint i32* %802 to i64
  %804 = load i32*, i32** %223, align 8
  %805 = ptrtoint i32* %804 to i64
  %806 = load i32*, i32** %5, align 8
  %807 = icmp eq i32* %806, %804
  br i1 %807, label %962, label %808

808:                                              ; preds = %796
  %809 = getelementptr i32, i32* %806, i64 -1
  %810 = ptrtoint i32* %809 to i64
  %811 = sub i64 %810, %805
  %812 = lshr i64 %811, 2
  %813 = add nuw nsw i64 %812, 1
  %814 = icmp ult i64 %813, 8
  br i1 %814, label %907, label %815

815:                                              ; preds = %808
  %816 = getelementptr i32, i32* %806, i64 -1
  %817 = ptrtoint i32* %816 to i64
  %818 = sub i64 %817, %805
  %819 = lshr i64 %818, 2
  %820 = xor i64 %819, -1
  %821 = add nsw i64 %777, %820
  %822 = getelementptr i32, i32* %798, i64 %821
  %823 = xor i64 %819, -1
  %824 = getelementptr i32, i32* %806, i64 %823
  %825 = icmp ult i32* %822, %806
  %826 = icmp ult i32* %824, %799
  %827 = and i1 %825, %826
  br i1 %827, label %907, label %828

828:                                              ; preds = %815
  %829 = and i64 %813, 9223372036854775800
  %830 = sub nsw i64 0, %829
  %831 = getelementptr i32, i32* %799, i64 %830
  %832 = sub nsw i64 0, %829
  %833 = getelementptr i32, i32* %806, i64 %832
  %834 = add nsw i64 %829, -8
  %835 = lshr exact i64 %834, 3
  %836 = add nuw nsw i64 %835, 1
  %837 = and i64 %836, 1
  %838 = icmp eq i64 %834, 0
  br i1 %838, label %885, label %839

839:                                              ; preds = %828
  %840 = sub nuw nsw i64 %836, %837
  %841 = getelementptr i32, i32* %799, i64 -1
  %842 = getelementptr i32, i32* %806, i64 -1
  %843 = getelementptr i32, i32* %799, i64 -1
  %844 = getelementptr i32, i32* %806, i64 -1
  br label %845

845:                                              ; preds = %845, %839
  %846 = phi i64 [ 0, %839 ], [ %880, %845 ]
  %847 = phi i64 [ %840, %839 ], [ %881, %845 ]
  %848 = sub i64 0, %846
  %849 = sub i64 0, %846
  %850 = getelementptr inbounds i32, i32* %841, i64 %848
  %851 = getelementptr inbounds i32, i32* %842, i64 %849
  %852 = getelementptr inbounds i32, i32* %851, i64 -3
  %853 = bitcast i32* %852 to <4 x i32>*
  %854 = load <4 x i32>, <4 x i32>* %853, align 4, !alias.scope !228
  %855 = getelementptr inbounds i32, i32* %851, i64 -4
  %856 = getelementptr inbounds i32, i32* %855, i64 -3
  %857 = bitcast i32* %856 to <4 x i32>*
  %858 = load <4 x i32>, <4 x i32>* %857, align 4, !alias.scope !228
  %859 = getelementptr inbounds i32, i32* %850, i64 -3
  %860 = bitcast i32* %859 to <4 x i32>*
  store <4 x i32> %854, <4 x i32>* %860, align 4, !alias.scope !231, !noalias !228
  %861 = getelementptr inbounds i32, i32* %850, i64 -4
  %862 = getelementptr inbounds i32, i32* %861, i64 -3
  %863 = bitcast i32* %862 to <4 x i32>*
  store <4 x i32> %858, <4 x i32>* %863, align 4, !alias.scope !231, !noalias !228
  %864 = sub nuw nsw i64 -8, %846
  %865 = sub nuw nsw i64 -8, %846
  %866 = getelementptr inbounds i32, i32* %843, i64 %864
  %867 = getelementptr inbounds i32, i32* %844, i64 %865
  %868 = getelementptr inbounds i32, i32* %867, i64 -3
  %869 = bitcast i32* %868 to <4 x i32>*
  %870 = load <4 x i32>, <4 x i32>* %869, align 4, !alias.scope !228
  %871 = getelementptr inbounds i32, i32* %867, i64 -4
  %872 = getelementptr inbounds i32, i32* %871, i64 -3
  %873 = bitcast i32* %872 to <4 x i32>*
  %874 = load <4 x i32>, <4 x i32>* %873, align 4, !alias.scope !228
  %875 = getelementptr inbounds i32, i32* %866, i64 -3
  %876 = bitcast i32* %875 to <4 x i32>*
  store <4 x i32> %870, <4 x i32>* %876, align 4, !alias.scope !231, !noalias !228
  %877 = getelementptr inbounds i32, i32* %866, i64 -4
  %878 = getelementptr inbounds i32, i32* %877, i64 -3
  %879 = bitcast i32* %878 to <4 x i32>*
  store <4 x i32> %874, <4 x i32>* %879, align 4, !alias.scope !231, !noalias !228
  %880 = add i64 %846, 16
  %881 = add i64 %847, -2
  %882 = icmp eq i64 %881, 0
  br i1 %882, label %883, label %845, !llvm.loop !233

883:                                              ; preds = %845
  %884 = sub nuw nsw i64 -16, %846
  br label %885

885:                                              ; preds = %883, %828
  %886 = phi i64 [ 0, %828 ], [ %884, %883 ]
  %887 = icmp eq i64 %837, 0
  br i1 %887, label %905, label %888

888:                                              ; preds = %885
  %889 = getelementptr i32, i32* %799, i64 -1
  %890 = getelementptr i32, i32* %806, i64 -1
  %891 = getelementptr inbounds i32, i32* %889, i64 %886
  %892 = getelementptr inbounds i32, i32* %890, i64 %886
  %893 = getelementptr inbounds i32, i32* %892, i64 -3
  %894 = bitcast i32* %893 to <4 x i32>*
  %895 = load <4 x i32>, <4 x i32>* %894, align 4, !alias.scope !228
  %896 = getelementptr inbounds i32, i32* %892, i64 -4
  %897 = getelementptr inbounds i32, i32* %896, i64 -3
  %898 = bitcast i32* %897 to <4 x i32>*
  %899 = load <4 x i32>, <4 x i32>* %898, align 4, !alias.scope !228
  %900 = getelementptr inbounds i32, i32* %891, i64 -3
  %901 = bitcast i32* %900 to <4 x i32>*
  store <4 x i32> %895, <4 x i32>* %901, align 4, !alias.scope !231, !noalias !228
  %902 = getelementptr inbounds i32, i32* %891, i64 -4
  %903 = getelementptr inbounds i32, i32* %902, i64 -3
  %904 = bitcast i32* %903 to <4 x i32>*
  store <4 x i32> %899, <4 x i32>* %904, align 4, !alias.scope !231, !noalias !228
  br label %905

905:                                              ; preds = %885, %888
  %906 = icmp eq i64 %813, %829
  br i1 %906, label %959, label %907

907:                                              ; preds = %905, %815, %808
  %908 = phi i32* [ %799, %815 ], [ %799, %808 ], [ %831, %905 ]
  %909 = phi i32* [ %806, %815 ], [ %806, %808 ], [ %833, %905 ]
  %910 = getelementptr i32, i32* %909, i64 -1
  %911 = ptrtoint i32* %910 to i64
  %912 = sub i64 %911, %805
  %913 = lshr i64 %912, 2
  %914 = add nuw nsw i64 %913, 1
  %915 = and i64 %914, 7
  %916 = icmp eq i64 %915, 0
  br i1 %916, label %926, label %917

917:                                              ; preds = %907, %917
  %918 = phi i32* [ %921, %917 ], [ %908, %907 ]
  %919 = phi i32* [ %922, %917 ], [ %909, %907 ]
  %920 = phi i64 [ %924, %917 ], [ %915, %907 ]
  %921 = getelementptr inbounds i32, i32* %918, i64 -1
  %922 = getelementptr inbounds i32, i32* %919, i64 -1
  %923 = load i32, i32* %922, align 4
  store i32 %923, i32* %921, align 4
  %924 = add i64 %920, -1
  %925 = icmp eq i64 %924, 0
  br i1 %925, label %926, label %917, !llvm.loop !234

926:                                              ; preds = %917, %907
  %927 = phi i32* [ undef, %907 ], [ %921, %917 ]
  %928 = phi i32* [ %908, %907 ], [ %921, %917 ]
  %929 = phi i32* [ %909, %907 ], [ %922, %917 ]
  %930 = icmp ult i64 %912, 28
  br i1 %930, label %959, label %931

931:                                              ; preds = %926, %931
  %932 = phi i32* [ %955, %931 ], [ %928, %926 ]
  %933 = phi i32* [ %956, %931 ], [ %929, %926 ]
  %934 = getelementptr inbounds i32, i32* %932, i64 -1
  %935 = getelementptr inbounds i32, i32* %933, i64 -1
  %936 = load i32, i32* %935, align 4
  store i32 %936, i32* %934, align 4
  %937 = getelementptr inbounds i32, i32* %932, i64 -2
  %938 = getelementptr inbounds i32, i32* %933, i64 -2
  %939 = load i32, i32* %938, align 4
  store i32 %939, i32* %937, align 4
  %940 = getelementptr inbounds i32, i32* %932, i64 -3
  %941 = getelementptr inbounds i32, i32* %933, i64 -3
  %942 = load i32, i32* %941, align 4
  store i32 %942, i32* %940, align 4
  %943 = getelementptr inbounds i32, i32* %932, i64 -4
  %944 = getelementptr inbounds i32, i32* %933, i64 -4
  %945 = load i32, i32* %944, align 4
  store i32 %945, i32* %943, align 4
  %946 = getelementptr inbounds i32, i32* %932, i64 -5
  %947 = getelementptr inbounds i32, i32* %933, i64 -5
  %948 = load i32, i32* %947, align 4
  store i32 %948, i32* %946, align 4
  %949 = getelementptr inbounds i32, i32* %932, i64 -6
  %950 = getelementptr inbounds i32, i32* %933, i64 -6
  %951 = load i32, i32* %950, align 4
  store i32 %951, i32* %949, align 4
  %952 = getelementptr inbounds i32, i32* %932, i64 -7
  %953 = getelementptr inbounds i32, i32* %933, i64 -7
  %954 = load i32, i32* %953, align 4
  store i32 %954, i32* %952, align 4
  %955 = getelementptr inbounds i32, i32* %932, i64 -8
  %956 = getelementptr inbounds i32, i32* %933, i64 -8
  %957 = load i32, i32* %956, align 4
  store i32 %957, i32* %955, align 4
  %958 = icmp eq i32* %956, %804
  br i1 %958, label %959, label %931, !llvm.loop !235

959:                                              ; preds = %926, %931, %905
  %960 = phi i32* [ %831, %905 ], [ %927, %926 ], [ %955, %931 ]
  %961 = load i64, i64* %230, align 8
  br label %962

962:                                              ; preds = %796, %959
  %963 = phi i32* [ %960, %959 ], [ %799, %796 ]
  %964 = phi i64 [ %961, %959 ], [ %805, %796 ]
  %965 = ptrtoint i32* %963 to i64
  store i64 %965, i64* %230, align 8
  store i64 %803, i64* %228, align 8
  store i64 %801, i64* %783, align 8
  %966 = icmp eq i64 %964, 0
  br i1 %966, label %1587, label %967

967:                                              ; preds = %962
  %968 = inttoptr i64 %964 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %968) #14
  br label %1587

969:                                              ; preds = %763
  %970 = call zeroext i1 @_ZNK5fxcrt10WideStringeqEPKw(%"class.fxcrt::WideString"* nonnull %3, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @.str.8, i64 0, i64 0)) #14
  br i1 %970, label %971, label %1175

971:                                              ; preds = %969
  %972 = load i32*, i32** %5, align 8
  %973 = load i32*, i32** %7, align 8
  %974 = icmp ult i32* %972, %973
  %975 = ptrtoint i32* %973 to i64
  br i1 %974, label %976, label %979

976:                                              ; preds = %971
  store i32 62, i32* %972, align 4
  %977 = getelementptr inbounds i32, i32* %972, i64 1
  %978 = ptrtoint i32* %977 to i64
  store i64 %978, i64* %228, align 8
  br label %1587

979:                                              ; preds = %971
  %980 = ptrtoint i32* %972 to i64
  %981 = load i64, i64* %230, align 8
  %982 = sub i64 %980, %981
  %983 = ashr exact i64 %982, 2
  %984 = add nsw i64 %983, 1
  %985 = icmp ugt i64 %984, 4611686018427387903
  br i1 %985, label %986, label %988

986:                                              ; preds = %979
  %987 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %987) #15
  unreachable

988:                                              ; preds = %979
  %989 = bitcast i32** %7 to i64*
  %990 = sub i64 %975, %981
  %991 = ashr exact i64 %990, 2
  %992 = icmp ult i64 %991, 2305843009213693951
  br i1 %992, label %993, label %998

993:                                              ; preds = %988
  %994 = ashr exact i64 %990, 1
  %995 = icmp ult i64 %994, %984
  %996 = select i1 %995, i64 %984, i64 %994
  %997 = icmp eq i64 %996, 0
  br i1 %997, label %1002, label %998

998:                                              ; preds = %993, %988
  %999 = phi i64 [ %996, %993 ], [ 4611686018427387903, %988 ]
  %1000 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %999, i64 4) #14
  %1001 = bitcast i8* %1000 to i32*
  br label %1002

1002:                                             ; preds = %998, %993
  %1003 = phi i64 [ %999, %998 ], [ 0, %993 ]
  %1004 = phi i32* [ %1001, %998 ], [ null, %993 ]
  %1005 = getelementptr inbounds i32, i32* %1004, i64 %983
  %1006 = getelementptr inbounds i32, i32* %1004, i64 %1003
  %1007 = ptrtoint i32* %1006 to i64
  store i32 62, i32* %1005, align 4
  %1008 = getelementptr inbounds i32, i32* %1005, i64 1
  %1009 = ptrtoint i32* %1008 to i64
  %1010 = load i32*, i32** %223, align 8
  %1011 = ptrtoint i32* %1010 to i64
  %1012 = load i32*, i32** %5, align 8
  %1013 = icmp eq i32* %1012, %1010
  br i1 %1013, label %1168, label %1014

1014:                                             ; preds = %1002
  %1015 = getelementptr i32, i32* %1012, i64 -1
  %1016 = ptrtoint i32* %1015 to i64
  %1017 = sub i64 %1016, %1011
  %1018 = lshr i64 %1017, 2
  %1019 = add nuw nsw i64 %1018, 1
  %1020 = icmp ult i64 %1019, 8
  br i1 %1020, label %1113, label %1021

1021:                                             ; preds = %1014
  %1022 = getelementptr i32, i32* %1012, i64 -1
  %1023 = ptrtoint i32* %1022 to i64
  %1024 = sub i64 %1023, %1011
  %1025 = lshr i64 %1024, 2
  %1026 = xor i64 %1025, -1
  %1027 = add nsw i64 %983, %1026
  %1028 = getelementptr i32, i32* %1004, i64 %1027
  %1029 = xor i64 %1025, -1
  %1030 = getelementptr i32, i32* %1012, i64 %1029
  %1031 = icmp ult i32* %1028, %1012
  %1032 = icmp ult i32* %1030, %1005
  %1033 = and i1 %1031, %1032
  br i1 %1033, label %1113, label %1034

1034:                                             ; preds = %1021
  %1035 = and i64 %1019, 9223372036854775800
  %1036 = sub nsw i64 0, %1035
  %1037 = getelementptr i32, i32* %1005, i64 %1036
  %1038 = sub nsw i64 0, %1035
  %1039 = getelementptr i32, i32* %1012, i64 %1038
  %1040 = add nsw i64 %1035, -8
  %1041 = lshr exact i64 %1040, 3
  %1042 = add nuw nsw i64 %1041, 1
  %1043 = and i64 %1042, 1
  %1044 = icmp eq i64 %1040, 0
  br i1 %1044, label %1091, label %1045

1045:                                             ; preds = %1034
  %1046 = sub nuw nsw i64 %1042, %1043
  %1047 = getelementptr i32, i32* %1005, i64 -1
  %1048 = getelementptr i32, i32* %1012, i64 -1
  %1049 = getelementptr i32, i32* %1005, i64 -1
  %1050 = getelementptr i32, i32* %1012, i64 -1
  br label %1051

1051:                                             ; preds = %1051, %1045
  %1052 = phi i64 [ 0, %1045 ], [ %1086, %1051 ]
  %1053 = phi i64 [ %1046, %1045 ], [ %1087, %1051 ]
  %1054 = sub i64 0, %1052
  %1055 = sub i64 0, %1052
  %1056 = getelementptr inbounds i32, i32* %1047, i64 %1054
  %1057 = getelementptr inbounds i32, i32* %1048, i64 %1055
  %1058 = getelementptr inbounds i32, i32* %1057, i64 -3
  %1059 = bitcast i32* %1058 to <4 x i32>*
  %1060 = load <4 x i32>, <4 x i32>* %1059, align 4, !alias.scope !236
  %1061 = getelementptr inbounds i32, i32* %1057, i64 -4
  %1062 = getelementptr inbounds i32, i32* %1061, i64 -3
  %1063 = bitcast i32* %1062 to <4 x i32>*
  %1064 = load <4 x i32>, <4 x i32>* %1063, align 4, !alias.scope !236
  %1065 = getelementptr inbounds i32, i32* %1056, i64 -3
  %1066 = bitcast i32* %1065 to <4 x i32>*
  store <4 x i32> %1060, <4 x i32>* %1066, align 4, !alias.scope !239, !noalias !236
  %1067 = getelementptr inbounds i32, i32* %1056, i64 -4
  %1068 = getelementptr inbounds i32, i32* %1067, i64 -3
  %1069 = bitcast i32* %1068 to <4 x i32>*
  store <4 x i32> %1064, <4 x i32>* %1069, align 4, !alias.scope !239, !noalias !236
  %1070 = sub nuw nsw i64 -8, %1052
  %1071 = sub nuw nsw i64 -8, %1052
  %1072 = getelementptr inbounds i32, i32* %1049, i64 %1070
  %1073 = getelementptr inbounds i32, i32* %1050, i64 %1071
  %1074 = getelementptr inbounds i32, i32* %1073, i64 -3
  %1075 = bitcast i32* %1074 to <4 x i32>*
  %1076 = load <4 x i32>, <4 x i32>* %1075, align 4, !alias.scope !236
  %1077 = getelementptr inbounds i32, i32* %1073, i64 -4
  %1078 = getelementptr inbounds i32, i32* %1077, i64 -3
  %1079 = bitcast i32* %1078 to <4 x i32>*
  %1080 = load <4 x i32>, <4 x i32>* %1079, align 4, !alias.scope !236
  %1081 = getelementptr inbounds i32, i32* %1072, i64 -3
  %1082 = bitcast i32* %1081 to <4 x i32>*
  store <4 x i32> %1076, <4 x i32>* %1082, align 4, !alias.scope !239, !noalias !236
  %1083 = getelementptr inbounds i32, i32* %1072, i64 -4
  %1084 = getelementptr inbounds i32, i32* %1083, i64 -3
  %1085 = bitcast i32* %1084 to <4 x i32>*
  store <4 x i32> %1080, <4 x i32>* %1085, align 4, !alias.scope !239, !noalias !236
  %1086 = add i64 %1052, 16
  %1087 = add i64 %1053, -2
  %1088 = icmp eq i64 %1087, 0
  br i1 %1088, label %1089, label %1051, !llvm.loop !241

1089:                                             ; preds = %1051
  %1090 = sub nuw nsw i64 -16, %1052
  br label %1091

1091:                                             ; preds = %1089, %1034
  %1092 = phi i64 [ 0, %1034 ], [ %1090, %1089 ]
  %1093 = icmp eq i64 %1043, 0
  br i1 %1093, label %1111, label %1094

1094:                                             ; preds = %1091
  %1095 = getelementptr i32, i32* %1005, i64 -1
  %1096 = getelementptr i32, i32* %1012, i64 -1
  %1097 = getelementptr inbounds i32, i32* %1095, i64 %1092
  %1098 = getelementptr inbounds i32, i32* %1096, i64 %1092
  %1099 = getelementptr inbounds i32, i32* %1098, i64 -3
  %1100 = bitcast i32* %1099 to <4 x i32>*
  %1101 = load <4 x i32>, <4 x i32>* %1100, align 4, !alias.scope !236
  %1102 = getelementptr inbounds i32, i32* %1098, i64 -4
  %1103 = getelementptr inbounds i32, i32* %1102, i64 -3
  %1104 = bitcast i32* %1103 to <4 x i32>*
  %1105 = load <4 x i32>, <4 x i32>* %1104, align 4, !alias.scope !236
  %1106 = getelementptr inbounds i32, i32* %1097, i64 -3
  %1107 = bitcast i32* %1106 to <4 x i32>*
  store <4 x i32> %1101, <4 x i32>* %1107, align 4, !alias.scope !239, !noalias !236
  %1108 = getelementptr inbounds i32, i32* %1097, i64 -4
  %1109 = getelementptr inbounds i32, i32* %1108, i64 -3
  %1110 = bitcast i32* %1109 to <4 x i32>*
  store <4 x i32> %1105, <4 x i32>* %1110, align 4, !alias.scope !239, !noalias !236
  br label %1111

1111:                                             ; preds = %1091, %1094
  %1112 = icmp eq i64 %1019, %1035
  br i1 %1112, label %1165, label %1113

1113:                                             ; preds = %1111, %1021, %1014
  %1114 = phi i32* [ %1005, %1021 ], [ %1005, %1014 ], [ %1037, %1111 ]
  %1115 = phi i32* [ %1012, %1021 ], [ %1012, %1014 ], [ %1039, %1111 ]
  %1116 = getelementptr i32, i32* %1115, i64 -1
  %1117 = ptrtoint i32* %1116 to i64
  %1118 = sub i64 %1117, %1011
  %1119 = lshr i64 %1118, 2
  %1120 = add nuw nsw i64 %1119, 1
  %1121 = and i64 %1120, 7
  %1122 = icmp eq i64 %1121, 0
  br i1 %1122, label %1132, label %1123

1123:                                             ; preds = %1113, %1123
  %1124 = phi i32* [ %1127, %1123 ], [ %1114, %1113 ]
  %1125 = phi i32* [ %1128, %1123 ], [ %1115, %1113 ]
  %1126 = phi i64 [ %1130, %1123 ], [ %1121, %1113 ]
  %1127 = getelementptr inbounds i32, i32* %1124, i64 -1
  %1128 = getelementptr inbounds i32, i32* %1125, i64 -1
  %1129 = load i32, i32* %1128, align 4
  store i32 %1129, i32* %1127, align 4
  %1130 = add i64 %1126, -1
  %1131 = icmp eq i64 %1130, 0
  br i1 %1131, label %1132, label %1123, !llvm.loop !242

1132:                                             ; preds = %1123, %1113
  %1133 = phi i32* [ undef, %1113 ], [ %1127, %1123 ]
  %1134 = phi i32* [ %1114, %1113 ], [ %1127, %1123 ]
  %1135 = phi i32* [ %1115, %1113 ], [ %1128, %1123 ]
  %1136 = icmp ult i64 %1118, 28
  br i1 %1136, label %1165, label %1137

1137:                                             ; preds = %1132, %1137
  %1138 = phi i32* [ %1161, %1137 ], [ %1134, %1132 ]
  %1139 = phi i32* [ %1162, %1137 ], [ %1135, %1132 ]
  %1140 = getelementptr inbounds i32, i32* %1138, i64 -1
  %1141 = getelementptr inbounds i32, i32* %1139, i64 -1
  %1142 = load i32, i32* %1141, align 4
  store i32 %1142, i32* %1140, align 4
  %1143 = getelementptr inbounds i32, i32* %1138, i64 -2
  %1144 = getelementptr inbounds i32, i32* %1139, i64 -2
  %1145 = load i32, i32* %1144, align 4
  store i32 %1145, i32* %1143, align 4
  %1146 = getelementptr inbounds i32, i32* %1138, i64 -3
  %1147 = getelementptr inbounds i32, i32* %1139, i64 -3
  %1148 = load i32, i32* %1147, align 4
  store i32 %1148, i32* %1146, align 4
  %1149 = getelementptr inbounds i32, i32* %1138, i64 -4
  %1150 = getelementptr inbounds i32, i32* %1139, i64 -4
  %1151 = load i32, i32* %1150, align 4
  store i32 %1151, i32* %1149, align 4
  %1152 = getelementptr inbounds i32, i32* %1138, i64 -5
  %1153 = getelementptr inbounds i32, i32* %1139, i64 -5
  %1154 = load i32, i32* %1153, align 4
  store i32 %1154, i32* %1152, align 4
  %1155 = getelementptr inbounds i32, i32* %1138, i64 -6
  %1156 = getelementptr inbounds i32, i32* %1139, i64 -6
  %1157 = load i32, i32* %1156, align 4
  store i32 %1157, i32* %1155, align 4
  %1158 = getelementptr inbounds i32, i32* %1138, i64 -7
  %1159 = getelementptr inbounds i32, i32* %1139, i64 -7
  %1160 = load i32, i32* %1159, align 4
  store i32 %1160, i32* %1158, align 4
  %1161 = getelementptr inbounds i32, i32* %1138, i64 -8
  %1162 = getelementptr inbounds i32, i32* %1139, i64 -8
  %1163 = load i32, i32* %1162, align 4
  store i32 %1163, i32* %1161, align 4
  %1164 = icmp eq i32* %1162, %1010
  br i1 %1164, label %1165, label %1137, !llvm.loop !243

1165:                                             ; preds = %1132, %1137, %1111
  %1166 = phi i32* [ %1037, %1111 ], [ %1133, %1132 ], [ %1161, %1137 ]
  %1167 = load i64, i64* %230, align 8
  br label %1168

1168:                                             ; preds = %1002, %1165
  %1169 = phi i32* [ %1166, %1165 ], [ %1005, %1002 ]
  %1170 = phi i64 [ %1167, %1165 ], [ %1011, %1002 ]
  %1171 = ptrtoint i32* %1169 to i64
  store i64 %1171, i64* %230, align 8
  store i64 %1009, i64* %228, align 8
  store i64 %1007, i64* %989, align 8
  %1172 = icmp eq i64 %1170, 0
  br i1 %1172, label %1587, label %1173

1173:                                             ; preds = %1168
  %1174 = inttoptr i64 %1170 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %1174) #14
  br label %1587

1175:                                             ; preds = %969
  %1176 = call zeroext i1 @_ZNK5fxcrt10WideStringeqEPKw(%"class.fxcrt::WideString"* nonnull %3, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.9, i64 0, i64 0)) #14
  br i1 %1176, label %1177, label %1381

1177:                                             ; preds = %1175
  %1178 = load i32*, i32** %5, align 8
  %1179 = load i32*, i32** %7, align 8
  %1180 = icmp ult i32* %1178, %1179
  %1181 = ptrtoint i32* %1179 to i64
  br i1 %1180, label %1182, label %1185

1182:                                             ; preds = %1177
  store i32 39, i32* %1178, align 4
  %1183 = getelementptr inbounds i32, i32* %1178, i64 1
  %1184 = ptrtoint i32* %1183 to i64
  store i64 %1184, i64* %228, align 8
  br label %1587

1185:                                             ; preds = %1177
  %1186 = ptrtoint i32* %1178 to i64
  %1187 = load i64, i64* %230, align 8
  %1188 = sub i64 %1186, %1187
  %1189 = ashr exact i64 %1188, 2
  %1190 = add nsw i64 %1189, 1
  %1191 = icmp ugt i64 %1190, 4611686018427387903
  br i1 %1191, label %1192, label %1194

1192:                                             ; preds = %1185
  %1193 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1193) #15
  unreachable

1194:                                             ; preds = %1185
  %1195 = bitcast i32** %7 to i64*
  %1196 = sub i64 %1181, %1187
  %1197 = ashr exact i64 %1196, 2
  %1198 = icmp ult i64 %1197, 2305843009213693951
  br i1 %1198, label %1199, label %1204

1199:                                             ; preds = %1194
  %1200 = ashr exact i64 %1196, 1
  %1201 = icmp ult i64 %1200, %1190
  %1202 = select i1 %1201, i64 %1190, i64 %1200
  %1203 = icmp eq i64 %1202, 0
  br i1 %1203, label %1208, label %1204

1204:                                             ; preds = %1199, %1194
  %1205 = phi i64 [ %1202, %1199 ], [ 4611686018427387903, %1194 ]
  %1206 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %1205, i64 4) #14
  %1207 = bitcast i8* %1206 to i32*
  br label %1208

1208:                                             ; preds = %1204, %1199
  %1209 = phi i64 [ %1205, %1204 ], [ 0, %1199 ]
  %1210 = phi i32* [ %1207, %1204 ], [ null, %1199 ]
  %1211 = getelementptr inbounds i32, i32* %1210, i64 %1189
  %1212 = getelementptr inbounds i32, i32* %1210, i64 %1209
  %1213 = ptrtoint i32* %1212 to i64
  store i32 39, i32* %1211, align 4
  %1214 = getelementptr inbounds i32, i32* %1211, i64 1
  %1215 = ptrtoint i32* %1214 to i64
  %1216 = load i32*, i32** %223, align 8
  %1217 = ptrtoint i32* %1216 to i64
  %1218 = load i32*, i32** %5, align 8
  %1219 = icmp eq i32* %1218, %1216
  br i1 %1219, label %1374, label %1220

1220:                                             ; preds = %1208
  %1221 = getelementptr i32, i32* %1218, i64 -1
  %1222 = ptrtoint i32* %1221 to i64
  %1223 = sub i64 %1222, %1217
  %1224 = lshr i64 %1223, 2
  %1225 = add nuw nsw i64 %1224, 1
  %1226 = icmp ult i64 %1225, 8
  br i1 %1226, label %1319, label %1227

1227:                                             ; preds = %1220
  %1228 = getelementptr i32, i32* %1218, i64 -1
  %1229 = ptrtoint i32* %1228 to i64
  %1230 = sub i64 %1229, %1217
  %1231 = lshr i64 %1230, 2
  %1232 = xor i64 %1231, -1
  %1233 = add nsw i64 %1189, %1232
  %1234 = getelementptr i32, i32* %1210, i64 %1233
  %1235 = xor i64 %1231, -1
  %1236 = getelementptr i32, i32* %1218, i64 %1235
  %1237 = icmp ult i32* %1234, %1218
  %1238 = icmp ult i32* %1236, %1211
  %1239 = and i1 %1237, %1238
  br i1 %1239, label %1319, label %1240

1240:                                             ; preds = %1227
  %1241 = and i64 %1225, 9223372036854775800
  %1242 = sub nsw i64 0, %1241
  %1243 = getelementptr i32, i32* %1211, i64 %1242
  %1244 = sub nsw i64 0, %1241
  %1245 = getelementptr i32, i32* %1218, i64 %1244
  %1246 = add nsw i64 %1241, -8
  %1247 = lshr exact i64 %1246, 3
  %1248 = add nuw nsw i64 %1247, 1
  %1249 = and i64 %1248, 1
  %1250 = icmp eq i64 %1246, 0
  br i1 %1250, label %1297, label %1251

1251:                                             ; preds = %1240
  %1252 = sub nuw nsw i64 %1248, %1249
  %1253 = getelementptr i32, i32* %1211, i64 -1
  %1254 = getelementptr i32, i32* %1218, i64 -1
  %1255 = getelementptr i32, i32* %1211, i64 -1
  %1256 = getelementptr i32, i32* %1218, i64 -1
  br label %1257

1257:                                             ; preds = %1257, %1251
  %1258 = phi i64 [ 0, %1251 ], [ %1292, %1257 ]
  %1259 = phi i64 [ %1252, %1251 ], [ %1293, %1257 ]
  %1260 = sub i64 0, %1258
  %1261 = sub i64 0, %1258
  %1262 = getelementptr inbounds i32, i32* %1253, i64 %1260
  %1263 = getelementptr inbounds i32, i32* %1254, i64 %1261
  %1264 = getelementptr inbounds i32, i32* %1263, i64 -3
  %1265 = bitcast i32* %1264 to <4 x i32>*
  %1266 = load <4 x i32>, <4 x i32>* %1265, align 4, !alias.scope !244
  %1267 = getelementptr inbounds i32, i32* %1263, i64 -4
  %1268 = getelementptr inbounds i32, i32* %1267, i64 -3
  %1269 = bitcast i32* %1268 to <4 x i32>*
  %1270 = load <4 x i32>, <4 x i32>* %1269, align 4, !alias.scope !244
  %1271 = getelementptr inbounds i32, i32* %1262, i64 -3
  %1272 = bitcast i32* %1271 to <4 x i32>*
  store <4 x i32> %1266, <4 x i32>* %1272, align 4, !alias.scope !247, !noalias !244
  %1273 = getelementptr inbounds i32, i32* %1262, i64 -4
  %1274 = getelementptr inbounds i32, i32* %1273, i64 -3
  %1275 = bitcast i32* %1274 to <4 x i32>*
  store <4 x i32> %1270, <4 x i32>* %1275, align 4, !alias.scope !247, !noalias !244
  %1276 = sub nuw nsw i64 -8, %1258
  %1277 = sub nuw nsw i64 -8, %1258
  %1278 = getelementptr inbounds i32, i32* %1255, i64 %1276
  %1279 = getelementptr inbounds i32, i32* %1256, i64 %1277
  %1280 = getelementptr inbounds i32, i32* %1279, i64 -3
  %1281 = bitcast i32* %1280 to <4 x i32>*
  %1282 = load <4 x i32>, <4 x i32>* %1281, align 4, !alias.scope !244
  %1283 = getelementptr inbounds i32, i32* %1279, i64 -4
  %1284 = getelementptr inbounds i32, i32* %1283, i64 -3
  %1285 = bitcast i32* %1284 to <4 x i32>*
  %1286 = load <4 x i32>, <4 x i32>* %1285, align 4, !alias.scope !244
  %1287 = getelementptr inbounds i32, i32* %1278, i64 -3
  %1288 = bitcast i32* %1287 to <4 x i32>*
  store <4 x i32> %1282, <4 x i32>* %1288, align 4, !alias.scope !247, !noalias !244
  %1289 = getelementptr inbounds i32, i32* %1278, i64 -4
  %1290 = getelementptr inbounds i32, i32* %1289, i64 -3
  %1291 = bitcast i32* %1290 to <4 x i32>*
  store <4 x i32> %1286, <4 x i32>* %1291, align 4, !alias.scope !247, !noalias !244
  %1292 = add i64 %1258, 16
  %1293 = add i64 %1259, -2
  %1294 = icmp eq i64 %1293, 0
  br i1 %1294, label %1295, label %1257, !llvm.loop !249

1295:                                             ; preds = %1257
  %1296 = sub nuw nsw i64 -16, %1258
  br label %1297

1297:                                             ; preds = %1295, %1240
  %1298 = phi i64 [ 0, %1240 ], [ %1296, %1295 ]
  %1299 = icmp eq i64 %1249, 0
  br i1 %1299, label %1317, label %1300

1300:                                             ; preds = %1297
  %1301 = getelementptr i32, i32* %1211, i64 -1
  %1302 = getelementptr i32, i32* %1218, i64 -1
  %1303 = getelementptr inbounds i32, i32* %1301, i64 %1298
  %1304 = getelementptr inbounds i32, i32* %1302, i64 %1298
  %1305 = getelementptr inbounds i32, i32* %1304, i64 -3
  %1306 = bitcast i32* %1305 to <4 x i32>*
  %1307 = load <4 x i32>, <4 x i32>* %1306, align 4, !alias.scope !244
  %1308 = getelementptr inbounds i32, i32* %1304, i64 -4
  %1309 = getelementptr inbounds i32, i32* %1308, i64 -3
  %1310 = bitcast i32* %1309 to <4 x i32>*
  %1311 = load <4 x i32>, <4 x i32>* %1310, align 4, !alias.scope !244
  %1312 = getelementptr inbounds i32, i32* %1303, i64 -3
  %1313 = bitcast i32* %1312 to <4 x i32>*
  store <4 x i32> %1307, <4 x i32>* %1313, align 4, !alias.scope !247, !noalias !244
  %1314 = getelementptr inbounds i32, i32* %1303, i64 -4
  %1315 = getelementptr inbounds i32, i32* %1314, i64 -3
  %1316 = bitcast i32* %1315 to <4 x i32>*
  store <4 x i32> %1311, <4 x i32>* %1316, align 4, !alias.scope !247, !noalias !244
  br label %1317

1317:                                             ; preds = %1297, %1300
  %1318 = icmp eq i64 %1225, %1241
  br i1 %1318, label %1371, label %1319

1319:                                             ; preds = %1317, %1227, %1220
  %1320 = phi i32* [ %1211, %1227 ], [ %1211, %1220 ], [ %1243, %1317 ]
  %1321 = phi i32* [ %1218, %1227 ], [ %1218, %1220 ], [ %1245, %1317 ]
  %1322 = getelementptr i32, i32* %1321, i64 -1
  %1323 = ptrtoint i32* %1322 to i64
  %1324 = sub i64 %1323, %1217
  %1325 = lshr i64 %1324, 2
  %1326 = add nuw nsw i64 %1325, 1
  %1327 = and i64 %1326, 7
  %1328 = icmp eq i64 %1327, 0
  br i1 %1328, label %1338, label %1329

1329:                                             ; preds = %1319, %1329
  %1330 = phi i32* [ %1333, %1329 ], [ %1320, %1319 ]
  %1331 = phi i32* [ %1334, %1329 ], [ %1321, %1319 ]
  %1332 = phi i64 [ %1336, %1329 ], [ %1327, %1319 ]
  %1333 = getelementptr inbounds i32, i32* %1330, i64 -1
  %1334 = getelementptr inbounds i32, i32* %1331, i64 -1
  %1335 = load i32, i32* %1334, align 4
  store i32 %1335, i32* %1333, align 4
  %1336 = add i64 %1332, -1
  %1337 = icmp eq i64 %1336, 0
  br i1 %1337, label %1338, label %1329, !llvm.loop !250

1338:                                             ; preds = %1329, %1319
  %1339 = phi i32* [ undef, %1319 ], [ %1333, %1329 ]
  %1340 = phi i32* [ %1320, %1319 ], [ %1333, %1329 ]
  %1341 = phi i32* [ %1321, %1319 ], [ %1334, %1329 ]
  %1342 = icmp ult i64 %1324, 28
  br i1 %1342, label %1371, label %1343

1343:                                             ; preds = %1338, %1343
  %1344 = phi i32* [ %1367, %1343 ], [ %1340, %1338 ]
  %1345 = phi i32* [ %1368, %1343 ], [ %1341, %1338 ]
  %1346 = getelementptr inbounds i32, i32* %1344, i64 -1
  %1347 = getelementptr inbounds i32, i32* %1345, i64 -1
  %1348 = load i32, i32* %1347, align 4
  store i32 %1348, i32* %1346, align 4
  %1349 = getelementptr inbounds i32, i32* %1344, i64 -2
  %1350 = getelementptr inbounds i32, i32* %1345, i64 -2
  %1351 = load i32, i32* %1350, align 4
  store i32 %1351, i32* %1349, align 4
  %1352 = getelementptr inbounds i32, i32* %1344, i64 -3
  %1353 = getelementptr inbounds i32, i32* %1345, i64 -3
  %1354 = load i32, i32* %1353, align 4
  store i32 %1354, i32* %1352, align 4
  %1355 = getelementptr inbounds i32, i32* %1344, i64 -4
  %1356 = getelementptr inbounds i32, i32* %1345, i64 -4
  %1357 = load i32, i32* %1356, align 4
  store i32 %1357, i32* %1355, align 4
  %1358 = getelementptr inbounds i32, i32* %1344, i64 -5
  %1359 = getelementptr inbounds i32, i32* %1345, i64 -5
  %1360 = load i32, i32* %1359, align 4
  store i32 %1360, i32* %1358, align 4
  %1361 = getelementptr inbounds i32, i32* %1344, i64 -6
  %1362 = getelementptr inbounds i32, i32* %1345, i64 -6
  %1363 = load i32, i32* %1362, align 4
  store i32 %1363, i32* %1361, align 4
  %1364 = getelementptr inbounds i32, i32* %1344, i64 -7
  %1365 = getelementptr inbounds i32, i32* %1345, i64 -7
  %1366 = load i32, i32* %1365, align 4
  store i32 %1366, i32* %1364, align 4
  %1367 = getelementptr inbounds i32, i32* %1344, i64 -8
  %1368 = getelementptr inbounds i32, i32* %1345, i64 -8
  %1369 = load i32, i32* %1368, align 4
  store i32 %1369, i32* %1367, align 4
  %1370 = icmp eq i32* %1368, %1216
  br i1 %1370, label %1371, label %1343, !llvm.loop !251

1371:                                             ; preds = %1338, %1343, %1317
  %1372 = phi i32* [ %1243, %1317 ], [ %1339, %1338 ], [ %1367, %1343 ]
  %1373 = load i64, i64* %230, align 8
  br label %1374

1374:                                             ; preds = %1208, %1371
  %1375 = phi i32* [ %1372, %1371 ], [ %1211, %1208 ]
  %1376 = phi i64 [ %1373, %1371 ], [ %1217, %1208 ]
  %1377 = ptrtoint i32* %1375 to i64
  store i64 %1377, i64* %230, align 8
  store i64 %1215, i64* %228, align 8
  store i64 %1213, i64* %1195, align 8
  %1378 = icmp eq i64 %1376, 0
  br i1 %1378, label %1587, label %1379

1379:                                             ; preds = %1374
  %1380 = inttoptr i64 %1376 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %1380) #14
  br label %1587

1381:                                             ; preds = %1175
  %1382 = call zeroext i1 @_ZNK5fxcrt10WideStringeqEPKw(%"class.fxcrt::WideString"* nonnull %3, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.10, i64 0, i64 0)) #14
  br i1 %1382, label %1383, label %1587

1383:                                             ; preds = %1381
  %1384 = load i32*, i32** %5, align 8
  %1385 = load i32*, i32** %7, align 8
  %1386 = icmp ult i32* %1384, %1385
  %1387 = ptrtoint i32* %1385 to i64
  br i1 %1386, label %1388, label %1391

1388:                                             ; preds = %1383
  store i32 34, i32* %1384, align 4
  %1389 = getelementptr inbounds i32, i32* %1384, i64 1
  %1390 = ptrtoint i32* %1389 to i64
  store i64 %1390, i64* %228, align 8
  br label %1587

1391:                                             ; preds = %1383
  %1392 = ptrtoint i32* %1384 to i64
  %1393 = load i64, i64* %230, align 8
  %1394 = sub i64 %1392, %1393
  %1395 = ashr exact i64 %1394, 2
  %1396 = add nsw i64 %1395, 1
  %1397 = icmp ugt i64 %1396, 4611686018427387903
  br i1 %1397, label %1398, label %1400

1398:                                             ; preds = %1391
  %1399 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1399) #15
  unreachable

1400:                                             ; preds = %1391
  %1401 = bitcast i32** %7 to i64*
  %1402 = sub i64 %1387, %1393
  %1403 = ashr exact i64 %1402, 2
  %1404 = icmp ult i64 %1403, 2305843009213693951
  br i1 %1404, label %1405, label %1410

1405:                                             ; preds = %1400
  %1406 = ashr exact i64 %1402, 1
  %1407 = icmp ult i64 %1406, %1396
  %1408 = select i1 %1407, i64 %1396, i64 %1406
  %1409 = icmp eq i64 %1408, 0
  br i1 %1409, label %1414, label %1410

1410:                                             ; preds = %1405, %1400
  %1411 = phi i64 [ %1408, %1405 ], [ 4611686018427387903, %1400 ]
  %1412 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %1411, i64 4) #14
  %1413 = bitcast i8* %1412 to i32*
  br label %1414

1414:                                             ; preds = %1410, %1405
  %1415 = phi i64 [ %1411, %1410 ], [ 0, %1405 ]
  %1416 = phi i32* [ %1413, %1410 ], [ null, %1405 ]
  %1417 = getelementptr inbounds i32, i32* %1416, i64 %1395
  %1418 = getelementptr inbounds i32, i32* %1416, i64 %1415
  %1419 = ptrtoint i32* %1418 to i64
  store i32 34, i32* %1417, align 4
  %1420 = getelementptr inbounds i32, i32* %1417, i64 1
  %1421 = ptrtoint i32* %1420 to i64
  %1422 = load i32*, i32** %223, align 8
  %1423 = ptrtoint i32* %1422 to i64
  %1424 = load i32*, i32** %5, align 8
  %1425 = icmp eq i32* %1424, %1422
  br i1 %1425, label %1580, label %1426

1426:                                             ; preds = %1414
  %1427 = getelementptr i32, i32* %1424, i64 -1
  %1428 = ptrtoint i32* %1427 to i64
  %1429 = sub i64 %1428, %1423
  %1430 = lshr i64 %1429, 2
  %1431 = add nuw nsw i64 %1430, 1
  %1432 = icmp ult i64 %1431, 8
  br i1 %1432, label %1525, label %1433

1433:                                             ; preds = %1426
  %1434 = getelementptr i32, i32* %1424, i64 -1
  %1435 = ptrtoint i32* %1434 to i64
  %1436 = sub i64 %1435, %1423
  %1437 = lshr i64 %1436, 2
  %1438 = xor i64 %1437, -1
  %1439 = add nsw i64 %1395, %1438
  %1440 = getelementptr i32, i32* %1416, i64 %1439
  %1441 = xor i64 %1437, -1
  %1442 = getelementptr i32, i32* %1424, i64 %1441
  %1443 = icmp ult i32* %1440, %1424
  %1444 = icmp ult i32* %1442, %1417
  %1445 = and i1 %1443, %1444
  br i1 %1445, label %1525, label %1446

1446:                                             ; preds = %1433
  %1447 = and i64 %1431, 9223372036854775800
  %1448 = sub nsw i64 0, %1447
  %1449 = getelementptr i32, i32* %1417, i64 %1448
  %1450 = sub nsw i64 0, %1447
  %1451 = getelementptr i32, i32* %1424, i64 %1450
  %1452 = add nsw i64 %1447, -8
  %1453 = lshr exact i64 %1452, 3
  %1454 = add nuw nsw i64 %1453, 1
  %1455 = and i64 %1454, 1
  %1456 = icmp eq i64 %1452, 0
  br i1 %1456, label %1503, label %1457

1457:                                             ; preds = %1446
  %1458 = sub nuw nsw i64 %1454, %1455
  %1459 = getelementptr i32, i32* %1417, i64 -1
  %1460 = getelementptr i32, i32* %1424, i64 -1
  %1461 = getelementptr i32, i32* %1417, i64 -1
  %1462 = getelementptr i32, i32* %1424, i64 -1
  br label %1463

1463:                                             ; preds = %1463, %1457
  %1464 = phi i64 [ 0, %1457 ], [ %1498, %1463 ]
  %1465 = phi i64 [ %1458, %1457 ], [ %1499, %1463 ]
  %1466 = sub i64 0, %1464
  %1467 = sub i64 0, %1464
  %1468 = getelementptr inbounds i32, i32* %1459, i64 %1466
  %1469 = getelementptr inbounds i32, i32* %1460, i64 %1467
  %1470 = getelementptr inbounds i32, i32* %1469, i64 -3
  %1471 = bitcast i32* %1470 to <4 x i32>*
  %1472 = load <4 x i32>, <4 x i32>* %1471, align 4, !alias.scope !252
  %1473 = getelementptr inbounds i32, i32* %1469, i64 -4
  %1474 = getelementptr inbounds i32, i32* %1473, i64 -3
  %1475 = bitcast i32* %1474 to <4 x i32>*
  %1476 = load <4 x i32>, <4 x i32>* %1475, align 4, !alias.scope !252
  %1477 = getelementptr inbounds i32, i32* %1468, i64 -3
  %1478 = bitcast i32* %1477 to <4 x i32>*
  store <4 x i32> %1472, <4 x i32>* %1478, align 4, !alias.scope !255, !noalias !252
  %1479 = getelementptr inbounds i32, i32* %1468, i64 -4
  %1480 = getelementptr inbounds i32, i32* %1479, i64 -3
  %1481 = bitcast i32* %1480 to <4 x i32>*
  store <4 x i32> %1476, <4 x i32>* %1481, align 4, !alias.scope !255, !noalias !252
  %1482 = sub nuw nsw i64 -8, %1464
  %1483 = sub nuw nsw i64 -8, %1464
  %1484 = getelementptr inbounds i32, i32* %1461, i64 %1482
  %1485 = getelementptr inbounds i32, i32* %1462, i64 %1483
  %1486 = getelementptr inbounds i32, i32* %1485, i64 -3
  %1487 = bitcast i32* %1486 to <4 x i32>*
  %1488 = load <4 x i32>, <4 x i32>* %1487, align 4, !alias.scope !252
  %1489 = getelementptr inbounds i32, i32* %1485, i64 -4
  %1490 = getelementptr inbounds i32, i32* %1489, i64 -3
  %1491 = bitcast i32* %1490 to <4 x i32>*
  %1492 = load <4 x i32>, <4 x i32>* %1491, align 4, !alias.scope !252
  %1493 = getelementptr inbounds i32, i32* %1484, i64 -3
  %1494 = bitcast i32* %1493 to <4 x i32>*
  store <4 x i32> %1488, <4 x i32>* %1494, align 4, !alias.scope !255, !noalias !252
  %1495 = getelementptr inbounds i32, i32* %1484, i64 -4
  %1496 = getelementptr inbounds i32, i32* %1495, i64 -3
  %1497 = bitcast i32* %1496 to <4 x i32>*
  store <4 x i32> %1492, <4 x i32>* %1497, align 4, !alias.scope !255, !noalias !252
  %1498 = add i64 %1464, 16
  %1499 = add i64 %1465, -2
  %1500 = icmp eq i64 %1499, 0
  br i1 %1500, label %1501, label %1463, !llvm.loop !257

1501:                                             ; preds = %1463
  %1502 = sub nuw nsw i64 -16, %1464
  br label %1503

1503:                                             ; preds = %1501, %1446
  %1504 = phi i64 [ 0, %1446 ], [ %1502, %1501 ]
  %1505 = icmp eq i64 %1455, 0
  br i1 %1505, label %1523, label %1506

1506:                                             ; preds = %1503
  %1507 = getelementptr i32, i32* %1417, i64 -1
  %1508 = getelementptr i32, i32* %1424, i64 -1
  %1509 = getelementptr inbounds i32, i32* %1507, i64 %1504
  %1510 = getelementptr inbounds i32, i32* %1508, i64 %1504
  %1511 = getelementptr inbounds i32, i32* %1510, i64 -3
  %1512 = bitcast i32* %1511 to <4 x i32>*
  %1513 = load <4 x i32>, <4 x i32>* %1512, align 4, !alias.scope !252
  %1514 = getelementptr inbounds i32, i32* %1510, i64 -4
  %1515 = getelementptr inbounds i32, i32* %1514, i64 -3
  %1516 = bitcast i32* %1515 to <4 x i32>*
  %1517 = load <4 x i32>, <4 x i32>* %1516, align 4, !alias.scope !252
  %1518 = getelementptr inbounds i32, i32* %1509, i64 -3
  %1519 = bitcast i32* %1518 to <4 x i32>*
  store <4 x i32> %1513, <4 x i32>* %1519, align 4, !alias.scope !255, !noalias !252
  %1520 = getelementptr inbounds i32, i32* %1509, i64 -4
  %1521 = getelementptr inbounds i32, i32* %1520, i64 -3
  %1522 = bitcast i32* %1521 to <4 x i32>*
  store <4 x i32> %1517, <4 x i32>* %1522, align 4, !alias.scope !255, !noalias !252
  br label %1523

1523:                                             ; preds = %1503, %1506
  %1524 = icmp eq i64 %1431, %1447
  br i1 %1524, label %1577, label %1525

1525:                                             ; preds = %1523, %1433, %1426
  %1526 = phi i32* [ %1417, %1433 ], [ %1417, %1426 ], [ %1449, %1523 ]
  %1527 = phi i32* [ %1424, %1433 ], [ %1424, %1426 ], [ %1451, %1523 ]
  %1528 = getelementptr i32, i32* %1527, i64 -1
  %1529 = ptrtoint i32* %1528 to i64
  %1530 = sub i64 %1529, %1423
  %1531 = lshr i64 %1530, 2
  %1532 = add nuw nsw i64 %1531, 1
  %1533 = and i64 %1532, 7
  %1534 = icmp eq i64 %1533, 0
  br i1 %1534, label %1544, label %1535

1535:                                             ; preds = %1525, %1535
  %1536 = phi i32* [ %1539, %1535 ], [ %1526, %1525 ]
  %1537 = phi i32* [ %1540, %1535 ], [ %1527, %1525 ]
  %1538 = phi i64 [ %1542, %1535 ], [ %1533, %1525 ]
  %1539 = getelementptr inbounds i32, i32* %1536, i64 -1
  %1540 = getelementptr inbounds i32, i32* %1537, i64 -1
  %1541 = load i32, i32* %1540, align 4
  store i32 %1541, i32* %1539, align 4
  %1542 = add i64 %1538, -1
  %1543 = icmp eq i64 %1542, 0
  br i1 %1543, label %1544, label %1535, !llvm.loop !258

1544:                                             ; preds = %1535, %1525
  %1545 = phi i32* [ undef, %1525 ], [ %1539, %1535 ]
  %1546 = phi i32* [ %1526, %1525 ], [ %1539, %1535 ]
  %1547 = phi i32* [ %1527, %1525 ], [ %1540, %1535 ]
  %1548 = icmp ult i64 %1530, 28
  br i1 %1548, label %1577, label %1549

1549:                                             ; preds = %1544, %1549
  %1550 = phi i32* [ %1573, %1549 ], [ %1546, %1544 ]
  %1551 = phi i32* [ %1574, %1549 ], [ %1547, %1544 ]
  %1552 = getelementptr inbounds i32, i32* %1550, i64 -1
  %1553 = getelementptr inbounds i32, i32* %1551, i64 -1
  %1554 = load i32, i32* %1553, align 4
  store i32 %1554, i32* %1552, align 4
  %1555 = getelementptr inbounds i32, i32* %1550, i64 -2
  %1556 = getelementptr inbounds i32, i32* %1551, i64 -2
  %1557 = load i32, i32* %1556, align 4
  store i32 %1557, i32* %1555, align 4
  %1558 = getelementptr inbounds i32, i32* %1550, i64 -3
  %1559 = getelementptr inbounds i32, i32* %1551, i64 -3
  %1560 = load i32, i32* %1559, align 4
  store i32 %1560, i32* %1558, align 4
  %1561 = getelementptr inbounds i32, i32* %1550, i64 -4
  %1562 = getelementptr inbounds i32, i32* %1551, i64 -4
  %1563 = load i32, i32* %1562, align 4
  store i32 %1563, i32* %1561, align 4
  %1564 = getelementptr inbounds i32, i32* %1550, i64 -5
  %1565 = getelementptr inbounds i32, i32* %1551, i64 -5
  %1566 = load i32, i32* %1565, align 4
  store i32 %1566, i32* %1564, align 4
  %1567 = getelementptr inbounds i32, i32* %1550, i64 -6
  %1568 = getelementptr inbounds i32, i32* %1551, i64 -6
  %1569 = load i32, i32* %1568, align 4
  store i32 %1569, i32* %1567, align 4
  %1570 = getelementptr inbounds i32, i32* %1550, i64 -7
  %1571 = getelementptr inbounds i32, i32* %1551, i64 -7
  %1572 = load i32, i32* %1571, align 4
  store i32 %1572, i32* %1570, align 4
  %1573 = getelementptr inbounds i32, i32* %1550, i64 -8
  %1574 = getelementptr inbounds i32, i32* %1551, i64 -8
  %1575 = load i32, i32* %1574, align 4
  store i32 %1575, i32* %1573, align 4
  %1576 = icmp eq i32* %1574, %1422
  br i1 %1576, label %1577, label %1549, !llvm.loop !259

1577:                                             ; preds = %1544, %1549, %1523
  %1578 = phi i32* [ %1449, %1523 ], [ %1545, %1544 ], [ %1573, %1549 ]
  %1579 = load i64, i64* %230, align 8
  br label %1580

1580:                                             ; preds = %1414, %1577
  %1581 = phi i32* [ %1578, %1577 ], [ %1417, %1414 ]
  %1582 = phi i64 [ %1579, %1577 ], [ %1423, %1414 ]
  %1583 = ptrtoint i32* %1581 to i64
  store i64 %1583, i64* %230, align 8
  store i64 %1421, i64* %228, align 8
  store i64 %1419, i64* %1401, align 8
  %1584 = icmp eq i64 %1582, 0
  br i1 %1584, label %1587, label %1585

1585:                                             ; preds = %1580
  %1586 = inttoptr i64 %1582 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %1586) #14
  br label %1587

1587:                                             ; preds = %267, %258, %243, %1585, %1580, %1388, %1379, %1374, %1182, %1173, %1168, %976, %967, %962, %770, %761, %756, %564, %555, %550, %358, %350, %1381, %246
  store i32 -1, i32* %215, align 8
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %221) #14
  br label %1601

1588:                                             ; preds = %214
  %1589 = icmp slt i32 %216, 0
  %1590 = icmp eq i32 %1, 38
  %1591 = and i1 %1590, %1589
  br i1 %1591, label %1592, label %1601

1592:                                             ; preds = %1588
  %1593 = bitcast i32** %5 to i64*
  %1594 = load i64, i64* %1593, align 8
  %1595 = bitcast %"class.std::__1::vector"* %4 to i64*
  %1596 = load i64, i64* %1595, align 8
  %1597 = sub i64 %1594, %1596
  %1598 = lshr exact i64 %1597, 2
  %1599 = trunc i64 %1598 to i32
  %1600 = add i32 %1599, -1
  store i32 %1600, i32* %215, align 8
  br label %1601

1601:                                             ; preds = %1588, %1592, %1587
  ret void
}

; Function Attrs: nounwind
declare dereferenceable(8) %"class.fxcrt::WideString"* @_ZN5fxcrt10WideStringaSEOS0_(%"class.fxcrt::WideString"*, %"class.fxcrt::WideString"* dereferenceable(8)) local_unnamed_addr #4

declare void @_ZN14CFX_XMLElement12SetAttributeERKN5fxcrt10WideStringES3_(%class.CFX_XMLElement*, %"class.fxcrt::WideString"* dereferenceable(8), %"class.fxcrt::WideString"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN13CFX_XMLParser17ProcessTargetDataEv(%class.CFX_XMLParser* nocapture) local_unnamed_addr #2 align 2 {
  %2 = alloca %"class.fxcrt::WideString", align 8
  %3 = bitcast %"class.fxcrt::WideString"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #14
  %4 = getelementptr inbounds %"class.fxcrt::WideString", %"class.fxcrt::WideString"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store %"class.fxcrt::StringDataTemplate"* inttoptr (i64 -6148914691236517206 to %"class.fxcrt::StringDataTemplate"*), %"class.fxcrt::StringDataTemplate"** %4, align 8, !alias.scope !260
  %5 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %7 = load i32*, i32** %6, align 8, !noalias !260
  %8 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8, !noalias !260
  %11 = bitcast %"class.std::__1::vector"* %5 to i64*
  %12 = ptrtoint i32* %7 to i64
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  call void @_ZN5fxcrt10WideStringC1EPKwm(%"class.fxcrt::WideString"* nonnull %2, i32* %7, i64 %14) #14
  %15 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 4
  store i32 -1, i32* %15, align 8, !noalias !260
  %16 = load i64, i64* %11, align 8, !noalias !260
  store i64 %16, i64* %9, align 8, !noalias !260
  %17 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast i32** %17 to i64*
  %19 = load i64, i64* %18, align 8, !noalias !260
  %20 = sub i64 %19, %16
  %21 = ashr exact i64 %20, 2
  %22 = icmp ult i64 %21, 128
  br i1 %22, label %23, label %199

23:                                               ; preds = %1
  %24 = call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 128, i64 4) #14
  %25 = ptrtoint i8* %24 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 512
  %27 = ptrtoint i8* %26 to i64
  %28 = load i32*, i32** %6, align 8, !noalias !260
  %29 = ptrtoint i32* %28 to i64
  %30 = load i32*, i32** %8, align 8, !noalias !260
  %31 = bitcast i32* %30 to i8*
  %32 = icmp eq i32* %30, %28
  br i1 %32, label %193, label %33

33:                                               ; preds = %23
  %34 = bitcast i8* %24 to i32*
  %35 = getelementptr i32, i32* %30, i64 -1
  %36 = ptrtoint i32* %35 to i64
  %37 = sub i64 %36, %29
  %38 = lshr i64 %37, 2
  %39 = add nuw nsw i64 %38, 1
  %40 = icmp ult i64 %39, 8
  br i1 %40, label %137, label %41

41:                                               ; preds = %33
  %42 = getelementptr i32, i32* %30, i64 -1
  %43 = ptrtoint i32* %42 to i64
  %44 = sub i64 %43, %29
  %45 = lshr i64 %44, 2
  %46 = and i64 %44, -4
  %47 = xor i64 %46, -4
  %48 = getelementptr i8, i8* %24, i64 %47
  %49 = xor i64 %45, -1
  %50 = getelementptr i32, i32* %30, i64 %49
  %51 = bitcast i32* %50 to i8*
  %52 = icmp ult i8* %48, %31
  %53 = icmp ugt i8* %24, %51
  %54 = and i1 %52, %53
  br i1 %54, label %137, label %55

55:                                               ; preds = %41
  %56 = and i64 %39, 9223372036854775800
  %57 = sub nsw i64 0, %56
  %58 = getelementptr i32, i32* %34, i64 %57
  %59 = sub nsw i64 0, %56
  %60 = getelementptr i32, i32* %30, i64 %59
  %61 = add nsw i64 %56, -8
  %62 = lshr exact i64 %61, 3
  %63 = add nuw nsw i64 %62, 1
  %64 = and i64 %63, 1
  %65 = icmp eq i64 %61, 0
  br i1 %65, label %114, label %66

66:                                               ; preds = %55
  %67 = sub nuw nsw i64 %63, %64
  %68 = getelementptr i8, i8* %24, i64 -4
  %69 = bitcast i8* %68 to i32*
  %70 = getelementptr i32, i32* %30, i64 -1
  %71 = getelementptr i8, i8* %24, i64 -4
  %72 = bitcast i8* %71 to i32*
  %73 = getelementptr i32, i32* %30, i64 -1
  br label %74

74:                                               ; preds = %74, %66
  %75 = phi i64 [ 0, %66 ], [ %109, %74 ]
  %76 = phi i64 [ %67, %66 ], [ %110, %74 ]
  %77 = sub i64 0, %75
  %78 = sub i64 0, %75
  %79 = getelementptr inbounds i32, i32* %69, i64 %77
  %80 = getelementptr inbounds i32, i32* %70, i64 %78
  %81 = getelementptr inbounds i32, i32* %80, i64 -3
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 4, !alias.scope !263
  %84 = getelementptr inbounds i32, i32* %80, i64 -4
  %85 = getelementptr inbounds i32, i32* %84, i64 -3
  %86 = bitcast i32* %85 to <4 x i32>*
  %87 = load <4 x i32>, <4 x i32>* %86, align 4, !alias.scope !263
  %88 = getelementptr inbounds i32, i32* %79, i64 -3
  %89 = bitcast i32* %88 to <4 x i32>*
  store <4 x i32> %83, <4 x i32>* %89, align 4, !alias.scope !266, !noalias !263
  %90 = getelementptr inbounds i32, i32* %79, i64 -4
  %91 = getelementptr inbounds i32, i32* %90, i64 -3
  %92 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> %87, <4 x i32>* %92, align 4, !alias.scope !266, !noalias !263
  %93 = sub nuw nsw i64 -8, %75
  %94 = sub nuw nsw i64 -8, %75
  %95 = getelementptr inbounds i32, i32* %72, i64 %93
  %96 = getelementptr inbounds i32, i32* %73, i64 %94
  %97 = getelementptr inbounds i32, i32* %96, i64 -3
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4, !alias.scope !263
  %100 = getelementptr inbounds i32, i32* %96, i64 -4
  %101 = getelementptr inbounds i32, i32* %100, i64 -3
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !263
  %104 = getelementptr inbounds i32, i32* %95, i64 -3
  %105 = bitcast i32* %104 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %105, align 4, !alias.scope !266, !noalias !263
  %106 = getelementptr inbounds i32, i32* %95, i64 -4
  %107 = getelementptr inbounds i32, i32* %106, i64 -3
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %108, align 4, !alias.scope !266, !noalias !263
  %109 = add i64 %75, 16
  %110 = add i64 %76, -2
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %74, !llvm.loop !268

112:                                              ; preds = %74
  %113 = sub nuw nsw i64 -16, %75
  br label %114

114:                                              ; preds = %112, %55
  %115 = phi i64 [ 0, %55 ], [ %113, %112 ]
  %116 = icmp eq i64 %64, 0
  br i1 %116, label %135, label %117

117:                                              ; preds = %114
  %118 = getelementptr i8, i8* %24, i64 -4
  %119 = bitcast i8* %118 to i32*
  %120 = getelementptr i32, i32* %30, i64 -1
  %121 = getelementptr inbounds i32, i32* %119, i64 %115
  %122 = getelementptr inbounds i32, i32* %120, i64 %115
  %123 = getelementptr inbounds i32, i32* %122, i64 -3
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 4, !alias.scope !263
  %126 = getelementptr inbounds i32, i32* %122, i64 -4
  %127 = getelementptr inbounds i32, i32* %126, i64 -3
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 4, !alias.scope !263
  %130 = getelementptr inbounds i32, i32* %121, i64 -3
  %131 = bitcast i32* %130 to <4 x i32>*
  store <4 x i32> %125, <4 x i32>* %131, align 4, !alias.scope !266, !noalias !263
  %132 = getelementptr inbounds i32, i32* %121, i64 -4
  %133 = getelementptr inbounds i32, i32* %132, i64 -3
  %134 = bitcast i32* %133 to <4 x i32>*
  store <4 x i32> %129, <4 x i32>* %134, align 4, !alias.scope !266, !noalias !263
  br label %135

135:                                              ; preds = %114, %117
  %136 = icmp eq i64 %39, %56
  br i1 %136, label %189, label %137

137:                                              ; preds = %135, %41, %33
  %138 = phi i32* [ %34, %41 ], [ %34, %33 ], [ %58, %135 ]
  %139 = phi i32* [ %30, %41 ], [ %30, %33 ], [ %60, %135 ]
  %140 = getelementptr i32, i32* %139, i64 -1
  %141 = ptrtoint i32* %140 to i64
  %142 = sub i64 %141, %29
  %143 = lshr i64 %142, 2
  %144 = add nuw nsw i64 %143, 1
  %145 = and i64 %144, 7
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %156, label %147

147:                                              ; preds = %137, %147
  %148 = phi i32* [ %151, %147 ], [ %138, %137 ]
  %149 = phi i32* [ %152, %147 ], [ %139, %137 ]
  %150 = phi i64 [ %154, %147 ], [ %145, %137 ]
  %151 = getelementptr inbounds i32, i32* %148, i64 -1
  %152 = getelementptr inbounds i32, i32* %149, i64 -1
  %153 = load i32, i32* %152, align 4
  store i32 %153, i32* %151, align 4
  %154 = add i64 %150, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %147, !llvm.loop !269

156:                                              ; preds = %147, %137
  %157 = phi i32* [ undef, %137 ], [ %151, %147 ]
  %158 = phi i32* [ %138, %137 ], [ %151, %147 ]
  %159 = phi i32* [ %139, %137 ], [ %152, %147 ]
  %160 = icmp ult i64 %142, 28
  br i1 %160, label %189, label %161

161:                                              ; preds = %156, %161
  %162 = phi i32* [ %185, %161 ], [ %158, %156 ]
  %163 = phi i32* [ %186, %161 ], [ %159, %156 ]
  %164 = getelementptr inbounds i32, i32* %162, i64 -1
  %165 = getelementptr inbounds i32, i32* %163, i64 -1
  %166 = load i32, i32* %165, align 4
  store i32 %166, i32* %164, align 4
  %167 = getelementptr inbounds i32, i32* %162, i64 -2
  %168 = getelementptr inbounds i32, i32* %163, i64 -2
  %169 = load i32, i32* %168, align 4
  store i32 %169, i32* %167, align 4
  %170 = getelementptr inbounds i32, i32* %162, i64 -3
  %171 = getelementptr inbounds i32, i32* %163, i64 -3
  %172 = load i32, i32* %171, align 4
  store i32 %172, i32* %170, align 4
  %173 = getelementptr inbounds i32, i32* %162, i64 -4
  %174 = getelementptr inbounds i32, i32* %163, i64 -4
  %175 = load i32, i32* %174, align 4
  store i32 %175, i32* %173, align 4
  %176 = getelementptr inbounds i32, i32* %162, i64 -5
  %177 = getelementptr inbounds i32, i32* %163, i64 -5
  %178 = load i32, i32* %177, align 4
  store i32 %178, i32* %176, align 4
  %179 = getelementptr inbounds i32, i32* %162, i64 -6
  %180 = getelementptr inbounds i32, i32* %163, i64 -6
  %181 = load i32, i32* %180, align 4
  store i32 %181, i32* %179, align 4
  %182 = getelementptr inbounds i32, i32* %162, i64 -7
  %183 = getelementptr inbounds i32, i32* %163, i64 -7
  %184 = load i32, i32* %183, align 4
  store i32 %184, i32* %182, align 4
  %185 = getelementptr inbounds i32, i32* %162, i64 -8
  %186 = getelementptr inbounds i32, i32* %163, i64 -8
  %187 = load i32, i32* %186, align 4
  store i32 %187, i32* %185, align 4
  %188 = icmp eq i32* %186, %28
  br i1 %188, label %189, label %161, !llvm.loop !270

189:                                              ; preds = %156, %161, %135
  %190 = phi i32* [ %58, %135 ], [ %157, %156 ], [ %185, %161 ]
  %191 = ptrtoint i32* %190 to i64
  %192 = load i64, i64* %11, align 8, !noalias !260
  br label %193

193:                                              ; preds = %23, %189
  %194 = phi i64 [ %191, %189 ], [ %25, %23 ]
  %195 = phi i64 [ %192, %189 ], [ %29, %23 ]
  store i64 %194, i64* %11, align 8, !noalias !260
  store i64 %25, i64* %9, align 8, !noalias !260
  store i64 %27, i64* %18, align 8, !noalias !260
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %199, label %197

197:                                              ; preds = %193
  %198 = inttoptr i64 %195 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %198) #14
  br label %199

199:                                              ; preds = %1, %193, %197
  %200 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %4, align 8
  %201 = icmp eq %"class.fxcrt::StringDataTemplate"* %200, null
  br i1 %201, label %219, label %202

202:                                              ; preds = %199
  %203 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %200, i64 0, i32 1
  %204 = load i64, i64* %203, align 8
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %219, label %206

206:                                              ; preds = %202
  %207 = getelementptr inbounds %class.CFX_XMLParser, %class.CFX_XMLParser* %0, i64 0, i32 0
  %208 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %207, align 8
  %209 = icmp eq %class.CFX_XMLNode* %208, null
  br i1 %209, label %219, label %210

210:                                              ; preds = %206
  %211 = bitcast %class.CFX_XMLNode* %208 to i32 (%class.CFX_XMLNode*)***
  %212 = load i32 (%class.CFX_XMLNode*)**, i32 (%class.CFX_XMLNode*)*** %211, align 8
  %213 = getelementptr inbounds i32 (%class.CFX_XMLNode*)*, i32 (%class.CFX_XMLNode*)** %212, i64 2
  %214 = load i32 (%class.CFX_XMLNode*)*, i32 (%class.CFX_XMLNode*)** %213, align 8
  %215 = call i32 %214(%class.CFX_XMLNode* nonnull %208) #14
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %219

217:                                              ; preds = %210
  %218 = bitcast %class.CFX_XMLNode* %208 to %class.CFX_XMLInstruction*
  call void @_ZN18CFX_XMLInstruction10AppendDataERKN5fxcrt10WideStringE(%class.CFX_XMLInstruction* nonnull %218, %"class.fxcrt::WideString"* nonnull dereferenceable(8) %2) #14
  br label %219

219:                                              ; preds = %210, %206, %199, %217, %202
  call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* nonnull %2) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #14
  ret void
}

declare i32 @_Z14FXSYS_wcsnicmpPKwS0_m(i32*, i32*, i64) local_unnamed_addr #3

declare void @_ZN5fxcrt10WideStringC1EPKwm(%"class.fxcrt::WideString"*, i32*, i64) unnamed_addr #3

declare zeroext i1 @_ZNK5fxcrt10WideStringeqEPKw(%"class.fxcrt::WideString"*, i32*) local_unnamed_addr #3

declare void @_ZN18CFX_XMLInstruction10AppendDataERKN5fxcrt10WideStringE(%class.CFX_XMLInstruction*, %"class.fxcrt::WideString"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nounwind readnone speculatable
declare { i65, i1 } @llvm.sadd.with.overflow.i65(i65, i65) #6

declare signext i8 @u_isspace_69(i32) local_unnamed_addr #3

declare void @_ZN5fxcrt18StringDataTemplateIwE7ReleaseEv(%"class.fxcrt::StringDataTemplate"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK5fxcrt10WideStringeqERKS0_(%"class.fxcrt::WideString"*, %"class.fxcrt::WideString"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() local_unnamed_addr #8

; Function Attrs: nounwind
declare i32 @iswdigit(i32) local_unnamed_addr #4

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

declare void @_ZN23CFX_SeekableStreamProxyC1ERKN5fxcrt9RetainPtrI22IFX_SeekableReadStreamEE(%class.CFX_SeekableStreamProxy*, %"class.fxcrt::RetainPtr.0"* dereferenceable(8)) unnamed_addr #3

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #3

declare void @_ZN15CFX_XMLDocumentC1Ev(%class.CFX_XMLDocument*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN15CFX_XMLDocumentD1Ev(%class.CFX_XMLDocument*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIw16FxAllocAllocatorIwEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #14
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %227

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #15
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %38, %42
  %48 = phi i64 [ %45, %42 ], [ 4611686018427387903, %38 ]
  %49 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %48, i64 4) #14
  %50 = bitcast i8* %49 to i32*
  br label %51

51:                                               ; preds = %47, %42
  %52 = phi i64 [ %48, %47 ], [ 0, %42 ]
  %53 = phi i32* [ %50, %47 ], [ null, %42 ]
  %54 = getelementptr inbounds i32, i32* %53, i64 %33
  %55 = bitcast i32* %54 to i8*
  %56 = getelementptr inbounds i32, i32* %53, i64 %52
  %57 = getelementptr inbounds i32, i32* %54, i64 %1
  %58 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %55, i8 0, i64 %58, i1 false) #14
  %59 = ptrtoint i32* %56 to i64
  %60 = ptrtoint i32* %57 to i64
  %61 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %62 = load i32*, i32** %61, align 8
  %63 = ptrtoint i32* %62 to i64
  %64 = load i32*, i32** %6, align 8
  %65 = icmp eq i32* %64, %62
  br i1 %65, label %220, label %66

66:                                               ; preds = %51
  %67 = getelementptr i32, i32* %64, i64 -1
  %68 = ptrtoint i32* %67 to i64
  %69 = sub i64 %68, %63
  %70 = lshr i64 %69, 2
  %71 = add nuw nsw i64 %70, 1
  %72 = icmp ult i64 %71, 8
  br i1 %72, label %165, label %73

73:                                               ; preds = %66
  %74 = getelementptr i32, i32* %64, i64 -1
  %75 = ptrtoint i32* %74 to i64
  %76 = sub i64 %75, %63
  %77 = lshr i64 %76, 2
  %78 = xor i64 %77, -1
  %79 = add nsw i64 %33, %78
  %80 = getelementptr i32, i32* %53, i64 %79
  %81 = xor i64 %77, -1
  %82 = getelementptr i32, i32* %64, i64 %81
  %83 = icmp ult i32* %80, %64
  %84 = icmp ult i32* %82, %54
  %85 = and i1 %83, %84
  br i1 %85, label %165, label %86

86:                                               ; preds = %73
  %87 = and i64 %71, 9223372036854775800
  %88 = sub nsw i64 0, %87
  %89 = getelementptr i32, i32* %54, i64 %88
  %90 = sub nsw i64 0, %87
  %91 = getelementptr i32, i32* %64, i64 %90
  %92 = add nsw i64 %87, -8
  %93 = lshr exact i64 %92, 3
  %94 = add nuw nsw i64 %93, 1
  %95 = and i64 %94, 1
  %96 = icmp eq i64 %92, 0
  br i1 %96, label %143, label %97

97:                                               ; preds = %86
  %98 = sub nuw nsw i64 %94, %95
  %99 = getelementptr i32, i32* %54, i64 -1
  %100 = getelementptr i32, i32* %64, i64 -1
  %101 = getelementptr i32, i32* %54, i64 -1
  %102 = getelementptr i32, i32* %64, i64 -1
  br label %103

103:                                              ; preds = %103, %97
  %104 = phi i64 [ 0, %97 ], [ %138, %103 ]
  %105 = phi i64 [ %98, %97 ], [ %139, %103 ]
  %106 = sub i64 0, %104
  %107 = sub i64 0, %104
  %108 = getelementptr inbounds i32, i32* %99, i64 %106
  %109 = getelementptr inbounds i32, i32* %100, i64 %107
  %110 = getelementptr inbounds i32, i32* %109, i64 -3
  %111 = bitcast i32* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4, !alias.scope !271
  %113 = getelementptr inbounds i32, i32* %109, i64 -4
  %114 = getelementptr inbounds i32, i32* %113, i64 -3
  %115 = bitcast i32* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 4, !alias.scope !271
  %117 = getelementptr inbounds i32, i32* %108, i64 -3
  %118 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %118, align 4, !alias.scope !274, !noalias !271
  %119 = getelementptr inbounds i32, i32* %108, i64 -4
  %120 = getelementptr inbounds i32, i32* %119, i64 -3
  %121 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %121, align 4, !alias.scope !274, !noalias !271
  %122 = sub nuw nsw i64 -8, %104
  %123 = sub nuw nsw i64 -8, %104
  %124 = getelementptr inbounds i32, i32* %101, i64 %122
  %125 = getelementptr inbounds i32, i32* %102, i64 %123
  %126 = getelementptr inbounds i32, i32* %125, i64 -3
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 4, !alias.scope !271
  %129 = getelementptr inbounds i32, i32* %125, i64 -4
  %130 = getelementptr inbounds i32, i32* %129, i64 -3
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4, !alias.scope !271
  %133 = getelementptr inbounds i32, i32* %124, i64 -3
  %134 = bitcast i32* %133 to <4 x i32>*
  store <4 x i32> %128, <4 x i32>* %134, align 4, !alias.scope !274, !noalias !271
  %135 = getelementptr inbounds i32, i32* %124, i64 -4
  %136 = getelementptr inbounds i32, i32* %135, i64 -3
  %137 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %132, <4 x i32>* %137, align 4, !alias.scope !274, !noalias !271
  %138 = add i64 %104, 16
  %139 = add i64 %105, -2
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %103, !llvm.loop !276

141:                                              ; preds = %103
  %142 = sub nuw nsw i64 -16, %104
  br label %143

143:                                              ; preds = %141, %86
  %144 = phi i64 [ 0, %86 ], [ %142, %141 ]
  %145 = icmp eq i64 %95, 0
  br i1 %145, label %163, label %146

146:                                              ; preds = %143
  %147 = getelementptr i32, i32* %54, i64 -1
  %148 = getelementptr i32, i32* %64, i64 -1
  %149 = getelementptr inbounds i32, i32* %147, i64 %144
  %150 = getelementptr inbounds i32, i32* %148, i64 %144
  %151 = getelementptr inbounds i32, i32* %150, i64 -3
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4, !alias.scope !271
  %154 = getelementptr inbounds i32, i32* %150, i64 -4
  %155 = getelementptr inbounds i32, i32* %154, i64 -3
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 4, !alias.scope !271
  %158 = getelementptr inbounds i32, i32* %149, i64 -3
  %159 = bitcast i32* %158 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %159, align 4, !alias.scope !274, !noalias !271
  %160 = getelementptr inbounds i32, i32* %149, i64 -4
  %161 = getelementptr inbounds i32, i32* %160, i64 -3
  %162 = bitcast i32* %161 to <4 x i32>*
  store <4 x i32> %157, <4 x i32>* %162, align 4, !alias.scope !274, !noalias !271
  br label %163

163:                                              ; preds = %143, %146
  %164 = icmp eq i64 %71, %87
  br i1 %164, label %217, label %165

165:                                              ; preds = %163, %73, %66
  %166 = phi i32* [ %54, %73 ], [ %54, %66 ], [ %89, %163 ]
  %167 = phi i32* [ %64, %73 ], [ %64, %66 ], [ %91, %163 ]
  %168 = getelementptr i32, i32* %167, i64 -1
  %169 = ptrtoint i32* %168 to i64
  %170 = sub i64 %169, %63
  %171 = lshr i64 %170, 2
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 7
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %184, label %175

175:                                              ; preds = %165, %175
  %176 = phi i32* [ %179, %175 ], [ %166, %165 ]
  %177 = phi i32* [ %180, %175 ], [ %167, %165 ]
  %178 = phi i64 [ %182, %175 ], [ %173, %165 ]
  %179 = getelementptr inbounds i32, i32* %176, i64 -1
  %180 = getelementptr inbounds i32, i32* %177, i64 -1
  %181 = load i32, i32* %180, align 4
  store i32 %181, i32* %179, align 4
  %182 = add i64 %178, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %175, !llvm.loop !277

184:                                              ; preds = %175, %165
  %185 = phi i32* [ undef, %165 ], [ %179, %175 ]
  %186 = phi i32* [ %166, %165 ], [ %179, %175 ]
  %187 = phi i32* [ %167, %165 ], [ %180, %175 ]
  %188 = icmp ult i64 %170, 28
  br i1 %188, label %217, label %189

189:                                              ; preds = %184, %189
  %190 = phi i32* [ %213, %189 ], [ %186, %184 ]
  %191 = phi i32* [ %214, %189 ], [ %187, %184 ]
  %192 = getelementptr inbounds i32, i32* %190, i64 -1
  %193 = getelementptr inbounds i32, i32* %191, i64 -1
  %194 = load i32, i32* %193, align 4
  store i32 %194, i32* %192, align 4
  %195 = getelementptr inbounds i32, i32* %190, i64 -2
  %196 = getelementptr inbounds i32, i32* %191, i64 -2
  %197 = load i32, i32* %196, align 4
  store i32 %197, i32* %195, align 4
  %198 = getelementptr inbounds i32, i32* %190, i64 -3
  %199 = getelementptr inbounds i32, i32* %191, i64 -3
  %200 = load i32, i32* %199, align 4
  store i32 %200, i32* %198, align 4
  %201 = getelementptr inbounds i32, i32* %190, i64 -4
  %202 = getelementptr inbounds i32, i32* %191, i64 -4
  %203 = load i32, i32* %202, align 4
  store i32 %203, i32* %201, align 4
  %204 = getelementptr inbounds i32, i32* %190, i64 -5
  %205 = getelementptr inbounds i32, i32* %191, i64 -5
  %206 = load i32, i32* %205, align 4
  store i32 %206, i32* %204, align 4
  %207 = getelementptr inbounds i32, i32* %190, i64 -6
  %208 = getelementptr inbounds i32, i32* %191, i64 -6
  %209 = load i32, i32* %208, align 4
  store i32 %209, i32* %207, align 4
  %210 = getelementptr inbounds i32, i32* %190, i64 -7
  %211 = getelementptr inbounds i32, i32* %191, i64 -7
  %212 = load i32, i32* %211, align 4
  store i32 %212, i32* %210, align 4
  %213 = getelementptr inbounds i32, i32* %190, i64 -8
  %214 = getelementptr inbounds i32, i32* %191, i64 -8
  %215 = load i32, i32* %214, align 4
  store i32 %215, i32* %213, align 4
  %216 = icmp eq i32* %214, %62
  br i1 %216, label %217, label %189, !llvm.loop !278

217:                                              ; preds = %184, %189, %163
  %218 = phi i32* [ %89, %163 ], [ %185, %184 ], [ %213, %189 ]
  %219 = load i64, i64* %30, align 8
  br label %220

220:                                              ; preds = %51, %217
  %221 = phi i32* [ %218, %217 ], [ %54, %51 ]
  %222 = phi i64 [ %219, %217 ], [ %63, %51 ]
  %223 = ptrtoint i32* %221 to i64
  store i64 %223, i64* %30, align 8
  store i64 %60, i64* %7, align 8
  store i64 %59, i64* %4, align 8
  %224 = icmp eq i64 %222, 0
  br i1 %224, label %227, label %225

225:                                              ; preds = %220
  %226 = inttoptr i64 %222 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %226) #14
  br label %227

227:                                              ; preds = %225, %220, %27
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_10unique_ptrI11CFX_XMLNodeNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(%"class.std::__1::vector.13"*, %"class.std::__1::unique_ptr.15"* dereferenceable(8)) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::unique_ptr.15"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.13"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.13"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #15
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::unique_ptr.15"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #15
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #13
  %33 = bitcast i8* %32 to %"class.std::__1::unique_ptr.15"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.std::__1::unique_ptr.15"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %36, i64 %9
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %36, i64 %35
  %39 = ptrtoint %"class.std::__1::unique_ptr.15"* %38 to i64
  %40 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast %"class.std::__1::unique_ptr.15"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %40, align 8
  %43 = bitcast %"class.std::__1::unique_ptr.15"* %37 to i64*
  store i64 %42, i64* %43, align 8
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %37, i64 1
  %45 = ptrtoint %"class.std::__1::unique_ptr.15"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 0
  %47 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %46, align 8
  %48 = ptrtoint %"class.std::__1::unique_ptr.15"* %47 to i64
  %49 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %3, align 8
  %50 = icmp eq %"class.std::__1::unique_ptr.15"* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %49, i64 -1, i32 0, i32 0, i32 0
  %53 = ptrtoint %class.CFX_XMLNode** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %"class.std::__1::unique_ptr.15"* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %"class.std::__1::unique_ptr.15"* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %60, i64 -1
  %64 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %61, i64 -1
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr.15"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %65, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.15"* %63 to i64*
  store i64 %67, i64* %68, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !279

71:                                               ; preds = %59, %51
  %72 = phi %"class.std::__1::unique_ptr.15"* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %"class.std::__1::unique_ptr.15"* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %"class.std::__1::unique_ptr.15"* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %"class.std::__1::unique_ptr.15"* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %"class.std::__1::unique_ptr.15"* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -1
  %81 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %80, i64 0, i32 0, i32 0, i32 0
  %82 = bitcast %"class.std::__1::unique_ptr.15"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %81, align 8
  %84 = bitcast %"class.std::__1::unique_ptr.15"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -2
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -2
  %87 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = bitcast %"class.std::__1::unique_ptr.15"* %86 to i64*
  %89 = load i64, i64* %88, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %87, align 8
  %90 = bitcast %"class.std::__1::unique_ptr.15"* %85 to i64*
  store i64 %89, i64* %90, align 8
  %91 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -3
  %92 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -3
  %93 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %92, i64 0, i32 0, i32 0, i32 0
  %94 = bitcast %"class.std::__1::unique_ptr.15"* %92 to i64*
  %95 = load i64, i64* %94, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %93, align 8
  %96 = bitcast %"class.std::__1::unique_ptr.15"* %91 to i64*
  store i64 %95, i64* %96, align 8
  %97 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -4
  %98 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -4
  %99 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %98, i64 0, i32 0, i32 0, i32 0
  %100 = bitcast %"class.std::__1::unique_ptr.15"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %99, align 8
  %102 = bitcast %"class.std::__1::unique_ptr.15"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -5
  %104 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -5
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = bitcast %"class.std::__1::unique_ptr.15"* %104 to i64*
  %107 = load i64, i64* %106, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %105, align 8
  %108 = bitcast %"class.std::__1::unique_ptr.15"* %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -6
  %110 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -6
  %111 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %110, i64 0, i32 0, i32 0, i32 0
  %112 = bitcast %"class.std::__1::unique_ptr.15"* %110 to i64*
  %113 = load i64, i64* %112, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %111, align 8
  %114 = bitcast %"class.std::__1::unique_ptr.15"* %109 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -7
  %116 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -7
  %117 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %116, i64 0, i32 0, i32 0, i32 0
  %118 = bitcast %"class.std::__1::unique_ptr.15"* %116 to i64*
  %119 = load i64, i64* %118, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %117, align 8
  %120 = bitcast %"class.std::__1::unique_ptr.15"* %115 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %77, i64 -8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %78, i64 -8
  %123 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.std::__1::unique_ptr.15"* %122 to i64*
  %125 = load i64, i64* %124, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %123, align 8
  %126 = bitcast %"class.std::__1::unique_ptr.15"* %121 to i64*
  store i64 %125, i64* %126, align 8
  %127 = icmp eq %"class.std::__1::unique_ptr.15"* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %"class.std::__1::unique_ptr.15"* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %"class.std::__1::unique_ptr.15"*, %"class.std::__1::unique_ptr.15"** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %"class.std::__1::unique_ptr.15"* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %"class.std::__1::unique_ptr.15"* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %"class.std::__1::unique_ptr.15"* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %"class.std::__1::unique_ptr.15"*
  %138 = icmp eq %"class.std::__1::unique_ptr.15"* %133, %137
  br i1 %138, label %152, label %139

139:                                              ; preds = %132, %150
  %140 = phi %"class.std::__1::unique_ptr.15"* [ %141, %150 ], [ %133, %132 ]
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %140, i64 -1
  %142 = getelementptr inbounds %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.15"* %141, i64 0, i32 0, i32 0, i32 0
  %143 = load %class.CFX_XMLNode*, %class.CFX_XMLNode** %142, align 8
  store %class.CFX_XMLNode* null, %class.CFX_XMLNode** %142, align 8
  %144 = icmp eq %class.CFX_XMLNode* %143, null
  br i1 %144, label %150, label %145

145:                                              ; preds = %139
  %146 = bitcast %class.CFX_XMLNode* %143 to void (%class.CFX_XMLNode*)***
  %147 = load void (%class.CFX_XMLNode*)**, void (%class.CFX_XMLNode*)*** %146, align 8
  %148 = getelementptr inbounds void (%class.CFX_XMLNode*)*, void (%class.CFX_XMLNode*)** %147, i64 1
  %149 = load void (%class.CFX_XMLNode*)*, void (%class.CFX_XMLNode*)** %148, align 8
  tail call void %149(%class.CFX_XMLNode* nonnull %143) #14
  br label %150

150:                                              ; preds = %145, %139
  %151 = icmp eq %"class.std::__1::unique_ptr.15"* %141, %137
  br i1 %151, label %152, label %139

152:                                              ; preds = %150, %132
  %153 = icmp eq i64 %135, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %152
  %155 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %155) #13
  br label %156

156:                                              ; preds = %152, %154
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #12

declare void @_ZN11CFX_XMLTextC1ERKN5fxcrt10WideStringE(%class.CFX_XMLText*, %"class.fxcrt::WideString"* dereferenceable(8)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIN11CFX_XMLNode4TypeENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque.49"*) local_unnamed_addr #2 comdat align 2 {
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.112", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque.49", %"class.std::__1::deque.49"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 1023
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -1024
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque.49", %"class.std::__1::deque.49"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32**, i32*** %10, align 8
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i32*, i32** %11, i64 1
  store i32** %14, i32*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque.49", %"class.std::__1::deque.49"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load i32**, i32*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque.49", %"class.std::__1::deque.49"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load i32**, i32*** %17, align 8
  %19 = icmp eq i32** %16, %18
  %20 = ptrtoint i32** %18 to i64
  %21 = bitcast i32** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque.49", %"class.std::__1::deque.49"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32**, i32*** %23, align 8
  %25 = icmp ugt i32** %14, %24
  %26 = ptrtoint i32** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint i32** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds i32*, i32** %14, i64 %32
  %34 = ptrtoint i32** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast i32** %33 to i8*
  %40 = bitcast i32** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #14
  %41 = load i32**, i32*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi i32** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds i32*, i32** %33, i64 %36
  store i32** %44, i32*** %15, align 8
  %45 = getelementptr inbounds i32*, i32** %43, i64 %32
  store i32** %45, i32*** %10, align 8
  %46 = bitcast i32** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast i32*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque.49"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #15
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #13
  %60 = bitcast i8* %59 to i32**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds i32*, i32** %60, i64 %57
  %63 = ptrtoint i32** %62 to i64
  %64 = getelementptr inbounds i32*, i32** %60, i64 %53
  %65 = ptrtoint i32** %64 to i64
  %66 = ptrtoint i32** %14 to i64
  %67 = ptrtoint i32** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds i32*, i32** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi i32** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi i32** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast i32** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds i32*, i32** %79, i64 1
  %87 = ptrtoint i32** %86 to i64
  %88 = getelementptr inbounds i32*, i32** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !280

91:                                               ; preds = %78
  %92 = ptrtoint i32** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi i32** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi i32** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi i32** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi i32** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast i32** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i32*, i32** %99, i64 1
  %106 = getelementptr inbounds i32*, i32** %101, i64 1
  %107 = bitcast i32** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i32** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i32*, i32** %99, i64 2
  %111 = getelementptr inbounds i32*, i32** %101, i64 2
  %112 = bitcast i32** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i32** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i32*, i32** %99, i64 3
  %116 = getelementptr inbounds i32*, i32** %101, i64 3
  %117 = bitcast i32** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i32** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i32*, i32** %99, i64 4
  %121 = getelementptr inbounds i32*, i32** %101, i64 4
  %122 = bitcast i32** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i32** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i32*, i32** %99, i64 5
  %126 = getelementptr inbounds i32*, i32** %101, i64 5
  %127 = bitcast i32** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i32** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i32*, i32** %99, i64 6
  %131 = getelementptr inbounds i32*, i32** %101, i64 6
  %132 = bitcast i32** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast i32** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds i32*, i32** %99, i64 7
  %136 = getelementptr inbounds i32*, i32** %101, i64 7
  %137 = bitcast i32** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast i32** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds i32*, i32** %99, i64 8
  %141 = ptrtoint i32** %140 to i64
  %142 = getelementptr inbounds i32*, i32** %101, i64 8
  %143 = icmp eq i32** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint i32** %70 to i64
  %146 = load i32**, i32*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi i32** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast i32*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast i32*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq i32** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast i32** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #13
  %156 = bitcast i32*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load i32**, i32*** %15, align 8
  %161 = getelementptr inbounds i32*, i32** %160, i64 1
  store i32** %161, i32*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque.49", %"class.std::__1::deque.49"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque.49", %"class.std::__1::deque.49"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast i32*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque.49", %"class.std::__1::deque.49"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast i32*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque.49", %"class.std::__1::deque.49"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast i32*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque.49"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to i32**
  %181 = inttoptr i64 %169 to i32**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast i32** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #14
  %186 = tail call i8* @_Znwm(i64 4096) #13
  %187 = bitcast i32** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPN11CFX_XMLNode4TypeENS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer.51"* %163, i32** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #14
  br label %460

188:                                              ; preds = %182
  %189 = bitcast i32** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #14
  %190 = tail call i8* @_Znwm(i64 4096) #13
  %191 = bitcast i32** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPN11CFX_XMLNode4TypeENS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer.51"* %163, i32** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #14
  %192 = load i32**, i32*** %167, align 8
  %193 = bitcast i32** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds i32*, i32** %192, i64 1
  store i32** %195, i32*** %167, align 8
  %196 = load i32**, i32*** %164, align 8
  %197 = load i32**, i32*** %172, align 8
  %198 = icmp eq i32** %196, %197
  %199 = ptrtoint i32** %197 to i64
  %200 = bitcast i32** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque.49", %"class.std::__1::deque.49"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load i32**, i32*** %202, align 8
  %204 = icmp ugt i32** %195, %203
  %205 = ptrtoint i32** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint i32** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds i32*, i32** %195, i64 %211
  %213 = ptrtoint i32** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast i32** %212 to i8*
  %219 = bitcast i32** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #14
  %220 = load i32**, i32*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi i32** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds i32*, i32** %212, i64 %215
  store i32** %223, i32*** %164, align 8
  %224 = getelementptr inbounds i32*, i32** %222, i64 %211
  store i32** %224, i32*** %167, align 8
  %225 = bitcast i32** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #15
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #13
  %237 = bitcast i8* %236 to i32**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds i32*, i32** %237, i64 %234
  %240 = ptrtoint i32** %239 to i64
  %241 = getelementptr inbounds i32*, i32** %237, i64 %230
  %242 = ptrtoint i32** %241 to i64
  %243 = ptrtoint i32** %195 to i64
  %244 = ptrtoint i32** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds i32*, i32** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi i32** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi i32** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast i32** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds i32*, i32** %256, i64 1
  %264 = ptrtoint i32** %263 to i64
  %265 = getelementptr inbounds i32*, i32** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !281

268:                                              ; preds = %255
  %269 = ptrtoint i32** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi i32** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi i32** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi i32** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi i32** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast i32** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds i32*, i32** %276, i64 1
  %283 = getelementptr inbounds i32*, i32** %278, i64 1
  %284 = bitcast i32** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast i32** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds i32*, i32** %276, i64 2
  %288 = getelementptr inbounds i32*, i32** %278, i64 2
  %289 = bitcast i32** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast i32** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds i32*, i32** %276, i64 3
  %293 = getelementptr inbounds i32*, i32** %278, i64 3
  %294 = bitcast i32** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast i32** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds i32*, i32** %276, i64 4
  %298 = getelementptr inbounds i32*, i32** %278, i64 4
  %299 = bitcast i32** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast i32** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds i32*, i32** %276, i64 5
  %303 = getelementptr inbounds i32*, i32** %278, i64 5
  %304 = bitcast i32** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast i32** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds i32*, i32** %276, i64 6
  %308 = getelementptr inbounds i32*, i32** %278, i64 6
  %309 = bitcast i32** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast i32** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds i32*, i32** %276, i64 7
  %313 = getelementptr inbounds i32*, i32** %278, i64 7
  %314 = bitcast i32** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast i32** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds i32*, i32** %276, i64 8
  %318 = ptrtoint i32** %317 to i64
  %319 = getelementptr inbounds i32*, i32** %278, i64 8
  %320 = icmp eq i32** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint i32** %247 to i64
  %323 = load i32**, i32*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi i32** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq i32** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast i32** %325 to i8*
  call void @_ZdlPv(i8* %330) #13
  %331 = bitcast i32*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load i32**, i32*** %164, align 8
  %336 = getelementptr inbounds i32*, i32** %335, i64 1
  store i32** %336, i32*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.112"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #14
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.112", %"struct.std::__1::__split_buffer.112"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.112", %"struct.std::__1::__split_buffer.112"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.112", %"struct.std::__1::__split_buffer.112"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.112", %"struct.std::__1::__split_buffer.112"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque.49", %"class.std::__1::deque.49"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.112"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store i32** null, i32*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator.55"** %342 to %"class.std::__1::__compressed_pair.52"**
  store %"class.std::__1::__compressed_pair.52"* %346, %"class.std::__1::__compressed_pair.52"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #15
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #13
  %354 = bitcast i8* %353 to i32**
  %355 = bitcast %"struct.std::__1::__split_buffer.112"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds i32*, i32** %354, i64 %171
  store i32** %356, i32*** %340, align 8
  store i32** %356, i32*** %339, align 8
  %357 = getelementptr inbounds i32*, i32** %354, i64 %345
  store i32** %357, i32*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #13
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint i32** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint i32** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt i32** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds i32*, i32** %356, i64 %370
  store i32** %371, i32*** %340, align 8
  store i32** %371, i32*** %339, align 8
  %372 = ptrtoint i32** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #15
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.112"* %4 to i64*
  %382 = bitcast i32*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #13
  %386 = bitcast i8* %385 to i32**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds i32*, i32** %386, i64 %383
  %389 = ptrtoint i32** %388 to i64
  %390 = getelementptr inbounds i32*, i32** %386, i64 %377
  %391 = ptrtoint i32** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast i32*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast i32*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #13
  %394 = load i32**, i32*** %164, align 8
  %395 = load i32**, i32*** %167, align 8
  %396 = ptrtoint i32** %395 to i64
  %397 = ptrtoint i32** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi i32** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi i32** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi i32** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast i32** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds i32*, i32** %406, i64 1
  store i32** %408, i32*** %340, align 8
  %409 = icmp eq i32** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint i32** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.112"* %4 to i64*
  %413 = bitcast i32*** %339 to i64*
  %414 = bitcast i32*** %340 to i64*
  %415 = bitcast i32*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint i32** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.112"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast i32*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast i32*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast i32*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to i32**
  %441 = inttoptr i64 %434 to i32**
  %442 = icmp eq i32** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr i32*, i32** %441, i64 -1
  %445 = ptrtoint i32** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr i32*, i32** %441, i64 %448
  store i32** %449, i32*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #13
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #14
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi i32** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds i32*, i32** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPN11CFX_XMLNode4TypeERNS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer.112"* nonnull %4, i32** dereferenceable(8) %457)
  %458 = load i32**, i32*** %167, align 8
  %459 = icmp eq i32** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN11CFX_XMLNode4TypeENS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer.51"*, i32** dereferenceable(8)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.51", %"struct.std::__1::__split_buffer.51"* %0, i64 0, i32 2
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.51", %"struct.std::__1::__split_buffer.51"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  %9 = bitcast i32** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer.51", %"struct.std::__1::__split_buffer.51"* %0, i64 0, i32 1
  %12 = load i32**, i32*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer.51", %"struct.std::__1::__split_buffer.51"* %0, i64 0, i32 0
  %14 = load i32**, i32*** %13, align 8
  %15 = icmp ugt i32** %12, %14
  %16 = ptrtoint i32** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint i32** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds i32*, i32** %12, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast i32** %23 to i8*
  %30 = bitcast i32** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #14
  %31 = load i32**, i32*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi i32** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds i32*, i32** %23, i64 %26
  store i32** %34, i32*** %3, align 8
  %35 = getelementptr inbounds i32*, i32** %33, i64 %22
  store i32** %35, i32*** %11, align 8
  %36 = bitcast i32** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast i32*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer.51"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #15
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #13
  %50 = bitcast i8* %49 to i32**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds i32*, i32** %50, i64 %47
  %53 = ptrtoint i32** %52 to i64
  %54 = getelementptr inbounds i32*, i32** %50, i64 %43
  %55 = ptrtoint i32** %54 to i64
  %56 = ptrtoint i32** %12 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds i32*, i32** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi i32** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi i32** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast i32** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds i32*, i32** %69, i64 1
  %77 = ptrtoint i32** %76 to i64
  %78 = getelementptr inbounds i32*, i32** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !282

81:                                               ; preds = %68
  %82 = ptrtoint i32** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi i32** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi i32** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi i32** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi i32** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast i32** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds i32*, i32** %89, i64 1
  %96 = getelementptr inbounds i32*, i32** %91, i64 1
  %97 = bitcast i32** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast i32** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds i32*, i32** %89, i64 2
  %101 = getelementptr inbounds i32*, i32** %91, i64 2
  %102 = bitcast i32** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast i32** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i32*, i32** %89, i64 3
  %106 = getelementptr inbounds i32*, i32** %91, i64 3
  %107 = bitcast i32** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i32** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i32*, i32** %89, i64 4
  %111 = getelementptr inbounds i32*, i32** %91, i64 4
  %112 = bitcast i32** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i32** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i32*, i32** %89, i64 5
  %116 = getelementptr inbounds i32*, i32** %91, i64 5
  %117 = bitcast i32** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i32** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i32*, i32** %89, i64 6
  %121 = getelementptr inbounds i32*, i32** %91, i64 6
  %122 = bitcast i32** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i32** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i32*, i32** %89, i64 7
  %126 = getelementptr inbounds i32*, i32** %91, i64 7
  %127 = bitcast i32** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i32** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i32*, i32** %89, i64 8
  %131 = ptrtoint i32** %130 to i64
  %132 = getelementptr inbounds i32*, i32** %91, i64 8
  %133 = icmp eq i32** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint i32** %60 to i64
  %136 = load i32**, i32*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi i32** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast i32*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq i32** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast i32** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #13
  %146 = bitcast i32*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load i32**, i32*** %3, align 8
  %153 = getelementptr inbounds i32*, i32** %152, i64 1
  store i32** %153, i32*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN11CFX_XMLNode4TypeENS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer.51"*, i32** dereferenceable(8)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.51", %"struct.std::__1::__split_buffer.51"* %0, i64 0, i32 1
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.51", %"struct.std::__1::__split_buffer.51"* %0, i64 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.51", %"struct.std::__1::__split_buffer.51"* %0, i64 0, i32 2
  %11 = load i32**, i32*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.51", %"struct.std::__1::__split_buffer.51"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i32**, i32*** %12, align 8
  %14 = icmp ult i32** %11, %13
  %15 = bitcast i32*** %12 to i64*
  %16 = ptrtoint i32** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i32** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i32*, i32** %11, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i32*, i32** %23, i64 %29
  %31 = bitcast i32** %30 to i8*
  %32 = bitcast i32** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #14
  %33 = load i32**, i32*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i32** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i32** [ %30, %27 ], [ %23, %17 ]
  store i32** %36, i32*** %3, align 8
  %37 = getelementptr inbounds i32*, i32** %35, i64 %22
  store i32** %37, i32*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.51"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #15
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #13
  %51 = bitcast i8* %50 to i32**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i32*, i32** %51, i64 %48
  %54 = ptrtoint i32** %53 to i64
  %55 = getelementptr inbounds i32*, i32** %51, i64 %43
  %56 = ptrtoint i32** %55 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = ptrtoint i32** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i32*, i32** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i32** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i32** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i32** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i32*, i32** %70, i64 1
  %78 = ptrtoint i32** %77 to i64
  %79 = getelementptr inbounds i32*, i32** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !283

82:                                               ; preds = %69
  %83 = ptrtoint i32** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i32** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i32** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i32** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i32** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i32** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i32*, i32** %90, i64 1
  %97 = getelementptr inbounds i32*, i32** %92, i64 1
  %98 = bitcast i32** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i32** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i32*, i32** %90, i64 2
  %102 = getelementptr inbounds i32*, i32** %92, i64 2
  %103 = bitcast i32** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i32** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i32*, i32** %90, i64 3
  %107 = getelementptr inbounds i32*, i32** %92, i64 3
  %108 = bitcast i32** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i32** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i32*, i32** %90, i64 4
  %112 = getelementptr inbounds i32*, i32** %92, i64 4
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i32** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i32*, i32** %90, i64 5
  %117 = getelementptr inbounds i32*, i32** %92, i64 5
  %118 = bitcast i32** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i32** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i32*, i32** %90, i64 6
  %122 = getelementptr inbounds i32*, i32** %92, i64 6
  %123 = bitcast i32** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i32** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i32*, i32** %90, i64 7
  %127 = getelementptr inbounds i32*, i32** %92, i64 7
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i32** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i32*, i32** %90, i64 8
  %132 = ptrtoint i32** %131 to i64
  %133 = getelementptr inbounds i32*, i32** %92, i64 8
  %134 = icmp eq i32** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i32** %61 to i64
  %137 = load i32**, i32*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i32** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i32*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i32** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i32** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #13
  %146 = load i32**, i32*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i32** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i32*, i32** %148, i64 -1
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i32** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i32**, i32*** %3, align 8
  %154 = getelementptr inbounds i32*, i32** %153, i64 -1
  store i32** %154, i32*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN11CFX_XMLNode4TypeERNS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer.112"*, i32** dereferenceable(8)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.112", %"struct.std::__1::__split_buffer.112"* %0, i64 0, i32 1
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.112", %"struct.std::__1::__split_buffer.112"* %0, i64 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.112", %"struct.std::__1::__split_buffer.112"* %0, i64 0, i32 2
  %11 = load i32**, i32*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.112", %"struct.std::__1::__split_buffer.112"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i32**, i32*** %12, align 8
  %14 = icmp ult i32** %11, %13
  %15 = bitcast i32*** %12 to i64*
  %16 = ptrtoint i32** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i32** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i32*, i32** %11, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i32*, i32** %23, i64 %29
  %31 = bitcast i32** %30 to i8*
  %32 = bitcast i32** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #14
  %33 = load i32**, i32*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i32** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i32** [ %30, %27 ], [ %23, %17 ]
  store i32** %36, i32*** %3, align 8
  %37 = getelementptr inbounds i32*, i32** %35, i64 %22
  store i32** %37, i32*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.112"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #15
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #13
  %51 = bitcast i8* %50 to i32**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i32*, i32** %51, i64 %48
  %54 = ptrtoint i32** %53 to i64
  %55 = getelementptr inbounds i32*, i32** %51, i64 %43
  %56 = ptrtoint i32** %55 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = ptrtoint i32** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i32*, i32** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i32** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i32** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i32** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i32*, i32** %70, i64 1
  %78 = ptrtoint i32** %77 to i64
  %79 = getelementptr inbounds i32*, i32** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !284

82:                                               ; preds = %69
  %83 = ptrtoint i32** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i32** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i32** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i32** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i32** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i32** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i32*, i32** %90, i64 1
  %97 = getelementptr inbounds i32*, i32** %92, i64 1
  %98 = bitcast i32** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i32** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i32*, i32** %90, i64 2
  %102 = getelementptr inbounds i32*, i32** %92, i64 2
  %103 = bitcast i32** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i32** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i32*, i32** %90, i64 3
  %107 = getelementptr inbounds i32*, i32** %92, i64 3
  %108 = bitcast i32** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i32** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i32*, i32** %90, i64 4
  %112 = getelementptr inbounds i32*, i32** %92, i64 4
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i32** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i32*, i32** %90, i64 5
  %117 = getelementptr inbounds i32*, i32** %92, i64 5
  %118 = bitcast i32** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i32** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i32*, i32** %90, i64 6
  %122 = getelementptr inbounds i32*, i32** %92, i64 6
  %123 = bitcast i32** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i32** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i32*, i32** %90, i64 7
  %127 = getelementptr inbounds i32*, i32** %92, i64 7
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i32** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i32*, i32** %90, i64 8
  %132 = ptrtoint i32** %131 to i64
  %133 = getelementptr inbounds i32*, i32** %92, i64 8
  %134 = icmp eq i32** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i32** %61 to i64
  %137 = load i32**, i32*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i32** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i32*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i32** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i32** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #13
  %146 = load i32**, i32*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i32** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i32*, i32** %148, i64 -1
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i32** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i32**, i32*** %3, align 8
  %154 = getelementptr inbounds i32*, i32** %153, i64 -1
  store i32** %154, i32*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN18CFX_XMLInstructionC1ERKN5fxcrt10WideStringE(%class.CFX_XMLInstruction*, %"class.fxcrt::WideString"* dereferenceable(8)) unnamed_addr #3

declare void @_ZN14CFX_XMLElementC1ERKN5fxcrt10WideStringE(%class.CFX_XMLElement*, %"class.fxcrt::WideString"* dereferenceable(8)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIwNS_9allocatorIwEEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #2 comdat align 2 {
  %2 = alloca i32*, align 8
  %3 = alloca i32*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.135", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 1023
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -1024
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32**, i32*** %10, align 8
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i32*, i32** %11, i64 1
  store i32** %14, i32*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load i32**, i32*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load i32**, i32*** %17, align 8
  %19 = icmp eq i32** %16, %18
  %20 = ptrtoint i32** %18 to i64
  %21 = bitcast i32** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i32**, i32*** %23, align 8
  %25 = icmp ugt i32** %14, %24
  %26 = ptrtoint i32** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint i32** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds i32*, i32** %14, i64 %32
  %34 = ptrtoint i32** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast i32** %33 to i8*
  %40 = bitcast i32** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #14
  %41 = load i32**, i32*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi i32** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds i32*, i32** %33, i64 %36
  store i32** %44, i32*** %15, align 8
  %45 = getelementptr inbounds i32*, i32** %43, i64 %32
  store i32** %45, i32*** %10, align 8
  %46 = bitcast i32** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast i32*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #15
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #13
  %60 = bitcast i8* %59 to i32**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds i32*, i32** %60, i64 %57
  %63 = ptrtoint i32** %62 to i64
  %64 = getelementptr inbounds i32*, i32** %60, i64 %53
  %65 = ptrtoint i32** %64 to i64
  %66 = ptrtoint i32** %14 to i64
  %67 = ptrtoint i32** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds i32*, i32** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi i32** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi i32** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast i32** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds i32*, i32** %79, i64 1
  %87 = ptrtoint i32** %86 to i64
  %88 = getelementptr inbounds i32*, i32** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !285

91:                                               ; preds = %78
  %92 = ptrtoint i32** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi i32** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi i32** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi i32** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi i32** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast i32** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i32*, i32** %99, i64 1
  %106 = getelementptr inbounds i32*, i32** %101, i64 1
  %107 = bitcast i32** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i32** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i32*, i32** %99, i64 2
  %111 = getelementptr inbounds i32*, i32** %101, i64 2
  %112 = bitcast i32** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i32** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i32*, i32** %99, i64 3
  %116 = getelementptr inbounds i32*, i32** %101, i64 3
  %117 = bitcast i32** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i32** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i32*, i32** %99, i64 4
  %121 = getelementptr inbounds i32*, i32** %101, i64 4
  %122 = bitcast i32** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i32** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i32*, i32** %99, i64 5
  %126 = getelementptr inbounds i32*, i32** %101, i64 5
  %127 = bitcast i32** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i32** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i32*, i32** %99, i64 6
  %131 = getelementptr inbounds i32*, i32** %101, i64 6
  %132 = bitcast i32** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast i32** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds i32*, i32** %99, i64 7
  %136 = getelementptr inbounds i32*, i32** %101, i64 7
  %137 = bitcast i32** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast i32** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds i32*, i32** %99, i64 8
  %141 = ptrtoint i32** %140 to i64
  %142 = getelementptr inbounds i32*, i32** %101, i64 8
  %143 = icmp eq i32** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint i32** %70 to i64
  %146 = load i32**, i32*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi i32** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast i32*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast i32*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq i32** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast i32** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #13
  %156 = bitcast i32*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load i32**, i32*** %15, align 8
  %161 = getelementptr inbounds i32*, i32** %160, i64 1
  store i32** %161, i32*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast i32*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast i32*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast i32*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to i32**
  %181 = inttoptr i64 %169 to i32**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast i32** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #14
  %186 = tail call i8* @_Znwm(i64 4096) #13
  %187 = bitcast i32** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPwNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"* %163, i32** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #14
  br label %460

188:                                              ; preds = %182
  %189 = bitcast i32** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #14
  %190 = tail call i8* @_Znwm(i64 4096) #13
  %191 = bitcast i32** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPwNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"* %163, i32** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #14
  %192 = load i32**, i32*** %167, align 8
  %193 = bitcast i32** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds i32*, i32** %192, i64 1
  store i32** %195, i32*** %167, align 8
  %196 = load i32**, i32*** %164, align 8
  %197 = load i32**, i32*** %172, align 8
  %198 = icmp eq i32** %196, %197
  %199 = ptrtoint i32** %197 to i64
  %200 = bitcast i32** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load i32**, i32*** %202, align 8
  %204 = icmp ugt i32** %195, %203
  %205 = ptrtoint i32** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint i32** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds i32*, i32** %195, i64 %211
  %213 = ptrtoint i32** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast i32** %212 to i8*
  %219 = bitcast i32** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #14
  %220 = load i32**, i32*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi i32** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds i32*, i32** %212, i64 %215
  store i32** %223, i32*** %164, align 8
  %224 = getelementptr inbounds i32*, i32** %222, i64 %211
  store i32** %224, i32*** %167, align 8
  %225 = bitcast i32** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #15
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #13
  %237 = bitcast i8* %236 to i32**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds i32*, i32** %237, i64 %234
  %240 = ptrtoint i32** %239 to i64
  %241 = getelementptr inbounds i32*, i32** %237, i64 %230
  %242 = ptrtoint i32** %241 to i64
  %243 = ptrtoint i32** %195 to i64
  %244 = ptrtoint i32** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds i32*, i32** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi i32** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi i32** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast i32** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds i32*, i32** %256, i64 1
  %264 = ptrtoint i32** %263 to i64
  %265 = getelementptr inbounds i32*, i32** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !286

268:                                              ; preds = %255
  %269 = ptrtoint i32** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi i32** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi i32** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi i32** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi i32** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast i32** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds i32*, i32** %276, i64 1
  %283 = getelementptr inbounds i32*, i32** %278, i64 1
  %284 = bitcast i32** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast i32** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds i32*, i32** %276, i64 2
  %288 = getelementptr inbounds i32*, i32** %278, i64 2
  %289 = bitcast i32** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast i32** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds i32*, i32** %276, i64 3
  %293 = getelementptr inbounds i32*, i32** %278, i64 3
  %294 = bitcast i32** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast i32** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds i32*, i32** %276, i64 4
  %298 = getelementptr inbounds i32*, i32** %278, i64 4
  %299 = bitcast i32** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast i32** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds i32*, i32** %276, i64 5
  %303 = getelementptr inbounds i32*, i32** %278, i64 5
  %304 = bitcast i32** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast i32** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds i32*, i32** %276, i64 6
  %308 = getelementptr inbounds i32*, i32** %278, i64 6
  %309 = bitcast i32** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast i32** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds i32*, i32** %276, i64 7
  %313 = getelementptr inbounds i32*, i32** %278, i64 7
  %314 = bitcast i32** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast i32** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds i32*, i32** %276, i64 8
  %318 = ptrtoint i32** %317 to i64
  %319 = getelementptr inbounds i32*, i32** %278, i64 8
  %320 = icmp eq i32** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint i32** %247 to i64
  %323 = load i32**, i32*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi i32** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq i32** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast i32** %325 to i8*
  call void @_ZdlPv(i8* %330) #13
  %331 = bitcast i32*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load i32**, i32*** %164, align 8
  %336 = getelementptr inbounds i32*, i32** %335, i64 1
  store i32** %336, i32*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.135"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #14
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.135", %"struct.std::__1::__split_buffer.135"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.135", %"struct.std::__1::__split_buffer.135"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.135", %"struct.std::__1::__split_buffer.135"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.135", %"struct.std::__1::__split_buffer.135"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.135"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store i32** null, i32*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator.42"** %342 to %"class.std::__1::__compressed_pair.39"**
  store %"class.std::__1::__compressed_pair.39"* %346, %"class.std::__1::__compressed_pair.39"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #15
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #13
  %354 = bitcast i8* %353 to i32**
  %355 = bitcast %"struct.std::__1::__split_buffer.135"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds i32*, i32** %354, i64 %171
  store i32** %356, i32*** %340, align 8
  store i32** %356, i32*** %339, align 8
  %357 = getelementptr inbounds i32*, i32** %354, i64 %345
  store i32** %357, i32*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #13
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint i32** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint i32** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt i32** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds i32*, i32** %356, i64 %370
  store i32** %371, i32*** %340, align 8
  store i32** %371, i32*** %339, align 8
  %372 = ptrtoint i32** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #15
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.135"* %4 to i64*
  %382 = bitcast i32*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #13
  %386 = bitcast i8* %385 to i32**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds i32*, i32** %386, i64 %383
  %389 = ptrtoint i32** %388 to i64
  %390 = getelementptr inbounds i32*, i32** %386, i64 %377
  %391 = ptrtoint i32** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast i32*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast i32*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #13
  %394 = load i32**, i32*** %164, align 8
  %395 = load i32**, i32*** %167, align 8
  %396 = ptrtoint i32** %395 to i64
  %397 = ptrtoint i32** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi i32** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi i32** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi i32** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast i32** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds i32*, i32** %406, i64 1
  store i32** %408, i32*** %340, align 8
  %409 = icmp eq i32** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint i32** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.135"* %4 to i64*
  %413 = bitcast i32*** %339 to i64*
  %414 = bitcast i32*** %340 to i64*
  %415 = bitcast i32*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint i32** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.135"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast i32*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast i32*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast i32*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to i32**
  %441 = inttoptr i64 %434 to i32**
  %442 = icmp eq i32** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr i32*, i32** %441, i64 -1
  %445 = ptrtoint i32** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr i32*, i32** %441, i64 %448
  store i32** %449, i32*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #13
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #14
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi i32** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds i32*, i32** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPwRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.135"* nonnull %4, i32** dereferenceable(8) %457)
  %458 = load i32**, i32*** %167, align 8
  %459 = icmp eq i32** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPwNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"*, i32** dereferenceable(8)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  %9 = bitcast i32** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load i32**, i32*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load i32**, i32*** %13, align 8
  %15 = icmp ugt i32** %12, %14
  %16 = ptrtoint i32** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint i32** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds i32*, i32** %12, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast i32** %23 to i8*
  %30 = bitcast i32** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #14
  %31 = load i32**, i32*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi i32** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds i32*, i32** %23, i64 %26
  store i32** %34, i32*** %3, align 8
  %35 = getelementptr inbounds i32*, i32** %33, i64 %22
  store i32** %35, i32*** %11, align 8
  %36 = bitcast i32** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast i32*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #15
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #13
  %50 = bitcast i8* %49 to i32**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds i32*, i32** %50, i64 %47
  %53 = ptrtoint i32** %52 to i64
  %54 = getelementptr inbounds i32*, i32** %50, i64 %43
  %55 = ptrtoint i32** %54 to i64
  %56 = ptrtoint i32** %12 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds i32*, i32** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi i32** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi i32** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast i32** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds i32*, i32** %69, i64 1
  %77 = ptrtoint i32** %76 to i64
  %78 = getelementptr inbounds i32*, i32** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !287

81:                                               ; preds = %68
  %82 = ptrtoint i32** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi i32** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi i32** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi i32** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi i32** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast i32** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds i32*, i32** %89, i64 1
  %96 = getelementptr inbounds i32*, i32** %91, i64 1
  %97 = bitcast i32** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast i32** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds i32*, i32** %89, i64 2
  %101 = getelementptr inbounds i32*, i32** %91, i64 2
  %102 = bitcast i32** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast i32** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i32*, i32** %89, i64 3
  %106 = getelementptr inbounds i32*, i32** %91, i64 3
  %107 = bitcast i32** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i32** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i32*, i32** %89, i64 4
  %111 = getelementptr inbounds i32*, i32** %91, i64 4
  %112 = bitcast i32** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i32** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i32*, i32** %89, i64 5
  %116 = getelementptr inbounds i32*, i32** %91, i64 5
  %117 = bitcast i32** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i32** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i32*, i32** %89, i64 6
  %121 = getelementptr inbounds i32*, i32** %91, i64 6
  %122 = bitcast i32** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i32** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i32*, i32** %89, i64 7
  %126 = getelementptr inbounds i32*, i32** %91, i64 7
  %127 = bitcast i32** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i32** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i32*, i32** %89, i64 8
  %131 = ptrtoint i32** %130 to i64
  %132 = getelementptr inbounds i32*, i32** %91, i64 8
  %133 = icmp eq i32** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint i32** %60 to i64
  %136 = load i32**, i32*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi i32** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast i32*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq i32** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast i32** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #13
  %146 = bitcast i32*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load i32**, i32*** %3, align 8
  %153 = getelementptr inbounds i32*, i32** %152, i64 1
  store i32** %153, i32*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPwNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"*, i32** dereferenceable(8)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load i32**, i32*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i32**, i32*** %12, align 8
  %14 = icmp ult i32** %11, %13
  %15 = bitcast i32*** %12 to i64*
  %16 = ptrtoint i32** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i32** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i32*, i32** %11, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i32*, i32** %23, i64 %29
  %31 = bitcast i32** %30 to i8*
  %32 = bitcast i32** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #14
  %33 = load i32**, i32*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i32** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i32** [ %30, %27 ], [ %23, %17 ]
  store i32** %36, i32*** %3, align 8
  %37 = getelementptr inbounds i32*, i32** %35, i64 %22
  store i32** %37, i32*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #15
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #13
  %51 = bitcast i8* %50 to i32**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i32*, i32** %51, i64 %48
  %54 = ptrtoint i32** %53 to i64
  %55 = getelementptr inbounds i32*, i32** %51, i64 %43
  %56 = ptrtoint i32** %55 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = ptrtoint i32** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i32*, i32** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i32** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i32** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i32** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i32*, i32** %70, i64 1
  %78 = ptrtoint i32** %77 to i64
  %79 = getelementptr inbounds i32*, i32** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !288

82:                                               ; preds = %69
  %83 = ptrtoint i32** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i32** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i32** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i32** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i32** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i32** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i32*, i32** %90, i64 1
  %97 = getelementptr inbounds i32*, i32** %92, i64 1
  %98 = bitcast i32** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i32** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i32*, i32** %90, i64 2
  %102 = getelementptr inbounds i32*, i32** %92, i64 2
  %103 = bitcast i32** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i32** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i32*, i32** %90, i64 3
  %107 = getelementptr inbounds i32*, i32** %92, i64 3
  %108 = bitcast i32** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i32** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i32*, i32** %90, i64 4
  %112 = getelementptr inbounds i32*, i32** %92, i64 4
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i32** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i32*, i32** %90, i64 5
  %117 = getelementptr inbounds i32*, i32** %92, i64 5
  %118 = bitcast i32** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i32** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i32*, i32** %90, i64 6
  %122 = getelementptr inbounds i32*, i32** %92, i64 6
  %123 = bitcast i32** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i32** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i32*, i32** %90, i64 7
  %127 = getelementptr inbounds i32*, i32** %92, i64 7
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i32** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i32*, i32** %90, i64 8
  %132 = ptrtoint i32** %131 to i64
  %133 = getelementptr inbounds i32*, i32** %92, i64 8
  %134 = icmp eq i32** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i32** %61 to i64
  %137 = load i32**, i32*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i32** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i32*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i32** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i32** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #13
  %146 = load i32**, i32*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i32** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i32*, i32** %148, i64 -1
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i32** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i32**, i32*** %3, align 8
  %154 = getelementptr inbounds i32*, i32** %153, i64 -1
  store i32** %154, i32*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPwRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.135"*, i32** dereferenceable(8)) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.135", %"struct.std::__1::__split_buffer.135"* %0, i64 0, i32 1
  %4 = load i32**, i32*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.135", %"struct.std::__1::__split_buffer.135"* %0, i64 0, i32 0
  %6 = load i32**, i32*** %5, align 8
  %7 = icmp eq i32** %4, %6
  %8 = ptrtoint i32** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.135", %"struct.std::__1::__split_buffer.135"* %0, i64 0, i32 2
  %11 = load i32**, i32*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.135", %"struct.std::__1::__split_buffer.135"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i32**, i32*** %12, align 8
  %14 = icmp ult i32** %11, %13
  %15 = bitcast i32*** %12 to i64*
  %16 = ptrtoint i32** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i32** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i32*, i32** %11, i64 %22
  %24 = ptrtoint i32** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i32*, i32** %23, i64 %29
  %31 = bitcast i32** %30 to i8*
  %32 = bitcast i32** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #14
  %33 = load i32**, i32*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i32** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i32** [ %30, %27 ], [ %23, %17 ]
  store i32** %36, i32*** %3, align 8
  %37 = getelementptr inbounds i32*, i32** %35, i64 %22
  store i32** %37, i32*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.135"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #15
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #13
  %51 = bitcast i8* %50 to i32**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i32*, i32** %51, i64 %48
  %54 = ptrtoint i32** %53 to i64
  %55 = getelementptr inbounds i32*, i32** %51, i64 %43
  %56 = ptrtoint i32** %55 to i64
  %57 = ptrtoint i32** %4 to i64
  %58 = ptrtoint i32** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i32*, i32** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i32** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i32** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i32** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i32*, i32** %70, i64 1
  %78 = ptrtoint i32** %77 to i64
  %79 = getelementptr inbounds i32*, i32** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !289

82:                                               ; preds = %69
  %83 = ptrtoint i32** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i32** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i32** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i32** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i32** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i32** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i32*, i32** %90, i64 1
  %97 = getelementptr inbounds i32*, i32** %92, i64 1
  %98 = bitcast i32** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i32** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i32*, i32** %90, i64 2
  %102 = getelementptr inbounds i32*, i32** %92, i64 2
  %103 = bitcast i32** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i32** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i32*, i32** %90, i64 3
  %107 = getelementptr inbounds i32*, i32** %92, i64 3
  %108 = bitcast i32** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i32** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i32*, i32** %90, i64 4
  %112 = getelementptr inbounds i32*, i32** %92, i64 4
  %113 = bitcast i32** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i32** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i32*, i32** %90, i64 5
  %117 = getelementptr inbounds i32*, i32** %92, i64 5
  %118 = bitcast i32** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i32** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i32*, i32** %90, i64 6
  %122 = getelementptr inbounds i32*, i32** %92, i64 6
  %123 = bitcast i32** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i32** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i32*, i32** %90, i64 7
  %127 = getelementptr inbounds i32*, i32** %92, i64 7
  %128 = bitcast i32** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i32** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i32*, i32** %90, i64 8
  %132 = ptrtoint i32** %131 to i64
  %133 = getelementptr inbounds i32*, i32** %92, i64 8
  %134 = icmp eq i32** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i32** %61 to i64
  %137 = load i32**, i32*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i32** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i32*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i32*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i32** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i32** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #13
  %146 = load i32**, i32*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i32** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i32*, i32** %148, i64 -1
  %150 = bitcast i32** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i32** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i32**, i32*** %3, align 8
  %154 = getelementptr inbounds i32*, i32** %153, i64 -1
  store i32** %154, i32*** %3, align 8
  ret void
}

declare void @_ZN15CFX_XMLCharDataC1ERKN5fxcrt10WideStringE(%class.CFX_XMLCharData*, %"class.fxcrt::WideString"* dereferenceable(8)) unnamed_addr #3

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { builtin nounwind }
attributes #14 = { nounwind }
attributes #15 = { noreturn nounwind }
attributes #16 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN6pdfium10MakeRetainI23CFX_SeekableStreamProxyJRKN5fxcrt9RetainPtrI22IFX_SeekableReadStreamEEEEENS3_IT_EEDpOT0_: argument 0"}
!5 = distinct !{!5, !"_ZN6pdfium10MakeRetainI23CFX_SeekableStreamProxyJRKN5fxcrt9RetainPtrI22IFX_SeekableReadStreamEEEEENS3_IT_EEDpOT0_"}
!6 = !{!"branch_weights", i32 2000, i32 1}
!7 = !{!8}
!8 = distinct !{!8, !9}
!9 = distinct !{!9, !"LVerDomain"}
!10 = !{!11}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !13}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN13CFX_XMLParser11GetTextDataEv: argument 0"}
!19 = distinct !{!19, !"_ZN13CFX_XMLParser11GetTextDataEv"}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !13}
!26 = distinct !{!26, !15}
!27 = distinct !{!27, !13}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN13CFX_XMLParser11GetTextDataEv: argument 0"}
!30 = distinct !{!30, !"_ZN13CFX_XMLParser11GetTextDataEv"}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !13}
!37 = distinct !{!37, !15}
!38 = distinct !{!38, !13}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZNK5fxcrt10WideString12AsStringViewEv: argument 0"}
!41 = distinct !{!41, !"_ZNK5fxcrt10WideString12AsStringViewEv"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZNK5fxcrt10WideString12AsStringViewEv: argument 0"}
!44 = distinct !{!44, !"_ZNK5fxcrt10WideString12AsStringViewEv"}
!45 = !{!46}
!46 = distinct !{!46, !47}
!47 = distinct !{!47, !"LVerDomain"}
!48 = !{!49}
!49 = distinct !{!49, !47}
!50 = distinct !{!50, !13}
!51 = distinct !{!51, !15}
!52 = distinct !{!52, !13}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZN13CFX_XMLParser11GetTextDataEv: argument 0"}
!55 = distinct !{!55, !"_ZN13CFX_XMLParser11GetTextDataEv"}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !13}
!62 = distinct !{!62, !15}
!63 = distinct !{!63, !13}
!64 = !{!65}
!65 = distinct !{!65, !66}
!66 = distinct !{!66, !"LVerDomain"}
!67 = !{!68}
!68 = distinct !{!68, !66}
!69 = distinct !{!69, !13}
!70 = distinct !{!70, !15}
!71 = distinct !{!71, !13}
!72 = !{!73}
!73 = distinct !{!73, !74, !"_ZN13CFX_XMLParser11GetTextDataEv: argument 0"}
!74 = distinct !{!74, !"_ZN13CFX_XMLParser11GetTextDataEv"}
!75 = !{!76}
!76 = distinct !{!76, !77}
!77 = distinct !{!77, !"LVerDomain"}
!78 = !{!79}
!79 = distinct !{!79, !77}
!80 = distinct !{!80, !13}
!81 = distinct !{!81, !15}
!82 = distinct !{!82, !13}
!83 = !{!84}
!84 = distinct !{!84, !85}
!85 = distinct !{!85, !"LVerDomain"}
!86 = !{!87}
!87 = distinct !{!87, !85}
!88 = distinct !{!88, !13}
!89 = distinct !{!89, !15}
!90 = distinct !{!90, !13}
!91 = !{!92}
!92 = distinct !{!92, !93, !"_ZN13CFX_XMLParser11GetTextDataEv: argument 0"}
!93 = distinct !{!93, !"_ZN13CFX_XMLParser11GetTextDataEv"}
!94 = !{!95}
!95 = distinct !{!95, !96}
!96 = distinct !{!96, !"LVerDomain"}
!97 = !{!98}
!98 = distinct !{!98, !96}
!99 = distinct !{!99, !13}
!100 = distinct !{!100, !15}
!101 = distinct !{!101, !13}
!102 = !{!103}
!103 = distinct !{!103, !104}
!104 = distinct !{!104, !"LVerDomain"}
!105 = !{!106}
!106 = distinct !{!106, !104}
!107 = distinct !{!107, !13}
!108 = distinct !{!108, !15}
!109 = distinct !{!109, !13}
!110 = !{!111}
!111 = distinct !{!111, !112, !"_ZN13CFX_XMLParser11GetTextDataEv: argument 0"}
!112 = distinct !{!112, !"_ZN13CFX_XMLParser11GetTextDataEv"}
!113 = !{!114}
!114 = distinct !{!114, !115}
!115 = distinct !{!115, !"LVerDomain"}
!116 = !{!117}
!117 = distinct !{!117, !115}
!118 = distinct !{!118, !13}
!119 = distinct !{!119, !15}
!120 = distinct !{!120, !13}
!121 = !{!122}
!122 = distinct !{!122, !123}
!123 = distinct !{!123, !"LVerDomain"}
!124 = !{!125}
!125 = distinct !{!125, !123}
!126 = distinct !{!126, !13}
!127 = distinct !{!127, !15}
!128 = distinct !{!128, !13}
!129 = !{!130}
!130 = distinct !{!130, !131, !"_ZN6pdfium9make_spanINSt3__16vectorIw16FxAllocAllocatorIwEEEwvEENS_4spanIT0_EERT_: argument 0"}
!131 = distinct !{!131, !"_ZN6pdfium9make_spanINSt3__16vectorIw16FxAllocAllocatorIwEEEwvEENS_4spanIT0_EERT_"}
!132 = !{!"branch_weights", i32 1, i32 2000}
!133 = !{!134}
!134 = distinct !{!134, !135, !"_ZNK6pdfium4spanIwE7subspanEmm: argument 0"}
!135 = distinct !{!135, !"_ZNK6pdfium4spanIwE7subspanEmm"}
!136 = !{i32 -2143825919}
!137 = !{i32 -2143825898}
!138 = !{!139}
!139 = distinct !{!139, !140, !"_ZN6pdfium9make_spanINSt3__16vectorIw16FxAllocAllocatorIwEEEwvEENS_4spanIT0_EERT_: argument 0"}
!140 = distinct !{!140, !"_ZN6pdfium9make_spanINSt3__16vectorIw16FxAllocAllocatorIwEEEwvEENS_4spanIT0_EERT_"}
!141 = !{!142}
!142 = distinct !{!142, !143, !"_ZNK6pdfium4spanIwE7subspanEmm: argument 0"}
!143 = distinct !{!143, !"_ZNK6pdfium4spanIwE7subspanEmm"}
!144 = !{!145}
!145 = distinct !{!145, !146, !"_ZN13CFX_XMLParser11GetTextDataEv: argument 0"}
!146 = distinct !{!146, !"_ZN13CFX_XMLParser11GetTextDataEv"}
!147 = !{!148}
!148 = distinct !{!148, !149}
!149 = distinct !{!149, !"LVerDomain"}
!150 = !{!151}
!151 = distinct !{!151, !149}
!152 = distinct !{!152, !13}
!153 = distinct !{!153, !15}
!154 = distinct !{!154, !13}
!155 = !{!156}
!156 = distinct !{!156, !157}
!157 = distinct !{!157, !"LVerDomain"}
!158 = !{!159}
!159 = distinct !{!159, !157}
!160 = distinct !{!160, !13}
!161 = distinct !{!161, !15}
!162 = distinct !{!162, !13}
!163 = !{!164}
!164 = distinct !{!164, !165, !"_ZN6pdfium9make_spanINSt3__16vectorIw16FxAllocAllocatorIwEEEwvEENS_4spanIT0_EERT_: argument 0"}
!165 = distinct !{!165, !"_ZN6pdfium9make_spanINSt3__16vectorIw16FxAllocAllocatorIwEEEwvEENS_4spanIT0_EERT_"}
!166 = !{!167}
!167 = distinct !{!167, !168, !"_ZNK6pdfium4spanIwE7subspanEmm: argument 0"}
!168 = distinct !{!168, !"_ZNK6pdfium4spanIwE7subspanEmm"}
!169 = !{!170}
!170 = distinct !{!170, !171}
!171 = distinct !{!171, !"LVerDomain"}
!172 = !{!173}
!173 = distinct !{!173, !171}
!174 = distinct !{!174, !13}
!175 = distinct !{!175, !15}
!176 = distinct !{!176, !13}
!177 = !{i32 -2141886563}
!178 = !{i32 -2141886542}
!179 = !{!"branch_weights", i32 1073205, i32 2146410443}
!180 = !{i32 -2141888216}
!181 = !{i32 -2141888195}
!182 = !{i32 -2141887659}
!183 = !{i32 -2141887638}
!184 = !{i32 -2141887102}
!185 = !{i32 -2141887081}
!186 = !{i32 -2141886006}
!187 = !{i32 -2141885985}
!188 = !{i32 -2141885449}
!189 = !{i32 -2141885428}
!190 = !{i32 -2141891500}
!191 = !{i32 -2141891479}
!192 = !{i32 -2141890959}
!193 = !{i32 -2141890938}
!194 = !{!195}
!195 = distinct !{!195, !196}
!196 = distinct !{!196, !"LVerDomain"}
!197 = !{!198}
!198 = distinct !{!198, !196}
!199 = distinct !{!199, !13}
!200 = distinct !{!200, !15}
!201 = distinct !{!201, !13}
!202 = !{!203}
!203 = distinct !{!203, !204}
!204 = distinct !{!204, !"LVerDomain"}
!205 = !{!206}
!206 = distinct !{!206, !204}
!207 = distinct !{!207, !13}
!208 = distinct !{!208, !15}
!209 = distinct !{!209, !13}
!210 = !{i32 -2143811306}
!211 = !{i32 -2143811285}
!212 = !{!213}
!213 = distinct !{!213, !214}
!214 = distinct !{!214, !"LVerDomain"}
!215 = !{!216}
!216 = distinct !{!216, !214}
!217 = distinct !{!217, !13}
!218 = distinct !{!218, !15}
!219 = distinct !{!219, !13}
!220 = !{!221}
!221 = distinct !{!221, !222}
!222 = distinct !{!222, !"LVerDomain"}
!223 = !{!224}
!224 = distinct !{!224, !222}
!225 = distinct !{!225, !13}
!226 = distinct !{!226, !15}
!227 = distinct !{!227, !13}
!228 = !{!229}
!229 = distinct !{!229, !230}
!230 = distinct !{!230, !"LVerDomain"}
!231 = !{!232}
!232 = distinct !{!232, !230}
!233 = distinct !{!233, !13}
!234 = distinct !{!234, !15}
!235 = distinct !{!235, !13}
!236 = !{!237}
!237 = distinct !{!237, !238}
!238 = distinct !{!238, !"LVerDomain"}
!239 = !{!240}
!240 = distinct !{!240, !238}
!241 = distinct !{!241, !13}
!242 = distinct !{!242, !15}
!243 = distinct !{!243, !13}
!244 = !{!245}
!245 = distinct !{!245, !246}
!246 = distinct !{!246, !"LVerDomain"}
!247 = !{!248}
!248 = distinct !{!248, !246}
!249 = distinct !{!249, !13}
!250 = distinct !{!250, !15}
!251 = distinct !{!251, !13}
!252 = !{!253}
!253 = distinct !{!253, !254}
!254 = distinct !{!254, !"LVerDomain"}
!255 = !{!256}
!256 = distinct !{!256, !254}
!257 = distinct !{!257, !13}
!258 = distinct !{!258, !15}
!259 = distinct !{!259, !13}
!260 = !{!261}
!261 = distinct !{!261, !262, !"_ZN13CFX_XMLParser11GetTextDataEv: argument 0"}
!262 = distinct !{!262, !"_ZN13CFX_XMLParser11GetTextDataEv"}
!263 = !{!264}
!264 = distinct !{!264, !265}
!265 = distinct !{!265, !"LVerDomain"}
!266 = !{!267}
!267 = distinct !{!267, !265}
!268 = distinct !{!268, !13}
!269 = distinct !{!269, !15}
!270 = distinct !{!270, !13}
!271 = !{!272}
!272 = distinct !{!272, !273}
!273 = distinct !{!273, !"LVerDomain"}
!274 = !{!275}
!275 = distinct !{!275, !273}
!276 = distinct !{!276, !13}
!277 = distinct !{!277, !15}
!278 = distinct !{!278, !13}
!279 = distinct !{!279, !15}
!280 = distinct !{!280, !15}
!281 = distinct !{!281, !15}
!282 = distinct !{!282, !15}
!283 = distinct !{!283, !15}
!284 = distinct !{!284, !15}
!285 = distinct !{!285, !15}
!286 = distinct !{!286, !15}
!287 = distinct !{!287, !15}
!288 = distinct !{!288, !15}
!289 = distinct !{!289, !15}
