; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/aom_subpixel_8t_intrin_ssse3.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/aom_subpixel_8t_intrin_ssse3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_filter_block1d4_h8_intrin_ssse3(i8* nocapture readonly, i64, i8* nocapture, i64, i32, i16* nocapture readonly) local_unnamed_addr #0 {
  %7 = bitcast i16* %5 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  %9 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %8, <8 x i16> %8) #6
  %10 = bitcast <16 x i8> %9 to <8 x i16>
  %11 = icmp eq i32 %4, 0
  br i1 %11, label %53, label %12

12:                                               ; preds = %6
  %13 = shufflevector <8 x i16> %10, <8 x i16> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 undef, i32 undef, i32 undef, i32 7>
  %14 = shufflevector <8 x i16> %13, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 7, i32 7, i32 7, i32 7>
  %15 = shufflevector <8 x i16> %10, <8 x i16> undef, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 5, i32 undef, i32 undef>
  %16 = shufflevector <8 x i16> %15, <8 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 5, i32 5, i32 5, i32 5>
  %17 = bitcast <8 x i16> %16 to <16 x i8>
  %18 = bitcast <8 x i16> %14 to <16 x i8>
  br label %19

19:                                               ; preds = %19, %12
  %20 = phi i32 [ 0, %12 ], [ %51, %19 ]
  %21 = phi i8* [ %0, %12 ], [ %46, %19 ]
  %22 = phi i8* [ %2, %12 ], [ %50, %19 ]
  %23 = getelementptr inbounds i8, i8* %21, i64 -3
  %24 = bitcast i8* %23 to <16 x i8>*
  %25 = load <16 x i8>, <16 x i8>* %24, align 1
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6>
  %27 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %28 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %26, <16 x i8> %17) #6
  %29 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %27, <16 x i8> %18) #6
  %30 = bitcast <8 x i16> %28 to <16 x i8>
  %31 = shufflevector <16 x i8> %30, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %32 = bitcast <8 x i16> %29 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %34 = bitcast <16 x i8> %31 to <8 x i16>
  %35 = icmp sgt <8 x i16> %29, %34
  %36 = select <8 x i1> %35, <8 x i16> %34, <8 x i16> %29
  %37 = bitcast <16 x i8> %33 to <8 x i16>
  %38 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %28, <8 x i16> %37) #6
  %39 = icmp slt <8 x i16> %29, %34
  %40 = select <8 x i1> %39, <8 x i16> %34, <8 x i16> %29
  %41 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %38, <8 x i16> %36) #6
  %42 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %41, <8 x i16> %40) #6
  %43 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %42, <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>) #6
  %44 = ashr <8 x i16> %43, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %45 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %44, <8 x i16> undef) #6
  %46 = getelementptr inbounds i8, i8* %21, i64 %1
  %47 = bitcast <16 x i8> %45 to <4 x i32>
  %48 = extractelement <4 x i32> %47, i32 0
  %49 = bitcast i8* %22 to i32*
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds i8, i8* %22, i64 %3
  %51 = add nuw i32 %20, 1
  %52 = icmp eq i32 %51, %4
  br i1 %52, label %53, label %19

53:                                               ; preds = %19, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_filter_block1d8_h8_intrin_ssse3(i8* nocapture readonly, i64, i8* nocapture, i64, i32, i16* nocapture readonly) local_unnamed_addr #0 {
  %7 = bitcast i16* %5 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  %9 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %8, <8 x i16> %8) #6
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %11 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3>
  %12 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5>
  %13 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7>
  %14 = icmp eq i32 %4, 0
  br i1 %14, label %47, label %15

15:                                               ; preds = %6, %15
  %16 = phi i32 [ %45, %15 ], [ 0, %6 ]
  %17 = phi i8* [ %41, %15 ], [ %0, %6 ]
  %18 = phi i8* [ %44, %15 ], [ %2, %6 ]
  %19 = getelementptr inbounds i8, i8* %17, i64 -3
  %20 = bitcast i8* %19 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 1
  %22 = shufflevector <16 x i8> %21, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8>
  %23 = shufflevector <16 x i8> %21, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %24 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %22, <16 x i8> %10) #6
  %25 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %23, <16 x i8> %11) #6
  %26 = shufflevector <16 x i8> %21, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %27 = shufflevector <16 x i8> %21, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 14>
  %28 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %26, <16 x i8> %12) #6
  %29 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %27, <16 x i8> %13) #6
  %30 = icmp slt <8 x i16> %25, %28
  %31 = select <8 x i1> %30, <8 x i16> %25, <8 x i16> %28
  %32 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %24, <8 x i16> %29) #6
  %33 = icmp sgt <8 x i16> %25, %28
  %34 = select <8 x i1> %33, <8 x i16> %25, <8 x i16> %28
  %35 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %32, <8 x i16> %31) #6
  %36 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %35, <8 x i16> %34) #6
  %37 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %36, <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>) #6
  %38 = ashr <8 x i16> %37, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %38, <8 x i16> undef) #6
  %40 = bitcast <16 x i8> %39 to <2 x i64>
  %41 = getelementptr inbounds i8, i8* %17, i64 %1
  %42 = extractelement <2 x i64> %40, i32 0
  %43 = bitcast i8* %18 to i64*
  store i64 %42, i64* %43, align 1
  %44 = getelementptr inbounds i8, i8* %18, i64 %3
  %45 = add nuw i32 %16, 1
  %46 = icmp eq i32 %45, %4
  br i1 %46, label %47, label %15

47:                                               ; preds = %15, %6
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @aom_filter_block1d8_v8_intrin_ssse3(i8* nocapture readonly, i64, i8* nocapture, i64, i32, i16* nocapture readonly) local_unnamed_addr #0 {
  %7 = bitcast i16* %5 to <8 x i16>*
  %8 = load <8 x i16>, <8 x i16>* %7, align 1
  %9 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %8, <8 x i16> %8) #6
  %10 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %11 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3>
  %12 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5>
  %13 = shufflevector <16 x i8> %9, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7, i32 6, i32 7>
  %14 = icmp eq i32 %4, 0
  br i1 %14, label %97, label %15

15:                                               ; preds = %6
  %16 = mul nsw i64 %1, 6
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %19, i32 0
  %21 = mul nsw i64 %1, 5
  %22 = getelementptr inbounds i8, i8* %0, i64 %21
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %24, i32 0
  %26 = shl nsw i64 %1, 2
  %27 = getelementptr inbounds i8, i8* %0, i64 %26
  %28 = bitcast i8* %27 to i64*
  %29 = load i64, i64* %28, align 1
  %30 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %29, i32 0
  %31 = mul nsw i64 %1, 3
  %32 = getelementptr inbounds i8, i8* %0, i64 %31
  %33 = bitcast i8* %32 to i64*
  %34 = load i64, i64* %33, align 1
  %35 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %34, i32 0
  %36 = shl nsw i64 %1, 1
  %37 = getelementptr inbounds i8, i8* %0, i64 %36
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 1
  %40 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %39, i32 0
  %41 = getelementptr inbounds i8, i8* %0, i64 %1
  %42 = bitcast i8* %41 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %43, i32 0
  %45 = bitcast i8* %0 to i64*
  %46 = load i64, i64* %45, align 1
  %47 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %46, i32 0
  %48 = mul nsw i64 %1, 7
  br label %49

49:                                               ; preds = %49, %15
  %50 = phi i32 [ 0, %15 ], [ %95, %49 ]
  %51 = phi <2 x i64> [ %20, %15 ], [ %63, %49 ]
  %52 = phi <2 x i64> [ %25, %15 ], [ %51, %49 ]
  %53 = phi <2 x i64> [ %30, %15 ], [ %52, %49 ]
  %54 = phi <2 x i64> [ %35, %15 ], [ %53, %49 ]
  %55 = phi <2 x i64> [ %40, %15 ], [ %54, %49 ]
  %56 = phi <2 x i64> [ %44, %15 ], [ %55, %49 ]
  %57 = phi <2 x i64> [ %47, %15 ], [ %56, %49 ]
  %58 = phi i8* [ %0, %15 ], [ %91, %49 ]
  %59 = phi i8* [ %2, %15 ], [ %94, %49 ]
  %60 = getelementptr inbounds i8, i8* %58, i64 %48
  %61 = bitcast i8* %60 to i64*
  %62 = load i64, i64* %61, align 1
  %63 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %62, i32 0
  %64 = bitcast <2 x i64> %57 to <16 x i8>
  %65 = bitcast <2 x i64> %56 to <16 x i8>
  %66 = shufflevector <16 x i8> %64, <16 x i8> %65, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %67 = bitcast <2 x i64> %55 to <16 x i8>
  %68 = bitcast <2 x i64> %54 to <16 x i8>
  %69 = shufflevector <16 x i8> %67, <16 x i8> %68, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %70 = bitcast <2 x i64> %53 to <16 x i8>
  %71 = bitcast <2 x i64> %52 to <16 x i8>
  %72 = shufflevector <16 x i8> %70, <16 x i8> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = bitcast <2 x i64> %51 to <16 x i8>
  %74 = bitcast <2 x i64> %63 to <16 x i8>
  %75 = shufflevector <16 x i8> %73, <16 x i8> %74, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %76 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %66, <16 x i8> %10) #6
  %77 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %69, <16 x i8> %11) #6
  %78 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %72, <16 x i8> %12) #6
  %79 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %75, <16 x i8> %13) #6
  %80 = icmp slt <8 x i16> %78, %77
  %81 = select <8 x i1> %80, <8 x i16> %78, <8 x i16> %77
  %82 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %76, <8 x i16> %79) #6
  %83 = icmp sgt <8 x i16> %78, %77
  %84 = select <8 x i1> %83, <8 x i16> %78, <8 x i16> %77
  %85 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %82, <8 x i16> %81) #6
  %86 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %85, <8 x i16> %84) #6
  %87 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %86, <8 x i16> <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>) #6
  %88 = ashr <8 x i16> %87, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %89 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %88, <8 x i16> undef) #6
  %90 = bitcast <16 x i8> %89 to <2 x i64>
  %91 = getelementptr inbounds i8, i8* %58, i64 %1
  %92 = extractelement <2 x i64> %90, i32 0
  %93 = bitcast i8* %59 to i64*
  store i64 %92, i64* %93, align 1
  %94 = getelementptr inbounds i8, i8* %59, i64 %3
  %95 = add nuw i32 %50, 1
  %96 = icmp eq i32 %95, %4
  br i1 %96, label %97, label %49

97:                                               ; preds = %49, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_scaled_2d_ssse3(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2 {
  %12 = alloca [16 x i8], align 16
  %13 = alloca [64 x i8], align 16
  %14 = alloca [9152 x i8], align 16
  %15 = getelementptr inbounds [9152 x i8], [9152 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 9152, i8* nonnull %15) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 9152, i1 false)
  %16 = add nsw i32 %10, -1
  %17 = mul nsw i32 %16, %8
  %18 = add nsw i32 %17, %7
  %19 = ashr i32 %18, 4
  %20 = add nsw i32 %19, 8
  %21 = icmp sgt i32 %9, 7
  %22 = mul i64 %1, -3
  %23 = getelementptr inbounds i8, i8* %0, i64 %22
  br i1 %21, label %24, label %280

24:                                               ; preds = %11
  %25 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -86, i64 64, i1 false) #6
  %26 = getelementptr inbounds i8, i8* %23, i64 -3
  %27 = and i32 %20, 7
  %28 = add nsw i32 %19, 16
  %29 = sub nsw i32 %28, %27
  %30 = shl nsw i64 %1, 3
  %31 = shl nsw i64 %1, 1
  %32 = mul nsw i64 %1, 3
  %33 = shl nsw i64 %1, 2
  %34 = bitcast [64 x i8]* %13 to i64*
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 8
  %36 = bitcast i8* %35 to i64*
  %37 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 16
  %38 = bitcast i8* %37 to i64*
  %39 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 24
  %40 = bitcast i8* %39 to i64*
  %41 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 32
  %42 = bitcast i8* %41 to i64*
  %43 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 40
  %44 = bitcast i8* %43 to i64*
  %45 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 48
  %46 = bitcast i8* %45 to i64*
  %47 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 56
  %48 = bitcast i8* %47 to i64*
  %49 = sext i32 %9 to i64
  %50 = add nsw i64 %1, 3
  %51 = add nsw i64 %31, 3
  %52 = add nsw i64 %32, 3
  %53 = or i64 %33, 3
  %54 = mul nsw i64 %1, 5
  %55 = add nsw i64 %54, 3
  %56 = mul nsw i64 %1, 6
  %57 = add nsw i64 %56, 3
  %58 = mul nsw i64 %1, 7
  %59 = add nsw i64 %58, 3
  br label %60

60:                                               ; preds = %274, %24
  %61 = phi i8* [ %15, %24 ], [ %276, %274 ]
  %62 = phi i8* [ %26, %24 ], [ %275, %274 ]
  %63 = phi i32 [ %29, %24 ], [ %277, %274 ]
  br label %64

64:                                               ; preds = %60, %199
  %65 = phi i64 [ %272, %199 ], [ 0, %60 ]
  %66 = phi i32 [ %196, %199 ], [ %5, %60 ]
  br label %67

67:                                               ; preds = %195, %64
  %68 = phi i64 [ 0, %64 ], [ %197, %195 ]
  %69 = phi i32 [ %66, %64 ], [ %196, %195 ]
  %70 = ashr i32 %69, 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %62, i64 %71
  %73 = and i32 %69, 15
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %108

75:                                               ; preds = %67
  %76 = shl i64 %68, 3
  %77 = getelementptr inbounds i8, i8* %72, i64 3
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %76
  store i8 %78, i8* %79, align 8
  %80 = getelementptr inbounds i8, i8* %72, i64 %50
  %81 = load i8, i8* %80, align 1
  %82 = or i64 %76, 1
  %83 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %82
  store i8 %81, i8* %83, align 1
  %84 = getelementptr inbounds i8, i8* %72, i64 %51
  %85 = load i8, i8* %84, align 1
  %86 = or i64 %76, 2
  %87 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %86
  store i8 %85, i8* %87, align 2
  %88 = getelementptr inbounds i8, i8* %72, i64 %52
  %89 = load i8, i8* %88, align 1
  %90 = or i64 %76, 3
  %91 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %90
  store i8 %89, i8* %91, align 1
  %92 = getelementptr inbounds i8, i8* %72, i64 %53
  %93 = load i8, i8* %92, align 1
  %94 = or i64 %76, 4
  %95 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %94
  store i8 %93, i8* %95, align 4
  %96 = getelementptr inbounds i8, i8* %72, i64 %55
  %97 = load i8, i8* %96, align 1
  %98 = or i64 %76, 5
  %99 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %98
  store i8 %97, i8* %99, align 1
  %100 = getelementptr inbounds i8, i8* %72, i64 %57
  %101 = load i8, i8* %100, align 1
  %102 = or i64 %76, 6
  %103 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %102
  store i8 %101, i8* %103, align 2
  %104 = getelementptr inbounds i8, i8* %72, i64 %59
  %105 = load i8, i8* %104, align 1
  %106 = or i64 %76, 7
  %107 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %106
  store i8 %105, i8* %107, align 1
  br label %195

108:                                              ; preds = %67
  %109 = zext i32 %73 to i64
  %110 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %109, i64 0
  %111 = shl nsw i64 %68, 3
  %112 = getelementptr inbounds [64 x i8], [64 x i8]* %13, i64 0, i64 %111
  %113 = bitcast i8* %72 to i64*
  %114 = load i64, i64* %113, align 1
  %115 = insertelement <2 x i64> undef, i64 %114, i32 0
  %116 = getelementptr inbounds i8, i8* %72, i64 %1
  %117 = bitcast i8* %116 to i64*
  %118 = load i64, i64* %117, align 1
  %119 = insertelement <2 x i64> undef, i64 %118, i32 0
  %120 = getelementptr inbounds i8, i8* %72, i64 %31
  %121 = bitcast i8* %120 to i64*
  %122 = load i64, i64* %121, align 1
  %123 = insertelement <2 x i64> undef, i64 %122, i32 0
  %124 = getelementptr inbounds i8, i8* %72, i64 %32
  %125 = bitcast i8* %124 to i64*
  %126 = load i64, i64* %125, align 1
  %127 = insertelement <2 x i64> undef, i64 %126, i32 0
  %128 = getelementptr inbounds i8, i8* %72, i64 %33
  %129 = bitcast i8* %128 to i64*
  %130 = load i64, i64* %129, align 1
  %131 = insertelement <2 x i64> undef, i64 %130, i32 0
  %132 = getelementptr inbounds i8, i8* %128, i64 %1
  %133 = bitcast i8* %132 to i64*
  %134 = load i64, i64* %133, align 1
  %135 = insertelement <2 x i64> undef, i64 %134, i32 0
  %136 = getelementptr inbounds i8, i8* %128, i64 %31
  %137 = bitcast i8* %136 to i64*
  %138 = load i64, i64* %137, align 1
  %139 = insertelement <2 x i64> undef, i64 %138, i32 0
  %140 = getelementptr inbounds i8, i8* %128, i64 %32
  %141 = bitcast i8* %140 to i64*
  %142 = load i64, i64* %141, align 1
  %143 = insertelement <2 x i64> undef, i64 %142, i32 0
  %144 = bitcast <2 x i64> %115 to <8 x i16>
  %145 = bitcast <2 x i64> %119 to <8 x i16>
  %146 = shufflevector <8 x i16> %144, <8 x i16> %145, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %147 = bitcast <2 x i64> %123 to <8 x i16>
  %148 = bitcast <2 x i64> %127 to <8 x i16>
  %149 = shufflevector <8 x i16> %147, <8 x i16> %148, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %150 = bitcast <2 x i64> %131 to <8 x i16>
  %151 = bitcast <2 x i64> %135 to <8 x i16>
  %152 = shufflevector <8 x i16> %150, <8 x i16> %151, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %153 = bitcast <2 x i64> %139 to <8 x i16>
  %154 = bitcast <2 x i64> %143 to <8 x i16>
  %155 = shufflevector <8 x i16> %153, <8 x i16> %154, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %156 = bitcast <8 x i16> %146 to <4 x i32>
  %157 = bitcast <8 x i16> %149 to <4 x i32>
  %158 = shufflevector <4 x i32> %156, <4 x i32> %157, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %159 = bitcast <4 x i32> %158 to <2 x i64>
  %160 = bitcast <8 x i16> %152 to <4 x i32>
  %161 = bitcast <8 x i16> %155 to <4 x i32>
  %162 = shufflevector <4 x i32> %160, <4 x i32> %161, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %163 = bitcast <4 x i32> %162 to <2 x i64>
  %164 = shufflevector <4 x i32> %156, <4 x i32> %157, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %165 = bitcast <4 x i32> %164 to <2 x i64>
  %166 = shufflevector <4 x i32> %160, <4 x i32> %161, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %167 = bitcast <4 x i32> %166 to <2 x i64>
  %168 = shufflevector <2 x i64> %159, <2 x i64> %163, <2 x i32> <i32 0, i32 2>
  %169 = shufflevector <2 x i64> %159, <2 x i64> %163, <2 x i32> <i32 1, i32 3>
  %170 = shufflevector <2 x i64> %165, <2 x i64> %167, <2 x i32> <i32 0, i32 2>
  %171 = shufflevector <2 x i64> %165, <2 x i64> %167, <2 x i32> <i32 1, i32 3>
  %172 = bitcast i16* %110 to <16 x i8>*
  %173 = load <16 x i8>, <16 x i8>* %172, align 16
  %174 = shufflevector <16 x i8> %173, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2>
  %175 = shufflevector <16 x i8> %173, <16 x i8> undef, <16 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6>
  %176 = shufflevector <16 x i8> %173, <16 x i8> undef, <16 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10>
  %177 = shufflevector <16 x i8> %173, <16 x i8> undef, <16 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14>
  %178 = bitcast <2 x i64> %168 to <16 x i8>
  %179 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %178, <16 x i8> %174) #6
  %180 = bitcast <2 x i64> %169 to <16 x i8>
  %181 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %180, <16 x i8> %175) #6
  %182 = bitcast <2 x i64> %170 to <16 x i8>
  %183 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %182, <16 x i8> %176) #6
  %184 = bitcast <2 x i64> %171 to <16 x i8>
  %185 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %184, <16 x i8> %177) #6
  %186 = add <8 x i16> %185, %181
  %187 = add <8 x i16> %179, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %188 = add <8 x i16> %187, %183
  %189 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %188, <8 x i16> %186) #6
  %190 = ashr <8 x i16> %189, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %191 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %190, <8 x i16> undef) #6
  %192 = bitcast <16 x i8> %191 to <2 x i64>
  %193 = extractelement <2 x i64> %192, i32 0
  %194 = bitcast i8* %112 to i64*
  store i64 %193, i64* %194, align 8
  br label %195

195:                                              ; preds = %108, %75
  %196 = add nsw i32 %69, %6
  %197 = add nuw nsw i64 %68, 1
  %198 = icmp eq i64 %197, 8
  br i1 %198, label %199, label %67

199:                                              ; preds = %195
  %200 = getelementptr inbounds i8, i8* %61, i64 %65
  %201 = load i64, i64* %34, align 16
  %202 = insertelement <2 x i64> undef, i64 %201, i32 0
  %203 = load i64, i64* %36, align 8
  %204 = insertelement <2 x i64> undef, i64 %203, i32 0
  %205 = load i64, i64* %38, align 16
  %206 = insertelement <2 x i64> undef, i64 %205, i32 0
  %207 = load i64, i64* %40, align 8
  %208 = insertelement <2 x i64> undef, i64 %207, i32 0
  %209 = load i64, i64* %42, align 16
  %210 = insertelement <2 x i64> undef, i64 %209, i32 0
  %211 = load i64, i64* %44, align 8
  %212 = insertelement <2 x i64> undef, i64 %211, i32 0
  %213 = load i64, i64* %46, align 16
  %214 = insertelement <2 x i64> undef, i64 %213, i32 0
  %215 = load i64, i64* %48, align 8
  %216 = insertelement <2 x i64> undef, i64 %215, i32 0
  %217 = bitcast <2 x i64> %202 to <16 x i8>
  %218 = bitcast <2 x i64> %204 to <16 x i8>
  %219 = shufflevector <16 x i8> %217, <16 x i8> %218, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %220 = bitcast <2 x i64> %206 to <16 x i8>
  %221 = bitcast <2 x i64> %208 to <16 x i8>
  %222 = shufflevector <16 x i8> %220, <16 x i8> %221, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %223 = bitcast <2 x i64> %210 to <16 x i8>
  %224 = bitcast <2 x i64> %212 to <16 x i8>
  %225 = shufflevector <16 x i8> %223, <16 x i8> %224, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %226 = bitcast <2 x i64> %214 to <16 x i8>
  %227 = bitcast <2 x i64> %216 to <16 x i8>
  %228 = shufflevector <16 x i8> %226, <16 x i8> %227, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %229 = bitcast <16 x i8> %219 to <8 x i16>
  %230 = bitcast <16 x i8> %222 to <8 x i16>
  %231 = shufflevector <8 x i16> %229, <8 x i16> %230, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %232 = shufflevector <8 x i16> %229, <8 x i16> %230, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %233 = bitcast <16 x i8> %225 to <8 x i16>
  %234 = bitcast <16 x i8> %228 to <8 x i16>
  %235 = shufflevector <8 x i16> %233, <8 x i16> %234, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %236 = shufflevector <8 x i16> %233, <8 x i16> %234, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %237 = bitcast <8 x i16> %231 to <4 x i32>
  %238 = bitcast <8 x i16> %235 to <4 x i32>
  %239 = shufflevector <4 x i32> %237, <4 x i32> %238, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %240 = bitcast <4 x i32> %239 to <2 x i64>
  %241 = shufflevector <4 x i32> %237, <4 x i32> %238, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %242 = bitcast <4 x i32> %241 to <2 x i64>
  %243 = bitcast <8 x i16> %232 to <4 x i32>
  %244 = bitcast <8 x i16> %236 to <4 x i32>
  %245 = shufflevector <4 x i32> %243, <4 x i32> %244, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %246 = bitcast <4 x i32> %245 to <2 x i64>
  %247 = shufflevector <4 x i32> %243, <4 x i32> %244, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %248 = bitcast <4 x i32> %247 to <2 x i64>
  %249 = extractelement <2 x i64> %240, i32 0
  %250 = bitcast i8* %200 to i64*
  store i64 %249, i64* %250, align 1
  %251 = getelementptr inbounds i8, i8* %200, i64 64
  %252 = extractelement <2 x i64> %240, i32 1
  %253 = bitcast i8* %251 to i64*
  store i64 %252, i64* %253, align 1
  %254 = getelementptr inbounds i8, i8* %200, i64 128
  %255 = extractelement <2 x i64> %242, i32 0
  %256 = bitcast i8* %254 to i64*
  store i64 %255, i64* %256, align 1
  %257 = getelementptr inbounds i8, i8* %200, i64 192
  %258 = extractelement <2 x i64> %242, i32 1
  %259 = bitcast i8* %257 to i64*
  store i64 %258, i64* %259, align 1
  %260 = getelementptr inbounds i8, i8* %200, i64 256
  %261 = extractelement <2 x i64> %246, i32 0
  %262 = bitcast i8* %260 to i64*
  store i64 %261, i64* %262, align 1
  %263 = getelementptr inbounds i8, i8* %200, i64 320
  %264 = extractelement <2 x i64> %246, i32 1
  %265 = bitcast i8* %263 to i64*
  store i64 %264, i64* %265, align 1
  %266 = getelementptr inbounds i8, i8* %200, i64 384
  %267 = extractelement <2 x i64> %248, i32 0
  %268 = bitcast i8* %266 to i64*
  store i64 %267, i64* %268, align 1
  %269 = getelementptr inbounds i8, i8* %200, i64 448
  %270 = extractelement <2 x i64> %248, i32 1
  %271 = bitcast i8* %269 to i64*
  store i64 %270, i64* %271, align 1
  %272 = add nuw nsw i64 %65, 8
  %273 = icmp slt i64 %272, %49
  br i1 %273, label %64, label %274

274:                                              ; preds = %199
  %275 = getelementptr inbounds i8, i8* %62, i64 %30
  %276 = getelementptr inbounds i8, i8* %61, i64 512
  %277 = add nsw i32 %63, -8
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %60

279:                                              ; preds = %274
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %25) #6
  br label %435

280:                                              ; preds = %11
  %281 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %281) #6
  %282 = icmp sgt i32 %20, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %281, i8 -86, i64 16, i1 false) #6
  br i1 %282, label %283, label %434

283:                                              ; preds = %280
  %284 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 12
  %285 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 8
  %286 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 4
  %287 = getelementptr inbounds i8, i8* %23, i64 -3
  %288 = icmp sgt i32 %9, 0
  %289 = shl nsw i64 %1, 1
  %290 = mul nsw i64 %1, 3
  %291 = bitcast [16 x i8]* %12 to i32*
  %292 = bitcast i8* %286 to i32*
  %293 = bitcast i8* %285 to i32*
  %294 = bitcast i8* %284 to i32*
  %295 = shl nsw i64 %1, 2
  %296 = sext i32 %9 to i64
  %297 = add nsw i64 %1, 3
  %298 = add nsw i64 %289, 3
  %299 = add nsw i64 %290, 3
  br label %300

300:                                              ; preds = %429, %283
  %301 = phi i32 [ 0, %283 ], [ %432, %429 ]
  %302 = phi i8* [ %287, %283 ], [ %430, %429 ]
  %303 = phi i8* [ %15, %283 ], [ %431, %429 ]
  br i1 %288, label %304, label %429

304:                                              ; preds = %300, %389
  %305 = phi i64 [ %427, %389 ], [ 0, %300 ]
  %306 = phi i32 [ %386, %389 ], [ %5, %300 ]
  br label %307

307:                                              ; preds = %385, %304
  %308 = phi i64 [ 0, %304 ], [ %387, %385 ]
  %309 = phi i32 [ %306, %304 ], [ %386, %385 ]
  %310 = ashr i32 %309, 4
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i8, i8* %302, i64 %311
  %313 = and i32 %309, 15
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %315, label %332

315:                                              ; preds = %307
  %316 = shl i64 %308, 2
  %317 = getelementptr inbounds i8, i8* %312, i64 3
  %318 = load i8, i8* %317, align 1
  %319 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %316
  store i8 %318, i8* %319, align 4
  %320 = getelementptr inbounds i8, i8* %312, i64 %297
  %321 = load i8, i8* %320, align 1
  %322 = or i64 %316, 1
  %323 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %322
  store i8 %321, i8* %323, align 1
  %324 = getelementptr inbounds i8, i8* %312, i64 %298
  %325 = load i8, i8* %324, align 1
  %326 = or i64 %316, 2
  %327 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %326
  store i8 %325, i8* %327, align 2
  %328 = getelementptr inbounds i8, i8* %312, i64 %299
  %329 = load i8, i8* %328, align 1
  %330 = or i64 %316, 3
  %331 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %330
  store i8 %329, i8* %331, align 1
  br label %385

332:                                              ; preds = %307
  %333 = zext i32 %313 to i64
  %334 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %333, i64 0
  %335 = shl nsw i64 %308, 2
  %336 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 %335
  %337 = bitcast i8* %312 to i64*
  %338 = load i64, i64* %337, align 1
  %339 = insertelement <2 x i64> undef, i64 %338, i32 0
  %340 = getelementptr inbounds i8, i8* %312, i64 %1
  %341 = bitcast i8* %340 to i64*
  %342 = load i64, i64* %341, align 1
  %343 = insertelement <2 x i64> undef, i64 %342, i32 0
  %344 = getelementptr inbounds i8, i8* %312, i64 %289
  %345 = bitcast i8* %344 to i64*
  %346 = load i64, i64* %345, align 1
  %347 = insertelement <2 x i64> undef, i64 %346, i32 0
  %348 = getelementptr inbounds i8, i8* %312, i64 %290
  %349 = bitcast i8* %348 to i64*
  %350 = load i64, i64* %349, align 1
  %351 = insertelement <2 x i64> undef, i64 %350, i32 0
  %352 = bitcast <2 x i64> %339 to <8 x i16>
  %353 = bitcast <2 x i64> %343 to <8 x i16>
  %354 = shufflevector <8 x i16> %352, <8 x i16> %353, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %355 = bitcast <2 x i64> %347 to <8 x i16>
  %356 = bitcast <2 x i64> %351 to <8 x i16>
  %357 = shufflevector <8 x i16> %355, <8 x i16> %356, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %358 = bitcast <8 x i16> %354 to <4 x i32>
  %359 = bitcast <8 x i16> %357 to <4 x i32>
  %360 = shufflevector <4 x i32> %358, <4 x i32> %359, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %361 = bitcast <4 x i32> %360 to <16 x i8>
  %362 = shufflevector <16 x i8> %361, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %363 = shufflevector <4 x i32> %358, <4 x i32> %359, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %364 = bitcast <4 x i32> %363 to <16 x i8>
  %365 = shufflevector <16 x i8> %364, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %366 = bitcast i16* %334 to <16 x i8>*
  %367 = load <16 x i8>, <16 x i8>* %366, align 16
  %368 = shufflevector <16 x i8> %367, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2>
  %369 = shufflevector <16 x i8> %367, <16 x i8> undef, <16 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6>
  %370 = shufflevector <16 x i8> %367, <16 x i8> undef, <16 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10>
  %371 = shufflevector <16 x i8> %367, <16 x i8> undef, <16 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14>
  %372 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %361, <16 x i8> %368) #6
  %373 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %362, <16 x i8> %369) #6
  %374 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %364, <16 x i8> %370) #6
  %375 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %365, <16 x i8> %371) #6
  %376 = add <8 x i16> %375, %373
  %377 = add <8 x i16> %372, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %378 = add <8 x i16> %377, %374
  %379 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %378, <8 x i16> %376) #6
  %380 = ashr <8 x i16> %379, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %381 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %380, <8 x i16> undef) #6
  %382 = bitcast <16 x i8> %381 to <4 x i32>
  %383 = extractelement <4 x i32> %382, i32 0
  %384 = bitcast i8* %336 to i32*
  store i32 %383, i32* %384, align 4
  br label %385

385:                                              ; preds = %332, %315
  %386 = add nsw i32 %309, %6
  %387 = add nuw nsw i64 %308, 1
  %388 = icmp eq i64 %387, 4
  br i1 %388, label %389, label %307

389:                                              ; preds = %385
  %390 = getelementptr inbounds i8, i8* %303, i64 %305
  %391 = load i32, i32* %291, align 16
  %392 = insertelement <4 x i32> undef, i32 %391, i32 0
  %393 = load i32, i32* %292, align 4
  %394 = insertelement <4 x i32> undef, i32 %393, i32 0
  %395 = load i32, i32* %293, align 8
  %396 = insertelement <4 x i32> undef, i32 %395, i32 0
  %397 = load i32, i32* %294, align 4
  %398 = insertelement <4 x i32> undef, i32 %397, i32 0
  %399 = bitcast <4 x i32> %392 to <16 x i8>
  %400 = bitcast <4 x i32> %394 to <16 x i8>
  %401 = shufflevector <16 x i8> %399, <16 x i8> %400, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %402 = bitcast <4 x i32> %396 to <16 x i8>
  %403 = bitcast <4 x i32> %398 to <16 x i8>
  %404 = shufflevector <16 x i8> %402, <16 x i8> %403, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %405 = bitcast <16 x i8> %401 to <8 x i16>
  %406 = bitcast <16 x i8> %404 to <8 x i16>
  %407 = shufflevector <8 x i16> %405, <8 x i16> %406, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %408 = bitcast <8 x i16> %407 to <16 x i8>
  %409 = shufflevector <16 x i8> %408, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %410 = bitcast <16 x i8> %409 to <4 x i32>
  %411 = shufflevector <16 x i8> %408, <16 x i8> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %412 = bitcast <16 x i8> %411 to <4 x i32>
  %413 = shufflevector <16 x i8> %408, <16 x i8> undef, <16 x i32> <i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %414 = bitcast <16 x i8> %413 to <4 x i32>
  %415 = bitcast <8 x i16> %407 to <4 x i32>
  %416 = extractelement <4 x i32> %415, i32 0
  %417 = bitcast i8* %390 to i32*
  store i32 %416, i32* %417, align 4
  %418 = extractelement <4 x i32> %410, i32 0
  %419 = getelementptr inbounds i8, i8* %390, i64 64
  %420 = bitcast i8* %419 to i32*
  store i32 %418, i32* %420, align 4
  %421 = extractelement <4 x i32> %412, i32 0
  %422 = getelementptr inbounds i8, i8* %390, i64 128
  %423 = bitcast i8* %422 to i32*
  store i32 %421, i32* %423, align 4
  %424 = extractelement <4 x i32> %414, i32 0
  %425 = getelementptr inbounds i8, i8* %390, i64 192
  %426 = bitcast i8* %425 to i32*
  store i32 %424, i32* %426, align 4
  %427 = add nuw nsw i64 %305, 4
  %428 = icmp slt i64 %427, %296
  br i1 %428, label %304, label %429

429:                                              ; preds = %389, %300
  %430 = getelementptr inbounds i8, i8* %302, i64 %295
  %431 = getelementptr inbounds i8, i8* %303, i64 256
  %432 = add nuw nsw i32 %301, 4
  %433 = icmp slt i32 %432, %20
  br i1 %433, label %300, label %434

434:                                              ; preds = %429, %280
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %281) #6
  br label %435

435:                                              ; preds = %434, %279
  %436 = icmp sgt i32 %9, 15
  br i1 %436, label %437, label %528

437:                                              ; preds = %435
  %438 = icmp sgt i32 %10, 0
  br i1 %438, label %439, label %709

439:                                              ; preds = %437
  %440 = sext i32 %9 to i64
  %441 = zext i32 %10 to i64
  br label %442

442:                                              ; preds = %524, %439
  %443 = phi i64 [ 0, %439 ], [ %526, %524 ]
  %444 = phi i32 [ %7, %439 ], [ %525, %524 ]
  %445 = ashr i32 %444, 4
  %446 = sext i32 %445 to i64
  %447 = shl nsw i64 %446, 6
  %448 = getelementptr inbounds [9152 x i8], [9152 x i8]* %14, i64 0, i64 %447
  %449 = and i32 %444, 15
  %450 = icmp eq i32 %449, 0
  br i1 %450, label %520, label %451

451:                                              ; preds = %442
  %452 = zext i32 %449 to i64
  %453 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %452, i64 0
  %454 = mul nsw i64 %443, %3
  %455 = getelementptr inbounds i8, i8* %2, i64 %454
  %456 = bitcast i16* %453 to <16 x i8>*
  %457 = load <16 x i8>, <16 x i8>* %456, align 16
  %458 = shufflevector <16 x i8> %457, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2>
  %459 = shufflevector <16 x i8> %457, <16 x i8> undef, <16 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6>
  %460 = shufflevector <16 x i8> %457, <16 x i8> undef, <16 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10>
  %461 = shufflevector <16 x i8> %457, <16 x i8> undef, <16 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14>
  br label %462

462:                                              ; preds = %451, %462
  %463 = phi i64 [ %518, %462 ], [ 0, %451 ]
  %464 = phi i8* [ %515, %462 ], [ %448, %451 ]
  %465 = bitcast i8* %464 to <16 x i8>*
  %466 = load <16 x i8>, <16 x i8>* %465, align 1
  %467 = getelementptr inbounds i8, i8* %464, i64 64
  %468 = bitcast i8* %467 to <16 x i8>*
  %469 = load <16 x i8>, <16 x i8>* %468, align 1
  %470 = getelementptr inbounds i8, i8* %464, i64 128
  %471 = bitcast i8* %470 to <16 x i8>*
  %472 = load <16 x i8>, <16 x i8>* %471, align 1
  %473 = getelementptr inbounds i8, i8* %464, i64 192
  %474 = bitcast i8* %473 to <16 x i8>*
  %475 = load <16 x i8>, <16 x i8>* %474, align 1
  %476 = getelementptr inbounds i8, i8* %464, i64 256
  %477 = bitcast i8* %476 to <16 x i8>*
  %478 = load <16 x i8>, <16 x i8>* %477, align 1
  %479 = getelementptr inbounds i8, i8* %464, i64 320
  %480 = bitcast i8* %479 to <16 x i8>*
  %481 = load <16 x i8>, <16 x i8>* %480, align 1
  %482 = getelementptr inbounds i8, i8* %464, i64 384
  %483 = bitcast i8* %482 to <16 x i8>*
  %484 = load <16 x i8>, <16 x i8>* %483, align 1
  %485 = getelementptr inbounds i8, i8* %464, i64 448
  %486 = bitcast i8* %485 to <16 x i8>*
  %487 = load <16 x i8>, <16 x i8>* %486, align 1
  %488 = shufflevector <16 x i8> %466, <16 x i8> %469, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %489 = shufflevector <16 x i8> %466, <16 x i8> %469, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %490 = shufflevector <16 x i8> %472, <16 x i8> %475, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %491 = shufflevector <16 x i8> %472, <16 x i8> %475, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %492 = shufflevector <16 x i8> %478, <16 x i8> %481, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %493 = shufflevector <16 x i8> %478, <16 x i8> %481, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %494 = shufflevector <16 x i8> %484, <16 x i8> %487, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %495 = shufflevector <16 x i8> %484, <16 x i8> %487, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %496 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %488, <16 x i8> %458) #6
  %497 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %490, <16 x i8> %459) #6
  %498 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %492, <16 x i8> %460) #6
  %499 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %494, <16 x i8> %461) #6
  %500 = add <8 x i16> %499, %497
  %501 = add <8 x i16> %496, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %502 = add <8 x i16> %501, %498
  %503 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %502, <8 x i16> %500) #6
  %504 = ashr <8 x i16> %503, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %505 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %489, <16 x i8> %458) #6
  %506 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %491, <16 x i8> %459) #6
  %507 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %493, <16 x i8> %460) #6
  %508 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %495, <16 x i8> %461) #6
  %509 = add <8 x i16> %508, %506
  %510 = add <8 x i16> %505, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %511 = add <8 x i16> %510, %507
  %512 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %511, <8 x i16> %509) #6
  %513 = ashr <8 x i16> %512, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %514 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %504, <8 x i16> %513) #6
  %515 = getelementptr inbounds i8, i8* %464, i64 16
  %516 = getelementptr inbounds i8, i8* %455, i64 %463
  %517 = bitcast i8* %516 to <16 x i8>*
  store <16 x i8> %514, <16 x i8>* %517, align 16
  %518 = add nuw nsw i64 %463, 16
  %519 = icmp slt i64 %518, %440
  br i1 %519, label %462, label %524

520:                                              ; preds = %442
  %521 = mul nsw i64 %443, %3
  %522 = getelementptr inbounds i8, i8* %2, i64 %521
  %523 = getelementptr inbounds i8, i8* %448, i64 192
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %522, i8* align 16 %523, i64 %440, i1 false) #6
  br label %524

524:                                              ; preds = %462, %520
  %525 = add nsw i32 %444, %8
  %526 = add nuw nsw i64 %443, 1
  %527 = icmp eq i64 %526, %441
  br i1 %527, label %709, label %442

528:                                              ; preds = %435
  %529 = icmp eq i32 %9, 8
  %530 = icmp sgt i32 %10, 0
  br i1 %529, label %531, label %621

531:                                              ; preds = %528
  br i1 %530, label %532, label %709

532:                                              ; preds = %531
  %533 = zext i32 %10 to i64
  br label %534

534:                                              ; preds = %617, %532
  %535 = phi i64 [ 0, %532 ], [ %619, %617 ]
  %536 = phi i32 [ %7, %532 ], [ %618, %617 ]
  %537 = ashr i32 %536, 4
  %538 = sext i32 %537 to i64
  %539 = shl nsw i64 %538, 6
  %540 = getelementptr inbounds [9152 x i8], [9152 x i8]* %14, i64 0, i64 %539
  %541 = and i32 %536, 15
  %542 = icmp eq i32 %541, 0
  br i1 %542, label %610, label %543

543:                                              ; preds = %534
  %544 = zext i32 %541 to i64
  %545 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %544, i64 0
  %546 = mul nsw i64 %535, %3
  %547 = getelementptr inbounds i8, i8* %2, i64 %546
  %548 = bitcast i8* %540 to i64*
  %549 = load i64, i64* %548, align 16
  %550 = insertelement <2 x i64> undef, i64 %549, i32 0
  %551 = getelementptr inbounds i8, i8* %540, i64 64
  %552 = bitcast i8* %551 to i64*
  %553 = load i64, i64* %552, align 16
  %554 = insertelement <2 x i64> undef, i64 %553, i32 0
  %555 = getelementptr inbounds i8, i8* %540, i64 128
  %556 = bitcast i8* %555 to i64*
  %557 = load i64, i64* %556, align 16
  %558 = insertelement <2 x i64> undef, i64 %557, i32 0
  %559 = getelementptr inbounds i8, i8* %540, i64 192
  %560 = bitcast i8* %559 to i64*
  %561 = load i64, i64* %560, align 16
  %562 = insertelement <2 x i64> undef, i64 %561, i32 0
  %563 = getelementptr inbounds i8, i8* %540, i64 256
  %564 = bitcast i8* %563 to i64*
  %565 = load i64, i64* %564, align 16
  %566 = insertelement <2 x i64> undef, i64 %565, i32 0
  %567 = getelementptr inbounds i8, i8* %540, i64 320
  %568 = bitcast i8* %567 to i64*
  %569 = load i64, i64* %568, align 16
  %570 = insertelement <2 x i64> undef, i64 %569, i32 0
  %571 = getelementptr inbounds i8, i8* %540, i64 384
  %572 = bitcast i8* %571 to i64*
  %573 = load i64, i64* %572, align 16
  %574 = insertelement <2 x i64> undef, i64 %573, i32 0
  %575 = getelementptr inbounds i8, i8* %540, i64 448
  %576 = bitcast i8* %575 to i64*
  %577 = load i64, i64* %576, align 16
  %578 = insertelement <2 x i64> undef, i64 %577, i32 0
  %579 = bitcast <2 x i64> %550 to <16 x i8>
  %580 = bitcast <2 x i64> %554 to <16 x i8>
  %581 = shufflevector <16 x i8> %579, <16 x i8> %580, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %582 = bitcast <2 x i64> %558 to <16 x i8>
  %583 = bitcast <2 x i64> %562 to <16 x i8>
  %584 = shufflevector <16 x i8> %582, <16 x i8> %583, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %585 = bitcast <2 x i64> %566 to <16 x i8>
  %586 = bitcast <2 x i64> %570 to <16 x i8>
  %587 = shufflevector <16 x i8> %585, <16 x i8> %586, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %588 = bitcast <2 x i64> %574 to <16 x i8>
  %589 = bitcast <2 x i64> %578 to <16 x i8>
  %590 = shufflevector <16 x i8> %588, <16 x i8> %589, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %591 = bitcast i16* %545 to <16 x i8>*
  %592 = load <16 x i8>, <16 x i8>* %591, align 16
  %593 = shufflevector <16 x i8> %592, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2>
  %594 = shufflevector <16 x i8> %592, <16 x i8> undef, <16 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6>
  %595 = shufflevector <16 x i8> %592, <16 x i8> undef, <16 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10>
  %596 = shufflevector <16 x i8> %592, <16 x i8> undef, <16 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14>
  %597 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %581, <16 x i8> %593) #6
  %598 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %584, <16 x i8> %594) #6
  %599 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %587, <16 x i8> %595) #6
  %600 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %590, <16 x i8> %596) #6
  %601 = add <8 x i16> %600, %598
  %602 = add <8 x i16> %597, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %603 = add <8 x i16> %602, %599
  %604 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %603, <8 x i16> %601) #6
  %605 = ashr <8 x i16> %604, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %606 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %605, <8 x i16> undef) #6
  %607 = bitcast <16 x i8> %606 to <2 x i64>
  %608 = extractelement <2 x i64> %607, i32 0
  %609 = bitcast i8* %547 to i64*
  store i64 %608, i64* %609, align 1
  br label %617

610:                                              ; preds = %534
  %611 = mul nsw i64 %535, %3
  %612 = getelementptr inbounds i8, i8* %2, i64 %611
  %613 = getelementptr inbounds i8, i8* %540, i64 192
  %614 = bitcast i8* %613 to i64*
  %615 = bitcast i8* %612 to i64*
  %616 = load i64, i64* %614, align 16
  store i64 %616, i64* %615, align 1
  br label %617

617:                                              ; preds = %610, %543
  %618 = add nsw i32 %536, %8
  %619 = add nuw nsw i64 %535, 1
  %620 = icmp eq i64 %619, %533
  br i1 %620, label %709, label %534

621:                                              ; preds = %528
  br i1 %530, label %622, label %709

622:                                              ; preds = %621
  %623 = sext i32 %9 to i64
  %624 = zext i32 %10 to i64
  br label %625

625:                                              ; preds = %705, %622
  %626 = phi i64 [ 0, %622 ], [ %707, %705 ]
  %627 = phi i32 [ %7, %622 ], [ %706, %705 ]
  %628 = ashr i32 %627, 4
  %629 = sext i32 %628 to i64
  %630 = shl nsw i64 %629, 6
  %631 = getelementptr inbounds [9152 x i8], [9152 x i8]* %14, i64 0, i64 %630
  %632 = and i32 %627, 15
  %633 = icmp eq i32 %632, 0
  br i1 %633, label %701, label %634

634:                                              ; preds = %625
  %635 = zext i32 %632 to i64
  %636 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %635, i64 0
  %637 = mul nsw i64 %626, %3
  %638 = getelementptr inbounds i8, i8* %2, i64 %637
  %639 = bitcast i8* %631 to i32*
  %640 = load i32, i32* %639, align 16
  %641 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %640, i32 0
  %642 = getelementptr inbounds i8, i8* %631, i64 64
  %643 = bitcast i8* %642 to i32*
  %644 = load i32, i32* %643, align 16
  %645 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %644, i32 0
  %646 = getelementptr inbounds i8, i8* %631, i64 128
  %647 = bitcast i8* %646 to i32*
  %648 = load i32, i32* %647, align 16
  %649 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %648, i32 0
  %650 = getelementptr inbounds i8, i8* %631, i64 192
  %651 = bitcast i8* %650 to i32*
  %652 = load i32, i32* %651, align 16
  %653 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %652, i32 0
  %654 = getelementptr inbounds i8, i8* %631, i64 256
  %655 = bitcast i8* %654 to i32*
  %656 = load i32, i32* %655, align 16
  %657 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %656, i32 0
  %658 = getelementptr inbounds i8, i8* %631, i64 320
  %659 = bitcast i8* %658 to i32*
  %660 = load i32, i32* %659, align 16
  %661 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %660, i32 0
  %662 = getelementptr inbounds i8, i8* %631, i64 384
  %663 = bitcast i8* %662 to i32*
  %664 = load i32, i32* %663, align 16
  %665 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %664, i32 0
  %666 = getelementptr inbounds i8, i8* %631, i64 448
  %667 = bitcast i8* %666 to i32*
  %668 = load i32, i32* %667, align 16
  %669 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %668, i32 0
  %670 = bitcast <4 x i32> %641 to <16 x i8>
  %671 = bitcast <4 x i32> %645 to <16 x i8>
  %672 = shufflevector <16 x i8> %670, <16 x i8> %671, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %673 = bitcast <4 x i32> %649 to <16 x i8>
  %674 = bitcast <4 x i32> %653 to <16 x i8>
  %675 = shufflevector <16 x i8> %673, <16 x i8> %674, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %676 = bitcast <4 x i32> %657 to <16 x i8>
  %677 = bitcast <4 x i32> %661 to <16 x i8>
  %678 = shufflevector <16 x i8> %676, <16 x i8> %677, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %679 = bitcast <4 x i32> %665 to <16 x i8>
  %680 = bitcast <4 x i32> %669 to <16 x i8>
  %681 = shufflevector <16 x i8> %679, <16 x i8> %680, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %682 = bitcast i16* %636 to <16 x i8>*
  %683 = load <16 x i8>, <16 x i8>* %682, align 16
  %684 = shufflevector <16 x i8> %683, <16 x i8> undef, <16 x i32> <i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2, i32 0, i32 2>
  %685 = shufflevector <16 x i8> %683, <16 x i8> undef, <16 x i32> <i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6, i32 4, i32 6>
  %686 = shufflevector <16 x i8> %683, <16 x i8> undef, <16 x i32> <i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10, i32 8, i32 10>
  %687 = shufflevector <16 x i8> %683, <16 x i8> undef, <16 x i32> <i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14, i32 12, i32 14>
  %688 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %672, <16 x i8> %684) #6
  %689 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %675, <16 x i8> %685) #6
  %690 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %678, <16 x i8> %686) #6
  %691 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %681, <16 x i8> %687) #6
  %692 = add <8 x i16> %691, %689
  %693 = add <8 x i16> %688, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  %694 = add <8 x i16> %693, %690
  %695 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %694, <8 x i16> %692) #6
  %696 = ashr <8 x i16> %695, <i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7, i16 7>
  %697 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %696, <8 x i16> undef) #6
  %698 = bitcast <16 x i8> %697 to <4 x i32>
  %699 = extractelement <4 x i32> %698, i32 0
  %700 = bitcast i8* %638 to i32*
  store i32 %699, i32* %700, align 4
  br label %705

701:                                              ; preds = %625
  %702 = mul nsw i64 %626, %3
  %703 = getelementptr inbounds i8, i8* %2, i64 %702
  %704 = getelementptr inbounds i8, i8* %631, i64 192
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %703, i8* align 16 %704, i64 %623, i1 false) #6
  br label %705

705:                                              ; preds = %701, %634
  %706 = add nsw i32 %627, %8
  %707 = add nuw nsw i64 %626, 1
  %708 = icmp eq i64 %707, %624
  br i1 %708, label %709, label %625

709:                                              ; preds = %705, %617, %524, %621, %531, %437
  call void @llvm.lifetime.end.p0i8(i64 9152, i8* nonnull %15) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_convolve8_horiz_ssse3(i8*, i64, i8*, i64, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #2 {
  %11 = load i16, i16* %4, align 2
  %12 = getelementptr inbounds i16, i16* %4, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = or i16 %13, %11
  %15 = getelementptr inbounds i16, i16* %4, i64 6
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %14, %16
  %18 = getelementptr inbounds i16, i16* %4, i64 7
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = icmp eq i16 %20, 0
  %22 = getelementptr inbounds i16, i16* %4, i64 2
  %23 = load i16, i16* %22, align 2
  br i1 %21, label %24, label %244

24:                                               ; preds = %10
  %25 = getelementptr inbounds i16, i16* %4, i64 5
  %26 = load i16, i16* %25, align 2
  %27 = or i16 %26, %23
  %28 = icmp eq i16 %27, 0
  br i1 %28, label %244, label %29

29:                                               ; preds = %24
  %30 = icmp sgt i32 %8, 15
  br i1 %30, label %31, label %36

31:                                               ; preds = %29
  %32 = bitcast i16* %4 to <8 x i16>*
  %33 = icmp eq i32 %9, 0
  br label %48

34:                                               ; preds = %88
  %35 = and i32 %8, 15
  br label %36

36:                                               ; preds = %34, %29
  %37 = phi i8* [ %2, %29 ], [ %90, %34 ]
  %38 = phi i32 [ %8, %29 ], [ %35, %34 ]
  %39 = phi i8* [ %0, %29 ], [ %89, %34 ]
  %40 = icmp sgt i32 %38, 7
  br i1 %40, label %41, label %95

41:                                               ; preds = %36
  %42 = bitcast i16* %4 to <8 x i16>*
  %43 = icmp eq i32 %9, 0
  %44 = and i32 %9, 1
  %45 = icmp eq i32 %44, 0
  %46 = add i32 %9, -1
  %47 = icmp eq i32 %9, 1
  br label %107

48:                                               ; preds = %31, %88
  %49 = phi i8* [ %0, %31 ], [ %89, %88 ]
  %50 = phi i32 [ %8, %31 ], [ %91, %88 ]
  %51 = phi i8* [ %2, %31 ], [ %90, %88 ]
  %52 = load <8 x i16>, <8 x i16>* %32, align 1
  %53 = ashr <8 x i16> %52, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %54 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %53, <8 x i16> %53) #6
  %55 = shufflevector <16 x i8> %54, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3>
  %56 = shufflevector <16 x i8> %54, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5>
  br i1 %33, label %88, label %57

57:                                               ; preds = %48
  %58 = getelementptr inbounds i8, i8* %49, i64 -3
  br label %59

59:                                               ; preds = %59, %57
  %60 = phi i32 [ %86, %59 ], [ %9, %57 ]
  %61 = phi i8* [ %83, %59 ], [ %58, %57 ]
  %62 = phi i8* [ %85, %59 ], [ %51, %57 ]
  %63 = bitcast i8* %61 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1
  %65 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %66 = shufflevector <16 x i8> %64, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %67 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %65, <16 x i8> %55) #6
  %68 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %66, <16 x i8> %56) #6
  %69 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %67, <8 x i16> %68) #6
  %70 = getelementptr inbounds i8, i8* %61, i64 8
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = shufflevector <16 x i8> %72, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %74 = shufflevector <16 x i8> %72, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %75 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %73, <16 x i8> %55) #6
  %76 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %74, <16 x i8> %56) #6
  %77 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %75, <8 x i16> %76) #6
  %78 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %69, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %79 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %77, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %80 = ashr <8 x i16> %78, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %81 = ashr <8 x i16> %79, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %82 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %80, <8 x i16> %81) #6
  %83 = getelementptr inbounds i8, i8* %61, i64 %1
  %84 = bitcast i8* %62 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %84, align 16
  %85 = getelementptr inbounds i8, i8* %62, i64 %3
  %86 = add i32 %60, -1
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %59

88:                                               ; preds = %59, %48
  %89 = getelementptr inbounds i8, i8* %49, i64 16
  %90 = getelementptr inbounds i8, i8* %51, i64 16
  %91 = add nsw i32 %50, -16
  %92 = icmp sgt i32 %91, 15
  br i1 %92, label %48, label %34

93:                                               ; preds = %174
  %94 = and i32 %38, 7
  br label %95

95:                                               ; preds = %93, %36
  %96 = phi i8* [ %37, %36 ], [ %176, %93 ]
  %97 = phi i32 [ %38, %36 ], [ %94, %93 ]
  %98 = phi i8* [ %39, %36 ], [ %175, %93 ]
  %99 = icmp sgt i32 %97, 3
  br i1 %99, label %100, label %332

100:                                              ; preds = %95
  %101 = bitcast i16* %4 to <8 x i16>*
  %102 = icmp eq i32 %9, 0
  %103 = and i32 %9, 1
  %104 = icmp eq i32 %103, 0
  %105 = add i32 %9, -1
  %106 = icmp eq i32 %9, 1
  br label %179

107:                                              ; preds = %41, %174
  %108 = phi i8* [ %39, %41 ], [ %175, %174 ]
  %109 = phi i32 [ %38, %41 ], [ %177, %174 ]
  %110 = phi i8* [ %37, %41 ], [ %176, %174 ]
  %111 = load <8 x i16>, <8 x i16>* %42, align 1
  %112 = ashr <8 x i16> %111, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %113 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %112, <8 x i16> %112) #6
  %114 = shufflevector <16 x i8> %113, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3>
  %115 = shufflevector <16 x i8> %113, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5>
  br i1 %43, label %174, label %116

116:                                              ; preds = %107
  %117 = getelementptr inbounds i8, i8* %108, i64 -3
  br i1 %45, label %134, label %118

118:                                              ; preds = %116
  %119 = bitcast i8* %117 to <16 x i8>*
  %120 = load <16 x i8>, <16 x i8>* %119, align 1
  %121 = shufflevector <16 x i8> %120, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %122 = shufflevector <16 x i8> %120, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %123 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %121, <16 x i8> %114) #6
  %124 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %122, <16 x i8> %115) #6
  %125 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %123, <8 x i16> %124) #6
  %126 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %125, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %127 = ashr <8 x i16> %126, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %128 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %127, <8 x i16> undef) #6
  %129 = bitcast <16 x i8> %128 to <2 x i64>
  %130 = getelementptr inbounds i8, i8* %117, i64 %1
  %131 = extractelement <2 x i64> %129, i32 0
  %132 = bitcast i8* %110 to i64*
  store i64 %131, i64* %132, align 1
  %133 = getelementptr inbounds i8, i8* %110, i64 %3
  br label %134

134:                                              ; preds = %118, %116
  %135 = phi i32 [ %46, %118 ], [ %9, %116 ]
  %136 = phi i8* [ %130, %118 ], [ %117, %116 ]
  %137 = phi i8* [ %133, %118 ], [ %110, %116 ]
  br i1 %47, label %174, label %138

138:                                              ; preds = %134, %138
  %139 = phi i32 [ %172, %138 ], [ %135, %134 ]
  %140 = phi i8* [ %168, %138 ], [ %136, %134 ]
  %141 = phi i8* [ %171, %138 ], [ %137, %134 ]
  %142 = bitcast i8* %140 to <16 x i8>*
  %143 = load <16 x i8>, <16 x i8>* %142, align 1
  %144 = shufflevector <16 x i8> %143, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %145 = shufflevector <16 x i8> %143, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %146 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %144, <16 x i8> %114) #6
  %147 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %145, <16 x i8> %115) #6
  %148 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %146, <8 x i16> %147) #6
  %149 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %148, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %150 = ashr <8 x i16> %149, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %151 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %150, <8 x i16> undef) #6
  %152 = bitcast <16 x i8> %151 to <2 x i64>
  %153 = getelementptr inbounds i8, i8* %140, i64 %1
  %154 = extractelement <2 x i64> %152, i32 0
  %155 = bitcast i8* %141 to i64*
  store i64 %154, i64* %155, align 1
  %156 = getelementptr inbounds i8, i8* %141, i64 %3
  %157 = bitcast i8* %153 to <16 x i8>*
  %158 = load <16 x i8>, <16 x i8>* %157, align 1
  %159 = shufflevector <16 x i8> %158, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10>
  %160 = shufflevector <16 x i8> %158, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12>
  %161 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %159, <16 x i8> %114) #6
  %162 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %160, <16 x i8> %115) #6
  %163 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %161, <8 x i16> %162) #6
  %164 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %163, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %165 = ashr <8 x i16> %164, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %166 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %165, <8 x i16> undef) #6
  %167 = bitcast <16 x i8> %166 to <2 x i64>
  %168 = getelementptr inbounds i8, i8* %153, i64 %1
  %169 = extractelement <2 x i64> %167, i32 0
  %170 = bitcast i8* %156 to i64*
  store i64 %169, i64* %170, align 1
  %171 = getelementptr inbounds i8, i8* %156, i64 %3
  %172 = add i32 %139, -2
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %138

174:                                              ; preds = %134, %138, %107
  %175 = getelementptr inbounds i8, i8* %108, i64 8
  %176 = getelementptr inbounds i8, i8* %110, i64 8
  %177 = add nsw i32 %109, -8
  %178 = icmp sgt i32 %177, 7
  br i1 %178, label %107, label %93

179:                                              ; preds = %100, %239
  %180 = phi i8* [ %98, %100 ], [ %240, %239 ]
  %181 = phi i32 [ %97, %100 ], [ %242, %239 ]
  %182 = phi i8* [ %96, %100 ], [ %241, %239 ]
  %183 = load <8 x i16>, <8 x i16>* %101, align 1
  %184 = ashr <8 x i16> %183, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %185 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %184, <8 x i16> undef) #6
  %186 = shufflevector <16 x i8> %185, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  br i1 %102, label %239, label %187

187:                                              ; preds = %179
  %188 = getelementptr inbounds i8, i8* %180, i64 -3
  br i1 %104, label %203, label %189

189:                                              ; preds = %187
  %190 = bitcast i8* %188 to <16 x i8>*
  %191 = load <16 x i8>, <16 x i8>* %190, align 1
  %192 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 3, i32 4, i32 5, i32 6, i32 4, i32 5, i32 6, i32 7, i32 5, i32 6, i32 7, i32 8>
  %193 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %192, <16 x i8> %186) #6
  %194 = tail call <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16> %193, <8 x i16> zeroinitializer) #6
  %195 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %194, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %196 = ashr <8 x i16> %195, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %197 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %196, <8 x i16> undef) #6
  %198 = getelementptr inbounds i8, i8* %188, i64 %1
  %199 = bitcast <16 x i8> %197 to <4 x i32>
  %200 = extractelement <4 x i32> %199, i32 0
  %201 = bitcast i8* %182 to i32*
  store i32 %200, i32* %201, align 4
  %202 = getelementptr inbounds i8, i8* %182, i64 %3
  br label %203

203:                                              ; preds = %189, %187
  %204 = phi i32 [ %105, %189 ], [ %9, %187 ]
  %205 = phi i8* [ %198, %189 ], [ %188, %187 ]
  %206 = phi i8* [ %202, %189 ], [ %182, %187 ]
  br i1 %106, label %239, label %207

207:                                              ; preds = %203, %207
  %208 = phi i32 [ %237, %207 ], [ %204, %203 ]
  %209 = phi i8* [ %232, %207 ], [ %205, %203 ]
  %210 = phi i8* [ %236, %207 ], [ %206, %203 ]
  %211 = bitcast i8* %209 to <16 x i8>*
  %212 = load <16 x i8>, <16 x i8>* %211, align 1
  %213 = shufflevector <16 x i8> %212, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 3, i32 4, i32 5, i32 6, i32 4, i32 5, i32 6, i32 7, i32 5, i32 6, i32 7, i32 8>
  %214 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %213, <16 x i8> %186) #6
  %215 = tail call <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16> %214, <8 x i16> zeroinitializer) #6
  %216 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %215, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %217 = ashr <8 x i16> %216, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %218 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %217, <8 x i16> undef) #6
  %219 = getelementptr inbounds i8, i8* %209, i64 %1
  %220 = bitcast <16 x i8> %218 to <4 x i32>
  %221 = extractelement <4 x i32> %220, i32 0
  %222 = bitcast i8* %210 to i32*
  store i32 %221, i32* %222, align 4
  %223 = getelementptr inbounds i8, i8* %210, i64 %3
  %224 = bitcast i8* %219 to <16 x i8>*
  %225 = load <16 x i8>, <16 x i8>* %224, align 1
  %226 = shufflevector <16 x i8> %225, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 3, i32 4, i32 5, i32 6, i32 4, i32 5, i32 6, i32 7, i32 5, i32 6, i32 7, i32 8>
  %227 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %226, <16 x i8> %186) #6
  %228 = tail call <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16> %227, <8 x i16> zeroinitializer) #6
  %229 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %228, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %230 = ashr <8 x i16> %229, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %231 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %230, <8 x i16> undef) #6
  %232 = getelementptr inbounds i8, i8* %219, i64 %1
  %233 = bitcast <16 x i8> %231 to <4 x i32>
  %234 = extractelement <4 x i32> %233, i32 0
  %235 = bitcast i8* %223 to i32*
  store i32 %234, i32* %235, align 4
  %236 = getelementptr inbounds i8, i8* %223, i64 %3
  %237 = add i32 %208, -2
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %239, label %207

239:                                              ; preds = %203, %207, %179
  %240 = getelementptr inbounds i8, i8* %180, i64 4
  %241 = getelementptr inbounds i8, i8* %182, i64 4
  %242 = add nsw i32 %181, -4
  %243 = icmp sgt i32 %242, 3
  br i1 %243, label %179, label %330

244:                                              ; preds = %10, %24
  %245 = or i16 %23, %14
  %246 = icmp eq i16 %245, 0
  %247 = icmp sgt i32 %8, 15
  br i1 %246, label %249, label %248

248:                                              ; preds = %244
  br i1 %247, label %257, label %252

249:                                              ; preds = %244
  br i1 %247, label %295, label %290

250:                                              ; preds = %257
  %251 = and i32 %8, 15
  br label %252

252:                                              ; preds = %250, %248
  %253 = phi i8* [ %2, %248 ], [ %262, %250 ]
  %254 = phi i32 [ %8, %248 ], [ %251, %250 ]
  %255 = phi i8* [ %0, %248 ], [ %261, %250 ]
  %256 = icmp sgt i32 %254, 7
  br i1 %256, label %272, label %267

257:                                              ; preds = %248, %257
  %258 = phi i8* [ %261, %257 ], [ %0, %248 ]
  %259 = phi i32 [ %263, %257 ], [ %8, %248 ]
  %260 = phi i8* [ %262, %257 ], [ %2, %248 ]
  tail call void @aom_filter_block1d16_h8_ssse3(i8* %258, i64 %1, i8* %260, i64 %3, i32 %9, i16* %4) #6
  %261 = getelementptr inbounds i8, i8* %258, i64 16
  %262 = getelementptr inbounds i8, i8* %260, i64 16
  %263 = add nsw i32 %259, -16
  %264 = icmp sgt i32 %263, 15
  br i1 %264, label %257, label %250

265:                                              ; preds = %272
  %266 = and i32 %254, 7
  br label %267

267:                                              ; preds = %265, %252
  %268 = phi i8* [ %253, %252 ], [ %277, %265 ]
  %269 = phi i32 [ %254, %252 ], [ %266, %265 ]
  %270 = phi i8* [ %255, %252 ], [ %276, %265 ]
  %271 = icmp sgt i32 %269, 3
  br i1 %271, label %280, label %332

272:                                              ; preds = %252, %272
  %273 = phi i8* [ %276, %272 ], [ %255, %252 ]
  %274 = phi i32 [ %278, %272 ], [ %254, %252 ]
  %275 = phi i8* [ %277, %272 ], [ %253, %252 ]
  tail call void @aom_filter_block1d8_h8_ssse3(i8* %273, i64 %1, i8* %275, i64 %3, i32 %9, i16* %4) #6
  %276 = getelementptr inbounds i8, i8* %273, i64 8
  %277 = getelementptr inbounds i8, i8* %275, i64 8
  %278 = add nsw i32 %274, -8
  %279 = icmp sgt i32 %278, 7
  br i1 %279, label %272, label %265

280:                                              ; preds = %267, %280
  %281 = phi i8* [ %284, %280 ], [ %270, %267 ]
  %282 = phi i32 [ %286, %280 ], [ %269, %267 ]
  %283 = phi i8* [ %285, %280 ], [ %268, %267 ]
  tail call void @aom_filter_block1d4_h8_ssse3(i8* %281, i64 %1, i8* %283, i64 %3, i32 %9, i16* %4) #6
  %284 = getelementptr inbounds i8, i8* %281, i64 4
  %285 = getelementptr inbounds i8, i8* %283, i64 4
  %286 = add nsw i32 %282, -4
  %287 = icmp sgt i32 %286, 3
  br i1 %287, label %280, label %328

288:                                              ; preds = %295
  %289 = and i32 %8, 15
  br label %290

290:                                              ; preds = %288, %249
  %291 = phi i8* [ %2, %249 ], [ %300, %288 ]
  %292 = phi i32 [ %8, %249 ], [ %289, %288 ]
  %293 = phi i8* [ %0, %249 ], [ %299, %288 ]
  %294 = icmp sgt i32 %292, 7
  br i1 %294, label %310, label %305

295:                                              ; preds = %249, %295
  %296 = phi i8* [ %299, %295 ], [ %0, %249 ]
  %297 = phi i32 [ %301, %295 ], [ %8, %249 ]
  %298 = phi i8* [ %300, %295 ], [ %2, %249 ]
  tail call void @aom_filter_block1d16_h2_ssse3(i8* %296, i64 %1, i8* %298, i64 %3, i32 %9, i16* %4) #6
  %299 = getelementptr inbounds i8, i8* %296, i64 16
  %300 = getelementptr inbounds i8, i8* %298, i64 16
  %301 = add nsw i32 %297, -16
  %302 = icmp sgt i32 %301, 15
  br i1 %302, label %295, label %288

303:                                              ; preds = %310
  %304 = and i32 %292, 7
  br label %305

305:                                              ; preds = %303, %290
  %306 = phi i8* [ %291, %290 ], [ %315, %303 ]
  %307 = phi i32 [ %292, %290 ], [ %304, %303 ]
  %308 = phi i8* [ %293, %290 ], [ %314, %303 ]
  %309 = icmp sgt i32 %307, 3
  br i1 %309, label %318, label %332

310:                                              ; preds = %290, %310
  %311 = phi i8* [ %314, %310 ], [ %293, %290 ]
  %312 = phi i32 [ %316, %310 ], [ %292, %290 ]
  %313 = phi i8* [ %315, %310 ], [ %291, %290 ]
  tail call void @aom_filter_block1d8_h2_ssse3(i8* %311, i64 %1, i8* %313, i64 %3, i32 %9, i16* %4) #6
  %314 = getelementptr inbounds i8, i8* %311, i64 8
  %315 = getelementptr inbounds i8, i8* %313, i64 8
  %316 = add nsw i32 %312, -8
  %317 = icmp sgt i32 %316, 7
  br i1 %317, label %310, label %303

318:                                              ; preds = %305, %318
  %319 = phi i8* [ %322, %318 ], [ %308, %305 ]
  %320 = phi i32 [ %324, %318 ], [ %307, %305 ]
  %321 = phi i8* [ %323, %318 ], [ %306, %305 ]
  tail call void @aom_filter_block1d4_h2_ssse3(i8* %319, i64 %1, i8* %321, i64 %3, i32 %9, i16* %4) #6
  %322 = getelementptr inbounds i8, i8* %319, i64 4
  %323 = getelementptr inbounds i8, i8* %321, i64 4
  %324 = add nsw i32 %320, -4
  %325 = icmp sgt i32 %324, 3
  br i1 %325, label %318, label %326

326:                                              ; preds = %318
  %327 = and i32 %307, 3
  br label %332

328:                                              ; preds = %280
  %329 = and i32 %269, 3
  br label %332

330:                                              ; preds = %239
  %331 = and i32 %97, 3
  br label %332

332:                                              ; preds = %330, %328, %326, %95, %267, %305
  %333 = phi i8* [ %306, %305 ], [ %268, %267 ], [ %96, %95 ], [ %323, %326 ], [ %285, %328 ], [ %241, %330 ]
  %334 = phi i32 [ %307, %305 ], [ %269, %267 ], [ %97, %95 ], [ %327, %326 ], [ %329, %328 ], [ %331, %330 ]
  %335 = phi i8* [ %308, %305 ], [ %270, %267 ], [ %98, %95 ], [ %322, %326 ], [ %284, %328 ], [ %240, %330 ]
  %336 = icmp eq i32 %334, 0
  br i1 %336, label %338, label %337

337:                                              ; preds = %332
  tail call void @aom_convolve8_horiz_c(i8* %335, i64 %1, i8* %333, i64 %3, i16* %4, i32 %5, i16* %6, i32 %7, i32 %334, i32 %9) #6
  br label %338

338:                                              ; preds = %332, %337
  ret void
}

declare void @aom_filter_block1d16_h8_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @aom_filter_block1d8_h8_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @aom_filter_block1d4_h8_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @aom_filter_block1d16_h2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @aom_filter_block1d8_h2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @aom_filter_block1d4_h2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @aom_convolve8_horiz_c(i8*, i64, i8*, i64, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_convolve8_vert_ssse3(i8*, i64, i8*, i64, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #2 {
  %11 = load i16, i16* %6, align 2
  %12 = getelementptr inbounds i16, i16* %6, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = or i16 %13, %11
  %15 = getelementptr inbounds i16, i16* %6, i64 6
  %16 = load i16, i16* %15, align 2
  %17 = or i16 %14, %16
  %18 = getelementptr inbounds i16, i16* %6, i64 7
  %19 = load i16, i16* %18, align 2
  %20 = or i16 %17, %19
  %21 = icmp eq i16 %20, 0
  %22 = getelementptr inbounds i16, i16* %6, i64 2
  %23 = load i16, i16* %22, align 2
  br i1 %21, label %24, label %315

24:                                               ; preds = %10
  %25 = getelementptr inbounds i16, i16* %6, i64 5
  %26 = load i16, i16* %25, align 2
  %27 = or i16 %26, %23
  %28 = icmp eq i16 %27, 0
  br i1 %28, label %315, label %29

29:                                               ; preds = %24
  %30 = icmp sgt i32 %8, 15
  br i1 %30, label %31, label %43

31:                                               ; preds = %29
  %32 = mul i64 %1, -3
  %33 = bitcast i16* %6 to <8 x i16>*
  %34 = shl i64 %1, 1
  %35 = shl i64 %3, 1
  %36 = mul nsw i64 %1, 3
  %37 = shl nsw i64 %1, 2
  %38 = icmp ugt i32 %9, 1
  %39 = mul nsw i64 %1, 5
  %40 = mul nsw i64 %1, 6
  br label %58

41:                                               ; preds = %133
  %42 = and i32 %8, 15
  br label %43

43:                                               ; preds = %41, %29
  %44 = phi i8* [ %2, %29 ], [ %135, %41 ]
  %45 = phi i32 [ %8, %29 ], [ %42, %41 ]
  %46 = phi i8* [ %0, %29 ], [ %134, %41 ]
  %47 = icmp sgt i32 %45, 7
  br i1 %47, label %48, label %140

48:                                               ; preds = %43
  %49 = mul i64 %1, -3
  %50 = bitcast i16* %6 to <8 x i16>*
  %51 = shl i64 %1, 1
  %52 = shl i64 %3, 1
  %53 = mul nsw i64 %1, 3
  %54 = shl nsw i64 %1, 2
  %55 = icmp ugt i32 %9, 1
  %56 = mul nsw i64 %1, 5
  %57 = mul nsw i64 %1, 6
  br label %155

58:                                               ; preds = %31, %133
  %59 = phi i8* [ %0, %31 ], [ %134, %133 ]
  %60 = phi i32 [ %8, %31 ], [ %136, %133 ]
  %61 = phi i8* [ %2, %31 ], [ %135, %133 ]
  %62 = getelementptr inbounds i8, i8* %59, i64 %32
  %63 = load <8 x i16>, <8 x i16>* %33, align 1
  %64 = ashr <8 x i16> %63, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %65 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %64, <8 x i16> %64) #6
  %66 = shufflevector <16 x i8> %65, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3>
  %67 = shufflevector <16 x i8> %65, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5>
  %68 = getelementptr inbounds i8, i8* %62, i64 %34
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1
  %71 = getelementptr inbounds i8, i8* %62, i64 %36
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1
  %74 = getelementptr inbounds i8, i8* %62, i64 %37
  %75 = bitcast i8* %74 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 1
  %77 = bitcast <2 x i64> %76 to <16 x i8>
  br i1 %38, label %78, label %133

78:                                               ; preds = %58
  %79 = shufflevector <16 x i8> %73, <16 x i8> %77, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = shufflevector <16 x i8> %73, <16 x i8> %77, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = shufflevector <16 x i8> %70, <16 x i8> %73, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = shufflevector <16 x i8> %70, <16 x i8> %73, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %83

83:                                               ; preds = %83, %78
  %84 = phi i32 [ %9, %78 ], [ %131, %83 ]
  %85 = phi <16 x i8> [ %79, %78 ], [ %103, %83 ]
  %86 = phi <16 x i8> [ %80, %78 ], [ %102, %83 ]
  %87 = phi <16 x i8> [ %81, %78 ], [ %97, %83 ]
  %88 = phi <16 x i8> [ %82, %78 ], [ %96, %83 ]
  %89 = phi <2 x i64> [ %76, %78 ], [ %100, %83 ]
  %90 = phi i8* [ %62, %78 ], [ %126, %83 ]
  %91 = phi i8* [ %61, %78 ], [ %130, %83 ]
  %92 = getelementptr inbounds i8, i8* %90, i64 %39
  %93 = bitcast i8* %92 to <16 x i8>*
  %94 = load <16 x i8>, <16 x i8>* %93, align 1
  %95 = bitcast <2 x i64> %89 to <16 x i8>
  %96 = shufflevector <16 x i8> %95, <16 x i8> %94, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %97 = shufflevector <16 x i8> %95, <16 x i8> %94, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %98 = getelementptr inbounds i8, i8* %90, i64 %40
  %99 = bitcast i8* %98 to <2 x i64>*
  %100 = load <2 x i64>, <2 x i64>* %99, align 1
  %101 = bitcast <2 x i64> %100 to <16 x i8>
  %102 = shufflevector <16 x i8> %94, <16 x i8> %101, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %103 = shufflevector <16 x i8> %94, <16 x i8> %101, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %104 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %88, <16 x i8> %66) #6
  %105 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %86, <16 x i8> %66) #6
  %106 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %96, <16 x i8> %67) #6
  %107 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %102, <16 x i8> %67) #6
  %108 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %104, <8 x i16> %106) #6
  %109 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %105, <8 x i16> %107) #6
  %110 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %87, <16 x i8> %66) #6
  %111 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %85, <16 x i8> %66) #6
  %112 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %97, <16 x i8> %67) #6
  %113 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %103, <16 x i8> %67) #6
  %114 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %110, <8 x i16> %112) #6
  %115 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %111, <8 x i16> %113) #6
  %116 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %108, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %117 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %109, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %118 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %114, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %119 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %115, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %120 = ashr <8 x i16> %116, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %121 = ashr <8 x i16> %117, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %122 = ashr <8 x i16> %118, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %123 = ashr <8 x i16> %119, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %124 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %120, <8 x i16> %122) #6
  %125 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %121, <8 x i16> %123) #6
  %126 = getelementptr inbounds i8, i8* %90, i64 %34
  %127 = bitcast i8* %91 to <16 x i8>*
  store <16 x i8> %124, <16 x i8>* %127, align 16
  %128 = getelementptr inbounds i8, i8* %91, i64 %3
  %129 = bitcast i8* %128 to <16 x i8>*
  store <16 x i8> %125, <16 x i8>* %129, align 16
  %130 = getelementptr inbounds i8, i8* %91, i64 %35
  %131 = add i32 %84, -2
  %132 = icmp ugt i32 %131, 1
  br i1 %132, label %83, label %133

133:                                              ; preds = %83, %58
  %134 = getelementptr inbounds i8, i8* %59, i64 16
  %135 = getelementptr inbounds i8, i8* %61, i64 16
  %136 = add nsw i32 %60, -16
  %137 = icmp sgt i32 %136, 15
  br i1 %137, label %58, label %41

138:                                              ; preds = %226
  %139 = and i32 %45, 7
  br label %140

140:                                              ; preds = %138, %43
  %141 = phi i8* [ %44, %43 ], [ %228, %138 ]
  %142 = phi i32 [ %45, %43 ], [ %139, %138 ]
  %143 = phi i8* [ %46, %43 ], [ %227, %138 ]
  %144 = icmp sgt i32 %142, 3
  br i1 %144, label %145, label %412

145:                                              ; preds = %140
  %146 = mul i64 %1, -3
  %147 = bitcast i16* %6 to <8 x i16>*
  %148 = shl i64 %1, 1
  %149 = shl i64 %3, 1
  %150 = mul nsw i64 %1, 3
  %151 = shl nsw i64 %1, 2
  %152 = icmp ugt i32 %9, 1
  %153 = mul nsw i64 %1, 5
  %154 = mul nsw i64 %1, 6
  br label %231

155:                                              ; preds = %48, %226
  %156 = phi i8* [ %46, %48 ], [ %227, %226 ]
  %157 = phi i32 [ %45, %48 ], [ %229, %226 ]
  %158 = phi i8* [ %44, %48 ], [ %228, %226 ]
  %159 = getelementptr inbounds i8, i8* %156, i64 %49
  %160 = load <8 x i16>, <8 x i16>* %50, align 1
  %161 = ashr <8 x i16> %160, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %162 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %161, <8 x i16> %161) #6
  %163 = shufflevector <16 x i8> %162, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3, i32 2, i32 3>
  %164 = shufflevector <16 x i8> %162, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5, i32 4, i32 5>
  %165 = getelementptr inbounds i8, i8* %159, i64 %53
  %166 = bitcast i8* %165 to i64*
  %167 = load i64, i64* %166, align 1
  %168 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %167, i32 0
  %169 = bitcast <2 x i64> %168 to <16 x i8>
  %170 = getelementptr inbounds i8, i8* %159, i64 %54
  %171 = bitcast i8* %170 to i64*
  %172 = load i64, i64* %171, align 1
  %173 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %172, i32 0
  br i1 %55, label %174, label %226

174:                                              ; preds = %155
  %175 = bitcast <2 x i64> %173 to <16 x i8>
  %176 = shufflevector <16 x i8> %169, <16 x i8> %175, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %177 = getelementptr inbounds i8, i8* %159, i64 %51
  %178 = bitcast i8* %177 to i64*
  %179 = load i64, i64* %178, align 1
  %180 = insertelement <2 x i64> undef, i64 %179, i32 0
  %181 = bitcast <2 x i64> %180 to <16 x i8>
  %182 = shufflevector <16 x i8> %181, <16 x i8> %169, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %183

183:                                              ; preds = %183, %174
  %184 = phi i32 [ %9, %174 ], [ %224, %183 ]
  %185 = phi <16 x i8> [ %176, %174 ], [ %202, %183 ]
  %186 = phi <16 x i8> [ %182, %174 ], [ %196, %183 ]
  %187 = phi <2 x i64> [ %173, %174 ], [ %200, %183 ]
  %188 = phi i8* [ %159, %174 ], [ %217, %183 ]
  %189 = phi i8* [ %158, %174 ], [ %223, %183 ]
  %190 = getelementptr inbounds i8, i8* %188, i64 %56
  %191 = bitcast i8* %190 to i64*
  %192 = load i64, i64* %191, align 1
  %193 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %192, i32 0
  %194 = bitcast <2 x i64> %187 to <16 x i8>
  %195 = bitcast <2 x i64> %193 to <16 x i8>
  %196 = shufflevector <16 x i8> %194, <16 x i8> %195, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %197 = getelementptr inbounds i8, i8* %188, i64 %57
  %198 = bitcast i8* %197 to i64*
  %199 = load i64, i64* %198, align 1
  %200 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %199, i32 0
  %201 = bitcast <2 x i64> %200 to <16 x i8>
  %202 = shufflevector <16 x i8> %195, <16 x i8> %201, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %203 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %186, <16 x i8> %163) #6
  %204 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %185, <16 x i8> %163) #6
  %205 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %196, <16 x i8> %164) #6
  %206 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %202, <16 x i8> %164) #6
  %207 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %203, <8 x i16> %205) #6
  %208 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %204, <8 x i16> %206) #6
  %209 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %207, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %210 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %208, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %211 = ashr <8 x i16> %209, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %212 = ashr <8 x i16> %210, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %213 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %211, <8 x i16> undef) #6
  %214 = bitcast <16 x i8> %213 to <2 x i64>
  %215 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %212, <8 x i16> undef) #6
  %216 = bitcast <16 x i8> %215 to <2 x i64>
  %217 = getelementptr inbounds i8, i8* %188, i64 %51
  %218 = extractelement <2 x i64> %214, i32 0
  %219 = bitcast i8* %189 to i64*
  store i64 %218, i64* %219, align 1
  %220 = getelementptr inbounds i8, i8* %189, i64 %3
  %221 = extractelement <2 x i64> %216, i32 0
  %222 = bitcast i8* %220 to i64*
  store i64 %221, i64* %222, align 1
  %223 = getelementptr inbounds i8, i8* %189, i64 %52
  %224 = add i32 %184, -2
  %225 = icmp ugt i32 %224, 1
  br i1 %225, label %183, label %226

226:                                              ; preds = %183, %155
  %227 = getelementptr inbounds i8, i8* %156, i64 8
  %228 = getelementptr inbounds i8, i8* %158, i64 8
  %229 = add nsw i32 %157, -8
  %230 = icmp sgt i32 %229, 7
  br i1 %230, label %155, label %138

231:                                              ; preds = %145, %310
  %232 = phi i8* [ %143, %145 ], [ %311, %310 ]
  %233 = phi i32 [ %142, %145 ], [ %313, %310 ]
  %234 = phi i8* [ %141, %145 ], [ %312, %310 ]
  %235 = getelementptr inbounds i8, i8* %232, i64 %146
  %236 = load <8 x i16>, <8 x i16>* %147, align 1
  %237 = ashr <8 x i16> %236, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %238 = tail call <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16> %237, <8 x i16> undef) #6
  %239 = shufflevector <16 x i8> %238, <16 x i8> undef, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %240 = getelementptr inbounds i8, i8* %235, i64 %150
  %241 = bitcast i8* %240 to i64*
  %242 = load i64, i64* %241, align 1
  %243 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %242, i32 0
  %244 = bitcast <2 x i64> %243 to <4 x i32>
  %245 = getelementptr inbounds i8, i8* %235, i64 %151
  %246 = bitcast i8* %245 to i64*
  %247 = load i64, i64* %246, align 1
  %248 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %247, i32 0
  br i1 %152, label %249, label %310

249:                                              ; preds = %231
  %250 = getelementptr inbounds i8, i8* %235, i64 %148
  %251 = bitcast i8* %250 to i64*
  %252 = load i64, i64* %251, align 1
  %253 = insertelement <2 x i64> undef, i64 %252, i32 0
  %254 = bitcast <2 x i64> %253 to <4 x i32>
  %255 = shufflevector <4 x i32> %254, <4 x i32> %244, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %256 = bitcast <4 x i32> %255 to <16 x i8>
  %257 = bitcast <2 x i64> %248 to <4 x i32>
  %258 = shufflevector <4 x i32> %244, <4 x i32> %257, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %259 = bitcast <4 x i32> %258 to <16 x i8>
  %260 = shufflevector <16 x i8> %256, <16 x i8> %259, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  br label %261

261:                                              ; preds = %261, %249
  %262 = phi i32 [ %9, %249 ], [ %308, %261 ]
  %263 = phi <16 x i8> [ %260, %249 ], [ %282, %261 ]
  %264 = phi i8* [ %235, %249 ], [ %299, %261 ]
  %265 = phi <2 x i64> [ %248, %249 ], [ %277, %261 ]
  %266 = phi i8* [ %234, %249 ], [ %307, %261 ]
  %267 = getelementptr inbounds i8, i8* %264, i64 %153
  %268 = bitcast i8* %267 to i64*
  %269 = load i64, i64* %268, align 1
  %270 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %269, i32 0
  %271 = bitcast <2 x i64> %265 to <4 x i32>
  %272 = bitcast <2 x i64> %270 to <4 x i32>
  %273 = shufflevector <4 x i32> %271, <4 x i32> %272, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %274 = getelementptr inbounds i8, i8* %264, i64 %154
  %275 = bitcast i8* %274 to i64*
  %276 = load i64, i64* %275, align 1
  %277 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %276, i32 0
  %278 = bitcast <2 x i64> %277 to <4 x i32>
  %279 = shufflevector <4 x i32> %272, <4 x i32> %278, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %280 = bitcast <4 x i32> %273 to <16 x i8>
  %281 = bitcast <4 x i32> %279 to <16 x i8>
  %282 = shufflevector <16 x i8> %280, <16 x i8> %281, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %283 = bitcast <16 x i8> %263 to <8 x i16>
  %284 = bitcast <16 x i8> %282 to <8 x i16>
  %285 = shufflevector <8 x i16> %283, <8 x i16> %284, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %286 = shufflevector <8 x i16> %283, <8 x i16> %284, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %287 = bitcast <8 x i16> %285 to <16 x i8>
  %288 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %287, <16 x i8> %239) #6
  %289 = bitcast <8 x i16> %286 to <16 x i8>
  %290 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %289, <16 x i8> %239) #6
  %291 = tail call <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16> %288, <8 x i16> zeroinitializer) #6
  %292 = tail call <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16> %290, <8 x i16> zeroinitializer) #6
  %293 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %291, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %294 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %292, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %295 = ashr <8 x i16> %293, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %296 = ashr <8 x i16> %294, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %297 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %295, <8 x i16> undef) #6
  %298 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %296, <8 x i16> undef) #6
  %299 = getelementptr inbounds i8, i8* %264, i64 %148
  %300 = bitcast <16 x i8> %297 to <4 x i32>
  %301 = extractelement <4 x i32> %300, i32 0
  %302 = bitcast i8* %266 to i32*
  store i32 %301, i32* %302, align 4
  %303 = bitcast <16 x i8> %298 to <4 x i32>
  %304 = extractelement <4 x i32> %303, i32 0
  %305 = getelementptr inbounds i8, i8* %266, i64 %3
  %306 = bitcast i8* %305 to i32*
  store i32 %304, i32* %306, align 4
  %307 = getelementptr inbounds i8, i8* %266, i64 %149
  %308 = add i32 %262, -2
  %309 = icmp ugt i32 %308, 1
  br i1 %309, label %261, label %310

310:                                              ; preds = %261, %231
  %311 = getelementptr inbounds i8, i8* %232, i64 4
  %312 = getelementptr inbounds i8, i8* %234, i64 4
  %313 = add nsw i32 %233, -4
  %314 = icmp sgt i32 %313, 3
  br i1 %314, label %231, label %410

315:                                              ; preds = %10, %24
  %316 = or i16 %23, %14
  %317 = icmp eq i16 %316, 0
  %318 = icmp sgt i32 %8, 15
  br i1 %317, label %322, label %319

319:                                              ; preds = %315
  br i1 %318, label %320, label %325

320:                                              ; preds = %319
  %321 = mul i64 %1, -3
  br label %332

322:                                              ; preds = %315
  br i1 %318, label %375, label %370

323:                                              ; preds = %332
  %324 = and i32 %8, 15
  br label %325

325:                                              ; preds = %323, %319
  %326 = phi i8* [ %2, %319 ], [ %338, %323 ]
  %327 = phi i32 [ %8, %319 ], [ %324, %323 ]
  %328 = phi i8* [ %0, %319 ], [ %337, %323 ]
  %329 = icmp sgt i32 %327, 7
  br i1 %329, label %330, label %343

330:                                              ; preds = %325
  %331 = mul i64 %1, -3
  br label %350

332:                                              ; preds = %320, %332
  %333 = phi i8* [ %0, %320 ], [ %337, %332 ]
  %334 = phi i32 [ %8, %320 ], [ %339, %332 ]
  %335 = phi i8* [ %2, %320 ], [ %338, %332 ]
  %336 = getelementptr inbounds i8, i8* %333, i64 %321
  tail call void @aom_filter_block1d16_v8_ssse3(i8* %336, i64 %1, i8* %335, i64 %3, i32 %9, i16* %6) #6
  %337 = getelementptr inbounds i8, i8* %333, i64 16
  %338 = getelementptr inbounds i8, i8* %335, i64 16
  %339 = add nsw i32 %334, -16
  %340 = icmp sgt i32 %339, 15
  br i1 %340, label %332, label %323

341:                                              ; preds = %350
  %342 = and i32 %327, 7
  br label %343

343:                                              ; preds = %341, %325
  %344 = phi i8* [ %326, %325 ], [ %356, %341 ]
  %345 = phi i32 [ %327, %325 ], [ %342, %341 ]
  %346 = phi i8* [ %328, %325 ], [ %355, %341 ]
  %347 = icmp sgt i32 %345, 3
  br i1 %347, label %348, label %412

348:                                              ; preds = %343
  %349 = mul i64 %1, -3
  br label %359

350:                                              ; preds = %330, %350
  %351 = phi i8* [ %328, %330 ], [ %355, %350 ]
  %352 = phi i32 [ %327, %330 ], [ %357, %350 ]
  %353 = phi i8* [ %326, %330 ], [ %356, %350 ]
  %354 = getelementptr inbounds i8, i8* %351, i64 %331
  tail call void @aom_filter_block1d8_v8_ssse3(i8* %354, i64 %1, i8* %353, i64 %3, i32 %9, i16* %6) #6
  %355 = getelementptr inbounds i8, i8* %351, i64 8
  %356 = getelementptr inbounds i8, i8* %353, i64 8
  %357 = add nsw i32 %352, -8
  %358 = icmp sgt i32 %357, 7
  br i1 %358, label %350, label %341

359:                                              ; preds = %348, %359
  %360 = phi i8* [ %346, %348 ], [ %364, %359 ]
  %361 = phi i32 [ %345, %348 ], [ %366, %359 ]
  %362 = phi i8* [ %344, %348 ], [ %365, %359 ]
  %363 = getelementptr inbounds i8, i8* %360, i64 %349
  tail call void @aom_filter_block1d4_v8_ssse3(i8* %363, i64 %1, i8* %362, i64 %3, i32 %9, i16* %6) #6
  %364 = getelementptr inbounds i8, i8* %360, i64 4
  %365 = getelementptr inbounds i8, i8* %362, i64 4
  %366 = add nsw i32 %361, -4
  %367 = icmp sgt i32 %366, 3
  br i1 %367, label %359, label %408

368:                                              ; preds = %375
  %369 = and i32 %8, 15
  br label %370

370:                                              ; preds = %368, %322
  %371 = phi i8* [ %2, %322 ], [ %380, %368 ]
  %372 = phi i32 [ %8, %322 ], [ %369, %368 ]
  %373 = phi i8* [ %0, %322 ], [ %379, %368 ]
  %374 = icmp sgt i32 %372, 7
  br i1 %374, label %390, label %385

375:                                              ; preds = %322, %375
  %376 = phi i8* [ %379, %375 ], [ %0, %322 ]
  %377 = phi i32 [ %381, %375 ], [ %8, %322 ]
  %378 = phi i8* [ %380, %375 ], [ %2, %322 ]
  tail call void @aom_filter_block1d16_v2_ssse3(i8* %376, i64 %1, i8* %378, i64 %3, i32 %9, i16* %6) #6
  %379 = getelementptr inbounds i8, i8* %376, i64 16
  %380 = getelementptr inbounds i8, i8* %378, i64 16
  %381 = add nsw i32 %377, -16
  %382 = icmp sgt i32 %381, 15
  br i1 %382, label %375, label %368

383:                                              ; preds = %390
  %384 = and i32 %372, 7
  br label %385

385:                                              ; preds = %383, %370
  %386 = phi i8* [ %371, %370 ], [ %395, %383 ]
  %387 = phi i32 [ %372, %370 ], [ %384, %383 ]
  %388 = phi i8* [ %373, %370 ], [ %394, %383 ]
  %389 = icmp sgt i32 %387, 3
  br i1 %389, label %398, label %412

390:                                              ; preds = %370, %390
  %391 = phi i8* [ %394, %390 ], [ %373, %370 ]
  %392 = phi i32 [ %396, %390 ], [ %372, %370 ]
  %393 = phi i8* [ %395, %390 ], [ %371, %370 ]
  tail call void @aom_filter_block1d8_v2_ssse3(i8* %391, i64 %1, i8* %393, i64 %3, i32 %9, i16* %6) #6
  %394 = getelementptr inbounds i8, i8* %391, i64 8
  %395 = getelementptr inbounds i8, i8* %393, i64 8
  %396 = add nsw i32 %392, -8
  %397 = icmp sgt i32 %396, 7
  br i1 %397, label %390, label %383

398:                                              ; preds = %385, %398
  %399 = phi i8* [ %402, %398 ], [ %388, %385 ]
  %400 = phi i32 [ %404, %398 ], [ %387, %385 ]
  %401 = phi i8* [ %403, %398 ], [ %386, %385 ]
  tail call void @aom_filter_block1d4_v2_ssse3(i8* %399, i64 %1, i8* %401, i64 %3, i32 %9, i16* %6) #6
  %402 = getelementptr inbounds i8, i8* %399, i64 4
  %403 = getelementptr inbounds i8, i8* %401, i64 4
  %404 = add nsw i32 %400, -4
  %405 = icmp sgt i32 %404, 3
  br i1 %405, label %398, label %406

406:                                              ; preds = %398
  %407 = and i32 %387, 3
  br label %412

408:                                              ; preds = %359
  %409 = and i32 %345, 3
  br label %412

410:                                              ; preds = %310
  %411 = and i32 %142, 3
  br label %412

412:                                              ; preds = %410, %408, %406, %140, %343, %385
  %413 = phi i8* [ %386, %385 ], [ %344, %343 ], [ %141, %140 ], [ %403, %406 ], [ %365, %408 ], [ %312, %410 ]
  %414 = phi i32 [ %387, %385 ], [ %345, %343 ], [ %142, %140 ], [ %407, %406 ], [ %409, %408 ], [ %411, %410 ]
  %415 = phi i8* [ %388, %385 ], [ %346, %343 ], [ %143, %140 ], [ %402, %406 ], [ %364, %408 ], [ %311, %410 ]
  %416 = icmp eq i32 %414, 0
  br i1 %416, label %418, label %417

417:                                              ; preds = %412
  tail call void @aom_convolve8_vert_c(i8* %415, i64 %1, i8* %413, i64 %3, i16* %4, i32 %5, i16* %6, i32 %7, i32 %414, i32 %9) #6
  br label %418

418:                                              ; preds = %412, %417
  ret void
}

declare void @aom_filter_block1d16_v8_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @aom_filter_block1d8_v8_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @aom_filter_block1d4_v8_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @aom_filter_block1d16_v2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @aom_filter_block1d8_v2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @aom_filter_block1d4_v2_ssse3(i8*, i64, i8*, i64, i32, i16*) local_unnamed_addr #3

declare void @aom_convolve8_vert_c(i8*, i64, i8*, i64, i16*, i32, i16*, i32, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packsswb.128(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #4

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #5

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.phadd.sw.128(<8 x i16>, <8 x i16>) #4

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
