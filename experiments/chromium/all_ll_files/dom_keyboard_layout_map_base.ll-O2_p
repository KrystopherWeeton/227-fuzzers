; ModuleID = '../../ui/events/keycodes/dom/dom_keyboard_layout_map_base.cc'
source_filename = "../../ui/events/keycodes/dom/dom_keyboard_layout_map_base.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.ui::DomKeyboardLayoutMapBase" = type { i32 (...)** }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"class.ui::DomKeyboardLayoutManager" = type { %"class.std::__1::vector.3", %"class.std::__1::map" }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { i32*, i32*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i32* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.10", %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { i64 }
%"class.ui::DomKeyboardLayout" = type { %"class.base::flat_map.19" }
%"class.base::flat_map.19" = type { %"class.base::internal::flat_tree.20" }
%"class.base::internal::flat_tree.20" = type { %"class.std::__1::vector.21" }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { %"struct.std::__1::pair.23"*, %"struct.std::__1::pair.23"*, %"class.std::__1::__compressed_pair.24" }
%"struct.std::__1::pair.23" = type opaque
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::pair.23"* }

@_ZTVN2ui24DomKeyboardLayoutMapBaseE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ui::DomKeyboardLayoutMapBase"*)* @_ZN2ui24DomKeyboardLayoutMapBaseD2Ev to i8*), i8* bitcast (void (%"class.ui::DomKeyboardLayoutMapBase"*)* @_ZN2ui24DomKeyboardLayoutMapBaseD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZN2ui31kWritingSystemKeyDomCodeEntriesE = external local_unnamed_addr constant i64, align 8
@_ZN2ui27writing_system_key_domcodesE = external local_unnamed_addr constant [0 x i32], align 4
@_ZN2ui26kHankakuZenkakuPlaceholderE = external local_unnamed_addr constant i32, align 4

@_ZN2ui24DomKeyboardLayoutMapBaseD1Ev = hidden unnamed_addr alias void (%"class.ui::DomKeyboardLayoutMapBase"*), void (%"class.ui::DomKeyboardLayoutMapBase"*)* @_ZN2ui24DomKeyboardLayoutMapBaseD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2ui24DomKeyboardLayoutMapBaseC2Ev(%"class.ui::DomKeyboardLayoutMapBase"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::DomKeyboardLayoutMapBase", %"class.ui::DomKeyboardLayoutMapBase"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN2ui24DomKeyboardLayoutMapBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2ui24DomKeyboardLayoutMapBaseD2Ev(%"class.ui::DomKeyboardLayoutMapBase"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN2ui24DomKeyboardLayoutMapBaseD0Ev(%"class.ui::DomKeyboardLayoutMapBase"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #10
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui24DomKeyboardLayoutMapBase8GenerateEv(%"class.base::flat_map"* noalias sret, %"class.ui::DomKeyboardLayoutMapBase"*) local_unnamed_addr #4 align 2 {
  %3 = bitcast %"class.ui::DomKeyboardLayoutMapBase"* %1 to i32 (%"class.ui::DomKeyboardLayoutMapBase"*)***
  %4 = load i32 (%"class.ui::DomKeyboardLayoutMapBase"*)**, i32 (%"class.ui::DomKeyboardLayoutMapBase"*)*** %3, align 8
  %5 = getelementptr inbounds i32 (%"class.ui::DomKeyboardLayoutMapBase"*)*, i32 (%"class.ui::DomKeyboardLayoutMapBase"*)** %4, i64 2
  %6 = load i32 (%"class.ui::DomKeyboardLayoutMapBase"*)*, i32 (%"class.ui::DomKeyboardLayoutMapBase"*)** %5, align 8
  %7 = tail call i32 %6(%"class.ui::DomKeyboardLayoutMapBase"* %1) #11
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %2
  %10 = bitcast %"class.base::flat_map"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false)
  br label %56

11:                                               ; preds = %2
  %12 = tail call i8* @_Znwm(i64 48) #12
  %13 = bitcast i8* %12 to %"class.ui::DomKeyboardLayoutManager"*
  tail call void @_ZN2ui24DomKeyboardLayoutManagerC1Ev(%"class.ui::DomKeyboardLayoutManager"* nonnull %13) #11
  %14 = zext i32 %7 to i64
  %15 = load i64, i64* @_ZN2ui31kWritingSystemKeyDomCodeEntriesE, align 8
  %16 = icmp eq i64 %15, 0
  %17 = bitcast %"class.ui::DomKeyboardLayoutMapBase"* %1 to i32 (%"class.ui::DomKeyboardLayoutMapBase"*, i32, i32)***
  %18 = load i32, i32* @_ZN2ui26kHankakuZenkakuPlaceholderE, align 4
  br label %21

19:                                               ; preds = %49
  %20 = icmp eq i64 %51, %14
  br i1 %20, label %52, label %21

21:                                               ; preds = %19, %11
  %22 = phi i64 [ 0, %11 ], [ %51, %19 ]
  %23 = trunc i64 %22 to i32
  %24 = tail call %"class.ui::DomKeyboardLayout"* @_ZN2ui24DomKeyboardLayoutManager9GetLayoutEi(%"class.ui::DomKeyboardLayoutManager"* nonnull %13, i32 %23) #11
  br i1 %16, label %49, label %25

25:                                               ; preds = %21, %46
  %26 = phi i64 [ %47, %46 ], [ 0, %21 ]
  %27 = getelementptr inbounds [0 x i32], [0 x i32]* @_ZN2ui27writing_system_key_domcodesE, i64 0, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = load i32 (%"class.ui::DomKeyboardLayoutMapBase"*, i32, i32)**, i32 (%"class.ui::DomKeyboardLayoutMapBase"*, i32, i32)*** %17, align 8
  %30 = getelementptr inbounds i32 (%"class.ui::DomKeyboardLayoutMapBase"*, i32, i32)*, i32 (%"class.ui::DomKeyboardLayoutMapBase"*, i32, i32)** %29, i64 3
  %31 = load i32 (%"class.ui::DomKeyboardLayoutMapBase"*, i32, i32)*, i32 (%"class.ui::DomKeyboardLayoutMapBase"*, i32, i32)** %30, align 8
  %32 = tail call i32 %31(%"class.ui::DomKeyboardLayoutMapBase"* %1, i32 %28, i32 %23) #11
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %46, label %34

34:                                               ; preds = %25
  %35 = and i32 %32, 6291456
  switch i32 %35, label %40 [
    i32 4194304, label %36
    i32 6291456, label %38
  ]

36:                                               ; preds = %34
  %37 = and i32 %32, 2097151
  br label %42

38:                                               ; preds = %34
  %39 = and i32 %32, 2097151
  br label %42

40:                                               ; preds = %34
  %41 = icmp eq i32 %32, 2098973
  br i1 %41, label %42, label %46

42:                                               ; preds = %40, %38, %36
  %43 = phi i32 [ %37, %36 ], [ %39, %38 ], [ %18, %40 ]
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %46, label %45

45:                                               ; preds = %42
  tail call void @_ZN2ui17DomKeyboardLayout13AddKeyMappingENS_7DomCodeEj(%"class.ui::DomKeyboardLayout"* %24, i32 %28, i32 %43) #11
  br label %46

46:                                               ; preds = %45, %42, %40, %25
  %47 = add nuw i64 %26, 1
  %48 = icmp eq i64 %47, %15
  br i1 %48, label %49, label %25

49:                                               ; preds = %46, %21
  %50 = tail call zeroext i1 @_ZN2ui17DomKeyboardLayout14IsAsciiCapableEv(%"class.ui::DomKeyboardLayout"* %24) #11
  %51 = add nuw nsw i64 %22, 1
  br i1 %50, label %54, label %19

52:                                               ; preds = %19
  %53 = tail call %"class.ui::DomKeyboardLayout"* @_ZN2ui24DomKeyboardLayoutManager26GetFirstAsciiCapableLayoutEv(%"class.ui::DomKeyboardLayoutManager"* nonnull %13) #11
  br label %54

54:                                               ; preds = %49, %52
  %55 = phi %"class.ui::DomKeyboardLayout"* [ %53, %52 ], [ %24, %49 ]
  tail call void @_ZN2ui17DomKeyboardLayout6GetMapEv(%"class.base::flat_map"* sret %0, %"class.ui::DomKeyboardLayout"* %55) #11
  tail call void @_ZN2ui24DomKeyboardLayoutManagerD1Ev(%"class.ui::DomKeyboardLayoutManager"* nonnull %13) #11
  tail call void @_ZdlPv(i8* nonnull %12) #12
  br label %56

56:                                               ; preds = %54, %9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

declare %"class.ui::DomKeyboardLayout"* @_ZN2ui24DomKeyboardLayoutManager9GetLayoutEi(%"class.ui::DomKeyboardLayoutManager"*, i32) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui24DomKeyboardLayoutMapBase14PopulateLayoutEjPNS_17DomKeyboardLayoutE(%"class.ui::DomKeyboardLayoutMapBase"*, i32, %"class.ui::DomKeyboardLayout"*) local_unnamed_addr #4 align 2 {
  %4 = load i64, i64* @_ZN2ui31kWritingSystemKeyDomCodeEntriesE, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = bitcast %"class.ui::DomKeyboardLayoutMapBase"* %0 to i32 (%"class.ui::DomKeyboardLayoutMapBase"*, i32, i32)***
  %8 = load i32, i32* @_ZN2ui26kHankakuZenkakuPlaceholderE, align 4
  br label %10

9:                                                ; preds = %31, %3
  ret void

10:                                               ; preds = %6, %31
  %11 = phi i64 [ 0, %6 ], [ %32, %31 ]
  %12 = getelementptr inbounds [0 x i32], [0 x i32]* @_ZN2ui27writing_system_key_domcodesE, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = load i32 (%"class.ui::DomKeyboardLayoutMapBase"*, i32, i32)**, i32 (%"class.ui::DomKeyboardLayoutMapBase"*, i32, i32)*** %7, align 8
  %15 = getelementptr inbounds i32 (%"class.ui::DomKeyboardLayoutMapBase"*, i32, i32)*, i32 (%"class.ui::DomKeyboardLayoutMapBase"*, i32, i32)** %14, i64 3
  %16 = load i32 (%"class.ui::DomKeyboardLayoutMapBase"*, i32, i32)*, i32 (%"class.ui::DomKeyboardLayoutMapBase"*, i32, i32)** %15, align 8
  %17 = tail call i32 %16(%"class.ui::DomKeyboardLayoutMapBase"* %0, i32 %13, i32 %1) #11
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %31, label %19

19:                                               ; preds = %10
  %20 = and i32 %17, 6291456
  switch i32 %20, label %25 [
    i32 4194304, label %21
    i32 6291456, label %23
  ]

21:                                               ; preds = %19
  %22 = and i32 %17, 2097151
  br label %27

23:                                               ; preds = %19
  %24 = and i32 %17, 2097151
  br label %27

25:                                               ; preds = %19
  %26 = icmp eq i32 %17, 2098973
  br i1 %26, label %27, label %31

27:                                               ; preds = %25, %23, %21
  %28 = phi i32 [ %22, %21 ], [ %24, %23 ], [ %8, %25 ]
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %31, label %30

30:                                               ; preds = %27
  tail call void @_ZN2ui17DomKeyboardLayout13AddKeyMappingENS_7DomCodeEj(%"class.ui::DomKeyboardLayout"* %2, i32 %13, i32 %28) #11
  br label %31

31:                                               ; preds = %25, %30, %27, %10
  %32 = add nuw i64 %11, 1
  %33 = icmp ult i64 %32, %4
  br i1 %33, label %10, label %9
}

declare zeroext i1 @_ZN2ui17DomKeyboardLayout14IsAsciiCapableEv(%"class.ui::DomKeyboardLayout"*) local_unnamed_addr #6

declare void @_ZN2ui17DomKeyboardLayout6GetMapEv(%"class.base::flat_map"* sret, %"class.ui::DomKeyboardLayout"*) local_unnamed_addr #6

declare %"class.ui::DomKeyboardLayout"* @_ZN2ui24DomKeyboardLayoutManager26GetFirstAsciiCapableLayoutEv(%"class.ui::DomKeyboardLayoutManager"*) local_unnamed_addr #6

declare void @_ZN2ui17DomKeyboardLayout13AddKeyMappingENS_7DomCodeEj(%"class.ui::DomKeyboardLayout"*, i32, i32) local_unnamed_addr #6

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare void @_ZN2ui24DomKeyboardLayoutManagerC1Ev(%"class.ui::DomKeyboardLayoutManager"*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN2ui24DomKeyboardLayoutManagerD1Ev(%"class.ui::DomKeyboardLayoutManager"*) unnamed_addr #8

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
