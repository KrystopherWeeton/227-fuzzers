; ModuleID = '../../third_party/blink/renderer/core/css/css_inherited_value.cc'
source_filename = "../../third_party/blink/renderer/core/css/css_inherited_value.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::CSSInheritedValue" = type { %"class.blink::CSSValue" }
%"class.blink::CSSValue" = type { i8, i8, i8 }
%"class.blink::CSSValuePool" = type { %"class.blink::Member", %"class.blink::Member.2", %"class.blink::Member.4", %"class.blink::Member.6", %"class.blink::Member.8", %"class.blink::Member.10", %"class.blink::Member.12", %"class.blink::Member.14", %"class.blink::Member.14", %"class.blink::Member.14", %"class.blink::HeapVector", %"class.blink::HeapVector.20", %"class.blink::HeapVector.20", %"class.blink::HeapVector.20", %"class.blink::HeapHashMap", %"class.blink::HeapHashMap.33", %"class.blink::HeapHashMap.40" }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::CSSInheritedValue"* }
%"class.blink::Member.2" = type { %"class.blink::MemberBase.3" }
%"class.blink::MemberBase.3" = type { %"class.blink::CSSInitialValue"* }
%"class.blink::CSSInitialValue" = type { %"class.blink::CSSValue" }
%"class.blink::Member.4" = type { %"class.blink::MemberBase.5" }
%"class.blink::MemberBase.5" = type { %"class.blink::cssvalue::CSSUnsetValue"* }
%"class.blink::cssvalue::CSSUnsetValue" = type { %"class.blink::CSSValue" }
%"class.blink::Member.6" = type { %"class.blink::MemberBase.7" }
%"class.blink::MemberBase.7" = type { %"class.blink::cssvalue::CSSRevertValue"* }
%"class.blink::cssvalue::CSSRevertValue" = type { %"class.blink::CSSValue" }
%"class.blink::Member.8" = type { %"class.blink::MemberBase.9" }
%"class.blink::MemberBase.9" = type { %"class.blink::CSSInvalidVariableValue"* }
%"class.blink::CSSInvalidVariableValue" = type { %"class.blink::CSSValue" }
%"class.blink::Member.10" = type { %"class.blink::MemberBase.11" }
%"class.blink::MemberBase.11" = type { %"class.blink::CSSCyclicVariableValue"* }
%"class.blink::CSSCyclicVariableValue" = type { %"class.blink::CSSInvalidVariableValue" }
%"class.blink::Member.12" = type { %"class.blink::MemberBase.13" }
%"class.blink::MemberBase.13" = type { %"class.blink::CSSInitialColorValue"* }
%"class.blink::CSSInitialColorValue" = type { %"class.blink::CSSValue" }
%"class.blink::Member.14" = type { %"class.blink::MemberBase.15" }
%"class.blink::MemberBase.15" = type { %"class.blink::cssvalue::CSSColor"* }
%"class.blink::cssvalue::CSSColor" = type { %"class.blink::CSSValue", %"class.blink::Color" }
%"class.blink::Color" = type { i32 }
%"class.blink::HeapVector" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [7104 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.blink::Member.18"*, i32, i32 }
%"class.blink::Member.18" = type { %"class.blink::MemberBase.19" }
%"class.blink::MemberBase.19" = type { %"class.blink::CSSIdentifierValue"* }
%"class.blink::CSSIdentifierValue" = type { %"class.blink::CSSValue", i32 }
%"class.blink::HeapVector.20" = type { %"class.WTF::Vector.23" }
%"class.WTF::Vector.23" = type { %"class.WTF::VectorBuffer.24" }
%"class.WTF::VectorBuffer.24" = type { %"class.WTF::VectorBufferBase.25", [2048 x i8] }
%"class.WTF::VectorBufferBase.25" = type { %"class.blink::Member.26"*, i32, i32 }
%"class.blink::Member.26" = type { %"class.blink::MemberBase.27" }
%"class.blink::MemberBase.27" = type { %"class.blink::CSSNumericLiteralValue"* }
%"class.blink::CSSNumericLiteralValue" = type { %"class.blink::CSSPrimitiveValue", double }
%"class.blink::CSSPrimitiveValue" = type { %"class.blink::CSSValue" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { i32, %"class.blink::Member.14" }
%"class.blink::HeapHashMap.33" = type { %"class.WTF::HashMap.36" }
%"class.WTF::HashMap.36" = type { %"class.WTF::HashTable.37" }
%"class.WTF::HashTable.37" = type <{ %"struct.WTF::KeyValuePair.39"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.39" = type { %"class.WTF::AtomicString", %"class.blink::Member.50" }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::Member.50" = type { %"class.blink::MemberBase.51" }
%"class.blink::MemberBase.51" = type { %"class.blink::CSSValueList"* }
%"class.blink::CSSValueList" = type { %"class.blink::CSSValue", %"class.blink::HeapVector.52" }
%"class.blink::HeapVector.52" = type { %"class.WTF::Vector.55" }
%"class.WTF::Vector.55" = type { %"class.WTF::VectorBuffer.56" }
%"class.WTF::VectorBuffer.56" = type { %"class.WTF::VectorBufferBase.57", [32 x i8] }
%"class.WTF::VectorBufferBase.57" = type { %"class.blink::Member.58"*, i32, i32 }
%"class.blink::Member.58" = type { %"class.blink::MemberBase.59" }
%"class.blink::MemberBase.59" = type { %"class.blink::CSSValue"* }
%"class.blink::HeapHashMap.40" = type { %"class.WTF::HashMap.43" }
%"class.WTF::HashMap.43" = type { %"class.WTF::HashTable.44" }
%"class.WTF::HashTable.44" = type <{ %"struct.WTF::KeyValuePair.46"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.46" = type { %"class.WTF::String", %"class.blink::Member.48" }
%"class.blink::Member.48" = type { %"class.blink::MemberBase.49" }
%"class.blink::MemberBase.49" = type { %"class.blink::CSSFontFamilyValue"* }
%"class.blink::CSSFontFamilyValue" = type { %"class.blink::CSSValue", %"class.WTF::String" }

@.str = private unnamed_addr constant [8 x i8] c"inherit\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::CSSInheritedValue"* @_ZN5blink17CSSInheritedValue6CreateEv() local_unnamed_addr #0 align 2 {
  %1 = tail call dereferenceable(13464) %"class.blink::CSSValuePool"* @_ZN5blink12CssValuePoolEv() #2
  %2 = getelementptr inbounds %"class.blink::CSSValuePool", %"class.blink::CSSValuePool"* %1, i64 0, i32 0, i32 0, i32 0
  %3 = load %"class.blink::CSSInheritedValue"*, %"class.blink::CSSInheritedValue"** %2, align 8
  ret %"class.blink::CSSInheritedValue"* %3
}

declare dereferenceable(13464) %"class.blink::CSSValuePool"* @_ZN5blink12CssValuePoolEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink17CSSInheritedValue13CustomCSSTextEv(%"class.blink::CSSInheritedValue"* nocapture readnone) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i64 7) #2
  %3 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  ret %"class.WTF::StringImpl"* %4
}

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
