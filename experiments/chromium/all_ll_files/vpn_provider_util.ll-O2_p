; ModuleID = '../../ppapi/shared_impl/vpn_provider_util.cc'
source_filename = "../../ppapi/shared_impl/vpn_provider_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ppapi::VpnProviderSharedBuffer" = type { i32, i32, %"class.base::UnsafeSharedMemoryRegion", %"class.base::WritableSharedMemoryMapping", %"class.std::__1::vector" }
%"class.base::UnsafeSharedMemoryRegion" = type { %"class.base::subtle::PlatformSharedMemoryRegion" }
%"class.base::subtle::PlatformSharedMemoryRegion" = type { %"struct.base::subtle::ScopedFDPair", i32, i64, %"class.base::UnguessableToken" }
%"struct.base::subtle::ScopedFDPair" = type { %"class.base::ScopedGeneric", %"class.base::ScopedGeneric" }
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.base::WritableSharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"class.base::SharedMemoryMapping" = type { i32 (...)**, i8*, i64, i64, %"class.base::UnguessableToken" }
%"class.std::__1::vector" = type { i64*, i64, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }

$_ZNSt3__16vectorIbNS_9allocatorIbEEEC2EmRKb = comdat any

@.str = private unnamed_addr constant [29 x i8] c"../../base/containers/span.h\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"offset <= size()\00", align 1

@_ZN5ppapi23VpnProviderSharedBufferC1EjjN4base24UnsafeSharedMemoryRegionENS1_27WritableSharedMemoryMappingE = hidden unnamed_addr alias void (%"class.ppapi::VpnProviderSharedBuffer"*, i32, i32, %"class.base::UnsafeSharedMemoryRegion"*, %"class.base::WritableSharedMemoryMapping"*), void (%"class.ppapi::VpnProviderSharedBuffer"*, i32, i32, %"class.base::UnsafeSharedMemoryRegion"*, %"class.base::WritableSharedMemoryMapping"*)* @_ZN5ppapi23VpnProviderSharedBufferC2EjjN4base24UnsafeSharedMemoryRegionENS1_27WritableSharedMemoryMappingE
@_ZN5ppapi23VpnProviderSharedBufferD1Ev = hidden unnamed_addr alias void (%"class.ppapi::VpnProviderSharedBuffer"*), void (%"class.ppapi::VpnProviderSharedBuffer"*)* @_ZN5ppapi23VpnProviderSharedBufferD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5ppapi23VpnProviderSharedBufferC2EjjN4base24UnsafeSharedMemoryRegionENS1_27WritableSharedMemoryMappingE(%"class.ppapi::VpnProviderSharedBuffer"*, i32, i32, %"class.base::UnsafeSharedMemoryRegion"*, %"class.base::WritableSharedMemoryMapping"*) unnamed_addr #0 align 2 {
  %6 = alloca i8, align 1
  %7 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 0
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 1
  store i32 %2, i32* %8, align 4
  %9 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 2
  tail call void @_ZN4base24UnsafeSharedMemoryRegionC1EOS0_(%"class.base::UnsafeSharedMemoryRegion"* %9, %"class.base::UnsafeSharedMemoryRegion"* dereferenceable(64) %3) #7
  %10 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 3
  tail call void @_ZN4base27WritableSharedMemoryMappingC1EOS0_(%"class.base::WritableSharedMemoryMapping"* %10, %"class.base::WritableSharedMemoryMapping"* dereferenceable(48) %4) #7
  %11 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 4
  %12 = zext i32 %1 to i64
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #7
  store i8 1, i8* %6, align 1
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEEC2EmRKb(%"class.std::__1::vector"* %11, i64 %12, i8* nonnull dereferenceable(1) %6)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #7
  ret void
}

declare void @_ZN4base24UnsafeSharedMemoryRegionC1EOS0_(%"class.base::UnsafeSharedMemoryRegion"*, %"class.base::UnsafeSharedMemoryRegion"* dereferenceable(64)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base27WritableSharedMemoryMappingC1EOS0_(%"class.base::WritableSharedMemoryMapping"*, %"class.base::WritableSharedMemoryMapping"* dereferenceable(48)) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEEC2EmRKb(%"class.std::__1::vector"*, i64, i8* dereferenceable(1)) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 2, i32 0, i32 0
  %6 = icmp eq i64 %1, 0
  %7 = bitcast %"class.std::__1::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false)
  br i1 %6, label %48, label %8

8:                                                ; preds = %3
  %9 = icmp slt i64 %1, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %11) #8
  unreachable

12:                                               ; preds = %8
  %13 = add nsw i64 %1, -1
  %14 = lshr i64 %13, 6
  %15 = add nuw nsw i64 %14, 1
  %16 = shl nuw nsw i64 %15, 3
  %17 = tail call i8* @_Znwm(i64 %16) #9
  %18 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %17, i8** %18, align 8
  store i64 0, i64* %4, align 8
  store i64 %15, i64* %5, align 8
  %19 = load i8, i8* %2, align 1, !range !2
  %20 = icmp eq i8 %19, 0
  store i64 %1, i64* %4, align 8
  %21 = icmp ult i64 %1, 65
  %22 = bitcast i8* %17 to i64*
  %23 = getelementptr inbounds i64, i64* %22, i64 %14
  %24 = select i1 %21, i64* %22, i64* %23
  store i64 0, i64* %24, align 8
  %25 = lshr i64 %1, 6
  %26 = shl nuw nsw i64 %25, 3
  br i1 %20, label %37, label %27

27:                                               ; preds = %12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -1, i64 %26, i1 false) #7
  %28 = and i64 %1, 63
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %48, label %30

30:                                               ; preds = %27
  %31 = bitcast i8* %17 to i64*
  %32 = getelementptr inbounds i64, i64* %31, i64 %25
  %33 = sub nuw nsw i64 64, %28
  %34 = lshr i64 -1, %33
  %35 = load i64, i64* %32, align 8
  %36 = or i64 %35, %34
  store i64 %36, i64* %32, align 8
  br label %48

37:                                               ; preds = %12
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 %26, i1 false) #7
  %38 = and i64 %1, 63
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %37
  %41 = bitcast i8* %17 to i64*
  %42 = getelementptr inbounds i64, i64* %41, i64 %25
  %43 = sub nuw nsw i64 64, %38
  %44 = lshr i64 -1, %43
  %45 = xor i64 %44, -1
  %46 = load i64, i64* %42, align 8
  %47 = and i64 %46, %45
  store i64 %47, i64* %42, align 8
  br label %48

48:                                               ; preds = %40, %37, %30, %27, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5ppapi23VpnProviderSharedBufferD2Ev(%"class.ppapi::VpnProviderSharedBuffer"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 4, i32 0
  %3 = load i64*, i64** %2, align 8
  %4 = icmp eq i64* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast i64* %3 to i8*
  tail call void @_ZdlPv(i8* %6) #9
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 3, i32 0
  tail call void @_ZN4base19SharedMemoryMappingD2Ev(%"class.base::SharedMemoryMapping"* %8) #7
  %9 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 2
  tail call void @_ZN4base24UnsafeSharedMemoryRegionD1Ev(%"class.base::UnsafeSharedMemoryRegion"* %9) #7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4base19SharedMemoryMappingD2Ev(%"class.base::SharedMemoryMapping"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base24UnsafeSharedMemoryRegionD1Ev(%"class.base::UnsafeSharedMemoryRegion"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5ppapi23VpnProviderSharedBuffer12GetAvailableEPj(%"class.ppapi::VpnProviderSharedBuffer"* nocapture readonly, i32*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %26, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 4, i32 0
  %8 = load i64*, i64** %7, align 8
  %9 = zext i32 %4 to i64
  br label %10

10:                                               ; preds = %6, %23
  %11 = phi i64 [ 0, %6 ], [ %24, %23 ]
  %12 = lshr i64 %11, 6
  %13 = getelementptr inbounds i64, i64* %8, i64 %12
  %14 = and i64 %11, 63
  %15 = shl i64 1, %14
  %16 = load i64, i64* %13, align 8
  %17 = and i64 %16, %15
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %10
  %20 = icmp eq i32* %1, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %19
  %22 = trunc i64 %11 to i32
  store i32 %22, i32* %1, align 4
  br label %26

23:                                               ; preds = %10
  %24 = add nuw nsw i64 %11, 1
  %25 = icmp ult i64 %24, %9
  br i1 %25, label %10, label %26

26:                                               ; preds = %23, %2, %21, %19
  %27 = phi i1 [ true, %19 ], [ true, %21 ], [ false, %2 ], [ false, %23 ]
  ret i1 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5ppapi23VpnProviderSharedBuffer12SetAvailableEjb(%"class.ppapi::VpnProviderSharedBuffer"* nocapture readonly, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ugt i32 %5, %1
  br i1 %6, label %7, label %24

7:                                                ; preds = %3
  %8 = zext i32 %1 to i64
  %9 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 4, i32 0
  %10 = load i64*, i64** %9, align 8
  %11 = lshr i64 %8, 6
  %12 = getelementptr inbounds i64, i64* %10, i64 %11
  %13 = and i64 %8, 63
  %14 = shl i64 1, %13
  br i1 %2, label %15, label %18

15:                                               ; preds = %7
  %16 = load i64, i64* %12, align 8
  %17 = or i64 %16, %14
  br label %22

18:                                               ; preds = %7
  %19 = xor i64 %14, -1
  %20 = load i64, i64* %12, align 8
  %21 = and i64 %20, %19
  br label %22

22:                                               ; preds = %15, %18
  %23 = phi i64 [ %21, %18 ], [ %17, %15 ]
  store i64 %23, i64* %12, align 8
  br label %24

24:                                               ; preds = %22, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN5ppapi23VpnProviderSharedBuffer9GetBufferEj(%"class.ppapi::VpnProviderSharedBuffer"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp ugt i32 %5, %1
  br i1 %6, label %7, label %26

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 3, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 3, i32 0, i32 2
  %13 = load i64, i64* %12, align 8
  br label %14

14:                                               ; preds = %7, %11
  %15 = phi i64 [ 0, %7 ], [ %13, %11 ]
  %16 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %0, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = mul i32 %17, %1
  %19 = zext i32 %18 to i64
  %20 = icmp ult i64 %15, %19
  br i1 %20, label %21, label %24

21:                                               ; preds = %14
  %22 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #7
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 403, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0)) #7
  %23 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #7
  br label %24

24:                                               ; preds = %14, %21
  %25 = getelementptr inbounds i8, i8* %9, i64 %19
  br label %26

26:                                               ; preds = %2, %24
  %27 = phi i8* [ %25, %24 ], [ null, %2 ]
  ret i8* %27
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5ppapi23VpnProviderSharedBuffer15DuplicateRegionEv(%"class.base::UnsafeSharedMemoryRegion"* noalias sret, %"class.ppapi::VpnProviderSharedBuffer"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.ppapi::VpnProviderSharedBuffer", %"class.ppapi::VpnProviderSharedBuffer"* %1, i64 0, i32 2
  tail call void @_ZNK4base24UnsafeSharedMemoryRegion9DuplicateEv(%"class.base::UnsafeSharedMemoryRegion"* sret %0, %"class.base::UnsafeSharedMemoryRegion"* %3) #7
  ret void
}

declare void @_ZNK4base24UnsafeSharedMemoryRegion9DuplicateEv(%"class.base::UnsafeSharedMemoryRegion"* sret, %"class.base::UnsafeSharedMemoryRegion"*) local_unnamed_addr #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
