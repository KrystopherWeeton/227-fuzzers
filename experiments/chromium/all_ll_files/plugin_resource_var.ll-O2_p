; ModuleID = '../../ppapi/proxy/plugin_resource_var.cc'
source_filename = "../../ppapi/proxy/plugin_resource_var.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.PluginResourceVar = type { %"class.ppapi::ResourceVar", %class.scoped_refptr }
%"class.ppapi::ResourceVar" = type { %"class.ppapi::Var" }
%"class.ppapi::Var" = type { i32 (...)**, %"class.base::RefCounted", i32 }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%class.scoped_refptr = type { %"class.ppapi::Resource"* }
%"class.ppapi::Resource" = type { i32 (...)**, %"class.base::RefCountedThreadSafe", i32, %"class.ppapi::HostResource" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.ppapi::HostResource" = type { i32, i32 }
%"class.ppapi::StringVar" = type { %"class.ppapi::Var", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.ppapi::ArrayBufferVar" = type { %"class.ppapi::Var" }
%"class.ppapi::V8ObjectVar" = type opaque
%"class.ppapi::ProxyObjectVar" = type opaque
%"class.ppapi::ArrayVar" = type opaque
%"class.ppapi::DictionaryVar" = type opaque
%"class.IPC::Message" = type opaque

@_ZTV17PluginResourceVar = hidden unnamed_addr constant { [17 x i8*] } { [17 x i8*] [i8* null, i8* null, i8* bitcast (%"class.ppapi::StringVar"* (%"class.ppapi::Var"*)* @_ZN5ppapi3Var11AsStringVarEv to i8*), i8* bitcast (%"class.ppapi::ArrayBufferVar"* (%"class.ppapi::Var"*)* @_ZN5ppapi3Var16AsArrayBufferVarEv to i8*), i8* bitcast (%"class.ppapi::V8ObjectVar"* (%"class.ppapi::Var"*)* @_ZN5ppapi3Var13AsV8ObjectVarEv to i8*), i8* bitcast (%"class.ppapi::ProxyObjectVar"* (%"class.ppapi::Var"*)* @_ZN5ppapi3Var16AsProxyObjectVarEv to i8*), i8* bitcast (%"class.ppapi::ArrayVar"* (%"class.ppapi::Var"*)* @_ZN5ppapi3Var10AsArrayVarEv to i8*), i8* bitcast (%"class.ppapi::DictionaryVar"* (%"class.ppapi::Var"*)* @_ZN5ppapi3Var15AsDictionaryVarEv to i8*), i8* bitcast (%"class.ppapi::ResourceVar"* (%"class.ppapi::ResourceVar"*)* @_ZN5ppapi11ResourceVar13AsResourceVarEv to i8*), i8* bitcast (i32 (%"class.ppapi::ResourceVar"*)* @_ZNK5ppapi11ResourceVar7GetTypeEv to i8*), i8* bitcast (void (%class.PluginResourceVar*)* @_ZN17PluginResourceVarD2Ev to i8*), i8* bitcast (void (%class.PluginResourceVar*)* @_ZN17PluginResourceVarD0Ev to i8*), i8* bitcast (i32 (%class.PluginResourceVar*)* @_ZNK17PluginResourceVar13GetPPResourceEv to i8*), i8* bitcast (i32 (%"class.ppapi::ResourceVar"*)* @_ZNK5ppapi11ResourceVar24GetPendingRendererHostIdEv to i8*), i8* bitcast (i32 (%"class.ppapi::ResourceVar"*)* @_ZNK5ppapi11ResourceVar23GetPendingBrowserHostIdEv to i8*), i8* bitcast (%"class.IPC::Message"* (%"class.ppapi::ResourceVar"*)* @_ZNK5ppapi11ResourceVar18GetCreationMessageEv to i8*), i8* bitcast (i1 (%class.PluginResourceVar*)* @_ZNK17PluginResourceVar9IsPendingEv to i8*)] }, align 8

@_ZN17PluginResourceVarC1Ev = hidden unnamed_addr alias void (%class.PluginResourceVar*), void (%class.PluginResourceVar*)* @_ZN17PluginResourceVarC2Ev
@_ZN17PluginResourceVarC1EPN5ppapi8ResourceE = hidden unnamed_addr alias void (%class.PluginResourceVar*, %"class.ppapi::Resource"*), void (%class.PluginResourceVar*, %"class.ppapi::Resource"*)* @_ZN17PluginResourceVarC2EPN5ppapi8ResourceE
@_ZN17PluginResourceVarD1Ev = hidden unnamed_addr alias void (%class.PluginResourceVar*), void (%class.PluginResourceVar*)* @_ZN17PluginResourceVarD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17PluginResourceVarC2Ev(%class.PluginResourceVar*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.PluginResourceVar, %class.PluginResourceVar* %0, i64 0, i32 0
  tail call void @_ZN5ppapi11ResourceVarC2Ev(%"class.ppapi::ResourceVar"* %2) #6
  %3 = getelementptr inbounds %class.PluginResourceVar, %class.PluginResourceVar* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*] }, { [17 x i8*] }* @_ZTV17PluginResourceVar, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.PluginResourceVar, %class.PluginResourceVar* %0, i64 0, i32 1, i32 0
  store %"class.ppapi::Resource"* null, %"class.ppapi::Resource"** %4, align 8
  ret void
}

declare void @_ZN5ppapi11ResourceVarC2Ev(%"class.ppapi::ResourceVar"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17PluginResourceVarC2EPN5ppapi8ResourceE(%class.PluginResourceVar*, %"class.ppapi::Resource"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.PluginResourceVar, %class.PluginResourceVar* %0, i64 0, i32 0
  tail call void @_ZN5ppapi11ResourceVarC2Ev(%"class.ppapi::ResourceVar"* %3) #6
  %4 = getelementptr inbounds %class.PluginResourceVar, %class.PluginResourceVar* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*] }, { [17 x i8*] }* @_ZTV17PluginResourceVar, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %class.PluginResourceVar, %class.PluginResourceVar* %0, i64 0, i32 1, i32 0
  store %"class.ppapi::Resource"* %1, %"class.ppapi::Resource"** %5, align 8
  %6 = icmp eq %"class.ppapi::Resource"* %1, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.ppapi::Resource", %"class.ppapi::Resource"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 1 monotonic
  br label %10

10:                                               ; preds = %2, %7
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK17PluginResourceVar13GetPPResourceEv(%class.PluginResourceVar* nocapture readonly) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.PluginResourceVar, %class.PluginResourceVar* %0, i64 0, i32 1, i32 0
  %3 = load %"class.ppapi::Resource"*, %"class.ppapi::Resource"** %2, align 8
  %4 = icmp eq %"class.ppapi::Resource"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.ppapi::Resource", %"class.ppapi::Resource"* %3, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i32 [ %7, %5 ], [ 0, %1 ]
  ret i32 %9
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK17PluginResourceVar9IsPendingEv(%class.PluginResourceVar* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17PluginResourceVarD2Ev(%class.PluginResourceVar*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.PluginResourceVar, %class.PluginResourceVar* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*] }, { [17 x i8*] }* @_ZTV17PluginResourceVar, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.PluginResourceVar, %class.PluginResourceVar* %0, i64 0, i32 1, i32 0
  %4 = load %"class.ppapi::Resource"*, %"class.ppapi::Resource"** %3, align 8
  %5 = icmp eq %"class.ppapi::Resource"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.ppapi::Resource", %"class.ppapi::Resource"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %18

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %12 to %"class.ppapi::Resource"*
  %14 = bitcast %"class.base::RefCountedThreadSafe"* %12 to void (%"class.ppapi::Resource"*)***
  %15 = load void (%"class.ppapi::Resource"*)**, void (%"class.ppapi::Resource"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.ppapi::Resource"*)*, void (%"class.ppapi::Resource"*)** %15, i64 1
  %17 = load void (%"class.ppapi::Resource"*)*, void (%"class.ppapi::Resource"*)** %16, align 8
  tail call void %17(%"class.ppapi::Resource"* nonnull %13) #6
  br label %18

18:                                               ; preds = %1, %6, %11
  %19 = getelementptr inbounds %class.PluginResourceVar, %class.PluginResourceVar* %0, i64 0, i32 0
  tail call void @_ZN5ppapi11ResourceVarD2Ev(%"class.ppapi::ResourceVar"* %19) #6
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5ppapi11ResourceVarD2Ev(%"class.ppapi::ResourceVar"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17PluginResourceVarD0Ev(%class.PluginResourceVar*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.PluginResourceVar, %class.PluginResourceVar* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*] }, { [17 x i8*] }* @_ZTV17PluginResourceVar, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.PluginResourceVar, %class.PluginResourceVar* %0, i64 0, i32 1, i32 0
  %4 = load %"class.ppapi::Resource"*, %"class.ppapi::Resource"** %3, align 8
  %5 = icmp eq %"class.ppapi::Resource"* %4, null
  br i1 %5, label %18, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.ppapi::Resource", %"class.ppapi::Resource"* %4, i64 0, i32 1
  %8 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw sub i32* %8, i32 1 acq_rel
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %18

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %7, i64 -2
  %13 = bitcast %"class.base::RefCountedThreadSafe"* %12 to %"class.ppapi::Resource"*
  %14 = bitcast %"class.base::RefCountedThreadSafe"* %12 to void (%"class.ppapi::Resource"*)***
  %15 = load void (%"class.ppapi::Resource"*)**, void (%"class.ppapi::Resource"*)*** %14, align 8
  %16 = getelementptr inbounds void (%"class.ppapi::Resource"*)*, void (%"class.ppapi::Resource"*)** %15, i64 1
  %17 = load void (%"class.ppapi::Resource"*)*, void (%"class.ppapi::Resource"*)** %16, align 8
  tail call void %17(%"class.ppapi::Resource"* nonnull %13) #6
  br label %18

18:                                               ; preds = %1, %6, %11
  %19 = getelementptr inbounds %class.PluginResourceVar, %class.PluginResourceVar* %0, i64 0, i32 0
  tail call void @_ZN5ppapi11ResourceVarD2Ev(%"class.ppapi::ResourceVar"* %19) #6
  %20 = bitcast %class.PluginResourceVar* %0 to i8*
  tail call void @_ZdlPv(i8* %20) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare %"class.ppapi::StringVar"* @_ZN5ppapi3Var11AsStringVarEv(%"class.ppapi::Var"*) unnamed_addr #1

declare %"class.ppapi::ArrayBufferVar"* @_ZN5ppapi3Var16AsArrayBufferVarEv(%"class.ppapi::Var"*) unnamed_addr #1

declare %"class.ppapi::V8ObjectVar"* @_ZN5ppapi3Var13AsV8ObjectVarEv(%"class.ppapi::Var"*) unnamed_addr #1

declare %"class.ppapi::ProxyObjectVar"* @_ZN5ppapi3Var16AsProxyObjectVarEv(%"class.ppapi::Var"*) unnamed_addr #1

declare %"class.ppapi::ArrayVar"* @_ZN5ppapi3Var10AsArrayVarEv(%"class.ppapi::Var"*) unnamed_addr #1

declare %"class.ppapi::DictionaryVar"* @_ZN5ppapi3Var15AsDictionaryVarEv(%"class.ppapi::Var"*) unnamed_addr #1

declare %"class.ppapi::ResourceVar"* @_ZN5ppapi11ResourceVar13AsResourceVarEv(%"class.ppapi::ResourceVar"*) unnamed_addr #1

declare i32 @_ZNK5ppapi11ResourceVar7GetTypeEv(%"class.ppapi::ResourceVar"*) unnamed_addr #1

declare i32 @_ZNK5ppapi11ResourceVar24GetPendingRendererHostIdEv(%"class.ppapi::ResourceVar"*) unnamed_addr #1

declare i32 @_ZNK5ppapi11ResourceVar23GetPendingBrowserHostIdEv(%"class.ppapi::ResourceVar"*) unnamed_addr #1

declare %"class.IPC::Message"* @_ZNK5ppapi11ResourceVar18GetCreationMessageEv(%"class.ppapi::ResourceVar"*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
