; ModuleID = '../../third_party/libaom/source/libaom/av1/common/seg_common.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/seg_common.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }

@seg_feature_data_max = internal unnamed_addr constant [8 x i32] [i32 255, i32 63, i32 63, i32 63, i32 63, i32 7, i32 0, i32 0], align 16
@seg_feature_data_signed = internal unnamed_addr constant [8 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_clearall_segfeatures(%struct.segmentation* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 4
  %3 = bitcast [8 x [8 x i16]]* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 160, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_calculate_segdata(%struct.segmentation* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 7
  store i8 0, i8* %2, align 4
  %3 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 6
  store i32 0, i32* %3, align 4
  br label %4

4:                                                ; preds = %108, %1
  %5 = phi i8 [ 0, %1 ], [ %109, %108 ]
  %6 = phi i8 [ 0, %1 ], [ %110, %108 ]
  %7 = phi i8 [ 0, %1 ], [ %111, %108 ]
  %8 = phi i8 [ 0, %1 ], [ %112, %108 ]
  %9 = phi i8 [ 0, %1 ], [ %113, %108 ]
  %10 = phi i8 [ 0, %1 ], [ %114, %108 ]
  %11 = phi i64 [ 0, %1 ], [ %115, %108 ]
  %12 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 5, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %20, label %17

16:                                               ; preds = %108
  ret void

17:                                               ; preds = %4
  store i8 %10, i8* %2, align 4
  %18 = trunc i64 %11 to i32
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %12, align 4
  br label %20

20:                                               ; preds = %4, %17
  %21 = phi i8 [ %5, %4 ], [ %10, %17 ]
  %22 = phi i8 [ %6, %4 ], [ %10, %17 ]
  %23 = phi i8 [ %7, %4 ], [ %10, %17 ]
  %24 = phi i8 [ %8, %4 ], [ %10, %17 ]
  %25 = phi i8 [ %9, %4 ], [ %10, %17 ]
  %26 = phi i32 [ %13, %4 ], [ %19, %17 ]
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %32, label %29

29:                                               ; preds = %20
  store i8 %25, i8* %2, align 4
  %30 = trunc i64 %11 to i32
  store i32 %30, i32* %3, align 4
  %31 = load i32, i32* %12, align 4
  br label %32

32:                                               ; preds = %29, %20
  %33 = phi i8 [ %25, %29 ], [ %21, %20 ]
  %34 = phi i8 [ %25, %29 ], [ %22, %20 ]
  %35 = phi i8 [ %25, %29 ], [ %23, %20 ]
  %36 = phi i8 [ %25, %29 ], [ %24, %20 ]
  %37 = phi i32 [ %31, %29 ], [ %26, %20 ]
  %38 = phi i8 [ %25, %29 ], [ %10, %20 ]
  %39 = and i32 %37, 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %32
  store i8 %36, i8* %2, align 4
  %42 = trunc i64 %11 to i32
  store i32 %42, i32* %3, align 4
  %43 = load i32, i32* %12, align 4
  br label %44

44:                                               ; preds = %41, %32
  %45 = phi i8 [ %36, %41 ], [ %33, %32 ]
  %46 = phi i8 [ %36, %41 ], [ %34, %32 ]
  %47 = phi i8 [ %36, %41 ], [ %35, %32 ]
  %48 = phi i32 [ %43, %41 ], [ %37, %32 ]
  %49 = phi i8 [ %36, %41 ], [ %25, %32 ]
  %50 = phi i8 [ %36, %41 ], [ %38, %32 ]
  %51 = and i32 %48, 8
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %56, label %53

53:                                               ; preds = %44
  store i8 %47, i8* %2, align 4
  %54 = trunc i64 %11 to i32
  store i32 %54, i32* %3, align 4
  %55 = load i32, i32* %12, align 4
  br label %56

56:                                               ; preds = %53, %44
  %57 = phi i8 [ %47, %53 ], [ %45, %44 ]
  %58 = phi i8 [ %47, %53 ], [ %46, %44 ]
  %59 = phi i32 [ %55, %53 ], [ %48, %44 ]
  %60 = phi i8 [ %47, %53 ], [ %36, %44 ]
  %61 = phi i8 [ %47, %53 ], [ %49, %44 ]
  %62 = phi i8 [ %47, %53 ], [ %50, %44 ]
  %63 = and i32 %59, 16
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %68, label %65

65:                                               ; preds = %56
  store i8 %58, i8* %2, align 4
  %66 = trunc i64 %11 to i32
  store i32 %66, i32* %3, align 4
  %67 = load i32, i32* %12, align 4
  br label %68

68:                                               ; preds = %65, %56
  %69 = phi i8 [ %58, %65 ], [ %57, %56 ]
  %70 = phi i32 [ %67, %65 ], [ %59, %56 ]
  %71 = phi i8 [ %58, %65 ], [ %47, %56 ]
  %72 = phi i8 [ %58, %65 ], [ %60, %56 ]
  %73 = phi i8 [ %58, %65 ], [ %61, %56 ]
  %74 = phi i8 [ %58, %65 ], [ %62, %56 ]
  %75 = and i32 %70, 32
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %81, label %77

77:                                               ; preds = %68
  %78 = or i8 %69, 1
  store i8 %78, i8* %2, align 4
  %79 = trunc i64 %11 to i32
  store i32 %79, i32* %3, align 4
  %80 = load i32, i32* %12, align 4
  br label %81

81:                                               ; preds = %77, %68
  %82 = phi i32 [ %80, %77 ], [ %70, %68 ]
  %83 = phi i8 [ %78, %77 ], [ %69, %68 ]
  %84 = phi i8 [ %78, %77 ], [ %58, %68 ]
  %85 = phi i8 [ %78, %77 ], [ %71, %68 ]
  %86 = phi i8 [ %78, %77 ], [ %72, %68 ]
  %87 = phi i8 [ %78, %77 ], [ %73, %68 ]
  %88 = phi i8 [ %78, %77 ], [ %74, %68 ]
  %89 = and i32 %82, 64
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %95, label %91

91:                                               ; preds = %81
  %92 = or i8 %83, 1
  store i8 %92, i8* %2, align 4
  %93 = trunc i64 %11 to i32
  store i32 %93, i32* %3, align 4
  %94 = load i32, i32* %12, align 4
  br label %95

95:                                               ; preds = %91, %81
  %96 = phi i32 [ %94, %91 ], [ %82, %81 ]
  %97 = phi i8 [ %92, %91 ], [ %83, %81 ]
  %98 = phi i8 [ %92, %91 ], [ %84, %81 ]
  %99 = phi i8 [ %92, %91 ], [ %85, %81 ]
  %100 = phi i8 [ %92, %91 ], [ %86, %81 ]
  %101 = phi i8 [ %92, %91 ], [ %87, %81 ]
  %102 = phi i8 [ %92, %91 ], [ %88, %81 ]
  %103 = trunc i32 %96 to i8
  %104 = icmp sgt i8 %103, -1
  br i1 %104, label %108, label %105

105:                                              ; preds = %95
  %106 = or i8 %97, 1
  store i8 %106, i8* %2, align 4
  %107 = trunc i64 %11 to i32
  store i32 %107, i32* %3, align 4
  br label %108

108:                                              ; preds = %105, %95
  %109 = phi i8 [ %106, %105 ], [ %97, %95 ]
  %110 = phi i8 [ %106, %105 ], [ %98, %95 ]
  %111 = phi i8 [ %106, %105 ], [ %99, %95 ]
  %112 = phi i8 [ %106, %105 ], [ %100, %95 ]
  %113 = phi i8 [ %106, %105 ], [ %101, %95 ]
  %114 = phi i8 [ %106, %105 ], [ %102, %95 ]
  %115 = add nuw nsw i64 %11, 1
  %116 = icmp eq i64 %115, 8
  br i1 %116, label %16, label %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_enable_segfeature(%struct.segmentation* nocapture, i32, i8 zeroext) local_unnamed_addr #2 {
  %4 = zext i8 %2 to i32
  %5 = shl i32 1, %4
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 5, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = or i32 %8, %5
  store i32 %9, i32* %7, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @av1_seg_feature_data_max(i8 zeroext) local_unnamed_addr #3 {
  %2 = zext i8 %0 to i64
  %3 = getelementptr inbounds [8 x i32], [8 x i32]* @seg_feature_data_max, i64 0, i64 %2
  %4 = load i32, i32* %3, align 4
  ret i32 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @av1_is_segfeature_signed(i8 zeroext) local_unnamed_addr #3 {
  %2 = zext i8 %0 to i64
  %3 = getelementptr inbounds [8 x i32], [8 x i32]* @seg_feature_data_signed, i64 0, i64 %2
  %4 = load i32, i32* %3, align 4
  ret i32 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @av1_set_segdata(%struct.segmentation* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #4 {
  %5 = trunc i32 %3 to i16
  %6 = sext i32 %1 to i64
  %7 = zext i8 %2 to i64
  %8 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %0, i64 0, i32 4, i64 %6, i64 %7
  store i16 %5, i16* %8, align 2
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
